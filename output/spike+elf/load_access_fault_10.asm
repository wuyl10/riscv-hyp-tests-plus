
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrwi	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	addi	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	00033517          	auipc	a0,0x33
    80000012:	ff250513          	addi	a0,a0,-14 # 80033000 <__bss_start>
    la a1, __bss_end
    80000016:	00049597          	auipc	a1,0x49
    8000001a:	0c258593          	addi	a1,a1,194 # 800490d8 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	124250ef          	jal	80025150 <_init>
    call main
    80000030:	28a250ef          	jal	800252ba <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	38d240ef          	jal	80024bc2 <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000003e:	00025597          	auipc	a1,0x25
    80000042:	31258593          	addi	a1,a1,786 # 80025350 <__func__.1>
    80000046:	00027517          	auipc	a0,0x27
    8000004a:	e5a50513          	addi	a0,a0,-422 # 80026ea0 <__func__.0+0x2e0>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    80000058:	e052                	sd	s4,0(sp)
    TEST_START();
    8000005a:	6ab240ef          	jal	80024f04 <printf>
    8000005e:	4529                	li	a0,10
    80000060:	4af230ef          	jal	80023d0e <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000064:	30302973          	csrr	s2,mideleg
    80000068:	30305073          	csrwi	mideleg,0
    8000006c:	30302473          	csrr	s0,mideleg
    80000070:	00027617          	auipc	a2,0x27
    80000074:	e4060613          	addi	a2,a2,-448 # 80026eb0 <__func__.0+0x2f0>
    80000078:	08200593          	li	a1,130
    8000007c:	00027517          	auipc	a0,0x27
    80000080:	e3c50513          	addi	a0,a0,-452 # 80026eb8 <__func__.0+0x2f8>
    80000084:	44400493          	li	s1,1092
    80000088:	67d240ef          	jal	80024f04 <printf>
    8000008c:	46940163          	beq	s0,s1,800004ee <check_csr_field_spec+0x4b2>
    80000090:	00027597          	auipc	a1,0x27
    80000094:	e0058593          	addi	a1,a1,-512 # 80026e90 <__func__.0+0x2d0>
    80000098:	00027517          	auipc	a0,0x27
    8000009c:	e3850513          	addi	a0,a0,-456 # 80026ed0 <__func__.0+0x310>
    800000a0:	665240ef          	jal	80024f04 <printf>
    800000a4:	00027517          	auipc	a0,0x27
    800000a8:	e3450513          	addi	a0,a0,-460 # 80026ed8 <__func__.0+0x318>
    800000ac:	659240ef          	jal	80024f04 <printf>
    800000b0:	8622                	mv	a2,s0
    800000b2:	86a6                	mv	a3,s1
    800000b4:	4581                	li	a1,0
    800000b6:	00027517          	auipc	a0,0x27
    800000ba:	e2a50513          	addi	a0,a0,-470 # 80026ee0 <__func__.0+0x320>
    800000be:	647240ef          	jal	80024f04 <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	449230ef          	jal	80023d0e <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	443230ef          	jal	80023d0e <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30391073          	csrw	mideleg,s2
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	00027617          	auipc	a2,0x27
    800000e8:	e1460613          	addi	a2,a2,-492 # 80026ef8 <__func__.0+0x338>
    800000ec:	08200593          	li	a1,130
    800000f0:	00027517          	auipc	a0,0x27
    800000f4:	dc850513          	addi	a0,a0,-568 # 80026eb8 <__func__.0+0x2f8>
    800000f8:	60d240ef          	jal	80024f04 <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	00027597          	auipc	a1,0x27
    80000104:	d9058593          	addi	a1,a1,-624 # 80026e90 <__func__.0+0x2d0>
    80000108:	00027517          	auipc	a0,0x27
    8000010c:	dc850513          	addi	a0,a0,-568 # 80026ed0 <__func__.0+0x310>
    80000110:	5f5240ef          	jal	80024f04 <printf>
    80000114:	00027517          	auipc	a0,0x27
    80000118:	dc450513          	addi	a0,a0,-572 # 80026ed8 <__func__.0+0x318>
    8000011c:	5e9240ef          	jal	80024f04 <printf>
    80000120:	86a6                	mv	a3,s1
    80000122:	864a                	mv	a2,s2
    80000124:	85a6                	mv	a1,s1
    80000126:	00027517          	auipc	a0,0x27
    8000012a:	dba50513          	addi	a0,a0,-582 # 80026ee0 <__func__.0+0x320>
    8000012e:	5d7240ef          	jal	80024f04 <printf>
    80000132:	02900513          	li	a0,41
    80000136:	3d9230ef          	jal	80023d0e <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	3d3230ef          	jal	80023d0e <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	00027617          	auipc	a2,0x27
    80000158:	dac60613          	addi	a2,a2,-596 # 80026f00 <__func__.0+0x340>
    8000015c:	08200593          	li	a1,130
    80000160:	00027517          	auipc	a0,0x27
    80000164:	d5850513          	addi	a0,a0,-680 # 80026eb8 <__func__.0+0x2f8>
    80000168:	59d240ef          	jal	80024f04 <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	00027597          	auipc	a1,0x27
    80000174:	d2058593          	addi	a1,a1,-736 # 80026e90 <__func__.0+0x2d0>
    80000178:	00027517          	auipc	a0,0x27
    8000017c:	d5850513          	addi	a0,a0,-680 # 80026ed0 <__func__.0+0x310>
    80000180:	585240ef          	jal	80024f04 <printf>
    80000184:	00027517          	auipc	a0,0x27
    80000188:	d5450513          	addi	a0,a0,-684 # 80026ed8 <__func__.0+0x318>
    8000018c:	579240ef          	jal	80024f04 <printf>
    80000190:	86a6                	mv	a3,s1
    80000192:	864a                	mv	a2,s2
    80000194:	85a6                	mv	a1,s1
    80000196:	00027517          	auipc	a0,0x27
    8000019a:	d4a50513          	addi	a0,a0,-694 # 80026ee0 <__func__.0+0x320>
    8000019e:	567240ef          	jal	80024f04 <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	369230ef          	jal	80023d0e <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	363230ef          	jal	80023d0e <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402a73          	csrr	s4,hie
    800001ba:	54fd                	li	s1,-1
    800001bc:	60449073          	csrw	hie,s1
    800001c0:	60402973          	csrr	s2,hie
    800001c4:	00027617          	auipc	a2,0x27
    800001c8:	d4460613          	addi	a2,a2,-700 # 80026f08 <__func__.0+0x348>
    800001cc:	08200593          	li	a1,130
    800001d0:	00027517          	auipc	a0,0x27
    800001d4:	ce850513          	addi	a0,a0,-792 # 80026eb8 <__func__.0+0x2f8>
    800001d8:	44400993          	li	s3,1092
    800001dc:	529240ef          	jal	80024f04 <printf>
    800001e0:	2d390b63          	beq	s2,s3,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	00027597          	auipc	a1,0x27
    800001e8:	cac58593          	addi	a1,a1,-852 # 80026e90 <__func__.0+0x2d0>
    800001ec:	00027517          	auipc	a0,0x27
    800001f0:	ce450513          	addi	a0,a0,-796 # 80026ed0 <__func__.0+0x310>
    800001f4:	511240ef          	jal	80024f04 <printf>
    800001f8:	00027517          	auipc	a0,0x27
    800001fc:	ce050513          	addi	a0,a0,-800 # 80026ed8 <__func__.0+0x318>
    80000200:	505240ef          	jal	80024f04 <printf>
    80000204:	86ce                	mv	a3,s3
    80000206:	864a                	mv	a2,s2
    80000208:	85a6                	mv	a1,s1
    8000020a:	00027517          	auipc	a0,0x27
    8000020e:	cd650513          	addi	a0,a0,-810 # 80026ee0 <__func__.0+0x320>
    80000212:	4f3240ef          	jal	80024f04 <printf>
    80000216:	02900513          	li	a0,41
    8000021a:	2f5230ef          	jal	80023d0e <putchar>
    8000021e:	4529                	li	a0,10
    80000220:	2ef230ef          	jal	80023d0e <putchar>
    80000224:	4401                	li	s0,0
    80000226:	604a1073          	csrw	hie,s4
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022a:	643029f3          	csrr	s3,htval
    8000022e:	54fd                	li	s1,-1
    80000230:	64349073          	csrw	htval,s1
    80000234:	64302973          	csrr	s2,htval
    80000238:	00027617          	auipc	a2,0x27
    8000023c:	cd860613          	addi	a2,a2,-808 # 80026f10 <__func__.0+0x350>
    80000240:	08200593          	li	a1,130
    80000244:	00027517          	auipc	a0,0x27
    80000248:	c7450513          	addi	a0,a0,-908 # 80026eb8 <__func__.0+0x2f8>
    8000024c:	4b9240ef          	jal	80024f04 <printf>
    80000250:	24990563          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000254:	00027597          	auipc	a1,0x27
    80000258:	c3c58593          	addi	a1,a1,-964 # 80026e90 <__func__.0+0x2d0>
    8000025c:	00027517          	auipc	a0,0x27
    80000260:	c7450513          	addi	a0,a0,-908 # 80026ed0 <__func__.0+0x310>
    80000264:	4a1240ef          	jal	80024f04 <printf>
    80000268:	00027517          	auipc	a0,0x27
    8000026c:	c7050513          	addi	a0,a0,-912 # 80026ed8 <__func__.0+0x318>
    80000270:	495240ef          	jal	80024f04 <printf>
    80000274:	86a6                	mv	a3,s1
    80000276:	864a                	mv	a2,s2
    80000278:	85a6                	mv	a1,s1
    8000027a:	00027517          	auipc	a0,0x27
    8000027e:	c6650513          	addi	a0,a0,-922 # 80026ee0 <__func__.0+0x320>
    80000282:	483240ef          	jal	80024f04 <printf>
    80000286:	02900513          	li	a0,41
    8000028a:	285230ef          	jal	80023d0e <putchar>
    8000028e:	4529                	li	a0,10
    80000290:	27f230ef          	jal	80023d0e <putchar>
    80000294:	4401                	li	s0,0
    80000296:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029a:	64a029f3          	csrr	s3,htinst
    8000029e:	54fd                	li	s1,-1
    800002a0:	64a49073          	csrw	htinst,s1
    800002a4:	64a02973          	csrr	s2,htinst
    800002a8:	00027617          	auipc	a2,0x27
    800002ac:	c7060613          	addi	a2,a2,-912 # 80026f18 <__func__.0+0x358>
    800002b0:	08200593          	li	a1,130
    800002b4:	00027517          	auipc	a0,0x27
    800002b8:	c0450513          	addi	a0,a0,-1020 # 80026eb8 <__func__.0+0x2f8>
    800002bc:	449240ef          	jal	80024f04 <printf>
    800002c0:	1a990f63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c4:	00027597          	auipc	a1,0x27
    800002c8:	bcc58593          	addi	a1,a1,-1076 # 80026e90 <__func__.0+0x2d0>
    800002cc:	00027517          	auipc	a0,0x27
    800002d0:	c0450513          	addi	a0,a0,-1020 # 80026ed0 <__func__.0+0x310>
    800002d4:	431240ef          	jal	80024f04 <printf>
    800002d8:	00027517          	auipc	a0,0x27
    800002dc:	c0050513          	addi	a0,a0,-1024 # 80026ed8 <__func__.0+0x318>
    800002e0:	425240ef          	jal	80024f04 <printf>
    800002e4:	86a6                	mv	a3,s1
    800002e6:	864a                	mv	a2,s2
    800002e8:	85a6                	mv	a1,s1
    800002ea:	00027517          	auipc	a0,0x27
    800002ee:	bf650513          	addi	a0,a0,-1034 # 80026ee0 <__func__.0+0x320>
    800002f2:	413240ef          	jal	80024f04 <printf>
    800002f6:	02900513          	li	a0,41
    800002fa:	215230ef          	jal	80023d0e <putchar>
    800002fe:	4529                	li	a0,10
    80000300:	20f230ef          	jal	80023d0e <putchar>
    80000304:	4401                	li	s0,0
    80000306:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030a:	240029f3          	csrr	s3,vsscratch
    8000030e:	54fd                	li	s1,-1
    80000310:	24049073          	csrw	vsscratch,s1
    80000314:	24002973          	csrr	s2,vsscratch
    80000318:	00027617          	auipc	a2,0x27
    8000031c:	c0860613          	addi	a2,a2,-1016 # 80026f20 <__func__.0+0x360>
    80000320:	08200593          	li	a1,130
    80000324:	00027517          	auipc	a0,0x27
    80000328:	b9450513          	addi	a0,a0,-1132 # 80026eb8 <__func__.0+0x2f8>
    8000032c:	3d9240ef          	jal	80024f04 <printf>
    80000330:	12990963          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000334:	00027597          	auipc	a1,0x27
    80000338:	b5c58593          	addi	a1,a1,-1188 # 80026e90 <__func__.0+0x2d0>
    8000033c:	00027517          	auipc	a0,0x27
    80000340:	b9450513          	addi	a0,a0,-1132 # 80026ed0 <__func__.0+0x310>
    80000344:	3c1240ef          	jal	80024f04 <printf>
    80000348:	00027517          	auipc	a0,0x27
    8000034c:	b9050513          	addi	a0,a0,-1136 # 80026ed8 <__func__.0+0x318>
    80000350:	3b5240ef          	jal	80024f04 <printf>
    80000354:	86a6                	mv	a3,s1
    80000356:	864a                	mv	a2,s2
    80000358:	85a6                	mv	a1,s1
    8000035a:	00027517          	auipc	a0,0x27
    8000035e:	b8650513          	addi	a0,a0,-1146 # 80026ee0 <__func__.0+0x320>
    80000362:	3a3240ef          	jal	80024f04 <printf>
    80000366:	02900513          	li	a0,41
    8000036a:	1a5230ef          	jal	80023d0e <putchar>
    8000036e:	4529                	li	a0,10
    80000370:	19f230ef          	jal	80023d0e <putchar>
    80000374:	4401                	li	s0,0
    80000376:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037a:	243029f3          	csrr	s3,vstval
    8000037e:	54fd                	li	s1,-1
    80000380:	24349073          	csrw	vstval,s1
    80000384:	24302973          	csrr	s2,vstval
    80000388:	00027617          	auipc	a2,0x27
    8000038c:	ba860613          	addi	a2,a2,-1112 # 80026f30 <__func__.0+0x370>
    80000390:	08200593          	li	a1,130
    80000394:	00027517          	auipc	a0,0x27
    80000398:	b2450513          	addi	a0,a0,-1244 # 80026eb8 <__func__.0+0x2f8>
    8000039c:	369240ef          	jal	80024f04 <printf>
    800003a0:	08990b63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a4:	00027597          	auipc	a1,0x27
    800003a8:	aec58593          	addi	a1,a1,-1300 # 80026e90 <__func__.0+0x2d0>
    800003ac:	00027517          	auipc	a0,0x27
    800003b0:	b2450513          	addi	a0,a0,-1244 # 80026ed0 <__func__.0+0x310>
    800003b4:	351240ef          	jal	80024f04 <printf>
    800003b8:	00027517          	auipc	a0,0x27
    800003bc:	b2050513          	addi	a0,a0,-1248 # 80026ed8 <__func__.0+0x318>
    800003c0:	345240ef          	jal	80024f04 <printf>
    800003c4:	86a6                	mv	a3,s1
    800003c6:	864a                	mv	a2,s2
    800003c8:	85a6                	mv	a1,s1
    800003ca:	00027517          	auipc	a0,0x27
    800003ce:	b1650513          	addi	a0,a0,-1258 # 80026ee0 <__func__.0+0x320>
    800003d2:	333240ef          	jal	80024f04 <printf>
    800003d6:	02900513          	li	a0,41
    800003da:	135230ef          	jal	80023d0e <putchar>
    800003de:	4529                	li	a0,10
    800003e0:	12f230ef          	jal	80023d0e <putchar>
    800003e4:	24399073          	csrw	vstval,s3
    800003e8:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ea:	00027597          	auipc	a1,0x27
    800003ee:	aa658593          	addi	a1,a1,-1370 # 80026e90 <__func__.0+0x2d0>
    800003f2:	00027517          	auipc	a0,0x27
    800003f6:	b4650513          	addi	a0,a0,-1210 # 80026f38 <__func__.0+0x378>
    800003fa:	30b240ef          	jal	80024f04 <printf>
    800003fe:	4511                	li	a0,4
    80000400:	7f6000ef          	jal	80000bf6 <goto_priv>
    80000404:	0a8010ef          	jal	800014ac <reset_state>
}
    80000408:	70a2                	ld	ra,40(sp)
    8000040a:	8522                	mv	a0,s0
    8000040c:	7402                	ld	s0,32(sp)
    8000040e:	64e2                	ld	s1,24(sp)
    80000410:	6942                	ld	s2,16(sp)
    80000412:	69a2                	ld	s3,8(sp)
    80000414:	6a02                	ld	s4,0(sp)
    80000416:	6145                	addi	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	00027597          	auipc	a1,0x27
    8000041e:	a6658593          	addi	a1,a1,-1434 # 80026e80 <__func__.0+0x2c0>
    80000422:	00027517          	auipc	a0,0x27
    80000426:	aae50513          	addi	a0,a0,-1362 # 80026ed0 <__func__.0+0x310>
    8000042a:	2db240ef          	jal	80024f04 <printf>
    8000042e:	4529                	li	a0,10
    80000430:	0df230ef          	jal	80023d0e <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	00027597          	auipc	a1,0x27
    8000043a:	a4a58593          	addi	a1,a1,-1462 # 80026e80 <__func__.0+0x2c0>
    8000043e:	00027517          	auipc	a0,0x27
    80000442:	a9250513          	addi	a0,a0,-1390 # 80026ed0 <__func__.0+0x310>
    80000446:	2bf240ef          	jal	80024f04 <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	0c3230ef          	jal	80023d0e <putchar>
    80000450:	d851                	beqz	s0,800003e4 <check_csr_field_spec+0x3a8>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	00027597          	auipc	a1,0x27
    8000045c:	a2858593          	addi	a1,a1,-1496 # 80026e80 <__func__.0+0x2c0>
    80000460:	bf49                	j	800003f2 <check_csr_field_spec+0x3b6>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	00027597          	auipc	a1,0x27
    80000466:	a1e58593          	addi	a1,a1,-1506 # 80026e80 <__func__.0+0x2c0>
    8000046a:	00027517          	auipc	a0,0x27
    8000046e:	a6650513          	addi	a0,a0,-1434 # 80026ed0 <__func__.0+0x310>
    80000472:	293240ef          	jal	80024f04 <printf>
    80000476:	4529                	li	a0,10
    80000478:	097230ef          	jal	80023d0e <putchar>
    8000047c:	bded                	j	80000376 <check_csr_field_spec+0x33a>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	00027597          	auipc	a1,0x27
    80000482:	a0258593          	addi	a1,a1,-1534 # 80026e80 <__func__.0+0x2c0>
    80000486:	00027517          	auipc	a0,0x27
    8000048a:	a4a50513          	addi	a0,a0,-1462 # 80026ed0 <__func__.0+0x310>
    8000048e:	277240ef          	jal	80024f04 <printf>
    80000492:	4529                	li	a0,10
    80000494:	07b230ef          	jal	80023d0e <putchar>
    80000498:	b5bd                	j	80000306 <check_csr_field_spec+0x2ca>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	00027597          	auipc	a1,0x27
    8000049e:	9e658593          	addi	a1,a1,-1562 # 80026e80 <__func__.0+0x2c0>
    800004a2:	00027517          	auipc	a0,0x27
    800004a6:	a2e50513          	addi	a0,a0,-1490 # 80026ed0 <__func__.0+0x310>
    800004aa:	25b240ef          	jal	80024f04 <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	05f230ef          	jal	80023d0e <putchar>
    800004b4:	b3cd                	j	80000296 <check_csr_field_spec+0x25a>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	00027597          	auipc	a1,0x27
    800004ba:	9ca58593          	addi	a1,a1,-1590 # 80026e80 <__func__.0+0x2c0>
    800004be:	00027517          	auipc	a0,0x27
    800004c2:	a1250513          	addi	a0,a0,-1518 # 80026ed0 <__func__.0+0x310>
    800004c6:	23f240ef          	jal	80024f04 <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	043230ef          	jal	80023d0e <putchar>
    800004d0:	bb99                	j	80000226 <check_csr_field_spec+0x1ea>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	00027597          	auipc	a1,0x27
    800004d6:	9ae58593          	addi	a1,a1,-1618 # 80026e80 <__func__.0+0x2c0>
    800004da:	00027517          	auipc	a0,0x27
    800004de:	9f650513          	addi	a0,a0,-1546 # 80026ed0 <__func__.0+0x310>
    800004e2:	223240ef          	jal	80024f04 <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	027230ef          	jal	80023d0e <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	00027597          	auipc	a1,0x27
    800004f2:	99258593          	addi	a1,a1,-1646 # 80026e80 <__func__.0+0x2c0>
    800004f6:	00027517          	auipc	a0,0x27
    800004fa:	9da50513          	addi	a0,a0,-1574 # 80026ed0 <__func__.0+0x310>
    800004fe:	207240ef          	jal	80024f04 <printf>
    80000502:	4529                	li	a0,10
    80000504:	00b230ef          	jal	80023d0e <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000050e:	00025597          	auipc	a1,0x25
    80000512:	e5a58593          	addi	a1,a1,-422 # 80025368 <__func__.0>
    80000516:	00027517          	auipc	a0,0x27
    8000051a:	98a50513          	addi	a0,a0,-1654 # 80026ea0 <__func__.0+0x2e0>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	1e3240ef          	jal	80024f04 <printf>
    80000526:	4529                	li	a0,10
    80000528:	7e6230ef          	jal	80023d0e <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	00027617          	auipc	a2,0x27
    80000540:	a0460613          	addi	a2,a2,-1532 # 80026f40 <__func__.0+0x380>
    80000544:	08200593          	li	a1,130
    80000548:	00027517          	auipc	a0,0x27
    8000054c:	97050513          	addi	a0,a0,-1680 # 80026eb8 <__func__.0+0x2f8>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	andi	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	1b1240ef          	jal	80024f04 <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	00027597          	auipc	a1,0x27
    8000055e:	92658593          	addi	a1,a1,-1754 # 80026e80 <__func__.0+0x2c0>
    80000562:	00027517          	auipc	a0,0x27
    80000566:	96e50513          	addi	a0,a0,-1682 # 80026ed0 <__func__.0+0x310>
    8000056a:	19b240ef          	jal	80024f04 <printf>
    8000056e:	4529                	li	a0,10
    80000570:	79e230ef          	jal	80023d0e <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	00027597          	auipc	a1,0x27
    80000578:	90c58593          	addi	a1,a1,-1780 # 80026e80 <__func__.0+0x2c0>
    8000057c:	00027517          	auipc	a0,0x27
    80000580:	9bc50513          	addi	a0,a0,-1604 # 80026f38 <__func__.0+0x378>
    80000584:	181240ef          	jal	80024f04 <printf>
    80000588:	4511                	li	a0,4
    8000058a:	66c000ef          	jal	80000bf6 <goto_priv>
    8000058e:	71f000ef          	jal	800014ac <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	addi	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	00027597          	auipc	a1,0x27
    800005a0:	8f458593          	addi	a1,a1,-1804 # 80026e90 <__func__.0+0x2d0>
    800005a4:	00027517          	auipc	a0,0x27
    800005a8:	92c50513          	addi	a0,a0,-1748 # 80026ed0 <__func__.0+0x310>
    800005ac:	159240ef          	jal	80024f04 <printf>
    800005b0:	00027517          	auipc	a0,0x27
    800005b4:	92850513          	addi	a0,a0,-1752 # 80026ed8 <__func__.0+0x318>
    800005b8:	14d240ef          	jal	80024f04 <printf>
    800005bc:	00027517          	auipc	a0,0x27
    800005c0:	9a450513          	addi	a0,a0,-1628 # 80026f60 <__func__.0+0x3a0>
    800005c4:	141240ef          	jal	80024f04 <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	742230ef          	jal	80023d0e <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	73c230ef          	jal	80023d0e <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	addi	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hspt[0][4] =
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800005e0:	00047e17          	auipc	t3,0x47
    800005e4:	a20e0e13          	addi	t3,t3,-1504 # 80047000 <hspt+0x1000>
    hspt[1][0] = 
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005e8:	00048697          	auipc	a3,0x48
    800005ec:	a1868693          	addi	a3,a3,-1512 # 80048000 <hspt+0x2000>
        hspt[0][i] = 
    800005f0:	0cf00e93          	li	t4,207
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    800005f4:	0026d313          	srli	t1,a3,0x2
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    800005f8:	002e5813          	srli	a6,t3,0x2
        hspt[0][i] = 
    800005fc:	100005b7          	lui	a1,0x10000
    80000600:	20000637          	lui	a2,0x20000
    80000604:	300007b7          	lui	a5,0x30000
    80000608:	00046897          	auipc	a7,0x46
    8000060c:	9f888893          	addi	a7,a7,-1544 # 80046000 <hspt>
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    80000610:	00186813          	ori	a6,a6,1
        hspt[0][i] = 
    80000614:	9676                	add	a2,a2,t4
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000616:	00136313          	ori	t1,t1,1
        hspt[0][i] = 
    8000061a:	95f6                	add	a1,a1,t4
    8000061c:	97f6                	add	a5,a5,t4


    addr = TEST_PPAGE_BASE;
    8000061e:	4745                	li	a4,17
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000620:	44100513          	li	a0,1089
    hspt[0][4] =
    80000624:	0308b023          	sd	a6,32(a7)
        hspt[0][i] = 
    80000628:	00c8b823          	sd	a2,16(a7)
    hspt[1][0] = 
    8000062c:	006e3023          	sd	t1,0(t3)
        hspt[0][i] = 
    80000630:	01d8b023          	sd	t4,0(a7)
    80000634:	00b8b423          	sd	a1,8(a7)
    80000638:	00f8bc23          	sd	a5,24(a7)
    addr = TEST_PPAGE_BASE;
    8000063c:	076e                	slli	a4,a4,0x1b
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000063e:	0556                	slli	a0,a0,0x15
    80000640:	0002f617          	auipc	a2,0x2f
    80000644:	c9060613          	addi	a2,a2,-880 # 8002f2d0 <test_page_perm_table>
        hspt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
        addr += PAGE_SIZE;
    80000648:	6805                	lui	a6,0x1
        hspt[2][i] = (addr >> 2) | PTE_AD |
    8000064a:	620c                	ld	a1,0(a2)
    8000064c:	00275793          	srli	a5,a4,0x2
        addr += PAGE_SIZE;
    80000650:	9742                	add	a4,a4,a6
        hspt[2][i] = (addr >> 2) | PTE_AD |
    80000652:	8fcd                	or	a5,a5,a1
    80000654:	0c07e793          	ori	a5,a5,192
    80000658:	e29c                	sd	a5,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000065a:	0641                	addi	a2,a2,16
    8000065c:	06a1                	addi	a3,a3,8
    8000065e:	fea716e3          	bne	a4,a0,8000064a <hspt_init+0x6a>
    //     hspt[2][i] = 
    //         PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    //     addr +=  PAGE_SIZE;
    // }

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000662:	00031797          	auipc	a5,0x31
    80000666:	c727a783          	lw	a5,-910(a5) # 800312d4 <curr_priv>
    8000066a:	4705                	li	a4,1
    8000066c:	37f5                	addiw	a5,a5,-3
    8000066e:	00f76a63          	bltu	a4,a5,80000682 <hspt_init+0xa2>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x8ULL << 60);
    80000672:	577d                	li	a4,-1
    80000674:	00c8d793          	srli	a5,a7,0xc
    80000678:	177e                	slli	a4,a4,0x3f
    8000067a:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    8000067c:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    80000680:	8082                	ret
void hspt_init(){
    80000682:	1141                	addi	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    80000684:	00027517          	auipc	a0,0x27
    80000688:	95c50513          	addi	a0,a0,-1700 # 80026fe0 <__func__.0+0x420>
void hspt_init(){
    8000068c:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    8000068e:	077240ef          	jal	80024f04 <printf>
    80000692:	0c000613          	li	a2,192
    80000696:	00025597          	auipc	a1,0x25
    8000069a:	ce258593          	addi	a1,a1,-798 # 80025378 <__func__.2>
    8000069e:	00027517          	auipc	a0,0x27
    800006a2:	98a50513          	addi	a0,a0,-1654 # 80027028 <__func__.0+0x468>
    800006a6:	05f240ef          	jal	80024f04 <printf>
    800006aa:	4501                	li	a0,0
    800006ac:	516240ef          	jal	80024bc2 <exit>

00000000800006b0 <vspt_init>:
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006b0:	00041717          	auipc	a4,0x41
    800006b4:	95070713          	addi	a4,a4,-1712 # 80041000 <vspt+0x1000>
void vspt_init(){
    800006b8:	1141                	addi	sp,sp,-16
        vspt[0][i] = 
    800006ba:	0cf00893          	li	a7,207
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006be:	00275813          	srli	a6,a4,0x2
        vspt[0][i] = 
    800006c2:	100006b7          	lui	a3,0x10000
    800006c6:	300007b7          	lui	a5,0x30000
void vspt_init(){
    800006ca:	e022                	sd	s0,0(sp)
    800006cc:	e406                	sd	ra,8(sp)
        vspt[0][i] = 
    800006ce:	00040417          	auipc	s0,0x40
    800006d2:	93240413          	addi	s0,s0,-1742 # 80040000 <vspt>
    800006d6:	96c6                	add	a3,a3,a7
    800006d8:	97c6                	add	a5,a5,a7
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    800006da:	00186813          	ori	a6,a6,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006de:	6605                	lui	a2,0x1
    800006e0:	853a                	mv	a0,a4
    800006e2:	4581                	li	a1,0
        vspt[0][i] = 
    800006e4:	e414                	sd	a3,8(s0)
    800006e6:	ec1c                	sd	a5,24(s0)
    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
    800006e8:	01043823          	sd	a6,16(s0)
        vspt[0][i] = 
    800006ec:	01143023          	sd	a7,0(s0)
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    800006f0:	16d240ef          	jal	8002505c <memset>
    addr = MEM_BASE;
    800006f4:	4785                	li	a5,1
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800006f6:	46c5                	li	a3,17
    addr = MEM_BASE;
    800006f8:	07fe                	slli	a5,a5,0x1f
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800006fa:	06ee                	slli	a3,a3,0x1b
        vspt[1][i] = 
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    800006fc:	00200637          	lui	a2,0x200
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    80000700:	0027d713          	srli	a4,a5,0x2
    80000704:	0cf76713          	ori	a4,a4,207
        vspt[1][i] = 
    80000708:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    8000070a:	97b2                	add	a5,a5,a2
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    8000070c:	0521                	addi	a0,a0,8
    8000070e:	fed799e3          	bne	a5,a3,80000700 <vspt_init+0x50>
    }

    vspt[0][4] =
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000712:	00042897          	auipc	a7,0x42
    80000716:	8ee88893          	addi	a7,a7,-1810 # 80042000 <vspt+0x2000>

    // vspt[0][5] =
    //     PTE_V | PTE_U | PTE_AD | (((uintptr_t)&vspt[2][0]) >> 2);

    vspt[2][0] = 
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    8000071a:	00043697          	auipc	a3,0x43
    8000071e:	8e668693          	addi	a3,a3,-1818 # 80043000 <vspt+0x3000>
    80000722:	0026d613          	srli	a2,a3,0x2
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    80000726:	0028d713          	srli	a4,a7,0x2
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    8000072a:	00166613          	ori	a2,a2,1
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    8000072e:	00176713          	ori	a4,a4,1

    addr = TEST_VPAGE_BASE;
    80000732:	4785                	li	a5,1
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000734:	00801537          	lui	a0,0x801
    vspt[2][0] = 
    80000738:	00c8b023          	sd	a2,0(a7)
    vspt[0][4] =
    8000073c:	f018                	sd	a4,32(s0)
    addr = TEST_VPAGE_BASE;
    8000073e:	1782                	slli	a5,a5,0x20
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000740:	0526                	slli	a0,a0,0x9
    80000742:	0002f617          	auipc	a2,0x2f
    80000746:	b8e60613          	addi	a2,a2,-1138 # 8002f2d0 <test_page_perm_table>
        vspt[3][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
        addr +=  PAGE_SIZE;
    8000074a:	6805                	lui	a6,0x1
        vspt[3][i] = (addr >> 2) | PTE_AD |
    8000074c:	620c                	ld	a1,0(a2)
    8000074e:	0027d713          	srli	a4,a5,0x2
        addr +=  PAGE_SIZE;
    80000752:	97c2                	add	a5,a5,a6
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000754:	8f4d                	or	a4,a4,a1
    80000756:	0c076713          	ori	a4,a4,192
    8000075a:	e298                	sd	a4,0(a3)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000075c:	0641                	addi	a2,a2,16
    8000075e:	06a1                	addi	a3,a3,8
    80000760:	fea796e3          	bne	a5,a0,8000074c <vspt_init+0x9c>
    }

    vspt[2][1] = 
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    80000764:	00044697          	auipc	a3,0x44
    80000768:	89c68693          	addi	a3,a3,-1892 # 80044000 <vspt+0x4000>
    8000076c:	0026d713          	srli	a4,a3,0x2
    80000770:	00176713          	ori	a4,a4,1

    addr = 4 * SUPERPAGE_SIZE(0) + SUPERPAGE_SIZE(1);
    for(int i = 0; i < 512; i++){
    80000774:	40100613          	li	a2,1025
    vspt[2][1] = 
    80000778:	00e8b423          	sd	a4,8(a7)
    for(int i = 0; i < 512; i++){
    8000077c:	065a                	slli	a2,a2,0x16
        vspt[4][i] = (addr >> 2) | 
            PTE_V | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    8000077e:	6585                	lui	a1,0x1
        vspt[4][i] = (addr >> 2) | 
    80000780:	0027d713          	srli	a4,a5,0x2
            PTE_V | PTE_AD | PTE_RWX; 
    80000784:	0cf76713          	ori	a4,a4,207
        vspt[4][i] = (addr >> 2) | 
    80000788:	e298                	sd	a4,0(a3)
        addr +=  PAGE_SIZE;
    8000078a:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    8000078c:	06a1                	addi	a3,a3,8
    8000078e:	fec799e3          	bne	a5,a2,80000780 <vspt_init+0xd0>
    }  

    vspt[0][5] = 
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    80000792:	00045697          	auipc	a3,0x45
    80000796:	86e68693          	addi	a3,a3,-1938 # 80045000 <vspt+0x5000>
    8000079a:	0026d713          	srli	a4,a3,0x2
    8000079e:	00176713          	ori	a4,a4,1
    
    addr = 5 * SUPERPAGE_SIZE(0);
    800007a2:	4795                	li	a5,5
    for(int i = 0; i < 512; i++){
    800007a4:	460d                	li	a2,3
    vspt[0][5] = 
    800007a6:	f418                	sd	a4,40(s0)
    addr = 5 * SUPERPAGE_SIZE(0);
    800007a8:	07fa                	slli	a5,a5,0x1e
    for(int i = 0; i < 512; i++){
    800007aa:	067e                	slli	a2,a2,0x1f
        vspt[5][i] = (addr >> 2) |
             PTE_V | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    800007ac:	002005b7          	lui	a1,0x200
        vspt[5][i] = (addr >> 2) |
    800007b0:	0027d713          	srli	a4,a5,0x2
             PTE_V | PTE_AD | PTE_RWX;  
    800007b4:	0cf76713          	ori	a4,a4,207
        vspt[5][i] = (addr >> 2) |
    800007b8:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    800007ba:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    800007bc:	06a1                	addi	a3,a3,8
    800007be:	fec799e3          	bne	a5,a2,800007b0 <vspt_init+0x100>
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    if(curr_priv == PRIV_VS){
    800007c2:	00031717          	auipc	a4,0x31
    800007c6:	b1272703          	lw	a4,-1262(a4) # 800312d4 <curr_priv>
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007ca:	57fd                	li	a5,-1
    800007cc:	8031                	srli	s0,s0,0xc
    800007ce:	17fe                	slli	a5,a5,0x3f
    if(curr_priv == PRIV_VS){
    800007d0:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    800007d2:	8c5d                	or	s0,s0,a5
    if(curr_priv == PRIV_VS){
    800007d4:	04d70163          	beq	a4,a3,80000816 <vspt_init+0x166>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    800007d8:	3775                	addiw	a4,a4,-3
    800007da:	4785                	li	a5,1
    800007dc:	00e7e863          	bltu	a5,a4,800007ec <vspt_init+0x13c>
        CSRW(CSR_VSATP, satp);
    800007e0:	28041073          	csrw	vsatp,s0
    } else {
        ERROR("");
    }
}
    800007e4:	60a2                	ld	ra,8(sp)
    800007e6:	6402                	ld	s0,0(sp)
    800007e8:	0141                	addi	sp,sp,16
    800007ea:	8082                	ret
        ERROR("");
    800007ec:	00027517          	auipc	a0,0x27
    800007f0:	84c50513          	addi	a0,a0,-1972 # 80027038 <__func__.0+0x478>
    800007f4:	710240ef          	jal	80024f04 <printf>
    800007f8:	10600613          	li	a2,262
    800007fc:	00025597          	auipc	a1,0x25
    80000800:	b8c58593          	addi	a1,a1,-1140 # 80025388 <__func__.1>
    80000804:	00027517          	auipc	a0,0x27
    80000808:	82450513          	addi	a0,a0,-2012 # 80027028 <__func__.0+0x468>
    8000080c:	6f8240ef          	jal	80024f04 <printf>
    80000810:	4501                	li	a0,0
    80000812:	3b0240ef          	jal	80024bc2 <exit>
        CSRW(satp, satp);
    80000816:	18041073          	csrw	satp,s0
}
    8000081a:	60a2                	ld	ra,8(sp)
    8000081c:	6402                	ld	s0,0(sp)
    8000081e:	0141                	addi	sp,sp,16
    80000820:	8082                	ret

0000000080000822 <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[5][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    80000822:	1141                	addi	sp,sp,-16
    80000824:	e022                	sd	s0,0(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    80000826:	0003b417          	auipc	s0,0x3b
    8000082a:	7da40413          	addi	s0,s0,2010 # 8003c000 <hpt_root>
    8000082e:	6611                	lui	a2,0x4
    80000830:	4581                	li	a1,0
    80000832:	8522                	mv	a0,s0
void hpt_init(){
    80000834:	e406                	sd	ra,8(sp)
        hpt_root[i] = 0;
    80000836:	027240ef          	jal	8002505c <memset>
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    8000083a:	00033717          	auipc	a4,0x33
    8000083e:	7c670713          	addi	a4,a4,1990 # 80034000 <hpt>
        hpt_root[i] = 
    80000842:	0df00893          	li	a7,223
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000846:	00275793          	srli	a5,a4,0x2
        hpt_root[i] = 
    8000084a:	10000837          	lui	a6,0x10000
    8000084e:	300006b7          	lui	a3,0x30000
    80000852:	96c6                	add	a3,a3,a7
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    80000854:	0017e793          	ori	a5,a5,1
        hpt_root[i] = 
    80000858:	9846                	add	a6,a6,a7

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    8000085a:	6605                	lui	a2,0x1
    8000085c:	853a                	mv	a0,a4
    8000085e:	4581                	li	a1,0
        hpt_root[i] = 
    80000860:	ec14                	sd	a3,24(s0)
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
    80000862:	e81c                	sd	a5,16(s0)
        hpt_root[i] = 
    80000864:	01143023          	sd	a7,0(s0)
    80000868:	01043423          	sd	a6,8(s0)
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    8000086c:	7f0240ef          	jal	8002505c <memset>
    addr = MEM_BASE;
    80000870:	4785                	li	a5,1
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000872:	46c5                	li	a3,17
    addr = MEM_BASE;
    80000874:	07fe                	slli	a5,a5,0x1f
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000876:	06ee                	slli	a3,a3,0x1b
        hpt[0][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(1);
    80000878:	00200637          	lui	a2,0x200
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    8000087c:	0027d713          	srli	a4,a5,0x2
    80000880:	0df76713          	ori	a4,a4,223
        hpt[0][i] = 
    80000884:	e118                	sd	a4,0(a0)
        addr +=  SUPERPAGE_SIZE(1);
    80000886:	97b2                	add	a5,a5,a2
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000888:	0521                	addi	a0,a0,8
    8000088a:	fed799e3          	bne	a5,a3,8000087c <hpt_init+0x5a>
    }    

    hpt_root[4] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    8000088e:	00034317          	auipc	t1,0x34
    80000892:	77230313          	addi	t1,t1,1906 # 80035000 <hpt+0x1000>

    hpt_root[2047] =
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);

    hpt[1][0] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000896:	00035617          	auipc	a2,0x35
    8000089a:	76a60613          	addi	a2,a2,1898 # 80036000 <hpt+0x2000>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    8000089e:	00235693          	srli	a3,t1,0x2
    800008a2:	0016e693          	ori	a3,a3,1
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    800008a6:	00265713          	srli	a4,a2,0x2
    800008aa:	00176713          	ori	a4,a4,1
    hpt_root[2047] =
    800008ae:	0003f597          	auipc	a1,0x3f
    800008b2:	74d5b523          	sd	a3,1866(a1) # 8003fff8 <hpt_root+0x3ff8>

    hpt[1][511] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008b6:	44100813          	li	a6,1089
    hpt_root[4] =
    800008ba:	f014                	sd	a3,32(s0)
    hpt[1][0] = 
    800008bc:	00e33023          	sd	a4,0(t1)
    hpt[1][511] = 
    800008c0:	fee63c23          	sd	a4,-8(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008c4:	0856                	slli	a6,a6,0x15
    800008c6:	0002f597          	auipc	a1,0x2f
    800008ca:	a1258593          	addi	a1,a1,-1518 # 8002f2d8 <test_page_perm_table+0x8>
    addr = TEST_PPAGE_BASE;
    800008ce:	86be                	mv	a3,a5
        hpt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h; 
        addr +=  PAGE_SIZE;
    800008d0:	6885                	lui	a7,0x1
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008d2:	6188                	ld	a0,0(a1)
    800008d4:	0026d713          	srli	a4,a3,0x2
        addr +=  PAGE_SIZE;
    800008d8:	96c6                	add	a3,a3,a7
        hpt[2][i] = (addr >> 2) | PTE_AD |
    800008da:	8f49                	or	a4,a4,a0
    800008dc:	0c076713          	ori	a4,a4,192
    800008e0:	e218                	sd	a4,0(a2)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800008e2:	05c1                	addi	a1,a1,16
    800008e4:	0621                	addi	a2,a2,8
    800008e6:	ff0696e3          	bne	a3,a6,800008d2 <hpt_init+0xb0>
    }

    hpt[1][1] = 
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    800008ea:	00036617          	auipc	a2,0x36
    800008ee:	71660613          	addi	a2,a2,1814 # 80037000 <hpt+0x3000>
    800008f2:	00265713          	srli	a4,a2,0x2
    800008f6:	00176713          	ori	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    800008fa:	44100593          	li	a1,1089
    hpt[1][1] = 
    800008fe:	00e33423          	sd	a4,8(t1)
    for(int i = 0; i < 512; i++){
    80000902:	05d6                	slli	a1,a1,0x15
    addr = TEST_PPAGE_BASE;
    80000904:	873e                	mv	a4,a5
        hpt[3][i] = (addr >> 2) | 
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
        addr +=  PAGE_SIZE;
    80000906:	6505                	lui	a0,0x1
        hpt[3][i] = (addr >> 2) | 
    80000908:	00275693          	srli	a3,a4,0x2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    8000090c:	0df6e693          	ori	a3,a3,223
        hpt[3][i] = (addr >> 2) | 
    80000910:	e214                	sd	a3,0(a2)
        addr +=  PAGE_SIZE;
    80000912:	972a                	add	a4,a4,a0
    for(int i = 0; i < 512; i++){
    80000914:	0621                	addi	a2,a2,8
    80000916:	feb719e3          	bne	a4,a1,80000908 <hpt_init+0xe6>
    }  

    hpt_root[5] =
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);
    8000091a:	00037697          	auipc	a3,0x37
    8000091e:	6e668693          	addi	a3,a3,1766 # 80038000 <hpt+0x4000>
    80000922:	0026d713          	srli	a4,a3,0x2
    80000926:	00176713          	ori	a4,a4,1
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
    8000092a:	4665                	li	a2,25
    hpt_root[5] =
    8000092c:	f418                	sd	a4,40(s0)
    for(int i = 0; i < 512; i++){
    8000092e:	066e                	slli	a2,a2,0x1b
        hpt[4][i] = (addr >> 2) |
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
        addr +=  SUPERPAGE_SIZE(1);
    80000930:	002005b7          	lui	a1,0x200
        hpt[4][i] = (addr >> 2) |
    80000934:	0027d713          	srli	a4,a5,0x2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000938:	0df76713          	ori	a4,a4,223
        hpt[4][i] = (addr >> 2) |
    8000093c:	e298                	sd	a4,0(a3)
        addr +=  SUPERPAGE_SIZE(1);
    8000093e:	97ae                	add	a5,a5,a1
    for(int i = 0; i < 512; i++){
    80000940:	06a1                	addi	a3,a3,8
    80000942:	fec799e3          	bne	a5,a2,80000934 <hpt_init+0x112>
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000946:	00031797          	auipc	a5,0x31
    8000094a:	98e7a783          	lw	a5,-1650(a5) # 800312d4 <curr_priv>
    8000094e:	4705                	li	a4,1
    80000950:	37f5                	addiw	a5,a5,-3
    80000952:	00f76d63          	bltu	a4,a5,8000096c <hpt_init+0x14a>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x8ULL << 60);
    80000956:	577d                	li	a4,-1
    80000958:	00c45793          	srli	a5,s0,0xc
    8000095c:	177e                	slli	a4,a4,0x3f
    8000095e:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000960:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }
}
    80000964:	60a2                	ld	ra,8(sp)
    80000966:	6402                	ld	s0,0(sp)
    80000968:	0141                	addi	sp,sp,16
    8000096a:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    8000096c:	00026517          	auipc	a0,0x26
    80000970:	6e450513          	addi	a0,a0,1764 # 80027050 <__func__.0+0x490>
    80000974:	590240ef          	jal	80024f04 <printf>
    80000978:	14e00613          	li	a2,334
    8000097c:	00025597          	auipc	a1,0x25
    80000980:	a1c58593          	addi	a1,a1,-1508 # 80025398 <__func__.0>
    80000984:	00026517          	auipc	a0,0x26
    80000988:	6a450513          	addi	a0,a0,1700 # 80027028 <__func__.0+0x468>
    8000098c:	578240ef          	jal	80024f04 <printf>
    80000990:	4501                	li	a0,0
    80000992:	230240ef          	jal	80024bc2 <exit>

0000000080000996 <page_table_add_vs_AD>:

void page_table_add_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000996:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    8000099a:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    8000099e:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009a2:	0002f617          	auipc	a2,0x2f
    800009a6:	92e60613          	addi	a2,a2,-1746 # 8002f2d0 <test_page_perm_table>
    addr = 0x88000000 + i*0x1000;
    800009aa:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ac:	962e                	add	a2,a2,a1

    addr = 0x100000000 + i*0x1000;
    800009ae:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009b0:	6210                	ld	a2,0(a2)
    addr = 0x100000000 + i*0x1000;
    800009b2:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    800009b4:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    800009b6:	9736                	add	a4,a4,a3
    addr = 0x88000000 + i*0x1000;
    800009b8:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ba:	40050593          	addi	a1,a0,1024
    800009be:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009c0:	8309                	srli	a4,a4,0x2
    800009c2:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009c6:	8fd1                	or	a5,a5,a2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009c8:	8f51                	or	a4,a4,a2
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ca:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009cc:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ce:	00045617          	auipc	a2,0x45
    800009d2:	63260613          	addi	a2,a2,1586 # 80046000 <hspt>
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009d6:	0003f697          	auipc	a3,0x3f
    800009da:	62a68693          	addi	a3,a3,1578 # 80040000 <vspt>
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009de:	0c07e793          	ori	a5,a5,192
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009e2:	0c076713          	ori	a4,a4,192
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009e6:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009e8:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ea:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    800009ec:	e298                	sd	a4,0(a3)
}
    800009ee:	8082                	ret

00000000800009f0 <page_table_del_vs_AD>:

void page_table_del_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    800009f0:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    800009f4:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    800009f8:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    800009fc:	0002f617          	auipc	a2,0x2f
    80000a00:	8d460613          	addi	a2,a2,-1836 # 8002f2d0 <test_page_perm_table>
    80000a04:	962e                	add	a2,a2,a1
    addr = 0x88000000 + i*0x1000;
    80000a06:	9fb9                	addw	a5,a5,a4

    addr = 0x100000000 + i*0x1000;
    80000a08:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a0a:	00063803          	ld	a6,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000a0e:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000a10:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000a12:	9736                	add	a4,a4,a3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a14:	40050593          	addi	a1,a0,1024
    addr = 0x88000000 + i*0x1000;
    80000a18:	9381                	srli	a5,a5,0x20
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a1a:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a1e:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a20:	8309                	srli	a4,a4,0x2
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a22:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a24:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a26:	00045617          	auipc	a2,0x45
    80000a2a:	5da60613          	addi	a2,a2,1498 # 80046000 <hspt>
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a2e:	0003f697          	auipc	a3,0x3f
    80000a32:	5d268693          	addi	a3,a3,1490 # 80040000 <vspt>
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a36:	0107e7b3          	or	a5,a5,a6
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a3a:	01076733          	or	a4,a4,a6
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a3e:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a40:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a42:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000a44:	e298                	sd	a4,0(a3)
}
    80000a46:	8082                	ret

0000000080000a48 <page_table_add_h_AD>:


void page_table_add_h_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000a48:	00c5171b          	slliw	a4,a0,0xc
    80000a4c:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000a50:	00451693          	slli	a3,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000a54:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000a56:	0002f717          	auipc	a4,0x2f
    80000a5a:	87a70713          	addi	a4,a4,-1926 # 8002f2d0 <test_page_perm_table>
    80000a5e:	9736                	add	a4,a4,a3
    80000a60:	6714                	ld	a3,8(a4)
    addr = 0x88000000 + i*0x1000;
    80000a62:	1782                	slli	a5,a5,0x20
    80000a64:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000a66:	40050513          	addi	a0,a0,1024
    80000a6a:	8389                	srli	a5,a5,0x2
    80000a6c:	050e                	slli	a0,a0,0x3
    80000a6e:	00045717          	auipc	a4,0x45
    80000a72:	59270713          	addi	a4,a4,1426 # 80046000 <hspt>
    80000a76:	8fd5                	or	a5,a5,a3
    80000a78:	972a                	add	a4,a4,a0
    80000a7a:	e31c                	sd	a5,0(a4)
}
    80000a7c:	8082                	ret

0000000080000a7e <page_table_del_h_AD>:

void page_table_del_h_AD(int i){
    80000a7e:	00c5171b          	slliw	a4,a0,0xc
    80000a82:	880007b7          	lui	a5,0x88000
    80000a86:	00451693          	slli	a3,a0,0x4
    80000a8a:	9fb9                	addw	a5,a5,a4
    80000a8c:	0002f717          	auipc	a4,0x2f
    80000a90:	84470713          	addi	a4,a4,-1980 # 8002f2d0 <test_page_perm_table>
    80000a94:	9736                	add	a4,a4,a3
    80000a96:	6714                	ld	a3,8(a4)
    80000a98:	1782                	slli	a5,a5,0x20
    80000a9a:	9381                	srli	a5,a5,0x20
    80000a9c:	40050513          	addi	a0,a0,1024
    80000aa0:	8389                	srli	a5,a5,0x2
    80000aa2:	050e                	slli	a0,a0,0x3
    80000aa4:	00045717          	auipc	a4,0x45
    80000aa8:	55c70713          	addi	a4,a4,1372 # 80046000 <hspt>
    80000aac:	8fd5                	or	a5,a5,a3
    80000aae:	972a                	add	a4,a4,a0
    80000ab0:	e31c                	sd	a5,0(a4)
    80000ab2:	8082                	ret

0000000080000ab4 <hspt_switch>:
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
}

void hspt_switch(){
    pte_t temp = hspt[2][SWITCH1];
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    80000ab4:	00047797          	auipc	a5,0x47
    80000ab8:	54c78793          	addi	a5,a5,1356 # 80048000 <hspt+0x2000>
    80000abc:	3607b683          	ld	a3,864(a5)
    80000ac0:	3687b703          	ld	a4,872(a5)
    80000ac4:	36d7b423          	sd	a3,872(a5)
    80000ac8:	36e7b023          	sd	a4,864(a5)
    hspt[2][SWITCH2] = temp;
}
    80000acc:	8082                	ret

0000000080000ace <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[3][SWITCH1];
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    80000ace:	00042797          	auipc	a5,0x42
    80000ad2:	53278793          	addi	a5,a5,1330 # 80043000 <vspt+0x3000>
    80000ad6:	3607b683          	ld	a3,864(a5)
    80000ada:	3687b703          	ld	a4,872(a5)
    80000ade:	36d7b423          	sd	a3,872(a5)
    80000ae2:	36e7b023          	sd	a4,864(a5)
    vspt[3][SWITCH2] = temp;
}
    80000ae6:	8082                	ret

0000000080000ae8 <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[2][SWITCH1];
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    80000ae8:	00035797          	auipc	a5,0x35
    80000aec:	51878793          	addi	a5,a5,1304 # 80036000 <hpt+0x2000>
    80000af0:	3607b683          	ld	a3,864(a5)
    80000af4:	3687b703          	ld	a4,872(a5)
    80000af8:	36d7b423          	sd	a3,872(a5)
    80000afc:	36e7b023          	sd	a4,864(a5)
    hpt[2][SWITCH2] = temp;
}
    80000b00:	8082                	ret

0000000080000b02 <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    80000b02:	00048797          	auipc	a5,0x48
    80000b06:	4fe78793          	addi	a5,a5,1278 # 80049000 <ecall_args>
    80000b0a:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    80000b0c:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    80000b0e:	00000073          	ecall
    return ecall_args[0];

}
    80000b12:	6388                	ld	a0,0(a5)
    80000b14:	8082                	ret

0000000080000b16 <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000b16:	00030797          	auipc	a5,0x30
    80000b1a:	7be7a783          	lw	a5,1982(a5) # 800312d4 <curr_priv>
    80000b1e:	470d                	li	a4,3
    80000b20:	06e78963          	beq	a5,a4,80000b92 <set_prev_priv+0x7c>
    80000b24:	4711                	li	a4,4
    80000b26:	04e78163          	beq	a5,a4,80000b68 <set_prev_priv+0x52>
    80000b2a:	4709                	li	a4,2
    80000b2c:	08e78863          	beq	a5,a4,80000bbc <set_prev_priv+0xa6>
void set_prev_priv(int priv){
    80000b30:	1141                	addi	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000b32:	85aa                	mv	a1,a0
    80000b34:	00025617          	auipc	a2,0x25
    80000b38:	87460613          	addi	a2,a2,-1932 # 800253a8 <__func__.6>
    80000b3c:	00026517          	auipc	a0,0x26
    80000b40:	55450513          	addi	a0,a0,1364 # 80027090 <__func__.0+0x4d0>
void set_prev_priv(int priv){
    80000b44:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000b46:	3be240ef          	jal	80024f04 <printf>
    80000b4a:	03c00613          	li	a2,60
    80000b4e:	00025597          	auipc	a1,0x25
    80000b52:	85a58593          	addi	a1,a1,-1958 # 800253a8 <__func__.6>
    80000b56:	00026517          	auipc	a0,0x26
    80000b5a:	4d250513          	addi	a0,a0,1234 # 80027028 <__func__.0+0x468>
    80000b5e:	3a6240ef          	jal	80024f04 <printf>
    80000b62:	4501                	li	a0,0
    80000b64:	05e240ef          	jal	80024bc2 <exit>
            uint64_t temp = CSRR(mstatus);
    80000b68:	30002773          	csrr	a4,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000b6c:	fc0007b7          	lui	a5,0xfc000
    80000b70:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000b72:	07b6                	slli	a5,a5,0xd
    80000b74:	7ff78793          	addi	a5,a5,2047
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000b78:	ffe5069b          	addiw	a3,a0,-2
    80000b7c:	4605                	li	a2,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000b7e:	8ff9                	and	a5,a5,a4
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000b80:	06d67363          	bgeu	a2,a3,80000be6 <set_prev_priv+0xd0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000b84:	e501                	bnez	a0,80000b8c <set_prev_priv+0x76>
    80000b86:	4705                	li	a4,1
    80000b88:	171e                	slli	a4,a4,0x27
    80000b8a:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000b8c:	30079073          	csrw	mstatus,a5
        break;
    80000b90:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000b92:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000b96:	4705                	li	a4,1
    80000b98:	ffe5069b          	addiw	a3,a0,-2
    80000b9c:	02d77763          	bgeu	a4,a3,80000bca <set_prev_priv+0xb4>
            temp &= ~(0x1ULL << 8);
    80000ba0:	eff7f793          	andi	a5,a5,-257
            CSRW(sstatus, temp);
    80000ba4:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000ba8:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000bac:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000bb0:	e119                	bnez	a0,80000bb6 <set_prev_priv+0xa0>
    80000bb2:	0807e793          	ori	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000bb6:	60079073          	csrw	hstatus,a5
        break;
    80000bba:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000bbc:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000bc0:	10000793          	li	a5,256
    80000bc4:	1007b073          	csrc	sstatus,a5
        break;
    80000bc8:	8082                	ret
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000bca:	1007e793          	ori	a5,a5,256
            CSRW(sstatus, temp);
    80000bce:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000bd2:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000bd6:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000bd8:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000bdc:	fce51de3          	bne	a0,a4,80000bb6 <set_prev_priv+0xa0>
    80000be0:	1007e793          	ori	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000be4:	b7f9                	j	80000bb2 <set_prev_priv+0x9c>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000be6:	6705                	lui	a4,0x1
    80000be8:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000bec:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000bee:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000bf0:	f8d50be3          	beq	a0,a3,80000b86 <set_prev_priv+0x70>
    80000bf4:	bf61                	j	80000b8c <set_prev_priv+0x76>

0000000080000bf6 <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000bf6:	1101                	addi	sp,sp,-32
    80000bf8:	e822                	sd	s0,16(sp)
    80000bfa:	ec06                	sd	ra,24(sp)
    80000bfc:	e426                	sd	s1,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000bfe:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000c00:	842a                	mv	s0,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000c02:	02a7f963          	bgeu	a5,a0,80000c34 <goto_priv+0x3e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000c06:	00030797          	auipc	a5,0x30
    80000c0a:	6ca7a783          	lw	a5,1738(a5) # 800312d0 <real_priv>
    80000c0e:	00030497          	auipc	s1,0x30
    80000c12:	6c648493          	addi	s1,s1,1734 # 800312d4 <curr_priv>
    80000c16:	00a78963          	beq	a5,a0,80000c28 <goto_priv+0x32>
    80000c1a:	4791                	li	a5,4
    80000c1c:	00030497          	auipc	s1,0x30
    80000c20:	6b848493          	addi	s1,s1,1720 # 800312d4 <curr_priv>
    80000c24:	06a7d363          	bge	a5,a0,80000c8a <goto_priv+0x94>
        if(on_going)
            VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        curr_priv = target_priv;
    80000c28:	c080                	sw	s0,0(s1)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000c2a:	60e2                	ld	ra,24(sp)
    80000c2c:	6442                	ld	s0,16(sp)
    80000c2e:	64a2                	ld	s1,8(sp)
    80000c30:	6105                	addi	sp,sp,32
    80000c32:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000c34:	00030717          	auipc	a4,0x30
    80000c38:	6a072703          	lw	a4,1696(a4) # 800312d4 <curr_priv>
    80000c3c:	00030497          	auipc	s1,0x30
    80000c40:	69848493          	addi	s1,s1,1688 # 800312d4 <curr_priv>
    80000c44:	0ae7f863          	bgeu	a5,a4,80000cf4 <goto_priv+0xfe>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000c48:	00030797          	auipc	a5,0x30
    80000c4c:	6887a783          	lw	a5,1672(a5) # 800312d0 <real_priv>
    80000c50:	fca78ce3          	beq	a5,a0,80000c28 <goto_priv+0x32>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000c54:	4789                	li	a5,2
    80000c56:	06f71063          	bne	a4,a5,80000cb6 <goto_priv+0xc0>
    80000c5a:	4785                	li	a5,1
    80000c5c:	04f41d63          	bne	s0,a5,80000cb6 <goto_priv+0xc0>
        ERROR("trying to go from vs to hu");
    80000c60:	00026517          	auipc	a0,0x26
    80000c64:	46050513          	addi	a0,a0,1120 # 800270c0 <__func__.0+0x500>
    80000c68:	29c240ef          	jal	80024f04 <printf>
    80000c6c:	04b00613          	li	a2,75
        ERROR("cant lower priv from u");
    80000c70:	00024597          	auipc	a1,0x24
    80000c74:	74858593          	addi	a1,a1,1864 # 800253b8 <__func__.4>
    80000c78:	00026517          	auipc	a0,0x26
    80000c7c:	3b050513          	addi	a0,a0,944 # 80027028 <__func__.0+0x468>
    80000c80:	284240ef          	jal	80024f04 <printf>
    80000c84:	4501                	li	a0,0
    80000c86:	73d230ef          	jal	80024bc2 <exit>
    if(target_priv > curr_priv){
    80000c8a:	00030797          	auipc	a5,0x30
    80000c8e:	64a7a783          	lw	a5,1610(a5) # 800312d4 <curr_priv>
    80000c92:	02a7f063          	bgeu	a5,a0,80000cb2 <goto_priv+0xbc>
    ecall_args[0] = a0;
    80000c96:	00048797          	auipc	a5,0x48
    80000c9a:	36a78793          	addi	a5,a5,874 # 80049000 <ecall_args>
    80000c9e:	4705                	li	a4,1
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000ca0:	e780                	sd	s0,8(a5)
    ecall_args[0] = a0;
    80000ca2:	e398                	sd	a4,0(a5)
    asm volatile("ecall" ::: "memory");
    80000ca4:	00000073          	ecall
}
    80000ca8:	60e2                	ld	ra,24(sp)
    80000caa:	6442                	ld	s0,16(sp)
    80000cac:	64a2                	ld	s1,8(sp)
    80000cae:	6105                	addi	sp,sp,32
    80000cb0:	8082                	ret
    if(priv == curr_priv) 
    80000cb2:	f6f50ce3          	beq	a0,a5,80000c2a <goto_priv+0x34>
    set_prev_priv(priv);
    80000cb6:	8522                	mv	a0,s0
    80000cb8:	e5fff0ef          	jal	80000b16 <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000cbc:	00030797          	auipc	a5,0x30
    80000cc0:	6187a783          	lw	a5,1560(a5) # 800312d4 <curr_priv>
    real_priv = priv;
    80000cc4:	00030717          	auipc	a4,0x30
    80000cc8:	60872623          	sw	s0,1548(a4) # 800312d0 <real_priv>
    if(curr_priv == PRIV_M) {
    80000ccc:	4711                	li	a4,4
    80000cce:	04e78e63          	beq	a5,a4,80000d2a <goto_priv+0x134>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000cd2:	37f9                	addiw	a5,a5,-2
    80000cd4:	4705                	li	a4,1
    80000cd6:	04f76163          	bltu	a4,a5,80000d18 <goto_priv+0x122>
        asm volatile(
    80000cda:	00000297          	auipc	t0,0x0
    80000cde:	01028293          	addi	t0,t0,16 # 80000cea <goto_priv+0xf4>
    80000ce2:	14129073          	csrw	sepc,t0
    80000ce6:	10200073          	sret
    curr_priv = priv;
    80000cea:	00030797          	auipc	a5,0x30
    80000cee:	5e87a523          	sw	s0,1514(a5) # 800312d4 <curr_priv>
    80000cf2:	bf25                	j	80000c2a <goto_priv+0x34>
        goto_priv(PRIV_M);
    80000cf4:	4511                	li	a0,4
    80000cf6:	f01ff0ef          	jal	80000bf6 <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000cfa:	00030797          	auipc	a5,0x30
    80000cfe:	5d67a783          	lw	a5,1494(a5) # 800312d0 <real_priv>
    80000d02:	f28783e3          	beq	a5,s0,80000c28 <goto_priv+0x32>
    if(target_priv > curr_priv){
    80000d06:	00030717          	auipc	a4,0x30
    80000d0a:	5ce72703          	lw	a4,1486(a4) # 800312d4 <curr_priv>
    80000d0e:	f88764e3          	bltu	a4,s0,80000c96 <goto_priv+0xa0>
    if(priv == curr_priv) 
    80000d12:	f0870ce3          	beq	a4,s0,80000c2a <goto_priv+0x34>
    80000d16:	bf3d                	j	80000c54 <goto_priv+0x5e>
        ERROR("cant lower priv from u");
    80000d18:	00026517          	auipc	a0,0x26
    80000d1c:	3d850513          	addi	a0,a0,984 # 800270f0 <__func__.0+0x530>
    80000d20:	1e4240ef          	jal	80024f04 <printf>
    80000d24:	06300613          	li	a2,99
    80000d28:	b7a1                	j	80000c70 <goto_priv+0x7a>
        asm volatile(
    80000d2a:	00000297          	auipc	t0,0x0
    80000d2e:	01028293          	addi	t0,t0,16 # 80000d3a <goto_priv+0x144>
    80000d32:	34129073          	csrw	mepc,t0
    80000d36:	30200073          	mret
    80000d3a:	bf45                	j	80000cea <goto_priv+0xf4>

0000000080000d3c <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80000d3c:	715d                	addi	sp,sp,-80
    80000d3e:	f44e                	sd	s3,40(sp)
    80000d40:	e486                	sd	ra,72(sp)
    80000d42:	e0a2                	sd	s0,64(sp)
    80000d44:	fc26                	sd	s1,56(sp)
    80000d46:	f84a                	sd	s2,48(sp)
    80000d48:	f052                	sd	s4,32(sp)
    80000d4a:	ec56                	sd	s5,24(sp)
    80000d4c:	e85a                	sd	s6,16(sp)
    80000d4e:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    80000d50:	00030997          	auipc	s3,0x30
    80000d54:	58098993          	addi	s3,s3,1408 # 800312d0 <real_priv>
    80000d58:	4791                	li	a5,4
    80000d5a:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(mcause);
    80000d5e:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    80000d62:	34102973          	csrr	s2,mepc
    80000d66:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(mtval);
    80000d68:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    80000d6c:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    80000d70:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000d74:	478d                	li	a5,3
    80000d76:	ff848713          	addi	a4,s1,-8
    80000d7a:	12e7ef63          	bltu	a5,a4,80000eb8 <mhandler+0x17c>
    DEBUG("mtinst = 0x%lx", tinst);
    DEBUG("mpp = 0x%lx", (CSRR(mstatus) >> 11) & 0x3);
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    80000d7e:	00048417          	auipc	s0,0x48
    80000d82:	28240413          	addi	s0,s0,642 # 80049000 <ecall_args>
    80000d86:	6018                	ld	a4,0(s0)
    80000d88:	4785                	li	a5,1
    80000d8a:	1cf70763          	beq	a4,a5,80000f58 <mhandler+0x21c>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80000d8e:	00048797          	auipc	a5,0x48
    80000d92:	2827c783          	lbu	a5,642(a5) # 80049010 <excpt>
    80000d96:	c3cd                	beqz	a5,80000e38 <mhandler+0xfc>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    80000d98:	4705                	li	a4,1
    excpt.priv = PRIV_M;
    80000d9a:	4791                	li	a5,4
    excpt.cause = cause;
    80000d9c:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80000d9e:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    80000da2:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    80000da6:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    80000daa:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80000dae:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_M;
    80000db2:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    80000db4:	300027f3          	csrr	a5,mstatus
    80000db8:	9399                	srli	a5,a5,0x26
    80000dba:	8ff9                	and	a5,a5,a4
    80000dbc:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    80000dc0:	300027f3          	csrr	a5,mstatus
    80000dc4:	939d                	srli	a5,a5,0x27
    80000dc6:	8ff9                	and	a5,a5,a4
    80000dc8:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80000dcc:	00048797          	auipc	a5,0x48
    80000dd0:	24078223          	sb	zero,580(a5) # 80049010 <excpt>
    if(is_inst_fault(cause)){
    80000dd4:	47d1                	li	a5,20
    80000dd6:	0097ed63          	bltu	a5,s1,80000df0 <mhandler+0xb4>
    80000dda:	001017b7          	lui	a5,0x101
    80000dde:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80000de0:	0097d7b3          	srl	a5,a5,s1
    80000de4:	8ff9                	and	a5,a5,a4
    80000de6:	c789                	beqz	a5,80000df0 <mhandler+0xb4>
        if(excpt.fault_inst != 0){ 
    80000de8:	04843a03          	ld	s4,72(s0)
    80000dec:	0e0a0763          	beqz	s4,80000eda <mhandler+0x19e>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80000df0:	00030797          	auipc	a5,0x30
    80000df4:	4e47a783          	lw	a5,1252(a5) # 800312d4 <curr_priv>
    unsigned temp_priv = real_priv;
    80000df8:	00030517          	auipc	a0,0x30
    80000dfc:	4d852503          	lw	a0,1240(a0) # 800312d0 <real_priv>
    excpt.fault_inst = 0;
    80000e00:	00048717          	auipc	a4,0x48
    80000e04:	24073423          	sd	zero,584(a4) # 80049048 <excpt+0x38>
    real_priv = curr_priv;
    80000e08:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000e0c:	478d                	li	a5,3
    80000e0e:	04f50a63          	beq	a0,a5,80000e62 <mhandler+0x126>
    80000e12:	4791                	li	a5,4
    80000e14:	0ef50363          	beq	a0,a5,80000efa <mhandler+0x1be>
    80000e18:	4789                	li	a5,2
    80000e1a:	06f50263          	beq	a0,a5,80000e7e <mhandler+0x142>
}
    80000e1e:	60a6                	ld	ra,72(sp)
    80000e20:	6406                	ld	s0,64(sp)
    80000e22:	1502                	slli	a0,a0,0x20
    80000e24:	74e2                	ld	s1,56(sp)
    80000e26:	7942                	ld	s2,48(sp)
    80000e28:	79a2                	ld	s3,40(sp)
    80000e2a:	7a02                	ld	s4,32(sp)
    80000e2c:	6ae2                	ld	s5,24(sp)
    80000e2e:	6b42                	ld	s6,16(sp)
    80000e30:	6ba2                	ld	s7,8(sp)
    80000e32:	9101                	srli	a0,a0,0x20
    80000e34:	6161                	addi	sp,sp,80
    80000e36:	8082                	ret
        ERROR("untested exception!");
    80000e38:	00026517          	auipc	a0,0x26
    80000e3c:	2e050513          	addi	a0,a0,736 # 80027118 <__func__.0+0x558>
    80000e40:	0c4240ef          	jal	80024f04 <printf>
    80000e44:	0d600613          	li	a2,214
            ERROR("instruction fault without return address");
    80000e48:	00024597          	auipc	a1,0x24
    80000e4c:	58058593          	addi	a1,a1,1408 # 800253c8 <__func__.3>
    80000e50:	00026517          	auipc	a0,0x26
    80000e54:	1d850513          	addi	a0,a0,472 # 80027028 <__func__.0+0x468>
    80000e58:	0ac240ef          	jal	80024f04 <printf>
    80000e5c:	4501                	li	a0,0
    80000e5e:	565230ef          	jal	80024bc2 <exit>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000e62:	600026f3          	csrr	a3,hstatus
    80000e66:	00030797          	auipc	a5,0x30
    80000e6a:	46e7a783          	lw	a5,1134(a5) # 800312d4 <curr_priv>
    80000e6e:	0806e713          	ori	a4,a3,128
    80000e72:	9bf5                	andi	a5,a5,-3
    80000e74:	c399                	beqz	a5,80000e7a <mhandler+0x13e>
    80000e76:	f7f6f713          	andi	a4,a3,-129
    80000e7a:	60071073          	csrw	hstatus,a4
    80000e7e:	100027f3          	csrr	a5,sstatus
    80000e82:	00030717          	auipc	a4,0x30
    80000e86:	45272703          	lw	a4,1106(a4) # 800312d4 <curr_priv>
    80000e8a:	4685                	li	a3,1
    80000e8c:	edf7f793          	andi	a5,a5,-289
    80000e90:	3779                	addiw	a4,a4,-2
    80000e92:	04e6fd63          	bgeu	a3,a4,80000eec <mhandler+0x1b0>
    80000e96:	10079073          	csrw	sstatus,a5
    80000e9a:	f804c2e3          	bltz	s1,80000e1e <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000e9e:	000a5783          	lhu	a5,0(s4)
    80000ea2:	468d                	li	a3,3
    else return epc + 2;
    80000ea4:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000ea8:	8ff5                	and	a5,a5,a3
    80000eaa:	00d79463          	bne	a5,a3,80000eb2 <mhandler+0x176>
    80000eae:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000eb2:	14171073          	csrw	sepc,a4
    80000eb6:	b7a5                	j	80000e1e <mhandler+0xe2>
    } else if(!excpt.testing){
    80000eb8:	00048797          	auipc	a5,0x48
    80000ebc:	1587c783          	lbu	a5,344(a5) # 80049010 <excpt>
    80000ec0:	dfa5                	beqz	a5,80000e38 <mhandler+0xfc>
    if(cause & (1ULL << 63)){
    80000ec2:	0004d763          	bgez	s1,80000ed0 <mhandler+0x194>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    80000ec6:	4785                	li	a5,1
    80000ec8:	009797b3          	sll	a5,a5,s1
    80000ecc:	3447b073          	csrc	mip,a5
    80000ed0:	00048417          	auipc	s0,0x48
    80000ed4:	13040413          	addi	s0,s0,304 # 80049000 <ecall_args>
    80000ed8:	b5c1                	j	80000d98 <mhandler+0x5c>
            ERROR("instruction fault without return address");
    80000eda:	00026517          	auipc	a0,0x26
    80000ede:	26650513          	addi	a0,a0,614 # 80027140 <__func__.0+0x580>
    80000ee2:	022240ef          	jal	80024f04 <printf>
    80000ee6:	0ec00613          	li	a2,236
    80000eea:	bfb9                	j	80000e48 <mhandler+0x10c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000eec:	1007e793          	ori	a5,a5,256
    80000ef0:	10079073          	csrw	sstatus,a5
    80000ef4:	fa04d5e3          	bgez	s1,80000e9e <mhandler+0x162>
    80000ef8:	b71d                	j	80000e1e <mhandler+0xe2>
    80000efa:	30002773          	csrr	a4,mstatus
    80000efe:	fc0007b7          	lui	a5,0xfc000
    80000f02:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000f04:	00030697          	auipc	a3,0x30
    80000f08:	3d06a683          	lw	a3,976(a3) # 800312d4 <curr_priv>
    80000f0c:	07b6                	slli	a5,a5,0xd
    80000f0e:	77f78793          	addi	a5,a5,1919
    80000f12:	8ff9                	and	a5,a5,a4
    80000f14:	04a68663          	beq	a3,a0,80000f60 <mhandler+0x224>
    80000f18:	ffe6871b          	addiw	a4,a3,-2
    80000f1c:	4605                	li	a2,1
    80000f1e:	04e66663          	bltu	a2,a4,80000f6a <mhandler+0x22e>
    80000f22:	6705                	lui	a4,0x1
    80000f24:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80000f28:	4609                	li	a2,2
    80000f2a:	8fd9                	or	a5,a5,a4
    80000f2c:	00c69563          	bne	a3,a2,80000f36 <mhandler+0x1fa>
    80000f30:	4705                	li	a4,1
    80000f32:	171e                	slli	a4,a4,0x27
    80000f34:	8fd9                	or	a5,a5,a4
    80000f36:	30079073          	csrw	mstatus,a5
    80000f3a:	ee04c2e3          	bltz	s1,80000e1e <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000f3e:	000a5783          	lhu	a5,0(s4)
    80000f42:	468d                	li	a3,3
    else return epc + 2;
    80000f44:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80000f48:	8ff5                	and	a5,a5,a3
    80000f4a:	00d79463          	bne	a5,a3,80000f52 <mhandler+0x216>
    80000f4e:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f52:	34171073          	csrw	mepc,a4
    80000f56:	b5e1                	j	80000e1e <mhandler+0xe2>
        goto_priv(ecall_args[1]); 
    80000f58:	4408                	lw	a0,8(s0)
    80000f5a:	c9dff0ef          	jal	80000bf6 <goto_priv>
    if(cause & (1ULL << 63)){
    80000f5e:	bd2d                	j	80000d98 <mhandler+0x5c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80000f60:	6709                	lui	a4,0x2
    80000f62:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80000f66:	8fd9                	or	a5,a5,a4
    80000f68:	b7f9                	j	80000f36 <mhandler+0x1fa>
    80000f6a:	d2f9                	beqz	a3,80000f30 <mhandler+0x1f4>
    80000f6c:	b7e9                	j	80000f36 <mhandler+0x1fa>

0000000080000f6e <hshandler>:
uint64_t hshandler(){
    80000f6e:	715d                	addi	sp,sp,-80
    80000f70:	f44e                	sd	s3,40(sp)
    80000f72:	e486                	sd	ra,72(sp)
    80000f74:	e0a2                	sd	s0,64(sp)
    80000f76:	fc26                	sd	s1,56(sp)
    80000f78:	f84a                	sd	s2,48(sp)
    80000f7a:	f052                	sd	s4,32(sp)
    80000f7c:	ec56                	sd	s5,24(sp)
    80000f7e:	e85a                	sd	s6,16(sp)
    80000f80:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    80000f82:	00030997          	auipc	s3,0x30
    80000f86:	34e98993          	addi	s3,s3,846 # 800312d0 <real_priv>
    80000f8a:	478d                	li	a5,3
    80000f8c:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(scause);
    80000f90:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    80000f94:	14102973          	csrr	s2,sepc
    80000f98:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(stval);
    80000f9a:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    80000f9e:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    80000fa2:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80000fa6:	ff848713          	addi	a4,s1,-8
    80000faa:	02e7ef63          	bltu	a5,a4,80000fe8 <hshandler+0x7a>
    DEBUG("spv = 0x%lx", (CSRR(CSR_HSTATUS) >> 7) & 0x1);
    DEBUG("spvp = 0x%lx", (CSRR(CSR_HSTATUS) >> 8) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);


    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){ 
    80000fae:	00048417          	auipc	s0,0x48
    80000fb2:	05240413          	addi	s0,s0,82 # 80049000 <ecall_args>
    80000fb6:	6018                	ld	a4,0(s0)
    80000fb8:	4785                	li	a5,1
    80000fba:	14f70063          	beq	a4,a5,800010fa <hshandler+0x18c>
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        ERROR("unknown ecall"); 
    80000fbe:	00026517          	auipc	a0,0x26
    80000fc2:	1c250513          	addi	a0,a0,450 # 80027180 <__func__.0+0x5c0>
    80000fc6:	73f230ef          	jal	80024f04 <printf>
    80000fca:	10c00613          	li	a2,268
    } else if(!excpt.testing){
        ERROR("untested exception!");
    80000fce:	00024597          	auipc	a1,0x24
    80000fd2:	40a58593          	addi	a1,a1,1034 # 800253d8 <__func__.2>
    80000fd6:	00026517          	auipc	a0,0x26
    80000fda:	05250513          	addi	a0,a0,82 # 80027028 <__func__.0+0x468>
    80000fde:	727230ef          	jal	80024f04 <printf>
    80000fe2:	4501                	li	a0,0
    80000fe4:	3df230ef          	jal	80024bc2 <exit>
    } else if(!excpt.testing){
    80000fe8:	00048797          	auipc	a5,0x48
    80000fec:	0287c783          	lbu	a5,40(a5) # 80049010 <excpt>
    80000ff0:	cfe5                	beqz	a5,800010e8 <hshandler+0x17a>
    }
    
    if(cause & (1ULL << 63)){
    80000ff2:	0004d963          	bgez	s1,80001004 <hshandler+0x96>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80000ff6:	4785                	li	a5,1
    80000ff8:	009797b3          	sll	a5,a5,s1
    80000ffc:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    80001000:	6447b073          	csrc	hip,a5
    80001004:	00048417          	auipc	s0,0x48
    80001008:	ffc40413          	addi	s0,s0,-4 # 80049000 <ecall_args>
    }

    excpt.triggered = true;
    8000100c:	4705                	li	a4,1
    excpt.priv = PRIV_HS;
    8000100e:	478d                	li	a5,3
    excpt.cause = cause;
    80001010:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80001012:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    80001016:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    8000101a:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    8000101e:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001022:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_HS;
    80001026:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    80001028:	600027f3          	csrr	a5,hstatus
    8000102c:	8399                	srli	a5,a5,0x6
    8000102e:	8ff9                	and	a5,a5,a4
    80001030:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    80001034:	600027f3          	csrr	a5,hstatus
    80001038:	839d                	srli	a5,a5,0x7
    8000103a:	8ff9                	and	a5,a5,a4
    8000103c:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001040:	00048797          	auipc	a5,0x48
    80001044:	fc078823          	sb	zero,-48(a5) # 80049010 <excpt>
    if(is_inst_fault(cause)){
    80001048:	47d1                	li	a5,20
    8000104a:	0097ed63          	bltu	a5,s1,80001064 <hshandler+0xf6>
    8000104e:	001017b7          	lui	a5,0x101
    80001052:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    80001054:	0097d7b3          	srl	a5,a5,s1
    80001058:	8ff9                	and	a5,a5,a4
    8000105a:	c789                	beqz	a5,80001064 <hshandler+0xf6>
        if(excpt.fault_inst != 0){ 
    8000105c:	04843a03          	ld	s4,72(s0)
    80001060:	0a0a0163          	beqz	s4,80001102 <hshandler+0x194>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001064:	00030797          	auipc	a5,0x30
    80001068:	2707a783          	lw	a5,624(a5) # 800312d4 <curr_priv>
    unsigned temp_priv = real_priv;
    8000106c:	00030517          	auipc	a0,0x30
    80001070:	26452503          	lw	a0,612(a0) # 800312d0 <real_priv>
    excpt.fault_inst = 0;
    80001074:	00048717          	auipc	a4,0x48
    80001078:	fc073a23          	sd	zero,-44(a4) # 80049048 <excpt+0x38>
    real_priv = curr_priv;
    8000107c:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001080:	478d                	li	a5,3
    80001082:	0ef50863          	beq	a0,a5,80001172 <hshandler+0x204>
    80001086:	4791                	li	a5,4
    80001088:	08f50663          	beq	a0,a5,80001114 <hshandler+0x1a6>
    8000108c:	4789                	li	a5,2
    8000108e:	04f51063          	bne	a0,a5,800010ce <hshandler+0x160>
    80001092:	100027f3          	csrr	a5,sstatus
    80001096:	00030717          	auipc	a4,0x30
    8000109a:	23e72703          	lw	a4,574(a4) # 800312d4 <curr_priv>
    8000109e:	4685                	li	a3,1
    800010a0:	edf7f793          	andi	a5,a5,-289
    800010a4:	3779                	addiw	a4,a4,-2
    800010a6:	00e6e463          	bltu	a3,a4,800010ae <hshandler+0x140>
    800010aa:	1007e793          	ori	a5,a5,256
    800010ae:	10079073          	csrw	sstatus,a5
    800010b2:	0004ce63          	bltz	s1,800010ce <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800010b6:	000a5783          	lhu	a5,0(s4)
    800010ba:	468d                	li	a3,3
    else return epc + 2;
    800010bc:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800010c0:	8ff5                	and	a5,a5,a3
    800010c2:	00d79463          	bne	a5,a3,800010ca <hshandler+0x15c>
    800010c6:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800010ca:	14171073          	csrw	sepc,a4
}
    800010ce:	60a6                	ld	ra,72(sp)
    800010d0:	6406                	ld	s0,64(sp)
    800010d2:	1502                	slli	a0,a0,0x20
    800010d4:	74e2                	ld	s1,56(sp)
    800010d6:	7942                	ld	s2,48(sp)
    800010d8:	79a2                	ld	s3,40(sp)
    800010da:	7a02                	ld	s4,32(sp)
    800010dc:	6ae2                	ld	s5,24(sp)
    800010de:	6b42                	ld	s6,16(sp)
    800010e0:	6ba2                	ld	s7,8(sp)
    800010e2:	9101                	srli	a0,a0,0x20
    800010e4:	6161                	addi	sp,sp,80
    800010e6:	8082                	ret
        ERROR("untested exception!");
    800010e8:	00026517          	auipc	a0,0x26
    800010ec:	03050513          	addi	a0,a0,48 # 80027118 <__func__.0+0x558>
    800010f0:	615230ef          	jal	80024f04 <printf>
    800010f4:	10e00613          	li	a2,270
    800010f8:	bdd9                	j	80000fce <hshandler+0x60>
        goto_priv(ecall_args[1]); 
    800010fa:	4408                	lw	a0,8(s0)
    800010fc:	afbff0ef          	jal	80000bf6 <goto_priv>
    if(cause & (1ULL << 63)){
    80001100:	b731                	j	8000100c <hshandler+0x9e>
            ERROR("instruction fault without return address");
    80001102:	00026517          	auipc	a0,0x26
    80001106:	03e50513          	addi	a0,a0,62 # 80027140 <__func__.0+0x580>
    8000110a:	5fb230ef          	jal	80024f04 <printf>
    8000110e:	12600613          	li	a2,294
    80001112:	bd75                	j	80000fce <hshandler+0x60>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001114:	30002773          	csrr	a4,mstatus
    80001118:	fc0007b7          	lui	a5,0xfc000
    8000111c:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    8000111e:	00030697          	auipc	a3,0x30
    80001122:	1b66a683          	lw	a3,438(a3) # 800312d4 <curr_priv>
    80001126:	07b6                	slli	a5,a5,0xd
    80001128:	77f78793          	addi	a5,a5,1919
    8000112c:	8ff9                	and	a5,a5,a4
    8000112e:	06a68263          	beq	a3,a0,80001192 <hshandler+0x224>
    80001132:	ffe6871b          	addiw	a4,a3,-2
    80001136:	4605                	li	a2,1
    80001138:	06e66263          	bltu	a2,a4,8000119c <hshandler+0x22e>
    8000113c:	6705                	lui	a4,0x1
    8000113e:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001142:	4609                	li	a2,2
    80001144:	8fd9                	or	a5,a5,a4
    80001146:	00c69563          	bne	a3,a2,80001150 <hshandler+0x1e2>
    8000114a:	4705                	li	a4,1
    8000114c:	171e                	slli	a4,a4,0x27
    8000114e:	8fd9                	or	a5,a5,a4
    80001150:	30079073          	csrw	mstatus,a5
    80001154:	f604cde3          	bltz	s1,800010ce <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001158:	000a5783          	lhu	a5,0(s4)
    8000115c:	468d                	li	a3,3
    else return epc + 2;
    8000115e:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001162:	8ff5                	and	a5,a5,a3
    80001164:	00d79463          	bne	a5,a3,8000116c <hshandler+0x1fe>
    80001168:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000116c:	34171073          	csrw	mepc,a4
    80001170:	bfb9                	j	800010ce <hshandler+0x160>
    80001172:	600026f3          	csrr	a3,hstatus
    80001176:	00030797          	auipc	a5,0x30
    8000117a:	15e7a783          	lw	a5,350(a5) # 800312d4 <curr_priv>
    8000117e:	0806e713          	ori	a4,a3,128
    80001182:	9bf5                	andi	a5,a5,-3
    80001184:	e781                	bnez	a5,8000118c <hshandler+0x21e>
    80001186:	60071073          	csrw	hstatus,a4
    8000118a:	b721                	j	80001092 <hshandler+0x124>
    8000118c:	f7f6f713          	andi	a4,a3,-129
    80001190:	bfdd                	j	80001186 <hshandler+0x218>
    80001192:	6709                	lui	a4,0x2
    80001194:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001198:	8fd9                	or	a5,a5,a4
    8000119a:	bf5d                	j	80001150 <hshandler+0x1e2>
    8000119c:	d6dd                	beqz	a3,8000114a <hshandler+0x1dc>
    8000119e:	bf4d                	j	80001150 <hshandler+0x1e2>

00000000800011a0 <vshandler>:

uint64_t vshandler(){
    800011a0:	7139                	addi	sp,sp,-64
    800011a2:	f04a                	sd	s2,32(sp)
    800011a4:	fc06                	sd	ra,56(sp)
    800011a6:	f822                	sd	s0,48(sp)
    800011a8:	f426                	sd	s1,40(sp)
    800011aa:	ec4e                	sd	s3,24(sp)
    800011ac:	e852                	sd	s4,16(sp)
    800011ae:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    800011b0:	00030917          	auipc	s2,0x30
    800011b4:	12090913          	addi	s2,s2,288 # 800312d0 <real_priv>
    800011b8:	4709                	li	a4,2
    800011ba:	00e92023          	sw	a4,0(s2)

    uint64_t cause = CSRR(scause);
    800011be:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    800011c2:	141029f3          	csrr	s3,sepc
    800011c6:	84ce                	mv	s1,s3
    uint64_t tval = CSRR(stval);
    800011c8:	14302a73          	csrr	s4,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    800011cc:	478d                	li	a5,3
    800011ce:	ff840693          	addi	a3,s0,-8
    800011d2:	04d7e663          	bltu	a5,a3,8000121e <vshandler+0x7e>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    800011d6:	00048a97          	auipc	s5,0x48
    800011da:	e2aa8a93          	addi	s5,s5,-470 # 80049000 <ecall_args>
    800011de:	000ab703          	ld	a4,0(s5)
    800011e2:	4785                	li	a5,1
    800011e4:	1af70963          	beq	a4,a5,80001396 <vshandler+0x1f6>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800011e8:	00048797          	auipc	a5,0x48
    800011ec:	e287c783          	lbu	a5,-472(a5) # 80049010 <excpt>
    800011f0:	1a079763          	bnez	a5,8000139e <vshandler+0x1fe>
        ERROR("untested exception!");
    800011f4:	00026517          	auipc	a0,0x26
    800011f8:	f2450513          	addi	a0,a0,-220 # 80027118 <__func__.0+0x558>
    800011fc:	509230ef          	jal	80024f04 <printf>
    80001200:	13f00613          	li	a2,319
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    80001204:	00024597          	auipc	a1,0x24
    80001208:	1e458593          	addi	a1,a1,484 # 800253e8 <__func__.1>
    8000120c:	00026517          	auipc	a0,0x26
    80001210:	e1c50513          	addi	a0,a0,-484 # 80027028 <__func__.0+0x468>
    80001214:	4f1230ef          	jal	80024f04 <printf>
    80001218:	4501                	li	a0,0
    8000121a:	1a9230ef          	jal	80024bc2 <exit>
    } else if(!excpt.testing){
    8000121e:	00048697          	auipc	a3,0x48
    80001222:	df26c683          	lbu	a3,-526(a3) # 80049010 <excpt>
    80001226:	00048797          	auipc	a5,0x48
    8000122a:	dda78793          	addi	a5,a5,-550 # 80049000 <ecall_args>
    8000122e:	d2f9                	beqz	a3,800011f4 <vshandler+0x54>
    if(cause & (1ULL << 63)){
    80001230:	0a045e63          	bgez	s0,800012ec <vshandler+0x14c>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    80001234:	4685                	li	a3,1
    80001236:	008696b3          	sll	a3,a3,s0
    8000123a:	1446b073          	csrc	sip,a3
    excpt.testing = false;
    8000123e:	10000693          	li	a3,256
    excpt.priv = PRIV_VS;
    80001242:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    80001244:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001246:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    8000124a:	0347b423          	sd	s4,40(a5)
    excpt.testing = false;
    8000124e:	00d79823          	sh	a3,16(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001252:	00030797          	auipc	a5,0x30
    80001256:	0827a783          	lw	a5,130(a5) # 800312d4 <curr_priv>
    unsigned temp_priv = real_priv;
    8000125a:	00030517          	auipc	a0,0x30
    8000125e:	07652503          	lw	a0,118(a0) # 800312d0 <real_priv>
    excpt.fault_inst = 0;
    80001262:	00048717          	auipc	a4,0x48
    80001266:	de073323          	sd	zero,-538(a4) # 80049048 <excpt+0x38>
    real_priv = curr_priv;
    8000126a:	00f92023          	sw	a5,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000126e:	478d                	li	a5,3
    80001270:	02f50363          	beq	a0,a5,80001296 <vshandler+0xf6>
    80001274:	4791                	li	a5,4
    80001276:	0cf50163          	beq	a0,a5,80001338 <vshandler+0x198>
    8000127a:	4789                	li	a5,2
    8000127c:	02f50b63          	beq	a0,a5,800012b2 <vshandler+0x112>
}
    80001280:	70e2                	ld	ra,56(sp)
    80001282:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001284:	1502                	slli	a0,a0,0x20
}
    80001286:	74a2                	ld	s1,40(sp)
    80001288:	7902                	ld	s2,32(sp)
    8000128a:	69e2                	ld	s3,24(sp)
    8000128c:	6a42                	ld	s4,16(sp)
    8000128e:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001290:	9101                	srli	a0,a0,0x20
}
    80001292:	6121                	addi	sp,sp,64
    80001294:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001296:	600026f3          	csrr	a3,hstatus
    8000129a:	00030797          	auipc	a5,0x30
    8000129e:	03a7a783          	lw	a5,58(a5) # 800312d4 <curr_priv>
    800012a2:	0806e713          	ori	a4,a3,128
    800012a6:	9bf5                	andi	a5,a5,-3
    800012a8:	c399                	beqz	a5,800012ae <vshandler+0x10e>
    800012aa:	f7f6f713          	andi	a4,a3,-129
    800012ae:	60071073          	csrw	hstatus,a4
    800012b2:	100027f3          	csrr	a5,sstatus
    800012b6:	00030717          	auipc	a4,0x30
    800012ba:	01e72703          	lw	a4,30(a4) # 800312d4 <curr_priv>
    800012be:	4685                	li	a3,1
    800012c0:	edf7f793          	andi	a5,a5,-289
    800012c4:	3779                	addiw	a4,a4,-2
    800012c6:	06e6f263          	bgeu	a3,a4,8000132a <vshandler+0x18a>
    800012ca:	10079073          	csrw	sstatus,a5
    800012ce:	fa0449e3          	bltz	s0,80001280 <vshandler+0xe0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800012d2:	0004d783          	lhu	a5,0(s1)
    800012d6:	468d                	li	a3,3
    else return epc + 2;
    800012d8:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800012dc:	8ff5                	and	a5,a5,a3
    800012de:	00d79463          	bne	a5,a3,800012e6 <vshandler+0x146>
    800012e2:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800012e6:	14171073          	csrw	sepc,a4
    800012ea:	bf59                	j	80001280 <vshandler+0xe0>
    excpt.testing = false;
    800012ec:	10000693          	li	a3,256
    excpt.priv = PRIV_VS;
    800012f0:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    800012f2:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    800012f4:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    800012f8:	0347b423          	sd	s4,40(a5)
    excpt.testing = false;
    800012fc:	00d79823          	sh	a3,16(a5)
    if(is_inst_fault(cause)){
    80001300:	4751                	li	a4,20
    80001302:	f48768e3          	bltu	a4,s0,80001252 <vshandler+0xb2>
    80001306:	00101737          	lui	a4,0x101
    8000130a:	070d                	addi	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    8000130c:	00875733          	srl	a4,a4,s0
    80001310:	8b05                	andi	a4,a4,1
    80001312:	d321                	beqz	a4,80001252 <vshandler+0xb2>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    80001314:	67a4                	ld	s1,72(a5)
    80001316:	fc95                	bnez	s1,80001252 <vshandler+0xb2>
        else ERROR("instruction fault without return address");
    80001318:	00026517          	auipc	a0,0x26
    8000131c:	e2850513          	addi	a0,a0,-472 # 80027140 <__func__.0+0x580>
    80001320:	3e5230ef          	jal	80024f04 <printf>
    80001324:	14e00613          	li	a2,334
    80001328:	bdf1                	j	80001204 <vshandler+0x64>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000132a:	1007e793          	ori	a5,a5,256
    8000132e:	10079073          	csrw	sstatus,a5
    80001332:	fa0450e3          	bgez	s0,800012d2 <vshandler+0x132>
    80001336:	b7a9                	j	80001280 <vshandler+0xe0>
    80001338:	30002773          	csrr	a4,mstatus
    8000133c:	fc0007b7          	lui	a5,0xfc000
    80001340:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001342:	00030697          	auipc	a3,0x30
    80001346:	f926a683          	lw	a3,-110(a3) # 800312d4 <curr_priv>
    8000134a:	07b6                	slli	a5,a5,0xd
    8000134c:	77f78793          	addi	a5,a5,1919
    80001350:	8ff9                	and	a5,a5,a4
    80001352:	06a68463          	beq	a3,a0,800013ba <vshandler+0x21a>
    80001356:	ffe6871b          	addiw	a4,a3,-2
    8000135a:	4605                	li	a2,1
    8000135c:	06e66463          	bltu	a2,a4,800013c4 <vshandler+0x224>
    80001360:	6705                	lui	a4,0x1
    80001362:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001366:	4609                	li	a2,2
    80001368:	8fd9                	or	a5,a5,a4
    8000136a:	00c69563          	bne	a3,a2,80001374 <vshandler+0x1d4>
    8000136e:	4705                	li	a4,1
    80001370:	171e                	slli	a4,a4,0x27
    80001372:	8fd9                	or	a5,a5,a4
    80001374:	30079073          	csrw	mstatus,a5
    80001378:	f00444e3          	bltz	s0,80001280 <vshandler+0xe0>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000137c:	0004d783          	lhu	a5,0(s1)
    80001380:	468d                	li	a3,3
    else return epc + 2;
    80001382:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001386:	8ff5                	and	a5,a5,a3
    80001388:	00d79463          	bne	a5,a3,80001390 <vshandler+0x1f0>
    8000138c:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001390:	34171073          	csrw	mepc,a4
    80001394:	b5f5                	j	80001280 <vshandler+0xe0>
        goto_priv(ecall_args[1]); 
    80001396:	008aa503          	lw	a0,8(s5)
    8000139a:	85dff0ef          	jal	80000bf6 <goto_priv>
    excpt.priv = PRIV_VS;
    8000139e:	4709                	li	a4,2
    excpt.testing = false;
    800013a0:	10000793          	li	a5,256
    excpt.cause = cause;
    800013a4:	008abc23          	sd	s0,24(s5)
    excpt.epc = epc;
    800013a8:	033ab023          	sd	s3,32(s5)
    excpt.tval = tval;
    800013ac:	034ab423          	sd	s4,40(s5)
    excpt.priv = PRIV_VS;
    800013b0:	00eaaa23          	sw	a4,20(s5)
    excpt.testing = false;
    800013b4:	00fa9823          	sh	a5,16(s5)
    if(is_inst_fault(cause)){
    800013b8:	bd69                	j	80001252 <vshandler+0xb2>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800013ba:	6709                	lui	a4,0x2
    800013bc:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    800013c0:	8fd9                	or	a5,a5,a4
    800013c2:	bf4d                	j	80001374 <vshandler+0x1d4>
    800013c4:	d6cd                	beqz	a3,8000136e <vshandler+0x1ce>
    800013c6:	b77d                	j	80001374 <vshandler+0x1d4>

00000000800013c8 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    800013c8:	1141                	addi	sp,sp,-16
    800013ca:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    800013cc:	00357713          	andi	a4,a0,3
    800013d0:	478d                	li	a5,3
    800013d2:	04f70763          	beq	a4,a5,80001420 <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    800013d6:	77f9                	lui	a5,0xffffe
    800013d8:	078d                	addi	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    800013da:	8fe9                	and	a5,a5,a0
    800013dc:	6711                	lui	a4,0x4
    800013de:	85aa                	mv	a1,a0
    800013e0:	08e78963          	beq	a5,a4,80001472 <expand_compressed_instruction+0xaa>
    800013e4:	6719                	lui	a4,0x6
    800013e6:	04e78663          	beq	a5,a4,80001432 <expand_compressed_instruction+0x6a>
    800013ea:	6731                	lui	a4,0xc
    800013ec:	0ae78b63          	beq	a5,a4,800014a2 <expand_compressed_instruction+0xda>
    800013f0:	6739                	lui	a4,0xe
    800013f2:	0ae78363          	beq	a5,a4,80001498 <expand_compressed_instruction+0xd0>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    800013f6:	00026517          	auipc	a0,0x26
    800013fa:	dea50513          	addi	a0,a0,-534 # 800271e0 <__func__.0+0x620>
    800013fe:	307230ef          	jal	80024f04 <printf>
    80001402:	16d00613          	li	a2,365
    80001406:	00024597          	auipc	a1,0x24
    8000140a:	ff258593          	addi	a1,a1,-14 # 800253f8 <__func__.0>
    8000140e:	00026517          	auipc	a0,0x26
    80001412:	c1a50513          	addi	a0,a0,-998 # 80027028 <__func__.0+0x468>
    80001416:	2ef230ef          	jal	80024f04 <printf>
    8000141a:	4501                	li	a0,0
    8000141c:	7a6230ef          	jal	80024bc2 <exit>
        ERROR("trying to expand non-compressed instruction");
    80001420:	00026517          	auipc	a0,0x26
    80001424:	d8050513          	addi	a0,a0,-640 # 800271a0 <__func__.0+0x5e0>
    80001428:	2dd230ef          	jal	80024f04 <printf>
    8000142c:	15a00613          	li	a2,346
    80001430:	bfd9                	j	80001406 <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    80001432:	668d                	lui	a3,0x3
    80001434:	068d                	addi	a3,a3,3 # 3003 <_test_table_size+0x3002>
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    80001436:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001438:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000143c:	0075d713          	srli	a4,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001440:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001442:	8b1d                	andi	a4,a4,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001444:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001446:	2721                	addiw	a4,a4,8 # e008 <_test_table_size+0xe007>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) << 6 :
    80001448:	0055d613          	srli	a2,a1,0x5
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000144c:	0606                	slli	a2,a2,0x1
    8000144e:	0196161b          	slliw	a2,a2,0x19
    80001452:	0e0005b7          	lui	a1,0xe000
    80001456:	8e6d                	and	a2,a2,a1
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001458:	45d1                	li	a1,20
    8000145a:	c111                	beqz	a0,8000145e <expand_compressed_instruction+0x96>
    8000145c:	459d                	li	a1,7
    }

}
    8000145e:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    80001460:	8ed1                	or	a3,a3,a2
    80001462:	00f7171b          	slliw	a4,a4,0xf
    80001466:	8f55                	or	a4,a4,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001468:	00b7953b          	sllw	a0,a5,a1
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000146c:	8d59                	or	a0,a0,a4
}
    8000146e:	0141                	addi	sp,sp,16
    80001470:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    80001472:	6689                	lui	a3,0x2
    80001474:	068d                	addi	a3,a3,3 # 2003 <_test_table_size+0x2002>
    80001476:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001478:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000147c:	0075d713          	srli	a4,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001480:	00a5d813          	srli	a6,a1,0xa
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001484:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001486:	8b1d                	andi	a4,a4,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001488:	00787813          	andi	a6,a6,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000148c:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000148e:	2721                	addiw	a4,a4,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001490:	4601                	li	a2,0
    80001492:	fc0803e3          	beqz	a6,80001458 <expand_compressed_instruction+0x90>
    80001496:	bf4d                	j	80001448 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001498:	668d                	lui	a3,0x3
    8000149a:	02368693          	addi	a3,a3,35 # 3023 <_test_table_size+0x3022>
    8000149e:	4501                	li	a0,0
    800014a0:	bf61                	j	80001438 <expand_compressed_instruction+0x70>
    800014a2:	6689                	lui	a3,0x2
    800014a4:	02368693          	addi	a3,a3,35 # 2023 <_test_table_size+0x2022>
    800014a8:	4501                	li	a0,0
    800014aa:	b7f9                	j	80001478 <expand_compressed_instruction+0xb0>

00000000800014ac <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    800014ac:	1141                	addi	sp,sp,-16

    goto_priv(PRIV_M);
    800014ae:	4511                	li	a0,4
void reset_state(){
    800014b0:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    800014b2:	f44ff0ef          	jal	80000bf6 <goto_priv>
    CSRW(mstatus, 0ULL);
    800014b6:	30005073          	csrwi	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    800014ba:	30205073          	csrwi	medeleg,0
    CSRW(mideleg, 0ULL);
    800014be:	30305073          	csrwi	mideleg,0
    CSRW(mip, 0ULL);
    800014c2:	34405073          	csrwi	mip,0
    CSRW(mie, 0ULL);
    800014c6:	30405073          	csrwi	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    800014ca:	34005073          	csrwi	mscratch,0
    CSRW(mepc, 0ULL);
    800014ce:	34105073          	csrwi	mepc,0
    CSRW(mtval, 0ULL);
    800014d2:	34305073          	csrwi	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    800014d6:	34a05073          	csrwi	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    800014da:	34b05073          	csrwi	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    800014de:	10005073          	csrwi	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    800014e2:	14405073          	csrwi	sip,0
    CSRW(sie, 0ULL);
    800014e6:	10405073          	csrwi	sie,0
    CSRW(sscratch, 0ULL);
    800014ea:	14005073          	csrwi	sscratch,0
    CSRW(sepc, 0ULL);
    800014ee:	14105073          	csrwi	sepc,0
    CSRW(scause, 0ULL);
    800014f2:	14205073          	csrwi	scause,0
    CSRW(stval, 0ULL);
    800014f6:	14305073          	csrwi	stval,0
    CSRW(satp, 0ULL);
    800014fa:	18005073          	csrwi	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    800014fe:	60005073          	csrwi	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    80001502:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    80001506:	60205073          	csrwi	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    8000150a:	64505073          	csrwi	hvip,0
    CSRW(CSR_HIP, 0ULL);
    8000150e:	64405073          	csrwi	hip,0
    CSRW(CSR_HIE, 0ULL);  
    80001512:	60405073          	csrwi	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    80001516:	64305073          	csrwi	htval,0
    CSRW(CSR_HTINST, 0ULL);
    8000151a:	64a05073          	csrwi	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    8000151e:	68005073          	csrwi	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    80001522:	20005073          	csrwi	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    80001526:	24405073          	csrwi	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    8000152a:	20405073          	csrwi	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    8000152e:	24005073          	csrwi	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    80001532:	24105073          	csrwi	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    80001536:	24205073          	csrwi	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    8000153a:	24305073          	csrwi	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    8000153e:	28005073          	csrwi	vsatp,0

    CSRW(mtvec, mhandler_entry);
    80001542:	00024797          	auipc	a5,0x24
    80001546:	c1278793          	addi	a5,a5,-1006 # 80025154 <mhandler_entry>
    8000154a:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    8000154e:	50000793          	li	a5,1280
    80001552:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    80001556:	3a07d073          	csrwi	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    8000155a:	57fd                	li	a5,-1
    8000155c:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    80001560:	00024797          	auipc	a5,0x24
    80001564:	c3c78793          	addi	a5,a5,-964 # 8002519c <hshandler_entry>
    80001568:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    8000156c:	10000793          	li	a5,256
    80001570:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    80001574:	00024797          	auipc	a5,0x24
    80001578:	c7078793          	addi	a5,a5,-912 # 800251e4 <vshandler_entry>
    8000157c:	20579073          	csrw	vstvec,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    80001580:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    80001584:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80001588:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
}
    8000158c:	60a2                	ld	ra,8(sp)
    8000158e:	0141                	addi	sp,sp,16
    80001590:	8082                	ret

0000000080001592 <random_m_instruction>:
#include <rvh_test.h>
#include <instructions.h> 
#include <csrs.h>

void random_m_instruction(){
    int rand1=CSRR(time);
    80001592:	c01027f3          	rdtime	a5
    int rand2=CSRR(cycle);
    80001596:	c00026f3          	rdcycle	a3
    int num0=rand1+rand2;
    int num=num0%10;
    8000159a:	66666737          	lui	a4,0x66666
    int num0=rand1+rand2;
    8000159e:	9fb5                	addw	a5,a5,a3
    int num=num0%10;
    800015a0:	66770713          	addi	a4,a4,1639 # 66666667 <STACK_SIZE+0x66566667>
    800015a4:	02e78733          	mul	a4,a5,a4
    800015a8:	41f7d69b          	sraiw	a3,a5,0x1f

    switch (num)
    800015ac:	4625                	li	a2,9
    int num=num0%10;
    800015ae:	9709                	srai	a4,a4,0x22
    800015b0:	9f15                	subw	a4,a4,a3
    800015b2:	0027169b          	slliw	a3,a4,0x2
    800015b6:	9f35                	addw	a4,a4,a3
    800015b8:	0017171b          	slliw	a4,a4,0x1
    800015bc:	9f99                	subw	a5,a5,a4
    switch (num)
    800015be:	08f66a63          	bltu	a2,a5,80001652 <random_m_instruction+0xc0>
    800015c2:	02079713          	slli	a4,a5,0x20
    800015c6:	01e75793          	srli	a5,a4,0x1e
    800015ca:	00024717          	auipc	a4,0x24
    800015ce:	e4e70713          	addi	a4,a4,-434 # 80025418 <__func__.0+0x20>
    800015d2:	97ba                	add	a5,a5,a4
    800015d4:	439c                	lw	a5,0(a5)
    800015d6:	97ba                	add	a5,a5,a4
    800015d8:	8782                	jr	a5
        break;
    case 7:
        printf("这是7号指令\n");
        break;
    case 8:
        printf("这是8号指令\n");
    800015da:	00026517          	auipc	a0,0x26
    800015de:	d1e50513          	addi	a0,a0,-738 # 800272f8 <__func__.0+0x738>
    800015e2:	64e2306f          	j	80024c30 <puts>
        break;
    case 9:
        printf("这是9号指令\n");
    800015e6:	00026517          	auipc	a0,0x26
    800015ea:	d2a50513          	addi	a0,a0,-726 # 80027310 <__func__.0+0x750>
    800015ee:	6422306f          	j	80024c30 <puts>
        printf("这是0号指令\n");
    800015f2:	00026517          	auipc	a0,0x26
    800015f6:	c4650513          	addi	a0,a0,-954 # 80027238 <__func__.0+0x678>
    800015fa:	6362306f          	j	80024c30 <puts>
        printf("这是1号指令\n");
    800015fe:	00026517          	auipc	a0,0x26
    80001602:	c5250513          	addi	a0,a0,-942 # 80027250 <__func__.0+0x690>
    80001606:	62a2306f          	j	80024c30 <puts>
        printf("这是2号指令\n");
    8000160a:	00026517          	auipc	a0,0x26
    8000160e:	c5e50513          	addi	a0,a0,-930 # 80027268 <__func__.0+0x6a8>
    80001612:	61e2306f          	j	80024c30 <puts>
        printf("这是3号指令\n");
    80001616:	00026517          	auipc	a0,0x26
    8000161a:	c6a50513          	addi	a0,a0,-918 # 80027280 <__func__.0+0x6c0>
    8000161e:	6122306f          	j	80024c30 <puts>
        printf("这是4号指令\n");
    80001622:	00026517          	auipc	a0,0x26
    80001626:	c7650513          	addi	a0,a0,-906 # 80027298 <__func__.0+0x6d8>
    8000162a:	6062306f          	j	80024c30 <puts>
        printf("这是5号指令\n");
    8000162e:	00026517          	auipc	a0,0x26
    80001632:	c8250513          	addi	a0,a0,-894 # 800272b0 <__func__.0+0x6f0>
    80001636:	5fa2306f          	j	80024c30 <puts>
        printf("这是6号指令\n");
    8000163a:	00026517          	auipc	a0,0x26
    8000163e:	c8e50513          	addi	a0,a0,-882 # 800272c8 <__func__.0+0x708>
    80001642:	5ee2306f          	j	80024c30 <puts>
        printf("这是7号指令\n");
    80001646:	00026517          	auipc	a0,0x26
    8000164a:	c9a50513          	addi	a0,a0,-870 # 800272e0 <__func__.0+0x720>
    8000164e:	5e22306f          	j	80024c30 <puts>
    
    
    default:
        break;
    }
    80001652:	8082                	ret

0000000080001654 <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    80001654:	7179                	addi	sp,sp,-48

    TEST_START();
    80001656:	00024597          	auipc	a1,0x24
    8000165a:	dea58593          	addi	a1,a1,-534 # 80025440 <__func__.3>
    8000165e:	00026517          	auipc	a0,0x26
    80001662:	84250513          	addi	a0,a0,-1982 # 80026ea0 <__func__.0+0x2e0>
bool check_xip_regs_1(){
    80001666:	f406                	sd	ra,40(sp)
    80001668:	f022                	sd	s0,32(sp)
    8000166a:	ec26                	sd	s1,24(sp)
    8000166c:	e84a                	sd	s2,16(sp)
    8000166e:	e44e                	sd	s3,8(sp)
    80001670:	e052                	sd	s4,0(sp)
    TEST_START();
    80001672:	093230ef          	jal	80024f04 <printf>
    80001676:	4529                	li	a0,10
    80001678:	696220ef          	jal	80023d0e <putchar>

    CSRW(mideleg, 0);
    8000167c:	30305073          	csrwi	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    80001680:	547d                	li	s0,-1
    80001682:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001686:	60341073          	csrw	hideleg,s0
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    8000168a:	244029f3          	csrr	s3,vsip
    8000168e:	24441073          	csrw	vsip,s0
    80001692:	244024f3          	csrr	s1,vsip
    80001696:	00026617          	auipc	a2,0x26
    8000169a:	c9260613          	addi	a2,a2,-878 # 80027328 <__func__.0+0x768>
    8000169e:	08200593          	li	a1,130
    800016a2:	00026517          	auipc	a0,0x26
    800016a6:	81650513          	addi	a0,a0,-2026 # 80026eb8 <__func__.0+0x2f8>
    800016aa:	4909                	li	s2,2
    800016ac:	059230ef          	jal	80024f04 <printf>
    800016b0:	11248f63          	beq	s1,s2,800017ce <check_xip_regs_1+0x17a>
    800016b4:	00025597          	auipc	a1,0x25
    800016b8:	7dc58593          	addi	a1,a1,2012 # 80026e90 <__func__.0+0x2d0>
    800016bc:	00026517          	auipc	a0,0x26
    800016c0:	81450513          	addi	a0,a0,-2028 # 80026ed0 <__func__.0+0x310>
    800016c4:	041230ef          	jal	80024f04 <printf>
    800016c8:	00026517          	auipc	a0,0x26
    800016cc:	81050513          	addi	a0,a0,-2032 # 80026ed8 <__func__.0+0x318>
    800016d0:	035230ef          	jal	80024f04 <printf>
    800016d4:	86ca                	mv	a3,s2
    800016d6:	8626                	mv	a2,s1
    800016d8:	85a2                	mv	a1,s0
    800016da:	00026517          	auipc	a0,0x26
    800016de:	80650513          	addi	a0,a0,-2042 # 80026ee0 <__func__.0+0x320>
    800016e2:	023230ef          	jal	80024f04 <printf>
    800016e6:	02900513          	li	a0,41
    800016ea:	624220ef          	jal	80023d0e <putchar>
    800016ee:	4529                	li	a0,10
    800016f0:	61e220ef          	jal	80023d0e <putchar>
    800016f4:	4a01                	li	s4,0
    800016f6:	24499073          	csrw	vsip,s3
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    800016fa:	204029f3          	csrr	s3,vsie
    800016fe:	54fd                	li	s1,-1
    80001700:	20449073          	csrw	vsie,s1
    80001704:	20402973          	csrr	s2,vsie
    80001708:	6409                	lui	s0,0x2
    8000170a:	00026617          	auipc	a2,0x26
    8000170e:	c2660613          	addi	a2,a2,-986 # 80027330 <__func__.0+0x770>
    80001712:	08200593          	li	a1,130
    80001716:	00025517          	auipc	a0,0x25
    8000171a:	7a250513          	addi	a0,a0,1954 # 80026eb8 <__func__.0+0x2f8>
    8000171e:	22240413          	addi	s0,s0,546 # 2222 <_test_table_size+0x2221>
    80001722:	7e2230ef          	jal	80024f04 <printf>
    80001726:	06890d63          	beq	s2,s0,800017a0 <check_xip_regs_1+0x14c>
    8000172a:	00025597          	auipc	a1,0x25
    8000172e:	76658593          	addi	a1,a1,1894 # 80026e90 <__func__.0+0x2d0>
    80001732:	00025517          	auipc	a0,0x25
    80001736:	79e50513          	addi	a0,a0,1950 # 80026ed0 <__func__.0+0x310>
    8000173a:	7ca230ef          	jal	80024f04 <printf>
    8000173e:	00025517          	auipc	a0,0x25
    80001742:	79a50513          	addi	a0,a0,1946 # 80026ed8 <__func__.0+0x318>
    80001746:	7be230ef          	jal	80024f04 <printf>
    8000174a:	86a2                	mv	a3,s0
    8000174c:	864a                	mv	a2,s2
    8000174e:	85a6                	mv	a1,s1
    80001750:	00025517          	auipc	a0,0x25
    80001754:	79050513          	addi	a0,a0,1936 # 80026ee0 <__func__.0+0x320>
    80001758:	7ac230ef          	jal	80024f04 <printf>
    8000175c:	02900513          	li	a0,41
    80001760:	5ae220ef          	jal	80023d0e <putchar>
    80001764:	4529                	li	a0,10
    80001766:	5a8220ef          	jal	80023d0e <putchar>
    8000176a:	20499073          	csrw	vsie,s3
    8000176e:	4401                	li	s0,0
    
    TEST_END();
    80001770:	00025597          	auipc	a1,0x25
    80001774:	72058593          	addi	a1,a1,1824 # 80026e90 <__func__.0+0x2d0>
    80001778:	00025517          	auipc	a0,0x25
    8000177c:	7c050513          	addi	a0,a0,1984 # 80026f38 <__func__.0+0x378>
    80001780:	784230ef          	jal	80024f04 <printf>
    80001784:	4511                	li	a0,4
    80001786:	c70ff0ef          	jal	80000bf6 <goto_priv>
    8000178a:	d23ff0ef          	jal	800014ac <reset_state>
}
    8000178e:	70a2                	ld	ra,40(sp)
    80001790:	8522                	mv	a0,s0
    80001792:	7402                	ld	s0,32(sp)
    80001794:	64e2                	ld	s1,24(sp)
    80001796:	6942                	ld	s2,16(sp)
    80001798:	69a2                	ld	s3,8(sp)
    8000179a:	6a02                	ld	s4,0(sp)
    8000179c:	6145                	addi	sp,sp,48
    8000179e:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    800017a0:	00025597          	auipc	a1,0x25
    800017a4:	6e058593          	addi	a1,a1,1760 # 80026e80 <__func__.0+0x2c0>
    800017a8:	00025517          	auipc	a0,0x25
    800017ac:	72850513          	addi	a0,a0,1832 # 80026ed0 <__func__.0+0x310>
    800017b0:	754230ef          	jal	80024f04 <printf>
    800017b4:	4529                	li	a0,10
    800017b6:	558220ef          	jal	80023d0e <putchar>
    800017ba:	fa0a08e3          	beqz	s4,8000176a <check_xip_regs_1+0x116>
    800017be:	20499073          	csrw	vsie,s3
    800017c2:	4405                	li	s0,1
    TEST_END();
    800017c4:	00025597          	auipc	a1,0x25
    800017c8:	6bc58593          	addi	a1,a1,1724 # 80026e80 <__func__.0+0x2c0>
    800017cc:	b775                	j	80001778 <check_xip_regs_1+0x124>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    800017ce:	00025597          	auipc	a1,0x25
    800017d2:	6b258593          	addi	a1,a1,1714 # 80026e80 <__func__.0+0x2c0>
    800017d6:	00025517          	auipc	a0,0x25
    800017da:	6fa50513          	addi	a0,a0,1786 # 80026ed0 <__func__.0+0x310>
    800017de:	726230ef          	jal	80024f04 <printf>
    800017e2:	4529                	li	a0,10
    800017e4:	52a220ef          	jal	80023d0e <putchar>
    800017e8:	4a05                	li	s4,1
    800017ea:	b731                	j	800016f6 <check_xip_regs_1+0xa2>

00000000800017ec <check_xip_regs_2>:

bool check_xip_regs_2(){
    800017ec:	1101                	addi	sp,sp,-32

    TEST_START();
    800017ee:	00024597          	auipc	a1,0x24
    800017f2:	c6a58593          	addi	a1,a1,-918 # 80025458 <__func__.2>
    800017f6:	00025517          	auipc	a0,0x25
    800017fa:	6aa50513          	addi	a0,a0,1706 # 80026ea0 <__func__.0+0x2e0>
bool check_xip_regs_2(){
    800017fe:	ec06                	sd	ra,24(sp)
    80001800:	e822                	sd	s0,16(sp)
    80001802:	e426                	sd	s1,8(sp)
    80001804:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001806:	6fe230ef          	jal	80024f04 <printf>
    8000180a:	4529                	li	a0,10
    8000180c:	502220ef          	jal	80023d0e <putchar>

    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80001810:	57fd                	li	a5,-1
    80001812:	03f79713          	slli	a4,a5,0x3f
    80001816:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    8000181a:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    8000181e:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80001822:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001826:	64402473          	csrr	s0,hip
    8000182a:	00026617          	auipc	a2,0x26
    8000182e:	b0e60613          	addi	a2,a2,-1266 # 80027338 <__func__.0+0x778>
    80001832:	08200593          	li	a1,130
    80001836:	00025517          	auipc	a0,0x25
    8000183a:	68250513          	addi	a0,a0,1666 # 80026eb8 <__func__.0+0x2f8>
    8000183e:	4491                	li	s1,4
    80001840:	6c4230ef          	jal	80024f04 <printf>
    80001844:	46940463          	beq	s0,s1,80001cac <check_xip_regs_2+0x4c0>
    80001848:	00025597          	auipc	a1,0x25
    8000184c:	64858593          	addi	a1,a1,1608 # 80026e90 <__func__.0+0x2d0>
    80001850:	00025517          	auipc	a0,0x25
    80001854:	68050513          	addi	a0,a0,1664 # 80026ed0 <__func__.0+0x310>
    80001858:	6ac230ef          	jal	80024f04 <printf>
    8000185c:	00025517          	auipc	a0,0x25
    80001860:	67c50513          	addi	a0,a0,1660 # 80026ed8 <__func__.0+0x318>
    80001864:	6a0230ef          	jal	80024f04 <printf>
    80001868:	8622                	mv	a2,s0
    8000186a:	86a6                	mv	a3,s1
    8000186c:	02d00593          	li	a1,45
    80001870:	00026517          	auipc	a0,0x26
    80001874:	ad050513          	addi	a0,a0,-1328 # 80027340 <__func__.0+0x780>
    80001878:	68c230ef          	jal	80024f04 <printf>
    8000187c:	02900513          	li	a0,41
    80001880:	48e220ef          	jal	80023d0e <putchar>
    80001884:	4529                	li	a0,10
    80001886:	488220ef          	jal	80023d0e <putchar>
    8000188a:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    8000188c:	144024f3          	csrr	s1,sip
    80001890:	00026617          	auipc	a2,0x26
    80001894:	ac860613          	addi	a2,a2,-1336 # 80027358 <__func__.0+0x798>
    80001898:	08200593          	li	a1,130
    8000189c:	00025517          	auipc	a0,0x25
    800018a0:	61c50513          	addi	a0,a0,1564 # 80026eb8 <__func__.0+0x2f8>
    800018a4:	22200913          	li	s2,546
    800018a8:	65c230ef          	jal	80024f04 <printf>
    800018ac:	3b248663          	beq	s1,s2,80001c58 <check_xip_regs_2+0x46c>
    800018b0:	00025597          	auipc	a1,0x25
    800018b4:	5e058593          	addi	a1,a1,1504 # 80026e90 <__func__.0+0x2d0>
    800018b8:	00025517          	auipc	a0,0x25
    800018bc:	61850513          	addi	a0,a0,1560 # 80026ed0 <__func__.0+0x310>
    800018c0:	644230ef          	jal	80024f04 <printf>
    800018c4:	00025517          	auipc	a0,0x25
    800018c8:	61450513          	addi	a0,a0,1556 # 80026ed8 <__func__.0+0x318>
    800018cc:	638230ef          	jal	80024f04 <printf>
    800018d0:	86ca                	mv	a3,s2
    800018d2:	8626                	mv	a2,s1
    800018d4:	02d00593          	li	a1,45
    800018d8:	00026517          	auipc	a0,0x26
    800018dc:	a6850513          	addi	a0,a0,-1432 # 80027340 <__func__.0+0x780>
    800018e0:	624230ef          	jal	80024f04 <printf>
    800018e4:	02900513          	li	a0,41
    800018e8:	426220ef          	jal	80023d0e <putchar>
    800018ec:	4529                	li	a0,10
    800018ee:	420220ef          	jal	80023d0e <putchar>
    800018f2:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800018f4:	244024f3          	csrr	s1,vsip
    800018f8:	00026617          	auipc	a2,0x26
    800018fc:	a3060613          	addi	a2,a2,-1488 # 80027328 <__func__.0+0x768>
    80001900:	08200593          	li	a1,130
    80001904:	00025517          	auipc	a0,0x25
    80001908:	5b450513          	addi	a0,a0,1460 # 80026eb8 <__func__.0+0x2f8>
    8000190c:	4909                	li	s2,2
    8000190e:	5f6230ef          	jal	80024f04 <printf>
    80001912:	37248f63          	beq	s1,s2,80001c90 <check_xip_regs_2+0x4a4>
    80001916:	00025597          	auipc	a1,0x25
    8000191a:	57a58593          	addi	a1,a1,1402 # 80026e90 <__func__.0+0x2d0>
    8000191e:	00025517          	auipc	a0,0x25
    80001922:	5b250513          	addi	a0,a0,1458 # 80026ed0 <__func__.0+0x310>
    80001926:	5de230ef          	jal	80024f04 <printf>
    8000192a:	00025517          	auipc	a0,0x25
    8000192e:	5ae50513          	addi	a0,a0,1454 # 80026ed8 <__func__.0+0x318>
    80001932:	5d2230ef          	jal	80024f04 <printf>
    80001936:	86ca                	mv	a3,s2
    80001938:	8626                	mv	a2,s1
    8000193a:	02d00593          	li	a1,45
    8000193e:	00026517          	auipc	a0,0x26
    80001942:	a0250513          	addi	a0,a0,-1534 # 80027340 <__func__.0+0x780>
    80001946:	5be230ef          	jal	80024f04 <printf>
    8000194a:	02900513          	li	a0,41
    8000194e:	3c0220ef          	jal	80023d0e <putchar>
    80001952:	4529                	li	a0,10
    80001954:	3ba220ef          	jal	80023d0e <putchar>
    80001958:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8000195a:	4509                	li	a0,2
    8000195c:	a9aff0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001960:	144024f3          	csrr	s1,sip
    80001964:	00026617          	auipc	a2,0x26
    80001968:	9fc60613          	addi	a2,a2,-1540 # 80027360 <__func__.0+0x7a0>
    8000196c:	08200593          	li	a1,130
    80001970:	00025517          	auipc	a0,0x25
    80001974:	54850513          	addi	a0,a0,1352 # 80026eb8 <__func__.0+0x2f8>
    80001978:	4909                	li	s2,2
    8000197a:	58a230ef          	jal	80024f04 <printf>
    8000197e:	2f248b63          	beq	s1,s2,80001c74 <check_xip_regs_2+0x488>
    80001982:	00025597          	auipc	a1,0x25
    80001986:	50e58593          	addi	a1,a1,1294 # 80026e90 <__func__.0+0x2d0>
    8000198a:	00025517          	auipc	a0,0x25
    8000198e:	54650513          	addi	a0,a0,1350 # 80026ed0 <__func__.0+0x310>
    80001992:	572230ef          	jal	80024f04 <printf>
    80001996:	00025517          	auipc	a0,0x25
    8000199a:	54250513          	addi	a0,a0,1346 # 80026ed8 <__func__.0+0x318>
    8000199e:	566230ef          	jal	80024f04 <printf>
    800019a2:	86ca                	mv	a3,s2
    800019a4:	8626                	mv	a2,s1
    800019a6:	02d00593          	li	a1,45
    800019aa:	00026517          	auipc	a0,0x26
    800019ae:	99650513          	addi	a0,a0,-1642 # 80027340 <__func__.0+0x780>
    800019b2:	552230ef          	jal	80024f04 <printf>
    800019b6:	02900513          	li	a0,41
    800019ba:	354220ef          	jal	80023d0e <putchar>
    800019be:	4529                	li	a0,10
    800019c0:	34e220ef          	jal	80023d0e <putchar>
    800019c4:	4401                	li	s0,0
    goto_priv(PRIV_M);
    800019c6:	4511                	li	a0,4
    800019c8:	a2eff0ef          	jal	80000bf6 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    800019cc:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    800019d0:	644024f3          	csrr	s1,hip
    800019d4:	00026617          	auipc	a2,0x26
    800019d8:	96460613          	addi	a2,a2,-1692 # 80027338 <__func__.0+0x778>
    800019dc:	08200593          	li	a1,130
    800019e0:	00025517          	auipc	a0,0x25
    800019e4:	4d850513          	addi	a0,a0,1240 # 80026eb8 <__func__.0+0x2f8>
    800019e8:	51c230ef          	jal	80024f04 <printf>
    800019ec:	1a048663          	beqz	s1,80001b98 <check_xip_regs_2+0x3ac>
    800019f0:	00025597          	auipc	a1,0x25
    800019f4:	4a058593          	addi	a1,a1,1184 # 80026e90 <__func__.0+0x2d0>
    800019f8:	00025517          	auipc	a0,0x25
    800019fc:	4d850513          	addi	a0,a0,1240 # 80026ed0 <__func__.0+0x310>
    80001a00:	504230ef          	jal	80024f04 <printf>
    80001a04:	00025517          	auipc	a0,0x25
    80001a08:	4d450513          	addi	a0,a0,1236 # 80026ed8 <__func__.0+0x318>
    80001a0c:	4f8230ef          	jal	80024f04 <printf>
    80001a10:	8626                	mv	a2,s1
    80001a12:	4681                	li	a3,0
    80001a14:	02d00593          	li	a1,45
    80001a18:	00026517          	auipc	a0,0x26
    80001a1c:	92850513          	addi	a0,a0,-1752 # 80027340 <__func__.0+0x780>
    80001a20:	4e4230ef          	jal	80024f04 <printf>
    80001a24:	02900513          	li	a0,41
    80001a28:	2e6220ef          	jal	80023d0e <putchar>
    80001a2c:	4529                	li	a0,10
    80001a2e:	2e0220ef          	jal	80023d0e <putchar>
    80001a32:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001a34:	144024f3          	csrr	s1,sip
    80001a38:	00026617          	auipc	a2,0x26
    80001a3c:	92060613          	addi	a2,a2,-1760 # 80027358 <__func__.0+0x798>
    80001a40:	08200593          	li	a1,130
    80001a44:	00025517          	auipc	a0,0x25
    80001a48:	47450513          	addi	a0,a0,1140 # 80026eb8 <__func__.0+0x2f8>
    80001a4c:	4b8230ef          	jal	80024f04 <printf>
    80001a50:	18048163          	beqz	s1,80001bd2 <check_xip_regs_2+0x3e6>
    80001a54:	00025597          	auipc	a1,0x25
    80001a58:	43c58593          	addi	a1,a1,1084 # 80026e90 <__func__.0+0x2d0>
    80001a5c:	00025517          	auipc	a0,0x25
    80001a60:	47450513          	addi	a0,a0,1140 # 80026ed0 <__func__.0+0x310>
    80001a64:	4a0230ef          	jal	80024f04 <printf>
    80001a68:	00025517          	auipc	a0,0x25
    80001a6c:	47050513          	addi	a0,a0,1136 # 80026ed8 <__func__.0+0x318>
    80001a70:	494230ef          	jal	80024f04 <printf>
    80001a74:	8626                	mv	a2,s1
    80001a76:	4681                	li	a3,0
    80001a78:	02d00593          	li	a1,45
    80001a7c:	00026517          	auipc	a0,0x26
    80001a80:	8c450513          	addi	a0,a0,-1852 # 80027340 <__func__.0+0x780>
    80001a84:	480230ef          	jal	80024f04 <printf>
    80001a88:	02900513          	li	a0,41
    80001a8c:	282220ef          	jal	80023d0e <putchar>
    80001a90:	4529                	li	a0,10
    80001a92:	27c220ef          	jal	80023d0e <putchar>
    80001a96:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001a98:	244024f3          	csrr	s1,vsip
    80001a9c:	00026617          	auipc	a2,0x26
    80001aa0:	88c60613          	addi	a2,a2,-1908 # 80027328 <__func__.0+0x768>
    80001aa4:	08200593          	li	a1,130
    80001aa8:	00025517          	auipc	a0,0x25
    80001aac:	41050513          	addi	a0,a0,1040 # 80026eb8 <__func__.0+0x2f8>
    80001ab0:	454230ef          	jal	80024f04 <printf>
    80001ab4:	14048c63          	beqz	s1,80001c0c <check_xip_regs_2+0x420>
    80001ab8:	00025597          	auipc	a1,0x25
    80001abc:	3d858593          	addi	a1,a1,984 # 80026e90 <__func__.0+0x2d0>
    80001ac0:	00025517          	auipc	a0,0x25
    80001ac4:	41050513          	addi	a0,a0,1040 # 80026ed0 <__func__.0+0x310>
    80001ac8:	43c230ef          	jal	80024f04 <printf>
    80001acc:	00025517          	auipc	a0,0x25
    80001ad0:	40c50513          	addi	a0,a0,1036 # 80026ed8 <__func__.0+0x318>
    80001ad4:	430230ef          	jal	80024f04 <printf>
    80001ad8:	8626                	mv	a2,s1
    80001ada:	4681                	li	a3,0
    80001adc:	02d00593          	li	a1,45
    80001ae0:	00026517          	auipc	a0,0x26
    80001ae4:	86050513          	addi	a0,a0,-1952 # 80027340 <__func__.0+0x780>
    80001ae8:	41c230ef          	jal	80024f04 <printf>
    80001aec:	02900513          	li	a0,41
    80001af0:	21e220ef          	jal	80023d0e <putchar>
    80001af4:	4529                	li	a0,10
    80001af6:	218220ef          	jal	80023d0e <putchar>
    80001afa:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001afc:	4509                	li	a0,2
    80001afe:	8f8ff0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001b02:	144024f3          	csrr	s1,sip
    80001b06:	00026617          	auipc	a2,0x26
    80001b0a:	85a60613          	addi	a2,a2,-1958 # 80027360 <__func__.0+0x7a0>
    80001b0e:	08200593          	li	a1,130
    80001b12:	00025517          	auipc	a0,0x25
    80001b16:	3a650513          	addi	a0,a0,934 # 80026eb8 <__func__.0+0x2f8>
    80001b1a:	3ea230ef          	jal	80024f04 <printf>
    80001b1e:	10048563          	beqz	s1,80001c28 <check_xip_regs_2+0x43c>
    80001b22:	00025597          	auipc	a1,0x25
    80001b26:	36e58593          	addi	a1,a1,878 # 80026e90 <__func__.0+0x2d0>
    80001b2a:	00025517          	auipc	a0,0x25
    80001b2e:	3a650513          	addi	a0,a0,934 # 80026ed0 <__func__.0+0x310>
    80001b32:	3d2230ef          	jal	80024f04 <printf>
    80001b36:	00025517          	auipc	a0,0x25
    80001b3a:	3a250513          	addi	a0,a0,930 # 80026ed8 <__func__.0+0x318>
    80001b3e:	3c6230ef          	jal	80024f04 <printf>
    80001b42:	8626                	mv	a2,s1
    80001b44:	4681                	li	a3,0
    80001b46:	02d00593          	li	a1,45
    80001b4a:	00025517          	auipc	a0,0x25
    80001b4e:	7f650513          	addi	a0,a0,2038 # 80027340 <__func__.0+0x780>
    80001b52:	3b2230ef          	jal	80024f04 <printf>
    80001b56:	02900513          	li	a0,41
    80001b5a:	1b4220ef          	jal	80023d0e <putchar>
    80001b5e:	4529                	li	a0,10
    80001b60:	1ae220ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);   
    80001b64:	4511                	li	a0,4
    80001b66:	890ff0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001b6a:	4401                	li	s0,0

    TEST_END();
    80001b6c:	00025597          	auipc	a1,0x25
    80001b70:	32458593          	addi	a1,a1,804 # 80026e90 <__func__.0+0x2d0>
    80001b74:	00025517          	auipc	a0,0x25
    80001b78:	3c450513          	addi	a0,a0,964 # 80026f38 <__func__.0+0x378>
    80001b7c:	388230ef          	jal	80024f04 <printf>
    80001b80:	4511                	li	a0,4
    80001b82:	874ff0ef          	jal	80000bf6 <goto_priv>
    80001b86:	927ff0ef          	jal	800014ac <reset_state>
}
    80001b8a:	60e2                	ld	ra,24(sp)
    80001b8c:	8522                	mv	a0,s0
    80001b8e:	6442                	ld	s0,16(sp)
    80001b90:	64a2                	ld	s1,8(sp)
    80001b92:	6902                	ld	s2,0(sp)
    80001b94:	6105                	addi	sp,sp,32
    80001b96:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001b98:	00025597          	auipc	a1,0x25
    80001b9c:	2e858593          	addi	a1,a1,744 # 80026e80 <__func__.0+0x2c0>
    80001ba0:	00025517          	auipc	a0,0x25
    80001ba4:	33050513          	addi	a0,a0,816 # 80026ed0 <__func__.0+0x310>
    80001ba8:	35c230ef          	jal	80024f04 <printf>
    80001bac:	4529                	li	a0,10
    80001bae:	160220ef          	jal	80023d0e <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001bb2:	144024f3          	csrr	s1,sip
    80001bb6:	00025617          	auipc	a2,0x25
    80001bba:	7a260613          	addi	a2,a2,1954 # 80027358 <__func__.0+0x798>
    80001bbe:	08200593          	li	a1,130
    80001bc2:	00025517          	auipc	a0,0x25
    80001bc6:	2f650513          	addi	a0,a0,758 # 80026eb8 <__func__.0+0x2f8>
    80001bca:	33a230ef          	jal	80024f04 <printf>
    80001bce:	e80493e3          	bnez	s1,80001a54 <check_xip_regs_2+0x268>
    80001bd2:	00025597          	auipc	a1,0x25
    80001bd6:	2ae58593          	addi	a1,a1,686 # 80026e80 <__func__.0+0x2c0>
    80001bda:	00025517          	auipc	a0,0x25
    80001bde:	2f650513          	addi	a0,a0,758 # 80026ed0 <__func__.0+0x310>
    80001be2:	322230ef          	jal	80024f04 <printf>
    80001be6:	4529                	li	a0,10
    80001be8:	126220ef          	jal	80023d0e <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001bec:	244024f3          	csrr	s1,vsip
    80001bf0:	00025617          	auipc	a2,0x25
    80001bf4:	73860613          	addi	a2,a2,1848 # 80027328 <__func__.0+0x768>
    80001bf8:	08200593          	li	a1,130
    80001bfc:	00025517          	auipc	a0,0x25
    80001c00:	2bc50513          	addi	a0,a0,700 # 80026eb8 <__func__.0+0x2f8>
    80001c04:	300230ef          	jal	80024f04 <printf>
    80001c08:	ea0498e3          	bnez	s1,80001ab8 <check_xip_regs_2+0x2cc>
    80001c0c:	00025597          	auipc	a1,0x25
    80001c10:	27458593          	addi	a1,a1,628 # 80026e80 <__func__.0+0x2c0>
    80001c14:	00025517          	auipc	a0,0x25
    80001c18:	2bc50513          	addi	a0,a0,700 # 80026ed0 <__func__.0+0x310>
    80001c1c:	2e8230ef          	jal	80024f04 <printf>
    80001c20:	4529                	li	a0,10
    80001c22:	0ec220ef          	jal	80023d0e <putchar>
    80001c26:	bdd9                	j	80001afc <check_xip_regs_2+0x310>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001c28:	00025597          	auipc	a1,0x25
    80001c2c:	25858593          	addi	a1,a1,600 # 80026e80 <__func__.0+0x2c0>
    80001c30:	00025517          	auipc	a0,0x25
    80001c34:	2a050513          	addi	a0,a0,672 # 80026ed0 <__func__.0+0x310>
    80001c38:	2cc230ef          	jal	80024f04 <printf>
    80001c3c:	4529                	li	a0,10
    80001c3e:	0d0220ef          	jal	80023d0e <putchar>
    80001c42:	f20401e3          	beqz	s0,80001b64 <check_xip_regs_2+0x378>
    goto_priv(PRIV_M);   
    80001c46:	4511                	li	a0,4
    80001c48:	faffe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001c4c:	4405                	li	s0,1
    TEST_END();
    80001c4e:	00025597          	auipc	a1,0x25
    80001c52:	23258593          	addi	a1,a1,562 # 80026e80 <__func__.0+0x2c0>
    80001c56:	bf39                	j	80001b74 <check_xip_regs_2+0x388>
    check_csr_rd("sip", sip, 0x222);    
    80001c58:	00025597          	auipc	a1,0x25
    80001c5c:	22858593          	addi	a1,a1,552 # 80026e80 <__func__.0+0x2c0>
    80001c60:	00025517          	auipc	a0,0x25
    80001c64:	27050513          	addi	a0,a0,624 # 80026ed0 <__func__.0+0x310>
    80001c68:	29c230ef          	jal	80024f04 <printf>
    80001c6c:	4529                	li	a0,10
    80001c6e:	0a0220ef          	jal	80023d0e <putchar>
    80001c72:	b149                	j	800018f4 <check_xip_regs_2+0x108>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001c74:	00025597          	auipc	a1,0x25
    80001c78:	20c58593          	addi	a1,a1,524 # 80026e80 <__func__.0+0x2c0>
    80001c7c:	00025517          	auipc	a0,0x25
    80001c80:	25450513          	addi	a0,a0,596 # 80026ed0 <__func__.0+0x310>
    80001c84:	280230ef          	jal	80024f04 <printf>
    80001c88:	4529                	li	a0,10
    80001c8a:	084220ef          	jal	80023d0e <putchar>
    80001c8e:	bb25                	j	800019c6 <check_xip_regs_2+0x1da>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80001c90:	00025597          	auipc	a1,0x25
    80001c94:	1f058593          	addi	a1,a1,496 # 80026e80 <__func__.0+0x2c0>
    80001c98:	00025517          	auipc	a0,0x25
    80001c9c:	23850513          	addi	a0,a0,568 # 80026ed0 <__func__.0+0x310>
    80001ca0:	264230ef          	jal	80024f04 <printf>
    80001ca4:	4529                	li	a0,10
    80001ca6:	068220ef          	jal	80023d0e <putchar>
    80001caa:	b945                	j	8000195a <check_xip_regs_2+0x16e>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001cac:	00025597          	auipc	a1,0x25
    80001cb0:	1d458593          	addi	a1,a1,468 # 80026e80 <__func__.0+0x2c0>
    80001cb4:	00025517          	auipc	a0,0x25
    80001cb8:	21c50513          	addi	a0,a0,540 # 80026ed0 <__func__.0+0x310>
    80001cbc:	248230ef          	jal	80024f04 <printf>
    80001cc0:	4529                	li	a0,10
    80001cc2:	04c220ef          	jal	80023d0e <putchar>
    80001cc6:	4405                	li	s0,1
    80001cc8:	b6d1                	j	8000188c <check_xip_regs_2+0xa0>

0000000080001cca <check_xip_regs_3>:

bool check_xip_regs_3(){
    80001cca:	1101                	addi	sp,sp,-32

    TEST_START();
    80001ccc:	00023597          	auipc	a1,0x23
    80001cd0:	7a458593          	addi	a1,a1,1956 # 80025470 <__func__.1>
    80001cd4:	00025517          	auipc	a0,0x25
    80001cd8:	1cc50513          	addi	a0,a0,460 # 80026ea0 <__func__.0+0x2e0>
bool check_xip_regs_3(){
    80001cdc:	ec06                	sd	ra,24(sp)
    80001cde:	e822                	sd	s0,16(sp)
    80001ce0:	e426                	sd	s1,8(sp)
    80001ce2:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001ce4:	220230ef          	jal	80024f04 <printf>
    80001ce8:	4529                	li	a0,10
    80001cea:	024220ef          	jal	80023d0e <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80001cee:	57fd                	li	a5,-1
    80001cf0:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001cf4:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80001cf8:	64579073          	csrw	hvip,a5
    printf("hvip=%llx\n",CSRR(CSR_HVIP));
    80001cfc:	645025f3          	csrr	a1,hvip
    80001d00:	00025517          	auipc	a0,0x25
    80001d04:	67850513          	addi	a0,a0,1656 # 80027378 <__func__.0+0x7b8>
    80001d08:	1fc230ef          	jal	80024f04 <printf>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    80001d0c:	645024f3          	csrr	s1,hvip
    80001d10:	7479                	lui	s0,0xffffe
    80001d12:	00025617          	auipc	a2,0x25
    80001d16:	67660613          	addi	a2,a2,1654 # 80027388 <__func__.0+0x7c8>
    80001d1a:	08200593          	li	a1,130
    80001d1e:	00025517          	auipc	a0,0x25
    80001d22:	19a50513          	addi	a0,a0,410 # 80026eb8 <__func__.0+0x2f8>
    80001d26:	44440413          	addi	s0,s0,1092 # ffffffffffffe444 <__stack_top+0xffffffff7fcff444>
    80001d2a:	1da230ef          	jal	80024f04 <printf>
    80001d2e:	4a848663          	beq	s1,s0,800021da <check_xip_regs_3+0x510>
    80001d32:	00025597          	auipc	a1,0x25
    80001d36:	15e58593          	addi	a1,a1,350 # 80026e90 <__func__.0+0x2d0>
    80001d3a:	00025517          	auipc	a0,0x25
    80001d3e:	19650513          	addi	a0,a0,406 # 80026ed0 <__func__.0+0x310>
    80001d42:	1c2230ef          	jal	80024f04 <printf>
    80001d46:	00025517          	auipc	a0,0x25
    80001d4a:	19250513          	addi	a0,a0,402 # 80026ed8 <__func__.0+0x318>
    80001d4e:	1b6230ef          	jal	80024f04 <printf>
    80001d52:	86a2                	mv	a3,s0
    80001d54:	8626                	mv	a2,s1
    80001d56:	02d00593          	li	a1,45
    80001d5a:	00025517          	auipc	a0,0x25
    80001d5e:	5e650513          	addi	a0,a0,1510 # 80027340 <__func__.0+0x780>
    80001d62:	1a2230ef          	jal	80024f04 <printf>
    80001d66:	02900513          	li	a0,41
    80001d6a:	7a5210ef          	jal	80023d0e <putchar>
    80001d6e:	4529                	li	a0,10
    80001d70:	79f210ef          	jal	80023d0e <putchar>
    80001d74:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    80001d76:	644024f3          	csrr	s1,hip
    80001d7a:	00025617          	auipc	a2,0x25
    80001d7e:	5be60613          	addi	a2,a2,1470 # 80027338 <__func__.0+0x778>
    80001d82:	08200593          	li	a1,130
    80001d86:	00025517          	auipc	a0,0x25
    80001d8a:	13250513          	addi	a0,a0,306 # 80026eb8 <__func__.0+0x2f8>
    80001d8e:	44400913          	li	s2,1092
    80001d92:	172230ef          	jal	80024f04 <printf>
    80001d96:	3f248863          	beq	s1,s2,80002186 <check_xip_regs_3+0x4bc>
    80001d9a:	00025597          	auipc	a1,0x25
    80001d9e:	0f658593          	addi	a1,a1,246 # 80026e90 <__func__.0+0x2d0>
    80001da2:	00025517          	auipc	a0,0x25
    80001da6:	12e50513          	addi	a0,a0,302 # 80026ed0 <__func__.0+0x310>
    80001daa:	15a230ef          	jal	80024f04 <printf>
    80001dae:	00025517          	auipc	a0,0x25
    80001db2:	12a50513          	addi	a0,a0,298 # 80026ed8 <__func__.0+0x318>
    80001db6:	14e230ef          	jal	80024f04 <printf>
    80001dba:	86ca                	mv	a3,s2
    80001dbc:	8626                	mv	a2,s1
    80001dbe:	02d00593          	li	a1,45
    80001dc2:	00025517          	auipc	a0,0x25
    80001dc6:	57e50513          	addi	a0,a0,1406 # 80027340 <__func__.0+0x780>
    80001dca:	13a230ef          	jal	80024f04 <printf>
    80001dce:	02900513          	li	a0,41
    80001dd2:	73d210ef          	jal	80023d0e <putchar>
    80001dd6:	4529                	li	a0,10
    80001dd8:	737210ef          	jal	80023d0e <putchar>
    80001ddc:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001dde:	144024f3          	csrr	s1,sip
    80001de2:	00025617          	auipc	a2,0x25
    80001de6:	57660613          	addi	a2,a2,1398 # 80027358 <__func__.0+0x798>
    80001dea:	08200593          	li	a1,130
    80001dee:	00025517          	auipc	a0,0x25
    80001df2:	0ca50513          	addi	a0,a0,202 # 80026eb8 <__func__.0+0x2f8>
    80001df6:	10e230ef          	jal	80024f04 <printf>
    80001dfa:	2e048763          	beqz	s1,800020e8 <check_xip_regs_3+0x41e>
    80001dfe:	00025597          	auipc	a1,0x25
    80001e02:	09258593          	addi	a1,a1,146 # 80026e90 <__func__.0+0x2d0>
    80001e06:	00025517          	auipc	a0,0x25
    80001e0a:	0ca50513          	addi	a0,a0,202 # 80026ed0 <__func__.0+0x310>
    80001e0e:	0f6230ef          	jal	80024f04 <printf>
    80001e12:	00025517          	auipc	a0,0x25
    80001e16:	0c650513          	addi	a0,a0,198 # 80026ed8 <__func__.0+0x318>
    80001e1a:	0ea230ef          	jal	80024f04 <printf>
    80001e1e:	8626                	mv	a2,s1
    80001e20:	4681                	li	a3,0
    80001e22:	02d00593          	li	a1,45
    80001e26:	00025517          	auipc	a0,0x25
    80001e2a:	51a50513          	addi	a0,a0,1306 # 80027340 <__func__.0+0x780>
    80001e2e:	0d6230ef          	jal	80024f04 <printf>
    80001e32:	02900513          	li	a0,41
    80001e36:	6d9210ef          	jal	80023d0e <putchar>
    80001e3a:	4529                	li	a0,10
    80001e3c:	6d3210ef          	jal	80023d0e <putchar>
    80001e40:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80001e42:	244024f3          	csrr	s1,vsip
    80001e46:	00025617          	auipc	a2,0x25
    80001e4a:	4e260613          	addi	a2,a2,1250 # 80027328 <__func__.0+0x768>
    80001e4e:	08200593          	li	a1,130
    80001e52:	00025517          	auipc	a0,0x25
    80001e56:	06650513          	addi	a0,a0,102 # 80026eb8 <__func__.0+0x2f8>
    80001e5a:	22200913          	li	s2,546
    80001e5e:	0a6230ef          	jal	80024f04 <printf>
    80001e62:	35248e63          	beq	s1,s2,800021be <check_xip_regs_3+0x4f4>
    80001e66:	00025597          	auipc	a1,0x25
    80001e6a:	02a58593          	addi	a1,a1,42 # 80026e90 <__func__.0+0x2d0>
    80001e6e:	00025517          	auipc	a0,0x25
    80001e72:	06250513          	addi	a0,a0,98 # 80026ed0 <__func__.0+0x310>
    80001e76:	08e230ef          	jal	80024f04 <printf>
    80001e7a:	00025517          	auipc	a0,0x25
    80001e7e:	05e50513          	addi	a0,a0,94 # 80026ed8 <__func__.0+0x318>
    80001e82:	082230ef          	jal	80024f04 <printf>
    80001e86:	86ca                	mv	a3,s2
    80001e88:	8626                	mv	a2,s1
    80001e8a:	02d00593          	li	a1,45
    80001e8e:	00025517          	auipc	a0,0x25
    80001e92:	4b250513          	addi	a0,a0,1202 # 80027340 <__func__.0+0x780>
    80001e96:	06e230ef          	jal	80024f04 <printf>
    80001e9a:	02900513          	li	a0,41
    80001e9e:	671210ef          	jal	80023d0e <putchar>
    80001ea2:	4529                	li	a0,10
    80001ea4:	66b210ef          	jal	80023d0e <putchar>
    80001ea8:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001eaa:	4509                	li	a0,2
    80001eac:	d4bfe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80001eb0:	144024f3          	csrr	s1,sip
    80001eb4:	00025617          	auipc	a2,0x25
    80001eb8:	4ac60613          	addi	a2,a2,1196 # 80027360 <__func__.0+0x7a0>
    80001ebc:	08200593          	li	a1,130
    80001ec0:	00025517          	auipc	a0,0x25
    80001ec4:	ff850513          	addi	a0,a0,-8 # 80026eb8 <__func__.0+0x2f8>
    80001ec8:	22200913          	li	s2,546
    80001ecc:	038230ef          	jal	80024f04 <printf>
    80001ed0:	2d248963          	beq	s1,s2,800021a2 <check_xip_regs_3+0x4d8>
    80001ed4:	00025597          	auipc	a1,0x25
    80001ed8:	fbc58593          	addi	a1,a1,-68 # 80026e90 <__func__.0+0x2d0>
    80001edc:	00025517          	auipc	a0,0x25
    80001ee0:	ff450513          	addi	a0,a0,-12 # 80026ed0 <__func__.0+0x310>
    80001ee4:	020230ef          	jal	80024f04 <printf>
    80001ee8:	00025517          	auipc	a0,0x25
    80001eec:	ff050513          	addi	a0,a0,-16 # 80026ed8 <__func__.0+0x318>
    80001ef0:	014230ef          	jal	80024f04 <printf>
    80001ef4:	86ca                	mv	a3,s2
    80001ef6:	8626                	mv	a2,s1
    80001ef8:	02d00593          	li	a1,45
    80001efc:	00025517          	auipc	a0,0x25
    80001f00:	44450513          	addi	a0,a0,1092 # 80027340 <__func__.0+0x780>
    80001f04:	000230ef          	jal	80024f04 <printf>
    80001f08:	02900513          	li	a0,41
    80001f0c:	603210ef          	jal	80023d0e <putchar>
    80001f10:	4529                	li	a0,10
    80001f12:	5fd210ef          	jal	80023d0e <putchar>
    80001f16:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001f18:	4511                	li	a0,4
    80001f1a:	cddfe0ef          	jal	80000bf6 <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    80001f1e:	64505073          	csrwi	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001f22:	644024f3          	csrr	s1,hip
    80001f26:	00025617          	auipc	a2,0x25
    80001f2a:	41260613          	addi	a2,a2,1042 # 80027338 <__func__.0+0x778>
    80001f2e:	08200593          	li	a1,130
    80001f32:	00025517          	auipc	a0,0x25
    80001f36:	f8650513          	addi	a0,a0,-122 # 80026eb8 <__func__.0+0x2f8>
    80001f3a:	7cb220ef          	jal	80024f04 <printf>
    80001f3e:	22048663          	beqz	s1,8000216a <check_xip_regs_3+0x4a0>
    80001f42:	00025597          	auipc	a1,0x25
    80001f46:	f4e58593          	addi	a1,a1,-178 # 80026e90 <__func__.0+0x2d0>
    80001f4a:	00025517          	auipc	a0,0x25
    80001f4e:	f8650513          	addi	a0,a0,-122 # 80026ed0 <__func__.0+0x310>
    80001f52:	7b3220ef          	jal	80024f04 <printf>
    80001f56:	00025517          	auipc	a0,0x25
    80001f5a:	f8250513          	addi	a0,a0,-126 # 80026ed8 <__func__.0+0x318>
    80001f5e:	7a7220ef          	jal	80024f04 <printf>
    80001f62:	8626                	mv	a2,s1
    80001f64:	4681                	li	a3,0
    80001f66:	02d00593          	li	a1,45
    80001f6a:	00025517          	auipc	a0,0x25
    80001f6e:	3d650513          	addi	a0,a0,982 # 80027340 <__func__.0+0x780>
    80001f72:	793220ef          	jal	80024f04 <printf>
    80001f76:	02900513          	li	a0,41
    80001f7a:	595210ef          	jal	80023d0e <putchar>
    80001f7e:	4529                	li	a0,10
    80001f80:	58f210ef          	jal	80023d0e <putchar>
    80001f84:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001f86:	144024f3          	csrr	s1,sip
    80001f8a:	00025617          	auipc	a2,0x25
    80001f8e:	3ce60613          	addi	a2,a2,974 # 80027358 <__func__.0+0x798>
    80001f92:	08200593          	li	a1,130
    80001f96:	00025517          	auipc	a0,0x25
    80001f9a:	f2250513          	addi	a0,a0,-222 # 80026eb8 <__func__.0+0x2f8>
    80001f9e:	767220ef          	jal	80024f04 <printf>
    80001fa2:	1a048663          	beqz	s1,8000214e <check_xip_regs_3+0x484>
    80001fa6:	00025597          	auipc	a1,0x25
    80001faa:	eea58593          	addi	a1,a1,-278 # 80026e90 <__func__.0+0x2d0>
    80001fae:	00025517          	auipc	a0,0x25
    80001fb2:	f2250513          	addi	a0,a0,-222 # 80026ed0 <__func__.0+0x310>
    80001fb6:	74f220ef          	jal	80024f04 <printf>
    80001fba:	00025517          	auipc	a0,0x25
    80001fbe:	f1e50513          	addi	a0,a0,-226 # 80026ed8 <__func__.0+0x318>
    80001fc2:	743220ef          	jal	80024f04 <printf>
    80001fc6:	8626                	mv	a2,s1
    80001fc8:	4681                	li	a3,0
    80001fca:	02d00593          	li	a1,45
    80001fce:	00025517          	auipc	a0,0x25
    80001fd2:	37250513          	addi	a0,a0,882 # 80027340 <__func__.0+0x780>
    80001fd6:	72f220ef          	jal	80024f04 <printf>
    80001fda:	02900513          	li	a0,41
    80001fde:	531210ef          	jal	80023d0e <putchar>
    80001fe2:	4529                	li	a0,10
    80001fe4:	52b210ef          	jal	80023d0e <putchar>
    80001fe8:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001fea:	244024f3          	csrr	s1,vsip
    80001fee:	00025617          	auipc	a2,0x25
    80001ff2:	33a60613          	addi	a2,a2,826 # 80027328 <__func__.0+0x768>
    80001ff6:	08200593          	li	a1,130
    80001ffa:	00025517          	auipc	a0,0x25
    80001ffe:	ebe50513          	addi	a0,a0,-322 # 80026eb8 <__func__.0+0x2f8>
    80002002:	703220ef          	jal	80024f04 <printf>
    80002006:	12048663          	beqz	s1,80002132 <check_xip_regs_3+0x468>
    8000200a:	00025597          	auipc	a1,0x25
    8000200e:	e8658593          	addi	a1,a1,-378 # 80026e90 <__func__.0+0x2d0>
    80002012:	00025517          	auipc	a0,0x25
    80002016:	ebe50513          	addi	a0,a0,-322 # 80026ed0 <__func__.0+0x310>
    8000201a:	6eb220ef          	jal	80024f04 <printf>
    8000201e:	00025517          	auipc	a0,0x25
    80002022:	eba50513          	addi	a0,a0,-326 # 80026ed8 <__func__.0+0x318>
    80002026:	6df220ef          	jal	80024f04 <printf>
    8000202a:	8626                	mv	a2,s1
    8000202c:	4681                	li	a3,0
    8000202e:	02d00593          	li	a1,45
    80002032:	00025517          	auipc	a0,0x25
    80002036:	30e50513          	addi	a0,a0,782 # 80027340 <__func__.0+0x780>
    8000203a:	6cb220ef          	jal	80024f04 <printf>
    8000203e:	02900513          	li	a0,41
    80002042:	4cd210ef          	jal	80023d0e <putchar>
    80002046:	4529                	li	a0,10
    80002048:	4c7210ef          	jal	80023d0e <putchar>
    8000204c:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8000204e:	4509                	li	a0,2
    80002050:	ba7fe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002054:	144024f3          	csrr	s1,sip
    80002058:	00025617          	auipc	a2,0x25
    8000205c:	30860613          	addi	a2,a2,776 # 80027360 <__func__.0+0x7a0>
    80002060:	08200593          	li	a1,130
    80002064:	00025517          	auipc	a0,0x25
    80002068:	e5450513          	addi	a0,a0,-428 # 80026eb8 <__func__.0+0x2f8>
    8000206c:	699220ef          	jal	80024f04 <printf>
    80002070:	c8d1                	beqz	s1,80002104 <check_xip_regs_3+0x43a>
    80002072:	00025597          	auipc	a1,0x25
    80002076:	e1e58593          	addi	a1,a1,-482 # 80026e90 <__func__.0+0x2d0>
    8000207a:	00025517          	auipc	a0,0x25
    8000207e:	e5650513          	addi	a0,a0,-426 # 80026ed0 <__func__.0+0x310>
    80002082:	683220ef          	jal	80024f04 <printf>
    80002086:	00025517          	auipc	a0,0x25
    8000208a:	e5250513          	addi	a0,a0,-430 # 80026ed8 <__func__.0+0x318>
    8000208e:	677220ef          	jal	80024f04 <printf>
    80002092:	8626                	mv	a2,s1
    80002094:	4681                	li	a3,0
    80002096:	02d00593          	li	a1,45
    8000209a:	00025517          	auipc	a0,0x25
    8000209e:	2a650513          	addi	a0,a0,678 # 80027340 <__func__.0+0x780>
    800020a2:	663220ef          	jal	80024f04 <printf>
    800020a6:	02900513          	li	a0,41
    800020aa:	465210ef          	jal	80023d0e <putchar>
    800020ae:	4529                	li	a0,10
    800020b0:	45f210ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800020b4:	4511                	li	a0,4
    800020b6:	b41fe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800020ba:	4401                	li	s0,0

    TEST_END();
    800020bc:	00025597          	auipc	a1,0x25
    800020c0:	dd458593          	addi	a1,a1,-556 # 80026e90 <__func__.0+0x2d0>
    800020c4:	00025517          	auipc	a0,0x25
    800020c8:	e7450513          	addi	a0,a0,-396 # 80026f38 <__func__.0+0x378>
    800020cc:	639220ef          	jal	80024f04 <printf>
    800020d0:	4511                	li	a0,4
    800020d2:	b25fe0ef          	jal	80000bf6 <goto_priv>
    800020d6:	bd6ff0ef          	jal	800014ac <reset_state>
}
    800020da:	60e2                	ld	ra,24(sp)
    800020dc:	8522                	mv	a0,s0
    800020de:	6442                	ld	s0,16(sp)
    800020e0:	64a2                	ld	s1,8(sp)
    800020e2:	6902                	ld	s2,0(sp)
    800020e4:	6105                	addi	sp,sp,32
    800020e6:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    800020e8:	00025597          	auipc	a1,0x25
    800020ec:	d9858593          	addi	a1,a1,-616 # 80026e80 <__func__.0+0x2c0>
    800020f0:	00025517          	auipc	a0,0x25
    800020f4:	de050513          	addi	a0,a0,-544 # 80026ed0 <__func__.0+0x310>
    800020f8:	60d220ef          	jal	80024f04 <printf>
    800020fc:	4529                	li	a0,10
    800020fe:	411210ef          	jal	80023d0e <putchar>
    80002102:	b381                	j	80001e42 <check_xip_regs_3+0x178>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002104:	00025597          	auipc	a1,0x25
    80002108:	d7c58593          	addi	a1,a1,-644 # 80026e80 <__func__.0+0x2c0>
    8000210c:	00025517          	auipc	a0,0x25
    80002110:	dc450513          	addi	a0,a0,-572 # 80026ed0 <__func__.0+0x310>
    80002114:	5f1220ef          	jal	80024f04 <printf>
    80002118:	4529                	li	a0,10
    8000211a:	3f5210ef          	jal	80023d0e <putchar>
    8000211e:	d859                	beqz	s0,800020b4 <check_xip_regs_3+0x3ea>
    goto_priv(PRIV_M);
    80002120:	4511                	li	a0,4
    80002122:	ad5fe0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002126:	4405                	li	s0,1
    TEST_END();
    80002128:	00025597          	auipc	a1,0x25
    8000212c:	d5858593          	addi	a1,a1,-680 # 80026e80 <__func__.0+0x2c0>
    80002130:	bf51                	j	800020c4 <check_xip_regs_3+0x3fa>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80002132:	00025597          	auipc	a1,0x25
    80002136:	d4e58593          	addi	a1,a1,-690 # 80026e80 <__func__.0+0x2c0>
    8000213a:	00025517          	auipc	a0,0x25
    8000213e:	d9650513          	addi	a0,a0,-618 # 80026ed0 <__func__.0+0x310>
    80002142:	5c3220ef          	jal	80024f04 <printf>
    80002146:	4529                	li	a0,10
    80002148:	3c7210ef          	jal	80023d0e <putchar>
    8000214c:	b709                	j	8000204e <check_xip_regs_3+0x384>
    check_csr_rd("sip", sip, 0x0);
    8000214e:	00025597          	auipc	a1,0x25
    80002152:	d3258593          	addi	a1,a1,-718 # 80026e80 <__func__.0+0x2c0>
    80002156:	00025517          	auipc	a0,0x25
    8000215a:	d7a50513          	addi	a0,a0,-646 # 80026ed0 <__func__.0+0x310>
    8000215e:	5a7220ef          	jal	80024f04 <printf>
    80002162:	4529                	li	a0,10
    80002164:	3ab210ef          	jal	80023d0e <putchar>
    80002168:	b549                	j	80001fea <check_xip_regs_3+0x320>
    check_csr_rd("hip", CSR_HIP, 0x0);
    8000216a:	00025597          	auipc	a1,0x25
    8000216e:	d1658593          	addi	a1,a1,-746 # 80026e80 <__func__.0+0x2c0>
    80002172:	00025517          	auipc	a0,0x25
    80002176:	d5e50513          	addi	a0,a0,-674 # 80026ed0 <__func__.0+0x310>
    8000217a:	58b220ef          	jal	80024f04 <printf>
    8000217e:	4529                	li	a0,10
    80002180:	38f210ef          	jal	80023d0e <putchar>
    80002184:	b509                	j	80001f86 <check_xip_regs_3+0x2bc>
    check_csr_rd("hip", CSR_HIP, 0x444);
    80002186:	00025597          	auipc	a1,0x25
    8000218a:	cfa58593          	addi	a1,a1,-774 # 80026e80 <__func__.0+0x2c0>
    8000218e:	00025517          	auipc	a0,0x25
    80002192:	d4250513          	addi	a0,a0,-702 # 80026ed0 <__func__.0+0x310>
    80002196:	56f220ef          	jal	80024f04 <printf>
    8000219a:	4529                	li	a0,10
    8000219c:	373210ef          	jal	80023d0e <putchar>
    800021a0:	b93d                	j	80001dde <check_xip_regs_3+0x114>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    800021a2:	00025597          	auipc	a1,0x25
    800021a6:	cde58593          	addi	a1,a1,-802 # 80026e80 <__func__.0+0x2c0>
    800021aa:	00025517          	auipc	a0,0x25
    800021ae:	d2650513          	addi	a0,a0,-730 # 80026ed0 <__func__.0+0x310>
    800021b2:	553220ef          	jal	80024f04 <printf>
    800021b6:	4529                	li	a0,10
    800021b8:	357210ef          	jal	80023d0e <putchar>
    800021bc:	bbb1                	j	80001f18 <check_xip_regs_3+0x24e>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    800021be:	00025597          	auipc	a1,0x25
    800021c2:	cc258593          	addi	a1,a1,-830 # 80026e80 <__func__.0+0x2c0>
    800021c6:	00025517          	auipc	a0,0x25
    800021ca:	d0a50513          	addi	a0,a0,-758 # 80026ed0 <__func__.0+0x310>
    800021ce:	537220ef          	jal	80024f04 <printf>
    800021d2:	4529                	li	a0,10
    800021d4:	33b210ef          	jal	80023d0e <putchar>
    800021d8:	b9c9                	j	80001eaa <check_xip_regs_3+0x1e0>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    800021da:	00025597          	auipc	a1,0x25
    800021de:	ca658593          	addi	a1,a1,-858 # 80026e80 <__func__.0+0x2c0>
    800021e2:	00025517          	auipc	a0,0x25
    800021e6:	cee50513          	addi	a0,a0,-786 # 80026ed0 <__func__.0+0x310>
    800021ea:	51b220ef          	jal	80024f04 <printf>
    800021ee:	4529                	li	a0,10
    800021f0:	31f210ef          	jal	80023d0e <putchar>
    800021f4:	4405                	li	s0,1
    800021f6:	b641                	j	80001d76 <check_xip_regs_3+0xac>

00000000800021f8 <interrupt_tests>:

bool interrupt_tests(){
    800021f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800021fa:	00023597          	auipc	a1,0x23
    800021fe:	28e58593          	addi	a1,a1,654 # 80025488 <__func__.0>
    80002202:	00025517          	auipc	a0,0x25
    80002206:	c9e50513          	addi	a0,a0,-866 # 80026ea0 <__func__.0+0x2e0>
bool interrupt_tests(){
    8000220a:	ec06                	sd	ra,24(sp)
    8000220c:	e822                	sd	s0,16(sp)
    8000220e:	e426                	sd	s1,8(sp)
    TEST_START();
    80002210:	4f5220ef          	jal	80024f04 <printf>
    80002214:	4529                	li	a0,10
    80002216:	2f9210ef          	jal	80023d0e <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    8000221a:	450d                	li	a0,3
    8000221c:	9dbfe0ef          	jal	80000bf6 <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    80002220:	02200793          	li	a5,34
    80002224:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    80002228:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0x4);
    8000222c:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    80002230:	0330000f          	fence	rw,rw
    80002234:	00047417          	auipc	s0,0x47
    80002238:	ddc40413          	addi	s0,s0,-548 # 80049010 <excpt>
    8000223c:	4785                	li	a5,1
    8000223e:	00047717          	auipc	a4,0x47
    80002242:	e0073523          	sd	zero,-502(a4) # 80049048 <excpt+0x38>
    80002246:	00f41023          	sh	a5,0(s0)
    8000224a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);
    8000224e:	4509                	li	a0,2
    80002250:	9a7fe0ef          	jal	80000bf6 <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    80002254:	08200593          	li	a1,130
    80002258:	00025617          	auipc	a2,0x25
    8000225c:	13860613          	addi	a2,a2,312 # 80027390 <__func__.0+0x7d0>
    80002260:	00025517          	auipc	a0,0x25
    80002264:	c5850513          	addi	a0,a0,-936 # 80026eb8 <__func__.0+0x2f8>
    80002268:	49d220ef          	jal	80024f04 <printf>
    8000226c:	00047797          	auipc	a5,0x47
    80002270:	da57c783          	lbu	a5,-603(a5) # 80049011 <excpt+0x1>
    80002274:	00025597          	auipc	a1,0x25
    80002278:	c1c58593          	addi	a1,a1,-996 # 80026e90 <__func__.0+0x2d0>
    8000227c:	c799                	beqz	a5,8000228a <interrupt_tests+0x92>
    8000227e:	57fd                	li	a5,-1
    80002280:	6418                	ld	a4,8(s0)
    80002282:	17fe                	slli	a5,a5,0x3f
    80002284:	0789                	addi	a5,a5,2
    80002286:	18f70163          	beq	a4,a5,80002408 <interrupt_tests+0x210>
    8000228a:	00025517          	auipc	a0,0x25
    8000228e:	c4650513          	addi	a0,a0,-954 # 80026ed0 <__func__.0+0x310>
    80002292:	473220ef          	jal	80024f04 <printf>
    80002296:	00047797          	auipc	a5,0x47
    8000229a:	d7b7c783          	lbu	a5,-645(a5) # 80049011 <excpt+0x1>
    8000229e:	c799                	beqz	a5,800022ac <interrupt_tests+0xb4>
    800022a0:	57fd                	li	a5,-1
    800022a2:	6418                	ld	a4,8(s0)
    800022a4:	17fe                	slli	a5,a5,0x3f
    800022a6:	0789                	addi	a5,a5,2
    800022a8:	14f70863          	beq	a4,a5,800023f8 <interrupt_tests+0x200>
    800022ac:	00025517          	auipc	a0,0x25
    800022b0:	c2c50513          	addi	a0,a0,-980 # 80026ed8 <__func__.0+0x318>
    800022b4:	451220ef          	jal	80024f04 <printf>
    800022b8:	02900513          	li	a0,41
    800022bc:	253210ef          	jal	80023d0e <putchar>
    800022c0:	4529                	li	a0,10
    800022c2:	24d210ef          	jal	80023d0e <putchar>
    800022c6:	00047797          	auipc	a5,0x47
    800022ca:	d4b7c783          	lbu	a5,-693(a5) # 80049011 <excpt+0x1>
    800022ce:	4481                	li	s1,0
    800022d0:	c799                	beqz	a5,800022de <interrupt_tests+0xe6>
    800022d2:	57fd                	li	a5,-1
    800022d4:	6418                	ld	a4,8(s0)
    800022d6:	17fe                	slli	a5,a5,0x3f
    800022d8:	0789                	addi	a5,a5,2
    800022da:	14f70763          	beq	a4,a5,80002428 <interrupt_tests+0x230>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    800022de:	450d                	li	a0,3
    800022e0:	917fe0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    800022e4:	60326073          	csrsi	hideleg,4
    CSRS(CSR_HIP, 0x4);
    800022e8:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    800022ec:	0330000f          	fence	rw,rw
    800022f0:	4785                	li	a5,1
    800022f2:	00047717          	auipc	a4,0x47
    800022f6:	d4073b23          	sd	zero,-682(a4) # 80049048 <excpt+0x38>
    800022fa:	00f41023          	sh	a5,0(s0)
    800022fe:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);
    80002302:	4509                	li	a0,2
    80002304:	8f3fe0ef          	jal	80000bf6 <goto_priv>
    CSRS(sie, 0x2);
    80002308:	10416073          	csrsi	sie,2
    CSRS(sstatus, 0x2);
    8000230c:	10016073          	csrsi	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    80002310:	08200593          	li	a1,130
    80002314:	00025617          	auipc	a2,0x25
    80002318:	09c60613          	addi	a2,a2,156 # 800273b0 <__func__.0+0x7f0>
    8000231c:	00025517          	auipc	a0,0x25
    80002320:	b9c50513          	addi	a0,a0,-1124 # 80026eb8 <__func__.0+0x2f8>
    80002324:	3e1220ef          	jal	80024f04 <printf>
    80002328:	00047797          	auipc	a5,0x47
    8000232c:	ce97c783          	lbu	a5,-791(a5) # 80049011 <excpt+0x1>
    80002330:	00025597          	auipc	a1,0x25
    80002334:	b6058593          	addi	a1,a1,-1184 # 80026e90 <__func__.0+0x2d0>
    80002338:	c799                	beqz	a5,80002346 <interrupt_tests+0x14e>
    8000233a:	57fd                	li	a5,-1
    8000233c:	6418                	ld	a4,8(s0)
    8000233e:	17fe                	slli	a5,a5,0x3f
    80002340:	0785                	addi	a5,a5,1
    80002342:	0ef70b63          	beq	a4,a5,80002438 <interrupt_tests+0x240>
    80002346:	00025517          	auipc	a0,0x25
    8000234a:	b8a50513          	addi	a0,a0,-1142 # 80026ed0 <__func__.0+0x310>
    8000234e:	3b7220ef          	jal	80024f04 <printf>
    80002352:	00047797          	auipc	a5,0x47
    80002356:	cbf7c783          	lbu	a5,-833(a5) # 80049011 <excpt+0x1>
    8000235a:	c799                	beqz	a5,80002368 <interrupt_tests+0x170>
    8000235c:	57fd                	li	a5,-1
    8000235e:	6418                	ld	a4,8(s0)
    80002360:	17fe                	slli	a5,a5,0x3f
    80002362:	0785                	addi	a5,a5,1
    80002364:	08f70263          	beq	a4,a5,800023e8 <interrupt_tests+0x1f0>
    80002368:	00025517          	auipc	a0,0x25
    8000236c:	b7050513          	addi	a0,a0,-1168 # 80026ed8 <__func__.0+0x318>
    80002370:	395220ef          	jal	80024f04 <printf>
    80002374:	02900513          	li	a0,41
    80002378:	197210ef          	jal	80023d0e <putchar>
    8000237c:	4529                	li	a0,10
    8000237e:	191210ef          	jal	80023d0e <putchar>
    80002382:	cca9                	beqz	s1,800023dc <interrupt_tests+0x1e4>
    80002384:	00047497          	auipc	s1,0x47
    80002388:	c8d4c483          	lbu	s1,-883(s1) # 80049011 <excpt+0x1>


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    8000238c:	00025597          	auipc	a1,0x25
    80002390:	b0458593          	addi	a1,a1,-1276 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs sw irq with delegation", 
    80002394:	c881                	beqz	s1,800023a4 <interrupt_tests+0x1ac>
    80002396:	57fd                	li	a5,-1
    80002398:	6418                	ld	a4,8(s0)
    8000239a:	17fe                	slli	a5,a5,0x3f
    8000239c:	0785                	addi	a5,a5,1
    8000239e:	02f70463          	beq	a4,a5,800023c6 <interrupt_tests+0x1ce>
    800023a2:	4481                	li	s1,0
    TEST_END();
    800023a4:	00025517          	auipc	a0,0x25
    800023a8:	b9450513          	addi	a0,a0,-1132 # 80026f38 <__func__.0+0x378>
    800023ac:	359220ef          	jal	80024f04 <printf>
    800023b0:	4511                	li	a0,4
    800023b2:	845fe0ef          	jal	80000bf6 <goto_priv>
    800023b6:	8f6ff0ef          	jal	800014ac <reset_state>
}
    800023ba:	60e2                	ld	ra,24(sp)
    800023bc:	6442                	ld	s0,16(sp)
    800023be:	8526                	mv	a0,s1
    800023c0:	64a2                	ld	s1,8(sp)
    800023c2:	6105                	addi	sp,sp,32
    800023c4:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    800023c6:	00047717          	auipc	a4,0x47
    800023ca:	c4e72703          	lw	a4,-946(a4) # 80049014 <excpt+0x4>
    800023ce:	4789                	li	a5,2
    TEST_END();
    800023d0:	00025597          	auipc	a1,0x25
    800023d4:	ab058593          	addi	a1,a1,-1360 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs sw irq with delegation", 
    800023d8:	fcf706e3          	beq	a4,a5,800023a4 <interrupt_tests+0x1ac>
    800023dc:	4481                	li	s1,0
    TEST_END();
    800023de:	00025597          	auipc	a1,0x25
    800023e2:	ab258593          	addi	a1,a1,-1358 # 80026e90 <__func__.0+0x2d0>
    800023e6:	bf7d                	j	800023a4 <interrupt_tests+0x1ac>
    TEST_ASSERT("vs sw irq with delegation", 
    800023e8:	00047717          	auipc	a4,0x47
    800023ec:	c2c72703          	lw	a4,-980(a4) # 80049014 <excpt+0x4>
    800023f0:	4789                	li	a5,2
    800023f2:	f6f71be3          	bne	a4,a5,80002368 <interrupt_tests+0x170>
    800023f6:	b759                	j	8000237c <interrupt_tests+0x184>
    TEST_ASSERT("vs sw irq with no delegation", 
    800023f8:	00047717          	auipc	a4,0x47
    800023fc:	c1c72703          	lw	a4,-996(a4) # 80049014 <excpt+0x4>
    80002400:	478d                	li	a5,3
    80002402:	eaf715e3          	bne	a4,a5,800022ac <interrupt_tests+0xb4>
    80002406:	bd6d                	j	800022c0 <interrupt_tests+0xc8>
    80002408:	00047717          	auipc	a4,0x47
    8000240c:	c0c72703          	lw	a4,-1012(a4) # 80049014 <excpt+0x4>
    80002410:	478d                	li	a5,3
    80002412:	00025597          	auipc	a1,0x25
    80002416:	a6e58593          	addi	a1,a1,-1426 # 80026e80 <__func__.0+0x2c0>
    8000241a:	e6f708e3          	beq	a4,a5,8000228a <interrupt_tests+0x92>
    8000241e:	00025597          	auipc	a1,0x25
    80002422:	a7258593          	addi	a1,a1,-1422 # 80026e90 <__func__.0+0x2d0>
    80002426:	b595                	j	8000228a <interrupt_tests+0x92>
    80002428:	00047497          	auipc	s1,0x47
    8000242c:	bec4a483          	lw	s1,-1044(s1) # 80049014 <excpt+0x4>
    80002430:	14f5                	addi	s1,s1,-3
    80002432:	0014b493          	seqz	s1,s1
    80002436:	b565                	j	800022de <interrupt_tests+0xe6>
    TEST_ASSERT("vs sw irq with delegation", 
    80002438:	00047717          	auipc	a4,0x47
    8000243c:	bdc72703          	lw	a4,-1060(a4) # 80049014 <excpt+0x4>
    80002440:	4789                	li	a5,2
    80002442:	00025597          	auipc	a1,0x25
    80002446:	a3e58593          	addi	a1,a1,-1474 # 80026e80 <__func__.0+0x2c0>
    8000244a:	eef70ee3          	beq	a4,a5,80002346 <interrupt_tests+0x14e>
    8000244e:	00025597          	auipc	a1,0x25
    80002452:	a4258593          	addi	a1,a1,-1470 # 80026e90 <__func__.0+0x2d0>
    80002456:	bdc5                	j	80002346 <interrupt_tests+0x14e>

0000000080002458 <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    80002458:	7139                	addi	sp,sp,-64
    
    TEST_START();
    8000245a:	00023597          	auipc	a1,0x23
    8000245e:	03e58593          	addi	a1,a1,62 # 80025498 <__func__.20>
    80002462:	00025517          	auipc	a0,0x25
    80002466:	a3e50513          	addi	a0,a0,-1474 # 80026ea0 <__func__.0+0x2e0>
bool two_stage_translation_1(){
    8000246a:	fc06                	sd	ra,56(sp)
    8000246c:	f822                	sd	s0,48(sp)
    8000246e:	f426                	sd	s1,40(sp)
    80002470:	f04a                	sd	s2,32(sp)
    80002472:	ec4e                	sd	s3,24(sp)
    TEST_START();
    80002474:	291220ef          	jal	80024f04 <printf>
    80002478:	4529                	li	a0,10
    8000247a:	095210ef          	jal	80023d0e <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    8000247e:	2201b737          	lui	a4,0x2201b
    80002482:	000887b7          	lui	a5,0x88
    80002486:	070a                	slli	a4,a4,0x2
    80002488:	44c5                	li	s1,17
    8000248a:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    8000248e:	e304                	sd	s1,0(a4)
    80002490:	07b2                	slli	a5,a5,0xc
    80002492:	02200913          	li	s2,34
    80002496:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    8000249a:	450d                	li	a0,3
    8000249c:	f5afe0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800024a0:	940fe0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800024a4:	b7efe0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    800024a8:	a08fe0ef          	jal	800006b0 <vspt_init>
    return *((volatile uint64_t*) addr);
    800024ac:	4001b737          	lui	a4,0x4001b
    800024b0:	070a                	slli	a4,a4,0x2
    800024b2:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800024b6:	001007b7          	lui	a5,0x100
    800024ba:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800024be:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    800024c0:	00025617          	auipc	a2,0x25
    800024c4:	f1060613          	addi	a2,a2,-240 # 800273d0 <__func__.0+0x810>
    800024c8:	08200593          	li	a1,130
    800024cc:	00025517          	auipc	a0,0x25
    800024d0:	9ec50513          	addi	a0,a0,-1556 # 80026eb8 <__func__.0+0x2f8>
    800024d4:	6380                	ld	s0,0(a5)
    800024d6:	22f220ef          	jal	80024f04 <printf>
    800024da:	3e998463          	beq	s3,s1,800028c2 <two_stage_translation_1+0x46a>
    800024de:	00025597          	auipc	a1,0x25
    800024e2:	9b258593          	addi	a1,a1,-1614 # 80026e90 <__func__.0+0x2d0>
    800024e6:	00025517          	auipc	a0,0x25
    800024ea:	9ea50513          	addi	a0,a0,-1558 # 80026ed0 <__func__.0+0x310>
    800024ee:	217220ef          	jal	80024f04 <printf>
    800024f2:	00025517          	auipc	a0,0x25
    800024f6:	9e650513          	addi	a0,a0,-1562 # 80026ed8 <__func__.0+0x318>
    800024fa:	20b220ef          	jal	80024f04 <printf>
    800024fe:	02900513          	li	a0,41
    80002502:	00d210ef          	jal	80023d0e <putchar>
    80002506:	4529                	li	a0,10
    80002508:	007210ef          	jal	80023d0e <putchar>
    8000250c:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    8000250e:	450d                	li	a0,3
    80002510:	ee6fe0ef          	jal	80000bf6 <goto_priv>
    hpt_switch();
    80002514:	dd4fe0ef          	jal	80000ae8 <hpt_switch>
    asm volatile(
    80002518:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8000251c:	62000073          	.insn	4, 0x62000073
    hfence();
    goto_priv(PRIV_VS);
    80002520:	4509                	li	a0,2
    80002522:	ed4fe0ef          	jal	80000bf6 <goto_priv>
    80002526:	001007b7          	lui	a5,0x100
    8000252a:	4001b737          	lui	a4,0x4001b
    8000252e:	070a                	slli	a4,a4,0x2
    80002530:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002534:	07b2                	slli	a5,a5,0xc
    80002536:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    8000253a:	00025617          	auipc	a2,0x25
    8000253e:	eae60613          	addi	a2,a2,-338 # 800273e8 <__func__.0+0x828>
    80002542:	08200593          	li	a1,130
    80002546:	00025517          	auipc	a0,0x25
    8000254a:	97250513          	addi	a0,a0,-1678 # 80026eb8 <__func__.0+0x2f8>
    8000254e:	6384                	ld	s1,0(a5)
    80002550:	1b5220ef          	jal	80024f04 <printf>
    80002554:	02200793          	li	a5,34
    80002558:	32f90563          	beq	s2,a5,80002882 <two_stage_translation_1+0x42a>
    8000255c:	00025597          	auipc	a1,0x25
    80002560:	93458593          	addi	a1,a1,-1740 # 80026e90 <__func__.0+0x2d0>
    80002564:	00025517          	auipc	a0,0x25
    80002568:	96c50513          	addi	a0,a0,-1684 # 80026ed0 <__func__.0+0x310>
    8000256c:	199220ef          	jal	80024f04 <printf>
    80002570:	00025517          	auipc	a0,0x25
    80002574:	96850513          	addi	a0,a0,-1688 # 80026ed8 <__func__.0+0x318>
    80002578:	18d220ef          	jal	80024f04 <printf>
    8000257c:	02900513          	li	a0,41
    80002580:	78e210ef          	jal	80023d0e <putchar>
    80002584:	4529                	li	a0,10
    80002586:	788210ef          	jal	80023d0e <putchar>
    8000258a:	4401                	li	s0,0

    vspt_switch();
    8000258c:	d42fe0ef          	jal	80000ace <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    80002590:	12000073          	sfence.vma
    80002594:	001007b7          	lui	a5,0x100
    80002598:	4001b737          	lui	a4,0x4001b
    8000259c:	070a                	slli	a4,a4,0x2
    8000259e:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800025a2:	07b2                	slli	a5,a5,0xc
    800025a4:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    800025a8:	00025617          	auipc	a2,0x25
    800025ac:	e7860613          	addi	a2,a2,-392 # 80027420 <__func__.0+0x860>
    800025b0:	08200593          	li	a1,130
    800025b4:	00025517          	auipc	a0,0x25
    800025b8:	90450513          	addi	a0,a0,-1788 # 80026eb8 <__func__.0+0x2f8>
    800025bc:	6384                	ld	s1,0(a5)
    800025be:	147220ef          	jal	80024f04 <printf>
    800025c2:	47c5                	li	a5,17
    800025c4:	34f90b63          	beq	s2,a5,8000291a <two_stage_translation_1+0x4c2>
    800025c8:	00025597          	auipc	a1,0x25
    800025cc:	8c858593          	addi	a1,a1,-1848 # 80026e90 <__func__.0+0x2d0>
    800025d0:	00025517          	auipc	a0,0x25
    800025d4:	90050513          	addi	a0,a0,-1792 # 80026ed0 <__func__.0+0x310>
    800025d8:	12d220ef          	jal	80024f04 <printf>
    800025dc:	00025517          	auipc	a0,0x25
    800025e0:	8fc50513          	addi	a0,a0,-1796 # 80026ed8 <__func__.0+0x318>
    800025e4:	121220ef          	jal	80024f04 <printf>
    800025e8:	02900513          	li	a0,41
    800025ec:	722210ef          	jal	80023d0e <putchar>
    800025f0:	4529                	li	a0,10
    800025f2:	71c210ef          	jal	80023d0e <putchar>
    800025f6:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    800025f8:	4511                	li	a0,4
    800025fa:	dfcfe0ef          	jal	80000bf6 <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    800025fe:	002007b7          	lui	a5,0x200
    80002602:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    80002606:	4509                	li	a0,2
    80002608:	deefe0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000260c:	0330000f          	fence	rw,rw
    80002610:	00047417          	auipc	s0,0x47
    80002614:	a0040413          	addi	s0,s0,-1536 # 80049010 <excpt>
    80002618:	4785                	li	a5,1
    8000261a:	00047717          	auipc	a4,0x47
    8000261e:	a2073723          	sd	zero,-1490(a4) # 80049048 <excpt+0x38>
    80002622:	00f41023          	sh	a5,0(s0)
    80002626:	0330000f          	fence	rw,rw
    8000262a:	001007b7          	lui	a5,0x100
    8000262e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80002632:	07b2                	slli	a5,a5,0xc
    80002634:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    80002636:	08200593          	li	a1,130
    8000263a:	00025617          	auipc	a2,0x25
    8000263e:	e1e60613          	addi	a2,a2,-482 # 80027458 <__func__.0+0x898>
    80002642:	00025517          	auipc	a0,0x25
    80002646:	87650513          	addi	a0,a0,-1930 # 80026eb8 <__func__.0+0x2f8>
    8000264a:	0bb220ef          	jal	80024f04 <printf>
    8000264e:	00047797          	auipc	a5,0x47
    80002652:	9c37c783          	lbu	a5,-1597(a5) # 80049011 <excpt+0x1>
    80002656:	00025597          	auipc	a1,0x25
    8000265a:	83a58593          	addi	a1,a1,-1990 # 80026e90 <__func__.0+0x2d0>
    8000265e:	c789                	beqz	a5,80002668 <two_stage_translation_1+0x210>
    80002660:	6418                	ld	a4,8(s0)
    80002662:	47d5                	li	a5,21
    80002664:	40f70b63          	beq	a4,a5,80002a7a <two_stage_translation_1+0x622>
    80002668:	00025517          	auipc	a0,0x25
    8000266c:	86850513          	addi	a0,a0,-1944 # 80026ed0 <__func__.0+0x310>
    80002670:	095220ef          	jal	80024f04 <printf>
    80002674:	00047797          	auipc	a5,0x47
    80002678:	99d7c783          	lbu	a5,-1635(a5) # 80049011 <excpt+0x1>
    8000267c:	c789                	beqz	a5,80002686 <two_stage_translation_1+0x22e>
    8000267e:	6418                	ld	a4,8(s0)
    80002680:	47d5                	li	a5,21
    80002682:	2cf70e63          	beq	a4,a5,8000295e <two_stage_translation_1+0x506>
    80002686:	00025517          	auipc	a0,0x25
    8000268a:	85250513          	addi	a0,a0,-1966 # 80026ed8 <__func__.0+0x318>
    8000268e:	077220ef          	jal	80024f04 <printf>
    80002692:	02900513          	li	a0,41
    80002696:	678210ef          	jal	80023d0e <putchar>
    8000269a:	4529                	li	a0,10
    8000269c:	672210ef          	jal	80023d0e <putchar>
    800026a0:	c899                	beqz	s1,800026b6 <two_stage_translation_1+0x25e>
    800026a2:	00047797          	auipc	a5,0x47
    800026a6:	96f7c783          	lbu	a5,-1681(a5) # 80049011 <excpt+0x1>
    800026aa:	4481                	li	s1,0
    800026ac:	c789                	beqz	a5,800026b6 <two_stage_translation_1+0x25e>
    800026ae:	6418                	ld	a4,8(s0)
    800026b0:	47d5                	li	a5,21
    800026b2:	34f70f63          	beq	a4,a5,80002a10 <two_stage_translation_1+0x5b8>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    800026b6:	0330000f          	fence	rw,rw
    800026ba:	4785                	li	a5,1
    800026bc:	00047717          	auipc	a4,0x47
    800026c0:	98073623          	sd	zero,-1652(a4) # 80049048 <excpt+0x38>
    800026c4:	00f41023          	sh	a5,0(s0)
    800026c8:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    800026cc:	001007b7          	lui	a5,0x100
    800026d0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800026d4:	07b2                	slli	a5,a5,0xc
    800026d6:	00000297          	auipc	t0,0x0
    800026da:	00c28293          	addi	t0,t0,12 # 800026e2 <two_stage_translation_1+0x28a>
    800026de:	02543c23          	sd	t0,56(s0)
    800026e2:	8782                	jr	a5
    TEST_ASSERT(
    800026e4:	08200593          	li	a1,130
    800026e8:	00025617          	auipc	a2,0x25
    800026ec:	da060613          	addi	a2,a2,-608 # 80027488 <__func__.0+0x8c8>
    800026f0:	00024517          	auipc	a0,0x24
    800026f4:	7c850513          	addi	a0,a0,1992 # 80026eb8 <__func__.0+0x2f8>
    800026f8:	00d220ef          	jal	80024f04 <printf>
    800026fc:	00047797          	auipc	a5,0x47
    80002700:	9157c783          	lbu	a5,-1771(a5) # 80049011 <excpt+0x1>
    80002704:	00024597          	auipc	a1,0x24
    80002708:	78c58593          	addi	a1,a1,1932 # 80026e90 <__func__.0+0x2d0>
    8000270c:	c789                	beqz	a5,80002716 <two_stage_translation_1+0x2be>
    8000270e:	6418                	ld	a4,8(s0)
    80002710:	47d1                	li	a5,20
    80002712:	3cf70763          	beq	a4,a5,80002ae0 <two_stage_translation_1+0x688>
    80002716:	00024517          	auipc	a0,0x24
    8000271a:	7ba50513          	addi	a0,a0,1978 # 80026ed0 <__func__.0+0x310>
    8000271e:	7e6220ef          	jal	80024f04 <printf>
    80002722:	00047797          	auipc	a5,0x47
    80002726:	8ef7c783          	lbu	a5,-1809(a5) # 80049011 <excpt+0x1>
    8000272a:	c789                	beqz	a5,80002734 <two_stage_translation_1+0x2dc>
    8000272c:	6418                	ld	a4,8(s0)
    8000272e:	47d1                	li	a5,20
    80002730:	26f70263          	beq	a4,a5,80002994 <two_stage_translation_1+0x53c>
    80002734:	00024517          	auipc	a0,0x24
    80002738:	7a450513          	addi	a0,a0,1956 # 80026ed8 <__func__.0+0x318>
    8000273c:	7c8220ef          	jal	80024f04 <printf>
    80002740:	02900513          	li	a0,41
    80002744:	5ca210ef          	jal	80023d0e <putchar>
    80002748:	4529                	li	a0,10
    8000274a:	5c4210ef          	jal	80023d0e <putchar>
    8000274e:	c899                	beqz	s1,80002764 <two_stage_translation_1+0x30c>
    80002750:	00047797          	auipc	a5,0x47
    80002754:	8c17c783          	lbu	a5,-1855(a5) # 80049011 <excpt+0x1>
    80002758:	4481                	li	s1,0
    8000275a:	c789                	beqz	a5,80002764 <two_stage_translation_1+0x30c>
    8000275c:	6418                	ld	a4,8(s0)
    8000275e:	47d1                	li	a5,20
    80002760:	28f70363          	beq	a4,a5,800029e6 <two_stage_translation_1+0x58e>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    80002764:	4511                	li	a0,4
    80002766:	c90fe0ef          	jal	80000bf6 <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    8000276a:	002027b7          	lui	a5,0x202
    8000276e:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    80002772:	450d                	li	a0,3
    80002774:	c82fe0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    80002778:	6789                	lui	a5,0x2
    8000277a:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    8000277e:	4509                	li	a0,2
    80002780:	c76fe0ef          	jal	80000bf6 <goto_priv>
    80002784:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    80002788:	0330000f          	fence	rw,rw
    8000278c:	4785                	li	a5,1
    8000278e:	00047717          	auipc	a4,0x47
    80002792:	8a073d23          	sd	zero,-1862(a4) # 80049048 <excpt+0x38>
    80002796:	00f41023          	sh	a5,0(s0)
    8000279a:	0330000f          	fence	rw,rw
    volatile uint64_t x = *(volatile uint64_t *)addr;
    8000279e:	400197b7          	lui	a5,0x40019
    800027a2:	078a                	slli	a5,a5,0x2
    800027a4:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    800027a6:	08200593          	li	a1,130
    800027aa:	00025617          	auipc	a2,0x25
    800027ae:	d1e60613          	addi	a2,a2,-738 # 800274c8 <__func__.0+0x908>
    800027b2:	00024517          	auipc	a0,0x24
    800027b6:	70650513          	addi	a0,a0,1798 # 80026eb8 <__func__.0+0x2f8>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    800027ba:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    800027bc:	748220ef          	jal	80024f04 <printf>
    800027c0:	00047797          	auipc	a5,0x47
    800027c4:	8517c783          	lbu	a5,-1967(a5) # 80049011 <excpt+0x1>
    800027c8:	00024597          	auipc	a1,0x24
    800027cc:	6c858593          	addi	a1,a1,1736 # 80026e90 <__func__.0+0x2d0>
    800027d0:	c789                	beqz	a5,800027da <two_stage_translation_1+0x382>
    800027d2:	6418                	ld	a4,8(s0)
    800027d4:	47b5                	li	a5,13
    800027d6:	2cf70f63          	beq	a4,a5,80002ab4 <two_stage_translation_1+0x65c>
    800027da:	00024517          	auipc	a0,0x24
    800027de:	6f650513          	addi	a0,a0,1782 # 80026ed0 <__func__.0+0x310>
    800027e2:	722220ef          	jal	80024f04 <printf>
    800027e6:	00047797          	auipc	a5,0x47
    800027ea:	82b7c783          	lbu	a5,-2005(a5) # 80049011 <excpt+0x1>
    800027ee:	c789                	beqz	a5,800027f8 <two_stage_translation_1+0x3a0>
    800027f0:	6418                	ld	a4,8(s0)
    800027f2:	47b5                	li	a5,13
    800027f4:	1cf70b63          	beq	a4,a5,800029ca <two_stage_translation_1+0x572>
    800027f8:	00024517          	auipc	a0,0x24
    800027fc:	6e050513          	addi	a0,a0,1760 # 80026ed8 <__func__.0+0x318>
    80002800:	704220ef          	jal	80024f04 <printf>
    80002804:	02900513          	li	a0,41
    80002808:	506210ef          	jal	80023d0e <putchar>
    8000280c:	4529                	li	a0,10
    8000280e:	500210ef          	jal	80023d0e <putchar>
    80002812:	c0b5                	beqz	s1,80002876 <two_stage_translation_1+0x41e>
    80002814:	00046497          	auipc	s1,0x46
    80002818:	7fd4c483          	lbu	s1,2045(s1) # 80049011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    8000281c:	00024597          	auipc	a1,0x24
    80002820:	67458593          	addi	a1,a1,1652 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT(
    80002824:	c491                	beqz	s1,80002830 <two_stage_translation_1+0x3d8>
    80002826:	6418                	ld	a4,8(s0)
    80002828:	47b5                	li	a5,13
    8000282a:	02f70663          	beq	a4,a5,80002856 <two_stage_translation_1+0x3fe>
    8000282e:	4481                	li	s1,0
    TEST_END();
    80002830:	00024517          	auipc	a0,0x24
    80002834:	70850513          	addi	a0,a0,1800 # 80026f38 <__func__.0+0x378>
    80002838:	6cc220ef          	jal	80024f04 <printf>
    8000283c:	4511                	li	a0,4
    8000283e:	bb8fe0ef          	jal	80000bf6 <goto_priv>
    80002842:	c6bfe0ef          	jal	800014ac <reset_state>
}
    80002846:	70e2                	ld	ra,56(sp)
    80002848:	7442                	ld	s0,48(sp)
    8000284a:	7902                	ld	s2,32(sp)
    8000284c:	69e2                	ld	s3,24(sp)
    8000284e:	8526                	mv	a0,s1
    80002850:	74a2                	ld	s1,40(sp)
    80002852:	6121                	addi	sp,sp,64
    80002854:	8082                	ret
    TEST_ASSERT(
    80002856:	00046717          	auipc	a4,0x46
    8000285a:	7be72703          	lw	a4,1982(a4) # 80049014 <excpt+0x4>
    8000285e:	4789                	li	a5,2
    80002860:	fcf717e3          	bne	a4,a5,8000282e <two_stage_translation_1+0x3d6>
    80002864:	00046797          	auipc	a5,0x46
    80002868:	7dc7c783          	lbu	a5,2012(a5) # 80049040 <excpt+0x30>
    TEST_END();
    8000286c:	00024597          	auipc	a1,0x24
    80002870:	61458593          	addi	a1,a1,1556 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT(
    80002874:	dfd5                	beqz	a5,80002830 <two_stage_translation_1+0x3d8>
    80002876:	4481                	li	s1,0
    TEST_END();
    80002878:	00024597          	auipc	a1,0x24
    8000287c:	61858593          	addi	a1,a1,1560 # 80026e90 <__func__.0+0x2d0>
    80002880:	bf45                	j	80002830 <two_stage_translation_1+0x3d8>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002882:	47c5                	li	a5,17
    80002884:	1cf48b63          	beq	s1,a5,80002a5a <two_stage_translation_1+0x602>
    80002888:	00024597          	auipc	a1,0x24
    8000288c:	60858593          	addi	a1,a1,1544 # 80026e90 <__func__.0+0x2d0>
    80002890:	00024517          	auipc	a0,0x24
    80002894:	64050513          	addi	a0,a0,1600 # 80026ed0 <__func__.0+0x310>
    80002898:	66c220ef          	jal	80024f04 <printf>
    8000289c:	00024517          	auipc	a0,0x24
    800028a0:	63c50513          	addi	a0,a0,1596 # 80026ed8 <__func__.0+0x318>
    800028a4:	660220ef          	jal	80024f04 <printf>
    800028a8:	02900513          	li	a0,41
    800028ac:	462210ef          	jal	80023d0e <putchar>
    800028b0:	4529                	li	a0,10
    800028b2:	45c210ef          	jal	80023d0e <putchar>
    800028b6:	cc040ae3          	beqz	s0,8000258a <two_stage_translation_1+0x132>
    800028ba:	14bd                	addi	s1,s1,-17
    800028bc:	0014b413          	seqz	s0,s1
    800028c0:	b1f1                	j	8000258c <two_stage_translation_1+0x134>
    TEST_ASSERT("vs gets right values", check1 && check2);
    800028c2:	03240e63          	beq	s0,s2,800028fe <two_stage_translation_1+0x4a6>
    800028c6:	00024597          	auipc	a1,0x24
    800028ca:	5ca58593          	addi	a1,a1,1482 # 80026e90 <__func__.0+0x2d0>
    800028ce:	00024517          	auipc	a0,0x24
    800028d2:	60250513          	addi	a0,a0,1538 # 80026ed0 <__func__.0+0x310>
    800028d6:	62e220ef          	jal	80024f04 <printf>
    800028da:	00024517          	auipc	a0,0x24
    800028de:	5fe50513          	addi	a0,a0,1534 # 80026ed8 <__func__.0+0x318>
    800028e2:	622220ef          	jal	80024f04 <printf>
    800028e6:	02900513          	li	a0,41
    800028ea:	424210ef          	jal	80023d0e <putchar>
    800028ee:	4529                	li	a0,10
    800028f0:	41e210ef          	jal	80023d0e <putchar>
    800028f4:	fde40413          	addi	s0,s0,-34
    800028f8:	00143413          	seqz	s0,s0
    800028fc:	b909                	j	8000250e <two_stage_translation_1+0xb6>
    800028fe:	00024597          	auipc	a1,0x24
    80002902:	58258593          	addi	a1,a1,1410 # 80026e80 <__func__.0+0x2c0>
    80002906:	00024517          	auipc	a0,0x24
    8000290a:	5ca50513          	addi	a0,a0,1482 # 80026ed0 <__func__.0+0x310>
    8000290e:	5f6220ef          	jal	80024f04 <printf>
    80002912:	4529                	li	a0,10
    80002914:	3fa210ef          	jal	80023d0e <putchar>
    80002918:	bff1                	j	800028f4 <two_stage_translation_1+0x49c>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    8000291a:	02200793          	li	a5,34
    8000291e:	10f48e63          	beq	s1,a5,80002a3a <two_stage_translation_1+0x5e2>
    80002922:	00024597          	auipc	a1,0x24
    80002926:	56e58593          	addi	a1,a1,1390 # 80026e90 <__func__.0+0x2d0>
    8000292a:	00024517          	auipc	a0,0x24
    8000292e:	5a650513          	addi	a0,a0,1446 # 80026ed0 <__func__.0+0x310>
    80002932:	5d2220ef          	jal	80024f04 <printf>
    80002936:	00024517          	auipc	a0,0x24
    8000293a:	5a250513          	addi	a0,a0,1442 # 80026ed8 <__func__.0+0x318>
    8000293e:	5c6220ef          	jal	80024f04 <printf>
    80002942:	02900513          	li	a0,41
    80002946:	3c8210ef          	jal	80023d0e <putchar>
    8000294a:	4529                	li	a0,10
    8000294c:	3c2210ef          	jal	80023d0e <putchar>
    80002950:	ca0403e3          	beqz	s0,800025f6 <two_stage_translation_1+0x19e>
    80002954:	fde48493          	addi	s1,s1,-34
    80002958:	0014b493          	seqz	s1,s1
    8000295c:	b971                	j	800025f8 <two_stage_translation_1+0x1a0>
    TEST_ASSERT(
    8000295e:	7418                	ld	a4,40(s0)
    80002960:	400197b7          	lui	a5,0x40019
    80002964:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002968:	d0f71fe3          	bne	a4,a5,80002686 <two_stage_translation_1+0x22e>
    8000296c:	00046717          	auipc	a4,0x46
    80002970:	6a872703          	lw	a4,1704(a4) # 80049014 <excpt+0x4>
    80002974:	478d                	li	a5,3
    80002976:	d0f718e3          	bne	a4,a5,80002686 <two_stage_translation_1+0x22e>
    8000297a:	00046797          	auipc	a5,0x46
    8000297e:	6c67c783          	lbu	a5,1734(a5) # 80049040 <excpt+0x30>
    80002982:	d00782e3          	beqz	a5,80002686 <two_stage_translation_1+0x22e>
    80002986:	00046797          	auipc	a5,0x46
    8000298a:	6bb7c783          	lbu	a5,1723(a5) # 80049041 <excpt+0x31>
    8000298e:	d00796e3          	bnez	a5,8000269a <two_stage_translation_1+0x242>
    80002992:	b9d5                	j	80002686 <two_stage_translation_1+0x22e>
    TEST_ASSERT(
    80002994:	7418                	ld	a4,40(s0)
    80002996:	400197b7          	lui	a5,0x40019
    8000299a:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    8000299e:	d8f71be3          	bne	a4,a5,80002734 <two_stage_translation_1+0x2dc>
    800029a2:	00046717          	auipc	a4,0x46
    800029a6:	67272703          	lw	a4,1650(a4) # 80049014 <excpt+0x4>
    800029aa:	4791                	li	a5,4
    800029ac:	d8f714e3          	bne	a4,a5,80002734 <two_stage_translation_1+0x2dc>
    800029b0:	00046797          	auipc	a5,0x46
    800029b4:	6907c783          	lbu	a5,1680(a5) # 80049040 <excpt+0x30>
    800029b8:	d6078ee3          	beqz	a5,80002734 <two_stage_translation_1+0x2dc>
    800029bc:	00046797          	auipc	a5,0x46
    800029c0:	6857c783          	lbu	a5,1669(a5) # 80049041 <excpt+0x31>
    800029c4:	d80792e3          	bnez	a5,80002748 <two_stage_translation_1+0x2f0>
    800029c8:	b3b5                	j	80002734 <two_stage_translation_1+0x2dc>
    TEST_ASSERT(
    800029ca:	00046717          	auipc	a4,0x46
    800029ce:	64a72703          	lw	a4,1610(a4) # 80049014 <excpt+0x4>
    800029d2:	4789                	li	a5,2
    800029d4:	e2f712e3          	bne	a4,a5,800027f8 <two_stage_translation_1+0x3a0>
    800029d8:	00046797          	auipc	a5,0x46
    800029dc:	6687c783          	lbu	a5,1640(a5) # 80049040 <excpt+0x30>
    800029e0:	e20786e3          	beqz	a5,8000280c <two_stage_translation_1+0x3b4>
    800029e4:	bd11                	j	800027f8 <two_stage_translation_1+0x3a0>
    TEST_ASSERT(
    800029e6:	7418                	ld	a4,40(s0)
    800029e8:	400197b7          	lui	a5,0x40019
    800029ec:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    800029f0:	d6f71ae3          	bne	a4,a5,80002764 <two_stage_translation_1+0x30c>
    800029f4:	00046717          	auipc	a4,0x46
    800029f8:	62072703          	lw	a4,1568(a4) # 80049014 <excpt+0x4>
    800029fc:	4791                	li	a5,4
    800029fe:	d6f713e3          	bne	a4,a5,80002764 <two_stage_translation_1+0x30c>
    80002a02:	03045483          	lhu	s1,48(s0)
    80002a06:	eff48493          	addi	s1,s1,-257
    80002a0a:	0014b493          	seqz	s1,s1
    80002a0e:	bb99                	j	80002764 <two_stage_translation_1+0x30c>
    TEST_ASSERT(
    80002a10:	7418                	ld	a4,40(s0)
    80002a12:	400197b7          	lui	a5,0x40019
    80002a16:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002a1a:	c8f71ee3          	bne	a4,a5,800026b6 <two_stage_translation_1+0x25e>
    80002a1e:	00046717          	auipc	a4,0x46
    80002a22:	5f672703          	lw	a4,1526(a4) # 80049014 <excpt+0x4>
    80002a26:	478d                	li	a5,3
    80002a28:	c8f717e3          	bne	a4,a5,800026b6 <two_stage_translation_1+0x25e>
    80002a2c:	03045483          	lhu	s1,48(s0)
    80002a30:	eff48493          	addi	s1,s1,-257
    80002a34:	0014b493          	seqz	s1,s1
    80002a38:	b9bd                	j	800026b6 <two_stage_translation_1+0x25e>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002a3a:	00024597          	auipc	a1,0x24
    80002a3e:	44658593          	addi	a1,a1,1094 # 80026e80 <__func__.0+0x2c0>
    80002a42:	00024517          	auipc	a0,0x24
    80002a46:	48e50513          	addi	a0,a0,1166 # 80026ed0 <__func__.0+0x310>
    80002a4a:	4ba220ef          	jal	80024f04 <printf>
    80002a4e:	4529                	li	a0,10
    80002a50:	2be210ef          	jal	80023d0e <putchar>
    80002a54:	ba0401e3          	beqz	s0,800025f6 <two_stage_translation_1+0x19e>
    80002a58:	bdf5                	j	80002954 <two_stage_translation_1+0x4fc>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002a5a:	00024597          	auipc	a1,0x24
    80002a5e:	42658593          	addi	a1,a1,1062 # 80026e80 <__func__.0+0x2c0>
    80002a62:	00024517          	auipc	a0,0x24
    80002a66:	46e50513          	addi	a0,a0,1134 # 80026ed0 <__func__.0+0x310>
    80002a6a:	49a220ef          	jal	80024f04 <printf>
    80002a6e:	4529                	li	a0,10
    80002a70:	29e210ef          	jal	80023d0e <putchar>
    80002a74:	b0040be3          	beqz	s0,8000258a <two_stage_translation_1+0x132>
    80002a78:	b589                	j	800028ba <two_stage_translation_1+0x462>
    TEST_ASSERT(
    80002a7a:	7418                	ld	a4,40(s0)
    80002a7c:	400197b7          	lui	a5,0x40019
    80002a80:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002a84:	bef712e3          	bne	a4,a5,80002668 <two_stage_translation_1+0x210>
    80002a88:	00046717          	auipc	a4,0x46
    80002a8c:	58c72703          	lw	a4,1420(a4) # 80049014 <excpt+0x4>
    80002a90:	478d                	li	a5,3
    80002a92:	bcf71be3          	bne	a4,a5,80002668 <two_stage_translation_1+0x210>
    80002a96:	03045703          	lhu	a4,48(s0)
    80002a9a:	10100793          	li	a5,257
    80002a9e:	00024597          	auipc	a1,0x24
    80002aa2:	3e258593          	addi	a1,a1,994 # 80026e80 <__func__.0+0x2c0>
    80002aa6:	bcf701e3          	beq	a4,a5,80002668 <two_stage_translation_1+0x210>
    80002aaa:	00024597          	auipc	a1,0x24
    80002aae:	3e658593          	addi	a1,a1,998 # 80026e90 <__func__.0+0x2d0>
    80002ab2:	be5d                	j	80002668 <two_stage_translation_1+0x210>
    TEST_ASSERT(
    80002ab4:	00046717          	auipc	a4,0x46
    80002ab8:	56072703          	lw	a4,1376(a4) # 80049014 <excpt+0x4>
    80002abc:	4789                	li	a5,2
    80002abe:	d0f71ee3          	bne	a4,a5,800027da <two_stage_translation_1+0x382>
    80002ac2:	00046797          	auipc	a5,0x46
    80002ac6:	57e7c783          	lbu	a5,1406(a5) # 80049040 <excpt+0x30>
    80002aca:	00024597          	auipc	a1,0x24
    80002ace:	3b658593          	addi	a1,a1,950 # 80026e80 <__func__.0+0x2c0>
    80002ad2:	d00784e3          	beqz	a5,800027da <two_stage_translation_1+0x382>
    80002ad6:	00024597          	auipc	a1,0x24
    80002ada:	3ba58593          	addi	a1,a1,954 # 80026e90 <__func__.0+0x2d0>
    80002ade:	b9f5                	j	800027da <two_stage_translation_1+0x382>
    TEST_ASSERT(
    80002ae0:	7418                	ld	a4,40(s0)
    80002ae2:	400197b7          	lui	a5,0x40019
    80002ae6:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002aea:	c2f716e3          	bne	a4,a5,80002716 <two_stage_translation_1+0x2be>
    80002aee:	00046717          	auipc	a4,0x46
    80002af2:	52672703          	lw	a4,1318(a4) # 80049014 <excpt+0x4>
    80002af6:	4791                	li	a5,4
    80002af8:	c0f71fe3          	bne	a4,a5,80002716 <two_stage_translation_1+0x2be>
    80002afc:	03045703          	lhu	a4,48(s0)
    80002b00:	10100793          	li	a5,257
    80002b04:	00024597          	auipc	a1,0x24
    80002b08:	37c58593          	addi	a1,a1,892 # 80026e80 <__func__.0+0x2c0>
    80002b0c:	c0f705e3          	beq	a4,a5,80002716 <two_stage_translation_1+0x2be>
    80002b10:	00024597          	auipc	a1,0x24
    80002b14:	38058593          	addi	a1,a1,896 # 80026e90 <__func__.0+0x2d0>
    80002b18:	befd                	j	80002716 <two_stage_translation_1+0x2be>

0000000080002b1a <two_stage_translation_2>:

bool two_stage_translation_2(){
    80002b1a:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002b1c:	00023597          	auipc	a1,0x23
    80002b20:	99458593          	addi	a1,a1,-1644 # 800254b0 <__func__.17>
    80002b24:	00024517          	auipc	a0,0x24
    80002b28:	37c50513          	addi	a0,a0,892 # 80026ea0 <__func__.0+0x2e0>
bool two_stage_translation_2(){
    80002b2c:	f406                	sd	ra,40(sp)
    80002b2e:	f022                	sd	s0,32(sp)
    80002b30:	ec26                	sd	s1,24(sp)
    80002b32:	e84a                	sd	s2,16(sp)
    80002b34:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002b36:	3ce220ef          	jal	80024f04 <printf>
    80002b3a:	4529                	li	a0,10
    80002b3c:	1d2210ef          	jal	80023d0e <putchar>
    *((volatile uint64_t*) addr) = val;
    80002b40:	2201b737          	lui	a4,0x2201b
    80002b44:	000887b7          	lui	a5,0x88
    80002b48:	070a                	slli	a4,a4,0x2
    80002b4a:	44c5                	li	s1,17
    80002b4c:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002b50:	e304                	sd	s1,0(a4)
    80002b52:	07b2                	slli	a5,a5,0xc
    80002b54:	02200913          	li	s2,34
    80002b58:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002b5c:	450d                	li	a0,3
    80002b5e:	898fe0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80002b62:	a7ffd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002b66:	cbdfd0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002b6a:	b47fd0ef          	jal	800006b0 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002b6e:	4001b737          	lui	a4,0x4001b
    80002b72:	070a                	slli	a4,a4,0x2
    80002b74:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002b78:	001007b7          	lui	a5,0x100
    80002b7c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002b80:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002b82:	00025617          	auipc	a2,0x25
    80002b86:	84e60613          	addi	a2,a2,-1970 # 800273d0 <__func__.0+0x810>
    80002b8a:	08200593          	li	a1,130
    80002b8e:	00024517          	auipc	a0,0x24
    80002b92:	32a50513          	addi	a0,a0,810 # 80026eb8 <__func__.0+0x2f8>
    80002b96:	6380                	ld	s0,0(a5)
    80002b98:	36c220ef          	jal	80024f04 <printf>
    80002b9c:	0c998b63          	beq	s3,s1,80002c72 <two_stage_translation_2+0x158>
    80002ba0:	00024597          	auipc	a1,0x24
    80002ba4:	2f058593          	addi	a1,a1,752 # 80026e90 <__func__.0+0x2d0>
    80002ba8:	00024517          	auipc	a0,0x24
    80002bac:	32850513          	addi	a0,a0,808 # 80026ed0 <__func__.0+0x310>
    80002bb0:	354220ef          	jal	80024f04 <printf>
    80002bb4:	00024517          	auipc	a0,0x24
    80002bb8:	32450513          	addi	a0,a0,804 # 80026ed8 <__func__.0+0x318>
    80002bbc:	348220ef          	jal	80024f04 <printf>
    80002bc0:	02900513          	li	a0,41
    80002bc4:	14a210ef          	jal	80023d0e <putchar>
    80002bc8:	4529                	li	a0,10
    80002bca:	144210ef          	jal	80023d0e <putchar>
    80002bce:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002bd0:	450d                	li	a0,3
    80002bd2:	824fe0ef          	jal	80000bf6 <goto_priv>
    hpt_switch();
    80002bd6:	f13fd0ef          	jal	80000ae8 <hpt_switch>
    goto_priv(PRIV_VS);
    80002bda:	4509                	li	a0,2
    80002bdc:	81afe0ef          	jal	80000bf6 <goto_priv>
    80002be0:	001007b7          	lui	a5,0x100
    80002be4:	4001b737          	lui	a4,0x4001b
    80002be8:	070a                	slli	a4,a4,0x2
    80002bea:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002bee:	07b2                	slli	a5,a5,0xc
    80002bf0:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002bf2:	00025617          	auipc	a2,0x25
    80002bf6:	90e60613          	addi	a2,a2,-1778 # 80027500 <__func__.0+0x940>
    80002bfa:	08200593          	li	a1,130
    80002bfe:	00024517          	auipc	a0,0x24
    80002c02:	2ba50513          	addi	a0,a0,698 # 80026eb8 <__func__.0+0x2f8>
    80002c06:	0007b903          	ld	s2,0(a5)
    80002c0a:	2fa220ef          	jal	80024f04 <printf>
    80002c0e:	47c5                	li	a5,17
    80002c10:	0af48d63          	beq	s1,a5,80002cca <two_stage_translation_2+0x1b0>
    80002c14:	00024597          	auipc	a1,0x24
    80002c18:	27c58593          	addi	a1,a1,636 # 80026e90 <__func__.0+0x2d0>
    80002c1c:	00024517          	auipc	a0,0x24
    80002c20:	2b450513          	addi	a0,a0,692 # 80026ed0 <__func__.0+0x310>
    80002c24:	2e0220ef          	jal	80024f04 <printf>
    80002c28:	00024517          	auipc	a0,0x24
    80002c2c:	2b050513          	addi	a0,a0,688 # 80026ed8 <__func__.0+0x318>
    80002c30:	2d4220ef          	jal	80024f04 <printf>
    80002c34:	02900513          	li	a0,41
    80002c38:	0d6210ef          	jal	80023d0e <putchar>
    80002c3c:	4529                	li	a0,10
    80002c3e:	0d0210ef          	jal	80023d0e <putchar>
    80002c42:	4401                	li	s0,0


    TEST_END();
    80002c44:	00024597          	auipc	a1,0x24
    80002c48:	24c58593          	addi	a1,a1,588 # 80026e90 <__func__.0+0x2d0>
    80002c4c:	00024517          	auipc	a0,0x24
    80002c50:	2ec50513          	addi	a0,a0,748 # 80026f38 <__func__.0+0x378>
    80002c54:	2b0220ef          	jal	80024f04 <printf>
    80002c58:	4511                	li	a0,4
    80002c5a:	f9dfd0ef          	jal	80000bf6 <goto_priv>
    80002c5e:	84ffe0ef          	jal	800014ac <reset_state>
}
    80002c62:	70a2                	ld	ra,40(sp)
    80002c64:	8522                	mv	a0,s0
    80002c66:	7402                	ld	s0,32(sp)
    80002c68:	64e2                	ld	s1,24(sp)
    80002c6a:	6942                	ld	s2,16(sp)
    80002c6c:	69a2                	ld	s3,8(sp)
    80002c6e:	6145                	addi	sp,sp,48
    80002c70:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002c72:	03240e63          	beq	s0,s2,80002cae <two_stage_translation_2+0x194>
    80002c76:	00024597          	auipc	a1,0x24
    80002c7a:	21a58593          	addi	a1,a1,538 # 80026e90 <__func__.0+0x2d0>
    80002c7e:	00024517          	auipc	a0,0x24
    80002c82:	25250513          	addi	a0,a0,594 # 80026ed0 <__func__.0+0x310>
    80002c86:	27e220ef          	jal	80024f04 <printf>
    80002c8a:	00024517          	auipc	a0,0x24
    80002c8e:	24e50513          	addi	a0,a0,590 # 80026ed8 <__func__.0+0x318>
    80002c92:	272220ef          	jal	80024f04 <printf>
    80002c96:	02900513          	li	a0,41
    80002c9a:	074210ef          	jal	80023d0e <putchar>
    80002c9e:	4529                	li	a0,10
    80002ca0:	06e210ef          	jal	80023d0e <putchar>
    80002ca4:	fde40413          	addi	s0,s0,-34
    80002ca8:	00143413          	seqz	s0,s0
    80002cac:	b715                	j	80002bd0 <two_stage_translation_2+0xb6>
    80002cae:	00024597          	auipc	a1,0x24
    80002cb2:	1d258593          	addi	a1,a1,466 # 80026e80 <__func__.0+0x2c0>
    80002cb6:	00024517          	auipc	a0,0x24
    80002cba:	21a50513          	addi	a0,a0,538 # 80026ed0 <__func__.0+0x310>
    80002cbe:	246220ef          	jal	80024f04 <printf>
    80002cc2:	4529                	li	a0,10
    80002cc4:	04a210ef          	jal	80023d0e <putchar>
    80002cc8:	bff1                	j	80002ca4 <two_stage_translation_2+0x18a>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002cca:	02200793          	li	a5,34
    80002cce:	f4f913e3          	bne	s2,a5,80002c14 <two_stage_translation_2+0xfa>
    80002cd2:	00024597          	auipc	a1,0x24
    80002cd6:	1ae58593          	addi	a1,a1,430 # 80026e80 <__func__.0+0x2c0>
    80002cda:	00024517          	auipc	a0,0x24
    80002cde:	1f650513          	addi	a0,a0,502 # 80026ed0 <__func__.0+0x310>
    80002ce2:	222220ef          	jal	80024f04 <printf>
    80002ce6:	4529                	li	a0,10
    80002ce8:	026210ef          	jal	80023d0e <putchar>
    80002cec:	d839                	beqz	s0,80002c42 <two_stage_translation_2+0x128>
    80002cee:	4405                	li	s0,1
    TEST_END();
    80002cf0:	00024597          	auipc	a1,0x24
    80002cf4:	19058593          	addi	a1,a1,400 # 80026e80 <__func__.0+0x2c0>
    80002cf8:	bf91                	j	80002c4c <two_stage_translation_2+0x132>

0000000080002cfa <two_stage_translation_3>:

bool two_stage_translation_3(){
    80002cfa:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002cfc:	00022597          	auipc	a1,0x22
    80002d00:	7cc58593          	addi	a1,a1,1996 # 800254c8 <__func__.16>
    80002d04:	00024517          	auipc	a0,0x24
    80002d08:	19c50513          	addi	a0,a0,412 # 80026ea0 <__func__.0+0x2e0>
bool two_stage_translation_3(){
    80002d0c:	f406                	sd	ra,40(sp)
    80002d0e:	f022                	sd	s0,32(sp)
    80002d10:	ec26                	sd	s1,24(sp)
    80002d12:	e84a                	sd	s2,16(sp)
    80002d14:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002d16:	1ee220ef          	jal	80024f04 <printf>
    80002d1a:	4529                	li	a0,10
    80002d1c:	7f3200ef          	jal	80023d0e <putchar>
    *((volatile uint64_t*) addr) = val;
    80002d20:	2201b737          	lui	a4,0x2201b
    80002d24:	000887b7          	lui	a5,0x88
    80002d28:	070a                	slli	a4,a4,0x2
    80002d2a:	44c5                	li	s1,17
    80002d2c:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002d30:	e304                	sd	s1,0(a4)
    80002d32:	07b2                	slli	a5,a5,0xc
    80002d34:	02200913          	li	s2,34
    80002d38:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002d3c:	450d                	li	a0,3
    80002d3e:	eb9fd0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80002d42:	89ffd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002d46:	addfd0ef          	jal	80000822 <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002d4a:	967fd0ef          	jal	800006b0 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002d4e:	4001b737          	lui	a4,0x4001b
    80002d52:	070a                	slli	a4,a4,0x2
    80002d54:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002d58:	001007b7          	lui	a5,0x100
    80002d5c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002d60:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002d62:	00024617          	auipc	a2,0x24
    80002d66:	66e60613          	addi	a2,a2,1646 # 800273d0 <__func__.0+0x810>
    80002d6a:	08200593          	li	a1,130
    80002d6e:	00024517          	auipc	a0,0x24
    80002d72:	14a50513          	addi	a0,a0,330 # 80026eb8 <__func__.0+0x2f8>
    80002d76:	6380                	ld	s0,0(a5)
    80002d78:	18c220ef          	jal	80024f04 <printf>
    80002d7c:	0c998863          	beq	s3,s1,80002e4c <two_stage_translation_3+0x152>
    80002d80:	00024597          	auipc	a1,0x24
    80002d84:	11058593          	addi	a1,a1,272 # 80026e90 <__func__.0+0x2d0>
    80002d88:	00024517          	auipc	a0,0x24
    80002d8c:	14850513          	addi	a0,a0,328 # 80026ed0 <__func__.0+0x310>
    80002d90:	174220ef          	jal	80024f04 <printf>
    80002d94:	00024517          	auipc	a0,0x24
    80002d98:	14450513          	addi	a0,a0,324 # 80026ed8 <__func__.0+0x318>
    80002d9c:	168220ef          	jal	80024f04 <printf>
    80002da0:	02900513          	li	a0,41
    80002da4:	76b200ef          	jal	80023d0e <putchar>
    80002da8:	4529                	li	a0,10
    80002daa:	765200ef          	jal	80023d0e <putchar>
    80002dae:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    80002db0:	4509                	li	a0,2
    80002db2:	e45fd0ef          	jal	80000bf6 <goto_priv>

    vspt_switch();
    80002db6:	d19fd0ef          	jal	80000ace <vspt_switch>
    80002dba:	001007b7          	lui	a5,0x100
    80002dbe:	4001b737          	lui	a4,0x4001b
    80002dc2:	070a                	slli	a4,a4,0x2
    80002dc4:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002dc8:	07b2                	slli	a5,a5,0xc
    80002dca:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80002dcc:	00024617          	auipc	a2,0x24
    80002dd0:	78460613          	addi	a2,a2,1924 # 80027550 <__func__.0+0x990>
    80002dd4:	08200593          	li	a1,130
    80002dd8:	00024517          	auipc	a0,0x24
    80002ddc:	0e050513          	addi	a0,a0,224 # 80026eb8 <__func__.0+0x2f8>
    80002de0:	0007b903          	ld	s2,0(a5)
    80002de4:	120220ef          	jal	80024f04 <printf>
    80002de8:	47c5                	li	a5,17
    80002dea:	0af48d63          	beq	s1,a5,80002ea4 <two_stage_translation_3+0x1aa>
    80002dee:	00024597          	auipc	a1,0x24
    80002df2:	0a258593          	addi	a1,a1,162 # 80026e90 <__func__.0+0x2d0>
    80002df6:	00024517          	auipc	a0,0x24
    80002dfa:	0da50513          	addi	a0,a0,218 # 80026ed0 <__func__.0+0x310>
    80002dfe:	106220ef          	jal	80024f04 <printf>
    80002e02:	00024517          	auipc	a0,0x24
    80002e06:	0d650513          	addi	a0,a0,214 # 80026ed8 <__func__.0+0x318>
    80002e0a:	0fa220ef          	jal	80024f04 <printf>
    80002e0e:	02900513          	li	a0,41
    80002e12:	6fd200ef          	jal	80023d0e <putchar>
    80002e16:	4529                	li	a0,10
    80002e18:	6f7200ef          	jal	80023d0e <putchar>
    80002e1c:	4401                	li	s0,0

    TEST_END();
    80002e1e:	00024597          	auipc	a1,0x24
    80002e22:	07258593          	addi	a1,a1,114 # 80026e90 <__func__.0+0x2d0>
    80002e26:	00024517          	auipc	a0,0x24
    80002e2a:	11250513          	addi	a0,a0,274 # 80026f38 <__func__.0+0x378>
    80002e2e:	0d6220ef          	jal	80024f04 <printf>
    80002e32:	4511                	li	a0,4
    80002e34:	dc3fd0ef          	jal	80000bf6 <goto_priv>
    80002e38:	e74fe0ef          	jal	800014ac <reset_state>
}
    80002e3c:	70a2                	ld	ra,40(sp)
    80002e3e:	8522                	mv	a0,s0
    80002e40:	7402                	ld	s0,32(sp)
    80002e42:	64e2                	ld	s1,24(sp)
    80002e44:	6942                	ld	s2,16(sp)
    80002e46:	69a2                	ld	s3,8(sp)
    80002e48:	6145                	addi	sp,sp,48
    80002e4a:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002e4c:	03240e63          	beq	s0,s2,80002e88 <two_stage_translation_3+0x18e>
    80002e50:	00024597          	auipc	a1,0x24
    80002e54:	04058593          	addi	a1,a1,64 # 80026e90 <__func__.0+0x2d0>
    80002e58:	00024517          	auipc	a0,0x24
    80002e5c:	07850513          	addi	a0,a0,120 # 80026ed0 <__func__.0+0x310>
    80002e60:	0a4220ef          	jal	80024f04 <printf>
    80002e64:	00024517          	auipc	a0,0x24
    80002e68:	07450513          	addi	a0,a0,116 # 80026ed8 <__func__.0+0x318>
    80002e6c:	098220ef          	jal	80024f04 <printf>
    80002e70:	02900513          	li	a0,41
    80002e74:	69b200ef          	jal	80023d0e <putchar>
    80002e78:	4529                	li	a0,10
    80002e7a:	695200ef          	jal	80023d0e <putchar>
    80002e7e:	fde40413          	addi	s0,s0,-34
    80002e82:	00143413          	seqz	s0,s0
    80002e86:	b72d                	j	80002db0 <two_stage_translation_3+0xb6>
    80002e88:	00024597          	auipc	a1,0x24
    80002e8c:	ff858593          	addi	a1,a1,-8 # 80026e80 <__func__.0+0x2c0>
    80002e90:	00024517          	auipc	a0,0x24
    80002e94:	04050513          	addi	a0,a0,64 # 80026ed0 <__func__.0+0x310>
    80002e98:	06c220ef          	jal	80024f04 <printf>
    80002e9c:	4529                	li	a0,10
    80002e9e:	671200ef          	jal	80023d0e <putchar>
    80002ea2:	bff1                	j	80002e7e <two_stage_translation_3+0x184>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80002ea4:	02200793          	li	a5,34
    80002ea8:	f4f913e3          	bne	s2,a5,80002dee <two_stage_translation_3+0xf4>
    80002eac:	00024597          	auipc	a1,0x24
    80002eb0:	fd458593          	addi	a1,a1,-44 # 80026e80 <__func__.0+0x2c0>
    80002eb4:	00024517          	auipc	a0,0x24
    80002eb8:	01c50513          	addi	a0,a0,28 # 80026ed0 <__func__.0+0x310>
    80002ebc:	048220ef          	jal	80024f04 <printf>
    80002ec0:	4529                	li	a0,10
    80002ec2:	64d200ef          	jal	80023d0e <putchar>
    80002ec6:	d839                	beqz	s0,80002e1c <two_stage_translation_3+0x122>
    80002ec8:	4405                	li	s0,1
    TEST_END();
    80002eca:	00024597          	auipc	a1,0x24
    80002ece:	fb658593          	addi	a1,a1,-74 # 80026e80 <__func__.0+0x2c0>
    80002ed2:	bf91                	j	80002e26 <two_stage_translation_3+0x12c>

0000000080002ed4 <second_stage_only_translation>:

bool second_stage_only_translation(){
    80002ed4:	7179                	addi	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    80002ed6:	00022597          	auipc	a1,0x22
    80002eda:	60a58593          	addi	a1,a1,1546 # 800254e0 <__func__.15>
    80002ede:	00024517          	auipc	a0,0x24
    80002ee2:	fc250513          	addi	a0,a0,-62 # 80026ea0 <__func__.0+0x2e0>
bool second_stage_only_translation(){
    80002ee6:	f406                	sd	ra,40(sp)
    80002ee8:	ec26                	sd	s1,24(sp)
    80002eea:	e84a                	sd	s2,16(sp)
    80002eec:	f022                	sd	s0,32(sp)
    80002eee:	e44e                	sd	s3,8(sp)
    80002ef0:	e052                	sd	s4,0(sp)
    TEST_START();
    80002ef2:	012220ef          	jal	80024f04 <printf>
    80002ef6:	4529                	li	a0,10
    80002ef8:	617200ef          	jal	80023d0e <putchar>
    *((volatile uint64_t*) addr) = val;
    80002efc:	2201b737          	lui	a4,0x2201b
    80002f00:	000887b7          	lui	a5,0x88
    80002f04:	070a                	slli	a4,a4,0x2
    80002f06:	44c5                	li	s1,17
    80002f08:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002f0c:	e304                	sd	s1,0(a4)
    80002f0e:	07b2                	slli	a5,a5,0xc
    80002f10:	02200913          	li	s2,34
    80002f14:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    80002f18:	00a007b7          	lui	a5,0xa00
    80002f1c:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002f20:	450d                	li	a0,3
    80002f22:	cd5fd0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80002f26:	ebafd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002f2a:	8f9fd0ef          	jal	80000822 <hpt_init>
    
    goto_priv(PRIV_VS);
    80002f2e:	4509                	li	a0,2
    80002f30:	cc7fd0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80002f34:	0330000f          	fence	rw,rw
    80002f38:	00046417          	auipc	s0,0x46
    80002f3c:	0d840413          	addi	s0,s0,216 # 80049010 <excpt>
    80002f40:	4785                	li	a5,1
    80002f42:	00046717          	auipc	a4,0x46
    80002f46:	10073323          	sd	zero,262(a4) # 80049048 <excpt+0x38>
    80002f4a:	00f41023          	sh	a5,0(s0)
    80002f4e:	0330000f          	fence	rw,rw
    return *((volatile uint64_t*) addr);
    80002f52:	001007b7          	lui	a5,0x100
    80002f56:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002f5a:	4001b737          	lui	a4,0x4001b
    80002f5e:	07b2                	slli	a5,a5,0xc
    80002f60:	070a                	slli	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80002f62:	00024617          	auipc	a2,0x24
    80002f66:	46e60613          	addi	a2,a2,1134 # 800273d0 <__func__.0+0x810>
    80002f6a:	08200593          	li	a1,130
    80002f6e:	00024517          	auipc	a0,0x24
    80002f72:	f4a50513          	addi	a0,a0,-182 # 80026eb8 <__func__.0+0x2f8>
    80002f76:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002f7a:	0007ba03          	ld	s4,0(a5)
    80002f7e:	787210ef          	jal	80024f04 <printf>
    80002f82:	00046797          	auipc	a5,0x46
    80002f86:	08f7c783          	lbu	a5,143(a5) # 80049011 <excpt+0x1>
    80002f8a:	ef91                	bnez	a5,80002fa6 <second_stage_only_translation+0xd2>
    80002f8c:	2e998163          	beq	s3,s1,8000326e <second_stage_only_translation+0x39a>
    80002f90:	00024597          	auipc	a1,0x24
    80002f94:	f0058593          	addi	a1,a1,-256 # 80026e90 <__func__.0+0x2d0>
    80002f98:	00024517          	auipc	a0,0x24
    80002f9c:	f3850513          	addi	a0,a0,-200 # 80026ed0 <__func__.0+0x310>
    80002fa0:	765210ef          	jal	80024f04 <printf>
    80002fa4:	a01d                	j	80002fca <second_stage_only_translation+0xf6>
    80002fa6:	00024597          	auipc	a1,0x24
    80002faa:	eea58593          	addi	a1,a1,-278 # 80026e90 <__func__.0+0x2d0>
    80002fae:	00024517          	auipc	a0,0x24
    80002fb2:	f2250513          	addi	a0,a0,-222 # 80026ed0 <__func__.0+0x310>
    80002fb6:	74f210ef          	jal	80024f04 <printf>
    80002fba:	00046797          	auipc	a5,0x46
    80002fbe:	0577c783          	lbu	a5,87(a5) # 80049011 <excpt+0x1>
    80002fc2:	2e079a63          	bnez	a5,800032b6 <second_stage_only_translation+0x3e2>
    80002fc6:	36998a63          	beq	s3,s1,8000333a <second_stage_only_translation+0x466>
    80002fca:	00024517          	auipc	a0,0x24
    80002fce:	f0e50513          	addi	a0,a0,-242 # 80026ed8 <__func__.0+0x318>
    80002fd2:	733210ef          	jal	80024f04 <printf>
    80002fd6:	02900513          	li	a0,41
    80002fda:	535200ef          	jal	80023d0e <putchar>
    80002fde:	4529                	li	a0,10
    80002fe0:	52f200ef          	jal	80023d0e <putchar>
    80002fe4:	4481                	li	s1,0

    goto_priv(PRIV_HS);
    80002fe6:	450d                	li	a0,3
    80002fe8:	c0ffd0ef          	jal	80000bf6 <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    80002fec:	afdfd0ef          	jal	80000ae8 <hpt_switch>
    asm volatile(
    80002ff0:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80002ff4:	62000073          	.insn	4, 0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    80002ff8:	4509                	li	a0,2
    80002ffa:	bfdfd0ef          	jal	80000bf6 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80002ffe:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    80003002:	0330000f          	fence	rw,rw
    80003006:	4785                	li	a5,1
    80003008:	00046717          	auipc	a4,0x46
    8000300c:	04073023          	sd	zero,64(a4) # 80049048 <excpt+0x38>
    80003010:	00f41023          	sh	a5,0(s0)
    80003014:	0330000f          	fence	rw,rw
    80003018:	001007b7          	lui	a5,0x100
    8000301c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80003020:	4001b737          	lui	a4,0x4001b
    80003024:	07b2                	slli	a5,a5,0xc
    80003026:	070a                	slli	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003028:	00024617          	auipc	a2,0x24
    8000302c:	57860613          	addi	a2,a2,1400 # 800275a0 <__func__.0+0x9e0>
    80003030:	08200593          	li	a1,130
    80003034:	00024517          	auipc	a0,0x24
    80003038:	e8450513          	addi	a0,a0,-380 # 80026eb8 <__func__.0+0x2f8>
    8000303c:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80003040:	0007b983          	ld	s3,0(a5)
    80003044:	6c1210ef          	jal	80024f04 <printf>
    80003048:	00046797          	auipc	a5,0x46
    8000304c:	fc97c783          	lbu	a5,-55(a5) # 80049011 <excpt+0x1>
    80003050:	1a079563          	bnez	a5,800031fa <second_stage_only_translation+0x326>
    80003054:	02200793          	li	a5,34
    80003058:	2af90d63          	beq	s2,a5,80003312 <second_stage_only_translation+0x43e>
    8000305c:	00024597          	auipc	a1,0x24
    80003060:	e3458593          	addi	a1,a1,-460 # 80026e90 <__func__.0+0x2d0>
    80003064:	00024517          	auipc	a0,0x24
    80003068:	e6c50513          	addi	a0,a0,-404 # 80026ed0 <__func__.0+0x310>
    8000306c:	699210ef          	jal	80024f04 <printf>
    80003070:	00024517          	auipc	a0,0x24
    80003074:	e6850513          	addi	a0,a0,-408 # 80026ed8 <__func__.0+0x318>
    80003078:	68d210ef          	jal	80024f04 <printf>
    8000307c:	02900513          	li	a0,41
    80003080:	48f200ef          	jal	80023d0e <putchar>
    80003084:	4529                	li	a0,10
    80003086:	489200ef          	jal	80023d0e <putchar>
    8000308a:	c891                	beqz	s1,8000309e <second_stage_only_translation+0x1ca>
    8000308c:	00046797          	auipc	a5,0x46
    80003090:	f857c783          	lbu	a5,-123(a5) # 80049011 <excpt+0x1>
    80003094:	e789                	bnez	a5,8000309e <second_stage_only_translation+0x1ca>
    80003096:	02200793          	li	a5,34
    8000309a:	1af90263          	beq	s2,a5,8000323e <second_stage_only_translation+0x36a>
    8000309e:	4481                	li	s1,0

    TEST_SETUP_EXCEPT();
    800030a0:	0330000f          	fence	rw,rw
    800030a4:	4785                	li	a5,1
    800030a6:	00046717          	auipc	a4,0x46
    800030aa:	fa073123          	sd	zero,-94(a4) # 80049048 <excpt+0x38>
    800030ae:	00f41023          	sh	a5,0(s0)
    800030b2:	0330000f          	fence	rw,rw
    800030b6:	001007b7          	lui	a5,0x100
    800030ba:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800030be:	07b2                	slli	a5,a5,0xc
    800030c0:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    800030c2:	08200593          	li	a1,130
    800030c6:	00024617          	auipc	a2,0x24
    800030ca:	50260613          	addi	a2,a2,1282 # 800275c8 <__func__.0+0xa08>
    800030ce:	00024517          	auipc	a0,0x24
    800030d2:	dea50513          	addi	a0,a0,-534 # 80026eb8 <__func__.0+0x2f8>
    800030d6:	62f210ef          	jal	80024f04 <printf>
    800030da:	00046797          	auipc	a5,0x46
    800030de:	f377c783          	lbu	a5,-201(a5) # 80049011 <excpt+0x1>
    800030e2:	00024597          	auipc	a1,0x24
    800030e6:	dae58593          	addi	a1,a1,-594 # 80026e90 <__func__.0+0x2d0>
    800030ea:	c789                	beqz	a5,800030f4 <second_stage_only_translation+0x220>
    800030ec:	6418                	ld	a4,8(s0)
    800030ee:	47d5                	li	a5,21
    800030f0:	20f70163          	beq	a4,a5,800032f2 <second_stage_only_translation+0x41e>
    800030f4:	00024517          	auipc	a0,0x24
    800030f8:	ddc50513          	addi	a0,a0,-548 # 80026ed0 <__func__.0+0x310>
    800030fc:	609210ef          	jal	80024f04 <printf>
    80003100:	00046797          	auipc	a5,0x46
    80003104:	f117c783          	lbu	a5,-239(a5) # 80049011 <excpt+0x1>
    80003108:	c789                	beqz	a5,80003112 <second_stage_only_translation+0x23e>
    8000310a:	6418                	ld	a4,8(s0)
    8000310c:	47d5                	li	a5,21
    8000310e:	14f70863          	beq	a4,a5,8000325e <second_stage_only_translation+0x38a>
    80003112:	00024517          	auipc	a0,0x24
    80003116:	dc650513          	addi	a0,a0,-570 # 80026ed8 <__func__.0+0x318>
    8000311a:	5eb210ef          	jal	80024f04 <printf>
    8000311e:	02900513          	li	a0,41
    80003122:	3ed200ef          	jal	80023d0e <putchar>
    80003126:	4529                	li	a0,10
    80003128:	3e7200ef          	jal	80023d0e <putchar>
    8000312c:	c899                	beqz	s1,80003142 <second_stage_only_translation+0x26e>
    8000312e:	00046797          	auipc	a5,0x46
    80003132:	ee37c783          	lbu	a5,-285(a5) # 80049011 <excpt+0x1>
    80003136:	4481                	li	s1,0
    80003138:	c789                	beqz	a5,80003142 <second_stage_only_translation+0x26e>
    8000313a:	6418                	ld	a4,8(s0)
    8000313c:	47d5                	li	a5,21
    8000313e:	1af70263          	beq	a4,a5,800032e2 <second_stage_only_translation+0x40e>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    80003142:	0330000f          	fence	rw,rw
    80003146:	4785                	li	a5,1
    80003148:	00046717          	auipc	a4,0x46
    8000314c:	f0073023          	sd	zero,-256(a4) # 80049048 <excpt+0x38>
    80003150:	00f41023          	sh	a5,0(s0)
    80003154:	0330000f          	fence	rw,rw
    80003158:	200007b7          	lui	a5,0x20000
    8000315c:	17fd                	addi	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    8000315e:	07b2                	slli	a5,a5,0xc
    80003160:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    80003162:	08200593          	li	a1,130
    80003166:	00024617          	auipc	a2,0x24
    8000316a:	48a60613          	addi	a2,a2,1162 # 800275f0 <__func__.0+0xa30>
    8000316e:	00024517          	auipc	a0,0x24
    80003172:	d4a50513          	addi	a0,a0,-694 # 80026eb8 <__func__.0+0x2f8>
    80003176:	58f210ef          	jal	80024f04 <printf>
    8000317a:	00046797          	auipc	a5,0x46
    8000317e:	e977c783          	lbu	a5,-361(a5) # 80049011 <excpt+0x1>
    80003182:	00024597          	auipc	a1,0x24
    80003186:	d0e58593          	addi	a1,a1,-754 # 80026e90 <__func__.0+0x2d0>
    8000318a:	e789                	bnez	a5,80003194 <second_stage_only_translation+0x2c0>
    8000318c:	00024597          	auipc	a1,0x24
    80003190:	cf458593          	addi	a1,a1,-780 # 80026e80 <__func__.0+0x2c0>
    80003194:	00024517          	auipc	a0,0x24
    80003198:	d3c50513          	addi	a0,a0,-708 # 80026ed0 <__func__.0+0x310>
    8000319c:	569210ef          	jal	80024f04 <printf>
    800031a0:	00046797          	auipc	a5,0x46
    800031a4:	e717c783          	lbu	a5,-399(a5) # 80049011 <excpt+0x1>
    800031a8:	e3c5                	bnez	a5,80003248 <second_stage_only_translation+0x374>
    800031aa:	4529                	li	a0,10
    800031ac:	363200ef          	jal	80023d0e <putchar>
    800031b0:	cc9d                	beqz	s1,800031ee <second_stage_only_translation+0x31a>
    800031b2:	00046797          	auipc	a5,0x46
    800031b6:	e5f7c783          	lbu	a5,-417(a5) # 80049011 <excpt+0x1>
    800031ba:	eb95                	bnez	a5,800031ee <second_stage_only_translation+0x31a>
    800031bc:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    800031be:	00024597          	auipc	a1,0x24
    800031c2:	cc258593          	addi	a1,a1,-830 # 80026e80 <__func__.0+0x2c0>
    800031c6:	00024517          	auipc	a0,0x24
    800031ca:	d7250513          	addi	a0,a0,-654 # 80026f38 <__func__.0+0x378>
    800031ce:	537210ef          	jal	80024f04 <printf>
    800031d2:	4511                	li	a0,4
    800031d4:	a23fd0ef          	jal	80000bf6 <goto_priv>
    800031d8:	ad4fe0ef          	jal	800014ac <reset_state>
}
    800031dc:	70a2                	ld	ra,40(sp)
    800031de:	8522                	mv	a0,s0
    800031e0:	7402                	ld	s0,32(sp)
    800031e2:	64e2                	ld	s1,24(sp)
    800031e4:	6942                	ld	s2,16(sp)
    800031e6:	69a2                	ld	s3,8(sp)
    800031e8:	6a02                	ld	s4,0(sp)
    800031ea:	6145                	addi	sp,sp,48
    800031ec:	8082                	ret
    TEST_ASSERT(
    800031ee:	4401                	li	s0,0
    TEST_END();
    800031f0:	00024597          	auipc	a1,0x24
    800031f4:	ca058593          	addi	a1,a1,-864 # 80026e90 <__func__.0+0x2d0>
    800031f8:	b7f9                	j	800031c6 <second_stage_only_translation+0x2f2>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    800031fa:	00024597          	auipc	a1,0x24
    800031fe:	c9658593          	addi	a1,a1,-874 # 80026e90 <__func__.0+0x2d0>
    80003202:	00024517          	auipc	a0,0x24
    80003206:	cce50513          	addi	a0,a0,-818 # 80026ed0 <__func__.0+0x310>
    8000320a:	4fb210ef          	jal	80024f04 <printf>
    8000320e:	00046797          	auipc	a5,0x46
    80003212:	e037c783          	lbu	a5,-509(a5) # 80049011 <excpt+0x1>
    80003216:	e4079de3          	bnez	a5,80003070 <second_stage_only_translation+0x19c>
    8000321a:	02200793          	li	a5,34
    8000321e:	e4f919e3          	bne	s2,a5,80003070 <second_stage_only_translation+0x19c>
    80003222:	47c5                	li	a5,17
    80003224:	e4f996e3          	bne	s3,a5,80003070 <second_stage_only_translation+0x19c>
    80003228:	4529                	li	a0,10
    8000322a:	2e5200ef          	jal	80023d0e <putchar>
    8000322e:	e60488e3          	beqz	s1,8000309e <second_stage_only_translation+0x1ca>
    80003232:	00046797          	auipc	a5,0x46
    80003236:	ddf7c783          	lbu	a5,-545(a5) # 80049011 <excpt+0x1>
    8000323a:	e60792e3          	bnez	a5,8000309e <second_stage_only_translation+0x1ca>
    8000323e:	fef98493          	addi	s1,s3,-17
    80003242:	0014b493          	seqz	s1,s1
    80003246:	bda9                	j	800030a0 <second_stage_only_translation+0x1cc>
    TEST_ASSERT(
    80003248:	00024517          	auipc	a0,0x24
    8000324c:	c9050513          	addi	a0,a0,-880 # 80026ed8 <__func__.0+0x318>
    80003250:	4b5210ef          	jal	80024f04 <printf>
    80003254:	02900513          	li	a0,41
    80003258:	2b7200ef          	jal	80023d0e <putchar>
    8000325c:	b7b9                	j	800031aa <second_stage_only_translation+0x2d6>
    TEST_ASSERT(
    8000325e:	00046717          	auipc	a4,0x46
    80003262:	db672703          	lw	a4,-586(a4) # 80049014 <excpt+0x4>
    80003266:	478d                	li	a5,3
    80003268:	eaf715e3          	bne	a4,a5,80003112 <second_stage_only_translation+0x23e>
    8000326c:	bd6d                	j	80003126 <second_stage_only_translation+0x252>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    8000326e:	0f2a0263          	beq	s4,s2,80003352 <second_stage_only_translation+0x47e>
    80003272:	00024597          	auipc	a1,0x24
    80003276:	c1e58593          	addi	a1,a1,-994 # 80026e90 <__func__.0+0x2d0>
    8000327a:	00024517          	auipc	a0,0x24
    8000327e:	c5650513          	addi	a0,a0,-938 # 80026ed0 <__func__.0+0x310>
    80003282:	483210ef          	jal	80024f04 <printf>
    80003286:	00024517          	auipc	a0,0x24
    8000328a:	c5250513          	addi	a0,a0,-942 # 80026ed8 <__func__.0+0x318>
    8000328e:	477210ef          	jal	80024f04 <printf>
    80003292:	02900513          	li	a0,41
    80003296:	279200ef          	jal	80023d0e <putchar>
    8000329a:	4529                	li	a0,10
    8000329c:	273200ef          	jal	80023d0e <putchar>
    800032a0:	00046797          	auipc	a5,0x46
    800032a4:	d717c783          	lbu	a5,-655(a5) # 80049011 <excpt+0x1>
    800032a8:	d2079ee3          	bnez	a5,80002fe4 <second_stage_only_translation+0x110>
    800032ac:	fdea0493          	addi	s1,s4,-34
    800032b0:	0014b493          	seqz	s1,s1
    800032b4:	bb0d                	j	80002fe6 <second_stage_only_translation+0x112>
    800032b6:	00024517          	auipc	a0,0x24
    800032ba:	c2250513          	addi	a0,a0,-990 # 80026ed8 <__func__.0+0x318>
    800032be:	447210ef          	jal	80024f04 <printf>
    800032c2:	02900513          	li	a0,41
    800032c6:	249200ef          	jal	80023d0e <putchar>
    800032ca:	4529                	li	a0,10
    800032cc:	243200ef          	jal	80023d0e <putchar>
    800032d0:	00046797          	auipc	a5,0x46
    800032d4:	d417c783          	lbu	a5,-703(a5) # 80049011 <excpt+0x1>
    800032d8:	d00796e3          	bnez	a5,80002fe4 <second_stage_only_translation+0x110>
    800032dc:	fc9988e3          	beq	s3,s1,800032ac <second_stage_only_translation+0x3d8>
    800032e0:	b311                	j	80002fe4 <second_stage_only_translation+0x110>
    TEST_ASSERT(
    800032e2:	00046497          	auipc	s1,0x46
    800032e6:	d324a483          	lw	s1,-718(s1) # 80049014 <excpt+0x4>
    800032ea:	14f5                	addi	s1,s1,-3
    800032ec:	0014b493          	seqz	s1,s1
    800032f0:	bd89                	j	80003142 <second_stage_only_translation+0x26e>
    800032f2:	00046717          	auipc	a4,0x46
    800032f6:	d2272703          	lw	a4,-734(a4) # 80049014 <excpt+0x4>
    800032fa:	478d                	li	a5,3
    800032fc:	00024597          	auipc	a1,0x24
    80003300:	b8458593          	addi	a1,a1,-1148 # 80026e80 <__func__.0+0x2c0>
    80003304:	def708e3          	beq	a4,a5,800030f4 <second_stage_only_translation+0x220>
    80003308:	00024597          	auipc	a1,0x24
    8000330c:	b8858593          	addi	a1,a1,-1144 # 80026e90 <__func__.0+0x2d0>
    80003310:	b3d5                	j	800030f4 <second_stage_only_translation+0x220>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003312:	47c5                	li	a5,17
    80003314:	d4f994e3          	bne	s3,a5,8000305c <second_stage_only_translation+0x188>
    80003318:	00024597          	auipc	a1,0x24
    8000331c:	b6858593          	addi	a1,a1,-1176 # 80026e80 <__func__.0+0x2c0>
    80003320:	00024517          	auipc	a0,0x24
    80003324:	bb050513          	addi	a0,a0,-1104 # 80026ed0 <__func__.0+0x310>
    80003328:	3dd210ef          	jal	80024f04 <printf>
    8000332c:	00046797          	auipc	a5,0x46
    80003330:	ce57c783          	lbu	a5,-795(a5) # 80049011 <excpt+0x1>
    80003334:	ee078ae3          	beqz	a5,80003228 <second_stage_only_translation+0x354>
    80003338:	bb25                	j	80003070 <second_stage_only_translation+0x19c>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    8000333a:	f52a16e3          	bne	s4,s2,80003286 <second_stage_only_translation+0x3b2>
    8000333e:	4529                	li	a0,10
    80003340:	1cf200ef          	jal	80023d0e <putchar>
    80003344:	00046497          	auipc	s1,0x46
    80003348:	ccd4c483          	lbu	s1,-819(s1) # 80049011 <excpt+0x1>
    8000334c:	0014c493          	xori	s1,s1,1
    80003350:	b959                	j	80002fe6 <second_stage_only_translation+0x112>
    80003352:	00024597          	auipc	a1,0x24
    80003356:	b2e58593          	addi	a1,a1,-1234 # 80026e80 <__func__.0+0x2c0>
    8000335a:	00024517          	auipc	a0,0x24
    8000335e:	b7650513          	addi	a0,a0,-1162 # 80026ed0 <__func__.0+0x310>
    80003362:	3a3210ef          	jal	80024f04 <printf>
    80003366:	00046797          	auipc	a5,0x46
    8000336a:	cab7c783          	lbu	a5,-853(a5) # 80049011 <excpt+0x1>
    8000336e:	dbe1                	beqz	a5,8000333e <second_stage_only_translation+0x46a>
    80003370:	bf19                	j	80003286 <second_stage_only_translation+0x3b2>

0000000080003372 <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    80003372:	7179                	addi	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    80003374:	00022597          	auipc	a1,0x22
    80003378:	18c58593          	addi	a1,a1,396 # 80025500 <__func__.13>
    8000337c:	00024517          	auipc	a0,0x24
    80003380:	b2450513          	addi	a0,a0,-1244 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_1(){
    80003384:	f406                	sd	ra,40(sp)
    80003386:	f022                	sd	s0,32(sp)
    80003388:	ec26                	sd	s1,24(sp)
    8000338a:	e84a                	sd	s2,16(sp)
    8000338c:	e44e                	sd	s3,8(sp)
    8000338e:	e052                	sd	s4,0(sp)
    TEST_START();
    80003390:	375210ef          	jal	80024f04 <printf>
    80003394:	4529                	li	a0,10
    80003396:	179200ef          	jal	80023d0e <putchar>
    
    hspt_init();
    8000339a:	a46fd0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000339e:	c84fd0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800033a2:	b0efd0ef          	jal	800006b0 <vspt_init>

    TEST_SETUP_EXCEPT();
    800033a6:	0330000f          	fence	rw,rw
    800033aa:	00046497          	auipc	s1,0x46
    800033ae:	c6648493          	addi	s1,s1,-922 # 80049010 <excpt>
    800033b2:	4785                	li	a5,1
    800033b4:	00046717          	auipc	a4,0x46
    800033b8:	c8073a23          	sd	zero,-876(a4) # 80049048 <excpt+0x38>
    800033bc:	00f49023          	sh	a5,0(s1)
    800033c0:	0330000f          	fence	rw,rw
    if(curr_priv != PRIV_M){
    800033c4:	0002e917          	auipc	s2,0x2e
    800033c8:	f1092903          	lw	s2,-240(s2) # 800312d4 <curr_priv>
    800033cc:	4791                	li	a5,4
    800033ce:	02f90763          	beq	s2,a5,800033fc <m_and_hs_using_vs_access_1+0x8a>
        ERROR("trying to write as mprv from low privilege");
    800033d2:	00024517          	auipc	a0,0x24
    800033d6:	25650513          	addi	a0,a0,598 # 80027628 <__func__.0+0xa68>
    800033da:	32b210ef          	jal	80024f04 <printf>
    800033de:	10e00613          	li	a2,270
    800033e2:	00022597          	auipc	a1,0x22
    800033e6:	13e58593          	addi	a1,a1,318 # 80025520 <__func__.12>
    800033ea:	00024517          	auipc	a0,0x24
    800033ee:	c3e50513          	addi	a0,a0,-962 # 80027028 <__func__.0+0x468>
    800033f2:	313210ef          	jal	80024f04 <printf>
    800033f6:	4501                	li	a0,0
    800033f8:	7ca210ef          	jal	80024bc2 <exit>
    asm volatile(
    800033fc:	01108437          	lui	s0,0x1108
    80003400:	ec140413          	addi	s0,s0,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80003404:	001009b7          	lui	s3,0x100
    set_prev_priv(priv);
    80003408:	4509                	li	a0,2
    asm volatile(
    8000340a:	0442                	slli	s0,s0,0x10
    8000340c:	06b98993          	addi	s3,s3,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    80003410:	f06fd0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80003414:	1439                	addi	s0,s0,-18
    80003416:	09b2                	slli	s3,s3,0xc
    80003418:	00020a37          	lui	s4,0x20
    8000341c:	300a2073          	csrs	mstatus,s4
    80003420:	0089b023          	sd	s0,0(s3)
    80003424:	300a3073          	csrc	mstatus,s4
    if(curr_priv != PRIV_M){
    80003428:	0002e797          	auipc	a5,0x2e
    8000342c:	eac7a783          	lw	a5,-340(a5) # 800312d4 <curr_priv>
    80003430:	03278763          	beq	a5,s2,8000345e <m_and_hs_using_vs_access_1+0xec>
        ERROR("trying to read as mprv from low privilege");
    80003434:	00024517          	auipc	a0,0x24
    80003438:	23450513          	addi	a0,a0,564 # 80027668 <__func__.0+0xaa8>
    8000343c:	2c9210ef          	jal	80024f04 <printf>
    80003440:	0fb00613          	li	a2,251
    80003444:	00022597          	auipc	a1,0x22
    80003448:	0ec58593          	addi	a1,a1,236 # 80025530 <__func__.11>
    8000344c:	00024517          	auipc	a0,0x24
    80003450:	bdc50513          	addi	a0,a0,-1060 # 80027028 <__func__.0+0x468>
    80003454:	2b1210ef          	jal	80024f04 <printf>
    80003458:	4501                	li	a0,0
    8000345a:	768210ef          	jal	80024bc2 <exit>
    set_prev_priv(priv);
    8000345e:	4509                	li	a0,2
    80003460:	eb6fd0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80003464:	300a2073          	csrs	mstatus,s4
    80003468:	0009b903          	ld	s2,0(s3)
    8000346c:	300a3073          	csrc	mstatus,s4
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    80003470:	00024617          	auipc	a2,0x24
    80003474:	23860613          	addi	a2,a2,568 # 800276a8 <__func__.0+0xae8>
    80003478:	08200593          	li	a1,130
    8000347c:	00024517          	auipc	a0,0x24
    80003480:	a3c50513          	addi	a0,a0,-1476 # 80026eb8 <__func__.0+0x2f8>
    80003484:	281210ef          	jal	80024f04 <printf>
    80003488:	00046797          	auipc	a5,0x46
    8000348c:	b897c783          	lbu	a5,-1143(a5) # 80049011 <excpt+0x1>
    80003490:	2e079b63          	bnez	a5,80003786 <m_and_hs_using_vs_access_1+0x414>
    80003494:	48890c63          	beq	s2,s0,8000392c <m_and_hs_using_vs_access_1+0x5ba>
    80003498:	00024597          	auipc	a1,0x24
    8000349c:	9f858593          	addi	a1,a1,-1544 # 80026e90 <__func__.0+0x2d0>
    800034a0:	00024517          	auipc	a0,0x24
    800034a4:	a3050513          	addi	a0,a0,-1488 # 80026ed0 <__func__.0+0x310>
    800034a8:	25d210ef          	jal	80024f04 <printf>
    800034ac:	00024517          	auipc	a0,0x24
    800034b0:	a2c50513          	addi	a0,a0,-1492 # 80026ed8 <__func__.0+0x318>
    800034b4:	251210ef          	jal	80024f04 <printf>
    800034b8:	02900513          	li	a0,41
    800034bc:	053200ef          	jal	80023d0e <putchar>
    800034c0:	4529                	li	a0,10
    800034c2:	04d200ef          	jal	80023d0e <putchar>
    800034c6:	00046797          	auipc	a5,0x46
    800034ca:	b4b7c783          	lbu	a5,-1205(a5) # 80049011 <excpt+0x1>
    800034ce:	4981                	li	s3,0
    800034d0:	eb99                	bnez	a5,800034e6 <m_and_hs_using_vs_access_1+0x174>
    800034d2:	011087b7          	lui	a5,0x1108
    800034d6:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800034da:	07c2                	slli	a5,a5,0x10
    800034dc:	17b9                	addi	a5,a5,-18
    800034de:	40f90933          	sub	s2,s2,a5
    800034e2:	00193993          	seqz	s3,s2
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    800034e6:	450d                	li	a0,3
    800034e8:	f0efd0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800034ec:	4509                	li	a0,2
    800034ee:	e28fd0ef          	jal	80000b16 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800034f2:	0330000f          	fence	rw,rw
    800034f6:	4785                	li	a5,1
    800034f8:	00046717          	auipc	a4,0x46
    800034fc:	b4073823          	sd	zero,-1200(a4) # 80049048 <excpt+0x38>
    80003500:	00f49023          	sh	a5,0(s1)
    80003504:	0330000f          	fence	rw,rw
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    80003508:	37ab7937          	lui	s2,0x37ab7
    8000350c:	001007b7          	lui	a5,0x100
    80003510:	090a                	slli	s2,s2,0x2
    80003512:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003516:	eef90913          	addi	s2,s2,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000351a:	07b2                	slli	a5,a5,0xc
    8000351c:	6f27c073          	.insn	4, 0x6f27c073
    asm volatile(
    80003520:	6c07c473          	.insn	4, 0x6c07c473
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    80003524:	00024617          	auipc	a2,0x24
    80003528:	1ac60613          	addi	a2,a2,428 # 800276d0 <__func__.0+0xb10>
    8000352c:	08200593          	li	a1,130
    80003530:	00024517          	auipc	a0,0x24
    80003534:	98850513          	addi	a0,a0,-1656 # 80026eb8 <__func__.0+0x2f8>
    80003538:	1cd210ef          	jal	80024f04 <printf>
    8000353c:	00046797          	auipc	a5,0x46
    80003540:	ad57c783          	lbu	a5,-1323(a5) # 80049011 <excpt+0x1>
    80003544:	26079d63          	bnez	a5,800037be <m_and_hs_using_vs_access_1+0x44c>
    80003548:	41240363          	beq	s0,s2,8000394e <m_and_hs_using_vs_access_1+0x5dc>
    8000354c:	00024597          	auipc	a1,0x24
    80003550:	94458593          	addi	a1,a1,-1724 # 80026e90 <__func__.0+0x2d0>
    80003554:	00024517          	auipc	a0,0x24
    80003558:	97c50513          	addi	a0,a0,-1668 # 80026ed0 <__func__.0+0x310>
    8000355c:	1a9210ef          	jal	80024f04 <printf>
    80003560:	00024517          	auipc	a0,0x24
    80003564:	97850513          	addi	a0,a0,-1672 # 80026ed8 <__func__.0+0x318>
    80003568:	19d210ef          	jal	80024f04 <printf>
    8000356c:	02900513          	li	a0,41
    80003570:	79e200ef          	jal	80023d0e <putchar>
    80003574:	4529                	li	a0,10
    80003576:	798200ef          	jal	80023d0e <putchar>
    8000357a:	36099063          	bnez	s3,800038da <m_and_hs_using_vs_access_1+0x568>
    8000357e:	4401                	li	s0,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    80003580:	0330000f          	fence	rw,rw
    80003584:	4785                	li	a5,1
    80003586:	00046717          	auipc	a4,0x46
    8000358a:	ac073123          	sd	zero,-1342(a4) # 80049048 <excpt+0x38>
    8000358e:	00f49023          	sh	a5,0(s1)
    80003592:	0330000f          	fence	rw,rw
    asm volatile(
    80003596:	001007b7          	lui	a5,0x100
    8000359a:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    8000359e:	07b2                	slli	a5,a5,0xc
    800035a0:	0ff00993          	li	s3,255
    800035a4:	6337c073          	.insn	4, 0x6337c073
    asm volatile(
    800035a8:	6007ca73          	.insn	4, 0x6007ca73
    asm volatile(
    800035ac:	6017c973          	.insn	4, 0x6017c973
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    800035b0:	00024617          	auipc	a2,0x24
    800035b4:	12860613          	addi	a2,a2,296 # 800276d8 <__func__.0+0xb18>
    800035b8:	08200593          	li	a1,130
    800035bc:	00024517          	auipc	a0,0x24
    800035c0:	8fc50513          	addi	a0,a0,-1796 # 80026eb8 <__func__.0+0x2f8>
    800035c4:	141210ef          	jal	80024f04 <printf>
    800035c8:	00046797          	auipc	a5,0x46
    800035cc:	a497c783          	lbu	a5,-1463(a5) # 80049011 <excpt+0x1>
    800035d0:	2c079063          	bnez	a5,80003890 <m_and_hs_using_vs_access_1+0x51e>
    800035d4:	57fd                	li	a5,-1
    800035d6:	32fa0963          	beq	s4,a5,80003908 <m_and_hs_using_vs_access_1+0x596>
    800035da:	00024597          	auipc	a1,0x24
    800035de:	8b658593          	addi	a1,a1,-1866 # 80026e90 <__func__.0+0x2d0>
    800035e2:	00024517          	auipc	a0,0x24
    800035e6:	8ee50513          	addi	a0,a0,-1810 # 80026ed0 <__func__.0+0x310>
    800035ea:	11b210ef          	jal	80024f04 <printf>
    800035ee:	00024517          	auipc	a0,0x24
    800035f2:	8ea50513          	addi	a0,a0,-1814 # 80026ed8 <__func__.0+0x318>
    800035f6:	10f210ef          	jal	80024f04 <printf>
    800035fa:	02900513          	li	a0,41
    800035fe:	710200ef          	jal	80023d0e <putchar>
    80003602:	4529                	li	a0,10
    80003604:	70a200ef          	jal	80023d0e <putchar>
    80003608:	c419                	beqz	s0,80003616 <m_and_hs_using_vs_access_1+0x2a4>
    8000360a:	00046797          	auipc	a5,0x46
    8000360e:	a077c783          	lbu	a5,-1529(a5) # 80049011 <excpt+0x1>
    80003612:	2e078763          	beqz	a5,80003900 <m_and_hs_using_vs_access_1+0x58e>
    80003616:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80003618:	0330000f          	fence	rw,rw
    8000361c:	4785                	li	a5,1
    8000361e:	00046717          	auipc	a4,0x46
    80003622:	a2073523          	sd	zero,-1494(a4) # 80049048 <excpt+0x38>
    80003626:	00f49023          	sh	a5,0(s1)
    8000362a:	0330000f          	fence	rw,rw
    asm volatile(
    8000362e:	001007b7          	lui	a5,0x100
    80003632:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003636:	6941                	lui	s2,0x10
    80003638:	07b2                	slli	a5,a5,0xc
    8000363a:	197d                	addi	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    8000363c:	6727c073          	.insn	4, 0x6727c073
    asm volatile(
    80003640:	6407ca73          	.insn	4, 0x6407ca73
    asm volatile(
    80003644:	6417c9f3          	.insn	4, 0x6417c9f3
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003648:	00024617          	auipc	a2,0x24
    8000364c:	0a860613          	addi	a2,a2,168 # 800276f0 <__func__.0+0xb30>
    80003650:	08200593          	li	a1,130
    80003654:	00024517          	auipc	a0,0x24
    80003658:	86450513          	addi	a0,a0,-1948 # 80026eb8 <__func__.0+0x2f8>
    8000365c:	0a9210ef          	jal	80024f04 <printf>
    80003660:	00046797          	auipc	a5,0x46
    80003664:	9b17c783          	lbu	a5,-1615(a5) # 80049011 <excpt+0x1>
    80003668:	1c079e63          	bnez	a5,80003844 <m_and_hs_using_vs_access_1+0x4d2>
    8000366c:	57fd                	li	a5,-1
    8000366e:	32fa0463          	beq	s4,a5,80003996 <m_and_hs_using_vs_access_1+0x624>
    80003672:	00024597          	auipc	a1,0x24
    80003676:	81e58593          	addi	a1,a1,-2018 # 80026e90 <__func__.0+0x2d0>
    8000367a:	00024517          	auipc	a0,0x24
    8000367e:	85650513          	addi	a0,a0,-1962 # 80026ed0 <__func__.0+0x310>
    80003682:	083210ef          	jal	80024f04 <printf>
    80003686:	00024517          	auipc	a0,0x24
    8000368a:	85250513          	addi	a0,a0,-1966 # 80026ed8 <__func__.0+0x318>
    8000368e:	077210ef          	jal	80024f04 <printf>
    80003692:	02900513          	li	a0,41
    80003696:	678200ef          	jal	80023d0e <putchar>
    8000369a:	4529                	li	a0,10
    8000369c:	672200ef          	jal	80023d0e <putchar>
    800036a0:	c419                	beqz	s0,800036ae <m_and_hs_using_vs_access_1+0x33c>
    800036a2:	00046797          	auipc	a5,0x46
    800036a6:	96f7c783          	lbu	a5,-1681(a5) # 80049011 <excpt+0x1>
    800036aa:	24078763          	beqz	a5,800038f8 <m_and_hs_using_vs_access_1+0x586>
    800036ae:	4901                	li	s2,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    800036b0:	0330000f          	fence	rw,rw
    800036b4:	4785                	li	a5,1
    800036b6:	00046717          	auipc	a4,0x46
    800036ba:	98073923          	sd	zero,-1646(a4) # 80049048 <excpt+0x38>
    800036be:	00f49023          	sh	a5,0(s1)
    800036c2:	0330000f          	fence	rw,rw
    asm volatile(
    800036c6:	001007b7          	lui	a5,0x100
    800036ca:	54fd                	li	s1,-1
    800036cc:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800036d0:	07b2                	slli	a5,a5,0xc
    800036d2:	0204d993          	srli	s3,s1,0x20
    800036d6:	6b37c073          	.insn	4, 0x6b37c073
    asm volatile(
    800036da:	6807ca73          	.insn	4, 0x6807ca73
    asm volatile(
    800036de:	6817c473          	.insn	4, 0x6817c473
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    800036e2:	00024617          	auipc	a2,0x24
    800036e6:	02660613          	addi	a2,a2,38 # 80027708 <__func__.0+0xb48>
    800036ea:	08200593          	li	a1,130
    800036ee:	00023517          	auipc	a0,0x23
    800036f2:	7ca50513          	addi	a0,a0,1994 # 80026eb8 <__func__.0+0x2f8>
    800036f6:	00f210ef          	jal	80024f04 <printf>
    800036fa:	00046797          	auipc	a5,0x46
    800036fe:	9177c783          	lbu	a5,-1769(a5) # 80049011 <excpt+0x1>
    80003702:	0e079c63          	bnez	a5,800037fa <m_and_hs_using_vs_access_1+0x488>
    80003706:	269a0563          	beq	s4,s1,80003970 <m_and_hs_using_vs_access_1+0x5fe>
    8000370a:	00023597          	auipc	a1,0x23
    8000370e:	78658593          	addi	a1,a1,1926 # 80026e90 <__func__.0+0x2d0>
    80003712:	00023517          	auipc	a0,0x23
    80003716:	7be50513          	addi	a0,a0,1982 # 80026ed0 <__func__.0+0x310>
    8000371a:	7ea210ef          	jal	80024f04 <printf>
    8000371e:	00023517          	auipc	a0,0x23
    80003722:	7ba50513          	addi	a0,a0,1978 # 80026ed8 <__func__.0+0x318>
    80003726:	7de210ef          	jal	80024f04 <printf>
    8000372a:	02900513          	li	a0,41
    8000372e:	5e0200ef          	jal	80023d0e <putchar>
    80003732:	4529                	li	a0,10
    80003734:	5da200ef          	jal	80023d0e <putchar>
    80003738:	00090e63          	beqz	s2,80003754 <m_and_hs_using_vs_access_1+0x3e2>
    8000373c:	00046797          	auipc	a5,0x46
    80003740:	8d57c783          	lbu	a5,-1835(a5) # 80049011 <excpt+0x1>
    80003744:	eb81                	bnez	a5,80003754 <m_and_hs_using_vs_access_1+0x3e2>
    80003746:	57fd                	li	a5,-1
    80003748:	00fa1663          	bne	s4,a5,80003754 <m_and_hs_using_vs_access_1+0x3e2>
    8000374c:	020a5a13          	srli	s4,s4,0x20
    80003750:	0f440463          	beq	s0,s4,80003838 <m_and_hs_using_vs_access_1+0x4c6>
    80003754:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    80003756:	00023597          	auipc	a1,0x23
    8000375a:	73a58593          	addi	a1,a1,1850 # 80026e90 <__func__.0+0x2d0>
    8000375e:	00023517          	auipc	a0,0x23
    80003762:	7da50513          	addi	a0,a0,2010 # 80026f38 <__func__.0+0x378>
    80003766:	79e210ef          	jal	80024f04 <printf>
    8000376a:	4511                	li	a0,4
    8000376c:	c8afd0ef          	jal	80000bf6 <goto_priv>
    80003770:	d3dfd0ef          	jal	800014ac <reset_state>
}
    80003774:	70a2                	ld	ra,40(sp)
    80003776:	8522                	mv	a0,s0
    80003778:	7402                	ld	s0,32(sp)
    8000377a:	64e2                	ld	s1,24(sp)
    8000377c:	6942                	ld	s2,16(sp)
    8000377e:	69a2                	ld	s3,8(sp)
    80003780:	6a02                	ld	s4,0(sp)
    80003782:	6145                	addi	sp,sp,48
    80003784:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    80003786:	00023597          	auipc	a1,0x23
    8000378a:	70a58593          	addi	a1,a1,1802 # 80026e90 <__func__.0+0x2d0>
    8000378e:	00023517          	auipc	a0,0x23
    80003792:	74250513          	addi	a0,a0,1858 # 80026ed0 <__func__.0+0x310>
    80003796:	76e210ef          	jal	80024f04 <printf>
    8000379a:	00046797          	auipc	a5,0x46
    8000379e:	8777c783          	lbu	a5,-1929(a5) # 80049011 <excpt+0x1>
    800037a2:	d00795e3          	bnez	a5,800034ac <m_and_hs_using_vs_access_1+0x13a>
    800037a6:	d08913e3          	bne	s2,s0,800034ac <m_and_hs_using_vs_access_1+0x13a>
    800037aa:	4529                	li	a0,10
    800037ac:	562200ef          	jal	80023d0e <putchar>
    800037b0:	00046997          	auipc	s3,0x46
    800037b4:	8619c983          	lbu	s3,-1951(s3) # 80049011 <excpt+0x1>
    800037b8:	0019c993          	xori	s3,s3,1
    800037bc:	b32d                	j	800034e6 <m_and_hs_using_vs_access_1+0x174>
    TEST_ASSERT("hs hlvd",
    800037be:	00023597          	auipc	a1,0x23
    800037c2:	6d258593          	addi	a1,a1,1746 # 80026e90 <__func__.0+0x2d0>
    800037c6:	00023517          	auipc	a0,0x23
    800037ca:	70a50513          	addi	a0,a0,1802 # 80026ed0 <__func__.0+0x310>
    800037ce:	736210ef          	jal	80024f04 <printf>
    800037d2:	00046797          	auipc	a5,0x46
    800037d6:	83f7c783          	lbu	a5,-1985(a5) # 80049011 <excpt+0x1>
    800037da:	d80793e3          	bnez	a5,80003560 <m_and_hs_using_vs_access_1+0x1ee>
    800037de:	d92411e3          	bne	s0,s2,80003560 <m_and_hs_using_vs_access_1+0x1ee>
    800037e2:	4529                	li	a0,10
    800037e4:	52a200ef          	jal	80023d0e <putchar>
    800037e8:	d8098be3          	beqz	s3,8000357e <m_and_hs_using_vs_access_1+0x20c>
    800037ec:	00046417          	auipc	s0,0x46
    800037f0:	82544403          	lbu	s0,-2011(s0) # 80049011 <excpt+0x1>
    800037f4:	00144413          	xori	s0,s0,1
    800037f8:	b361                	j	80003580 <m_and_hs_using_vs_access_1+0x20e>
    TEST_ASSERT("hs hlvw vs hlvwu",
    800037fa:	00023597          	auipc	a1,0x23
    800037fe:	69658593          	addi	a1,a1,1686 # 80026e90 <__func__.0+0x2d0>
    80003802:	00023517          	auipc	a0,0x23
    80003806:	6ce50513          	addi	a0,a0,1742 # 80026ed0 <__func__.0+0x310>
    8000380a:	6fa210ef          	jal	80024f04 <printf>
    8000380e:	00046797          	auipc	a5,0x46
    80003812:	8037c783          	lbu	a5,-2045(a5) # 80049011 <excpt+0x1>
    80003816:	f00794e3          	bnez	a5,8000371e <m_and_hs_using_vs_access_1+0x3ac>
    8000381a:	f09a12e3          	bne	s4,s1,8000371e <m_and_hs_using_vs_access_1+0x3ac>
    8000381e:	f13410e3          	bne	s0,s3,8000371e <m_and_hs_using_vs_access_1+0x3ac>
    80003822:	4529                	li	a0,10
    80003824:	4ea200ef          	jal	80023d0e <putchar>
    80003828:	f20906e3          	beqz	s2,80003754 <m_and_hs_using_vs_access_1+0x3e2>
    8000382c:	00045797          	auipc	a5,0x45
    80003830:	7e57c783          	lbu	a5,2021(a5) # 80049011 <excpt+0x1>
    80003834:	f20790e3          	bnez	a5,80003754 <m_and_hs_using_vs_access_1+0x3e2>
    80003838:	4405                	li	s0,1
    TEST_END();
    8000383a:	00023597          	auipc	a1,0x23
    8000383e:	64658593          	addi	a1,a1,1606 # 80026e80 <__func__.0+0x2c0>
    80003842:	bf31                	j	8000375e <m_and_hs_using_vs_access_1+0x3ec>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003844:	00023597          	auipc	a1,0x23
    80003848:	64c58593          	addi	a1,a1,1612 # 80026e90 <__func__.0+0x2d0>
    8000384c:	00023517          	auipc	a0,0x23
    80003850:	68450513          	addi	a0,a0,1668 # 80026ed0 <__func__.0+0x310>
    80003854:	6b0210ef          	jal	80024f04 <printf>
    80003858:	00045797          	auipc	a5,0x45
    8000385c:	7b97c783          	lbu	a5,1977(a5) # 80049011 <excpt+0x1>
    80003860:	e20793e3          	bnez	a5,80003686 <m_and_hs_using_vs_access_1+0x314>
    80003864:	57fd                	li	a5,-1
    80003866:	e2fa10e3          	bne	s4,a5,80003686 <m_and_hs_using_vs_access_1+0x314>
    8000386a:	e1299ee3          	bne	s3,s2,80003686 <m_and_hs_using_vs_access_1+0x314>
    8000386e:	4529                	li	a0,10
    80003870:	49e200ef          	jal	80023d0e <putchar>
    80003874:	e2040de3          	beqz	s0,800036ae <m_and_hs_using_vs_access_1+0x33c>
    80003878:	00045797          	auipc	a5,0x45
    8000387c:	7997c783          	lbu	a5,1945(a5) # 80049011 <excpt+0x1>
    80003880:	e20797e3          	bnez	a5,800036ae <m_and_hs_using_vs_access_1+0x33c>
    80003884:	7941                	lui	s2,0xffff0
    80003886:	0905                	addi	s2,s2,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    80003888:	994e                	add	s2,s2,s3
    8000388a:	00193913          	seqz	s2,s2
    8000388e:	b50d                	j	800036b0 <m_and_hs_using_vs_access_1+0x33e>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003890:	00023597          	auipc	a1,0x23
    80003894:	60058593          	addi	a1,a1,1536 # 80026e90 <__func__.0+0x2d0>
    80003898:	00023517          	auipc	a0,0x23
    8000389c:	63850513          	addi	a0,a0,1592 # 80026ed0 <__func__.0+0x310>
    800038a0:	664210ef          	jal	80024f04 <printf>
    800038a4:	00045797          	auipc	a5,0x45
    800038a8:	76d7c783          	lbu	a5,1901(a5) # 80049011 <excpt+0x1>
    800038ac:	d40791e3          	bnez	a5,800035ee <m_and_hs_using_vs_access_1+0x27c>
    800038b0:	57fd                	li	a5,-1
    800038b2:	d2fa1ee3          	bne	s4,a5,800035ee <m_and_hs_using_vs_access_1+0x27c>
    800038b6:	d3391ce3          	bne	s2,s3,800035ee <m_and_hs_using_vs_access_1+0x27c>
    800038ba:	4529                	li	a0,10
    800038bc:	452200ef          	jal	80023d0e <putchar>
    800038c0:	d4040be3          	beqz	s0,80003616 <m_and_hs_using_vs_access_1+0x2a4>
    800038c4:	00045797          	auipc	a5,0x45
    800038c8:	74d7c783          	lbu	a5,1869(a5) # 80049011 <excpt+0x1>
    800038cc:	d40795e3          	bnez	a5,80003616 <m_and_hs_using_vs_access_1+0x2a4>
    800038d0:	f0190793          	addi	a5,s2,-255
    800038d4:	0017b413          	seqz	s0,a5
    800038d8:	b381                	j	80003618 <m_and_hs_using_vs_access_1+0x2a6>
    TEST_ASSERT("hs hlvd",
    800038da:	00045797          	auipc	a5,0x45
    800038de:	7377c783          	lbu	a5,1847(a5) # 80049011 <excpt+0x1>
    800038e2:	c8079ee3          	bnez	a5,8000357e <m_and_hs_using_vs_access_1+0x20c>
    800038e6:	c85497b7          	lui	a5,0xc8549
    800038ea:	078a                	slli	a5,a5,0x2
    800038ec:	11178793          	addi	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    800038f0:	943e                	add	s0,s0,a5
    800038f2:	00143413          	seqz	s0,s0
    800038f6:	b169                	j	80003580 <m_and_hs_using_vs_access_1+0x20e>
    TEST_ASSERT("hs hlvh vs hlvhu",
    800038f8:	57fd                	li	a5,-1
    800038fa:	dafa1ae3          	bne	s4,a5,800036ae <m_and_hs_using_vs_access_1+0x33c>
    800038fe:	b759                	j	80003884 <m_and_hs_using_vs_access_1+0x512>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003900:	57fd                	li	a5,-1
    80003902:	d0fa1ae3          	bne	s4,a5,80003616 <m_and_hs_using_vs_access_1+0x2a4>
    80003906:	b7e9                	j	800038d0 <m_and_hs_using_vs_access_1+0x55e>
    80003908:	cd3919e3          	bne	s2,s3,800035da <m_and_hs_using_vs_access_1+0x268>
    8000390c:	00023597          	auipc	a1,0x23
    80003910:	57458593          	addi	a1,a1,1396 # 80026e80 <__func__.0+0x2c0>
    80003914:	00023517          	auipc	a0,0x23
    80003918:	5bc50513          	addi	a0,a0,1468 # 80026ed0 <__func__.0+0x310>
    8000391c:	5e8210ef          	jal	80024f04 <printf>
    80003920:	00045797          	auipc	a5,0x45
    80003924:	6f17c783          	lbu	a5,1777(a5) # 80049011 <excpt+0x1>
    80003928:	dbc9                	beqz	a5,800038ba <m_and_hs_using_vs_access_1+0x548>
    8000392a:	b1d1                	j	800035ee <m_and_hs_using_vs_access_1+0x27c>
    TEST_ASSERT("machine sets mprv to access vs space",
    8000392c:	00023597          	auipc	a1,0x23
    80003930:	55458593          	addi	a1,a1,1364 # 80026e80 <__func__.0+0x2c0>
    80003934:	00023517          	auipc	a0,0x23
    80003938:	59c50513          	addi	a0,a0,1436 # 80026ed0 <__func__.0+0x310>
    8000393c:	5c8210ef          	jal	80024f04 <printf>
    80003940:	00045797          	auipc	a5,0x45
    80003944:	6d17c783          	lbu	a5,1745(a5) # 80049011 <excpt+0x1>
    80003948:	b6078ce3          	beqz	a5,800034c0 <m_and_hs_using_vs_access_1+0x14e>
    8000394c:	b685                	j	800034ac <m_and_hs_using_vs_access_1+0x13a>
    TEST_ASSERT("hs hlvd",
    8000394e:	00023597          	auipc	a1,0x23
    80003952:	53258593          	addi	a1,a1,1330 # 80026e80 <__func__.0+0x2c0>
    80003956:	00023517          	auipc	a0,0x23
    8000395a:	57a50513          	addi	a0,a0,1402 # 80026ed0 <__func__.0+0x310>
    8000395e:	5a6210ef          	jal	80024f04 <printf>
    80003962:	00045797          	auipc	a5,0x45
    80003966:	6af7c783          	lbu	a5,1711(a5) # 80049011 <excpt+0x1>
    8000396a:	e6078ce3          	beqz	a5,800037e2 <m_and_hs_using_vs_access_1+0x470>
    8000396e:	becd                	j	80003560 <m_and_hs_using_vs_access_1+0x1ee>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003970:	d9341de3          	bne	s0,s3,8000370a <m_and_hs_using_vs_access_1+0x398>
    80003974:	00023597          	auipc	a1,0x23
    80003978:	50c58593          	addi	a1,a1,1292 # 80026e80 <__func__.0+0x2c0>
    8000397c:	00023517          	auipc	a0,0x23
    80003980:	55450513          	addi	a0,a0,1364 # 80026ed0 <__func__.0+0x310>
    80003984:	580210ef          	jal	80024f04 <printf>
    80003988:	00045797          	auipc	a5,0x45
    8000398c:	6897c783          	lbu	a5,1673(a5) # 80049011 <excpt+0x1>
    80003990:	e80789e3          	beqz	a5,80003822 <m_and_hs_using_vs_access_1+0x4b0>
    80003994:	b369                	j	8000371e <m_and_hs_using_vs_access_1+0x3ac>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003996:	cd299ee3          	bne	s3,s2,80003672 <m_and_hs_using_vs_access_1+0x300>
    8000399a:	00023597          	auipc	a1,0x23
    8000399e:	4e658593          	addi	a1,a1,1254 # 80026e80 <__func__.0+0x2c0>
    800039a2:	00023517          	auipc	a0,0x23
    800039a6:	52e50513          	addi	a0,a0,1326 # 80026ed0 <__func__.0+0x310>
    800039aa:	55a210ef          	jal	80024f04 <printf>
    800039ae:	00045797          	auipc	a5,0x45
    800039b2:	6637c783          	lbu	a5,1635(a5) # 80049011 <excpt+0x1>
    800039b6:	ea078ce3          	beqz	a5,8000386e <m_and_hs_using_vs_access_1+0x4fc>
    800039ba:	b1f1                	j	80003686 <m_and_hs_using_vs_access_1+0x314>

00000000800039bc <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    800039bc:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800039be:	00022597          	auipc	a1,0x22
    800039c2:	b8258593          	addi	a1,a1,-1150 # 80025540 <__func__.10>
    800039c6:	00023517          	auipc	a0,0x23
    800039ca:	4da50513          	addi	a0,a0,1242 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_2(){
    800039ce:	ec06                	sd	ra,24(sp)
    800039d0:	e822                	sd	s0,16(sp)
    800039d2:	e426                	sd	s1,8(sp)
    800039d4:	e04a                	sd	s2,0(sp)
    TEST_START();
    800039d6:	52e210ef          	jal	80024f04 <printf>
    800039da:	4529                	li	a0,10
    800039dc:	332200ef          	jal	80023d0e <putchar>
    
    hspt_init();
    800039e0:	c01fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800039e4:	e3ffc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800039e8:	cc9fc0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    800039ec:	450d                	li	a0,3
    800039ee:	a08fd0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800039f2:	4509                	li	a0,2
    800039f4:	922fd0ef          	jal	80000b16 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800039f8:	0330000f          	fence	rw,rw
    800039fc:	00045417          	auipc	s0,0x45
    80003a00:	61440413          	addi	s0,s0,1556 # 80049010 <excpt>
    80003a04:	4785                	li	a5,1
    80003a06:	00045717          	auipc	a4,0x45
    80003a0a:	64073123          	sd	zero,1602(a4) # 80049048 <excpt+0x38>
    80003a0e:	00f41023          	sh	a5,0(s0)
    80003a12:	0330000f          	fence	rw,rw
    asm volatile(
    80003a16:	200037b7          	lui	a5,0x20003
    80003a1a:	078e                	slli	a5,a5,0x3
    80003a1c:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003a20:	08200593          	li	a1,130
    80003a24:	00024617          	auipc	a2,0x24
    80003a28:	cfc60613          	addi	a2,a2,-772 # 80027720 <__func__.0+0xb60>
    80003a2c:	00023517          	auipc	a0,0x23
    80003a30:	48c50513          	addi	a0,a0,1164 # 80026eb8 <__func__.0+0x2f8>
    80003a34:	4d0210ef          	jal	80024f04 <printf>
    80003a38:	00045797          	auipc	a5,0x45
    80003a3c:	5d97c783          	lbu	a5,1497(a5) # 80049011 <excpt+0x1>
    80003a40:	00023597          	auipc	a1,0x23
    80003a44:	44058593          	addi	a1,a1,1088 # 80026e80 <__func__.0+0x2c0>
    80003a48:	c789                	beqz	a5,80003a52 <m_and_hs_using_vs_access_2+0x96>
    80003a4a:	00023597          	auipc	a1,0x23
    80003a4e:	44658593          	addi	a1,a1,1094 # 80026e90 <__func__.0+0x2d0>
    80003a52:	00023517          	auipc	a0,0x23
    80003a56:	47e50513          	addi	a0,a0,1150 # 80026ed0 <__func__.0+0x310>
    80003a5a:	4aa210ef          	jal	80024f04 <printf>
    80003a5e:	00045797          	auipc	a5,0x45
    80003a62:	5b37c783          	lbu	a5,1459(a5) # 80049011 <excpt+0x1>
    80003a66:	28079563          	bnez	a5,80003cf0 <m_and_hs_using_vs_access_2+0x334>
    80003a6a:	4529                	li	a0,10
    80003a6c:	2a2200ef          	jal	80023d0e <putchar>
    80003a70:	00045917          	auipc	s2,0x45
    80003a74:	5a194903          	lbu	s2,1441(s2) # 80049011 <excpt+0x1>
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003a78:	0330000f          	fence	rw,rw
    80003a7c:	4785                	li	a5,1
    80003a7e:	00045717          	auipc	a4,0x45
    80003a82:	5c073523          	sd	zero,1482(a4) # 80049048 <excpt+0x38>
    80003a86:	00f41023          	sh	a5,0(s0)
    80003a8a:	0330000f          	fence	rw,rw
    80003a8e:	1782                	slli	a5,a5,0x20
    80003a90:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003a94:	08200593          	li	a1,130
    80003a98:	00024617          	auipc	a2,0x24
    80003a9c:	cb060613          	addi	a2,a2,-848 # 80027748 <__func__.0+0xb88>
    80003aa0:	00023517          	auipc	a0,0x23
    80003aa4:	41850513          	addi	a0,a0,1048 # 80026eb8 <__func__.0+0x2f8>
    80003aa8:	45c210ef          	jal	80024f04 <printf>
    80003aac:	00045797          	auipc	a5,0x45
    80003ab0:	5657c783          	lbu	a5,1381(a5) # 80049011 <excpt+0x1>
    80003ab4:	00023597          	auipc	a1,0x23
    80003ab8:	3dc58593          	addi	a1,a1,988 # 80026e90 <__func__.0+0x2d0>
    80003abc:	e789                	bnez	a5,80003ac6 <m_and_hs_using_vs_access_2+0x10a>
    80003abe:	00023597          	auipc	a1,0x23
    80003ac2:	3c258593          	addi	a1,a1,962 # 80026e80 <__func__.0+0x2c0>
    80003ac6:	00023517          	auipc	a0,0x23
    80003aca:	40a50513          	addi	a0,a0,1034 # 80026ed0 <__func__.0+0x310>
    80003ace:	436210ef          	jal	80024f04 <printf>
    80003ad2:	00045797          	auipc	a5,0x45
    80003ad6:	53f7c783          	lbu	a5,1343(a5) # 80049011 <excpt+0x1>
    80003ada:	20079063          	bnez	a5,80003cda <m_and_hs_using_vs_access_2+0x31e>
    80003ade:	4529                	li	a0,10
    80003ae0:	22e200ef          	jal	80023d0e <putchar>
    80003ae4:	4481                	li	s1,0
    80003ae6:	00091863          	bnez	s2,80003af6 <m_and_hs_using_vs_access_2+0x13a>
    80003aea:	00045497          	auipc	s1,0x45
    80003aee:	5274c483          	lbu	s1,1319(s1) # 80049011 <excpt+0x1>
    80003af2:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003af6:	0330000f          	fence	rw,rw
    80003afa:	4785                	li	a5,1
    80003afc:	00045717          	auipc	a4,0x45
    80003b00:	54073623          	sd	zero,1356(a4) # 80049048 <excpt+0x38>
    80003b04:	00f41023          	sh	a5,0(s0)
    80003b08:	0330000f          	fence	rw,rw
    80003b0c:	001007b7          	lui	a5,0x100
    80003b10:	0785                	addi	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    80003b12:	07b2                	slli	a5,a5,0xc
    80003b14:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003b18:	08200593          	li	a1,130
    80003b1c:	00024617          	auipc	a2,0x24
    80003b20:	c5c60613          	addi	a2,a2,-932 # 80027778 <__func__.0+0xbb8>
    80003b24:	00023517          	auipc	a0,0x23
    80003b28:	39450513          	addi	a0,a0,916 # 80026eb8 <__func__.0+0x2f8>
    80003b2c:	3d8210ef          	jal	80024f04 <printf>
    80003b30:	00045797          	auipc	a5,0x45
    80003b34:	4e17c783          	lbu	a5,1249(a5) # 80049011 <excpt+0x1>
    80003b38:	00023597          	auipc	a1,0x23
    80003b3c:	35858593          	addi	a1,a1,856 # 80026e90 <__func__.0+0x2d0>
    80003b40:	c789                	beqz	a5,80003b4a <m_and_hs_using_vs_access_2+0x18e>
    80003b42:	6418                	ld	a4,8(s0)
    80003b44:	47d5                	li	a5,21
    80003b46:	1ef70563          	beq	a4,a5,80003d30 <m_and_hs_using_vs_access_2+0x374>
    80003b4a:	00023517          	auipc	a0,0x23
    80003b4e:	38650513          	addi	a0,a0,902 # 80026ed0 <__func__.0+0x310>
    80003b52:	3b2210ef          	jal	80024f04 <printf>
    80003b56:	00045797          	auipc	a5,0x45
    80003b5a:	4bb7c783          	lbu	a5,1211(a5) # 80049011 <excpt+0x1>
    80003b5e:	c789                	beqz	a5,80003b68 <m_and_hs_using_vs_access_2+0x1ac>
    80003b60:	6418                	ld	a4,8(s0)
    80003b62:	47d5                	li	a5,21
    80003b64:	14f70e63          	beq	a4,a5,80003cc0 <m_and_hs_using_vs_access_2+0x304>
    80003b68:	00023517          	auipc	a0,0x23
    80003b6c:	37050513          	addi	a0,a0,880 # 80026ed8 <__func__.0+0x318>
    80003b70:	394210ef          	jal	80024f04 <printf>
    80003b74:	02900513          	li	a0,41
    80003b78:	196200ef          	jal	80023d0e <putchar>
    80003b7c:	4529                	li	a0,10
    80003b7e:	190200ef          	jal	80023d0e <putchar>
    80003b82:	c881                	beqz	s1,80003b92 <m_and_hs_using_vs_access_2+0x1d6>
    80003b84:	00045797          	auipc	a5,0x45
    80003b88:	48d7c783          	lbu	a5,1165(a5) # 80049011 <excpt+0x1>
    80003b8c:	4481                	li	s1,0
    80003b8e:	0e079d63          	bnez	a5,80003c88 <m_and_hs_using_vs_access_2+0x2cc>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    80003b92:	0330000f          	fence	rw,rw
    80003b96:	4785                	li	a5,1
    80003b98:	00045717          	auipc	a4,0x45
    80003b9c:	4a073823          	sd	zero,1200(a4) # 80049048 <excpt+0x38>
    80003ba0:	00f41023          	sh	a5,0(s0)
    80003ba4:	0330000f          	fence	rw,rw
    80003ba8:	001007b7          	lui	a5,0x100
    80003bac:	0795                	addi	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    80003bae:	07b2                	slli	a5,a5,0xc
    80003bb0:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003bb4:	08200593          	li	a1,130
    80003bb8:	00024617          	auipc	a2,0x24
    80003bbc:	bf860613          	addi	a2,a2,-1032 # 800277b0 <__func__.0+0xbf0>
    80003bc0:	00023517          	auipc	a0,0x23
    80003bc4:	2f850513          	addi	a0,a0,760 # 80026eb8 <__func__.0+0x2f8>
    80003bc8:	33c210ef          	jal	80024f04 <printf>
    80003bcc:	00045797          	auipc	a5,0x45
    80003bd0:	4457c783          	lbu	a5,1093(a5) # 80049011 <excpt+0x1>
    80003bd4:	00023597          	auipc	a1,0x23
    80003bd8:	2bc58593          	addi	a1,a1,700 # 80026e90 <__func__.0+0x2d0>
    80003bdc:	c789                	beqz	a5,80003be6 <m_and_hs_using_vs_access_2+0x22a>
    80003bde:	6418                	ld	a4,8(s0)
    80003be0:	47b5                	li	a5,13
    80003be2:	12f70263          	beq	a4,a5,80003d06 <m_and_hs_using_vs_access_2+0x34a>
    80003be6:	00023517          	auipc	a0,0x23
    80003bea:	2ea50513          	addi	a0,a0,746 # 80026ed0 <__func__.0+0x310>
    80003bee:	316210ef          	jal	80024f04 <printf>
    80003bf2:	00045797          	auipc	a5,0x45
    80003bf6:	41f7c783          	lbu	a5,1055(a5) # 80049011 <excpt+0x1>
    80003bfa:	c789                	beqz	a5,80003c04 <m_and_hs_using_vs_access_2+0x248>
    80003bfc:	6418                	ld	a4,8(s0)
    80003bfe:	47b5                	li	a5,13
    80003c00:	0af70563          	beq	a4,a5,80003caa <m_and_hs_using_vs_access_2+0x2ee>
    80003c04:	00023517          	auipc	a0,0x23
    80003c08:	2d450513          	addi	a0,a0,724 # 80026ed8 <__func__.0+0x318>
    80003c0c:	2f8210ef          	jal	80024f04 <printf>
    80003c10:	02900513          	li	a0,41
    80003c14:	0fa200ef          	jal	80023d0e <putchar>
    80003c18:	4529                	li	a0,10
    80003c1a:	0f4200ef          	jal	80023d0e <putchar>
    80003c1e:	c491                	beqz	s1,80003c2a <m_and_hs_using_vs_access_2+0x26e>
    80003c20:	00045797          	auipc	a5,0x45
    80003c24:	3f17c783          	lbu	a5,1009(a5) # 80049011 <excpt+0x1>
    80003c28:	eb85                	bnez	a5,80003c58 <m_and_hs_using_vs_access_2+0x29c>
    80003c2a:	4401                	li	s0,0
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    80003c2c:	00023597          	auipc	a1,0x23
    80003c30:	26458593          	addi	a1,a1,612 # 80026e90 <__func__.0+0x2d0>
    80003c34:	00023517          	auipc	a0,0x23
    80003c38:	30450513          	addi	a0,a0,772 # 80026f38 <__func__.0+0x378>
    80003c3c:	2c8210ef          	jal	80024f04 <printf>
    80003c40:	4511                	li	a0,4
    80003c42:	fb5fc0ef          	jal	80000bf6 <goto_priv>
    80003c46:	867fd0ef          	jal	800014ac <reset_state>
}
    80003c4a:	60e2                	ld	ra,24(sp)
    80003c4c:	8522                	mv	a0,s0
    80003c4e:	6442                	ld	s0,16(sp)
    80003c50:	64a2                	ld	s1,8(sp)
    80003c52:	6902                	ld	s2,0(sp)
    80003c54:	6105                	addi	sp,sp,32
    80003c56:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003c58:	6418                	ld	a4,8(s0)
    80003c5a:	47b5                	li	a5,13
    80003c5c:	4401                	li	s0,0
    TEST_END();
    80003c5e:	00023597          	auipc	a1,0x23
    80003c62:	23258593          	addi	a1,a1,562 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003c66:	fcf717e3          	bne	a4,a5,80003c34 <m_and_hs_using_vs_access_2+0x278>
    80003c6a:	00045417          	auipc	s0,0x45
    80003c6e:	3d644403          	lbu	s0,982(s0) # 80049040 <excpt+0x30>
    80003c72:	d069                	beqz	s0,80003c34 <m_and_hs_using_vs_access_2+0x278>
    80003c74:	00045797          	auipc	a5,0x45
    80003c78:	3cd7c783          	lbu	a5,973(a5) # 80049041 <excpt+0x31>
    TEST_END();
    80003c7c:	00023597          	auipc	a1,0x23
    80003c80:	20458593          	addi	a1,a1,516 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003c84:	dbc5                	beqz	a5,80003c34 <m_and_hs_using_vs_access_2+0x278>
    80003c86:	b755                	j	80003c2a <m_and_hs_using_vs_access_2+0x26e>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003c88:	6418                	ld	a4,8(s0)
    80003c8a:	47d5                	li	a5,21
    80003c8c:	f0f713e3          	bne	a4,a5,80003b92 <m_and_hs_using_vs_access_2+0x1d6>
    80003c90:	00045797          	auipc	a5,0x45
    80003c94:	3b07c783          	lbu	a5,944(a5) # 80049040 <excpt+0x30>
    80003c98:	ee078de3          	beqz	a5,80003b92 <m_and_hs_using_vs_access_2+0x1d6>
    80003c9c:	00045497          	auipc	s1,0x45
    80003ca0:	3a54c483          	lbu	s1,933(s1) # 80049041 <excpt+0x31>
    80003ca4:	0014c493          	xori	s1,s1,1
    80003ca8:	b5ed                	j	80003b92 <m_and_hs_using_vs_access_2+0x1d6>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003caa:	00045797          	auipc	a5,0x45
    80003cae:	3967c783          	lbu	a5,918(a5) # 80049040 <excpt+0x30>
    80003cb2:	dba9                	beqz	a5,80003c04 <m_and_hs_using_vs_access_2+0x248>
    80003cb4:	00045797          	auipc	a5,0x45
    80003cb8:	38d7c783          	lbu	a5,909(a5) # 80049041 <excpt+0x31>
    80003cbc:	dfb1                	beqz	a5,80003c18 <m_and_hs_using_vs_access_2+0x25c>
    80003cbe:	b799                	j	80003c04 <m_and_hs_using_vs_access_2+0x248>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003cc0:	00045797          	auipc	a5,0x45
    80003cc4:	3807c783          	lbu	a5,896(a5) # 80049040 <excpt+0x30>
    80003cc8:	ea0780e3          	beqz	a5,80003b68 <m_and_hs_using_vs_access_2+0x1ac>
    80003ccc:	00045797          	auipc	a5,0x45
    80003cd0:	3757c783          	lbu	a5,885(a5) # 80049041 <excpt+0x31>
    80003cd4:	ea0784e3          	beqz	a5,80003b7c <m_and_hs_using_vs_access_2+0x1c0>
    80003cd8:	bd41                	j	80003b68 <m_and_hs_using_vs_access_2+0x1ac>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003cda:	00023517          	auipc	a0,0x23
    80003cde:	1fe50513          	addi	a0,a0,510 # 80026ed8 <__func__.0+0x318>
    80003ce2:	222210ef          	jal	80024f04 <printf>
    80003ce6:	02900513          	li	a0,41
    80003cea:	024200ef          	jal	80023d0e <putchar>
    80003cee:	bbc5                	j	80003ade <m_and_hs_using_vs_access_2+0x122>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003cf0:	00023517          	auipc	a0,0x23
    80003cf4:	1e850513          	addi	a0,a0,488 # 80026ed8 <__func__.0+0x318>
    80003cf8:	20c210ef          	jal	80024f04 <printf>
    80003cfc:	02900513          	li	a0,41
    80003d00:	00e200ef          	jal	80023d0e <putchar>
    80003d04:	b39d                	j	80003a6a <m_and_hs_using_vs_access_2+0xae>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003d06:	00045797          	auipc	a5,0x45
    80003d0a:	33a7c783          	lbu	a5,826(a5) # 80049040 <excpt+0x30>
    80003d0e:	ec078ce3          	beqz	a5,80003be6 <m_and_hs_using_vs_access_2+0x22a>
    80003d12:	00045797          	auipc	a5,0x45
    80003d16:	32f7c783          	lbu	a5,815(a5) # 80049041 <excpt+0x31>
    80003d1a:	00023597          	auipc	a1,0x23
    80003d1e:	16658593          	addi	a1,a1,358 # 80026e80 <__func__.0+0x2c0>
    80003d22:	ec0782e3          	beqz	a5,80003be6 <m_and_hs_using_vs_access_2+0x22a>
    80003d26:	00023597          	auipc	a1,0x23
    80003d2a:	16a58593          	addi	a1,a1,362 # 80026e90 <__func__.0+0x2d0>
    80003d2e:	bd65                	j	80003be6 <m_and_hs_using_vs_access_2+0x22a>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003d30:	00045797          	auipc	a5,0x45
    80003d34:	3107c783          	lbu	a5,784(a5) # 80049040 <excpt+0x30>
    80003d38:	e00789e3          	beqz	a5,80003b4a <m_and_hs_using_vs_access_2+0x18e>
    80003d3c:	00045797          	auipc	a5,0x45
    80003d40:	3057c783          	lbu	a5,773(a5) # 80049041 <excpt+0x31>
    80003d44:	00023597          	auipc	a1,0x23
    80003d48:	13c58593          	addi	a1,a1,316 # 80026e80 <__func__.0+0x2c0>
    80003d4c:	de078fe3          	beqz	a5,80003b4a <m_and_hs_using_vs_access_2+0x18e>
    80003d50:	00023597          	auipc	a1,0x23
    80003d54:	14058593          	addi	a1,a1,320 # 80026e90 <__func__.0+0x2d0>
    80003d58:	bbcd                	j	80003b4a <m_and_hs_using_vs_access_2+0x18e>

0000000080003d5a <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003d5a:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003d5c:	00022597          	auipc	a1,0x22
    80003d60:	80458593          	addi	a1,a1,-2044 # 80025560 <__func__.9>
    80003d64:	00023517          	auipc	a0,0x23
    80003d68:	13c50513          	addi	a0,a0,316 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_3(){
    80003d6c:	ec06                	sd	ra,24(sp)
    80003d6e:	e822                	sd	s0,16(sp)
    80003d70:	e426                	sd	s1,8(sp)
    80003d72:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003d74:	190210ef          	jal	80024f04 <printf>
    80003d78:	4529                	li	a0,10
    80003d7a:	7951f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    80003d7e:	863fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003d82:	aa1fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80003d86:	92bfc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003d8a:	4511                	li	a0,4
    80003d8c:	e6bfc0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80003d90:	0330000f          	fence	rw,rw
    80003d94:	00045417          	auipc	s0,0x45
    80003d98:	27c40413          	addi	s0,s0,636 # 80049010 <excpt>
    80003d9c:	4785                	li	a5,1
    80003d9e:	00045717          	auipc	a4,0x45
    80003da2:	2a073523          	sd	zero,682(a4) # 80049048 <excpt+0x38>
    80003da6:	00f41023          	sh	a5,0(s0)
    80003daa:	0330000f          	fence	rw,rw
    *((volatile uint64_t*) addr) = val;
    80003dae:	0002b497          	auipc	s1,0x2b
    80003db2:	50248493          	addi	s1,s1,1282 # 8002f2b0 <__func__.0+0x86f0>
    80003db6:	6098                	ld	a4,0(s1)
    80003db8:	440197b7          	lui	a5,0x44019
    80003dbc:	0786                	slli	a5,a5,0x1
    80003dbe:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003dc0:	0002d717          	auipc	a4,0x2d
    80003dc4:	51472703          	lw	a4,1300(a4) # 800312d4 <curr_priv>
    80003dc8:	4791                	li	a5,4
    80003dca:	02f70763          	beq	a4,a5,80003df8 <m_and_hs_using_vs_access_3+0x9e>
        ERROR("trying to read as mprv from low privilege");
    80003dce:	00024517          	auipc	a0,0x24
    80003dd2:	89a50513          	addi	a0,a0,-1894 # 80027668 <__func__.0+0xaa8>
    80003dd6:	12e210ef          	jal	80024f04 <printf>
    80003dda:	0fb00613          	li	a2,251
    80003dde:	00021597          	auipc	a1,0x21
    80003de2:	75258593          	addi	a1,a1,1874 # 80025530 <__func__.11>
    80003de6:	00023517          	auipc	a0,0x23
    80003dea:	24250513          	addi	a0,a0,578 # 80027028 <__func__.0+0x468>
    80003dee:	116210ef          	jal	80024f04 <printf>
    80003df2:	4501                	li	a0,0
    80003df4:	5cf200ef          	jal	80024bc2 <exit>
    set_prev_priv(priv);
    80003df8:	4509                	li	a0,2
    80003dfa:	d1dfc0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80003dfe:	000807b7          	lui	a5,0x80
    80003e02:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003e04:	07b6                	slli	a5,a5,0xd
    80003e06:	00020737          	lui	a4,0x20
    80003e0a:	30072073          	csrs	mstatus,a4
    80003e0e:	6394                	ld	a3,0(a5)
    80003e10:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    80003e14:	08200593          	li	a1,130
    80003e18:	00024617          	auipc	a2,0x24
    80003e1c:	9d060613          	addi	a2,a2,-1584 # 800277e8 <__func__.0+0xc28>
    80003e20:	00023517          	auipc	a0,0x23
    80003e24:	09850513          	addi	a0,a0,152 # 80026eb8 <__func__.0+0x2f8>
    80003e28:	0dc210ef          	jal	80024f04 <printf>
    80003e2c:	00045797          	auipc	a5,0x45
    80003e30:	1e57c783          	lbu	a5,485(a5) # 80049011 <excpt+0x1>
    80003e34:	00023597          	auipc	a1,0x23
    80003e38:	05c58593          	addi	a1,a1,92 # 80026e90 <__func__.0+0x2d0>
    80003e3c:	cf89                	beqz	a5,80003e56 <m_and_hs_using_vs_access_3+0xfc>
    80003e3e:	6418                	ld	a4,8(s0)
    80003e40:	47b5                	li	a5,13
    80003e42:	00023597          	auipc	a1,0x23
    80003e46:	03e58593          	addi	a1,a1,62 # 80026e80 <__func__.0+0x2c0>
    80003e4a:	00f70663          	beq	a4,a5,80003e56 <m_and_hs_using_vs_access_3+0xfc>
    80003e4e:	00023597          	auipc	a1,0x23
    80003e52:	04258593          	addi	a1,a1,66 # 80026e90 <__func__.0+0x2d0>
    80003e56:	00023517          	auipc	a0,0x23
    80003e5a:	07a50513          	addi	a0,a0,122 # 80026ed0 <__func__.0+0x310>
    80003e5e:	0a6210ef          	jal	80024f04 <printf>
    80003e62:	00045797          	auipc	a5,0x45
    80003e66:	1af7c783          	lbu	a5,431(a5) # 80049011 <excpt+0x1>
    80003e6a:	c789                	beqz	a5,80003e74 <m_and_hs_using_vs_access_3+0x11a>
    80003e6c:	6418                	ld	a4,8(s0)
    80003e6e:	47b5                	li	a5,13
    80003e70:	00f70c63          	beq	a4,a5,80003e88 <m_and_hs_using_vs_access_3+0x12e>
    80003e74:	00023517          	auipc	a0,0x23
    80003e78:	06450513          	addi	a0,a0,100 # 80026ed8 <__func__.0+0x318>
    80003e7c:	088210ef          	jal	80024f04 <printf>
    80003e80:	02900513          	li	a0,41
    80003e84:	68b1f0ef          	jal	80023d0e <putchar>
    80003e88:	4529                	li	a0,10
    80003e8a:	6851f0ef          	jal	80023d0e <putchar>
    80003e8e:	00045797          	auipc	a5,0x45
    80003e92:	1837c783          	lbu	a5,387(a5) # 80049011 <excpt+0x1>
    80003e96:	4901                	li	s2,0
    80003e98:	c791                	beqz	a5,80003ea4 <m_and_hs_using_vs_access_3+0x14a>
    80003e9a:	00843903          	ld	s2,8(s0)
    80003e9e:	194d                	addi	s2,s2,-13
    80003ea0:	00193913          	seqz	s2,s2
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    80003ea4:	0330000f          	fence	rw,rw
    80003ea8:	4785                	li	a5,1
    80003eaa:	00045717          	auipc	a4,0x45
    80003eae:	18073f23          	sd	zero,414(a4) # 80049048 <excpt+0x38>
    80003eb2:	00f41023          	sh	a5,0(s0)
    80003eb6:	0330000f          	fence	rw,rw
    80003eba:	6098                	ld	a4,0(s1)
    80003ebc:	440197b7          	lui	a5,0x44019
    80003ec0:	0786                	slli	a5,a5,0x1
    80003ec2:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003ec4:	0002d717          	auipc	a4,0x2d
    80003ec8:	41072703          	lw	a4,1040(a4) # 800312d4 <curr_priv>
    80003ecc:	4791                	li	a5,4
    80003ece:	f0f710e3          	bne	a4,a5,80003dce <m_and_hs_using_vs_access_3+0x74>
    set_prev_priv(priv);
    80003ed2:	4501                	li	a0,0
    80003ed4:	c43fc0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80003ed8:	000807b7          	lui	a5,0x80
    80003edc:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003ede:	07b6                	slli	a5,a5,0xd
    80003ee0:	00020737          	lui	a4,0x20
    80003ee4:	30072073          	csrs	mstatus,a4
    80003ee8:	6394                	ld	a3,0(a5)
    80003eea:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003eee:	08200593          	li	a1,130
    80003ef2:	00024617          	auipc	a2,0x24
    80003ef6:	92660613          	addi	a2,a2,-1754 # 80027818 <__func__.0+0xc58>
    80003efa:	00023517          	auipc	a0,0x23
    80003efe:	fbe50513          	addi	a0,a0,-66 # 80026eb8 <__func__.0+0x2f8>
    80003f02:	002210ef          	jal	80024f04 <printf>
    80003f06:	00045797          	auipc	a5,0x45
    80003f0a:	10b7c783          	lbu	a5,267(a5) # 80049011 <excpt+0x1>
    80003f0e:	00023597          	auipc	a1,0x23
    80003f12:	f8258593          	addi	a1,a1,-126 # 80026e90 <__func__.0+0x2d0>
    80003f16:	e789                	bnez	a5,80003f20 <m_and_hs_using_vs_access_3+0x1c6>
    80003f18:	00023597          	auipc	a1,0x23
    80003f1c:	f6858593          	addi	a1,a1,-152 # 80026e80 <__func__.0+0x2c0>
    80003f20:	00023517          	auipc	a0,0x23
    80003f24:	fb050513          	addi	a0,a0,-80 # 80026ed0 <__func__.0+0x310>
    80003f28:	7dd200ef          	jal	80024f04 <printf>
    80003f2c:	00045797          	auipc	a5,0x45
    80003f30:	0e57c783          	lbu	a5,229(a5) # 80049011 <excpt+0x1>
    80003f34:	eba1                	bnez	a5,80003f84 <m_and_hs_using_vs_access_3+0x22a>
    80003f36:	4529                	li	a0,10
    80003f38:	5d71f0ef          	jal	80023d0e <putchar>
    80003f3c:	00090763          	beqz	s2,80003f4a <m_and_hs_using_vs_access_3+0x1f0>
    80003f40:	00045797          	auipc	a5,0x45
    80003f44:	0d17c783          	lbu	a5,209(a5) # 80049011 <excpt+0x1>
    80003f48:	cb85                	beqz	a5,80003f78 <m_and_hs_using_vs_access_3+0x21e>
    80003f4a:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80003f4c:	00023597          	auipc	a1,0x23
    80003f50:	f4458593          	addi	a1,a1,-188 # 80026e90 <__func__.0+0x2d0>
    80003f54:	00023517          	auipc	a0,0x23
    80003f58:	fe450513          	addi	a0,a0,-28 # 80026f38 <__func__.0+0x378>
    80003f5c:	7a9200ef          	jal	80024f04 <printf>
    80003f60:	4511                	li	a0,4
    80003f62:	c95fc0ef          	jal	80000bf6 <goto_priv>
    80003f66:	d46fd0ef          	jal	800014ac <reset_state>
}
    80003f6a:	60e2                	ld	ra,24(sp)
    80003f6c:	8522                	mv	a0,s0
    80003f6e:	6442                	ld	s0,16(sp)
    80003f70:	64a2                	ld	s1,8(sp)
    80003f72:	6902                	ld	s2,0(sp)
    80003f74:	6105                	addi	sp,sp,32
    80003f76:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003f78:	4405                	li	s0,1
    TEST_END();
    80003f7a:	00023597          	auipc	a1,0x23
    80003f7e:	f0658593          	addi	a1,a1,-250 # 80026e80 <__func__.0+0x2c0>
    80003f82:	bfc9                	j	80003f54 <m_and_hs_using_vs_access_3+0x1fa>
    TEST_ASSERT("machine mprv vu access to vu successful",
    80003f84:	00023517          	auipc	a0,0x23
    80003f88:	f5450513          	addi	a0,a0,-172 # 80026ed8 <__func__.0+0x318>
    80003f8c:	779200ef          	jal	80024f04 <printf>
    80003f90:	02900513          	li	a0,41
    80003f94:	57b1f0ef          	jal	80023d0e <putchar>
    80003f98:	bf79                	j	80003f36 <m_and_hs_using_vs_access_3+0x1dc>

0000000080003f9a <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    80003f9a:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003f9c:	00021597          	auipc	a1,0x21
    80003fa0:	5e458593          	addi	a1,a1,1508 # 80025580 <__func__.8>
    80003fa4:	00023517          	auipc	a0,0x23
    80003fa8:	efc50513          	addi	a0,a0,-260 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_4(){
    80003fac:	ec06                	sd	ra,24(sp)
    80003fae:	e822                	sd	s0,16(sp)
    80003fb0:	e426                	sd	s1,8(sp)
    80003fb2:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003fb4:	751200ef          	jal	80024f04 <printf>
    80003fb8:	4529                	li	a0,10
    80003fba:	5551f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    80003fbe:	e22fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003fc2:	861fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80003fc6:	eeafc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80003fca:	450d                	li	a0,3
    80003fcc:	c2bfc0ef          	jal	80000bf6 <goto_priv>

    set_prev_priv(PRIV_VU);
    80003fd0:	4501                	li	a0,0
    80003fd2:	b45fc0ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80003fd6:	0330000f          	fence	rw,rw
    80003fda:	00045417          	auipc	s0,0x45
    80003fde:	03640413          	addi	s0,s0,54 # 80049010 <excpt>
    80003fe2:	4785                	li	a5,1
    80003fe4:	00045717          	auipc	a4,0x45
    80003fe8:	06073223          	sd	zero,100(a4) # 80049048 <excpt+0x38>
    80003fec:	00f41023          	sh	a5,0(s0)
    80003ff0:	0330000f          	fence	rw,rw
    80003ff4:	0002b497          	auipc	s1,0x2b
    80003ff8:	2bc48493          	addi	s1,s1,700 # 8002f2b0 <__func__.0+0x86f0>
    80003ffc:	6094                	ld	a3,0(s1)
    80003ffe:	44019737          	lui	a4,0x44019
    asm volatile(
    80004002:	000807b7          	lui	a5,0x80
    80004006:	0706                	slli	a4,a4,0x1
    80004008:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000400a:	e314                	sd	a3,0(a4)
    8000400c:	07b6                	slli	a5,a5,0xd
    8000400e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004012:	08200593          	li	a1,130
    80004016:	00024617          	auipc	a2,0x24
    8000401a:	82a60613          	addi	a2,a2,-2006 # 80027840 <__func__.0+0xc80>
    8000401e:	00023517          	auipc	a0,0x23
    80004022:	e9a50513          	addi	a0,a0,-358 # 80026eb8 <__func__.0+0x2f8>
    80004026:	6df200ef          	jal	80024f04 <printf>
    8000402a:	00045797          	auipc	a5,0x45
    8000402e:	fe77c783          	lbu	a5,-25(a5) # 80049011 <excpt+0x1>
    80004032:	00023597          	auipc	a1,0x23
    80004036:	e4e58593          	addi	a1,a1,-434 # 80026e80 <__func__.0+0x2c0>
    8000403a:	c789                	beqz	a5,80004044 <m_and_hs_using_vs_access_4+0xaa>
    8000403c:	00023597          	auipc	a1,0x23
    80004040:	e5458593          	addi	a1,a1,-428 # 80026e90 <__func__.0+0x2d0>
    80004044:	00023517          	auipc	a0,0x23
    80004048:	e8c50513          	addi	a0,a0,-372 # 80026ed0 <__func__.0+0x310>
    8000404c:	6b9200ef          	jal	80024f04 <printf>
    80004050:	00045797          	auipc	a5,0x45
    80004054:	fc17c783          	lbu	a5,-63(a5) # 80049011 <excpt+0x1>
    80004058:	10079963          	bnez	a5,8000416a <m_and_hs_using_vs_access_4+0x1d0>
    8000405c:	4529                	li	a0,10
    8000405e:	4b11f0ef          	jal	80023d0e <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80004062:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004064:	00045917          	auipc	s2,0x45
    80004068:	fad94903          	lbu	s2,-83(s2) # 80049011 <excpt+0x1>
    set_prev_priv(PRIV_VS);
    8000406c:	aabfc0ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80004070:	0330000f          	fence	rw,rw
    80004074:	4785                	li	a5,1
    80004076:	00045717          	auipc	a4,0x45
    8000407a:	fc073923          	sd	zero,-46(a4) # 80049048 <excpt+0x38>
    8000407e:	00f41023          	sh	a5,0(s0)
    80004082:	0330000f          	fence	rw,rw
    80004086:	6094                	ld	a3,0(s1)
    80004088:	44019737          	lui	a4,0x44019
    8000408c:	000807b7          	lui	a5,0x80
    80004090:	0706                	slli	a4,a4,0x1
    80004092:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80004094:	e314                	sd	a3,0(a4)
    80004096:	07b6                	slli	a5,a5,0xd
    80004098:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000409c:	08200593          	li	a1,130
    800040a0:	00023617          	auipc	a2,0x23
    800040a4:	7d060613          	addi	a2,a2,2000 # 80027870 <__func__.0+0xcb0>
    800040a8:	00023517          	auipc	a0,0x23
    800040ac:	e1050513          	addi	a0,a0,-496 # 80026eb8 <__func__.0+0x2f8>
    800040b0:	655200ef          	jal	80024f04 <printf>
    800040b4:	00045797          	auipc	a5,0x45
    800040b8:	f5d7c783          	lbu	a5,-163(a5) # 80049011 <excpt+0x1>
    800040bc:	00023597          	auipc	a1,0x23
    800040c0:	dd458593          	addi	a1,a1,-556 # 80026e90 <__func__.0+0x2d0>
    800040c4:	cf89                	beqz	a5,800040de <m_and_hs_using_vs_access_4+0x144>
    800040c6:	6418                	ld	a4,8(s0)
    800040c8:	47b5                	li	a5,13
    800040ca:	00023597          	auipc	a1,0x23
    800040ce:	db658593          	addi	a1,a1,-586 # 80026e80 <__func__.0+0x2c0>
    800040d2:	00f70663          	beq	a4,a5,800040de <m_and_hs_using_vs_access_4+0x144>
    800040d6:	00023597          	auipc	a1,0x23
    800040da:	dba58593          	addi	a1,a1,-582 # 80026e90 <__func__.0+0x2d0>
    800040de:	00023517          	auipc	a0,0x23
    800040e2:	df250513          	addi	a0,a0,-526 # 80026ed0 <__func__.0+0x310>
    800040e6:	61f200ef          	jal	80024f04 <printf>
    800040ea:	00045797          	auipc	a5,0x45
    800040ee:	f277c783          	lbu	a5,-217(a5) # 80049011 <excpt+0x1>
    800040f2:	c789                	beqz	a5,800040fc <m_and_hs_using_vs_access_4+0x162>
    800040f4:	6418                	ld	a4,8(s0)
    800040f6:	47b5                	li	a5,13
    800040f8:	00f70c63          	beq	a4,a5,80004110 <m_and_hs_using_vs_access_4+0x176>
    800040fc:	00023517          	auipc	a0,0x23
    80004100:	ddc50513          	addi	a0,a0,-548 # 80026ed8 <__func__.0+0x318>
    80004104:	601200ef          	jal	80024f04 <printf>
    80004108:	02900513          	li	a0,41
    8000410c:	4031f0ef          	jal	80023d0e <putchar>
    80004110:	4529                	li	a0,10
    80004112:	3fd1f0ef          	jal	80023d0e <putchar>
    80004116:	02091363          	bnez	s2,8000413c <m_and_hs_using_vs_access_4+0x1a2>
    8000411a:	00045497          	auipc	s1,0x45
    8000411e:	ef74c483          	lbu	s1,-265(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80004122:	00023597          	auipc	a1,0x23
    80004126:	d6e58593          	addi	a1,a1,-658 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    8000412a:	cc91                	beqz	s1,80004146 <m_and_hs_using_vs_access_4+0x1ac>
    8000412c:	6418                	ld	a4,8(s0)
    8000412e:	47b5                	li	a5,13
    TEST_END();
    80004130:	00023597          	auipc	a1,0x23
    80004134:	d5058593          	addi	a1,a1,-688 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80004138:	00f70763          	beq	a4,a5,80004146 <m_and_hs_using_vs_access_4+0x1ac>
    8000413c:	4481                	li	s1,0
    TEST_END();
    8000413e:	00023597          	auipc	a1,0x23
    80004142:	d5258593          	addi	a1,a1,-686 # 80026e90 <__func__.0+0x2d0>
    80004146:	00023517          	auipc	a0,0x23
    8000414a:	df250513          	addi	a0,a0,-526 # 80026f38 <__func__.0+0x378>
    8000414e:	5b7200ef          	jal	80024f04 <printf>
    80004152:	4511                	li	a0,4
    80004154:	aa3fc0ef          	jal	80000bf6 <goto_priv>
    80004158:	b54fd0ef          	jal	800014ac <reset_state>
}
    8000415c:	60e2                	ld	ra,24(sp)
    8000415e:	6442                	ld	s0,16(sp)
    80004160:	6902                	ld	s2,0(sp)
    80004162:	8526                	mv	a0,s1
    80004164:	64a2                	ld	s1,8(sp)
    80004166:	6105                	addi	sp,sp,32
    80004168:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    8000416a:	00023517          	auipc	a0,0x23
    8000416e:	d6e50513          	addi	a0,a0,-658 # 80026ed8 <__func__.0+0x318>
    80004172:	593200ef          	jal	80024f04 <printf>
    80004176:	02900513          	li	a0,41
    8000417a:	3951f0ef          	jal	80023d0e <putchar>
    8000417e:	bdf9                	j	8000405c <m_and_hs_using_vs_access_4+0xc2>

0000000080004180 <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    80004180:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004182:	00021597          	auipc	a1,0x21
    80004186:	41e58593          	addi	a1,a1,1054 # 800255a0 <__func__.7>
    8000418a:	00023517          	auipc	a0,0x23
    8000418e:	d1650513          	addi	a0,a0,-746 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_5(){
    80004192:	ec06                	sd	ra,24(sp)
    80004194:	e822                	sd	s0,16(sp)
    80004196:	e426                	sd	s1,8(sp)
    TEST_START();
    80004198:	56d200ef          	jal	80024f04 <printf>
    8000419c:	4529                	li	a0,10
    8000419e:	3711f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    800041a2:	c3efc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800041a6:	e7cfc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800041aa:	d06fc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    800041ae:	4511                	li	a0,4
    800041b0:	a47fc0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800041b4:	000407b7          	lui	a5,0x40
    800041b8:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    800041bc:	0330000f          	fence	rw,rw
    800041c0:	4785                	li	a5,1
    800041c2:	00045717          	auipc	a4,0x45
    800041c6:	e8073323          	sd	zero,-378(a4) # 80049048 <excpt+0x38>
    800041ca:	00045717          	auipc	a4,0x45
    800041ce:	e4f71323          	sh	a5,-442(a4) # 80049010 <excpt>
    800041d2:	0330000f          	fence	rw,rw
    800041d6:	0002b417          	auipc	s0,0x2b
    800041da:	0da43403          	ld	s0,218(s0) # 8002f2b0 <__func__.0+0x86f0>
    800041de:	440197b7          	lui	a5,0x44019
    if(curr_priv != PRIV_M){
    800041e2:	0002d717          	auipc	a4,0x2d
    800041e6:	0f272703          	lw	a4,242(a4) # 800312d4 <curr_priv>
    800041ea:	0786                	slli	a5,a5,0x1
    800041ec:	e380                	sd	s0,0(a5)
    800041ee:	4791                	li	a5,4
    800041f0:	02f70763          	beq	a4,a5,8000421e <m_and_hs_using_vs_access_5+0x9e>
        ERROR("trying to read as mprv from low privilege");
    800041f4:	00023517          	auipc	a0,0x23
    800041f8:	47450513          	addi	a0,a0,1140 # 80027668 <__func__.0+0xaa8>
    800041fc:	509200ef          	jal	80024f04 <printf>
    80004200:	0fb00613          	li	a2,251
    80004204:	00021597          	auipc	a1,0x21
    80004208:	32c58593          	addi	a1,a1,812 # 80025530 <__func__.11>
    8000420c:	00023517          	auipc	a0,0x23
    80004210:	e1c50513          	addi	a0,a0,-484 # 80027028 <__func__.0+0x468>
    80004214:	4f1200ef          	jal	80024f04 <printf>
    80004218:	4501                	li	a0,0
    8000421a:	1a9200ef          	jal	80024bc2 <exit>
    set_prev_priv(priv);
    8000421e:	4509                	li	a0,2
    80004220:	8f7fc0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80004224:	000807b7          	lui	a5,0x80
    80004228:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000422a:	07b6                	slli	a5,a5,0xd
    8000422c:	00020737          	lui	a4,0x20
    80004230:	30072073          	csrs	mstatus,a4
    80004234:	6384                	ld	s1,0(a5)
    80004236:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    8000423a:	00023617          	auipc	a2,0x23
    8000423e:	66e60613          	addi	a2,a2,1646 # 800278a8 <__func__.0+0xce8>
    80004242:	08200593          	li	a1,130
    80004246:	00023517          	auipc	a0,0x23
    8000424a:	c7250513          	addi	a0,a0,-910 # 80026eb8 <__func__.0+0x2f8>
    8000424e:	4b7200ef          	jal	80024f04 <printf>
    80004252:	00045797          	auipc	a5,0x45
    80004256:	dbf7c783          	lbu	a5,-577(a5) # 80049011 <excpt+0x1>
    8000425a:	c3d1                	beqz	a5,800042de <m_and_hs_using_vs_access_5+0x15e>
    8000425c:	00023597          	auipc	a1,0x23
    80004260:	c3458593          	addi	a1,a1,-972 # 80026e90 <__func__.0+0x2d0>
    80004264:	00023517          	auipc	a0,0x23
    80004268:	c6c50513          	addi	a0,a0,-916 # 80026ed0 <__func__.0+0x310>
    8000426c:	499200ef          	jal	80024f04 <printf>
    80004270:	00045797          	auipc	a5,0x45
    80004274:	da17c783          	lbu	a5,-607(a5) # 80049011 <excpt+0x1>
    80004278:	e399                	bnez	a5,8000427e <m_and_hs_using_vs_access_5+0xfe>
    8000427a:	08848e63          	beq	s1,s0,80004316 <m_and_hs_using_vs_access_5+0x196>
    8000427e:	00023517          	auipc	a0,0x23
    80004282:	c5a50513          	addi	a0,a0,-934 # 80026ed8 <__func__.0+0x318>
    80004286:	47f200ef          	jal	80024f04 <printf>
    8000428a:	02900513          	li	a0,41
    8000428e:	2811f0ef          	jal	80023d0e <putchar>
    80004292:	4529                	li	a0,10
    80004294:	27b1f0ef          	jal	80023d0e <putchar>
    80004298:	00045797          	auipc	a5,0x45
    8000429c:	d797c783          	lbu	a5,-647(a5) # 80049011 <excpt+0x1>
    800042a0:	eb89                	bnez	a5,800042b2 <m_and_hs_using_vs_access_5+0x132>
    800042a2:	011087b7          	lui	a5,0x1108
    800042a6:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800042aa:	07c2                	slli	a5,a5,0x10
    800042ac:	17b9                	addi	a5,a5,-18
    800042ae:	06f48c63          	beq	s1,a5,80004326 <m_and_hs_using_vs_access_5+0x1a6>
    800042b2:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    800042b4:	00023597          	auipc	a1,0x23
    800042b8:	bdc58593          	addi	a1,a1,-1060 # 80026e90 <__func__.0+0x2d0>
    800042bc:	00023517          	auipc	a0,0x23
    800042c0:	c7c50513          	addi	a0,a0,-900 # 80026f38 <__func__.0+0x378>
    800042c4:	441200ef          	jal	80024f04 <printf>
    800042c8:	4511                	li	a0,4
    800042ca:	92dfc0ef          	jal	80000bf6 <goto_priv>
    800042ce:	9defd0ef          	jal	800014ac <reset_state>
}
    800042d2:	60e2                	ld	ra,24(sp)
    800042d4:	8522                	mv	a0,s0
    800042d6:	6442                	ld	s0,16(sp)
    800042d8:	64a2                	ld	s1,8(sp)
    800042da:	6105                	addi	sp,sp,32
    800042dc:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    800042de:	00848d63          	beq	s1,s0,800042f8 <m_and_hs_using_vs_access_5+0x178>
    800042e2:	00023597          	auipc	a1,0x23
    800042e6:	bae58593          	addi	a1,a1,-1106 # 80026e90 <__func__.0+0x2d0>
    800042ea:	00023517          	auipc	a0,0x23
    800042ee:	be650513          	addi	a0,a0,-1050 # 80026ed0 <__func__.0+0x310>
    800042f2:	413200ef          	jal	80024f04 <printf>
    800042f6:	b761                	j	8000427e <m_and_hs_using_vs_access_5+0xfe>
    800042f8:	00023597          	auipc	a1,0x23
    800042fc:	b8858593          	addi	a1,a1,-1144 # 80026e80 <__func__.0+0x2c0>
    80004300:	00023517          	auipc	a0,0x23
    80004304:	bd050513          	addi	a0,a0,-1072 # 80026ed0 <__func__.0+0x310>
    80004308:	3fd200ef          	jal	80024f04 <printf>
    8000430c:	00045797          	auipc	a5,0x45
    80004310:	d057c783          	lbu	a5,-763(a5) # 80049011 <excpt+0x1>
    80004314:	f7ad                	bnez	a5,8000427e <m_and_hs_using_vs_access_5+0xfe>
    80004316:	4529                	li	a0,10
    80004318:	1f71f0ef          	jal	80023d0e <putchar>
    8000431c:	00045797          	auipc	a5,0x45
    80004320:	cf57c783          	lbu	a5,-779(a5) # 80049011 <excpt+0x1>
    80004324:	f7d9                	bnez	a5,800042b2 <m_and_hs_using_vs_access_5+0x132>
    80004326:	4405                	li	s0,1
    TEST_END();
    80004328:	00023597          	auipc	a1,0x23
    8000432c:	b5858593          	addi	a1,a1,-1192 # 80026e80 <__func__.0+0x2c0>
    80004330:	b771                	j	800042bc <m_and_hs_using_vs_access_5+0x13c>

0000000080004332 <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    80004332:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004334:	00021597          	auipc	a1,0x21
    80004338:	28c58593          	addi	a1,a1,652 # 800255c0 <__func__.6>
    8000433c:	00023517          	auipc	a0,0x23
    80004340:	b6450513          	addi	a0,a0,-1180 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_6(){
    80004344:	ec06                	sd	ra,24(sp)
    80004346:	e822                	sd	s0,16(sp)
    80004348:	e426                	sd	s1,8(sp)
    TEST_START();
    8000434a:	3bb200ef          	jal	80024f04 <printf>
    8000434e:	4529                	li	a0,10
    80004350:	1bf1f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    80004354:	a8cfc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004358:	ccafc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    8000435c:	b54fc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80004360:	000407b7          	lui	a5,0x40
    80004364:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80004368:	450d                	li	a0,3
    8000436a:	88dfc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000436e:	4509                	li	a0,2
    80004370:	fa6fc0ef          	jal	80000b16 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80004374:	0330000f          	fence	rw,rw
    80004378:	4785                	li	a5,1
    8000437a:	00045717          	auipc	a4,0x45
    8000437e:	cc073723          	sd	zero,-818(a4) # 80049048 <excpt+0x38>
    80004382:	00045717          	auipc	a4,0x45
    80004386:	c8f71723          	sh	a5,-882(a4) # 80049010 <excpt>
    8000438a:	0330000f          	fence	rw,rw
    8000438e:	0002b497          	auipc	s1,0x2b
    80004392:	f224b483          	ld	s1,-222(s1) # 8002f2b0 <__func__.0+0x86f0>
    80004396:	440197b7          	lui	a5,0x44019
    8000439a:	00080437          	lui	s0,0x80
    8000439e:	0786                	slli	a5,a5,0x1
    800043a0:	0465                	addi	s0,s0,25 # 80019 <_test_table_size+0x80018>
    800043a2:	e384                	sd	s1,0(a5)
    800043a4:	0436                	slli	s0,s0,0xd
    800043a6:	6c044473          	.insn	4, 0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800043aa:	00023617          	auipc	a2,0x23
    800043ae:	54660613          	addi	a2,a2,1350 # 800278f0 <__func__.0+0xd30>
    800043b2:	08200593          	li	a1,130
    800043b6:	00023517          	auipc	a0,0x23
    800043ba:	b0250513          	addi	a0,a0,-1278 # 80026eb8 <__func__.0+0x2f8>
    800043be:	347200ef          	jal	80024f04 <printf>
    800043c2:	00045797          	auipc	a5,0x45
    800043c6:	c4f7c783          	lbu	a5,-945(a5) # 80049011 <excpt+0x1>
    800043ca:	e7a5                	bnez	a5,80004432 <m_and_hs_using_vs_access_6+0x100>
    800043cc:	0c940863          	beq	s0,s1,8000449c <m_and_hs_using_vs_access_6+0x16a>
    800043d0:	00023597          	auipc	a1,0x23
    800043d4:	ac058593          	addi	a1,a1,-1344 # 80026e90 <__func__.0+0x2d0>
    800043d8:	00023517          	auipc	a0,0x23
    800043dc:	af850513          	addi	a0,a0,-1288 # 80026ed0 <__func__.0+0x310>
    800043e0:	325200ef          	jal	80024f04 <printf>
    800043e4:	00023517          	auipc	a0,0x23
    800043e8:	af450513          	addi	a0,a0,-1292 # 80026ed8 <__func__.0+0x318>
    800043ec:	319200ef          	jal	80024f04 <printf>
    800043f0:	02900513          	li	a0,41
    800043f4:	11b1f0ef          	jal	80023d0e <putchar>
    800043f8:	4529                	li	a0,10
    800043fa:	1151f0ef          	jal	80023d0e <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800043fe:	000407b7          	lui	a5,0x40
    80004402:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004406:	4401                	li	s0,0

    TEST_END();
    80004408:	00023597          	auipc	a1,0x23
    8000440c:	a8858593          	addi	a1,a1,-1400 # 80026e90 <__func__.0+0x2d0>
    80004410:	00023517          	auipc	a0,0x23
    80004414:	b2850513          	addi	a0,a0,-1240 # 80026f38 <__func__.0+0x378>
    80004418:	2ed200ef          	jal	80024f04 <printf>
    8000441c:	4511                	li	a0,4
    8000441e:	fd8fc0ef          	jal	80000bf6 <goto_priv>
    80004422:	88afd0ef          	jal	800014ac <reset_state>
}
    80004426:	60e2                	ld	ra,24(sp)
    80004428:	8522                	mv	a0,s0
    8000442a:	6442                	ld	s0,16(sp)
    8000442c:	64a2                	ld	s1,8(sp)
    8000442e:	6105                	addi	sp,sp,32
    80004430:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004432:	00023597          	auipc	a1,0x23
    80004436:	a5e58593          	addi	a1,a1,-1442 # 80026e90 <__func__.0+0x2d0>
    8000443a:	00023517          	auipc	a0,0x23
    8000443e:	a9650513          	addi	a0,a0,-1386 # 80026ed0 <__func__.0+0x310>
    80004442:	2c3200ef          	jal	80024f04 <printf>
    80004446:	00045797          	auipc	a5,0x45
    8000444a:	bcb7c783          	lbu	a5,-1077(a5) # 80049011 <excpt+0x1>
    8000444e:	e399                	bnez	a5,80004454 <m_and_hs_using_vs_access_6+0x122>
    80004450:	06940563          	beq	s0,s1,800044ba <m_and_hs_using_vs_access_6+0x188>
    80004454:	00023517          	auipc	a0,0x23
    80004458:	a8450513          	addi	a0,a0,-1404 # 80026ed8 <__func__.0+0x318>
    8000445c:	2a9200ef          	jal	80024f04 <printf>
    80004460:	02900513          	li	a0,41
    80004464:	0ab1f0ef          	jal	80023d0e <putchar>
    80004468:	4529                	li	a0,10
    8000446a:	0a51f0ef          	jal	80023d0e <putchar>
    8000446e:	00045797          	auipc	a5,0x45
    80004472:	ba37c783          	lbu	a5,-1117(a5) # 80049011 <excpt+0x1>
    80004476:	f7c1                	bnez	a5,800043fe <m_and_hs_using_vs_access_6+0xcc>
    80004478:	011087b7          	lui	a5,0x1108
    8000447c:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80004480:	07c2                	slli	a5,a5,0x10
    80004482:	17b9                	addi	a5,a5,-18
    80004484:	f6f41de3          	bne	s0,a5,800043fe <m_and_hs_using_vs_access_6+0xcc>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80004488:	000407b7          	lui	a5,0x40
    8000448c:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004490:	4405                	li	s0,1
    TEST_END();
    80004492:	00023597          	auipc	a1,0x23
    80004496:	9ee58593          	addi	a1,a1,-1554 # 80026e80 <__func__.0+0x2c0>
    8000449a:	bf9d                	j	80004410 <m_and_hs_using_vs_access_6+0xde>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000449c:	00023597          	auipc	a1,0x23
    800044a0:	9e458593          	addi	a1,a1,-1564 # 80026e80 <__func__.0+0x2c0>
    800044a4:	00023517          	auipc	a0,0x23
    800044a8:	a2c50513          	addi	a0,a0,-1492 # 80026ed0 <__func__.0+0x310>
    800044ac:	259200ef          	jal	80024f04 <printf>
    800044b0:	00045797          	auipc	a5,0x45
    800044b4:	b617c783          	lbu	a5,-1183(a5) # 80049011 <excpt+0x1>
    800044b8:	ffd1                	bnez	a5,80004454 <m_and_hs_using_vs_access_6+0x122>
    800044ba:	4529                	li	a0,10
    800044bc:	0531f0ef          	jal	80023d0e <putchar>
    800044c0:	00045797          	auipc	a5,0x45
    800044c4:	b517c783          	lbu	a5,-1199(a5) # 80049011 <excpt+0x1>
    800044c8:	fb9d                	bnez	a5,800043fe <m_and_hs_using_vs_access_6+0xcc>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800044ca:	000407b7          	lui	a5,0x40
    800044ce:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800044d2:	4405                	li	s0,1
    TEST_END();
    800044d4:	00023597          	auipc	a1,0x23
    800044d8:	9ac58593          	addi	a1,a1,-1620 # 80026e80 <__func__.0+0x2c0>
    800044dc:	bf15                	j	80004410 <m_and_hs_using_vs_access_6+0xde>

00000000800044de <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    800044de:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800044e0:	00021597          	auipc	a1,0x21
    800044e4:	10058593          	addi	a1,a1,256 # 800255e0 <__func__.5>
    800044e8:	00023517          	auipc	a0,0x23
    800044ec:	9b850513          	addi	a0,a0,-1608 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_7(){
    800044f0:	ec06                	sd	ra,24(sp)
    800044f2:	e822                	sd	s0,16(sp)
    800044f4:	e426                	sd	s1,8(sp)
    TEST_START();
    800044f6:	20f200ef          	jal	80024f04 <printf>
    800044fa:	4529                	li	a0,10
    800044fc:	0131f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    80004500:	8e0fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004504:	b1efc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004508:	9a8fc0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    8000450c:	450d                	li	a0,3
    8000450e:	ee8fc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004512:	4509                	li	a0,2
    80004514:	e02fc0ef          	jal	80000b16 <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80004518:	0330000f          	fence	rw,rw
    8000451c:	00045497          	auipc	s1,0x45
    80004520:	af448493          	addi	s1,s1,-1292 # 80049010 <excpt>
    80004524:	4785                	li	a5,1
    80004526:	00045717          	auipc	a4,0x45
    8000452a:	b2073123          	sd	zero,-1246(a4) # 80049048 <excpt+0x38>
    8000452e:	00f49023          	sh	a5,0(s1)
    80004532:	0330000f          	fence	rw,rw
    80004536:	200037b7          	lui	a5,0x20003
    8000453a:	078e                	slli	a5,a5,0x3
    8000453c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80004540:	08200593          	li	a1,130
    80004544:	00023617          	auipc	a2,0x23
    80004548:	3e460613          	addi	a2,a2,996 # 80027928 <__func__.0+0xd68>
    8000454c:	00023517          	auipc	a0,0x23
    80004550:	96c50513          	addi	a0,a0,-1684 # 80026eb8 <__func__.0+0x2f8>
    80004554:	1b1200ef          	jal	80024f04 <printf>
    80004558:	00045797          	auipc	a5,0x45
    8000455c:	ab97c783          	lbu	a5,-1351(a5) # 80049011 <excpt+0x1>
    80004560:	00023597          	auipc	a1,0x23
    80004564:	92058593          	addi	a1,a1,-1760 # 80026e80 <__func__.0+0x2c0>
    80004568:	e789                	bnez	a5,80004572 <m_and_hs_using_vs_access_7+0x94>
    8000456a:	00023597          	auipc	a1,0x23
    8000456e:	92658593          	addi	a1,a1,-1754 # 80026e90 <__func__.0+0x2d0>
    80004572:	00023517          	auipc	a0,0x23
    80004576:	95e50513          	addi	a0,a0,-1698 # 80026ed0 <__func__.0+0x310>
    8000457a:	18b200ef          	jal	80024f04 <printf>
    8000457e:	00045797          	auipc	a5,0x45
    80004582:	a937c783          	lbu	a5,-1389(a5) # 80049011 <excpt+0x1>
    80004586:	0e078863          	beqz	a5,80004676 <m_and_hs_using_vs_access_7+0x198>
    8000458a:	4529                	li	a0,10
    8000458c:	7821f0ef          	jal	80023d0e <putchar>
    80004590:	00045417          	auipc	s0,0x45
    80004594:	a8144403          	lbu	s0,-1407(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    80004598:	0330000f          	fence	rw,rw
    8000459c:	4785                	li	a5,1
    8000459e:	00045717          	auipc	a4,0x45
    800045a2:	aa073523          	sd	zero,-1366(a4) # 80049048 <excpt+0x38>
    800045a6:	00f49023          	sh	a5,0(s1)
    800045aa:	0330000f          	fence	rw,rw
    CSRS(sstatus, SSTATUS_MXR);
    800045ae:	000807b7          	lui	a5,0x80
    800045b2:	1007a073          	csrs	sstatus,a5
    800045b6:	200037b7          	lui	a5,0x20003
    800045ba:	078e                	slli	a5,a5,0x3
    800045bc:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800045c0:	08200593          	li	a1,130
    800045c4:	00023617          	auipc	a2,0x23
    800045c8:	39460613          	addi	a2,a2,916 # 80027958 <__func__.0+0xd98>
    800045cc:	00023517          	auipc	a0,0x23
    800045d0:	8ec50513          	addi	a0,a0,-1812 # 80026eb8 <__func__.0+0x2f8>
    800045d4:	131200ef          	jal	80024f04 <printf>
    800045d8:	00045797          	auipc	a5,0x45
    800045dc:	a397c783          	lbu	a5,-1479(a5) # 80049011 <excpt+0x1>
    800045e0:	00023597          	auipc	a1,0x23
    800045e4:	8b058593          	addi	a1,a1,-1872 # 80026e90 <__func__.0+0x2d0>
    800045e8:	e789                	bnez	a5,800045f2 <m_and_hs_using_vs_access_7+0x114>
    800045ea:	00023597          	auipc	a1,0x23
    800045ee:	89658593          	addi	a1,a1,-1898 # 80026e80 <__func__.0+0x2c0>
    800045f2:	00023517          	auipc	a0,0x23
    800045f6:	8de50513          	addi	a0,a0,-1826 # 80026ed0 <__func__.0+0x310>
    800045fa:	10b200ef          	jal	80024f04 <printf>
    800045fe:	00045797          	auipc	a5,0x45
    80004602:	a137c783          	lbu	a5,-1517(a5) # 80049011 <excpt+0x1>
    80004606:	efa9                	bnez	a5,80004660 <m_and_hs_using_vs_access_7+0x182>
    80004608:	4529                	li	a0,10
    8000460a:	7041f0ef          	jal	80023d0e <putchar>
    8000460e:	c411                	beqz	s0,8000461a <m_and_hs_using_vs_access_7+0x13c>
    80004610:	00045797          	auipc	a5,0x45
    80004614:	a017c783          	lbu	a5,-1535(a5) # 80049011 <excpt+0x1>
    80004618:	cb9d                	beqz	a5,8000464e <m_and_hs_using_vs_access_7+0x170>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    8000461a:	000807b7          	lui	a5,0x80
    8000461e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004622:	4401                	li	s0,0

        TEST_END();
    80004624:	00023597          	auipc	a1,0x23
    80004628:	86c58593          	addi	a1,a1,-1940 # 80026e90 <__func__.0+0x2d0>
    8000462c:	00023517          	auipc	a0,0x23
    80004630:	90c50513          	addi	a0,a0,-1780 # 80026f38 <__func__.0+0x378>
    80004634:	0d1200ef          	jal	80024f04 <printf>
    80004638:	4511                	li	a0,4
    8000463a:	dbcfc0ef          	jal	80000bf6 <goto_priv>
    8000463e:	e6ffc0ef          	jal	800014ac <reset_state>
}
    80004642:	60e2                	ld	ra,24(sp)
    80004644:	8522                	mv	a0,s0
    80004646:	6442                	ld	s0,16(sp)
    80004648:	64a2                	ld	s1,8(sp)
    8000464a:	6105                	addi	sp,sp,32
    8000464c:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    8000464e:	000807b7          	lui	a5,0x80
    80004652:	1007b073          	csrc	sstatus,a5
        TEST_END();
    80004656:	00023597          	auipc	a1,0x23
    8000465a:	82a58593          	addi	a1,a1,-2006 # 80026e80 <__func__.0+0x2c0>
    8000465e:	b7f9                	j	8000462c <m_and_hs_using_vs_access_7+0x14e>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004660:	00023517          	auipc	a0,0x23
    80004664:	87850513          	addi	a0,a0,-1928 # 80026ed8 <__func__.0+0x318>
    80004668:	09d200ef          	jal	80024f04 <printf>
    8000466c:	02900513          	li	a0,41
    80004670:	69e1f0ef          	jal	80023d0e <putchar>
    80004674:	bf51                	j	80004608 <m_and_hs_using_vs_access_7+0x12a>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80004676:	00023517          	auipc	a0,0x23
    8000467a:	86250513          	addi	a0,a0,-1950 # 80026ed8 <__func__.0+0x318>
    8000467e:	087200ef          	jal	80024f04 <printf>
    80004682:	02900513          	li	a0,41
    80004686:	6881f0ef          	jal	80023d0e <putchar>
    8000468a:	b701                	j	8000458a <m_and_hs_using_vs_access_7+0xac>

000000008000468c <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    8000468c:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000468e:	00021597          	auipc	a1,0x21
    80004692:	f7258593          	addi	a1,a1,-142 # 80025600 <__func__.4>
    80004696:	00023517          	auipc	a0,0x23
    8000469a:	80a50513          	addi	a0,a0,-2038 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_8(){
    8000469e:	ec06                	sd	ra,24(sp)
    800046a0:	e822                	sd	s0,16(sp)
    800046a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800046a4:	061200ef          	jal	80024f04 <printf>
    800046a8:	4529                	li	a0,10
    800046aa:	6641f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    800046ae:	f33fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800046b2:	970fc0ef          	jal	80000822 <hpt_init>
    vspt_init();
    800046b6:	ffbfb0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    800046ba:	450d                	li	a0,3
    800046bc:	d3afc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800046c0:	4509                	li	a0,2
    800046c2:	c54fc0ef          	jal	80000b16 <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    800046c6:	011117b7          	lui	a5,0x1111
    800046ca:	1117879b          	addiw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    800046ce:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    800046d2:	0330000f          	fence	rw,rw
    800046d6:	00045417          	auipc	s0,0x45
    800046da:	93a40413          	addi	s0,s0,-1734 # 80049010 <excpt>
    800046de:	4785                	li	a5,1
    800046e0:	00045717          	auipc	a4,0x45
    800046e4:	96073423          	sd	zero,-1688(a4) # 80049048 <excpt+0x38>
    800046e8:	00f41023          	sh	a5,0(s0)
    800046ec:	0330000f          	fence	rw,rw
    800046f0:	001007b7          	lui	a5,0x100
    800046f4:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    800046f6:	07b2                	slli	a5,a5,0xc
    800046f8:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    800046fc:	08200593          	li	a1,130
    80004700:	00023617          	auipc	a2,0x23
    80004704:	28060613          	addi	a2,a2,640 # 80027980 <__func__.0+0xdc0>
    80004708:	00022517          	auipc	a0,0x22
    8000470c:	7b050513          	addi	a0,a0,1968 # 80026eb8 <__func__.0+0x2f8>
    80004710:	7f4200ef          	jal	80024f04 <printf>
    80004714:	00045797          	auipc	a5,0x45
    80004718:	8fd7c783          	lbu	a5,-1795(a5) # 80049011 <excpt+0x1>
    8000471c:	00022597          	auipc	a1,0x22
    80004720:	77458593          	addi	a1,a1,1908 # 80026e90 <__func__.0+0x2d0>
    80004724:	cf89                	beqz	a5,8000473e <m_and_hs_using_vs_access_8+0xb2>
    80004726:	6418                	ld	a4,8(s0)
    80004728:	47b5                	li	a5,13
    8000472a:	00022597          	auipc	a1,0x22
    8000472e:	75658593          	addi	a1,a1,1878 # 80026e80 <__func__.0+0x2c0>
    80004732:	00f70663          	beq	a4,a5,8000473e <m_and_hs_using_vs_access_8+0xb2>
    80004736:	00022597          	auipc	a1,0x22
    8000473a:	75a58593          	addi	a1,a1,1882 # 80026e90 <__func__.0+0x2d0>
    8000473e:	00022517          	auipc	a0,0x22
    80004742:	79250513          	addi	a0,a0,1938 # 80026ed0 <__func__.0+0x310>
    80004746:	7be200ef          	jal	80024f04 <printf>
    8000474a:	00045797          	auipc	a5,0x45
    8000474e:	8c77c783          	lbu	a5,-1849(a5) # 80049011 <excpt+0x1>
    80004752:	c789                	beqz	a5,8000475c <m_and_hs_using_vs_access_8+0xd0>
    80004754:	6418                	ld	a4,8(s0)
    80004756:	47b5                	li	a5,13
    80004758:	00f70c63          	beq	a4,a5,80004770 <m_and_hs_using_vs_access_8+0xe4>
    8000475c:	00022517          	auipc	a0,0x22
    80004760:	77c50513          	addi	a0,a0,1916 # 80026ed8 <__func__.0+0x318>
    80004764:	7a0200ef          	jal	80024f04 <printf>
    80004768:	02900513          	li	a0,41
    8000476c:	5a21f0ef          	jal	80023d0e <putchar>
    80004770:	4529                	li	a0,10
    80004772:	59c1f0ef          	jal	80023d0e <putchar>
    80004776:	00045797          	auipc	a5,0x45
    8000477a:	89b7c783          	lbu	a5,-1893(a5) # 80049011 <excpt+0x1>
    8000477e:	4481                	li	s1,0
    80004780:	c789                	beqz	a5,8000478a <m_and_hs_using_vs_access_8+0xfe>
    80004782:	6404                	ld	s1,8(s0)
    80004784:	14cd                	addi	s1,s1,-13
    80004786:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    8000478a:	0330000f          	fence	rw,rw
    8000478e:	4785                	li	a5,1
    80004790:	00045717          	auipc	a4,0x45
    80004794:	8a073c23          	sd	zero,-1864(a4) # 80049048 <excpt+0x38>
    80004798:	00f41023          	sh	a5,0(s0)
    8000479c:	0330000f          	fence	rw,rw
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    800047a0:	000807b7          	lui	a5,0x80
    800047a4:	2007a073          	csrs	vsstatus,a5
    800047a8:	001007b7          	lui	a5,0x100
    800047ac:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    800047ae:	07b2                	slli	a5,a5,0xc
    800047b0:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    800047b4:	08200593          	li	a1,130
    800047b8:	00023617          	auipc	a2,0x23
    800047bc:	1f860613          	addi	a2,a2,504 # 800279b0 <__func__.0+0xdf0>
    800047c0:	00022517          	auipc	a0,0x22
    800047c4:	6f850513          	addi	a0,a0,1784 # 80026eb8 <__func__.0+0x2f8>
    800047c8:	73c200ef          	jal	80024f04 <printf>
    800047cc:	00045797          	auipc	a5,0x45
    800047d0:	8457c783          	lbu	a5,-1979(a5) # 80049011 <excpt+0x1>
    800047d4:	00022597          	auipc	a1,0x22
    800047d8:	6bc58593          	addi	a1,a1,1724 # 80026e90 <__func__.0+0x2d0>
    800047dc:	e789                	bnez	a5,800047e6 <m_and_hs_using_vs_access_8+0x15a>
    800047de:	00022597          	auipc	a1,0x22
    800047e2:	6a258593          	addi	a1,a1,1698 # 80026e80 <__func__.0+0x2c0>
    800047e6:	00022517          	auipc	a0,0x22
    800047ea:	6ea50513          	addi	a0,a0,1770 # 80026ed0 <__func__.0+0x310>
    800047ee:	716200ef          	jal	80024f04 <printf>
    800047f2:	00045797          	auipc	a5,0x45
    800047f6:	81f7c783          	lbu	a5,-2017(a5) # 80049011 <excpt+0x1>
    800047fa:	e7b1                	bnez	a5,80004846 <m_and_hs_using_vs_access_8+0x1ba>
    800047fc:	4529                	li	a0,10
    800047fe:	5101f0ef          	jal	80023d0e <putchar>
    80004802:	c491                	beqz	s1,8000480e <m_and_hs_using_vs_access_8+0x182>
    80004804:	00045797          	auipc	a5,0x45
    80004808:	80d7c783          	lbu	a5,-2035(a5) # 80049011 <excpt+0x1>
    8000480c:	c79d                	beqz	a5,8000483a <m_and_hs_using_vs_access_8+0x1ae>
    8000480e:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    80004810:	00022597          	auipc	a1,0x22
    80004814:	68058593          	addi	a1,a1,1664 # 80026e90 <__func__.0+0x2d0>
    80004818:	00022517          	auipc	a0,0x22
    8000481c:	72050513          	addi	a0,a0,1824 # 80026f38 <__func__.0+0x378>
    80004820:	6e4200ef          	jal	80024f04 <printf>
    80004824:	4511                	li	a0,4
    80004826:	bd0fc0ef          	jal	80000bf6 <goto_priv>
    8000482a:	c83fc0ef          	jal	800014ac <reset_state>
}
    8000482e:	60e2                	ld	ra,24(sp)
    80004830:	8522                	mv	a0,s0
    80004832:	6442                	ld	s0,16(sp)
    80004834:	64a2                	ld	s1,8(sp)
    80004836:	6105                	addi	sp,sp,32
    80004838:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    8000483a:	4405                	li	s0,1
    TEST_END();
    8000483c:	00022597          	auipc	a1,0x22
    80004840:	64458593          	addi	a1,a1,1604 # 80026e80 <__func__.0+0x2c0>
    80004844:	bfd1                	j	80004818 <m_and_hs_using_vs_access_8+0x18c>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004846:	00022517          	auipc	a0,0x22
    8000484a:	69250513          	addi	a0,a0,1682 # 80026ed8 <__func__.0+0x318>
    8000484e:	6b6200ef          	jal	80024f04 <printf>
    80004852:	02900513          	li	a0,41
    80004856:	4b81f0ef          	jal	80023d0e <putchar>
    8000485a:	b74d                	j	800047fc <m_and_hs_using_vs_access_8+0x170>

000000008000485c <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    8000485c:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000485e:	00021597          	auipc	a1,0x21
    80004862:	dc258593          	addi	a1,a1,-574 # 80025620 <__func__.3>
    80004866:	00022517          	auipc	a0,0x22
    8000486a:	63a50513          	addi	a0,a0,1594 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_9(){
    8000486e:	ec06                	sd	ra,24(sp)
    80004870:	e822                	sd	s0,16(sp)
    80004872:	e426                	sd	s1,8(sp)
    TEST_START();
    80004874:	690200ef          	jal	80024f04 <printf>
    80004878:	4529                	li	a0,10
    8000487a:	4941f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    8000487e:	d63fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004882:	fa1fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004886:	e2bfb0ef          	jal	800006b0 <vspt_init>
    
    reset_state();
    8000488a:	c23fc0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HS);
    8000488e:	450d                	li	a0,3
    80004890:	b66fc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004894:	4509                	li	a0,2
    80004896:	a80fc0ef          	jal	80000b16 <set_prev_priv>
    hpt_init();
    8000489a:	f89fb0ef          	jal	80000822 <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    8000489e:	0330000f          	fence	rw,rw
    800048a2:	00044417          	auipc	s0,0x44
    800048a6:	76e40413          	addi	s0,s0,1902 # 80049010 <excpt>
    800048aa:	4785                	li	a5,1
    800048ac:	00044717          	auipc	a4,0x44
    800048b0:	78073e23          	sd	zero,1948(a4) # 80049048 <excpt+0x38>
    800048b4:	00f41023          	sh	a5,0(s0)
    800048b8:	0330000f          	fence	rw,rw
    asm volatile(
    800048bc:	37ab77b7          	lui	a5,0x37ab7
    800048c0:	00100737          	lui	a4,0x100
    800048c4:	078a                	slli	a5,a5,0x2
    800048c6:	06970713          	addi	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    800048ca:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800048ce:	0732                	slli	a4,a4,0xc
    800048d0:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    800048d4:	640c                	ld	a1,8(s0)
    800048d6:	00023517          	auipc	a0,0x23
    800048da:	11250513          	addi	a0,a0,274 # 800279e8 <__func__.0+0xe28>
    800048de:	626200ef          	jal	80024f04 <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    800048e2:	08200593          	li	a1,130
    800048e6:	00023617          	auipc	a2,0x23
    800048ea:	10a60613          	addi	a2,a2,266 # 800279f0 <__func__.0+0xe30>
    800048ee:	00022517          	auipc	a0,0x22
    800048f2:	5ca50513          	addi	a0,a0,1482 # 80026eb8 <__func__.0+0x2f8>
    800048f6:	60e200ef          	jal	80024f04 <printf>
    800048fa:	00044797          	auipc	a5,0x44
    800048fe:	7177c783          	lbu	a5,1815(a5) # 80049011 <excpt+0x1>
    80004902:	00022597          	auipc	a1,0x22
    80004906:	58e58593          	addi	a1,a1,1422 # 80026e90 <__func__.0+0x2d0>
    8000490a:	c789                	beqz	a5,80004914 <m_and_hs_using_vs_access_9+0xb8>
    8000490c:	6418                	ld	a4,8(s0)
    8000490e:	47dd                	li	a5,23
    80004910:	12f70d63          	beq	a4,a5,80004a4a <m_and_hs_using_vs_access_9+0x1ee>
    80004914:	00022517          	auipc	a0,0x22
    80004918:	5bc50513          	addi	a0,a0,1468 # 80026ed0 <__func__.0+0x310>
    8000491c:	5e8200ef          	jal	80024f04 <printf>
    80004920:	00044797          	auipc	a5,0x44
    80004924:	6f17c783          	lbu	a5,1777(a5) # 80049011 <excpt+0x1>
    80004928:	c789                	beqz	a5,80004932 <m_and_hs_using_vs_access_9+0xd6>
    8000492a:	6418                	ld	a4,8(s0)
    8000492c:	47dd                	li	a5,23
    8000492e:	0ef70b63          	beq	a4,a5,80004a24 <m_and_hs_using_vs_access_9+0x1c8>
    80004932:	00022517          	auipc	a0,0x22
    80004936:	5a650513          	addi	a0,a0,1446 # 80026ed8 <__func__.0+0x318>
    8000493a:	5ca200ef          	jal	80024f04 <printf>
    8000493e:	02900513          	li	a0,41
    80004942:	3cc1f0ef          	jal	80023d0e <putchar>
    80004946:	4529                	li	a0,10
    80004948:	3c61f0ef          	jal	80023d0e <putchar>
    8000494c:	00044797          	auipc	a5,0x44
    80004950:	6c57c783          	lbu	a5,1733(a5) # 80049011 <excpt+0x1>
    80004954:	4481                	li	s1,0
    80004956:	c789                	beqz	a5,80004960 <m_and_hs_using_vs_access_9+0x104>
    80004958:	6418                	ld	a4,8(s0)
    8000495a:	47dd                	li	a5,23
    8000495c:	10f70763          	beq	a4,a5,80004a6a <m_and_hs_using_vs_access_9+0x20e>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    80004960:	0330000f          	fence	rw,rw
    80004964:	4785                	li	a5,1
    80004966:	00044717          	auipc	a4,0x44
    8000496a:	6e073123          	sd	zero,1762(a4) # 80049048 <excpt+0x38>
    8000496e:	00f41023          	sh	a5,0(s0)
    80004972:	0330000f          	fence	rw,rw
    asm volatile(
    80004976:	001007b7          	lui	a5,0x100
    8000497a:	06978793          	addi	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    8000497e:	07b2                	slli	a5,a5,0xc
    80004980:	6007c7f3          	.insn	4, 0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80004984:	640c                	ld	a1,8(s0)
    80004986:	00023517          	auipc	a0,0x23
    8000498a:	06250513          	addi	a0,a0,98 # 800279e8 <__func__.0+0xe28>
    8000498e:	576200ef          	jal	80024f04 <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004992:	08200593          	li	a1,130
    80004996:	00023617          	auipc	a2,0x23
    8000499a:	09a60613          	addi	a2,a2,154 # 80027a30 <__func__.0+0xe70>
    8000499e:	00022517          	auipc	a0,0x22
    800049a2:	51a50513          	addi	a0,a0,1306 # 80026eb8 <__func__.0+0x2f8>
    800049a6:	55e200ef          	jal	80024f04 <printf>
    800049aa:	00044797          	auipc	a5,0x44
    800049ae:	6677c783          	lbu	a5,1639(a5) # 80049011 <excpt+0x1>
    800049b2:	00022597          	auipc	a1,0x22
    800049b6:	4de58593          	addi	a1,a1,1246 # 80026e90 <__func__.0+0x2d0>
    800049ba:	e789                	bnez	a5,800049c4 <m_and_hs_using_vs_access_9+0x168>
    800049bc:	00022597          	auipc	a1,0x22
    800049c0:	4c458593          	addi	a1,a1,1220 # 80026e80 <__func__.0+0x2c0>
    800049c4:	00022517          	auipc	a0,0x22
    800049c8:	50c50513          	addi	a0,a0,1292 # 80026ed0 <__func__.0+0x310>
    800049cc:	538200ef          	jal	80024f04 <printf>
    800049d0:	00044797          	auipc	a5,0x44
    800049d4:	6417c783          	lbu	a5,1601(a5) # 80049011 <excpt+0x1>
    800049d8:	efb1                	bnez	a5,80004a34 <m_and_hs_using_vs_access_9+0x1d8>
    800049da:	4529                	li	a0,10
    800049dc:	3321f0ef          	jal	80023d0e <putchar>
    800049e0:	c491                	beqz	s1,800049ec <m_and_hs_using_vs_access_9+0x190>
    800049e2:	00044797          	auipc	a5,0x44
    800049e6:	62f7c783          	lbu	a5,1583(a5) # 80049011 <excpt+0x1>
    800049ea:	c79d                	beqz	a5,80004a18 <m_and_hs_using_vs_access_9+0x1bc>
    800049ec:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    800049ee:	00022597          	auipc	a1,0x22
    800049f2:	4a258593          	addi	a1,a1,1186 # 80026e90 <__func__.0+0x2d0>
    800049f6:	00022517          	auipc	a0,0x22
    800049fa:	54250513          	addi	a0,a0,1346 # 80026f38 <__func__.0+0x378>
    800049fe:	506200ef          	jal	80024f04 <printf>
    80004a02:	4511                	li	a0,4
    80004a04:	9f2fc0ef          	jal	80000bf6 <goto_priv>
    80004a08:	aa5fc0ef          	jal	800014ac <reset_state>
}
    80004a0c:	60e2                	ld	ra,24(sp)
    80004a0e:	8522                	mv	a0,s0
    80004a10:	6442                	ld	s0,16(sp)
    80004a12:	64a2                	ld	s1,8(sp)
    80004a14:	6105                	addi	sp,sp,32
    80004a16:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004a18:	4405                	li	s0,1
    TEST_END();
    80004a1a:	00022597          	auipc	a1,0x22
    80004a1e:	46658593          	addi	a1,a1,1126 # 80026e80 <__func__.0+0x2c0>
    80004a22:	bfd1                	j	800049f6 <m_and_hs_using_vs_access_9+0x19a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004a24:	7418                	ld	a4,40(s0)
    80004a26:	4001a7b7          	lui	a5,0x4001a
    80004a2a:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004a2e:	f0f712e3          	bne	a4,a5,80004932 <m_and_hs_using_vs_access_9+0xd6>
    80004a32:	bf11                	j	80004946 <m_and_hs_using_vs_access_9+0xea>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004a34:	00022517          	auipc	a0,0x22
    80004a38:	4a450513          	addi	a0,a0,1188 # 80026ed8 <__func__.0+0x318>
    80004a3c:	4c8200ef          	jal	80024f04 <printf>
    80004a40:	02900513          	li	a0,41
    80004a44:	2ca1f0ef          	jal	80023d0e <putchar>
    80004a48:	bf49                	j	800049da <m_and_hs_using_vs_access_9+0x17e>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004a4a:	7418                	ld	a4,40(s0)
    80004a4c:	4001a7b7          	lui	a5,0x4001a
    80004a50:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004a54:	00022597          	auipc	a1,0x22
    80004a58:	42c58593          	addi	a1,a1,1068 # 80026e80 <__func__.0+0x2c0>
    80004a5c:	eaf70ce3          	beq	a4,a5,80004914 <m_and_hs_using_vs_access_9+0xb8>
    80004a60:	00022597          	auipc	a1,0x22
    80004a64:	43058593          	addi	a1,a1,1072 # 80026e90 <__func__.0+0x2d0>
    80004a68:	b575                	j	80004914 <m_and_hs_using_vs_access_9+0xb8>
    80004a6a:	7404                	ld	s1,40(s0)
    80004a6c:	bffe67b7          	lui	a5,0xbffe6
    80004a70:	c0078793          	addi	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    80004a74:	94be                	add	s1,s1,a5
    80004a76:	0014b493          	seqz	s1,s1
    80004a7a:	b5dd                	j	80004960 <m_and_hs_using_vs_access_9+0x104>

0000000080004a7c <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    80004a7c:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004a7e:	00021597          	auipc	a1,0x21
    80004a82:	bc258593          	addi	a1,a1,-1086 # 80025640 <__func__.2>
    80004a86:	00022517          	auipc	a0,0x22
    80004a8a:	41a50513          	addi	a0,a0,1050 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_10(){
    80004a8e:	ec06                	sd	ra,24(sp)
    80004a90:	e822                	sd	s0,16(sp)
    80004a92:	e426                	sd	s1,8(sp)
    TEST_START();
    80004a94:	470200ef          	jal	80024f04 <printf>
    80004a98:	4529                	li	a0,10
    80004a9a:	2741f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    80004a9e:	b43fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004aa2:	d81fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004aa6:	c0bfb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80004aaa:	450d                	li	a0,3
    80004aac:	94afc0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004ab0:	4509                	li	a0,2
    80004ab2:	864fc0ef          	jal	80000b16 <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004ab6:	0330000f          	fence	rw,rw
    80004aba:	00044417          	auipc	s0,0x44
    80004abe:	55640413          	addi	s0,s0,1366 # 80049010 <excpt>
    80004ac2:	4785                	li	a5,1
    80004ac4:	00044717          	auipc	a4,0x44
    80004ac8:	58073223          	sd	zero,1412(a4) # 80049048 <excpt+0x38>
    80004acc:	00f41023          	sh	a5,0(s0)
    80004ad0:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x911);
    80004ad4:	6785                	lui	a5,0x1
    80004ad6:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004ada:	14079073          	csrw	sscratch,a5
    80004ade:	000807b7          	lui	a5,0x80
    80004ae2:	07a5                	addi	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004ae4:	07b6                	slli	a5,a5,0xd
    80004ae6:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004aea:	08200593          	li	a1,130
    80004aee:	00023617          	auipc	a2,0x23
    80004af2:	f6a60613          	addi	a2,a2,-150 # 80027a58 <__func__.0+0xe98>
    80004af6:	00022517          	auipc	a0,0x22
    80004afa:	3c250513          	addi	a0,a0,962 # 80026eb8 <__func__.0+0x2f8>
    80004afe:	406200ef          	jal	80024f04 <printf>
    80004b02:	00044797          	auipc	a5,0x44
    80004b06:	50f7c783          	lbu	a5,1295(a5) # 80049011 <excpt+0x1>
    80004b0a:	00022597          	auipc	a1,0x22
    80004b0e:	37658593          	addi	a1,a1,886 # 80026e80 <__func__.0+0x2c0>
    80004b12:	c789                	beqz	a5,80004b1c <m_and_hs_using_vs_access_10+0xa0>
    80004b14:	00022597          	auipc	a1,0x22
    80004b18:	37c58593          	addi	a1,a1,892 # 80026e90 <__func__.0+0x2d0>
    80004b1c:	00022517          	auipc	a0,0x22
    80004b20:	3b450513          	addi	a0,a0,948 # 80026ed0 <__func__.0+0x310>
    80004b24:	3e0200ef          	jal	80024f04 <printf>
    80004b28:	00044797          	auipc	a5,0x44
    80004b2c:	4e97c783          	lbu	a5,1257(a5) # 80049011 <excpt+0x1>
    80004b30:	10079b63          	bnez	a5,80004c46 <m_and_hs_using_vs_access_10+0x1ca>
    80004b34:	4529                	li	a0,10
    80004b36:	1d81f0ef          	jal	80023d0e <putchar>
    80004b3a:	00044497          	auipc	s1,0x44
    80004b3e:	4d74c483          	lbu	s1,1239(s1) # 80049011 <excpt+0x1>
        excpt.triggered == false
    );
    
    vspt_init();
    80004b42:	b6ffb0ef          	jal	800006b0 <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004b46:	0330000f          	fence	rw,rw
    80004b4a:	4785                	li	a5,1
    80004b4c:	00044717          	auipc	a4,0x44
    80004b50:	4e073e23          	sd	zero,1276(a4) # 80049048 <excpt+0x38>
    80004b54:	00f41023          	sh	a5,0(s0)
    80004b58:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x911);      
    80004b5c:	6785                	lui	a5,0x1
    80004b5e:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004b62:	14079073          	csrw	sscratch,a5
    asm volatile(
    80004b66:	37ab77b7          	lui	a5,0x37ab7
    80004b6a:	00080737          	lui	a4,0x80
    80004b6e:	078a                	slli	a5,a5,0x2
    80004b70:	0725                	addi	a4,a4,9 # 80009 <_test_table_size+0x80008>
    80004b72:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004b76:	0736                	slli	a4,a4,0xd
    80004b78:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004b7c:	08200593          	li	a1,130
    80004b80:	00023617          	auipc	a2,0x23
    80004b84:	f0860613          	addi	a2,a2,-248 # 80027a88 <__func__.0+0xec8>
    80004b88:	00022517          	auipc	a0,0x22
    80004b8c:	33050513          	addi	a0,a0,816 # 80026eb8 <__func__.0+0x2f8>
    80004b90:	374200ef          	jal	80024f04 <printf>
    80004b94:	00044797          	auipc	a5,0x44
    80004b98:	47d7c783          	lbu	a5,1149(a5) # 80049011 <excpt+0x1>
    80004b9c:	00022597          	auipc	a1,0x22
    80004ba0:	2f458593          	addi	a1,a1,756 # 80026e90 <__func__.0+0x2d0>
    80004ba4:	cf89                	beqz	a5,80004bbe <m_and_hs_using_vs_access_10+0x142>
    80004ba6:	6418                	ld	a4,8(s0)
    80004ba8:	47bd                	li	a5,15
    80004baa:	00022597          	auipc	a1,0x22
    80004bae:	2d658593          	addi	a1,a1,726 # 80026e80 <__func__.0+0x2c0>
    80004bb2:	00f70663          	beq	a4,a5,80004bbe <m_and_hs_using_vs_access_10+0x142>
    80004bb6:	00022597          	auipc	a1,0x22
    80004bba:	2da58593          	addi	a1,a1,730 # 80026e90 <__func__.0+0x2d0>
    80004bbe:	00022517          	auipc	a0,0x22
    80004bc2:	31250513          	addi	a0,a0,786 # 80026ed0 <__func__.0+0x310>
    80004bc6:	33e200ef          	jal	80024f04 <printf>
    80004bca:	00044797          	auipc	a5,0x44
    80004bce:	4477c783          	lbu	a5,1095(a5) # 80049011 <excpt+0x1>
    80004bd2:	c789                	beqz	a5,80004bdc <m_and_hs_using_vs_access_10+0x160>
    80004bd4:	6418                	ld	a4,8(s0)
    80004bd6:	47bd                	li	a5,15
    80004bd8:	00f70c63          	beq	a4,a5,80004bf0 <m_and_hs_using_vs_access_10+0x174>
    80004bdc:	00022517          	auipc	a0,0x22
    80004be0:	2fc50513          	addi	a0,a0,764 # 80026ed8 <__func__.0+0x318>
    80004be4:	320200ef          	jal	80024f04 <printf>
    80004be8:	02900513          	li	a0,41
    80004bec:	1221f0ef          	jal	80023d0e <putchar>
    80004bf0:	4529                	li	a0,10
    80004bf2:	11c1f0ef          	jal	80023d0e <putchar>
    80004bf6:	e095                	bnez	s1,80004c1a <m_and_hs_using_vs_access_10+0x19e>
    80004bf8:	00044497          	auipc	s1,0x44
    80004bfc:	4194c483          	lbu	s1,1049(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80004c00:	00022597          	auipc	a1,0x22
    80004c04:	29058593          	addi	a1,a1,656 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004c08:	cc91                	beqz	s1,80004c24 <m_and_hs_using_vs_access_10+0x1a8>
    80004c0a:	6418                	ld	a4,8(s0)
    80004c0c:	47bd                	li	a5,15
    TEST_END();
    80004c0e:	00022597          	auipc	a1,0x22
    80004c12:	27258593          	addi	a1,a1,626 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004c16:	00f70763          	beq	a4,a5,80004c24 <m_and_hs_using_vs_access_10+0x1a8>
    80004c1a:	4481                	li	s1,0
    TEST_END();
    80004c1c:	00022597          	auipc	a1,0x22
    80004c20:	27458593          	addi	a1,a1,628 # 80026e90 <__func__.0+0x2d0>
    80004c24:	00022517          	auipc	a0,0x22
    80004c28:	31450513          	addi	a0,a0,788 # 80026f38 <__func__.0+0x378>
    80004c2c:	2d8200ef          	jal	80024f04 <printf>
    80004c30:	4511                	li	a0,4
    80004c32:	fc5fb0ef          	jal	80000bf6 <goto_priv>
    80004c36:	877fc0ef          	jal	800014ac <reset_state>
}
    80004c3a:	60e2                	ld	ra,24(sp)
    80004c3c:	6442                	ld	s0,16(sp)
    80004c3e:	8526                	mv	a0,s1
    80004c40:	64a2                	ld	s1,8(sp)
    80004c42:	6105                	addi	sp,sp,32
    80004c44:	8082                	ret
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004c46:	00022517          	auipc	a0,0x22
    80004c4a:	29250513          	addi	a0,a0,658 # 80026ed8 <__func__.0+0x318>
    80004c4e:	2b6200ef          	jal	80024f04 <printf>
    80004c52:	02900513          	li	a0,41
    80004c56:	0b81f0ef          	jal	80023d0e <putchar>
    80004c5a:	bde9                	j	80004b34 <m_and_hs_using_vs_access_10+0xb8>

0000000080004c5c <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004c5c:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004c5e:	00021597          	auipc	a1,0x21
    80004c62:	a0258593          	addi	a1,a1,-1534 # 80025660 <__func__.1>
    80004c66:	00022517          	auipc	a0,0x22
    80004c6a:	23a50513          	addi	a0,a0,570 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_11(){
    80004c6e:	ec06                	sd	ra,24(sp)
    80004c70:	e822                	sd	s0,16(sp)
    80004c72:	e426                	sd	s1,8(sp)
    TEST_START();
    80004c74:	290200ef          	jal	80024f04 <printf>
    80004c78:	4529                	li	a0,10
    80004c7a:	0941f0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    80004c7e:	963fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004c82:	ba1fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004c86:	a2bfb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80004c8a:	450d                	li	a0,3
    80004c8c:	f6bfb0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004c90:	4509                	li	a0,2
    80004c92:	e85fb0ef          	jal	80000b16 <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    80004c96:	0330000f          	fence	rw,rw
    80004c9a:	00044417          	auipc	s0,0x44
    80004c9e:	37640413          	addi	s0,s0,886 # 80049010 <excpt>
    80004ca2:	4785                	li	a5,1
    80004ca4:	00044717          	auipc	a4,0x44
    80004ca8:	3a073223          	sd	zero,932(a4) # 80049048 <excpt+0x38>
    80004cac:	00f41023          	sh	a5,0(s0)
    80004cb0:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x112);
    80004cb4:	11200793          	li	a5,274
    80004cb8:	14079073          	csrw	sscratch,a5
    80004cbc:	37ab77b7          	lui	a5,0x37ab7
    80004cc0:	00080737          	lui	a4,0x80
    80004cc4:	078a                	slli	a5,a5,0x2
    80004cc6:	03370713          	addi	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004cca:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004cce:	0736                	slli	a4,a4,0xd
    80004cd0:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004cd4:	08200593          	li	a1,130
    80004cd8:	00023617          	auipc	a2,0x23
    80004cdc:	de860613          	addi	a2,a2,-536 # 80027ac0 <__func__.0+0xf00>
    80004ce0:	00022517          	auipc	a0,0x22
    80004ce4:	1d850513          	addi	a0,a0,472 # 80026eb8 <__func__.0+0x2f8>
    80004ce8:	21c200ef          	jal	80024f04 <printf>
    80004cec:	00044797          	auipc	a5,0x44
    80004cf0:	3257c783          	lbu	a5,805(a5) # 80049011 <excpt+0x1>
    80004cf4:	00022597          	auipc	a1,0x22
    80004cf8:	19c58593          	addi	a1,a1,412 # 80026e90 <__func__.0+0x2d0>
    80004cfc:	cf89                	beqz	a5,80004d16 <m_and_hs_using_vs_access_11+0xba>
    80004cfe:	6418                	ld	a4,8(s0)
    80004d00:	47dd                	li	a5,23
    80004d02:	00022597          	auipc	a1,0x22
    80004d06:	17e58593          	addi	a1,a1,382 # 80026e80 <__func__.0+0x2c0>
    80004d0a:	00f70663          	beq	a4,a5,80004d16 <m_and_hs_using_vs_access_11+0xba>
    80004d0e:	00022597          	auipc	a1,0x22
    80004d12:	18258593          	addi	a1,a1,386 # 80026e90 <__func__.0+0x2d0>
    80004d16:	00022517          	auipc	a0,0x22
    80004d1a:	1ba50513          	addi	a0,a0,442 # 80026ed0 <__func__.0+0x310>
    80004d1e:	1e6200ef          	jal	80024f04 <printf>
    80004d22:	00044797          	auipc	a5,0x44
    80004d26:	2ef7c783          	lbu	a5,751(a5) # 80049011 <excpt+0x1>
    80004d2a:	c789                	beqz	a5,80004d34 <m_and_hs_using_vs_access_11+0xd8>
    80004d2c:	6418                	ld	a4,8(s0)
    80004d2e:	47dd                	li	a5,23
    80004d30:	00f70c63          	beq	a4,a5,80004d48 <m_and_hs_using_vs_access_11+0xec>
    80004d34:	00022517          	auipc	a0,0x22
    80004d38:	1a450513          	addi	a0,a0,420 # 80026ed8 <__func__.0+0x318>
    80004d3c:	1c8200ef          	jal	80024f04 <printf>
    80004d40:	02900513          	li	a0,41
    80004d44:	7cb1e0ef          	jal	80023d0e <putchar>
    80004d48:	4529                	li	a0,10
    80004d4a:	7c51e0ef          	jal	80023d0e <putchar>
    80004d4e:	00044497          	auipc	s1,0x44
    80004d52:	2c34c483          	lbu	s1,707(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004d56:	00022597          	auipc	a1,0x22
    80004d5a:	13a58593          	addi	a1,a1,314 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004d5e:	cc91                	beqz	s1,80004d7a <m_and_hs_using_vs_access_11+0x11e>
    80004d60:	6418                	ld	a4,8(s0)
    80004d62:	47dd                	li	a5,23
    TEST_END();
    80004d64:	00022597          	auipc	a1,0x22
    80004d68:	11c58593          	addi	a1,a1,284 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004d6c:	00f70763          	beq	a4,a5,80004d7a <m_and_hs_using_vs_access_11+0x11e>
    80004d70:	4481                	li	s1,0
    TEST_END();
    80004d72:	00022597          	auipc	a1,0x22
    80004d76:	11e58593          	addi	a1,a1,286 # 80026e90 <__func__.0+0x2d0>
    80004d7a:	00022517          	auipc	a0,0x22
    80004d7e:	1be50513          	addi	a0,a0,446 # 80026f38 <__func__.0+0x378>
    80004d82:	182200ef          	jal	80024f04 <printf>
    80004d86:	4511                	li	a0,4
    80004d88:	e6ffb0ef          	jal	80000bf6 <goto_priv>
    80004d8c:	f20fc0ef          	jal	800014ac <reset_state>
}
    80004d90:	60e2                	ld	ra,24(sp)
    80004d92:	6442                	ld	s0,16(sp)
    80004d94:	8526                	mv	a0,s1
    80004d96:	64a2                	ld	s1,8(sp)
    80004d98:	6105                	addi	sp,sp,32
    80004d9a:	8082                	ret

0000000080004d9c <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    80004d9c:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004d9e:	00021597          	auipc	a1,0x21
    80004da2:	8e258593          	addi	a1,a1,-1822 # 80025680 <__func__.0>
    80004da6:	00022517          	auipc	a0,0x22
    80004daa:	0fa50513          	addi	a0,a0,250 # 80026ea0 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_12(){
    80004dae:	e406                	sd	ra,8(sp)
    80004db0:	e022                	sd	s0,0(sp)
    TEST_START();
    80004db2:	152200ef          	jal	80024f04 <printf>
    80004db6:	4529                	li	a0,10
    80004db8:	7571e0ef          	jal	80023d0e <putchar>
    
    hspt_init();
    80004dbc:	825fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004dc0:	a63fb0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80004dc4:	8edfb0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_HS);
    80004dc8:	450d                	li	a0,3
    80004dca:	e2dfb0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80004dce:	4509                	li	a0,2
    80004dd0:	d47fb0ef          	jal	80000b16 <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80004dd4:	0330000f          	fence	rw,rw
    80004dd8:	4785                	li	a5,1
    80004dda:	00044717          	auipc	a4,0x44
    80004dde:	26073723          	sd	zero,622(a4) # 80049048 <excpt+0x38>
    80004de2:	00044717          	auipc	a4,0x44
    80004de6:	22f71723          	sh	a5,558(a4) # 80049010 <excpt>
    80004dea:	0330000f          	fence	rw,rw
    CSRW(sscratch, 0x112);
    80004dee:	11200793          	li	a5,274
    80004df2:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    80004df6:	08200593          	li	a1,130
    80004dfa:	00023617          	auipc	a2,0x23
    80004dfe:	d0660613          	addi	a2,a2,-762 # 80027b00 <__func__.0+0xf40>
    80004e02:	00022517          	auipc	a0,0x22
    80004e06:	0b650513          	addi	a0,a0,182 # 80026eb8 <__func__.0+0x2f8>
    80004e0a:	0fa200ef          	jal	80024f04 <printf>
    80004e0e:	00044797          	auipc	a5,0x44
    80004e12:	2037c783          	lbu	a5,515(a5) # 80049011 <excpt+0x1>
    80004e16:	00022597          	auipc	a1,0x22
    80004e1a:	06a58593          	addi	a1,a1,106 # 80026e80 <__func__.0+0x2c0>
    80004e1e:	c789                	beqz	a5,80004e28 <m_and_hs_using_vs_access_12+0x8c>
    80004e20:	00022597          	auipc	a1,0x22
    80004e24:	07058593          	addi	a1,a1,112 # 80026e90 <__func__.0+0x2d0>
    80004e28:	00022517          	auipc	a0,0x22
    80004e2c:	0a850513          	addi	a0,a0,168 # 80026ed0 <__func__.0+0x310>
    80004e30:	0d4200ef          	jal	80024f04 <printf>
    80004e34:	00044797          	auipc	a5,0x44
    80004e38:	1dd7c783          	lbu	a5,477(a5) # 80049011 <excpt+0x1>
    80004e3c:	e7a1                	bnez	a5,80004e84 <m_and_hs_using_vs_access_12+0xe8>
    80004e3e:	4529                	li	a0,10
    80004e40:	6cf1e0ef          	jal	80023d0e <putchar>
    80004e44:	00044797          	auipc	a5,0x44
    80004e48:	1cd7c783          	lbu	a5,461(a5) # 80049011 <excpt+0x1>
    80004e4c:	e795                	bnez	a5,80004e78 <m_and_hs_using_vs_access_12+0xdc>
    80004e4e:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80004e50:	00022597          	auipc	a1,0x22
    80004e54:	03058593          	addi	a1,a1,48 # 80026e80 <__func__.0+0x2c0>
    80004e58:	00022517          	auipc	a0,0x22
    80004e5c:	0e050513          	addi	a0,a0,224 # 80026f38 <__func__.0+0x378>
    80004e60:	0a4200ef          	jal	80024f04 <printf>
    80004e64:	4511                	li	a0,4
    80004e66:	d91fb0ef          	jal	80000bf6 <goto_priv>
    80004e6a:	e42fc0ef          	jal	800014ac <reset_state>

}
    80004e6e:	60a2                	ld	ra,8(sp)
    80004e70:	8522                	mv	a0,s0
    80004e72:	6402                	ld	s0,0(sp)
    80004e74:	0141                	addi	sp,sp,16
    80004e76:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004e78:	4401                	li	s0,0
    TEST_END();
    80004e7a:	00022597          	auipc	a1,0x22
    80004e7e:	01658593          	addi	a1,a1,22 # 80026e90 <__func__.0+0x2d0>
    80004e82:	bfd9                	j	80004e58 <m_and_hs_using_vs_access_12+0xbc>
    TEST_ASSERT("CSRW successfull int any condition",
    80004e84:	00022517          	auipc	a0,0x22
    80004e88:	05450513          	addi	a0,a0,84 # 80026ed8 <__func__.0+0x318>
    80004e8c:	078200ef          	jal	80024f04 <printf>
    80004e90:	02900513          	li	a0,41
    80004e94:	67b1e0ef          	jal	80023d0e <putchar>
    80004e98:	b75d                	j	80004e3e <m_and_hs_using_vs_access_12+0xa2>

0000000080004e9a <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    80004e9a:	1101                	addi	sp,sp,-32

    TEST_START();
    80004e9c:	00021597          	auipc	a1,0x21
    80004ea0:	80458593          	addi	a1,a1,-2044 # 800256a0 <__func__.11>
    80004ea4:	00022517          	auipc	a0,0x22
    80004ea8:	ffc50513          	addi	a0,a0,-4 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_1() {
    80004eac:	ec06                	sd	ra,24(sp)
    80004eae:	e822                	sd	s0,16(sp)
    80004eb0:	e426                	sd	s1,8(sp)
    TEST_START();
    80004eb2:	052200ef          	jal	80024f04 <printf>
    80004eb6:	4529                	li	a0,10
    80004eb8:	6571e0ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_VS);
    80004ebc:	4509                	li	a0,2
    80004ebe:	d39fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004ec2:	0330000f          	fence	rw,rw
    80004ec6:	00044417          	auipc	s0,0x44
    80004eca:	14a40413          	addi	s0,s0,330 # 80049010 <excpt>
    80004ece:	4785                	li	a5,1
    80004ed0:	00044717          	auipc	a4,0x44
    80004ed4:	16073c23          	sd	zero,376(a4) # 80049048 <excpt+0x38>
    80004ed8:	00f41023          	sh	a5,0(s0)
    80004edc:	0330000f          	fence	rw,rw
    asm volatile(
    80004ee0:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004ee4:	08200593          	li	a1,130
    80004ee8:	00023617          	auipc	a2,0x23
    80004eec:	c4060613          	addi	a2,a2,-960 # 80027b28 <__func__.0+0xf68>
    80004ef0:	00022517          	auipc	a0,0x22
    80004ef4:	fc850513          	addi	a0,a0,-56 # 80026eb8 <__func__.0+0x2f8>
    80004ef8:	00c200ef          	jal	80024f04 <printf>
    80004efc:	00044797          	auipc	a5,0x44
    80004f00:	1157c783          	lbu	a5,277(a5) # 80049011 <excpt+0x1>
    80004f04:	00022597          	auipc	a1,0x22
    80004f08:	f8c58593          	addi	a1,a1,-116 # 80026e90 <__func__.0+0x2d0>
    80004f0c:	cf89                	beqz	a5,80004f26 <virtual_instruction_1+0x8c>
    80004f0e:	6418                	ld	a4,8(s0)
    80004f10:	47d9                	li	a5,22
    80004f12:	00022597          	auipc	a1,0x22
    80004f16:	f6e58593          	addi	a1,a1,-146 # 80026e80 <__func__.0+0x2c0>
    80004f1a:	00f70663          	beq	a4,a5,80004f26 <virtual_instruction_1+0x8c>
    80004f1e:	00022597          	auipc	a1,0x22
    80004f22:	f7258593          	addi	a1,a1,-142 # 80026e90 <__func__.0+0x2d0>
    80004f26:	00022517          	auipc	a0,0x22
    80004f2a:	faa50513          	addi	a0,a0,-86 # 80026ed0 <__func__.0+0x310>
    80004f2e:	7d71f0ef          	jal	80024f04 <printf>
    80004f32:	00044797          	auipc	a5,0x44
    80004f36:	0df7c783          	lbu	a5,223(a5) # 80049011 <excpt+0x1>
    80004f3a:	c789                	beqz	a5,80004f44 <virtual_instruction_1+0xaa>
    80004f3c:	6418                	ld	a4,8(s0)
    80004f3e:	47d9                	li	a5,22
    80004f40:	00f70c63          	beq	a4,a5,80004f58 <virtual_instruction_1+0xbe>
    80004f44:	00022517          	auipc	a0,0x22
    80004f48:	f9450513          	addi	a0,a0,-108 # 80026ed8 <__func__.0+0x318>
    80004f4c:	7b91f0ef          	jal	80024f04 <printf>
    80004f50:	02900513          	li	a0,41
    80004f54:	5bb1e0ef          	jal	80023d0e <putchar>
    80004f58:	4529                	li	a0,10
    80004f5a:	5b51e0ef          	jal	80023d0e <putchar>
    80004f5e:	00044797          	auipc	a5,0x44
    80004f62:	0b37c783          	lbu	a5,179(a5) # 80049011 <excpt+0x1>
    80004f66:	4481                	li	s1,0
    80004f68:	c789                	beqz	a5,80004f72 <virtual_instruction_1+0xd8>
    80004f6a:	6404                	ld	s1,8(s0)
    80004f6c:	14a9                	addi	s1,s1,-22
    80004f6e:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80004f72:	4509                	li	a0,2
    80004f74:	c83fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80004f78:	0330000f          	fence	rw,rw
    80004f7c:	4785                	li	a5,1
    80004f7e:	00044717          	auipc	a4,0x44
    80004f82:	0c073523          	sd	zero,202(a4) # 80049048 <excpt+0x38>
    80004f86:	00f41023          	sh	a5,0(s0)
    80004f8a:	0330000f          	fence	rw,rw
    asm volatile(
    80004f8e:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004f92:	08200593          	li	a1,130
    80004f96:	00023617          	auipc	a2,0x23
    80004f9a:	bd260613          	addi	a2,a2,-1070 # 80027b68 <__func__.0+0xfa8>
    80004f9e:	00022517          	auipc	a0,0x22
    80004fa2:	f1a50513          	addi	a0,a0,-230 # 80026eb8 <__func__.0+0x2f8>
    80004fa6:	75f1f0ef          	jal	80024f04 <printf>
    80004faa:	00044797          	auipc	a5,0x44
    80004fae:	0677c783          	lbu	a5,103(a5) # 80049011 <excpt+0x1>
    80004fb2:	00022597          	auipc	a1,0x22
    80004fb6:	ede58593          	addi	a1,a1,-290 # 80026e90 <__func__.0+0x2d0>
    80004fba:	cf89                	beqz	a5,80004fd4 <virtual_instruction_1+0x13a>
    80004fbc:	6418                	ld	a4,8(s0)
    80004fbe:	47d9                	li	a5,22
    80004fc0:	00022597          	auipc	a1,0x22
    80004fc4:	ec058593          	addi	a1,a1,-320 # 80026e80 <__func__.0+0x2c0>
    80004fc8:	00f70663          	beq	a4,a5,80004fd4 <virtual_instruction_1+0x13a>
    80004fcc:	00022597          	auipc	a1,0x22
    80004fd0:	ec458593          	addi	a1,a1,-316 # 80026e90 <__func__.0+0x2d0>
    80004fd4:	00022517          	auipc	a0,0x22
    80004fd8:	efc50513          	addi	a0,a0,-260 # 80026ed0 <__func__.0+0x310>
    80004fdc:	7291f0ef          	jal	80024f04 <printf>
    80004fe0:	00044797          	auipc	a5,0x44
    80004fe4:	0317c783          	lbu	a5,49(a5) # 80049011 <excpt+0x1>
    80004fe8:	c789                	beqz	a5,80004ff2 <virtual_instruction_1+0x158>
    80004fea:	6418                	ld	a4,8(s0)
    80004fec:	47d9                	li	a5,22
    80004fee:	00f70c63          	beq	a4,a5,80005006 <virtual_instruction_1+0x16c>
    80004ff2:	00022517          	auipc	a0,0x22
    80004ff6:	ee650513          	addi	a0,a0,-282 # 80026ed8 <__func__.0+0x318>
    80004ffa:	70b1f0ef          	jal	80024f04 <printf>
    80004ffe:	02900513          	li	a0,41
    80005002:	50d1e0ef          	jal	80023d0e <putchar>
    80005006:	4529                	li	a0,10
    80005008:	5071e0ef          	jal	80023d0e <putchar>
    8000500c:	c881                	beqz	s1,8000501c <virtual_instruction_1+0x182>
    8000500e:	00044797          	auipc	a5,0x44
    80005012:	0037c783          	lbu	a5,3(a5) # 80049011 <excpt+0x1>
    80005016:	4481                	li	s1,0
    80005018:	1a079863          	bnez	a5,800051c8 <virtual_instruction_1+0x32e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    8000501c:	4511                	li	a0,4
    8000501e:	bd9fb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80005022:	001007b7          	lui	a5,0x100
    80005026:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    8000502a:	4509                	li	a0,2
    8000502c:	bcbfb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005030:	0330000f          	fence	rw,rw
    80005034:	4785                	li	a5,1
    80005036:	00044717          	auipc	a4,0x44
    8000503a:	00073923          	sd	zero,18(a4) # 80049048 <excpt+0x38>
    8000503e:	00f41023          	sh	a5,0(s0)
    80005042:	0330000f          	fence	rw,rw
    asm volatile(
    80005046:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    8000504a:	08200593          	li	a1,130
    8000504e:	00023617          	auipc	a2,0x23
    80005052:	b5a60613          	addi	a2,a2,-1190 # 80027ba8 <__func__.0+0xfe8>
    80005056:	00022517          	auipc	a0,0x22
    8000505a:	e6250513          	addi	a0,a0,-414 # 80026eb8 <__func__.0+0x2f8>
    8000505e:	6a71f0ef          	jal	80024f04 <printf>
    80005062:	00044797          	auipc	a5,0x44
    80005066:	faf7c783          	lbu	a5,-81(a5) # 80049011 <excpt+0x1>
    8000506a:	00022597          	auipc	a1,0x22
    8000506e:	e2658593          	addi	a1,a1,-474 # 80026e90 <__func__.0+0x2d0>
    80005072:	cf89                	beqz	a5,8000508c <virtual_instruction_1+0x1f2>
    80005074:	6418                	ld	a4,8(s0)
    80005076:	47d9                	li	a5,22
    80005078:	00022597          	auipc	a1,0x22
    8000507c:	e0858593          	addi	a1,a1,-504 # 80026e80 <__func__.0+0x2c0>
    80005080:	00f70663          	beq	a4,a5,8000508c <virtual_instruction_1+0x1f2>
    80005084:	00022597          	auipc	a1,0x22
    80005088:	e0c58593          	addi	a1,a1,-500 # 80026e90 <__func__.0+0x2d0>
    8000508c:	00022517          	auipc	a0,0x22
    80005090:	e4450513          	addi	a0,a0,-444 # 80026ed0 <__func__.0+0x310>
    80005094:	6711f0ef          	jal	80024f04 <printf>
    80005098:	00044797          	auipc	a5,0x44
    8000509c:	f797c783          	lbu	a5,-135(a5) # 80049011 <excpt+0x1>
    800050a0:	c789                	beqz	a5,800050aa <virtual_instruction_1+0x210>
    800050a2:	6418                	ld	a4,8(s0)
    800050a4:	47d9                	li	a5,22
    800050a6:	00f70c63          	beq	a4,a5,800050be <virtual_instruction_1+0x224>
    800050aa:	00022517          	auipc	a0,0x22
    800050ae:	e2e50513          	addi	a0,a0,-466 # 80026ed8 <__func__.0+0x318>
    800050b2:	6531f0ef          	jal	80024f04 <printf>
    800050b6:	02900513          	li	a0,41
    800050ba:	4551e0ef          	jal	80023d0e <putchar>
    800050be:	4529                	li	a0,10
    800050c0:	44f1e0ef          	jal	80023d0e <putchar>
    800050c4:	c881                	beqz	s1,800050d4 <virtual_instruction_1+0x23a>
    800050c6:	00044797          	auipc	a5,0x44
    800050ca:	f4b7c783          	lbu	a5,-181(a5) # 80049011 <excpt+0x1>
    800050ce:	4481                	li	s1,0
    800050d0:	0e079763          	bnez	a5,800051be <virtual_instruction_1+0x324>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800050d4:	4509                	li	a0,2
    800050d6:	b21fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800050da:	0330000f          	fence	rw,rw
    800050de:	4785                	li	a5,1
    800050e0:	00044717          	auipc	a4,0x44
    800050e4:	f6073423          	sd	zero,-152(a4) # 80049048 <excpt+0x38>
    800050e8:	00f41023          	sh	a5,0(s0)
    800050ec:	0330000f          	fence	rw,rw
    asm volatile(
    800050f0:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800050f4:	08200593          	li	a1,130
    800050f8:	00023617          	auipc	a2,0x23
    800050fc:	b0060613          	addi	a2,a2,-1280 # 80027bf8 <__func__.0+0x1038>
    80005100:	00022517          	auipc	a0,0x22
    80005104:	db850513          	addi	a0,a0,-584 # 80026eb8 <__func__.0+0x2f8>
    80005108:	5fd1f0ef          	jal	80024f04 <printf>
    8000510c:	00044797          	auipc	a5,0x44
    80005110:	f057c783          	lbu	a5,-251(a5) # 80049011 <excpt+0x1>
    80005114:	00022597          	auipc	a1,0x22
    80005118:	d7c58593          	addi	a1,a1,-644 # 80026e90 <__func__.0+0x2d0>
    8000511c:	cf89                	beqz	a5,80005136 <virtual_instruction_1+0x29c>
    8000511e:	6418                	ld	a4,8(s0)
    80005120:	47d9                	li	a5,22
    80005122:	00022597          	auipc	a1,0x22
    80005126:	d5e58593          	addi	a1,a1,-674 # 80026e80 <__func__.0+0x2c0>
    8000512a:	00f70663          	beq	a4,a5,80005136 <virtual_instruction_1+0x29c>
    8000512e:	00022597          	auipc	a1,0x22
    80005132:	d6258593          	addi	a1,a1,-670 # 80026e90 <__func__.0+0x2d0>
    80005136:	00022517          	auipc	a0,0x22
    8000513a:	d9a50513          	addi	a0,a0,-614 # 80026ed0 <__func__.0+0x310>
    8000513e:	5c71f0ef          	jal	80024f04 <printf>
    80005142:	00044797          	auipc	a5,0x44
    80005146:	ecf7c783          	lbu	a5,-305(a5) # 80049011 <excpt+0x1>
    8000514a:	c789                	beqz	a5,80005154 <virtual_instruction_1+0x2ba>
    8000514c:	6418                	ld	a4,8(s0)
    8000514e:	47d9                	li	a5,22
    80005150:	00f70c63          	beq	a4,a5,80005168 <virtual_instruction_1+0x2ce>
    80005154:	00022517          	auipc	a0,0x22
    80005158:	d8450513          	addi	a0,a0,-636 # 80026ed8 <__func__.0+0x318>
    8000515c:	5a91f0ef          	jal	80024f04 <printf>
    80005160:	02900513          	li	a0,41
    80005164:	3ab1e0ef          	jal	80023d0e <putchar>
    80005168:	4529                	li	a0,10
    8000516a:	3a51e0ef          	jal	80023d0e <putchar>
    8000516e:	c095                	beqz	s1,80005192 <virtual_instruction_1+0x2f8>
    80005170:	00044497          	auipc	s1,0x44
    80005174:	ea14c483          	lbu	s1,-351(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005178:	00022597          	auipc	a1,0x22
    8000517c:	d1858593          	addi	a1,a1,-744 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005180:	cc91                	beqz	s1,8000519c <virtual_instruction_1+0x302>
    80005182:	6418                	ld	a4,8(s0)
    80005184:	47d9                	li	a5,22
    TEST_END();
    80005186:	00022597          	auipc	a1,0x22
    8000518a:	cfa58593          	addi	a1,a1,-774 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    8000518e:	00f70763          	beq	a4,a5,8000519c <virtual_instruction_1+0x302>
    80005192:	4481                	li	s1,0
    TEST_END();
    80005194:	00022597          	auipc	a1,0x22
    80005198:	cfc58593          	addi	a1,a1,-772 # 80026e90 <__func__.0+0x2d0>
    8000519c:	00022517          	auipc	a0,0x22
    800051a0:	d9c50513          	addi	a0,a0,-612 # 80026f38 <__func__.0+0x378>
    800051a4:	5611f0ef          	jal	80024f04 <printf>
    800051a8:	4511                	li	a0,4
    800051aa:	a4dfb0ef          	jal	80000bf6 <goto_priv>
    800051ae:	afefc0ef          	jal	800014ac <reset_state>
}
    800051b2:	60e2                	ld	ra,24(sp)
    800051b4:	6442                	ld	s0,16(sp)
    800051b6:	8526                	mv	a0,s1
    800051b8:	64a2                	ld	s1,8(sp)
    800051ba:	6105                	addi	sp,sp,32
    800051bc:	8082                	ret
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    800051be:	6404                	ld	s1,8(s0)
    800051c0:	14a9                	addi	s1,s1,-22
    800051c2:	0014b493          	seqz	s1,s1
    800051c6:	b739                	j	800050d4 <virtual_instruction_1+0x23a>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    800051c8:	6404                	ld	s1,8(s0)
    800051ca:	14a9                	addi	s1,s1,-22
    800051cc:	0014b493          	seqz	s1,s1
    800051d0:	b5b1                	j	8000501c <virtual_instruction_1+0x182>

00000000800051d2 <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    800051d2:	7179                	addi	sp,sp,-48

    TEST_START();
    800051d4:	00020597          	auipc	a1,0x20
    800051d8:	4e458593          	addi	a1,a1,1252 # 800256b8 <__func__.10>
    800051dc:	00022517          	auipc	a0,0x22
    800051e0:	cc450513          	addi	a0,a0,-828 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_2() {
    800051e4:	f406                	sd	ra,40(sp)
    800051e6:	f022                	sd	s0,32(sp)
    800051e8:	ec26                	sd	s1,24(sp)
    TEST_START();
    800051ea:	51b1f0ef          	jal	80024f04 <printf>
    800051ee:	4529                	li	a0,10
    800051f0:	31f1e0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_VS);
    800051f4:	4509                	li	a0,2
    800051f6:	a01fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800051fa:	0330000f          	fence	rw,rw
    800051fe:	00044417          	auipc	s0,0x44
    80005202:	e1240413          	addi	s0,s0,-494 # 80049010 <excpt>
    80005206:	4785                	li	a5,1
    80005208:	00044717          	auipc	a4,0x44
    8000520c:	e4073023          	sd	zero,-448(a4) # 80049048 <excpt+0x38>
    80005210:	00f41023          	sh	a5,0(s0)
    80005214:	0330000f          	fence	rw,rw
    asm volatile(
    80005218:	4781                	li	a5,0
    8000521a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    8000521e:	08200593          	li	a1,130
    80005222:	00023617          	auipc	a2,0x23
    80005226:	a2660613          	addi	a2,a2,-1498 # 80027c48 <__func__.0+0x1088>
    8000522a:	00022517          	auipc	a0,0x22
    8000522e:	c8e50513          	addi	a0,a0,-882 # 80026eb8 <__func__.0+0x2f8>
    volatile uint64_t tmp = hlvd(0);
    80005232:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80005234:	4d11f0ef          	jal	80024f04 <printf>
    80005238:	00044797          	auipc	a5,0x44
    8000523c:	dd97c783          	lbu	a5,-551(a5) # 80049011 <excpt+0x1>
    80005240:	00022597          	auipc	a1,0x22
    80005244:	c5058593          	addi	a1,a1,-944 # 80026e90 <__func__.0+0x2d0>
    80005248:	cf89                	beqz	a5,80005262 <virtual_instruction_2+0x90>
    8000524a:	6418                	ld	a4,8(s0)
    8000524c:	47d9                	li	a5,22
    8000524e:	00022597          	auipc	a1,0x22
    80005252:	c3258593          	addi	a1,a1,-974 # 80026e80 <__func__.0+0x2c0>
    80005256:	00f70663          	beq	a4,a5,80005262 <virtual_instruction_2+0x90>
    8000525a:	00022597          	auipc	a1,0x22
    8000525e:	c3658593          	addi	a1,a1,-970 # 80026e90 <__func__.0+0x2d0>
    80005262:	00022517          	auipc	a0,0x22
    80005266:	c6e50513          	addi	a0,a0,-914 # 80026ed0 <__func__.0+0x310>
    8000526a:	49b1f0ef          	jal	80024f04 <printf>
    8000526e:	00044797          	auipc	a5,0x44
    80005272:	da37c783          	lbu	a5,-605(a5) # 80049011 <excpt+0x1>
    80005276:	c789                	beqz	a5,80005280 <virtual_instruction_2+0xae>
    80005278:	6418                	ld	a4,8(s0)
    8000527a:	47d9                	li	a5,22
    8000527c:	00f70c63          	beq	a4,a5,80005294 <virtual_instruction_2+0xc2>
    80005280:	00022517          	auipc	a0,0x22
    80005284:	c5850513          	addi	a0,a0,-936 # 80026ed8 <__func__.0+0x318>
    80005288:	47d1f0ef          	jal	80024f04 <printf>
    8000528c:	02900513          	li	a0,41
    80005290:	27f1e0ef          	jal	80023d0e <putchar>
    80005294:	4529                	li	a0,10
    80005296:	2791e0ef          	jal	80023d0e <putchar>
    8000529a:	00044797          	auipc	a5,0x44
    8000529e:	d777c783          	lbu	a5,-649(a5) # 80049011 <excpt+0x1>
    800052a2:	4481                	li	s1,0
    800052a4:	c789                	beqz	a5,800052ae <virtual_instruction_2+0xdc>
    800052a6:	6404                	ld	s1,8(s0)
    800052a8:	14a9                	addi	s1,s1,-22
    800052aa:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800052ae:	4509                	li	a0,2
    800052b0:	947fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800052b4:	0330000f          	fence	rw,rw
    800052b8:	4785                	li	a5,1
    800052ba:	00044717          	auipc	a4,0x44
    800052be:	d8073723          	sd	zero,-626(a4) # 80049048 <excpt+0x38>
    800052c2:	00f41023          	sh	a5,0(s0)
    800052c6:	0330000f          	fence	rw,rw
    asm volatile(
    800052ca:	37ab77b7          	lui	a5,0x37ab7
    800052ce:	078a                	slli	a5,a5,0x2
    800052d0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800052d4:	4701                	li	a4,0
    800052d6:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    800052da:	08200593          	li	a1,130
    800052de:	00023617          	auipc	a2,0x23
    800052e2:	99a60613          	addi	a2,a2,-1638 # 80027c78 <__func__.0+0x10b8>
    800052e6:	00022517          	auipc	a0,0x22
    800052ea:	bd250513          	addi	a0,a0,-1070 # 80026eb8 <__func__.0+0x2f8>
    800052ee:	4171f0ef          	jal	80024f04 <printf>
    800052f2:	00044797          	auipc	a5,0x44
    800052f6:	d1f7c783          	lbu	a5,-737(a5) # 80049011 <excpt+0x1>
    800052fa:	00022597          	auipc	a1,0x22
    800052fe:	b9658593          	addi	a1,a1,-1130 # 80026e90 <__func__.0+0x2d0>
    80005302:	cf89                	beqz	a5,8000531c <virtual_instruction_2+0x14a>
    80005304:	6418                	ld	a4,8(s0)
    80005306:	47d9                	li	a5,22
    80005308:	00022597          	auipc	a1,0x22
    8000530c:	b7858593          	addi	a1,a1,-1160 # 80026e80 <__func__.0+0x2c0>
    80005310:	00f70663          	beq	a4,a5,8000531c <virtual_instruction_2+0x14a>
    80005314:	00022597          	auipc	a1,0x22
    80005318:	b7c58593          	addi	a1,a1,-1156 # 80026e90 <__func__.0+0x2d0>
    8000531c:	00022517          	auipc	a0,0x22
    80005320:	bb450513          	addi	a0,a0,-1100 # 80026ed0 <__func__.0+0x310>
    80005324:	3e11f0ef          	jal	80024f04 <printf>
    80005328:	00044797          	auipc	a5,0x44
    8000532c:	ce97c783          	lbu	a5,-791(a5) # 80049011 <excpt+0x1>
    80005330:	c789                	beqz	a5,8000533a <virtual_instruction_2+0x168>
    80005332:	6418                	ld	a4,8(s0)
    80005334:	47d9                	li	a5,22
    80005336:	00f70c63          	beq	a4,a5,8000534e <virtual_instruction_2+0x17c>
    8000533a:	00022517          	auipc	a0,0x22
    8000533e:	b9e50513          	addi	a0,a0,-1122 # 80026ed8 <__func__.0+0x318>
    80005342:	3c31f0ef          	jal	80024f04 <printf>
    80005346:	02900513          	li	a0,41
    8000534a:	1c51e0ef          	jal	80023d0e <putchar>
    8000534e:	4529                	li	a0,10
    80005350:	1bf1e0ef          	jal	80023d0e <putchar>
    80005354:	c095                	beqz	s1,80005378 <virtual_instruction_2+0x1a6>
    80005356:	00044497          	auipc	s1,0x44
    8000535a:	cbb4c483          	lbu	s1,-837(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    8000535e:	00022597          	auipc	a1,0x22
    80005362:	b3258593          	addi	a1,a1,-1230 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005366:	cc91                	beqz	s1,80005382 <virtual_instruction_2+0x1b0>
    80005368:	6418                	ld	a4,8(s0)
    8000536a:	47d9                	li	a5,22
    TEST_END();
    8000536c:	00022597          	auipc	a1,0x22
    80005370:	b1458593          	addi	a1,a1,-1260 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005374:	00f70763          	beq	a4,a5,80005382 <virtual_instruction_2+0x1b0>
    80005378:	4481                	li	s1,0
    TEST_END();
    8000537a:	00022597          	auipc	a1,0x22
    8000537e:	b1658593          	addi	a1,a1,-1258 # 80026e90 <__func__.0+0x2d0>
    80005382:	00022517          	auipc	a0,0x22
    80005386:	bb650513          	addi	a0,a0,-1098 # 80026f38 <__func__.0+0x378>
    8000538a:	37b1f0ef          	jal	80024f04 <printf>
    8000538e:	4511                	li	a0,4
    80005390:	867fb0ef          	jal	80000bf6 <goto_priv>
    80005394:	918fc0ef          	jal	800014ac <reset_state>

}
    80005398:	70a2                	ld	ra,40(sp)
    8000539a:	7402                	ld	s0,32(sp)
    8000539c:	8526                	mv	a0,s1
    8000539e:	64e2                	ld	s1,24(sp)
    800053a0:	6145                	addi	sp,sp,48
    800053a2:	8082                	ret

00000000800053a4 <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    800053a4:	1101                	addi	sp,sp,-32

    TEST_START();
    800053a6:	00020597          	auipc	a1,0x20
    800053aa:	32a58593          	addi	a1,a1,810 # 800256d0 <__func__.9>
    800053ae:	00022517          	auipc	a0,0x22
    800053b2:	af250513          	addi	a0,a0,-1294 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_3() {
    800053b6:	ec06                	sd	ra,24(sp)
    800053b8:	e822                	sd	s0,16(sp)
    800053ba:	e426                	sd	s1,8(sp)
    TEST_START();
    800053bc:	3491f0ef          	jal	80024f04 <printf>
    800053c0:	4529                	li	a0,10
    800053c2:	14d1e0ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800053c6:	4511                	li	a0,4
    800053c8:	82ffb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    800053cc:	004007b7          	lui	a5,0x400
    800053d0:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800053d4:	4509                	li	a0,2
    800053d6:	821fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800053da:	0330000f          	fence	rw,rw
    800053de:	00044497          	auipc	s1,0x44
    800053e2:	c3248493          	addi	s1,s1,-974 # 80049010 <excpt>
    800053e6:	4785                	li	a5,1
    800053e8:	00044717          	auipc	a4,0x44
    800053ec:	c6073023          	sd	zero,-928(a4) # 80049048 <excpt+0x38>
    800053f0:	00f49023          	sh	a5,0(s1)
    800053f4:	0330000f          	fence	rw,rw
    TEST_EXEC_SRET();
    800053f8:	00000297          	auipc	t0,0x0
    800053fc:	01028293          	addi	t0,t0,16 # 80005408 <virtual_instruction_3+0x64>
    80005400:	14129073          	csrw	sepc,t0
    80005404:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005408:	08200593          	li	a1,130
    8000540c:	00023617          	auipc	a2,0x23
    80005410:	89c60613          	addi	a2,a2,-1892 # 80027ca8 <__func__.0+0x10e8>
    80005414:	00022517          	auipc	a0,0x22
    80005418:	aa450513          	addi	a0,a0,-1372 # 80026eb8 <__func__.0+0x2f8>
    8000541c:	2e91f0ef          	jal	80024f04 <printf>
    80005420:	00044797          	auipc	a5,0x44
    80005424:	bf17c783          	lbu	a5,-1039(a5) # 80049011 <excpt+0x1>
    80005428:	00022597          	auipc	a1,0x22
    8000542c:	a6858593          	addi	a1,a1,-1432 # 80026e90 <__func__.0+0x2d0>
    80005430:	cf89                	beqz	a5,8000544a <virtual_instruction_3+0xa6>
    80005432:	6498                	ld	a4,8(s1)
    80005434:	47d9                	li	a5,22
    80005436:	00022597          	auipc	a1,0x22
    8000543a:	a4a58593          	addi	a1,a1,-1462 # 80026e80 <__func__.0+0x2c0>
    8000543e:	00f70663          	beq	a4,a5,8000544a <virtual_instruction_3+0xa6>
    80005442:	00022597          	auipc	a1,0x22
    80005446:	a4e58593          	addi	a1,a1,-1458 # 80026e90 <__func__.0+0x2d0>
    8000544a:	00022517          	auipc	a0,0x22
    8000544e:	a8650513          	addi	a0,a0,-1402 # 80026ed0 <__func__.0+0x310>
    80005452:	2b31f0ef          	jal	80024f04 <printf>
    80005456:	00044797          	auipc	a5,0x44
    8000545a:	bbb7c783          	lbu	a5,-1093(a5) # 80049011 <excpt+0x1>
    8000545e:	c789                	beqz	a5,80005468 <virtual_instruction_3+0xc4>
    80005460:	6498                	ld	a4,8(s1)
    80005462:	47d9                	li	a5,22
    80005464:	00f70c63          	beq	a4,a5,8000547c <virtual_instruction_3+0xd8>
    80005468:	00022517          	auipc	a0,0x22
    8000546c:	a7050513          	addi	a0,a0,-1424 # 80026ed8 <__func__.0+0x318>
    80005470:	2951f0ef          	jal	80024f04 <printf>
    80005474:	02900513          	li	a0,41
    80005478:	0971e0ef          	jal	80023d0e <putchar>
    8000547c:	4529                	li	a0,10
    8000547e:	0911e0ef          	jal	80023d0e <putchar>
    80005482:	00044417          	auipc	s0,0x44
    80005486:	b8f44403          	lbu	s0,-1137(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    8000548a:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    8000548c:	c409                	beqz	s0,80005496 <virtual_instruction_3+0xf2>
    8000548e:	6498                	ld	a4,8(s1)
    80005490:	47d9                	li	a5,22
    80005492:	02f70e63          	beq	a4,a5,800054ce <virtual_instruction_3+0x12a>
    goto_priv(PRIV_M);
    80005496:	f60fb0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    8000549a:	004007b7          	lui	a5,0x400
    8000549e:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    800054a2:	4401                	li	s0,0

    TEST_END();
    800054a4:	00022597          	auipc	a1,0x22
    800054a8:	9ec58593          	addi	a1,a1,-1556 # 80026e90 <__func__.0+0x2d0>
    800054ac:	00022517          	auipc	a0,0x22
    800054b0:	a8c50513          	addi	a0,a0,-1396 # 80026f38 <__func__.0+0x378>
    800054b4:	2511f0ef          	jal	80024f04 <printf>
    800054b8:	4511                	li	a0,4
    800054ba:	f3cfb0ef          	jal	80000bf6 <goto_priv>
    800054be:	feffb0ef          	jal	800014ac <reset_state>
}
    800054c2:	60e2                	ld	ra,24(sp)
    800054c4:	8522                	mv	a0,s0
    800054c6:	6442                	ld	s0,16(sp)
    800054c8:	64a2                	ld	s1,8(sp)
    800054ca:	6105                	addi	sp,sp,32
    800054cc:	8082                	ret
    goto_priv(PRIV_M);
    800054ce:	f28fb0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    800054d2:	004007b7          	lui	a5,0x400
    800054d6:	6007b073          	csrc	hstatus,a5
    TEST_END();
    800054da:	00022597          	auipc	a1,0x22
    800054de:	9a658593          	addi	a1,a1,-1626 # 80026e80 <__func__.0+0x2c0>
    800054e2:	b7e9                	j	800054ac <virtual_instruction_3+0x108>

00000000800054e4 <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    800054e4:	1101                	addi	sp,sp,-32

    TEST_START();
    800054e6:	00020597          	auipc	a1,0x20
    800054ea:	20258593          	addi	a1,a1,514 # 800256e8 <__func__.8>
    800054ee:	00022517          	auipc	a0,0x22
    800054f2:	9b250513          	addi	a0,a0,-1614 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_4() {
    800054f6:	ec06                	sd	ra,24(sp)
    800054f8:	e822                	sd	s0,16(sp)
    800054fa:	e426                	sd	s1,8(sp)
    TEST_START();
    800054fc:	2091f0ef          	jal	80024f04 <printf>
    80005500:	4529                	li	a0,10
    80005502:	00d1e0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    80005506:	4511                	li	a0,4
    80005508:	eeefb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    8000550c:	001007b7          	lui	a5,0x100
    80005510:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    80005514:	4509                	li	a0,2
    80005516:	ee0fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000551a:	0330000f          	fence	rw,rw
    8000551e:	00044417          	auipc	s0,0x44
    80005522:	af240413          	addi	s0,s0,-1294 # 80049010 <excpt>
    80005526:	4785                	li	a5,1
    80005528:	00044717          	auipc	a4,0x44
    8000552c:	b2073023          	sd	zero,-1248(a4) # 80049048 <excpt+0x38>
    80005530:	00f41023          	sh	a5,0(s0)
    80005534:	0330000f          	fence	rw,rw
    asm volatile ("sfence.vma \n\t");
    80005538:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    8000553c:	08200593          	li	a1,130
    80005540:	00022617          	auipc	a2,0x22
    80005544:	7a860613          	addi	a2,a2,1960 # 80027ce8 <__func__.0+0x1128>
    80005548:	00022517          	auipc	a0,0x22
    8000554c:	97050513          	addi	a0,a0,-1680 # 80026eb8 <__func__.0+0x2f8>
    80005550:	1b51f0ef          	jal	80024f04 <printf>
    80005554:	00044797          	auipc	a5,0x44
    80005558:	abd7c783          	lbu	a5,-1347(a5) # 80049011 <excpt+0x1>
    8000555c:	00022597          	auipc	a1,0x22
    80005560:	93458593          	addi	a1,a1,-1740 # 80026e90 <__func__.0+0x2d0>
    80005564:	cf89                	beqz	a5,8000557e <virtual_instruction_4+0x9a>
    80005566:	6418                	ld	a4,8(s0)
    80005568:	47d9                	li	a5,22
    8000556a:	00022597          	auipc	a1,0x22
    8000556e:	91658593          	addi	a1,a1,-1770 # 80026e80 <__func__.0+0x2c0>
    80005572:	00f70663          	beq	a4,a5,8000557e <virtual_instruction_4+0x9a>
    80005576:	00022597          	auipc	a1,0x22
    8000557a:	91a58593          	addi	a1,a1,-1766 # 80026e90 <__func__.0+0x2d0>
    8000557e:	00022517          	auipc	a0,0x22
    80005582:	95250513          	addi	a0,a0,-1710 # 80026ed0 <__func__.0+0x310>
    80005586:	17f1f0ef          	jal	80024f04 <printf>
    8000558a:	00044797          	auipc	a5,0x44
    8000558e:	a877c783          	lbu	a5,-1401(a5) # 80049011 <excpt+0x1>
    80005592:	c789                	beqz	a5,8000559c <virtual_instruction_4+0xb8>
    80005594:	6418                	ld	a4,8(s0)
    80005596:	47d9                	li	a5,22
    80005598:	00f70c63          	beq	a4,a5,800055b0 <virtual_instruction_4+0xcc>
    8000559c:	00022517          	auipc	a0,0x22
    800055a0:	93c50513          	addi	a0,a0,-1732 # 80026ed8 <__func__.0+0x318>
    800055a4:	1611f0ef          	jal	80024f04 <printf>
    800055a8:	02900513          	li	a0,41
    800055ac:	7621e0ef          	jal	80023d0e <putchar>
    800055b0:	4529                	li	a0,10
    800055b2:	75c1e0ef          	jal	80023d0e <putchar>
    800055b6:	00044797          	auipc	a5,0x44
    800055ba:	a5b7c783          	lbu	a5,-1445(a5) # 80049011 <excpt+0x1>
    800055be:	4481                	li	s1,0
    800055c0:	c789                	beqz	a5,800055ca <virtual_instruction_4+0xe6>
    800055c2:	6404                	ld	s1,8(s0)
    800055c4:	14a9                	addi	s1,s1,-22
    800055c6:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    800055ca:	0330000f          	fence	rw,rw
    800055ce:	4785                	li	a5,1
    800055d0:	00044717          	auipc	a4,0x44
    800055d4:	a6073c23          	sd	zero,-1416(a4) # 80049048 <excpt+0x38>
    800055d8:	00f41023          	sh	a5,0(s0)
    800055dc:	0330000f          	fence	rw,rw
    CSRW(satp, 0x0);
    800055e0:	18005073          	csrwi	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800055e4:	08200593          	li	a1,130
    800055e8:	00022617          	auipc	a2,0x22
    800055ec:	74060613          	addi	a2,a2,1856 # 80027d28 <__func__.0+0x1168>
    800055f0:	00022517          	auipc	a0,0x22
    800055f4:	8c850513          	addi	a0,a0,-1848 # 80026eb8 <__func__.0+0x2f8>
    800055f8:	10d1f0ef          	jal	80024f04 <printf>
    800055fc:	00044797          	auipc	a5,0x44
    80005600:	a157c783          	lbu	a5,-1515(a5) # 80049011 <excpt+0x1>
    80005604:	00022597          	auipc	a1,0x22
    80005608:	88c58593          	addi	a1,a1,-1908 # 80026e90 <__func__.0+0x2d0>
    8000560c:	cf89                	beqz	a5,80005626 <virtual_instruction_4+0x142>
    8000560e:	6418                	ld	a4,8(s0)
    80005610:	47d9                	li	a5,22
    80005612:	00022597          	auipc	a1,0x22
    80005616:	86e58593          	addi	a1,a1,-1938 # 80026e80 <__func__.0+0x2c0>
    8000561a:	00f70663          	beq	a4,a5,80005626 <virtual_instruction_4+0x142>
    8000561e:	00022597          	auipc	a1,0x22
    80005622:	87258593          	addi	a1,a1,-1934 # 80026e90 <__func__.0+0x2d0>
    80005626:	00022517          	auipc	a0,0x22
    8000562a:	8aa50513          	addi	a0,a0,-1878 # 80026ed0 <__func__.0+0x310>
    8000562e:	0d71f0ef          	jal	80024f04 <printf>
    80005632:	00044797          	auipc	a5,0x44
    80005636:	9df7c783          	lbu	a5,-1569(a5) # 80049011 <excpt+0x1>
    8000563a:	c789                	beqz	a5,80005644 <virtual_instruction_4+0x160>
    8000563c:	6418                	ld	a4,8(s0)
    8000563e:	47d9                	li	a5,22
    80005640:	00f70c63          	beq	a4,a5,80005658 <virtual_instruction_4+0x174>
    80005644:	00022517          	auipc	a0,0x22
    80005648:	89450513          	addi	a0,a0,-1900 # 80026ed8 <__func__.0+0x318>
    8000564c:	0b91f0ef          	jal	80024f04 <printf>
    80005650:	02900513          	li	a0,41
    80005654:	6ba1e0ef          	jal	80023d0e <putchar>
    80005658:	4529                	li	a0,10
    8000565a:	6b41e0ef          	jal	80023d0e <putchar>
    8000565e:	c095                	beqz	s1,80005682 <virtual_instruction_4+0x19e>
    80005660:	00044497          	auipc	s1,0x44
    80005664:	9b14c483          	lbu	s1,-1615(s1) # 80049011 <excpt+0x1>
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    80005668:	00022597          	auipc	a1,0x22
    8000566c:	82858593          	addi	a1,a1,-2008 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80005670:	cc91                	beqz	s1,8000568c <virtual_instruction_4+0x1a8>
    80005672:	6418                	ld	a4,8(s0)
    80005674:	47d9                	li	a5,22
    TEST_END();
    80005676:	00022597          	auipc	a1,0x22
    8000567a:	80a58593          	addi	a1,a1,-2038 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    8000567e:	00f70763          	beq	a4,a5,8000568c <virtual_instruction_4+0x1a8>
    80005682:	4481                	li	s1,0
    TEST_END();
    80005684:	00022597          	auipc	a1,0x22
    80005688:	80c58593          	addi	a1,a1,-2036 # 80026e90 <__func__.0+0x2d0>
    8000568c:	00022517          	auipc	a0,0x22
    80005690:	8ac50513          	addi	a0,a0,-1876 # 80026f38 <__func__.0+0x378>
    80005694:	0711f0ef          	jal	80024f04 <printf>
    80005698:	4511                	li	a0,4
    8000569a:	d5cfb0ef          	jal	80000bf6 <goto_priv>
    8000569e:	e0ffb0ef          	jal	800014ac <reset_state>
}
    800056a2:	60e2                	ld	ra,24(sp)
    800056a4:	6442                	ld	s0,16(sp)
    800056a6:	8526                	mv	a0,s1
    800056a8:	64a2                	ld	s1,8(sp)
    800056aa:	6105                	addi	sp,sp,32
    800056ac:	8082                	ret

00000000800056ae <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    800056ae:	1101                	addi	sp,sp,-32

    TEST_START();
    800056b0:	00020597          	auipc	a1,0x20
    800056b4:	05058593          	addi	a1,a1,80 # 80025700 <__func__.7>
    800056b8:	00021517          	auipc	a0,0x21
    800056bc:	7e850513          	addi	a0,a0,2024 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_5() {
    800056c0:	ec06                	sd	ra,24(sp)
    800056c2:	e822                	sd	s0,16(sp)
    800056c4:	e426                	sd	s1,8(sp)
    TEST_START();
    800056c6:	03f1f0ef          	jal	80024f04 <printf>
    800056ca:	4529                	li	a0,10
    800056cc:	6421e0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    800056d0:	4511                	li	a0,4
    800056d2:	d24fb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    800056d6:	002007b7          	lui	a5,0x200
    800056da:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800056de:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    800056e2:	4509                	li	a0,2
    800056e4:	d12fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800056e8:	0330000f          	fence	rw,rw
    800056ec:	00044497          	auipc	s1,0x44
    800056f0:	92448493          	addi	s1,s1,-1756 # 80049010 <excpt>
    800056f4:	4785                	li	a5,1
    800056f6:	00044717          	auipc	a4,0x44
    800056fa:	94073923          	sd	zero,-1710(a4) # 80049048 <excpt+0x38>
    800056fe:	00f49023          	sh	a5,0(s1)
    80005702:	0330000f          	fence	rw,rw
    asm("wfi");
    80005706:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000570a:	08200593          	li	a1,130
    8000570e:	00022617          	auipc	a2,0x22
    80005712:	66260613          	addi	a2,a2,1634 # 80027d70 <__func__.0+0x11b0>
    80005716:	00021517          	auipc	a0,0x21
    8000571a:	7a250513          	addi	a0,a0,1954 # 80026eb8 <__func__.0+0x2f8>
    8000571e:	7e61f0ef          	jal	80024f04 <printf>
    80005722:	00044797          	auipc	a5,0x44
    80005726:	8ef7c783          	lbu	a5,-1809(a5) # 80049011 <excpt+0x1>
    8000572a:	00021597          	auipc	a1,0x21
    8000572e:	76658593          	addi	a1,a1,1894 # 80026e90 <__func__.0+0x2d0>
    80005732:	cf89                	beqz	a5,8000574c <virtual_instruction_5+0x9e>
    80005734:	6498                	ld	a4,8(s1)
    80005736:	47d9                	li	a5,22
    80005738:	00021597          	auipc	a1,0x21
    8000573c:	74858593          	addi	a1,a1,1864 # 80026e80 <__func__.0+0x2c0>
    80005740:	00f70663          	beq	a4,a5,8000574c <virtual_instruction_5+0x9e>
    80005744:	00021597          	auipc	a1,0x21
    80005748:	74c58593          	addi	a1,a1,1868 # 80026e90 <__func__.0+0x2d0>
    8000574c:	00021517          	auipc	a0,0x21
    80005750:	78450513          	addi	a0,a0,1924 # 80026ed0 <__func__.0+0x310>
    80005754:	7b01f0ef          	jal	80024f04 <printf>
    80005758:	00044797          	auipc	a5,0x44
    8000575c:	8b97c783          	lbu	a5,-1863(a5) # 80049011 <excpt+0x1>
    80005760:	c789                	beqz	a5,8000576a <virtual_instruction_5+0xbc>
    80005762:	6498                	ld	a4,8(s1)
    80005764:	47d9                	li	a5,22
    80005766:	00f70c63          	beq	a4,a5,8000577e <virtual_instruction_5+0xd0>
    8000576a:	00021517          	auipc	a0,0x21
    8000576e:	76e50513          	addi	a0,a0,1902 # 80026ed8 <__func__.0+0x318>
    80005772:	7921f0ef          	jal	80024f04 <printf>
    80005776:	02900513          	li	a0,41
    8000577a:	5941e0ef          	jal	80023d0e <putchar>
    8000577e:	4529                	li	a0,10
    80005780:	58e1e0ef          	jal	80023d0e <putchar>
    80005784:	00044417          	auipc	s0,0x44
    80005788:	88d44403          	lbu	s0,-1907(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    goto_priv(PRIV_M);
    8000578c:	4511                	li	a0,4
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000578e:	c409                	beqz	s0,80005798 <virtual_instruction_5+0xea>
    80005790:	6498                	ld	a4,8(s1)
    80005792:	47d9                	li	a5,22
    80005794:	04f70263          	beq	a4,a5,800057d8 <virtual_instruction_5+0x12a>
    goto_priv(PRIV_M);
    80005798:	c5efb0ef          	jal	80000bf6 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    8000579c:	343025f3          	csrr	a1,mtval
    800057a0:	00022517          	auipc	a0,0x22
    800057a4:	61850513          	addi	a0,a0,1560 # 80027db8 <__func__.0+0x11f8>
    800057a8:	75c1f0ef          	jal	80024f04 <printf>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800057ac:	4401                	li	s0,0

    TEST_END();
    800057ae:	00021597          	auipc	a1,0x21
    800057b2:	6e258593          	addi	a1,a1,1762 # 80026e90 <__func__.0+0x2d0>
    800057b6:	00021517          	auipc	a0,0x21
    800057ba:	78250513          	addi	a0,a0,1922 # 80026f38 <__func__.0+0x378>
    800057be:	7461f0ef          	jal	80024f04 <printf>
    800057c2:	4511                	li	a0,4
    800057c4:	c32fb0ef          	jal	80000bf6 <goto_priv>
    800057c8:	ce5fb0ef          	jal	800014ac <reset_state>
}
    800057cc:	60e2                	ld	ra,24(sp)
    800057ce:	8522                	mv	a0,s0
    800057d0:	6442                	ld	s0,16(sp)
    800057d2:	64a2                	ld	s1,8(sp)
    800057d4:	6105                	addi	sp,sp,32
    800057d6:	8082                	ret
    goto_priv(PRIV_M);
    800057d8:	c1efb0ef          	jal	80000bf6 <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    800057dc:	343025f3          	csrr	a1,mtval
    800057e0:	00022517          	auipc	a0,0x22
    800057e4:	5d850513          	addi	a0,a0,1496 # 80027db8 <__func__.0+0x11f8>
    800057e8:	71c1f0ef          	jal	80024f04 <printf>
    TEST_END();
    800057ec:	00021597          	auipc	a1,0x21
    800057f0:	69458593          	addi	a1,a1,1684 # 80026e80 <__func__.0+0x2c0>
    800057f4:	b7c9                	j	800057b6 <virtual_instruction_5+0x108>

00000000800057f6 <virtual_instruction_6>:


bool virtual_instruction_6() {
    800057f6:	1101                	addi	sp,sp,-32

    TEST_START();
    800057f8:	00020597          	auipc	a1,0x20
    800057fc:	f2058593          	addi	a1,a1,-224 # 80025718 <__func__.6>
    80005800:	00021517          	auipc	a0,0x21
    80005804:	6a050513          	addi	a0,a0,1696 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_6() {
    80005808:	ec06                	sd	ra,24(sp)
    8000580a:	e822                	sd	s0,16(sp)
    8000580c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000580e:	6f61f0ef          	jal	80024f04 <printf>
    80005812:	4529                	li	a0,10
    80005814:	4fa1e0ef          	jal	80023d0e <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    80005818:	4501                	li	a0,0
    8000581a:	bdcfb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000581e:	0330000f          	fence	rw,rw
    80005822:	00043417          	auipc	s0,0x43
    80005826:	7ee40413          	addi	s0,s0,2030 # 80049010 <excpt>
    8000582a:	4785                	li	a5,1
    8000582c:	00044717          	auipc	a4,0x44
    80005830:	80073e23          	sd	zero,-2020(a4) # 80049048 <excpt+0x38>
    80005834:	00f41023          	sh	a5,0(s0)
    80005838:	0330000f          	fence	rw,rw
    asm volatile(
    8000583c:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    80005840:	08200593          	li	a1,130
    80005844:	00022617          	auipc	a2,0x22
    80005848:	57c60613          	addi	a2,a2,1404 # 80027dc0 <__func__.0+0x1200>
    8000584c:	00021517          	auipc	a0,0x21
    80005850:	66c50513          	addi	a0,a0,1644 # 80026eb8 <__func__.0+0x2f8>
    80005854:	6b01f0ef          	jal	80024f04 <printf>
    80005858:	00043797          	auipc	a5,0x43
    8000585c:	7b97c783          	lbu	a5,1977(a5) # 80049011 <excpt+0x1>
    80005860:	00021597          	auipc	a1,0x21
    80005864:	63058593          	addi	a1,a1,1584 # 80026e90 <__func__.0+0x2d0>
    80005868:	cf89                	beqz	a5,80005882 <virtual_instruction_6+0x8c>
    8000586a:	6418                	ld	a4,8(s0)
    8000586c:	47d9                	li	a5,22
    8000586e:	00021597          	auipc	a1,0x21
    80005872:	61258593          	addi	a1,a1,1554 # 80026e80 <__func__.0+0x2c0>
    80005876:	00f70663          	beq	a4,a5,80005882 <virtual_instruction_6+0x8c>
    8000587a:	00021597          	auipc	a1,0x21
    8000587e:	61658593          	addi	a1,a1,1558 # 80026e90 <__func__.0+0x2d0>
    80005882:	00021517          	auipc	a0,0x21
    80005886:	64e50513          	addi	a0,a0,1614 # 80026ed0 <__func__.0+0x310>
    8000588a:	67a1f0ef          	jal	80024f04 <printf>
    8000588e:	00043797          	auipc	a5,0x43
    80005892:	7837c783          	lbu	a5,1923(a5) # 80049011 <excpt+0x1>
    80005896:	c789                	beqz	a5,800058a0 <virtual_instruction_6+0xaa>
    80005898:	6418                	ld	a4,8(s0)
    8000589a:	47d9                	li	a5,22
    8000589c:	00f70c63          	beq	a4,a5,800058b4 <virtual_instruction_6+0xbe>
    800058a0:	00021517          	auipc	a0,0x21
    800058a4:	63850513          	addi	a0,a0,1592 # 80026ed8 <__func__.0+0x318>
    800058a8:	65c1f0ef          	jal	80024f04 <printf>
    800058ac:	02900513          	li	a0,41
    800058b0:	45e1e0ef          	jal	80023d0e <putchar>
    800058b4:	4529                	li	a0,10
    800058b6:	4581e0ef          	jal	80023d0e <putchar>
    800058ba:	00043797          	auipc	a5,0x43
    800058be:	7577c783          	lbu	a5,1879(a5) # 80049011 <excpt+0x1>
    800058c2:	4481                	li	s1,0
    800058c4:	c789                	beqz	a5,800058ce <virtual_instruction_6+0xd8>
    800058c6:	6404                	ld	s1,8(s0)
    800058c8:	14a9                	addi	s1,s1,-22
    800058ca:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    800058ce:	4501                	li	a0,0
    800058d0:	b26fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800058d4:	0330000f          	fence	rw,rw
    800058d8:	4785                	li	a5,1
    800058da:	00043717          	auipc	a4,0x43
    800058de:	76073723          	sd	zero,1902(a4) # 80049048 <excpt+0x38>
    800058e2:	00f41023          	sh	a5,0(s0)
    800058e6:	0330000f          	fence	rw,rw
    asm volatile(
    800058ea:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    800058ee:	08200593          	li	a1,130
    800058f2:	00022617          	auipc	a2,0x22
    800058f6:	50e60613          	addi	a2,a2,1294 # 80027e00 <__func__.0+0x1240>
    800058fa:	00021517          	auipc	a0,0x21
    800058fe:	5be50513          	addi	a0,a0,1470 # 80026eb8 <__func__.0+0x2f8>
    80005902:	6021f0ef          	jal	80024f04 <printf>
    80005906:	00043797          	auipc	a5,0x43
    8000590a:	70b7c783          	lbu	a5,1803(a5) # 80049011 <excpt+0x1>
    8000590e:	00021597          	auipc	a1,0x21
    80005912:	58258593          	addi	a1,a1,1410 # 80026e90 <__func__.0+0x2d0>
    80005916:	cf89                	beqz	a5,80005930 <virtual_instruction_6+0x13a>
    80005918:	6418                	ld	a4,8(s0)
    8000591a:	47d9                	li	a5,22
    8000591c:	00021597          	auipc	a1,0x21
    80005920:	56458593          	addi	a1,a1,1380 # 80026e80 <__func__.0+0x2c0>
    80005924:	00f70663          	beq	a4,a5,80005930 <virtual_instruction_6+0x13a>
    80005928:	00021597          	auipc	a1,0x21
    8000592c:	56858593          	addi	a1,a1,1384 # 80026e90 <__func__.0+0x2d0>
    80005930:	00021517          	auipc	a0,0x21
    80005934:	5a050513          	addi	a0,a0,1440 # 80026ed0 <__func__.0+0x310>
    80005938:	5cc1f0ef          	jal	80024f04 <printf>
    8000593c:	00043797          	auipc	a5,0x43
    80005940:	6d57c783          	lbu	a5,1749(a5) # 80049011 <excpt+0x1>
    80005944:	c789                	beqz	a5,8000594e <virtual_instruction_6+0x158>
    80005946:	6418                	ld	a4,8(s0)
    80005948:	47d9                	li	a5,22
    8000594a:	00f70c63          	beq	a4,a5,80005962 <virtual_instruction_6+0x16c>
    8000594e:	00021517          	auipc	a0,0x21
    80005952:	58a50513          	addi	a0,a0,1418 # 80026ed8 <__func__.0+0x318>
    80005956:	5ae1f0ef          	jal	80024f04 <printf>
    8000595a:	02900513          	li	a0,41
    8000595e:	3b01e0ef          	jal	80023d0e <putchar>
    80005962:	4529                	li	a0,10
    80005964:	3aa1e0ef          	jal	80023d0e <putchar>
    80005968:	c881                	beqz	s1,80005978 <virtual_instruction_6+0x182>
    8000596a:	00043797          	auipc	a5,0x43
    8000596e:	6a77c783          	lbu	a5,1703(a5) # 80049011 <excpt+0x1>
    80005972:	4481                	li	s1,0
    80005974:	0e079763          	bnez	a5,80005a62 <virtual_instruction_6+0x26c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    80005978:	4501                	li	a0,0
    8000597a:	a7cfb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000597e:	0330000f          	fence	rw,rw
    80005982:	4785                	li	a5,1
    80005984:	00043717          	auipc	a4,0x43
    80005988:	6c073223          	sd	zero,1732(a4) # 80049048 <excpt+0x38>
    8000598c:	00f41023          	sh	a5,0(s0)
    80005990:	0330000f          	fence	rw,rw
    asm volatile(
    80005994:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005998:	08200593          	li	a1,130
    8000599c:	00022617          	auipc	a2,0x22
    800059a0:	4a460613          	addi	a2,a2,1188 # 80027e40 <__func__.0+0x1280>
    800059a4:	00021517          	auipc	a0,0x21
    800059a8:	51450513          	addi	a0,a0,1300 # 80026eb8 <__func__.0+0x2f8>
    800059ac:	5581f0ef          	jal	80024f04 <printf>
    800059b0:	00043797          	auipc	a5,0x43
    800059b4:	6617c783          	lbu	a5,1633(a5) # 80049011 <excpt+0x1>
    800059b8:	00021597          	auipc	a1,0x21
    800059bc:	4d858593          	addi	a1,a1,1240 # 80026e90 <__func__.0+0x2d0>
    800059c0:	cf89                	beqz	a5,800059da <virtual_instruction_6+0x1e4>
    800059c2:	6418                	ld	a4,8(s0)
    800059c4:	47d9                	li	a5,22
    800059c6:	00021597          	auipc	a1,0x21
    800059ca:	4ba58593          	addi	a1,a1,1210 # 80026e80 <__func__.0+0x2c0>
    800059ce:	00f70663          	beq	a4,a5,800059da <virtual_instruction_6+0x1e4>
    800059d2:	00021597          	auipc	a1,0x21
    800059d6:	4be58593          	addi	a1,a1,1214 # 80026e90 <__func__.0+0x2d0>
    800059da:	00021517          	auipc	a0,0x21
    800059de:	4f650513          	addi	a0,a0,1270 # 80026ed0 <__func__.0+0x310>
    800059e2:	5221f0ef          	jal	80024f04 <printf>
    800059e6:	00043797          	auipc	a5,0x43
    800059ea:	62b7c783          	lbu	a5,1579(a5) # 80049011 <excpt+0x1>
    800059ee:	c789                	beqz	a5,800059f8 <virtual_instruction_6+0x202>
    800059f0:	6418                	ld	a4,8(s0)
    800059f2:	47d9                	li	a5,22
    800059f4:	00f70c63          	beq	a4,a5,80005a0c <virtual_instruction_6+0x216>
    800059f8:	00021517          	auipc	a0,0x21
    800059fc:	4e050513          	addi	a0,a0,1248 # 80026ed8 <__func__.0+0x318>
    80005a00:	5041f0ef          	jal	80024f04 <printf>
    80005a04:	02900513          	li	a0,41
    80005a08:	3061e0ef          	jal	80023d0e <putchar>
    80005a0c:	4529                	li	a0,10
    80005a0e:	3001e0ef          	jal	80023d0e <putchar>
    80005a12:	c095                	beqz	s1,80005a36 <virtual_instruction_6+0x240>
    80005a14:	00043497          	auipc	s1,0x43
    80005a18:	5fd4c483          	lbu	s1,1533(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005a1c:	00021597          	auipc	a1,0x21
    80005a20:	47458593          	addi	a1,a1,1140 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a24:	cc91                	beqz	s1,80005a40 <virtual_instruction_6+0x24a>
    80005a26:	6418                	ld	a4,8(s0)
    80005a28:	47d9                	li	a5,22
    TEST_END();
    80005a2a:	00021597          	auipc	a1,0x21
    80005a2e:	45658593          	addi	a1,a1,1110 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005a32:	00f70763          	beq	a4,a5,80005a40 <virtual_instruction_6+0x24a>
    80005a36:	4481                	li	s1,0
    TEST_END();
    80005a38:	00021597          	auipc	a1,0x21
    80005a3c:	45858593          	addi	a1,a1,1112 # 80026e90 <__func__.0+0x2d0>
    80005a40:	00021517          	auipc	a0,0x21
    80005a44:	4f850513          	addi	a0,a0,1272 # 80026f38 <__func__.0+0x378>
    80005a48:	4bc1f0ef          	jal	80024f04 <printf>
    80005a4c:	4511                	li	a0,4
    80005a4e:	9a8fb0ef          	jal	80000bf6 <goto_priv>
    80005a52:	a5bfb0ef          	jal	800014ac <reset_state>
}
    80005a56:	60e2                	ld	ra,24(sp)
    80005a58:	6442                	ld	s0,16(sp)
    80005a5a:	8526                	mv	a0,s1
    80005a5c:	64a2                	ld	s1,8(sp)
    80005a5e:	6105                	addi	sp,sp,32
    80005a60:	8082                	ret
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    80005a62:	6404                	ld	s1,8(s0)
    80005a64:	14a9                	addi	s1,s1,-22
    80005a66:	0014b493          	seqz	s1,s1
    80005a6a:	b739                	j	80005978 <virtual_instruction_6+0x182>

0000000080005a6c <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    80005a6c:	1101                	addi	sp,sp,-32

    TEST_START();
    80005a6e:	00020597          	auipc	a1,0x20
    80005a72:	cc258593          	addi	a1,a1,-830 # 80025730 <__func__.5>
    80005a76:	00021517          	auipc	a0,0x21
    80005a7a:	42a50513          	addi	a0,a0,1066 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_7() {
    80005a7e:	ec06                	sd	ra,24(sp)
    80005a80:	e822                	sd	s0,16(sp)
    80005a82:	e426                	sd	s1,8(sp)
    TEST_START();
    80005a84:	4801f0ef          	jal	80024f04 <printf>
    80005a88:	4529                	li	a0,10
    80005a8a:	2841e0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_VU);
    80005a8e:	4501                	li	a0,0
    80005a90:	966fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005a94:	0330000f          	fence	rw,rw
    80005a98:	00043417          	auipc	s0,0x43
    80005a9c:	57840413          	addi	s0,s0,1400 # 80049010 <excpt>
    80005aa0:	4785                	li	a5,1
    80005aa2:	00043717          	auipc	a4,0x43
    80005aa6:	5a073323          	sd	zero,1446(a4) # 80049048 <excpt+0x38>
    80005aaa:	00f41023          	sh	a5,0(s0)
    80005aae:	0330000f          	fence	rw,rw
    asm volatile(
    80005ab2:	4781                	li	a5,0
    80005ab4:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005ab8:	08200593          	li	a1,130
    80005abc:	00022617          	auipc	a2,0x22
    80005ac0:	3d460613          	addi	a2,a2,980 # 80027e90 <__func__.0+0x12d0>
    80005ac4:	00021517          	auipc	a0,0x21
    80005ac8:	3f450513          	addi	a0,a0,1012 # 80026eb8 <__func__.0+0x2f8>
    80005acc:	4381f0ef          	jal	80024f04 <printf>
    80005ad0:	00043797          	auipc	a5,0x43
    80005ad4:	5417c783          	lbu	a5,1345(a5) # 80049011 <excpt+0x1>
    80005ad8:	00021597          	auipc	a1,0x21
    80005adc:	3b858593          	addi	a1,a1,952 # 80026e90 <__func__.0+0x2d0>
    80005ae0:	cf89                	beqz	a5,80005afa <virtual_instruction_7+0x8e>
    80005ae2:	6418                	ld	a4,8(s0)
    80005ae4:	47d9                	li	a5,22
    80005ae6:	00021597          	auipc	a1,0x21
    80005aea:	39a58593          	addi	a1,a1,922 # 80026e80 <__func__.0+0x2c0>
    80005aee:	00f70663          	beq	a4,a5,80005afa <virtual_instruction_7+0x8e>
    80005af2:	00021597          	auipc	a1,0x21
    80005af6:	39e58593          	addi	a1,a1,926 # 80026e90 <__func__.0+0x2d0>
    80005afa:	00021517          	auipc	a0,0x21
    80005afe:	3d650513          	addi	a0,a0,982 # 80026ed0 <__func__.0+0x310>
    80005b02:	4021f0ef          	jal	80024f04 <printf>
    80005b06:	00043797          	auipc	a5,0x43
    80005b0a:	50b7c783          	lbu	a5,1291(a5) # 80049011 <excpt+0x1>
    80005b0e:	c789                	beqz	a5,80005b18 <virtual_instruction_7+0xac>
    80005b10:	6418                	ld	a4,8(s0)
    80005b12:	47d9                	li	a5,22
    80005b14:	00f70c63          	beq	a4,a5,80005b2c <virtual_instruction_7+0xc0>
    80005b18:	00021517          	auipc	a0,0x21
    80005b1c:	3c050513          	addi	a0,a0,960 # 80026ed8 <__func__.0+0x318>
    80005b20:	3e41f0ef          	jal	80024f04 <printf>
    80005b24:	02900513          	li	a0,41
    80005b28:	1e61e0ef          	jal	80023d0e <putchar>
    80005b2c:	4529                	li	a0,10
    80005b2e:	1e01e0ef          	jal	80023d0e <putchar>
    80005b32:	00043797          	auipc	a5,0x43
    80005b36:	4df7c783          	lbu	a5,1247(a5) # 80049011 <excpt+0x1>
    80005b3a:	4481                	li	s1,0
    80005b3c:	c789                	beqz	a5,80005b46 <virtual_instruction_7+0xda>
    80005b3e:	6404                	ld	s1,8(s0)
    80005b40:	14a9                	addi	s1,s1,-22
    80005b42:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005b46:	4501                	li	a0,0
    80005b48:	8aefb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b4c:	0330000f          	fence	rw,rw
    80005b50:	4785                	li	a5,1
    80005b52:	00043717          	auipc	a4,0x43
    80005b56:	4e073b23          	sd	zero,1270(a4) # 80049048 <excpt+0x38>
    80005b5a:	00f41023          	sh	a5,0(s0)
    80005b5e:	0330000f          	fence	rw,rw
    asm volatile(
    80005b62:	4781                	li	a5,0
    80005b64:	6017c7f3          	.insn	4, 0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005b68:	08200593          	li	a1,130
    80005b6c:	00022617          	auipc	a2,0x22
    80005b70:	35460613          	addi	a2,a2,852 # 80027ec0 <__func__.0+0x1300>
    80005b74:	00021517          	auipc	a0,0x21
    80005b78:	34450513          	addi	a0,a0,836 # 80026eb8 <__func__.0+0x2f8>
    80005b7c:	3881f0ef          	jal	80024f04 <printf>
    80005b80:	00043797          	auipc	a5,0x43
    80005b84:	4917c783          	lbu	a5,1169(a5) # 80049011 <excpt+0x1>
    80005b88:	00021597          	auipc	a1,0x21
    80005b8c:	30858593          	addi	a1,a1,776 # 80026e90 <__func__.0+0x2d0>
    80005b90:	cf89                	beqz	a5,80005baa <virtual_instruction_7+0x13e>
    80005b92:	6418                	ld	a4,8(s0)
    80005b94:	47d9                	li	a5,22
    80005b96:	00021597          	auipc	a1,0x21
    80005b9a:	2ea58593          	addi	a1,a1,746 # 80026e80 <__func__.0+0x2c0>
    80005b9e:	00f70663          	beq	a4,a5,80005baa <virtual_instruction_7+0x13e>
    80005ba2:	00021597          	auipc	a1,0x21
    80005ba6:	2ee58593          	addi	a1,a1,750 # 80026e90 <__func__.0+0x2d0>
    80005baa:	00021517          	auipc	a0,0x21
    80005bae:	32650513          	addi	a0,a0,806 # 80026ed0 <__func__.0+0x310>
    80005bb2:	3521f0ef          	jal	80024f04 <printf>
    80005bb6:	00043797          	auipc	a5,0x43
    80005bba:	45b7c783          	lbu	a5,1115(a5) # 80049011 <excpt+0x1>
    80005bbe:	c789                	beqz	a5,80005bc8 <virtual_instruction_7+0x15c>
    80005bc0:	6418                	ld	a4,8(s0)
    80005bc2:	47d9                	li	a5,22
    80005bc4:	00f70c63          	beq	a4,a5,80005bdc <virtual_instruction_7+0x170>
    80005bc8:	00021517          	auipc	a0,0x21
    80005bcc:	31050513          	addi	a0,a0,784 # 80026ed8 <__func__.0+0x318>
    80005bd0:	3341f0ef          	jal	80024f04 <printf>
    80005bd4:	02900513          	li	a0,41
    80005bd8:	1361e0ef          	jal	80023d0e <putchar>
    80005bdc:	4529                	li	a0,10
    80005bde:	1301e0ef          	jal	80023d0e <putchar>
    80005be2:	c881                	beqz	s1,80005bf2 <virtual_instruction_7+0x186>
    80005be4:	00043797          	auipc	a5,0x43
    80005be8:	42d7c783          	lbu	a5,1069(a5) # 80049011 <excpt+0x1>
    80005bec:	4481                	li	s1,0
    80005bee:	54079c63          	bnez	a5,80006146 <virtual_instruction_7+0x6da>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005bf2:	4501                	li	a0,0
    80005bf4:	802fb0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005bf8:	0330000f          	fence	rw,rw
    80005bfc:	4785                	li	a5,1
    80005bfe:	00043717          	auipc	a4,0x43
    80005c02:	44073523          	sd	zero,1098(a4) # 80049048 <excpt+0x38>
    80005c06:	00f41023          	sh	a5,0(s0)
    80005c0a:	0330000f          	fence	rw,rw
    asm volatile(
    80005c0e:	4781                	li	a5,0
    80005c10:	6407c7f3          	.insn	4, 0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005c14:	08200593          	li	a1,130
    80005c18:	00022617          	auipc	a2,0x22
    80005c1c:	2d860613          	addi	a2,a2,728 # 80027ef0 <__func__.0+0x1330>
    80005c20:	00021517          	auipc	a0,0x21
    80005c24:	29850513          	addi	a0,a0,664 # 80026eb8 <__func__.0+0x2f8>
    80005c28:	2dc1f0ef          	jal	80024f04 <printf>
    80005c2c:	00043797          	auipc	a5,0x43
    80005c30:	3e57c783          	lbu	a5,997(a5) # 80049011 <excpt+0x1>
    80005c34:	00021597          	auipc	a1,0x21
    80005c38:	25c58593          	addi	a1,a1,604 # 80026e90 <__func__.0+0x2d0>
    80005c3c:	cf89                	beqz	a5,80005c56 <virtual_instruction_7+0x1ea>
    80005c3e:	6418                	ld	a4,8(s0)
    80005c40:	47d9                	li	a5,22
    80005c42:	00021597          	auipc	a1,0x21
    80005c46:	23e58593          	addi	a1,a1,574 # 80026e80 <__func__.0+0x2c0>
    80005c4a:	00f70663          	beq	a4,a5,80005c56 <virtual_instruction_7+0x1ea>
    80005c4e:	00021597          	auipc	a1,0x21
    80005c52:	24258593          	addi	a1,a1,578 # 80026e90 <__func__.0+0x2d0>
    80005c56:	00021517          	auipc	a0,0x21
    80005c5a:	27a50513          	addi	a0,a0,634 # 80026ed0 <__func__.0+0x310>
    80005c5e:	2a61f0ef          	jal	80024f04 <printf>
    80005c62:	00043797          	auipc	a5,0x43
    80005c66:	3af7c783          	lbu	a5,943(a5) # 80049011 <excpt+0x1>
    80005c6a:	c789                	beqz	a5,80005c74 <virtual_instruction_7+0x208>
    80005c6c:	6418                	ld	a4,8(s0)
    80005c6e:	47d9                	li	a5,22
    80005c70:	00f70c63          	beq	a4,a5,80005c88 <virtual_instruction_7+0x21c>
    80005c74:	00021517          	auipc	a0,0x21
    80005c78:	26450513          	addi	a0,a0,612 # 80026ed8 <__func__.0+0x318>
    80005c7c:	2881f0ef          	jal	80024f04 <printf>
    80005c80:	02900513          	li	a0,41
    80005c84:	08a1e0ef          	jal	80023d0e <putchar>
    80005c88:	4529                	li	a0,10
    80005c8a:	0841e0ef          	jal	80023d0e <putchar>
    80005c8e:	c881                	beqz	s1,80005c9e <virtual_instruction_7+0x232>
    80005c90:	00043797          	auipc	a5,0x43
    80005c94:	3817c783          	lbu	a5,897(a5) # 80049011 <excpt+0x1>
    80005c98:	4481                	li	s1,0
    80005c9a:	4c079063          	bnez	a5,8000615a <virtual_instruction_7+0x6ee>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005c9e:	4501                	li	a0,0
    80005ca0:	f57fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005ca4:	0330000f          	fence	rw,rw
    80005ca8:	4785                	li	a5,1
    80005caa:	00043717          	auipc	a4,0x43
    80005cae:	38073f23          	sd	zero,926(a4) # 80049048 <excpt+0x38>
    80005cb2:	00f41023          	sh	a5,0(s0)
    80005cb6:	0330000f          	fence	rw,rw
    asm volatile(
    80005cba:	4781                	li	a5,0
    80005cbc:	6807c7f3          	.insn	4, 0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005cc0:	08200593          	li	a1,130
    80005cc4:	00022617          	auipc	a2,0x22
    80005cc8:	25c60613          	addi	a2,a2,604 # 80027f20 <__func__.0+0x1360>
    80005ccc:	00021517          	auipc	a0,0x21
    80005cd0:	1ec50513          	addi	a0,a0,492 # 80026eb8 <__func__.0+0x2f8>
    80005cd4:	2301f0ef          	jal	80024f04 <printf>
    80005cd8:	00043797          	auipc	a5,0x43
    80005cdc:	3397c783          	lbu	a5,825(a5) # 80049011 <excpt+0x1>
    80005ce0:	00021597          	auipc	a1,0x21
    80005ce4:	1b058593          	addi	a1,a1,432 # 80026e90 <__func__.0+0x2d0>
    80005ce8:	cf89                	beqz	a5,80005d02 <virtual_instruction_7+0x296>
    80005cea:	6418                	ld	a4,8(s0)
    80005cec:	47d9                	li	a5,22
    80005cee:	00021597          	auipc	a1,0x21
    80005cf2:	19258593          	addi	a1,a1,402 # 80026e80 <__func__.0+0x2c0>
    80005cf6:	00f70663          	beq	a4,a5,80005d02 <virtual_instruction_7+0x296>
    80005cfa:	00021597          	auipc	a1,0x21
    80005cfe:	19658593          	addi	a1,a1,406 # 80026e90 <__func__.0+0x2d0>
    80005d02:	00021517          	auipc	a0,0x21
    80005d06:	1ce50513          	addi	a0,a0,462 # 80026ed0 <__func__.0+0x310>
    80005d0a:	1fa1f0ef          	jal	80024f04 <printf>
    80005d0e:	00043797          	auipc	a5,0x43
    80005d12:	3037c783          	lbu	a5,771(a5) # 80049011 <excpt+0x1>
    80005d16:	c789                	beqz	a5,80005d20 <virtual_instruction_7+0x2b4>
    80005d18:	6418                	ld	a4,8(s0)
    80005d1a:	47d9                	li	a5,22
    80005d1c:	00f70c63          	beq	a4,a5,80005d34 <virtual_instruction_7+0x2c8>
    80005d20:	00021517          	auipc	a0,0x21
    80005d24:	1b850513          	addi	a0,a0,440 # 80026ed8 <__func__.0+0x318>
    80005d28:	1dc1f0ef          	jal	80024f04 <printf>
    80005d2c:	02900513          	li	a0,41
    80005d30:	7df1d0ef          	jal	80023d0e <putchar>
    80005d34:	4529                	li	a0,10
    80005d36:	7d91d0ef          	jal	80023d0e <putchar>
    80005d3a:	c881                	beqz	s1,80005d4a <virtual_instruction_7+0x2de>
    80005d3c:	00043797          	auipc	a5,0x43
    80005d40:	2d57c783          	lbu	a5,725(a5) # 80049011 <excpt+0x1>
    80005d44:	4481                	li	s1,0
    80005d46:	40079563          	bnez	a5,80006150 <virtual_instruction_7+0x6e4>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005d4a:	4501                	li	a0,0
    80005d4c:	eabfa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d50:	0330000f          	fence	rw,rw
    80005d54:	4785                	li	a5,1
    80005d56:	00043717          	auipc	a4,0x43
    80005d5a:	2e073923          	sd	zero,754(a4) # 80049048 <excpt+0x38>
    80005d5e:	00f41023          	sh	a5,0(s0)
    80005d62:	0330000f          	fence	rw,rw
    asm volatile(
    80005d66:	4781                	li	a5,0
    80005d68:	6c07c7f3          	.insn	4, 0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005d6c:	08200593          	li	a1,130
    80005d70:	00022617          	auipc	a2,0x22
    80005d74:	1e060613          	addi	a2,a2,480 # 80027f50 <__func__.0+0x1390>
    80005d78:	00021517          	auipc	a0,0x21
    80005d7c:	14050513          	addi	a0,a0,320 # 80026eb8 <__func__.0+0x2f8>
    80005d80:	1841f0ef          	jal	80024f04 <printf>
    80005d84:	00043797          	auipc	a5,0x43
    80005d88:	28d7c783          	lbu	a5,653(a5) # 80049011 <excpt+0x1>
    80005d8c:	00021597          	auipc	a1,0x21
    80005d90:	10458593          	addi	a1,a1,260 # 80026e90 <__func__.0+0x2d0>
    80005d94:	cf89                	beqz	a5,80005dae <virtual_instruction_7+0x342>
    80005d96:	6418                	ld	a4,8(s0)
    80005d98:	47d9                	li	a5,22
    80005d9a:	00021597          	auipc	a1,0x21
    80005d9e:	0e658593          	addi	a1,a1,230 # 80026e80 <__func__.0+0x2c0>
    80005da2:	00f70663          	beq	a4,a5,80005dae <virtual_instruction_7+0x342>
    80005da6:	00021597          	auipc	a1,0x21
    80005daa:	0ea58593          	addi	a1,a1,234 # 80026e90 <__func__.0+0x2d0>
    80005dae:	00021517          	auipc	a0,0x21
    80005db2:	12250513          	addi	a0,a0,290 # 80026ed0 <__func__.0+0x310>
    80005db6:	14e1f0ef          	jal	80024f04 <printf>
    80005dba:	00043797          	auipc	a5,0x43
    80005dbe:	2577c783          	lbu	a5,599(a5) # 80049011 <excpt+0x1>
    80005dc2:	c789                	beqz	a5,80005dcc <virtual_instruction_7+0x360>
    80005dc4:	6418                	ld	a4,8(s0)
    80005dc6:	47d9                	li	a5,22
    80005dc8:	00f70c63          	beq	a4,a5,80005de0 <virtual_instruction_7+0x374>
    80005dcc:	00021517          	auipc	a0,0x21
    80005dd0:	10c50513          	addi	a0,a0,268 # 80026ed8 <__func__.0+0x318>
    80005dd4:	1301f0ef          	jal	80024f04 <printf>
    80005dd8:	02900513          	li	a0,41
    80005ddc:	7331d0ef          	jal	80023d0e <putchar>
    80005de0:	4529                	li	a0,10
    80005de2:	72d1d0ef          	jal	80023d0e <putchar>
    80005de6:	c881                	beqz	s1,80005df6 <virtual_instruction_7+0x38a>
    80005de8:	00043797          	auipc	a5,0x43
    80005dec:	2297c783          	lbu	a5,553(a5) # 80049011 <excpt+0x1>
    80005df0:	4481                	li	s1,0
    80005df2:	36079e63          	bnez	a5,8000616e <virtual_instruction_7+0x702>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005df6:	4501                	li	a0,0
    80005df8:	dfffa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005dfc:	0330000f          	fence	rw,rw
    80005e00:	4785                	li	a5,1
    80005e02:	00043717          	auipc	a4,0x43
    80005e06:	24073323          	sd	zero,582(a4) # 80049048 <excpt+0x38>
    80005e0a:	00f41023          	sh	a5,0(s0)
    80005e0e:	0330000f          	fence	rw,rw
    asm volatile(
    80005e12:	37ab77b7          	lui	a5,0x37ab7
    80005e16:	078a                	slli	a5,a5,0x2
    80005e18:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005e1c:	4701                	li	a4,0
    80005e1e:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005e22:	640c                	ld	a1,8(s0)
    80005e24:	00022517          	auipc	a0,0x22
    80005e28:	bc450513          	addi	a0,a0,-1084 # 800279e8 <__func__.0+0xe28>
    80005e2c:	0d81f0ef          	jal	80024f04 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005e30:	08200593          	li	a1,130
    80005e34:	00022617          	auipc	a2,0x22
    80005e38:	14c60613          	addi	a2,a2,332 # 80027f80 <__func__.0+0x13c0>
    80005e3c:	00021517          	auipc	a0,0x21
    80005e40:	07c50513          	addi	a0,a0,124 # 80026eb8 <__func__.0+0x2f8>
    80005e44:	0c01f0ef          	jal	80024f04 <printf>
    80005e48:	00043797          	auipc	a5,0x43
    80005e4c:	1c97c783          	lbu	a5,457(a5) # 80049011 <excpt+0x1>
    80005e50:	00021597          	auipc	a1,0x21
    80005e54:	04058593          	addi	a1,a1,64 # 80026e90 <__func__.0+0x2d0>
    80005e58:	cf89                	beqz	a5,80005e72 <virtual_instruction_7+0x406>
    80005e5a:	6418                	ld	a4,8(s0)
    80005e5c:	47d9                	li	a5,22
    80005e5e:	00021597          	auipc	a1,0x21
    80005e62:	02258593          	addi	a1,a1,34 # 80026e80 <__func__.0+0x2c0>
    80005e66:	00f70663          	beq	a4,a5,80005e72 <virtual_instruction_7+0x406>
    80005e6a:	00021597          	auipc	a1,0x21
    80005e6e:	02658593          	addi	a1,a1,38 # 80026e90 <__func__.0+0x2d0>
    80005e72:	00021517          	auipc	a0,0x21
    80005e76:	05e50513          	addi	a0,a0,94 # 80026ed0 <__func__.0+0x310>
    80005e7a:	08a1f0ef          	jal	80024f04 <printf>
    80005e7e:	00043797          	auipc	a5,0x43
    80005e82:	1937c783          	lbu	a5,403(a5) # 80049011 <excpt+0x1>
    80005e86:	c789                	beqz	a5,80005e90 <virtual_instruction_7+0x424>
    80005e88:	6418                	ld	a4,8(s0)
    80005e8a:	47d9                	li	a5,22
    80005e8c:	00f70c63          	beq	a4,a5,80005ea4 <virtual_instruction_7+0x438>
    80005e90:	00021517          	auipc	a0,0x21
    80005e94:	04850513          	addi	a0,a0,72 # 80026ed8 <__func__.0+0x318>
    80005e98:	06c1f0ef          	jal	80024f04 <printf>
    80005e9c:	02900513          	li	a0,41
    80005ea0:	66f1d0ef          	jal	80023d0e <putchar>
    80005ea4:	4529                	li	a0,10
    80005ea6:	6691d0ef          	jal	80023d0e <putchar>
    80005eaa:	c881                	beqz	s1,80005eba <virtual_instruction_7+0x44e>
    80005eac:	00043797          	auipc	a5,0x43
    80005eb0:	1657c783          	lbu	a5,357(a5) # 80049011 <excpt+0x1>
    80005eb4:	4481                	li	s1,0
    80005eb6:	2a079763          	bnez	a5,80006164 <virtual_instruction_7+0x6f8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005eba:	4501                	li	a0,0
    80005ebc:	d3bfa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005ec0:	0330000f          	fence	rw,rw
    80005ec4:	4785                	li	a5,1
    80005ec6:	00043717          	auipc	a4,0x43
    80005eca:	18073123          	sd	zero,386(a4) # 80049048 <excpt+0x38>
    80005ece:	00f41023          	sh	a5,0(s0)
    80005ed2:	0330000f          	fence	rw,rw
    asm volatile(
    80005ed6:	37ab77b7          	lui	a5,0x37ab7
    80005eda:	078a                	slli	a5,a5,0x2
    80005edc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005ee0:	4701                	li	a4,0
    80005ee2:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005ee6:	640c                	ld	a1,8(s0)
    80005ee8:	00022517          	auipc	a0,0x22
    80005eec:	b0050513          	addi	a0,a0,-1280 # 800279e8 <__func__.0+0xe28>
    80005ef0:	0141f0ef          	jal	80024f04 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005ef4:	08200593          	li	a1,130
    80005ef8:	00022617          	auipc	a2,0x22
    80005efc:	08860613          	addi	a2,a2,136 # 80027f80 <__func__.0+0x13c0>
    80005f00:	00021517          	auipc	a0,0x21
    80005f04:	fb850513          	addi	a0,a0,-72 # 80026eb8 <__func__.0+0x2f8>
    80005f08:	7fd1e0ef          	jal	80024f04 <printf>
    80005f0c:	00043797          	auipc	a5,0x43
    80005f10:	1057c783          	lbu	a5,261(a5) # 80049011 <excpt+0x1>
    80005f14:	00021597          	auipc	a1,0x21
    80005f18:	f7c58593          	addi	a1,a1,-132 # 80026e90 <__func__.0+0x2d0>
    80005f1c:	cf89                	beqz	a5,80005f36 <virtual_instruction_7+0x4ca>
    80005f1e:	6418                	ld	a4,8(s0)
    80005f20:	47d9                	li	a5,22
    80005f22:	00021597          	auipc	a1,0x21
    80005f26:	f5e58593          	addi	a1,a1,-162 # 80026e80 <__func__.0+0x2c0>
    80005f2a:	00f70663          	beq	a4,a5,80005f36 <virtual_instruction_7+0x4ca>
    80005f2e:	00021597          	auipc	a1,0x21
    80005f32:	f6258593          	addi	a1,a1,-158 # 80026e90 <__func__.0+0x2d0>
    80005f36:	00021517          	auipc	a0,0x21
    80005f3a:	f9a50513          	addi	a0,a0,-102 # 80026ed0 <__func__.0+0x310>
    80005f3e:	7c71e0ef          	jal	80024f04 <printf>
    80005f42:	00043797          	auipc	a5,0x43
    80005f46:	0cf7c783          	lbu	a5,207(a5) # 80049011 <excpt+0x1>
    80005f4a:	c789                	beqz	a5,80005f54 <virtual_instruction_7+0x4e8>
    80005f4c:	6418                	ld	a4,8(s0)
    80005f4e:	47d9                	li	a5,22
    80005f50:	00f70c63          	beq	a4,a5,80005f68 <virtual_instruction_7+0x4fc>
    80005f54:	00021517          	auipc	a0,0x21
    80005f58:	f8450513          	addi	a0,a0,-124 # 80026ed8 <__func__.0+0x318>
    80005f5c:	7a91e0ef          	jal	80024f04 <printf>
    80005f60:	02900513          	li	a0,41
    80005f64:	5ab1d0ef          	jal	80023d0e <putchar>
    80005f68:	4529                	li	a0,10
    80005f6a:	5a51d0ef          	jal	80023d0e <putchar>
    80005f6e:	c881                	beqz	s1,80005f7e <virtual_instruction_7+0x512>
    80005f70:	00043797          	auipc	a5,0x43
    80005f74:	0a17c783          	lbu	a5,161(a5) # 80049011 <excpt+0x1>
    80005f78:	4481                	li	s1,0
    80005f7a:	20079463          	bnez	a5,80006182 <virtual_instruction_7+0x716>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005f7e:	4501                	li	a0,0
    80005f80:	c77fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80005f84:	0330000f          	fence	rw,rw
    80005f88:	4785                	li	a5,1
    80005f8a:	00043717          	auipc	a4,0x43
    80005f8e:	0a073f23          	sd	zero,190(a4) # 80049048 <excpt+0x38>
    80005f92:	00f41023          	sh	a5,0(s0)
    80005f96:	0330000f          	fence	rw,rw
    asm volatile(
    80005f9a:	37ab77b7          	lui	a5,0x37ab7
    80005f9e:	078a                	slli	a5,a5,0x2
    80005fa0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005fa4:	4701                	li	a4,0
    80005fa6:	6af74073          	.insn	4, 0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005faa:	640c                	ld	a1,8(s0)
    80005fac:	00022517          	auipc	a0,0x22
    80005fb0:	a3c50513          	addi	a0,a0,-1476 # 800279e8 <__func__.0+0xe28>
    80005fb4:	7511e0ef          	jal	80024f04 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005fb8:	08200593          	li	a1,130
    80005fbc:	00022617          	auipc	a2,0x22
    80005fc0:	fc460613          	addi	a2,a2,-60 # 80027f80 <__func__.0+0x13c0>
    80005fc4:	00021517          	auipc	a0,0x21
    80005fc8:	ef450513          	addi	a0,a0,-268 # 80026eb8 <__func__.0+0x2f8>
    80005fcc:	7391e0ef          	jal	80024f04 <printf>
    80005fd0:	00043797          	auipc	a5,0x43
    80005fd4:	0417c783          	lbu	a5,65(a5) # 80049011 <excpt+0x1>
    80005fd8:	00021597          	auipc	a1,0x21
    80005fdc:	eb858593          	addi	a1,a1,-328 # 80026e90 <__func__.0+0x2d0>
    80005fe0:	cf89                	beqz	a5,80005ffa <virtual_instruction_7+0x58e>
    80005fe2:	6418                	ld	a4,8(s0)
    80005fe4:	47d9                	li	a5,22
    80005fe6:	00021597          	auipc	a1,0x21
    80005fea:	e9a58593          	addi	a1,a1,-358 # 80026e80 <__func__.0+0x2c0>
    80005fee:	00f70663          	beq	a4,a5,80005ffa <virtual_instruction_7+0x58e>
    80005ff2:	00021597          	auipc	a1,0x21
    80005ff6:	e9e58593          	addi	a1,a1,-354 # 80026e90 <__func__.0+0x2d0>
    80005ffa:	00021517          	auipc	a0,0x21
    80005ffe:	ed650513          	addi	a0,a0,-298 # 80026ed0 <__func__.0+0x310>
    80006002:	7031e0ef          	jal	80024f04 <printf>
    80006006:	00043797          	auipc	a5,0x43
    8000600a:	00b7c783          	lbu	a5,11(a5) # 80049011 <excpt+0x1>
    8000600e:	c789                	beqz	a5,80006018 <virtual_instruction_7+0x5ac>
    80006010:	6418                	ld	a4,8(s0)
    80006012:	47d9                	li	a5,22
    80006014:	00f70c63          	beq	a4,a5,8000602c <virtual_instruction_7+0x5c0>
    80006018:	00021517          	auipc	a0,0x21
    8000601c:	ec050513          	addi	a0,a0,-320 # 80026ed8 <__func__.0+0x318>
    80006020:	6e51e0ef          	jal	80024f04 <printf>
    80006024:	02900513          	li	a0,41
    80006028:	4e71d0ef          	jal	80023d0e <putchar>
    8000602c:	4529                	li	a0,10
    8000602e:	4e11d0ef          	jal	80023d0e <putchar>
    80006032:	c881                	beqz	s1,80006042 <virtual_instruction_7+0x5d6>
    80006034:	00043797          	auipc	a5,0x43
    80006038:	fdd7c783          	lbu	a5,-35(a5) # 80049011 <excpt+0x1>
    8000603c:	4481                	li	s1,0
    8000603e:	12079d63          	bnez	a5,80006178 <virtual_instruction_7+0x70c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80006042:	4501                	li	a0,0
    80006044:	bb3fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006048:	0330000f          	fence	rw,rw
    8000604c:	4785                	li	a5,1
    8000604e:	00043717          	auipc	a4,0x43
    80006052:	fe073d23          	sd	zero,-6(a4) # 80049048 <excpt+0x38>
    80006056:	00f41023          	sh	a5,0(s0)
    8000605a:	0330000f          	fence	rw,rw
    asm volatile(
    8000605e:	37ab77b7          	lui	a5,0x37ab7
    80006062:	078a                	slli	a5,a5,0x2
    80006064:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80006068:	4701                	li	a4,0
    8000606a:	66f74073          	.insn	4, 0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    8000606e:	640c                	ld	a1,8(s0)
    80006070:	00022517          	auipc	a0,0x22
    80006074:	97850513          	addi	a0,a0,-1672 # 800279e8 <__func__.0+0xe28>
    80006078:	68d1e0ef          	jal	80024f04 <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000607c:	08200593          	li	a1,130
    80006080:	00022617          	auipc	a2,0x22
    80006084:	f0060613          	addi	a2,a2,-256 # 80027f80 <__func__.0+0x13c0>
    80006088:	00021517          	auipc	a0,0x21
    8000608c:	e3050513          	addi	a0,a0,-464 # 80026eb8 <__func__.0+0x2f8>
    80006090:	6751e0ef          	jal	80024f04 <printf>
    80006094:	00043797          	auipc	a5,0x43
    80006098:	f7d7c783          	lbu	a5,-131(a5) # 80049011 <excpt+0x1>
    8000609c:	00021597          	auipc	a1,0x21
    800060a0:	df458593          	addi	a1,a1,-524 # 80026e90 <__func__.0+0x2d0>
    800060a4:	cf89                	beqz	a5,800060be <virtual_instruction_7+0x652>
    800060a6:	6418                	ld	a4,8(s0)
    800060a8:	47d9                	li	a5,22
    800060aa:	00021597          	auipc	a1,0x21
    800060ae:	dd658593          	addi	a1,a1,-554 # 80026e80 <__func__.0+0x2c0>
    800060b2:	00f70663          	beq	a4,a5,800060be <virtual_instruction_7+0x652>
    800060b6:	00021597          	auipc	a1,0x21
    800060ba:	dda58593          	addi	a1,a1,-550 # 80026e90 <__func__.0+0x2d0>
    800060be:	00021517          	auipc	a0,0x21
    800060c2:	e1250513          	addi	a0,a0,-494 # 80026ed0 <__func__.0+0x310>
    800060c6:	63f1e0ef          	jal	80024f04 <printf>
    800060ca:	00043797          	auipc	a5,0x43
    800060ce:	f477c783          	lbu	a5,-185(a5) # 80049011 <excpt+0x1>
    800060d2:	c789                	beqz	a5,800060dc <virtual_instruction_7+0x670>
    800060d4:	6418                	ld	a4,8(s0)
    800060d6:	47d9                	li	a5,22
    800060d8:	00f70c63          	beq	a4,a5,800060f0 <virtual_instruction_7+0x684>
    800060dc:	00021517          	auipc	a0,0x21
    800060e0:	dfc50513          	addi	a0,a0,-516 # 80026ed8 <__func__.0+0x318>
    800060e4:	6211e0ef          	jal	80024f04 <printf>
    800060e8:	02900513          	li	a0,41
    800060ec:	4231d0ef          	jal	80023d0e <putchar>
    800060f0:	4529                	li	a0,10
    800060f2:	41d1d0ef          	jal	80023d0e <putchar>
    800060f6:	c095                	beqz	s1,8000611a <virtual_instruction_7+0x6ae>
    800060f8:	00043497          	auipc	s1,0x43
    800060fc:	f194c483          	lbu	s1,-231(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80006100:	00021597          	auipc	a1,0x21
    80006104:	d9058593          	addi	a1,a1,-624 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006108:	cc91                	beqz	s1,80006124 <virtual_instruction_7+0x6b8>
    8000610a:	6418                	ld	a4,8(s0)
    8000610c:	47d9                	li	a5,22
    TEST_END();
    8000610e:	00021597          	auipc	a1,0x21
    80006112:	d7258593          	addi	a1,a1,-654 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006116:	00f70763          	beq	a4,a5,80006124 <virtual_instruction_7+0x6b8>
    8000611a:	4481                	li	s1,0
    TEST_END();
    8000611c:	00021597          	auipc	a1,0x21
    80006120:	d7458593          	addi	a1,a1,-652 # 80026e90 <__func__.0+0x2d0>
    80006124:	00021517          	auipc	a0,0x21
    80006128:	e1450513          	addi	a0,a0,-492 # 80026f38 <__func__.0+0x378>
    8000612c:	5d91e0ef          	jal	80024f04 <printf>
    80006130:	4511                	li	a0,4
    80006132:	ac5fa0ef          	jal	80000bf6 <goto_priv>
    80006136:	b76fb0ef          	jal	800014ac <reset_state>
}
    8000613a:	60e2                	ld	ra,24(sp)
    8000613c:	6442                	ld	s0,16(sp)
    8000613e:	8526                	mv	a0,s1
    80006140:	64a2                	ld	s1,8(sp)
    80006142:	6105                	addi	sp,sp,32
    80006144:	8082                	ret
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80006146:	6404                	ld	s1,8(s0)
    80006148:	14a9                	addi	s1,s1,-22
    8000614a:	0014b493          	seqz	s1,s1
    8000614e:	b455                	j	80005bf2 <virtual_instruction_7+0x186>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80006150:	6404                	ld	s1,8(s0)
    80006152:	14a9                	addi	s1,s1,-22
    80006154:	0014b493          	seqz	s1,s1
    80006158:	becd                	j	80005d4a <virtual_instruction_7+0x2de>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    8000615a:	6404                	ld	s1,8(s0)
    8000615c:	14a9                	addi	s1,s1,-22
    8000615e:	0014b493          	seqz	s1,s1
    80006162:	be35                	j	80005c9e <virtual_instruction_7+0x232>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006164:	6404                	ld	s1,8(s0)
    80006166:	14a9                	addi	s1,s1,-22
    80006168:	0014b493          	seqz	s1,s1
    8000616c:	b3b9                	j	80005eba <virtual_instruction_7+0x44e>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    8000616e:	6404                	ld	s1,8(s0)
    80006170:	14a9                	addi	s1,s1,-22
    80006172:	0014b493          	seqz	s1,s1
    80006176:	b141                	j	80005df6 <virtual_instruction_7+0x38a>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006178:	6404                	ld	s1,8(s0)
    8000617a:	14a9                	addi	s1,s1,-22
    8000617c:	0014b493          	seqz	s1,s1
    80006180:	b5c9                	j	80006042 <virtual_instruction_7+0x5d6>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006182:	6404                	ld	s1,8(s0)
    80006184:	14a9                	addi	s1,s1,-22
    80006186:	0014b493          	seqz	s1,s1
    8000618a:	bbd5                	j	80005f7e <virtual_instruction_7+0x512>

000000008000618c <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    8000618c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000618e:	0001f597          	auipc	a1,0x1f
    80006192:	5ba58593          	addi	a1,a1,1466 # 80025748 <__func__.4>
    80006196:	00021517          	auipc	a0,0x21
    8000619a:	d0a50513          	addi	a0,a0,-758 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_8() {
    8000619e:	ec06                	sd	ra,24(sp)
    800061a0:	e822                	sd	s0,16(sp)
    800061a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800061a4:	5611e0ef          	jal	80024f04 <printf>
    800061a8:	4529                	li	a0,10
    800061aa:	3651d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    800061ae:	4511                	li	a0,4
    800061b0:	a47fa0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    800061b4:	004007b7          	lui	a5,0x400
    800061b8:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800061bc:	002007b7          	lui	a5,0x200
    800061c0:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    800061c4:	4501                	li	a0,0
    800061c6:	a31fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800061ca:	0330000f          	fence	rw,rw
    800061ce:	00043417          	auipc	s0,0x43
    800061d2:	e4240413          	addi	s0,s0,-446 # 80049010 <excpt>
    800061d6:	4785                	li	a5,1
    800061d8:	00043717          	auipc	a4,0x43
    800061dc:	e6073823          	sd	zero,-400(a4) # 80049048 <excpt+0x38>
    800061e0:	00f41023          	sh	a5,0(s0)
    800061e4:	0330000f          	fence	rw,rw
    asm volatile(
    800061e8:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800061ec:	08200593          	li	a1,130
    800061f0:	00022617          	auipc	a2,0x22
    800061f4:	dc060613          	addi	a2,a2,-576 # 80027fb0 <__func__.0+0x13f0>
    800061f8:	00021517          	auipc	a0,0x21
    800061fc:	cc050513          	addi	a0,a0,-832 # 80026eb8 <__func__.0+0x2f8>
    80006200:	5051e0ef          	jal	80024f04 <printf>
    80006204:	00043797          	auipc	a5,0x43
    80006208:	e0d7c783          	lbu	a5,-499(a5) # 80049011 <excpt+0x1>
    8000620c:	00021597          	auipc	a1,0x21
    80006210:	c8458593          	addi	a1,a1,-892 # 80026e90 <__func__.0+0x2d0>
    80006214:	cf89                	beqz	a5,8000622e <virtual_instruction_8+0xa2>
    80006216:	6418                	ld	a4,8(s0)
    80006218:	47d9                	li	a5,22
    8000621a:	00021597          	auipc	a1,0x21
    8000621e:	c6658593          	addi	a1,a1,-922 # 80026e80 <__func__.0+0x2c0>
    80006222:	00f70663          	beq	a4,a5,8000622e <virtual_instruction_8+0xa2>
    80006226:	00021597          	auipc	a1,0x21
    8000622a:	c6a58593          	addi	a1,a1,-918 # 80026e90 <__func__.0+0x2d0>
    8000622e:	00021517          	auipc	a0,0x21
    80006232:	ca250513          	addi	a0,a0,-862 # 80026ed0 <__func__.0+0x310>
    80006236:	4cf1e0ef          	jal	80024f04 <printf>
    8000623a:	00043797          	auipc	a5,0x43
    8000623e:	dd77c783          	lbu	a5,-553(a5) # 80049011 <excpt+0x1>
    80006242:	c789                	beqz	a5,8000624c <virtual_instruction_8+0xc0>
    80006244:	6418                	ld	a4,8(s0)
    80006246:	47d9                	li	a5,22
    80006248:	00f70c63          	beq	a4,a5,80006260 <virtual_instruction_8+0xd4>
    8000624c:	00021517          	auipc	a0,0x21
    80006250:	c8c50513          	addi	a0,a0,-884 # 80026ed8 <__func__.0+0x318>
    80006254:	4b11e0ef          	jal	80024f04 <printf>
    80006258:	02900513          	li	a0,41
    8000625c:	2b31d0ef          	jal	80023d0e <putchar>
    80006260:	4529                	li	a0,10
    80006262:	2ad1d0ef          	jal	80023d0e <putchar>
    80006266:	00043497          	auipc	s1,0x43
    8000626a:	dab4c483          	lbu	s1,-597(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    8000626e:	00021597          	auipc	a1,0x21
    80006272:	c2258593          	addi	a1,a1,-990 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006276:	cc91                	beqz	s1,80006292 <virtual_instruction_8+0x106>
    80006278:	6418                	ld	a4,8(s0)
    8000627a:	47d9                	li	a5,22
    TEST_END();
    8000627c:	00021597          	auipc	a1,0x21
    80006280:	c0458593          	addi	a1,a1,-1020 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006284:	00f70763          	beq	a4,a5,80006292 <virtual_instruction_8+0x106>
    80006288:	4481                	li	s1,0
    TEST_END();
    8000628a:	00021597          	auipc	a1,0x21
    8000628e:	c0658593          	addi	a1,a1,-1018 # 80026e90 <__func__.0+0x2d0>
    80006292:	00021517          	auipc	a0,0x21
    80006296:	ca650513          	addi	a0,a0,-858 # 80026f38 <__func__.0+0x378>
    8000629a:	46b1e0ef          	jal	80024f04 <printf>
    8000629e:	4511                	li	a0,4
    800062a0:	957fa0ef          	jal	80000bf6 <goto_priv>
    800062a4:	a08fb0ef          	jal	800014ac <reset_state>
}
    800062a8:	60e2                	ld	ra,24(sp)
    800062aa:	6442                	ld	s0,16(sp)
    800062ac:	8526                	mv	a0,s1
    800062ae:	64a2                	ld	s1,8(sp)
    800062b0:	6105                	addi	sp,sp,32
    800062b2:	8082                	ret

00000000800062b4 <virtual_instruction_9>:
bool virtual_instruction_9() {
    800062b4:	1101                	addi	sp,sp,-32

    TEST_START();
    800062b6:	0001f597          	auipc	a1,0x1f
    800062ba:	4aa58593          	addi	a1,a1,1194 # 80025760 <__func__.3>
    800062be:	00021517          	auipc	a0,0x21
    800062c2:	be250513          	addi	a0,a0,-1054 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_9() {
    800062c6:	ec06                	sd	ra,24(sp)
    800062c8:	e822                	sd	s0,16(sp)
    800062ca:	e426                	sd	s1,8(sp)
    TEST_START();
    800062cc:	4391e0ef          	jal	80024f04 <printf>
    800062d0:	4529                	li	a0,10
    800062d2:	23d1d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    800062d6:	4511                	li	a0,4
    800062d8:	91ffa0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800062dc:	002007b7          	lui	a5,0x200
    800062e0:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    800062e4:	4501                	li	a0,0
    800062e6:	911fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800062ea:	0330000f          	fence	rw,rw
    800062ee:	00043417          	auipc	s0,0x43
    800062f2:	d2240413          	addi	s0,s0,-734 # 80049010 <excpt>
    800062f6:	4785                	li	a5,1
    800062f8:	00043717          	auipc	a4,0x43
    800062fc:	d4073823          	sd	zero,-688(a4) # 80049048 <excpt+0x38>
    80006300:	00f41023          	sh	a5,0(s0)
    80006304:	0330000f          	fence	rw,rw
    asm volatile ("sfence.vma \n\t");
    80006308:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    8000630c:	08200593          	li	a1,130
    80006310:	00022617          	auipc	a2,0x22
    80006314:	ce860613          	addi	a2,a2,-792 # 80027ff8 <__func__.0+0x1438>
    80006318:	00021517          	auipc	a0,0x21
    8000631c:	ba050513          	addi	a0,a0,-1120 # 80026eb8 <__func__.0+0x2f8>
    80006320:	3e51e0ef          	jal	80024f04 <printf>
    80006324:	00043797          	auipc	a5,0x43
    80006328:	ced7c783          	lbu	a5,-787(a5) # 80049011 <excpt+0x1>
    8000632c:	00021597          	auipc	a1,0x21
    80006330:	b6458593          	addi	a1,a1,-1180 # 80026e90 <__func__.0+0x2d0>
    80006334:	cf89                	beqz	a5,8000634e <virtual_instruction_9+0x9a>
    80006336:	6418                	ld	a4,8(s0)
    80006338:	47d9                	li	a5,22
    8000633a:	00021597          	auipc	a1,0x21
    8000633e:	b4658593          	addi	a1,a1,-1210 # 80026e80 <__func__.0+0x2c0>
    80006342:	00f70663          	beq	a4,a5,8000634e <virtual_instruction_9+0x9a>
    80006346:	00021597          	auipc	a1,0x21
    8000634a:	b4a58593          	addi	a1,a1,-1206 # 80026e90 <__func__.0+0x2d0>
    8000634e:	00021517          	auipc	a0,0x21
    80006352:	b8250513          	addi	a0,a0,-1150 # 80026ed0 <__func__.0+0x310>
    80006356:	3af1e0ef          	jal	80024f04 <printf>
    8000635a:	00043797          	auipc	a5,0x43
    8000635e:	cb77c783          	lbu	a5,-841(a5) # 80049011 <excpt+0x1>
    80006362:	c789                	beqz	a5,8000636c <virtual_instruction_9+0xb8>
    80006364:	6418                	ld	a4,8(s0)
    80006366:	47d9                	li	a5,22
    80006368:	00f70c63          	beq	a4,a5,80006380 <virtual_instruction_9+0xcc>
    8000636c:	00021517          	auipc	a0,0x21
    80006370:	b6c50513          	addi	a0,a0,-1172 # 80026ed8 <__func__.0+0x318>
    80006374:	3911e0ef          	jal	80024f04 <printf>
    80006378:	02900513          	li	a0,41
    8000637c:	1931d0ef          	jal	80023d0e <putchar>
    80006380:	4529                	li	a0,10
    80006382:	18d1d0ef          	jal	80023d0e <putchar>
    80006386:	00043497          	auipc	s1,0x43
    8000638a:	c8b4c483          	lbu	s1,-885(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    8000638e:	00021597          	auipc	a1,0x21
    80006392:	b0258593          	addi	a1,a1,-1278 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    80006396:	cc91                	beqz	s1,800063b2 <virtual_instruction_9+0xfe>
    80006398:	6418                	ld	a4,8(s0)
    8000639a:	47d9                	li	a5,22
    TEST_END();
    8000639c:	00021597          	auipc	a1,0x21
    800063a0:	ae458593          	addi	a1,a1,-1308 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800063a4:	00f70763          	beq	a4,a5,800063b2 <virtual_instruction_9+0xfe>
    800063a8:	4481                	li	s1,0
    TEST_END();
    800063aa:	00021597          	auipc	a1,0x21
    800063ae:	ae658593          	addi	a1,a1,-1306 # 80026e90 <__func__.0+0x2d0>
    800063b2:	00021517          	auipc	a0,0x21
    800063b6:	b8650513          	addi	a0,a0,-1146 # 80026f38 <__func__.0+0x378>
    800063ba:	34b1e0ef          	jal	80024f04 <printf>
    800063be:	4511                	li	a0,4
    800063c0:	837fa0ef          	jal	80000bf6 <goto_priv>
    800063c4:	8e8fb0ef          	jal	800014ac <reset_state>
}
    800063c8:	60e2                	ld	ra,24(sp)
    800063ca:	6442                	ld	s0,16(sp)
    800063cc:	8526                	mv	a0,s1
    800063ce:	64a2                	ld	s1,8(sp)
    800063d0:	6105                	addi	sp,sp,32
    800063d2:	8082                	ret

00000000800063d4 <virtual_instruction_10>:
bool virtual_instruction_10() {
    800063d4:	1101                	addi	sp,sp,-32

    TEST_START();
    800063d6:	0001f597          	auipc	a1,0x1f
    800063da:	3a258593          	addi	a1,a1,930 # 80025778 <__func__.2>
    800063de:	00021517          	auipc	a0,0x21
    800063e2:	ac250513          	addi	a0,a0,-1342 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_10() {
    800063e6:	ec06                	sd	ra,24(sp)
    800063e8:	e822                	sd	s0,16(sp)
    800063ea:	e426                	sd	s1,8(sp)
    TEST_START();
    800063ec:	3191e0ef          	jal	80024f04 <printf>
    800063f0:	4529                	li	a0,10
    800063f2:	11d1d0ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_M);
    800063f6:	4511                	li	a0,4
    800063f8:	ffefa0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    800063fc:	002007b7          	lui	a5,0x200
    80006400:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006404:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    80006408:	4501                	li	a0,0
    8000640a:	fecfa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8000640e:	0330000f          	fence	rw,rw
    80006412:	00043417          	auipc	s0,0x43
    80006416:	bfe40413          	addi	s0,s0,-1026 # 80049010 <excpt>
    8000641a:	4785                	li	a5,1
    8000641c:	00043717          	auipc	a4,0x43
    80006420:	c2073623          	sd	zero,-980(a4) # 80049048 <excpt+0x38>
    80006424:	00f41023          	sh	a5,0(s0)
    80006428:	0330000f          	fence	rw,rw
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    8000642c:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006430:	08200593          	li	a1,130
    80006434:	00022617          	auipc	a2,0x22
    80006438:	c0c60613          	addi	a2,a2,-1012 # 80028040 <__func__.0+0x1480>
    8000643c:	00021517          	auipc	a0,0x21
    80006440:	a7c50513          	addi	a0,a0,-1412 # 80026eb8 <__func__.0+0x2f8>
    80006444:	2c11e0ef          	jal	80024f04 <printf>
    80006448:	00043797          	auipc	a5,0x43
    8000644c:	bc97c783          	lbu	a5,-1079(a5) # 80049011 <excpt+0x1>
    80006450:	00021597          	auipc	a1,0x21
    80006454:	a4058593          	addi	a1,a1,-1472 # 80026e90 <__func__.0+0x2d0>
    80006458:	cf89                	beqz	a5,80006472 <virtual_instruction_10+0x9e>
    8000645a:	6418                	ld	a4,8(s0)
    8000645c:	47d9                	li	a5,22
    8000645e:	00021597          	auipc	a1,0x21
    80006462:	a2258593          	addi	a1,a1,-1502 # 80026e80 <__func__.0+0x2c0>
    80006466:	00f70663          	beq	a4,a5,80006472 <virtual_instruction_10+0x9e>
    8000646a:	00021597          	auipc	a1,0x21
    8000646e:	a2658593          	addi	a1,a1,-1498 # 80026e90 <__func__.0+0x2d0>
    80006472:	00021517          	auipc	a0,0x21
    80006476:	a5e50513          	addi	a0,a0,-1442 # 80026ed0 <__func__.0+0x310>
    8000647a:	28b1e0ef          	jal	80024f04 <printf>
    8000647e:	00043797          	auipc	a5,0x43
    80006482:	b937c783          	lbu	a5,-1133(a5) # 80049011 <excpt+0x1>
    80006486:	c789                	beqz	a5,80006490 <virtual_instruction_10+0xbc>
    80006488:	6418                	ld	a4,8(s0)
    8000648a:	47d9                	li	a5,22
    8000648c:	00f70c63          	beq	a4,a5,800064a4 <virtual_instruction_10+0xd0>
    80006490:	00021517          	auipc	a0,0x21
    80006494:	a4850513          	addi	a0,a0,-1464 # 80026ed8 <__func__.0+0x318>
    80006498:	26d1e0ef          	jal	80024f04 <printf>
    8000649c:	02900513          	li	a0,41
    800064a0:	06f1d0ef          	jal	80023d0e <putchar>
    800064a4:	4529                	li	a0,10
    800064a6:	0691d0ef          	jal	80023d0e <putchar>
    800064aa:	00043497          	auipc	s1,0x43
    800064ae:	b674c483          	lbu	s1,-1177(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    800064b2:	00021597          	auipc	a1,0x21
    800064b6:	9de58593          	addi	a1,a1,-1570 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800064ba:	cc91                	beqz	s1,800064d6 <virtual_instruction_10+0x102>
    800064bc:	6418                	ld	a4,8(s0)
    800064be:	47d9                	li	a5,22
    TEST_END();
    800064c0:	00021597          	auipc	a1,0x21
    800064c4:	9c058593          	addi	a1,a1,-1600 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800064c8:	00f70763          	beq	a4,a5,800064d6 <virtual_instruction_10+0x102>
    800064cc:	4481                	li	s1,0
    TEST_END();
    800064ce:	00021597          	auipc	a1,0x21
    800064d2:	9c258593          	addi	a1,a1,-1598 # 80026e90 <__func__.0+0x2d0>
    800064d6:	00021517          	auipc	a0,0x21
    800064da:	a6250513          	addi	a0,a0,-1438 # 80026f38 <__func__.0+0x378>
    800064de:	2271e0ef          	jal	80024f04 <printf>
    800064e2:	4511                	li	a0,4
    800064e4:	f12fa0ef          	jal	80000bf6 <goto_priv>
    800064e8:	fc5fa0ef          	jal	800014ac <reset_state>
}
    800064ec:	60e2                	ld	ra,24(sp)
    800064ee:	6442                	ld	s0,16(sp)
    800064f0:	8526                	mv	a0,s1
    800064f2:	64a2                	ld	s1,8(sp)
    800064f4:	6105                	addi	sp,sp,32
    800064f6:	8082                	ret

00000000800064f8 <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    800064f8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800064fa:	0001f597          	auipc	a1,0x1f
    800064fe:	29658593          	addi	a1,a1,662 # 80025790 <__func__.1>
    80006502:	00021517          	auipc	a0,0x21
    80006506:	99e50513          	addi	a0,a0,-1634 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_11() {
    8000650a:	ec06                	sd	ra,24(sp)
    8000650c:	e822                	sd	s0,16(sp)
    8000650e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80006510:	1f51e0ef          	jal	80024f04 <printf>
    80006514:	4529                	li	a0,10
    80006516:	7f81d0ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8000651a:	4511                	li	a0,4
    8000651c:	edafa0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    80006520:	001007b7          	lui	a5,0x100
    80006524:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    80006528:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    8000652c:	4501                	li	a0,0
    8000652e:	ec8fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006532:	0330000f          	fence	rw,rw
    80006536:	00043417          	auipc	s0,0x43
    8000653a:	ada40413          	addi	s0,s0,-1318 # 80049010 <excpt>
    8000653e:	4785                	li	a5,1
    80006540:	00043717          	auipc	a4,0x43
    80006544:	b0073423          	sd	zero,-1272(a4) # 80049048 <excpt+0x38>
    80006548:	00f41023          	sh	a5,0(s0)
    8000654c:	0330000f          	fence	rw,rw
    CSRS(CSR_VSIE,1ULL << 1);
    80006550:	20416073          	csrsi	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006554:	08200593          	li	a1,130
    80006558:	00022617          	auipc	a2,0x22
    8000655c:	b3060613          	addi	a2,a2,-1232 # 80028088 <__func__.0+0x14c8>
    80006560:	00021517          	auipc	a0,0x21
    80006564:	95850513          	addi	a0,a0,-1704 # 80026eb8 <__func__.0+0x2f8>
    80006568:	19d1e0ef          	jal	80024f04 <printf>
    8000656c:	00043797          	auipc	a5,0x43
    80006570:	aa57c783          	lbu	a5,-1371(a5) # 80049011 <excpt+0x1>
    80006574:	00021597          	auipc	a1,0x21
    80006578:	91c58593          	addi	a1,a1,-1764 # 80026e90 <__func__.0+0x2d0>
    8000657c:	cf89                	beqz	a5,80006596 <virtual_instruction_11+0x9e>
    8000657e:	6418                	ld	a4,8(s0)
    80006580:	47d9                	li	a5,22
    80006582:	00021597          	auipc	a1,0x21
    80006586:	8fe58593          	addi	a1,a1,-1794 # 80026e80 <__func__.0+0x2c0>
    8000658a:	00f70663          	beq	a4,a5,80006596 <virtual_instruction_11+0x9e>
    8000658e:	00021597          	auipc	a1,0x21
    80006592:	90258593          	addi	a1,a1,-1790 # 80026e90 <__func__.0+0x2d0>
    80006596:	00021517          	auipc	a0,0x21
    8000659a:	93a50513          	addi	a0,a0,-1734 # 80026ed0 <__func__.0+0x310>
    8000659e:	1671e0ef          	jal	80024f04 <printf>
    800065a2:	00043797          	auipc	a5,0x43
    800065a6:	a6f7c783          	lbu	a5,-1425(a5) # 80049011 <excpt+0x1>
    800065aa:	c789                	beqz	a5,800065b4 <virtual_instruction_11+0xbc>
    800065ac:	6418                	ld	a4,8(s0)
    800065ae:	47d9                	li	a5,22
    800065b0:	00f70c63          	beq	a4,a5,800065c8 <virtual_instruction_11+0xd0>
    800065b4:	00021517          	auipc	a0,0x21
    800065b8:	92450513          	addi	a0,a0,-1756 # 80026ed8 <__func__.0+0x318>
    800065bc:	1491e0ef          	jal	80024f04 <printf>
    800065c0:	02900513          	li	a0,41
    800065c4:	74a1d0ef          	jal	80023d0e <putchar>
    800065c8:	4529                	li	a0,10
    800065ca:	7441d0ef          	jal	80023d0e <putchar>
    800065ce:	00043497          	auipc	s1,0x43
    800065d2:	a434c483          	lbu	s1,-1469(s1) # 80049011 <excpt+0x1>
    //     excpt.cause == CAUSE_VRTI
    // );      



    TEST_END(); 
    800065d6:	00021597          	auipc	a1,0x21
    800065da:	8ba58593          	addi	a1,a1,-1862 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800065de:	cc91                	beqz	s1,800065fa <virtual_instruction_11+0x102>
    800065e0:	6418                	ld	a4,8(s0)
    800065e2:	47d9                	li	a5,22
    TEST_END(); 
    800065e4:	00021597          	auipc	a1,0x21
    800065e8:	89c58593          	addi	a1,a1,-1892 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800065ec:	00f70763          	beq	a4,a5,800065fa <virtual_instruction_11+0x102>
    800065f0:	4481                	li	s1,0
    TEST_END(); 
    800065f2:	00021597          	auipc	a1,0x21
    800065f6:	89e58593          	addi	a1,a1,-1890 # 80026e90 <__func__.0+0x2d0>
    800065fa:	00021517          	auipc	a0,0x21
    800065fe:	93e50513          	addi	a0,a0,-1730 # 80026f38 <__func__.0+0x378>
    80006602:	1031e0ef          	jal	80024f04 <printf>
    80006606:	4511                	li	a0,4
    80006608:	deefa0ef          	jal	80000bf6 <goto_priv>
    8000660c:	ea1fa0ef          	jal	800014ac <reset_state>
}
    80006610:	60e2                	ld	ra,24(sp)
    80006612:	6442                	ld	s0,16(sp)
    80006614:	8526                	mv	a0,s1
    80006616:	64a2                	ld	s1,8(sp)
    80006618:	6105                	addi	sp,sp,32
    8000661a:	8082                	ret

000000008000661c <virtual_instruction_12>:

bool virtual_instruction_12() {
    8000661c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000661e:	0001f597          	auipc	a1,0x1f
    80006622:	18a58593          	addi	a1,a1,394 # 800257a8 <__func__.0>
    80006626:	00021517          	auipc	a0,0x21
    8000662a:	87a50513          	addi	a0,a0,-1926 # 80026ea0 <__func__.0+0x2e0>
bool virtual_instruction_12() {
    8000662e:	ec06                	sd	ra,24(sp)
    80006630:	e822                	sd	s0,16(sp)
    80006632:	e426                	sd	s1,8(sp)
    TEST_START();
    80006634:	0d11e0ef          	jal	80024f04 <printf>
    80006638:	4529                	li	a0,10
    8000663a:	6d41d0ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_VU);
    8000663e:	4501                	li	a0,0
    80006640:	db6fa0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006644:	0330000f          	fence	rw,rw
    80006648:	00043417          	auipc	s0,0x43
    8000664c:	9c840413          	addi	s0,s0,-1592 # 80049010 <excpt>
    80006650:	4785                	li	a5,1
    80006652:	00043717          	auipc	a4,0x43
    80006656:	9e073b23          	sd	zero,-1546(a4) # 80049048 <excpt+0x38>
    8000665a:	00f41023          	sh	a5,0(s0)
    8000665e:	0330000f          	fence	rw,rw

    CSRR(CSR_SATP);
    80006662:	180027f3          	csrr	a5,satp
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    80006666:	08200593          	li	a1,130
    8000666a:	00022617          	auipc	a2,0x22
    8000666e:	a7e60613          	addi	a2,a2,-1410 # 800280e8 <__func__.0+0x1528>
    80006672:	00021517          	auipc	a0,0x21
    80006676:	84650513          	addi	a0,a0,-1978 # 80026eb8 <__func__.0+0x2f8>
    8000667a:	08b1e0ef          	jal	80024f04 <printf>
    8000667e:	00043797          	auipc	a5,0x43
    80006682:	9937c783          	lbu	a5,-1645(a5) # 80049011 <excpt+0x1>
    80006686:	00021597          	auipc	a1,0x21
    8000668a:	80a58593          	addi	a1,a1,-2038 # 80026e90 <__func__.0+0x2d0>
    8000668e:	cf89                	beqz	a5,800066a8 <virtual_instruction_12+0x8c>
    80006690:	6418                	ld	a4,8(s0)
    80006692:	47d9                	li	a5,22
    80006694:	00020597          	auipc	a1,0x20
    80006698:	7ec58593          	addi	a1,a1,2028 # 80026e80 <__func__.0+0x2c0>
    8000669c:	00f70663          	beq	a4,a5,800066a8 <virtual_instruction_12+0x8c>
    800066a0:	00020597          	auipc	a1,0x20
    800066a4:	7f058593          	addi	a1,a1,2032 # 80026e90 <__func__.0+0x2d0>
    800066a8:	00021517          	auipc	a0,0x21
    800066ac:	82850513          	addi	a0,a0,-2008 # 80026ed0 <__func__.0+0x310>
    800066b0:	0551e0ef          	jal	80024f04 <printf>
    800066b4:	00043797          	auipc	a5,0x43
    800066b8:	95d7c783          	lbu	a5,-1699(a5) # 80049011 <excpt+0x1>
    800066bc:	c789                	beqz	a5,800066c6 <virtual_instruction_12+0xaa>
    800066be:	6418                	ld	a4,8(s0)
    800066c0:	47d9                	li	a5,22
    800066c2:	00f70c63          	beq	a4,a5,800066da <virtual_instruction_12+0xbe>
    800066c6:	00021517          	auipc	a0,0x21
    800066ca:	81250513          	addi	a0,a0,-2030 # 80026ed8 <__func__.0+0x318>
    800066ce:	0371e0ef          	jal	80024f04 <printf>
    800066d2:	02900513          	li	a0,41
    800066d6:	6381d0ef          	jal	80023d0e <putchar>
    800066da:	4529                	li	a0,10
    800066dc:	6321d0ef          	jal	80023d0e <putchar>
    800066e0:	00043497          	auipc	s1,0x43
    800066e4:	9314c483          	lbu	s1,-1743(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    800066e8:	00020597          	auipc	a1,0x20
    800066ec:	7a858593          	addi	a1,a1,1960 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    800066f0:	cc91                	beqz	s1,8000670c <virtual_instruction_12+0xf0>
    800066f2:	6418                	ld	a4,8(s0)
    800066f4:	47d9                	li	a5,22
    TEST_END();
    800066f6:	00020597          	auipc	a1,0x20
    800066fa:	78a58593          	addi	a1,a1,1930 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    800066fe:	00f70763          	beq	a4,a5,8000670c <virtual_instruction_12+0xf0>
    80006702:	4481                	li	s1,0
    TEST_END();
    80006704:	00020597          	auipc	a1,0x20
    80006708:	78c58593          	addi	a1,a1,1932 # 80026e90 <__func__.0+0x2d0>
    8000670c:	00021517          	auipc	a0,0x21
    80006710:	82c50513          	addi	a0,a0,-2004 # 80026f38 <__func__.0+0x378>
    80006714:	7f01e0ef          	jal	80024f04 <printf>
    80006718:	4511                	li	a0,4
    8000671a:	cdcfa0ef          	jal	80000bf6 <goto_priv>
    8000671e:	d8ffa0ef          	jal	800014ac <reset_state>
}
    80006722:	60e2                	ld	ra,24(sp)
    80006724:	6442                	ld	s0,16(sp)
    80006726:	8526                	mv	a0,s1
    80006728:	64a2                	ld	s1,8(sp)
    8000672a:	6105                	addi	sp,sp,32
    8000672c:	8082                	ret

000000008000672e <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    8000672e:	7179                	addi	sp,sp,-48

    TEST_START();
    80006730:	0001f597          	auipc	a1,0x1f
    80006734:	09058593          	addi	a1,a1,144 # 800257c0 <__func__.2>
    80006738:	00020517          	auipc	a0,0x20
    8000673c:	76850513          	addi	a0,a0,1896 # 80026ea0 <__func__.0+0x2e0>
bool hfence_test() {
    80006740:	f406                	sd	ra,40(sp)
    80006742:	ec26                	sd	s1,24(sp)
    80006744:	f022                	sd	s0,32(sp)
    80006746:	e84a                	sd	s2,16(sp)
    80006748:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000674a:	7ba1e0ef          	jal	80024f04 <printf>
    8000674e:	4529                	li	a0,10
    80006750:	5be1d0ef          	jal	80023d0e <putchar>
    80006754:	00029617          	auipc	a2,0x29
    80006758:	b6463603          	ld	a2,-1180(a2) # 8002f2b8 <__func__.0+0x86f8>
    8000675c:	00029697          	auipc	a3,0x29
    80006760:	b646b683          	ld	a3,-1180(a3) # 8002f2c0 <__func__.0+0x8700>
    80006764:	2201b737          	lui	a4,0x2201b
    80006768:	000887b7          	lui	a5,0x88
    8000676c:	070a                	slli	a4,a4,0x2
    8000676e:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80006772:	e310                	sd	a2,0(a4)
    80006774:	07b2                	slli	a5,a5,0xc
    80006776:	e394                	sd	a3,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80006778:	450d                	li	a0,3
    8000677a:	c7cfa0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8000677e:	4509                	li	a0,2
    asm volatile(
    80006780:	4001b4b7          	lui	s1,0x4001b
    80006784:	b92fa0ef          	jal	80000b16 <set_prev_priv>
    80006788:	048a                	slli	s1,s1,0x2
    hpt_init();
    8000678a:	898fa0ef          	jal	80000822 <hpt_init>
    vspt_init();
    8000678e:	f23f90ef          	jal	800006b0 <vspt_init>
    80006792:	6c04c9f3          	.insn	4, 0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    80006796:	b38fa0ef          	jal	80000ace <vspt_switch>
    8000679a:	6c04c473          	.insn	4, 0x6c04c473
    asm volatile(
    8000679e:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800067a2:	6c04c7f3          	.insn	4, 0x6c04c7f3
    cond &= hlvd(vaddr) == val;
    800067a6:	41340433          	sub	s0,s0,s3
    hfence_vvma();
    cond &= hlvd(vaddr) != val;
    800067aa:	413787b3          	sub	a5,a5,s3
    800067ae:	00f037b3          	snez	a5,a5
    800067b2:	00143413          	seqz	s0,s0
    800067b6:	8c7d                	and	s0,s0,a5
    hpt_switch();
    800067b8:	b30fa0ef          	jal	80000ae8 <hpt_switch>
    800067bc:	6c04c973          	.insn	4, 0x6c04c973
    asm volatile(
    800067c0:	62000073          	.insn	4, 0x62000073
    asm volatile(
    800067c4:	6c04c4f3          	.insn	4, 0x6c04c4f3
    cond &= hlvd(vaddr) != val;
    800067c8:	41390933          	sub	s2,s2,s3
    800067cc:	01203933          	snez	s2,s2
    hfence_gvma();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    800067d0:	00022617          	auipc	a2,0x22
    800067d4:	95860613          	addi	a2,a2,-1704 # 80028128 <__func__.0+0x1568>
    800067d8:	08200593          	li	a1,130
    800067dc:	00020517          	auipc	a0,0x20
    800067e0:	6dc50513          	addi	a0,a0,1756 # 80026eb8 <__func__.0+0x2f8>
    800067e4:	01247433          	and	s0,s0,s2
    800067e8:	71c1e0ef          	jal	80024f04 <printf>
    800067ec:	12040863          	beqz	s0,8000691c <hfence_test+0x1ee>
    800067f0:	13349663          	bne	s1,s3,8000691c <hfence_test+0x1ee>
    800067f4:	00020597          	auipc	a1,0x20
    800067f8:	68c58593          	addi	a1,a1,1676 # 80026e80 <__func__.0+0x2c0>
    800067fc:	00020517          	auipc	a0,0x20
    80006800:	6d450513          	addi	a0,a0,1748 # 80026ed0 <__func__.0+0x310>
    80006804:	7001e0ef          	jal	80024f04 <printf>
    80006808:	4529                	li	a0,10
    8000680a:	5041d0ef          	jal	80023d0e <putchar>
    8000680e:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80006810:	450d                	li	a0,3
    80006812:	4001b437          	lui	s0,0x4001b
    80006816:	be0fa0ef          	jal	80000bf6 <goto_priv>
    8000681a:	040a                	slli	s0,s0,0x2
    8000681c:	6c044973          	.insn	4, 0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    80006820:	ac8fa0ef          	jal	80000ae8 <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    80006824:	12000073          	sfence.vma
    asm volatile(
    80006828:	6c044473          	.insn	4, 0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    8000682c:	00022617          	auipc	a2,0x22
    80006830:	92c60613          	addi	a2,a2,-1748 # 80028158 <__func__.0+0x1598>
    80006834:	08200593          	li	a1,130
    80006838:	00020517          	auipc	a0,0x20
    8000683c:	68050513          	addi	a0,a0,1664 # 80026eb8 <__func__.0+0x2f8>
    80006840:	6c41e0ef          	jal	80024f04 <printf>
    80006844:	13240963          	beq	s0,s2,80006976 <hfence_test+0x248>
    80006848:	00020597          	auipc	a1,0x20
    8000684c:	64858593          	addi	a1,a1,1608 # 80026e90 <__func__.0+0x2d0>
    80006850:	00020517          	auipc	a0,0x20
    80006854:	68050513          	addi	a0,a0,1664 # 80026ed0 <__func__.0+0x310>
    80006858:	6ac1e0ef          	jal	80024f04 <printf>
    8000685c:	00020517          	auipc	a0,0x20
    80006860:	67c50513          	addi	a0,a0,1660 # 80026ed8 <__func__.0+0x318>
    80006864:	6a01e0ef          	jal	80024f04 <printf>
    80006868:	02900513          	li	a0,41
    8000686c:	4a21d0ef          	jal	80023d0e <putchar>
    80006870:	4529                	li	a0,10
    80006872:	49c1d0ef          	jal	80023d0e <putchar>
    80006876:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    80006878:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    8000687c:	450d                	li	a0,3
    8000687e:	040a                	slli	s0,s0,0x2
    80006880:	b76fa0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80006884:	d5df90ef          	jal	800005e0 <hspt_init>
    80006888:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    8000688c:	a28fa0ef          	jal	80000ab4 <hspt_switch>
    goto_priv(PRIV_VS);
    80006890:	4509                	li	a0,2
    80006892:	b64fa0ef          	jal	80000bf6 <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80006896:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    8000689a:	450d                	li	a0,3
    8000689c:	b5afa0ef          	jal	80000bf6 <goto_priv>
    800068a0:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    800068a2:	00022617          	auipc	a2,0x22
    800068a6:	8ee60613          	addi	a2,a2,-1810 # 80028190 <__func__.0+0x15d0>
    800068aa:	08200593          	li	a1,130
    800068ae:	00020517          	auipc	a0,0x20
    800068b2:	60a50513          	addi	a0,a0,1546 # 80026eb8 <__func__.0+0x2f8>
    800068b6:	64e1e0ef          	jal	80024f04 <printf>
    800068ba:	09240a63          	beq	s0,s2,8000694e <hfence_test+0x220>
    800068be:	00020597          	auipc	a1,0x20
    800068c2:	5d258593          	addi	a1,a1,1490 # 80026e90 <__func__.0+0x2d0>
    800068c6:	00020517          	auipc	a0,0x20
    800068ca:	60a50513          	addi	a0,a0,1546 # 80026ed0 <__func__.0+0x310>
    800068ce:	6361e0ef          	jal	80024f04 <printf>
    800068d2:	00020517          	auipc	a0,0x20
    800068d6:	60650513          	addi	a0,a0,1542 # 80026ed8 <__func__.0+0x318>
    800068da:	62a1e0ef          	jal	80024f04 <printf>
    800068de:	02900513          	li	a0,41
    800068e2:	42c1d0ef          	jal	80023d0e <putchar>
    800068e6:	4529                	li	a0,10
    800068e8:	4261d0ef          	jal	80023d0e <putchar>
    800068ec:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    800068ee:	00020597          	auipc	a1,0x20
    800068f2:	5a258593          	addi	a1,a1,1442 # 80026e90 <__func__.0+0x2d0>
    800068f6:	00020517          	auipc	a0,0x20
    800068fa:	64250513          	addi	a0,a0,1602 # 80026f38 <__func__.0+0x378>
    800068fe:	6061e0ef          	jal	80024f04 <printf>
    80006902:	4511                	li	a0,4
    80006904:	af2fa0ef          	jal	80000bf6 <goto_priv>
    80006908:	ba5fa0ef          	jal	800014ac <reset_state>
    8000690c:	70a2                	ld	ra,40(sp)
    8000690e:	8522                	mv	a0,s0
    80006910:	7402                	ld	s0,32(sp)
    80006912:	64e2                	ld	s1,24(sp)
    80006914:	6942                	ld	s2,16(sp)
    80006916:	69a2                	ld	s3,8(sp)
    80006918:	6145                	addi	sp,sp,48
    8000691a:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    8000691c:	00020597          	auipc	a1,0x20
    80006920:	57458593          	addi	a1,a1,1396 # 80026e90 <__func__.0+0x2d0>
    80006924:	00020517          	auipc	a0,0x20
    80006928:	5ac50513          	addi	a0,a0,1452 # 80026ed0 <__func__.0+0x310>
    8000692c:	5d81e0ef          	jal	80024f04 <printf>
    80006930:	00020517          	auipc	a0,0x20
    80006934:	5a850513          	addi	a0,a0,1448 # 80026ed8 <__func__.0+0x318>
    80006938:	5cc1e0ef          	jal	80024f04 <printf>
    8000693c:	02900513          	li	a0,41
    80006940:	3ce1d0ef          	jal	80023d0e <putchar>
    80006944:	4529                	li	a0,10
    80006946:	3c81d0ef          	jal	80023d0e <putchar>
    8000694a:	4481                	li	s1,0
    8000694c:	b5d1                	j	80006810 <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    8000694e:	00020597          	auipc	a1,0x20
    80006952:	53258593          	addi	a1,a1,1330 # 80026e80 <__func__.0+0x2c0>
    80006956:	00020517          	auipc	a0,0x20
    8000695a:	57a50513          	addi	a0,a0,1402 # 80026ed0 <__func__.0+0x310>
    8000695e:	5a61e0ef          	jal	80024f04 <printf>
    80006962:	4529                	li	a0,10
    80006964:	3aa1d0ef          	jal	80023d0e <putchar>
    80006968:	d0d1                	beqz	s1,800068ec <hfence_test+0x1be>
    8000696a:	4405                	li	s0,1
    TEST_END();
    8000696c:	00020597          	auipc	a1,0x20
    80006970:	51458593          	addi	a1,a1,1300 # 80026e80 <__func__.0+0x2c0>
    80006974:	b749                	j	800068f6 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    80006976:	00020597          	auipc	a1,0x20
    8000697a:	50a58593          	addi	a1,a1,1290 # 80026e80 <__func__.0+0x2c0>
    8000697e:	00020517          	auipc	a0,0x20
    80006982:	55250513          	addi	a0,a0,1362 # 80026ed0 <__func__.0+0x310>
    80006986:	57e1e0ef          	jal	80024f04 <printf>
    8000698a:	4529                	li	a0,10
    8000698c:	3821d0ef          	jal	80023d0e <putchar>
    80006990:	b5e5                	j	80006878 <hfence_test+0x14a>

0000000080006992 <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    80006992:	1101                	addi	sp,sp,-32

    TEST_START();
    80006994:	0001f597          	auipc	a1,0x1f
    80006998:	e3c58593          	addi	a1,a1,-452 # 800257d0 <__func__.21>
    8000699c:	00020517          	auipc	a0,0x20
    800069a0:	50450513          	addi	a0,a0,1284 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_1() {
    800069a4:	ec06                	sd	ra,24(sp)
    800069a6:	e822                	sd	s0,16(sp)
    800069a8:	e426                	sd	s1,8(sp)
    TEST_START();
    800069aa:	55a1e0ef          	jal	80024f04 <printf>
    800069ae:	4529                	li	a0,10
    800069b0:	35e1d0ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    800069b4:	0330000f          	fence	rw,rw
    800069b8:	00042417          	auipc	s0,0x42
    800069bc:	65840413          	addi	s0,s0,1624 # 80049010 <excpt>
    800069c0:	4485                	li	s1,1
    800069c2:	00042797          	auipc	a5,0x42
    800069c6:	6807b323          	sd	zero,1670(a5) # 80049048 <excpt+0x38>
    800069ca:	00941023          	sh	s1,0(s0)
    800069ce:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    800069d2:	4511                	li	a0,4
    800069d4:	a22fa0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800069d8:	002007b7          	lui	a5,0x200
    800069dc:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    800069e0:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    800069e4:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800069e8:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    800069ec:	60205073          	csrwi	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    800069f0:	00426073          	csrsi	uie,4
    asm ("wfi" ::: "memory");
    800069f4:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    800069f8:	8526                	mv	a0,s1
    800069fa:	9fcfa0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800069fe:	08200593          	li	a1,130
    80006a02:	00021617          	auipc	a2,0x21
    80006a06:	7c660613          	addi	a2,a2,1990 # 800281c8 <__func__.0+0x1608>
    80006a0a:	00020517          	auipc	a0,0x20
    80006a0e:	4ae50513          	addi	a0,a0,1198 # 80026eb8 <__func__.0+0x2f8>
    80006a12:	4f21e0ef          	jal	80024f04 <printf>
    80006a16:	00042797          	auipc	a5,0x42
    80006a1a:	5fb7c783          	lbu	a5,1531(a5) # 80049011 <excpt+0x1>
    80006a1e:	00020597          	auipc	a1,0x20
    80006a22:	47258593          	addi	a1,a1,1138 # 80026e90 <__func__.0+0x2d0>
    80006a26:	cf89                	beqz	a5,80006a40 <wfi_exception_tests_1+0xae>
    80006a28:	6418                	ld	a4,8(s0)
    80006a2a:	4789                	li	a5,2
    80006a2c:	00020597          	auipc	a1,0x20
    80006a30:	45458593          	addi	a1,a1,1108 # 80026e80 <__func__.0+0x2c0>
    80006a34:	00f70663          	beq	a4,a5,80006a40 <wfi_exception_tests_1+0xae>
    80006a38:	00020597          	auipc	a1,0x20
    80006a3c:	45858593          	addi	a1,a1,1112 # 80026e90 <__func__.0+0x2d0>
    80006a40:	00020517          	auipc	a0,0x20
    80006a44:	49050513          	addi	a0,a0,1168 # 80026ed0 <__func__.0+0x310>
    80006a48:	4bc1e0ef          	jal	80024f04 <printf>
    80006a4c:	00042797          	auipc	a5,0x42
    80006a50:	5c57c783          	lbu	a5,1477(a5) # 80049011 <excpt+0x1>
    80006a54:	c789                	beqz	a5,80006a5e <wfi_exception_tests_1+0xcc>
    80006a56:	6418                	ld	a4,8(s0)
    80006a58:	4789                	li	a5,2
    80006a5a:	00f70c63          	beq	a4,a5,80006a72 <wfi_exception_tests_1+0xe0>
    80006a5e:	00020517          	auipc	a0,0x20
    80006a62:	47a50513          	addi	a0,a0,1146 # 80026ed8 <__func__.0+0x318>
    80006a66:	49e1e0ef          	jal	80024f04 <printf>
    80006a6a:	02900513          	li	a0,41
    80006a6e:	2a01d0ef          	jal	80023d0e <putchar>
    80006a72:	4529                	li	a0,10
    80006a74:	29a1d0ef          	jal	80023d0e <putchar>
    80006a78:	00042497          	auipc	s1,0x42
    80006a7c:	5994c483          	lbu	s1,1433(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80006a80:	00020597          	auipc	a1,0x20
    80006a84:	41058593          	addi	a1,a1,1040 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a88:	cc91                	beqz	s1,80006aa4 <wfi_exception_tests_1+0x112>
    80006a8a:	6418                	ld	a4,8(s0)
    80006a8c:	4789                	li	a5,2
    TEST_END();
    80006a8e:	00020597          	auipc	a1,0x20
    80006a92:	3f258593          	addi	a1,a1,1010 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a96:	00f70763          	beq	a4,a5,80006aa4 <wfi_exception_tests_1+0x112>
    80006a9a:	4481                	li	s1,0
    TEST_END();
    80006a9c:	00020597          	auipc	a1,0x20
    80006aa0:	3f458593          	addi	a1,a1,1012 # 80026e90 <__func__.0+0x2d0>
    80006aa4:	00020517          	auipc	a0,0x20
    80006aa8:	49450513          	addi	a0,a0,1172 # 80026f38 <__func__.0+0x378>
    80006aac:	4581e0ef          	jal	80024f04 <printf>
    80006ab0:	4511                	li	a0,4
    80006ab2:	944fa0ef          	jal	80000bf6 <goto_priv>
    80006ab6:	9f7fa0ef          	jal	800014ac <reset_state>
}
    80006aba:	60e2                	ld	ra,24(sp)
    80006abc:	6442                	ld	s0,16(sp)
    80006abe:	8526                	mv	a0,s1
    80006ac0:	64a2                	ld	s1,8(sp)
    80006ac2:	6105                	addi	sp,sp,32
    80006ac4:	8082                	ret

0000000080006ac6 <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    80006ac6:	1101                	addi	sp,sp,-32

    TEST_START();
    80006ac8:	0001f597          	auipc	a1,0x1f
    80006acc:	d2058593          	addi	a1,a1,-736 # 800257e8 <__func__.20>
    80006ad0:	00020517          	auipc	a0,0x20
    80006ad4:	3d050513          	addi	a0,a0,976 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_2() {
    80006ad8:	ec06                	sd	ra,24(sp)
    80006ada:	e822                	sd	s0,16(sp)
    80006adc:	e426                	sd	s1,8(sp)
    TEST_START();
    80006ade:	4261e0ef          	jal	80024f04 <printf>
    80006ae2:	4529                	li	a0,10
    80006ae4:	22a1d0ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80006ae8:	0330000f          	fence	rw,rw
    80006aec:	00042417          	auipc	s0,0x42
    80006af0:	52440413          	addi	s0,s0,1316 # 80049010 <excpt>
    80006af4:	4485                	li	s1,1
    80006af6:	00042797          	auipc	a5,0x42
    80006afa:	5407b923          	sd	zero,1362(a5) # 80049048 <excpt+0x38>
    80006afe:	00941023          	sh	s1,0(s0)
    80006b02:	0330000f          	fence	rw,rw
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006b06:	4511                	li	a0,4
    80006b08:	8eefa0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006b0c:	002007b7          	lui	a5,0x200
    80006b10:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006b14:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006b18:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006b1c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006b20:	60205073          	csrwi	hedeleg,0
    TEST_SETUP_EXCEPT();
    80006b24:	0330000f          	fence	rw,rw
    80006b28:	00042797          	auipc	a5,0x42
    80006b2c:	5207b023          	sd	zero,1312(a5) # 80049048 <excpt+0x38>
    80006b30:	00941023          	sh	s1,0(s0)
    80006b34:	0330000f          	fence	rw,rw
    CSRS(CSR_UIE, 0b0100);
    80006b38:	00426073          	csrsi	uie,4
    80006b3c:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    80006b40:	4501                	li	a0,0
    80006b42:	8b4fa0ef          	jal	80000bf6 <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b46:	08200593          	li	a1,130
    80006b4a:	00021617          	auipc	a2,0x21
    80006b4e:	6ee60613          	addi	a2,a2,1774 # 80028238 <__func__.0+0x1678>
    80006b52:	00020517          	auipc	a0,0x20
    80006b56:	36650513          	addi	a0,a0,870 # 80026eb8 <__func__.0+0x2f8>
    80006b5a:	3aa1e0ef          	jal	80024f04 <printf>
    80006b5e:	00042797          	auipc	a5,0x42
    80006b62:	4b37c783          	lbu	a5,1203(a5) # 80049011 <excpt+0x1>
    80006b66:	00020597          	auipc	a1,0x20
    80006b6a:	32a58593          	addi	a1,a1,810 # 80026e90 <__func__.0+0x2d0>
    80006b6e:	cf89                	beqz	a5,80006b88 <wfi_exception_tests_2+0xc2>
    80006b70:	6418                	ld	a4,8(s0)
    80006b72:	4789                	li	a5,2
    80006b74:	00020597          	auipc	a1,0x20
    80006b78:	30c58593          	addi	a1,a1,780 # 80026e80 <__func__.0+0x2c0>
    80006b7c:	00f70663          	beq	a4,a5,80006b88 <wfi_exception_tests_2+0xc2>
    80006b80:	00020597          	auipc	a1,0x20
    80006b84:	31058593          	addi	a1,a1,784 # 80026e90 <__func__.0+0x2d0>
    80006b88:	00020517          	auipc	a0,0x20
    80006b8c:	34850513          	addi	a0,a0,840 # 80026ed0 <__func__.0+0x310>
    80006b90:	3741e0ef          	jal	80024f04 <printf>
    80006b94:	00042797          	auipc	a5,0x42
    80006b98:	47d7c783          	lbu	a5,1149(a5) # 80049011 <excpt+0x1>
    80006b9c:	c789                	beqz	a5,80006ba6 <wfi_exception_tests_2+0xe0>
    80006b9e:	6418                	ld	a4,8(s0)
    80006ba0:	4789                	li	a5,2
    80006ba2:	00f70c63          	beq	a4,a5,80006bba <wfi_exception_tests_2+0xf4>
    80006ba6:	00020517          	auipc	a0,0x20
    80006baa:	33250513          	addi	a0,a0,818 # 80026ed8 <__func__.0+0x318>
    80006bae:	3561e0ef          	jal	80024f04 <printf>
    80006bb2:	02900513          	li	a0,41
    80006bb6:	1581d0ef          	jal	80023d0e <putchar>
    80006bba:	4529                	li	a0,10
    80006bbc:	1521d0ef          	jal	80023d0e <putchar>
    80006bc0:	00042497          	auipc	s1,0x42
    80006bc4:	4514c483          	lbu	s1,1105(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80006bc8:	00020597          	auipc	a1,0x20
    80006bcc:	2c858593          	addi	a1,a1,712 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006bd0:	cc91                	beqz	s1,80006bec <wfi_exception_tests_2+0x126>
    80006bd2:	6418                	ld	a4,8(s0)
    80006bd4:	4789                	li	a5,2
    TEST_END();
    80006bd6:	00020597          	auipc	a1,0x20
    80006bda:	2aa58593          	addi	a1,a1,682 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006bde:	00f70763          	beq	a4,a5,80006bec <wfi_exception_tests_2+0x126>
    80006be2:	4481                	li	s1,0
    TEST_END();
    80006be4:	00020597          	auipc	a1,0x20
    80006be8:	2ac58593          	addi	a1,a1,684 # 80026e90 <__func__.0+0x2d0>
    80006bec:	00020517          	auipc	a0,0x20
    80006bf0:	34c50513          	addi	a0,a0,844 # 80026f38 <__func__.0+0x378>
    80006bf4:	3101e0ef          	jal	80024f04 <printf>
    80006bf8:	4511                	li	a0,4
    80006bfa:	ffdf90ef          	jal	80000bf6 <goto_priv>
    80006bfe:	8affa0ef          	jal	800014ac <reset_state>
}
    80006c02:	60e2                	ld	ra,24(sp)
    80006c04:	6442                	ld	s0,16(sp)
    80006c06:	8526                	mv	a0,s1
    80006c08:	64a2                	ld	s1,8(sp)
    80006c0a:	6105                	addi	sp,sp,32
    80006c0c:	8082                	ret

0000000080006c0e <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80006c0e:	1101                	addi	sp,sp,-32

    TEST_START();
    80006c10:	0001f597          	auipc	a1,0x1f
    80006c14:	bf058593          	addi	a1,a1,-1040 # 80025800 <__func__.19>
    80006c18:	00020517          	auipc	a0,0x20
    80006c1c:	28850513          	addi	a0,a0,648 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_3() {
    80006c20:	ec06                	sd	ra,24(sp)
    80006c22:	e822                	sd	s0,16(sp)
    80006c24:	e426                	sd	s1,8(sp)
    TEST_START();
    80006c26:	2de1e0ef          	jal	80024f04 <printf>
    80006c2a:	4529                	li	a0,10
    80006c2c:	0e21d0ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80006c30:	0330000f          	fence	rw,rw
    80006c34:	00042417          	auipc	s0,0x42
    80006c38:	3dc40413          	addi	s0,s0,988 # 80049010 <excpt>
    80006c3c:	4485                	li	s1,1
    80006c3e:	00042797          	auipc	a5,0x42
    80006c42:	4007b523          	sd	zero,1034(a5) # 80049048 <excpt+0x38>
    80006c46:	00941023          	sh	s1,0(s0)
    80006c4a:	0330000f          	fence	rw,rw
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006c4e:	4511                	li	a0,4
    80006c50:	fa7f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006c54:	002007b7          	lui	a5,0x200
    80006c58:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006c5c:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006c60:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006c64:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006c68:	34426073          	csrsi	mip,4

    goto_priv(PRIV_M);
    80006c6c:	4511                	li	a0,4
    80006c6e:	f89f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006c72:	0330000f          	fence	rw,rw
    80006c76:	00042797          	auipc	a5,0x42
    80006c7a:	3c07b923          	sd	zero,978(a5) # 80049048 <excpt+0x38>
    80006c7e:	00941023          	sh	s1,0(s0)
    80006c82:	0330000f          	fence	rw,rw
    80006c86:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c8a:	08200593          	li	a1,130
    80006c8e:	00021617          	auipc	a2,0x21
    80006c92:	61a60613          	addi	a2,a2,1562 # 800282a8 <__func__.0+0x16e8>
    80006c96:	00020517          	auipc	a0,0x20
    80006c9a:	22250513          	addi	a0,a0,546 # 80026eb8 <__func__.0+0x2f8>
    80006c9e:	2661e0ef          	jal	80024f04 <printf>
    80006ca2:	00042797          	auipc	a5,0x42
    80006ca6:	36f7c783          	lbu	a5,879(a5) # 80049011 <excpt+0x1>
    80006caa:	00020597          	auipc	a1,0x20
    80006cae:	1d658593          	addi	a1,a1,470 # 80026e80 <__func__.0+0x2c0>
    80006cb2:	c789                	beqz	a5,80006cbc <wfi_exception_tests_3+0xae>
    80006cb4:	00020597          	auipc	a1,0x20
    80006cb8:	1dc58593          	addi	a1,a1,476 # 80026e90 <__func__.0+0x2d0>
    80006cbc:	00020517          	auipc	a0,0x20
    80006cc0:	21450513          	addi	a0,a0,532 # 80026ed0 <__func__.0+0x310>
    80006cc4:	2401e0ef          	jal	80024f04 <printf>
    80006cc8:	00042797          	auipc	a5,0x42
    80006ccc:	3497c783          	lbu	a5,841(a5) # 80049011 <excpt+0x1>
    80006cd0:	e7a9                	bnez	a5,80006d1a <wfi_exception_tests_3+0x10c>
    80006cd2:	4529                	li	a0,10
    80006cd4:	03a1d0ef          	jal	80023d0e <putchar>
    80006cd8:	00042797          	auipc	a5,0x42
    80006cdc:	3397c783          	lbu	a5,825(a5) # 80049011 <excpt+0x1>
    80006ce0:	e79d                	bnez	a5,80006d0e <wfi_exception_tests_3+0x100>
    80006ce2:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006ce4:	00020597          	auipc	a1,0x20
    80006ce8:	19c58593          	addi	a1,a1,412 # 80026e80 <__func__.0+0x2c0>
    80006cec:	00020517          	auipc	a0,0x20
    80006cf0:	24c50513          	addi	a0,a0,588 # 80026f38 <__func__.0+0x378>
    80006cf4:	2101e0ef          	jal	80024f04 <printf>
    80006cf8:	4511                	li	a0,4
    80006cfa:	efdf90ef          	jal	80000bf6 <goto_priv>
    80006cfe:	faefa0ef          	jal	800014ac <reset_state>
}
    80006d02:	60e2                	ld	ra,24(sp)
    80006d04:	8522                	mv	a0,s0
    80006d06:	6442                	ld	s0,16(sp)
    80006d08:	64a2                	ld	s1,8(sp)
    80006d0a:	6105                	addi	sp,sp,32
    80006d0c:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d0e:	4401                	li	s0,0
    TEST_END();
    80006d10:	00020597          	auipc	a1,0x20
    80006d14:	18058593          	addi	a1,a1,384 # 80026e90 <__func__.0+0x2d0>
    80006d18:	bfd1                	j	80006cec <wfi_exception_tests_3+0xde>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d1a:	00020517          	auipc	a0,0x20
    80006d1e:	1be50513          	addi	a0,a0,446 # 80026ed8 <__func__.0+0x318>
    80006d22:	1e21e0ef          	jal	80024f04 <printf>
    80006d26:	02900513          	li	a0,41
    80006d2a:	7e51c0ef          	jal	80023d0e <putchar>
    80006d2e:	b755                	j	80006cd2 <wfi_exception_tests_3+0xc4>

0000000080006d30 <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006d30:	1101                	addi	sp,sp,-32

    TEST_START();
    80006d32:	0001f597          	auipc	a1,0x1f
    80006d36:	ae658593          	addi	a1,a1,-1306 # 80025818 <__func__.18>
    80006d3a:	00020517          	auipc	a0,0x20
    80006d3e:	16650513          	addi	a0,a0,358 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_4() {
    80006d42:	ec06                	sd	ra,24(sp)
    80006d44:	e822                	sd	s0,16(sp)
    80006d46:	e426                	sd	s1,8(sp)
    TEST_START();
    80006d48:	1bc1e0ef          	jal	80024f04 <printf>
    80006d4c:	4529                	li	a0,10
    80006d4e:	7c11c0ef          	jal	80023d0e <putchar>
    
    TEST_SETUP_EXCEPT();
    80006d52:	0330000f          	fence	rw,rw
    80006d56:	00042417          	auipc	s0,0x42
    80006d5a:	2ba40413          	addi	s0,s0,698 # 80049010 <excpt>
    80006d5e:	4485                	li	s1,1
    80006d60:	00042797          	auipc	a5,0x42
    80006d64:	2e07b423          	sd	zero,744(a5) # 80049048 <excpt+0x38>
    80006d68:	00941023          	sh	s1,0(s0)
    80006d6c:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006d70:	002007b7          	lui	a5,0x200
    80006d74:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006d78:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006d7c:	30305073          	csrwi	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006d80:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006d84:	64426073          	csrsi	hip,4

    goto_priv(PRIV_HS);
    80006d88:	450d                	li	a0,3
    80006d8a:	e6df90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d8e:	0330000f          	fence	rw,rw
    80006d92:	00042797          	auipc	a5,0x42
    80006d96:	2a07bb23          	sd	zero,694(a5) # 80049048 <excpt+0x38>
    80006d9a:	00941023          	sh	s1,0(s0)
    80006d9e:	0330000f          	fence	rw,rw
    80006da2:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006da6:	08200593          	li	a1,130
    80006daa:	00021617          	auipc	a2,0x21
    80006dae:	56e60613          	addi	a2,a2,1390 # 80028318 <__func__.0+0x1758>
    80006db2:	00020517          	auipc	a0,0x20
    80006db6:	10650513          	addi	a0,a0,262 # 80026eb8 <__func__.0+0x2f8>
    80006dba:	14a1e0ef          	jal	80024f04 <printf>
    80006dbe:	00042797          	auipc	a5,0x42
    80006dc2:	2537c783          	lbu	a5,595(a5) # 80049011 <excpt+0x1>
    80006dc6:	00020597          	auipc	a1,0x20
    80006dca:	0ba58593          	addi	a1,a1,186 # 80026e80 <__func__.0+0x2c0>
    80006dce:	c789                	beqz	a5,80006dd8 <wfi_exception_tests_4+0xa8>
    80006dd0:	00020597          	auipc	a1,0x20
    80006dd4:	0c058593          	addi	a1,a1,192 # 80026e90 <__func__.0+0x2d0>
    80006dd8:	00020517          	auipc	a0,0x20
    80006ddc:	0f850513          	addi	a0,a0,248 # 80026ed0 <__func__.0+0x310>
    80006de0:	1241e0ef          	jal	80024f04 <printf>
    80006de4:	00042797          	auipc	a5,0x42
    80006de8:	22d7c783          	lbu	a5,557(a5) # 80049011 <excpt+0x1>
    80006dec:	e7a9                	bnez	a5,80006e36 <wfi_exception_tests_4+0x106>
    80006dee:	4529                	li	a0,10
    80006df0:	71f1c0ef          	jal	80023d0e <putchar>
    80006df4:	00042797          	auipc	a5,0x42
    80006df8:	21d7c783          	lbu	a5,541(a5) # 80049011 <excpt+0x1>
    80006dfc:	e79d                	bnez	a5,80006e2a <wfi_exception_tests_4+0xfa>
    80006dfe:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006e00:	00020597          	auipc	a1,0x20
    80006e04:	08058593          	addi	a1,a1,128 # 80026e80 <__func__.0+0x2c0>
    80006e08:	00020517          	auipc	a0,0x20
    80006e0c:	13050513          	addi	a0,a0,304 # 80026f38 <__func__.0+0x378>
    80006e10:	0f41e0ef          	jal	80024f04 <printf>
    80006e14:	4511                	li	a0,4
    80006e16:	de1f90ef          	jal	80000bf6 <goto_priv>
    80006e1a:	e92fa0ef          	jal	800014ac <reset_state>
}
    80006e1e:	60e2                	ld	ra,24(sp)
    80006e20:	8522                	mv	a0,s0
    80006e22:	6442                	ld	s0,16(sp)
    80006e24:	64a2                	ld	s1,8(sp)
    80006e26:	6105                	addi	sp,sp,32
    80006e28:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006e2a:	4401                	li	s0,0
    TEST_END();
    80006e2c:	00020597          	auipc	a1,0x20
    80006e30:	06458593          	addi	a1,a1,100 # 80026e90 <__func__.0+0x2d0>
    80006e34:	bfd1                	j	80006e08 <wfi_exception_tests_4+0xd8>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006e36:	00020517          	auipc	a0,0x20
    80006e3a:	0a250513          	addi	a0,a0,162 # 80026ed8 <__func__.0+0x318>
    80006e3e:	0c61e0ef          	jal	80024f04 <printf>
    80006e42:	02900513          	li	a0,41
    80006e46:	6c91c0ef          	jal	80023d0e <putchar>
    80006e4a:	b755                	j	80006dee <wfi_exception_tests_4+0xbe>

0000000080006e4c <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006e4c:	1101                	addi	sp,sp,-32

    TEST_START();
    80006e4e:	0001f597          	auipc	a1,0x1f
    80006e52:	9e258593          	addi	a1,a1,-1566 # 80025830 <__func__.17>
    80006e56:	00020517          	auipc	a0,0x20
    80006e5a:	04a50513          	addi	a0,a0,74 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_5() {
    80006e5e:	ec06                	sd	ra,24(sp)
    80006e60:	e822                	sd	s0,16(sp)
    80006e62:	e426                	sd	s1,8(sp)
    TEST_START();
    80006e64:	0a01e0ef          	jal	80024f04 <printf>
    80006e68:	4529                	li	a0,10
    80006e6a:	6a51c0ef          	jal	80023d0e <putchar>
    
    TEST_SETUP_EXCEPT();
    80006e6e:	0330000f          	fence	rw,rw
    80006e72:	00042417          	auipc	s0,0x42
    80006e76:	19e40413          	addi	s0,s0,414 # 80049010 <excpt>
    80006e7a:	4485                	li	s1,1
    80006e7c:	00042797          	auipc	a5,0x42
    80006e80:	1c07b623          	sd	zero,460(a5) # 80049048 <excpt+0x38>
    80006e84:	00941023          	sh	s1,0(s0)
    80006e88:	0330000f          	fence	rw,rw

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e8c:	002007b7          	lui	a5,0x200
    80006e90:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006e94:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006e98:	30305073          	csrwi	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006e9c:	4509                	li	a0,2
    80006e9e:	d59f90ef          	jal	80000bf6 <goto_priv>
    goto_priv(PRIV_M); 
    80006ea2:	4511                	li	a0,4
    80006ea4:	d53f90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    80006ea8:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006eac:	24426073          	csrsi	vsip,4

    goto_priv(PRIV_VS);
    80006eb0:	4509                	li	a0,2
    80006eb2:	d45f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006eb6:	0330000f          	fence	rw,rw
    80006eba:	00042797          	auipc	a5,0x42
    80006ebe:	1807b723          	sd	zero,398(a5) # 80049048 <excpt+0x38>
    80006ec2:	00941023          	sh	s1,0(s0)
    80006ec6:	0330000f          	fence	rw,rw
    80006eca:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006ece:	08200593          	li	a1,130
    80006ed2:	00021617          	auipc	a2,0x21
    80006ed6:	4ae60613          	addi	a2,a2,1198 # 80028380 <__func__.0+0x17c0>
    80006eda:	00020517          	auipc	a0,0x20
    80006ede:	fde50513          	addi	a0,a0,-34 # 80026eb8 <__func__.0+0x2f8>
    80006ee2:	0221e0ef          	jal	80024f04 <printf>
    80006ee6:	00042797          	auipc	a5,0x42
    80006eea:	12b7c783          	lbu	a5,299(a5) # 80049011 <excpt+0x1>
    80006eee:	00020597          	auipc	a1,0x20
    80006ef2:	f9258593          	addi	a1,a1,-110 # 80026e80 <__func__.0+0x2c0>
    80006ef6:	c789                	beqz	a5,80006f00 <wfi_exception_tests_5+0xb4>
    80006ef8:	00020597          	auipc	a1,0x20
    80006efc:	f9858593          	addi	a1,a1,-104 # 80026e90 <__func__.0+0x2d0>
    80006f00:	00020517          	auipc	a0,0x20
    80006f04:	fd050513          	addi	a0,a0,-48 # 80026ed0 <__func__.0+0x310>
    80006f08:	7fd1d0ef          	jal	80024f04 <printf>
    80006f0c:	00042797          	auipc	a5,0x42
    80006f10:	1057c783          	lbu	a5,261(a5) # 80049011 <excpt+0x1>
    80006f14:	e7a9                	bnez	a5,80006f5e <wfi_exception_tests_5+0x112>
    80006f16:	4529                	li	a0,10
    80006f18:	5f71c0ef          	jal	80023d0e <putchar>
    80006f1c:	00042797          	auipc	a5,0x42
    80006f20:	0f57c783          	lbu	a5,245(a5) # 80049011 <excpt+0x1>
    80006f24:	e79d                	bnez	a5,80006f52 <wfi_exception_tests_5+0x106>
    80006f26:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006f28:	00020597          	auipc	a1,0x20
    80006f2c:	f5858593          	addi	a1,a1,-168 # 80026e80 <__func__.0+0x2c0>
    80006f30:	00020517          	auipc	a0,0x20
    80006f34:	00850513          	addi	a0,a0,8 # 80026f38 <__func__.0+0x378>
    80006f38:	7cd1d0ef          	jal	80024f04 <printf>
    80006f3c:	4511                	li	a0,4
    80006f3e:	cb9f90ef          	jal	80000bf6 <goto_priv>
    80006f42:	d6afa0ef          	jal	800014ac <reset_state>
}
    80006f46:	60e2                	ld	ra,24(sp)
    80006f48:	8522                	mv	a0,s0
    80006f4a:	6442                	ld	s0,16(sp)
    80006f4c:	64a2                	ld	s1,8(sp)
    80006f4e:	6105                	addi	sp,sp,32
    80006f50:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006f52:	4401                	li	s0,0
    TEST_END();
    80006f54:	00020597          	auipc	a1,0x20
    80006f58:	f3c58593          	addi	a1,a1,-196 # 80026e90 <__func__.0+0x2d0>
    80006f5c:	bfd1                	j	80006f30 <wfi_exception_tests_5+0xe4>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006f5e:	00020517          	auipc	a0,0x20
    80006f62:	f7a50513          	addi	a0,a0,-134 # 80026ed8 <__func__.0+0x318>
    80006f66:	79f1d0ef          	jal	80024f04 <printf>
    80006f6a:	02900513          	li	a0,41
    80006f6e:	5a11c0ef          	jal	80023d0e <putchar>
    80006f72:	b755                	j	80006f16 <wfi_exception_tests_5+0xca>

0000000080006f74 <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    80006f74:	1101                	addi	sp,sp,-32

    TEST_START();
    80006f76:	0001f597          	auipc	a1,0x1f
    80006f7a:	8d258593          	addi	a1,a1,-1838 # 80025848 <__func__.16>
    80006f7e:	00020517          	auipc	a0,0x20
    80006f82:	f2250513          	addi	a0,a0,-222 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_6() {
    80006f86:	ec06                	sd	ra,24(sp)
    80006f88:	e822                	sd	s0,16(sp)
    80006f8a:	e426                	sd	s1,8(sp)
    TEST_START();
    80006f8c:	7791d0ef          	jal	80024f04 <printf>
    80006f90:	4529                	li	a0,10
    80006f92:	57d1c0ef          	jal	80023d0e <putchar>
    
    TEST_SETUP_EXCEPT();
    80006f96:	0330000f          	fence	rw,rw
    80006f9a:	00042417          	auipc	s0,0x42
    80006f9e:	07640413          	addi	s0,s0,118 # 80049010 <excpt>
    80006fa2:	4485                	li	s1,1
    80006fa4:	00042797          	auipc	a5,0x42
    80006fa8:	0a07b223          	sd	zero,164(a5) # 80049048 <excpt+0x38>
    80006fac:	00941023          	sh	s1,0(s0)
    80006fb0:	0330000f          	fence	rw,rw
    
    goto_priv(PRIV_M);
    80006fb4:	4511                	li	a0,4
    80006fb6:	c41f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006fba:	002007b7          	lui	a5,0x200
    80006fbe:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006fc2:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006fc6:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006fca:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006fce:	34426073          	csrsi	mip,4
    CSRS(mideleg, 0b0100);
    80006fd2:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_M);
    80006fd6:	4511                	li	a0,4
    80006fd8:	c1ff90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80006fdc:	0330000f          	fence	rw,rw
    80006fe0:	00042797          	auipc	a5,0x42
    80006fe4:	0607b423          	sd	zero,104(a5) # 80049048 <excpt+0x38>
    80006fe8:	00941023          	sh	s1,0(s0)
    80006fec:	0330000f          	fence	rw,rw
    80006ff0:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006ff4:	08200593          	li	a1,130
    80006ff8:	00021617          	auipc	a2,0x21
    80006ffc:	3f060613          	addi	a2,a2,1008 # 800283e8 <__func__.0+0x1828>
    80007000:	00020517          	auipc	a0,0x20
    80007004:	eb850513          	addi	a0,a0,-328 # 80026eb8 <__func__.0+0x2f8>
    80007008:	6fd1d0ef          	jal	80024f04 <printf>
    8000700c:	00042797          	auipc	a5,0x42
    80007010:	0057c783          	lbu	a5,5(a5) # 80049011 <excpt+0x1>
    80007014:	00020597          	auipc	a1,0x20
    80007018:	e6c58593          	addi	a1,a1,-404 # 80026e80 <__func__.0+0x2c0>
    8000701c:	c789                	beqz	a5,80007026 <wfi_exception_tests_6+0xb2>
    8000701e:	00020597          	auipc	a1,0x20
    80007022:	e7258593          	addi	a1,a1,-398 # 80026e90 <__func__.0+0x2d0>
    80007026:	00020517          	auipc	a0,0x20
    8000702a:	eaa50513          	addi	a0,a0,-342 # 80026ed0 <__func__.0+0x310>
    8000702e:	6d71d0ef          	jal	80024f04 <printf>
    80007032:	00042797          	auipc	a5,0x42
    80007036:	fdf7c783          	lbu	a5,-33(a5) # 80049011 <excpt+0x1>
    8000703a:	e7a9                	bnez	a5,80007084 <wfi_exception_tests_6+0x110>
    8000703c:	4529                	li	a0,10
    8000703e:	4d11c0ef          	jal	80023d0e <putchar>
    80007042:	00042797          	auipc	a5,0x42
    80007046:	fcf7c783          	lbu	a5,-49(a5) # 80049011 <excpt+0x1>
    8000704a:	e79d                	bnez	a5,80007078 <wfi_exception_tests_6+0x104>
    8000704c:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    8000704e:	00020597          	auipc	a1,0x20
    80007052:	e3258593          	addi	a1,a1,-462 # 80026e80 <__func__.0+0x2c0>
    80007056:	00020517          	auipc	a0,0x20
    8000705a:	ee250513          	addi	a0,a0,-286 # 80026f38 <__func__.0+0x378>
    8000705e:	6a71d0ef          	jal	80024f04 <printf>
    80007062:	4511                	li	a0,4
    80007064:	b93f90ef          	jal	80000bf6 <goto_priv>
    80007068:	c44fa0ef          	jal	800014ac <reset_state>
}
    8000706c:	60e2                	ld	ra,24(sp)
    8000706e:	8522                	mv	a0,s0
    80007070:	6442                	ld	s0,16(sp)
    80007072:	64a2                	ld	s1,8(sp)
    80007074:	6105                	addi	sp,sp,32
    80007076:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007078:	4401                	li	s0,0
    TEST_END();
    8000707a:	00020597          	auipc	a1,0x20
    8000707e:	e1658593          	addi	a1,a1,-490 # 80026e90 <__func__.0+0x2d0>
    80007082:	bfd1                	j	80007056 <wfi_exception_tests_6+0xe2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007084:	00020517          	auipc	a0,0x20
    80007088:	e5450513          	addi	a0,a0,-428 # 80026ed8 <__func__.0+0x318>
    8000708c:	6791d0ef          	jal	80024f04 <printf>
    80007090:	02900513          	li	a0,41
    80007094:	47b1c0ef          	jal	80023d0e <putchar>
    80007098:	b755                	j	8000703c <wfi_exception_tests_6+0xc8>

000000008000709a <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    8000709a:	1101                	addi	sp,sp,-32

    TEST_START();
    8000709c:	0001e597          	auipc	a1,0x1e
    800070a0:	7c458593          	addi	a1,a1,1988 # 80025860 <__func__.15>
    800070a4:	00020517          	auipc	a0,0x20
    800070a8:	dfc50513          	addi	a0,a0,-516 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_7() {
    800070ac:	ec06                	sd	ra,24(sp)
    800070ae:	e822                	sd	s0,16(sp)
    800070b0:	e426                	sd	s1,8(sp)
    TEST_START();
    800070b2:	6531d0ef          	jal	80024f04 <printf>
    800070b6:	4529                	li	a0,10
    800070b8:	4571c0ef          	jal	80023d0e <putchar>
    
    TEST_SETUP_EXCEPT();
    800070bc:	0330000f          	fence	rw,rw
    800070c0:	00042417          	auipc	s0,0x42
    800070c4:	f5040413          	addi	s0,s0,-176 # 80049010 <excpt>
    800070c8:	4485                	li	s1,1
    800070ca:	00042797          	auipc	a5,0x42
    800070ce:	f607bf23          	sd	zero,-130(a5) # 80049048 <excpt+0x38>
    800070d2:	00941023          	sh	s1,0(s0)
    800070d6:	0330000f          	fence	rw,rw

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    800070da:	4511                	li	a0,4
    800070dc:	b1bf90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800070e0:	002007b7          	lui	a5,0x200
    800070e4:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    800070e8:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    800070ec:	24426073          	csrsi	vsip,4
    CSRS(mideleg, 0b0100);
    800070f0:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_VS);
    800070f4:	4509                	li	a0,2
    800070f6:	b01f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800070fa:	0330000f          	fence	rw,rw
    800070fe:	00042797          	auipc	a5,0x42
    80007102:	f407b523          	sd	zero,-182(a5) # 80049048 <excpt+0x38>
    80007106:	00941023          	sh	s1,0(s0)
    8000710a:	0330000f          	fence	rw,rw
    8000710e:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007112:	08200593          	li	a1,130
    80007116:	00021617          	auipc	a2,0x21
    8000711a:	34260613          	addi	a2,a2,834 # 80028458 <__func__.0+0x1898>
    8000711e:	00020517          	auipc	a0,0x20
    80007122:	d9a50513          	addi	a0,a0,-614 # 80026eb8 <__func__.0+0x2f8>
    80007126:	5df1d0ef          	jal	80024f04 <printf>
    8000712a:	00042797          	auipc	a5,0x42
    8000712e:	ee77c783          	lbu	a5,-281(a5) # 80049011 <excpt+0x1>
    80007132:	00020597          	auipc	a1,0x20
    80007136:	d4e58593          	addi	a1,a1,-690 # 80026e80 <__func__.0+0x2c0>
    8000713a:	c789                	beqz	a5,80007144 <wfi_exception_tests_7+0xaa>
    8000713c:	00020597          	auipc	a1,0x20
    80007140:	d5458593          	addi	a1,a1,-684 # 80026e90 <__func__.0+0x2d0>
    80007144:	00020517          	auipc	a0,0x20
    80007148:	d8c50513          	addi	a0,a0,-628 # 80026ed0 <__func__.0+0x310>
    8000714c:	5b91d0ef          	jal	80024f04 <printf>
    80007150:	00042797          	auipc	a5,0x42
    80007154:	ec17c783          	lbu	a5,-319(a5) # 80049011 <excpt+0x1>
    80007158:	e7a9                	bnez	a5,800071a2 <wfi_exception_tests_7+0x108>
    8000715a:	4529                	li	a0,10
    8000715c:	3b31c0ef          	jal	80023d0e <putchar>
    80007160:	00042797          	auipc	a5,0x42
    80007164:	eb17c783          	lbu	a5,-335(a5) # 80049011 <excpt+0x1>
    80007168:	e79d                	bnez	a5,80007196 <wfi_exception_tests_7+0xfc>
    8000716a:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8000716c:	00020597          	auipc	a1,0x20
    80007170:	d1458593          	addi	a1,a1,-748 # 80026e80 <__func__.0+0x2c0>
    80007174:	00020517          	auipc	a0,0x20
    80007178:	dc450513          	addi	a0,a0,-572 # 80026f38 <__func__.0+0x378>
    8000717c:	5891d0ef          	jal	80024f04 <printf>
    80007180:	4511                	li	a0,4
    80007182:	a75f90ef          	jal	80000bf6 <goto_priv>
    80007186:	b26fa0ef          	jal	800014ac <reset_state>
}
    8000718a:	60e2                	ld	ra,24(sp)
    8000718c:	8522                	mv	a0,s0
    8000718e:	6442                	ld	s0,16(sp)
    80007190:	64a2                	ld	s1,8(sp)
    80007192:	6105                	addi	sp,sp,32
    80007194:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007196:	4401                	li	s0,0
    TEST_END();
    80007198:	00020597          	auipc	a1,0x20
    8000719c:	cf858593          	addi	a1,a1,-776 # 80026e90 <__func__.0+0x2d0>
    800071a0:	bfd1                	j	80007174 <wfi_exception_tests_7+0xda>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800071a2:	00020517          	auipc	a0,0x20
    800071a6:	d3650513          	addi	a0,a0,-714 # 80026ed8 <__func__.0+0x318>
    800071aa:	55b1d0ef          	jal	80024f04 <printf>
    800071ae:	02900513          	li	a0,41
    800071b2:	35d1c0ef          	jal	80023d0e <putchar>
    800071b6:	b755                	j	8000715a <wfi_exception_tests_7+0xc0>

00000000800071b8 <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    800071b8:	1141                	addi	sp,sp,-16

    TEST_START();
    800071ba:	0001e597          	auipc	a1,0x1e
    800071be:	6be58593          	addi	a1,a1,1726 # 80025878 <__func__.14>
    800071c2:	00020517          	auipc	a0,0x20
    800071c6:	cde50513          	addi	a0,a0,-802 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_8() {
    800071ca:	e406                	sd	ra,8(sp)
    800071cc:	e022                	sd	s0,0(sp)
    TEST_START();
    800071ce:	5371d0ef          	jal	80024f04 <printf>
    800071d2:	4529                	li	a0,10
    800071d4:	33b1c0ef          	jal	80023d0e <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    800071d8:	4511                	li	a0,4
    800071da:	a1df90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800071de:	002007b7          	lui	a5,0x200
    800071e2:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    800071e6:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    800071ea:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_VS);
    800071ee:	4509                	li	a0,2
    800071f0:	a07f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800071f4:	0330000f          	fence	rw,rw
    800071f8:	4785                	li	a5,1
    800071fa:	00042717          	auipc	a4,0x42
    800071fe:	e4073723          	sd	zero,-434(a4) # 80049048 <excpt+0x38>
    80007202:	00042717          	auipc	a4,0x42
    80007206:	e0f71723          	sh	a5,-498(a4) # 80049010 <excpt>
    8000720a:	0330000f          	fence	rw,rw
    8000720e:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007212:	08200593          	li	a1,130
    80007216:	00021617          	auipc	a2,0x21
    8000721a:	2aa60613          	addi	a2,a2,682 # 800284c0 <__func__.0+0x1900>
    8000721e:	00020517          	auipc	a0,0x20
    80007222:	c9a50513          	addi	a0,a0,-870 # 80026eb8 <__func__.0+0x2f8>
    80007226:	4df1d0ef          	jal	80024f04 <printf>
    8000722a:	00042797          	auipc	a5,0x42
    8000722e:	de77c783          	lbu	a5,-537(a5) # 80049011 <excpt+0x1>
    80007232:	00020597          	auipc	a1,0x20
    80007236:	c4e58593          	addi	a1,a1,-946 # 80026e80 <__func__.0+0x2c0>
    8000723a:	c789                	beqz	a5,80007244 <wfi_exception_tests_8+0x8c>
    8000723c:	00020597          	auipc	a1,0x20
    80007240:	c5458593          	addi	a1,a1,-940 # 80026e90 <__func__.0+0x2d0>
    80007244:	00020517          	auipc	a0,0x20
    80007248:	c8c50513          	addi	a0,a0,-884 # 80026ed0 <__func__.0+0x310>
    8000724c:	4b91d0ef          	jal	80024f04 <printf>
    80007250:	00042797          	auipc	a5,0x42
    80007254:	dc17c783          	lbu	a5,-575(a5) # 80049011 <excpt+0x1>
    80007258:	e7a1                	bnez	a5,800072a0 <wfi_exception_tests_8+0xe8>
    8000725a:	4529                	li	a0,10
    8000725c:	2b31c0ef          	jal	80023d0e <putchar>
    80007260:	00042797          	auipc	a5,0x42
    80007264:	db17c783          	lbu	a5,-591(a5) # 80049011 <excpt+0x1>
    80007268:	e795                	bnez	a5,80007294 <wfi_exception_tests_8+0xdc>
    8000726a:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    8000726c:	00020597          	auipc	a1,0x20
    80007270:	c1458593          	addi	a1,a1,-1004 # 80026e80 <__func__.0+0x2c0>
    80007274:	00020517          	auipc	a0,0x20
    80007278:	cc450513          	addi	a0,a0,-828 # 80026f38 <__func__.0+0x378>
    8000727c:	4891d0ef          	jal	80024f04 <printf>
    80007280:	4511                	li	a0,4
    80007282:	975f90ef          	jal	80000bf6 <goto_priv>
    80007286:	a26fa0ef          	jal	800014ac <reset_state>
}
    8000728a:	60a2                	ld	ra,8(sp)
    8000728c:	8522                	mv	a0,s0
    8000728e:	6402                	ld	s0,0(sp)
    80007290:	0141                	addi	sp,sp,16
    80007292:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007294:	4401                	li	s0,0
    TEST_END();
    80007296:	00020597          	auipc	a1,0x20
    8000729a:	bfa58593          	addi	a1,a1,-1030 # 80026e90 <__func__.0+0x2d0>
    8000729e:	bfd9                	j	80007274 <wfi_exception_tests_8+0xbc>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800072a0:	00020517          	auipc	a0,0x20
    800072a4:	c3850513          	addi	a0,a0,-968 # 80026ed8 <__func__.0+0x318>
    800072a8:	45d1d0ef          	jal	80024f04 <printf>
    800072ac:	02900513          	li	a0,41
    800072b0:	25f1c0ef          	jal	80023d0e <putchar>
    800072b4:	b75d                	j	8000725a <wfi_exception_tests_8+0xa2>

00000000800072b6 <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    800072b6:	1141                	addi	sp,sp,-16

    TEST_START();
    800072b8:	0001e597          	auipc	a1,0x1e
    800072bc:	5d858593          	addi	a1,a1,1496 # 80025890 <__func__.13>
    800072c0:	00020517          	auipc	a0,0x20
    800072c4:	be050513          	addi	a0,a0,-1056 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_9() {
    800072c8:	e406                	sd	ra,8(sp)
    800072ca:	e022                	sd	s0,0(sp)
    TEST_START();
    800072cc:	4391d0ef          	jal	80024f04 <printf>
    800072d0:	4529                	li	a0,10
    800072d2:	23d1c0ef          	jal	80023d0e <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800072d6:	4511                	li	a0,4
    800072d8:	91ff90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800072dc:	002007b7          	lui	a5,0x200
    800072e0:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    800072e4:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    800072e8:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_HS);
    800072ec:	450d                	li	a0,3
    800072ee:	909f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800072f2:	0330000f          	fence	rw,rw
    800072f6:	4785                	li	a5,1
    800072f8:	00042717          	auipc	a4,0x42
    800072fc:	d4073823          	sd	zero,-688(a4) # 80049048 <excpt+0x38>
    80007300:	00042717          	auipc	a4,0x42
    80007304:	d0f71823          	sh	a5,-752(a4) # 80049010 <excpt>
    80007308:	0330000f          	fence	rw,rw
    8000730c:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007310:	08200593          	li	a1,130
    80007314:	00021617          	auipc	a2,0x21
    80007318:	1ac60613          	addi	a2,a2,428 # 800284c0 <__func__.0+0x1900>
    8000731c:	00020517          	auipc	a0,0x20
    80007320:	b9c50513          	addi	a0,a0,-1124 # 80026eb8 <__func__.0+0x2f8>
    80007324:	3e11d0ef          	jal	80024f04 <printf>
    80007328:	00042797          	auipc	a5,0x42
    8000732c:	ce97c783          	lbu	a5,-791(a5) # 80049011 <excpt+0x1>
    80007330:	00020597          	auipc	a1,0x20
    80007334:	b5058593          	addi	a1,a1,-1200 # 80026e80 <__func__.0+0x2c0>
    80007338:	c789                	beqz	a5,80007342 <wfi_exception_tests_9+0x8c>
    8000733a:	00020597          	auipc	a1,0x20
    8000733e:	b5658593          	addi	a1,a1,-1194 # 80026e90 <__func__.0+0x2d0>
    80007342:	00020517          	auipc	a0,0x20
    80007346:	b8e50513          	addi	a0,a0,-1138 # 80026ed0 <__func__.0+0x310>
    8000734a:	3bb1d0ef          	jal	80024f04 <printf>
    8000734e:	00042797          	auipc	a5,0x42
    80007352:	cc37c783          	lbu	a5,-829(a5) # 80049011 <excpt+0x1>
    80007356:	e7a1                	bnez	a5,8000739e <wfi_exception_tests_9+0xe8>
    80007358:	4529                	li	a0,10
    8000735a:	1b51c0ef          	jal	80023d0e <putchar>
    8000735e:	00042797          	auipc	a5,0x42
    80007362:	cb37c783          	lbu	a5,-845(a5) # 80049011 <excpt+0x1>
    80007366:	e795                	bnez	a5,80007392 <wfi_exception_tests_9+0xdc>
    80007368:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    8000736a:	00020597          	auipc	a1,0x20
    8000736e:	b1658593          	addi	a1,a1,-1258 # 80026e80 <__func__.0+0x2c0>
    80007372:	00020517          	auipc	a0,0x20
    80007376:	bc650513          	addi	a0,a0,-1082 # 80026f38 <__func__.0+0x378>
    8000737a:	38b1d0ef          	jal	80024f04 <printf>
    8000737e:	4511                	li	a0,4
    80007380:	877f90ef          	jal	80000bf6 <goto_priv>
    80007384:	928fa0ef          	jal	800014ac <reset_state>
}
    80007388:	60a2                	ld	ra,8(sp)
    8000738a:	8522                	mv	a0,s0
    8000738c:	6402                	ld	s0,0(sp)
    8000738e:	0141                	addi	sp,sp,16
    80007390:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007392:	4401                	li	s0,0
    TEST_END();
    80007394:	00020597          	auipc	a1,0x20
    80007398:	afc58593          	addi	a1,a1,-1284 # 80026e90 <__func__.0+0x2d0>
    8000739c:	bfd9                	j	80007372 <wfi_exception_tests_9+0xbc>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000739e:	00020517          	auipc	a0,0x20
    800073a2:	b3a50513          	addi	a0,a0,-1222 # 80026ed8 <__func__.0+0x318>
    800073a6:	35f1d0ef          	jal	80024f04 <printf>
    800073aa:	02900513          	li	a0,41
    800073ae:	1611c0ef          	jal	80023d0e <putchar>
    800073b2:	b75d                	j	80007358 <wfi_exception_tests_9+0xa2>

00000000800073b4 <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    800073b4:	1141                	addi	sp,sp,-16

    TEST_START();
    800073b6:	0001e597          	auipc	a1,0x1e
    800073ba:	4f258593          	addi	a1,a1,1266 # 800258a8 <__func__.12>
    800073be:	00020517          	auipc	a0,0x20
    800073c2:	ae250513          	addi	a0,a0,-1310 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_10() {
    800073c6:	e406                	sd	ra,8(sp)
    800073c8:	e022                	sd	s0,0(sp)
    TEST_START();
    800073ca:	33b1d0ef          	jal	80024f04 <printf>
    800073ce:	4529                	li	a0,10
    800073d0:	13f1c0ef          	jal	80023d0e <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800073d4:	4511                	li	a0,4
    800073d6:	821f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800073da:	002007b7          	lui	a5,0x200
    800073de:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    800073e2:	30406073          	csrsi	mie,0
    CSRS(mideleg, 0x0);
    800073e6:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_M);
    800073ea:	4511                	li	a0,4
    800073ec:	80bf90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800073f0:	0330000f          	fence	rw,rw
    800073f4:	4785                	li	a5,1
    800073f6:	00042717          	auipc	a4,0x42
    800073fa:	c4073923          	sd	zero,-942(a4) # 80049048 <excpt+0x38>
    800073fe:	00042717          	auipc	a4,0x42
    80007402:	c0f71923          	sh	a5,-1006(a4) # 80049010 <excpt>
    80007406:	0330000f          	fence	rw,rw
    8000740a:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000740e:	08200593          	li	a1,130
    80007412:	00021617          	auipc	a2,0x21
    80007416:	0f660613          	addi	a2,a2,246 # 80028508 <__func__.0+0x1948>
    8000741a:	00020517          	auipc	a0,0x20
    8000741e:	a9e50513          	addi	a0,a0,-1378 # 80026eb8 <__func__.0+0x2f8>
    80007422:	2e31d0ef          	jal	80024f04 <printf>
    80007426:	00042797          	auipc	a5,0x42
    8000742a:	beb7c783          	lbu	a5,-1045(a5) # 80049011 <excpt+0x1>
    8000742e:	00020597          	auipc	a1,0x20
    80007432:	a5258593          	addi	a1,a1,-1454 # 80026e80 <__func__.0+0x2c0>
    80007436:	c789                	beqz	a5,80007440 <wfi_exception_tests_10+0x8c>
    80007438:	00020597          	auipc	a1,0x20
    8000743c:	a5858593          	addi	a1,a1,-1448 # 80026e90 <__func__.0+0x2d0>
    80007440:	00020517          	auipc	a0,0x20
    80007444:	a9050513          	addi	a0,a0,-1392 # 80026ed0 <__func__.0+0x310>
    80007448:	2bd1d0ef          	jal	80024f04 <printf>
    8000744c:	00042797          	auipc	a5,0x42
    80007450:	bc57c783          	lbu	a5,-1083(a5) # 80049011 <excpt+0x1>
    80007454:	e7a1                	bnez	a5,8000749c <wfi_exception_tests_10+0xe8>
    80007456:	4529                	li	a0,10
    80007458:	0b71c0ef          	jal	80023d0e <putchar>
    8000745c:	00042797          	auipc	a5,0x42
    80007460:	bb57c783          	lbu	a5,-1099(a5) # 80049011 <excpt+0x1>
    80007464:	e795                	bnez	a5,80007490 <wfi_exception_tests_10+0xdc>
    80007466:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007468:	00020597          	auipc	a1,0x20
    8000746c:	a1858593          	addi	a1,a1,-1512 # 80026e80 <__func__.0+0x2c0>
    80007470:	00020517          	auipc	a0,0x20
    80007474:	ac850513          	addi	a0,a0,-1336 # 80026f38 <__func__.0+0x378>
    80007478:	28d1d0ef          	jal	80024f04 <printf>
    8000747c:	4511                	li	a0,4
    8000747e:	f78f90ef          	jal	80000bf6 <goto_priv>
    80007482:	82afa0ef          	jal	800014ac <reset_state>
}
    80007486:	60a2                	ld	ra,8(sp)
    80007488:	8522                	mv	a0,s0
    8000748a:	6402                	ld	s0,0(sp)
    8000748c:	0141                	addi	sp,sp,16
    8000748e:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007490:	4401                	li	s0,0
    TEST_END();
    80007492:	00020597          	auipc	a1,0x20
    80007496:	9fe58593          	addi	a1,a1,-1538 # 80026e90 <__func__.0+0x2d0>
    8000749a:	bfd9                	j	80007470 <wfi_exception_tests_10+0xbc>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000749c:	00020517          	auipc	a0,0x20
    800074a0:	a3c50513          	addi	a0,a0,-1476 # 80026ed8 <__func__.0+0x318>
    800074a4:	2611d0ef          	jal	80024f04 <printf>
    800074a8:	02900513          	li	a0,41
    800074ac:	0631c0ef          	jal	80023d0e <putchar>
    800074b0:	b75d                	j	80007456 <wfi_exception_tests_10+0xa2>

00000000800074b2 <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    800074b2:	1141                	addi	sp,sp,-16

    TEST_START();
    800074b4:	0001e597          	auipc	a1,0x1e
    800074b8:	40c58593          	addi	a1,a1,1036 # 800258c0 <__func__.11>
    800074bc:	00020517          	auipc	a0,0x20
    800074c0:	9e450513          	addi	a0,a0,-1564 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_11() {
    800074c4:	e406                	sd	ra,8(sp)
    800074c6:	e022                	sd	s0,0(sp)
    TEST_START();
    800074c8:	23d1d0ef          	jal	80024f04 <printf>
    800074cc:	4529                	li	a0,10
    800074ce:	0411c0ef          	jal	80023d0e <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    800074d2:	4511                	li	a0,4
    800074d4:	f22f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800074d8:	002007b7          	lui	a5,0x200
    800074dc:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800074e0:	10405073          	csrwi	sie,0

    CSRW(mideleg, (uint64_t)-1);
    800074e4:	57fd                	li	a5,-1
    800074e6:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    800074ea:	4509                	li	a0,2
    800074ec:	f0af90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800074f0:	0330000f          	fence	rw,rw
    800074f4:	4785                	li	a5,1
    800074f6:	00042717          	auipc	a4,0x42
    800074fa:	b4073923          	sd	zero,-1198(a4) # 80049048 <excpt+0x38>
    800074fe:	00042717          	auipc	a4,0x42
    80007502:	b0f71923          	sh	a5,-1262(a4) # 80049010 <excpt>
    80007506:	0330000f          	fence	rw,rw
    8000750a:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000750e:	08200593          	li	a1,130
    80007512:	00021617          	auipc	a2,0x21
    80007516:	03e60613          	addi	a2,a2,62 # 80028550 <__func__.0+0x1990>
    8000751a:	00020517          	auipc	a0,0x20
    8000751e:	99e50513          	addi	a0,a0,-1634 # 80026eb8 <__func__.0+0x2f8>
    80007522:	1e31d0ef          	jal	80024f04 <printf>
    80007526:	00042797          	auipc	a5,0x42
    8000752a:	aeb7c783          	lbu	a5,-1301(a5) # 80049011 <excpt+0x1>
    8000752e:	00020597          	auipc	a1,0x20
    80007532:	95258593          	addi	a1,a1,-1710 # 80026e80 <__func__.0+0x2c0>
    80007536:	c789                	beqz	a5,80007540 <wfi_exception_tests_11+0x8e>
    80007538:	00020597          	auipc	a1,0x20
    8000753c:	95858593          	addi	a1,a1,-1704 # 80026e90 <__func__.0+0x2d0>
    80007540:	00020517          	auipc	a0,0x20
    80007544:	99050513          	addi	a0,a0,-1648 # 80026ed0 <__func__.0+0x310>
    80007548:	1bd1d0ef          	jal	80024f04 <printf>
    8000754c:	00042797          	auipc	a5,0x42
    80007550:	ac57c783          	lbu	a5,-1339(a5) # 80049011 <excpt+0x1>
    80007554:	e7a1                	bnez	a5,8000759c <wfi_exception_tests_11+0xea>
    80007556:	4529                	li	a0,10
    80007558:	7b61c0ef          	jal	80023d0e <putchar>
    8000755c:	00042797          	auipc	a5,0x42
    80007560:	ab57c783          	lbu	a5,-1355(a5) # 80049011 <excpt+0x1>
    80007564:	e795                	bnez	a5,80007590 <wfi_exception_tests_11+0xde>
    80007566:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007568:	00020597          	auipc	a1,0x20
    8000756c:	91858593          	addi	a1,a1,-1768 # 80026e80 <__func__.0+0x2c0>
    80007570:	00020517          	auipc	a0,0x20
    80007574:	9c850513          	addi	a0,a0,-1592 # 80026f38 <__func__.0+0x378>
    80007578:	18d1d0ef          	jal	80024f04 <printf>
    8000757c:	4511                	li	a0,4
    8000757e:	e78f90ef          	jal	80000bf6 <goto_priv>
    80007582:	f2bf90ef          	jal	800014ac <reset_state>
}
    80007586:	60a2                	ld	ra,8(sp)
    80007588:	8522                	mv	a0,s0
    8000758a:	6402                	ld	s0,0(sp)
    8000758c:	0141                	addi	sp,sp,16
    8000758e:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007590:	4401                	li	s0,0
    TEST_END();
    80007592:	00020597          	auipc	a1,0x20
    80007596:	8fe58593          	addi	a1,a1,-1794 # 80026e90 <__func__.0+0x2d0>
    8000759a:	bfd9                	j	80007570 <wfi_exception_tests_11+0xbe>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000759c:	00020517          	auipc	a0,0x20
    800075a0:	93c50513          	addi	a0,a0,-1732 # 80026ed8 <__func__.0+0x318>
    800075a4:	1611d0ef          	jal	80024f04 <printf>
    800075a8:	02900513          	li	a0,41
    800075ac:	7621c0ef          	jal	80023d0e <putchar>
    800075b0:	b75d                	j	80007556 <wfi_exception_tests_11+0xa4>

00000000800075b2 <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    800075b2:	1141                	addi	sp,sp,-16

    TEST_START();
    800075b4:	0001e597          	auipc	a1,0x1e
    800075b8:	32458593          	addi	a1,a1,804 # 800258d8 <__func__.10>
    800075bc:	00020517          	auipc	a0,0x20
    800075c0:	8e450513          	addi	a0,a0,-1820 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_12() {
    800075c4:	e406                	sd	ra,8(sp)
    800075c6:	e022                	sd	s0,0(sp)
    TEST_START();
    800075c8:	13d1d0ef          	jal	80024f04 <printf>
    800075cc:	4529                	li	a0,10
    800075ce:	7401c0ef          	jal	80023d0e <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800075d2:	4511                	li	a0,4
    800075d4:	e22f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800075d8:	002007b7          	lui	a5,0x200
    800075dc:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800075e0:	10405073          	csrwi	sie,0
    CSRW(mideleg, (uint64_t)-1);
    800075e4:	57fd                	li	a5,-1
    800075e6:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    800075ea:	450d                	li	a0,3
    800075ec:	e0af90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800075f0:	0330000f          	fence	rw,rw
    800075f4:	4785                	li	a5,1
    800075f6:	00042717          	auipc	a4,0x42
    800075fa:	a4073923          	sd	zero,-1454(a4) # 80049048 <excpt+0x38>
    800075fe:	00042717          	auipc	a4,0x42
    80007602:	a0f71923          	sh	a5,-1518(a4) # 80049010 <excpt>
    80007606:	0330000f          	fence	rw,rw
    8000760a:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000760e:	08200593          	li	a1,130
    80007612:	00021617          	auipc	a2,0x21
    80007616:	f3e60613          	addi	a2,a2,-194 # 80028550 <__func__.0+0x1990>
    8000761a:	00020517          	auipc	a0,0x20
    8000761e:	89e50513          	addi	a0,a0,-1890 # 80026eb8 <__func__.0+0x2f8>
    80007622:	0e31d0ef          	jal	80024f04 <printf>
    80007626:	00042797          	auipc	a5,0x42
    8000762a:	9eb7c783          	lbu	a5,-1557(a5) # 80049011 <excpt+0x1>
    8000762e:	00020597          	auipc	a1,0x20
    80007632:	85258593          	addi	a1,a1,-1966 # 80026e80 <__func__.0+0x2c0>
    80007636:	c789                	beqz	a5,80007640 <wfi_exception_tests_12+0x8e>
    80007638:	00020597          	auipc	a1,0x20
    8000763c:	85858593          	addi	a1,a1,-1960 # 80026e90 <__func__.0+0x2d0>
    80007640:	00020517          	auipc	a0,0x20
    80007644:	89050513          	addi	a0,a0,-1904 # 80026ed0 <__func__.0+0x310>
    80007648:	0bd1d0ef          	jal	80024f04 <printf>
    8000764c:	00042797          	auipc	a5,0x42
    80007650:	9c57c783          	lbu	a5,-1595(a5) # 80049011 <excpt+0x1>
    80007654:	e7a1                	bnez	a5,8000769c <wfi_exception_tests_12+0xea>
    80007656:	4529                	li	a0,10
    80007658:	6b61c0ef          	jal	80023d0e <putchar>
    8000765c:	00042797          	auipc	a5,0x42
    80007660:	9b57c783          	lbu	a5,-1611(a5) # 80049011 <excpt+0x1>
    80007664:	e795                	bnez	a5,80007690 <wfi_exception_tests_12+0xde>
    80007666:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007668:	00020597          	auipc	a1,0x20
    8000766c:	81858593          	addi	a1,a1,-2024 # 80026e80 <__func__.0+0x2c0>
    80007670:	00020517          	auipc	a0,0x20
    80007674:	8c850513          	addi	a0,a0,-1848 # 80026f38 <__func__.0+0x378>
    80007678:	08d1d0ef          	jal	80024f04 <printf>
    8000767c:	4511                	li	a0,4
    8000767e:	d78f90ef          	jal	80000bf6 <goto_priv>
    80007682:	e2bf90ef          	jal	800014ac <reset_state>
}
    80007686:	60a2                	ld	ra,8(sp)
    80007688:	8522                	mv	a0,s0
    8000768a:	6402                	ld	s0,0(sp)
    8000768c:	0141                	addi	sp,sp,16
    8000768e:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007690:	4401                	li	s0,0
    TEST_END();
    80007692:	0001f597          	auipc	a1,0x1f
    80007696:	7fe58593          	addi	a1,a1,2046 # 80026e90 <__func__.0+0x2d0>
    8000769a:	bfd9                	j	80007670 <wfi_exception_tests_12+0xbe>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000769c:	00020517          	auipc	a0,0x20
    800076a0:	83c50513          	addi	a0,a0,-1988 # 80026ed8 <__func__.0+0x318>
    800076a4:	0611d0ef          	jal	80024f04 <printf>
    800076a8:	02900513          	li	a0,41
    800076ac:	6621c0ef          	jal	80023d0e <putchar>
    800076b0:	b75d                	j	80007656 <wfi_exception_tests_12+0xa4>

00000000800076b2 <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    800076b2:	1141                	addi	sp,sp,-16

    TEST_START();
    800076b4:	0001e597          	auipc	a1,0x1e
    800076b8:	23c58593          	addi	a1,a1,572 # 800258f0 <__func__.9>
    800076bc:	0001f517          	auipc	a0,0x1f
    800076c0:	7e450513          	addi	a0,a0,2020 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_13() {
    800076c4:	e406                	sd	ra,8(sp)
    800076c6:	e022                	sd	s0,0(sp)
    TEST_START();
    800076c8:	03d1d0ef          	jal	80024f04 <printf>
    800076cc:	4529                	li	a0,10
    800076ce:	6401c0ef          	jal	80023d0e <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800076d2:	4511                	li	a0,4
    800076d4:	d22f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800076d8:	002007b7          	lui	a5,0x200
    800076dc:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    800076e0:	30405073          	csrwi	mie,0
    CSRW(mideleg, (uint64_t)-1);
    800076e4:	57fd                	li	a5,-1
    800076e6:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    800076ea:	4511                	li	a0,4
    800076ec:	d0af90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800076f0:	0330000f          	fence	rw,rw
    800076f4:	4785                	li	a5,1
    800076f6:	00042717          	auipc	a4,0x42
    800076fa:	94073923          	sd	zero,-1710(a4) # 80049048 <excpt+0x38>
    800076fe:	00042717          	auipc	a4,0x42
    80007702:	90f71923          	sh	a5,-1774(a4) # 80049010 <excpt>
    80007706:	0330000f          	fence	rw,rw
    8000770a:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000770e:	08200593          	li	a1,130
    80007712:	00021617          	auipc	a2,0x21
    80007716:	e8660613          	addi	a2,a2,-378 # 80028598 <__func__.0+0x19d8>
    8000771a:	0001f517          	auipc	a0,0x1f
    8000771e:	79e50513          	addi	a0,a0,1950 # 80026eb8 <__func__.0+0x2f8>
    80007722:	7e21d0ef          	jal	80024f04 <printf>
    80007726:	00042797          	auipc	a5,0x42
    8000772a:	8eb7c783          	lbu	a5,-1813(a5) # 80049011 <excpt+0x1>
    8000772e:	0001f597          	auipc	a1,0x1f
    80007732:	75258593          	addi	a1,a1,1874 # 80026e80 <__func__.0+0x2c0>
    80007736:	c789                	beqz	a5,80007740 <wfi_exception_tests_13+0x8e>
    80007738:	0001f597          	auipc	a1,0x1f
    8000773c:	75858593          	addi	a1,a1,1880 # 80026e90 <__func__.0+0x2d0>
    80007740:	0001f517          	auipc	a0,0x1f
    80007744:	79050513          	addi	a0,a0,1936 # 80026ed0 <__func__.0+0x310>
    80007748:	7bc1d0ef          	jal	80024f04 <printf>
    8000774c:	00042797          	auipc	a5,0x42
    80007750:	8c57c783          	lbu	a5,-1851(a5) # 80049011 <excpt+0x1>
    80007754:	e7a1                	bnez	a5,8000779c <wfi_exception_tests_13+0xea>
    80007756:	4529                	li	a0,10
    80007758:	5b61c0ef          	jal	80023d0e <putchar>
    8000775c:	00042797          	auipc	a5,0x42
    80007760:	8b57c783          	lbu	a5,-1867(a5) # 80049011 <excpt+0x1>
    80007764:	e795                	bnez	a5,80007790 <wfi_exception_tests_13+0xde>
    80007766:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007768:	0001f597          	auipc	a1,0x1f
    8000776c:	71858593          	addi	a1,a1,1816 # 80026e80 <__func__.0+0x2c0>
    80007770:	0001f517          	auipc	a0,0x1f
    80007774:	7c850513          	addi	a0,a0,1992 # 80026f38 <__func__.0+0x378>
    80007778:	78c1d0ef          	jal	80024f04 <printf>
    8000777c:	4511                	li	a0,4
    8000777e:	c78f90ef          	jal	80000bf6 <goto_priv>
    80007782:	d2bf90ef          	jal	800014ac <reset_state>
}
    80007786:	60a2                	ld	ra,8(sp)
    80007788:	8522                	mv	a0,s0
    8000778a:	6402                	ld	s0,0(sp)
    8000778c:	0141                	addi	sp,sp,16
    8000778e:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007790:	4401                	li	s0,0
    TEST_END();
    80007792:	0001f597          	auipc	a1,0x1f
    80007796:	6fe58593          	addi	a1,a1,1790 # 80026e90 <__func__.0+0x2d0>
    8000779a:	bfd9                	j	80007770 <wfi_exception_tests_13+0xbe>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000779c:	0001f517          	auipc	a0,0x1f
    800077a0:	73c50513          	addi	a0,a0,1852 # 80026ed8 <__func__.0+0x318>
    800077a4:	7601d0ef          	jal	80024f04 <printf>
    800077a8:	02900513          	li	a0,41
    800077ac:	5621c0ef          	jal	80023d0e <putchar>
    800077b0:	b75d                	j	80007756 <wfi_exception_tests_13+0xa4>

00000000800077b2 <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    800077b2:	1141                	addi	sp,sp,-16

    TEST_START();
    800077b4:	0001e597          	auipc	a1,0x1e
    800077b8:	15458593          	addi	a1,a1,340 # 80025908 <__func__.8>
    800077bc:	0001f517          	auipc	a0,0x1f
    800077c0:	6e450513          	addi	a0,a0,1764 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_14() {
    800077c4:	e406                	sd	ra,8(sp)
    800077c6:	e022                	sd	s0,0(sp)
    TEST_START();
    800077c8:	73c1d0ef          	jal	80024f04 <printf>
    800077cc:	4529                	li	a0,10
    800077ce:	5401c0ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800077d2:	4511                	li	a0,4
    800077d4:	c22f90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800077d8:	002007b7          	lui	a5,0x200
    800077dc:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    800077e0:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    800077e4:	60426073          	csrsi	hie,4

    goto_priv(PRIV_VS);
    800077e8:	4509                	li	a0,2
    800077ea:	c0cf90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800077ee:	0330000f          	fence	rw,rw
    800077f2:	4785                	li	a5,1
    800077f4:	00042717          	auipc	a4,0x42
    800077f8:	84073a23          	sd	zero,-1964(a4) # 80049048 <excpt+0x38>
    800077fc:	00042717          	auipc	a4,0x42
    80007800:	80f71a23          	sh	a5,-2028(a4) # 80049010 <excpt>
    80007804:	0330000f          	fence	rw,rw
    80007808:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000780c:	08200593          	li	a1,130
    80007810:	00021617          	auipc	a2,0x21
    80007814:	c4860613          	addi	a2,a2,-952 # 80028458 <__func__.0+0x1898>
    80007818:	0001f517          	auipc	a0,0x1f
    8000781c:	6a050513          	addi	a0,a0,1696 # 80026eb8 <__func__.0+0x2f8>
    80007820:	6e41d0ef          	jal	80024f04 <printf>
    80007824:	00041797          	auipc	a5,0x41
    80007828:	7ed7c783          	lbu	a5,2029(a5) # 80049011 <excpt+0x1>
    8000782c:	0001f597          	auipc	a1,0x1f
    80007830:	65458593          	addi	a1,a1,1620 # 80026e80 <__func__.0+0x2c0>
    80007834:	c789                	beqz	a5,8000783e <wfi_exception_tests_14+0x8c>
    80007836:	0001f597          	auipc	a1,0x1f
    8000783a:	65a58593          	addi	a1,a1,1626 # 80026e90 <__func__.0+0x2d0>
    8000783e:	0001f517          	auipc	a0,0x1f
    80007842:	69250513          	addi	a0,a0,1682 # 80026ed0 <__func__.0+0x310>
    80007846:	6be1d0ef          	jal	80024f04 <printf>
    8000784a:	00041797          	auipc	a5,0x41
    8000784e:	7c77c783          	lbu	a5,1991(a5) # 80049011 <excpt+0x1>
    80007852:	e7a1                	bnez	a5,8000789a <wfi_exception_tests_14+0xe8>
    80007854:	4529                	li	a0,10
    80007856:	4b81c0ef          	jal	80023d0e <putchar>
    8000785a:	00041797          	auipc	a5,0x41
    8000785e:	7b77c783          	lbu	a5,1975(a5) # 80049011 <excpt+0x1>
    80007862:	e795                	bnez	a5,8000788e <wfi_exception_tests_14+0xdc>
    80007864:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    80007866:	0001f597          	auipc	a1,0x1f
    8000786a:	61a58593          	addi	a1,a1,1562 # 80026e80 <__func__.0+0x2c0>
    8000786e:	0001f517          	auipc	a0,0x1f
    80007872:	6ca50513          	addi	a0,a0,1738 # 80026f38 <__func__.0+0x378>
    80007876:	68e1d0ef          	jal	80024f04 <printf>
    8000787a:	4511                	li	a0,4
    8000787c:	b7af90ef          	jal	80000bf6 <goto_priv>
    80007880:	c2df90ef          	jal	800014ac <reset_state>
}
    80007884:	60a2                	ld	ra,8(sp)
    80007886:	8522                	mv	a0,s0
    80007888:	6402                	ld	s0,0(sp)
    8000788a:	0141                	addi	sp,sp,16
    8000788c:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000788e:	4401                	li	s0,0
    TEST_END();
    80007890:	0001f597          	auipc	a1,0x1f
    80007894:	60058593          	addi	a1,a1,1536 # 80026e90 <__func__.0+0x2d0>
    80007898:	bfd9                	j	8000786e <wfi_exception_tests_14+0xbc>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000789a:	0001f517          	auipc	a0,0x1f
    8000789e:	63e50513          	addi	a0,a0,1598 # 80026ed8 <__func__.0+0x318>
    800078a2:	6621d0ef          	jal	80024f04 <printf>
    800078a6:	02900513          	li	a0,41
    800078aa:	4641c0ef          	jal	80023d0e <putchar>
    800078ae:	b75d                	j	80007854 <wfi_exception_tests_14+0xa2>

00000000800078b0 <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    800078b0:	1101                	addi	sp,sp,-32

    TEST_START();
    800078b2:	0001e597          	auipc	a1,0x1e
    800078b6:	06e58593          	addi	a1,a1,110 # 80025920 <__func__.7>
    800078ba:	0001f517          	auipc	a0,0x1f
    800078be:	5e650513          	addi	a0,a0,1510 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_15() {
    800078c2:	ec06                	sd	ra,24(sp)
    800078c4:	e822                	sd	s0,16(sp)
    800078c6:	e426                	sd	s1,8(sp)
    TEST_START();
    800078c8:	63c1d0ef          	jal	80024f04 <printf>
    800078cc:	4529                	li	a0,10
    800078ce:	4401c0ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800078d2:	4511                	li	a0,4
    800078d4:	b22f90ef          	jal	80000bf6 <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    800078d8:	002007b7          	lui	a5,0x200
    800078dc:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800078e0:	450d                	li	a0,3
    800078e2:	b14f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800078e6:	0330000f          	fence	rw,rw
    800078ea:	00041417          	auipc	s0,0x41
    800078ee:	72640413          	addi	s0,s0,1830 # 80049010 <excpt>
    800078f2:	4785                	li	a5,1
    800078f4:	00041717          	auipc	a4,0x41
    800078f8:	74073a23          	sd	zero,1876(a4) # 80049048 <excpt+0x38>
    800078fc:	00f41023          	sh	a5,0(s0)
    80007900:	0330000f          	fence	rw,rw
    80007904:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007908:	08200593          	li	a1,130
    8000790c:	00021617          	auipc	a2,0x21
    80007910:	cd460613          	addi	a2,a2,-812 # 800285e0 <__func__.0+0x1a20>
    80007914:	0001f517          	auipc	a0,0x1f
    80007918:	5a450513          	addi	a0,a0,1444 # 80026eb8 <__func__.0+0x2f8>
    8000791c:	5e81d0ef          	jal	80024f04 <printf>
    80007920:	00041797          	auipc	a5,0x41
    80007924:	6f17c783          	lbu	a5,1777(a5) # 80049011 <excpt+0x1>
    80007928:	0001f597          	auipc	a1,0x1f
    8000792c:	56858593          	addi	a1,a1,1384 # 80026e90 <__func__.0+0x2d0>
    80007930:	cf89                	beqz	a5,8000794a <wfi_exception_tests_15+0x9a>
    80007932:	6418                	ld	a4,8(s0)
    80007934:	4789                	li	a5,2
    80007936:	0001f597          	auipc	a1,0x1f
    8000793a:	54a58593          	addi	a1,a1,1354 # 80026e80 <__func__.0+0x2c0>
    8000793e:	00f70663          	beq	a4,a5,8000794a <wfi_exception_tests_15+0x9a>
    80007942:	0001f597          	auipc	a1,0x1f
    80007946:	54e58593          	addi	a1,a1,1358 # 80026e90 <__func__.0+0x2d0>
    8000794a:	0001f517          	auipc	a0,0x1f
    8000794e:	58650513          	addi	a0,a0,1414 # 80026ed0 <__func__.0+0x310>
    80007952:	5b21d0ef          	jal	80024f04 <printf>
    80007956:	00041797          	auipc	a5,0x41
    8000795a:	6bb7c783          	lbu	a5,1723(a5) # 80049011 <excpt+0x1>
    8000795e:	c789                	beqz	a5,80007968 <wfi_exception_tests_15+0xb8>
    80007960:	6418                	ld	a4,8(s0)
    80007962:	4789                	li	a5,2
    80007964:	00f70c63          	beq	a4,a5,8000797c <wfi_exception_tests_15+0xcc>
    80007968:	0001f517          	auipc	a0,0x1f
    8000796c:	57050513          	addi	a0,a0,1392 # 80026ed8 <__func__.0+0x318>
    80007970:	5941d0ef          	jal	80024f04 <printf>
    80007974:	02900513          	li	a0,41
    80007978:	3961c0ef          	jal	80023d0e <putchar>
    8000797c:	4529                	li	a0,10
    8000797e:	3901c0ef          	jal	80023d0e <putchar>
    80007982:	00041497          	auipc	s1,0x41
    80007986:	68f4c483          	lbu	s1,1679(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8000798a:	0001f597          	auipc	a1,0x1f
    8000798e:	50658593          	addi	a1,a1,1286 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    80007992:	cc91                	beqz	s1,800079ae <wfi_exception_tests_15+0xfe>
    80007994:	6418                	ld	a4,8(s0)
    80007996:	4789                	li	a5,2
    TEST_END();
    80007998:	0001f597          	auipc	a1,0x1f
    8000799c:	4e858593          	addi	a1,a1,1256 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800079a0:	00f70763          	beq	a4,a5,800079ae <wfi_exception_tests_15+0xfe>
    800079a4:	4481                	li	s1,0
    TEST_END();
    800079a6:	0001f597          	auipc	a1,0x1f
    800079aa:	4ea58593          	addi	a1,a1,1258 # 80026e90 <__func__.0+0x2d0>
    800079ae:	0001f517          	auipc	a0,0x1f
    800079b2:	58a50513          	addi	a0,a0,1418 # 80026f38 <__func__.0+0x378>
    800079b6:	54e1d0ef          	jal	80024f04 <printf>
    800079ba:	4511                	li	a0,4
    800079bc:	a3af90ef          	jal	80000bf6 <goto_priv>
    800079c0:	aedf90ef          	jal	800014ac <reset_state>
}
    800079c4:	60e2                	ld	ra,24(sp)
    800079c6:	6442                	ld	s0,16(sp)
    800079c8:	8526                	mv	a0,s1
    800079ca:	64a2                	ld	s1,8(sp)
    800079cc:	6105                	addi	sp,sp,32
    800079ce:	8082                	ret

00000000800079d0 <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    800079d0:	1101                	addi	sp,sp,-32

    TEST_START();
    800079d2:	0001e597          	auipc	a1,0x1e
    800079d6:	f6658593          	addi	a1,a1,-154 # 80025938 <__func__.6>
    800079da:	0001f517          	auipc	a0,0x1f
    800079de:	4c650513          	addi	a0,a0,1222 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_16() {
    800079e2:	ec06                	sd	ra,24(sp)
    800079e4:	e822                	sd	s0,16(sp)
    800079e6:	e426                	sd	s1,8(sp)
    TEST_START();
    800079e8:	51c1d0ef          	jal	80024f04 <printf>
    800079ec:	4529                	li	a0,10
    800079ee:	3201c0ef          	jal	80023d0e <putchar>
    CSRS(mstatus, MSTATUS_TW);
    800079f2:	002007b7          	lui	a5,0x200
    800079f6:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    800079fa:	60326073          	csrsi	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    800079fe:	20416073          	csrsi	vsie,2
    
    goto_priv(PRIV_VS);
    80007a02:	4509                	li	a0,2
    80007a04:	9f2f90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007a08:	0330000f          	fence	rw,rw
    80007a0c:	00041497          	auipc	s1,0x41
    80007a10:	60448493          	addi	s1,s1,1540 # 80049010 <excpt>
    80007a14:	4785                	li	a5,1
    80007a16:	00041717          	auipc	a4,0x41
    80007a1a:	62073923          	sd	zero,1586(a4) # 80049048 <excpt+0x38>
    80007a1e:	00f49023          	sh	a5,0(s1)
    80007a22:	0330000f          	fence	rw,rw
    80007a26:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007a2a:	08200593          	li	a1,130
    80007a2e:	00021617          	auipc	a2,0x21
    80007a32:	bfa60613          	addi	a2,a2,-1030 # 80028628 <__func__.0+0x1a68>
    80007a36:	0001f517          	auipc	a0,0x1f
    80007a3a:	48250513          	addi	a0,a0,1154 # 80026eb8 <__func__.0+0x2f8>
    80007a3e:	4c61d0ef          	jal	80024f04 <printf>
    80007a42:	00041797          	auipc	a5,0x41
    80007a46:	5cf7c783          	lbu	a5,1487(a5) # 80049011 <excpt+0x1>
    80007a4a:	0001f597          	auipc	a1,0x1f
    80007a4e:	44658593          	addi	a1,a1,1094 # 80026e90 <__func__.0+0x2d0>
    80007a52:	cf89                	beqz	a5,80007a6c <wfi_exception_tests_16+0x9c>
    80007a54:	6498                	ld	a4,8(s1)
    80007a56:	4789                	li	a5,2
    80007a58:	0001f597          	auipc	a1,0x1f
    80007a5c:	42858593          	addi	a1,a1,1064 # 80026e80 <__func__.0+0x2c0>
    80007a60:	00f70663          	beq	a4,a5,80007a6c <wfi_exception_tests_16+0x9c>
    80007a64:	0001f597          	auipc	a1,0x1f
    80007a68:	42c58593          	addi	a1,a1,1068 # 80026e90 <__func__.0+0x2d0>
    80007a6c:	0001f517          	auipc	a0,0x1f
    80007a70:	46450513          	addi	a0,a0,1124 # 80026ed0 <__func__.0+0x310>
    80007a74:	4901d0ef          	jal	80024f04 <printf>
    80007a78:	00041797          	auipc	a5,0x41
    80007a7c:	5997c783          	lbu	a5,1433(a5) # 80049011 <excpt+0x1>
    80007a80:	c789                	beqz	a5,80007a8a <wfi_exception_tests_16+0xba>
    80007a82:	6498                	ld	a4,8(s1)
    80007a84:	4789                	li	a5,2
    80007a86:	00f70c63          	beq	a4,a5,80007a9e <wfi_exception_tests_16+0xce>
    80007a8a:	0001f517          	auipc	a0,0x1f
    80007a8e:	44e50513          	addi	a0,a0,1102 # 80026ed8 <__func__.0+0x318>
    80007a92:	4721d0ef          	jal	80024f04 <printf>
    80007a96:	02900513          	li	a0,41
    80007a9a:	2741c0ef          	jal	80023d0e <putchar>
    80007a9e:	4529                	li	a0,10
    80007aa0:	26e1c0ef          	jal	80023d0e <putchar>
    80007aa4:	00041417          	auipc	s0,0x41
    80007aa8:	56d44403          	lbu	s0,1389(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    80007aac:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007aae:	c409                	beqz	s0,80007ab8 <wfi_exception_tests_16+0xe8>
    80007ab0:	6498                	ld	a4,8(s1)
    80007ab2:	4789                	li	a5,2
    80007ab4:	02f70e63          	beq	a4,a5,80007af0 <wfi_exception_tests_16+0x120>
    goto_priv(PRIV_M);
    80007ab8:	93ef90ef          	jal	80000bf6 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007abc:	002007b7          	lui	a5,0x200
    80007ac0:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007ac4:	4401                	li	s0,0
    TEST_END();
    80007ac6:	0001f597          	auipc	a1,0x1f
    80007aca:	3ca58593          	addi	a1,a1,970 # 80026e90 <__func__.0+0x2d0>
    80007ace:	0001f517          	auipc	a0,0x1f
    80007ad2:	46a50513          	addi	a0,a0,1130 # 80026f38 <__func__.0+0x378>
    80007ad6:	42e1d0ef          	jal	80024f04 <printf>
    80007ada:	4511                	li	a0,4
    80007adc:	91af90ef          	jal	80000bf6 <goto_priv>
    80007ae0:	9cdf90ef          	jal	800014ac <reset_state>
}
    80007ae4:	60e2                	ld	ra,24(sp)
    80007ae6:	8522                	mv	a0,s0
    80007ae8:	6442                	ld	s0,16(sp)
    80007aea:	64a2                	ld	s1,8(sp)
    80007aec:	6105                	addi	sp,sp,32
    80007aee:	8082                	ret
    goto_priv(PRIV_M);
    80007af0:	906f90ef          	jal	80000bf6 <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007af4:	002007b7          	lui	a5,0x200
    80007af8:	3007b073          	csrc	mstatus,a5
    TEST_END();
    80007afc:	0001f597          	auipc	a1,0x1f
    80007b00:	38458593          	addi	a1,a1,900 # 80026e80 <__func__.0+0x2c0>
    80007b04:	b7e9                	j	80007ace <wfi_exception_tests_16+0xfe>

0000000080007b06 <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    80007b06:	1141                	addi	sp,sp,-16

    TEST_START();
    80007b08:	0001e597          	auipc	a1,0x1e
    80007b0c:	e4858593          	addi	a1,a1,-440 # 80025950 <__func__.5>
    80007b10:	0001f517          	auipc	a0,0x1f
    80007b14:	39050513          	addi	a0,a0,912 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_17() {
    80007b18:	e406                	sd	ra,8(sp)
    80007b1a:	e022                	sd	s0,0(sp)
    TEST_START();
    80007b1c:	3e81d0ef          	jal	80024f04 <printf>
    80007b20:	4529                	li	a0,10
    80007b22:	1ec1c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    80007b26:	4511                	li	a0,4
    80007b28:	8cef90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007b2c:	002007b7          	lui	a5,0x200
    80007b30:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    80007b34:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    80007b38:	4509                	li	a0,2
    80007b3a:	8bcf90ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007b3e:	0330000f          	fence	rw,rw
    80007b42:	4785                	li	a5,1
    80007b44:	00041717          	auipc	a4,0x41
    80007b48:	50073223          	sd	zero,1284(a4) # 80049048 <excpt+0x38>
    80007b4c:	00041717          	auipc	a4,0x41
    80007b50:	4cf71223          	sh	a5,1220(a4) # 80049010 <excpt>
    80007b54:	0330000f          	fence	rw,rw
    80007b58:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007b5c:	08200593          	li	a1,130
    80007b60:	00021617          	auipc	a2,0x21
    80007b64:	b1060613          	addi	a2,a2,-1264 # 80028670 <__func__.0+0x1ab0>
    80007b68:	0001f517          	auipc	a0,0x1f
    80007b6c:	35050513          	addi	a0,a0,848 # 80026eb8 <__func__.0+0x2f8>
    80007b70:	3941d0ef          	jal	80024f04 <printf>
    80007b74:	00041797          	auipc	a5,0x41
    80007b78:	49d7c783          	lbu	a5,1181(a5) # 80049011 <excpt+0x1>
    80007b7c:	0001f597          	auipc	a1,0x1f
    80007b80:	30458593          	addi	a1,a1,772 # 80026e80 <__func__.0+0x2c0>
    80007b84:	c789                	beqz	a5,80007b8e <wfi_exception_tests_17+0x88>
    80007b86:	0001f597          	auipc	a1,0x1f
    80007b8a:	30a58593          	addi	a1,a1,778 # 80026e90 <__func__.0+0x2d0>
    80007b8e:	0001f517          	auipc	a0,0x1f
    80007b92:	34250513          	addi	a0,a0,834 # 80026ed0 <__func__.0+0x310>
    80007b96:	36e1d0ef          	jal	80024f04 <printf>
    80007b9a:	00041797          	auipc	a5,0x41
    80007b9e:	4777c783          	lbu	a5,1143(a5) # 80049011 <excpt+0x1>
    80007ba2:	e7a1                	bnez	a5,80007bea <wfi_exception_tests_17+0xe4>
    80007ba4:	4529                	li	a0,10
    80007ba6:	1681c0ef          	jal	80023d0e <putchar>
    80007baa:	00041797          	auipc	a5,0x41
    80007bae:	4677c783          	lbu	a5,1127(a5) # 80049011 <excpt+0x1>
    80007bb2:	e795                	bnez	a5,80007bde <wfi_exception_tests_17+0xd8>
    80007bb4:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007bb6:	0001f597          	auipc	a1,0x1f
    80007bba:	2ca58593          	addi	a1,a1,714 # 80026e80 <__func__.0+0x2c0>
    80007bbe:	0001f517          	auipc	a0,0x1f
    80007bc2:	37a50513          	addi	a0,a0,890 # 80026f38 <__func__.0+0x378>
    80007bc6:	33e1d0ef          	jal	80024f04 <printf>
    80007bca:	4511                	li	a0,4
    80007bcc:	82af90ef          	jal	80000bf6 <goto_priv>
    80007bd0:	8ddf90ef          	jal	800014ac <reset_state>
}
    80007bd4:	60a2                	ld	ra,8(sp)
    80007bd6:	8522                	mv	a0,s0
    80007bd8:	6402                	ld	s0,0(sp)
    80007bda:	0141                	addi	sp,sp,16
    80007bdc:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007bde:	4401                	li	s0,0
    TEST_END();
    80007be0:	0001f597          	auipc	a1,0x1f
    80007be4:	2b058593          	addi	a1,a1,688 # 80026e90 <__func__.0+0x2d0>
    80007be8:	bfd9                	j	80007bbe <wfi_exception_tests_17+0xb8>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007bea:	0001f517          	auipc	a0,0x1f
    80007bee:	2ee50513          	addi	a0,a0,750 # 80026ed8 <__func__.0+0x318>
    80007bf2:	3121d0ef          	jal	80024f04 <printf>
    80007bf6:	02900513          	li	a0,41
    80007bfa:	1141c0ef          	jal	80023d0e <putchar>
    80007bfe:	b75d                	j	80007ba4 <wfi_exception_tests_17+0x9e>

0000000080007c00 <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    80007c00:	1101                	addi	sp,sp,-32

    TEST_START();
    80007c02:	0001e597          	auipc	a1,0x1e
    80007c06:	d6658593          	addi	a1,a1,-666 # 80025968 <__func__.4>
    80007c0a:	0001f517          	auipc	a0,0x1f
    80007c0e:	29650513          	addi	a0,a0,662 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_18() {
    80007c12:	ec06                	sd	ra,24(sp)
    80007c14:	e822                	sd	s0,16(sp)
    80007c16:	e426                	sd	s1,8(sp)
    TEST_START();
    80007c18:	2ec1d0ef          	jal	80024f04 <printf>
    80007c1c:	4529                	li	a0,10
    80007c1e:	0f01c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    80007c22:	4511                	li	a0,4
    80007c24:	fd3f80ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    80007c28:	002007b7          	lui	a5,0x200
    80007c2c:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    80007c30:	4509                	li	a0,2
    80007c32:	fc5f80ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007c36:	0330000f          	fence	rw,rw
    80007c3a:	00041417          	auipc	s0,0x41
    80007c3e:	3d640413          	addi	s0,s0,982 # 80049010 <excpt>
    80007c42:	4785                	li	a5,1
    80007c44:	00041717          	auipc	a4,0x41
    80007c48:	40073223          	sd	zero,1028(a4) # 80049048 <excpt+0x38>
    80007c4c:	00f41023          	sh	a5,0(s0)
    80007c50:	0330000f          	fence	rw,rw
    80007c54:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007c58:	08200593          	li	a1,130
    80007c5c:	00021617          	auipc	a2,0x21
    80007c60:	a5c60613          	addi	a2,a2,-1444 # 800286b8 <__func__.0+0x1af8>
    80007c64:	0001f517          	auipc	a0,0x1f
    80007c68:	25450513          	addi	a0,a0,596 # 80026eb8 <__func__.0+0x2f8>
    80007c6c:	2981d0ef          	jal	80024f04 <printf>
    80007c70:	00041797          	auipc	a5,0x41
    80007c74:	3a17c783          	lbu	a5,929(a5) # 80049011 <excpt+0x1>
    80007c78:	0001f597          	auipc	a1,0x1f
    80007c7c:	21858593          	addi	a1,a1,536 # 80026e90 <__func__.0+0x2d0>
    80007c80:	cf89                	beqz	a5,80007c9a <wfi_exception_tests_18+0x9a>
    80007c82:	6418                	ld	a4,8(s0)
    80007c84:	47d9                	li	a5,22
    80007c86:	0001f597          	auipc	a1,0x1f
    80007c8a:	1fa58593          	addi	a1,a1,506 # 80026e80 <__func__.0+0x2c0>
    80007c8e:	00f70663          	beq	a4,a5,80007c9a <wfi_exception_tests_18+0x9a>
    80007c92:	0001f597          	auipc	a1,0x1f
    80007c96:	1fe58593          	addi	a1,a1,510 # 80026e90 <__func__.0+0x2d0>
    80007c9a:	0001f517          	auipc	a0,0x1f
    80007c9e:	23650513          	addi	a0,a0,566 # 80026ed0 <__func__.0+0x310>
    80007ca2:	2621d0ef          	jal	80024f04 <printf>
    80007ca6:	00041797          	auipc	a5,0x41
    80007caa:	36b7c783          	lbu	a5,875(a5) # 80049011 <excpt+0x1>
    80007cae:	c789                	beqz	a5,80007cb8 <wfi_exception_tests_18+0xb8>
    80007cb0:	6418                	ld	a4,8(s0)
    80007cb2:	47d9                	li	a5,22
    80007cb4:	00f70c63          	beq	a4,a5,80007ccc <wfi_exception_tests_18+0xcc>
    80007cb8:	0001f517          	auipc	a0,0x1f
    80007cbc:	22050513          	addi	a0,a0,544 # 80026ed8 <__func__.0+0x318>
    80007cc0:	2441d0ef          	jal	80024f04 <printf>
    80007cc4:	02900513          	li	a0,41
    80007cc8:	0461c0ef          	jal	80023d0e <putchar>
    80007ccc:	4529                	li	a0,10
    80007cce:	0401c0ef          	jal	80023d0e <putchar>
    80007cd2:	00041497          	auipc	s1,0x41
    80007cd6:	33f4c483          	lbu	s1,831(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007cda:	0001f597          	auipc	a1,0x1f
    80007cde:	1b658593          	addi	a1,a1,438 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007ce2:	cc91                	beqz	s1,80007cfe <wfi_exception_tests_18+0xfe>
    80007ce4:	6418                	ld	a4,8(s0)
    80007ce6:	47d9                	li	a5,22
    TEST_END();
    80007ce8:	0001f597          	auipc	a1,0x1f
    80007cec:	19858593          	addi	a1,a1,408 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007cf0:	00f70763          	beq	a4,a5,80007cfe <wfi_exception_tests_18+0xfe>
    80007cf4:	4481                	li	s1,0
    TEST_END();
    80007cf6:	0001f597          	auipc	a1,0x1f
    80007cfa:	19a58593          	addi	a1,a1,410 # 80026e90 <__func__.0+0x2d0>
    80007cfe:	0001f517          	auipc	a0,0x1f
    80007d02:	23a50513          	addi	a0,a0,570 # 80026f38 <__func__.0+0x378>
    80007d06:	1fe1d0ef          	jal	80024f04 <printf>
    80007d0a:	4511                	li	a0,4
    80007d0c:	eebf80ef          	jal	80000bf6 <goto_priv>
    80007d10:	f9cf90ef          	jal	800014ac <reset_state>
}
    80007d14:	60e2                	ld	ra,24(sp)
    80007d16:	6442                	ld	s0,16(sp)
    80007d18:	8526                	mv	a0,s1
    80007d1a:	64a2                	ld	s1,8(sp)
    80007d1c:	6105                	addi	sp,sp,32
    80007d1e:	8082                	ret

0000000080007d20 <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    80007d20:	1101                	addi	sp,sp,-32

    TEST_START();
    80007d22:	0001e597          	auipc	a1,0x1e
    80007d26:	c5e58593          	addi	a1,a1,-930 # 80025980 <__func__.3>
    80007d2a:	0001f517          	auipc	a0,0x1f
    80007d2e:	17650513          	addi	a0,a0,374 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_19() {
    80007d32:	ec06                	sd	ra,24(sp)
    80007d34:	e822                	sd	s0,16(sp)
    80007d36:	e426                	sd	s1,8(sp)
    TEST_START();
    80007d38:	1cc1d0ef          	jal	80024f04 <printf>
    80007d3c:	4529                	li	a0,10
    80007d3e:	7d11b0ef          	jal	80023d0e <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    80007d42:	4511                	li	a0,4
    80007d44:	eb3f80ef          	jal	80000bf6 <goto_priv>

    CSRW(CSR_SIE, 0x0);
    80007d48:	10405073          	csrwi	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    80007d4c:	002007b7          	lui	a5,0x200
    80007d50:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    80007d54:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    80007d58:	4509                	li	a0,2
    80007d5a:	e9df80ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007d5e:	0330000f          	fence	rw,rw
    80007d62:	00041417          	auipc	s0,0x41
    80007d66:	2ae40413          	addi	s0,s0,686 # 80049010 <excpt>
    80007d6a:	4785                	li	a5,1
    80007d6c:	00041717          	auipc	a4,0x41
    80007d70:	2c073e23          	sd	zero,732(a4) # 80049048 <excpt+0x38>
    80007d74:	00f41023          	sh	a5,0(s0)
    80007d78:	0330000f          	fence	rw,rw
    80007d7c:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    80007d80:	640c                	ld	a1,8(s0)
    80007d82:	00020517          	auipc	a0,0x20
    80007d86:	c6650513          	addi	a0,a0,-922 # 800279e8 <__func__.0+0xe28>
    80007d8a:	17a1d0ef          	jal	80024f04 <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007d8e:	08200593          	li	a1,130
    80007d92:	00021617          	auipc	a2,0x21
    80007d96:	96e60613          	addi	a2,a2,-1682 # 80028700 <__func__.0+0x1b40>
    80007d9a:	0001f517          	auipc	a0,0x1f
    80007d9e:	11e50513          	addi	a0,a0,286 # 80026eb8 <__func__.0+0x2f8>
    80007da2:	1621d0ef          	jal	80024f04 <printf>
    80007da6:	00041797          	auipc	a5,0x41
    80007daa:	26b7c783          	lbu	a5,619(a5) # 80049011 <excpt+0x1>
    80007dae:	0001f597          	auipc	a1,0x1f
    80007db2:	0e258593          	addi	a1,a1,226 # 80026e90 <__func__.0+0x2d0>
    80007db6:	cf89                	beqz	a5,80007dd0 <wfi_exception_tests_19+0xb0>
    80007db8:	6418                	ld	a4,8(s0)
    80007dba:	47d9                	li	a5,22
    80007dbc:	0001f597          	auipc	a1,0x1f
    80007dc0:	0c458593          	addi	a1,a1,196 # 80026e80 <__func__.0+0x2c0>
    80007dc4:	00f70663          	beq	a4,a5,80007dd0 <wfi_exception_tests_19+0xb0>
    80007dc8:	0001f597          	auipc	a1,0x1f
    80007dcc:	0c858593          	addi	a1,a1,200 # 80026e90 <__func__.0+0x2d0>
    80007dd0:	0001f517          	auipc	a0,0x1f
    80007dd4:	10050513          	addi	a0,a0,256 # 80026ed0 <__func__.0+0x310>
    80007dd8:	12c1d0ef          	jal	80024f04 <printf>
    80007ddc:	00041797          	auipc	a5,0x41
    80007de0:	2357c783          	lbu	a5,565(a5) # 80049011 <excpt+0x1>
    80007de4:	c789                	beqz	a5,80007dee <wfi_exception_tests_19+0xce>
    80007de6:	6418                	ld	a4,8(s0)
    80007de8:	47d9                	li	a5,22
    80007dea:	00f70c63          	beq	a4,a5,80007e02 <wfi_exception_tests_19+0xe2>
    80007dee:	0001f517          	auipc	a0,0x1f
    80007df2:	0ea50513          	addi	a0,a0,234 # 80026ed8 <__func__.0+0x318>
    80007df6:	10e1d0ef          	jal	80024f04 <printf>
    80007dfa:	02900513          	li	a0,41
    80007dfe:	7111b0ef          	jal	80023d0e <putchar>
    80007e02:	4529                	li	a0,10
    80007e04:	70b1b0ef          	jal	80023d0e <putchar>
    80007e08:	00041497          	auipc	s1,0x41
    80007e0c:	2094c483          	lbu	s1,521(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007e10:	0001f597          	auipc	a1,0x1f
    80007e14:	08058593          	addi	a1,a1,128 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007e18:	cc91                	beqz	s1,80007e34 <wfi_exception_tests_19+0x114>
    80007e1a:	6418                	ld	a4,8(s0)
    80007e1c:	47d9                	li	a5,22
    TEST_END();
    80007e1e:	0001f597          	auipc	a1,0x1f
    80007e22:	06258593          	addi	a1,a1,98 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007e26:	00f70763          	beq	a4,a5,80007e34 <wfi_exception_tests_19+0x114>
    80007e2a:	4481                	li	s1,0
    TEST_END();
    80007e2c:	0001f597          	auipc	a1,0x1f
    80007e30:	06458593          	addi	a1,a1,100 # 80026e90 <__func__.0+0x2d0>
    80007e34:	0001f517          	auipc	a0,0x1f
    80007e38:	10450513          	addi	a0,a0,260 # 80026f38 <__func__.0+0x378>
    80007e3c:	0c81d0ef          	jal	80024f04 <printf>
    80007e40:	4511                	li	a0,4
    80007e42:	db5f80ef          	jal	80000bf6 <goto_priv>
    80007e46:	e66f90ef          	jal	800014ac <reset_state>
}
    80007e4a:	60e2                	ld	ra,24(sp)
    80007e4c:	6442                	ld	s0,16(sp)
    80007e4e:	8526                	mv	a0,s1
    80007e50:	64a2                	ld	s1,8(sp)
    80007e52:	6105                	addi	sp,sp,32
    80007e54:	8082                	ret

0000000080007e56 <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    80007e56:	1101                	addi	sp,sp,-32

    TEST_START();
    80007e58:	0001e597          	auipc	a1,0x1e
    80007e5c:	b4058593          	addi	a1,a1,-1216 # 80025998 <__func__.2>
    80007e60:	0001f517          	auipc	a0,0x1f
    80007e64:	04050513          	addi	a0,a0,64 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_20() {
    80007e68:	ec06                	sd	ra,24(sp)
    80007e6a:	e822                	sd	s0,16(sp)
    80007e6c:	e426                	sd	s1,8(sp)
    TEST_START();
    80007e6e:	0961d0ef          	jal	80024f04 <printf>
    80007e72:	4529                	li	a0,10
    80007e74:	69b1b0ef          	jal	80023d0e <putchar>
    
    TEST_SETUP_EXCEPT();
    80007e78:	0330000f          	fence	rw,rw
    80007e7c:	00041417          	auipc	s0,0x41
    80007e80:	19440413          	addi	s0,s0,404 # 80049010 <excpt>
    80007e84:	4485                	li	s1,1
    80007e86:	00041797          	auipc	a5,0x41
    80007e8a:	1c07b123          	sd	zero,450(a5) # 80049048 <excpt+0x38>
    80007e8e:	00941023          	sh	s1,0(s0)
    80007e92:	0330000f          	fence	rw,rw
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    80007e96:	4511                	li	a0,4
    80007e98:	d5ff80ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007e9c:	002007b7          	lui	a5,0x200
    80007ea0:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007ea4:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80007ea8:	64426073          	csrsi	hip,4
    CSRS(mideleg, 0b0100);
    80007eac:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_HS);
    80007eb0:	450d                	li	a0,3
    80007eb2:	d45f80ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80007eb6:	0330000f          	fence	rw,rw
    80007eba:	00041797          	auipc	a5,0x41
    80007ebe:	1807b723          	sd	zero,398(a5) # 80049048 <excpt+0x38>
    80007ec2:	00941023          	sh	s1,0(s0)
    80007ec6:	0330000f          	fence	rw,rw
    80007eca:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007ece:	08200593          	li	a1,130
    80007ed2:	00021617          	auipc	a2,0x21
    80007ed6:	87660613          	addi	a2,a2,-1930 # 80028748 <__func__.0+0x1b88>
    80007eda:	0001f517          	auipc	a0,0x1f
    80007ede:	fde50513          	addi	a0,a0,-34 # 80026eb8 <__func__.0+0x2f8>
    80007ee2:	0221d0ef          	jal	80024f04 <printf>
    80007ee6:	00041797          	auipc	a5,0x41
    80007eea:	12b7c783          	lbu	a5,299(a5) # 80049011 <excpt+0x1>
    80007eee:	0001f597          	auipc	a1,0x1f
    80007ef2:	f9258593          	addi	a1,a1,-110 # 80026e80 <__func__.0+0x2c0>
    80007ef6:	c789                	beqz	a5,80007f00 <wfi_exception_tests_20+0xaa>
    80007ef8:	0001f597          	auipc	a1,0x1f
    80007efc:	f9858593          	addi	a1,a1,-104 # 80026e90 <__func__.0+0x2d0>
    80007f00:	0001f517          	auipc	a0,0x1f
    80007f04:	fd050513          	addi	a0,a0,-48 # 80026ed0 <__func__.0+0x310>
    80007f08:	7fd1c0ef          	jal	80024f04 <printf>
    80007f0c:	00041797          	auipc	a5,0x41
    80007f10:	1057c783          	lbu	a5,261(a5) # 80049011 <excpt+0x1>
    80007f14:	e7a9                	bnez	a5,80007f5e <wfi_exception_tests_20+0x108>
    80007f16:	4529                	li	a0,10
    80007f18:	5f71b0ef          	jal	80023d0e <putchar>
    80007f1c:	00041797          	auipc	a5,0x41
    80007f20:	0f57c783          	lbu	a5,245(a5) # 80049011 <excpt+0x1>
    80007f24:	e79d                	bnez	a5,80007f52 <wfi_exception_tests_20+0xfc>
    80007f26:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007f28:	0001f597          	auipc	a1,0x1f
    80007f2c:	f5858593          	addi	a1,a1,-168 # 80026e80 <__func__.0+0x2c0>
    80007f30:	0001f517          	auipc	a0,0x1f
    80007f34:	00850513          	addi	a0,a0,8 # 80026f38 <__func__.0+0x378>
    80007f38:	7cd1c0ef          	jal	80024f04 <printf>
    80007f3c:	4511                	li	a0,4
    80007f3e:	cb9f80ef          	jal	80000bf6 <goto_priv>
    80007f42:	d6af90ef          	jal	800014ac <reset_state>
}
    80007f46:	60e2                	ld	ra,24(sp)
    80007f48:	8522                	mv	a0,s0
    80007f4a:	6442                	ld	s0,16(sp)
    80007f4c:	64a2                	ld	s1,8(sp)
    80007f4e:	6105                	addi	sp,sp,32
    80007f50:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007f52:	4401                	li	s0,0
    TEST_END();
    80007f54:	0001f597          	auipc	a1,0x1f
    80007f58:	f3c58593          	addi	a1,a1,-196 # 80026e90 <__func__.0+0x2d0>
    80007f5c:	bfd1                	j	80007f30 <wfi_exception_tests_20+0xda>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007f5e:	0001f517          	auipc	a0,0x1f
    80007f62:	f7a50513          	addi	a0,a0,-134 # 80026ed8 <__func__.0+0x318>
    80007f66:	79f1c0ef          	jal	80024f04 <printf>
    80007f6a:	02900513          	li	a0,41
    80007f6e:	5a11b0ef          	jal	80023d0e <putchar>
    80007f72:	b755                	j	80007f16 <wfi_exception_tests_20+0xc0>

0000000080007f74 <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    80007f74:	1101                	addi	sp,sp,-32

    TEST_START();
    80007f76:	0001e597          	auipc	a1,0x1e
    80007f7a:	a3a58593          	addi	a1,a1,-1478 # 800259b0 <__func__.1>
    80007f7e:	0001f517          	auipc	a0,0x1f
    80007f82:	f2250513          	addi	a0,a0,-222 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_21() {
    80007f86:	ec06                	sd	ra,24(sp)
    80007f88:	e822                	sd	s0,16(sp)
    80007f8a:	e426                	sd	s1,8(sp)
    TEST_START();
    80007f8c:	7791c0ef          	jal	80024f04 <printf>
    80007f90:	4529                	li	a0,10
    80007f92:	57d1b0ef          	jal	80023d0e <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007f96:	0330000f          	fence	rw,rw
    80007f9a:	00041417          	auipc	s0,0x41
    80007f9e:	07640413          	addi	s0,s0,118 # 80049010 <excpt>
    80007fa2:	4485                	li	s1,1
    80007fa4:	00041797          	auipc	a5,0x41
    80007fa8:	0a07b223          	sd	zero,164(a5) # 80049048 <excpt+0x38>
    80007fac:	00941023          	sh	s1,0(s0)
    80007fb0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80007fb4:	4511                	li	a0,4
    80007fb6:	c41f80ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007fba:	60415073          	csrwi	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007fbe:	002007b7          	lui	a5,0x200
    80007fc2:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007fc6:	8526                	mv	a0,s1
    80007fc8:	c2ff80ef          	jal	80000bf6 <goto_priv>
    80007fcc:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007fd0:	08200593          	li	a1,130
    80007fd4:	00020617          	auipc	a2,0x20
    80007fd8:	7dc60613          	addi	a2,a2,2012 # 800287b0 <__func__.0+0x1bf0>
    80007fdc:	0001f517          	auipc	a0,0x1f
    80007fe0:	edc50513          	addi	a0,a0,-292 # 80026eb8 <__func__.0+0x2f8>
    80007fe4:	7211c0ef          	jal	80024f04 <printf>
    80007fe8:	00041797          	auipc	a5,0x41
    80007fec:	0297c783          	lbu	a5,41(a5) # 80049011 <excpt+0x1>
    80007ff0:	0001f597          	auipc	a1,0x1f
    80007ff4:	ea058593          	addi	a1,a1,-352 # 80026e90 <__func__.0+0x2d0>
    80007ff8:	cf89                	beqz	a5,80008012 <wfi_exception_tests_21+0x9e>
    80007ffa:	6418                	ld	a4,8(s0)
    80007ffc:	4789                	li	a5,2
    80007ffe:	0001f597          	auipc	a1,0x1f
    80008002:	e8258593          	addi	a1,a1,-382 # 80026e80 <__func__.0+0x2c0>
    80008006:	00f70663          	beq	a4,a5,80008012 <wfi_exception_tests_21+0x9e>
    8000800a:	0001f597          	auipc	a1,0x1f
    8000800e:	e8658593          	addi	a1,a1,-378 # 80026e90 <__func__.0+0x2d0>
    80008012:	0001f517          	auipc	a0,0x1f
    80008016:	ebe50513          	addi	a0,a0,-322 # 80026ed0 <__func__.0+0x310>
    8000801a:	6eb1c0ef          	jal	80024f04 <printf>
    8000801e:	00041797          	auipc	a5,0x41
    80008022:	ff37c783          	lbu	a5,-13(a5) # 80049011 <excpt+0x1>
    80008026:	c789                	beqz	a5,80008030 <wfi_exception_tests_21+0xbc>
    80008028:	6418                	ld	a4,8(s0)
    8000802a:	4789                	li	a5,2
    8000802c:	00f70c63          	beq	a4,a5,80008044 <wfi_exception_tests_21+0xd0>
    80008030:	0001f517          	auipc	a0,0x1f
    80008034:	ea850513          	addi	a0,a0,-344 # 80026ed8 <__func__.0+0x318>
    80008038:	6cd1c0ef          	jal	80024f04 <printf>
    8000803c:	02900513          	li	a0,41
    80008040:	4cf1b0ef          	jal	80023d0e <putchar>
    80008044:	4529                	li	a0,10
    80008046:	4c91b0ef          	jal	80023d0e <putchar>
    8000804a:	00041497          	auipc	s1,0x41
    8000804e:	fc74c483          	lbu	s1,-57(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80008052:	0001f597          	auipc	a1,0x1f
    80008056:	e3e58593          	addi	a1,a1,-450 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    8000805a:	cc91                	beqz	s1,80008076 <wfi_exception_tests_21+0x102>
    8000805c:	6418                	ld	a4,8(s0)
    8000805e:	4789                	li	a5,2
    TEST_END();
    80008060:	0001f597          	auipc	a1,0x1f
    80008064:	e2058593          	addi	a1,a1,-480 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80008068:	00f70763          	beq	a4,a5,80008076 <wfi_exception_tests_21+0x102>
    8000806c:	4481                	li	s1,0
    TEST_END();
    8000806e:	0001f597          	auipc	a1,0x1f
    80008072:	e2258593          	addi	a1,a1,-478 # 80026e90 <__func__.0+0x2d0>
    80008076:	0001f517          	auipc	a0,0x1f
    8000807a:	ec250513          	addi	a0,a0,-318 # 80026f38 <__func__.0+0x378>
    8000807e:	6871c0ef          	jal	80024f04 <printf>
    80008082:	4511                	li	a0,4
    80008084:	b73f80ef          	jal	80000bf6 <goto_priv>
    80008088:	c24f90ef          	jal	800014ac <reset_state>
}
    8000808c:	60e2                	ld	ra,24(sp)
    8000808e:	6442                	ld	s0,16(sp)
    80008090:	8526                	mv	a0,s1
    80008092:	64a2                	ld	s1,8(sp)
    80008094:	6105                	addi	sp,sp,32
    80008096:	8082                	ret

0000000080008098 <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    80008098:	1101                	addi	sp,sp,-32

    TEST_START();
    8000809a:	0001e597          	auipc	a1,0x1e
    8000809e:	92e58593          	addi	a1,a1,-1746 # 800259c8 <__func__.0>
    800080a2:	0001f517          	auipc	a0,0x1f
    800080a6:	dfe50513          	addi	a0,a0,-514 # 80026ea0 <__func__.0+0x2e0>
bool wfi_exception_tests_22() {
    800080aa:	ec06                	sd	ra,24(sp)
    800080ac:	e822                	sd	s0,16(sp)
    800080ae:	e426                	sd	s1,8(sp)
    TEST_START();
    800080b0:	6551c0ef          	jal	80024f04 <printf>
    800080b4:	4529                	li	a0,10
    800080b6:	4591b0ef          	jal	80023d0e <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    800080ba:	0330000f          	fence	rw,rw
    800080be:	00041417          	auipc	s0,0x41
    800080c2:	f5240413          	addi	s0,s0,-174 # 80049010 <excpt>
    800080c6:	4485                	li	s1,1
    800080c8:	00041797          	auipc	a5,0x41
    800080cc:	f807b023          	sd	zero,-128(a5) # 80049048 <excpt+0x38>
    800080d0:	00941023          	sh	s1,0(s0)
    800080d4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800080d8:	4511                	li	a0,4
    800080da:	b1df80ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_HIE, 0);
    800080de:	60405073          	csrwi	hie,0
    CSRW(CSR_HIP,0);
    800080e2:	64405073          	csrwi	hip,0
    CSRS(mstatus, MSTATUS_TW);
    800080e6:	002007b7          	lui	a5,0x200
    800080ea:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    800080ee:	8526                	mv	a0,s1
    800080f0:	b07f80ef          	jal	80000bf6 <goto_priv>
    800080f4:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    800080f8:	08200593          	li	a1,130
    800080fc:	00020617          	auipc	a2,0x20
    80008100:	6b460613          	addi	a2,a2,1716 # 800287b0 <__func__.0+0x1bf0>
    80008104:	0001f517          	auipc	a0,0x1f
    80008108:	db450513          	addi	a0,a0,-588 # 80026eb8 <__func__.0+0x2f8>
    8000810c:	5f91c0ef          	jal	80024f04 <printf>
    80008110:	00041797          	auipc	a5,0x41
    80008114:	f017c783          	lbu	a5,-255(a5) # 80049011 <excpt+0x1>
    80008118:	0001f597          	auipc	a1,0x1f
    8000811c:	d7858593          	addi	a1,a1,-648 # 80026e90 <__func__.0+0x2d0>
    80008120:	cf89                	beqz	a5,8000813a <wfi_exception_tests_22+0xa2>
    80008122:	6418                	ld	a4,8(s0)
    80008124:	4789                	li	a5,2
    80008126:	0001f597          	auipc	a1,0x1f
    8000812a:	d5a58593          	addi	a1,a1,-678 # 80026e80 <__func__.0+0x2c0>
    8000812e:	00f70663          	beq	a4,a5,8000813a <wfi_exception_tests_22+0xa2>
    80008132:	0001f597          	auipc	a1,0x1f
    80008136:	d5e58593          	addi	a1,a1,-674 # 80026e90 <__func__.0+0x2d0>
    8000813a:	0001f517          	auipc	a0,0x1f
    8000813e:	d9650513          	addi	a0,a0,-618 # 80026ed0 <__func__.0+0x310>
    80008142:	5c31c0ef          	jal	80024f04 <printf>
    80008146:	00041797          	auipc	a5,0x41
    8000814a:	ecb7c783          	lbu	a5,-309(a5) # 80049011 <excpt+0x1>
    8000814e:	c789                	beqz	a5,80008158 <wfi_exception_tests_22+0xc0>
    80008150:	6418                	ld	a4,8(s0)
    80008152:	4789                	li	a5,2
    80008154:	00f70c63          	beq	a4,a5,8000816c <wfi_exception_tests_22+0xd4>
    80008158:	0001f517          	auipc	a0,0x1f
    8000815c:	d8050513          	addi	a0,a0,-640 # 80026ed8 <__func__.0+0x318>
    80008160:	5a51c0ef          	jal	80024f04 <printf>
    80008164:	02900513          	li	a0,41
    80008168:	3a71b0ef          	jal	80023d0e <putchar>
    8000816c:	4529                	li	a0,10
    8000816e:	3a11b0ef          	jal	80023d0e <putchar>
    80008172:	00041497          	auipc	s1,0x41
    80008176:	e9f4c483          	lbu	s1,-353(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    8000817a:	0001f597          	auipc	a1,0x1f
    8000817e:	d1658593          	addi	a1,a1,-746 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80008182:	cc91                	beqz	s1,8000819e <wfi_exception_tests_22+0x106>
    80008184:	6418                	ld	a4,8(s0)
    80008186:	4789                	li	a5,2
    TEST_END();
    80008188:	0001f597          	auipc	a1,0x1f
    8000818c:	cf858593          	addi	a1,a1,-776 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80008190:	00f70763          	beq	a4,a5,8000819e <wfi_exception_tests_22+0x106>
    80008194:	4481                	li	s1,0
    TEST_END();
    80008196:	0001f597          	auipc	a1,0x1f
    8000819a:	cfa58593          	addi	a1,a1,-774 # 80026e90 <__func__.0+0x2d0>
    8000819e:	0001f517          	auipc	a0,0x1f
    800081a2:	d9a50513          	addi	a0,a0,-614 # 80026f38 <__func__.0+0x378>
    800081a6:	55f1c0ef          	jal	80024f04 <printf>
    800081aa:	4511                	li	a0,4
    800081ac:	a4bf80ef          	jal	80000bf6 <goto_priv>
    800081b0:	afcf90ef          	jal	800014ac <reset_state>
}
    800081b4:	60e2                	ld	ra,24(sp)
    800081b6:	6442                	ld	s0,16(sp)
    800081b8:	8526                	mv	a0,s1
    800081ba:	64a2                	ld	s1,8(sp)
    800081bc:	6105                	addi	sp,sp,32
    800081be:	8082                	ret

00000000800081c0 <tinst_tests_pf>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests_pf(){
    800081c0:	7179                	addi	sp,sp,-48
    
    TEST_START();
    800081c2:	0001e597          	auipc	a1,0x1e
    800081c6:	81e58593          	addi	a1,a1,-2018 # 800259e0 <__func__.3>
    800081ca:	0001f517          	auipc	a0,0x1f
    800081ce:	cd650513          	addi	a0,a0,-810 # 80026ea0 <__func__.0+0x2e0>
bool tinst_tests_pf(){
    800081d2:	f406                	sd	ra,40(sp)
    800081d4:	f022                	sd	s0,32(sp)
    800081d6:	ec26                	sd	s1,24(sp)
    800081d8:	e84a                	sd	s2,16(sp)
    800081da:	e44e                	sd	s3,8(sp)
    TEST_START();
    800081dc:	5291c0ef          	jal	80024f04 <printf>
    800081e0:	4529                	li	a0,10
    800081e2:	32d1b0ef          	jal	80023d0e <putchar>

    hspt_init();        
    800081e6:	bfaf80ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    800081ea:	450d                	li	a0,3
    800081ec:	a0bf80ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    800081f0:	0330000f          	fence	rw,rw
    800081f4:	00041417          	auipc	s0,0x41
    800081f8:	e1c40413          	addi	s0,s0,-484 # 80049010 <excpt>
    800081fc:	4785                	li	a5,1
    800081fe:	00041717          	auipc	a4,0x41
    80008202:	e4073523          	sd	zero,-438(a4) # 80049048 <excpt+0x38>
    80008206:	00f41023          	sh	a5,0(s0)
    8000820a:	0330000f          	fence	rw,rw
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000820e:	400197b7          	lui	a5,0x40019
    80008212:	078a                	slli	a5,a5,0x2
    80008214:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80008218:	00020617          	auipc	a2,0x20
    8000821c:	5e060613          	addi	a2,a2,1504 # 800287f8 <__func__.0+0x1c38>
    80008220:	08200593          	li	a1,130
    80008224:	0001f517          	auipc	a0,0x1f
    80008228:	c9450513          	addi	a0,a0,-876 # 80026eb8 <__func__.0+0x2f8>
    8000822c:	4d91c0ef          	jal	80024f04 <printf>
    80008230:	00041797          	auipc	a5,0x41
    80008234:	de17c783          	lbu	a5,-543(a5) # 80049011 <excpt+0x1>
    80008238:	e399                	bnez	a5,8000823e <tinst_tests_pf+0x7e>
    8000823a:	05f0106f          	j	80009a98 <tinst_tests_pf+0x18d8>
    8000823e:	6418                	ld	a4,8(s0)
    80008240:	47b5                	li	a5,13
    80008242:	0001f597          	auipc	a1,0x1f
    80008246:	c4e58593          	addi	a1,a1,-946 # 80026e90 <__func__.0+0x2d0>
    8000824a:	00f71463          	bne	a4,a5,80008252 <tinst_tests_pf+0x92>
    8000824e:	0030106f          	j	80009a50 <tinst_tests_pf+0x1890>
    80008252:	0001f517          	auipc	a0,0x1f
    80008256:	c7e50513          	addi	a0,a0,-898 # 80026ed0 <__func__.0+0x310>
    8000825a:	4ab1c0ef          	jal	80024f04 <printf>
    8000825e:	00041797          	auipc	a5,0x41
    80008262:	db37c783          	lbu	a5,-589(a5) # 80049011 <excpt+0x1>
    80008266:	c799                	beqz	a5,80008274 <tinst_tests_pf+0xb4>
    80008268:	6418                	ld	a4,8(s0)
    8000826a:	47b5                	li	a5,13
    8000826c:	00f71463          	bne	a4,a5,80008274 <tinst_tests_pf+0xb4>
    80008270:	0850106f          	j	80009af4 <tinst_tests_pf+0x1934>
    80008274:	0001f517          	auipc	a0,0x1f
    80008278:	c6450513          	addi	a0,a0,-924 # 80026ed8 <__func__.0+0x318>
    8000827c:	4891c0ef          	jal	80024f04 <printf>
    80008280:	02900513          	li	a0,41
    80008284:	28b1b0ef          	jal	80023d0e <putchar>
    80008288:	4529                	li	a0,10
    8000828a:	2851b0ef          	jal	80023d0e <putchar>
    8000828e:	00041797          	auipc	a5,0x41
    80008292:	d837c783          	lbu	a5,-637(a5) # 80049011 <excpt+0x1>
    80008296:	c399                	beqz	a5,8000829c <tinst_tests_pf+0xdc>
    80008298:	00d0106f          	j	80009aa4 <tinst_tests_pf+0x18e4>
    8000829c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000829e:	0330000f          	fence	rw,rw
    800082a2:	4785                	li	a5,1
    800082a4:	00041717          	auipc	a4,0x41
    800082a8:	da073223          	sd	zero,-604(a4) # 80049048 <excpt+0x38>
    800082ac:	00f41023          	sh	a5,0(s0)
    800082b0:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    800082b4:	400197b7          	lui	a5,0x40019
    800082b8:	078a                	slli	a5,a5,0x2
    800082ba:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    800082be:	00020617          	auipc	a2,0x20
    800082c2:	5ba60613          	addi	a2,a2,1466 # 80028878 <__func__.0+0x1cb8>
    800082c6:	08200593          	li	a1,130
    800082ca:	0001f517          	auipc	a0,0x1f
    800082ce:	bee50513          	addi	a0,a0,-1042 # 80026eb8 <__func__.0+0x2f8>
    800082d2:	4331c0ef          	jal	80024f04 <printf>
    800082d6:	00041797          	auipc	a5,0x41
    800082da:	d3b7c783          	lbu	a5,-709(a5) # 80049011 <excpt+0x1>
    800082de:	e399                	bnez	a5,800082e4 <tinst_tests_pf+0x124>
    800082e0:	0990106f          	j	80009b78 <tinst_tests_pf+0x19b8>
    800082e4:	6418                	ld	a4,8(s0)
    800082e6:	47b5                	li	a5,13
    800082e8:	0001f597          	auipc	a1,0x1f
    800082ec:	ba858593          	addi	a1,a1,-1112 # 80026e90 <__func__.0+0x2d0>
    800082f0:	00f71463          	bne	a4,a5,800082f8 <tinst_tests_pf+0x138>
    800082f4:	03d0106f          	j	80009b30 <tinst_tests_pf+0x1970>
    800082f8:	0001f517          	auipc	a0,0x1f
    800082fc:	bd850513          	addi	a0,a0,-1064 # 80026ed0 <__func__.0+0x310>
    80008300:	4051c0ef          	jal	80024f04 <printf>
    80008304:	00041797          	auipc	a5,0x41
    80008308:	d0d7c783          	lbu	a5,-755(a5) # 80049011 <excpt+0x1>
    8000830c:	c799                	beqz	a5,8000831a <tinst_tests_pf+0x15a>
    8000830e:	6418                	ld	a4,8(s0)
    80008310:	47b5                	li	a5,13
    80008312:	00f71463          	bne	a4,a5,8000831a <tinst_tests_pf+0x15a>
    80008316:	4890106f          	j	80009f9e <tinst_tests_pf+0x1dde>
    8000831a:	0001f517          	auipc	a0,0x1f
    8000831e:	bbe50513          	addi	a0,a0,-1090 # 80026ed8 <__func__.0+0x318>
    80008322:	3e31c0ef          	jal	80024f04 <printf>
    80008326:	02900513          	li	a0,41
    8000832a:	1e51b0ef          	jal	80023d0e <putchar>
    8000832e:	4529                	li	a0,10
    80008330:	1df1b0ef          	jal	80023d0e <putchar>
    80008334:	00090e63          	beqz	s2,80008350 <tinst_tests_pf+0x190>
    80008338:	00041797          	auipc	a5,0x41
    8000833c:	cd97c783          	lbu	a5,-807(a5) # 80049011 <excpt+0x1>
    80008340:	c799                	beqz	a5,8000834e <tinst_tests_pf+0x18e>
    80008342:	6418                	ld	a4,8(s0)
    80008344:	47b5                	li	a5,13
    80008346:	00f71463          	bne	a4,a5,8000834e <tinst_tests_pf+0x18e>
    8000834a:	0980206f          	j	8000a3e2 <tinst_tests_pf+0x2222>
    8000834e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008350:	0330000f          	fence	rw,rw
    80008354:	4785                	li	a5,1
    80008356:	00041717          	auipc	a4,0x41
    8000835a:	ce073923          	sd	zero,-782(a4) # 80049048 <excpt+0x38>
    8000835e:	00f41023          	sh	a5,0(s0)
    80008362:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80008366:	400197b7          	lui	a5,0x40019
    8000836a:	078a                	slli	a5,a5,0x2
    8000836c:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80008370:	00020617          	auipc	a2,0x20
    80008374:	54860613          	addi	a2,a2,1352 # 800288b8 <__func__.0+0x1cf8>
    80008378:	08200593          	li	a1,130
    8000837c:	0001f517          	auipc	a0,0x1f
    80008380:	b3c50513          	addi	a0,a0,-1220 # 80026eb8 <__func__.0+0x2f8>
    80008384:	3811c0ef          	jal	80024f04 <printf>
    80008388:	00041797          	auipc	a5,0x41
    8000838c:	c897c783          	lbu	a5,-887(a5) # 80049011 <excpt+0x1>
    80008390:	e399                	bnez	a5,80008396 <tinst_tests_pf+0x1d6>
    80008392:	03b0106f          	j	80009bcc <tinst_tests_pf+0x1a0c>
    80008396:	6418                	ld	a4,8(s0)
    80008398:	47b5                	li	a5,13
    8000839a:	0001f597          	auipc	a1,0x1f
    8000839e:	af658593          	addi	a1,a1,-1290 # 80026e90 <__func__.0+0x2d0>
    800083a2:	00f71463          	bne	a4,a5,800083aa <tinst_tests_pf+0x1ea>
    800083a6:	7de0106f          	j	80009b84 <tinst_tests_pf+0x19c4>
    800083aa:	0001f517          	auipc	a0,0x1f
    800083ae:	b2650513          	addi	a0,a0,-1242 # 80026ed0 <__func__.0+0x310>
    800083b2:	3531c0ef          	jal	80024f04 <printf>
    800083b6:	00041797          	auipc	a5,0x41
    800083ba:	c5b7c783          	lbu	a5,-933(a5) # 80049011 <excpt+0x1>
    800083be:	c799                	beqz	a5,800083cc <tinst_tests_pf+0x20c>
    800083c0:	6418                	ld	a4,8(s0)
    800083c2:	47b5                	li	a5,13
    800083c4:	00f71463          	bne	a4,a5,800083cc <tinst_tests_pf+0x20c>
    800083c8:	0d20206f          	j	8000a49a <tinst_tests_pf+0x22da>
    800083cc:	0001f517          	auipc	a0,0x1f
    800083d0:	b0c50513          	addi	a0,a0,-1268 # 80026ed8 <__func__.0+0x318>
    800083d4:	3311c0ef          	jal	80024f04 <printf>
    800083d8:	02900513          	li	a0,41
    800083dc:	1331b0ef          	jal	80023d0e <putchar>
    800083e0:	4529                	li	a0,10
    800083e2:	12d1b0ef          	jal	80023d0e <putchar>
    800083e6:	00090e63          	beqz	s2,80008402 <tinst_tests_pf+0x242>
    800083ea:	00041797          	auipc	a5,0x41
    800083ee:	c277c783          	lbu	a5,-985(a5) # 80049011 <excpt+0x1>
    800083f2:	c799                	beqz	a5,80008400 <tinst_tests_pf+0x240>
    800083f4:	6418                	ld	a4,8(s0)
    800083f6:	47b5                	li	a5,13
    800083f8:	00f71463          	bne	a4,a5,80008400 <tinst_tests_pf+0x240>
    800083fc:	0240206f          	j	8000a420 <tinst_tests_pf+0x2260>
    80008400:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008402:	0330000f          	fence	rw,rw
    80008406:	4785                	li	a5,1
    80008408:	00041717          	auipc	a4,0x41
    8000840c:	c4073023          	sd	zero,-960(a4) # 80049048 <excpt+0x38>
    80008410:	00f41023          	sh	a5,0(s0)
    80008414:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    80008418:	400197b7          	lui	a5,0x40019
    8000841c:	078a                	slli	a5,a5,0x2
    8000841e:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80008422:	00020617          	auipc	a2,0x20
    80008426:	4d660613          	addi	a2,a2,1238 # 800288f8 <__func__.0+0x1d38>
    8000842a:	08200593          	li	a1,130
    8000842e:	0001f517          	auipc	a0,0x1f
    80008432:	a8a50513          	addi	a0,a0,-1398 # 80026eb8 <__func__.0+0x2f8>
    80008436:	2cf1c0ef          	jal	80024f04 <printf>
    8000843a:	00041797          	auipc	a5,0x41
    8000843e:	bd77c783          	lbu	a5,-1065(a5) # 80049011 <excpt+0x1>
    80008442:	e399                	bnez	a5,80008448 <tinst_tests_pf+0x288>
    80008444:	7dc0106f          	j	80009c20 <tinst_tests_pf+0x1a60>
    80008448:	6418                	ld	a4,8(s0)
    8000844a:	47b5                	li	a5,13
    8000844c:	0001f597          	auipc	a1,0x1f
    80008450:	a4458593          	addi	a1,a1,-1468 # 80026e90 <__func__.0+0x2d0>
    80008454:	00f71463          	bne	a4,a5,8000845c <tinst_tests_pf+0x29c>
    80008458:	7800106f          	j	80009bd8 <tinst_tests_pf+0x1a18>
    8000845c:	0001f517          	auipc	a0,0x1f
    80008460:	a7450513          	addi	a0,a0,-1420 # 80026ed0 <__func__.0+0x310>
    80008464:	2a11c0ef          	jal	80024f04 <printf>
    80008468:	00041797          	auipc	a5,0x41
    8000846c:	ba97c783          	lbu	a5,-1111(a5) # 80049011 <excpt+0x1>
    80008470:	c799                	beqz	a5,8000847e <tinst_tests_pf+0x2be>
    80008472:	6418                	ld	a4,8(s0)
    80008474:	47b5                	li	a5,13
    80008476:	00f71463          	bne	a4,a5,8000847e <tinst_tests_pf+0x2be>
    8000847a:	0c00206f          	j	8000a53a <tinst_tests_pf+0x237a>
    8000847e:	0001f517          	auipc	a0,0x1f
    80008482:	a5a50513          	addi	a0,a0,-1446 # 80026ed8 <__func__.0+0x318>
    80008486:	27f1c0ef          	jal	80024f04 <printf>
    8000848a:	02900513          	li	a0,41
    8000848e:	0811b0ef          	jal	80023d0e <putchar>
    80008492:	4529                	li	a0,10
    80008494:	07b1b0ef          	jal	80023d0e <putchar>
    80008498:	00090e63          	beqz	s2,800084b4 <tinst_tests_pf+0x2f4>
    8000849c:	00041797          	auipc	a5,0x41
    800084a0:	b757c783          	lbu	a5,-1163(a5) # 80049011 <excpt+0x1>
    800084a4:	c799                	beqz	a5,800084b2 <tinst_tests_pf+0x2f2>
    800084a6:	6418                	ld	a4,8(s0)
    800084a8:	47b5                	li	a5,13
    800084aa:	00f71463          	bne	a4,a5,800084b2 <tinst_tests_pf+0x2f2>
    800084ae:	7b10106f          	j	8000a45e <tinst_tests_pf+0x229e>
    800084b2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800084b4:	0330000f          	fence	rw,rw
    800084b8:	4785                	li	a5,1
    800084ba:	00041717          	auipc	a4,0x41
    800084be:	b8073723          	sd	zero,-1138(a4) # 80049048 <excpt+0x38>
    800084c2:	00f41023          	sh	a5,0(s0)
    800084c6:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    800084ca:	400197b7          	lui	a5,0x40019
    800084ce:	078a                	slli	a5,a5,0x2
    800084d0:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800084d4:	00020617          	auipc	a2,0x20
    800084d8:	46460613          	addi	a2,a2,1124 # 80028938 <__func__.0+0x1d78>
    800084dc:	08200593          	li	a1,130
    800084e0:	0001f517          	auipc	a0,0x1f
    800084e4:	9d850513          	addi	a0,a0,-1576 # 80026eb8 <__func__.0+0x2f8>
    800084e8:	21d1c0ef          	jal	80024f04 <printf>
    800084ec:	00041797          	auipc	a5,0x41
    800084f0:	b257c783          	lbu	a5,-1243(a5) # 80049011 <excpt+0x1>
    800084f4:	e399                	bnez	a5,800084fa <tinst_tests_pf+0x33a>
    800084f6:	77e0106f          	j	80009c74 <tinst_tests_pf+0x1ab4>
    800084fa:	6418                	ld	a4,8(s0)
    800084fc:	47b5                	li	a5,13
    800084fe:	0001f597          	auipc	a1,0x1f
    80008502:	99258593          	addi	a1,a1,-1646 # 80026e90 <__func__.0+0x2d0>
    80008506:	00f71463          	bne	a4,a5,8000850e <tinst_tests_pf+0x34e>
    8000850a:	7220106f          	j	80009c2c <tinst_tests_pf+0x1a6c>
    8000850e:	0001f517          	auipc	a0,0x1f
    80008512:	9c250513          	addi	a0,a0,-1598 # 80026ed0 <__func__.0+0x310>
    80008516:	1ef1c0ef          	jal	80024f04 <printf>
    8000851a:	00041797          	auipc	a5,0x41
    8000851e:	af77c783          	lbu	a5,-1289(a5) # 80049011 <excpt+0x1>
    80008522:	c799                	beqz	a5,80008530 <tinst_tests_pf+0x370>
    80008524:	6418                	ld	a4,8(s0)
    80008526:	47b5                	li	a5,13
    80008528:	00f71463          	bne	a4,a5,80008530 <tinst_tests_pf+0x370>
    8000852c:	0a00206f          	j	8000a5cc <tinst_tests_pf+0x240c>
    80008530:	0001f517          	auipc	a0,0x1f
    80008534:	9a850513          	addi	a0,a0,-1624 # 80026ed8 <__func__.0+0x318>
    80008538:	1cd1c0ef          	jal	80024f04 <printf>
    8000853c:	02900513          	li	a0,41
    80008540:	7ce1b0ef          	jal	80023d0e <putchar>
    80008544:	4529                	li	a0,10
    80008546:	7c81b0ef          	jal	80023d0e <putchar>
    8000854a:	00090a63          	beqz	s2,8000855e <tinst_tests_pf+0x39e>
    8000854e:	00041797          	auipc	a5,0x41
    80008552:	ac37c783          	lbu	a5,-1341(a5) # 80049011 <excpt+0x1>
    80008556:	c399                	beqz	a5,8000855c <tinst_tests_pf+0x39c>
    80008558:	2830106f          	j	80009fda <tinst_tests_pf+0x1e1a>
    8000855c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000855e:	0330000f          	fence	rw,rw
    80008562:	4785                	li	a5,1
    80008564:	00041717          	auipc	a4,0x41
    80008568:	ae073223          	sd	zero,-1308(a4) # 80049048 <excpt+0x38>
    8000856c:	00f41023          	sh	a5,0(s0)
    80008570:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    80008574:	400197b7          	lui	a5,0x40019
    80008578:	078a                	slli	a5,a5,0x2
    8000857a:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000857e:	00020617          	auipc	a2,0x20
    80008582:	3fa60613          	addi	a2,a2,1018 # 80028978 <__func__.0+0x1db8>
    80008586:	08200593          	li	a1,130
    8000858a:	0001f517          	auipc	a0,0x1f
    8000858e:	92e50513          	addi	a0,a0,-1746 # 80026eb8 <__func__.0+0x2f8>
    80008592:	1731c0ef          	jal	80024f04 <printf>
    80008596:	00041797          	auipc	a5,0x41
    8000859a:	a7b7c783          	lbu	a5,-1413(a5) # 80049011 <excpt+0x1>
    8000859e:	e399                	bnez	a5,800085a4 <tinst_tests_pf+0x3e4>
    800085a0:	7280106f          	j	80009cc8 <tinst_tests_pf+0x1b08>
    800085a4:	6418                	ld	a4,8(s0)
    800085a6:	47b5                	li	a5,13
    800085a8:	0001f597          	auipc	a1,0x1f
    800085ac:	8e858593          	addi	a1,a1,-1816 # 80026e90 <__func__.0+0x2d0>
    800085b0:	00f71463          	bne	a4,a5,800085b8 <tinst_tests_pf+0x3f8>
    800085b4:	6cc0106f          	j	80009c80 <tinst_tests_pf+0x1ac0>
    800085b8:	0001f517          	auipc	a0,0x1f
    800085bc:	91850513          	addi	a0,a0,-1768 # 80026ed0 <__func__.0+0x310>
    800085c0:	1451c0ef          	jal	80024f04 <printf>
    800085c4:	00041797          	auipc	a5,0x41
    800085c8:	a4d7c783          	lbu	a5,-1459(a5) # 80049011 <excpt+0x1>
    800085cc:	c799                	beqz	a5,800085da <tinst_tests_pf+0x41a>
    800085ce:	6418                	ld	a4,8(s0)
    800085d0:	47b5                	li	a5,13
    800085d2:	00f71463          	bne	a4,a5,800085da <tinst_tests_pf+0x41a>
    800085d6:	08c0206f          	j	8000a662 <tinst_tests_pf+0x24a2>
    800085da:	0001f517          	auipc	a0,0x1f
    800085de:	8fe50513          	addi	a0,a0,-1794 # 80026ed8 <__func__.0+0x318>
    800085e2:	1231c0ef          	jal	80024f04 <printf>
    800085e6:	02900513          	li	a0,41
    800085ea:	7241b0ef          	jal	80023d0e <putchar>
    800085ee:	4529                	li	a0,10
    800085f0:	71e1b0ef          	jal	80023d0e <putchar>
    800085f4:	00090a63          	beqz	s2,80008608 <tinst_tests_pf+0x448>
    800085f8:	00041797          	auipc	a5,0x41
    800085fc:	a197c783          	lbu	a5,-1511(a5) # 80049011 <excpt+0x1>
    80008600:	c399                	beqz	a5,80008606 <tinst_tests_pf+0x446>
    80008602:	2890106f          	j	8000a08a <tinst_tests_pf+0x1eca>
    80008606:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008608:	0330000f          	fence	rw,rw
    8000860c:	4785                	li	a5,1
    8000860e:	00041717          	auipc	a4,0x41
    80008612:	a2073d23          	sd	zero,-1478(a4) # 80049048 <excpt+0x38>
    80008616:	00f41023          	sh	a5,0(s0)
    8000861a:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000861e:	400197b7          	lui	a5,0x40019
    80008622:	078a                	slli	a5,a5,0x2
    80008624:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80008628:	00020617          	auipc	a2,0x20
    8000862c:	39060613          	addi	a2,a2,912 # 800289b8 <__func__.0+0x1df8>
    80008630:	08200593          	li	a1,130
    80008634:	0001f517          	auipc	a0,0x1f
    80008638:	88450513          	addi	a0,a0,-1916 # 80026eb8 <__func__.0+0x2f8>
    8000863c:	0c91c0ef          	jal	80024f04 <printf>
    80008640:	00041797          	auipc	a5,0x41
    80008644:	9d17c783          	lbu	a5,-1583(a5) # 80049011 <excpt+0x1>
    80008648:	e399                	bnez	a5,8000864e <tinst_tests_pf+0x48e>
    8000864a:	6d20106f          	j	80009d1c <tinst_tests_pf+0x1b5c>
    8000864e:	6418                	ld	a4,8(s0)
    80008650:	47b5                	li	a5,13
    80008652:	0001f597          	auipc	a1,0x1f
    80008656:	83e58593          	addi	a1,a1,-1986 # 80026e90 <__func__.0+0x2d0>
    8000865a:	00f71463          	bne	a4,a5,80008662 <tinst_tests_pf+0x4a2>
    8000865e:	6760106f          	j	80009cd4 <tinst_tests_pf+0x1b14>
    80008662:	0001f517          	auipc	a0,0x1f
    80008666:	86e50513          	addi	a0,a0,-1938 # 80026ed0 <__func__.0+0x310>
    8000866a:	09b1c0ef          	jal	80024f04 <printf>
    8000866e:	00041797          	auipc	a5,0x41
    80008672:	9a37c783          	lbu	a5,-1629(a5) # 80049011 <excpt+0x1>
    80008676:	c799                	beqz	a5,80008684 <tinst_tests_pf+0x4c4>
    80008678:	6418                	ld	a4,8(s0)
    8000867a:	47b5                	li	a5,13
    8000867c:	00f71463          	bne	a4,a5,80008684 <tinst_tests_pf+0x4c4>
    80008680:	0780206f          	j	8000a6f8 <tinst_tests_pf+0x2538>
    80008684:	0001f517          	auipc	a0,0x1f
    80008688:	85450513          	addi	a0,a0,-1964 # 80026ed8 <__func__.0+0x318>
    8000868c:	0791c0ef          	jal	80024f04 <printf>
    80008690:	02900513          	li	a0,41
    80008694:	67a1b0ef          	jal	80023d0e <putchar>
    80008698:	4529                	li	a0,10
    8000869a:	6741b0ef          	jal	80023d0e <putchar>
    8000869e:	00090a63          	beqz	s2,800086b2 <tinst_tests_pf+0x4f2>
    800086a2:	00041797          	auipc	a5,0x41
    800086a6:	96f7c783          	lbu	a5,-1681(a5) # 80049011 <excpt+0x1>
    800086aa:	c399                	beqz	a5,800086b0 <tinst_tests_pf+0x4f0>
    800086ac:	2290106f          	j	8000a0d4 <tinst_tests_pf+0x1f14>
    800086b0:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    800086b2:	0330000f          	fence	rw,rw
    800086b6:	4785                	li	a5,1
    800086b8:	00041717          	auipc	a4,0x41
    800086bc:	98073823          	sd	zero,-1648(a4) # 80049048 <excpt+0x38>
    800086c0:	00f41023          	sh	a5,0(s0)
    800086c4:	0330000f          	fence	rw,rw
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    800086c8:	400197b7          	lui	a5,0x40019
    800086cc:	078a                	slli	a5,a5,0x2
    800086ce:	573d                	li	a4,-17
    800086d0:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    800086d4:	00020617          	auipc	a2,0x20
    800086d8:	32460613          	addi	a2,a2,804 # 800289f8 <__func__.0+0x1e38>
    800086dc:	08200593          	li	a1,130
    800086e0:	0001e517          	auipc	a0,0x1e
    800086e4:	7d850513          	addi	a0,a0,2008 # 80026eb8 <__func__.0+0x2f8>
    800086e8:	01d1c0ef          	jal	80024f04 <printf>
    800086ec:	00041797          	auipc	a5,0x41
    800086f0:	9257c783          	lbu	a5,-1755(a5) # 80049011 <excpt+0x1>
    800086f4:	e399                	bnez	a5,800086fa <tinst_tests_pf+0x53a>
    800086f6:	6800106f          	j	80009d76 <tinst_tests_pf+0x1bb6>
    800086fa:	6418                	ld	a4,8(s0)
    800086fc:	47bd                	li	a5,15
    800086fe:	0001e597          	auipc	a1,0x1e
    80008702:	79258593          	addi	a1,a1,1938 # 80026e90 <__func__.0+0x2d0>
    80008706:	00f71463          	bne	a4,a5,8000870e <tinst_tests_pf+0x54e>
    8000870a:	61e0106f          	j	80009d28 <tinst_tests_pf+0x1b68>
    8000870e:	0001e517          	auipc	a0,0x1e
    80008712:	7c250513          	addi	a0,a0,1986 # 80026ed0 <__func__.0+0x310>
    80008716:	7ee1c0ef          	jal	80024f04 <printf>
    8000871a:	00041797          	auipc	a5,0x41
    8000871e:	8f77c783          	lbu	a5,-1801(a5) # 80049011 <excpt+0x1>
    80008722:	c799                	beqz	a5,80008730 <tinst_tests_pf+0x570>
    80008724:	6418                	ld	a4,8(s0)
    80008726:	47bd                	li	a5,15
    80008728:	00f71463          	bne	a4,a5,80008730 <tinst_tests_pf+0x570>
    8000872c:	0620206f          	j	8000a78e <tinst_tests_pf+0x25ce>
    80008730:	0001e517          	auipc	a0,0x1e
    80008734:	7a850513          	addi	a0,a0,1960 # 80026ed8 <__func__.0+0x318>
    80008738:	7cc1c0ef          	jal	80024f04 <printf>
    8000873c:	02900513          	li	a0,41
    80008740:	5ce1b0ef          	jal	80023d0e <putchar>
    80008744:	4529                	li	a0,10
    80008746:	5c81b0ef          	jal	80023d0e <putchar>
    8000874a:	00090a63          	beqz	s2,8000875e <tinst_tests_pf+0x59e>
    8000874e:	00041797          	auipc	a5,0x41
    80008752:	8c37c783          	lbu	a5,-1853(a5) # 80049011 <excpt+0x1>
    80008756:	c399                	beqz	a5,8000875c <tinst_tests_pf+0x59c>
    80008758:	1c70106f          	j	8000a11e <tinst_tests_pf+0x1f5e>
    8000875c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000875e:	0330000f          	fence	rw,rw
    80008762:	4785                	li	a5,1
    80008764:	00041717          	auipc	a4,0x41
    80008768:	8e073223          	sd	zero,-1820(a4) # 80049048 <excpt+0x38>
    8000876c:	00f41023          	sh	a5,0(s0)
    80008770:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80008774:	77f1                	lui	a5,0xffffc
    80008776:	40019737          	lui	a4,0x40019
    8000877a:	eef7879b          	addiw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000877e:	070a                	slli	a4,a4,0x2
    80008780:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80008784:	00020617          	auipc	a2,0x20
    80008788:	2b460613          	addi	a2,a2,692 # 80028a38 <__func__.0+0x1e78>
    8000878c:	08200593          	li	a1,130
    80008790:	0001e517          	auipc	a0,0x1e
    80008794:	72850513          	addi	a0,a0,1832 # 80026eb8 <__func__.0+0x2f8>
    80008798:	76c1c0ef          	jal	80024f04 <printf>
    8000879c:	00041797          	auipc	a5,0x41
    800087a0:	8757c783          	lbu	a5,-1931(a5) # 80049011 <excpt+0x1>
    800087a4:	e399                	bnez	a5,800087aa <tinst_tests_pf+0x5ea>
    800087a6:	62a0106f          	j	80009dd0 <tinst_tests_pf+0x1c10>
    800087aa:	6418                	ld	a4,8(s0)
    800087ac:	47bd                	li	a5,15
    800087ae:	0001e597          	auipc	a1,0x1e
    800087b2:	6e258593          	addi	a1,a1,1762 # 80026e90 <__func__.0+0x2d0>
    800087b6:	00f71463          	bne	a4,a5,800087be <tinst_tests_pf+0x5fe>
    800087ba:	5c80106f          	j	80009d82 <tinst_tests_pf+0x1bc2>
    800087be:	0001e517          	auipc	a0,0x1e
    800087c2:	71250513          	addi	a0,a0,1810 # 80026ed0 <__func__.0+0x310>
    800087c6:	73e1c0ef          	jal	80024f04 <printf>
    800087ca:	00041797          	auipc	a5,0x41
    800087ce:	8477c783          	lbu	a5,-1977(a5) # 80049011 <excpt+0x1>
    800087d2:	c799                	beqz	a5,800087e0 <tinst_tests_pf+0x620>
    800087d4:	6418                	ld	a4,8(s0)
    800087d6:	47bd                	li	a5,15
    800087d8:	00f71463          	bne	a4,a5,800087e0 <tinst_tests_pf+0x620>
    800087dc:	04e0206f          	j	8000a82a <tinst_tests_pf+0x266a>
    800087e0:	0001e517          	auipc	a0,0x1e
    800087e4:	6f850513          	addi	a0,a0,1784 # 80026ed8 <__func__.0+0x318>
    800087e8:	71c1c0ef          	jal	80024f04 <printf>
    800087ec:	02900513          	li	a0,41
    800087f0:	51e1b0ef          	jal	80023d0e <putchar>
    800087f4:	4529                	li	a0,10
    800087f6:	5181b0ef          	jal	80023d0e <putchar>
    800087fa:	00090a63          	beqz	s2,8000880e <tinst_tests_pf+0x64e>
    800087fe:	00041797          	auipc	a5,0x41
    80008802:	8137c783          	lbu	a5,-2029(a5) # 80049011 <excpt+0x1>
    80008806:	c399                	beqz	a5,8000880c <tinst_tests_pf+0x64c>
    80008808:	1650106f          	j	8000a16c <tinst_tests_pf+0x1fac>
    8000880c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000880e:	0330000f          	fence	rw,rw
    80008812:	4785                	li	a5,1
    80008814:	00041717          	auipc	a4,0x41
    80008818:	82073a23          	sd	zero,-1996(a4) # 80049048 <excpt+0x38>
    8000881c:	00f41023          	sh	a5,0(s0)
    80008820:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sw, "sw", uint32_t);
    80008824:	deadc7b7          	lui	a5,0xdeadc
    80008828:	40019737          	lui	a4,0x40019
    8000882c:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80008830:	070a                	slli	a4,a4,0x2
    80008832:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80008836:	00020617          	auipc	a2,0x20
    8000883a:	24260613          	addi	a2,a2,578 # 80028a78 <__func__.0+0x1eb8>
    8000883e:	08200593          	li	a1,130
    80008842:	0001e517          	auipc	a0,0x1e
    80008846:	67650513          	addi	a0,a0,1654 # 80026eb8 <__func__.0+0x2f8>
    8000884a:	6ba1c0ef          	jal	80024f04 <printf>
    8000884e:	00040797          	auipc	a5,0x40
    80008852:	7c37c783          	lbu	a5,1987(a5) # 80049011 <excpt+0x1>
    80008856:	e399                	bnez	a5,8000885c <tinst_tests_pf+0x69c>
    80008858:	5d20106f          	j	80009e2a <tinst_tests_pf+0x1c6a>
    8000885c:	6418                	ld	a4,8(s0)
    8000885e:	47bd                	li	a5,15
    80008860:	0001e597          	auipc	a1,0x1e
    80008864:	63058593          	addi	a1,a1,1584 # 80026e90 <__func__.0+0x2d0>
    80008868:	00f71463          	bne	a4,a5,80008870 <tinst_tests_pf+0x6b0>
    8000886c:	5700106f          	j	80009ddc <tinst_tests_pf+0x1c1c>
    80008870:	0001e517          	auipc	a0,0x1e
    80008874:	66050513          	addi	a0,a0,1632 # 80026ed0 <__func__.0+0x310>
    80008878:	68c1c0ef          	jal	80024f04 <printf>
    8000887c:	00040797          	auipc	a5,0x40
    80008880:	7957c783          	lbu	a5,1941(a5) # 80049011 <excpt+0x1>
    80008884:	c799                	beqz	a5,80008892 <tinst_tests_pf+0x6d2>
    80008886:	6418                	ld	a4,8(s0)
    80008888:	47bd                	li	a5,15
    8000888a:	00f71463          	bne	a4,a5,80008892 <tinst_tests_pf+0x6d2>
    8000888e:	0380206f          	j	8000a8c6 <tinst_tests_pf+0x2706>
    80008892:	0001e517          	auipc	a0,0x1e
    80008896:	64650513          	addi	a0,a0,1606 # 80026ed8 <__func__.0+0x318>
    8000889a:	66a1c0ef          	jal	80024f04 <printf>
    8000889e:	02900513          	li	a0,41
    800088a2:	46c1b0ef          	jal	80023d0e <putchar>
    800088a6:	4529                	li	a0,10
    800088a8:	4661b0ef          	jal	80023d0e <putchar>
    800088ac:	00090a63          	beqz	s2,800088c0 <tinst_tests_pf+0x700>
    800088b0:	00040797          	auipc	a5,0x40
    800088b4:	7617c783          	lbu	a5,1889(a5) # 80049011 <excpt+0x1>
    800088b8:	c399                	beqz	a5,800088be <tinst_tests_pf+0x6fe>
    800088ba:	1010106f          	j	8000a1ba <tinst_tests_pf+0x1ffa>
    800088be:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800088c0:	0330000f          	fence	rw,rw
    800088c4:	4785                	li	a5,1
    800088c6:	00040717          	auipc	a4,0x40
    800088ca:	78073123          	sd	zero,1922(a4) # 80049048 <excpt+0x38>
    800088ce:	00f41023          	sh	a5,0(s0)
    800088d2:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800088d6:	37ab77b7          	lui	a5,0x37ab7
    800088da:	078a                	slli	a5,a5,0x2
    800088dc:	40019737          	lui	a4,0x40019
    800088e0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800088e4:	070a                	slli	a4,a4,0x2
    800088e6:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    800088ea:	00020617          	auipc	a2,0x20
    800088ee:	1ce60613          	addi	a2,a2,462 # 80028ab8 <__func__.0+0x1ef8>
    800088f2:	08200593          	li	a1,130
    800088f6:	0001e517          	auipc	a0,0x1e
    800088fa:	5c250513          	addi	a0,a0,1474 # 80026eb8 <__func__.0+0x2f8>
    800088fe:	6061c0ef          	jal	80024f04 <printf>
    80008902:	00040797          	auipc	a5,0x40
    80008906:	70f7c783          	lbu	a5,1807(a5) # 80049011 <excpt+0x1>
    8000890a:	e399                	bnez	a5,80008910 <tinst_tests_pf+0x750>
    8000890c:	5780106f          	j	80009e84 <tinst_tests_pf+0x1cc4>
    80008910:	6418                	ld	a4,8(s0)
    80008912:	47bd                	li	a5,15
    80008914:	0001e597          	auipc	a1,0x1e
    80008918:	57c58593          	addi	a1,a1,1404 # 80026e90 <__func__.0+0x2d0>
    8000891c:	00f71463          	bne	a4,a5,80008924 <tinst_tests_pf+0x764>
    80008920:	5160106f          	j	80009e36 <tinst_tests_pf+0x1c76>
    80008924:	0001e517          	auipc	a0,0x1e
    80008928:	5ac50513          	addi	a0,a0,1452 # 80026ed0 <__func__.0+0x310>
    8000892c:	5d81c0ef          	jal	80024f04 <printf>
    80008930:	00040797          	auipc	a5,0x40
    80008934:	6e17c783          	lbu	a5,1761(a5) # 80049011 <excpt+0x1>
    80008938:	c799                	beqz	a5,80008946 <tinst_tests_pf+0x786>
    8000893a:	6418                	ld	a4,8(s0)
    8000893c:	47bd                	li	a5,15
    8000893e:	00f71463          	bne	a4,a5,80008946 <tinst_tests_pf+0x786>
    80008942:	0200206f          	j	8000a962 <tinst_tests_pf+0x27a2>
    80008946:	0001e517          	auipc	a0,0x1e
    8000894a:	59250513          	addi	a0,a0,1426 # 80026ed8 <__func__.0+0x318>
    8000894e:	5b61c0ef          	jal	80024f04 <printf>
    80008952:	02900513          	li	a0,41
    80008956:	3b81b0ef          	jal	80023d0e <putchar>
    8000895a:	4529                	li	a0,10
    8000895c:	3b21b0ef          	jal	80023d0e <putchar>
    80008960:	00090a63          	beqz	s2,80008974 <tinst_tests_pf+0x7b4>
    80008964:	00040797          	auipc	a5,0x40
    80008968:	6ad7c783          	lbu	a5,1709(a5) # 80049011 <excpt+0x1>
    8000896c:	c399                	beqz	a5,80008972 <tinst_tests_pf+0x7b2>
    8000896e:	09b0106f          	j	8000a208 <tinst_tests_pf+0x2048>
    80008972:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008974:	0330000f          	fence	rw,rw
    80008978:	4785                	li	a5,1
    8000897a:	00040717          	auipc	a4,0x40
    8000897e:	6c073723          	sd	zero,1742(a4) # 80049048 <excpt+0x38>
    80008982:	00f41023          	sh	a5,0(s0)
    80008986:	0330000f          	fence	rw,rw
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    8000898a:	40019537          	lui	a0,0x40019
    8000898e:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80008990:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80008992:	00020617          	auipc	a2,0x20
    80008996:	16660613          	addi	a2,a2,358 # 80028af8 <__func__.0+0x1f38>
    8000899a:	08200593          	li	a1,130
    8000899e:	0001e517          	auipc	a0,0x1e
    800089a2:	51a50513          	addi	a0,a0,1306 # 80026eb8 <__func__.0+0x2f8>
    800089a6:	55e1c0ef          	jal	80024f04 <printf>
    800089aa:	00040797          	auipc	a5,0x40
    800089ae:	6677c783          	lbu	a5,1639(a5) # 80049011 <excpt+0x1>
    800089b2:	c799                	beqz	a5,800089c0 <tinst_tests_pf+0x800>
    800089b4:	6418                	ld	a4,8(s0)
    800089b6:	47b5                	li	a5,13
    800089b8:	00f71463          	bne	a4,a5,800089c0 <tinst_tests_pf+0x800>
    800089bc:	1970106f          	j	8000a352 <tinst_tests_pf+0x2192>
    800089c0:	0001e597          	auipc	a1,0x1e
    800089c4:	4d058593          	addi	a1,a1,1232 # 80026e90 <__func__.0+0x2d0>
    800089c8:	0001e517          	auipc	a0,0x1e
    800089cc:	50850513          	addi	a0,a0,1288 # 80026ed0 <__func__.0+0x310>
    800089d0:	5341c0ef          	jal	80024f04 <printf>
    800089d4:	00040797          	auipc	a5,0x40
    800089d8:	63d7c783          	lbu	a5,1597(a5) # 80049011 <excpt+0x1>
    800089dc:	c799                	beqz	a5,800089ea <tinst_tests_pf+0x82a>
    800089de:	6418                	ld	a4,8(s0)
    800089e0:	47b5                	li	a5,13
    800089e2:	00f71463          	bne	a4,a5,800089ea <tinst_tests_pf+0x82a>
    800089e6:	0180206f          	j	8000a9fe <tinst_tests_pf+0x283e>
    800089ea:	0001e517          	auipc	a0,0x1e
    800089ee:	4ee50513          	addi	a0,a0,1262 # 80026ed8 <__func__.0+0x318>
    800089f2:	5121c0ef          	jal	80024f04 <printf>
    800089f6:	02900513          	li	a0,41
    800089fa:	3141b0ef          	jal	80023d0e <putchar>
    800089fe:	4529                	li	a0,10
    80008a00:	30e1b0ef          	jal	80023d0e <putchar>
    80008a04:	00090a63          	beqz	s2,80008a18 <tinst_tests_pf+0x858>
    80008a08:	00040797          	auipc	a5,0x40
    80008a0c:	6097c783          	lbu	a5,1545(a5) # 80049011 <excpt+0x1>
    80008a10:	c399                	beqz	a5,80008a16 <tinst_tests_pf+0x856>
    80008a12:	0450106f          	j	8000a256 <tinst_tests_pf+0x2096>
    80008a16:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008a18:	0330000f          	fence	rw,rw
    80008a1c:	4785                	li	a5,1
    80008a1e:	00040717          	auipc	a4,0x40
    80008a22:	62073523          	sd	zero,1578(a4) # 80049048 <excpt+0x38>
    80008a26:	00f41023          	sh	a5,0(s0)
    80008a2a:	0330000f          	fence	rw,rw
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80008a2e:	40019537          	lui	a0,0x40019
    80008a32:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    80008a34:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80008a36:	00020617          	auipc	a2,0x20
    80008a3a:	10260613          	addi	a2,a2,258 # 80028b38 <__func__.0+0x1f78>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    80008a3e:	84ae                	mv	s1,a1
    80008a40:	0001e517          	auipc	a0,0x1e
    80008a44:	47850513          	addi	a0,a0,1144 # 80026eb8 <__func__.0+0x2f8>
    80008a48:	08200593          	li	a1,130
    80008a4c:	4b81c0ef          	jal	80024f04 <printf>
    80008a50:	00040797          	auipc	a5,0x40
    80008a54:	5c17c783          	lbu	a5,1473(a5) # 80049011 <excpt+0x1>
    80008a58:	c799                	beqz	a5,80008a66 <tinst_tests_pf+0x8a6>
    80008a5a:	6418                	ld	a4,8(s0)
    80008a5c:	47b5                	li	a5,13
    80008a5e:	00f71463          	bne	a4,a5,80008a66 <tinst_tests_pf+0x8a6>
    80008a62:	1450106f          	j	8000a3a6 <tinst_tests_pf+0x21e6>
    80008a66:	0001e597          	auipc	a1,0x1e
    80008a6a:	42a58593          	addi	a1,a1,1066 # 80026e90 <__func__.0+0x2d0>
    80008a6e:	0001e517          	auipc	a0,0x1e
    80008a72:	46250513          	addi	a0,a0,1122 # 80026ed0 <__func__.0+0x310>
    80008a76:	48e1c0ef          	jal	80024f04 <printf>
    80008a7a:	00040797          	auipc	a5,0x40
    80008a7e:	5977c783          	lbu	a5,1431(a5) # 80049011 <excpt+0x1>
    80008a82:	c799                	beqz	a5,80008a90 <tinst_tests_pf+0x8d0>
    80008a84:	6418                	ld	a4,8(s0)
    80008a86:	47b5                	li	a5,13
    80008a88:	00f71463          	bne	a4,a5,80008a90 <tinst_tests_pf+0x8d0>
    80008a8c:	7f90106f          	j	8000aa84 <tinst_tests_pf+0x28c4>
    80008a90:	0001e517          	auipc	a0,0x1e
    80008a94:	44850513          	addi	a0,a0,1096 # 80026ed8 <__func__.0+0x318>
    80008a98:	46c1c0ef          	jal	80024f04 <printf>
    80008a9c:	02900513          	li	a0,41
    80008aa0:	26e1b0ef          	jal	80023d0e <putchar>
    80008aa4:	4529                	li	a0,10
    80008aa6:	2681b0ef          	jal	80023d0e <putchar>
    80008aaa:	00090a63          	beqz	s2,80008abe <tinst_tests_pf+0x8fe>
    80008aae:	00040797          	auipc	a5,0x40
    80008ab2:	5637c783          	lbu	a5,1379(a5) # 80049011 <excpt+0x1>
    80008ab6:	c399                	beqz	a5,80008abc <tinst_tests_pf+0x8fc>
    80008ab8:	7d80106f          	j	8000a290 <tinst_tests_pf+0x20d0>
    80008abc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008abe:	0330000f          	fence	rw,rw
    80008ac2:	4785                	li	a5,1
    80008ac4:	00040717          	auipc	a4,0x40
    80008ac8:	58073223          	sd	zero,1412(a4) # 80049048 <excpt+0x38>
    80008acc:	00f41023          	sh	a5,0(s0)
    80008ad0:	0330000f          	fence	rw,rw
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008ad4:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    80008ad8:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008ada:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008adc:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80008ade:	00020617          	auipc	a2,0x20
    80008ae2:	01a60613          	addi	a2,a2,26 # 80028af8 <__func__.0+0x1f38>
    80008ae6:	08200593          	li	a1,130
    80008aea:	0001e517          	auipc	a0,0x1e
    80008aee:	3ce50513          	addi	a0,a0,974 # 80026eb8 <__func__.0+0x2f8>
    80008af2:	4121c0ef          	jal	80024f04 <printf>
    80008af6:	00040797          	auipc	a5,0x40
    80008afa:	51b7c783          	lbu	a5,1307(a5) # 80049011 <excpt+0x1>
    80008afe:	c799                	beqz	a5,80008b0c <tinst_tests_pf+0x94c>
    80008b00:	6418                	ld	a4,8(s0)
    80008b02:	47bd                	li	a5,15
    80008b04:	00f71463          	bne	a4,a5,80008b0c <tinst_tests_pf+0x94c>
    80008b08:	0b30106f          	j	8000a3ba <tinst_tests_pf+0x21fa>
    80008b0c:	0001e597          	auipc	a1,0x1e
    80008b10:	38458593          	addi	a1,a1,900 # 80026e90 <__func__.0+0x2d0>
    80008b14:	0001e517          	auipc	a0,0x1e
    80008b18:	3bc50513          	addi	a0,a0,956 # 80026ed0 <__func__.0+0x310>
    80008b1c:	3e81c0ef          	jal	80024f04 <printf>
    80008b20:	00040797          	auipc	a5,0x40
    80008b24:	4f17c783          	lbu	a5,1265(a5) # 80049011 <excpt+0x1>
    80008b28:	c799                	beqz	a5,80008b36 <tinst_tests_pf+0x976>
    80008b2a:	6418                	ld	a4,8(s0)
    80008b2c:	47bd                	li	a5,15
    80008b2e:	00f71463          	bne	a4,a5,80008b36 <tinst_tests_pf+0x976>
    80008b32:	7dd0106f          	j	8000ab0e <tinst_tests_pf+0x294e>
    80008b36:	0001e517          	auipc	a0,0x1e
    80008b3a:	3a250513          	addi	a0,a0,930 # 80026ed8 <__func__.0+0x318>
    80008b3e:	3c61c0ef          	jal	80024f04 <printf>
    80008b42:	02900513          	li	a0,41
    80008b46:	1c81b0ef          	jal	80023d0e <putchar>
    80008b4a:	4529                	li	a0,10
    80008b4c:	1c21b0ef          	jal	80023d0e <putchar>
    80008b50:	00090e63          	beqz	s2,80008b6c <tinst_tests_pf+0x9ac>
    80008b54:	00040797          	auipc	a5,0x40
    80008b58:	4bd7c783          	lbu	a5,1213(a5) # 80049011 <excpt+0x1>
    80008b5c:	c799                	beqz	a5,80008b6a <tinst_tests_pf+0x9aa>
    80008b5e:	6418                	ld	a4,8(s0)
    80008b60:	47bd                	li	a5,15
    80008b62:	00f71463          	bne	a4,a5,80008b6a <tinst_tests_pf+0x9aa>
    80008b66:	6060206f          	j	8000b16c <tinst_tests_pf+0x2fac>
    80008b6a:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008b6c:	0330000f          	fence	rw,rw
    80008b70:	4785                	li	a5,1
    80008b72:	00040717          	auipc	a4,0x40
    80008b76:	4c073b23          	sd	zero,1238(a4) # 80049048 <excpt+0x38>
    80008b7a:	00f41023          	sh	a5,0(s0)
    80008b7e:	0330000f          	fence	rw,rw
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    80008b82:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    80008b86:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008b88:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008b8a:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80008b8c:	00020617          	auipc	a2,0x20
    80008b90:	fec60613          	addi	a2,a2,-20 # 80028b78 <__func__.0+0x1fb8>
    80008b94:	08200593          	li	a1,130
    80008b98:	0001e517          	auipc	a0,0x1e
    80008b9c:	32050513          	addi	a0,a0,800 # 80026eb8 <__func__.0+0x2f8>
    80008ba0:	3641c0ef          	jal	80024f04 <printf>
    80008ba4:	00040797          	auipc	a5,0x40
    80008ba8:	46d7c783          	lbu	a5,1133(a5) # 80049011 <excpt+0x1>
    80008bac:	c799                	beqz	a5,80008bba <tinst_tests_pf+0x9fa>
    80008bae:	6418                	ld	a4,8(s0)
    80008bb0:	47bd                	li	a5,15
    80008bb2:	00f71463          	bne	a4,a5,80008bba <tinst_tests_pf+0x9fa>
    80008bb6:	0190106f          	j	8000a3ce <tinst_tests_pf+0x220e>
    80008bba:	0001e597          	auipc	a1,0x1e
    80008bbe:	2d658593          	addi	a1,a1,726 # 80026e90 <__func__.0+0x2d0>
    80008bc2:	0001e517          	auipc	a0,0x1e
    80008bc6:	30e50513          	addi	a0,a0,782 # 80026ed0 <__func__.0+0x310>
    80008bca:	33a1c0ef          	jal	80024f04 <printf>
    80008bce:	00040797          	auipc	a5,0x40
    80008bd2:	4437c783          	lbu	a5,1091(a5) # 80049011 <excpt+0x1>
    80008bd6:	c799                	beqz	a5,80008be4 <tinst_tests_pf+0xa24>
    80008bd8:	6418                	ld	a4,8(s0)
    80008bda:	47bd                	li	a5,15
    80008bdc:	00f71463          	bne	a4,a5,80008be4 <tinst_tests_pf+0xa24>
    80008be0:	7bd0106f          	j	8000ab9c <tinst_tests_pf+0x29dc>
    80008be4:	0001e517          	auipc	a0,0x1e
    80008be8:	2f450513          	addi	a0,a0,756 # 80026ed8 <__func__.0+0x318>
    80008bec:	3181c0ef          	jal	80024f04 <printf>
    80008bf0:	02900513          	li	a0,41
    80008bf4:	11a1b0ef          	jal	80023d0e <putchar>
    80008bf8:	4529                	li	a0,10
    80008bfa:	1141b0ef          	jal	80023d0e <putchar>
    80008bfe:	00090e63          	beqz	s2,80008c1a <tinst_tests_pf+0xa5a>
    80008c02:	00040797          	auipc	a5,0x40
    80008c06:	40f7c783          	lbu	a5,1039(a5) # 80049011 <excpt+0x1>
    80008c0a:	c799                	beqz	a5,80008c18 <tinst_tests_pf+0xa58>
    80008c0c:	6418                	ld	a4,8(s0)
    80008c0e:	47bd                	li	a5,15
    80008c10:	00f71463          	bne	a4,a5,80008c18 <tinst_tests_pf+0xa58>
    80008c14:	58e0206f          	j	8000b1a2 <tinst_tests_pf+0x2fe2>
    80008c18:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008c1a:	0330000f          	fence	rw,rw
    80008c1e:	4785                	li	a5,1
    80008c20:	00040717          	auipc	a4,0x40
    80008c24:	42073423          	sd	zero,1064(a4) # 80049048 <excpt+0x38>
    80008c28:	00f41023          	sh	a5,0(s0)
    80008c2c:	0330000f          	fence	rw,rw
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    80008c30:	400194b7          	lui	s1,0x40019
    80008c34:	048a                	slli	s1,s1,0x2
    80008c36:	1004a4af          	lr.w	s1,(s1)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008c3a:	00020617          	auipc	a2,0x20
    80008c3e:	f7e60613          	addi	a2,a2,-130 # 80028bb8 <__func__.0+0x1ff8>
    80008c42:	08200593          	li	a1,130
    80008c46:	0001e517          	auipc	a0,0x1e
    80008c4a:	27250513          	addi	a0,a0,626 # 80026eb8 <__func__.0+0x2f8>
    80008c4e:	2b61c0ef          	jal	80024f04 <printf>
    80008c52:	00040797          	auipc	a5,0x40
    80008c56:	3bf7c783          	lbu	a5,959(a5) # 80049011 <excpt+0x1>
    value = lr_w(vaddr_f);
    80008c5a:	1482                	slli	s1,s1,0x20
    80008c5c:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008c5e:	e399                	bnez	a5,80008c64 <tinst_tests_pf+0xaa4>
    80008c60:	27e0106f          	j	80009ede <tinst_tests_pf+0x1d1e>
    80008c64:	6418                	ld	a4,8(s0)
    80008c66:	47b5                	li	a5,13
    80008c68:	0001e597          	auipc	a1,0x1e
    80008c6c:	22858593          	addi	a1,a1,552 # 80026e90 <__func__.0+0x2d0>
    80008c70:	00f71463          	bne	a4,a5,80008c78 <tinst_tests_pf+0xab8>
    80008c74:	21c0106f          	j	80009e90 <tinst_tests_pf+0x1cd0>
    80008c78:	0001e517          	auipc	a0,0x1e
    80008c7c:	25850513          	addi	a0,a0,600 # 80026ed0 <__func__.0+0x310>
    80008c80:	2841c0ef          	jal	80024f04 <printf>
    80008c84:	00040797          	auipc	a5,0x40
    80008c88:	38d7c783          	lbu	a5,909(a5) # 80049011 <excpt+0x1>
    80008c8c:	c799                	beqz	a5,80008c9a <tinst_tests_pf+0xada>
    80008c8e:	6418                	ld	a4,8(s0)
    80008c90:	47b5                	li	a5,13
    80008c92:	00f71463          	bne	a4,a5,80008c9a <tinst_tests_pf+0xada>
    80008c96:	6380106f          	j	8000a2ce <tinst_tests_pf+0x210e>
    80008c9a:	0001e517          	auipc	a0,0x1e
    80008c9e:	23e50513          	addi	a0,a0,574 # 80026ed8 <__func__.0+0x318>
    80008ca2:	2621c0ef          	jal	80024f04 <printf>
    80008ca6:	02900513          	li	a0,41
    80008caa:	0641b0ef          	jal	80023d0e <putchar>
    80008cae:	4529                	li	a0,10
    80008cb0:	05e1b0ef          	jal	80023d0e <putchar>
    80008cb4:	00090e63          	beqz	s2,80008cd0 <tinst_tests_pf+0xb10>
    80008cb8:	00040797          	auipc	a5,0x40
    80008cbc:	3597c783          	lbu	a5,857(a5) # 80049011 <excpt+0x1>
    80008cc0:	c799                	beqz	a5,80008cce <tinst_tests_pf+0xb0e>
    80008cc2:	6418                	ld	a4,8(s0)
    80008cc4:	47b5                	li	a5,13
    80008cc6:	00f71463          	bne	a4,a5,80008cce <tinst_tests_pf+0xb0e>
    80008cca:	50a0206f          	j	8000b1d4 <tinst_tests_pf+0x3014>
    80008cce:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008cd0:	0330000f          	fence	rw,rw
    80008cd4:	4785                	li	a5,1
    80008cd6:	00040717          	auipc	a4,0x40
    80008cda:	36073923          	sd	zero,882(a4) # 80049048 <excpt+0x38>
    80008cde:	00f41023          	sh	a5,0(s0)
    80008ce2:	0330000f          	fence	rw,rw
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    80008ce6:	400197b7          	lui	a5,0x40019
    80008cea:	078a                	slli	a5,a5,0x2
    80008cec:	1897a4af          	sc.w	s1,s1,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80008cf0:	00020617          	auipc	a2,0x20
    80008cf4:	f0860613          	addi	a2,a2,-248 # 80028bf8 <__func__.0+0x2038>
    80008cf8:	08200593          	li	a1,130
    80008cfc:	0001e517          	auipc	a0,0x1e
    80008d00:	1bc50513          	addi	a0,a0,444 # 80026eb8 <__func__.0+0x2f8>
    80008d04:	2001c0ef          	jal	80024f04 <printf>
    80008d08:	00040797          	auipc	a5,0x40
    80008d0c:	3097c783          	lbu	a5,777(a5) # 80049011 <excpt+0x1>
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    80008d10:	2481                	sext.w	s1,s1
    80008d12:	e399                	bnez	a5,80008d18 <tinst_tests_pf+0xb58>
    80008d14:	2240106f          	j	80009f38 <tinst_tests_pf+0x1d78>
    80008d18:	6418                	ld	a4,8(s0)
    80008d1a:	47bd                	li	a5,15
    80008d1c:	0001e597          	auipc	a1,0x1e
    80008d20:	17458593          	addi	a1,a1,372 # 80026e90 <__func__.0+0x2d0>
    80008d24:	00f71463          	bne	a4,a5,80008d2c <tinst_tests_pf+0xb6c>
    80008d28:	1c20106f          	j	80009eea <tinst_tests_pf+0x1d2a>
    80008d2c:	0001e517          	auipc	a0,0x1e
    80008d30:	1a450513          	addi	a0,a0,420 # 80026ed0 <__func__.0+0x310>
    80008d34:	1d01c0ef          	jal	80024f04 <printf>
    80008d38:	00040797          	auipc	a5,0x40
    80008d3c:	2d97c783          	lbu	a5,729(a5) # 80049011 <excpt+0x1>
    80008d40:	c799                	beqz	a5,80008d4e <tinst_tests_pf+0xb8e>
    80008d42:	6418                	ld	a4,8(s0)
    80008d44:	47bd                	li	a5,15
    80008d46:	00f71463          	bne	a4,a5,80008d4e <tinst_tests_pf+0xb8e>
    80008d4a:	5c60106f          	j	8000a310 <tinst_tests_pf+0x2150>
    80008d4e:	0001e517          	auipc	a0,0x1e
    80008d52:	18a50513          	addi	a0,a0,394 # 80026ed8 <__func__.0+0x318>
    80008d56:	1ae1c0ef          	jal	80024f04 <printf>
    80008d5a:	02900513          	li	a0,41
    80008d5e:	7b11a0ef          	jal	80023d0e <putchar>
    80008d62:	4529                	li	a0,10
    80008d64:	7ab1a0ef          	jal	80023d0e <putchar>
    80008d68:	00090e63          	beqz	s2,80008d84 <tinst_tests_pf+0xbc4>
    80008d6c:	00040797          	auipc	a5,0x40
    80008d70:	2a57c783          	lbu	a5,677(a5) # 80049011 <excpt+0x1>
    80008d74:	c799                	beqz	a5,80008d82 <tinst_tests_pf+0xbc2>
    80008d76:	6418                	ld	a4,8(s0)
    80008d78:	47bd                	li	a5,15
    80008d7a:	00f71463          	bne	a4,a5,80008d82 <tinst_tests_pf+0xbc2>
    80008d7e:	4980206f          	j	8000b216 <tinst_tests_pf+0x3056>
    80008d82:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d84:	0330000f          	fence	rw,rw
    80008d88:	4785                	li	a5,1
    80008d8a:	00040717          	auipc	a4,0x40
    80008d8e:	2a073f23          	sd	zero,702(a4) # 80049048 <excpt+0x38>
    80008d92:	00f41023          	sh	a5,0(s0)
    80008d96:	0330000f          	fence	rw,rw
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    80008d9a:	400197b7          	lui	a5,0x40019
    80008d9e:	078a                	slli	a5,a5,0x2
    80008da0:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80008da4:	00020617          	auipc	a2,0x20
    80008da8:	e9460613          	addi	a2,a2,-364 # 80028c38 <__func__.0+0x2078>
    80008dac:	08200593          	li	a1,130
    80008db0:	0001e517          	auipc	a0,0x1e
    80008db4:	10850513          	addi	a0,a0,264 # 80026eb8 <__func__.0+0x2f8>
    80008db8:	14c1c0ef          	jal	80024f04 <printf>
    80008dbc:	00040797          	auipc	a5,0x40
    80008dc0:	2557c783          	lbu	a5,597(a5) # 80049011 <excpt+0x1>
    80008dc4:	e399                	bnez	a5,80008dca <tinst_tests_pf+0xc0a>
    80008dc6:	1cc0106f          	j	80009f92 <tinst_tests_pf+0x1dd2>
    80008dca:	6418                	ld	a4,8(s0)
    80008dcc:	47bd                	li	a5,15
    80008dce:	0001e597          	auipc	a1,0x1e
    80008dd2:	0c258593          	addi	a1,a1,194 # 80026e90 <__func__.0+0x2d0>
    80008dd6:	00f71463          	bne	a4,a5,80008dde <tinst_tests_pf+0xc1e>
    80008dda:	16a0106f          	j	80009f44 <tinst_tests_pf+0x1d84>
    80008dde:	0001e517          	auipc	a0,0x1e
    80008de2:	0f250513          	addi	a0,a0,242 # 80026ed0 <__func__.0+0x310>
    80008de6:	11e1c0ef          	jal	80024f04 <printf>
    80008dea:	00040797          	auipc	a5,0x40
    80008dee:	2277c783          	lbu	a5,551(a5) # 80049011 <excpt+0x1>
    80008df2:	c799                	beqz	a5,80008e00 <tinst_tests_pf+0xc40>
    80008df4:	6418                	ld	a4,8(s0)
    80008df6:	47bd                	li	a5,15
    80008df8:	00f71463          	bne	a4,a5,80008e00 <tinst_tests_pf+0xc40>
    80008dfc:	5680106f          	j	8000a364 <tinst_tests_pf+0x21a4>
    80008e00:	0001e517          	auipc	a0,0x1e
    80008e04:	0d850513          	addi	a0,a0,216 # 80026ed8 <__func__.0+0x318>
    80008e08:	0fc1c0ef          	jal	80024f04 <printf>
    80008e0c:	02900513          	li	a0,41
    80008e10:	6ff1a0ef          	jal	80023d0e <putchar>
    80008e14:	4529                	li	a0,10
    80008e16:	6f91a0ef          	jal	80023d0e <putchar>
    80008e1a:	00090e63          	beqz	s2,80008e36 <tinst_tests_pf+0xc76>
    80008e1e:	00040797          	auipc	a5,0x40
    80008e22:	1f37c783          	lbu	a5,499(a5) # 80049011 <excpt+0x1>
    80008e26:	c799                	beqz	a5,80008e34 <tinst_tests_pf+0xc74>
    80008e28:	6418                	ld	a4,8(s0)
    80008e2a:	47bd                	li	a5,15
    80008e2c:	00f71463          	bne	a4,a5,80008e34 <tinst_tests_pf+0xc74>
    80008e30:	4280206f          	j	8000b258 <tinst_tests_pf+0x3098>
    80008e34:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e36:	0330000f          	fence	rw,rw
    80008e3a:	4785                	li	a5,1
    80008e3c:	00040717          	auipc	a4,0x40
    80008e40:	20073623          	sd	zero,524(a4) # 80049048 <excpt+0x38>
    80008e44:	00f41023          	sh	a5,0(s0)
    80008e48:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80008e4c:	400197b7          	lui	a5,0x40019
    80008e50:	078a                	slli	a5,a5,0x2
    80008e52:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008e56:	00020617          	auipc	a2,0x20
    80008e5a:	e2260613          	addi	a2,a2,-478 # 80028c78 <__func__.0+0x20b8>
    80008e5e:	08200593          	li	a1,130
    80008e62:	0001e517          	auipc	a0,0x1e
    80008e66:	05650513          	addi	a0,a0,86 # 80026eb8 <__func__.0+0x2f8>
    80008e6a:	09a1c0ef          	jal	80024f04 <printf>
    80008e6e:	00040797          	auipc	a5,0x40
    80008e72:	1a37c783          	lbu	a5,419(a5) # 80049011 <excpt+0x1>
    80008e76:	c399                	beqz	a5,80008e7c <tinst_tests_pf+0xcbc>
    80008e78:	1ac0106f          	j	8000a024 <tinst_tests_pf+0x1e64>
    80008e7c:	0001e597          	auipc	a1,0x1e
    80008e80:	01458593          	addi	a1,a1,20 # 80026e90 <__func__.0+0x2d0>
    80008e84:	0001e517          	auipc	a0,0x1e
    80008e88:	04c50513          	addi	a0,a0,76 # 80026ed0 <__func__.0+0x310>
    80008e8c:	0781c0ef          	jal	80024f04 <printf>
    80008e90:	00040797          	auipc	a5,0x40
    80008e94:	1817c783          	lbu	a5,385(a5) # 80049011 <excpt+0x1>
    80008e98:	c799                	beqz	a5,80008ea6 <tinst_tests_pf+0xce6>
    80008e9a:	6418                	ld	a4,8(s0)
    80008e9c:	47bd                	li	a5,15
    80008e9e:	00f71463          	bne	a4,a5,80008ea6 <tinst_tests_pf+0xce6>
    80008ea2:	6930106f          	j	8000ad34 <tinst_tests_pf+0x2b74>
    80008ea6:	0001e517          	auipc	a0,0x1e
    80008eaa:	03250513          	addi	a0,a0,50 # 80026ed8 <__func__.0+0x318>
    80008eae:	0561c0ef          	jal	80024f04 <printf>
    80008eb2:	02900513          	li	a0,41
    80008eb6:	6591a0ef          	jal	80023d0e <putchar>
    80008eba:	4529                	li	a0,10
    80008ebc:	6531a0ef          	jal	80023d0e <putchar>
    80008ec0:	00090e63          	beqz	s2,80008edc <tinst_tests_pf+0xd1c>
    80008ec4:	00040797          	auipc	a5,0x40
    80008ec8:	14d7c783          	lbu	a5,333(a5) # 80049011 <excpt+0x1>
    80008ecc:	c799                	beqz	a5,80008eda <tinst_tests_pf+0xd1a>
    80008ece:	6418                	ld	a4,8(s0)
    80008ed0:	47bd                	li	a5,15
    80008ed2:	00f71463          	bne	a4,a5,80008eda <tinst_tests_pf+0xd1a>
    80008ed6:	3c40206f          	j	8000b29a <tinst_tests_pf+0x30da>
    80008eda:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008edc:	0330000f          	fence	rw,rw
    80008ee0:	4785                	li	a5,1
    80008ee2:	00040717          	auipc	a4,0x40
    80008ee6:	16073323          	sd	zero,358(a4) # 80049048 <excpt+0x38>
    80008eea:	00f41023          	sh	a5,0(s0)
    80008eee:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    80008ef2:	400197b7          	lui	a5,0x40019
    80008ef6:	078a                	slli	a5,a5,0x2
    80008ef8:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80008efc:	00020617          	auipc	a2,0x20
    80008f00:	dbc60613          	addi	a2,a2,-580 # 80028cb8 <__func__.0+0x20f8>
    80008f04:	08200593          	li	a1,130
    80008f08:	0001e517          	auipc	a0,0x1e
    80008f0c:	fb050513          	addi	a0,a0,-80 # 80026eb8 <__func__.0+0x2f8>
    80008f10:	7f51b0ef          	jal	80024f04 <printf>
    80008f14:	00040797          	auipc	a5,0x40
    80008f18:	0fd7c783          	lbu	a5,253(a5) # 80049011 <excpt+0x1>
    80008f1c:	e399                	bnez	a5,80008f22 <tinst_tests_pf+0xd62>
    80008f1e:	6100106f          	j	8000a52e <tinst_tests_pf+0x236e>
    80008f22:	6418                	ld	a4,8(s0)
    80008f24:	47bd                	li	a5,15
    80008f26:	0001e597          	auipc	a1,0x1e
    80008f2a:	f6a58593          	addi	a1,a1,-150 # 80026e90 <__func__.0+0x2d0>
    80008f2e:	00f71463          	bne	a4,a5,80008f36 <tinst_tests_pf+0xd76>
    80008f32:	5b00106f          	j	8000a4e2 <tinst_tests_pf+0x2322>
    80008f36:	0001e517          	auipc	a0,0x1e
    80008f3a:	f9a50513          	addi	a0,a0,-102 # 80026ed0 <__func__.0+0x310>
    80008f3e:	7c71b0ef          	jal	80024f04 <printf>
    80008f42:	00040797          	auipc	a5,0x40
    80008f46:	0cf7c783          	lbu	a5,207(a5) # 80049011 <excpt+0x1>
    80008f4a:	c799                	beqz	a5,80008f58 <tinst_tests_pf+0xd98>
    80008f4c:	6418                	ld	a4,8(s0)
    80008f4e:	47bd                	li	a5,15
    80008f50:	00f71463          	bne	a4,a5,80008f58 <tinst_tests_pf+0xd98>
    80008f54:	6230106f          	j	8000ad76 <tinst_tests_pf+0x2bb6>
    80008f58:	0001e517          	auipc	a0,0x1e
    80008f5c:	f8050513          	addi	a0,a0,-128 # 80026ed8 <__func__.0+0x318>
    80008f60:	7a51b0ef          	jal	80024f04 <printf>
    80008f64:	02900513          	li	a0,41
    80008f68:	5a71a0ef          	jal	80023d0e <putchar>
    80008f6c:	4529                	li	a0,10
    80008f6e:	5a11a0ef          	jal	80023d0e <putchar>
    80008f72:	00090e63          	beqz	s2,80008f8e <tinst_tests_pf+0xdce>
    80008f76:	00040797          	auipc	a5,0x40
    80008f7a:	09b7c783          	lbu	a5,155(a5) # 80049011 <excpt+0x1>
    80008f7e:	c799                	beqz	a5,80008f8c <tinst_tests_pf+0xdcc>
    80008f80:	6418                	ld	a4,8(s0)
    80008f82:	47bd                	li	a5,15
    80008f84:	00f71463          	bne	a4,a5,80008f8c <tinst_tests_pf+0xdcc>
    80008f88:	3ac0206f          	j	8000b334 <tinst_tests_pf+0x3174>
    80008f8c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008f8e:	0330000f          	fence	rw,rw
    80008f92:	4785                	li	a5,1
    80008f94:	00040717          	auipc	a4,0x40
    80008f98:	0a073a23          	sd	zero,180(a4) # 80049048 <excpt+0x38>
    80008f9c:	00f41023          	sh	a5,0(s0)
    80008fa0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008fa4:	400197b7          	lui	a5,0x40019
    80008fa8:	078a                	slli	a5,a5,0x2
    80008faa:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008fae:	00020617          	auipc	a2,0x20
    80008fb2:	d4a60613          	addi	a2,a2,-694 # 80028cf8 <__func__.0+0x2138>
    80008fb6:	08200593          	li	a1,130
    80008fba:	0001e517          	auipc	a0,0x1e
    80008fbe:	efe50513          	addi	a0,a0,-258 # 80026eb8 <__func__.0+0x2f8>
    80008fc2:	7431b0ef          	jal	80024f04 <printf>
    80008fc6:	00040797          	auipc	a5,0x40
    80008fca:	04b7c783          	lbu	a5,75(a5) # 80049011 <excpt+0x1>
    80008fce:	e399                	bnez	a5,80008fd4 <tinst_tests_pf+0xe14>
    80008fd0:	5f00106f          	j	8000a5c0 <tinst_tests_pf+0x2400>
    80008fd4:	6418                	ld	a4,8(s0)
    80008fd6:	47bd                	li	a5,15
    80008fd8:	0001e597          	auipc	a1,0x1e
    80008fdc:	eb858593          	addi	a1,a1,-328 # 80026e90 <__func__.0+0x2d0>
    80008fe0:	00f71463          	bne	a4,a5,80008fe8 <tinst_tests_pf+0xe28>
    80008fe4:	5900106f          	j	8000a574 <tinst_tests_pf+0x23b4>
    80008fe8:	0001e517          	auipc	a0,0x1e
    80008fec:	ee850513          	addi	a0,a0,-280 # 80026ed0 <__func__.0+0x310>
    80008ff0:	7151b0ef          	jal	80024f04 <printf>
    80008ff4:	00040797          	auipc	a5,0x40
    80008ff8:	01d7c783          	lbu	a5,29(a5) # 80049011 <excpt+0x1>
    80008ffc:	c799                	beqz	a5,8000900a <tinst_tests_pf+0xe4a>
    80008ffe:	6418                	ld	a4,8(s0)
    80009000:	47bd                	li	a5,15
    80009002:	00f71463          	bne	a4,a5,8000900a <tinst_tests_pf+0xe4a>
    80009006:	5b30106f          	j	8000adb8 <tinst_tests_pf+0x2bf8>
    8000900a:	0001e517          	auipc	a0,0x1e
    8000900e:	ece50513          	addi	a0,a0,-306 # 80026ed8 <__func__.0+0x318>
    80009012:	6f31b0ef          	jal	80024f04 <printf>
    80009016:	02900513          	li	a0,41
    8000901a:	4f51a0ef          	jal	80023d0e <putchar>
    8000901e:	4529                	li	a0,10
    80009020:	4ef1a0ef          	jal	80023d0e <putchar>
    80009024:	00090e63          	beqz	s2,80009040 <tinst_tests_pf+0xe80>
    80009028:	00040797          	auipc	a5,0x40
    8000902c:	fe97c783          	lbu	a5,-23(a5) # 80049011 <excpt+0x1>
    80009030:	c799                	beqz	a5,8000903e <tinst_tests_pf+0xe7e>
    80009032:	6418                	ld	a4,8(s0)
    80009034:	47bd                	li	a5,15
    80009036:	00f71463          	bne	a4,a5,8000903e <tinst_tests_pf+0xe7e>
    8000903a:	36c0206f          	j	8000b3a6 <tinst_tests_pf+0x31e6>
    8000903e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009040:	0330000f          	fence	rw,rw
    80009044:	4785                	li	a5,1
    80009046:	00040717          	auipc	a4,0x40
    8000904a:	00073123          	sd	zero,2(a4) # 80049048 <excpt+0x38>
    8000904e:	00f41023          	sh	a5,0(s0)
    80009052:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    80009056:	400197b7          	lui	a5,0x40019
    8000905a:	078a                	slli	a5,a5,0x2
    8000905c:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80009060:	00020617          	auipc	a2,0x20
    80009064:	cd860613          	addi	a2,a2,-808 # 80028d38 <__func__.0+0x2178>
    80009068:	08200593          	li	a1,130
    8000906c:	0001e517          	auipc	a0,0x1e
    80009070:	e4c50513          	addi	a0,a0,-436 # 80026eb8 <__func__.0+0x2f8>
    80009074:	6911b0ef          	jal	80024f04 <printf>
    80009078:	00040797          	auipc	a5,0x40
    8000907c:	f997c783          	lbu	a5,-103(a5) # 80049011 <excpt+0x1>
    80009080:	e399                	bnez	a5,80009086 <tinst_tests_pf+0xec6>
    80009082:	5d40106f          	j	8000a656 <tinst_tests_pf+0x2496>
    80009086:	6418                	ld	a4,8(s0)
    80009088:	47bd                	li	a5,15
    8000908a:	0001e597          	auipc	a1,0x1e
    8000908e:	e0658593          	addi	a1,a1,-506 # 80026e90 <__func__.0+0x2d0>
    80009092:	00f71463          	bne	a4,a5,8000909a <tinst_tests_pf+0xeda>
    80009096:	5720106f          	j	8000a608 <tinst_tests_pf+0x2448>
    8000909a:	0001e517          	auipc	a0,0x1e
    8000909e:	e3650513          	addi	a0,a0,-458 # 80026ed0 <__func__.0+0x310>
    800090a2:	6631b0ef          	jal	80024f04 <printf>
    800090a6:	00040797          	auipc	a5,0x40
    800090aa:	f6b7c783          	lbu	a5,-149(a5) # 80049011 <excpt+0x1>
    800090ae:	c799                	beqz	a5,800090bc <tinst_tests_pf+0xefc>
    800090b0:	6418                	ld	a4,8(s0)
    800090b2:	47bd                	li	a5,15
    800090b4:	00f71463          	bne	a4,a5,800090bc <tinst_tests_pf+0xefc>
    800090b8:	5430106f          	j	8000adfa <tinst_tests_pf+0x2c3a>
    800090bc:	0001e517          	auipc	a0,0x1e
    800090c0:	e1c50513          	addi	a0,a0,-484 # 80026ed8 <__func__.0+0x318>
    800090c4:	6411b0ef          	jal	80024f04 <printf>
    800090c8:	02900513          	li	a0,41
    800090cc:	4431a0ef          	jal	80023d0e <putchar>
    800090d0:	4529                	li	a0,10
    800090d2:	43d1a0ef          	jal	80023d0e <putchar>
    800090d6:	00090e63          	beqz	s2,800090f2 <tinst_tests_pf+0xf32>
    800090da:	00040797          	auipc	a5,0x40
    800090de:	f377c783          	lbu	a5,-201(a5) # 80049011 <excpt+0x1>
    800090e2:	c799                	beqz	a5,800090f0 <tinst_tests_pf+0xf30>
    800090e4:	6418                	ld	a4,8(s0)
    800090e6:	47bd                	li	a5,15
    800090e8:	00f71463          	bne	a4,a5,800090f0 <tinst_tests_pf+0xf30>
    800090ec:	32c0206f          	j	8000b418 <tinst_tests_pf+0x3258>
    800090f0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800090f2:	0330000f          	fence	rw,rw
    800090f6:	4785                	li	a5,1
    800090f8:	00040717          	auipc	a4,0x40
    800090fc:	f4073823          	sd	zero,-176(a4) # 80049048 <excpt+0x38>
    80009100:	00f41023          	sh	a5,0(s0)
    80009104:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80009108:	400197b7          	lui	a5,0x40019
    8000910c:	078a                	slli	a5,a5,0x2
    8000910e:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80009112:	00020617          	auipc	a2,0x20
    80009116:	c6660613          	addi	a2,a2,-922 # 80028d78 <__func__.0+0x21b8>
    8000911a:	08200593          	li	a1,130
    8000911e:	0001e517          	auipc	a0,0x1e
    80009122:	d9a50513          	addi	a0,a0,-614 # 80026eb8 <__func__.0+0x2f8>
    80009126:	5df1b0ef          	jal	80024f04 <printf>
    8000912a:	00040797          	auipc	a5,0x40
    8000912e:	ee77c783          	lbu	a5,-281(a5) # 80049011 <excpt+0x1>
    80009132:	e399                	bnez	a5,80009138 <tinst_tests_pf+0xf78>
    80009134:	5b80106f          	j	8000a6ec <tinst_tests_pf+0x252c>
    80009138:	6418                	ld	a4,8(s0)
    8000913a:	47bd                	li	a5,15
    8000913c:	0001e597          	auipc	a1,0x1e
    80009140:	d5458593          	addi	a1,a1,-684 # 80026e90 <__func__.0+0x2d0>
    80009144:	00f71463          	bne	a4,a5,8000914c <tinst_tests_pf+0xf8c>
    80009148:	5560106f          	j	8000a69e <tinst_tests_pf+0x24de>
    8000914c:	0001e517          	auipc	a0,0x1e
    80009150:	d8450513          	addi	a0,a0,-636 # 80026ed0 <__func__.0+0x310>
    80009154:	5b11b0ef          	jal	80024f04 <printf>
    80009158:	00040797          	auipc	a5,0x40
    8000915c:	eb97c783          	lbu	a5,-327(a5) # 80049011 <excpt+0x1>
    80009160:	c799                	beqz	a5,8000916e <tinst_tests_pf+0xfae>
    80009162:	6418                	ld	a4,8(s0)
    80009164:	47bd                	li	a5,15
    80009166:	00f71463          	bne	a4,a5,8000916e <tinst_tests_pf+0xfae>
    8000916a:	4d30106f          	j	8000ae3c <tinst_tests_pf+0x2c7c>
    8000916e:	0001e517          	auipc	a0,0x1e
    80009172:	d6a50513          	addi	a0,a0,-662 # 80026ed8 <__func__.0+0x318>
    80009176:	58f1b0ef          	jal	80024f04 <printf>
    8000917a:	02900513          	li	a0,41
    8000917e:	3911a0ef          	jal	80023d0e <putchar>
    80009182:	4529                	li	a0,10
    80009184:	38b1a0ef          	jal	80023d0e <putchar>
    80009188:	00090e63          	beqz	s2,800091a4 <tinst_tests_pf+0xfe4>
    8000918c:	00040797          	auipc	a5,0x40
    80009190:	e857c783          	lbu	a5,-379(a5) # 80049011 <excpt+0x1>
    80009194:	c799                	beqz	a5,800091a2 <tinst_tests_pf+0xfe2>
    80009196:	6418                	ld	a4,8(s0)
    80009198:	47bd                	li	a5,15
    8000919a:	00f71463          	bne	a4,a5,800091a2 <tinst_tests_pf+0xfe2>
    8000919e:	2bc0206f          	j	8000b45a <tinst_tests_pf+0x329a>
    800091a2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800091a4:	0330000f          	fence	rw,rw
    800091a8:	4785                	li	a5,1
    800091aa:	00040717          	auipc	a4,0x40
    800091ae:	e8073f23          	sd	zero,-354(a4) # 80049048 <excpt+0x38>
    800091b2:	00f41023          	sh	a5,0(s0)
    800091b6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    800091ba:	400197b7          	lui	a5,0x40019
    800091be:	078a                	slli	a5,a5,0x2
    800091c0:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    800091c4:	00020617          	auipc	a2,0x20
    800091c8:	bf460613          	addi	a2,a2,-1036 # 80028db8 <__func__.0+0x21f8>
    800091cc:	08200593          	li	a1,130
    800091d0:	0001e517          	auipc	a0,0x1e
    800091d4:	ce850513          	addi	a0,a0,-792 # 80026eb8 <__func__.0+0x2f8>
    800091d8:	52d1b0ef          	jal	80024f04 <printf>
    800091dc:	00040797          	auipc	a5,0x40
    800091e0:	e357c783          	lbu	a5,-459(a5) # 80049011 <excpt+0x1>
    800091e4:	e399                	bnez	a5,800091ea <tinst_tests_pf+0x102a>
    800091e6:	59c0106f          	j	8000a782 <tinst_tests_pf+0x25c2>
    800091ea:	6418                	ld	a4,8(s0)
    800091ec:	47bd                	li	a5,15
    800091ee:	0001e597          	auipc	a1,0x1e
    800091f2:	ca258593          	addi	a1,a1,-862 # 80026e90 <__func__.0+0x2d0>
    800091f6:	00f71463          	bne	a4,a5,800091fe <tinst_tests_pf+0x103e>
    800091fa:	53a0106f          	j	8000a734 <tinst_tests_pf+0x2574>
    800091fe:	0001e517          	auipc	a0,0x1e
    80009202:	cd250513          	addi	a0,a0,-814 # 80026ed0 <__func__.0+0x310>
    80009206:	4ff1b0ef          	jal	80024f04 <printf>
    8000920a:	00040797          	auipc	a5,0x40
    8000920e:	e077c783          	lbu	a5,-505(a5) # 80049011 <excpt+0x1>
    80009212:	c799                	beqz	a5,80009220 <tinst_tests_pf+0x1060>
    80009214:	6418                	ld	a4,8(s0)
    80009216:	47bd                	li	a5,15
    80009218:	00f71463          	bne	a4,a5,80009220 <tinst_tests_pf+0x1060>
    8000921c:	4630106f          	j	8000ae7e <tinst_tests_pf+0x2cbe>
    80009220:	0001e517          	auipc	a0,0x1e
    80009224:	cb850513          	addi	a0,a0,-840 # 80026ed8 <__func__.0+0x318>
    80009228:	4dd1b0ef          	jal	80024f04 <printf>
    8000922c:	02900513          	li	a0,41
    80009230:	2df1a0ef          	jal	80023d0e <putchar>
    80009234:	4529                	li	a0,10
    80009236:	2d91a0ef          	jal	80023d0e <putchar>
    8000923a:	00090e63          	beqz	s2,80009256 <tinst_tests_pf+0x1096>
    8000923e:	00040797          	auipc	a5,0x40
    80009242:	dd37c783          	lbu	a5,-557(a5) # 80049011 <excpt+0x1>
    80009246:	c799                	beqz	a5,80009254 <tinst_tests_pf+0x1094>
    80009248:	6418                	ld	a4,8(s0)
    8000924a:	47bd                	li	a5,15
    8000924c:	00f71463          	bne	a4,a5,80009254 <tinst_tests_pf+0x1094>
    80009250:	24c0206f          	j	8000b49c <tinst_tests_pf+0x32dc>
    80009254:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009256:	0330000f          	fence	rw,rw
    8000925a:	4785                	li	a5,1
    8000925c:	00040717          	auipc	a4,0x40
    80009260:	de073623          	sd	zero,-532(a4) # 80049048 <excpt+0x38>
    80009264:	00f41023          	sh	a5,0(s0)
    80009268:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000926c:	400197b7          	lui	a5,0x40019
    80009270:	078a                	slli	a5,a5,0x2
    80009272:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80009276:	00020617          	auipc	a2,0x20
    8000927a:	b8260613          	addi	a2,a2,-1150 # 80028df8 <__func__.0+0x2238>
    8000927e:	08200593          	li	a1,130
    80009282:	0001e517          	auipc	a0,0x1e
    80009286:	c3650513          	addi	a0,a0,-970 # 80026eb8 <__func__.0+0x2f8>
    8000928a:	47b1b0ef          	jal	80024f04 <printf>
    8000928e:	00040797          	auipc	a5,0x40
    80009292:	d837c783          	lbu	a5,-637(a5) # 80049011 <excpt+0x1>
    80009296:	e399                	bnez	a5,8000929c <tinst_tests_pf+0x10dc>
    80009298:	5860106f          	j	8000a81e <tinst_tests_pf+0x265e>
    8000929c:	6418                	ld	a4,8(s0)
    8000929e:	47bd                	li	a5,15
    800092a0:	0001e597          	auipc	a1,0x1e
    800092a4:	bf058593          	addi	a1,a1,-1040 # 80026e90 <__func__.0+0x2d0>
    800092a8:	00f71463          	bne	a4,a5,800092b0 <tinst_tests_pf+0x10f0>
    800092ac:	5240106f          	j	8000a7d0 <tinst_tests_pf+0x2610>
    800092b0:	0001e517          	auipc	a0,0x1e
    800092b4:	c2050513          	addi	a0,a0,-992 # 80026ed0 <__func__.0+0x310>
    800092b8:	44d1b0ef          	jal	80024f04 <printf>
    800092bc:	00040797          	auipc	a5,0x40
    800092c0:	d557c783          	lbu	a5,-683(a5) # 80049011 <excpt+0x1>
    800092c4:	c799                	beqz	a5,800092d2 <tinst_tests_pf+0x1112>
    800092c6:	6418                	ld	a4,8(s0)
    800092c8:	47bd                	li	a5,15
    800092ca:	00f71463          	bne	a4,a5,800092d2 <tinst_tests_pf+0x1112>
    800092ce:	3f30106f          	j	8000aec0 <tinst_tests_pf+0x2d00>
    800092d2:	0001e517          	auipc	a0,0x1e
    800092d6:	c0650513          	addi	a0,a0,-1018 # 80026ed8 <__func__.0+0x318>
    800092da:	42b1b0ef          	jal	80024f04 <printf>
    800092de:	02900513          	li	a0,41
    800092e2:	22d1a0ef          	jal	80023d0e <putchar>
    800092e6:	4529                	li	a0,10
    800092e8:	2271a0ef          	jal	80023d0e <putchar>
    800092ec:	00090e63          	beqz	s2,80009308 <tinst_tests_pf+0x1148>
    800092f0:	00040797          	auipc	a5,0x40
    800092f4:	d217c783          	lbu	a5,-735(a5) # 80049011 <excpt+0x1>
    800092f8:	c799                	beqz	a5,80009306 <tinst_tests_pf+0x1146>
    800092fa:	6418                	ld	a4,8(s0)
    800092fc:	47bd                	li	a5,15
    800092fe:	00f71463          	bne	a4,a5,80009306 <tinst_tests_pf+0x1146>
    80009302:	1de0206f          	j	8000b4e0 <tinst_tests_pf+0x3320>
    80009306:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009308:	0330000f          	fence	rw,rw
    8000930c:	4785                	li	a5,1
    8000930e:	00040717          	auipc	a4,0x40
    80009312:	d2073d23          	sd	zero,-710(a4) # 80049048 <excpt+0x38>
    80009316:	00f41023          	sh	a5,0(s0)
    8000931a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000931e:	400197b7          	lui	a5,0x40019
    80009322:	078a                	slli	a5,a5,0x2
    80009324:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80009328:	00020617          	auipc	a2,0x20
    8000932c:	b1060613          	addi	a2,a2,-1264 # 80028e38 <__func__.0+0x2278>
    80009330:	08200593          	li	a1,130
    80009334:	0001e517          	auipc	a0,0x1e
    80009338:	b8450513          	addi	a0,a0,-1148 # 80026eb8 <__func__.0+0x2f8>
    8000933c:	3c91b0ef          	jal	80024f04 <printf>
    80009340:	00040797          	auipc	a5,0x40
    80009344:	cd17c783          	lbu	a5,-815(a5) # 80049011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    80009348:	1482                	slli	s1,s1,0x20
    8000934a:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000934c:	e399                	bnez	a5,80009352 <tinst_tests_pf+0x1192>
    8000934e:	56c0106f          	j	8000a8ba <tinst_tests_pf+0x26fa>
    80009352:	6418                	ld	a4,8(s0)
    80009354:	47bd                	li	a5,15
    80009356:	0001e597          	auipc	a1,0x1e
    8000935a:	b3a58593          	addi	a1,a1,-1222 # 80026e90 <__func__.0+0x2d0>
    8000935e:	00f71463          	bne	a4,a5,80009366 <tinst_tests_pf+0x11a6>
    80009362:	50a0106f          	j	8000a86c <tinst_tests_pf+0x26ac>
    80009366:	0001e517          	auipc	a0,0x1e
    8000936a:	b6a50513          	addi	a0,a0,-1174 # 80026ed0 <__func__.0+0x310>
    8000936e:	3971b0ef          	jal	80024f04 <printf>
    80009372:	00040797          	auipc	a5,0x40
    80009376:	c9f7c783          	lbu	a5,-865(a5) # 80049011 <excpt+0x1>
    8000937a:	c799                	beqz	a5,80009388 <tinst_tests_pf+0x11c8>
    8000937c:	6418                	ld	a4,8(s0)
    8000937e:	47bd                	li	a5,15
    80009380:	00f71463          	bne	a4,a5,80009388 <tinst_tests_pf+0x11c8>
    80009384:	37f0106f          	j	8000af02 <tinst_tests_pf+0x2d42>
    80009388:	0001e517          	auipc	a0,0x1e
    8000938c:	b5050513          	addi	a0,a0,-1200 # 80026ed8 <__func__.0+0x318>
    80009390:	3751b0ef          	jal	80024f04 <printf>
    80009394:	02900513          	li	a0,41
    80009398:	1771a0ef          	jal	80023d0e <putchar>
    8000939c:	4529                	li	a0,10
    8000939e:	1711a0ef          	jal	80023d0e <putchar>
    800093a2:	00090e63          	beqz	s2,800093be <tinst_tests_pf+0x11fe>
    800093a6:	00040797          	auipc	a5,0x40
    800093aa:	c6b7c783          	lbu	a5,-917(a5) # 80049011 <excpt+0x1>
    800093ae:	c799                	beqz	a5,800093bc <tinst_tests_pf+0x11fc>
    800093b0:	6418                	ld	a4,8(s0)
    800093b2:	47bd                	li	a5,15
    800093b4:	00f71463          	bne	a4,a5,800093bc <tinst_tests_pf+0x11fc>
    800093b8:	16c0206f          	j	8000b524 <tinst_tests_pf+0x3364>
    800093bc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800093be:	0330000f          	fence	rw,rw
    800093c2:	4785                	li	a5,1
    800093c4:	00040717          	auipc	a4,0x40
    800093c8:	c8073223          	sd	zero,-892(a4) # 80049048 <excpt+0x38>
    800093cc:	00f41023          	sh	a5,0(s0)
    800093d0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    800093d4:	400197b7          	lui	a5,0x40019
    800093d8:	078a                	slli	a5,a5,0x2
    800093da:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    800093de:	00020617          	auipc	a2,0x20
    800093e2:	a9a60613          	addi	a2,a2,-1382 # 80028e78 <__func__.0+0x22b8>
    800093e6:	08200593          	li	a1,130
    800093ea:	0001e517          	auipc	a0,0x1e
    800093ee:	ace50513          	addi	a0,a0,-1330 # 80026eb8 <__func__.0+0x2f8>
    800093f2:	3131b0ef          	jal	80024f04 <printf>
    800093f6:	00040797          	auipc	a5,0x40
    800093fa:	c1b7c783          	lbu	a5,-997(a5) # 80049011 <excpt+0x1>
    800093fe:	e399                	bnez	a5,80009404 <tinst_tests_pf+0x1244>
    80009400:	5560106f          	j	8000a956 <tinst_tests_pf+0x2796>
    80009404:	6418                	ld	a4,8(s0)
    80009406:	47bd                	li	a5,15
    80009408:	0001e597          	auipc	a1,0x1e
    8000940c:	a8858593          	addi	a1,a1,-1400 # 80026e90 <__func__.0+0x2d0>
    80009410:	00f71463          	bne	a4,a5,80009418 <tinst_tests_pf+0x1258>
    80009414:	4f40106f          	j	8000a908 <tinst_tests_pf+0x2748>
    80009418:	0001e517          	auipc	a0,0x1e
    8000941c:	ab850513          	addi	a0,a0,-1352 # 80026ed0 <__func__.0+0x310>
    80009420:	2e51b0ef          	jal	80024f04 <printf>
    80009424:	00040797          	auipc	a5,0x40
    80009428:	bed7c783          	lbu	a5,-1043(a5) # 80049011 <excpt+0x1>
    8000942c:	c799                	beqz	a5,8000943a <tinst_tests_pf+0x127a>
    8000942e:	6418                	ld	a4,8(s0)
    80009430:	47bd                	li	a5,15
    80009432:	00f71463          	bne	a4,a5,8000943a <tinst_tests_pf+0x127a>
    80009436:	30f0106f          	j	8000af44 <tinst_tests_pf+0x2d84>
    8000943a:	0001e517          	auipc	a0,0x1e
    8000943e:	a9e50513          	addi	a0,a0,-1378 # 80026ed8 <__func__.0+0x318>
    80009442:	2c31b0ef          	jal	80024f04 <printf>
    80009446:	02900513          	li	a0,41
    8000944a:	0c51a0ef          	jal	80023d0e <putchar>
    8000944e:	4529                	li	a0,10
    80009450:	0bf1a0ef          	jal	80023d0e <putchar>
    80009454:	00090e63          	beqz	s2,80009470 <tinst_tests_pf+0x12b0>
    80009458:	00040797          	auipc	a5,0x40
    8000945c:	bb97c783          	lbu	a5,-1095(a5) # 80049011 <excpt+0x1>
    80009460:	c799                	beqz	a5,8000946e <tinst_tests_pf+0x12ae>
    80009462:	6418                	ld	a4,8(s0)
    80009464:	47bd                	li	a5,15
    80009466:	00f71463          	bne	a4,a5,8000946e <tinst_tests_pf+0x12ae>
    8000946a:	0fe0206f          	j	8000b568 <tinst_tests_pf+0x33a8>
    8000946e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009470:	0330000f          	fence	rw,rw
    80009474:	4785                	li	a5,1
    80009476:	00040717          	auipc	a4,0x40
    8000947a:	bc073923          	sd	zero,-1070(a4) # 80049048 <excpt+0x38>
    8000947e:	00f41023          	sh	a5,0(s0)
    80009482:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    80009486:	400197b7          	lui	a5,0x40019
    8000948a:	078a                	slli	a5,a5,0x2
    8000948c:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    80009490:	00020617          	auipc	a2,0x20
    80009494:	a2860613          	addi	a2,a2,-1496 # 80028eb8 <__func__.0+0x22f8>
    80009498:	08200593          	li	a1,130
    8000949c:	0001e517          	auipc	a0,0x1e
    800094a0:	a1c50513          	addi	a0,a0,-1508 # 80026eb8 <__func__.0+0x2f8>
    800094a4:	2611b0ef          	jal	80024f04 <printf>
    800094a8:	00040797          	auipc	a5,0x40
    800094ac:	b697c783          	lbu	a5,-1175(a5) # 80049011 <excpt+0x1>
    800094b0:	e399                	bnez	a5,800094b6 <tinst_tests_pf+0x12f6>
    800094b2:	5400106f          	j	8000a9f2 <tinst_tests_pf+0x2832>
    800094b6:	6418                	ld	a4,8(s0)
    800094b8:	47bd                	li	a5,15
    800094ba:	0001e597          	auipc	a1,0x1e
    800094be:	9d658593          	addi	a1,a1,-1578 # 80026e90 <__func__.0+0x2d0>
    800094c2:	00f71463          	bne	a4,a5,800094ca <tinst_tests_pf+0x130a>
    800094c6:	4de0106f          	j	8000a9a4 <tinst_tests_pf+0x27e4>
    800094ca:	0001e517          	auipc	a0,0x1e
    800094ce:	a0650513          	addi	a0,a0,-1530 # 80026ed0 <__func__.0+0x310>
    800094d2:	2331b0ef          	jal	80024f04 <printf>
    800094d6:	00040797          	auipc	a5,0x40
    800094da:	b3b7c783          	lbu	a5,-1221(a5) # 80049011 <excpt+0x1>
    800094de:	c799                	beqz	a5,800094ec <tinst_tests_pf+0x132c>
    800094e0:	6418                	ld	a4,8(s0)
    800094e2:	47bd                	li	a5,15
    800094e4:	00f71463          	bne	a4,a5,800094ec <tinst_tests_pf+0x132c>
    800094e8:	29f0106f          	j	8000af86 <tinst_tests_pf+0x2dc6>
    800094ec:	0001e517          	auipc	a0,0x1e
    800094f0:	9ec50513          	addi	a0,a0,-1556 # 80026ed8 <__func__.0+0x318>
    800094f4:	2111b0ef          	jal	80024f04 <printf>
    800094f8:	02900513          	li	a0,41
    800094fc:	0131a0ef          	jal	80023d0e <putchar>
    80009500:	4529                	li	a0,10
    80009502:	00d1a0ef          	jal	80023d0e <putchar>
    80009506:	00090e63          	beqz	s2,80009522 <tinst_tests_pf+0x1362>
    8000950a:	00040797          	auipc	a5,0x40
    8000950e:	b077c783          	lbu	a5,-1273(a5) # 80049011 <excpt+0x1>
    80009512:	c799                	beqz	a5,80009520 <tinst_tests_pf+0x1360>
    80009514:	6418                	ld	a4,8(s0)
    80009516:	47bd                	li	a5,15
    80009518:	00f71463          	bne	a4,a5,80009520 <tinst_tests_pf+0x1360>
    8000951c:	0900206f          	j	8000b5ac <tinst_tests_pf+0x33ec>
    80009520:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009522:	0330000f          	fence	rw,rw
    80009526:	4785                	li	a5,1
    80009528:	00040717          	auipc	a4,0x40
    8000952c:	b2073023          	sd	zero,-1248(a4) # 80049048 <excpt+0x38>
    80009530:	00f41023          	sh	a5,0(s0)
    80009534:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    80009538:	400197b7          	lui	a5,0x40019
    8000953c:	078a                	slli	a5,a5,0x2
    8000953e:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80009542:	00020617          	auipc	a2,0x20
    80009546:	9b660613          	addi	a2,a2,-1610 # 80028ef8 <__func__.0+0x2338>
    8000954a:	08200593          	li	a1,130
    8000954e:	0001e517          	auipc	a0,0x1e
    80009552:	96a50513          	addi	a0,a0,-1686 # 80026eb8 <__func__.0+0x2f8>
    80009556:	1af1b0ef          	jal	80024f04 <printf>
    8000955a:	00040797          	auipc	a5,0x40
    8000955e:	ab77c783          	lbu	a5,-1353(a5) # 80049011 <excpt+0x1>
    80009562:	e399                	bnez	a5,80009568 <tinst_tests_pf+0x13a8>
    80009564:	5140106f          	j	8000aa78 <tinst_tests_pf+0x28b8>
    80009568:	6418                	ld	a4,8(s0)
    8000956a:	47bd                	li	a5,15
    8000956c:	0001e597          	auipc	a1,0x1e
    80009570:	92458593          	addi	a1,a1,-1756 # 80026e90 <__func__.0+0x2d0>
    80009574:	00f71463          	bne	a4,a5,8000957c <tinst_tests_pf+0x13bc>
    80009578:	4b20106f          	j	8000aa2a <tinst_tests_pf+0x286a>
    8000957c:	0001e517          	auipc	a0,0x1e
    80009580:	95450513          	addi	a0,a0,-1708 # 80026ed0 <__func__.0+0x310>
    80009584:	1811b0ef          	jal	80024f04 <printf>
    80009588:	00040797          	auipc	a5,0x40
    8000958c:	a897c783          	lbu	a5,-1399(a5) # 80049011 <excpt+0x1>
    80009590:	c799                	beqz	a5,8000959e <tinst_tests_pf+0x13de>
    80009592:	6418                	ld	a4,8(s0)
    80009594:	47bd                	li	a5,15
    80009596:	00f71463          	bne	a4,a5,8000959e <tinst_tests_pf+0x13de>
    8000959a:	22f0106f          	j	8000afc8 <tinst_tests_pf+0x2e08>
    8000959e:	0001e517          	auipc	a0,0x1e
    800095a2:	93a50513          	addi	a0,a0,-1734 # 80026ed8 <__func__.0+0x318>
    800095a6:	15f1b0ef          	jal	80024f04 <printf>
    800095aa:	02900513          	li	a0,41
    800095ae:	7601a0ef          	jal	80023d0e <putchar>
    800095b2:	4529                	li	a0,10
    800095b4:	75a1a0ef          	jal	80023d0e <putchar>
    800095b8:	00090e63          	beqz	s2,800095d4 <tinst_tests_pf+0x1414>
    800095bc:	00040797          	auipc	a5,0x40
    800095c0:	a557c783          	lbu	a5,-1451(a5) # 80049011 <excpt+0x1>
    800095c4:	c799                	beqz	a5,800095d2 <tinst_tests_pf+0x1412>
    800095c6:	6418                	ld	a4,8(s0)
    800095c8:	47bd                	li	a5,15
    800095ca:	00f71463          	bne	a4,a5,800095d2 <tinst_tests_pf+0x1412>
    800095ce:	0220206f          	j	8000b5f0 <tinst_tests_pf+0x3430>
    800095d2:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800095d4:	0330000f          	fence	rw,rw
    800095d8:	4785                	li	a5,1
    800095da:	00040717          	auipc	a4,0x40
    800095de:	a6073723          	sd	zero,-1426(a4) # 80049048 <excpt+0x38>
    800095e2:	00f41023          	sh	a5,0(s0)
    800095e6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    800095ea:	400197b7          	lui	a5,0x40019
    800095ee:	078a                	slli	a5,a5,0x2
    800095f0:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    800095f4:	00020617          	auipc	a2,0x20
    800095f8:	94460613          	addi	a2,a2,-1724 # 80028f38 <__func__.0+0x2378>
    800095fc:	08200593          	li	a1,130
    80009600:	0001e517          	auipc	a0,0x1e
    80009604:	8b850513          	addi	a0,a0,-1864 # 80026eb8 <__func__.0+0x2f8>
    80009608:	0fd1b0ef          	jal	80024f04 <printf>
    8000960c:	00040797          	auipc	a5,0x40
    80009610:	a057c783          	lbu	a5,-1531(a5) # 80049011 <excpt+0x1>
    80009614:	e399                	bnez	a5,8000961a <tinst_tests_pf+0x145a>
    80009616:	4ec0106f          	j	8000ab02 <tinst_tests_pf+0x2942>
    8000961a:	6418                	ld	a4,8(s0)
    8000961c:	47bd                	li	a5,15
    8000961e:	0001e597          	auipc	a1,0x1e
    80009622:	87258593          	addi	a1,a1,-1934 # 80026e90 <__func__.0+0x2d0>
    80009626:	00f71463          	bne	a4,a5,8000962e <tinst_tests_pf+0x146e>
    8000962a:	48a0106f          	j	8000aab4 <tinst_tests_pf+0x28f4>
    8000962e:	0001e517          	auipc	a0,0x1e
    80009632:	8a250513          	addi	a0,a0,-1886 # 80026ed0 <__func__.0+0x310>
    80009636:	0cf1b0ef          	jal	80024f04 <printf>
    8000963a:	00040797          	auipc	a5,0x40
    8000963e:	9d77c783          	lbu	a5,-1577(a5) # 80049011 <excpt+0x1>
    80009642:	c799                	beqz	a5,80009650 <tinst_tests_pf+0x1490>
    80009644:	6418                	ld	a4,8(s0)
    80009646:	47bd                	li	a5,15
    80009648:	00f71463          	bne	a4,a5,80009650 <tinst_tests_pf+0x1490>
    8000964c:	02c0206f          	j	8000b678 <tinst_tests_pf+0x34b8>
    80009650:	0001e517          	auipc	a0,0x1e
    80009654:	88850513          	addi	a0,a0,-1912 # 80026ed8 <__func__.0+0x318>
    80009658:	0ad1b0ef          	jal	80024f04 <printf>
    8000965c:	02900513          	li	a0,41
    80009660:	6ae1a0ef          	jal	80023d0e <putchar>
    80009664:	4529                	li	a0,10
    80009666:	6a81a0ef          	jal	80023d0e <putchar>
    8000966a:	00090e63          	beqz	s2,80009686 <tinst_tests_pf+0x14c6>
    8000966e:	00040797          	auipc	a5,0x40
    80009672:	9a37c783          	lbu	a5,-1629(a5) # 80049011 <excpt+0x1>
    80009676:	c799                	beqz	a5,80009684 <tinst_tests_pf+0x14c4>
    80009678:	6418                	ld	a4,8(s0)
    8000967a:	47bd                	li	a5,15
    8000967c:	00f71463          	bne	a4,a5,80009684 <tinst_tests_pf+0x14c4>
    80009680:	7b50106f          	j	8000b634 <tinst_tests_pf+0x3474>
    80009684:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009686:	0330000f          	fence	rw,rw
    8000968a:	4785                	li	a5,1
    8000968c:	00040717          	auipc	a4,0x40
    80009690:	9a073e23          	sd	zero,-1604(a4) # 80049048 <excpt+0x38>
    80009694:	00f41023          	sh	a5,0(s0)
    80009698:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000969c:	400197b7          	lui	a5,0x40019
    800096a0:	078a                	slli	a5,a5,0x2
    800096a2:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    800096a6:	00020617          	auipc	a2,0x20
    800096aa:	8d260613          	addi	a2,a2,-1838 # 80028f78 <__func__.0+0x23b8>
    800096ae:	08200593          	li	a1,130
    800096b2:	0001e517          	auipc	a0,0x1e
    800096b6:	80650513          	addi	a0,a0,-2042 # 80026eb8 <__func__.0+0x2f8>
    800096ba:	04b1b0ef          	jal	80024f04 <printf>
    800096be:	00040797          	auipc	a5,0x40
    800096c2:	9537c783          	lbu	a5,-1709(a5) # 80049011 <excpt+0x1>
    800096c6:	e399                	bnez	a5,800096cc <tinst_tests_pf+0x150c>
    800096c8:	4c80106f          	j	8000ab90 <tinst_tests_pf+0x29d0>
    800096cc:	6418                	ld	a4,8(s0)
    800096ce:	47bd                	li	a5,15
    800096d0:	0001d597          	auipc	a1,0x1d
    800096d4:	7c058593          	addi	a1,a1,1984 # 80026e90 <__func__.0+0x2d0>
    800096d8:	00f71463          	bne	a4,a5,800096e0 <tinst_tests_pf+0x1520>
    800096dc:	4660106f          	j	8000ab42 <tinst_tests_pf+0x2982>
    800096e0:	0001d517          	auipc	a0,0x1d
    800096e4:	7f050513          	addi	a0,a0,2032 # 80026ed0 <__func__.0+0x310>
    800096e8:	01d1b0ef          	jal	80024f04 <printf>
    800096ec:	00040797          	auipc	a5,0x40
    800096f0:	9257c783          	lbu	a5,-1755(a5) # 80049011 <excpt+0x1>
    800096f4:	c799                	beqz	a5,80009702 <tinst_tests_pf+0x1542>
    800096f6:	6418                	ld	a4,8(s0)
    800096f8:	47bd                	li	a5,15
    800096fa:	00f71463          	bne	a4,a5,80009702 <tinst_tests_pf+0x1542>
    800096fe:	7bf0106f          	j	8000b6bc <tinst_tests_pf+0x34fc>
    80009702:	0001d517          	auipc	a0,0x1d
    80009706:	7d650513          	addi	a0,a0,2006 # 80026ed8 <__func__.0+0x318>
    8000970a:	7fa1b0ef          	jal	80024f04 <printf>
    8000970e:	02900513          	li	a0,41
    80009712:	5fc1a0ef          	jal	80023d0e <putchar>
    80009716:	4529                	li	a0,10
    80009718:	5f61a0ef          	jal	80023d0e <putchar>
    8000971c:	00090a63          	beqz	s2,80009730 <tinst_tests_pf+0x1570>
    80009720:	00040797          	auipc	a5,0x40
    80009724:	8f17c783          	lbu	a5,-1807(a5) # 80049011 <excpt+0x1>
    80009728:	c399                	beqz	a5,8000972e <tinst_tests_pf+0x156e>
    8000972a:	0e10106f          	j	8000b00a <tinst_tests_pf+0x2e4a>
    8000972e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009730:	0330000f          	fence	rw,rw
    80009734:	4785                	li	a5,1
    80009736:	00040717          	auipc	a4,0x40
    8000973a:	90073923          	sd	zero,-1774(a4) # 80049048 <excpt+0x38>
    8000973e:	00f41023          	sh	a5,0(s0)
    80009742:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80009746:	400197b7          	lui	a5,0x40019
    8000974a:	078a                	slli	a5,a5,0x2
    8000974c:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    80009750:	00020617          	auipc	a2,0x20
    80009754:	86860613          	addi	a2,a2,-1944 # 80028fb8 <__func__.0+0x23f8>
    80009758:	08200593          	li	a1,130
    8000975c:	0001d517          	auipc	a0,0x1d
    80009760:	75c50513          	addi	a0,a0,1884 # 80026eb8 <__func__.0+0x2f8>
    80009764:	7a01b0ef          	jal	80024f04 <printf>
    80009768:	00040797          	auipc	a5,0x40
    8000976c:	8a97c783          	lbu	a5,-1879(a5) # 80049011 <excpt+0x1>
    80009770:	e399                	bnez	a5,80009776 <tinst_tests_pf+0x15b6>
    80009772:	4a80106f          	j	8000ac1a <tinst_tests_pf+0x2a5a>
    80009776:	6418                	ld	a4,8(s0)
    80009778:	47bd                	li	a5,15
    8000977a:	0001d597          	auipc	a1,0x1d
    8000977e:	71658593          	addi	a1,a1,1814 # 80026e90 <__func__.0+0x2d0>
    80009782:	00f71463          	bne	a4,a5,8000978a <tinst_tests_pf+0x15ca>
    80009786:	4460106f          	j	8000abcc <tinst_tests_pf+0x2a0c>
    8000978a:	0001d517          	auipc	a0,0x1d
    8000978e:	74650513          	addi	a0,a0,1862 # 80026ed0 <__func__.0+0x310>
    80009792:	7721b0ef          	jal	80024f04 <printf>
    80009796:	00040797          	auipc	a5,0x40
    8000979a:	87b7c783          	lbu	a5,-1925(a5) # 80049011 <excpt+0x1>
    8000979e:	c799                	beqz	a5,800097ac <tinst_tests_pf+0x15ec>
    800097a0:	6418                	ld	a4,8(s0)
    800097a2:	47bd                	li	a5,15
    800097a4:	00f71463          	bne	a4,a5,800097ac <tinst_tests_pf+0x15ec>
    800097a8:	7590106f          	j	8000b700 <tinst_tests_pf+0x3540>
    800097ac:	0001d517          	auipc	a0,0x1d
    800097b0:	72c50513          	addi	a0,a0,1836 # 80026ed8 <__func__.0+0x318>
    800097b4:	7501b0ef          	jal	80024f04 <printf>
    800097b8:	02900513          	li	a0,41
    800097bc:	5521a0ef          	jal	80023d0e <putchar>
    800097c0:	4529                	li	a0,10
    800097c2:	54c1a0ef          	jal	80023d0e <putchar>
    800097c6:	00090a63          	beqz	s2,800097da <tinst_tests_pf+0x161a>
    800097ca:	00040797          	auipc	a5,0x40
    800097ce:	8477c783          	lbu	a5,-1977(a5) # 80049011 <excpt+0x1>
    800097d2:	c399                	beqz	a5,800097d8 <tinst_tests_pf+0x1618>
    800097d4:	0850106f          	j	8000b058 <tinst_tests_pf+0x2e98>
    800097d8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800097da:	0330000f          	fence	rw,rw
    800097de:	4785                	li	a5,1
    800097e0:	00040717          	auipc	a4,0x40
    800097e4:	86073423          	sd	zero,-1944(a4) # 80049048 <excpt+0x38>
    800097e8:	00f41023          	sh	a5,0(s0)
    800097ec:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800097f0:	400197b7          	lui	a5,0x40019
    800097f4:	078a                	slli	a5,a5,0x2
    800097f6:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    800097fa:	0001f617          	auipc	a2,0x1f
    800097fe:	7fe60613          	addi	a2,a2,2046 # 80028ff8 <__func__.0+0x2438>
    80009802:	08200593          	li	a1,130
    80009806:	0001d517          	auipc	a0,0x1d
    8000980a:	6b250513          	addi	a0,a0,1714 # 80026eb8 <__func__.0+0x2f8>
    8000980e:	6f61b0ef          	jal	80024f04 <printf>
    80009812:	0003f797          	auipc	a5,0x3f
    80009816:	7ff7c783          	lbu	a5,2047(a5) # 80049011 <excpt+0x1>
    8000981a:	e399                	bnez	a5,80009820 <tinst_tests_pf+0x1660>
    8000981c:	4580106f          	j	8000ac74 <tinst_tests_pf+0x2ab4>
    80009820:	6418                	ld	a4,8(s0)
    80009822:	47bd                	li	a5,15
    80009824:	0001d597          	auipc	a1,0x1d
    80009828:	66c58593          	addi	a1,a1,1644 # 80026e90 <__func__.0+0x2d0>
    8000982c:	00f71463          	bne	a4,a5,80009834 <tinst_tests_pf+0x1674>
    80009830:	3f60106f          	j	8000ac26 <tinst_tests_pf+0x2a66>
    80009834:	0001d517          	auipc	a0,0x1d
    80009838:	69c50513          	addi	a0,a0,1692 # 80026ed0 <__func__.0+0x310>
    8000983c:	6c81b0ef          	jal	80024f04 <printf>
    80009840:	0003f797          	auipc	a5,0x3f
    80009844:	7d17c783          	lbu	a5,2001(a5) # 80049011 <excpt+0x1>
    80009848:	c799                	beqz	a5,80009856 <tinst_tests_pf+0x1696>
    8000984a:	6418                	ld	a4,8(s0)
    8000984c:	47bd                	li	a5,15
    8000984e:	00f71463          	bne	a4,a5,80009856 <tinst_tests_pf+0x1696>
    80009852:	6f30106f          	j	8000b744 <tinst_tests_pf+0x3584>
    80009856:	0001d517          	auipc	a0,0x1d
    8000985a:	68250513          	addi	a0,a0,1666 # 80026ed8 <__func__.0+0x318>
    8000985e:	6a61b0ef          	jal	80024f04 <printf>
    80009862:	02900513          	li	a0,41
    80009866:	4a81a0ef          	jal	80023d0e <putchar>
    8000986a:	4529                	li	a0,10
    8000986c:	4a21a0ef          	jal	80023d0e <putchar>
    80009870:	00090a63          	beqz	s2,80009884 <tinst_tests_pf+0x16c4>
    80009874:	0003f797          	auipc	a5,0x3f
    80009878:	79d7c783          	lbu	a5,1949(a5) # 80049011 <excpt+0x1>
    8000987c:	c399                	beqz	a5,80009882 <tinst_tests_pf+0x16c2>
    8000987e:	0530106f          	j	8000b0d0 <tinst_tests_pf+0x2f10>
    80009882:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009884:	0330000f          	fence	rw,rw
    80009888:	4785                	li	a5,1
    8000988a:	0003f717          	auipc	a4,0x3f
    8000988e:	7a073f23          	sd	zero,1982(a4) # 80049048 <excpt+0x38>
    80009892:	00f41023          	sh	a5,0(s0)
    80009896:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000989a:	400197b7          	lui	a5,0x40019
    8000989e:	078a                	slli	a5,a5,0x2
    800098a0:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    800098a4:	0001f617          	auipc	a2,0x1f
    800098a8:	79460613          	addi	a2,a2,1940 # 80029038 <__func__.0+0x2478>
    800098ac:	08200593          	li	a1,130
    800098b0:	0001d517          	auipc	a0,0x1d
    800098b4:	60850513          	addi	a0,a0,1544 # 80026eb8 <__func__.0+0x2f8>
    800098b8:	64c1b0ef          	jal	80024f04 <printf>
    800098bc:	0003f797          	auipc	a5,0x3f
    800098c0:	7557c783          	lbu	a5,1877(a5) # 80049011 <excpt+0x1>
    800098c4:	e399                	bnez	a5,800098ca <tinst_tests_pf+0x170a>
    800098c6:	4080106f          	j	8000acce <tinst_tests_pf+0x2b0e>
    800098ca:	6418                	ld	a4,8(s0)
    800098cc:	47bd                	li	a5,15
    800098ce:	0001d597          	auipc	a1,0x1d
    800098d2:	5c258593          	addi	a1,a1,1474 # 80026e90 <__func__.0+0x2d0>
    800098d6:	00f71463          	bne	a4,a5,800098de <tinst_tests_pf+0x171e>
    800098da:	3a60106f          	j	8000ac80 <tinst_tests_pf+0x2ac0>
    800098de:	0001d517          	auipc	a0,0x1d
    800098e2:	5f250513          	addi	a0,a0,1522 # 80026ed0 <__func__.0+0x310>
    800098e6:	61e1b0ef          	jal	80024f04 <printf>
    800098ea:	0003f797          	auipc	a5,0x3f
    800098ee:	7277c783          	lbu	a5,1831(a5) # 80049011 <excpt+0x1>
    800098f2:	c799                	beqz	a5,80009900 <tinst_tests_pf+0x1740>
    800098f4:	6418                	ld	a4,8(s0)
    800098f6:	47bd                	li	a5,15
    800098f8:	00f71463          	bne	a4,a5,80009900 <tinst_tests_pf+0x1740>
    800098fc:	68d0106f          	j	8000b788 <tinst_tests_pf+0x35c8>
    80009900:	0001d517          	auipc	a0,0x1d
    80009904:	5d850513          	addi	a0,a0,1496 # 80026ed8 <__func__.0+0x318>
    80009908:	5fc1b0ef          	jal	80024f04 <printf>
    8000990c:	02900513          	li	a0,41
    80009910:	3fe1a0ef          	jal	80023d0e <putchar>
    80009914:	4529                	li	a0,10
    80009916:	3f81a0ef          	jal	80023d0e <putchar>
    8000991a:	00090a63          	beqz	s2,8000992e <tinst_tests_pf+0x176e>
    8000991e:	0003f797          	auipc	a5,0x3f
    80009922:	6f37c783          	lbu	a5,1779(a5) # 80049011 <excpt+0x1>
    80009926:	c399                	beqz	a5,8000992c <tinst_tests_pf+0x176c>
    80009928:	7f60106f          	j	8000b11e <tinst_tests_pf+0x2f5e>
    8000992c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000992e:	0330000f          	fence	rw,rw
    80009932:	4785                	li	a5,1
    80009934:	0003f717          	auipc	a4,0x3f
    80009938:	70073a23          	sd	zero,1812(a4) # 80049048 <excpt+0x38>
    8000993c:	00f41023          	sh	a5,0(s0)
    80009940:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    80009944:	400197b7          	lui	a5,0x40019
    80009948:	078a                	slli	a5,a5,0x2
    8000994a:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000994e:	0001f617          	auipc	a2,0x1f
    80009952:	72a60613          	addi	a2,a2,1834 # 80029078 <__func__.0+0x24b8>
    80009956:	08200593          	li	a1,130
    8000995a:	0001d517          	auipc	a0,0x1d
    8000995e:	55e50513          	addi	a0,a0,1374 # 80026eb8 <__func__.0+0x2f8>
    80009962:	5a21b0ef          	jal	80024f04 <printf>
    80009966:	0003f797          	auipc	a5,0x3f
    8000996a:	6ab7c783          	lbu	a5,1707(a5) # 80049011 <excpt+0x1>
    8000996e:	e399                	bnez	a5,80009974 <tinst_tests_pf+0x17b4>
    80009970:	3b80106f          	j	8000ad28 <tinst_tests_pf+0x2b68>
    80009974:	6418                	ld	a4,8(s0)
    80009976:	47bd                	li	a5,15
    80009978:	0001d597          	auipc	a1,0x1d
    8000997c:	51858593          	addi	a1,a1,1304 # 80026e90 <__func__.0+0x2d0>
    80009980:	00f71463          	bne	a4,a5,80009988 <tinst_tests_pf+0x17c8>
    80009984:	3560106f          	j	8000acda <tinst_tests_pf+0x2b1a>
    80009988:	0001d517          	auipc	a0,0x1d
    8000998c:	54850513          	addi	a0,a0,1352 # 80026ed0 <__func__.0+0x310>
    80009990:	5741b0ef          	jal	80024f04 <printf>
    80009994:	0003f797          	auipc	a5,0x3f
    80009998:	67d7c783          	lbu	a5,1661(a5) # 80049011 <excpt+0x1>
    8000999c:	c799                	beqz	a5,800099aa <tinst_tests_pf+0x17ea>
    8000999e:	6418                	ld	a4,8(s0)
    800099a0:	47bd                	li	a5,15
    800099a2:	00f71463          	bne	a4,a5,800099aa <tinst_tests_pf+0x17ea>
    800099a6:	6270106f          	j	8000b7cc <tinst_tests_pf+0x360c>
    800099aa:	0001d517          	auipc	a0,0x1d
    800099ae:	52e50513          	addi	a0,a0,1326 # 80026ed8 <__func__.0+0x318>
    800099b2:	5521b0ef          	jal	80024f04 <printf>
    800099b6:	02900513          	li	a0,41
    800099ba:	3541a0ef          	jal	80023d0e <putchar>
    800099be:	4529                	li	a0,10
    800099c0:	34e1a0ef          	jal	80023d0e <putchar>
    800099c4:	04090e63          	beqz	s2,80009a20 <tinst_tests_pf+0x1860>
    800099c8:	0003f497          	auipc	s1,0x3f
    800099cc:	6494c483          	lbu	s1,1609(s1) # 80049011 <excpt+0x1>
    800099d0:	c8a9                	beqz	s1,80009a22 <tinst_tests_pf+0x1862>
    800099d2:	6418                	ld	a4,8(s0)
    800099d4:	47bd                	li	a5,15
    800099d6:	04f71563          	bne	a4,a5,80009a20 <tinst_tests_pf+0x1860>
    800099da:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    800099dc:	0001d597          	auipc	a1,0x1d
    800099e0:	4a458593          	addi	a1,a1,1188 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    800099e4:	c3b9                	beqz	a5,80009a2a <tinst_tests_pf+0x186a>
    800099e6:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    800099e8:	0016f713          	andi	a4,a3,1
    800099ec:	2c0710e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    800099f0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099f4:	460d                	li	a2,3
    800099f6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099fa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099fc:	00c59763          	bne	a1,a2,80009a0a <tinst_tests_pf+0x184a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a00:	0026d683          	lhu	a3,2(a3)
    80009a04:	0106969b          	slliw	a3,a3,0x10
    80009a08:	8f55                	or	a4,a4,a3
    80009a0a:	1ffe16b7          	lui	a3,0x1ffe1
    80009a0e:	068e                	slli	a3,a3,0x3
    80009a10:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009a12:	8f75                	and	a4,a4,a3
    TEST_END();
    80009a14:	0001d597          	auipc	a1,0x1d
    80009a18:	46c58593          	addi	a1,a1,1132 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009a1c:	00e78763          	beq	a5,a4,80009a2a <tinst_tests_pf+0x186a>
    80009a20:	4481                	li	s1,0
    TEST_END();
    80009a22:	0001d597          	auipc	a1,0x1d
    80009a26:	46e58593          	addi	a1,a1,1134 # 80026e90 <__func__.0+0x2d0>
    80009a2a:	0001d517          	auipc	a0,0x1d
    80009a2e:	50e50513          	addi	a0,a0,1294 # 80026f38 <__func__.0+0x378>
    80009a32:	4d21b0ef          	jal	80024f04 <printf>
    80009a36:	4511                	li	a0,4
    80009a38:	9bef70ef          	jal	80000bf6 <goto_priv>
    80009a3c:	a71f70ef          	jal	800014ac <reset_state>
}
    80009a40:	70a2                	ld	ra,40(sp)
    80009a42:	7402                	ld	s0,32(sp)
    80009a44:	6942                	ld	s2,16(sp)
    80009a46:	69a2                	ld	s3,8(sp)
    80009a48:	8526                	mv	a0,s1
    80009a4a:	64e2                	ld	s1,24(sp)
    80009a4c:	6145                	addi	sp,sp,48
    80009a4e:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80009a50:	701c                	ld	a5,32(s0)
    80009a52:	0001d597          	auipc	a1,0x1d
    80009a56:	42e58593          	addi	a1,a1,1070 # 80026e80 <__func__.0+0x2c0>
    80009a5a:	e399                	bnez	a5,80009a60 <tinst_tests_pf+0x18a0>
    80009a5c:	ff6fe06f          	j	80008252 <tinst_tests_pf+0x92>
    80009a60:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a62:	0016f713          	andi	a4,a3,1
    80009a66:	240713e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009a6a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a6e:	460d                	li	a2,3
    80009a70:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a74:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a76:	00c59763          	bne	a1,a2,80009a84 <tinst_tests_pf+0x18c4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a7a:	0026d683          	lhu	a3,2(a3)
    80009a7e:	0106969b          	slliw	a3,a3,0x10
    80009a82:	8f55                	or	a4,a4,a3
    80009a84:	1746                	slli	a4,a4,0x31
    80009a86:	9345                	srli	a4,a4,0x31
    80009a88:	0001d597          	auipc	a1,0x1d
    80009a8c:	3f858593          	addi	a1,a1,1016 # 80026e80 <__func__.0+0x2c0>
    80009a90:	00e79463          	bne	a5,a4,80009a98 <tinst_tests_pf+0x18d8>
    80009a94:	fbefe06f          	j	80008252 <tinst_tests_pf+0x92>
    80009a98:	0001d597          	auipc	a1,0x1d
    80009a9c:	3f858593          	addi	a1,a1,1016 # 80026e90 <__func__.0+0x2d0>
    80009aa0:	fb2fe06f          	j	80008252 <tinst_tests_pf+0x92>
    80009aa4:	6418                	ld	a4,8(s0)
    80009aa6:	47b5                	li	a5,13
    80009aa8:	4901                	li	s2,0
    80009aaa:	00f70463          	beq	a4,a5,80009ab2 <tinst_tests_pf+0x18f2>
    80009aae:	ff0fe06f          	j	8000829e <tinst_tests_pf+0xde>
    80009ab2:	7018                	ld	a4,32(s0)
    80009ab4:	4905                	li	s2,1
    80009ab6:	e319                	bnez	a4,80009abc <tinst_tests_pf+0x18fc>
    80009ab8:	fe6fe06f          	j	8000829e <tinst_tests_pf+0xde>
    80009abc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009abe:	0126f7b3          	and	a5,a3,s2
    80009ac2:	1e0795e3          	bnez	a5,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009ac6:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009aca:	460d                	li	a2,3
    80009acc:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009ad0:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009ad2:	00c59763          	bne	a1,a2,80009ae0 <tinst_tests_pf+0x1920>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ad6:	0026d683          	lhu	a3,2(a3)
    80009ada:	0106969b          	slliw	a3,a3,0x10
    80009ade:	8fd5                	or	a5,a5,a3
    80009ae0:	03179913          	slli	s2,a5,0x31
    80009ae4:	03195913          	srli	s2,s2,0x31
    80009ae8:	40e90933          	sub	s2,s2,a4
    80009aec:	00193913          	seqz	s2,s2
    80009af0:	faefe06f          	j	8000829e <tinst_tests_pf+0xde>
    80009af4:	701c                	ld	a5,32(s0)
    80009af6:	e399                	bnez	a5,80009afc <tinst_tests_pf+0x193c>
    80009af8:	f90fe06f          	j	80008288 <tinst_tests_pf+0xc8>
    80009afc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009afe:	0016f713          	andi	a4,a3,1
    80009b02:	1a0715e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009b06:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b0a:	460d                	li	a2,3
    80009b0c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b10:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b12:	00c59763          	bne	a1,a2,80009b20 <tinst_tests_pf+0x1960>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b16:	0026d683          	lhu	a3,2(a3)
    80009b1a:	0106969b          	slliw	a3,a3,0x10
    80009b1e:	8f55                	or	a4,a4,a3
    80009b20:	1746                	slli	a4,a4,0x31
    80009b22:	9345                	srli	a4,a4,0x31
    80009b24:	00e78463          	beq	a5,a4,80009b2c <tinst_tests_pf+0x196c>
    80009b28:	f4cfe06f          	j	80008274 <tinst_tests_pf+0xb4>
    80009b2c:	f5cfe06f          	j	80008288 <tinst_tests_pf+0xc8>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009b30:	701c                	ld	a5,32(s0)
    80009b32:	0001d597          	auipc	a1,0x1d
    80009b36:	34e58593          	addi	a1,a1,846 # 80026e80 <__func__.0+0x2c0>
    80009b3a:	e399                	bnez	a5,80009b40 <tinst_tests_pf+0x1980>
    80009b3c:	fbcfe06f          	j	800082f8 <tinst_tests_pf+0x138>
    80009b40:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b42:	0016f713          	andi	a4,a3,1
    80009b46:	160713e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009b4a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b4e:	460d                	li	a2,3
    80009b50:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b54:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b56:	00c59763          	bne	a1,a2,80009b64 <tinst_tests_pf+0x19a4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b5a:	0026d683          	lhu	a3,2(a3)
    80009b5e:	0106969b          	slliw	a3,a3,0x10
    80009b62:	8f55                	or	a4,a4,a3
    80009b64:	1746                	slli	a4,a4,0x31
    80009b66:	9345                	srli	a4,a4,0x31
    80009b68:	0001d597          	auipc	a1,0x1d
    80009b6c:	31858593          	addi	a1,a1,792 # 80026e80 <__func__.0+0x2c0>
    80009b70:	00e79463          	bne	a5,a4,80009b78 <tinst_tests_pf+0x19b8>
    80009b74:	f84fe06f          	j	800082f8 <tinst_tests_pf+0x138>
    80009b78:	0001d597          	auipc	a1,0x1d
    80009b7c:	31858593          	addi	a1,a1,792 # 80026e90 <__func__.0+0x2d0>
    80009b80:	f78fe06f          	j	800082f8 <tinst_tests_pf+0x138>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009b84:	701c                	ld	a5,32(s0)
    80009b86:	0001d597          	auipc	a1,0x1d
    80009b8a:	2fa58593          	addi	a1,a1,762 # 80026e80 <__func__.0+0x2c0>
    80009b8e:	e399                	bnez	a5,80009b94 <tinst_tests_pf+0x19d4>
    80009b90:	81bfe06f          	j	800083aa <tinst_tests_pf+0x1ea>
    80009b94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b96:	0016f713          	andi	a4,a3,1
    80009b9a:	100719e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009b9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ba2:	460d                	li	a2,3
    80009ba4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ba8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009baa:	00c59763          	bne	a1,a2,80009bb8 <tinst_tests_pf+0x19f8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009bae:	0026d683          	lhu	a3,2(a3)
    80009bb2:	0106969b          	slliw	a3,a3,0x10
    80009bb6:	8f55                	or	a4,a4,a3
    80009bb8:	1746                	slli	a4,a4,0x31
    80009bba:	9345                	srli	a4,a4,0x31
    80009bbc:	0001d597          	auipc	a1,0x1d
    80009bc0:	2c458593          	addi	a1,a1,708 # 80026e80 <__func__.0+0x2c0>
    80009bc4:	00e79463          	bne	a5,a4,80009bcc <tinst_tests_pf+0x1a0c>
    80009bc8:	fe2fe06f          	j	800083aa <tinst_tests_pf+0x1ea>
    80009bcc:	0001d597          	auipc	a1,0x1d
    80009bd0:	2c458593          	addi	a1,a1,708 # 80026e90 <__func__.0+0x2d0>
    80009bd4:	fd6fe06f          	j	800083aa <tinst_tests_pf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009bd8:	701c                	ld	a5,32(s0)
    80009bda:	0001d597          	auipc	a1,0x1d
    80009bde:	2a658593          	addi	a1,a1,678 # 80026e80 <__func__.0+0x2c0>
    80009be2:	e399                	bnez	a5,80009be8 <tinst_tests_pf+0x1a28>
    80009be4:	879fe06f          	j	8000845c <tinst_tests_pf+0x29c>
    80009be8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009bea:	0016f713          	andi	a4,a3,1
    80009bee:	0a071fe3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009bf2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009bf6:	460d                	li	a2,3
    80009bf8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009bfc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009bfe:	00c59763          	bne	a1,a2,80009c0c <tinst_tests_pf+0x1a4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c02:	0026d683          	lhu	a3,2(a3)
    80009c06:	0106969b          	slliw	a3,a3,0x10
    80009c0a:	8f55                	or	a4,a4,a3
    80009c0c:	1746                	slli	a4,a4,0x31
    80009c0e:	9345                	srli	a4,a4,0x31
    80009c10:	0001d597          	auipc	a1,0x1d
    80009c14:	27058593          	addi	a1,a1,624 # 80026e80 <__func__.0+0x2c0>
    80009c18:	00e79463          	bne	a5,a4,80009c20 <tinst_tests_pf+0x1a60>
    80009c1c:	841fe06f          	j	8000845c <tinst_tests_pf+0x29c>
    80009c20:	0001d597          	auipc	a1,0x1d
    80009c24:	27058593          	addi	a1,a1,624 # 80026e90 <__func__.0+0x2d0>
    80009c28:	835fe06f          	j	8000845c <tinst_tests_pf+0x29c>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009c2c:	701c                	ld	a5,32(s0)
    80009c2e:	0001d597          	auipc	a1,0x1d
    80009c32:	25258593          	addi	a1,a1,594 # 80026e80 <__func__.0+0x2c0>
    80009c36:	e399                	bnez	a5,80009c3c <tinst_tests_pf+0x1a7c>
    80009c38:	8d7fe06f          	j	8000850e <tinst_tests_pf+0x34e>
    80009c3c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c3e:	0016f713          	andi	a4,a3,1
    80009c42:	060715e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009c46:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c4a:	460d                	li	a2,3
    80009c4c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c50:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c52:	00c59763          	bne	a1,a2,80009c60 <tinst_tests_pf+0x1aa0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c56:	0026d683          	lhu	a3,2(a3)
    80009c5a:	0106969b          	slliw	a3,a3,0x10
    80009c5e:	8f55                	or	a4,a4,a3
    80009c60:	1746                	slli	a4,a4,0x31
    80009c62:	9345                	srli	a4,a4,0x31
    80009c64:	0001d597          	auipc	a1,0x1d
    80009c68:	21c58593          	addi	a1,a1,540 # 80026e80 <__func__.0+0x2c0>
    80009c6c:	00e79463          	bne	a5,a4,80009c74 <tinst_tests_pf+0x1ab4>
    80009c70:	89ffe06f          	j	8000850e <tinst_tests_pf+0x34e>
    80009c74:	0001d597          	auipc	a1,0x1d
    80009c78:	21c58593          	addi	a1,a1,540 # 80026e90 <__func__.0+0x2d0>
    80009c7c:	893fe06f          	j	8000850e <tinst_tests_pf+0x34e>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009c80:	701c                	ld	a5,32(s0)
    80009c82:	0001d597          	auipc	a1,0x1d
    80009c86:	1fe58593          	addi	a1,a1,510 # 80026e80 <__func__.0+0x2c0>
    80009c8a:	e399                	bnez	a5,80009c90 <tinst_tests_pf+0x1ad0>
    80009c8c:	92dfe06f          	j	800085b8 <tinst_tests_pf+0x3f8>
    80009c90:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c92:	0016f713          	andi	a4,a3,1
    80009c96:	00071be3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009c9a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c9e:	460d                	li	a2,3
    80009ca0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ca4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ca6:	00c59763          	bne	a1,a2,80009cb4 <tinst_tests_pf+0x1af4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009caa:	0026d683          	lhu	a3,2(a3)
    80009cae:	0106969b          	slliw	a3,a3,0x10
    80009cb2:	8f55                	or	a4,a4,a3
    80009cb4:	1746                	slli	a4,a4,0x31
    80009cb6:	9345                	srli	a4,a4,0x31
    80009cb8:	0001d597          	auipc	a1,0x1d
    80009cbc:	1c858593          	addi	a1,a1,456 # 80026e80 <__func__.0+0x2c0>
    80009cc0:	00e79463          	bne	a5,a4,80009cc8 <tinst_tests_pf+0x1b08>
    80009cc4:	8f5fe06f          	j	800085b8 <tinst_tests_pf+0x3f8>
    80009cc8:	0001d597          	auipc	a1,0x1d
    80009ccc:	1c858593          	addi	a1,a1,456 # 80026e90 <__func__.0+0x2d0>
    80009cd0:	8e9fe06f          	j	800085b8 <tinst_tests_pf+0x3f8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009cd4:	701c                	ld	a5,32(s0)
    80009cd6:	0001d597          	auipc	a1,0x1d
    80009cda:	1aa58593          	addi	a1,a1,426 # 80026e80 <__func__.0+0x2c0>
    80009cde:	e399                	bnez	a5,80009ce4 <tinst_tests_pf+0x1b24>
    80009ce0:	983fe06f          	j	80008662 <tinst_tests_pf+0x4a2>
    80009ce4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ce6:	0016f713          	andi	a4,a3,1
    80009cea:	7c071163          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009cee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cf2:	460d                	li	a2,3
    80009cf4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009cf8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009cfa:	00c59763          	bne	a1,a2,80009d08 <tinst_tests_pf+0x1b48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009cfe:	0026d683          	lhu	a3,2(a3)
    80009d02:	0106969b          	slliw	a3,a3,0x10
    80009d06:	8f55                	or	a4,a4,a3
    80009d08:	1746                	slli	a4,a4,0x31
    80009d0a:	9345                	srli	a4,a4,0x31
    80009d0c:	0001d597          	auipc	a1,0x1d
    80009d10:	17458593          	addi	a1,a1,372 # 80026e80 <__func__.0+0x2c0>
    80009d14:	00e79463          	bne	a5,a4,80009d1c <tinst_tests_pf+0x1b5c>
    80009d18:	94bfe06f          	j	80008662 <tinst_tests_pf+0x4a2>
    80009d1c:	0001d597          	auipc	a1,0x1d
    80009d20:	17458593          	addi	a1,a1,372 # 80026e90 <__func__.0+0x2d0>
    80009d24:	93ffe06f          	j	80008662 <tinst_tests_pf+0x4a2>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009d28:	701c                	ld	a5,32(s0)
    80009d2a:	0001d597          	auipc	a1,0x1d
    80009d2e:	15658593          	addi	a1,a1,342 # 80026e80 <__func__.0+0x2c0>
    80009d32:	e399                	bnez	a5,80009d38 <tinst_tests_pf+0x1b78>
    80009d34:	9dbfe06f          	j	8000870e <tinst_tests_pf+0x54e>
    80009d38:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d3a:	0016f713          	andi	a4,a3,1
    80009d3e:	76071763          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009d42:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d46:	460d                	li	a2,3
    80009d48:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d4c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d4e:	00c59763          	bne	a1,a2,80009d5c <tinst_tests_pf+0x1b9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d52:	0026d683          	lhu	a3,2(a3)
    80009d56:	0106969b          	slliw	a3,a3,0x10
    80009d5a:	8f55                	or	a4,a4,a3
    80009d5c:	01f076b7          	lui	a3,0x1f07
    80009d60:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009d64:	8f75                	and	a4,a4,a3
    80009d66:	0001d597          	auipc	a1,0x1d
    80009d6a:	11a58593          	addi	a1,a1,282 # 80026e80 <__func__.0+0x2c0>
    80009d6e:	00e79463          	bne	a5,a4,80009d76 <tinst_tests_pf+0x1bb6>
    80009d72:	99dfe06f          	j	8000870e <tinst_tests_pf+0x54e>
    80009d76:	0001d597          	auipc	a1,0x1d
    80009d7a:	11a58593          	addi	a1,a1,282 # 80026e90 <__func__.0+0x2d0>
    80009d7e:	991fe06f          	j	8000870e <tinst_tests_pf+0x54e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009d82:	701c                	ld	a5,32(s0)
    80009d84:	0001d597          	auipc	a1,0x1d
    80009d88:	0fc58593          	addi	a1,a1,252 # 80026e80 <__func__.0+0x2c0>
    80009d8c:	e399                	bnez	a5,80009d92 <tinst_tests_pf+0x1bd2>
    80009d8e:	a31fe06f          	j	800087be <tinst_tests_pf+0x5fe>
    80009d92:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d94:	0016f713          	andi	a4,a3,1
    80009d98:	70071a63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009d9c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009da0:	460d                	li	a2,3
    80009da2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009da6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009da8:	00c59763          	bne	a1,a2,80009db6 <tinst_tests_pf+0x1bf6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009dac:	0026d683          	lhu	a3,2(a3)
    80009db0:	0106969b          	slliw	a3,a3,0x10
    80009db4:	8f55                	or	a4,a4,a3
    80009db6:	01f076b7          	lui	a3,0x1f07
    80009dba:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009dbe:	8f75                	and	a4,a4,a3
    80009dc0:	0001d597          	auipc	a1,0x1d
    80009dc4:	0c058593          	addi	a1,a1,192 # 80026e80 <__func__.0+0x2c0>
    80009dc8:	00e79463          	bne	a5,a4,80009dd0 <tinst_tests_pf+0x1c10>
    80009dcc:	9f3fe06f          	j	800087be <tinst_tests_pf+0x5fe>
    80009dd0:	0001d597          	auipc	a1,0x1d
    80009dd4:	0c058593          	addi	a1,a1,192 # 80026e90 <__func__.0+0x2d0>
    80009dd8:	9e7fe06f          	j	800087be <tinst_tests_pf+0x5fe>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009ddc:	701c                	ld	a5,32(s0)
    80009dde:	0001d597          	auipc	a1,0x1d
    80009de2:	0a258593          	addi	a1,a1,162 # 80026e80 <__func__.0+0x2c0>
    80009de6:	e399                	bnez	a5,80009dec <tinst_tests_pf+0x1c2c>
    80009de8:	a89fe06f          	j	80008870 <tinst_tests_pf+0x6b0>
    80009dec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009dee:	0016f713          	andi	a4,a3,1
    80009df2:	6a071d63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009df6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009dfa:	460d                	li	a2,3
    80009dfc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009e00:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e02:	00c59763          	bne	a1,a2,80009e10 <tinst_tests_pf+0x1c50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e06:	0026d683          	lhu	a3,2(a3)
    80009e0a:	0106969b          	slliw	a3,a3,0x10
    80009e0e:	8f55                	or	a4,a4,a3
    80009e10:	01f076b7          	lui	a3,0x1f07
    80009e14:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009e18:	8f75                	and	a4,a4,a3
    80009e1a:	0001d597          	auipc	a1,0x1d
    80009e1e:	06658593          	addi	a1,a1,102 # 80026e80 <__func__.0+0x2c0>
    80009e22:	00e79463          	bne	a5,a4,80009e2a <tinst_tests_pf+0x1c6a>
    80009e26:	a4bfe06f          	j	80008870 <tinst_tests_pf+0x6b0>
    80009e2a:	0001d597          	auipc	a1,0x1d
    80009e2e:	06658593          	addi	a1,a1,102 # 80026e90 <__func__.0+0x2d0>
    80009e32:	a3ffe06f          	j	80008870 <tinst_tests_pf+0x6b0>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009e36:	701c                	ld	a5,32(s0)
    80009e38:	0001d597          	auipc	a1,0x1d
    80009e3c:	04858593          	addi	a1,a1,72 # 80026e80 <__func__.0+0x2c0>
    80009e40:	e399                	bnez	a5,80009e46 <tinst_tests_pf+0x1c86>
    80009e42:	ae3fe06f          	j	80008924 <tinst_tests_pf+0x764>
    80009e46:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e48:	0016f713          	andi	a4,a3,1
    80009e4c:	66071063          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009e50:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e54:	460d                	li	a2,3
    80009e56:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009e5a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009e5c:	00c59763          	bne	a1,a2,80009e6a <tinst_tests_pf+0x1caa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e60:	0026d683          	lhu	a3,2(a3)
    80009e64:	0106969b          	slliw	a3,a3,0x10
    80009e68:	8f55                	or	a4,a4,a3
    80009e6a:	01f076b7          	lui	a3,0x1f07
    80009e6e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009e72:	8f75                	and	a4,a4,a3
    80009e74:	0001d597          	auipc	a1,0x1d
    80009e78:	00c58593          	addi	a1,a1,12 # 80026e80 <__func__.0+0x2c0>
    80009e7c:	00e79463          	bne	a5,a4,80009e84 <tinst_tests_pf+0x1cc4>
    80009e80:	aa5fe06f          	j	80008924 <tinst_tests_pf+0x764>
    80009e84:	0001d597          	auipc	a1,0x1d
    80009e88:	00c58593          	addi	a1,a1,12 # 80026e90 <__func__.0+0x2d0>
    80009e8c:	a99fe06f          	j	80008924 <tinst_tests_pf+0x764>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009e90:	701c                	ld	a5,32(s0)
    80009e92:	0001d597          	auipc	a1,0x1d
    80009e96:	fee58593          	addi	a1,a1,-18 # 80026e80 <__func__.0+0x2c0>
    80009e9a:	e399                	bnez	a5,80009ea0 <tinst_tests_pf+0x1ce0>
    80009e9c:	dddfe06f          	j	80008c78 <tinst_tests_pf+0xab8>
    80009ea0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ea2:	0016f713          	andi	a4,a3,1
    80009ea6:	60071363          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009eaa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009eae:	460d                	li	a2,3
    80009eb0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009eb4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009eb6:	00c59763          	bne	a1,a2,80009ec4 <tinst_tests_pf+0x1d04>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009eba:	0026d683          	lhu	a3,2(a3)
    80009ebe:	0106969b          	slliw	a3,a3,0x10
    80009ec2:	8f55                	or	a4,a4,a3
    80009ec4:	1ffe16b7          	lui	a3,0x1ffe1
    80009ec8:	068e                	slli	a3,a3,0x3
    80009eca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009ecc:	8f75                	and	a4,a4,a3
    80009ece:	0001d597          	auipc	a1,0x1d
    80009ed2:	fb258593          	addi	a1,a1,-78 # 80026e80 <__func__.0+0x2c0>
    80009ed6:	00e79463          	bne	a5,a4,80009ede <tinst_tests_pf+0x1d1e>
    80009eda:	d9ffe06f          	j	80008c78 <tinst_tests_pf+0xab8>
    80009ede:	0001d597          	auipc	a1,0x1d
    80009ee2:	fb258593          	addi	a1,a1,-78 # 80026e90 <__func__.0+0x2d0>
    80009ee6:	d93fe06f          	j	80008c78 <tinst_tests_pf+0xab8>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009eea:	701c                	ld	a5,32(s0)
    80009eec:	0001d597          	auipc	a1,0x1d
    80009ef0:	f9458593          	addi	a1,a1,-108 # 80026e80 <__func__.0+0x2c0>
    80009ef4:	e399                	bnez	a5,80009efa <tinst_tests_pf+0x1d3a>
    80009ef6:	e37fe06f          	j	80008d2c <tinst_tests_pf+0xb6c>
    80009efa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009efc:	0016f713          	andi	a4,a3,1
    80009f00:	5a071663          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009f04:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f08:	460d                	li	a2,3
    80009f0a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f0e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f10:	00c59763          	bne	a1,a2,80009f1e <tinst_tests_pf+0x1d5e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f14:	0026d683          	lhu	a3,2(a3)
    80009f18:	0106969b          	slliw	a3,a3,0x10
    80009f1c:	8f55                	or	a4,a4,a3
    80009f1e:	1ffe16b7          	lui	a3,0x1ffe1
    80009f22:	068e                	slli	a3,a3,0x3
    80009f24:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009f26:	8f75                	and	a4,a4,a3
    80009f28:	0001d597          	auipc	a1,0x1d
    80009f2c:	f5858593          	addi	a1,a1,-168 # 80026e80 <__func__.0+0x2c0>
    80009f30:	00e79463          	bne	a5,a4,80009f38 <tinst_tests_pf+0x1d78>
    80009f34:	df9fe06f          	j	80008d2c <tinst_tests_pf+0xb6c>
    80009f38:	0001d597          	auipc	a1,0x1d
    80009f3c:	f5858593          	addi	a1,a1,-168 # 80026e90 <__func__.0+0x2d0>
    80009f40:	dedfe06f          	j	80008d2c <tinst_tests_pf+0xb6c>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009f44:	701c                	ld	a5,32(s0)
    80009f46:	0001d597          	auipc	a1,0x1d
    80009f4a:	f3a58593          	addi	a1,a1,-198 # 80026e80 <__func__.0+0x2c0>
    80009f4e:	e399                	bnez	a5,80009f54 <tinst_tests_pf+0x1d94>
    80009f50:	e8ffe06f          	j	80008dde <tinst_tests_pf+0xc1e>
    80009f54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f56:	0016f713          	andi	a4,a3,1
    80009f5a:	54071963          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009f5e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f62:	460d                	li	a2,3
    80009f64:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f68:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f6a:	00c59763          	bne	a1,a2,80009f78 <tinst_tests_pf+0x1db8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f6e:	0026d683          	lhu	a3,2(a3)
    80009f72:	0106969b          	slliw	a3,a3,0x10
    80009f76:	8f55                	or	a4,a4,a3
    80009f78:	1ffe16b7          	lui	a3,0x1ffe1
    80009f7c:	068e                	slli	a3,a3,0x3
    80009f7e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009f80:	8f75                	and	a4,a4,a3
    80009f82:	0001d597          	auipc	a1,0x1d
    80009f86:	efe58593          	addi	a1,a1,-258 # 80026e80 <__func__.0+0x2c0>
    80009f8a:	00e79463          	bne	a5,a4,80009f92 <tinst_tests_pf+0x1dd2>
    80009f8e:	e51fe06f          	j	80008dde <tinst_tests_pf+0xc1e>
    80009f92:	0001d597          	auipc	a1,0x1d
    80009f96:	efe58593          	addi	a1,a1,-258 # 80026e90 <__func__.0+0x2d0>
    80009f9a:	e45fe06f          	j	80008dde <tinst_tests_pf+0xc1e>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009f9e:	701c                	ld	a5,32(s0)
    80009fa0:	e399                	bnez	a5,80009fa6 <tinst_tests_pf+0x1de6>
    80009fa2:	b8cfe06f          	j	8000832e <tinst_tests_pf+0x16e>
    80009fa6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fa8:	0016f713          	andi	a4,a3,1
    80009fac:	50071063          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009fb0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fb4:	460d                	li	a2,3
    80009fb6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009fba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009fbc:	00c59763          	bne	a1,a2,80009fca <tinst_tests_pf+0x1e0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fc0:	0026d683          	lhu	a3,2(a3)
    80009fc4:	0106969b          	slliw	a3,a3,0x10
    80009fc8:	8f55                	or	a4,a4,a3
    80009fca:	1746                	slli	a4,a4,0x31
    80009fcc:	9345                	srli	a4,a4,0x31
    80009fce:	00e78463          	beq	a5,a4,80009fd6 <tinst_tests_pf+0x1e16>
    80009fd2:	b48fe06f          	j	8000831a <tinst_tests_pf+0x15a>
    80009fd6:	b58fe06f          	j	8000832e <tinst_tests_pf+0x16e>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009fda:	6418                	ld	a4,8(s0)
    80009fdc:	47b5                	li	a5,13
    80009fde:	00f70463          	beq	a4,a5,80009fe6 <tinst_tests_pf+0x1e26>
    80009fe2:	d7afe06f          	j	8000855c <tinst_tests_pf+0x39c>
    80009fe6:	7018                	ld	a4,32(s0)
    80009fe8:	e319                	bnez	a4,80009fee <tinst_tests_pf+0x1e2e>
    80009fea:	d74fe06f          	j	8000855e <tinst_tests_pf+0x39e>
    80009fee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ff0:	0016f793          	andi	a5,a3,1
    80009ff4:	4a079c63          	bnez	a5,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    80009ff8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ffc:	460d                	li	a2,3
    80009ffe:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a002:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a004:	00c59763          	bne	a1,a2,8000a012 <tinst_tests_pf+0x1e52>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a008:	0026d683          	lhu	a3,2(a3)
    8000a00c:	0106969b          	slliw	a3,a3,0x10
    8000a010:	8fd5                	or	a5,a5,a3
    8000a012:	17c6                	slli	a5,a5,0x31
    8000a014:	0317d913          	srli	s2,a5,0x31
    8000a018:	40e90933          	sub	s2,s2,a4
    8000a01c:	00193913          	seqz	s2,s2
    8000a020:	d3efe06f          	j	8000855e <tinst_tests_pf+0x39e>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a024:	6418                	ld	a4,8(s0)
    8000a026:	47bd                	li	a5,15
    8000a028:	0001d597          	auipc	a1,0x1d
    8000a02c:	e6858593          	addi	a1,a1,-408 # 80026e90 <__func__.0+0x2d0>
    8000a030:	00f70463          	beq	a4,a5,8000a038 <tinst_tests_pf+0x1e78>
    8000a034:	e51fe06f          	j	80008e84 <tinst_tests_pf+0xcc4>
    8000a038:	701c                	ld	a5,32(s0)
    8000a03a:	0001d597          	auipc	a1,0x1d
    8000a03e:	e4658593          	addi	a1,a1,-442 # 80026e80 <__func__.0+0x2c0>
    8000a042:	e399                	bnez	a5,8000a048 <tinst_tests_pf+0x1e88>
    8000a044:	e41fe06f          	j	80008e84 <tinst_tests_pf+0xcc4>
    8000a048:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a04a:	0016f713          	andi	a4,a3,1
    8000a04e:	44071f63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a052:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a056:	460d                	li	a2,3
    8000a058:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a05c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a05e:	00c59763          	bne	a1,a2,8000a06c <tinst_tests_pf+0x1eac>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a062:	0026d683          	lhu	a3,2(a3)
    8000a066:	0106969b          	slliw	a3,a3,0x10
    8000a06a:	8f55                	or	a4,a4,a3
    8000a06c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a070:	068e                	slli	a3,a3,0x3
    8000a072:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a074:	8f75                	and	a4,a4,a3
    8000a076:	0001d597          	auipc	a1,0x1d
    8000a07a:	e0a58593          	addi	a1,a1,-502 # 80026e80 <__func__.0+0x2c0>
    8000a07e:	00e78463          	beq	a5,a4,8000a086 <tinst_tests_pf+0x1ec6>
    8000a082:	dfbfe06f          	j	80008e7c <tinst_tests_pf+0xcbc>
    8000a086:	dfffe06f          	j	80008e84 <tinst_tests_pf+0xcc4>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a08a:	6418                	ld	a4,8(s0)
    8000a08c:	47b5                	li	a5,13
    8000a08e:	00f70463          	beq	a4,a5,8000a096 <tinst_tests_pf+0x1ed6>
    8000a092:	d74fe06f          	j	80008606 <tinst_tests_pf+0x446>
    8000a096:	7018                	ld	a4,32(s0)
    8000a098:	e319                	bnez	a4,8000a09e <tinst_tests_pf+0x1ede>
    8000a09a:	d6efe06f          	j	80008608 <tinst_tests_pf+0x448>
    8000a09e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0a0:	0016f793          	andi	a5,a3,1
    8000a0a4:	40079463          	bnez	a5,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a0a8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0ac:	460d                	li	a2,3
    8000a0ae:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a0b2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a0b4:	00c59763          	bne	a1,a2,8000a0c2 <tinst_tests_pf+0x1f02>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0b8:	0026d683          	lhu	a3,2(a3)
    8000a0bc:	0106969b          	slliw	a3,a3,0x10
    8000a0c0:	8fd5                	or	a5,a5,a3
    8000a0c2:	17c6                	slli	a5,a5,0x31
    8000a0c4:	0317d913          	srli	s2,a5,0x31
    8000a0c8:	40e90933          	sub	s2,s2,a4
    8000a0cc:	00193913          	seqz	s2,s2
    8000a0d0:	d38fe06f          	j	80008608 <tinst_tests_pf+0x448>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a0d4:	6418                	ld	a4,8(s0)
    8000a0d6:	47b5                	li	a5,13
    8000a0d8:	00f70463          	beq	a4,a5,8000a0e0 <tinst_tests_pf+0x1f20>
    8000a0dc:	dd4fe06f          	j	800086b0 <tinst_tests_pf+0x4f0>
    8000a0e0:	7018                	ld	a4,32(s0)
    8000a0e2:	e319                	bnez	a4,8000a0e8 <tinst_tests_pf+0x1f28>
    8000a0e4:	dcefe06f          	j	800086b2 <tinst_tests_pf+0x4f2>
    8000a0e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0ea:	0016f793          	andi	a5,a3,1
    8000a0ee:	3a079f63          	bnez	a5,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a0f2:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0f6:	460d                	li	a2,3
    8000a0f8:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a0fc:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a0fe:	00c59763          	bne	a1,a2,8000a10c <tinst_tests_pf+0x1f4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a102:	0026d683          	lhu	a3,2(a3)
    8000a106:	0106969b          	slliw	a3,a3,0x10
    8000a10a:	8fd5                	or	a5,a5,a3
    8000a10c:	17c6                	slli	a5,a5,0x31
    8000a10e:	0317d913          	srli	s2,a5,0x31
    8000a112:	40e90933          	sub	s2,s2,a4
    8000a116:	00193913          	seqz	s2,s2
    8000a11a:	d98fe06f          	j	800086b2 <tinst_tests_pf+0x4f2>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a11e:	6418                	ld	a4,8(s0)
    8000a120:	47bd                	li	a5,15
    8000a122:	00f70463          	beq	a4,a5,8000a12a <tinst_tests_pf+0x1f6a>
    8000a126:	e36fe06f          	j	8000875c <tinst_tests_pf+0x59c>
    8000a12a:	701c                	ld	a5,32(s0)
    8000a12c:	e399                	bnez	a5,8000a132 <tinst_tests_pf+0x1f72>
    8000a12e:	e30fe06f          	j	8000875e <tinst_tests_pf+0x59e>
    8000a132:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a134:	0016f713          	andi	a4,a3,1
    8000a138:	36071a63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a13c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a140:	460d                	li	a2,3
    8000a142:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a146:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a148:	00c59763          	bne	a1,a2,8000a156 <tinst_tests_pf+0x1f96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a14c:	0026d683          	lhu	a3,2(a3)
    8000a150:	0106969b          	slliw	a3,a3,0x10
    8000a154:	8f55                	or	a4,a4,a3
    8000a156:	01f076b7          	lui	a3,0x1f07
    8000a15a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a15e:	8f75                	and	a4,a4,a3
    8000a160:	40f70933          	sub	s2,a4,a5
    8000a164:	00193913          	seqz	s2,s2
    8000a168:	df6fe06f          	j	8000875e <tinst_tests_pf+0x59e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a16c:	6418                	ld	a4,8(s0)
    8000a16e:	47bd                	li	a5,15
    8000a170:	00f70463          	beq	a4,a5,8000a178 <tinst_tests_pf+0x1fb8>
    8000a174:	e98fe06f          	j	8000880c <tinst_tests_pf+0x64c>
    8000a178:	701c                	ld	a5,32(s0)
    8000a17a:	e399                	bnez	a5,8000a180 <tinst_tests_pf+0x1fc0>
    8000a17c:	e92fe06f          	j	8000880e <tinst_tests_pf+0x64e>
    8000a180:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a182:	0016f713          	andi	a4,a3,1
    8000a186:	32071363          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a18a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a18e:	460d                	li	a2,3
    8000a190:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a194:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a196:	00c59763          	bne	a1,a2,8000a1a4 <tinst_tests_pf+0x1fe4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a19a:	0026d683          	lhu	a3,2(a3)
    8000a19e:	0106969b          	slliw	a3,a3,0x10
    8000a1a2:	8f55                	or	a4,a4,a3
    8000a1a4:	01f076b7          	lui	a3,0x1f07
    8000a1a8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a1ac:	8f75                	and	a4,a4,a3
    8000a1ae:	40f70933          	sub	s2,a4,a5
    8000a1b2:	00193913          	seqz	s2,s2
    8000a1b6:	e58fe06f          	j	8000880e <tinst_tests_pf+0x64e>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a1ba:	6418                	ld	a4,8(s0)
    8000a1bc:	47bd                	li	a5,15
    8000a1be:	00f70463          	beq	a4,a5,8000a1c6 <tinst_tests_pf+0x2006>
    8000a1c2:	efcfe06f          	j	800088be <tinst_tests_pf+0x6fe>
    8000a1c6:	701c                	ld	a5,32(s0)
    8000a1c8:	e399                	bnez	a5,8000a1ce <tinst_tests_pf+0x200e>
    8000a1ca:	ef6fe06f          	j	800088c0 <tinst_tests_pf+0x700>
    8000a1ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1d0:	0016f713          	andi	a4,a3,1
    8000a1d4:	2c071c63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a1d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1dc:	460d                	li	a2,3
    8000a1de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1e4:	00c59763          	bne	a1,a2,8000a1f2 <tinst_tests_pf+0x2032>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1e8:	0026d683          	lhu	a3,2(a3)
    8000a1ec:	0106969b          	slliw	a3,a3,0x10
    8000a1f0:	8f55                	or	a4,a4,a3
    8000a1f2:	01f076b7          	lui	a3,0x1f07
    8000a1f6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a1fa:	8f75                	and	a4,a4,a3
    8000a1fc:	40f70933          	sub	s2,a4,a5
    8000a200:	00193913          	seqz	s2,s2
    8000a204:	ebcfe06f          	j	800088c0 <tinst_tests_pf+0x700>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a208:	6418                	ld	a4,8(s0)
    8000a20a:	47bd                	li	a5,15
    8000a20c:	00f70463          	beq	a4,a5,8000a214 <tinst_tests_pf+0x2054>
    8000a210:	f62fe06f          	j	80008972 <tinst_tests_pf+0x7b2>
    8000a214:	701c                	ld	a5,32(s0)
    8000a216:	e399                	bnez	a5,8000a21c <tinst_tests_pf+0x205c>
    8000a218:	f5cfe06f          	j	80008974 <tinst_tests_pf+0x7b4>
    8000a21c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a21e:	0016f713          	andi	a4,a3,1
    8000a222:	28071563          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a226:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a22a:	460d                	li	a2,3
    8000a22c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a230:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a232:	00c59763          	bne	a1,a2,8000a240 <tinst_tests_pf+0x2080>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a236:	0026d683          	lhu	a3,2(a3)
    8000a23a:	0106969b          	slliw	a3,a3,0x10
    8000a23e:	8f55                	or	a4,a4,a3
    8000a240:	01f076b7          	lui	a3,0x1f07
    8000a244:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a248:	8f75                	and	a4,a4,a3
    8000a24a:	40f70933          	sub	s2,a4,a5
    8000a24e:	00193913          	seqz	s2,s2
    8000a252:	f22fe06f          	j	80008974 <tinst_tests_pf+0x7b4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a256:	6418                	ld	a4,8(s0)
    8000a258:	47b5                	li	a5,13
    8000a25a:	00f70463          	beq	a4,a5,8000a262 <tinst_tests_pf+0x20a2>
    8000a25e:	fb8fe06f          	j	80008a16 <tinst_tests_pf+0x856>
    8000a262:	7004                	ld	s1,32(s0)
    8000a264:	e099                	bnez	s1,8000a26a <tinst_tests_pf+0x20aa>
    8000a266:	fb2fe06f          	j	80008a18 <tinst_tests_pf+0x858>
    8000a26a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a26c:	0017f713          	andi	a4,a5,1
    8000a270:	22071e63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a274:	0007d503          	lhu	a0,0(a5)
    8000a278:	950f70ef          	jal	800013c8 <expand_compressed_instruction>
    8000a27c:	67a1                	lui	a5,0x8
    8000a27e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a280:	00f57933          	and	s2,a0,a5
    8000a284:	40990933          	sub	s2,s2,s1
    8000a288:	00193913          	seqz	s2,s2
    8000a28c:	f8cfe06f          	j	80008a18 <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a290:	6418                	ld	a4,8(s0)
    8000a292:	47b5                	li	a5,13
    8000a294:	00f70463          	beq	a4,a5,8000a29c <tinst_tests_pf+0x20dc>
    8000a298:	825fe06f          	j	80008abc <tinst_tests_pf+0x8fc>
    8000a29c:	02043983          	ld	s3,32(s0)
    8000a2a0:	00099463          	bnez	s3,8000a2a8 <tinst_tests_pf+0x20e8>
    8000a2a4:	81bfe06f          	j	80008abe <tinst_tests_pf+0x8fe>
    8000a2a8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a2aa:	0017f713          	andi	a4,a5,1
    8000a2ae:	1e071f63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a2b2:	0007d503          	lhu	a0,0(a5)
    8000a2b6:	912f70ef          	jal	800013c8 <expand_compressed_instruction>
    8000a2ba:	67a1                	lui	a5,0x8
    8000a2bc:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a2be:	00f57933          	and	s2,a0,a5
    8000a2c2:	41390933          	sub	s2,s2,s3
    8000a2c6:	00193913          	seqz	s2,s2
    8000a2ca:	ff4fe06f          	j	80008abe <tinst_tests_pf+0x8fe>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000a2ce:	701c                	ld	a5,32(s0)
    8000a2d0:	e399                	bnez	a5,8000a2d6 <tinst_tests_pf+0x2116>
    8000a2d2:	9ddfe06f          	j	80008cae <tinst_tests_pf+0xaee>
    8000a2d6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2d8:	0016f713          	andi	a4,a3,1
    8000a2dc:	1c071863          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a2e0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2e4:	460d                	li	a2,3
    8000a2e6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a2ea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a2ec:	00c59763          	bne	a1,a2,8000a2fa <tinst_tests_pf+0x213a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2f0:	0026d683          	lhu	a3,2(a3)
    8000a2f4:	0106969b          	slliw	a3,a3,0x10
    8000a2f8:	8f55                	or	a4,a4,a3
    8000a2fa:	1ffe16b7          	lui	a3,0x1ffe1
    8000a2fe:	068e                	slli	a3,a3,0x3
    8000a300:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a302:	8f75                	and	a4,a4,a3
    8000a304:	00e78463          	beq	a5,a4,8000a30c <tinst_tests_pf+0x214c>
    8000a308:	993fe06f          	j	80008c9a <tinst_tests_pf+0xada>
    8000a30c:	9a3fe06f          	j	80008cae <tinst_tests_pf+0xaee>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000a310:	701c                	ld	a5,32(s0)
    8000a312:	e399                	bnez	a5,8000a318 <tinst_tests_pf+0x2158>
    8000a314:	a4ffe06f          	j	80008d62 <tinst_tests_pf+0xba2>
    8000a318:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a31a:	0016f713          	andi	a4,a3,1
    8000a31e:	18071763          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a322:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a326:	460d                	li	a2,3
    8000a328:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a32c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a32e:	00c59763          	bne	a1,a2,8000a33c <tinst_tests_pf+0x217c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a332:	0026d683          	lhu	a3,2(a3)
    8000a336:	0106969b          	slliw	a3,a3,0x10
    8000a33a:	8f55                	or	a4,a4,a3
    8000a33c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a340:	068e                	slli	a3,a3,0x3
    8000a342:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a344:	8f75                	and	a4,a4,a3
    8000a346:	00e78463          	beq	a5,a4,8000a34e <tinst_tests_pf+0x218e>
    8000a34a:	a05fe06f          	j	80008d4e <tinst_tests_pf+0xb8e>
    8000a34e:	a15fe06f          	j	80008d62 <tinst_tests_pf+0xba2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a352:	7004                	ld	s1,32(s0)
    8000a354:	780494e3          	bnez	s1,8000b2dc <tinst_tests_pf+0x311c>
    8000a358:	0001d597          	auipc	a1,0x1d
    8000a35c:	b2858593          	addi	a1,a1,-1240 # 80026e80 <__func__.0+0x2c0>
    8000a360:	e68fe06f          	j	800089c8 <tinst_tests_pf+0x808>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000a364:	701c                	ld	a5,32(s0)
    8000a366:	e399                	bnez	a5,8000a36c <tinst_tests_pf+0x21ac>
    8000a368:	aadfe06f          	j	80008e14 <tinst_tests_pf+0xc54>
    8000a36c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a36e:	0016f713          	andi	a4,a3,1
    8000a372:	12071d63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a376:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a37a:	460d                	li	a2,3
    8000a37c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a380:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a382:	00c59763          	bne	a1,a2,8000a390 <tinst_tests_pf+0x21d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a386:	0026d683          	lhu	a3,2(a3)
    8000a38a:	0106969b          	slliw	a3,a3,0x10
    8000a38e:	8f55                	or	a4,a4,a3
    8000a390:	1ffe16b7          	lui	a3,0x1ffe1
    8000a394:	068e                	slli	a3,a3,0x3
    8000a396:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a398:	8f75                	and	a4,a4,a3
    8000a39a:	00e78463          	beq	a5,a4,8000a3a2 <tinst_tests_pf+0x21e2>
    8000a39e:	a63fe06f          	j	80008e00 <tinst_tests_pf+0xc40>
    8000a3a2:	a73fe06f          	j	80008e14 <tinst_tests_pf+0xc54>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a3a6:	02043983          	ld	s3,32(s0)
    8000a3aa:	74099fe3          	bnez	s3,8000b308 <tinst_tests_pf+0x3148>
    8000a3ae:	0001d597          	auipc	a1,0x1d
    8000a3b2:	ad258593          	addi	a1,a1,-1326 # 80026e80 <__func__.0+0x2c0>
    8000a3b6:	eb8fe06f          	j	80008a6e <tinst_tests_pf+0x8ae>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a3ba:	02043983          	ld	s3,32(s0)
    8000a3be:	7a099ce3          	bnez	s3,8000b376 <tinst_tests_pf+0x31b6>
    8000a3c2:	0001d597          	auipc	a1,0x1d
    8000a3c6:	abe58593          	addi	a1,a1,-1346 # 80026e80 <__func__.0+0x2c0>
    8000a3ca:	f4afe06f          	j	80008b14 <tinst_tests_pf+0x954>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a3ce:	7004                	ld	s1,32(s0)
    8000a3d0:	c099                	beqz	s1,8000a3d6 <tinst_tests_pf+0x2216>
    8000a3d2:	0160106f          	j	8000b3e8 <tinst_tests_pf+0x3228>
    8000a3d6:	0001d597          	auipc	a1,0x1d
    8000a3da:	aaa58593          	addi	a1,a1,-1366 # 80026e80 <__func__.0+0x2c0>
    8000a3de:	fe4fe06f          	j	80008bc2 <tinst_tests_pf+0xa02>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    8000a3e2:	7018                	ld	a4,32(s0)
    8000a3e4:	e319                	bnez	a4,8000a3ea <tinst_tests_pf+0x222a>
    8000a3e6:	f6bfd06f          	j	80008350 <tinst_tests_pf+0x190>
    8000a3ea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3ec:	0016f793          	andi	a5,a3,1
    8000a3f0:	efd5                	bnez	a5,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a3f2:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3f6:	460d                	li	a2,3
    8000a3f8:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a3fc:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a3fe:	00c59763          	bne	a1,a2,8000a40c <tinst_tests_pf+0x224c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a402:	0026d683          	lhu	a3,2(a3)
    8000a406:	0106969b          	slliw	a3,a3,0x10
    8000a40a:	8fd5                	or	a5,a5,a3
    8000a40c:	03179913          	slli	s2,a5,0x31
    8000a410:	03195913          	srli	s2,s2,0x31
    8000a414:	40e90933          	sub	s2,s2,a4
    8000a418:	00193913          	seqz	s2,s2
    8000a41c:	f35fd06f          	j	80008350 <tinst_tests_pf+0x190>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000a420:	7018                	ld	a4,32(s0)
    8000a422:	e319                	bnez	a4,8000a428 <tinst_tests_pf+0x2268>
    8000a424:	fdffd06f          	j	80008402 <tinst_tests_pf+0x242>
    8000a428:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a42a:	0016f793          	andi	a5,a3,1
    8000a42e:	efbd                	bnez	a5,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a430:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a434:	460d                	li	a2,3
    8000a436:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a43a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a43c:	00c59763          	bne	a1,a2,8000a44a <tinst_tests_pf+0x228a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a440:	0026d683          	lhu	a3,2(a3)
    8000a444:	0106969b          	slliw	a3,a3,0x10
    8000a448:	8fd5                	or	a5,a5,a3
    8000a44a:	03179913          	slli	s2,a5,0x31
    8000a44e:	03195913          	srli	s2,s2,0x31
    8000a452:	40e90933          	sub	s2,s2,a4
    8000a456:	00193913          	seqz	s2,s2
    8000a45a:	fa9fd06f          	j	80008402 <tinst_tests_pf+0x242>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000a45e:	7018                	ld	a4,32(s0)
    8000a460:	e319                	bnez	a4,8000a466 <tinst_tests_pf+0x22a6>
    8000a462:	852fe06f          	j	800084b4 <tinst_tests_pf+0x2f4>
    8000a466:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a468:	0016f793          	andi	a5,a3,1
    8000a46c:	e3a1                	bnez	a5,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a46e:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a472:	460d                	li	a2,3
    8000a474:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000a478:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000a47a:	00c59763          	bne	a1,a2,8000a488 <tinst_tests_pf+0x22c8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a47e:	0026d683          	lhu	a3,2(a3)
    8000a482:	0106969b          	slliw	a3,a3,0x10
    8000a486:	8fd5                	or	a5,a5,a3
    8000a488:	17c6                	slli	a5,a5,0x31
    8000a48a:	0317d913          	srli	s2,a5,0x31
    8000a48e:	40e90933          	sub	s2,s2,a4
    8000a492:	00193913          	seqz	s2,s2
    8000a496:	81efe06f          	j	800084b4 <tinst_tests_pf+0x2f4>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000a49a:	701c                	ld	a5,32(s0)
    8000a49c:	e399                	bnez	a5,8000a4a2 <tinst_tests_pf+0x22e2>
    8000a49e:	f43fd06f          	j	800083e0 <tinst_tests_pf+0x220>
    8000a4a2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4a4:	0016f713          	andi	a4,a3,1
    8000a4a8:	3e070fe3          	beqz	a4,8000b0a6 <tinst_tests_pf+0x2ee6>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000a4ac:	11400613          	li	a2,276
    8000a4b0:	0001b597          	auipc	a1,0x1b
    8000a4b4:	54058593          	addi	a1,a1,1344 # 800259f0 <__func__.1>
    8000a4b8:	0001e517          	auipc	a0,0x1e
    8000a4bc:	38050513          	addi	a0,a0,896 # 80028838 <__func__.0+0x1c78>
    8000a4c0:	2451a0ef          	jal	80024f04 <printf>
    8000a4c4:	11400613          	li	a2,276
    8000a4c8:	0001b597          	auipc	a1,0x1b
    8000a4cc:	52858593          	addi	a1,a1,1320 # 800259f0 <__func__.1>
    8000a4d0:	0001d517          	auipc	a0,0x1d
    8000a4d4:	b5850513          	addi	a0,a0,-1192 # 80027028 <__func__.0+0x468>
    8000a4d8:	22d1a0ef          	jal	80024f04 <printf>
    8000a4dc:	4501                	li	a0,0
    8000a4de:	6e41a0ef          	jal	80024bc2 <exit>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a4e2:	701c                	ld	a5,32(s0)
    8000a4e4:	0001d597          	auipc	a1,0x1d
    8000a4e8:	99c58593          	addi	a1,a1,-1636 # 80026e80 <__func__.0+0x2c0>
    8000a4ec:	e399                	bnez	a5,8000a4f2 <tinst_tests_pf+0x2332>
    8000a4ee:	a49fe06f          	j	80008f36 <tinst_tests_pf+0xd76>
    8000a4f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4f4:	0016f713          	andi	a4,a3,1
    8000a4f8:	fb55                	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a4fa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4fe:	460d                	li	a2,3
    8000a500:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a504:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a506:	00c59763          	bne	a1,a2,8000a514 <tinst_tests_pf+0x2354>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a50a:	0026d683          	lhu	a3,2(a3)
    8000a50e:	0106969b          	slliw	a3,a3,0x10
    8000a512:	8f55                	or	a4,a4,a3
    8000a514:	1ffe16b7          	lui	a3,0x1ffe1
    8000a518:	068e                	slli	a3,a3,0x3
    8000a51a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a51c:	8f75                	and	a4,a4,a3
    8000a51e:	0001d597          	auipc	a1,0x1d
    8000a522:	96258593          	addi	a1,a1,-1694 # 80026e80 <__func__.0+0x2c0>
    8000a526:	00e79463          	bne	a5,a4,8000a52e <tinst_tests_pf+0x236e>
    8000a52a:	a0dfe06f          	j	80008f36 <tinst_tests_pf+0xd76>
    8000a52e:	0001d597          	auipc	a1,0x1d
    8000a532:	96258593          	addi	a1,a1,-1694 # 80026e90 <__func__.0+0x2d0>
    8000a536:	a01fe06f          	j	80008f36 <tinst_tests_pf+0xd76>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000a53a:	701c                	ld	a5,32(s0)
    8000a53c:	e399                	bnez	a5,8000a542 <tinst_tests_pf+0x2382>
    8000a53e:	f55fd06f          	j	80008492 <tinst_tests_pf+0x2d2>
    8000a542:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a544:	0016f713          	andi	a4,a3,1
    8000a548:	f335                	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a54a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a54e:	460d                	li	a2,3
    8000a550:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a554:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a556:	00c59763          	bne	a1,a2,8000a564 <tinst_tests_pf+0x23a4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a55a:	0026d683          	lhu	a3,2(a3)
    8000a55e:	0106969b          	slliw	a3,a3,0x10
    8000a562:	8f55                	or	a4,a4,a3
    8000a564:	1746                	slli	a4,a4,0x31
    8000a566:	9345                	srli	a4,a4,0x31
    8000a568:	00e78463          	beq	a5,a4,8000a570 <tinst_tests_pf+0x23b0>
    8000a56c:	f13fd06f          	j	8000847e <tinst_tests_pf+0x2be>
    8000a570:	f23fd06f          	j	80008492 <tinst_tests_pf+0x2d2>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a574:	701c                	ld	a5,32(s0)
    8000a576:	0001d597          	auipc	a1,0x1d
    8000a57a:	90a58593          	addi	a1,a1,-1782 # 80026e80 <__func__.0+0x2c0>
    8000a57e:	e399                	bnez	a5,8000a584 <tinst_tests_pf+0x23c4>
    8000a580:	a69fe06f          	j	80008fe8 <tinst_tests_pf+0xe28>
    8000a584:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a586:	0016f713          	andi	a4,a3,1
    8000a58a:	f30d                	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a58c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a590:	460d                	li	a2,3
    8000a592:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a596:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a598:	00c59763          	bne	a1,a2,8000a5a6 <tinst_tests_pf+0x23e6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a59c:	0026d683          	lhu	a3,2(a3)
    8000a5a0:	0106969b          	slliw	a3,a3,0x10
    8000a5a4:	8f55                	or	a4,a4,a3
    8000a5a6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a5aa:	068e                	slli	a3,a3,0x3
    8000a5ac:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a5ae:	8f75                	and	a4,a4,a3
    8000a5b0:	0001d597          	auipc	a1,0x1d
    8000a5b4:	8d058593          	addi	a1,a1,-1840 # 80026e80 <__func__.0+0x2c0>
    8000a5b8:	00e79463          	bne	a5,a4,8000a5c0 <tinst_tests_pf+0x2400>
    8000a5bc:	a2dfe06f          	j	80008fe8 <tinst_tests_pf+0xe28>
    8000a5c0:	0001d597          	auipc	a1,0x1d
    8000a5c4:	8d058593          	addi	a1,a1,-1840 # 80026e90 <__func__.0+0x2d0>
    8000a5c8:	a21fe06f          	j	80008fe8 <tinst_tests_pf+0xe28>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000a5cc:	701c                	ld	a5,32(s0)
    8000a5ce:	e399                	bnez	a5,8000a5d4 <tinst_tests_pf+0x2414>
    8000a5d0:	f75fd06f          	j	80008544 <tinst_tests_pf+0x384>
    8000a5d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5d6:	0016f713          	andi	a4,a3,1
    8000a5da:	ec0719e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a5de:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a5e2:	460d                	li	a2,3
    8000a5e4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a5e8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a5ea:	00c59763          	bne	a1,a2,8000a5f8 <tinst_tests_pf+0x2438>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5ee:	0026d683          	lhu	a3,2(a3)
    8000a5f2:	0106969b          	slliw	a3,a3,0x10
    8000a5f6:	8f55                	or	a4,a4,a3
    8000a5f8:	1746                	slli	a4,a4,0x31
    8000a5fa:	9345                	srli	a4,a4,0x31
    8000a5fc:	00e78463          	beq	a5,a4,8000a604 <tinst_tests_pf+0x2444>
    8000a600:	f31fd06f          	j	80008530 <tinst_tests_pf+0x370>
    8000a604:	f41fd06f          	j	80008544 <tinst_tests_pf+0x384>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a608:	701c                	ld	a5,32(s0)
    8000a60a:	0001d597          	auipc	a1,0x1d
    8000a60e:	87658593          	addi	a1,a1,-1930 # 80026e80 <__func__.0+0x2c0>
    8000a612:	e399                	bnez	a5,8000a618 <tinst_tests_pf+0x2458>
    8000a614:	a87fe06f          	j	8000909a <tinst_tests_pf+0xeda>
    8000a618:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a61a:	0016f713          	andi	a4,a3,1
    8000a61e:	e80717e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a622:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a626:	460d                	li	a2,3
    8000a628:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a62c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a62e:	00c59763          	bne	a1,a2,8000a63c <tinst_tests_pf+0x247c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a632:	0026d683          	lhu	a3,2(a3)
    8000a636:	0106969b          	slliw	a3,a3,0x10
    8000a63a:	8f55                	or	a4,a4,a3
    8000a63c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a640:	068e                	slli	a3,a3,0x3
    8000a642:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a644:	8f75                	and	a4,a4,a3
    8000a646:	0001d597          	auipc	a1,0x1d
    8000a64a:	83a58593          	addi	a1,a1,-1990 # 80026e80 <__func__.0+0x2c0>
    8000a64e:	00e79463          	bne	a5,a4,8000a656 <tinst_tests_pf+0x2496>
    8000a652:	a49fe06f          	j	8000909a <tinst_tests_pf+0xeda>
    8000a656:	0001d597          	auipc	a1,0x1d
    8000a65a:	83a58593          	addi	a1,a1,-1990 # 80026e90 <__func__.0+0x2d0>
    8000a65e:	a3dfe06f          	j	8000909a <tinst_tests_pf+0xeda>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a662:	701c                	ld	a5,32(s0)
    8000a664:	e399                	bnez	a5,8000a66a <tinst_tests_pf+0x24aa>
    8000a666:	f89fd06f          	j	800085ee <tinst_tests_pf+0x42e>
    8000a66a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a66c:	0016f713          	andi	a4,a3,1
    8000a670:	e2071ee3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a674:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a678:	460d                	li	a2,3
    8000a67a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a67e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a680:	00c59763          	bne	a1,a2,8000a68e <tinst_tests_pf+0x24ce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a684:	0026d683          	lhu	a3,2(a3)
    8000a688:	0106969b          	slliw	a3,a3,0x10
    8000a68c:	8f55                	or	a4,a4,a3
    8000a68e:	1746                	slli	a4,a4,0x31
    8000a690:	9345                	srli	a4,a4,0x31
    8000a692:	00e78463          	beq	a5,a4,8000a69a <tinst_tests_pf+0x24da>
    8000a696:	f45fd06f          	j	800085da <tinst_tests_pf+0x41a>
    8000a69a:	f55fd06f          	j	800085ee <tinst_tests_pf+0x42e>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a69e:	701c                	ld	a5,32(s0)
    8000a6a0:	0001c597          	auipc	a1,0x1c
    8000a6a4:	7e058593          	addi	a1,a1,2016 # 80026e80 <__func__.0+0x2c0>
    8000a6a8:	e399                	bnez	a5,8000a6ae <tinst_tests_pf+0x24ee>
    8000a6aa:	aa3fe06f          	j	8000914c <tinst_tests_pf+0xf8c>
    8000a6ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6b0:	0016f713          	andi	a4,a3,1
    8000a6b4:	de071ce3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a6b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6bc:	460d                	li	a2,3
    8000a6be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a6c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6c4:	00c59763          	bne	a1,a2,8000a6d2 <tinst_tests_pf+0x2512>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6c8:	0026d683          	lhu	a3,2(a3)
    8000a6cc:	0106969b          	slliw	a3,a3,0x10
    8000a6d0:	8f55                	or	a4,a4,a3
    8000a6d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a6d6:	068e                	slli	a3,a3,0x3
    8000a6d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a6da:	8f75                	and	a4,a4,a3
    8000a6dc:	0001c597          	auipc	a1,0x1c
    8000a6e0:	7a458593          	addi	a1,a1,1956 # 80026e80 <__func__.0+0x2c0>
    8000a6e4:	00e79463          	bne	a5,a4,8000a6ec <tinst_tests_pf+0x252c>
    8000a6e8:	a65fe06f          	j	8000914c <tinst_tests_pf+0xf8c>
    8000a6ec:	0001c597          	auipc	a1,0x1c
    8000a6f0:	7a458593          	addi	a1,a1,1956 # 80026e90 <__func__.0+0x2d0>
    8000a6f4:	a59fe06f          	j	8000914c <tinst_tests_pf+0xf8c>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a6f8:	701c                	ld	a5,32(s0)
    8000a6fa:	e399                	bnez	a5,8000a700 <tinst_tests_pf+0x2540>
    8000a6fc:	f9dfd06f          	j	80008698 <tinst_tests_pf+0x4d8>
    8000a700:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a702:	0016f713          	andi	a4,a3,1
    8000a706:	da0713e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a70a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a70e:	460d                	li	a2,3
    8000a710:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a714:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a716:	00c59763          	bne	a1,a2,8000a724 <tinst_tests_pf+0x2564>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a71a:	0026d683          	lhu	a3,2(a3)
    8000a71e:	0106969b          	slliw	a3,a3,0x10
    8000a722:	8f55                	or	a4,a4,a3
    8000a724:	1746                	slli	a4,a4,0x31
    8000a726:	9345                	srli	a4,a4,0x31
    8000a728:	00e78463          	beq	a5,a4,8000a730 <tinst_tests_pf+0x2570>
    8000a72c:	f59fd06f          	j	80008684 <tinst_tests_pf+0x4c4>
    8000a730:	f69fd06f          	j	80008698 <tinst_tests_pf+0x4d8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a734:	701c                	ld	a5,32(s0)
    8000a736:	0001c597          	auipc	a1,0x1c
    8000a73a:	74a58593          	addi	a1,a1,1866 # 80026e80 <__func__.0+0x2c0>
    8000a73e:	e399                	bnez	a5,8000a744 <tinst_tests_pf+0x2584>
    8000a740:	abffe06f          	j	800091fe <tinst_tests_pf+0x103e>
    8000a744:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a746:	0016f713          	andi	a4,a3,1
    8000a74a:	d60711e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a74e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a752:	460d                	li	a2,3
    8000a754:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a758:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a75a:	00c59763          	bne	a1,a2,8000a768 <tinst_tests_pf+0x25a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a75e:	0026d683          	lhu	a3,2(a3)
    8000a762:	0106969b          	slliw	a3,a3,0x10
    8000a766:	8f55                	or	a4,a4,a3
    8000a768:	1ffe16b7          	lui	a3,0x1ffe1
    8000a76c:	068e                	slli	a3,a3,0x3
    8000a76e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a770:	8f75                	and	a4,a4,a3
    8000a772:	0001c597          	auipc	a1,0x1c
    8000a776:	70e58593          	addi	a1,a1,1806 # 80026e80 <__func__.0+0x2c0>
    8000a77a:	00e79463          	bne	a5,a4,8000a782 <tinst_tests_pf+0x25c2>
    8000a77e:	a81fe06f          	j	800091fe <tinst_tests_pf+0x103e>
    8000a782:	0001c597          	auipc	a1,0x1c
    8000a786:	70e58593          	addi	a1,a1,1806 # 80026e90 <__func__.0+0x2d0>
    8000a78a:	a75fe06f          	j	800091fe <tinst_tests_pf+0x103e>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a78e:	701c                	ld	a5,32(s0)
    8000a790:	e399                	bnez	a5,8000a796 <tinst_tests_pf+0x25d6>
    8000a792:	fb3fd06f          	j	80008744 <tinst_tests_pf+0x584>
    8000a796:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a798:	0016f713          	andi	a4,a3,1
    8000a79c:	d00718e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a7a0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7a4:	460d                	li	a2,3
    8000a7a6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7aa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7ac:	00c59763          	bne	a1,a2,8000a7ba <tinst_tests_pf+0x25fa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7b0:	0026d683          	lhu	a3,2(a3)
    8000a7b4:	0106969b          	slliw	a3,a3,0x10
    8000a7b8:	8f55                	or	a4,a4,a3
    8000a7ba:	01f076b7          	lui	a3,0x1f07
    8000a7be:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a7c2:	8f75                	and	a4,a4,a3
    8000a7c4:	00e78463          	beq	a5,a4,8000a7cc <tinst_tests_pf+0x260c>
    8000a7c8:	f69fd06f          	j	80008730 <tinst_tests_pf+0x570>
    8000a7cc:	f79fd06f          	j	80008744 <tinst_tests_pf+0x584>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a7d0:	701c                	ld	a5,32(s0)
    8000a7d2:	0001c597          	auipc	a1,0x1c
    8000a7d6:	6ae58593          	addi	a1,a1,1710 # 80026e80 <__func__.0+0x2c0>
    8000a7da:	e399                	bnez	a5,8000a7e0 <tinst_tests_pf+0x2620>
    8000a7dc:	ad5fe06f          	j	800092b0 <tinst_tests_pf+0x10f0>
    8000a7e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7e2:	0016f713          	andi	a4,a3,1
    8000a7e6:	cc0713e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a7ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7ee:	460d                	li	a2,3
    8000a7f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7f6:	00c59763          	bne	a1,a2,8000a804 <tinst_tests_pf+0x2644>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7fa:	0026d683          	lhu	a3,2(a3)
    8000a7fe:	0106969b          	slliw	a3,a3,0x10
    8000a802:	8f55                	or	a4,a4,a3
    8000a804:	1ffe16b7          	lui	a3,0x1ffe1
    8000a808:	068e                	slli	a3,a3,0x3
    8000a80a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a80c:	8f75                	and	a4,a4,a3
    8000a80e:	0001c597          	auipc	a1,0x1c
    8000a812:	67258593          	addi	a1,a1,1650 # 80026e80 <__func__.0+0x2c0>
    8000a816:	00e79463          	bne	a5,a4,8000a81e <tinst_tests_pf+0x265e>
    8000a81a:	a97fe06f          	j	800092b0 <tinst_tests_pf+0x10f0>
    8000a81e:	0001c597          	auipc	a1,0x1c
    8000a822:	67258593          	addi	a1,a1,1650 # 80026e90 <__func__.0+0x2d0>
    8000a826:	a8bfe06f          	j	800092b0 <tinst_tests_pf+0x10f0>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a82a:	701c                	ld	a5,32(s0)
    8000a82c:	e399                	bnez	a5,8000a832 <tinst_tests_pf+0x2672>
    8000a82e:	fc7fd06f          	j	800087f4 <tinst_tests_pf+0x634>
    8000a832:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a834:	0016f713          	andi	a4,a3,1
    8000a838:	c6071ae3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a83c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a840:	460d                	li	a2,3
    8000a842:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a846:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a848:	00c59763          	bne	a1,a2,8000a856 <tinst_tests_pf+0x2696>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a84c:	0026d683          	lhu	a3,2(a3)
    8000a850:	0106969b          	slliw	a3,a3,0x10
    8000a854:	8f55                	or	a4,a4,a3
    8000a856:	01f076b7          	lui	a3,0x1f07
    8000a85a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a85e:	8f75                	and	a4,a4,a3
    8000a860:	00e78463          	beq	a5,a4,8000a868 <tinst_tests_pf+0x26a8>
    8000a864:	f7dfd06f          	j	800087e0 <tinst_tests_pf+0x620>
    8000a868:	f8dfd06f          	j	800087f4 <tinst_tests_pf+0x634>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a86c:	701c                	ld	a5,32(s0)
    8000a86e:	0001c597          	auipc	a1,0x1c
    8000a872:	61258593          	addi	a1,a1,1554 # 80026e80 <__func__.0+0x2c0>
    8000a876:	e399                	bnez	a5,8000a87c <tinst_tests_pf+0x26bc>
    8000a878:	aeffe06f          	j	80009366 <tinst_tests_pf+0x11a6>
    8000a87c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a87e:	0016f713          	andi	a4,a3,1
    8000a882:	c20715e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a886:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a88a:	460d                	li	a2,3
    8000a88c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a890:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a892:	00c59763          	bne	a1,a2,8000a8a0 <tinst_tests_pf+0x26e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a896:	0026d683          	lhu	a3,2(a3)
    8000a89a:	0106969b          	slliw	a3,a3,0x10
    8000a89e:	8f55                	or	a4,a4,a3
    8000a8a0:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8a4:	068e                	slli	a3,a3,0x3
    8000a8a6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8a8:	8f75                	and	a4,a4,a3
    8000a8aa:	0001c597          	auipc	a1,0x1c
    8000a8ae:	5d658593          	addi	a1,a1,1494 # 80026e80 <__func__.0+0x2c0>
    8000a8b2:	00e79463          	bne	a5,a4,8000a8ba <tinst_tests_pf+0x26fa>
    8000a8b6:	ab1fe06f          	j	80009366 <tinst_tests_pf+0x11a6>
    8000a8ba:	0001c597          	auipc	a1,0x1c
    8000a8be:	5d658593          	addi	a1,a1,1494 # 80026e90 <__func__.0+0x2d0>
    8000a8c2:	aa5fe06f          	j	80009366 <tinst_tests_pf+0x11a6>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a8c6:	701c                	ld	a5,32(s0)
    8000a8c8:	e399                	bnez	a5,8000a8ce <tinst_tests_pf+0x270e>
    8000a8ca:	fddfd06f          	j	800088a6 <tinst_tests_pf+0x6e6>
    8000a8ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8d0:	0016f713          	andi	a4,a3,1
    8000a8d4:	bc071ce3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a8d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8dc:	460d                	li	a2,3
    8000a8de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8e4:	00c59763          	bne	a1,a2,8000a8f2 <tinst_tests_pf+0x2732>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8e8:	0026d683          	lhu	a3,2(a3)
    8000a8ec:	0106969b          	slliw	a3,a3,0x10
    8000a8f0:	8f55                	or	a4,a4,a3
    8000a8f2:	01f076b7          	lui	a3,0x1f07
    8000a8f6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a8fa:	8f75                	and	a4,a4,a3
    8000a8fc:	00e78463          	beq	a5,a4,8000a904 <tinst_tests_pf+0x2744>
    8000a900:	f93fd06f          	j	80008892 <tinst_tests_pf+0x6d2>
    8000a904:	fa3fd06f          	j	800088a6 <tinst_tests_pf+0x6e6>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a908:	701c                	ld	a5,32(s0)
    8000a90a:	0001c597          	auipc	a1,0x1c
    8000a90e:	57658593          	addi	a1,a1,1398 # 80026e80 <__func__.0+0x2c0>
    8000a912:	e399                	bnez	a5,8000a918 <tinst_tests_pf+0x2758>
    8000a914:	b05fe06f          	j	80009418 <tinst_tests_pf+0x1258>
    8000a918:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a91a:	0016f713          	andi	a4,a3,1
    8000a91e:	b80717e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a922:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a926:	460d                	li	a2,3
    8000a928:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a92c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a92e:	00c59763          	bne	a1,a2,8000a93c <tinst_tests_pf+0x277c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a932:	0026d683          	lhu	a3,2(a3)
    8000a936:	0106969b          	slliw	a3,a3,0x10
    8000a93a:	8f55                	or	a4,a4,a3
    8000a93c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a940:	068e                	slli	a3,a3,0x3
    8000a942:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a944:	8f75                	and	a4,a4,a3
    8000a946:	0001c597          	auipc	a1,0x1c
    8000a94a:	53a58593          	addi	a1,a1,1338 # 80026e80 <__func__.0+0x2c0>
    8000a94e:	00e79463          	bne	a5,a4,8000a956 <tinst_tests_pf+0x2796>
    8000a952:	ac7fe06f          	j	80009418 <tinst_tests_pf+0x1258>
    8000a956:	0001c597          	auipc	a1,0x1c
    8000a95a:	53a58593          	addi	a1,a1,1338 # 80026e90 <__func__.0+0x2d0>
    8000a95e:	abbfe06f          	j	80009418 <tinst_tests_pf+0x1258>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a962:	701c                	ld	a5,32(s0)
    8000a964:	e399                	bnez	a5,8000a96a <tinst_tests_pf+0x27aa>
    8000a966:	ff5fd06f          	j	8000895a <tinst_tests_pf+0x79a>
    8000a96a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a96c:	0016f713          	andi	a4,a3,1
    8000a970:	b2071ee3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a974:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a978:	460d                	li	a2,3
    8000a97a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a97e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a980:	00c59763          	bne	a1,a2,8000a98e <tinst_tests_pf+0x27ce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a984:	0026d683          	lhu	a3,2(a3)
    8000a988:	0106969b          	slliw	a3,a3,0x10
    8000a98c:	8f55                	or	a4,a4,a3
    8000a98e:	01f076b7          	lui	a3,0x1f07
    8000a992:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a996:	8f75                	and	a4,a4,a3
    8000a998:	00e78463          	beq	a5,a4,8000a9a0 <tinst_tests_pf+0x27e0>
    8000a99c:	fabfd06f          	j	80008946 <tinst_tests_pf+0x786>
    8000a9a0:	fbbfd06f          	j	8000895a <tinst_tests_pf+0x79a>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a9a4:	701c                	ld	a5,32(s0)
    8000a9a6:	0001c597          	auipc	a1,0x1c
    8000a9aa:	4da58593          	addi	a1,a1,1242 # 80026e80 <__func__.0+0x2c0>
    8000a9ae:	e399                	bnez	a5,8000a9b4 <tinst_tests_pf+0x27f4>
    8000a9b0:	b1bfe06f          	j	800094ca <tinst_tests_pf+0x130a>
    8000a9b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9b6:	0016f713          	andi	a4,a3,1
    8000a9ba:	ae0719e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000a9be:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9c2:	460d                	li	a2,3
    8000a9c4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9c8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9ca:	00c59763          	bne	a1,a2,8000a9d8 <tinst_tests_pf+0x2818>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9ce:	0026d683          	lhu	a3,2(a3)
    8000a9d2:	0106969b          	slliw	a3,a3,0x10
    8000a9d6:	8f55                	or	a4,a4,a3
    8000a9d8:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9dc:	068e                	slli	a3,a3,0x3
    8000a9de:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9e0:	8f75                	and	a4,a4,a3
    8000a9e2:	0001c597          	auipc	a1,0x1c
    8000a9e6:	49e58593          	addi	a1,a1,1182 # 80026e80 <__func__.0+0x2c0>
    8000a9ea:	00e79463          	bne	a5,a4,8000a9f2 <tinst_tests_pf+0x2832>
    8000a9ee:	addfe06f          	j	800094ca <tinst_tests_pf+0x130a>
    8000a9f2:	0001c597          	auipc	a1,0x1c
    8000a9f6:	49e58593          	addi	a1,a1,1182 # 80026e90 <__func__.0+0x2d0>
    8000a9fa:	ad1fe06f          	j	800094ca <tinst_tests_pf+0x130a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a9fe:	7004                	ld	s1,32(s0)
    8000aa00:	e099                	bnez	s1,8000aa06 <tinst_tests_pf+0x2846>
    8000aa02:	ffdfd06f          	j	800089fe <tinst_tests_pf+0x83e>
    8000aa06:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000aa08:	0017f713          	andi	a4,a5,1
    8000aa0c:	aa0710e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aa10:	0007d503          	lhu	a0,0(a5)
    8000aa14:	9b5f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000aa18:	67a1                	lui	a5,0x8
    8000aa1a:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000aa1c:	8d7d                	and	a0,a0,a5
    8000aa1e:	00a48463          	beq	s1,a0,8000aa26 <tinst_tests_pf+0x2866>
    8000aa22:	fc9fd06f          	j	800089ea <tinst_tests_pf+0x82a>
    8000aa26:	fd9fd06f          	j	800089fe <tinst_tests_pf+0x83e>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000aa2a:	701c                	ld	a5,32(s0)
    8000aa2c:	0001c597          	auipc	a1,0x1c
    8000aa30:	45458593          	addi	a1,a1,1108 # 80026e80 <__func__.0+0x2c0>
    8000aa34:	e399                	bnez	a5,8000aa3a <tinst_tests_pf+0x287a>
    8000aa36:	b47fe06f          	j	8000957c <tinst_tests_pf+0x13bc>
    8000aa3a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa3c:	0016f713          	andi	a4,a3,1
    8000aa40:	a60716e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aa44:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa48:	460d                	li	a2,3
    8000aa4a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa4e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa50:	00c59763          	bne	a1,a2,8000aa5e <tinst_tests_pf+0x289e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa54:	0026d683          	lhu	a3,2(a3)
    8000aa58:	0106969b          	slliw	a3,a3,0x10
    8000aa5c:	8f55                	or	a4,a4,a3
    8000aa5e:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa62:	068e                	slli	a3,a3,0x3
    8000aa64:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa66:	8f75                	and	a4,a4,a3
    8000aa68:	0001c597          	auipc	a1,0x1c
    8000aa6c:	41858593          	addi	a1,a1,1048 # 80026e80 <__func__.0+0x2c0>
    8000aa70:	00e79463          	bne	a5,a4,8000aa78 <tinst_tests_pf+0x28b8>
    8000aa74:	b09fe06f          	j	8000957c <tinst_tests_pf+0x13bc>
    8000aa78:	0001c597          	auipc	a1,0x1c
    8000aa7c:	41858593          	addi	a1,a1,1048 # 80026e90 <__func__.0+0x2d0>
    8000aa80:	afdfe06f          	j	8000957c <tinst_tests_pf+0x13bc>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000aa84:	02043983          	ld	s3,32(s0)
    8000aa88:	00099463          	bnez	s3,8000aa90 <tinst_tests_pf+0x28d0>
    8000aa8c:	818fe06f          	j	80008aa4 <tinst_tests_pf+0x8e4>
    8000aa90:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000aa92:	0017f713          	andi	a4,a5,1
    8000aa96:	a0071be3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aa9a:	0007d503          	lhu	a0,0(a5)
    8000aa9e:	92bf60ef          	jal	800013c8 <expand_compressed_instruction>
    8000aaa2:	67a1                	lui	a5,0x8
    8000aaa4:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000aaa6:	8d7d                	and	a0,a0,a5
    8000aaa8:	00a98463          	beq	s3,a0,8000aab0 <tinst_tests_pf+0x28f0>
    8000aaac:	fe5fd06f          	j	80008a90 <tinst_tests_pf+0x8d0>
    8000aab0:	ff5fd06f          	j	80008aa4 <tinst_tests_pf+0x8e4>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000aab4:	701c                	ld	a5,32(s0)
    8000aab6:	0001c597          	auipc	a1,0x1c
    8000aaba:	3ca58593          	addi	a1,a1,970 # 80026e80 <__func__.0+0x2c0>
    8000aabe:	e399                	bnez	a5,8000aac4 <tinst_tests_pf+0x2904>
    8000aac0:	b6ffe06f          	j	8000962e <tinst_tests_pf+0x146e>
    8000aac4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aac6:	0016f713          	andi	a4,a3,1
    8000aaca:	9e0711e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aace:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aad2:	460d                	li	a2,3
    8000aad4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aad8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aada:	00c59763          	bne	a1,a2,8000aae8 <tinst_tests_pf+0x2928>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aade:	0026d683          	lhu	a3,2(a3)
    8000aae2:	0106969b          	slliw	a3,a3,0x10
    8000aae6:	8f55                	or	a4,a4,a3
    8000aae8:	1ffe16b7          	lui	a3,0x1ffe1
    8000aaec:	068e                	slli	a3,a3,0x3
    8000aaee:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aaf0:	8f75                	and	a4,a4,a3
    8000aaf2:	0001c597          	auipc	a1,0x1c
    8000aaf6:	38e58593          	addi	a1,a1,910 # 80026e80 <__func__.0+0x2c0>
    8000aafa:	00e79463          	bne	a5,a4,8000ab02 <tinst_tests_pf+0x2942>
    8000aafe:	b31fe06f          	j	8000962e <tinst_tests_pf+0x146e>
    8000ab02:	0001c597          	auipc	a1,0x1c
    8000ab06:	38e58593          	addi	a1,a1,910 # 80026e90 <__func__.0+0x2d0>
    8000ab0a:	b25fe06f          	j	8000962e <tinst_tests_pf+0x146e>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ab0e:	02043983          	ld	s3,32(s0)
    8000ab12:	00099463          	bnez	s3,8000ab1a <tinst_tests_pf+0x295a>
    8000ab16:	834fe06f          	j	80008b4a <tinst_tests_pf+0x98a>
    8000ab1a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ab1c:	0017f713          	andi	a4,a5,1
    8000ab20:	980716e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ab24:	0007d503          	lhu	a0,0(a5)
    8000ab28:	8a1f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000ab2c:	01f077b7          	lui	a5,0x1f07
    8000ab30:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ab34:	8d7d                	and	a0,a0,a5
    8000ab36:	00a98463          	beq	s3,a0,8000ab3e <tinst_tests_pf+0x297e>
    8000ab3a:	ffdfd06f          	j	80008b36 <tinst_tests_pf+0x976>
    8000ab3e:	80cfe06f          	j	80008b4a <tinst_tests_pf+0x98a>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000ab42:	701c                	ld	a5,32(s0)
    8000ab44:	0001c597          	auipc	a1,0x1c
    8000ab48:	33c58593          	addi	a1,a1,828 # 80026e80 <__func__.0+0x2c0>
    8000ab4c:	e399                	bnez	a5,8000ab52 <tinst_tests_pf+0x2992>
    8000ab4e:	b93fe06f          	j	800096e0 <tinst_tests_pf+0x1520>
    8000ab52:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab54:	0016f713          	andi	a4,a3,1
    8000ab58:	94071ae3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ab5c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab60:	460d                	li	a2,3
    8000ab62:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab66:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab68:	00c59763          	bne	a1,a2,8000ab76 <tinst_tests_pf+0x29b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab6c:	0026d683          	lhu	a3,2(a3)
    8000ab70:	0106969b          	slliw	a3,a3,0x10
    8000ab74:	8f55                	or	a4,a4,a3
    8000ab76:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab7a:	068e                	slli	a3,a3,0x3
    8000ab7c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab7e:	8f75                	and	a4,a4,a3
    8000ab80:	0001c597          	auipc	a1,0x1c
    8000ab84:	30058593          	addi	a1,a1,768 # 80026e80 <__func__.0+0x2c0>
    8000ab88:	00e79463          	bne	a5,a4,8000ab90 <tinst_tests_pf+0x29d0>
    8000ab8c:	b55fe06f          	j	800096e0 <tinst_tests_pf+0x1520>
    8000ab90:	0001c597          	auipc	a1,0x1c
    8000ab94:	30058593          	addi	a1,a1,768 # 80026e90 <__func__.0+0x2d0>
    8000ab98:	b49fe06f          	j	800096e0 <tinst_tests_pf+0x1520>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000ab9c:	7004                	ld	s1,32(s0)
    8000ab9e:	e099                	bnez	s1,8000aba4 <tinst_tests_pf+0x29e4>
    8000aba0:	858fe06f          	j	80008bf8 <tinst_tests_pf+0xa38>
    8000aba4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000aba6:	0017f713          	andi	a4,a5,1
    8000abaa:	900711e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000abae:	0007d503          	lhu	a0,0(a5)
    8000abb2:	817f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000abb6:	01f077b7          	lui	a5,0x1f07
    8000abba:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000abbe:	8d7d                	and	a0,a0,a5
    8000abc0:	00a48463          	beq	s1,a0,8000abc8 <tinst_tests_pf+0x2a08>
    8000abc4:	820fe06f          	j	80008be4 <tinst_tests_pf+0xa24>
    8000abc8:	830fe06f          	j	80008bf8 <tinst_tests_pf+0xa38>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000abcc:	701c                	ld	a5,32(s0)
    8000abce:	0001c597          	auipc	a1,0x1c
    8000abd2:	2b258593          	addi	a1,a1,690 # 80026e80 <__func__.0+0x2c0>
    8000abd6:	e399                	bnez	a5,8000abdc <tinst_tests_pf+0x2a1c>
    8000abd8:	bb3fe06f          	j	8000978a <tinst_tests_pf+0x15ca>
    8000abdc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abde:	0016f713          	andi	a4,a3,1
    8000abe2:	8c0715e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000abe6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abea:	460d                	li	a2,3
    8000abec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abf0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abf2:	00c59763          	bne	a1,a2,8000ac00 <tinst_tests_pf+0x2a40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abf6:	0026d683          	lhu	a3,2(a3)
    8000abfa:	0106969b          	slliw	a3,a3,0x10
    8000abfe:	8f55                	or	a4,a4,a3
    8000ac00:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac04:	068e                	slli	a3,a3,0x3
    8000ac06:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac08:	8f75                	and	a4,a4,a3
    8000ac0a:	0001c597          	auipc	a1,0x1c
    8000ac0e:	27658593          	addi	a1,a1,630 # 80026e80 <__func__.0+0x2c0>
    8000ac12:	00e79463          	bne	a5,a4,8000ac1a <tinst_tests_pf+0x2a5a>
    8000ac16:	b75fe06f          	j	8000978a <tinst_tests_pf+0x15ca>
    8000ac1a:	0001c597          	auipc	a1,0x1c
    8000ac1e:	27658593          	addi	a1,a1,630 # 80026e90 <__func__.0+0x2d0>
    8000ac22:	b69fe06f          	j	8000978a <tinst_tests_pf+0x15ca>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000ac26:	701c                	ld	a5,32(s0)
    8000ac28:	0001c597          	auipc	a1,0x1c
    8000ac2c:	25858593          	addi	a1,a1,600 # 80026e80 <__func__.0+0x2c0>
    8000ac30:	e399                	bnez	a5,8000ac36 <tinst_tests_pf+0x2a76>
    8000ac32:	c03fe06f          	j	80009834 <tinst_tests_pf+0x1674>
    8000ac36:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac38:	0016f713          	andi	a4,a3,1
    8000ac3c:	860718e3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ac40:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac44:	460d                	li	a2,3
    8000ac46:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac4a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac4c:	00c59763          	bne	a1,a2,8000ac5a <tinst_tests_pf+0x2a9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac50:	0026d683          	lhu	a3,2(a3)
    8000ac54:	0106969b          	slliw	a3,a3,0x10
    8000ac58:	8f55                	or	a4,a4,a3
    8000ac5a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac5e:	068e                	slli	a3,a3,0x3
    8000ac60:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac62:	8f75                	and	a4,a4,a3
    8000ac64:	0001c597          	auipc	a1,0x1c
    8000ac68:	21c58593          	addi	a1,a1,540 # 80026e80 <__func__.0+0x2c0>
    8000ac6c:	00e79463          	bne	a5,a4,8000ac74 <tinst_tests_pf+0x2ab4>
    8000ac70:	bc5fe06f          	j	80009834 <tinst_tests_pf+0x1674>
    8000ac74:	0001c597          	auipc	a1,0x1c
    8000ac78:	21c58593          	addi	a1,a1,540 # 80026e90 <__func__.0+0x2d0>
    8000ac7c:	bb9fe06f          	j	80009834 <tinst_tests_pf+0x1674>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000ac80:	701c                	ld	a5,32(s0)
    8000ac82:	0001c597          	auipc	a1,0x1c
    8000ac86:	1fe58593          	addi	a1,a1,510 # 80026e80 <__func__.0+0x2c0>
    8000ac8a:	e399                	bnez	a5,8000ac90 <tinst_tests_pf+0x2ad0>
    8000ac8c:	c53fe06f          	j	800098de <tinst_tests_pf+0x171e>
    8000ac90:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac92:	0016f713          	andi	a4,a3,1
    8000ac96:	80071be3          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ac9a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac9e:	460d                	li	a2,3
    8000aca0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aca4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aca6:	00c59763          	bne	a1,a2,8000acb4 <tinst_tests_pf+0x2af4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acaa:	0026d683          	lhu	a3,2(a3)
    8000acae:	0106969b          	slliw	a3,a3,0x10
    8000acb2:	8f55                	or	a4,a4,a3
    8000acb4:	1ffe16b7          	lui	a3,0x1ffe1
    8000acb8:	068e                	slli	a3,a3,0x3
    8000acba:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000acbc:	8f75                	and	a4,a4,a3
    8000acbe:	0001c597          	auipc	a1,0x1c
    8000acc2:	1c258593          	addi	a1,a1,450 # 80026e80 <__func__.0+0x2c0>
    8000acc6:	00e79463          	bne	a5,a4,8000acce <tinst_tests_pf+0x2b0e>
    8000acca:	c15fe06f          	j	800098de <tinst_tests_pf+0x171e>
    8000acce:	0001c597          	auipc	a1,0x1c
    8000acd2:	1c258593          	addi	a1,a1,450 # 80026e90 <__func__.0+0x2d0>
    8000acd6:	c09fe06f          	j	800098de <tinst_tests_pf+0x171e>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000acda:	701c                	ld	a5,32(s0)
    8000acdc:	0001c597          	auipc	a1,0x1c
    8000ace0:	1a458593          	addi	a1,a1,420 # 80026e80 <__func__.0+0x2c0>
    8000ace4:	e399                	bnez	a5,8000acea <tinst_tests_pf+0x2b2a>
    8000ace6:	ca3fe06f          	j	80009988 <tinst_tests_pf+0x17c8>
    8000acea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000acec:	0016f713          	andi	a4,a3,1
    8000acf0:	fa071e63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000acf4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000acf8:	460d                	li	a2,3
    8000acfa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000acfe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad00:	00c59763          	bne	a1,a2,8000ad0e <tinst_tests_pf+0x2b4e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad04:	0026d683          	lhu	a3,2(a3)
    8000ad08:	0106969b          	slliw	a3,a3,0x10
    8000ad0c:	8f55                	or	a4,a4,a3
    8000ad0e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad12:	068e                	slli	a3,a3,0x3
    8000ad14:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad16:	8f75                	and	a4,a4,a3
    8000ad18:	0001c597          	auipc	a1,0x1c
    8000ad1c:	16858593          	addi	a1,a1,360 # 80026e80 <__func__.0+0x2c0>
    8000ad20:	00e79463          	bne	a5,a4,8000ad28 <tinst_tests_pf+0x2b68>
    8000ad24:	c65fe06f          	j	80009988 <tinst_tests_pf+0x17c8>
    8000ad28:	0001c597          	auipc	a1,0x1c
    8000ad2c:	16858593          	addi	a1,a1,360 # 80026e90 <__func__.0+0x2d0>
    8000ad30:	c59fe06f          	j	80009988 <tinst_tests_pf+0x17c8>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000ad34:	701c                	ld	a5,32(s0)
    8000ad36:	e399                	bnez	a5,8000ad3c <tinst_tests_pf+0x2b7c>
    8000ad38:	982fe06f          	j	80008eba <tinst_tests_pf+0xcfa>
    8000ad3c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad3e:	0016f713          	andi	a4,a3,1
    8000ad42:	f6071563          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ad46:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad4a:	460d                	li	a2,3
    8000ad4c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad50:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad52:	00c59763          	bne	a1,a2,8000ad60 <tinst_tests_pf+0x2ba0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad56:	0026d683          	lhu	a3,2(a3)
    8000ad5a:	0106969b          	slliw	a3,a3,0x10
    8000ad5e:	8f55                	or	a4,a4,a3
    8000ad60:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad64:	068e                	slli	a3,a3,0x3
    8000ad66:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad68:	8f75                	and	a4,a4,a3
    8000ad6a:	00e78463          	beq	a5,a4,8000ad72 <tinst_tests_pf+0x2bb2>
    8000ad6e:	938fe06f          	j	80008ea6 <tinst_tests_pf+0xce6>
    8000ad72:	948fe06f          	j	80008eba <tinst_tests_pf+0xcfa>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000ad76:	701c                	ld	a5,32(s0)
    8000ad78:	e399                	bnez	a5,8000ad7e <tinst_tests_pf+0x2bbe>
    8000ad7a:	9f2fe06f          	j	80008f6c <tinst_tests_pf+0xdac>
    8000ad7e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad80:	0016f713          	andi	a4,a3,1
    8000ad84:	f2071463          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ad88:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad8c:	460d                	li	a2,3
    8000ad8e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad92:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad94:	00c59763          	bne	a1,a2,8000ada2 <tinst_tests_pf+0x2be2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad98:	0026d683          	lhu	a3,2(a3)
    8000ad9c:	0106969b          	slliw	a3,a3,0x10
    8000ada0:	8f55                	or	a4,a4,a3
    8000ada2:	1ffe16b7          	lui	a3,0x1ffe1
    8000ada6:	068e                	slli	a3,a3,0x3
    8000ada8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000adaa:	8f75                	and	a4,a4,a3
    8000adac:	00e78463          	beq	a5,a4,8000adb4 <tinst_tests_pf+0x2bf4>
    8000adb0:	9a8fe06f          	j	80008f58 <tinst_tests_pf+0xd98>
    8000adb4:	9b8fe06f          	j	80008f6c <tinst_tests_pf+0xdac>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000adb8:	701c                	ld	a5,32(s0)
    8000adba:	e399                	bnez	a5,8000adc0 <tinst_tests_pf+0x2c00>
    8000adbc:	a62fe06f          	j	8000901e <tinst_tests_pf+0xe5e>
    8000adc0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000adc2:	0016f713          	andi	a4,a3,1
    8000adc6:	ee071363          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000adca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000adce:	460d                	li	a2,3
    8000add0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000add4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000add6:	00c59763          	bne	a1,a2,8000ade4 <tinst_tests_pf+0x2c24>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adda:	0026d683          	lhu	a3,2(a3)
    8000adde:	0106969b          	slliw	a3,a3,0x10
    8000ade2:	8f55                	or	a4,a4,a3
    8000ade4:	1ffe16b7          	lui	a3,0x1ffe1
    8000ade8:	068e                	slli	a3,a3,0x3
    8000adea:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000adec:	8f75                	and	a4,a4,a3
    8000adee:	00e78463          	beq	a5,a4,8000adf6 <tinst_tests_pf+0x2c36>
    8000adf2:	a18fe06f          	j	8000900a <tinst_tests_pf+0xe4a>
    8000adf6:	a28fe06f          	j	8000901e <tinst_tests_pf+0xe5e>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000adfa:	701c                	ld	a5,32(s0)
    8000adfc:	e399                	bnez	a5,8000ae02 <tinst_tests_pf+0x2c42>
    8000adfe:	ad2fe06f          	j	800090d0 <tinst_tests_pf+0xf10>
    8000ae02:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae04:	0016f713          	andi	a4,a3,1
    8000ae08:	ea071263          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ae0c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae10:	460d                	li	a2,3
    8000ae12:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae16:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae18:	00c59763          	bne	a1,a2,8000ae26 <tinst_tests_pf+0x2c66>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae1c:	0026d683          	lhu	a3,2(a3)
    8000ae20:	0106969b          	slliw	a3,a3,0x10
    8000ae24:	8f55                	or	a4,a4,a3
    8000ae26:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae2a:	068e                	slli	a3,a3,0x3
    8000ae2c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae2e:	8f75                	and	a4,a4,a3
    8000ae30:	00e78463          	beq	a5,a4,8000ae38 <tinst_tests_pf+0x2c78>
    8000ae34:	a88fe06f          	j	800090bc <tinst_tests_pf+0xefc>
    8000ae38:	a98fe06f          	j	800090d0 <tinst_tests_pf+0xf10>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000ae3c:	701c                	ld	a5,32(s0)
    8000ae3e:	e399                	bnez	a5,8000ae44 <tinst_tests_pf+0x2c84>
    8000ae40:	b42fe06f          	j	80009182 <tinst_tests_pf+0xfc2>
    8000ae44:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae46:	0016f713          	andi	a4,a3,1
    8000ae4a:	e6071163          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ae4e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae52:	460d                	li	a2,3
    8000ae54:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae58:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae5a:	00c59763          	bne	a1,a2,8000ae68 <tinst_tests_pf+0x2ca8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae5e:	0026d683          	lhu	a3,2(a3)
    8000ae62:	0106969b          	slliw	a3,a3,0x10
    8000ae66:	8f55                	or	a4,a4,a3
    8000ae68:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae6c:	068e                	slli	a3,a3,0x3
    8000ae6e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae70:	8f75                	and	a4,a4,a3
    8000ae72:	00e78463          	beq	a5,a4,8000ae7a <tinst_tests_pf+0x2cba>
    8000ae76:	af8fe06f          	j	8000916e <tinst_tests_pf+0xfae>
    8000ae7a:	b08fe06f          	j	80009182 <tinst_tests_pf+0xfc2>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000ae7e:	701c                	ld	a5,32(s0)
    8000ae80:	e399                	bnez	a5,8000ae86 <tinst_tests_pf+0x2cc6>
    8000ae82:	bb2fe06f          	j	80009234 <tinst_tests_pf+0x1074>
    8000ae86:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae88:	0016f713          	andi	a4,a3,1
    8000ae8c:	e2071063          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000ae90:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae94:	460d                	li	a2,3
    8000ae96:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae9a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae9c:	00c59763          	bne	a1,a2,8000aeaa <tinst_tests_pf+0x2cea>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aea0:	0026d683          	lhu	a3,2(a3)
    8000aea4:	0106969b          	slliw	a3,a3,0x10
    8000aea8:	8f55                	or	a4,a4,a3
    8000aeaa:	1ffe16b7          	lui	a3,0x1ffe1
    8000aeae:	068e                	slli	a3,a3,0x3
    8000aeb0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aeb2:	8f75                	and	a4,a4,a3
    8000aeb4:	00e78463          	beq	a5,a4,8000aebc <tinst_tests_pf+0x2cfc>
    8000aeb8:	b68fe06f          	j	80009220 <tinst_tests_pf+0x1060>
    8000aebc:	b78fe06f          	j	80009234 <tinst_tests_pf+0x1074>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000aec0:	701c                	ld	a5,32(s0)
    8000aec2:	e399                	bnez	a5,8000aec8 <tinst_tests_pf+0x2d08>
    8000aec4:	c22fe06f          	j	800092e6 <tinst_tests_pf+0x1126>
    8000aec8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aeca:	0016f713          	andi	a4,a3,1
    8000aece:	dc071f63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000aed2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aed6:	460d                	li	a2,3
    8000aed8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aedc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aede:	00c59763          	bne	a1,a2,8000aeec <tinst_tests_pf+0x2d2c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aee2:	0026d683          	lhu	a3,2(a3)
    8000aee6:	0106969b          	slliw	a3,a3,0x10
    8000aeea:	8f55                	or	a4,a4,a3
    8000aeec:	1ffe16b7          	lui	a3,0x1ffe1
    8000aef0:	068e                	slli	a3,a3,0x3
    8000aef2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aef4:	8f75                	and	a4,a4,a3
    8000aef6:	00e78463          	beq	a5,a4,8000aefe <tinst_tests_pf+0x2d3e>
    8000aefa:	bd8fe06f          	j	800092d2 <tinst_tests_pf+0x1112>
    8000aefe:	be8fe06f          	j	800092e6 <tinst_tests_pf+0x1126>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000af02:	701c                	ld	a5,32(s0)
    8000af04:	e399                	bnez	a5,8000af0a <tinst_tests_pf+0x2d4a>
    8000af06:	c96fe06f          	j	8000939c <tinst_tests_pf+0x11dc>
    8000af0a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af0c:	0016f713          	andi	a4,a3,1
    8000af10:	d8071e63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000af14:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af18:	460d                	li	a2,3
    8000af1a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af1e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af20:	00c59763          	bne	a1,a2,8000af2e <tinst_tests_pf+0x2d6e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af24:	0026d683          	lhu	a3,2(a3)
    8000af28:	0106969b          	slliw	a3,a3,0x10
    8000af2c:	8f55                	or	a4,a4,a3
    8000af2e:	1ffe16b7          	lui	a3,0x1ffe1
    8000af32:	068e                	slli	a3,a3,0x3
    8000af34:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af36:	8f75                	and	a4,a4,a3
    8000af38:	00e78463          	beq	a5,a4,8000af40 <tinst_tests_pf+0x2d80>
    8000af3c:	c4cfe06f          	j	80009388 <tinst_tests_pf+0x11c8>
    8000af40:	c5cfe06f          	j	8000939c <tinst_tests_pf+0x11dc>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000af44:	701c                	ld	a5,32(s0)
    8000af46:	e399                	bnez	a5,8000af4c <tinst_tests_pf+0x2d8c>
    8000af48:	d06fe06f          	j	8000944e <tinst_tests_pf+0x128e>
    8000af4c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af4e:	0016f713          	andi	a4,a3,1
    8000af52:	d4071d63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000af56:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af5a:	460d                	li	a2,3
    8000af5c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af60:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af62:	00c59763          	bne	a1,a2,8000af70 <tinst_tests_pf+0x2db0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af66:	0026d683          	lhu	a3,2(a3)
    8000af6a:	0106969b          	slliw	a3,a3,0x10
    8000af6e:	8f55                	or	a4,a4,a3
    8000af70:	1ffe16b7          	lui	a3,0x1ffe1
    8000af74:	068e                	slli	a3,a3,0x3
    8000af76:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af78:	8f75                	and	a4,a4,a3
    8000af7a:	00e78463          	beq	a5,a4,8000af82 <tinst_tests_pf+0x2dc2>
    8000af7e:	cbcfe06f          	j	8000943a <tinst_tests_pf+0x127a>
    8000af82:	cccfe06f          	j	8000944e <tinst_tests_pf+0x128e>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000af86:	701c                	ld	a5,32(s0)
    8000af88:	e399                	bnez	a5,8000af8e <tinst_tests_pf+0x2dce>
    8000af8a:	d76fe06f          	j	80009500 <tinst_tests_pf+0x1340>
    8000af8e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af90:	0016f713          	andi	a4,a3,1
    8000af94:	d0071c63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000af98:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af9c:	460d                	li	a2,3
    8000af9e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afa2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afa4:	00c59763          	bne	a1,a2,8000afb2 <tinst_tests_pf+0x2df2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afa8:	0026d683          	lhu	a3,2(a3)
    8000afac:	0106969b          	slliw	a3,a3,0x10
    8000afb0:	8f55                	or	a4,a4,a3
    8000afb2:	1ffe16b7          	lui	a3,0x1ffe1
    8000afb6:	068e                	slli	a3,a3,0x3
    8000afb8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000afba:	8f75                	and	a4,a4,a3
    8000afbc:	00e78463          	beq	a5,a4,8000afc4 <tinst_tests_pf+0x2e04>
    8000afc0:	d2cfe06f          	j	800094ec <tinst_tests_pf+0x132c>
    8000afc4:	d3cfe06f          	j	80009500 <tinst_tests_pf+0x1340>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000afc8:	701c                	ld	a5,32(s0)
    8000afca:	e399                	bnez	a5,8000afd0 <tinst_tests_pf+0x2e10>
    8000afcc:	de6fe06f          	j	800095b2 <tinst_tests_pf+0x13f2>
    8000afd0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afd2:	0016f713          	andi	a4,a3,1
    8000afd6:	cc071b63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000afda:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afde:	460d                	li	a2,3
    8000afe0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afe4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afe6:	00c59763          	bne	a1,a2,8000aff4 <tinst_tests_pf+0x2e34>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afea:	0026d683          	lhu	a3,2(a3)
    8000afee:	0106969b          	slliw	a3,a3,0x10
    8000aff2:	8f55                	or	a4,a4,a3
    8000aff4:	1ffe16b7          	lui	a3,0x1ffe1
    8000aff8:	068e                	slli	a3,a3,0x3
    8000affa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000affc:	8f75                	and	a4,a4,a3
    8000affe:	00e78463          	beq	a5,a4,8000b006 <tinst_tests_pf+0x2e46>
    8000b002:	d9cfe06f          	j	8000959e <tinst_tests_pf+0x13de>
    8000b006:	dacfe06f          	j	800095b2 <tinst_tests_pf+0x13f2>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b00a:	6418                	ld	a4,8(s0)
    8000b00c:	47bd                	li	a5,15
    8000b00e:	00f70463          	beq	a4,a5,8000b016 <tinst_tests_pf+0x2e56>
    8000b012:	f1cfe06f          	j	8000972e <tinst_tests_pf+0x156e>
    8000b016:	701c                	ld	a5,32(s0)
    8000b018:	e399                	bnez	a5,8000b01e <tinst_tests_pf+0x2e5e>
    8000b01a:	f16fe06f          	j	80009730 <tinst_tests_pf+0x1570>
    8000b01e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b020:	0016f713          	andi	a4,a3,1
    8000b024:	c8071463          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b028:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b02c:	460d                	li	a2,3
    8000b02e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b032:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b034:	00c59763          	bne	a1,a2,8000b042 <tinst_tests_pf+0x2e82>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b038:	0026d683          	lhu	a3,2(a3)
    8000b03c:	0106969b          	slliw	a3,a3,0x10
    8000b040:	8f55                	or	a4,a4,a3
    8000b042:	1ffe16b7          	lui	a3,0x1ffe1
    8000b046:	068e                	slli	a3,a3,0x3
    8000b048:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b04a:	8f75                	and	a4,a4,a3
    8000b04c:	40f70933          	sub	s2,a4,a5
    8000b050:	00193913          	seqz	s2,s2
    8000b054:	edcfe06f          	j	80009730 <tinst_tests_pf+0x1570>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b058:	6418                	ld	a4,8(s0)
    8000b05a:	47bd                	li	a5,15
    8000b05c:	00f70463          	beq	a4,a5,8000b064 <tinst_tests_pf+0x2ea4>
    8000b060:	f78fe06f          	j	800097d8 <tinst_tests_pf+0x1618>
    8000b064:	701c                	ld	a5,32(s0)
    8000b066:	e399                	bnez	a5,8000b06c <tinst_tests_pf+0x2eac>
    8000b068:	f72fe06f          	j	800097da <tinst_tests_pf+0x161a>
    8000b06c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b06e:	0016f713          	andi	a4,a3,1
    8000b072:	c2071d63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b076:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b07a:	460d                	li	a2,3
    8000b07c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b080:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b082:	00c59763          	bne	a1,a2,8000b090 <tinst_tests_pf+0x2ed0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b086:	0026d683          	lhu	a3,2(a3)
    8000b08a:	0106969b          	slliw	a3,a3,0x10
    8000b08e:	8f55                	or	a4,a4,a3
    8000b090:	1ffe16b7          	lui	a3,0x1ffe1
    8000b094:	068e                	slli	a3,a3,0x3
    8000b096:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b098:	8f75                	and	a4,a4,a3
    8000b09a:	40f70933          	sub	s2,a4,a5
    8000b09e:	00193913          	seqz	s2,s2
    8000b0a2:	f38fe06f          	j	800097da <tinst_tests_pf+0x161a>
    instruction = *((uint16_t*)addr);
    8000b0a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0aa:	460d                	li	a2,3
    8000b0ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0b2:	00c59763          	bne	a1,a2,8000b0c0 <tinst_tests_pf+0x2f00>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0b6:	0026d683          	lhu	a3,2(a3)
    8000b0ba:	0106969b          	slliw	a3,a3,0x10
    8000b0be:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000b0c0:	1746                	slli	a4,a4,0x31
    8000b0c2:	9345                	srli	a4,a4,0x31
    8000b0c4:	00e78463          	beq	a5,a4,8000b0cc <tinst_tests_pf+0x2f0c>
    8000b0c8:	b04fd06f          	j	800083cc <tinst_tests_pf+0x20c>
    8000b0cc:	b14fd06f          	j	800083e0 <tinst_tests_pf+0x220>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b0d0:	6418                	ld	a4,8(s0)
    8000b0d2:	47bd                	li	a5,15
    8000b0d4:	00f70463          	beq	a4,a5,8000b0dc <tinst_tests_pf+0x2f1c>
    8000b0d8:	faafe06f          	j	80009882 <tinst_tests_pf+0x16c2>
    8000b0dc:	701c                	ld	a5,32(s0)
    8000b0de:	e399                	bnez	a5,8000b0e4 <tinst_tests_pf+0x2f24>
    8000b0e0:	fa4fe06f          	j	80009884 <tinst_tests_pf+0x16c4>
    8000b0e4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0e6:	0016f713          	andi	a4,a3,1
    8000b0ea:	bc071163          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b0ee:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0f2:	460d                	li	a2,3
    8000b0f4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0f8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0fa:	00c59763          	bne	a1,a2,8000b108 <tinst_tests_pf+0x2f48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0fe:	0026d683          	lhu	a3,2(a3)
    8000b102:	0106969b          	slliw	a3,a3,0x10
    8000b106:	8f55                	or	a4,a4,a3
    8000b108:	1ffe16b7          	lui	a3,0x1ffe1
    8000b10c:	068e                	slli	a3,a3,0x3
    8000b10e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b110:	8f75                	and	a4,a4,a3
    8000b112:	40f70933          	sub	s2,a4,a5
    8000b116:	00193913          	seqz	s2,s2
    8000b11a:	f6afe06f          	j	80009884 <tinst_tests_pf+0x16c4>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b11e:	6418                	ld	a4,8(s0)
    8000b120:	47bd                	li	a5,15
    8000b122:	00f70463          	beq	a4,a5,8000b12a <tinst_tests_pf+0x2f6a>
    8000b126:	807fe06f          	j	8000992c <tinst_tests_pf+0x176c>
    8000b12a:	701c                	ld	a5,32(s0)
    8000b12c:	e399                	bnez	a5,8000b132 <tinst_tests_pf+0x2f72>
    8000b12e:	801fe06f          	j	8000992e <tinst_tests_pf+0x176e>
    8000b132:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b134:	0016f713          	andi	a4,a3,1
    8000b138:	b6071a63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b13c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b140:	460d                	li	a2,3
    8000b142:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b146:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b148:	00c59763          	bne	a1,a2,8000b156 <tinst_tests_pf+0x2f96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b14c:	0026d683          	lhu	a3,2(a3)
    8000b150:	0106969b          	slliw	a3,a3,0x10
    8000b154:	8f55                	or	a4,a4,a3
    8000b156:	1ffe16b7          	lui	a3,0x1ffe1
    8000b15a:	068e                	slli	a3,a3,0x3
    8000b15c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b15e:	8f75                	and	a4,a4,a3
    8000b160:	40f70933          	sub	s2,a4,a5
    8000b164:	00193913          	seqz	s2,s2
    8000b168:	fc6fe06f          	j	8000992e <tinst_tests_pf+0x176e>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000b16c:	02043983          	ld	s3,32(s0)
    8000b170:	00099463          	bnez	s3,8000b178 <tinst_tests_pf+0x2fb8>
    8000b174:	9f9fd06f          	j	80008b6c <tinst_tests_pf+0x9ac>
    8000b178:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b17a:	0017f713          	andi	a4,a5,1
    8000b17e:	b2071763          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b182:	0007d503          	lhu	a0,0(a5)
    8000b186:	a42f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b18a:	01f077b7          	lui	a5,0x1f07
    8000b18e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b192:	00f57933          	and	s2,a0,a5
    8000b196:	41390933          	sub	s2,s2,s3
    8000b19a:	00193913          	seqz	s2,s2
    8000b19e:	9cffd06f          	j	80008b6c <tinst_tests_pf+0x9ac>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000b1a2:	7004                	ld	s1,32(s0)
    8000b1a4:	e099                	bnez	s1,8000b1aa <tinst_tests_pf+0x2fea>
    8000b1a6:	a75fd06f          	j	80008c1a <tinst_tests_pf+0xa5a>
    8000b1aa:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b1ac:	0017f713          	andi	a4,a5,1
    8000b1b0:	ae071e63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b1b4:	0007d503          	lhu	a0,0(a5)
    8000b1b8:	a10f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b1bc:	01f077b7          	lui	a5,0x1f07
    8000b1c0:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b1c4:	00f57933          	and	s2,a0,a5
    8000b1c8:	40990933          	sub	s2,s2,s1
    8000b1cc:	00193913          	seqz	s2,s2
    8000b1d0:	a4bfd06f          	j	80008c1a <tinst_tests_pf+0xa5a>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000b1d4:	701c                	ld	a5,32(s0)
    8000b1d6:	e399                	bnez	a5,8000b1dc <tinst_tests_pf+0x301c>
    8000b1d8:	af9fd06f          	j	80008cd0 <tinst_tests_pf+0xb10>
    8000b1dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1de:	0016f713          	andi	a4,a3,1
    8000b1e2:	ac071563          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b1e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b1ea:	460d                	li	a2,3
    8000b1ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b1f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b1f2:	00c59763          	bne	a1,a2,8000b200 <tinst_tests_pf+0x3040>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b1f6:	0026d683          	lhu	a3,2(a3)
    8000b1fa:	0106969b          	slliw	a3,a3,0x10
    8000b1fe:	8f55                	or	a4,a4,a3
    8000b200:	1ffe16b7          	lui	a3,0x1ffe1
    8000b204:	068e                	slli	a3,a3,0x3
    8000b206:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b208:	8f75                	and	a4,a4,a3
    8000b20a:	40f70933          	sub	s2,a4,a5
    8000b20e:	00193913          	seqz	s2,s2
    8000b212:	abffd06f          	j	80008cd0 <tinst_tests_pf+0xb10>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000b216:	701c                	ld	a5,32(s0)
    8000b218:	e399                	bnez	a5,8000b21e <tinst_tests_pf+0x305e>
    8000b21a:	b6bfd06f          	j	80008d84 <tinst_tests_pf+0xbc4>
    8000b21e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b220:	0016f713          	andi	a4,a3,1
    8000b224:	a8071463          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b228:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b22c:	460d                	li	a2,3
    8000b22e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b232:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b234:	00c59763          	bne	a1,a2,8000b242 <tinst_tests_pf+0x3082>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b238:	0026d683          	lhu	a3,2(a3)
    8000b23c:	0106969b          	slliw	a3,a3,0x10
    8000b240:	8f55                	or	a4,a4,a3
    8000b242:	1ffe16b7          	lui	a3,0x1ffe1
    8000b246:	068e                	slli	a3,a3,0x3
    8000b248:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b24a:	8f75                	and	a4,a4,a3
    8000b24c:	40f70933          	sub	s2,a4,a5
    8000b250:	00193913          	seqz	s2,s2
    8000b254:	b31fd06f          	j	80008d84 <tinst_tests_pf+0xbc4>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000b258:	701c                	ld	a5,32(s0)
    8000b25a:	e399                	bnez	a5,8000b260 <tinst_tests_pf+0x30a0>
    8000b25c:	bdbfd06f          	j	80008e36 <tinst_tests_pf+0xc76>
    8000b260:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b262:	0016f713          	andi	a4,a3,1
    8000b266:	a4071363          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b26a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b26e:	460d                	li	a2,3
    8000b270:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b274:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b276:	00c59763          	bne	a1,a2,8000b284 <tinst_tests_pf+0x30c4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b27a:	0026d683          	lhu	a3,2(a3)
    8000b27e:	0106969b          	slliw	a3,a3,0x10
    8000b282:	8f55                	or	a4,a4,a3
    8000b284:	1ffe16b7          	lui	a3,0x1ffe1
    8000b288:	068e                	slli	a3,a3,0x3
    8000b28a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b28c:	8f75                	and	a4,a4,a3
    8000b28e:	40f70933          	sub	s2,a4,a5
    8000b292:	00193913          	seqz	s2,s2
    8000b296:	ba1fd06f          	j	80008e36 <tinst_tests_pf+0xc76>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000b29a:	701c                	ld	a5,32(s0)
    8000b29c:	e399                	bnez	a5,8000b2a2 <tinst_tests_pf+0x30e2>
    8000b29e:	c3ffd06f          	j	80008edc <tinst_tests_pf+0xd1c>
    8000b2a2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b2a4:	0016f713          	andi	a4,a3,1
    8000b2a8:	a0071263          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b2ac:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b2b0:	460d                	li	a2,3
    8000b2b2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b2b6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b2b8:	00c59763          	bne	a1,a2,8000b2c6 <tinst_tests_pf+0x3106>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b2bc:	0026d683          	lhu	a3,2(a3)
    8000b2c0:	0106969b          	slliw	a3,a3,0x10
    8000b2c4:	8f55                	or	a4,a4,a3
    8000b2c6:	1ffe16b7          	lui	a3,0x1ffe1
    8000b2ca:	068e                	slli	a3,a3,0x3
    8000b2cc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b2ce:	8f75                	and	a4,a4,a3
    8000b2d0:	40f70933          	sub	s2,a4,a5
    8000b2d4:	00193913          	seqz	s2,s2
    8000b2d8:	c05fd06f          	j	80008edc <tinst_tests_pf+0xd1c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000b2dc:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b2de:	0017f713          	andi	a4,a5,1
    8000b2e2:	9c071563          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b2e6:	0007d503          	lhu	a0,0(a5)
    8000b2ea:	8def60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b2ee:	67a1                	lui	a5,0x8
    8000b2f0:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000b2f2:	8d7d                	and	a0,a0,a5
    8000b2f4:	00a48463          	beq	s1,a0,8000b2fc <tinst_tests_pf+0x313c>
    8000b2f8:	ec8fd06f          	j	800089c0 <tinst_tests_pf+0x800>
    8000b2fc:	0001c597          	auipc	a1,0x1c
    8000b300:	b8458593          	addi	a1,a1,-1148 # 80026e80 <__func__.0+0x2c0>
    8000b304:	ec4fd06f          	j	800089c8 <tinst_tests_pf+0x808>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000b308:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b30a:	0017f713          	andi	a4,a5,1
    8000b30e:	98071f63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b312:	0007d503          	lhu	a0,0(a5)
    8000b316:	8b2f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b31a:	67a1                	lui	a5,0x8
    8000b31c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000b31e:	8d7d                	and	a0,a0,a5
    8000b320:	00a98463          	beq	s3,a0,8000b328 <tinst_tests_pf+0x3168>
    8000b324:	f42fd06f          	j	80008a66 <tinst_tests_pf+0x8a6>
    8000b328:	0001c597          	auipc	a1,0x1c
    8000b32c:	b5858593          	addi	a1,a1,-1192 # 80026e80 <__func__.0+0x2c0>
    8000b330:	f3efd06f          	j	80008a6e <tinst_tests_pf+0x8ae>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000b334:	701c                	ld	a5,32(s0)
    8000b336:	e399                	bnez	a5,8000b33c <tinst_tests_pf+0x317c>
    8000b338:	c57fd06f          	j	80008f8e <tinst_tests_pf+0xdce>
    8000b33c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b33e:	0016f713          	andi	a4,a3,1
    8000b342:	96071563          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b346:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b34a:	460d                	li	a2,3
    8000b34c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b350:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b352:	00c59763          	bne	a1,a2,8000b360 <tinst_tests_pf+0x31a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b356:	0026d683          	lhu	a3,2(a3)
    8000b35a:	0106969b          	slliw	a3,a3,0x10
    8000b35e:	8f55                	or	a4,a4,a3
    8000b360:	1ffe16b7          	lui	a3,0x1ffe1
    8000b364:	068e                	slli	a3,a3,0x3
    8000b366:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b368:	8f75                	and	a4,a4,a3
    8000b36a:	40f70933          	sub	s2,a4,a5
    8000b36e:	00193913          	seqz	s2,s2
    8000b372:	c1dfd06f          	j	80008f8e <tinst_tests_pf+0xdce>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000b376:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b378:	0017f713          	andi	a4,a5,1
    8000b37c:	92071863          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b380:	0007d503          	lhu	a0,0(a5)
    8000b384:	844f60ef          	jal	800013c8 <expand_compressed_instruction>
    8000b388:	01f077b7          	lui	a5,0x1f07
    8000b38c:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b390:	8d7d                	and	a0,a0,a5
    8000b392:	00a98463          	beq	s3,a0,8000b39a <tinst_tests_pf+0x31da>
    8000b396:	f76fd06f          	j	80008b0c <tinst_tests_pf+0x94c>
    8000b39a:	0001c597          	auipc	a1,0x1c
    8000b39e:	ae658593          	addi	a1,a1,-1306 # 80026e80 <__func__.0+0x2c0>
    8000b3a2:	f72fd06f          	j	80008b14 <tinst_tests_pf+0x954>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000b3a6:	701c                	ld	a5,32(s0)
    8000b3a8:	e399                	bnez	a5,8000b3ae <tinst_tests_pf+0x31ee>
    8000b3aa:	c97fd06f          	j	80009040 <tinst_tests_pf+0xe80>
    8000b3ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b3b0:	0016f713          	andi	a4,a3,1
    8000b3b4:	8e071c63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b3b8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b3bc:	460d                	li	a2,3
    8000b3be:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b3c2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b3c4:	00c59763          	bne	a1,a2,8000b3d2 <tinst_tests_pf+0x3212>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b3c8:	0026d683          	lhu	a3,2(a3)
    8000b3cc:	0106969b          	slliw	a3,a3,0x10
    8000b3d0:	8f55                	or	a4,a4,a3
    8000b3d2:	1ffe16b7          	lui	a3,0x1ffe1
    8000b3d6:	068e                	slli	a3,a3,0x3
    8000b3d8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b3da:	8f75                	and	a4,a4,a3
    8000b3dc:	40f70933          	sub	s2,a4,a5
    8000b3e0:	00193913          	seqz	s2,s2
    8000b3e4:	c5dfd06f          	j	80009040 <tinst_tests_pf+0xe80>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000b3e8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000b3ea:	0017f713          	andi	a4,a5,1
    8000b3ee:	8a071f63          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b3f2:	0007d503          	lhu	a0,0(a5)
    8000b3f6:	fd3f50ef          	jal	800013c8 <expand_compressed_instruction>
    8000b3fa:	01f077b7          	lui	a5,0x1f07
    8000b3fe:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000b402:	8d7d                	and	a0,a0,a5
    8000b404:	00a48463          	beq	s1,a0,8000b40c <tinst_tests_pf+0x324c>
    8000b408:	fb2fd06f          	j	80008bba <tinst_tests_pf+0x9fa>
    8000b40c:	0001c597          	auipc	a1,0x1c
    8000b410:	a7458593          	addi	a1,a1,-1420 # 80026e80 <__func__.0+0x2c0>
    8000b414:	faefd06f          	j	80008bc2 <tinst_tests_pf+0xa02>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000b418:	701c                	ld	a5,32(s0)
    8000b41a:	e399                	bnez	a5,8000b420 <tinst_tests_pf+0x3260>
    8000b41c:	cd7fd06f          	j	800090f2 <tinst_tests_pf+0xf32>
    8000b420:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b422:	0016f713          	andi	a4,a3,1
    8000b426:	88071363          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b42a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b42e:	460d                	li	a2,3
    8000b430:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b434:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b436:	00c59763          	bne	a1,a2,8000b444 <tinst_tests_pf+0x3284>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b43a:	0026d683          	lhu	a3,2(a3)
    8000b43e:	0106969b          	slliw	a3,a3,0x10
    8000b442:	8f55                	or	a4,a4,a3
    8000b444:	1ffe16b7          	lui	a3,0x1ffe1
    8000b448:	068e                	slli	a3,a3,0x3
    8000b44a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b44c:	8f75                	and	a4,a4,a3
    8000b44e:	40f70933          	sub	s2,a4,a5
    8000b452:	00193913          	seqz	s2,s2
    8000b456:	c9dfd06f          	j	800090f2 <tinst_tests_pf+0xf32>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000b45a:	701c                	ld	a5,32(s0)
    8000b45c:	e399                	bnez	a5,8000b462 <tinst_tests_pf+0x32a2>
    8000b45e:	d47fd06f          	j	800091a4 <tinst_tests_pf+0xfe4>
    8000b462:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b464:	0016f713          	andi	a4,a3,1
    8000b468:	84071263          	bnez	a4,8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b46c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b470:	460d                	li	a2,3
    8000b472:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b476:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b478:	00c59763          	bne	a1,a2,8000b486 <tinst_tests_pf+0x32c6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b47c:	0026d683          	lhu	a3,2(a3)
    8000b480:	0106969b          	slliw	a3,a3,0x10
    8000b484:	8f55                	or	a4,a4,a3
    8000b486:	1ffe16b7          	lui	a3,0x1ffe1
    8000b48a:	068e                	slli	a3,a3,0x3
    8000b48c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b48e:	8f75                	and	a4,a4,a3
    8000b490:	40f70933          	sub	s2,a4,a5
    8000b494:	00193913          	seqz	s2,s2
    8000b498:	d0dfd06f          	j	800091a4 <tinst_tests_pf+0xfe4>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000b49c:	701c                	ld	a5,32(s0)
    8000b49e:	e399                	bnez	a5,8000b4a4 <tinst_tests_pf+0x32e4>
    8000b4a0:	db7fd06f          	j	80009256 <tinst_tests_pf+0x1096>
    8000b4a4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b4a6:	0016f713          	andi	a4,a3,1
    8000b4aa:	c319                	beqz	a4,8000b4b0 <tinst_tests_pf+0x32f0>
    8000b4ac:	800ff06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b4b0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b4b4:	460d                	li	a2,3
    8000b4b6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b4ba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b4bc:	00c59763          	bne	a1,a2,8000b4ca <tinst_tests_pf+0x330a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b4c0:	0026d683          	lhu	a3,2(a3)
    8000b4c4:	0106969b          	slliw	a3,a3,0x10
    8000b4c8:	8f55                	or	a4,a4,a3
    8000b4ca:	1ffe16b7          	lui	a3,0x1ffe1
    8000b4ce:	068e                	slli	a3,a3,0x3
    8000b4d0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b4d2:	8f75                	and	a4,a4,a3
    8000b4d4:	40f70933          	sub	s2,a4,a5
    8000b4d8:	00193913          	seqz	s2,s2
    8000b4dc:	d7bfd06f          	j	80009256 <tinst_tests_pf+0x1096>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000b4e0:	701c                	ld	a5,32(s0)
    8000b4e2:	e399                	bnez	a5,8000b4e8 <tinst_tests_pf+0x3328>
    8000b4e4:	e25fd06f          	j	80009308 <tinst_tests_pf+0x1148>
    8000b4e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b4ea:	0016f713          	andi	a4,a3,1
    8000b4ee:	c319                	beqz	a4,8000b4f4 <tinst_tests_pf+0x3334>
    8000b4f0:	fbdfe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b4f4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b4f8:	460d                	li	a2,3
    8000b4fa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b4fe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b500:	00c59763          	bne	a1,a2,8000b50e <tinst_tests_pf+0x334e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b504:	0026d683          	lhu	a3,2(a3)
    8000b508:	0106969b          	slliw	a3,a3,0x10
    8000b50c:	8f55                	or	a4,a4,a3
    8000b50e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b512:	068e                	slli	a3,a3,0x3
    8000b514:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b516:	8f75                	and	a4,a4,a3
    8000b518:	40f70933          	sub	s2,a4,a5
    8000b51c:	00193913          	seqz	s2,s2
    8000b520:	de9fd06f          	j	80009308 <tinst_tests_pf+0x1148>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000b524:	701c                	ld	a5,32(s0)
    8000b526:	e399                	bnez	a5,8000b52c <tinst_tests_pf+0x336c>
    8000b528:	e97fd06f          	j	800093be <tinst_tests_pf+0x11fe>
    8000b52c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b52e:	0016f713          	andi	a4,a3,1
    8000b532:	c319                	beqz	a4,8000b538 <tinst_tests_pf+0x3378>
    8000b534:	f79fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b538:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b53c:	460d                	li	a2,3
    8000b53e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b542:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b544:	00c59763          	bne	a1,a2,8000b552 <tinst_tests_pf+0x3392>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b548:	0026d683          	lhu	a3,2(a3)
    8000b54c:	0106969b          	slliw	a3,a3,0x10
    8000b550:	8f55                	or	a4,a4,a3
    8000b552:	1ffe16b7          	lui	a3,0x1ffe1
    8000b556:	068e                	slli	a3,a3,0x3
    8000b558:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b55a:	8f75                	and	a4,a4,a3
    8000b55c:	40f70933          	sub	s2,a4,a5
    8000b560:	00193913          	seqz	s2,s2
    8000b564:	e5bfd06f          	j	800093be <tinst_tests_pf+0x11fe>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000b568:	701c                	ld	a5,32(s0)
    8000b56a:	e399                	bnez	a5,8000b570 <tinst_tests_pf+0x33b0>
    8000b56c:	f05fd06f          	j	80009470 <tinst_tests_pf+0x12b0>
    8000b570:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b572:	0016f713          	andi	a4,a3,1
    8000b576:	c319                	beqz	a4,8000b57c <tinst_tests_pf+0x33bc>
    8000b578:	f35fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b57c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b580:	460d                	li	a2,3
    8000b582:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b586:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b588:	00c59763          	bne	a1,a2,8000b596 <tinst_tests_pf+0x33d6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b58c:	0026d683          	lhu	a3,2(a3)
    8000b590:	0106969b          	slliw	a3,a3,0x10
    8000b594:	8f55                	or	a4,a4,a3
    8000b596:	1ffe16b7          	lui	a3,0x1ffe1
    8000b59a:	068e                	slli	a3,a3,0x3
    8000b59c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b59e:	8f75                	and	a4,a4,a3
    8000b5a0:	40f70933          	sub	s2,a4,a5
    8000b5a4:	00193913          	seqz	s2,s2
    8000b5a8:	ec9fd06f          	j	80009470 <tinst_tests_pf+0x12b0>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000b5ac:	701c                	ld	a5,32(s0)
    8000b5ae:	e399                	bnez	a5,8000b5b4 <tinst_tests_pf+0x33f4>
    8000b5b0:	f73fd06f          	j	80009522 <tinst_tests_pf+0x1362>
    8000b5b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b5b6:	0016f713          	andi	a4,a3,1
    8000b5ba:	c319                	beqz	a4,8000b5c0 <tinst_tests_pf+0x3400>
    8000b5bc:	ef1fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b5c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b5c4:	460d                	li	a2,3
    8000b5c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b5ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b5cc:	00c59763          	bne	a1,a2,8000b5da <tinst_tests_pf+0x341a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b5d0:	0026d683          	lhu	a3,2(a3)
    8000b5d4:	0106969b          	slliw	a3,a3,0x10
    8000b5d8:	8f55                	or	a4,a4,a3
    8000b5da:	1ffe16b7          	lui	a3,0x1ffe1
    8000b5de:	068e                	slli	a3,a3,0x3
    8000b5e0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b5e2:	8f75                	and	a4,a4,a3
    8000b5e4:	40f70933          	sub	s2,a4,a5
    8000b5e8:	00193913          	seqz	s2,s2
    8000b5ec:	f37fd06f          	j	80009522 <tinst_tests_pf+0x1362>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000b5f0:	701c                	ld	a5,32(s0)
    8000b5f2:	e399                	bnez	a5,8000b5f8 <tinst_tests_pf+0x3438>
    8000b5f4:	fe1fd06f          	j	800095d4 <tinst_tests_pf+0x1414>
    8000b5f8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b5fa:	0016f713          	andi	a4,a3,1
    8000b5fe:	c319                	beqz	a4,8000b604 <tinst_tests_pf+0x3444>
    8000b600:	eadfe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b604:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b608:	460d                	li	a2,3
    8000b60a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b60e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b610:	00c59763          	bne	a1,a2,8000b61e <tinst_tests_pf+0x345e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b614:	0026d683          	lhu	a3,2(a3)
    8000b618:	0106969b          	slliw	a3,a3,0x10
    8000b61c:	8f55                	or	a4,a4,a3
    8000b61e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b622:	068e                	slli	a3,a3,0x3
    8000b624:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b626:	8f75                	and	a4,a4,a3
    8000b628:	40f70933          	sub	s2,a4,a5
    8000b62c:	00193913          	seqz	s2,s2
    8000b630:	fa5fd06f          	j	800095d4 <tinst_tests_pf+0x1414>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000b634:	701c                	ld	a5,32(s0)
    8000b636:	e399                	bnez	a5,8000b63c <tinst_tests_pf+0x347c>
    8000b638:	84efe06f          	j	80009686 <tinst_tests_pf+0x14c6>
    8000b63c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b63e:	0016f713          	andi	a4,a3,1
    8000b642:	c319                	beqz	a4,8000b648 <tinst_tests_pf+0x3488>
    8000b644:	e69fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b648:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b64c:	460d                	li	a2,3
    8000b64e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b652:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b654:	00c59763          	bne	a1,a2,8000b662 <tinst_tests_pf+0x34a2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b658:	0026d683          	lhu	a3,2(a3)
    8000b65c:	0106969b          	slliw	a3,a3,0x10
    8000b660:	8f55                	or	a4,a4,a3
    8000b662:	1ffe16b7          	lui	a3,0x1ffe1
    8000b666:	068e                	slli	a3,a3,0x3
    8000b668:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b66a:	8f75                	and	a4,a4,a3
    8000b66c:	40f70933          	sub	s2,a4,a5
    8000b670:	00193913          	seqz	s2,s2
    8000b674:	812fe06f          	j	80009686 <tinst_tests_pf+0x14c6>
    8000b678:	701c                	ld	a5,32(s0)
    8000b67a:	e399                	bnez	a5,8000b680 <tinst_tests_pf+0x34c0>
    8000b67c:	fe9fd06f          	j	80009664 <tinst_tests_pf+0x14a4>
    8000b680:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b682:	0016f713          	andi	a4,a3,1
    8000b686:	c319                	beqz	a4,8000b68c <tinst_tests_pf+0x34cc>
    8000b688:	e25fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b68c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b690:	460d                	li	a2,3
    8000b692:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b696:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b698:	00c59763          	bne	a1,a2,8000b6a6 <tinst_tests_pf+0x34e6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b69c:	0026d683          	lhu	a3,2(a3)
    8000b6a0:	0106969b          	slliw	a3,a3,0x10
    8000b6a4:	8f55                	or	a4,a4,a3
    8000b6a6:	1ffe16b7          	lui	a3,0x1ffe1
    8000b6aa:	068e                	slli	a3,a3,0x3
    8000b6ac:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b6ae:	8f75                	and	a4,a4,a3
    8000b6b0:	00e78463          	beq	a5,a4,8000b6b8 <tinst_tests_pf+0x34f8>
    8000b6b4:	f9dfd06f          	j	80009650 <tinst_tests_pf+0x1490>
    8000b6b8:	fadfd06f          	j	80009664 <tinst_tests_pf+0x14a4>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b6bc:	701c                	ld	a5,32(s0)
    8000b6be:	e399                	bnez	a5,8000b6c4 <tinst_tests_pf+0x3504>
    8000b6c0:	856fe06f          	j	80009716 <tinst_tests_pf+0x1556>
    8000b6c4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b6c6:	0016f713          	andi	a4,a3,1
    8000b6ca:	c319                	beqz	a4,8000b6d0 <tinst_tests_pf+0x3510>
    8000b6cc:	de1fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b6d0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b6d4:	460d                	li	a2,3
    8000b6d6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b6da:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b6dc:	00c59763          	bne	a1,a2,8000b6ea <tinst_tests_pf+0x352a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b6e0:	0026d683          	lhu	a3,2(a3)
    8000b6e4:	0106969b          	slliw	a3,a3,0x10
    8000b6e8:	8f55                	or	a4,a4,a3
    8000b6ea:	1ffe16b7          	lui	a3,0x1ffe1
    8000b6ee:	068e                	slli	a3,a3,0x3
    8000b6f0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b6f2:	8f75                	and	a4,a4,a3
    8000b6f4:	00e78463          	beq	a5,a4,8000b6fc <tinst_tests_pf+0x353c>
    8000b6f8:	80afe06f          	j	80009702 <tinst_tests_pf+0x1542>
    8000b6fc:	81afe06f          	j	80009716 <tinst_tests_pf+0x1556>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b700:	701c                	ld	a5,32(s0)
    8000b702:	e399                	bnez	a5,8000b708 <tinst_tests_pf+0x3548>
    8000b704:	8bcfe06f          	j	800097c0 <tinst_tests_pf+0x1600>
    8000b708:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b70a:	0016f713          	andi	a4,a3,1
    8000b70e:	c319                	beqz	a4,8000b714 <tinst_tests_pf+0x3554>
    8000b710:	d9dfe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b714:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b718:	460d                	li	a2,3
    8000b71a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b71e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b720:	00c59763          	bne	a1,a2,8000b72e <tinst_tests_pf+0x356e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b724:	0026d683          	lhu	a3,2(a3)
    8000b728:	0106969b          	slliw	a3,a3,0x10
    8000b72c:	8f55                	or	a4,a4,a3
    8000b72e:	1ffe16b7          	lui	a3,0x1ffe1
    8000b732:	068e                	slli	a3,a3,0x3
    8000b734:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b736:	8f75                	and	a4,a4,a3
    8000b738:	00e78463          	beq	a5,a4,8000b740 <tinst_tests_pf+0x3580>
    8000b73c:	870fe06f          	j	800097ac <tinst_tests_pf+0x15ec>
    8000b740:	880fe06f          	j	800097c0 <tinst_tests_pf+0x1600>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b744:	701c                	ld	a5,32(s0)
    8000b746:	e399                	bnez	a5,8000b74c <tinst_tests_pf+0x358c>
    8000b748:	922fe06f          	j	8000986a <tinst_tests_pf+0x16aa>
    8000b74c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b74e:	0016f713          	andi	a4,a3,1
    8000b752:	c319                	beqz	a4,8000b758 <tinst_tests_pf+0x3598>
    8000b754:	d59fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b758:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b75c:	460d                	li	a2,3
    8000b75e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b762:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b764:	00c59763          	bne	a1,a2,8000b772 <tinst_tests_pf+0x35b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b768:	0026d683          	lhu	a3,2(a3)
    8000b76c:	0106969b          	slliw	a3,a3,0x10
    8000b770:	8f55                	or	a4,a4,a3
    8000b772:	1ffe16b7          	lui	a3,0x1ffe1
    8000b776:	068e                	slli	a3,a3,0x3
    8000b778:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b77a:	8f75                	and	a4,a4,a3
    8000b77c:	00e78463          	beq	a5,a4,8000b784 <tinst_tests_pf+0x35c4>
    8000b780:	8d6fe06f          	j	80009856 <tinst_tests_pf+0x1696>
    8000b784:	8e6fe06f          	j	8000986a <tinst_tests_pf+0x16aa>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b788:	701c                	ld	a5,32(s0)
    8000b78a:	e399                	bnez	a5,8000b790 <tinst_tests_pf+0x35d0>
    8000b78c:	988fe06f          	j	80009914 <tinst_tests_pf+0x1754>
    8000b790:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b792:	0016f713          	andi	a4,a3,1
    8000b796:	c319                	beqz	a4,8000b79c <tinst_tests_pf+0x35dc>
    8000b798:	d15fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b79c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b7a0:	460d                	li	a2,3
    8000b7a2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b7a6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b7a8:	00c59763          	bne	a1,a2,8000b7b6 <tinst_tests_pf+0x35f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b7ac:	0026d683          	lhu	a3,2(a3)
    8000b7b0:	0106969b          	slliw	a3,a3,0x10
    8000b7b4:	8f55                	or	a4,a4,a3
    8000b7b6:	1ffe16b7          	lui	a3,0x1ffe1
    8000b7ba:	068e                	slli	a3,a3,0x3
    8000b7bc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b7be:	8f75                	and	a4,a4,a3
    8000b7c0:	00e78463          	beq	a5,a4,8000b7c8 <tinst_tests_pf+0x3608>
    8000b7c4:	93cfe06f          	j	80009900 <tinst_tests_pf+0x1740>
    8000b7c8:	94cfe06f          	j	80009914 <tinst_tests_pf+0x1754>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000b7cc:	701c                	ld	a5,32(s0)
    8000b7ce:	e399                	bnez	a5,8000b7d4 <tinst_tests_pf+0x3614>
    8000b7d0:	9eefe06f          	j	800099be <tinst_tests_pf+0x17fe>
    8000b7d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b7d6:	0016f713          	andi	a4,a3,1
    8000b7da:	c319                	beqz	a4,8000b7e0 <tinst_tests_pf+0x3620>
    8000b7dc:	cd1fe06f          	j	8000a4ac <tinst_tests_pf+0x22ec>
    instruction = *((uint16_t*)addr);
    8000b7e0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b7e4:	460d                	li	a2,3
    8000b7e6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b7ea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b7ec:	00c59763          	bne	a1,a2,8000b7fa <tinst_tests_pf+0x363a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b7f0:	0026d683          	lhu	a3,2(a3)
    8000b7f4:	0106969b          	slliw	a3,a3,0x10
    8000b7f8:	8f55                	or	a4,a4,a3
    8000b7fa:	1ffe16b7          	lui	a3,0x1ffe1
    8000b7fe:	068e                	slli	a3,a3,0x3
    8000b800:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b802:	8f75                	and	a4,a4,a3
    8000b804:	00e78463          	beq	a5,a4,8000b80c <tinst_tests_pf+0x364c>
    8000b808:	9a2fe06f          	j	800099aa <tinst_tests_pf+0x17ea>
    8000b80c:	9b2fe06f          	j	800099be <tinst_tests_pf+0x17fe>

000000008000b810 <tinst_tests_gpf>:

bool tinst_tests_gpf(){
    8000b810:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000b812:	0001a597          	auipc	a1,0x1a
    8000b816:	1f658593          	addi	a1,a1,502 # 80025a08 <__func__.0>
    8000b81a:	0001b517          	auipc	a0,0x1b
    8000b81e:	68650513          	addi	a0,a0,1670 # 80026ea0 <__func__.0+0x2e0>
bool tinst_tests_gpf(){
    8000b822:	f406                	sd	ra,40(sp)
    8000b824:	f022                	sd	s0,32(sp)
    8000b826:	ec26                	sd	s1,24(sp)
    8000b828:	e84a                	sd	s2,16(sp)
    8000b82a:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000b82c:	6d8190ef          	jal	80024f04 <printf>
    8000b830:	4529                	li	a0,10
    8000b832:	4dc180ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8000b836:	450d                	li	a0,3
    8000b838:	bbef50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000b83c:	da5f40ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b840:	fe3f40ef          	jal	80000822 <hpt_init>
    vspt_init();
    8000b844:	e6df40ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_VS);   
    8000b848:	4509                	li	a0,2
    8000b84a:	bacf50ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GI);      
    printf("%llx\n",vaddr_f);
    8000b84e:	001005b7          	lui	a1,0x100
    8000b852:	06558593          	addi	a1,a1,101 # 100065 <STACK_SIZE+0x65>
    8000b856:	05b2                	slli	a1,a1,0xc
    8000b858:	00022517          	auipc	a0,0x22
    8000b85c:	b9050513          	addi	a0,a0,-1136 # 8002d3e8 <__func__.0+0x6828>
    8000b860:	6a4190ef          	jal	80024f04 <printf>
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b864:	0330000f          	fence	rw,rw
    8000b868:	0003d417          	auipc	s0,0x3d
    8000b86c:	7a840413          	addi	s0,s0,1960 # 80049010 <excpt>
    8000b870:	4785                	li	a5,1
    8000b872:	0003d717          	auipc	a4,0x3d
    8000b876:	7c073b23          	sd	zero,2006(a4) # 80049048 <excpt+0x38>
    8000b87a:	00f41023          	sh	a5,0(s0)
    8000b87e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b882:	001007b7          	lui	a5,0x100
    8000b886:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b88a:	07b2                	slli	a5,a5,0xc
    8000b88c:	00078783          	lb	a5,0(a5)
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);    
    printf("%llx\n",excpt.tinst);
    8000b890:	700c                	ld	a1,32(s0)
    8000b892:	00022517          	auipc	a0,0x22
    8000b896:	b5650513          	addi	a0,a0,-1194 # 8002d3e8 <__func__.0+0x6828>
    8000b89a:	66a190ef          	jal	80024f04 <printf>
    printf("%llx\n",excpt.triggered);
    8000b89e:	0003d597          	auipc	a1,0x3d
    8000b8a2:	7735c583          	lbu	a1,1907(a1) # 80049011 <excpt+0x1>
    8000b8a6:	00022517          	auipc	a0,0x22
    8000b8aa:	b4250513          	addi	a0,a0,-1214 # 8002d3e8 <__func__.0+0x6828>
    8000b8ae:	656190ef          	jal	80024f04 <printf>
    printf("%llx\n",excpt.cause);
    8000b8b2:	640c                	ld	a1,8(s0)
    8000b8b4:	00022517          	auipc	a0,0x22
    8000b8b8:	b3450513          	addi	a0,a0,-1228 # 8002d3e8 <__func__.0+0x6828>
    8000b8bc:	648190ef          	jal	80024f04 <printf>
    printf("%llx\n",excpt.tval2);
    8000b8c0:	740c                	ld	a1,40(s0)
    8000b8c2:	00022517          	auipc	a0,0x22
    8000b8c6:	b2650513          	addi	a0,a0,-1242 # 8002d3e8 <__func__.0+0x6828>
    8000b8ca:	63a190ef          	jal	80024f04 <printf>
    printf("%llx\n",excpt.tval);
    8000b8ce:	6c0c                	ld	a1,24(s0)
    8000b8d0:	00022517          	auipc	a0,0x22
    8000b8d4:	b1850513          	addi	a0,a0,-1256 # 8002d3e8 <__func__.0+0x6828>
    8000b8d8:	62c190ef          	jal	80024f04 <printf>

    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000b8dc:	08200593          	li	a1,130
    8000b8e0:	0001d617          	auipc	a2,0x1d
    8000b8e4:	7d860613          	addi	a2,a2,2008 # 800290b8 <__func__.0+0x24f8>
    8000b8e8:	0001b517          	auipc	a0,0x1b
    8000b8ec:	5d050513          	addi	a0,a0,1488 # 80026eb8 <__func__.0+0x2f8>
    8000b8f0:	614190ef          	jal	80024f04 <printf>
    8000b8f4:	0003d797          	auipc	a5,0x3d
    8000b8f8:	71d7c783          	lbu	a5,1821(a5) # 80049011 <excpt+0x1>
    8000b8fc:	0001b597          	auipc	a1,0x1b
    8000b900:	59458593          	addi	a1,a1,1428 # 80026e90 <__func__.0+0x2d0>
    8000b904:	c799                	beqz	a5,8000b912 <tinst_tests_gpf+0x102>
    8000b906:	6418                	ld	a4,8(s0)
    8000b908:	47d5                	li	a5,21
    8000b90a:	00f71463          	bne	a4,a5,8000b912 <tinst_tests_gpf+0x102>
    8000b90e:	7cf0106f          	j	8000d8dc <tinst_tests_gpf+0x20cc>
    8000b912:	0001b517          	auipc	a0,0x1b
    8000b916:	5be50513          	addi	a0,a0,1470 # 80026ed0 <__func__.0+0x310>
    8000b91a:	5ea190ef          	jal	80024f04 <printf>
    8000b91e:	0003d797          	auipc	a5,0x3d
    8000b922:	6f37c783          	lbu	a5,1779(a5) # 80049011 <excpt+0x1>
    8000b926:	c799                	beqz	a5,8000b934 <tinst_tests_gpf+0x124>
    8000b928:	6418                	ld	a4,8(s0)
    8000b92a:	47d5                	li	a5,21
    8000b92c:	00f71463          	bne	a4,a5,8000b934 <tinst_tests_gpf+0x124>
    8000b930:	11b0106f          	j	8000d24a <tinst_tests_gpf+0x1a3a>
    8000b934:	0001b517          	auipc	a0,0x1b
    8000b938:	5a450513          	addi	a0,a0,1444 # 80026ed8 <__func__.0+0x318>
    8000b93c:	5c8190ef          	jal	80024f04 <printf>
    8000b940:	02900513          	li	a0,41
    8000b944:	3ca180ef          	jal	80023d0e <putchar>
    8000b948:	4529                	li	a0,10
    8000b94a:	3c4180ef          	jal	80023d0e <putchar>
    8000b94e:	0003d797          	auipc	a5,0x3d
    8000b952:	6c37c783          	lbu	a5,1731(a5) # 80049011 <excpt+0x1>
    8000b956:	4901                	li	s2,0
    8000b958:	c799                	beqz	a5,8000b966 <tinst_tests_gpf+0x156>
    8000b95a:	6418                	ld	a4,8(s0)
    8000b95c:	47d5                	li	a5,21
    8000b95e:	00f71463          	bne	a4,a5,8000b966 <tinst_tests_gpf+0x156>
    8000b962:	79b0106f          	j	8000d8fc <tinst_tests_gpf+0x20ec>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.tinst == 0x00003000
    );

    TEST_SETUP_EXCEPT();
    8000b966:	0330000f          	fence	rw,rw
    8000b96a:	4785                	li	a5,1
    8000b96c:	0003d717          	auipc	a4,0x3d
    8000b970:	6c073e23          	sd	zero,1756(a4) # 80049048 <excpt+0x38>
    8000b974:	00f41023          	sh	a5,0(s0)
    8000b978:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    8000b97c:	001007b7          	lui	a5,0x100
    8000b980:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b984:	07b2                	slli	a5,a5,0xc
    8000b986:	0007c783          	lbu	a5,0(a5)
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000b98a:	0001d617          	auipc	a2,0x1d
    8000b98e:	76e60613          	addi	a2,a2,1902 # 800290f8 <__func__.0+0x2538>
    8000b992:	08200593          	li	a1,130
    8000b996:	0001b517          	auipc	a0,0x1b
    8000b99a:	52250513          	addi	a0,a0,1314 # 80026eb8 <__func__.0+0x2f8>
    8000b99e:	566190ef          	jal	80024f04 <printf>
    8000b9a2:	0003d797          	auipc	a5,0x3d
    8000b9a6:	66f7c783          	lbu	a5,1647(a5) # 80049011 <excpt+0x1>
    8000b9aa:	e399                	bnez	a5,8000b9b0 <tinst_tests_gpf+0x1a0>
    8000b9ac:	0330106f          	j	8000d1de <tinst_tests_gpf+0x19ce>
    8000b9b0:	6418                	ld	a4,8(s0)
    8000b9b2:	47d5                	li	a5,21
    8000b9b4:	0001b597          	auipc	a1,0x1b
    8000b9b8:	4dc58593          	addi	a1,a1,1244 # 80026e90 <__func__.0+0x2d0>
    8000b9bc:	00f71463          	bne	a4,a5,8000b9c4 <tinst_tests_gpf+0x1b4>
    8000b9c0:	7d60106f          	j	8000d196 <tinst_tests_gpf+0x1986>
    8000b9c4:	0001b517          	auipc	a0,0x1b
    8000b9c8:	50c50513          	addi	a0,a0,1292 # 80026ed0 <__func__.0+0x310>
    8000b9cc:	538190ef          	jal	80024f04 <printf>
    8000b9d0:	0003d797          	auipc	a5,0x3d
    8000b9d4:	6417c783          	lbu	a5,1601(a5) # 80049011 <excpt+0x1>
    8000b9d8:	c799                	beqz	a5,8000b9e6 <tinst_tests_gpf+0x1d6>
    8000b9da:	6418                	ld	a4,8(s0)
    8000b9dc:	47d5                	li	a5,21
    8000b9de:	00f71463          	bne	a4,a5,8000b9e6 <tinst_tests_gpf+0x1d6>
    8000b9e2:	0790106f          	j	8000d25a <tinst_tests_gpf+0x1a4a>
    8000b9e6:	0001b517          	auipc	a0,0x1b
    8000b9ea:	4f250513          	addi	a0,a0,1266 # 80026ed8 <__func__.0+0x318>
    8000b9ee:	516190ef          	jal	80024f04 <printf>
    8000b9f2:	02900513          	li	a0,41
    8000b9f6:	318180ef          	jal	80023d0e <putchar>
    8000b9fa:	4529                	li	a0,10
    8000b9fc:	312180ef          	jal	80023d0e <putchar>
    8000ba00:	00090e63          	beqz	s2,8000ba1c <tinst_tests_gpf+0x20c>
    8000ba04:	0003d797          	auipc	a5,0x3d
    8000ba08:	60d7c783          	lbu	a5,1549(a5) # 80049011 <excpt+0x1>
    8000ba0c:	c799                	beqz	a5,8000ba1a <tinst_tests_gpf+0x20a>
    8000ba0e:	6418                	ld	a4,8(s0)
    8000ba10:	47d5                	li	a5,21
    8000ba12:	00f71463          	bne	a4,a5,8000ba1a <tinst_tests_gpf+0x20a>
    8000ba16:	1ee0206f          	j	8000dc04 <tinst_tests_gpf+0x23f4>
    8000ba1a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000ba1c:	0330000f          	fence	rw,rw
    8000ba20:	4785                	li	a5,1
    8000ba22:	0003d717          	auipc	a4,0x3d
    8000ba26:	62073323          	sd	zero,1574(a4) # 80049048 <excpt+0x38>
    8000ba2a:	00f41023          	sh	a5,0(s0)
    8000ba2e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000ba32:	001007b7          	lui	a5,0x100
    8000ba36:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000ba3a:	07b2                	slli	a5,a5,0xc
    8000ba3c:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000ba40:	0001d617          	auipc	a2,0x1d
    8000ba44:	6f860613          	addi	a2,a2,1784 # 80029138 <__func__.0+0x2578>
    8000ba48:	08200593          	li	a1,130
    8000ba4c:	0001b517          	auipc	a0,0x1b
    8000ba50:	46c50513          	addi	a0,a0,1132 # 80026eb8 <__func__.0+0x2f8>
    8000ba54:	4b0190ef          	jal	80024f04 <printf>
    8000ba58:	0003d797          	auipc	a5,0x3d
    8000ba5c:	5b97c783          	lbu	a5,1465(a5) # 80049011 <excpt+0x1>
    8000ba60:	c399                	beqz	a5,8000ba66 <tinst_tests_gpf+0x256>
    8000ba62:	7880106f          	j	8000d1ea <tinst_tests_gpf+0x19da>
    8000ba66:	0001b597          	auipc	a1,0x1b
    8000ba6a:	42a58593          	addi	a1,a1,1066 # 80026e90 <__func__.0+0x2d0>
    8000ba6e:	0001b517          	auipc	a0,0x1b
    8000ba72:	46250513          	addi	a0,a0,1122 # 80026ed0 <__func__.0+0x310>
    8000ba76:	48e190ef          	jal	80024f04 <printf>
    8000ba7a:	0003d797          	auipc	a5,0x3d
    8000ba7e:	5977c783          	lbu	a5,1431(a5) # 80049011 <excpt+0x1>
    8000ba82:	c799                	beqz	a5,8000ba90 <tinst_tests_gpf+0x280>
    8000ba84:	6418                	ld	a4,8(s0)
    8000ba86:	47d5                	li	a5,21
    8000ba88:	00f71463          	bne	a4,a5,8000ba90 <tinst_tests_gpf+0x280>
    8000ba8c:	42b0106f          	j	8000d6b6 <tinst_tests_gpf+0x1ea6>
    8000ba90:	0001b517          	auipc	a0,0x1b
    8000ba94:	44850513          	addi	a0,a0,1096 # 80026ed8 <__func__.0+0x318>
    8000ba98:	46c190ef          	jal	80024f04 <printf>
    8000ba9c:	02900513          	li	a0,41
    8000baa0:	26e180ef          	jal	80023d0e <putchar>
    8000baa4:	4529                	li	a0,10
    8000baa6:	268180ef          	jal	80023d0e <putchar>
    8000baaa:	00090e63          	beqz	s2,8000bac6 <tinst_tests_gpf+0x2b6>
    8000baae:	0003d797          	auipc	a5,0x3d
    8000bab2:	5637c783          	lbu	a5,1379(a5) # 80049011 <excpt+0x1>
    8000bab6:	c799                	beqz	a5,8000bac4 <tinst_tests_gpf+0x2b4>
    8000bab8:	6418                	ld	a4,8(s0)
    8000baba:	47d5                	li	a5,21
    8000babc:	00f71463          	bne	a4,a5,8000bac4 <tinst_tests_gpf+0x2b4>
    8000bac0:	1820206f          	j	8000dc42 <tinst_tests_gpf+0x2432>
    8000bac4:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bac6:	0330000f          	fence	rw,rw
    8000baca:	4785                	li	a5,1
    8000bacc:	0003d717          	auipc	a4,0x3d
    8000bad0:	56073e23          	sd	zero,1404(a4) # 80049048 <excpt+0x38>
    8000bad4:	00f41023          	sh	a5,0(s0)
    8000bad8:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000badc:	001007b7          	lui	a5,0x100
    8000bae0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bae4:	07b2                	slli	a5,a5,0xc
    8000bae6:	0007d783          	lhu	a5,0(a5)
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000baea:	0001d617          	auipc	a2,0x1d
    8000baee:	68e60613          	addi	a2,a2,1678 # 80029178 <__func__.0+0x25b8>
    8000baf2:	08200593          	li	a1,130
    8000baf6:	0001b517          	auipc	a0,0x1b
    8000bafa:	3c250513          	addi	a0,a0,962 # 80026eb8 <__func__.0+0x2f8>
    8000bafe:	406190ef          	jal	80024f04 <printf>
    8000bb02:	0003d797          	auipc	a5,0x3d
    8000bb06:	50f7c783          	lbu	a5,1295(a5) # 80049011 <excpt+0x1>
    8000bb0a:	e399                	bnez	a5,8000bb10 <tinst_tests_gpf+0x300>
    8000bb0c:	7d20106f          	j	8000d2de <tinst_tests_gpf+0x1ace>
    8000bb10:	6418                	ld	a4,8(s0)
    8000bb12:	47d5                	li	a5,21
    8000bb14:	0001b597          	auipc	a1,0x1b
    8000bb18:	37c58593          	addi	a1,a1,892 # 80026e90 <__func__.0+0x2d0>
    8000bb1c:	00f71463          	bne	a4,a5,8000bb24 <tinst_tests_gpf+0x314>
    8000bb20:	7760106f          	j	8000d296 <tinst_tests_gpf+0x1a86>
    8000bb24:	0001b517          	auipc	a0,0x1b
    8000bb28:	3ac50513          	addi	a0,a0,940 # 80026ed0 <__func__.0+0x310>
    8000bb2c:	3d8190ef          	jal	80024f04 <printf>
    8000bb30:	0003d797          	auipc	a5,0x3d
    8000bb34:	4e17c783          	lbu	a5,1249(a5) # 80049011 <excpt+0x1>
    8000bb38:	c799                	beqz	a5,8000bb46 <tinst_tests_gpf+0x336>
    8000bb3a:	6418                	ld	a4,8(s0)
    8000bb3c:	47d5                	li	a5,21
    8000bb3e:	00f71463          	bne	a4,a5,8000bb46 <tinst_tests_gpf+0x336>
    8000bb42:	3b10106f          	j	8000d6f2 <tinst_tests_gpf+0x1ee2>
    8000bb46:	0001b517          	auipc	a0,0x1b
    8000bb4a:	39250513          	addi	a0,a0,914 # 80026ed8 <__func__.0+0x318>
    8000bb4e:	3b6190ef          	jal	80024f04 <printf>
    8000bb52:	02900513          	li	a0,41
    8000bb56:	1b8180ef          	jal	80023d0e <putchar>
    8000bb5a:	4529                	li	a0,10
    8000bb5c:	1b2180ef          	jal	80023d0e <putchar>
    8000bb60:	00090e63          	beqz	s2,8000bb7c <tinst_tests_gpf+0x36c>
    8000bb64:	0003d797          	auipc	a5,0x3d
    8000bb68:	4ad7c783          	lbu	a5,1197(a5) # 80049011 <excpt+0x1>
    8000bb6c:	c799                	beqz	a5,8000bb7a <tinst_tests_gpf+0x36a>
    8000bb6e:	6418                	ld	a4,8(s0)
    8000bb70:	47d5                	li	a5,21
    8000bb72:	00f71463          	bne	a4,a5,8000bb7a <tinst_tests_gpf+0x36a>
    8000bb76:	10a0206f          	j	8000dc80 <tinst_tests_gpf+0x2470>
    8000bb7a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bb7c:	0330000f          	fence	rw,rw
    8000bb80:	4785                	li	a5,1
    8000bb82:	0003d717          	auipc	a4,0x3d
    8000bb86:	4c073323          	sd	zero,1222(a4) # 80049048 <excpt+0x38>
    8000bb8a:	00f41023          	sh	a5,0(s0)
    8000bb8e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000bb92:	001007b7          	lui	a5,0x100
    8000bb96:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bb9a:	07b2                	slli	a5,a5,0xc
    8000bb9c:	0007a783          	lw	a5,0(a5)
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000bba0:	0001d617          	auipc	a2,0x1d
    8000bba4:	61860613          	addi	a2,a2,1560 # 800291b8 <__func__.0+0x25f8>
    8000bba8:	08200593          	li	a1,130
    8000bbac:	0001b517          	auipc	a0,0x1b
    8000bbb0:	30c50513          	addi	a0,a0,780 # 80026eb8 <__func__.0+0x2f8>
    8000bbb4:	350190ef          	jal	80024f04 <printf>
    8000bbb8:	0003d797          	auipc	a5,0x3d
    8000bbbc:	4597c783          	lbu	a5,1113(a5) # 80049011 <excpt+0x1>
    8000bbc0:	e399                	bnez	a5,8000bbc6 <tinst_tests_gpf+0x3b6>
    8000bbc2:	7700106f          	j	8000d332 <tinst_tests_gpf+0x1b22>
    8000bbc6:	6418                	ld	a4,8(s0)
    8000bbc8:	47d5                	li	a5,21
    8000bbca:	0001b597          	auipc	a1,0x1b
    8000bbce:	2c658593          	addi	a1,a1,710 # 80026e90 <__func__.0+0x2d0>
    8000bbd2:	00f71463          	bne	a4,a5,8000bbda <tinst_tests_gpf+0x3ca>
    8000bbd6:	7140106f          	j	8000d2ea <tinst_tests_gpf+0x1ada>
    8000bbda:	0001b517          	auipc	a0,0x1b
    8000bbde:	2f650513          	addi	a0,a0,758 # 80026ed0 <__func__.0+0x310>
    8000bbe2:	322190ef          	jal	80024f04 <printf>
    8000bbe6:	0003d797          	auipc	a5,0x3d
    8000bbea:	42b7c783          	lbu	a5,1067(a5) # 80049011 <excpt+0x1>
    8000bbee:	c799                	beqz	a5,8000bbfc <tinst_tests_gpf+0x3ec>
    8000bbf0:	6418                	ld	a4,8(s0)
    8000bbf2:	47d5                	li	a5,21
    8000bbf4:	00f71463          	bne	a4,a5,8000bbfc <tinst_tests_gpf+0x3ec>
    8000bbf8:	1020206f          	j	8000dcfa <tinst_tests_gpf+0x24ea>
    8000bbfc:	0001b517          	auipc	a0,0x1b
    8000bc00:	2dc50513          	addi	a0,a0,732 # 80026ed8 <__func__.0+0x318>
    8000bc04:	300190ef          	jal	80024f04 <printf>
    8000bc08:	02900513          	li	a0,41
    8000bc0c:	102180ef          	jal	80023d0e <putchar>
    8000bc10:	4529                	li	a0,10
    8000bc12:	0fc180ef          	jal	80023d0e <putchar>
    8000bc16:	00090e63          	beqz	s2,8000bc32 <tinst_tests_gpf+0x422>
    8000bc1a:	0003d797          	auipc	a5,0x3d
    8000bc1e:	3f77c783          	lbu	a5,1015(a5) # 80049011 <excpt+0x1>
    8000bc22:	c799                	beqz	a5,8000bc30 <tinst_tests_gpf+0x420>
    8000bc24:	6418                	ld	a4,8(s0)
    8000bc26:	47d5                	li	a5,21
    8000bc28:	00f71463          	bne	a4,a5,8000bc30 <tinst_tests_gpf+0x420>
    8000bc2c:	0920206f          	j	8000dcbe <tinst_tests_gpf+0x24ae>
    8000bc30:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bc32:	0330000f          	fence	rw,rw
    8000bc36:	4785                	li	a5,1
    8000bc38:	0003d717          	auipc	a4,0x3d
    8000bc3c:	40073823          	sd	zero,1040(a4) # 80049048 <excpt+0x38>
    8000bc40:	00f41023          	sh	a5,0(s0)
    8000bc44:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000bc48:	001007b7          	lui	a5,0x100
    8000bc4c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bc50:	07b2                	slli	a5,a5,0xc
    8000bc52:	0007e783          	lwu	a5,0(a5)
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000bc56:	0001d617          	auipc	a2,0x1d
    8000bc5a:	5a260613          	addi	a2,a2,1442 # 800291f8 <__func__.0+0x2638>
    8000bc5e:	08200593          	li	a1,130
    8000bc62:	0001b517          	auipc	a0,0x1b
    8000bc66:	25650513          	addi	a0,a0,598 # 80026eb8 <__func__.0+0x2f8>
    8000bc6a:	29a190ef          	jal	80024f04 <printf>
    8000bc6e:	0003d797          	auipc	a5,0x3d
    8000bc72:	3a37c783          	lbu	a5,931(a5) # 80049011 <excpt+0x1>
    8000bc76:	e399                	bnez	a5,8000bc7c <tinst_tests_gpf+0x46c>
    8000bc78:	70e0106f          	j	8000d386 <tinst_tests_gpf+0x1b76>
    8000bc7c:	6418                	ld	a4,8(s0)
    8000bc7e:	47d5                	li	a5,21
    8000bc80:	0001b597          	auipc	a1,0x1b
    8000bc84:	21058593          	addi	a1,a1,528 # 80026e90 <__func__.0+0x2d0>
    8000bc88:	00f71463          	bne	a4,a5,8000bc90 <tinst_tests_gpf+0x480>
    8000bc8c:	6b20106f          	j	8000d33e <tinst_tests_gpf+0x1b2e>
    8000bc90:	0001b517          	auipc	a0,0x1b
    8000bc94:	24050513          	addi	a0,a0,576 # 80026ed0 <__func__.0+0x310>
    8000bc98:	26c190ef          	jal	80024f04 <printf>
    8000bc9c:	0003d797          	auipc	a5,0x3d
    8000bca0:	3757c783          	lbu	a5,885(a5) # 80049011 <excpt+0x1>
    8000bca4:	c799                	beqz	a5,8000bcb2 <tinst_tests_gpf+0x4a2>
    8000bca6:	6418                	ld	a4,8(s0)
    8000bca8:	47d5                	li	a5,21
    8000bcaa:	00f71463          	bne	a4,a5,8000bcb2 <tinst_tests_gpf+0x4a2>
    8000bcae:	0ec0206f          	j	8000dd9a <tinst_tests_gpf+0x258a>
    8000bcb2:	0001b517          	auipc	a0,0x1b
    8000bcb6:	22650513          	addi	a0,a0,550 # 80026ed8 <__func__.0+0x318>
    8000bcba:	24a190ef          	jal	80024f04 <printf>
    8000bcbe:	02900513          	li	a0,41
    8000bcc2:	04c180ef          	jal	80023d0e <putchar>
    8000bcc6:	4529                	li	a0,10
    8000bcc8:	046180ef          	jal	80023d0e <putchar>
    8000bccc:	00090a63          	beqz	s2,8000bce0 <tinst_tests_gpf+0x4d0>
    8000bcd0:	0003d797          	auipc	a5,0x3d
    8000bcd4:	3417c783          	lbu	a5,833(a5) # 80049011 <excpt+0x1>
    8000bcd8:	c399                	beqz	a5,8000bcde <tinst_tests_gpf+0x4ce>
    8000bcda:	2550106f          	j	8000d72e <tinst_tests_gpf+0x1f1e>
    8000bcde:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000bce0:	0330000f          	fence	rw,rw
    8000bce4:	4785                	li	a5,1
    8000bce6:	0003d717          	auipc	a4,0x3d
    8000bcea:	36073123          	sd	zero,866(a4) # 80049048 <excpt+0x38>
    8000bcee:	00f41023          	sh	a5,0(s0)
    8000bcf2:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000bcf6:	001007b7          	lui	a5,0x100
    8000bcfa:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bcfe:	07b2                	slli	a5,a5,0xc
    8000bd00:	0007b783          	ld	a5,0(a5)
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000bd04:	0001d617          	auipc	a2,0x1d
    8000bd08:	53460613          	addi	a2,a2,1332 # 80029238 <__func__.0+0x2678>
    8000bd0c:	08200593          	li	a1,130
    8000bd10:	0001b517          	auipc	a0,0x1b
    8000bd14:	1a850513          	addi	a0,a0,424 # 80026eb8 <__func__.0+0x2f8>
    8000bd18:	1ec190ef          	jal	80024f04 <printf>
    8000bd1c:	0003d797          	auipc	a5,0x3d
    8000bd20:	2f57c783          	lbu	a5,757(a5) # 80049011 <excpt+0x1>
    8000bd24:	e399                	bnez	a5,8000bd2a <tinst_tests_gpf+0x51a>
    8000bd26:	6b40106f          	j	8000d3da <tinst_tests_gpf+0x1bca>
    8000bd2a:	6418                	ld	a4,8(s0)
    8000bd2c:	47d5                	li	a5,21
    8000bd2e:	0001b597          	auipc	a1,0x1b
    8000bd32:	16258593          	addi	a1,a1,354 # 80026e90 <__func__.0+0x2d0>
    8000bd36:	00f71463          	bne	a4,a5,8000bd3e <tinst_tests_gpf+0x52e>
    8000bd3a:	6580106f          	j	8000d392 <tinst_tests_gpf+0x1b82>
    8000bd3e:	0001b517          	auipc	a0,0x1b
    8000bd42:	19250513          	addi	a0,a0,402 # 80026ed0 <__func__.0+0x310>
    8000bd46:	1be190ef          	jal	80024f04 <printf>
    8000bd4a:	0003d797          	auipc	a5,0x3d
    8000bd4e:	2c77c783          	lbu	a5,711(a5) # 80049011 <excpt+0x1>
    8000bd52:	c799                	beqz	a5,8000bd60 <tinst_tests_gpf+0x550>
    8000bd54:	6418                	ld	a4,8(s0)
    8000bd56:	47d5                	li	a5,21
    8000bd58:	00f71463          	bne	a4,a5,8000bd60 <tinst_tests_gpf+0x550>
    8000bd5c:	0d00206f          	j	8000de2c <tinst_tests_gpf+0x261c>
    8000bd60:	0001b517          	auipc	a0,0x1b
    8000bd64:	17850513          	addi	a0,a0,376 # 80026ed8 <__func__.0+0x318>
    8000bd68:	19c190ef          	jal	80024f04 <printf>
    8000bd6c:	02900513          	li	a0,41
    8000bd70:	79f170ef          	jal	80023d0e <putchar>
    8000bd74:	4529                	li	a0,10
    8000bd76:	799170ef          	jal	80023d0e <putchar>
    8000bd7a:	00090a63          	beqz	s2,8000bd8e <tinst_tests_gpf+0x57e>
    8000bd7e:	0003d797          	auipc	a5,0x3d
    8000bd82:	2937c783          	lbu	a5,659(a5) # 80049011 <excpt+0x1>
    8000bd86:	c399                	beqz	a5,8000bd8c <tinst_tests_gpf+0x57c>
    8000bd88:	2570106f          	j	8000d7de <tinst_tests_gpf+0x1fce>
    8000bd8c:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    8000bd8e:	0330000f          	fence	rw,rw
    8000bd92:	4785                	li	a5,1
    8000bd94:	0003d717          	auipc	a4,0x3d
    8000bd98:	2a073a23          	sd	zero,692(a4) # 80049048 <excpt+0x38>
    8000bd9c:	00f41023          	sh	a5,0(s0)
    8000bda0:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000bda4:	001007b7          	lui	a5,0x100
    8000bda8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bdac:	07b2                	slli	a5,a5,0xc
    8000bdae:	573d                	li	a4,-17
    8000bdb0:	00e78023          	sb	a4,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000bdb4:	0001d617          	auipc	a2,0x1d
    8000bdb8:	4c460613          	addi	a2,a2,1220 # 80029278 <__func__.0+0x26b8>
    8000bdbc:	08200593          	li	a1,130
    8000bdc0:	0001b517          	auipc	a0,0x1b
    8000bdc4:	0f850513          	addi	a0,a0,248 # 80026eb8 <__func__.0+0x2f8>
    8000bdc8:	13c190ef          	jal	80024f04 <printf>
    8000bdcc:	0003d797          	auipc	a5,0x3d
    8000bdd0:	2457c783          	lbu	a5,581(a5) # 80049011 <excpt+0x1>
    8000bdd4:	e399                	bnez	a5,8000bdda <tinst_tests_gpf+0x5ca>
    8000bdd6:	65e0106f          	j	8000d434 <tinst_tests_gpf+0x1c24>
    8000bdda:	6418                	ld	a4,8(s0)
    8000bddc:	47dd                	li	a5,23
    8000bdde:	0001b597          	auipc	a1,0x1b
    8000bde2:	0b258593          	addi	a1,a1,178 # 80026e90 <__func__.0+0x2d0>
    8000bde6:	00f71463          	bne	a4,a5,8000bdee <tinst_tests_gpf+0x5de>
    8000bdea:	5fc0106f          	j	8000d3e6 <tinst_tests_gpf+0x1bd6>
    8000bdee:	0001b517          	auipc	a0,0x1b
    8000bdf2:	0e250513          	addi	a0,a0,226 # 80026ed0 <__func__.0+0x310>
    8000bdf6:	10e190ef          	jal	80024f04 <printf>
    8000bdfa:	0003d797          	auipc	a5,0x3d
    8000bdfe:	2177c783          	lbu	a5,535(a5) # 80049011 <excpt+0x1>
    8000be02:	c799                	beqz	a5,8000be10 <tinst_tests_gpf+0x600>
    8000be04:	6418                	ld	a4,8(s0)
    8000be06:	47dd                	li	a5,23
    8000be08:	00f71463          	bne	a4,a5,8000be10 <tinst_tests_gpf+0x600>
    8000be0c:	0b60206f          	j	8000dec2 <tinst_tests_gpf+0x26b2>
    8000be10:	0001b517          	auipc	a0,0x1b
    8000be14:	0c850513          	addi	a0,a0,200 # 80026ed8 <__func__.0+0x318>
    8000be18:	0ec190ef          	jal	80024f04 <printf>
    8000be1c:	02900513          	li	a0,41
    8000be20:	6ef170ef          	jal	80023d0e <putchar>
    8000be24:	4529                	li	a0,10
    8000be26:	6e9170ef          	jal	80023d0e <putchar>
    8000be2a:	00090a63          	beqz	s2,8000be3e <tinst_tests_gpf+0x62e>
    8000be2e:	0003d797          	auipc	a5,0x3d
    8000be32:	1e37c783          	lbu	a5,483(a5) # 80049011 <excpt+0x1>
    8000be36:	c399                	beqz	a5,8000be3c <tinst_tests_gpf+0x62c>
    8000be38:	2570106f          	j	8000d88e <tinst_tests_gpf+0x207e>
    8000be3c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000be3e:	0330000f          	fence	rw,rw
    8000be42:	4785                	li	a5,1
    8000be44:	0003d717          	auipc	a4,0x3d
    8000be48:	20073223          	sd	zero,516(a4) # 80049048 <excpt+0x38>
    8000be4c:	00f41023          	sh	a5,0(s0)
    8000be50:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000be54:	001007b7          	lui	a5,0x100
    8000be58:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000be5c:	7771                	lui	a4,0xffffc
    8000be5e:	07b2                	slli	a5,a5,0xc
    8000be60:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000be64:	00e79023          	sh	a4,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000be68:	0001d617          	auipc	a2,0x1d
    8000be6c:	45060613          	addi	a2,a2,1104 # 800292b8 <__func__.0+0x26f8>
    8000be70:	08200593          	li	a1,130
    8000be74:	0001b517          	auipc	a0,0x1b
    8000be78:	04450513          	addi	a0,a0,68 # 80026eb8 <__func__.0+0x2f8>
    8000be7c:	088190ef          	jal	80024f04 <printf>
    8000be80:	0003d797          	auipc	a5,0x3d
    8000be84:	1917c783          	lbu	a5,401(a5) # 80049011 <excpt+0x1>
    8000be88:	e399                	bnez	a5,8000be8e <tinst_tests_gpf+0x67e>
    8000be8a:	6040106f          	j	8000d48e <tinst_tests_gpf+0x1c7e>
    8000be8e:	6418                	ld	a4,8(s0)
    8000be90:	47dd                	li	a5,23
    8000be92:	0001b597          	auipc	a1,0x1b
    8000be96:	ffe58593          	addi	a1,a1,-2 # 80026e90 <__func__.0+0x2d0>
    8000be9a:	00f71463          	bne	a4,a5,8000bea2 <tinst_tests_gpf+0x692>
    8000be9e:	5a20106f          	j	8000d440 <tinst_tests_gpf+0x1c30>
    8000bea2:	0001b517          	auipc	a0,0x1b
    8000bea6:	02e50513          	addi	a0,a0,46 # 80026ed0 <__func__.0+0x310>
    8000beaa:	05a190ef          	jal	80024f04 <printf>
    8000beae:	0003d797          	auipc	a5,0x3d
    8000beb2:	1637c783          	lbu	a5,355(a5) # 80049011 <excpt+0x1>
    8000beb6:	c799                	beqz	a5,8000bec4 <tinst_tests_gpf+0x6b4>
    8000beb8:	6418                	ld	a4,8(s0)
    8000beba:	47dd                	li	a5,23
    8000bebc:	00f71463          	bne	a4,a5,8000bec4 <tinst_tests_gpf+0x6b4>
    8000bec0:	09e0206f          	j	8000df5e <tinst_tests_gpf+0x274e>
    8000bec4:	0001b517          	auipc	a0,0x1b
    8000bec8:	01450513          	addi	a0,a0,20 # 80026ed8 <__func__.0+0x318>
    8000becc:	038190ef          	jal	80024f04 <printf>
    8000bed0:	02900513          	li	a0,41
    8000bed4:	63b170ef          	jal	80023d0e <putchar>
    8000bed8:	4529                	li	a0,10
    8000beda:	635170ef          	jal	80023d0e <putchar>
    8000bede:	00090a63          	beqz	s2,8000bef2 <tinst_tests_gpf+0x6e2>
    8000bee2:	0003d797          	auipc	a5,0x3d
    8000bee6:	12f7c783          	lbu	a5,303(a5) # 80049011 <excpt+0x1>
    8000beea:	c399                	beqz	a5,8000bef0 <tinst_tests_gpf+0x6e0>
    8000beec:	2210106f          	j	8000d90c <tinst_tests_gpf+0x20fc>
    8000bef0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bef2:	0330000f          	fence	rw,rw
    8000bef6:	4785                	li	a5,1
    8000bef8:	0003d717          	auipc	a4,0x3d
    8000befc:	14073823          	sd	zero,336(a4) # 80049048 <excpt+0x38>
    8000bf00:	00f41023          	sh	a5,0(s0)
    8000bf04:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000bf08:	001007b7          	lui	a5,0x100
    8000bf0c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bf10:	deadc737          	lui	a4,0xdeadc
    8000bf14:	07b2                	slli	a5,a5,0xc
    8000bf16:	eef7071b          	addiw	a4,a4,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8000bf1a:	00e7a023          	sw	a4,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000bf1e:	0001d617          	auipc	a2,0x1d
    8000bf22:	3da60613          	addi	a2,a2,986 # 800292f8 <__func__.0+0x2738>
    8000bf26:	08200593          	li	a1,130
    8000bf2a:	0001b517          	auipc	a0,0x1b
    8000bf2e:	f8e50513          	addi	a0,a0,-114 # 80026eb8 <__func__.0+0x2f8>
    8000bf32:	7d3180ef          	jal	80024f04 <printf>
    8000bf36:	0003d797          	auipc	a5,0x3d
    8000bf3a:	0db7c783          	lbu	a5,219(a5) # 80049011 <excpt+0x1>
    8000bf3e:	e399                	bnez	a5,8000bf44 <tinst_tests_gpf+0x734>
    8000bf40:	5a80106f          	j	8000d4e8 <tinst_tests_gpf+0x1cd8>
    8000bf44:	6418                	ld	a4,8(s0)
    8000bf46:	47dd                	li	a5,23
    8000bf48:	0001b597          	auipc	a1,0x1b
    8000bf4c:	f4858593          	addi	a1,a1,-184 # 80026e90 <__func__.0+0x2d0>
    8000bf50:	00f71463          	bne	a4,a5,8000bf58 <tinst_tests_gpf+0x748>
    8000bf54:	5460106f          	j	8000d49a <tinst_tests_gpf+0x1c8a>
    8000bf58:	0001b517          	auipc	a0,0x1b
    8000bf5c:	f7850513          	addi	a0,a0,-136 # 80026ed0 <__func__.0+0x310>
    8000bf60:	7a5180ef          	jal	80024f04 <printf>
    8000bf64:	0003d797          	auipc	a5,0x3d
    8000bf68:	0ad7c783          	lbu	a5,173(a5) # 80049011 <excpt+0x1>
    8000bf6c:	c799                	beqz	a5,8000bf7a <tinst_tests_gpf+0x76a>
    8000bf6e:	6418                	ld	a4,8(s0)
    8000bf70:	47dd                	li	a5,23
    8000bf72:	00f71463          	bne	a4,a5,8000bf7a <tinst_tests_gpf+0x76a>
    8000bf76:	0840206f          	j	8000dffa <tinst_tests_gpf+0x27ea>
    8000bf7a:	0001b517          	auipc	a0,0x1b
    8000bf7e:	f5e50513          	addi	a0,a0,-162 # 80026ed8 <__func__.0+0x318>
    8000bf82:	783180ef          	jal	80024f04 <printf>
    8000bf86:	02900513          	li	a0,41
    8000bf8a:	585170ef          	jal	80023d0e <putchar>
    8000bf8e:	4529                	li	a0,10
    8000bf90:	57f170ef          	jal	80023d0e <putchar>
    8000bf94:	00090a63          	beqz	s2,8000bfa8 <tinst_tests_gpf+0x798>
    8000bf98:	0003d797          	auipc	a5,0x3d
    8000bf9c:	0797c783          	lbu	a5,121(a5) # 80049011 <excpt+0x1>
    8000bfa0:	c399                	beqz	a5,8000bfa6 <tinst_tests_gpf+0x796>
    8000bfa2:	1b90106f          	j	8000d95a <tinst_tests_gpf+0x214a>
    8000bfa6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bfa8:	0330000f          	fence	rw,rw
    8000bfac:	4785                	li	a5,1
    8000bfae:	0003d717          	auipc	a4,0x3d
    8000bfb2:	08073d23          	sd	zero,154(a4) # 80049048 <excpt+0x38>
    8000bfb6:	00f41023          	sh	a5,0(s0)
    8000bfba:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000bfbe:	37ab77b7          	lui	a5,0x37ab7
    8000bfc2:	00100737          	lui	a4,0x100
    8000bfc6:	078a                	slli	a5,a5,0x2
    8000bfc8:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000bfcc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000bfd0:	0732                	slli	a4,a4,0xc
    8000bfd2:	00f73023          	sd	a5,0(a4)
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000bfd6:	0001d617          	auipc	a2,0x1d
    8000bfda:	36260613          	addi	a2,a2,866 # 80029338 <__func__.0+0x2778>
    8000bfde:	08200593          	li	a1,130
    8000bfe2:	0001b517          	auipc	a0,0x1b
    8000bfe6:	ed650513          	addi	a0,a0,-298 # 80026eb8 <__func__.0+0x2f8>
    8000bfea:	71b180ef          	jal	80024f04 <printf>
    8000bfee:	0003d797          	auipc	a5,0x3d
    8000bff2:	0237c783          	lbu	a5,35(a5) # 80049011 <excpt+0x1>
    8000bff6:	e399                	bnez	a5,8000bffc <tinst_tests_gpf+0x7ec>
    8000bff8:	54a0106f          	j	8000d542 <tinst_tests_gpf+0x1d32>
    8000bffc:	6418                	ld	a4,8(s0)
    8000bffe:	47dd                	li	a5,23
    8000c000:	0001b597          	auipc	a1,0x1b
    8000c004:	e9058593          	addi	a1,a1,-368 # 80026e90 <__func__.0+0x2d0>
    8000c008:	00f71463          	bne	a4,a5,8000c010 <tinst_tests_gpf+0x800>
    8000c00c:	4e80106f          	j	8000d4f4 <tinst_tests_gpf+0x1ce4>
    8000c010:	0001b517          	auipc	a0,0x1b
    8000c014:	ec050513          	addi	a0,a0,-320 # 80026ed0 <__func__.0+0x310>
    8000c018:	6ed180ef          	jal	80024f04 <printf>
    8000c01c:	0003d797          	auipc	a5,0x3d
    8000c020:	ff57c783          	lbu	a5,-11(a5) # 80049011 <excpt+0x1>
    8000c024:	c799                	beqz	a5,8000c032 <tinst_tests_gpf+0x822>
    8000c026:	6418                	ld	a4,8(s0)
    8000c028:	47dd                	li	a5,23
    8000c02a:	00f71463          	bne	a4,a5,8000c032 <tinst_tests_gpf+0x822>
    8000c02e:	0680206f          	j	8000e096 <tinst_tests_gpf+0x2886>
    8000c032:	0001b517          	auipc	a0,0x1b
    8000c036:	ea650513          	addi	a0,a0,-346 # 80026ed8 <__func__.0+0x318>
    8000c03a:	6cb180ef          	jal	80024f04 <printf>
    8000c03e:	02900513          	li	a0,41
    8000c042:	4cd170ef          	jal	80023d0e <putchar>
    8000c046:	4529                	li	a0,10
    8000c048:	4c7170ef          	jal	80023d0e <putchar>
    8000c04c:	00090a63          	beqz	s2,8000c060 <tinst_tests_gpf+0x850>
    8000c050:	0003d797          	auipc	a5,0x3d
    8000c054:	fc17c783          	lbu	a5,-63(a5) # 80049011 <excpt+0x1>
    8000c058:	c399                	beqz	a5,8000c05e <tinst_tests_gpf+0x84e>
    8000c05a:	14f0106f          	j	8000d9a8 <tinst_tests_gpf+0x2198>
    8000c05e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000c060:	0330000f          	fence	rw,rw
    8000c064:	4785                	li	a5,1
    8000c066:	0003d717          	auipc	a4,0x3d
    8000c06a:	fe073123          	sd	zero,-30(a4) # 80049048 <excpt+0x38>
    8000c06e:	00f41023          	sh	a5,0(s0)
    8000c072:	0330000f          	fence	rw,rw
    register uint64_t _addr asm("a0") = addr;
    8000c076:	00100537          	lui	a0,0x100
    8000c07a:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000c07e:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000c080:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000c082:	0001d617          	auipc	a2,0x1d
    8000c086:	2f660613          	addi	a2,a2,758 # 80029378 <__func__.0+0x27b8>
    8000c08a:	08200593          	li	a1,130
    8000c08e:	0001b517          	auipc	a0,0x1b
    8000c092:	e2a50513          	addi	a0,a0,-470 # 80026eb8 <__func__.0+0x2f8>
    8000c096:	66f180ef          	jal	80024f04 <printf>
    8000c09a:	0003d797          	auipc	a5,0x3d
    8000c09e:	f777c783          	lbu	a5,-137(a5) # 80049011 <excpt+0x1>
    8000c0a2:	c799                	beqz	a5,8000c0b0 <tinst_tests_gpf+0x8a0>
    8000c0a4:	6418                	ld	a4,8(s0)
    8000c0a6:	47d5                	li	a5,21
    8000c0a8:	00f71463          	bne	a4,a5,8000c0b0 <tinst_tests_gpf+0x8a0>
    8000c0ac:	2470106f          	j	8000daf2 <tinst_tests_gpf+0x22e2>
    8000c0b0:	0001b597          	auipc	a1,0x1b
    8000c0b4:	de058593          	addi	a1,a1,-544 # 80026e90 <__func__.0+0x2d0>
    8000c0b8:	0001b517          	auipc	a0,0x1b
    8000c0bc:	e1850513          	addi	a0,a0,-488 # 80026ed0 <__func__.0+0x310>
    8000c0c0:	645180ef          	jal	80024f04 <printf>
    8000c0c4:	0003d797          	auipc	a5,0x3d
    8000c0c8:	f4d7c783          	lbu	a5,-179(a5) # 80049011 <excpt+0x1>
    8000c0cc:	c799                	beqz	a5,8000c0da <tinst_tests_gpf+0x8ca>
    8000c0ce:	6418                	ld	a4,8(s0)
    8000c0d0:	47d5                	li	a5,21
    8000c0d2:	00f71463          	bne	a4,a5,8000c0da <tinst_tests_gpf+0x8ca>
    8000c0d6:	05c0206f          	j	8000e132 <tinst_tests_gpf+0x2922>
    8000c0da:	0001b517          	auipc	a0,0x1b
    8000c0de:	dfe50513          	addi	a0,a0,-514 # 80026ed8 <__func__.0+0x318>
    8000c0e2:	623180ef          	jal	80024f04 <printf>
    8000c0e6:	02900513          	li	a0,41
    8000c0ea:	425170ef          	jal	80023d0e <putchar>
    8000c0ee:	4529                	li	a0,10
    8000c0f0:	41f170ef          	jal	80023d0e <putchar>
    8000c0f4:	00090a63          	beqz	s2,8000c108 <tinst_tests_gpf+0x8f8>
    8000c0f8:	0003d797          	auipc	a5,0x3d
    8000c0fc:	f197c783          	lbu	a5,-231(a5) # 80049011 <excpt+0x1>
    8000c100:	c399                	beqz	a5,8000c106 <tinst_tests_gpf+0x8f6>
    8000c102:	0f50106f          	j	8000d9f6 <tinst_tests_gpf+0x21e6>
    8000c106:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000c108:	0330000f          	fence	rw,rw
    8000c10c:	4785                	li	a5,1
    8000c10e:	0003d717          	auipc	a4,0x3d
    8000c112:	f2073d23          	sd	zero,-198(a4) # 80049048 <excpt+0x38>
    8000c116:	00f41023          	sh	a5,0(s0)
    8000c11a:	0330000f          	fence	rw,rw
    register uint64_t _addr asm("a0") = addr;
    8000c11e:	00100537          	lui	a0,0x100
    8000c122:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000c126:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000c128:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000c12a:	0001d617          	auipc	a2,0x1d
    8000c12e:	28e60613          	addi	a2,a2,654 # 800293b8 <__func__.0+0x27f8>
    return value;
    8000c132:	84ae                	mv	s1,a1
    8000c134:	0001b517          	auipc	a0,0x1b
    8000c138:	d8450513          	addi	a0,a0,-636 # 80026eb8 <__func__.0+0x2f8>
    8000c13c:	08200593          	li	a1,130
    8000c140:	5c5180ef          	jal	80024f04 <printf>
    8000c144:	0003d797          	auipc	a5,0x3d
    8000c148:	ecd7c783          	lbu	a5,-307(a5) # 80049011 <excpt+0x1>
    8000c14c:	c799                	beqz	a5,8000c15a <tinst_tests_gpf+0x94a>
    8000c14e:	6418                	ld	a4,8(s0)
    8000c150:	47d5                	li	a5,21
    8000c152:	00f71463          	bne	a4,a5,8000c15a <tinst_tests_gpf+0x94a>
    8000c156:	1f10106f          	j	8000db46 <tinst_tests_gpf+0x2336>
    8000c15a:	0001b597          	auipc	a1,0x1b
    8000c15e:	d3658593          	addi	a1,a1,-714 # 80026e90 <__func__.0+0x2d0>
    8000c162:	0001b517          	auipc	a0,0x1b
    8000c166:	d6e50513          	addi	a0,a0,-658 # 80026ed0 <__func__.0+0x310>
    8000c16a:	59b180ef          	jal	80024f04 <printf>
    8000c16e:	0003d797          	auipc	a5,0x3d
    8000c172:	ea37c783          	lbu	a5,-349(a5) # 80049011 <excpt+0x1>
    8000c176:	c799                	beqz	a5,8000c184 <tinst_tests_gpf+0x974>
    8000c178:	6418                	ld	a4,8(s0)
    8000c17a:	47d5                	li	a5,21
    8000c17c:	00f71463          	bne	a4,a5,8000c184 <tinst_tests_gpf+0x974>
    8000c180:	0380206f          	j	8000e1b8 <tinst_tests_gpf+0x29a8>
    8000c184:	0001b517          	auipc	a0,0x1b
    8000c188:	d5450513          	addi	a0,a0,-684 # 80026ed8 <__func__.0+0x318>
    8000c18c:	579180ef          	jal	80024f04 <printf>
    8000c190:	02900513          	li	a0,41
    8000c194:	37b170ef          	jal	80023d0e <putchar>
    8000c198:	4529                	li	a0,10
    8000c19a:	375170ef          	jal	80023d0e <putchar>
    8000c19e:	00090a63          	beqz	s2,8000c1b2 <tinst_tests_gpf+0x9a2>
    8000c1a2:	0003d797          	auipc	a5,0x3d
    8000c1a6:	e6f7c783          	lbu	a5,-401(a5) # 80049011 <excpt+0x1>
    8000c1aa:	c399                	beqz	a5,8000c1b0 <tinst_tests_gpf+0x9a0>
    8000c1ac:	0850106f          	j	8000da30 <tinst_tests_gpf+0x2220>
    8000c1b0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000c1b2:	0330000f          	fence	rw,rw
    8000c1b6:	4785                	li	a5,1
    8000c1b8:	0003d717          	auipc	a4,0x3d
    8000c1bc:	e8073823          	sd	zero,-368(a4) # 80049048 <excpt+0x38>
    8000c1c0:	00f41023          	sh	a5,0(s0)
    8000c1c4:	0330000f          	fence	rw,rw
    register uint64_t _addr asm("a0") = addr;
    8000c1c8:	00100537          	lui	a0,0x100
    8000c1cc:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000c1d0:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    8000c1d2:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000c1d4:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000c1d6:	0001d617          	auipc	a2,0x1d
    8000c1da:	1a260613          	addi	a2,a2,418 # 80029378 <__func__.0+0x27b8>
    8000c1de:	08200593          	li	a1,130
    8000c1e2:	0001b517          	auipc	a0,0x1b
    8000c1e6:	cd650513          	addi	a0,a0,-810 # 80026eb8 <__func__.0+0x2f8>
    8000c1ea:	51b180ef          	jal	80024f04 <printf>
    8000c1ee:	0003d797          	auipc	a5,0x3d
    8000c1f2:	e237c783          	lbu	a5,-477(a5) # 80049011 <excpt+0x1>
    8000c1f6:	c799                	beqz	a5,8000c204 <tinst_tests_gpf+0x9f4>
    8000c1f8:	6418                	ld	a4,8(s0)
    8000c1fa:	47dd                	li	a5,23
    8000c1fc:	00f71463          	bne	a4,a5,8000c204 <tinst_tests_gpf+0x9f4>
    8000c200:	19d0106f          	j	8000db9c <tinst_tests_gpf+0x238c>
    8000c204:	0001b597          	auipc	a1,0x1b
    8000c208:	c8c58593          	addi	a1,a1,-884 # 80026e90 <__func__.0+0x2d0>
    8000c20c:	0001b517          	auipc	a0,0x1b
    8000c210:	cc450513          	addi	a0,a0,-828 # 80026ed0 <__func__.0+0x310>
    8000c214:	4f1180ef          	jal	80024f04 <printf>
    8000c218:	0003d797          	auipc	a5,0x3d
    8000c21c:	df97c783          	lbu	a5,-519(a5) # 80049011 <excpt+0x1>
    8000c220:	c799                	beqz	a5,8000c22e <tinst_tests_gpf+0xa1e>
    8000c222:	6418                	ld	a4,8(s0)
    8000c224:	47dd                	li	a5,23
    8000c226:	00f71463          	bne	a4,a5,8000c22e <tinst_tests_gpf+0xa1e>
    8000c22a:	0180206f          	j	8000e242 <tinst_tests_gpf+0x2a32>
    8000c22e:	0001b517          	auipc	a0,0x1b
    8000c232:	caa50513          	addi	a0,a0,-854 # 80026ed8 <__func__.0+0x318>
    8000c236:	4cf180ef          	jal	80024f04 <printf>
    8000c23a:	02900513          	li	a0,41
    8000c23e:	2d1170ef          	jal	80023d0e <putchar>
    8000c242:	4529                	li	a0,10
    8000c244:	2cb170ef          	jal	80023d0e <putchar>
    8000c248:	00090a63          	beqz	s2,8000c25c <tinst_tests_gpf+0xa4c>
    8000c24c:	0003d797          	auipc	a5,0x3d
    8000c250:	dc57c783          	lbu	a5,-571(a5) # 80049011 <excpt+0x1>
    8000c254:	c399                	beqz	a5,8000c25a <tinst_tests_gpf+0xa4a>
    8000c256:	0190106f          	j	8000da6e <tinst_tests_gpf+0x225e>
    8000c25a:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000c25c:	0330000f          	fence	rw,rw
    8000c260:	4785                	li	a5,1
    8000c262:	0003d717          	auipc	a4,0x3d
    8000c266:	de073323          	sd	zero,-538(a4) # 80049048 <excpt+0x38>
    8000c26a:	00f41023          	sh	a5,0(s0)
    8000c26e:	0330000f          	fence	rw,rw
    register uint64_t _addr asm("a0") = addr;
    8000c272:	00100537          	lui	a0,0x100
    8000c276:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000c27a:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    8000c27c:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000c27e:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000c280:	0001d617          	auipc	a2,0x1d
    8000c284:	17860613          	addi	a2,a2,376 # 800293f8 <__func__.0+0x2838>
    8000c288:	08200593          	li	a1,130
    8000c28c:	0001b517          	auipc	a0,0x1b
    8000c290:	c2c50513          	addi	a0,a0,-980 # 80026eb8 <__func__.0+0x2f8>
    8000c294:	471180ef          	jal	80024f04 <printf>
    8000c298:	0003d797          	auipc	a5,0x3d
    8000c29c:	d797c783          	lbu	a5,-647(a5) # 80049011 <excpt+0x1>
    8000c2a0:	c799                	beqz	a5,8000c2ae <tinst_tests_gpf+0xa9e>
    8000c2a2:	6418                	ld	a4,8(s0)
    8000c2a4:	47dd                	li	a5,23
    8000c2a6:	00f71463          	bne	a4,a5,8000c2ae <tinst_tests_gpf+0xa9e>
    8000c2aa:	1490106f          	j	8000dbf2 <tinst_tests_gpf+0x23e2>
    8000c2ae:	0001b597          	auipc	a1,0x1b
    8000c2b2:	be258593          	addi	a1,a1,-1054 # 80026e90 <__func__.0+0x2d0>
    8000c2b6:	0001b517          	auipc	a0,0x1b
    8000c2ba:	c1a50513          	addi	a0,a0,-998 # 80026ed0 <__func__.0+0x310>
    8000c2be:	447180ef          	jal	80024f04 <printf>
    8000c2c2:	0003d797          	auipc	a5,0x3d
    8000c2c6:	d4f7c783          	lbu	a5,-689(a5) # 80049011 <excpt+0x1>
    8000c2ca:	c799                	beqz	a5,8000c2d8 <tinst_tests_gpf+0xac8>
    8000c2cc:	6418                	ld	a4,8(s0)
    8000c2ce:	47dd                	li	a5,23
    8000c2d0:	00f71463          	bne	a4,a5,8000c2d8 <tinst_tests_gpf+0xac8>
    8000c2d4:	7fd0106f          	j	8000e2d0 <tinst_tests_gpf+0x2ac0>
    8000c2d8:	0001b517          	auipc	a0,0x1b
    8000c2dc:	c0050513          	addi	a0,a0,-1024 # 80026ed8 <__func__.0+0x318>
    8000c2e0:	425180ef          	jal	80024f04 <printf>
    8000c2e4:	02900513          	li	a0,41
    8000c2e8:	227170ef          	jal	80023d0e <putchar>
    8000c2ec:	4529                	li	a0,10
    8000c2ee:	221170ef          	jal	80023d0e <putchar>
    8000c2f2:	00090e63          	beqz	s2,8000c30e <tinst_tests_gpf+0xafe>
    8000c2f6:	0003d797          	auipc	a5,0x3d
    8000c2fa:	d1b7c783          	lbu	a5,-741(a5) # 80049011 <excpt+0x1>
    8000c2fe:	c799                	beqz	a5,8000c30c <tinst_tests_gpf+0xafc>
    8000c300:	6418                	ld	a4,8(s0)
    8000c302:	47dd                	li	a5,23
    8000c304:	00f71463          	bne	a4,a5,8000c30c <tinst_tests_gpf+0xafc>
    8000c308:	54a0206f          	j	8000e852 <tinst_tests_gpf+0x3042>
    8000c30c:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000c30e:	0330000f          	fence	rw,rw
    8000c312:	4785                	li	a5,1
    8000c314:	0003d717          	auipc	a4,0x3d
    8000c318:	d2073a23          	sd	zero,-716(a4) # 80049048 <excpt+0x38>
    8000c31c:	00f41023          	sh	a5,0(s0)
    8000c320:	0330000f          	fence	rw,rw
    asm volatile(
    8000c324:	001007b7          	lui	a5,0x100
    8000c328:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c32c:	07b2                	slli	a5,a5,0xc
    8000c32e:	1007a7af          	lr.w	a5,(a5)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000c332:	0001d617          	auipc	a2,0x1d
    8000c336:	10660613          	addi	a2,a2,262 # 80029438 <__func__.0+0x2878>
    8000c33a:	08200593          	li	a1,130
    8000c33e:	0001b517          	auipc	a0,0x1b
    8000c342:	b7a50513          	addi	a0,a0,-1158 # 80026eb8 <__func__.0+0x2f8>
    value = lr_w(vaddr_f);
    8000c346:	02079493          	slli	s1,a5,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000c34a:	3bb180ef          	jal	80024f04 <printf>
    8000c34e:	0003d797          	auipc	a5,0x3d
    8000c352:	cc37c783          	lbu	a5,-829(a5) # 80049011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000c356:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000c358:	e399                	bnez	a5,8000c35e <tinst_tests_gpf+0xb4e>
    8000c35a:	2420106f          	j	8000d59c <tinst_tests_gpf+0x1d8c>
    8000c35e:	6418                	ld	a4,8(s0)
    8000c360:	47d5                	li	a5,21
    8000c362:	0001b597          	auipc	a1,0x1b
    8000c366:	b2e58593          	addi	a1,a1,-1234 # 80026e90 <__func__.0+0x2d0>
    8000c36a:	00f71463          	bne	a4,a5,8000c372 <tinst_tests_gpf+0xb62>
    8000c36e:	1e00106f          	j	8000d54e <tinst_tests_gpf+0x1d3e>
    8000c372:	0001b517          	auipc	a0,0x1b
    8000c376:	b5e50513          	addi	a0,a0,-1186 # 80026ed0 <__func__.0+0x310>
    8000c37a:	38b180ef          	jal	80024f04 <printf>
    8000c37e:	0003d797          	auipc	a5,0x3d
    8000c382:	c937c783          	lbu	a5,-877(a5) # 80049011 <excpt+0x1>
    8000c386:	c799                	beqz	a5,8000c394 <tinst_tests_gpf+0xb84>
    8000c388:	6418                	ld	a4,8(s0)
    8000c38a:	47d5                	li	a5,21
    8000c38c:	00f71463          	bne	a4,a5,8000c394 <tinst_tests_gpf+0xb84>
    8000c390:	7cb0106f          	j	8000e35a <tinst_tests_gpf+0x2b4a>
    8000c394:	0001b517          	auipc	a0,0x1b
    8000c398:	b4450513          	addi	a0,a0,-1212 # 80026ed8 <__func__.0+0x318>
    8000c39c:	369180ef          	jal	80024f04 <printf>
    8000c3a0:	02900513          	li	a0,41
    8000c3a4:	16b170ef          	jal	80023d0e <putchar>
    8000c3a8:	4529                	li	a0,10
    8000c3aa:	165170ef          	jal	80023d0e <putchar>
    8000c3ae:	00090e63          	beqz	s2,8000c3ca <tinst_tests_gpf+0xbba>
    8000c3b2:	0003d797          	auipc	a5,0x3d
    8000c3b6:	c5f7c783          	lbu	a5,-929(a5) # 80049011 <excpt+0x1>
    8000c3ba:	c799                	beqz	a5,8000c3c8 <tinst_tests_gpf+0xbb8>
    8000c3bc:	6418                	ld	a4,8(s0)
    8000c3be:	47d5                	li	a5,21
    8000c3c0:	00f71463          	bne	a4,a5,8000c3c8 <tinst_tests_gpf+0xbb8>
    8000c3c4:	4c00206f          	j	8000e884 <tinst_tests_gpf+0x3074>
    8000c3c8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c3ca:	0330000f          	fence	rw,rw
    8000c3ce:	4785                	li	a5,1
    8000c3d0:	0003d717          	auipc	a4,0x3d
    8000c3d4:	c6073c23          	sd	zero,-904(a4) # 80049048 <excpt+0x38>
    8000c3d8:	00f41023          	sh	a5,0(s0)
    8000c3dc:	0330000f          	fence	rw,rw
    asm volatile(
    8000c3e0:	00100737          	lui	a4,0x100
    8000c3e4:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000c3e8:	87a6                	mv	a5,s1
    8000c3ea:	0732                	slli	a4,a4,0xc
    8000c3ec:	18f727af          	sc.w	a5,a5,(a4)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000c3f0:	0001d617          	auipc	a2,0x1d
    8000c3f4:	08860613          	addi	a2,a2,136 # 80029478 <__func__.0+0x28b8>
    8000c3f8:	08200593          	li	a1,130
    8000c3fc:	0001b517          	auipc	a0,0x1b
    8000c400:	abc50513          	addi	a0,a0,-1348 # 80026eb8 <__func__.0+0x2f8>
    return value;
    8000c404:	0007849b          	sext.w	s1,a5
    8000c408:	2fd180ef          	jal	80024f04 <printf>
    8000c40c:	0003d797          	auipc	a5,0x3d
    8000c410:	c057c783          	lbu	a5,-1019(a5) # 80049011 <excpt+0x1>
    8000c414:	e399                	bnez	a5,8000c41a <tinst_tests_gpf+0xc0a>
    8000c416:	1e00106f          	j	8000d5f6 <tinst_tests_gpf+0x1de6>
    8000c41a:	6418                	ld	a4,8(s0)
    8000c41c:	47dd                	li	a5,23
    8000c41e:	0001b597          	auipc	a1,0x1b
    8000c422:	a7258593          	addi	a1,a1,-1422 # 80026e90 <__func__.0+0x2d0>
    8000c426:	00f71463          	bne	a4,a5,8000c42e <tinst_tests_gpf+0xc1e>
    8000c42a:	17e0106f          	j	8000d5a8 <tinst_tests_gpf+0x1d98>
    8000c42e:	0001b517          	auipc	a0,0x1b
    8000c432:	aa250513          	addi	a0,a0,-1374 # 80026ed0 <__func__.0+0x310>
    8000c436:	2cf180ef          	jal	80024f04 <printf>
    8000c43a:	0003d797          	auipc	a5,0x3d
    8000c43e:	bd77c783          	lbu	a5,-1065(a5) # 80049011 <excpt+0x1>
    8000c442:	c799                	beqz	a5,8000c450 <tinst_tests_gpf+0xc40>
    8000c444:	6418                	ld	a4,8(s0)
    8000c446:	47dd                	li	a5,23
    8000c448:	00f71463          	bne	a4,a5,8000c450 <tinst_tests_gpf+0xc40>
    8000c44c:	6640106f          	j	8000dab0 <tinst_tests_gpf+0x22a0>
    8000c450:	0001b517          	auipc	a0,0x1b
    8000c454:	a8850513          	addi	a0,a0,-1400 # 80026ed8 <__func__.0+0x318>
    8000c458:	2ad180ef          	jal	80024f04 <printf>
    8000c45c:	02900513          	li	a0,41
    8000c460:	0af170ef          	jal	80023d0e <putchar>
    8000c464:	4529                	li	a0,10
    8000c466:	0a9170ef          	jal	80023d0e <putchar>
    8000c46a:	00090e63          	beqz	s2,8000c486 <tinst_tests_gpf+0xc76>
    8000c46e:	0003d797          	auipc	a5,0x3d
    8000c472:	ba37c783          	lbu	a5,-1117(a5) # 80049011 <excpt+0x1>
    8000c476:	c799                	beqz	a5,8000c484 <tinst_tests_gpf+0xc74>
    8000c478:	6418                	ld	a4,8(s0)
    8000c47a:	47dd                	li	a5,23
    8000c47c:	00f71463          	bne	a4,a5,8000c484 <tinst_tests_gpf+0xc74>
    8000c480:	4460206f          	j	8000e8c6 <tinst_tests_gpf+0x30b6>
    8000c484:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c486:	0330000f          	fence	rw,rw
    8000c48a:	4785                	li	a5,1
    8000c48c:	0003d717          	auipc	a4,0x3d
    8000c490:	ba073e23          	sd	zero,-1092(a4) # 80049048 <excpt+0x38>
    8000c494:	00f41023          	sh	a5,0(s0)
    8000c498:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    8000c49c:	001007b7          	lui	a5,0x100
    8000c4a0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c4a4:	07b2                	slli	a5,a5,0xc
    8000c4a6:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000c4aa:	0001d617          	auipc	a2,0x1d
    8000c4ae:	00e60613          	addi	a2,a2,14 # 800294b8 <__func__.0+0x28f8>
    8000c4b2:	08200593          	li	a1,130
    8000c4b6:	0001b517          	auipc	a0,0x1b
    8000c4ba:	a0250513          	addi	a0,a0,-1534 # 80026eb8 <__func__.0+0x2f8>
    8000c4be:	247180ef          	jal	80024f04 <printf>
    8000c4c2:	0003d797          	auipc	a5,0x3d
    8000c4c6:	b4f7c783          	lbu	a5,-1201(a5) # 80049011 <excpt+0x1>
    8000c4ca:	e399                	bnez	a5,8000c4d0 <tinst_tests_gpf+0xcc0>
    8000c4cc:	1840106f          	j	8000d650 <tinst_tests_gpf+0x1e40>
    8000c4d0:	6418                	ld	a4,8(s0)
    8000c4d2:	47dd                	li	a5,23
    8000c4d4:	0001b597          	auipc	a1,0x1b
    8000c4d8:	9bc58593          	addi	a1,a1,-1604 # 80026e90 <__func__.0+0x2d0>
    8000c4dc:	00f71463          	bne	a4,a5,8000c4e4 <tinst_tests_gpf+0xcd4>
    8000c4e0:	1220106f          	j	8000d602 <tinst_tests_gpf+0x1df2>
    8000c4e4:	0001b517          	auipc	a0,0x1b
    8000c4e8:	9ec50513          	addi	a0,a0,-1556 # 80026ed0 <__func__.0+0x310>
    8000c4ec:	219180ef          	jal	80024f04 <printf>
    8000c4f0:	0003d797          	auipc	a5,0x3d
    8000c4f4:	b217c783          	lbu	a5,-1247(a5) # 80049011 <excpt+0x1>
    8000c4f8:	c799                	beqz	a5,8000c506 <tinst_tests_gpf+0xcf6>
    8000c4fa:	6418                	ld	a4,8(s0)
    8000c4fc:	47dd                	li	a5,23
    8000c4fe:	00f71463          	bne	a4,a5,8000c506 <tinst_tests_gpf+0xcf6>
    8000c502:	6020106f          	j	8000db04 <tinst_tests_gpf+0x22f4>
    8000c506:	0001b517          	auipc	a0,0x1b
    8000c50a:	9d250513          	addi	a0,a0,-1582 # 80026ed8 <__func__.0+0x318>
    8000c50e:	1f7180ef          	jal	80024f04 <printf>
    8000c512:	02900513          	li	a0,41
    8000c516:	7f8170ef          	jal	80023d0e <putchar>
    8000c51a:	4529                	li	a0,10
    8000c51c:	7f2170ef          	jal	80023d0e <putchar>
    8000c520:	00090e63          	beqz	s2,8000c53c <tinst_tests_gpf+0xd2c>
    8000c524:	0003d797          	auipc	a5,0x3d
    8000c528:	aed7c783          	lbu	a5,-1299(a5) # 80049011 <excpt+0x1>
    8000c52c:	c799                	beqz	a5,8000c53a <tinst_tests_gpf+0xd2a>
    8000c52e:	6418                	ld	a4,8(s0)
    8000c530:	47dd                	li	a5,23
    8000c532:	00f71463          	bne	a4,a5,8000c53a <tinst_tests_gpf+0xd2a>
    8000c536:	3d20206f          	j	8000e908 <tinst_tests_gpf+0x30f8>
    8000c53a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c53c:	0330000f          	fence	rw,rw
    8000c540:	4785                	li	a5,1
    8000c542:	0003d717          	auipc	a4,0x3d
    8000c546:	b0073323          	sd	zero,-1274(a4) # 80049048 <excpt+0x38>
    8000c54a:	00f41023          	sh	a5,0(s0)
    8000c54e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000c552:	001007b7          	lui	a5,0x100
    8000c556:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c55a:	07b2                	slli	a5,a5,0xc
    8000c55c:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000c560:	0001d617          	auipc	a2,0x1d
    8000c564:	fa060613          	addi	a2,a2,-96 # 80029500 <__func__.0+0x2940>
    8000c568:	08200593          	li	a1,130
    8000c56c:	0001b517          	auipc	a0,0x1b
    8000c570:	94c50513          	addi	a0,a0,-1716 # 80026eb8 <__func__.0+0x2f8>
    8000c574:	191180ef          	jal	80024f04 <printf>
    8000c578:	0003d797          	auipc	a5,0x3d
    8000c57c:	a997c783          	lbu	a5,-1383(a5) # 80049011 <excpt+0x1>
    8000c580:	e399                	bnez	a5,8000c586 <tinst_tests_gpf+0xd76>
    8000c582:	1280106f          	j	8000d6aa <tinst_tests_gpf+0x1e9a>
    8000c586:	6418                	ld	a4,8(s0)
    8000c588:	47dd                	li	a5,23
    8000c58a:	0001b597          	auipc	a1,0x1b
    8000c58e:	90658593          	addi	a1,a1,-1786 # 80026e90 <__func__.0+0x2d0>
    8000c592:	00f71463          	bne	a4,a5,8000c59a <tinst_tests_gpf+0xd8a>
    8000c596:	0c60106f          	j	8000d65c <tinst_tests_gpf+0x1e4c>
    8000c59a:	0001b517          	auipc	a0,0x1b
    8000c59e:	93650513          	addi	a0,a0,-1738 # 80026ed0 <__func__.0+0x310>
    8000c5a2:	163180ef          	jal	80024f04 <printf>
    8000c5a6:	0003d797          	auipc	a5,0x3d
    8000c5aa:	a6b7c783          	lbu	a5,-1429(a5) # 80049011 <excpt+0x1>
    8000c5ae:	c799                	beqz	a5,8000c5bc <tinst_tests_gpf+0xdac>
    8000c5b0:	6418                	ld	a4,8(s0)
    8000c5b2:	47dd                	li	a5,23
    8000c5b4:	00f71463          	bne	a4,a5,8000c5bc <tinst_tests_gpf+0xdac>
    8000c5b8:	5a20106f          	j	8000db5a <tinst_tests_gpf+0x234a>
    8000c5bc:	0001b517          	auipc	a0,0x1b
    8000c5c0:	91c50513          	addi	a0,a0,-1764 # 80026ed8 <__func__.0+0x318>
    8000c5c4:	141180ef          	jal	80024f04 <printf>
    8000c5c8:	02900513          	li	a0,41
    8000c5cc:	742170ef          	jal	80023d0e <putchar>
    8000c5d0:	4529                	li	a0,10
    8000c5d2:	73c170ef          	jal	80023d0e <putchar>
    8000c5d6:	00090e63          	beqz	s2,8000c5f2 <tinst_tests_gpf+0xde2>
    8000c5da:	0003d797          	auipc	a5,0x3d
    8000c5de:	a377c783          	lbu	a5,-1481(a5) # 80049011 <excpt+0x1>
    8000c5e2:	c799                	beqz	a5,8000c5f0 <tinst_tests_gpf+0xde0>
    8000c5e4:	6418                	ld	a4,8(s0)
    8000c5e6:	47dd                	li	a5,23
    8000c5e8:	00f71463          	bne	a4,a5,8000c5f0 <tinst_tests_gpf+0xde0>
    8000c5ec:	38a0206f          	j	8000e976 <tinst_tests_gpf+0x3166>
    8000c5f0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c5f2:	0330000f          	fence	rw,rw
    8000c5f6:	4785                	li	a5,1
    8000c5f8:	0003d717          	auipc	a4,0x3d
    8000c5fc:	a4073823          	sd	zero,-1456(a4) # 80049048 <excpt+0x38>
    8000c600:	00f41023          	sh	a5,0(s0)
    8000c604:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    8000c608:	001007b7          	lui	a5,0x100
    8000c60c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c610:	07b2                	slli	a5,a5,0xc
    8000c612:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000c616:	0001d617          	auipc	a2,0x1d
    8000c61a:	f2a60613          	addi	a2,a2,-214 # 80029540 <__func__.0+0x2980>
    8000c61e:	08200593          	li	a1,130
    8000c622:	0001b517          	auipc	a0,0x1b
    8000c626:	89650513          	addi	a0,a0,-1898 # 80026eb8 <__func__.0+0x2f8>
    8000c62a:	0db180ef          	jal	80024f04 <printf>
    8000c62e:	0003d797          	auipc	a5,0x3d
    8000c632:	9e37c783          	lbu	a5,-1565(a5) # 80049011 <excpt+0x1>
    8000c636:	c399                	beqz	a5,8000c63c <tinst_tests_gpf+0xe2c>
    8000c638:	1400106f          	j	8000d778 <tinst_tests_gpf+0x1f68>
    8000c63c:	0001b597          	auipc	a1,0x1b
    8000c640:	85458593          	addi	a1,a1,-1964 # 80026e90 <__func__.0+0x2d0>
    8000c644:	0001b517          	auipc	a0,0x1b
    8000c648:	88c50513          	addi	a0,a0,-1908 # 80026ed0 <__func__.0+0x310>
    8000c64c:	0b9180ef          	jal	80024f04 <printf>
    8000c650:	0003d797          	auipc	a5,0x3d
    8000c654:	9c17c783          	lbu	a5,-1599(a5) # 80049011 <excpt+0x1>
    8000c658:	c799                	beqz	a5,8000c666 <tinst_tests_gpf+0xe56>
    8000c65a:	6418                	ld	a4,8(s0)
    8000c65c:	47dd                	li	a5,23
    8000c65e:	00f71463          	bne	a4,a5,8000c666 <tinst_tests_gpf+0xe56>
    8000c662:	54e0106f          	j	8000dbb0 <tinst_tests_gpf+0x23a0>
    8000c666:	0001b517          	auipc	a0,0x1b
    8000c66a:	87250513          	addi	a0,a0,-1934 # 80026ed8 <__func__.0+0x318>
    8000c66e:	097180ef          	jal	80024f04 <printf>
    8000c672:	02900513          	li	a0,41
    8000c676:	698170ef          	jal	80023d0e <putchar>
    8000c67a:	4529                	li	a0,10
    8000c67c:	692170ef          	jal	80023d0e <putchar>
    8000c680:	00090e63          	beqz	s2,8000c69c <tinst_tests_gpf+0xe8c>
    8000c684:	0003d797          	auipc	a5,0x3d
    8000c688:	98d7c783          	lbu	a5,-1651(a5) # 80049011 <excpt+0x1>
    8000c68c:	c799                	beqz	a5,8000c69a <tinst_tests_gpf+0xe8a>
    8000c68e:	6418                	ld	a4,8(s0)
    8000c690:	47dd                	li	a5,23
    8000c692:	00f71463          	bne	a4,a5,8000c69a <tinst_tests_gpf+0xe8a>
    8000c696:	34e0206f          	j	8000e9e4 <tinst_tests_gpf+0x31d4>
    8000c69a:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c69c:	0330000f          	fence	rw,rw
    8000c6a0:	4785                	li	a5,1
    8000c6a2:	0003d717          	auipc	a4,0x3d
    8000c6a6:	9a073323          	sd	zero,-1626(a4) # 80049048 <excpt+0x38>
    8000c6aa:	00f41023          	sh	a5,0(s0)
    8000c6ae:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    8000c6b2:	001007b7          	lui	a5,0x100
    8000c6b6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c6ba:	07b2                	slli	a5,a5,0xc
    8000c6bc:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000c6c0:	0001d617          	auipc	a2,0x1d
    8000c6c4:	ec060613          	addi	a2,a2,-320 # 80029580 <__func__.0+0x29c0>
    8000c6c8:	08200593          	li	a1,130
    8000c6cc:	0001a517          	auipc	a0,0x1a
    8000c6d0:	7ec50513          	addi	a0,a0,2028 # 80026eb8 <__func__.0+0x2f8>
    8000c6d4:	031180ef          	jal	80024f04 <printf>
    8000c6d8:	0003d797          	auipc	a5,0x3d
    8000c6dc:	9397c783          	lbu	a5,-1735(a5) # 80049011 <excpt+0x1>
    8000c6e0:	c399                	beqz	a5,8000c6e6 <tinst_tests_gpf+0xed6>
    8000c6e2:	1460106f          	j	8000d828 <tinst_tests_gpf+0x2018>
    8000c6e6:	0001a597          	auipc	a1,0x1a
    8000c6ea:	7aa58593          	addi	a1,a1,1962 # 80026e90 <__func__.0+0x2d0>
    8000c6ee:	0001a517          	auipc	a0,0x1a
    8000c6f2:	7e250513          	addi	a0,a0,2018 # 80026ed0 <__func__.0+0x310>
    8000c6f6:	00f180ef          	jal	80024f04 <printf>
    8000c6fa:	0003d797          	auipc	a5,0x3d
    8000c6fe:	9177c783          	lbu	a5,-1769(a5) # 80049011 <excpt+0x1>
    8000c702:	c799                	beqz	a5,8000c710 <tinst_tests_gpf+0xf00>
    8000c704:	6418                	ld	a4,8(s0)
    8000c706:	47dd                	li	a5,23
    8000c708:	00f71463          	bne	a4,a5,8000c710 <tinst_tests_gpf+0xf00>
    8000c70c:	59f0106f          	j	8000e4aa <tinst_tests_gpf+0x2c9a>
    8000c710:	0001a517          	auipc	a0,0x1a
    8000c714:	7c850513          	addi	a0,a0,1992 # 80026ed8 <__func__.0+0x318>
    8000c718:	7ec180ef          	jal	80024f04 <printf>
    8000c71c:	02900513          	li	a0,41
    8000c720:	5ee170ef          	jal	80023d0e <putchar>
    8000c724:	4529                	li	a0,10
    8000c726:	5e8170ef          	jal	80023d0e <putchar>
    8000c72a:	00090e63          	beqz	s2,8000c746 <tinst_tests_gpf+0xf36>
    8000c72e:	0003d797          	auipc	a5,0x3d
    8000c732:	8e37c783          	lbu	a5,-1821(a5) # 80049011 <excpt+0x1>
    8000c736:	c799                	beqz	a5,8000c744 <tinst_tests_gpf+0xf34>
    8000c738:	6418                	ld	a4,8(s0)
    8000c73a:	47dd                	li	a5,23
    8000c73c:	00f71463          	bne	a4,a5,8000c744 <tinst_tests_gpf+0xf34>
    8000c740:	2e60206f          	j	8000ea26 <tinst_tests_gpf+0x3216>
    8000c744:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c746:	0330000f          	fence	rw,rw
    8000c74a:	4785                	li	a5,1
    8000c74c:	0003d717          	auipc	a4,0x3d
    8000c750:	8e073e23          	sd	zero,-1796(a4) # 80049048 <excpt+0x38>
    8000c754:	00f41023          	sh	a5,0(s0)
    8000c758:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    8000c75c:	001007b7          	lui	a5,0x100
    8000c760:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c764:	07b2                	slli	a5,a5,0xc
    8000c766:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000c76a:	0001d617          	auipc	a2,0x1d
    8000c76e:	e5660613          	addi	a2,a2,-426 # 800295c0 <__func__.0+0x2a00>
    8000c772:	08200593          	li	a1,130
    8000c776:	0001a517          	auipc	a0,0x1a
    8000c77a:	74250513          	addi	a0,a0,1858 # 80026eb8 <__func__.0+0x2f8>
    8000c77e:	786180ef          	jal	80024f04 <printf>
    8000c782:	0003d797          	auipc	a5,0x3d
    8000c786:	88f7c783          	lbu	a5,-1905(a5) # 80049011 <excpt+0x1>
    8000c78a:	e399                	bnez	a5,8000c790 <tinst_tests_gpf+0xf80>
    8000c78c:	6020106f          	j	8000dd8e <tinst_tests_gpf+0x257e>
    8000c790:	6418                	ld	a4,8(s0)
    8000c792:	47dd                	li	a5,23
    8000c794:	0001a597          	auipc	a1,0x1a
    8000c798:	6fc58593          	addi	a1,a1,1788 # 80026e90 <__func__.0+0x2d0>
    8000c79c:	00f71463          	bne	a4,a5,8000c7a4 <tinst_tests_gpf+0xf94>
    8000c7a0:	5a20106f          	j	8000dd42 <tinst_tests_gpf+0x2532>
    8000c7a4:	0001a517          	auipc	a0,0x1a
    8000c7a8:	72c50513          	addi	a0,a0,1836 # 80026ed0 <__func__.0+0x310>
    8000c7ac:	758180ef          	jal	80024f04 <printf>
    8000c7b0:	0003d797          	auipc	a5,0x3d
    8000c7b4:	8617c783          	lbu	a5,-1951(a5) # 80049011 <excpt+0x1>
    8000c7b8:	c799                	beqz	a5,8000c7c6 <tinst_tests_gpf+0xfb6>
    8000c7ba:	6418                	ld	a4,8(s0)
    8000c7bc:	47dd                	li	a5,23
    8000c7be:	00f71463          	bne	a4,a5,8000c7c6 <tinst_tests_gpf+0xfb6>
    8000c7c2:	52b0106f          	j	8000e4ec <tinst_tests_gpf+0x2cdc>
    8000c7c6:	0001a517          	auipc	a0,0x1a
    8000c7ca:	71250513          	addi	a0,a0,1810 # 80026ed8 <__func__.0+0x318>
    8000c7ce:	736180ef          	jal	80024f04 <printf>
    8000c7d2:	02900513          	li	a0,41
    8000c7d6:	538170ef          	jal	80023d0e <putchar>
    8000c7da:	4529                	li	a0,10
    8000c7dc:	532170ef          	jal	80023d0e <putchar>
    8000c7e0:	00090e63          	beqz	s2,8000c7fc <tinst_tests_gpf+0xfec>
    8000c7e4:	0003d797          	auipc	a5,0x3d
    8000c7e8:	82d7c783          	lbu	a5,-2003(a5) # 80049011 <excpt+0x1>
    8000c7ec:	c799                	beqz	a5,8000c7fa <tinst_tests_gpf+0xfea>
    8000c7ee:	6418                	ld	a4,8(s0)
    8000c7f0:	47dd                	li	a5,23
    8000c7f2:	00f71463          	bne	a4,a5,8000c7fa <tinst_tests_gpf+0xfea>
    8000c7f6:	2a20206f          	j	8000ea98 <tinst_tests_gpf+0x3288>
    8000c7fa:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c7fc:	0330000f          	fence	rw,rw
    8000c800:	4785                	li	a5,1
    8000c802:	0003d717          	auipc	a4,0x3d
    8000c806:	84073323          	sd	zero,-1978(a4) # 80049048 <excpt+0x38>
    8000c80a:	00f41023          	sh	a5,0(s0)
    8000c80e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    8000c812:	001007b7          	lui	a5,0x100
    8000c816:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c81a:	07b2                	slli	a5,a5,0xc
    8000c81c:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000c820:	0001d617          	auipc	a2,0x1d
    8000c824:	de060613          	addi	a2,a2,-544 # 80029600 <__func__.0+0x2a40>
    8000c828:	08200593          	li	a1,130
    8000c82c:	0001a517          	auipc	a0,0x1a
    8000c830:	68c50513          	addi	a0,a0,1676 # 80026eb8 <__func__.0+0x2f8>
    8000c834:	6d0180ef          	jal	80024f04 <printf>
    8000c838:	0003c797          	auipc	a5,0x3c
    8000c83c:	7d97c783          	lbu	a5,2009(a5) # 80049011 <excpt+0x1>
    8000c840:	e399                	bnez	a5,8000c846 <tinst_tests_gpf+0x1036>
    8000c842:	5de0106f          	j	8000de20 <tinst_tests_gpf+0x2610>
    8000c846:	6418                	ld	a4,8(s0)
    8000c848:	47dd                	li	a5,23
    8000c84a:	0001a597          	auipc	a1,0x1a
    8000c84e:	64658593          	addi	a1,a1,1606 # 80026e90 <__func__.0+0x2d0>
    8000c852:	00f71463          	bne	a4,a5,8000c85a <tinst_tests_gpf+0x104a>
    8000c856:	57e0106f          	j	8000ddd4 <tinst_tests_gpf+0x25c4>
    8000c85a:	0001a517          	auipc	a0,0x1a
    8000c85e:	67650513          	addi	a0,a0,1654 # 80026ed0 <__func__.0+0x310>
    8000c862:	6a2180ef          	jal	80024f04 <printf>
    8000c866:	0003c797          	auipc	a5,0x3c
    8000c86a:	7ab7c783          	lbu	a5,1963(a5) # 80049011 <excpt+0x1>
    8000c86e:	c799                	beqz	a5,8000c87c <tinst_tests_gpf+0x106c>
    8000c870:	6418                	ld	a4,8(s0)
    8000c872:	47dd                	li	a5,23
    8000c874:	00f71463          	bne	a4,a5,8000c87c <tinst_tests_gpf+0x106c>
    8000c878:	4b70106f          	j	8000e52e <tinst_tests_gpf+0x2d1e>
    8000c87c:	0001a517          	auipc	a0,0x1a
    8000c880:	65c50513          	addi	a0,a0,1628 # 80026ed8 <__func__.0+0x318>
    8000c884:	680180ef          	jal	80024f04 <printf>
    8000c888:	02900513          	li	a0,41
    8000c88c:	482170ef          	jal	80023d0e <putchar>
    8000c890:	4529                	li	a0,10
    8000c892:	47c170ef          	jal	80023d0e <putchar>
    8000c896:	00090e63          	beqz	s2,8000c8b2 <tinst_tests_gpf+0x10a2>
    8000c89a:	0003c797          	auipc	a5,0x3c
    8000c89e:	7777c783          	lbu	a5,1911(a5) # 80049011 <excpt+0x1>
    8000c8a2:	c799                	beqz	a5,8000c8b0 <tinst_tests_gpf+0x10a0>
    8000c8a4:	6418                	ld	a4,8(s0)
    8000c8a6:	47dd                	li	a5,23
    8000c8a8:	00f71463          	bne	a4,a5,8000c8b0 <tinst_tests_gpf+0x10a0>
    8000c8ac:	25e0206f          	j	8000eb0a <tinst_tests_gpf+0x32fa>
    8000c8b0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c8b2:	0330000f          	fence	rw,rw
    8000c8b6:	4785                	li	a5,1
    8000c8b8:	0003c717          	auipc	a4,0x3c
    8000c8bc:	78073823          	sd	zero,1936(a4) # 80049048 <excpt+0x38>
    8000c8c0:	00f41023          	sh	a5,0(s0)
    8000c8c4:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    8000c8c8:	001007b7          	lui	a5,0x100
    8000c8cc:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c8d0:	07b2                	slli	a5,a5,0xc
    8000c8d2:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000c8d6:	0001d617          	auipc	a2,0x1d
    8000c8da:	d6a60613          	addi	a2,a2,-662 # 80029640 <__func__.0+0x2a80>
    8000c8de:	08200593          	li	a1,130
    8000c8e2:	0001a517          	auipc	a0,0x1a
    8000c8e6:	5d650513          	addi	a0,a0,1494 # 80026eb8 <__func__.0+0x2f8>
    8000c8ea:	61a180ef          	jal	80024f04 <printf>
    8000c8ee:	0003c797          	auipc	a5,0x3c
    8000c8f2:	7237c783          	lbu	a5,1827(a5) # 80049011 <excpt+0x1>
    8000c8f6:	e399                	bnez	a5,8000c8fc <tinst_tests_gpf+0x10ec>
    8000c8f8:	5be0106f          	j	8000deb6 <tinst_tests_gpf+0x26a6>
    8000c8fc:	6418                	ld	a4,8(s0)
    8000c8fe:	47dd                	li	a5,23
    8000c900:	0001a597          	auipc	a1,0x1a
    8000c904:	59058593          	addi	a1,a1,1424 # 80026e90 <__func__.0+0x2d0>
    8000c908:	00f71463          	bne	a4,a5,8000c910 <tinst_tests_gpf+0x1100>
    8000c90c:	55c0106f          	j	8000de68 <tinst_tests_gpf+0x2658>
    8000c910:	0001a517          	auipc	a0,0x1a
    8000c914:	5c050513          	addi	a0,a0,1472 # 80026ed0 <__func__.0+0x310>
    8000c918:	5ec180ef          	jal	80024f04 <printf>
    8000c91c:	0003c797          	auipc	a5,0x3c
    8000c920:	6f57c783          	lbu	a5,1781(a5) # 80049011 <excpt+0x1>
    8000c924:	c799                	beqz	a5,8000c932 <tinst_tests_gpf+0x1122>
    8000c926:	6418                	ld	a4,8(s0)
    8000c928:	47dd                	li	a5,23
    8000c92a:	00f71463          	bne	a4,a5,8000c932 <tinst_tests_gpf+0x1122>
    8000c92e:	4430106f          	j	8000e570 <tinst_tests_gpf+0x2d60>
    8000c932:	0001a517          	auipc	a0,0x1a
    8000c936:	5a650513          	addi	a0,a0,1446 # 80026ed8 <__func__.0+0x318>
    8000c93a:	5ca180ef          	jal	80024f04 <printf>
    8000c93e:	02900513          	li	a0,41
    8000c942:	3cc170ef          	jal	80023d0e <putchar>
    8000c946:	4529                	li	a0,10
    8000c948:	3c6170ef          	jal	80023d0e <putchar>
    8000c94c:	00090e63          	beqz	s2,8000c968 <tinst_tests_gpf+0x1158>
    8000c950:	0003c797          	auipc	a5,0x3c
    8000c954:	6c17c783          	lbu	a5,1729(a5) # 80049011 <excpt+0x1>
    8000c958:	c799                	beqz	a5,8000c966 <tinst_tests_gpf+0x1156>
    8000c95a:	6418                	ld	a4,8(s0)
    8000c95c:	47dd                	li	a5,23
    8000c95e:	00f71463          	bne	a4,a5,8000c966 <tinst_tests_gpf+0x1156>
    8000c962:	1ea0206f          	j	8000eb4c <tinst_tests_gpf+0x333c>
    8000c966:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c968:	0330000f          	fence	rw,rw
    8000c96c:	4785                	li	a5,1
    8000c96e:	0003c717          	auipc	a4,0x3c
    8000c972:	6c073d23          	sd	zero,1754(a4) # 80049048 <excpt+0x38>
    8000c976:	00f41023          	sh	a5,0(s0)
    8000c97a:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000c97e:	001007b7          	lui	a5,0x100
    8000c982:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c986:	07b2                	slli	a5,a5,0xc
    8000c988:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000c98c:	0001d617          	auipc	a2,0x1d
    8000c990:	cf460613          	addi	a2,a2,-780 # 80029680 <__func__.0+0x2ac0>
    8000c994:	08200593          	li	a1,130
    8000c998:	0001a517          	auipc	a0,0x1a
    8000c99c:	52050513          	addi	a0,a0,1312 # 80026eb8 <__func__.0+0x2f8>
    8000c9a0:	564180ef          	jal	80024f04 <printf>
    8000c9a4:	0003c797          	auipc	a5,0x3c
    8000c9a8:	66d7c783          	lbu	a5,1645(a5) # 80049011 <excpt+0x1>
    8000c9ac:	e399                	bnez	a5,8000c9b2 <tinst_tests_gpf+0x11a2>
    8000c9ae:	5a40106f          	j	8000df52 <tinst_tests_gpf+0x2742>
    8000c9b2:	6418                	ld	a4,8(s0)
    8000c9b4:	47dd                	li	a5,23
    8000c9b6:	0001a597          	auipc	a1,0x1a
    8000c9ba:	4da58593          	addi	a1,a1,1242 # 80026e90 <__func__.0+0x2d0>
    8000c9be:	00f71463          	bne	a4,a5,8000c9c6 <tinst_tests_gpf+0x11b6>
    8000c9c2:	5420106f          	j	8000df04 <tinst_tests_gpf+0x26f4>
    8000c9c6:	0001a517          	auipc	a0,0x1a
    8000c9ca:	50a50513          	addi	a0,a0,1290 # 80026ed0 <__func__.0+0x310>
    8000c9ce:	536180ef          	jal	80024f04 <printf>
    8000c9d2:	0003c797          	auipc	a5,0x3c
    8000c9d6:	63f7c783          	lbu	a5,1599(a5) # 80049011 <excpt+0x1>
    8000c9da:	c799                	beqz	a5,8000c9e8 <tinst_tests_gpf+0x11d8>
    8000c9dc:	6418                	ld	a4,8(s0)
    8000c9de:	47dd                	li	a5,23
    8000c9e0:	00f71463          	bne	a4,a5,8000c9e8 <tinst_tests_gpf+0x11d8>
    8000c9e4:	3cf0106f          	j	8000e5b2 <tinst_tests_gpf+0x2da2>
    8000c9e8:	0001a517          	auipc	a0,0x1a
    8000c9ec:	4f050513          	addi	a0,a0,1264 # 80026ed8 <__func__.0+0x318>
    8000c9f0:	514180ef          	jal	80024f04 <printf>
    8000c9f4:	02900513          	li	a0,41
    8000c9f8:	316170ef          	jal	80023d0e <putchar>
    8000c9fc:	4529                	li	a0,10
    8000c9fe:	310170ef          	jal	80023d0e <putchar>
    8000ca02:	00090e63          	beqz	s2,8000ca1e <tinst_tests_gpf+0x120e>
    8000ca06:	0003c797          	auipc	a5,0x3c
    8000ca0a:	60b7c783          	lbu	a5,1547(a5) # 80049011 <excpt+0x1>
    8000ca0e:	c799                	beqz	a5,8000ca1c <tinst_tests_gpf+0x120c>
    8000ca10:	6418                	ld	a4,8(s0)
    8000ca12:	47dd                	li	a5,23
    8000ca14:	00f71463          	bne	a4,a5,8000ca1c <tinst_tests_gpf+0x120c>
    8000ca18:	1760206f          	j	8000eb8e <tinst_tests_gpf+0x337e>
    8000ca1c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000ca1e:	0330000f          	fence	rw,rw
    8000ca22:	4785                	li	a5,1
    8000ca24:	0003c717          	auipc	a4,0x3c
    8000ca28:	62073223          	sd	zero,1572(a4) # 80049048 <excpt+0x38>
    8000ca2c:	00f41023          	sh	a5,0(s0)
    8000ca30:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000ca34:	001007b7          	lui	a5,0x100
    8000ca38:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000ca3c:	07b2                	slli	a5,a5,0xc
    8000ca3e:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000ca42:	0001d617          	auipc	a2,0x1d
    8000ca46:	c8660613          	addi	a2,a2,-890 # 800296c8 <__func__.0+0x2b08>
    8000ca4a:	08200593          	li	a1,130
    8000ca4e:	0001a517          	auipc	a0,0x1a
    8000ca52:	46a50513          	addi	a0,a0,1130 # 80026eb8 <__func__.0+0x2f8>
    8000ca56:	4ae180ef          	jal	80024f04 <printf>
    8000ca5a:	0003c797          	auipc	a5,0x3c
    8000ca5e:	5b77c783          	lbu	a5,1463(a5) # 80049011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    8000ca62:	1482                	slli	s1,s1,0x20
    8000ca64:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000ca66:	e399                	bnez	a5,8000ca6c <tinst_tests_gpf+0x125c>
    8000ca68:	5860106f          	j	8000dfee <tinst_tests_gpf+0x27de>
    8000ca6c:	6418                	ld	a4,8(s0)
    8000ca6e:	47dd                	li	a5,23
    8000ca70:	0001a597          	auipc	a1,0x1a
    8000ca74:	42058593          	addi	a1,a1,1056 # 80026e90 <__func__.0+0x2d0>
    8000ca78:	00f71463          	bne	a4,a5,8000ca80 <tinst_tests_gpf+0x1270>
    8000ca7c:	5240106f          	j	8000dfa0 <tinst_tests_gpf+0x2790>
    8000ca80:	0001a517          	auipc	a0,0x1a
    8000ca84:	45050513          	addi	a0,a0,1104 # 80026ed0 <__func__.0+0x310>
    8000ca88:	47c180ef          	jal	80024f04 <printf>
    8000ca8c:	0003c797          	auipc	a5,0x3c
    8000ca90:	5857c783          	lbu	a5,1413(a5) # 80049011 <excpt+0x1>
    8000ca94:	c799                	beqz	a5,8000caa2 <tinst_tests_gpf+0x1292>
    8000ca96:	6418                	ld	a4,8(s0)
    8000ca98:	47dd                	li	a5,23
    8000ca9a:	00f71463          	bne	a4,a5,8000caa2 <tinst_tests_gpf+0x1292>
    8000ca9e:	3570106f          	j	8000e5f4 <tinst_tests_gpf+0x2de4>
    8000caa2:	0001a517          	auipc	a0,0x1a
    8000caa6:	43650513          	addi	a0,a0,1078 # 80026ed8 <__func__.0+0x318>
    8000caaa:	45a180ef          	jal	80024f04 <printf>
    8000caae:	02900513          	li	a0,41
    8000cab2:	25c170ef          	jal	80023d0e <putchar>
    8000cab6:	4529                	li	a0,10
    8000cab8:	256170ef          	jal	80023d0e <putchar>
    8000cabc:	00090e63          	beqz	s2,8000cad8 <tinst_tests_gpf+0x12c8>
    8000cac0:	0003c797          	auipc	a5,0x3c
    8000cac4:	5517c783          	lbu	a5,1361(a5) # 80049011 <excpt+0x1>
    8000cac8:	c799                	beqz	a5,8000cad6 <tinst_tests_gpf+0x12c6>
    8000caca:	6418                	ld	a4,8(s0)
    8000cacc:	47dd                	li	a5,23
    8000cace:	00f71463          	bne	a4,a5,8000cad6 <tinst_tests_gpf+0x12c6>
    8000cad2:	0fe0206f          	j	8000ebd0 <tinst_tests_gpf+0x33c0>
    8000cad6:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cad8:	0330000f          	fence	rw,rw
    8000cadc:	4785                	li	a5,1
    8000cade:	0003c717          	auipc	a4,0x3c
    8000cae2:	56073523          	sd	zero,1386(a4) # 80049048 <excpt+0x38>
    8000cae6:	00f41023          	sh	a5,0(s0)
    8000caea:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000caee:	001007b7          	lui	a5,0x100
    8000caf2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000caf6:	07b2                	slli	a5,a5,0xc
    8000caf8:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000cafc:	0001d617          	auipc	a2,0x1d
    8000cb00:	c1460613          	addi	a2,a2,-1004 # 80029710 <__func__.0+0x2b50>
    8000cb04:	08200593          	li	a1,130
    8000cb08:	0001a517          	auipc	a0,0x1a
    8000cb0c:	3b050513          	addi	a0,a0,944 # 80026eb8 <__func__.0+0x2f8>
    8000cb10:	3f4180ef          	jal	80024f04 <printf>
    8000cb14:	0003c797          	auipc	a5,0x3c
    8000cb18:	4fd7c783          	lbu	a5,1277(a5) # 80049011 <excpt+0x1>
    8000cb1c:	e399                	bnez	a5,8000cb22 <tinst_tests_gpf+0x1312>
    8000cb1e:	56c0106f          	j	8000e08a <tinst_tests_gpf+0x287a>
    8000cb22:	6418                	ld	a4,8(s0)
    8000cb24:	47dd                	li	a5,23
    8000cb26:	0001a597          	auipc	a1,0x1a
    8000cb2a:	36a58593          	addi	a1,a1,874 # 80026e90 <__func__.0+0x2d0>
    8000cb2e:	00f71463          	bne	a4,a5,8000cb36 <tinst_tests_gpf+0x1326>
    8000cb32:	50a0106f          	j	8000e03c <tinst_tests_gpf+0x282c>
    8000cb36:	0001a517          	auipc	a0,0x1a
    8000cb3a:	39a50513          	addi	a0,a0,922 # 80026ed0 <__func__.0+0x310>
    8000cb3e:	3c6180ef          	jal	80024f04 <printf>
    8000cb42:	0003c797          	auipc	a5,0x3c
    8000cb46:	4cf7c783          	lbu	a5,1231(a5) # 80049011 <excpt+0x1>
    8000cb4a:	c799                	beqz	a5,8000cb58 <tinst_tests_gpf+0x1348>
    8000cb4c:	6418                	ld	a4,8(s0)
    8000cb4e:	47dd                	li	a5,23
    8000cb50:	00f71463          	bne	a4,a5,8000cb58 <tinst_tests_gpf+0x1348>
    8000cb54:	2e30106f          	j	8000e636 <tinst_tests_gpf+0x2e26>
    8000cb58:	0001a517          	auipc	a0,0x1a
    8000cb5c:	38050513          	addi	a0,a0,896 # 80026ed8 <__func__.0+0x318>
    8000cb60:	3a4180ef          	jal	80024f04 <printf>
    8000cb64:	02900513          	li	a0,41
    8000cb68:	1a6170ef          	jal	80023d0e <putchar>
    8000cb6c:	4529                	li	a0,10
    8000cb6e:	1a0170ef          	jal	80023d0e <putchar>
    8000cb72:	00090e63          	beqz	s2,8000cb8e <tinst_tests_gpf+0x137e>
    8000cb76:	0003c797          	auipc	a5,0x3c
    8000cb7a:	49b7c783          	lbu	a5,1179(a5) # 80049011 <excpt+0x1>
    8000cb7e:	c799                	beqz	a5,8000cb8c <tinst_tests_gpf+0x137c>
    8000cb80:	6418                	ld	a4,8(s0)
    8000cb82:	47dd                	li	a5,23
    8000cb84:	00f71463          	bne	a4,a5,8000cb8c <tinst_tests_gpf+0x137c>
    8000cb88:	08a0206f          	j	8000ec12 <tinst_tests_gpf+0x3402>
    8000cb8c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cb8e:	0330000f          	fence	rw,rw
    8000cb92:	4785                	li	a5,1
    8000cb94:	0003c717          	auipc	a4,0x3c
    8000cb98:	4a073a23          	sd	zero,1204(a4) # 80049048 <excpt+0x38>
    8000cb9c:	00f41023          	sh	a5,0(s0)
    8000cba0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8000cba4:	001007b7          	lui	a5,0x100
    8000cba8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cbac:	07b2                	slli	a5,a5,0xc
    8000cbae:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000cbb2:	0001d617          	auipc	a2,0x1d
    8000cbb6:	ba660613          	addi	a2,a2,-1114 # 80029758 <__func__.0+0x2b98>
    8000cbba:	08200593          	li	a1,130
    8000cbbe:	0001a517          	auipc	a0,0x1a
    8000cbc2:	2fa50513          	addi	a0,a0,762 # 80026eb8 <__func__.0+0x2f8>
    8000cbc6:	33e180ef          	jal	80024f04 <printf>
    8000cbca:	0003c797          	auipc	a5,0x3c
    8000cbce:	4477c783          	lbu	a5,1095(a5) # 80049011 <excpt+0x1>
    8000cbd2:	e399                	bnez	a5,8000cbd8 <tinst_tests_gpf+0x13c8>
    8000cbd4:	5520106f          	j	8000e126 <tinst_tests_gpf+0x2916>
    8000cbd8:	6418                	ld	a4,8(s0)
    8000cbda:	47dd                	li	a5,23
    8000cbdc:	0001a597          	auipc	a1,0x1a
    8000cbe0:	2b458593          	addi	a1,a1,692 # 80026e90 <__func__.0+0x2d0>
    8000cbe4:	00f71463          	bne	a4,a5,8000cbec <tinst_tests_gpf+0x13dc>
    8000cbe8:	4f00106f          	j	8000e0d8 <tinst_tests_gpf+0x28c8>
    8000cbec:	0001a517          	auipc	a0,0x1a
    8000cbf0:	2e450513          	addi	a0,a0,740 # 80026ed0 <__func__.0+0x310>
    8000cbf4:	310180ef          	jal	80024f04 <printf>
    8000cbf8:	0003c797          	auipc	a5,0x3c
    8000cbfc:	4197c783          	lbu	a5,1049(a5) # 80049011 <excpt+0x1>
    8000cc00:	c799                	beqz	a5,8000cc0e <tinst_tests_gpf+0x13fe>
    8000cc02:	6418                	ld	a4,8(s0)
    8000cc04:	47dd                	li	a5,23
    8000cc06:	00f71463          	bne	a4,a5,8000cc0e <tinst_tests_gpf+0x13fe>
    8000cc0a:	26f0106f          	j	8000e678 <tinst_tests_gpf+0x2e68>
    8000cc0e:	0001a517          	auipc	a0,0x1a
    8000cc12:	2ca50513          	addi	a0,a0,714 # 80026ed8 <__func__.0+0x318>
    8000cc16:	2ee180ef          	jal	80024f04 <printf>
    8000cc1a:	02900513          	li	a0,41
    8000cc1e:	0f0170ef          	jal	80023d0e <putchar>
    8000cc22:	4529                	li	a0,10
    8000cc24:	0ea170ef          	jal	80023d0e <putchar>
    8000cc28:	00090e63          	beqz	s2,8000cc44 <tinst_tests_gpf+0x1434>
    8000cc2c:	0003c797          	auipc	a5,0x3c
    8000cc30:	3e57c783          	lbu	a5,997(a5) # 80049011 <excpt+0x1>
    8000cc34:	c799                	beqz	a5,8000cc42 <tinst_tests_gpf+0x1432>
    8000cc36:	6418                	ld	a4,8(s0)
    8000cc38:	47dd                	li	a5,23
    8000cc3a:	00f71463          	bne	a4,a5,8000cc42 <tinst_tests_gpf+0x1432>
    8000cc3e:	0160206f          	j	8000ec54 <tinst_tests_gpf+0x3444>
    8000cc42:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cc44:	0330000f          	fence	rw,rw
    8000cc48:	4785                	li	a5,1
    8000cc4a:	0003c717          	auipc	a4,0x3c
    8000cc4e:	3e073f23          	sd	zero,1022(a4) # 80049048 <excpt+0x38>
    8000cc52:	00f41023          	sh	a5,0(s0)
    8000cc56:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    8000cc5a:	001007b7          	lui	a5,0x100
    8000cc5e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cc62:	07b2                	slli	a5,a5,0xc
    8000cc64:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000cc68:	0001d617          	auipc	a2,0x1d
    8000cc6c:	b3060613          	addi	a2,a2,-1232 # 80029798 <__func__.0+0x2bd8>
    8000cc70:	08200593          	li	a1,130
    8000cc74:	0001a517          	auipc	a0,0x1a
    8000cc78:	24450513          	addi	a0,a0,580 # 80026eb8 <__func__.0+0x2f8>
    8000cc7c:	288180ef          	jal	80024f04 <printf>
    8000cc80:	0003c797          	auipc	a5,0x3c
    8000cc84:	3917c783          	lbu	a5,913(a5) # 80049011 <excpt+0x1>
    8000cc88:	e399                	bnez	a5,8000cc8e <tinst_tests_gpf+0x147e>
    8000cc8a:	5220106f          	j	8000e1ac <tinst_tests_gpf+0x299c>
    8000cc8e:	6418                	ld	a4,8(s0)
    8000cc90:	47dd                	li	a5,23
    8000cc92:	0001a597          	auipc	a1,0x1a
    8000cc96:	1fe58593          	addi	a1,a1,510 # 80026e90 <__func__.0+0x2d0>
    8000cc9a:	00f71463          	bne	a4,a5,8000cca2 <tinst_tests_gpf+0x1492>
    8000cc9e:	4c00106f          	j	8000e15e <tinst_tests_gpf+0x294e>
    8000cca2:	0001a517          	auipc	a0,0x1a
    8000cca6:	22e50513          	addi	a0,a0,558 # 80026ed0 <__func__.0+0x310>
    8000ccaa:	25a180ef          	jal	80024f04 <printf>
    8000ccae:	0003c797          	auipc	a5,0x3c
    8000ccb2:	3637c783          	lbu	a5,867(a5) # 80049011 <excpt+0x1>
    8000ccb6:	c799                	beqz	a5,8000ccc4 <tinst_tests_gpf+0x14b4>
    8000ccb8:	6418                	ld	a4,8(s0)
    8000ccba:	47dd                	li	a5,23
    8000ccbc:	00f71463          	bne	a4,a5,8000ccc4 <tinst_tests_gpf+0x14b4>
    8000ccc0:	1fb0106f          	j	8000e6ba <tinst_tests_gpf+0x2eaa>
    8000ccc4:	0001a517          	auipc	a0,0x1a
    8000ccc8:	21450513          	addi	a0,a0,532 # 80026ed8 <__func__.0+0x318>
    8000cccc:	238180ef          	jal	80024f04 <printf>
    8000ccd0:	02900513          	li	a0,41
    8000ccd4:	03a170ef          	jal	80023d0e <putchar>
    8000ccd8:	4529                	li	a0,10
    8000ccda:	034170ef          	jal	80023d0e <putchar>
    8000ccde:	00090e63          	beqz	s2,8000ccfa <tinst_tests_gpf+0x14ea>
    8000cce2:	0003c797          	auipc	a5,0x3c
    8000cce6:	32f7c783          	lbu	a5,815(a5) # 80049011 <excpt+0x1>
    8000ccea:	c799                	beqz	a5,8000ccf8 <tinst_tests_gpf+0x14e8>
    8000ccec:	6418                	ld	a4,8(s0)
    8000ccee:	47dd                	li	a5,23
    8000ccf0:	00f71463          	bne	a4,a5,8000ccf8 <tinst_tests_gpf+0x14e8>
    8000ccf4:	7a30106f          	j	8000ec96 <tinst_tests_gpf+0x3486>
    8000ccf8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000ccfa:	0330000f          	fence	rw,rw
    8000ccfe:	4785                	li	a5,1
    8000cd00:	0003c717          	auipc	a4,0x3c
    8000cd04:	34073423          	sd	zero,840(a4) # 80049048 <excpt+0x38>
    8000cd08:	00f41023          	sh	a5,0(s0)
    8000cd0c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000cd10:	001007b7          	lui	a5,0x100
    8000cd14:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cd18:	07b2                	slli	a5,a5,0xc
    8000cd1a:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000cd1e:	0001d617          	auipc	a2,0x1d
    8000cd22:	aba60613          	addi	a2,a2,-1350 # 800297d8 <__func__.0+0x2c18>
    8000cd26:	08200593          	li	a1,130
    8000cd2a:	0001a517          	auipc	a0,0x1a
    8000cd2e:	18e50513          	addi	a0,a0,398 # 80026eb8 <__func__.0+0x2f8>
    8000cd32:	1d2180ef          	jal	80024f04 <printf>
    8000cd36:	0003c797          	auipc	a5,0x3c
    8000cd3a:	2db7c783          	lbu	a5,731(a5) # 80049011 <excpt+0x1>
    8000cd3e:	e399                	bnez	a5,8000cd44 <tinst_tests_gpf+0x1534>
    8000cd40:	4f60106f          	j	8000e236 <tinst_tests_gpf+0x2a26>
    8000cd44:	6418                	ld	a4,8(s0)
    8000cd46:	47dd                	li	a5,23
    8000cd48:	0001a597          	auipc	a1,0x1a
    8000cd4c:	14858593          	addi	a1,a1,328 # 80026e90 <__func__.0+0x2d0>
    8000cd50:	00f71463          	bne	a4,a5,8000cd58 <tinst_tests_gpf+0x1548>
    8000cd54:	4940106f          	j	8000e1e8 <tinst_tests_gpf+0x29d8>
    8000cd58:	0001a517          	auipc	a0,0x1a
    8000cd5c:	17850513          	addi	a0,a0,376 # 80026ed0 <__func__.0+0x310>
    8000cd60:	1a4180ef          	jal	80024f04 <printf>
    8000cd64:	0003c797          	auipc	a5,0x3c
    8000cd68:	2ad7c783          	lbu	a5,685(a5) # 80049011 <excpt+0x1>
    8000cd6c:	c799                	beqz	a5,8000cd7a <tinst_tests_gpf+0x156a>
    8000cd6e:	6418                	ld	a4,8(s0)
    8000cd70:	47dd                	li	a5,23
    8000cd72:	00f71463          	bne	a4,a5,8000cd7a <tinst_tests_gpf+0x156a>
    8000cd76:	1870106f          	j	8000e6fc <tinst_tests_gpf+0x2eec>
    8000cd7a:	0001a517          	auipc	a0,0x1a
    8000cd7e:	15e50513          	addi	a0,a0,350 # 80026ed8 <__func__.0+0x318>
    8000cd82:	182180ef          	jal	80024f04 <printf>
    8000cd86:	02900513          	li	a0,41
    8000cd8a:	785160ef          	jal	80023d0e <putchar>
    8000cd8e:	4529                	li	a0,10
    8000cd90:	77f160ef          	jal	80023d0e <putchar>
    8000cd94:	00090e63          	beqz	s2,8000cdb0 <tinst_tests_gpf+0x15a0>
    8000cd98:	0003c797          	auipc	a5,0x3c
    8000cd9c:	2797c783          	lbu	a5,633(a5) # 80049011 <excpt+0x1>
    8000cda0:	c799                	beqz	a5,8000cdae <tinst_tests_gpf+0x159e>
    8000cda2:	6418                	ld	a4,8(s0)
    8000cda4:	47dd                	li	a5,23
    8000cda6:	00f71463          	bne	a4,a5,8000cdae <tinst_tests_gpf+0x159e>
    8000cdaa:	72f0106f          	j	8000ecd8 <tinst_tests_gpf+0x34c8>
    8000cdae:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cdb0:	0330000f          	fence	rw,rw
    8000cdb4:	4785                	li	a5,1
    8000cdb6:	0003c717          	auipc	a4,0x3c
    8000cdba:	28073923          	sd	zero,658(a4) # 80049048 <excpt+0x38>
    8000cdbe:	00f41023          	sh	a5,0(s0)
    8000cdc2:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000cdc6:	001007b7          	lui	a5,0x100
    8000cdca:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cdce:	07b2                	slli	a5,a5,0xc
    8000cdd0:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000cdd4:	0001d617          	auipc	a2,0x1d
    8000cdd8:	a4460613          	addi	a2,a2,-1468 # 80029818 <__func__.0+0x2c58>
    8000cddc:	08200593          	li	a1,130
    8000cde0:	0001a517          	auipc	a0,0x1a
    8000cde4:	0d850513          	addi	a0,a0,216 # 80026eb8 <__func__.0+0x2f8>
    8000cde8:	11c180ef          	jal	80024f04 <printf>
    8000cdec:	0003c797          	auipc	a5,0x3c
    8000cdf0:	2257c783          	lbu	a5,549(a5) # 80049011 <excpt+0x1>
    8000cdf4:	e399                	bnez	a5,8000cdfa <tinst_tests_gpf+0x15ea>
    8000cdf6:	4ce0106f          	j	8000e2c4 <tinst_tests_gpf+0x2ab4>
    8000cdfa:	6418                	ld	a4,8(s0)
    8000cdfc:	47dd                	li	a5,23
    8000cdfe:	0001a597          	auipc	a1,0x1a
    8000ce02:	09258593          	addi	a1,a1,146 # 80026e90 <__func__.0+0x2d0>
    8000ce06:	00f71463          	bne	a4,a5,8000ce0e <tinst_tests_gpf+0x15fe>
    8000ce0a:	46c0106f          	j	8000e276 <tinst_tests_gpf+0x2a66>
    8000ce0e:	0001a517          	auipc	a0,0x1a
    8000ce12:	0c250513          	addi	a0,a0,194 # 80026ed0 <__func__.0+0x310>
    8000ce16:	0ee180ef          	jal	80024f04 <printf>
    8000ce1a:	0003c797          	auipc	a5,0x3c
    8000ce1e:	1f77c783          	lbu	a5,503(a5) # 80049011 <excpt+0x1>
    8000ce22:	c799                	beqz	a5,8000ce30 <tinst_tests_gpf+0x1620>
    8000ce24:	6418                	ld	a4,8(s0)
    8000ce26:	47dd                	li	a5,23
    8000ce28:	00f71463          	bne	a4,a5,8000ce30 <tinst_tests_gpf+0x1620>
    8000ce2c:	7350106f          	j	8000ed60 <tinst_tests_gpf+0x3550>
    8000ce30:	0001a517          	auipc	a0,0x1a
    8000ce34:	0a850513          	addi	a0,a0,168 # 80026ed8 <__func__.0+0x318>
    8000ce38:	0cc180ef          	jal	80024f04 <printf>
    8000ce3c:	02900513          	li	a0,41
    8000ce40:	6cf160ef          	jal	80023d0e <putchar>
    8000ce44:	4529                	li	a0,10
    8000ce46:	6c9160ef          	jal	80023d0e <putchar>
    8000ce4a:	00090e63          	beqz	s2,8000ce66 <tinst_tests_gpf+0x1656>
    8000ce4e:	0003c797          	auipc	a5,0x3c
    8000ce52:	1c37c783          	lbu	a5,451(a5) # 80049011 <excpt+0x1>
    8000ce56:	c799                	beqz	a5,8000ce64 <tinst_tests_gpf+0x1654>
    8000ce58:	6418                	ld	a4,8(s0)
    8000ce5a:	47dd                	li	a5,23
    8000ce5c:	00f71463          	bne	a4,a5,8000ce64 <tinst_tests_gpf+0x1654>
    8000ce60:	6bd0106f          	j	8000ed1c <tinst_tests_gpf+0x350c>
    8000ce64:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000ce66:	0330000f          	fence	rw,rw
    8000ce6a:	4785                	li	a5,1
    8000ce6c:	0003c717          	auipc	a4,0x3c
    8000ce70:	1c073e23          	sd	zero,476(a4) # 80049048 <excpt+0x38>
    8000ce74:	00f41023          	sh	a5,0(s0)
    8000ce78:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000ce7c:	001007b7          	lui	a5,0x100
    8000ce80:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000ce84:	07b2                	slli	a5,a5,0xc
    8000ce86:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000ce8a:	0001d617          	auipc	a2,0x1d
    8000ce8e:	9ce60613          	addi	a2,a2,-1586 # 80029858 <__func__.0+0x2c98>
    8000ce92:	08200593          	li	a1,130
    8000ce96:	0001a517          	auipc	a0,0x1a
    8000ce9a:	02250513          	addi	a0,a0,34 # 80026eb8 <__func__.0+0x2f8>
    8000ce9e:	066180ef          	jal	80024f04 <printf>
    8000cea2:	0003c797          	auipc	a5,0x3c
    8000cea6:	16f7c783          	lbu	a5,367(a5) # 80049011 <excpt+0x1>
    8000ceaa:	e399                	bnez	a5,8000ceb0 <tinst_tests_gpf+0x16a0>
    8000ceac:	4a20106f          	j	8000e34e <tinst_tests_gpf+0x2b3e>
    8000ceb0:	6418                	ld	a4,8(s0)
    8000ceb2:	47dd                	li	a5,23
    8000ceb4:	0001a597          	auipc	a1,0x1a
    8000ceb8:	fdc58593          	addi	a1,a1,-36 # 80026e90 <__func__.0+0x2d0>
    8000cebc:	00f71463          	bne	a4,a5,8000cec4 <tinst_tests_gpf+0x16b4>
    8000cec0:	4400106f          	j	8000e300 <tinst_tests_gpf+0x2af0>
    8000cec4:	0001a517          	auipc	a0,0x1a
    8000cec8:	00c50513          	addi	a0,a0,12 # 80026ed0 <__func__.0+0x310>
    8000cecc:	038180ef          	jal	80024f04 <printf>
    8000ced0:	0003c797          	auipc	a5,0x3c
    8000ced4:	1417c783          	lbu	a5,321(a5) # 80049011 <excpt+0x1>
    8000ced8:	c799                	beqz	a5,8000cee6 <tinst_tests_gpf+0x16d6>
    8000ceda:	6418                	ld	a4,8(s0)
    8000cedc:	47dd                	li	a5,23
    8000cede:	00f71463          	bne	a4,a5,8000cee6 <tinst_tests_gpf+0x16d6>
    8000cee2:	6c30106f          	j	8000eda4 <tinst_tests_gpf+0x3594>
    8000cee6:	0001a517          	auipc	a0,0x1a
    8000ceea:	ff250513          	addi	a0,a0,-14 # 80026ed8 <__func__.0+0x318>
    8000ceee:	016180ef          	jal	80024f04 <printf>
    8000cef2:	02900513          	li	a0,41
    8000cef6:	619160ef          	jal	80023d0e <putchar>
    8000cefa:	4529                	li	a0,10
    8000cefc:	613160ef          	jal	80023d0e <putchar>
    8000cf00:	00090a63          	beqz	s2,8000cf14 <tinst_tests_gpf+0x1704>
    8000cf04:	0003c797          	auipc	a5,0x3c
    8000cf08:	10d7c783          	lbu	a5,269(a5) # 80049011 <excpt+0x1>
    8000cf0c:	c399                	beqz	a5,8000cf12 <tinst_tests_gpf+0x1702>
    8000cf0e:	0310106f          	j	8000e73e <tinst_tests_gpf+0x2f2e>
    8000cf12:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cf14:	0330000f          	fence	rw,rw
    8000cf18:	4785                	li	a5,1
    8000cf1a:	0003c717          	auipc	a4,0x3c
    8000cf1e:	12073723          	sd	zero,302(a4) # 80049048 <excpt+0x38>
    8000cf22:	00f41023          	sh	a5,0(s0)
    8000cf26:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000cf2a:	001007b7          	lui	a5,0x100
    8000cf2e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cf32:	07b2                	slli	a5,a5,0xc
    8000cf34:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000cf38:	0001d617          	auipc	a2,0x1d
    8000cf3c:	96060613          	addi	a2,a2,-1696 # 80029898 <__func__.0+0x2cd8>
    8000cf40:	08200593          	li	a1,130
    8000cf44:	0001a517          	auipc	a0,0x1a
    8000cf48:	f7450513          	addi	a0,a0,-140 # 80026eb8 <__func__.0+0x2f8>
    8000cf4c:	7b9170ef          	jal	80024f04 <printf>
    8000cf50:	0003c797          	auipc	a5,0x3c
    8000cf54:	0c17c783          	lbu	a5,193(a5) # 80049011 <excpt+0x1>
    8000cf58:	e399                	bnez	a5,8000cf5e <tinst_tests_gpf+0x174e>
    8000cf5a:	4900106f          	j	8000e3ea <tinst_tests_gpf+0x2bda>
    8000cf5e:	6418                	ld	a4,8(s0)
    8000cf60:	47dd                	li	a5,23
    8000cf62:	0001a597          	auipc	a1,0x1a
    8000cf66:	f2e58593          	addi	a1,a1,-210 # 80026e90 <__func__.0+0x2d0>
    8000cf6a:	00f71463          	bne	a4,a5,8000cf72 <tinst_tests_gpf+0x1762>
    8000cf6e:	42e0106f          	j	8000e39c <tinst_tests_gpf+0x2b8c>
    8000cf72:	0001a517          	auipc	a0,0x1a
    8000cf76:	f5e50513          	addi	a0,a0,-162 # 80026ed0 <__func__.0+0x310>
    8000cf7a:	78b170ef          	jal	80024f04 <printf>
    8000cf7e:	0003c797          	auipc	a5,0x3c
    8000cf82:	0937c783          	lbu	a5,147(a5) # 80049011 <excpt+0x1>
    8000cf86:	c799                	beqz	a5,8000cf94 <tinst_tests_gpf+0x1784>
    8000cf88:	6418                	ld	a4,8(s0)
    8000cf8a:	47dd                	li	a5,23
    8000cf8c:	00f71463          	bne	a4,a5,8000cf94 <tinst_tests_gpf+0x1784>
    8000cf90:	6590106f          	j	8000ede8 <tinst_tests_gpf+0x35d8>
    8000cf94:	0001a517          	auipc	a0,0x1a
    8000cf98:	f4450513          	addi	a0,a0,-188 # 80026ed8 <__func__.0+0x318>
    8000cf9c:	769170ef          	jal	80024f04 <printf>
    8000cfa0:	02900513          	li	a0,41
    8000cfa4:	56b160ef          	jal	80023d0e <putchar>
    8000cfa8:	4529                	li	a0,10
    8000cfaa:	565160ef          	jal	80023d0e <putchar>
    8000cfae:	00090a63          	beqz	s2,8000cfc2 <tinst_tests_gpf+0x17b2>
    8000cfb2:	0003c797          	auipc	a5,0x3c
    8000cfb6:	05f7c783          	lbu	a5,95(a5) # 80049011 <excpt+0x1>
    8000cfba:	c399                	beqz	a5,8000cfc0 <tinst_tests_gpf+0x17b0>
    8000cfbc:	7d00106f          	j	8000e78c <tinst_tests_gpf+0x2f7c>
    8000cfc0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000cfc2:	0330000f          	fence	rw,rw
    8000cfc6:	4785                	li	a5,1
    8000cfc8:	0003c717          	auipc	a4,0x3c
    8000cfcc:	08073023          	sd	zero,128(a4) # 80049048 <excpt+0x38>
    8000cfd0:	00f41023          	sh	a5,0(s0)
    8000cfd4:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000cfd8:	001007b7          	lui	a5,0x100
    8000cfdc:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000cfe0:	07b2                	slli	a5,a5,0xc
    8000cfe2:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000cfe6:	0001d617          	auipc	a2,0x1d
    8000cfea:	8f260613          	addi	a2,a2,-1806 # 800298d8 <__func__.0+0x2d18>
    8000cfee:	08200593          	li	a1,130
    8000cff2:	0001a517          	auipc	a0,0x1a
    8000cff6:	ec650513          	addi	a0,a0,-314 # 80026eb8 <__func__.0+0x2f8>
    8000cffa:	70b170ef          	jal	80024f04 <printf>
    8000cffe:	0003c797          	auipc	a5,0x3c
    8000d002:	0137c783          	lbu	a5,19(a5) # 80049011 <excpt+0x1>
    8000d006:	e399                	bnez	a5,8000d00c <tinst_tests_gpf+0x17fc>
    8000d008:	43c0106f          	j	8000e444 <tinst_tests_gpf+0x2c34>
    8000d00c:	6418                	ld	a4,8(s0)
    8000d00e:	47dd                	li	a5,23
    8000d010:	0001a597          	auipc	a1,0x1a
    8000d014:	e8058593          	addi	a1,a1,-384 # 80026e90 <__func__.0+0x2d0>
    8000d018:	00f71463          	bne	a4,a5,8000d020 <tinst_tests_gpf+0x1810>
    8000d01c:	3da0106f          	j	8000e3f6 <tinst_tests_gpf+0x2be6>
    8000d020:	0001a517          	auipc	a0,0x1a
    8000d024:	eb050513          	addi	a0,a0,-336 # 80026ed0 <__func__.0+0x310>
    8000d028:	6dd170ef          	jal	80024f04 <printf>
    8000d02c:	0003c797          	auipc	a5,0x3c
    8000d030:	fe57c783          	lbu	a5,-27(a5) # 80049011 <excpt+0x1>
    8000d034:	c799                	beqz	a5,8000d042 <tinst_tests_gpf+0x1832>
    8000d036:	6418                	ld	a4,8(s0)
    8000d038:	47dd                	li	a5,23
    8000d03a:	00f71463          	bne	a4,a5,8000d042 <tinst_tests_gpf+0x1832>
    8000d03e:	5ef0106f          	j	8000ee2c <tinst_tests_gpf+0x361c>
    8000d042:	0001a517          	auipc	a0,0x1a
    8000d046:	e9650513          	addi	a0,a0,-362 # 80026ed8 <__func__.0+0x318>
    8000d04a:	6bb170ef          	jal	80024f04 <printf>
    8000d04e:	02900513          	li	a0,41
    8000d052:	4bd160ef          	jal	80023d0e <putchar>
    8000d056:	4529                	li	a0,10
    8000d058:	4b7160ef          	jal	80023d0e <putchar>
    8000d05c:	00090a63          	beqz	s2,8000d070 <tinst_tests_gpf+0x1860>
    8000d060:	0003c797          	auipc	a5,0x3c
    8000d064:	fb17c783          	lbu	a5,-79(a5) # 80049011 <excpt+0x1>
    8000d068:	c399                	beqz	a5,8000d06e <tinst_tests_gpf+0x185e>
    8000d06a:	7700106f          	j	8000e7da <tinst_tests_gpf+0x2fca>
    8000d06e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000d070:	0330000f          	fence	rw,rw
    8000d074:	4785                	li	a5,1
    8000d076:	0003c717          	auipc	a4,0x3c
    8000d07a:	fc073923          	sd	zero,-46(a4) # 80049048 <excpt+0x38>
    8000d07e:	00f41023          	sh	a5,0(s0)
    8000d082:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    8000d086:	001007b7          	lui	a5,0x100
    8000d08a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000d08e:	07b2                	slli	a5,a5,0xc
    8000d090:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000d094:	0001d617          	auipc	a2,0x1d
    8000d098:	88c60613          	addi	a2,a2,-1908 # 80029920 <__func__.0+0x2d60>
    8000d09c:	08200593          	li	a1,130
    8000d0a0:	0001a517          	auipc	a0,0x1a
    8000d0a4:	e1850513          	addi	a0,a0,-488 # 80026eb8 <__func__.0+0x2f8>
    8000d0a8:	65d170ef          	jal	80024f04 <printf>
    8000d0ac:	0003c797          	auipc	a5,0x3c
    8000d0b0:	f657c783          	lbu	a5,-155(a5) # 80049011 <excpt+0x1>
    8000d0b4:	e399                	bnez	a5,8000d0ba <tinst_tests_gpf+0x18aa>
    8000d0b6:	3e80106f          	j	8000e49e <tinst_tests_gpf+0x2c8e>
    8000d0ba:	6418                	ld	a4,8(s0)
    8000d0bc:	47dd                	li	a5,23
    8000d0be:	0001a597          	auipc	a1,0x1a
    8000d0c2:	dd258593          	addi	a1,a1,-558 # 80026e90 <__func__.0+0x2d0>
    8000d0c6:	00f71463          	bne	a4,a5,8000d0ce <tinst_tests_gpf+0x18be>
    8000d0ca:	3860106f          	j	8000e450 <tinst_tests_gpf+0x2c40>
    8000d0ce:	0001a517          	auipc	a0,0x1a
    8000d0d2:	e0250513          	addi	a0,a0,-510 # 80026ed0 <__func__.0+0x310>
    8000d0d6:	62f170ef          	jal	80024f04 <printf>
    8000d0da:	0003c797          	auipc	a5,0x3c
    8000d0de:	f377c783          	lbu	a5,-201(a5) # 80049011 <excpt+0x1>
    8000d0e2:	c799                	beqz	a5,8000d0f0 <tinst_tests_gpf+0x18e0>
    8000d0e4:	6418                	ld	a4,8(s0)
    8000d0e6:	47dd                	li	a5,23
    8000d0e8:	00f71463          	bne	a4,a5,8000d0f0 <tinst_tests_gpf+0x18e0>
    8000d0ec:	5850106f          	j	8000ee70 <tinst_tests_gpf+0x3660>
    8000d0f0:	0001a517          	auipc	a0,0x1a
    8000d0f4:	de850513          	addi	a0,a0,-536 # 80026ed8 <__func__.0+0x318>
    8000d0f8:	60d170ef          	jal	80024f04 <printf>
    8000d0fc:	02900513          	li	a0,41
    8000d100:	40f160ef          	jal	80023d0e <putchar>
    8000d104:	4529                	li	a0,10
    8000d106:	409160ef          	jal	80023d0e <putchar>
    8000d10a:	04090e63          	beqz	s2,8000d166 <tinst_tests_gpf+0x1956>
    8000d10e:	0003c497          	auipc	s1,0x3c
    8000d112:	f034c483          	lbu	s1,-253(s1) # 80049011 <excpt+0x1>
    8000d116:	c8a9                	beqz	s1,8000d168 <tinst_tests_gpf+0x1958>
    8000d118:	6418                	ld	a4,8(s0)
    8000d11a:	47dd                	li	a5,23
    8000d11c:	04f71563          	bne	a4,a5,8000d166 <tinst_tests_gpf+0x1956>
    8000d120:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    8000d122:	0001a597          	auipc	a1,0x1a
    8000d126:	d5e58593          	addi	a1,a1,-674 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000d12a:	c3b9                	beqz	a5,8000d170 <tinst_tests_gpf+0x1960>
    8000d12c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d12e:	0016f713          	andi	a4,a3,1
    8000d132:	3c071de3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d136:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d13a:	460d                	li	a2,3
    8000d13c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d140:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d142:	00c59763          	bne	a1,a2,8000d150 <tinst_tests_gpf+0x1940>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d146:	0026d683          	lhu	a3,2(a3)
    8000d14a:	0106969b          	slliw	a3,a3,0x10
    8000d14e:	8f55                	or	a4,a4,a3
    8000d150:	1ffe16b7          	lui	a3,0x1ffe1
    8000d154:	068e                	slli	a3,a3,0x3
    8000d156:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d158:	8f75                	and	a4,a4,a3
    TEST_END();
    8000d15a:	0001a597          	auipc	a1,0x1a
    8000d15e:	d2658593          	addi	a1,a1,-730 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000d162:	00e78763          	beq	a5,a4,8000d170 <tinst_tests_gpf+0x1960>
    8000d166:	4481                	li	s1,0
    TEST_END();
    8000d168:	0001a597          	auipc	a1,0x1a
    8000d16c:	d2858593          	addi	a1,a1,-728 # 80026e90 <__func__.0+0x2d0>
    8000d170:	0001a517          	auipc	a0,0x1a
    8000d174:	dc850513          	addi	a0,a0,-568 # 80026f38 <__func__.0+0x378>
    8000d178:	58d170ef          	jal	80024f04 <printf>
    8000d17c:	4511                	li	a0,4
    8000d17e:	a79f30ef          	jal	80000bf6 <goto_priv>
    8000d182:	b2af40ef          	jal	800014ac <reset_state>
}
    8000d186:	70a2                	ld	ra,40(sp)
    8000d188:	7402                	ld	s0,32(sp)
    8000d18a:	6942                	ld	s2,16(sp)
    8000d18c:	69a2                	ld	s3,8(sp)
    8000d18e:	8526                	mv	a0,s1
    8000d190:	64e2                	ld	s1,24(sp)
    8000d192:	6145                	addi	sp,sp,48
    8000d194:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d196:	701c                	ld	a5,32(s0)
    8000d198:	0001a597          	auipc	a1,0x1a
    8000d19c:	ce858593          	addi	a1,a1,-792 # 80026e80 <__func__.0+0x2c0>
    8000d1a0:	e399                	bnez	a5,8000d1a6 <tinst_tests_gpf+0x1996>
    8000d1a2:	823fe06f          	j	8000b9c4 <tinst_tests_gpf+0x1b4>
    8000d1a6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d1a8:	0016f713          	andi	a4,a3,1
    8000d1ac:	360710e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d1b0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d1b4:	460d                	li	a2,3
    8000d1b6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d1ba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d1bc:	00c59763          	bne	a1,a2,8000d1ca <tinst_tests_gpf+0x19ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d1c0:	0026d683          	lhu	a3,2(a3)
    8000d1c4:	0106969b          	slliw	a3,a3,0x10
    8000d1c8:	8f55                	or	a4,a4,a3
    8000d1ca:	1746                	slli	a4,a4,0x31
    8000d1cc:	9345                	srli	a4,a4,0x31
    8000d1ce:	0001a597          	auipc	a1,0x1a
    8000d1d2:	cb258593          	addi	a1,a1,-846 # 80026e80 <__func__.0+0x2c0>
    8000d1d6:	00e79463          	bne	a5,a4,8000d1de <tinst_tests_gpf+0x19ce>
    8000d1da:	feafe06f          	j	8000b9c4 <tinst_tests_gpf+0x1b4>
    8000d1de:	0001a597          	auipc	a1,0x1a
    8000d1e2:	cb258593          	addi	a1,a1,-846 # 80026e90 <__func__.0+0x2d0>
    8000d1e6:	fdefe06f          	j	8000b9c4 <tinst_tests_gpf+0x1b4>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d1ea:	6418                	ld	a4,8(s0)
    8000d1ec:	47d5                	li	a5,21
    8000d1ee:	0001a597          	auipc	a1,0x1a
    8000d1f2:	ca258593          	addi	a1,a1,-862 # 80026e90 <__func__.0+0x2d0>
    8000d1f6:	00f70463          	beq	a4,a5,8000d1fe <tinst_tests_gpf+0x19ee>
    8000d1fa:	875fe06f          	j	8000ba6e <tinst_tests_gpf+0x25e>
    8000d1fe:	701c                	ld	a5,32(s0)
    8000d200:	0001a597          	auipc	a1,0x1a
    8000d204:	c8058593          	addi	a1,a1,-896 # 80026e80 <__func__.0+0x2c0>
    8000d208:	e399                	bnez	a5,8000d20e <tinst_tests_gpf+0x19fe>
    8000d20a:	865fe06f          	j	8000ba6e <tinst_tests_gpf+0x25e>
    8000d20e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d210:	0016f713          	andi	a4,a3,1
    8000d214:	2e071ce3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d218:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d21c:	460d                	li	a2,3
    8000d21e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d222:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d224:	00c59763          	bne	a1,a2,8000d232 <tinst_tests_gpf+0x1a22>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d228:	0026d683          	lhu	a3,2(a3)
    8000d22c:	0106969b          	slliw	a3,a3,0x10
    8000d230:	8f55                	or	a4,a4,a3
    8000d232:	1746                	slli	a4,a4,0x31
    8000d234:	9345                	srli	a4,a4,0x31
    8000d236:	0001a597          	auipc	a1,0x1a
    8000d23a:	c4a58593          	addi	a1,a1,-950 # 80026e80 <__func__.0+0x2c0>
    8000d23e:	00e78463          	beq	a5,a4,8000d246 <tinst_tests_gpf+0x1a36>
    8000d242:	825fe06f          	j	8000ba66 <tinst_tests_gpf+0x256>
    8000d246:	829fe06f          	j	8000ba6e <tinst_tests_gpf+0x25e>
    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000d24a:	7018                	ld	a4,32(s0)
    8000d24c:	678d                	lui	a5,0x3
    8000d24e:	00f70463          	beq	a4,a5,8000d256 <tinst_tests_gpf+0x1a46>
    8000d252:	ee2fe06f          	j	8000b934 <tinst_tests_gpf+0x124>
    8000d256:	ef2fe06f          	j	8000b948 <tinst_tests_gpf+0x138>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d25a:	701c                	ld	a5,32(s0)
    8000d25c:	e399                	bnez	a5,8000d262 <tinst_tests_gpf+0x1a52>
    8000d25e:	f9cfe06f          	j	8000b9fa <tinst_tests_gpf+0x1ea>
    8000d262:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d264:	0016f713          	andi	a4,a3,1
    8000d268:	2a0712e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d26c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d270:	460d                	li	a2,3
    8000d272:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d276:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d278:	00c59763          	bne	a1,a2,8000d286 <tinst_tests_gpf+0x1a76>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d27c:	0026d683          	lhu	a3,2(a3)
    8000d280:	0106969b          	slliw	a3,a3,0x10
    8000d284:	8f55                	or	a4,a4,a3
    8000d286:	1746                	slli	a4,a4,0x31
    8000d288:	9345                	srli	a4,a4,0x31
    8000d28a:	00e78463          	beq	a5,a4,8000d292 <tinst_tests_gpf+0x1a82>
    8000d28e:	f58fe06f          	j	8000b9e6 <tinst_tests_gpf+0x1d6>
    8000d292:	f68fe06f          	j	8000b9fa <tinst_tests_gpf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d296:	701c                	ld	a5,32(s0)
    8000d298:	0001a597          	auipc	a1,0x1a
    8000d29c:	be858593          	addi	a1,a1,-1048 # 80026e80 <__func__.0+0x2c0>
    8000d2a0:	e399                	bnez	a5,8000d2a6 <tinst_tests_gpf+0x1a96>
    8000d2a2:	883fe06f          	j	8000bb24 <tinst_tests_gpf+0x314>
    8000d2a6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d2a8:	0016f713          	andi	a4,a3,1
    8000d2ac:	260710e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d2b0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d2b4:	460d                	li	a2,3
    8000d2b6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d2ba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d2bc:	00c59763          	bne	a1,a2,8000d2ca <tinst_tests_gpf+0x1aba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d2c0:	0026d683          	lhu	a3,2(a3)
    8000d2c4:	0106969b          	slliw	a3,a3,0x10
    8000d2c8:	8f55                	or	a4,a4,a3
    8000d2ca:	1746                	slli	a4,a4,0x31
    8000d2cc:	9345                	srli	a4,a4,0x31
    8000d2ce:	0001a597          	auipc	a1,0x1a
    8000d2d2:	bb258593          	addi	a1,a1,-1102 # 80026e80 <__func__.0+0x2c0>
    8000d2d6:	00e79463          	bne	a5,a4,8000d2de <tinst_tests_gpf+0x1ace>
    8000d2da:	84bfe06f          	j	8000bb24 <tinst_tests_gpf+0x314>
    8000d2de:	0001a597          	auipc	a1,0x1a
    8000d2e2:	bb258593          	addi	a1,a1,-1102 # 80026e90 <__func__.0+0x2d0>
    8000d2e6:	83ffe06f          	j	8000bb24 <tinst_tests_gpf+0x314>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000d2ea:	701c                	ld	a5,32(s0)
    8000d2ec:	0001a597          	auipc	a1,0x1a
    8000d2f0:	b9458593          	addi	a1,a1,-1132 # 80026e80 <__func__.0+0x2c0>
    8000d2f4:	e399                	bnez	a5,8000d2fa <tinst_tests_gpf+0x1aea>
    8000d2f6:	8e5fe06f          	j	8000bbda <tinst_tests_gpf+0x3ca>
    8000d2fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d2fc:	0016f713          	andi	a4,a3,1
    8000d300:	200716e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d304:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d308:	460d                	li	a2,3
    8000d30a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d30e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d310:	00c59763          	bne	a1,a2,8000d31e <tinst_tests_gpf+0x1b0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d314:	0026d683          	lhu	a3,2(a3)
    8000d318:	0106969b          	slliw	a3,a3,0x10
    8000d31c:	8f55                	or	a4,a4,a3
    8000d31e:	1746                	slli	a4,a4,0x31
    8000d320:	9345                	srli	a4,a4,0x31
    8000d322:	0001a597          	auipc	a1,0x1a
    8000d326:	b5e58593          	addi	a1,a1,-1186 # 80026e80 <__func__.0+0x2c0>
    8000d32a:	00e79463          	bne	a5,a4,8000d332 <tinst_tests_gpf+0x1b22>
    8000d32e:	8adfe06f          	j	8000bbda <tinst_tests_gpf+0x3ca>
    8000d332:	0001a597          	auipc	a1,0x1a
    8000d336:	b5e58593          	addi	a1,a1,-1186 # 80026e90 <__func__.0+0x2d0>
    8000d33a:	8a1fe06f          	j	8000bbda <tinst_tests_gpf+0x3ca>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d33e:	701c                	ld	a5,32(s0)
    8000d340:	0001a597          	auipc	a1,0x1a
    8000d344:	b4058593          	addi	a1,a1,-1216 # 80026e80 <__func__.0+0x2c0>
    8000d348:	e399                	bnez	a5,8000d34e <tinst_tests_gpf+0x1b3e>
    8000d34a:	947fe06f          	j	8000bc90 <tinst_tests_gpf+0x480>
    8000d34e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d350:	0016f713          	andi	a4,a3,1
    8000d354:	1a071ce3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d358:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d35c:	460d                	li	a2,3
    8000d35e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d362:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d364:	00c59763          	bne	a1,a2,8000d372 <tinst_tests_gpf+0x1b62>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d368:	0026d683          	lhu	a3,2(a3)
    8000d36c:	0106969b          	slliw	a3,a3,0x10
    8000d370:	8f55                	or	a4,a4,a3
    8000d372:	1746                	slli	a4,a4,0x31
    8000d374:	9345                	srli	a4,a4,0x31
    8000d376:	0001a597          	auipc	a1,0x1a
    8000d37a:	b0a58593          	addi	a1,a1,-1270 # 80026e80 <__func__.0+0x2c0>
    8000d37e:	00e79463          	bne	a5,a4,8000d386 <tinst_tests_gpf+0x1b76>
    8000d382:	90ffe06f          	j	8000bc90 <tinst_tests_gpf+0x480>
    8000d386:	0001a597          	auipc	a1,0x1a
    8000d38a:	b0a58593          	addi	a1,a1,-1270 # 80026e90 <__func__.0+0x2d0>
    8000d38e:	903fe06f          	j	8000bc90 <tinst_tests_gpf+0x480>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d392:	701c                	ld	a5,32(s0)
    8000d394:	0001a597          	auipc	a1,0x1a
    8000d398:	aec58593          	addi	a1,a1,-1300 # 80026e80 <__func__.0+0x2c0>
    8000d39c:	e399                	bnez	a5,8000d3a2 <tinst_tests_gpf+0x1b92>
    8000d39e:	9a1fe06f          	j	8000bd3e <tinst_tests_gpf+0x52e>
    8000d3a2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3a4:	0016f713          	andi	a4,a3,1
    8000d3a8:	160712e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d3ac:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d3b0:	460d                	li	a2,3
    8000d3b2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d3b6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d3b8:	00c59763          	bne	a1,a2,8000d3c6 <tinst_tests_gpf+0x1bb6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d3bc:	0026d683          	lhu	a3,2(a3)
    8000d3c0:	0106969b          	slliw	a3,a3,0x10
    8000d3c4:	8f55                	or	a4,a4,a3
    8000d3c6:	1746                	slli	a4,a4,0x31
    8000d3c8:	9345                	srli	a4,a4,0x31
    8000d3ca:	0001a597          	auipc	a1,0x1a
    8000d3ce:	ab658593          	addi	a1,a1,-1354 # 80026e80 <__func__.0+0x2c0>
    8000d3d2:	00e79463          	bne	a5,a4,8000d3da <tinst_tests_gpf+0x1bca>
    8000d3d6:	969fe06f          	j	8000bd3e <tinst_tests_gpf+0x52e>
    8000d3da:	0001a597          	auipc	a1,0x1a
    8000d3de:	ab658593          	addi	a1,a1,-1354 # 80026e90 <__func__.0+0x2d0>
    8000d3e2:	95dfe06f          	j	8000bd3e <tinst_tests_gpf+0x52e>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d3e6:	701c                	ld	a5,32(s0)
    8000d3e8:	0001a597          	auipc	a1,0x1a
    8000d3ec:	a9858593          	addi	a1,a1,-1384 # 80026e80 <__func__.0+0x2c0>
    8000d3f0:	e399                	bnez	a5,8000d3f6 <tinst_tests_gpf+0x1be6>
    8000d3f2:	9fdfe06f          	j	8000bdee <tinst_tests_gpf+0x5de>
    8000d3f6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3f8:	0016f713          	andi	a4,a3,1
    8000d3fc:	100718e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d400:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d404:	460d                	li	a2,3
    8000d406:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d40a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d40c:	00c59763          	bne	a1,a2,8000d41a <tinst_tests_gpf+0x1c0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d410:	0026d683          	lhu	a3,2(a3)
    8000d414:	0106969b          	slliw	a3,a3,0x10
    8000d418:	8f55                	or	a4,a4,a3
    8000d41a:	01f076b7          	lui	a3,0x1f07
    8000d41e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d422:	8f75                	and	a4,a4,a3
    8000d424:	0001a597          	auipc	a1,0x1a
    8000d428:	a5c58593          	addi	a1,a1,-1444 # 80026e80 <__func__.0+0x2c0>
    8000d42c:	00e79463          	bne	a5,a4,8000d434 <tinst_tests_gpf+0x1c24>
    8000d430:	9bffe06f          	j	8000bdee <tinst_tests_gpf+0x5de>
    8000d434:	0001a597          	auipc	a1,0x1a
    8000d438:	a5c58593          	addi	a1,a1,-1444 # 80026e90 <__func__.0+0x2d0>
    8000d43c:	9b3fe06f          	j	8000bdee <tinst_tests_gpf+0x5de>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d440:	701c                	ld	a5,32(s0)
    8000d442:	0001a597          	auipc	a1,0x1a
    8000d446:	a3e58593          	addi	a1,a1,-1474 # 80026e80 <__func__.0+0x2c0>
    8000d44a:	e399                	bnez	a5,8000d450 <tinst_tests_gpf+0x1c40>
    8000d44c:	a57fe06f          	j	8000bea2 <tinst_tests_gpf+0x692>
    8000d450:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d452:	0016f713          	andi	a4,a3,1
    8000d456:	0a071be3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d45a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d45e:	460d                	li	a2,3
    8000d460:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d464:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d466:	00c59763          	bne	a1,a2,8000d474 <tinst_tests_gpf+0x1c64>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d46a:	0026d683          	lhu	a3,2(a3)
    8000d46e:	0106969b          	slliw	a3,a3,0x10
    8000d472:	8f55                	or	a4,a4,a3
    8000d474:	01f076b7          	lui	a3,0x1f07
    8000d478:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d47c:	8f75                	and	a4,a4,a3
    8000d47e:	0001a597          	auipc	a1,0x1a
    8000d482:	a0258593          	addi	a1,a1,-1534 # 80026e80 <__func__.0+0x2c0>
    8000d486:	00e79463          	bne	a5,a4,8000d48e <tinst_tests_gpf+0x1c7e>
    8000d48a:	a19fe06f          	j	8000bea2 <tinst_tests_gpf+0x692>
    8000d48e:	0001a597          	auipc	a1,0x1a
    8000d492:	a0258593          	addi	a1,a1,-1534 # 80026e90 <__func__.0+0x2d0>
    8000d496:	a0dfe06f          	j	8000bea2 <tinst_tests_gpf+0x692>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d49a:	701c                	ld	a5,32(s0)
    8000d49c:	0001a597          	auipc	a1,0x1a
    8000d4a0:	9e458593          	addi	a1,a1,-1564 # 80026e80 <__func__.0+0x2c0>
    8000d4a4:	e399                	bnez	a5,8000d4aa <tinst_tests_gpf+0x1c9a>
    8000d4a6:	ab3fe06f          	j	8000bf58 <tinst_tests_gpf+0x748>
    8000d4aa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4ac:	0016f713          	andi	a4,a3,1
    8000d4b0:	04071ee3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d4b4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d4b8:	460d                	li	a2,3
    8000d4ba:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d4be:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d4c0:	00c59763          	bne	a1,a2,8000d4ce <tinst_tests_gpf+0x1cbe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d4c4:	0026d683          	lhu	a3,2(a3)
    8000d4c8:	0106969b          	slliw	a3,a3,0x10
    8000d4cc:	8f55                	or	a4,a4,a3
    8000d4ce:	01f076b7          	lui	a3,0x1f07
    8000d4d2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d4d6:	8f75                	and	a4,a4,a3
    8000d4d8:	0001a597          	auipc	a1,0x1a
    8000d4dc:	9a858593          	addi	a1,a1,-1624 # 80026e80 <__func__.0+0x2c0>
    8000d4e0:	00e79463          	bne	a5,a4,8000d4e8 <tinst_tests_gpf+0x1cd8>
    8000d4e4:	a75fe06f          	j	8000bf58 <tinst_tests_gpf+0x748>
    8000d4e8:	0001a597          	auipc	a1,0x1a
    8000d4ec:	9a858593          	addi	a1,a1,-1624 # 80026e90 <__func__.0+0x2d0>
    8000d4f0:	a69fe06f          	j	8000bf58 <tinst_tests_gpf+0x748>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d4f4:	701c                	ld	a5,32(s0)
    8000d4f6:	0001a597          	auipc	a1,0x1a
    8000d4fa:	98a58593          	addi	a1,a1,-1654 # 80026e80 <__func__.0+0x2c0>
    8000d4fe:	e399                	bnez	a5,8000d504 <tinst_tests_gpf+0x1cf4>
    8000d500:	b11fe06f          	j	8000c010 <tinst_tests_gpf+0x800>
    8000d504:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d506:	0016f713          	andi	a4,a3,1
    8000d50a:	000711e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d50e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d512:	460d                	li	a2,3
    8000d514:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d518:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d51a:	00c59763          	bne	a1,a2,8000d528 <tinst_tests_gpf+0x1d18>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d51e:	0026d683          	lhu	a3,2(a3)
    8000d522:	0106969b          	slliw	a3,a3,0x10
    8000d526:	8f55                	or	a4,a4,a3
    8000d528:	01f076b7          	lui	a3,0x1f07
    8000d52c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d530:	8f75                	and	a4,a4,a3
    8000d532:	0001a597          	auipc	a1,0x1a
    8000d536:	94e58593          	addi	a1,a1,-1714 # 80026e80 <__func__.0+0x2c0>
    8000d53a:	00e79463          	bne	a5,a4,8000d542 <tinst_tests_gpf+0x1d32>
    8000d53e:	ad3fe06f          	j	8000c010 <tinst_tests_gpf+0x800>
    8000d542:	0001a597          	auipc	a1,0x1a
    8000d546:	94e58593          	addi	a1,a1,-1714 # 80026e90 <__func__.0+0x2d0>
    8000d54a:	ac7fe06f          	j	8000c010 <tinst_tests_gpf+0x800>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000d54e:	701c                	ld	a5,32(s0)
    8000d550:	0001a597          	auipc	a1,0x1a
    8000d554:	93058593          	addi	a1,a1,-1744 # 80026e80 <__func__.0+0x2c0>
    8000d558:	e399                	bnez	a5,8000d55e <tinst_tests_gpf+0x1d4e>
    8000d55a:	e19fe06f          	j	8000c372 <tinst_tests_gpf+0xb62>
    8000d55e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d560:	0016f713          	andi	a4,a3,1
    8000d564:	7a071463          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d568:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d56c:	460d                	li	a2,3
    8000d56e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d572:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d574:	00c59763          	bne	a1,a2,8000d582 <tinst_tests_gpf+0x1d72>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d578:	0026d683          	lhu	a3,2(a3)
    8000d57c:	0106969b          	slliw	a3,a3,0x10
    8000d580:	8f55                	or	a4,a4,a3
    8000d582:	1ffe16b7          	lui	a3,0x1ffe1
    8000d586:	068e                	slli	a3,a3,0x3
    8000d588:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d58a:	8f75                	and	a4,a4,a3
    8000d58c:	0001a597          	auipc	a1,0x1a
    8000d590:	8f458593          	addi	a1,a1,-1804 # 80026e80 <__func__.0+0x2c0>
    8000d594:	00e79463          	bne	a5,a4,8000d59c <tinst_tests_gpf+0x1d8c>
    8000d598:	ddbfe06f          	j	8000c372 <tinst_tests_gpf+0xb62>
    8000d59c:	0001a597          	auipc	a1,0x1a
    8000d5a0:	8f458593          	addi	a1,a1,-1804 # 80026e90 <__func__.0+0x2d0>
    8000d5a4:	dcffe06f          	j	8000c372 <tinst_tests_gpf+0xb62>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000d5a8:	701c                	ld	a5,32(s0)
    8000d5aa:	0001a597          	auipc	a1,0x1a
    8000d5ae:	8d658593          	addi	a1,a1,-1834 # 80026e80 <__func__.0+0x2c0>
    8000d5b2:	e399                	bnez	a5,8000d5b8 <tinst_tests_gpf+0x1da8>
    8000d5b4:	e7bfe06f          	j	8000c42e <tinst_tests_gpf+0xc1e>
    8000d5b8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d5ba:	0016f713          	andi	a4,a3,1
    8000d5be:	74071763          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d5c2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d5c6:	460d                	li	a2,3
    8000d5c8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d5cc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d5ce:	00c59763          	bne	a1,a2,8000d5dc <tinst_tests_gpf+0x1dcc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d5d2:	0026d683          	lhu	a3,2(a3)
    8000d5d6:	0106969b          	slliw	a3,a3,0x10
    8000d5da:	8f55                	or	a4,a4,a3
    8000d5dc:	1ffe16b7          	lui	a3,0x1ffe1
    8000d5e0:	068e                	slli	a3,a3,0x3
    8000d5e2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d5e4:	8f75                	and	a4,a4,a3
    8000d5e6:	0001a597          	auipc	a1,0x1a
    8000d5ea:	89a58593          	addi	a1,a1,-1894 # 80026e80 <__func__.0+0x2c0>
    8000d5ee:	00e79463          	bne	a5,a4,8000d5f6 <tinst_tests_gpf+0x1de6>
    8000d5f2:	e3dfe06f          	j	8000c42e <tinst_tests_gpf+0xc1e>
    8000d5f6:	0001a597          	auipc	a1,0x1a
    8000d5fa:	89a58593          	addi	a1,a1,-1894 # 80026e90 <__func__.0+0x2d0>
    8000d5fe:	e31fe06f          	j	8000c42e <tinst_tests_gpf+0xc1e>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000d602:	701c                	ld	a5,32(s0)
    8000d604:	0001a597          	auipc	a1,0x1a
    8000d608:	87c58593          	addi	a1,a1,-1924 # 80026e80 <__func__.0+0x2c0>
    8000d60c:	e399                	bnez	a5,8000d612 <tinst_tests_gpf+0x1e02>
    8000d60e:	ed7fe06f          	j	8000c4e4 <tinst_tests_gpf+0xcd4>
    8000d612:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d614:	0016f713          	andi	a4,a3,1
    8000d618:	6e071a63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d61c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d620:	460d                	li	a2,3
    8000d622:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d626:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d628:	00c59763          	bne	a1,a2,8000d636 <tinst_tests_gpf+0x1e26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d62c:	0026d683          	lhu	a3,2(a3)
    8000d630:	0106969b          	slliw	a3,a3,0x10
    8000d634:	8f55                	or	a4,a4,a3
    8000d636:	1ffe16b7          	lui	a3,0x1ffe1
    8000d63a:	068e                	slli	a3,a3,0x3
    8000d63c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d63e:	8f75                	and	a4,a4,a3
    8000d640:	0001a597          	auipc	a1,0x1a
    8000d644:	84058593          	addi	a1,a1,-1984 # 80026e80 <__func__.0+0x2c0>
    8000d648:	00e79463          	bne	a5,a4,8000d650 <tinst_tests_gpf+0x1e40>
    8000d64c:	e99fe06f          	j	8000c4e4 <tinst_tests_gpf+0xcd4>
    8000d650:	0001a597          	auipc	a1,0x1a
    8000d654:	84058593          	addi	a1,a1,-1984 # 80026e90 <__func__.0+0x2d0>
    8000d658:	e8dfe06f          	j	8000c4e4 <tinst_tests_gpf+0xcd4>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000d65c:	701c                	ld	a5,32(s0)
    8000d65e:	0001a597          	auipc	a1,0x1a
    8000d662:	82258593          	addi	a1,a1,-2014 # 80026e80 <__func__.0+0x2c0>
    8000d666:	e399                	bnez	a5,8000d66c <tinst_tests_gpf+0x1e5c>
    8000d668:	f33fe06f          	j	8000c59a <tinst_tests_gpf+0xd8a>
    8000d66c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d66e:	0016f713          	andi	a4,a3,1
    8000d672:	68071d63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d676:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d67a:	460d                	li	a2,3
    8000d67c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d680:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d682:	00c59763          	bne	a1,a2,8000d690 <tinst_tests_gpf+0x1e80>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d686:	0026d683          	lhu	a3,2(a3)
    8000d68a:	0106969b          	slliw	a3,a3,0x10
    8000d68e:	8f55                	or	a4,a4,a3
    8000d690:	1ffe16b7          	lui	a3,0x1ffe1
    8000d694:	068e                	slli	a3,a3,0x3
    8000d696:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d698:	8f75                	and	a4,a4,a3
    8000d69a:	00019597          	auipc	a1,0x19
    8000d69e:	7e658593          	addi	a1,a1,2022 # 80026e80 <__func__.0+0x2c0>
    8000d6a2:	00e79463          	bne	a5,a4,8000d6aa <tinst_tests_gpf+0x1e9a>
    8000d6a6:	ef5fe06f          	j	8000c59a <tinst_tests_gpf+0xd8a>
    8000d6aa:	00019597          	auipc	a1,0x19
    8000d6ae:	7e658593          	addi	a1,a1,2022 # 80026e90 <__func__.0+0x2d0>
    8000d6b2:	ee9fe06f          	j	8000c59a <tinst_tests_gpf+0xd8a>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d6b6:	701c                	ld	a5,32(s0)
    8000d6b8:	e399                	bnez	a5,8000d6be <tinst_tests_gpf+0x1eae>
    8000d6ba:	beafe06f          	j	8000baa4 <tinst_tests_gpf+0x294>
    8000d6be:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6c0:	0016f713          	andi	a4,a3,1
    8000d6c4:	64071463          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d6c8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d6cc:	460d                	li	a2,3
    8000d6ce:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d6d2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d6d4:	00c59763          	bne	a1,a2,8000d6e2 <tinst_tests_gpf+0x1ed2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d6d8:	0026d683          	lhu	a3,2(a3)
    8000d6dc:	0106969b          	slliw	a3,a3,0x10
    8000d6e0:	8f55                	or	a4,a4,a3
    8000d6e2:	1746                	slli	a4,a4,0x31
    8000d6e4:	9345                	srli	a4,a4,0x31
    8000d6e6:	00e78463          	beq	a5,a4,8000d6ee <tinst_tests_gpf+0x1ede>
    8000d6ea:	ba6fe06f          	j	8000ba90 <tinst_tests_gpf+0x280>
    8000d6ee:	bb6fe06f          	j	8000baa4 <tinst_tests_gpf+0x294>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d6f2:	701c                	ld	a5,32(s0)
    8000d6f4:	e399                	bnez	a5,8000d6fa <tinst_tests_gpf+0x1eea>
    8000d6f6:	c64fe06f          	j	8000bb5a <tinst_tests_gpf+0x34a>
    8000d6fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6fc:	0016f713          	andi	a4,a3,1
    8000d700:	60071663          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d704:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d708:	460d                	li	a2,3
    8000d70a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d70e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d710:	00c59763          	bne	a1,a2,8000d71e <tinst_tests_gpf+0x1f0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d714:	0026d683          	lhu	a3,2(a3)
    8000d718:	0106969b          	slliw	a3,a3,0x10
    8000d71c:	8f55                	or	a4,a4,a3
    8000d71e:	1746                	slli	a4,a4,0x31
    8000d720:	9345                	srli	a4,a4,0x31
    8000d722:	00e78463          	beq	a5,a4,8000d72a <tinst_tests_gpf+0x1f1a>
    8000d726:	c20fe06f          	j	8000bb46 <tinst_tests_gpf+0x336>
    8000d72a:	c30fe06f          	j	8000bb5a <tinst_tests_gpf+0x34a>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d72e:	6418                	ld	a4,8(s0)
    8000d730:	47d5                	li	a5,21
    8000d732:	00f70463          	beq	a4,a5,8000d73a <tinst_tests_gpf+0x1f2a>
    8000d736:	da8fe06f          	j	8000bcde <tinst_tests_gpf+0x4ce>
    8000d73a:	7018                	ld	a4,32(s0)
    8000d73c:	e319                	bnez	a4,8000d742 <tinst_tests_gpf+0x1f32>
    8000d73e:	da2fe06f          	j	8000bce0 <tinst_tests_gpf+0x4d0>
    8000d742:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d744:	0016f793          	andi	a5,a3,1
    8000d748:	5c079263          	bnez	a5,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d74c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d750:	460d                	li	a2,3
    8000d752:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d756:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d758:	00c59763          	bne	a1,a2,8000d766 <tinst_tests_gpf+0x1f56>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d75c:	0026d683          	lhu	a3,2(a3)
    8000d760:	0106969b          	slliw	a3,a3,0x10
    8000d764:	8fd5                	or	a5,a5,a3
    8000d766:	17c6                	slli	a5,a5,0x31
    8000d768:	0317d913          	srli	s2,a5,0x31
    8000d76c:	40e90933          	sub	s2,s2,a4
    8000d770:	00193913          	seqz	s2,s2
    8000d774:	d6cfe06f          	j	8000bce0 <tinst_tests_gpf+0x4d0>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000d778:	6418                	ld	a4,8(s0)
    8000d77a:	47dd                	li	a5,23
    8000d77c:	00019597          	auipc	a1,0x19
    8000d780:	71458593          	addi	a1,a1,1812 # 80026e90 <__func__.0+0x2d0>
    8000d784:	00f70463          	beq	a4,a5,8000d78c <tinst_tests_gpf+0x1f7c>
    8000d788:	ebdfe06f          	j	8000c644 <tinst_tests_gpf+0xe34>
    8000d78c:	701c                	ld	a5,32(s0)
    8000d78e:	00019597          	auipc	a1,0x19
    8000d792:	6f258593          	addi	a1,a1,1778 # 80026e80 <__func__.0+0x2c0>
    8000d796:	e399                	bnez	a5,8000d79c <tinst_tests_gpf+0x1f8c>
    8000d798:	eadfe06f          	j	8000c644 <tinst_tests_gpf+0xe34>
    8000d79c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d79e:	0016f713          	andi	a4,a3,1
    8000d7a2:	56071563          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d7a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7aa:	460d                	li	a2,3
    8000d7ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d7b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7b2:	00c59763          	bne	a1,a2,8000d7c0 <tinst_tests_gpf+0x1fb0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7b6:	0026d683          	lhu	a3,2(a3)
    8000d7ba:	0106969b          	slliw	a3,a3,0x10
    8000d7be:	8f55                	or	a4,a4,a3
    8000d7c0:	1ffe16b7          	lui	a3,0x1ffe1
    8000d7c4:	068e                	slli	a3,a3,0x3
    8000d7c6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d7c8:	8f75                	and	a4,a4,a3
    8000d7ca:	00019597          	auipc	a1,0x19
    8000d7ce:	6b658593          	addi	a1,a1,1718 # 80026e80 <__func__.0+0x2c0>
    8000d7d2:	00e78463          	beq	a5,a4,8000d7da <tinst_tests_gpf+0x1fca>
    8000d7d6:	e67fe06f          	j	8000c63c <tinst_tests_gpf+0xe2c>
    8000d7da:	e6bfe06f          	j	8000c644 <tinst_tests_gpf+0xe34>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d7de:	6418                	ld	a4,8(s0)
    8000d7e0:	47d5                	li	a5,21
    8000d7e2:	00f70463          	beq	a4,a5,8000d7ea <tinst_tests_gpf+0x1fda>
    8000d7e6:	da6fe06f          	j	8000bd8c <tinst_tests_gpf+0x57c>
    8000d7ea:	7018                	ld	a4,32(s0)
    8000d7ec:	e319                	bnez	a4,8000d7f2 <tinst_tests_gpf+0x1fe2>
    8000d7ee:	da0fe06f          	j	8000bd8e <tinst_tests_gpf+0x57e>
    8000d7f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7f4:	0016f793          	andi	a5,a3,1
    8000d7f8:	50079a63          	bnez	a5,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d7fc:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d800:	460d                	li	a2,3
    8000d802:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d806:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d808:	00c59763          	bne	a1,a2,8000d816 <tinst_tests_gpf+0x2006>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d80c:	0026d683          	lhu	a3,2(a3)
    8000d810:	0106969b          	slliw	a3,a3,0x10
    8000d814:	8fd5                	or	a5,a5,a3
    8000d816:	17c6                	slli	a5,a5,0x31
    8000d818:	0317d913          	srli	s2,a5,0x31
    8000d81c:	40e90933          	sub	s2,s2,a4
    8000d820:	00193913          	seqz	s2,s2
    8000d824:	d6afe06f          	j	8000bd8e <tinst_tests_gpf+0x57e>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000d828:	6418                	ld	a4,8(s0)
    8000d82a:	47dd                	li	a5,23
    8000d82c:	00019597          	auipc	a1,0x19
    8000d830:	66458593          	addi	a1,a1,1636 # 80026e90 <__func__.0+0x2d0>
    8000d834:	00f70463          	beq	a4,a5,8000d83c <tinst_tests_gpf+0x202c>
    8000d838:	eb7fe06f          	j	8000c6ee <tinst_tests_gpf+0xede>
    8000d83c:	701c                	ld	a5,32(s0)
    8000d83e:	00019597          	auipc	a1,0x19
    8000d842:	64258593          	addi	a1,a1,1602 # 80026e80 <__func__.0+0x2c0>
    8000d846:	e399                	bnez	a5,8000d84c <tinst_tests_gpf+0x203c>
    8000d848:	ea7fe06f          	j	8000c6ee <tinst_tests_gpf+0xede>
    8000d84c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d84e:	0016f713          	andi	a4,a3,1
    8000d852:	4a071d63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d856:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d85a:	460d                	li	a2,3
    8000d85c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d860:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d862:	00c59763          	bne	a1,a2,8000d870 <tinst_tests_gpf+0x2060>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d866:	0026d683          	lhu	a3,2(a3)
    8000d86a:	0106969b          	slliw	a3,a3,0x10
    8000d86e:	8f55                	or	a4,a4,a3
    8000d870:	1ffe16b7          	lui	a3,0x1ffe1
    8000d874:	068e                	slli	a3,a3,0x3
    8000d876:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d878:	8f75                	and	a4,a4,a3
    8000d87a:	00019597          	auipc	a1,0x19
    8000d87e:	60658593          	addi	a1,a1,1542 # 80026e80 <__func__.0+0x2c0>
    8000d882:	00e78463          	beq	a5,a4,8000d88a <tinst_tests_gpf+0x207a>
    8000d886:	e61fe06f          	j	8000c6e6 <tinst_tests_gpf+0xed6>
    8000d88a:	e65fe06f          	j	8000c6ee <tinst_tests_gpf+0xede>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d88e:	6418                	ld	a4,8(s0)
    8000d890:	47dd                	li	a5,23
    8000d892:	00f70463          	beq	a4,a5,8000d89a <tinst_tests_gpf+0x208a>
    8000d896:	da6fe06f          	j	8000be3c <tinst_tests_gpf+0x62c>
    8000d89a:	701c                	ld	a5,32(s0)
    8000d89c:	e399                	bnez	a5,8000d8a2 <tinst_tests_gpf+0x2092>
    8000d89e:	da0fe06f          	j	8000be3e <tinst_tests_gpf+0x62e>
    8000d8a2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d8a4:	0016f713          	andi	a4,a3,1
    8000d8a8:	46071263          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d8ac:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d8b0:	460d                	li	a2,3
    8000d8b2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d8b6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d8b8:	00c59763          	bne	a1,a2,8000d8c6 <tinst_tests_gpf+0x20b6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d8bc:	0026d683          	lhu	a3,2(a3)
    8000d8c0:	0106969b          	slliw	a3,a3,0x10
    8000d8c4:	8f55                	or	a4,a4,a3
    8000d8c6:	01f076b7          	lui	a3,0x1f07
    8000d8ca:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d8ce:	8f75                	and	a4,a4,a3
    8000d8d0:	40f70933          	sub	s2,a4,a5
    8000d8d4:	00193913          	seqz	s2,s2
    8000d8d8:	d66fe06f          	j	8000be3e <tinst_tests_gpf+0x62e>
    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000d8dc:	7018                	ld	a4,32(s0)
    8000d8de:	678d                	lui	a5,0x3
    8000d8e0:	00019597          	auipc	a1,0x19
    8000d8e4:	5a058593          	addi	a1,a1,1440 # 80026e80 <__func__.0+0x2c0>
    8000d8e8:	00f71463          	bne	a4,a5,8000d8f0 <tinst_tests_gpf+0x20e0>
    8000d8ec:	826fe06f          	j	8000b912 <tinst_tests_gpf+0x102>
    8000d8f0:	00019597          	auipc	a1,0x19
    8000d8f4:	5a058593          	addi	a1,a1,1440 # 80026e90 <__func__.0+0x2d0>
    8000d8f8:	81afe06f          	j	8000b912 <tinst_tests_gpf+0x102>
    8000d8fc:	02043903          	ld	s2,32(s0)
    8000d900:	77f5                	lui	a5,0xffffd
    8000d902:	993e                	add	s2,s2,a5
    8000d904:	00193913          	seqz	s2,s2
    8000d908:	85efe06f          	j	8000b966 <tinst_tests_gpf+0x156>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d90c:	6418                	ld	a4,8(s0)
    8000d90e:	47dd                	li	a5,23
    8000d910:	00f70463          	beq	a4,a5,8000d918 <tinst_tests_gpf+0x2108>
    8000d914:	ddcfe06f          	j	8000bef0 <tinst_tests_gpf+0x6e0>
    8000d918:	701c                	ld	a5,32(s0)
    8000d91a:	e399                	bnez	a5,8000d920 <tinst_tests_gpf+0x2110>
    8000d91c:	dd6fe06f          	j	8000bef2 <tinst_tests_gpf+0x6e2>
    8000d920:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d922:	0016f713          	andi	a4,a3,1
    8000d926:	3e071363          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d92a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d92e:	460d                	li	a2,3
    8000d930:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d934:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d936:	00c59763          	bne	a1,a2,8000d944 <tinst_tests_gpf+0x2134>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d93a:	0026d683          	lhu	a3,2(a3)
    8000d93e:	0106969b          	slliw	a3,a3,0x10
    8000d942:	8f55                	or	a4,a4,a3
    8000d944:	01f076b7          	lui	a3,0x1f07
    8000d948:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d94c:	8f75                	and	a4,a4,a3
    8000d94e:	40f70933          	sub	s2,a4,a5
    8000d952:	00193913          	seqz	s2,s2
    8000d956:	d9cfe06f          	j	8000bef2 <tinst_tests_gpf+0x6e2>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d95a:	6418                	ld	a4,8(s0)
    8000d95c:	47dd                	li	a5,23
    8000d95e:	00f70463          	beq	a4,a5,8000d966 <tinst_tests_gpf+0x2156>
    8000d962:	e44fe06f          	j	8000bfa6 <tinst_tests_gpf+0x796>
    8000d966:	701c                	ld	a5,32(s0)
    8000d968:	e399                	bnez	a5,8000d96e <tinst_tests_gpf+0x215e>
    8000d96a:	e3efe06f          	j	8000bfa8 <tinst_tests_gpf+0x798>
    8000d96e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d970:	0016f713          	andi	a4,a3,1
    8000d974:	38071c63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d978:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d97c:	460d                	li	a2,3
    8000d97e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d982:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d984:	00c59763          	bne	a1,a2,8000d992 <tinst_tests_gpf+0x2182>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d988:	0026d683          	lhu	a3,2(a3)
    8000d98c:	0106969b          	slliw	a3,a3,0x10
    8000d990:	8f55                	or	a4,a4,a3
    8000d992:	01f076b7          	lui	a3,0x1f07
    8000d996:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d99a:	8f75                	and	a4,a4,a3
    8000d99c:	40f70933          	sub	s2,a4,a5
    8000d9a0:	00193913          	seqz	s2,s2
    8000d9a4:	e04fe06f          	j	8000bfa8 <tinst_tests_gpf+0x798>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d9a8:	6418                	ld	a4,8(s0)
    8000d9aa:	47dd                	li	a5,23
    8000d9ac:	00f70463          	beq	a4,a5,8000d9b4 <tinst_tests_gpf+0x21a4>
    8000d9b0:	eaefe06f          	j	8000c05e <tinst_tests_gpf+0x84e>
    8000d9b4:	701c                	ld	a5,32(s0)
    8000d9b6:	e399                	bnez	a5,8000d9bc <tinst_tests_gpf+0x21ac>
    8000d9b8:	ea8fe06f          	j	8000c060 <tinst_tests_gpf+0x850>
    8000d9bc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d9be:	0016f713          	andi	a4,a3,1
    8000d9c2:	34071563          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000d9c6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d9ca:	460d                	li	a2,3
    8000d9cc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d9d0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d9d2:	00c59763          	bne	a1,a2,8000d9e0 <tinst_tests_gpf+0x21d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d9d6:	0026d683          	lhu	a3,2(a3)
    8000d9da:	0106969b          	slliw	a3,a3,0x10
    8000d9de:	8f55                	or	a4,a4,a3
    8000d9e0:	01f076b7          	lui	a3,0x1f07
    8000d9e4:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d9e8:	8f75                	and	a4,a4,a3
    8000d9ea:	40f70933          	sub	s2,a4,a5
    8000d9ee:	00193913          	seqz	s2,s2
    8000d9f2:	e6efe06f          	j	8000c060 <tinst_tests_gpf+0x850>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d9f6:	6418                	ld	a4,8(s0)
    8000d9f8:	47d5                	li	a5,21
    8000d9fa:	00f70463          	beq	a4,a5,8000da02 <tinst_tests_gpf+0x21f2>
    8000d9fe:	f08fe06f          	j	8000c106 <tinst_tests_gpf+0x8f6>
    8000da02:	7004                	ld	s1,32(s0)
    8000da04:	e099                	bnez	s1,8000da0a <tinst_tests_gpf+0x21fa>
    8000da06:	f02fe06f          	j	8000c108 <tinst_tests_gpf+0x8f8>
    8000da0a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da0c:	0017f713          	andi	a4,a5,1
    8000da10:	2e071e63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000da14:	0007d503          	lhu	a0,0(a5) # ffffffffffffd000 <__stack_top+0xffffffff7fcfe000>
    8000da18:	9b1f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000da1c:	67a1                	lui	a5,0x8
    8000da1e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000da20:	00f57933          	and	s2,a0,a5
    8000da24:	40990933          	sub	s2,s2,s1
    8000da28:	00193913          	seqz	s2,s2
    8000da2c:	edcfe06f          	j	8000c108 <tinst_tests_gpf+0x8f8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000da30:	6418                	ld	a4,8(s0)
    8000da32:	47d5                	li	a5,21
    8000da34:	00f70463          	beq	a4,a5,8000da3c <tinst_tests_gpf+0x222c>
    8000da38:	f78fe06f          	j	8000c1b0 <tinst_tests_gpf+0x9a0>
    8000da3c:	02043983          	ld	s3,32(s0)
    8000da40:	00099463          	bnez	s3,8000da48 <tinst_tests_gpf+0x2238>
    8000da44:	f6efe06f          	j	8000c1b2 <tinst_tests_gpf+0x9a2>
    8000da48:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da4a:	0017f713          	andi	a4,a5,1
    8000da4e:	2a071f63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000da52:	0007d503          	lhu	a0,0(a5)
    8000da56:	973f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000da5a:	67a1                	lui	a5,0x8
    8000da5c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000da5e:	00f57933          	and	s2,a0,a5
    8000da62:	41390933          	sub	s2,s2,s3
    8000da66:	00193913          	seqz	s2,s2
    8000da6a:	f48fe06f          	j	8000c1b2 <tinst_tests_gpf+0x9a2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000da6e:	6418                	ld	a4,8(s0)
    8000da70:	47dd                	li	a5,23
    8000da72:	00f70463          	beq	a4,a5,8000da7a <tinst_tests_gpf+0x226a>
    8000da76:	fe4fe06f          	j	8000c25a <tinst_tests_gpf+0xa4a>
    8000da7a:	02043983          	ld	s3,32(s0)
    8000da7e:	00099463          	bnez	s3,8000da86 <tinst_tests_gpf+0x2276>
    8000da82:	fdafe06f          	j	8000c25c <tinst_tests_gpf+0xa4c>
    8000da86:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000da88:	0017f713          	andi	a4,a5,1
    8000da8c:	28071063          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000da90:	0007d503          	lhu	a0,0(a5)
    8000da94:	935f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000da98:	01f077b7          	lui	a5,0x1f07
    8000da9c:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000daa0:	00f57933          	and	s2,a0,a5
    8000daa4:	41390933          	sub	s2,s2,s3
    8000daa8:	00193913          	seqz	s2,s2
    8000daac:	fb0fe06f          	j	8000c25c <tinst_tests_gpf+0xa4c>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000dab0:	701c                	ld	a5,32(s0)
    8000dab2:	e399                	bnez	a5,8000dab8 <tinst_tests_gpf+0x22a8>
    8000dab4:	9b1fe06f          	j	8000c464 <tinst_tests_gpf+0xc54>
    8000dab8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000daba:	0016f713          	andi	a4,a3,1
    8000dabe:	24071763          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dac2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dac6:	460d                	li	a2,3
    8000dac8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dacc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dace:	00c59763          	bne	a1,a2,8000dadc <tinst_tests_gpf+0x22cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dad2:	0026d683          	lhu	a3,2(a3)
    8000dad6:	0106969b          	slliw	a3,a3,0x10
    8000dada:	8f55                	or	a4,a4,a3
    8000dadc:	1ffe16b7          	lui	a3,0x1ffe1
    8000dae0:	068e                	slli	a3,a3,0x3
    8000dae2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dae4:	8f75                	and	a4,a4,a3
    8000dae6:	00e78463          	beq	a5,a4,8000daee <tinst_tests_gpf+0x22de>
    8000daea:	967fe06f          	j	8000c450 <tinst_tests_gpf+0xc40>
    8000daee:	977fe06f          	j	8000c464 <tinst_tests_gpf+0xc54>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000daf2:	7004                	ld	s1,32(s0)
    8000daf4:	64049be3          	bnez	s1,8000e94a <tinst_tests_gpf+0x313a>
    8000daf8:	00019597          	auipc	a1,0x19
    8000dafc:	38858593          	addi	a1,a1,904 # 80026e80 <__func__.0+0x2c0>
    8000db00:	db8fe06f          	j	8000c0b8 <tinst_tests_gpf+0x8a8>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000db04:	701c                	ld	a5,32(s0)
    8000db06:	e399                	bnez	a5,8000db0c <tinst_tests_gpf+0x22fc>
    8000db08:	a13fe06f          	j	8000c51a <tinst_tests_gpf+0xd0a>
    8000db0c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db0e:	0016f713          	andi	a4,a3,1
    8000db12:	1e071d63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000db16:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db1a:	460d                	li	a2,3
    8000db1c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db20:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db22:	00c59763          	bne	a1,a2,8000db30 <tinst_tests_gpf+0x2320>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db26:	0026d683          	lhu	a3,2(a3)
    8000db2a:	0106969b          	slliw	a3,a3,0x10
    8000db2e:	8f55                	or	a4,a4,a3
    8000db30:	1ffe16b7          	lui	a3,0x1ffe1
    8000db34:	068e                	slli	a3,a3,0x3
    8000db36:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db38:	8f75                	and	a4,a4,a3
    8000db3a:	00e78463          	beq	a5,a4,8000db42 <tinst_tests_gpf+0x2332>
    8000db3e:	9c9fe06f          	j	8000c506 <tinst_tests_gpf+0xcf6>
    8000db42:	9d9fe06f          	j	8000c51a <tinst_tests_gpf+0xd0a>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000db46:	02043983          	ld	s3,32(s0)
    8000db4a:	660997e3          	bnez	s3,8000e9b8 <tinst_tests_gpf+0x31a8>
    8000db4e:	00019597          	auipc	a1,0x19
    8000db52:	33258593          	addi	a1,a1,818 # 80026e80 <__func__.0+0x2c0>
    8000db56:	e0cfe06f          	j	8000c162 <tinst_tests_gpf+0x952>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000db5a:	701c                	ld	a5,32(s0)
    8000db5c:	e399                	bnez	a5,8000db62 <tinst_tests_gpf+0x2352>
    8000db5e:	a73fe06f          	j	8000c5d0 <tinst_tests_gpf+0xdc0>
    8000db62:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db64:	0016f713          	andi	a4,a3,1
    8000db68:	1a071263          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000db6c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db70:	460d                	li	a2,3
    8000db72:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db76:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db78:	00c59763          	bne	a1,a2,8000db86 <tinst_tests_gpf+0x2376>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db7c:	0026d683          	lhu	a3,2(a3)
    8000db80:	0106969b          	slliw	a3,a3,0x10
    8000db84:	8f55                	or	a4,a4,a3
    8000db86:	1ffe16b7          	lui	a3,0x1ffe1
    8000db8a:	068e                	slli	a3,a3,0x3
    8000db8c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db8e:	8f75                	and	a4,a4,a3
    8000db90:	00e78463          	beq	a5,a4,8000db98 <tinst_tests_gpf+0x2388>
    8000db94:	a29fe06f          	j	8000c5bc <tinst_tests_gpf+0xdac>
    8000db98:	a39fe06f          	j	8000c5d0 <tinst_tests_gpf+0xdc0>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000db9c:	02043983          	ld	s3,32(s0)
    8000dba0:	6c0994e3          	bnez	s3,8000ea68 <tinst_tests_gpf+0x3258>
    8000dba4:	00019597          	auipc	a1,0x19
    8000dba8:	2dc58593          	addi	a1,a1,732 # 80026e80 <__func__.0+0x2c0>
    8000dbac:	e60fe06f          	j	8000c20c <tinst_tests_gpf+0x9fc>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000dbb0:	701c                	ld	a5,32(s0)
    8000dbb2:	e399                	bnez	a5,8000dbb8 <tinst_tests_gpf+0x23a8>
    8000dbb4:	ac7fe06f          	j	8000c67a <tinst_tests_gpf+0xe6a>
    8000dbb8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbba:	0016f713          	andi	a4,a3,1
    8000dbbe:	14071763          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dbc2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbc6:	460d                	li	a2,3
    8000dbc8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dbcc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dbce:	00c59763          	bne	a1,a2,8000dbdc <tinst_tests_gpf+0x23cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dbd2:	0026d683          	lhu	a3,2(a3)
    8000dbd6:	0106969b          	slliw	a3,a3,0x10
    8000dbda:	8f55                	or	a4,a4,a3
    8000dbdc:	1ffe16b7          	lui	a3,0x1ffe1
    8000dbe0:	068e                	slli	a3,a3,0x3
    8000dbe2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dbe4:	8f75                	and	a4,a4,a3
    8000dbe6:	00e78463          	beq	a5,a4,8000dbee <tinst_tests_gpf+0x23de>
    8000dbea:	a7dfe06f          	j	8000c666 <tinst_tests_gpf+0xe56>
    8000dbee:	a8dfe06f          	j	8000c67a <tinst_tests_gpf+0xe6a>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000dbf2:	7004                	ld	s1,32(s0)
    8000dbf4:	6e0493e3          	bnez	s1,8000eada <tinst_tests_gpf+0x32ca>
    8000dbf8:	00019597          	auipc	a1,0x19
    8000dbfc:	28858593          	addi	a1,a1,648 # 80026e80 <__func__.0+0x2c0>
    8000dc00:	eb6fe06f          	j	8000c2b6 <tinst_tests_gpf+0xaa6>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000dc04:	7018                	ld	a4,32(s0)
    8000dc06:	e319                	bnez	a4,8000dc0c <tinst_tests_gpf+0x23fc>
    8000dc08:	e15fd06f          	j	8000ba1c <tinst_tests_gpf+0x20c>
    8000dc0c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc0e:	0016f793          	andi	a5,a3,1
    8000dc12:	efed                	bnez	a5,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dc14:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc18:	460d                	li	a2,3
    8000dc1a:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000dc1e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000dc20:	00c59763          	bne	a1,a2,8000dc2e <tinst_tests_gpf+0x241e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc24:	0026d683          	lhu	a3,2(a3)
    8000dc28:	0106969b          	slliw	a3,a3,0x10
    8000dc2c:	8fd5                	or	a5,a5,a3
    8000dc2e:	03179913          	slli	s2,a5,0x31
    8000dc32:	03195913          	srli	s2,s2,0x31
    8000dc36:	40e90933          	sub	s2,s2,a4
    8000dc3a:	00193913          	seqz	s2,s2
    8000dc3e:	ddffd06f          	j	8000ba1c <tinst_tests_gpf+0x20c>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000dc42:	7018                	ld	a4,32(s0)
    8000dc44:	e319                	bnez	a4,8000dc4a <tinst_tests_gpf+0x243a>
    8000dc46:	e81fd06f          	j	8000bac6 <tinst_tests_gpf+0x2b6>
    8000dc4a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc4c:	0016f793          	andi	a5,a3,1
    8000dc50:	efd5                	bnez	a5,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dc52:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc56:	460d                	li	a2,3
    8000dc58:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000dc5c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000dc5e:	00c59763          	bne	a1,a2,8000dc6c <tinst_tests_gpf+0x245c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc62:	0026d683          	lhu	a3,2(a3)
    8000dc66:	0106969b          	slliw	a3,a3,0x10
    8000dc6a:	8fd5                	or	a5,a5,a3
    8000dc6c:	03179913          	slli	s2,a5,0x31
    8000dc70:	03195913          	srli	s2,s2,0x31
    8000dc74:	40e90933          	sub	s2,s2,a4
    8000dc78:	00193913          	seqz	s2,s2
    8000dc7c:	e4bfd06f          	j	8000bac6 <tinst_tests_gpf+0x2b6>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000dc80:	7018                	ld	a4,32(s0)
    8000dc82:	e319                	bnez	a4,8000dc88 <tinst_tests_gpf+0x2478>
    8000dc84:	ef9fd06f          	j	8000bb7c <tinst_tests_gpf+0x36c>
    8000dc88:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc8a:	0016f793          	andi	a5,a3,1
    8000dc8e:	efbd                	bnez	a5,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dc90:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc94:	460d                	li	a2,3
    8000dc96:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000dc9a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000dc9c:	00c59763          	bne	a1,a2,8000dcaa <tinst_tests_gpf+0x249a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dca0:	0026d683          	lhu	a3,2(a3)
    8000dca4:	0106969b          	slliw	a3,a3,0x10
    8000dca8:	8fd5                	or	a5,a5,a3
    8000dcaa:	03179913          	slli	s2,a5,0x31
    8000dcae:	03195913          	srli	s2,s2,0x31
    8000dcb2:	40e90933          	sub	s2,s2,a4
    8000dcb6:	00193913          	seqz	s2,s2
    8000dcba:	ec3fd06f          	j	8000bb7c <tinst_tests_gpf+0x36c>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000dcbe:	7018                	ld	a4,32(s0)
    8000dcc0:	e319                	bnez	a4,8000dcc6 <tinst_tests_gpf+0x24b6>
    8000dcc2:	f71fd06f          	j	8000bc32 <tinst_tests_gpf+0x422>
    8000dcc6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dcc8:	0016f793          	andi	a5,a3,1
    8000dccc:	e3a1                	bnez	a5,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dcce:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dcd2:	460d                	li	a2,3
    8000dcd4:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000dcd8:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000dcda:	00c59763          	bne	a1,a2,8000dce8 <tinst_tests_gpf+0x24d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dcde:	0026d683          	lhu	a3,2(a3)
    8000dce2:	0106969b          	slliw	a3,a3,0x10
    8000dce6:	8fd5                	or	a5,a5,a3
    8000dce8:	17c6                	slli	a5,a5,0x31
    8000dcea:	0317d913          	srli	s2,a5,0x31
    8000dcee:	40e90933          	sub	s2,s2,a4
    8000dcf2:	00193913          	seqz	s2,s2
    8000dcf6:	f3dfd06f          	j	8000bc32 <tinst_tests_gpf+0x422>
    8000dcfa:	701c                	ld	a5,32(s0)
    8000dcfc:	e399                	bnez	a5,8000dd02 <tinst_tests_gpf+0x24f2>
    8000dcfe:	f13fd06f          	j	8000bc10 <tinst_tests_gpf+0x400>
    8000dd02:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd04:	0016f713          	andi	a4,a3,1
    8000dd08:	320700e3          	beqz	a4,8000e828 <tinst_tests_gpf+0x3018>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000dd0c:	11400613          	li	a2,276
    8000dd10:	00018597          	auipc	a1,0x18
    8000dd14:	ce058593          	addi	a1,a1,-800 # 800259f0 <__func__.1>
    8000dd18:	0001b517          	auipc	a0,0x1b
    8000dd1c:	b2050513          	addi	a0,a0,-1248 # 80028838 <__func__.0+0x1c78>
    8000dd20:	1e4170ef          	jal	80024f04 <printf>
    8000dd24:	11400613          	li	a2,276
    8000dd28:	00018597          	auipc	a1,0x18
    8000dd2c:	cc858593          	addi	a1,a1,-824 # 800259f0 <__func__.1>
    8000dd30:	00019517          	auipc	a0,0x19
    8000dd34:	2f850513          	addi	a0,a0,760 # 80027028 <__func__.0+0x468>
    8000dd38:	1cc170ef          	jal	80024f04 <printf>
    8000dd3c:	4501                	li	a0,0
    8000dd3e:	685160ef          	jal	80024bc2 <exit>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000dd42:	701c                	ld	a5,32(s0)
    8000dd44:	00019597          	auipc	a1,0x19
    8000dd48:	13c58593          	addi	a1,a1,316 # 80026e80 <__func__.0+0x2c0>
    8000dd4c:	e399                	bnez	a5,8000dd52 <tinst_tests_gpf+0x2542>
    8000dd4e:	a57fe06f          	j	8000c7a4 <tinst_tests_gpf+0xf94>
    8000dd52:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd54:	0016f713          	andi	a4,a3,1
    8000dd58:	fb55                	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dd5a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd5e:	460d                	li	a2,3
    8000dd60:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd64:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd66:	00c59763          	bne	a1,a2,8000dd74 <tinst_tests_gpf+0x2564>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd6a:	0026d683          	lhu	a3,2(a3)
    8000dd6e:	0106969b          	slliw	a3,a3,0x10
    8000dd72:	8f55                	or	a4,a4,a3
    8000dd74:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd78:	068e                	slli	a3,a3,0x3
    8000dd7a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd7c:	8f75                	and	a4,a4,a3
    8000dd7e:	00019597          	auipc	a1,0x19
    8000dd82:	10258593          	addi	a1,a1,258 # 80026e80 <__func__.0+0x2c0>
    8000dd86:	00e79463          	bne	a5,a4,8000dd8e <tinst_tests_gpf+0x257e>
    8000dd8a:	a1bfe06f          	j	8000c7a4 <tinst_tests_gpf+0xf94>
    8000dd8e:	00019597          	auipc	a1,0x19
    8000dd92:	10258593          	addi	a1,a1,258 # 80026e90 <__func__.0+0x2d0>
    8000dd96:	a0ffe06f          	j	8000c7a4 <tinst_tests_gpf+0xf94>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000dd9a:	701c                	ld	a5,32(s0)
    8000dd9c:	e399                	bnez	a5,8000dda2 <tinst_tests_gpf+0x2592>
    8000dd9e:	f29fd06f          	j	8000bcc6 <tinst_tests_gpf+0x4b6>
    8000dda2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dda4:	0016f713          	andi	a4,a3,1
    8000dda8:	f335                	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ddaa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddae:	460d                	li	a2,3
    8000ddb0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddb4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddb6:	00c59763          	bne	a1,a2,8000ddc4 <tinst_tests_gpf+0x25b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ddba:	0026d683          	lhu	a3,2(a3)
    8000ddbe:	0106969b          	slliw	a3,a3,0x10
    8000ddc2:	8f55                	or	a4,a4,a3
    8000ddc4:	1746                	slli	a4,a4,0x31
    8000ddc6:	9345                	srli	a4,a4,0x31
    8000ddc8:	00e78463          	beq	a5,a4,8000ddd0 <tinst_tests_gpf+0x25c0>
    8000ddcc:	ee7fd06f          	j	8000bcb2 <tinst_tests_gpf+0x4a2>
    8000ddd0:	ef7fd06f          	j	8000bcc6 <tinst_tests_gpf+0x4b6>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000ddd4:	701c                	ld	a5,32(s0)
    8000ddd6:	00019597          	auipc	a1,0x19
    8000ddda:	0aa58593          	addi	a1,a1,170 # 80026e80 <__func__.0+0x2c0>
    8000ddde:	e399                	bnez	a5,8000dde4 <tinst_tests_gpf+0x25d4>
    8000dde0:	a7bfe06f          	j	8000c85a <tinst_tests_gpf+0x104a>
    8000dde4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dde6:	0016f713          	andi	a4,a3,1
    8000ddea:	f30d                	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ddec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddf0:	460d                	li	a2,3
    8000ddf2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddf6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddf8:	00c59763          	bne	a1,a2,8000de06 <tinst_tests_gpf+0x25f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ddfc:	0026d683          	lhu	a3,2(a3)
    8000de00:	0106969b          	slliw	a3,a3,0x10
    8000de04:	8f55                	or	a4,a4,a3
    8000de06:	1ffe16b7          	lui	a3,0x1ffe1
    8000de0a:	068e                	slli	a3,a3,0x3
    8000de0c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de0e:	8f75                	and	a4,a4,a3
    8000de10:	00019597          	auipc	a1,0x19
    8000de14:	07058593          	addi	a1,a1,112 # 80026e80 <__func__.0+0x2c0>
    8000de18:	00e79463          	bne	a5,a4,8000de20 <tinst_tests_gpf+0x2610>
    8000de1c:	a3ffe06f          	j	8000c85a <tinst_tests_gpf+0x104a>
    8000de20:	00019597          	auipc	a1,0x19
    8000de24:	07058593          	addi	a1,a1,112 # 80026e90 <__func__.0+0x2d0>
    8000de28:	a33fe06f          	j	8000c85a <tinst_tests_gpf+0x104a>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000de2c:	701c                	ld	a5,32(s0)
    8000de2e:	e399                	bnez	a5,8000de34 <tinst_tests_gpf+0x2624>
    8000de30:	f45fd06f          	j	8000bd74 <tinst_tests_gpf+0x564>
    8000de34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de36:	0016f713          	andi	a4,a3,1
    8000de3a:	ec0719e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000de3e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de42:	460d                	li	a2,3
    8000de44:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de48:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de4a:	00c59763          	bne	a1,a2,8000de58 <tinst_tests_gpf+0x2648>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de4e:	0026d683          	lhu	a3,2(a3)
    8000de52:	0106969b          	slliw	a3,a3,0x10
    8000de56:	8f55                	or	a4,a4,a3
    8000de58:	1746                	slli	a4,a4,0x31
    8000de5a:	9345                	srli	a4,a4,0x31
    8000de5c:	00e78463          	beq	a5,a4,8000de64 <tinst_tests_gpf+0x2654>
    8000de60:	f01fd06f          	j	8000bd60 <tinst_tests_gpf+0x550>
    8000de64:	f11fd06f          	j	8000bd74 <tinst_tests_gpf+0x564>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000de68:	701c                	ld	a5,32(s0)
    8000de6a:	00019597          	auipc	a1,0x19
    8000de6e:	01658593          	addi	a1,a1,22 # 80026e80 <__func__.0+0x2c0>
    8000de72:	e399                	bnez	a5,8000de78 <tinst_tests_gpf+0x2668>
    8000de74:	a9dfe06f          	j	8000c910 <tinst_tests_gpf+0x1100>
    8000de78:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de7a:	0016f713          	andi	a4,a3,1
    8000de7e:	e80717e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000de82:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de86:	460d                	li	a2,3
    8000de88:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de8c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de8e:	00c59763          	bne	a1,a2,8000de9c <tinst_tests_gpf+0x268c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de92:	0026d683          	lhu	a3,2(a3)
    8000de96:	0106969b          	slliw	a3,a3,0x10
    8000de9a:	8f55                	or	a4,a4,a3
    8000de9c:	1ffe16b7          	lui	a3,0x1ffe1
    8000dea0:	068e                	slli	a3,a3,0x3
    8000dea2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dea4:	8f75                	and	a4,a4,a3
    8000dea6:	00019597          	auipc	a1,0x19
    8000deaa:	fda58593          	addi	a1,a1,-38 # 80026e80 <__func__.0+0x2c0>
    8000deae:	00e79463          	bne	a5,a4,8000deb6 <tinst_tests_gpf+0x26a6>
    8000deb2:	a5ffe06f          	j	8000c910 <tinst_tests_gpf+0x1100>
    8000deb6:	00019597          	auipc	a1,0x19
    8000deba:	fda58593          	addi	a1,a1,-38 # 80026e90 <__func__.0+0x2d0>
    8000debe:	a53fe06f          	j	8000c910 <tinst_tests_gpf+0x1100>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000dec2:	701c                	ld	a5,32(s0)
    8000dec4:	e399                	bnez	a5,8000deca <tinst_tests_gpf+0x26ba>
    8000dec6:	f5ffd06f          	j	8000be24 <tinst_tests_gpf+0x614>
    8000deca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000decc:	0016f713          	andi	a4,a3,1
    8000ded0:	e2071ee3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ded4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ded8:	460d                	li	a2,3
    8000deda:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dede:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dee0:	00c59763          	bne	a1,a2,8000deee <tinst_tests_gpf+0x26de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dee4:	0026d683          	lhu	a3,2(a3)
    8000dee8:	0106969b          	slliw	a3,a3,0x10
    8000deec:	8f55                	or	a4,a4,a3
    8000deee:	01f076b7          	lui	a3,0x1f07
    8000def2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000def6:	8f75                	and	a4,a4,a3
    8000def8:	00e78463          	beq	a5,a4,8000df00 <tinst_tests_gpf+0x26f0>
    8000defc:	f15fd06f          	j	8000be10 <tinst_tests_gpf+0x600>
    8000df00:	f25fd06f          	j	8000be24 <tinst_tests_gpf+0x614>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000df04:	701c                	ld	a5,32(s0)
    8000df06:	00019597          	auipc	a1,0x19
    8000df0a:	f7a58593          	addi	a1,a1,-134 # 80026e80 <__func__.0+0x2c0>
    8000df0e:	e399                	bnez	a5,8000df14 <tinst_tests_gpf+0x2704>
    8000df10:	ab7fe06f          	j	8000c9c6 <tinst_tests_gpf+0x11b6>
    8000df14:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df16:	0016f713          	andi	a4,a3,1
    8000df1a:	de0719e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000df1e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df22:	460d                	li	a2,3
    8000df24:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df28:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df2a:	00c59763          	bne	a1,a2,8000df38 <tinst_tests_gpf+0x2728>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df2e:	0026d683          	lhu	a3,2(a3)
    8000df32:	0106969b          	slliw	a3,a3,0x10
    8000df36:	8f55                	or	a4,a4,a3
    8000df38:	1ffe16b7          	lui	a3,0x1ffe1
    8000df3c:	068e                	slli	a3,a3,0x3
    8000df3e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df40:	8f75                	and	a4,a4,a3
    8000df42:	00019597          	auipc	a1,0x19
    8000df46:	f3e58593          	addi	a1,a1,-194 # 80026e80 <__func__.0+0x2c0>
    8000df4a:	00e79463          	bne	a5,a4,8000df52 <tinst_tests_gpf+0x2742>
    8000df4e:	a79fe06f          	j	8000c9c6 <tinst_tests_gpf+0x11b6>
    8000df52:	00019597          	auipc	a1,0x19
    8000df56:	f3e58593          	addi	a1,a1,-194 # 80026e90 <__func__.0+0x2d0>
    8000df5a:	a6dfe06f          	j	8000c9c6 <tinst_tests_gpf+0x11b6>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000df5e:	701c                	ld	a5,32(s0)
    8000df60:	e399                	bnez	a5,8000df66 <tinst_tests_gpf+0x2756>
    8000df62:	f77fd06f          	j	8000bed8 <tinst_tests_gpf+0x6c8>
    8000df66:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df68:	0016f713          	andi	a4,a3,1
    8000df6c:	da0710e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000df70:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df74:	460d                	li	a2,3
    8000df76:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df7a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df7c:	00c59763          	bne	a1,a2,8000df8a <tinst_tests_gpf+0x277a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df80:	0026d683          	lhu	a3,2(a3)
    8000df84:	0106969b          	slliw	a3,a3,0x10
    8000df88:	8f55                	or	a4,a4,a3
    8000df8a:	01f076b7          	lui	a3,0x1f07
    8000df8e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000df92:	8f75                	and	a4,a4,a3
    8000df94:	00e78463          	beq	a5,a4,8000df9c <tinst_tests_gpf+0x278c>
    8000df98:	f2dfd06f          	j	8000bec4 <tinst_tests_gpf+0x6b4>
    8000df9c:	f3dfd06f          	j	8000bed8 <tinst_tests_gpf+0x6c8>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000dfa0:	701c                	ld	a5,32(s0)
    8000dfa2:	00019597          	auipc	a1,0x19
    8000dfa6:	ede58593          	addi	a1,a1,-290 # 80026e80 <__func__.0+0x2c0>
    8000dfaa:	e399                	bnez	a5,8000dfb0 <tinst_tests_gpf+0x27a0>
    8000dfac:	ad5fe06f          	j	8000ca80 <tinst_tests_gpf+0x1270>
    8000dfb0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dfb2:	0016f713          	andi	a4,a3,1
    8000dfb6:	d4071be3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000dfba:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dfbe:	460d                	li	a2,3
    8000dfc0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfc4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfc6:	00c59763          	bne	a1,a2,8000dfd4 <tinst_tests_gpf+0x27c4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfca:	0026d683          	lhu	a3,2(a3)
    8000dfce:	0106969b          	slliw	a3,a3,0x10
    8000dfd2:	8f55                	or	a4,a4,a3
    8000dfd4:	1ffe16b7          	lui	a3,0x1ffe1
    8000dfd8:	068e                	slli	a3,a3,0x3
    8000dfda:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dfdc:	8f75                	and	a4,a4,a3
    8000dfde:	00019597          	auipc	a1,0x19
    8000dfe2:	ea258593          	addi	a1,a1,-350 # 80026e80 <__func__.0+0x2c0>
    8000dfe6:	00e79463          	bne	a5,a4,8000dfee <tinst_tests_gpf+0x27de>
    8000dfea:	a97fe06f          	j	8000ca80 <tinst_tests_gpf+0x1270>
    8000dfee:	00019597          	auipc	a1,0x19
    8000dff2:	ea258593          	addi	a1,a1,-350 # 80026e90 <__func__.0+0x2d0>
    8000dff6:	a8bfe06f          	j	8000ca80 <tinst_tests_gpf+0x1270>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000dffa:	701c                	ld	a5,32(s0)
    8000dffc:	e399                	bnez	a5,8000e002 <tinst_tests_gpf+0x27f2>
    8000dffe:	f91fd06f          	j	8000bf8e <tinst_tests_gpf+0x77e>
    8000e002:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e004:	0016f713          	andi	a4,a3,1
    8000e008:	d00712e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e00c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e010:	460d                	li	a2,3
    8000e012:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e016:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e018:	00c59763          	bne	a1,a2,8000e026 <tinst_tests_gpf+0x2816>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e01c:	0026d683          	lhu	a3,2(a3)
    8000e020:	0106969b          	slliw	a3,a3,0x10
    8000e024:	8f55                	or	a4,a4,a3
    8000e026:	01f076b7          	lui	a3,0x1f07
    8000e02a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000e02e:	8f75                	and	a4,a4,a3
    8000e030:	00e78463          	beq	a5,a4,8000e038 <tinst_tests_gpf+0x2828>
    8000e034:	f47fd06f          	j	8000bf7a <tinst_tests_gpf+0x76a>
    8000e038:	f57fd06f          	j	8000bf8e <tinst_tests_gpf+0x77e>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e03c:	701c                	ld	a5,32(s0)
    8000e03e:	00019597          	auipc	a1,0x19
    8000e042:	e4258593          	addi	a1,a1,-446 # 80026e80 <__func__.0+0x2c0>
    8000e046:	e399                	bnez	a5,8000e04c <tinst_tests_gpf+0x283c>
    8000e048:	aeffe06f          	j	8000cb36 <tinst_tests_gpf+0x1326>
    8000e04c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e04e:	0016f713          	andi	a4,a3,1
    8000e052:	ca071de3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e056:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e05a:	460d                	li	a2,3
    8000e05c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e060:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e062:	00c59763          	bne	a1,a2,8000e070 <tinst_tests_gpf+0x2860>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e066:	0026d683          	lhu	a3,2(a3)
    8000e06a:	0106969b          	slliw	a3,a3,0x10
    8000e06e:	8f55                	or	a4,a4,a3
    8000e070:	1ffe16b7          	lui	a3,0x1ffe1
    8000e074:	068e                	slli	a3,a3,0x3
    8000e076:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e078:	8f75                	and	a4,a4,a3
    8000e07a:	00019597          	auipc	a1,0x19
    8000e07e:	e0658593          	addi	a1,a1,-506 # 80026e80 <__func__.0+0x2c0>
    8000e082:	00e79463          	bne	a5,a4,8000e08a <tinst_tests_gpf+0x287a>
    8000e086:	ab1fe06f          	j	8000cb36 <tinst_tests_gpf+0x1326>
    8000e08a:	00019597          	auipc	a1,0x19
    8000e08e:	e0658593          	addi	a1,a1,-506 # 80026e90 <__func__.0+0x2d0>
    8000e092:	aa5fe06f          	j	8000cb36 <tinst_tests_gpf+0x1326>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000e096:	701c                	ld	a5,32(s0)
    8000e098:	e399                	bnez	a5,8000e09e <tinst_tests_gpf+0x288e>
    8000e09a:	fadfd06f          	j	8000c046 <tinst_tests_gpf+0x836>
    8000e09e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e0a0:	0016f713          	andi	a4,a3,1
    8000e0a4:	c60714e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e0a8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0ac:	460d                	li	a2,3
    8000e0ae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e0b2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e0b4:	00c59763          	bne	a1,a2,8000e0c2 <tinst_tests_gpf+0x28b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e0b8:	0026d683          	lhu	a3,2(a3)
    8000e0bc:	0106969b          	slliw	a3,a3,0x10
    8000e0c0:	8f55                	or	a4,a4,a3
    8000e0c2:	01f076b7          	lui	a3,0x1f07
    8000e0c6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000e0ca:	8f75                	and	a4,a4,a3
    8000e0cc:	00e78463          	beq	a5,a4,8000e0d4 <tinst_tests_gpf+0x28c4>
    8000e0d0:	f63fd06f          	j	8000c032 <tinst_tests_gpf+0x822>
    8000e0d4:	f73fd06f          	j	8000c046 <tinst_tests_gpf+0x836>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e0d8:	701c                	ld	a5,32(s0)
    8000e0da:	00019597          	auipc	a1,0x19
    8000e0de:	da658593          	addi	a1,a1,-602 # 80026e80 <__func__.0+0x2c0>
    8000e0e2:	e399                	bnez	a5,8000e0e8 <tinst_tests_gpf+0x28d8>
    8000e0e4:	b09fe06f          	j	8000cbec <tinst_tests_gpf+0x13dc>
    8000e0e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e0ea:	0016f713          	andi	a4,a3,1
    8000e0ee:	c0071fe3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e0f2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0f6:	460d                	li	a2,3
    8000e0f8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e0fc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e0fe:	00c59763          	bne	a1,a2,8000e10c <tinst_tests_gpf+0x28fc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e102:	0026d683          	lhu	a3,2(a3)
    8000e106:	0106969b          	slliw	a3,a3,0x10
    8000e10a:	8f55                	or	a4,a4,a3
    8000e10c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e110:	068e                	slli	a3,a3,0x3
    8000e112:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e114:	8f75                	and	a4,a4,a3
    8000e116:	00019597          	auipc	a1,0x19
    8000e11a:	d6a58593          	addi	a1,a1,-662 # 80026e80 <__func__.0+0x2c0>
    8000e11e:	00e79463          	bne	a5,a4,8000e126 <tinst_tests_gpf+0x2916>
    8000e122:	acbfe06f          	j	8000cbec <tinst_tests_gpf+0x13dc>
    8000e126:	00019597          	auipc	a1,0x19
    8000e12a:	d6a58593          	addi	a1,a1,-662 # 80026e90 <__func__.0+0x2d0>
    8000e12e:	abffe06f          	j	8000cbec <tinst_tests_gpf+0x13dc>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e132:	7004                	ld	s1,32(s0)
    8000e134:	e099                	bnez	s1,8000e13a <tinst_tests_gpf+0x292a>
    8000e136:	fb9fd06f          	j	8000c0ee <tinst_tests_gpf+0x8de>
    8000e13a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e13c:	0017f713          	andi	a4,a5,1
    8000e140:	bc0716e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e144:	0007d503          	lhu	a0,0(a5)
    8000e148:	a80f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000e14c:	67a1                	lui	a5,0x8
    8000e14e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e150:	8d7d                	and	a0,a0,a5
    8000e152:	00a48463          	beq	s1,a0,8000e15a <tinst_tests_gpf+0x294a>
    8000e156:	f85fd06f          	j	8000c0da <tinst_tests_gpf+0x8ca>
    8000e15a:	f95fd06f          	j	8000c0ee <tinst_tests_gpf+0x8de>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e15e:	701c                	ld	a5,32(s0)
    8000e160:	00019597          	auipc	a1,0x19
    8000e164:	d2058593          	addi	a1,a1,-736 # 80026e80 <__func__.0+0x2c0>
    8000e168:	e399                	bnez	a5,8000e16e <tinst_tests_gpf+0x295e>
    8000e16a:	b39fe06f          	j	8000cca2 <tinst_tests_gpf+0x1492>
    8000e16e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e170:	0016f713          	andi	a4,a3,1
    8000e174:	b8071ce3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e178:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e17c:	460d                	li	a2,3
    8000e17e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e182:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e184:	00c59763          	bne	a1,a2,8000e192 <tinst_tests_gpf+0x2982>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e188:	0026d683          	lhu	a3,2(a3)
    8000e18c:	0106969b          	slliw	a3,a3,0x10
    8000e190:	8f55                	or	a4,a4,a3
    8000e192:	1ffe16b7          	lui	a3,0x1ffe1
    8000e196:	068e                	slli	a3,a3,0x3
    8000e198:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e19a:	8f75                	and	a4,a4,a3
    8000e19c:	00019597          	auipc	a1,0x19
    8000e1a0:	ce458593          	addi	a1,a1,-796 # 80026e80 <__func__.0+0x2c0>
    8000e1a4:	00e79463          	bne	a5,a4,8000e1ac <tinst_tests_gpf+0x299c>
    8000e1a8:	afbfe06f          	j	8000cca2 <tinst_tests_gpf+0x1492>
    8000e1ac:	00019597          	auipc	a1,0x19
    8000e1b0:	ce458593          	addi	a1,a1,-796 # 80026e90 <__func__.0+0x2d0>
    8000e1b4:	aeffe06f          	j	8000cca2 <tinst_tests_gpf+0x1492>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000e1b8:	02043983          	ld	s3,32(s0)
    8000e1bc:	00099463          	bnez	s3,8000e1c4 <tinst_tests_gpf+0x29b4>
    8000e1c0:	fd9fd06f          	j	8000c198 <tinst_tests_gpf+0x988>
    8000e1c4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e1c6:	0017f713          	andi	a4,a5,1
    8000e1ca:	b40711e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e1ce:	0007d503          	lhu	a0,0(a5)
    8000e1d2:	9f6f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000e1d6:	67a1                	lui	a5,0x8
    8000e1d8:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e1da:	8d7d                	and	a0,a0,a5
    8000e1dc:	00a98463          	beq	s3,a0,8000e1e4 <tinst_tests_gpf+0x29d4>
    8000e1e0:	fa5fd06f          	j	8000c184 <tinst_tests_gpf+0x974>
    8000e1e4:	fb5fd06f          	j	8000c198 <tinst_tests_gpf+0x988>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e1e8:	701c                	ld	a5,32(s0)
    8000e1ea:	00019597          	auipc	a1,0x19
    8000e1ee:	c9658593          	addi	a1,a1,-874 # 80026e80 <__func__.0+0x2c0>
    8000e1f2:	e399                	bnez	a5,8000e1f8 <tinst_tests_gpf+0x29e8>
    8000e1f4:	b65fe06f          	j	8000cd58 <tinst_tests_gpf+0x1548>
    8000e1f8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e1fa:	0016f713          	andi	a4,a3,1
    8000e1fe:	b00717e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e202:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e206:	460d                	li	a2,3
    8000e208:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e20c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e20e:	00c59763          	bne	a1,a2,8000e21c <tinst_tests_gpf+0x2a0c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e212:	0026d683          	lhu	a3,2(a3)
    8000e216:	0106969b          	slliw	a3,a3,0x10
    8000e21a:	8f55                	or	a4,a4,a3
    8000e21c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e220:	068e                	slli	a3,a3,0x3
    8000e222:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e224:	8f75                	and	a4,a4,a3
    8000e226:	00019597          	auipc	a1,0x19
    8000e22a:	c5a58593          	addi	a1,a1,-934 # 80026e80 <__func__.0+0x2c0>
    8000e22e:	00e79463          	bne	a5,a4,8000e236 <tinst_tests_gpf+0x2a26>
    8000e232:	b27fe06f          	j	8000cd58 <tinst_tests_gpf+0x1548>
    8000e236:	00019597          	auipc	a1,0x19
    8000e23a:	c5a58593          	addi	a1,a1,-934 # 80026e90 <__func__.0+0x2d0>
    8000e23e:	b1bfe06f          	j	8000cd58 <tinst_tests_gpf+0x1548>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e242:	02043983          	ld	s3,32(s0)
    8000e246:	00099463          	bnez	s3,8000e24e <tinst_tests_gpf+0x2a3e>
    8000e24a:	ff9fd06f          	j	8000c242 <tinst_tests_gpf+0xa32>
    8000e24e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e250:	0017f713          	andi	a4,a5,1
    8000e254:	aa071ce3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e258:	0007d503          	lhu	a0,0(a5)
    8000e25c:	96cf30ef          	jal	800013c8 <expand_compressed_instruction>
    8000e260:	01f077b7          	lui	a5,0x1f07
    8000e264:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e268:	8d7d                	and	a0,a0,a5
    8000e26a:	00a98463          	beq	s3,a0,8000e272 <tinst_tests_gpf+0x2a62>
    8000e26e:	fc1fd06f          	j	8000c22e <tinst_tests_gpf+0xa1e>
    8000e272:	fd1fd06f          	j	8000c242 <tinst_tests_gpf+0xa32>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000e276:	701c                	ld	a5,32(s0)
    8000e278:	00019597          	auipc	a1,0x19
    8000e27c:	c0858593          	addi	a1,a1,-1016 # 80026e80 <__func__.0+0x2c0>
    8000e280:	e399                	bnez	a5,8000e286 <tinst_tests_gpf+0x2a76>
    8000e282:	b8dfe06f          	j	8000ce0e <tinst_tests_gpf+0x15fe>
    8000e286:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e288:	0016f713          	andi	a4,a3,1
    8000e28c:	a80710e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e290:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e294:	460d                	li	a2,3
    8000e296:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e29a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e29c:	00c59763          	bne	a1,a2,8000e2aa <tinst_tests_gpf+0x2a9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e2a0:	0026d683          	lhu	a3,2(a3)
    8000e2a4:	0106969b          	slliw	a3,a3,0x10
    8000e2a8:	8f55                	or	a4,a4,a3
    8000e2aa:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2ae:	068e                	slli	a3,a3,0x3
    8000e2b0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e2b2:	8f75                	and	a4,a4,a3
    8000e2b4:	00019597          	auipc	a1,0x19
    8000e2b8:	bcc58593          	addi	a1,a1,-1076 # 80026e80 <__func__.0+0x2c0>
    8000e2bc:	00e79463          	bne	a5,a4,8000e2c4 <tinst_tests_gpf+0x2ab4>
    8000e2c0:	b4ffe06f          	j	8000ce0e <tinst_tests_gpf+0x15fe>
    8000e2c4:	00019597          	auipc	a1,0x19
    8000e2c8:	bcc58593          	addi	a1,a1,-1076 # 80026e90 <__func__.0+0x2d0>
    8000e2cc:	b43fe06f          	j	8000ce0e <tinst_tests_gpf+0x15fe>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e2d0:	7004                	ld	s1,32(s0)
    8000e2d2:	e099                	bnez	s1,8000e2d8 <tinst_tests_gpf+0x2ac8>
    8000e2d4:	818fe06f          	j	8000c2ec <tinst_tests_gpf+0xadc>
    8000e2d8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e2da:	0017f713          	andi	a4,a5,1
    8000e2de:	a20717e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e2e2:	0007d503          	lhu	a0,0(a5)
    8000e2e6:	8e2f30ef          	jal	800013c8 <expand_compressed_instruction>
    8000e2ea:	01f077b7          	lui	a5,0x1f07
    8000e2ee:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e2f2:	8d7d                	and	a0,a0,a5
    8000e2f4:	00a48463          	beq	s1,a0,8000e2fc <tinst_tests_gpf+0x2aec>
    8000e2f8:	fe1fd06f          	j	8000c2d8 <tinst_tests_gpf+0xac8>
    8000e2fc:	ff1fd06f          	j	8000c2ec <tinst_tests_gpf+0xadc>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e300:	701c                	ld	a5,32(s0)
    8000e302:	00019597          	auipc	a1,0x19
    8000e306:	b7e58593          	addi	a1,a1,-1154 # 80026e80 <__func__.0+0x2c0>
    8000e30a:	e399                	bnez	a5,8000e310 <tinst_tests_gpf+0x2b00>
    8000e30c:	bb9fe06f          	j	8000cec4 <tinst_tests_gpf+0x16b4>
    8000e310:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e312:	0016f713          	andi	a4,a3,1
    8000e316:	9e071be3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e31a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e31e:	460d                	li	a2,3
    8000e320:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e324:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e326:	00c59763          	bne	a1,a2,8000e334 <tinst_tests_gpf+0x2b24>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e32a:	0026d683          	lhu	a3,2(a3)
    8000e32e:	0106969b          	slliw	a3,a3,0x10
    8000e332:	8f55                	or	a4,a4,a3
    8000e334:	1ffe16b7          	lui	a3,0x1ffe1
    8000e338:	068e                	slli	a3,a3,0x3
    8000e33a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e33c:	8f75                	and	a4,a4,a3
    8000e33e:	00019597          	auipc	a1,0x19
    8000e342:	b4258593          	addi	a1,a1,-1214 # 80026e80 <__func__.0+0x2c0>
    8000e346:	00e79463          	bne	a5,a4,8000e34e <tinst_tests_gpf+0x2b3e>
    8000e34a:	b7bfe06f          	j	8000cec4 <tinst_tests_gpf+0x16b4>
    8000e34e:	00019597          	auipc	a1,0x19
    8000e352:	b4258593          	addi	a1,a1,-1214 # 80026e90 <__func__.0+0x2d0>
    8000e356:	b6ffe06f          	j	8000cec4 <tinst_tests_gpf+0x16b4>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000e35a:	701c                	ld	a5,32(s0)
    8000e35c:	e399                	bnez	a5,8000e362 <tinst_tests_gpf+0x2b52>
    8000e35e:	84afe06f          	j	8000c3a8 <tinst_tests_gpf+0xb98>
    8000e362:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e364:	0016f713          	andi	a4,a3,1
    8000e368:	9a0712e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e36c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e370:	460d                	li	a2,3
    8000e372:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e376:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e378:	00c59763          	bne	a1,a2,8000e386 <tinst_tests_gpf+0x2b76>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e37c:	0026d683          	lhu	a3,2(a3)
    8000e380:	0106969b          	slliw	a3,a3,0x10
    8000e384:	8f55                	or	a4,a4,a3
    8000e386:	1ffe16b7          	lui	a3,0x1ffe1
    8000e38a:	068e                	slli	a3,a3,0x3
    8000e38c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e38e:	8f75                	and	a4,a4,a3
    8000e390:	00e78463          	beq	a5,a4,8000e398 <tinst_tests_gpf+0x2b88>
    8000e394:	800fe06f          	j	8000c394 <tinst_tests_gpf+0xb84>
    8000e398:	810fe06f          	j	8000c3a8 <tinst_tests_gpf+0xb98>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e39c:	701c                	ld	a5,32(s0)
    8000e39e:	00019597          	auipc	a1,0x19
    8000e3a2:	ae258593          	addi	a1,a1,-1310 # 80026e80 <__func__.0+0x2c0>
    8000e3a6:	e399                	bnez	a5,8000e3ac <tinst_tests_gpf+0x2b9c>
    8000e3a8:	bcbfe06f          	j	8000cf72 <tinst_tests_gpf+0x1762>
    8000e3ac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3ae:	0016f713          	andi	a4,a3,1
    8000e3b2:	94071de3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e3b6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3ba:	460d                	li	a2,3
    8000e3bc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3c0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3c2:	00c59763          	bne	a1,a2,8000e3d0 <tinst_tests_gpf+0x2bc0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3c6:	0026d683          	lhu	a3,2(a3)
    8000e3ca:	0106969b          	slliw	a3,a3,0x10
    8000e3ce:	8f55                	or	a4,a4,a3
    8000e3d0:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3d4:	068e                	slli	a3,a3,0x3
    8000e3d6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3d8:	8f75                	and	a4,a4,a3
    8000e3da:	00019597          	auipc	a1,0x19
    8000e3de:	aa658593          	addi	a1,a1,-1370 # 80026e80 <__func__.0+0x2c0>
    8000e3e2:	00e79463          	bne	a5,a4,8000e3ea <tinst_tests_gpf+0x2bda>
    8000e3e6:	b8dfe06f          	j	8000cf72 <tinst_tests_gpf+0x1762>
    8000e3ea:	00019597          	auipc	a1,0x19
    8000e3ee:	aa658593          	addi	a1,a1,-1370 # 80026e90 <__func__.0+0x2d0>
    8000e3f2:	b81fe06f          	j	8000cf72 <tinst_tests_gpf+0x1762>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e3f6:	701c                	ld	a5,32(s0)
    8000e3f8:	00019597          	auipc	a1,0x19
    8000e3fc:	a8858593          	addi	a1,a1,-1400 # 80026e80 <__func__.0+0x2c0>
    8000e400:	e399                	bnez	a5,8000e406 <tinst_tests_gpf+0x2bf6>
    8000e402:	c1ffe06f          	j	8000d020 <tinst_tests_gpf+0x1810>
    8000e406:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e408:	0016f713          	andi	a4,a3,1
    8000e40c:	900710e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e410:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e414:	460d                	li	a2,3
    8000e416:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e41a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e41c:	00c59763          	bne	a1,a2,8000e42a <tinst_tests_gpf+0x2c1a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e420:	0026d683          	lhu	a3,2(a3)
    8000e424:	0106969b          	slliw	a3,a3,0x10
    8000e428:	8f55                	or	a4,a4,a3
    8000e42a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e42e:	068e                	slli	a3,a3,0x3
    8000e430:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e432:	8f75                	and	a4,a4,a3
    8000e434:	00019597          	auipc	a1,0x19
    8000e438:	a4c58593          	addi	a1,a1,-1460 # 80026e80 <__func__.0+0x2c0>
    8000e43c:	00e79463          	bne	a5,a4,8000e444 <tinst_tests_gpf+0x2c34>
    8000e440:	be1fe06f          	j	8000d020 <tinst_tests_gpf+0x1810>
    8000e444:	00019597          	auipc	a1,0x19
    8000e448:	a4c58593          	addi	a1,a1,-1460 # 80026e90 <__func__.0+0x2d0>
    8000e44c:	bd5fe06f          	j	8000d020 <tinst_tests_gpf+0x1810>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000e450:	701c                	ld	a5,32(s0)
    8000e452:	00019597          	auipc	a1,0x19
    8000e456:	a2e58593          	addi	a1,a1,-1490 # 80026e80 <__func__.0+0x2c0>
    8000e45a:	e399                	bnez	a5,8000e460 <tinst_tests_gpf+0x2c50>
    8000e45c:	c73fe06f          	j	8000d0ce <tinst_tests_gpf+0x18be>
    8000e460:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e462:	0016f713          	andi	a4,a3,1
    8000e466:	8a0713e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e46a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e46e:	460d                	li	a2,3
    8000e470:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e474:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e476:	00c59763          	bne	a1,a2,8000e484 <tinst_tests_gpf+0x2c74>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e47a:	0026d683          	lhu	a3,2(a3)
    8000e47e:	0106969b          	slliw	a3,a3,0x10
    8000e482:	8f55                	or	a4,a4,a3
    8000e484:	1ffe16b7          	lui	a3,0x1ffe1
    8000e488:	068e                	slli	a3,a3,0x3
    8000e48a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e48c:	8f75                	and	a4,a4,a3
    8000e48e:	00019597          	auipc	a1,0x19
    8000e492:	9f258593          	addi	a1,a1,-1550 # 80026e80 <__func__.0+0x2c0>
    8000e496:	00e79463          	bne	a5,a4,8000e49e <tinst_tests_gpf+0x2c8e>
    8000e49a:	c35fe06f          	j	8000d0ce <tinst_tests_gpf+0x18be>
    8000e49e:	00019597          	auipc	a1,0x19
    8000e4a2:	9f258593          	addi	a1,a1,-1550 # 80026e90 <__func__.0+0x2d0>
    8000e4a6:	c29fe06f          	j	8000d0ce <tinst_tests_gpf+0x18be>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000e4aa:	701c                	ld	a5,32(s0)
    8000e4ac:	e399                	bnez	a5,8000e4b2 <tinst_tests_gpf+0x2ca2>
    8000e4ae:	a76fe06f          	j	8000c724 <tinst_tests_gpf+0xf14>
    8000e4b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4b4:	0016f713          	andi	a4,a3,1
    8000e4b8:	84071ae3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e4bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4c0:	460d                	li	a2,3
    8000e4c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e4c8:	00c59763          	bne	a1,a2,8000e4d6 <tinst_tests_gpf+0x2cc6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4cc:	0026d683          	lhu	a3,2(a3)
    8000e4d0:	0106969b          	slliw	a3,a3,0x10
    8000e4d4:	8f55                	or	a4,a4,a3
    8000e4d6:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4da:	068e                	slli	a3,a3,0x3
    8000e4dc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e4de:	8f75                	and	a4,a4,a3
    8000e4e0:	00e78463          	beq	a5,a4,8000e4e8 <tinst_tests_gpf+0x2cd8>
    8000e4e4:	a2cfe06f          	j	8000c710 <tinst_tests_gpf+0xf00>
    8000e4e8:	a3cfe06f          	j	8000c724 <tinst_tests_gpf+0xf14>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000e4ec:	701c                	ld	a5,32(s0)
    8000e4ee:	e399                	bnez	a5,8000e4f4 <tinst_tests_gpf+0x2ce4>
    8000e4f0:	aeafe06f          	j	8000c7da <tinst_tests_gpf+0xfca>
    8000e4f4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4f6:	0016f713          	andi	a4,a3,1
    8000e4fa:	800719e3          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e4fe:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e502:	460d                	li	a2,3
    8000e504:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e508:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e50a:	00c59763          	bne	a1,a2,8000e518 <tinst_tests_gpf+0x2d08>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e50e:	0026d683          	lhu	a3,2(a3)
    8000e512:	0106969b          	slliw	a3,a3,0x10
    8000e516:	8f55                	or	a4,a4,a3
    8000e518:	1ffe16b7          	lui	a3,0x1ffe1
    8000e51c:	068e                	slli	a3,a3,0x3
    8000e51e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e520:	8f75                	and	a4,a4,a3
    8000e522:	00e78463          	beq	a5,a4,8000e52a <tinst_tests_gpf+0x2d1a>
    8000e526:	aa0fe06f          	j	8000c7c6 <tinst_tests_gpf+0xfb6>
    8000e52a:	ab0fe06f          	j	8000c7da <tinst_tests_gpf+0xfca>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000e52e:	701c                	ld	a5,32(s0)
    8000e530:	e399                	bnez	a5,8000e536 <tinst_tests_gpf+0x2d26>
    8000e532:	b5efe06f          	j	8000c890 <tinst_tests_gpf+0x1080>
    8000e536:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e538:	0016f713          	andi	a4,a3,1
    8000e53c:	fc071863          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e540:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e544:	460d                	li	a2,3
    8000e546:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e54a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e54c:	00c59763          	bne	a1,a2,8000e55a <tinst_tests_gpf+0x2d4a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e550:	0026d683          	lhu	a3,2(a3)
    8000e554:	0106969b          	slliw	a3,a3,0x10
    8000e558:	8f55                	or	a4,a4,a3
    8000e55a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e55e:	068e                	slli	a3,a3,0x3
    8000e560:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e562:	8f75                	and	a4,a4,a3
    8000e564:	00e78463          	beq	a5,a4,8000e56c <tinst_tests_gpf+0x2d5c>
    8000e568:	b14fe06f          	j	8000c87c <tinst_tests_gpf+0x106c>
    8000e56c:	b24fe06f          	j	8000c890 <tinst_tests_gpf+0x1080>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000e570:	701c                	ld	a5,32(s0)
    8000e572:	e399                	bnez	a5,8000e578 <tinst_tests_gpf+0x2d68>
    8000e574:	bd2fe06f          	j	8000c946 <tinst_tests_gpf+0x1136>
    8000e578:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e57a:	0016f713          	andi	a4,a3,1
    8000e57e:	f8071763          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e582:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e586:	460d                	li	a2,3
    8000e588:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e58c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e58e:	00c59763          	bne	a1,a2,8000e59c <tinst_tests_gpf+0x2d8c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e592:	0026d683          	lhu	a3,2(a3)
    8000e596:	0106969b          	slliw	a3,a3,0x10
    8000e59a:	8f55                	or	a4,a4,a3
    8000e59c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e5a0:	068e                	slli	a3,a3,0x3
    8000e5a2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5a4:	8f75                	and	a4,a4,a3
    8000e5a6:	00e78463          	beq	a5,a4,8000e5ae <tinst_tests_gpf+0x2d9e>
    8000e5aa:	b88fe06f          	j	8000c932 <tinst_tests_gpf+0x1122>
    8000e5ae:	b98fe06f          	j	8000c946 <tinst_tests_gpf+0x1136>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000e5b2:	701c                	ld	a5,32(s0)
    8000e5b4:	e399                	bnez	a5,8000e5ba <tinst_tests_gpf+0x2daa>
    8000e5b6:	c46fe06f          	j	8000c9fc <tinst_tests_gpf+0x11ec>
    8000e5ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e5bc:	0016f713          	andi	a4,a3,1
    8000e5c0:	f4071663          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e5c4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e5c8:	460d                	li	a2,3
    8000e5ca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e5ce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e5d0:	00c59763          	bne	a1,a2,8000e5de <tinst_tests_gpf+0x2dce>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e5d4:	0026d683          	lhu	a3,2(a3)
    8000e5d8:	0106969b          	slliw	a3,a3,0x10
    8000e5dc:	8f55                	or	a4,a4,a3
    8000e5de:	1ffe16b7          	lui	a3,0x1ffe1
    8000e5e2:	068e                	slli	a3,a3,0x3
    8000e5e4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5e6:	8f75                	and	a4,a4,a3
    8000e5e8:	00e78463          	beq	a5,a4,8000e5f0 <tinst_tests_gpf+0x2de0>
    8000e5ec:	bfcfe06f          	j	8000c9e8 <tinst_tests_gpf+0x11d8>
    8000e5f0:	c0cfe06f          	j	8000c9fc <tinst_tests_gpf+0x11ec>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000e5f4:	701c                	ld	a5,32(s0)
    8000e5f6:	e399                	bnez	a5,8000e5fc <tinst_tests_gpf+0x2dec>
    8000e5f8:	cbefe06f          	j	8000cab6 <tinst_tests_gpf+0x12a6>
    8000e5fc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e5fe:	0016f713          	andi	a4,a3,1
    8000e602:	f0071563          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e606:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e60a:	460d                	li	a2,3
    8000e60c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e610:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e612:	00c59763          	bne	a1,a2,8000e620 <tinst_tests_gpf+0x2e10>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e616:	0026d683          	lhu	a3,2(a3)
    8000e61a:	0106969b          	slliw	a3,a3,0x10
    8000e61e:	8f55                	or	a4,a4,a3
    8000e620:	1ffe16b7          	lui	a3,0x1ffe1
    8000e624:	068e                	slli	a3,a3,0x3
    8000e626:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e628:	8f75                	and	a4,a4,a3
    8000e62a:	00e78463          	beq	a5,a4,8000e632 <tinst_tests_gpf+0x2e22>
    8000e62e:	c74fe06f          	j	8000caa2 <tinst_tests_gpf+0x1292>
    8000e632:	c84fe06f          	j	8000cab6 <tinst_tests_gpf+0x12a6>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e636:	701c                	ld	a5,32(s0)
    8000e638:	e399                	bnez	a5,8000e63e <tinst_tests_gpf+0x2e2e>
    8000e63a:	d32fe06f          	j	8000cb6c <tinst_tests_gpf+0x135c>
    8000e63e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e640:	0016f713          	andi	a4,a3,1
    8000e644:	ec071463          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e648:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e64c:	460d                	li	a2,3
    8000e64e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e652:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e654:	00c59763          	bne	a1,a2,8000e662 <tinst_tests_gpf+0x2e52>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e658:	0026d683          	lhu	a3,2(a3)
    8000e65c:	0106969b          	slliw	a3,a3,0x10
    8000e660:	8f55                	or	a4,a4,a3
    8000e662:	1ffe16b7          	lui	a3,0x1ffe1
    8000e666:	068e                	slli	a3,a3,0x3
    8000e668:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e66a:	8f75                	and	a4,a4,a3
    8000e66c:	00e78463          	beq	a5,a4,8000e674 <tinst_tests_gpf+0x2e64>
    8000e670:	ce8fe06f          	j	8000cb58 <tinst_tests_gpf+0x1348>
    8000e674:	cf8fe06f          	j	8000cb6c <tinst_tests_gpf+0x135c>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e678:	701c                	ld	a5,32(s0)
    8000e67a:	e399                	bnez	a5,8000e680 <tinst_tests_gpf+0x2e70>
    8000e67c:	da6fe06f          	j	8000cc22 <tinst_tests_gpf+0x1412>
    8000e680:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e682:	0016f713          	andi	a4,a3,1
    8000e686:	e8071363          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e68a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e68e:	460d                	li	a2,3
    8000e690:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e694:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e696:	00c59763          	bne	a1,a2,8000e6a4 <tinst_tests_gpf+0x2e94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e69a:	0026d683          	lhu	a3,2(a3)
    8000e69e:	0106969b          	slliw	a3,a3,0x10
    8000e6a2:	8f55                	or	a4,a4,a3
    8000e6a4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e6a8:	068e                	slli	a3,a3,0x3
    8000e6aa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e6ac:	8f75                	and	a4,a4,a3
    8000e6ae:	00e78463          	beq	a5,a4,8000e6b6 <tinst_tests_gpf+0x2ea6>
    8000e6b2:	d5cfe06f          	j	8000cc0e <tinst_tests_gpf+0x13fe>
    8000e6b6:	d6cfe06f          	j	8000cc22 <tinst_tests_gpf+0x1412>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e6ba:	701c                	ld	a5,32(s0)
    8000e6bc:	e399                	bnez	a5,8000e6c2 <tinst_tests_gpf+0x2eb2>
    8000e6be:	e1afe06f          	j	8000ccd8 <tinst_tests_gpf+0x14c8>
    8000e6c2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e6c4:	0016f713          	andi	a4,a3,1
    8000e6c8:	e4071263          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e6cc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e6d0:	460d                	li	a2,3
    8000e6d2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e6d6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e6d8:	00c59763          	bne	a1,a2,8000e6e6 <tinst_tests_gpf+0x2ed6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e6dc:	0026d683          	lhu	a3,2(a3)
    8000e6e0:	0106969b          	slliw	a3,a3,0x10
    8000e6e4:	8f55                	or	a4,a4,a3
    8000e6e6:	1ffe16b7          	lui	a3,0x1ffe1
    8000e6ea:	068e                	slli	a3,a3,0x3
    8000e6ec:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e6ee:	8f75                	and	a4,a4,a3
    8000e6f0:	00e78463          	beq	a5,a4,8000e6f8 <tinst_tests_gpf+0x2ee8>
    8000e6f4:	dd0fe06f          	j	8000ccc4 <tinst_tests_gpf+0x14b4>
    8000e6f8:	de0fe06f          	j	8000ccd8 <tinst_tests_gpf+0x14c8>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e6fc:	701c                	ld	a5,32(s0)
    8000e6fe:	e399                	bnez	a5,8000e704 <tinst_tests_gpf+0x2ef4>
    8000e700:	e8efe06f          	j	8000cd8e <tinst_tests_gpf+0x157e>
    8000e704:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e706:	0016f713          	andi	a4,a3,1
    8000e70a:	e0071163          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e70e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e712:	460d                	li	a2,3
    8000e714:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e718:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e71a:	00c59763          	bne	a1,a2,8000e728 <tinst_tests_gpf+0x2f18>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e71e:	0026d683          	lhu	a3,2(a3)
    8000e722:	0106969b          	slliw	a3,a3,0x10
    8000e726:	8f55                	or	a4,a4,a3
    8000e728:	1ffe16b7          	lui	a3,0x1ffe1
    8000e72c:	068e                	slli	a3,a3,0x3
    8000e72e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e730:	8f75                	and	a4,a4,a3
    8000e732:	00e78463          	beq	a5,a4,8000e73a <tinst_tests_gpf+0x2f2a>
    8000e736:	e44fe06f          	j	8000cd7a <tinst_tests_gpf+0x156a>
    8000e73a:	e54fe06f          	j	8000cd8e <tinst_tests_gpf+0x157e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e73e:	6418                	ld	a4,8(s0)
    8000e740:	47dd                	li	a5,23
    8000e742:	00f70463          	beq	a4,a5,8000e74a <tinst_tests_gpf+0x2f3a>
    8000e746:	fccfe06f          	j	8000cf12 <tinst_tests_gpf+0x1702>
    8000e74a:	701c                	ld	a5,32(s0)
    8000e74c:	e399                	bnez	a5,8000e752 <tinst_tests_gpf+0x2f42>
    8000e74e:	fc6fe06f          	j	8000cf14 <tinst_tests_gpf+0x1704>
    8000e752:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e754:	0016f713          	andi	a4,a3,1
    8000e758:	da071a63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e75c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e760:	460d                	li	a2,3
    8000e762:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e766:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e768:	00c59763          	bne	a1,a2,8000e776 <tinst_tests_gpf+0x2f66>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e76c:	0026d683          	lhu	a3,2(a3)
    8000e770:	0106969b          	slliw	a3,a3,0x10
    8000e774:	8f55                	or	a4,a4,a3
    8000e776:	1ffe16b7          	lui	a3,0x1ffe1
    8000e77a:	068e                	slli	a3,a3,0x3
    8000e77c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e77e:	8f75                	and	a4,a4,a3
    8000e780:	40f70933          	sub	s2,a4,a5
    8000e784:	00193913          	seqz	s2,s2
    8000e788:	f8cfe06f          	j	8000cf14 <tinst_tests_gpf+0x1704>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e78c:	6418                	ld	a4,8(s0)
    8000e78e:	47dd                	li	a5,23
    8000e790:	00f70463          	beq	a4,a5,8000e798 <tinst_tests_gpf+0x2f88>
    8000e794:	82dfe06f          	j	8000cfc0 <tinst_tests_gpf+0x17b0>
    8000e798:	701c                	ld	a5,32(s0)
    8000e79a:	e399                	bnez	a5,8000e7a0 <tinst_tests_gpf+0x2f90>
    8000e79c:	827fe06f          	j	8000cfc2 <tinst_tests_gpf+0x17b2>
    8000e7a0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e7a2:	0016f713          	andi	a4,a3,1
    8000e7a6:	d6071363          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e7aa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e7ae:	460d                	li	a2,3
    8000e7b0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e7b4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e7b6:	00c59763          	bne	a1,a2,8000e7c4 <tinst_tests_gpf+0x2fb4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e7ba:	0026d683          	lhu	a3,2(a3)
    8000e7be:	0106969b          	slliw	a3,a3,0x10
    8000e7c2:	8f55                	or	a4,a4,a3
    8000e7c4:	1ffe16b7          	lui	a3,0x1ffe1
    8000e7c8:	068e                	slli	a3,a3,0x3
    8000e7ca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e7cc:	8f75                	and	a4,a4,a3
    8000e7ce:	40f70933          	sub	s2,a4,a5
    8000e7d2:	00193913          	seqz	s2,s2
    8000e7d6:	fecfe06f          	j	8000cfc2 <tinst_tests_gpf+0x17b2>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e7da:	6418                	ld	a4,8(s0)
    8000e7dc:	47dd                	li	a5,23
    8000e7de:	00f70463          	beq	a4,a5,8000e7e6 <tinst_tests_gpf+0x2fd6>
    8000e7e2:	88dfe06f          	j	8000d06e <tinst_tests_gpf+0x185e>
    8000e7e6:	701c                	ld	a5,32(s0)
    8000e7e8:	e399                	bnez	a5,8000e7ee <tinst_tests_gpf+0x2fde>
    8000e7ea:	887fe06f          	j	8000d070 <tinst_tests_gpf+0x1860>
    8000e7ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e7f0:	0016f713          	andi	a4,a3,1
    8000e7f4:	d0071c63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e7f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e7fc:	460d                	li	a2,3
    8000e7fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e802:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e804:	00c59763          	bne	a1,a2,8000e812 <tinst_tests_gpf+0x3002>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e808:	0026d683          	lhu	a3,2(a3)
    8000e80c:	0106969b          	slliw	a3,a3,0x10
    8000e810:	8f55                	or	a4,a4,a3
    8000e812:	1ffe16b7          	lui	a3,0x1ffe1
    8000e816:	068e                	slli	a3,a3,0x3
    8000e818:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e81a:	8f75                	and	a4,a4,a3
    8000e81c:	40f70933          	sub	s2,a4,a5
    8000e820:	00193913          	seqz	s2,s2
    8000e824:	84dfe06f          	j	8000d070 <tinst_tests_gpf+0x1860>
    instruction = *((uint16_t*)addr);
    8000e828:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e82c:	460d                	li	a2,3
    8000e82e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e832:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e834:	00c59763          	bne	a1,a2,8000e842 <tinst_tests_gpf+0x3032>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e838:	0026d683          	lhu	a3,2(a3)
    8000e83c:	0106969b          	slliw	a3,a3,0x10
    8000e840:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000e842:	1746                	slli	a4,a4,0x31
    8000e844:	9345                	srli	a4,a4,0x31
    8000e846:	00e78463          	beq	a5,a4,8000e84e <tinst_tests_gpf+0x303e>
    8000e84a:	bb2fd06f          	j	8000bbfc <tinst_tests_gpf+0x3ec>
    8000e84e:	bc2fd06f          	j	8000bc10 <tinst_tests_gpf+0x400>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e852:	7004                	ld	s1,32(s0)
    8000e854:	e099                	bnez	s1,8000e85a <tinst_tests_gpf+0x304a>
    8000e856:	ab9fd06f          	j	8000c30e <tinst_tests_gpf+0xafe>
    8000e85a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e85c:	0017f713          	andi	a4,a5,1
    8000e860:	ca071663          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e864:	0007d503          	lhu	a0,0(a5)
    8000e868:	b61f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000e86c:	01f077b7          	lui	a5,0x1f07
    8000e870:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e874:	00f57933          	and	s2,a0,a5
    8000e878:	40990933          	sub	s2,s2,s1
    8000e87c:	00193913          	seqz	s2,s2
    8000e880:	a8ffd06f          	j	8000c30e <tinst_tests_gpf+0xafe>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000e884:	701c                	ld	a5,32(s0)
    8000e886:	e399                	bnez	a5,8000e88c <tinst_tests_gpf+0x307c>
    8000e888:	b43fd06f          	j	8000c3ca <tinst_tests_gpf+0xbba>
    8000e88c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e88e:	0016f713          	andi	a4,a3,1
    8000e892:	c6071d63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e896:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e89a:	460d                	li	a2,3
    8000e89c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e8a0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e8a2:	00c59763          	bne	a1,a2,8000e8b0 <tinst_tests_gpf+0x30a0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e8a6:	0026d683          	lhu	a3,2(a3)
    8000e8aa:	0106969b          	slliw	a3,a3,0x10
    8000e8ae:	8f55                	or	a4,a4,a3
    8000e8b0:	1ffe16b7          	lui	a3,0x1ffe1
    8000e8b4:	068e                	slli	a3,a3,0x3
    8000e8b6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e8b8:	8f75                	and	a4,a4,a3
    8000e8ba:	40f70933          	sub	s2,a4,a5
    8000e8be:	00193913          	seqz	s2,s2
    8000e8c2:	b09fd06f          	j	8000c3ca <tinst_tests_gpf+0xbba>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000e8c6:	701c                	ld	a5,32(s0)
    8000e8c8:	e399                	bnez	a5,8000e8ce <tinst_tests_gpf+0x30be>
    8000e8ca:	bbdfd06f          	j	8000c486 <tinst_tests_gpf+0xc76>
    8000e8ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e8d0:	0016f713          	andi	a4,a3,1
    8000e8d4:	c2071c63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e8d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e8dc:	460d                	li	a2,3
    8000e8de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e8e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e8e4:	00c59763          	bne	a1,a2,8000e8f2 <tinst_tests_gpf+0x30e2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e8e8:	0026d683          	lhu	a3,2(a3)
    8000e8ec:	0106969b          	slliw	a3,a3,0x10
    8000e8f0:	8f55                	or	a4,a4,a3
    8000e8f2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e8f6:	068e                	slli	a3,a3,0x3
    8000e8f8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e8fa:	8f75                	and	a4,a4,a3
    8000e8fc:	40f70933          	sub	s2,a4,a5
    8000e900:	00193913          	seqz	s2,s2
    8000e904:	b83fd06f          	j	8000c486 <tinst_tests_gpf+0xc76>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000e908:	701c                	ld	a5,32(s0)
    8000e90a:	e399                	bnez	a5,8000e910 <tinst_tests_gpf+0x3100>
    8000e90c:	c31fd06f          	j	8000c53c <tinst_tests_gpf+0xd2c>
    8000e910:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e912:	0016f713          	andi	a4,a3,1
    8000e916:	be071b63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e91a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e91e:	460d                	li	a2,3
    8000e920:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e924:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e926:	00c59763          	bne	a1,a2,8000e934 <tinst_tests_gpf+0x3124>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e92a:	0026d683          	lhu	a3,2(a3)
    8000e92e:	0106969b          	slliw	a3,a3,0x10
    8000e932:	8f55                	or	a4,a4,a3
    8000e934:	1ffe16b7          	lui	a3,0x1ffe1
    8000e938:	068e                	slli	a3,a3,0x3
    8000e93a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e93c:	8f75                	and	a4,a4,a3
    8000e93e:	40f70933          	sub	s2,a4,a5
    8000e942:	00193913          	seqz	s2,s2
    8000e946:	bf7fd06f          	j	8000c53c <tinst_tests_gpf+0xd2c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e94a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e94c:	0017f713          	andi	a4,a5,1
    8000e950:	ba071e63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e954:	0007d503          	lhu	a0,0(a5)
    8000e958:	a71f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000e95c:	67a1                	lui	a5,0x8
    8000e95e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e960:	8d7d                	and	a0,a0,a5
    8000e962:	00a48463          	beq	s1,a0,8000e96a <tinst_tests_gpf+0x315a>
    8000e966:	f4afd06f          	j	8000c0b0 <tinst_tests_gpf+0x8a0>
    8000e96a:	00018597          	auipc	a1,0x18
    8000e96e:	51658593          	addi	a1,a1,1302 # 80026e80 <__func__.0+0x2c0>
    8000e972:	f46fd06f          	j	8000c0b8 <tinst_tests_gpf+0x8a8>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000e976:	701c                	ld	a5,32(s0)
    8000e978:	e399                	bnez	a5,8000e97e <tinst_tests_gpf+0x316e>
    8000e97a:	c79fd06f          	j	8000c5f2 <tinst_tests_gpf+0xde2>
    8000e97e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e980:	0016f713          	andi	a4,a3,1
    8000e984:	b8071463          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e988:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e98c:	460d                	li	a2,3
    8000e98e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e992:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e994:	00c59763          	bne	a1,a2,8000e9a2 <tinst_tests_gpf+0x3192>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e998:	0026d683          	lhu	a3,2(a3)
    8000e99c:	0106969b          	slliw	a3,a3,0x10
    8000e9a0:	8f55                	or	a4,a4,a3
    8000e9a2:	1ffe16b7          	lui	a3,0x1ffe1
    8000e9a6:	068e                	slli	a3,a3,0x3
    8000e9a8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e9aa:	8f75                	and	a4,a4,a3
    8000e9ac:	40f70933          	sub	s2,a4,a5
    8000e9b0:	00193913          	seqz	s2,s2
    8000e9b4:	c3ffd06f          	j	8000c5f2 <tinst_tests_gpf+0xde2>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000e9b8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e9ba:	0017f713          	andi	a4,a5,1
    8000e9be:	b4071763          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e9c2:	0007d503          	lhu	a0,0(a5)
    8000e9c6:	a03f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000e9ca:	67a1                	lui	a5,0x8
    8000e9cc:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e9ce:	8d7d                	and	a0,a0,a5
    8000e9d0:	00a98463          	beq	s3,a0,8000e9d8 <tinst_tests_gpf+0x31c8>
    8000e9d4:	f86fd06f          	j	8000c15a <tinst_tests_gpf+0x94a>
    8000e9d8:	00018597          	auipc	a1,0x18
    8000e9dc:	4a858593          	addi	a1,a1,1192 # 80026e80 <__func__.0+0x2c0>
    8000e9e0:	f82fd06f          	j	8000c162 <tinst_tests_gpf+0x952>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000e9e4:	701c                	ld	a5,32(s0)
    8000e9e6:	e399                	bnez	a5,8000e9ec <tinst_tests_gpf+0x31dc>
    8000e9e8:	cb5fd06f          	j	8000c69c <tinst_tests_gpf+0xe8c>
    8000e9ec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e9ee:	0016f713          	andi	a4,a3,1
    8000e9f2:	b0071d63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000e9f6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e9fa:	460d                	li	a2,3
    8000e9fc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ea00:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ea02:	00c59763          	bne	a1,a2,8000ea10 <tinst_tests_gpf+0x3200>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ea06:	0026d683          	lhu	a3,2(a3)
    8000ea0a:	0106969b          	slliw	a3,a3,0x10
    8000ea0e:	8f55                	or	a4,a4,a3
    8000ea10:	1ffe16b7          	lui	a3,0x1ffe1
    8000ea14:	068e                	slli	a3,a3,0x3
    8000ea16:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ea18:	8f75                	and	a4,a4,a3
    8000ea1a:	40f70933          	sub	s2,a4,a5
    8000ea1e:	00193913          	seqz	s2,s2
    8000ea22:	c7bfd06f          	j	8000c69c <tinst_tests_gpf+0xe8c>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000ea26:	701c                	ld	a5,32(s0)
    8000ea28:	e399                	bnez	a5,8000ea2e <tinst_tests_gpf+0x321e>
    8000ea2a:	d1dfd06f          	j	8000c746 <tinst_tests_gpf+0xf36>
    8000ea2e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ea30:	0016f713          	andi	a4,a3,1
    8000ea34:	ac071c63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ea38:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ea3c:	460d                	li	a2,3
    8000ea3e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ea42:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ea44:	00c59763          	bne	a1,a2,8000ea52 <tinst_tests_gpf+0x3242>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ea48:	0026d683          	lhu	a3,2(a3)
    8000ea4c:	0106969b          	slliw	a3,a3,0x10
    8000ea50:	8f55                	or	a4,a4,a3
    8000ea52:	1ffe16b7          	lui	a3,0x1ffe1
    8000ea56:	068e                	slli	a3,a3,0x3
    8000ea58:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ea5a:	8f75                	and	a4,a4,a3
    8000ea5c:	40f70933          	sub	s2,a4,a5
    8000ea60:	00193913          	seqz	s2,s2
    8000ea64:	ce3fd06f          	j	8000c746 <tinst_tests_gpf+0xf36>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000ea68:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ea6a:	0017f713          	andi	a4,a5,1
    8000ea6e:	a8071f63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ea72:	0007d503          	lhu	a0,0(a5)
    8000ea76:	953f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000ea7a:	01f077b7          	lui	a5,0x1f07
    8000ea7e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ea82:	8d7d                	and	a0,a0,a5
    8000ea84:	00a98463          	beq	s3,a0,8000ea8c <tinst_tests_gpf+0x327c>
    8000ea88:	f7cfd06f          	j	8000c204 <tinst_tests_gpf+0x9f4>
    8000ea8c:	00018597          	auipc	a1,0x18
    8000ea90:	3f458593          	addi	a1,a1,1012 # 80026e80 <__func__.0+0x2c0>
    8000ea94:	f78fd06f          	j	8000c20c <tinst_tests_gpf+0x9fc>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000ea98:	701c                	ld	a5,32(s0)
    8000ea9a:	e399                	bnez	a5,8000eaa0 <tinst_tests_gpf+0x3290>
    8000ea9c:	d61fd06f          	j	8000c7fc <tinst_tests_gpf+0xfec>
    8000eaa0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eaa2:	0016f713          	andi	a4,a3,1
    8000eaa6:	a6071363          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eaaa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000eaae:	460d                	li	a2,3
    8000eab0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000eab4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000eab6:	00c59763          	bne	a1,a2,8000eac4 <tinst_tests_gpf+0x32b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000eaba:	0026d683          	lhu	a3,2(a3)
    8000eabe:	0106969b          	slliw	a3,a3,0x10
    8000eac2:	8f55                	or	a4,a4,a3
    8000eac4:	1ffe16b7          	lui	a3,0x1ffe1
    8000eac8:	068e                	slli	a3,a3,0x3
    8000eaca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eacc:	8f75                	and	a4,a4,a3
    8000eace:	40f70933          	sub	s2,a4,a5
    8000ead2:	00193913          	seqz	s2,s2
    8000ead6:	d27fd06f          	j	8000c7fc <tinst_tests_gpf+0xfec>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000eada:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000eadc:	0017f713          	andi	a4,a5,1
    8000eae0:	a2071663          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eae4:	0007d503          	lhu	a0,0(a5)
    8000eae8:	8e1f20ef          	jal	800013c8 <expand_compressed_instruction>
    8000eaec:	01f077b7          	lui	a5,0x1f07
    8000eaf0:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000eaf4:	8d7d                	and	a0,a0,a5
    8000eaf6:	00a48463          	beq	s1,a0,8000eafe <tinst_tests_gpf+0x32ee>
    8000eafa:	fb4fd06f          	j	8000c2ae <tinst_tests_gpf+0xa9e>
    8000eafe:	00018597          	auipc	a1,0x18
    8000eb02:	38258593          	addi	a1,a1,898 # 80026e80 <__func__.0+0x2c0>
    8000eb06:	fb0fd06f          	j	8000c2b6 <tinst_tests_gpf+0xaa6>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000eb0a:	701c                	ld	a5,32(s0)
    8000eb0c:	e399                	bnez	a5,8000eb12 <tinst_tests_gpf+0x3302>
    8000eb0e:	da5fd06f          	j	8000c8b2 <tinst_tests_gpf+0x10a2>
    8000eb12:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eb14:	0016f713          	andi	a4,a3,1
    8000eb18:	9e071a63          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eb1c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000eb20:	460d                	li	a2,3
    8000eb22:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000eb26:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000eb28:	00c59763          	bne	a1,a2,8000eb36 <tinst_tests_gpf+0x3326>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000eb2c:	0026d683          	lhu	a3,2(a3)
    8000eb30:	0106969b          	slliw	a3,a3,0x10
    8000eb34:	8f55                	or	a4,a4,a3
    8000eb36:	1ffe16b7          	lui	a3,0x1ffe1
    8000eb3a:	068e                	slli	a3,a3,0x3
    8000eb3c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eb3e:	8f75                	and	a4,a4,a3
    8000eb40:	40f70933          	sub	s2,a4,a5
    8000eb44:	00193913          	seqz	s2,s2
    8000eb48:	d6bfd06f          	j	8000c8b2 <tinst_tests_gpf+0x10a2>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000eb4c:	701c                	ld	a5,32(s0)
    8000eb4e:	e399                	bnez	a5,8000eb54 <tinst_tests_gpf+0x3344>
    8000eb50:	e19fd06f          	j	8000c968 <tinst_tests_gpf+0x1158>
    8000eb54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eb56:	0016f713          	andi	a4,a3,1
    8000eb5a:	9a071963          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eb5e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000eb62:	460d                	li	a2,3
    8000eb64:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000eb68:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000eb6a:	00c59763          	bne	a1,a2,8000eb78 <tinst_tests_gpf+0x3368>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000eb6e:	0026d683          	lhu	a3,2(a3)
    8000eb72:	0106969b          	slliw	a3,a3,0x10
    8000eb76:	8f55                	or	a4,a4,a3
    8000eb78:	1ffe16b7          	lui	a3,0x1ffe1
    8000eb7c:	068e                	slli	a3,a3,0x3
    8000eb7e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eb80:	8f75                	and	a4,a4,a3
    8000eb82:	40f70933          	sub	s2,a4,a5
    8000eb86:	00193913          	seqz	s2,s2
    8000eb8a:	ddffd06f          	j	8000c968 <tinst_tests_gpf+0x1158>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000eb8e:	701c                	ld	a5,32(s0)
    8000eb90:	e399                	bnez	a5,8000eb96 <tinst_tests_gpf+0x3386>
    8000eb92:	e8dfd06f          	j	8000ca1e <tinst_tests_gpf+0x120e>
    8000eb96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eb98:	0016f713          	andi	a4,a3,1
    8000eb9c:	96071863          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eba0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000eba4:	460d                	li	a2,3
    8000eba6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ebaa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ebac:	00c59763          	bne	a1,a2,8000ebba <tinst_tests_gpf+0x33aa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ebb0:	0026d683          	lhu	a3,2(a3)
    8000ebb4:	0106969b          	slliw	a3,a3,0x10
    8000ebb8:	8f55                	or	a4,a4,a3
    8000ebba:	1ffe16b7          	lui	a3,0x1ffe1
    8000ebbe:	068e                	slli	a3,a3,0x3
    8000ebc0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ebc2:	8f75                	and	a4,a4,a3
    8000ebc4:	40f70933          	sub	s2,a4,a5
    8000ebc8:	00193913          	seqz	s2,s2
    8000ebcc:	e53fd06f          	j	8000ca1e <tinst_tests_gpf+0x120e>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000ebd0:	701c                	ld	a5,32(s0)
    8000ebd2:	e399                	bnez	a5,8000ebd8 <tinst_tests_gpf+0x33c8>
    8000ebd4:	f05fd06f          	j	8000cad8 <tinst_tests_gpf+0x12c8>
    8000ebd8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ebda:	0016f713          	andi	a4,a3,1
    8000ebde:	92071763          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ebe2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ebe6:	460d                	li	a2,3
    8000ebe8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ebec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ebee:	00c59763          	bne	a1,a2,8000ebfc <tinst_tests_gpf+0x33ec>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ebf2:	0026d683          	lhu	a3,2(a3)
    8000ebf6:	0106969b          	slliw	a3,a3,0x10
    8000ebfa:	8f55                	or	a4,a4,a3
    8000ebfc:	1ffe16b7          	lui	a3,0x1ffe1
    8000ec00:	068e                	slli	a3,a3,0x3
    8000ec02:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ec04:	8f75                	and	a4,a4,a3
    8000ec06:	40f70933          	sub	s2,a4,a5
    8000ec0a:	00193913          	seqz	s2,s2
    8000ec0e:	ecbfd06f          	j	8000cad8 <tinst_tests_gpf+0x12c8>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000ec12:	701c                	ld	a5,32(s0)
    8000ec14:	e399                	bnez	a5,8000ec1a <tinst_tests_gpf+0x340a>
    8000ec16:	f79fd06f          	j	8000cb8e <tinst_tests_gpf+0x137e>
    8000ec1a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ec1c:	0016f713          	andi	a4,a3,1
    8000ec20:	8e071663          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ec24:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ec28:	460d                	li	a2,3
    8000ec2a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ec2e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ec30:	00c59763          	bne	a1,a2,8000ec3e <tinst_tests_gpf+0x342e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ec34:	0026d683          	lhu	a3,2(a3)
    8000ec38:	0106969b          	slliw	a3,a3,0x10
    8000ec3c:	8f55                	or	a4,a4,a3
    8000ec3e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ec42:	068e                	slli	a3,a3,0x3
    8000ec44:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ec46:	8f75                	and	a4,a4,a3
    8000ec48:	40f70933          	sub	s2,a4,a5
    8000ec4c:	00193913          	seqz	s2,s2
    8000ec50:	f3ffd06f          	j	8000cb8e <tinst_tests_gpf+0x137e>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000ec54:	701c                	ld	a5,32(s0)
    8000ec56:	e399                	bnez	a5,8000ec5c <tinst_tests_gpf+0x344c>
    8000ec58:	fedfd06f          	j	8000cc44 <tinst_tests_gpf+0x1434>
    8000ec5c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ec5e:	0016f713          	andi	a4,a3,1
    8000ec62:	8a071563          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ec66:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ec6a:	460d                	li	a2,3
    8000ec6c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ec70:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ec72:	00c59763          	bne	a1,a2,8000ec80 <tinst_tests_gpf+0x3470>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ec76:	0026d683          	lhu	a3,2(a3)
    8000ec7a:	0106969b          	slliw	a3,a3,0x10
    8000ec7e:	8f55                	or	a4,a4,a3
    8000ec80:	1ffe16b7          	lui	a3,0x1ffe1
    8000ec84:	068e                	slli	a3,a3,0x3
    8000ec86:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ec88:	8f75                	and	a4,a4,a3
    8000ec8a:	40f70933          	sub	s2,a4,a5
    8000ec8e:	00193913          	seqz	s2,s2
    8000ec92:	fb3fd06f          	j	8000cc44 <tinst_tests_gpf+0x1434>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000ec96:	701c                	ld	a5,32(s0)
    8000ec98:	e399                	bnez	a5,8000ec9e <tinst_tests_gpf+0x348e>
    8000ec9a:	860fe06f          	j	8000ccfa <tinst_tests_gpf+0x14ea>
    8000ec9e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000eca0:	0016f713          	andi	a4,a3,1
    8000eca4:	86071463          	bnez	a4,8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000eca8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ecac:	460d                	li	a2,3
    8000ecae:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ecb2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ecb4:	00c59763          	bne	a1,a2,8000ecc2 <tinst_tests_gpf+0x34b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ecb8:	0026d683          	lhu	a3,2(a3)
    8000ecbc:	0106969b          	slliw	a3,a3,0x10
    8000ecc0:	8f55                	or	a4,a4,a3
    8000ecc2:	1ffe16b7          	lui	a3,0x1ffe1
    8000ecc6:	068e                	slli	a3,a3,0x3
    8000ecc8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ecca:	8f75                	and	a4,a4,a3
    8000eccc:	40f70933          	sub	s2,a4,a5
    8000ecd0:	00193913          	seqz	s2,s2
    8000ecd4:	826fe06f          	j	8000ccfa <tinst_tests_gpf+0x14ea>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000ecd8:	701c                	ld	a5,32(s0)
    8000ecda:	e399                	bnez	a5,8000ece0 <tinst_tests_gpf+0x34d0>
    8000ecdc:	8d4fe06f          	j	8000cdb0 <tinst_tests_gpf+0x15a0>
    8000ece0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ece2:	0016f713          	andi	a4,a3,1
    8000ece6:	c319                	beqz	a4,8000ecec <tinst_tests_gpf+0x34dc>
    8000ece8:	824ff06f          	j	8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ecec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ecf0:	460d                	li	a2,3
    8000ecf2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ecf6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ecf8:	00c59763          	bne	a1,a2,8000ed06 <tinst_tests_gpf+0x34f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ecfc:	0026d683          	lhu	a3,2(a3)
    8000ed00:	0106969b          	slliw	a3,a3,0x10
    8000ed04:	8f55                	or	a4,a4,a3
    8000ed06:	1ffe16b7          	lui	a3,0x1ffe1
    8000ed0a:	068e                	slli	a3,a3,0x3
    8000ed0c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ed0e:	8f75                	and	a4,a4,a3
    8000ed10:	40f70933          	sub	s2,a4,a5
    8000ed14:	00193913          	seqz	s2,s2
    8000ed18:	898fe06f          	j	8000cdb0 <tinst_tests_gpf+0x15a0>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000ed1c:	701c                	ld	a5,32(s0)
    8000ed1e:	e399                	bnez	a5,8000ed24 <tinst_tests_gpf+0x3514>
    8000ed20:	946fe06f          	j	8000ce66 <tinst_tests_gpf+0x1656>
    8000ed24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ed26:	0016f713          	andi	a4,a3,1
    8000ed2a:	c319                	beqz	a4,8000ed30 <tinst_tests_gpf+0x3520>
    8000ed2c:	fe1fe06f          	j	8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ed30:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ed34:	460d                	li	a2,3
    8000ed36:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ed3a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ed3c:	00c59763          	bne	a1,a2,8000ed4a <tinst_tests_gpf+0x353a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ed40:	0026d683          	lhu	a3,2(a3)
    8000ed44:	0106969b          	slliw	a3,a3,0x10
    8000ed48:	8f55                	or	a4,a4,a3
    8000ed4a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ed4e:	068e                	slli	a3,a3,0x3
    8000ed50:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ed52:	8f75                	and	a4,a4,a3
    8000ed54:	40f70933          	sub	s2,a4,a5
    8000ed58:	00193913          	seqz	s2,s2
    8000ed5c:	90afe06f          	j	8000ce66 <tinst_tests_gpf+0x1656>
    8000ed60:	701c                	ld	a5,32(s0)
    8000ed62:	e399                	bnez	a5,8000ed68 <tinst_tests_gpf+0x3558>
    8000ed64:	8e0fe06f          	j	8000ce44 <tinst_tests_gpf+0x1634>
    8000ed68:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ed6a:	0016f713          	andi	a4,a3,1
    8000ed6e:	c319                	beqz	a4,8000ed74 <tinst_tests_gpf+0x3564>
    8000ed70:	f9dfe06f          	j	8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ed74:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ed78:	460d                	li	a2,3
    8000ed7a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ed7e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ed80:	00c59763          	bne	a1,a2,8000ed8e <tinst_tests_gpf+0x357e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ed84:	0026d683          	lhu	a3,2(a3)
    8000ed88:	0106969b          	slliw	a3,a3,0x10
    8000ed8c:	8f55                	or	a4,a4,a3
    8000ed8e:	1ffe16b7          	lui	a3,0x1ffe1
    8000ed92:	068e                	slli	a3,a3,0x3
    8000ed94:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ed96:	8f75                	and	a4,a4,a3
    8000ed98:	00e78463          	beq	a5,a4,8000eda0 <tinst_tests_gpf+0x3590>
    8000ed9c:	894fe06f          	j	8000ce30 <tinst_tests_gpf+0x1620>
    8000eda0:	8a4fe06f          	j	8000ce44 <tinst_tests_gpf+0x1634>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000eda4:	701c                	ld	a5,32(s0)
    8000eda6:	e399                	bnez	a5,8000edac <tinst_tests_gpf+0x359c>
    8000eda8:	952fe06f          	j	8000cefa <tinst_tests_gpf+0x16ea>
    8000edac:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000edae:	0016f713          	andi	a4,a3,1
    8000edb2:	c319                	beqz	a4,8000edb8 <tinst_tests_gpf+0x35a8>
    8000edb4:	f59fe06f          	j	8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000edb8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000edbc:	460d                	li	a2,3
    8000edbe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000edc2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000edc4:	00c59763          	bne	a1,a2,8000edd2 <tinst_tests_gpf+0x35c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000edc8:	0026d683          	lhu	a3,2(a3)
    8000edcc:	0106969b          	slliw	a3,a3,0x10
    8000edd0:	8f55                	or	a4,a4,a3
    8000edd2:	1ffe16b7          	lui	a3,0x1ffe1
    8000edd6:	068e                	slli	a3,a3,0x3
    8000edd8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000edda:	8f75                	and	a4,a4,a3
    8000eddc:	00e78463          	beq	a5,a4,8000ede4 <tinst_tests_gpf+0x35d4>
    8000ede0:	906fe06f          	j	8000cee6 <tinst_tests_gpf+0x16d6>
    8000ede4:	916fe06f          	j	8000cefa <tinst_tests_gpf+0x16ea>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000ede8:	701c                	ld	a5,32(s0)
    8000edea:	e399                	bnez	a5,8000edf0 <tinst_tests_gpf+0x35e0>
    8000edec:	9bcfe06f          	j	8000cfa8 <tinst_tests_gpf+0x1798>
    8000edf0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000edf2:	0016f713          	andi	a4,a3,1
    8000edf6:	c319                	beqz	a4,8000edfc <tinst_tests_gpf+0x35ec>
    8000edf8:	f15fe06f          	j	8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000edfc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ee00:	460d                	li	a2,3
    8000ee02:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ee06:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ee08:	00c59763          	bne	a1,a2,8000ee16 <tinst_tests_gpf+0x3606>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ee0c:	0026d683          	lhu	a3,2(a3)
    8000ee10:	0106969b          	slliw	a3,a3,0x10
    8000ee14:	8f55                	or	a4,a4,a3
    8000ee16:	1ffe16b7          	lui	a3,0x1ffe1
    8000ee1a:	068e                	slli	a3,a3,0x3
    8000ee1c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ee1e:	8f75                	and	a4,a4,a3
    8000ee20:	00e78463          	beq	a5,a4,8000ee28 <tinst_tests_gpf+0x3618>
    8000ee24:	970fe06f          	j	8000cf94 <tinst_tests_gpf+0x1784>
    8000ee28:	980fe06f          	j	8000cfa8 <tinst_tests_gpf+0x1798>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000ee2c:	701c                	ld	a5,32(s0)
    8000ee2e:	e399                	bnez	a5,8000ee34 <tinst_tests_gpf+0x3624>
    8000ee30:	a26fe06f          	j	8000d056 <tinst_tests_gpf+0x1846>
    8000ee34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ee36:	0016f713          	andi	a4,a3,1
    8000ee3a:	c319                	beqz	a4,8000ee40 <tinst_tests_gpf+0x3630>
    8000ee3c:	ed1fe06f          	j	8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ee40:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ee44:	460d                	li	a2,3
    8000ee46:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ee4a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ee4c:	00c59763          	bne	a1,a2,8000ee5a <tinst_tests_gpf+0x364a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ee50:	0026d683          	lhu	a3,2(a3)
    8000ee54:	0106969b          	slliw	a3,a3,0x10
    8000ee58:	8f55                	or	a4,a4,a3
    8000ee5a:	1ffe16b7          	lui	a3,0x1ffe1
    8000ee5e:	068e                	slli	a3,a3,0x3
    8000ee60:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ee62:	8f75                	and	a4,a4,a3
    8000ee64:	00e78463          	beq	a5,a4,8000ee6c <tinst_tests_gpf+0x365c>
    8000ee68:	9dafe06f          	j	8000d042 <tinst_tests_gpf+0x1832>
    8000ee6c:	9eafe06f          	j	8000d056 <tinst_tests_gpf+0x1846>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000ee70:	701c                	ld	a5,32(s0)
    8000ee72:	e399                	bnez	a5,8000ee78 <tinst_tests_gpf+0x3668>
    8000ee74:	a90fe06f          	j	8000d104 <tinst_tests_gpf+0x18f4>
    8000ee78:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ee7a:	0016f713          	andi	a4,a3,1
    8000ee7e:	c319                	beqz	a4,8000ee84 <tinst_tests_gpf+0x3674>
    8000ee80:	e8dfe06f          	j	8000dd0c <tinst_tests_gpf+0x24fc>
    instruction = *((uint16_t*)addr);
    8000ee84:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ee88:	460d                	li	a2,3
    8000ee8a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ee8e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ee90:	00c59763          	bne	a1,a2,8000ee9e <tinst_tests_gpf+0x368e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ee94:	0026d683          	lhu	a3,2(a3)
    8000ee98:	0106969b          	slliw	a3,a3,0x10
    8000ee9c:	8f55                	or	a4,a4,a3
    8000ee9e:	1ffe16b7          	lui	a3,0x1ffe1
    8000eea2:	068e                	slli	a3,a3,0x3
    8000eea4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000eea6:	8f75                	and	a4,a4,a3
    8000eea8:	00e78463          	beq	a5,a4,8000eeb0 <tinst_tests_gpf+0x36a0>
    8000eeac:	a44fe06f          	j	8000d0f0 <tinst_tests_gpf+0x18e0>
    8000eeb0:	a54fe06f          	j	8000d104 <tinst_tests_gpf+0x18f4>

000000008000eeb4 <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000eeb4:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000eeb6:	00017597          	auipc	a1,0x17
    8000eeba:	b6258593          	addi	a1,a1,-1182 # 80025a18 <__func__.15>
    8000eebe:	00018517          	auipc	a0,0x18
    8000eec2:	fe250513          	addi	a0,a0,-30 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_1(){
    8000eec6:	ec06                	sd	ra,24(sp)
    8000eec8:	e822                	sd	s0,16(sp)
    8000eeca:	e426                	sd	s1,8(sp)
    TEST_START();
    8000eecc:	038160ef          	jal	80024f04 <printf>
    8000eed0:	4529                	li	a0,10
    8000eed2:	63d140ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_HS);
    8000eed6:	450d                	li	a0,3
    8000eed8:	d1ff10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000eedc:	f04f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000eee0:	943f10ef          	jal	80000822 <hpt_init>
    vspt_init(); 
    8000eee4:	fccf10ef          	jal	800006b0 <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000eee8:	4511                	li	a0,4
    8000eeea:	d0df10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,0);
    8000eeee:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000eef2:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000eef6:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000eefa:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VS);     
    8000eefe:	4509                	li	a0,2
    8000ef00:	cf7f10ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000ef04:	0330000f          	fence	rw,rw
    8000ef08:	0003a417          	auipc	s0,0x3a
    8000ef0c:	10840413          	addi	s0,s0,264 # 80049010 <excpt>
    8000ef10:	4785                	li	a5,1
    8000ef12:	0003a717          	auipc	a4,0x3a
    8000ef16:	12073b23          	sd	zero,310(a4) # 80049048 <excpt+0x38>
    8000ef1a:	00f41023          	sh	a5,0(s0)
    8000ef1e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000ef22:	400197b7          	lui	a5,0x40019
    8000ef26:	078a                	slli	a5,a5,0x2
    8000ef28:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ef2c:	08200593          	li	a1,130
    8000ef30:	0001b617          	auipc	a2,0x1b
    8000ef34:	a3860613          	addi	a2,a2,-1480 # 80029968 <__func__.0+0x2da8>
    8000ef38:	00018517          	auipc	a0,0x18
    8000ef3c:	f8050513          	addi	a0,a0,-128 # 80026eb8 <__func__.0+0x2f8>
    8000ef40:	7c5150ef          	jal	80024f04 <printf>
    8000ef44:	0003a797          	auipc	a5,0x3a
    8000ef48:	0cd7c783          	lbu	a5,205(a5) # 80049011 <excpt+0x1>
    8000ef4c:	00018597          	auipc	a1,0x18
    8000ef50:	f4458593          	addi	a1,a1,-188 # 80026e90 <__func__.0+0x2d0>
    8000ef54:	c789                	beqz	a5,8000ef5e <priv_change_1+0xaa>
    8000ef56:	6418                	ld	a4,8(s0)
    8000ef58:	47b5                	li	a5,13
    8000ef5a:	0cf70463          	beq	a4,a5,8000f022 <priv_change_1+0x16e>
    8000ef5e:	00018517          	auipc	a0,0x18
    8000ef62:	f7250513          	addi	a0,a0,-142 # 80026ed0 <__func__.0+0x310>
    8000ef66:	79f150ef          	jal	80024f04 <printf>
    8000ef6a:	0003a797          	auipc	a5,0x3a
    8000ef6e:	0a77c783          	lbu	a5,167(a5) # 80049011 <excpt+0x1>
    8000ef72:	c789                	beqz	a5,8000ef7c <priv_change_1+0xc8>
    8000ef74:	6418                	ld	a4,8(s0)
    8000ef76:	47b5                	li	a5,13
    8000ef78:	04f70e63          	beq	a4,a5,8000efd4 <priv_change_1+0x120>
    8000ef7c:	00018517          	auipc	a0,0x18
    8000ef80:	f5c50513          	addi	a0,a0,-164 # 80026ed8 <__func__.0+0x318>
    8000ef84:	781150ef          	jal	80024f04 <printf>
    8000ef88:	02900513          	li	a0,41
    8000ef8c:	583140ef          	jal	80023d0e <putchar>
    8000ef90:	4529                	li	a0,10
    8000ef92:	57d140ef          	jal	80023d0e <putchar>
    8000ef96:	0003a497          	auipc	s1,0x3a
    8000ef9a:	07b4c483          	lbu	s1,123(s1) # 80049011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000ef9e:	00018597          	auipc	a1,0x18
    8000efa2:	ef258593          	addi	a1,a1,-270 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000efa6:	c491                	beqz	s1,8000efb2 <priv_change_1+0xfe>
    8000efa8:	6418                	ld	a4,8(s0)
    8000efaa:	47b5                	li	a5,13
    8000efac:	04f70363          	beq	a4,a5,8000eff2 <priv_change_1+0x13e>
    8000efb0:	4481                	li	s1,0
    TEST_END();
    8000efb2:	00018517          	auipc	a0,0x18
    8000efb6:	f8650513          	addi	a0,a0,-122 # 80026f38 <__func__.0+0x378>
    8000efba:	74b150ef          	jal	80024f04 <printf>
    8000efbe:	4511                	li	a0,4
    8000efc0:	c37f10ef          	jal	80000bf6 <goto_priv>
    8000efc4:	ce8f20ef          	jal	800014ac <reset_state>
}
    8000efc8:	60e2                	ld	ra,24(sp)
    8000efca:	6442                	ld	s0,16(sp)
    8000efcc:	8526                	mv	a0,s1
    8000efce:	64a2                	ld	s1,8(sp)
    8000efd0:	6105                	addi	sp,sp,32
    8000efd2:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000efd4:	0003a717          	auipc	a4,0x3a
    8000efd8:	04072703          	lw	a4,64(a4) # 80049014 <excpt+0x4>
    8000efdc:	4791                	li	a5,4
    8000efde:	f8f71fe3          	bne	a4,a5,8000ef7c <priv_change_1+0xc8>
    8000efe2:	00022717          	auipc	a4,0x22
    8000efe6:	2f272703          	lw	a4,754(a4) # 800312d4 <curr_priv>
    8000efea:	4789                	li	a5,2
    8000efec:	f8f718e3          	bne	a4,a5,8000ef7c <priv_change_1+0xc8>
    8000eff0:	b745                	j	8000ef90 <priv_change_1+0xdc>
    8000eff2:	0003a717          	auipc	a4,0x3a
    8000eff6:	02272703          	lw	a4,34(a4) # 80049014 <excpt+0x4>
    8000effa:	4791                	li	a5,4
    8000effc:	faf71ae3          	bne	a4,a5,8000efb0 <priv_change_1+0xfc>
    8000f000:	00022717          	auipc	a4,0x22
    8000f004:	2d472703          	lw	a4,724(a4) # 800312d4 <curr_priv>
    8000f008:	4789                	li	a5,2
    TEST_END();
    8000f00a:	00018597          	auipc	a1,0x18
    8000f00e:	e7658593          	addi	a1,a1,-394 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f012:	faf700e3          	beq	a4,a5,8000efb2 <priv_change_1+0xfe>
    8000f016:	4481                	li	s1,0
    TEST_END();
    8000f018:	00018597          	auipc	a1,0x18
    8000f01c:	e7858593          	addi	a1,a1,-392 # 80026e90 <__func__.0+0x2d0>
    8000f020:	bf49                	j	8000efb2 <priv_change_1+0xfe>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f022:	0003a717          	auipc	a4,0x3a
    8000f026:	ff272703          	lw	a4,-14(a4) # 80049014 <excpt+0x4>
    8000f02a:	4791                	li	a5,4
    8000f02c:	f2f719e3          	bne	a4,a5,8000ef5e <priv_change_1+0xaa>
    8000f030:	00022717          	auipc	a4,0x22
    8000f034:	2a472703          	lw	a4,676(a4) # 800312d4 <curr_priv>
    8000f038:	4789                	li	a5,2
    8000f03a:	00018597          	auipc	a1,0x18
    8000f03e:	e4658593          	addi	a1,a1,-442 # 80026e80 <__func__.0+0x2c0>
    8000f042:	f0f70ee3          	beq	a4,a5,8000ef5e <priv_change_1+0xaa>
    8000f046:	00018597          	auipc	a1,0x18
    8000f04a:	e4a58593          	addi	a1,a1,-438 # 80026e90 <__func__.0+0x2d0>
    8000f04e:	bf01                	j	8000ef5e <priv_change_1+0xaa>

000000008000f050 <priv_change_2>:

bool priv_change_2(){
    8000f050:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000f052:	00017597          	auipc	a1,0x17
    8000f056:	9d658593          	addi	a1,a1,-1578 # 80025a28 <__func__.13>
    8000f05a:	00018517          	auipc	a0,0x18
    8000f05e:	e4650513          	addi	a0,a0,-442 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_2(){
    8000f062:	ec06                	sd	ra,24(sp)
    8000f064:	e822                	sd	s0,16(sp)
    8000f066:	e426                	sd	s1,8(sp)
    TEST_START();
    8000f068:	69d150ef          	jal	80024f04 <printf>
    8000f06c:	4529                	li	a0,10
    8000f06e:	4a1140ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_HS);
    8000f072:	450d                	li	a0,3
    8000f074:	b83f10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000f078:	d68f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000f07c:	fa6f10ef          	jal	80000822 <hpt_init>
    vspt_init(); 
    8000f080:	e30f10ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000f084:	4511                	li	a0,4
    8000f086:	b71f10ef          	jal	80000bf6 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000f08a:	6789                	lui	a5,0x2
    8000f08c:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000f090:	4509                	li	a0,2
    8000f092:	b65f10ef          	jal	80000bf6 <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000f096:	0330000f          	fence	rw,rw
    8000f09a:	0003a417          	auipc	s0,0x3a
    8000f09e:	f7640413          	addi	s0,s0,-138 # 80049010 <excpt>
    8000f0a2:	4785                	li	a5,1
    8000f0a4:	0003a717          	auipc	a4,0x3a
    8000f0a8:	fa073223          	sd	zero,-92(a4) # 80049048 <excpt+0x38>
    8000f0ac:	00f41023          	sh	a5,0(s0)
    8000f0b0:	0330000f          	fence	rw,rw
    8000f0b4:	400197b7          	lui	a5,0x40019
    8000f0b8:	078a                	slli	a5,a5,0x2
    8000f0ba:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f0be:	08200593          	li	a1,130
    8000f0c2:	0001b617          	auipc	a2,0x1b
    8000f0c6:	91660613          	addi	a2,a2,-1770 # 800299d8 <__func__.0+0x2e18>
    8000f0ca:	00018517          	auipc	a0,0x18
    8000f0ce:	dee50513          	addi	a0,a0,-530 # 80026eb8 <__func__.0+0x2f8>
    8000f0d2:	633150ef          	jal	80024f04 <printf>
    8000f0d6:	0003a797          	auipc	a5,0x3a
    8000f0da:	f3b7c783          	lbu	a5,-197(a5) # 80049011 <excpt+0x1>
    8000f0de:	00018597          	auipc	a1,0x18
    8000f0e2:	db258593          	addi	a1,a1,-590 # 80026e90 <__func__.0+0x2d0>
    8000f0e6:	c789                	beqz	a5,8000f0f0 <priv_change_2+0xa0>
    8000f0e8:	6418                	ld	a4,8(s0)
    8000f0ea:	47b5                	li	a5,13
    8000f0ec:	0cf70463          	beq	a4,a5,8000f1b4 <priv_change_2+0x164>
    8000f0f0:	00018517          	auipc	a0,0x18
    8000f0f4:	de050513          	addi	a0,a0,-544 # 80026ed0 <__func__.0+0x310>
    8000f0f8:	60d150ef          	jal	80024f04 <printf>
    8000f0fc:	0003a797          	auipc	a5,0x3a
    8000f100:	f157c783          	lbu	a5,-235(a5) # 80049011 <excpt+0x1>
    8000f104:	c789                	beqz	a5,8000f10e <priv_change_2+0xbe>
    8000f106:	6418                	ld	a4,8(s0)
    8000f108:	47b5                	li	a5,13
    8000f10a:	04f70e63          	beq	a4,a5,8000f166 <priv_change_2+0x116>
    8000f10e:	00018517          	auipc	a0,0x18
    8000f112:	dca50513          	addi	a0,a0,-566 # 80026ed8 <__func__.0+0x318>
    8000f116:	5ef150ef          	jal	80024f04 <printf>
    8000f11a:	02900513          	li	a0,41
    8000f11e:	3f1140ef          	jal	80023d0e <putchar>
    8000f122:	4529                	li	a0,10
    8000f124:	3eb140ef          	jal	80023d0e <putchar>
    8000f128:	0003a497          	auipc	s1,0x3a
    8000f12c:	ee94c483          	lbu	s1,-279(s1) # 80049011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000f130:	00018597          	auipc	a1,0x18
    8000f134:	d6058593          	addi	a1,a1,-672 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f138:	c491                	beqz	s1,8000f144 <priv_change_2+0xf4>
    8000f13a:	6418                	ld	a4,8(s0)
    8000f13c:	47b5                	li	a5,13
    8000f13e:	04f70363          	beq	a4,a5,8000f184 <priv_change_2+0x134>
    8000f142:	4481                	li	s1,0
    TEST_END();
    8000f144:	00018517          	auipc	a0,0x18
    8000f148:	df450513          	addi	a0,a0,-524 # 80026f38 <__func__.0+0x378>
    8000f14c:	5b9150ef          	jal	80024f04 <printf>
    8000f150:	4511                	li	a0,4
    8000f152:	aa5f10ef          	jal	80000bf6 <goto_priv>
    8000f156:	b56f20ef          	jal	800014ac <reset_state>
}
    8000f15a:	60e2                	ld	ra,24(sp)
    8000f15c:	6442                	ld	s0,16(sp)
    8000f15e:	8526                	mv	a0,s1
    8000f160:	64a2                	ld	s1,8(sp)
    8000f162:	6105                	addi	sp,sp,32
    8000f164:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f166:	0003a717          	auipc	a4,0x3a
    8000f16a:	eae72703          	lw	a4,-338(a4) # 80049014 <excpt+0x4>
    8000f16e:	4791                	li	a5,4
    8000f170:	f8f71fe3          	bne	a4,a5,8000f10e <priv_change_2+0xbe>
    8000f174:	00022717          	auipc	a4,0x22
    8000f178:	16072703          	lw	a4,352(a4) # 800312d4 <curr_priv>
    8000f17c:	4789                	li	a5,2
    8000f17e:	f8f718e3          	bne	a4,a5,8000f10e <priv_change_2+0xbe>
    8000f182:	b745                	j	8000f122 <priv_change_2+0xd2>
    8000f184:	0003a717          	auipc	a4,0x3a
    8000f188:	e9072703          	lw	a4,-368(a4) # 80049014 <excpt+0x4>
    8000f18c:	4791                	li	a5,4
    8000f18e:	faf71ae3          	bne	a4,a5,8000f142 <priv_change_2+0xf2>
    8000f192:	00022717          	auipc	a4,0x22
    8000f196:	14272703          	lw	a4,322(a4) # 800312d4 <curr_priv>
    8000f19a:	4789                	li	a5,2
    TEST_END();
    8000f19c:	00018597          	auipc	a1,0x18
    8000f1a0:	ce458593          	addi	a1,a1,-796 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f1a4:	faf700e3          	beq	a4,a5,8000f144 <priv_change_2+0xf4>
    8000f1a8:	4481                	li	s1,0
    TEST_END();
    8000f1aa:	00018597          	auipc	a1,0x18
    8000f1ae:	ce658593          	addi	a1,a1,-794 # 80026e90 <__func__.0+0x2d0>
    8000f1b2:	bf49                	j	8000f144 <priv_change_2+0xf4>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000f1b4:	0003a717          	auipc	a4,0x3a
    8000f1b8:	e6072703          	lw	a4,-416(a4) # 80049014 <excpt+0x4>
    8000f1bc:	4791                	li	a5,4
    8000f1be:	f2f719e3          	bne	a4,a5,8000f0f0 <priv_change_2+0xa0>
    8000f1c2:	00022717          	auipc	a4,0x22
    8000f1c6:	11272703          	lw	a4,274(a4) # 800312d4 <curr_priv>
    8000f1ca:	4789                	li	a5,2
    8000f1cc:	00018597          	auipc	a1,0x18
    8000f1d0:	cb458593          	addi	a1,a1,-844 # 80026e80 <__func__.0+0x2c0>
    8000f1d4:	f0f70ee3          	beq	a4,a5,8000f0f0 <priv_change_2+0xa0>
    8000f1d8:	00018597          	auipc	a1,0x18
    8000f1dc:	cb858593          	addi	a1,a1,-840 # 80026e90 <__func__.0+0x2d0>
    8000f1e0:	bf01                	j	8000f0f0 <priv_change_2+0xa0>

000000008000f1e2 <priv_change_3>:


bool priv_change_3(){
    8000f1e2:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000f1e4:	00017597          	auipc	a1,0x17
    8000f1e8:	85458593          	addi	a1,a1,-1964 # 80025a38 <__func__.12>
    8000f1ec:	00018517          	auipc	a0,0x18
    8000f1f0:	cb450513          	addi	a0,a0,-844 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_3(){
    8000f1f4:	ec06                	sd	ra,24(sp)
    8000f1f6:	e822                	sd	s0,16(sp)
    8000f1f8:	e426                	sd	s1,8(sp)
    TEST_START();
    8000f1fa:	50b150ef          	jal	80024f04 <printf>
    8000f1fe:	4529                	li	a0,10
    8000f200:	30f140ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_HS);
    8000f204:	450d                	li	a0,3
    8000f206:	9f1f10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000f20a:	bd6f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000f20e:	e14f10ef          	jal	80000822 <hpt_init>
    vspt_init(); 
    8000f212:	c9ef10ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000f216:	0330000f          	fence	rw,rw
    8000f21a:	0003a417          	auipc	s0,0x3a
    8000f21e:	df640413          	addi	s0,s0,-522 # 80049010 <excpt>
    8000f222:	4485                	li	s1,1
    8000f224:	0003a797          	auipc	a5,0x3a
    8000f228:	e207b223          	sd	zero,-476(a5) # 80049048 <excpt+0x38>
    8000f22c:	00941023          	sh	s1,0(s0)
    8000f230:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8000f234:	4511                	li	a0,4
    8000f236:	9c1f10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,0);
    8000f23a:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);
    8000f23e:	30305073          	csrwi	mideleg,0
    goto_priv(PRIV_HS);     
    8000f242:	450d                	li	a0,3
    8000f244:	9b3f10ef          	jal	80000bf6 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000f248:	0330000f          	fence	rw,rw
    8000f24c:	0003a797          	auipc	a5,0x3a
    8000f250:	de07be23          	sd	zero,-516(a5) # 80049048 <excpt+0x38>
    8000f254:	00941023          	sh	s1,0(s0)
    8000f258:	0330000f          	fence	rw,rw
    8000f25c:	400197b7          	lui	a5,0x40019
    8000f260:	078a                	slli	a5,a5,0x2
    8000f262:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f266:	08200593          	li	a1,130
    8000f26a:	0001a617          	auipc	a2,0x1a
    8000f26e:	7ae60613          	addi	a2,a2,1966 # 80029a18 <__func__.0+0x2e58>
    8000f272:	00018517          	auipc	a0,0x18
    8000f276:	c4650513          	addi	a0,a0,-954 # 80026eb8 <__func__.0+0x2f8>
    8000f27a:	48b150ef          	jal	80024f04 <printf>
    8000f27e:	0003a797          	auipc	a5,0x3a
    8000f282:	d937c783          	lbu	a5,-621(a5) # 80049011 <excpt+0x1>
    8000f286:	00018597          	auipc	a1,0x18
    8000f28a:	c0a58593          	addi	a1,a1,-1014 # 80026e90 <__func__.0+0x2d0>
    8000f28e:	cb81                	beqz	a5,8000f29e <priv_change_3+0xbc>
    8000f290:	00022717          	auipc	a4,0x22
    8000f294:	04472703          	lw	a4,68(a4) # 800312d4 <curr_priv>
    8000f298:	478d                	li	a5,3
    8000f29a:	0af70c63          	beq	a4,a5,8000f352 <priv_change_3+0x170>
    8000f29e:	00018517          	auipc	a0,0x18
    8000f2a2:	c3250513          	addi	a0,a0,-974 # 80026ed0 <__func__.0+0x310>
    8000f2a6:	45f150ef          	jal	80024f04 <printf>
    8000f2aa:	0003a797          	auipc	a5,0x3a
    8000f2ae:	d677c783          	lbu	a5,-665(a5) # 80049011 <excpt+0x1>
    8000f2b2:	cb81                	beqz	a5,8000f2c2 <priv_change_3+0xe0>
    8000f2b4:	00022717          	auipc	a4,0x22
    8000f2b8:	02072703          	lw	a4,32(a4) # 800312d4 <curr_priv>
    8000f2bc:	478d                	li	a5,3
    8000f2be:	06f70163          	beq	a4,a5,8000f320 <priv_change_3+0x13e>
    8000f2c2:	00018517          	auipc	a0,0x18
    8000f2c6:	c1650513          	addi	a0,a0,-1002 # 80026ed8 <__func__.0+0x318>
    8000f2ca:	43b150ef          	jal	80024f04 <printf>
    8000f2ce:	02900513          	li	a0,41
    8000f2d2:	23d140ef          	jal	80023d0e <putchar>
    8000f2d6:	4529                	li	a0,10
    8000f2d8:	237140ef          	jal	80023d0e <putchar>
    8000f2dc:	0003a417          	auipc	s0,0x3a
    8000f2e0:	d3544403          	lbu	s0,-715(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000f2e4:	00018597          	auipc	a1,0x18
    8000f2e8:	bac58593          	addi	a1,a1,-1108 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f2ec:	c809                	beqz	s0,8000f2fe <priv_change_3+0x11c>
    8000f2ee:	00022717          	auipc	a4,0x22
    8000f2f2:	fe672703          	lw	a4,-26(a4) # 800312d4 <curr_priv>
    8000f2f6:	478d                	li	a5,3
    8000f2f8:	02f70c63          	beq	a4,a5,8000f330 <priv_change_3+0x14e>
    8000f2fc:	4401                	li	s0,0
    TEST_END();
    8000f2fe:	00018517          	auipc	a0,0x18
    8000f302:	c3a50513          	addi	a0,a0,-966 # 80026f38 <__func__.0+0x378>
    8000f306:	3ff150ef          	jal	80024f04 <printf>
    8000f30a:	4511                	li	a0,4
    8000f30c:	8ebf10ef          	jal	80000bf6 <goto_priv>
    8000f310:	99cf20ef          	jal	800014ac <reset_state>
}
    8000f314:	60e2                	ld	ra,24(sp)
    8000f316:	8522                	mv	a0,s0
    8000f318:	6442                	ld	s0,16(sp)
    8000f31a:	64a2                	ld	s1,8(sp)
    8000f31c:	6105                	addi	sp,sp,32
    8000f31e:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f320:	0003a717          	auipc	a4,0x3a
    8000f324:	cf472703          	lw	a4,-780(a4) # 80049014 <excpt+0x4>
    8000f328:	4791                	li	a5,4
    8000f32a:	f8f71ce3          	bne	a4,a5,8000f2c2 <priv_change_3+0xe0>
    8000f32e:	b765                	j	8000f2d6 <priv_change_3+0xf4>
    8000f330:	0003a717          	auipc	a4,0x3a
    8000f334:	ce472703          	lw	a4,-796(a4) # 80049014 <excpt+0x4>
    8000f338:	4791                	li	a5,4
    TEST_END();
    8000f33a:	00018597          	auipc	a1,0x18
    8000f33e:	b4658593          	addi	a1,a1,-1210 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f342:	faf70ee3          	beq	a4,a5,8000f2fe <priv_change_3+0x11c>
    8000f346:	4401                	li	s0,0
    TEST_END();
    8000f348:	00018597          	auipc	a1,0x18
    8000f34c:	b4858593          	addi	a1,a1,-1208 # 80026e90 <__func__.0+0x2d0>
    8000f350:	b77d                	j	8000f2fe <priv_change_3+0x11c>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f352:	0003a717          	auipc	a4,0x3a
    8000f356:	cc272703          	lw	a4,-830(a4) # 80049014 <excpt+0x4>
    8000f35a:	4791                	li	a5,4
    8000f35c:	00018597          	auipc	a1,0x18
    8000f360:	b2458593          	addi	a1,a1,-1244 # 80026e80 <__func__.0+0x2c0>
    8000f364:	f2f70de3          	beq	a4,a5,8000f29e <priv_change_3+0xbc>
    8000f368:	00018597          	auipc	a1,0x18
    8000f36c:	b2858593          	addi	a1,a1,-1240 # 80026e90 <__func__.0+0x2d0>
    8000f370:	b73d                	j	8000f29e <priv_change_3+0xbc>

000000008000f372 <priv_change_4>:

bool priv_change_4(){
    8000f372:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000f374:	00016597          	auipc	a1,0x16
    8000f378:	6d458593          	addi	a1,a1,1748 # 80025a48 <__func__.11>
    8000f37c:	00018517          	auipc	a0,0x18
    8000f380:	b2450513          	addi	a0,a0,-1244 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_4(){
    8000f384:	ec06                	sd	ra,24(sp)
    8000f386:	e822                	sd	s0,16(sp)
    8000f388:	e426                	sd	s1,8(sp)
    TEST_START();
    8000f38a:	37b150ef          	jal	80024f04 <printf>
    8000f38e:	4529                	li	a0,10
    8000f390:	17f140ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_HS);
    8000f394:	450d                	li	a0,3
    8000f396:	861f10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8000f39a:	a46f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000f39e:	c84f10ef          	jal	80000822 <hpt_init>
    vspt_init(); 
    8000f3a2:	b0ef10ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000f3a6:	4511                	li	a0,4
    8000f3a8:	84ff10ef          	jal	80000bf6 <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000f3ac:	6789                	lui	a5,0x2
    8000f3ae:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000f3b2:	450d                	li	a0,3
    8000f3b4:	843f10ef          	jal	80000bf6 <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000f3b8:	0330000f          	fence	rw,rw
    8000f3bc:	0003a417          	auipc	s0,0x3a
    8000f3c0:	c5440413          	addi	s0,s0,-940 # 80049010 <excpt>
    8000f3c4:	4785                	li	a5,1
    8000f3c6:	0003a717          	auipc	a4,0x3a
    8000f3ca:	c8073123          	sd	zero,-894(a4) # 80049048 <excpt+0x38>
    8000f3ce:	00f41023          	sh	a5,0(s0)
    8000f3d2:	0330000f          	fence	rw,rw
    8000f3d6:	400197b7          	lui	a5,0x40019
    8000f3da:	078a                	slli	a5,a5,0x2
    8000f3dc:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f3e0:	08200593          	li	a1,130
    8000f3e4:	0001a617          	auipc	a2,0x1a
    8000f3e8:	6a460613          	addi	a2,a2,1700 # 80029a88 <__func__.0+0x2ec8>
    8000f3ec:	00018517          	auipc	a0,0x18
    8000f3f0:	acc50513          	addi	a0,a0,-1332 # 80026eb8 <__func__.0+0x2f8>
    8000f3f4:	311150ef          	jal	80024f04 <printf>
    8000f3f8:	0003a797          	auipc	a5,0x3a
    8000f3fc:	c197c783          	lbu	a5,-999(a5) # 80049011 <excpt+0x1>
    8000f400:	00018597          	auipc	a1,0x18
    8000f404:	a9058593          	addi	a1,a1,-1392 # 80026e90 <__func__.0+0x2d0>
    8000f408:	c789                	beqz	a5,8000f412 <priv_change_4+0xa0>
    8000f40a:	6418                	ld	a4,8(s0)
    8000f40c:	47b5                	li	a5,13
    8000f40e:	0af70663          	beq	a4,a5,8000f4ba <priv_change_4+0x148>
    8000f412:	00018517          	auipc	a0,0x18
    8000f416:	abe50513          	addi	a0,a0,-1346 # 80026ed0 <__func__.0+0x310>
    8000f41a:	2eb150ef          	jal	80024f04 <printf>
    8000f41e:	0003a797          	auipc	a5,0x3a
    8000f422:	bf37c783          	lbu	a5,-1037(a5) # 80049011 <excpt+0x1>
    8000f426:	c789                	beqz	a5,8000f430 <priv_change_4+0xbe>
    8000f428:	6418                	ld	a4,8(s0)
    8000f42a:	47b5                	li	a5,13
    8000f42c:	04f70e63          	beq	a4,a5,8000f488 <priv_change_4+0x116>
    8000f430:	00018517          	auipc	a0,0x18
    8000f434:	aa850513          	addi	a0,a0,-1368 # 80026ed8 <__func__.0+0x318>
    8000f438:	2cd150ef          	jal	80024f04 <printf>
    8000f43c:	02900513          	li	a0,41
    8000f440:	0cf140ef          	jal	80023d0e <putchar>
    8000f444:	4529                	li	a0,10
    8000f446:	0c9140ef          	jal	80023d0e <putchar>
    8000f44a:	0003a497          	auipc	s1,0x3a
    8000f44e:	bc74c483          	lbu	s1,-1081(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000f452:	00018597          	auipc	a1,0x18
    8000f456:	a3e58593          	addi	a1,a1,-1474 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f45a:	c491                	beqz	s1,8000f466 <priv_change_4+0xf4>
    8000f45c:	6418                	ld	a4,8(s0)
    8000f45e:	47b5                	li	a5,13
    8000f460:	02f70c63          	beq	a4,a5,8000f498 <priv_change_4+0x126>
    8000f464:	4481                	li	s1,0
    TEST_END();
    8000f466:	00018517          	auipc	a0,0x18
    8000f46a:	ad250513          	addi	a0,a0,-1326 # 80026f38 <__func__.0+0x378>
    8000f46e:	297150ef          	jal	80024f04 <printf>
    8000f472:	4511                	li	a0,4
    8000f474:	f82f10ef          	jal	80000bf6 <goto_priv>
    8000f478:	834f20ef          	jal	800014ac <reset_state>
}
    8000f47c:	60e2                	ld	ra,24(sp)
    8000f47e:	6442                	ld	s0,16(sp)
    8000f480:	8526                	mv	a0,s1
    8000f482:	64a2                	ld	s1,8(sp)
    8000f484:	6105                	addi	sp,sp,32
    8000f486:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f488:	0003a717          	auipc	a4,0x3a
    8000f48c:	b8c72703          	lw	a4,-1140(a4) # 80049014 <excpt+0x4>
    8000f490:	4791                	li	a5,4
    8000f492:	f8f71fe3          	bne	a4,a5,8000f430 <priv_change_4+0xbe>
    8000f496:	b77d                	j	8000f444 <priv_change_4+0xd2>
    8000f498:	0003a717          	auipc	a4,0x3a
    8000f49c:	b7c72703          	lw	a4,-1156(a4) # 80049014 <excpt+0x4>
    8000f4a0:	4791                	li	a5,4
    TEST_END();
    8000f4a2:	00018597          	auipc	a1,0x18
    8000f4a6:	9de58593          	addi	a1,a1,-1570 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f4aa:	faf70ee3          	beq	a4,a5,8000f466 <priv_change_4+0xf4>
    8000f4ae:	4481                	li	s1,0
    TEST_END();
    8000f4b0:	00018597          	auipc	a1,0x18
    8000f4b4:	9e058593          	addi	a1,a1,-1568 # 80026e90 <__func__.0+0x2d0>
    8000f4b8:	b77d                	j	8000f466 <priv_change_4+0xf4>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000f4ba:	0003a717          	auipc	a4,0x3a
    8000f4be:	b5a72703          	lw	a4,-1190(a4) # 80049014 <excpt+0x4>
    8000f4c2:	4791                	li	a5,4
    8000f4c4:	00018597          	auipc	a1,0x18
    8000f4c8:	9bc58593          	addi	a1,a1,-1604 # 80026e80 <__func__.0+0x2c0>
    8000f4cc:	f4f703e3          	beq	a4,a5,8000f412 <priv_change_4+0xa0>
    8000f4d0:	00018597          	auipc	a1,0x18
    8000f4d4:	9c058593          	addi	a1,a1,-1600 # 80026e90 <__func__.0+0x2d0>
    8000f4d8:	bf2d                	j	8000f412 <priv_change_4+0xa0>

000000008000f4da <priv_change_5>:

bool priv_change_5(){
    8000f4da:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f4dc:	00016597          	auipc	a1,0x16
    8000f4e0:	57c58593          	addi	a1,a1,1404 # 80025a58 <__func__.10>
    8000f4e4:	00018517          	auipc	a0,0x18
    8000f4e8:	9bc50513          	addi	a0,a0,-1604 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_5(){
    8000f4ec:	e406                	sd	ra,8(sp)
    8000f4ee:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f4f0:	215150ef          	jal	80024f04 <printf>
    8000f4f4:	4529                	li	a0,10
    8000f4f6:	019140ef          	jal	80023d0e <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000f4fa:	4511                	li	a0,4
    8000f4fc:	efaf10ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000f500:	fadf10ef          	jal	800014ac <reset_state>
    CSRW(medeleg, 0); 
    8000f504:	30205073          	csrwi	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000f508:	0330000f          	fence	rw,rw
    8000f50c:	0003a417          	auipc	s0,0x3a
    8000f510:	b0440413          	addi	s0,s0,-1276 # 80049010 <excpt>
    8000f514:	4785                	li	a5,1
    8000f516:	0003a717          	auipc	a4,0x3a
    8000f51a:	b2073923          	sd	zero,-1230(a4) # 80049048 <excpt+0x38>
    8000f51e:	00f41023          	sh	a5,0(s0)
    8000f522:	0330000f          	fence	rw,rw
    asm volatile(
    8000f526:	00000073          	ecall
    ecall_1(); 
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000f52a:	08200593          	li	a1,130
    8000f52e:	0001a617          	auipc	a2,0x1a
    8000f532:	59a60613          	addi	a2,a2,1434 # 80029ac8 <__func__.0+0x2f08>
    8000f536:	00018517          	auipc	a0,0x18
    8000f53a:	98250513          	addi	a0,a0,-1662 # 80026eb8 <__func__.0+0x2f8>
    8000f53e:	1c7150ef          	jal	80024f04 <printf>
    8000f542:	6014                	ld	a3,0(s0)
    8000f544:	f0001737          	lui	a4,0xf0001
    8000f548:	0712                	slli	a4,a4,0x4
    8000f54a:	4785                	li	a5,1
    8000f54c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f550:	178a                	slli	a5,a5,0x22
    8000f552:	8f75                	and	a4,a4,a3
    8000f554:	10078793          	addi	a5,a5,256
    8000f558:	00018597          	auipc	a1,0x18
    8000f55c:	92858593          	addi	a1,a1,-1752 # 80026e80 <__func__.0+0x2c0>
    8000f560:	00f70663          	beq	a4,a5,8000f56c <priv_change_5+0x92>
    8000f564:	00018597          	auipc	a1,0x18
    8000f568:	92c58593          	addi	a1,a1,-1748 # 80026e90 <__func__.0+0x2d0>
    8000f56c:	00018517          	auipc	a0,0x18
    8000f570:	96450513          	addi	a0,a0,-1692 # 80026ed0 <__func__.0+0x310>
    8000f574:	191150ef          	jal	80024f04 <printf>
    8000f578:	0003a797          	auipc	a5,0x3a
    8000f57c:	a997c783          	lbu	a5,-1383(a5) # 80049011 <excpt+0x1>
    8000f580:	cb81                	beqz	a5,8000f590 <priv_change_5+0xb6>
    8000f582:	0003a717          	auipc	a4,0x3a
    8000f586:	a9272703          	lw	a4,-1390(a4) # 80049014 <excpt+0x4>
    8000f58a:	4791                	li	a5,4
    8000f58c:	00f70c63          	beq	a4,a5,8000f5a4 <priv_change_5+0xca>
    8000f590:	00018517          	auipc	a0,0x18
    8000f594:	94850513          	addi	a0,a0,-1720 # 80026ed8 <__func__.0+0x318>
    8000f598:	16d150ef          	jal	80024f04 <printf>
    8000f59c:	02900513          	li	a0,41
    8000f5a0:	76e140ef          	jal	80023d0e <putchar>
    8000f5a4:	4529                	li	a0,10
    8000f5a6:	768140ef          	jal	80023d0e <putchar>
    8000f5aa:	6014                	ld	a3,0(s0)
    8000f5ac:	f0001737          	lui	a4,0xf0001
    8000f5b0:	0712                	slli	a4,a4,0x4
    8000f5b2:	4785                	li	a5,1
    8000f5b4:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f5b8:	178a                	slli	a5,a5,0x22
    8000f5ba:	8f75                	and	a4,a4,a3
    8000f5bc:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 
    
    printf("niuh");
    8000f5c0:	0001a517          	auipc	a0,0x1a
    8000f5c4:	54050513          	addi	a0,a0,1344 # 80029b00 <__func__.0+0x2f40>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000f5c8:	02f70963          	beq	a4,a5,8000f5fa <priv_change_5+0x120>
    printf("niuh");
    8000f5cc:	139150ef          	jal	80024f04 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000f5d0:	4401                	li	s0,0

    TEST_END();
    8000f5d2:	00018597          	auipc	a1,0x18
    8000f5d6:	8be58593          	addi	a1,a1,-1858 # 80026e90 <__func__.0+0x2d0>
    8000f5da:	00018517          	auipc	a0,0x18
    8000f5de:	95e50513          	addi	a0,a0,-1698 # 80026f38 <__func__.0+0x378>
    8000f5e2:	123150ef          	jal	80024f04 <printf>
    8000f5e6:	4511                	li	a0,4
    8000f5e8:	e0ef10ef          	jal	80000bf6 <goto_priv>
    8000f5ec:	ec1f10ef          	jal	800014ac <reset_state>
}
    8000f5f0:	60a2                	ld	ra,8(sp)
    8000f5f2:	8522                	mv	a0,s0
    8000f5f4:	6402                	ld	s0,0(sp)
    8000f5f6:	0141                	addi	sp,sp,16
    8000f5f8:	8082                	ret
    printf("niuh");
    8000f5fa:	10b150ef          	jal	80024f04 <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000f5fe:	4405                	li	s0,1
    TEST_END();
    8000f600:	00018597          	auipc	a1,0x18
    8000f604:	88058593          	addi	a1,a1,-1920 # 80026e80 <__func__.0+0x2c0>
    8000f608:	bfc9                	j	8000f5da <priv_change_5+0x100>

000000008000f60a <priv_change_6>:

bool priv_change_6(){
    8000f60a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f60c:	00016597          	auipc	a1,0x16
    8000f610:	45c58593          	addi	a1,a1,1116 # 80025a68 <__func__.9>
    8000f614:	00018517          	auipc	a0,0x18
    8000f618:	88c50513          	addi	a0,a0,-1908 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_6(){
    8000f61c:	e406                	sd	ra,8(sp)
    8000f61e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f620:	0e5150ef          	jal	80024f04 <printf>
    8000f624:	4529                	li	a0,10
    8000f626:	6e8140ef          	jal	80023d0e <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000f62a:	4511                	li	a0,4
    8000f62c:	dcaf10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,0);         
    8000f630:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_HU); 
    8000f634:	4505                	li	a0,1
    8000f636:	dc0f10ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000f63a:	0330000f          	fence	rw,rw
    8000f63e:	0003a417          	auipc	s0,0x3a
    8000f642:	9d240413          	addi	s0,s0,-1582 # 80049010 <excpt>
    8000f646:	4785                	li	a5,1
    8000f648:	0003a717          	auipc	a4,0x3a
    8000f64c:	a0073023          	sd	zero,-1536(a4) # 80049048 <excpt+0x38>
    8000f650:	00f41023          	sh	a5,0(s0)
    8000f654:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000f658:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000f65c:	08200593          	li	a1,130
    8000f660:	0001a617          	auipc	a2,0x1a
    8000f664:	4a860613          	addi	a2,a2,1192 # 80029b08 <__func__.0+0x2f48>
    8000f668:	00018517          	auipc	a0,0x18
    8000f66c:	85050513          	addi	a0,a0,-1968 # 80026eb8 <__func__.0+0x2f8>
    8000f670:	095150ef          	jal	80024f04 <printf>
    8000f674:	6014                	ld	a3,0(s0)
    8000f676:	f0001737          	lui	a4,0xf0001
    8000f67a:	0712                	slli	a4,a4,0x4
    8000f67c:	4785                	li	a5,1
    8000f67e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f682:	178a                	slli	a5,a5,0x22
    8000f684:	8f75                	and	a4,a4,a3
    8000f686:	10078793          	addi	a5,a5,256
    8000f68a:	00017597          	auipc	a1,0x17
    8000f68e:	7f658593          	addi	a1,a1,2038 # 80026e80 <__func__.0+0x2c0>
    8000f692:	00f70663          	beq	a4,a5,8000f69e <priv_change_6+0x94>
    8000f696:	00017597          	auipc	a1,0x17
    8000f69a:	7fa58593          	addi	a1,a1,2042 # 80026e90 <__func__.0+0x2d0>
    8000f69e:	00018517          	auipc	a0,0x18
    8000f6a2:	83250513          	addi	a0,a0,-1998 # 80026ed0 <__func__.0+0x310>
    8000f6a6:	05f150ef          	jal	80024f04 <printf>
    8000f6aa:	0003a797          	auipc	a5,0x3a
    8000f6ae:	9677c783          	lbu	a5,-1689(a5) # 80049011 <excpt+0x1>
    8000f6b2:	cb81                	beqz	a5,8000f6c2 <priv_change_6+0xb8>
    8000f6b4:	0003a717          	auipc	a4,0x3a
    8000f6b8:	96072703          	lw	a4,-1696(a4) # 80049014 <excpt+0x4>
    8000f6bc:	4791                	li	a5,4
    8000f6be:	00f70c63          	beq	a4,a5,8000f6d6 <priv_change_6+0xcc>
    8000f6c2:	00018517          	auipc	a0,0x18
    8000f6c6:	81650513          	addi	a0,a0,-2026 # 80026ed8 <__func__.0+0x318>
    8000f6ca:	03b150ef          	jal	80024f04 <printf>
    8000f6ce:	02900513          	li	a0,41
    8000f6d2:	63c140ef          	jal	80023d0e <putchar>
    8000f6d6:	4529                	li	a0,10
    8000f6d8:	636140ef          	jal	80023d0e <putchar>
    8000f6dc:	6014                	ld	a3,0(s0)
    8000f6de:	f0001737          	lui	a4,0xf0001
    8000f6e2:	0712                	slli	a4,a4,0x4
    8000f6e4:	4785                	li	a5,1
    8000f6e6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f6ea:	178a                	slli	a5,a5,0x22
    8000f6ec:	8f75                	and	a4,a4,a3
    8000f6ee:	10078793          	addi	a5,a5,256
    8000f6f2:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000f6f4:	00017597          	auipc	a1,0x17
    8000f6f8:	79c58593          	addi	a1,a1,1948 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000f6fc:	00f71763          	bne	a4,a5,8000f70a <priv_change_6+0x100>
    8000f700:	4405                	li	s0,1
    TEST_END();
    8000f702:	00017597          	auipc	a1,0x17
    8000f706:	77e58593          	addi	a1,a1,1918 # 80026e80 <__func__.0+0x2c0>
    8000f70a:	00018517          	auipc	a0,0x18
    8000f70e:	82e50513          	addi	a0,a0,-2002 # 80026f38 <__func__.0+0x378>
    8000f712:	7f2150ef          	jal	80024f04 <printf>
    8000f716:	4511                	li	a0,4
    8000f718:	cdef10ef          	jal	80000bf6 <goto_priv>
    8000f71c:	d91f10ef          	jal	800014ac <reset_state>
}
    8000f720:	60a2                	ld	ra,8(sp)
    8000f722:	8522                	mv	a0,s0
    8000f724:	6402                	ld	s0,0(sp)
    8000f726:	0141                	addi	sp,sp,16
    8000f728:	8082                	ret

000000008000f72a <priv_change_7>:

bool priv_change_7(){
    8000f72a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f72c:	00016597          	auipc	a1,0x16
    8000f730:	34c58593          	addi	a1,a1,844 # 80025a78 <__func__.8>
    8000f734:	00017517          	auipc	a0,0x17
    8000f738:	76c50513          	addi	a0,a0,1900 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_7(){
    8000f73c:	e406                	sd	ra,8(sp)
    8000f73e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f740:	7c4150ef          	jal	80024f04 <printf>
    8000f744:	4529                	li	a0,10
    8000f746:	5c8140ef          	jal	80023d0e <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000f74a:	4511                	li	a0,4
    8000f74c:	caaf10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,0);      
    8000f750:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_VU);     
    8000f754:	4501                	li	a0,0
    8000f756:	ca0f10ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000f75a:	0330000f          	fence	rw,rw
    8000f75e:	0003a417          	auipc	s0,0x3a
    8000f762:	8b240413          	addi	s0,s0,-1870 # 80049010 <excpt>
    8000f766:	4785                	li	a5,1
    8000f768:	0003a717          	auipc	a4,0x3a
    8000f76c:	8e073023          	sd	zero,-1824(a4) # 80049048 <excpt+0x38>
    8000f770:	00f41023          	sh	a5,0(s0)
    8000f774:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000f778:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000f77c:	08200593          	li	a1,130
    8000f780:	0001a617          	auipc	a2,0x1a
    8000f784:	3c860613          	addi	a2,a2,968 # 80029b48 <__func__.0+0x2f88>
    8000f788:	00017517          	auipc	a0,0x17
    8000f78c:	73050513          	addi	a0,a0,1840 # 80026eb8 <__func__.0+0x2f8>
    8000f790:	774150ef          	jal	80024f04 <printf>
    8000f794:	6014                	ld	a3,0(s0)
    8000f796:	f0001737          	lui	a4,0xf0001
    8000f79a:	0712                	slli	a4,a4,0x4
    8000f79c:	4785                	li	a5,1
    8000f79e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f7a2:	178a                	slli	a5,a5,0x22
    8000f7a4:	8f75                	and	a4,a4,a3
    8000f7a6:	10078793          	addi	a5,a5,256
    8000f7aa:	00017597          	auipc	a1,0x17
    8000f7ae:	6d658593          	addi	a1,a1,1750 # 80026e80 <__func__.0+0x2c0>
    8000f7b2:	00f70663          	beq	a4,a5,8000f7be <priv_change_7+0x94>
    8000f7b6:	00017597          	auipc	a1,0x17
    8000f7ba:	6da58593          	addi	a1,a1,1754 # 80026e90 <__func__.0+0x2d0>
    8000f7be:	00017517          	auipc	a0,0x17
    8000f7c2:	71250513          	addi	a0,a0,1810 # 80026ed0 <__func__.0+0x310>
    8000f7c6:	73e150ef          	jal	80024f04 <printf>
    8000f7ca:	0003a797          	auipc	a5,0x3a
    8000f7ce:	8477c783          	lbu	a5,-1977(a5) # 80049011 <excpt+0x1>
    8000f7d2:	cb81                	beqz	a5,8000f7e2 <priv_change_7+0xb8>
    8000f7d4:	0003a717          	auipc	a4,0x3a
    8000f7d8:	84072703          	lw	a4,-1984(a4) # 80049014 <excpt+0x4>
    8000f7dc:	4791                	li	a5,4
    8000f7de:	00f70c63          	beq	a4,a5,8000f7f6 <priv_change_7+0xcc>
    8000f7e2:	00017517          	auipc	a0,0x17
    8000f7e6:	6f650513          	addi	a0,a0,1782 # 80026ed8 <__func__.0+0x318>
    8000f7ea:	71a150ef          	jal	80024f04 <printf>
    8000f7ee:	02900513          	li	a0,41
    8000f7f2:	51c140ef          	jal	80023d0e <putchar>
    8000f7f6:	4529                	li	a0,10
    8000f7f8:	516140ef          	jal	80023d0e <putchar>
    8000f7fc:	6014                	ld	a3,0(s0)
    8000f7fe:	f0001737          	lui	a4,0xf0001
    8000f802:	0712                	slli	a4,a4,0x4
    8000f804:	4785                	li	a5,1
    8000f806:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f80a:	178a                	slli	a5,a5,0x22
    8000f80c:	8f75                	and	a4,a4,a3
    8000f80e:	10078793          	addi	a5,a5,256
    8000f812:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000f814:	00017597          	auipc	a1,0x17
    8000f818:	67c58593          	addi	a1,a1,1660 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000f81c:	00f71763          	bne	a4,a5,8000f82a <priv_change_7+0x100>
    8000f820:	4405                	li	s0,1
    TEST_END();
    8000f822:	00017597          	auipc	a1,0x17
    8000f826:	65e58593          	addi	a1,a1,1630 # 80026e80 <__func__.0+0x2c0>
    8000f82a:	00017517          	auipc	a0,0x17
    8000f82e:	70e50513          	addi	a0,a0,1806 # 80026f38 <__func__.0+0x378>
    8000f832:	6d2150ef          	jal	80024f04 <printf>
    8000f836:	4511                	li	a0,4
    8000f838:	bbef10ef          	jal	80000bf6 <goto_priv>
    8000f83c:	c71f10ef          	jal	800014ac <reset_state>
}
    8000f840:	60a2                	ld	ra,8(sp)
    8000f842:	8522                	mv	a0,s0
    8000f844:	6402                	ld	s0,0(sp)
    8000f846:	0141                	addi	sp,sp,16
    8000f848:	8082                	ret

000000008000f84a <priv_change_8>:

bool priv_change_8(){
    8000f84a:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000f84c:	00016597          	auipc	a1,0x16
    8000f850:	23c58593          	addi	a1,a1,572 # 80025a88 <__func__.7>
    8000f854:	00017517          	auipc	a0,0x17
    8000f858:	64c50513          	addi	a0,a0,1612 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_8(){
    8000f85c:	e406                	sd	ra,8(sp)
    8000f85e:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f860:	6a4150ef          	jal	80024f04 <printf>
    8000f864:	4529                	li	a0,10
    8000f866:	4a8140ef          	jal	80023d0e <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000f86a:	4511                	li	a0,4
    8000f86c:	b8af10ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000f870:	c3df10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,0);
    8000f874:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000f878:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000f87c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f880:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VU);     
    8000f884:	4501                	li	a0,0
    8000f886:	b70f10ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f88a:	0330000f          	fence	rw,rw
    8000f88e:	00039417          	auipc	s0,0x39
    8000f892:	78240413          	addi	s0,s0,1922 # 80049010 <excpt>
    8000f896:	4785                	li	a5,1
    8000f898:	00039717          	auipc	a4,0x39
    8000f89c:	7a073823          	sd	zero,1968(a4) # 80049048 <excpt+0x38>
    8000f8a0:	00f41023          	sh	a5,0(s0)
    8000f8a4:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    8000f8a8:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f8ac:	08200593          	li	a1,130
    8000f8b0:	0001a617          	auipc	a2,0x1a
    8000f8b4:	2d860613          	addi	a2,a2,728 # 80029b88 <__func__.0+0x2fc8>
    8000f8b8:	00017517          	auipc	a0,0x17
    8000f8bc:	60050513          	addi	a0,a0,1536 # 80026eb8 <__func__.0+0x2f8>
    8000f8c0:	644150ef          	jal	80024f04 <printf>
    8000f8c4:	6014                	ld	a3,0(s0)
    8000f8c6:	f0001737          	lui	a4,0xf0001
    8000f8ca:	0712                	slli	a4,a4,0x4
    8000f8cc:	4785                	li	a5,1
    8000f8ce:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f8d2:	178a                	slli	a5,a5,0x22
    8000f8d4:	8f75                	and	a4,a4,a3
    8000f8d6:	10078793          	addi	a5,a5,256
    8000f8da:	00017597          	auipc	a1,0x17
    8000f8de:	5b658593          	addi	a1,a1,1462 # 80026e90 <__func__.0+0x2d0>
    8000f8e2:	08f70963          	beq	a4,a5,8000f974 <priv_change_8+0x12a>
    8000f8e6:	00017517          	auipc	a0,0x17
    8000f8ea:	5ea50513          	addi	a0,a0,1514 # 80026ed0 <__func__.0+0x310>
    8000f8ee:	616150ef          	jal	80024f04 <printf>
    8000f8f2:	00039797          	auipc	a5,0x39
    8000f8f6:	71f7c783          	lbu	a5,1823(a5) # 80049011 <excpt+0x1>
    8000f8fa:	cb81                	beqz	a5,8000f90a <priv_change_8+0xc0>
    8000f8fc:	00039717          	auipc	a4,0x39
    8000f900:	71872703          	lw	a4,1816(a4) # 80049014 <excpt+0x4>
    8000f904:	4791                	li	a5,4
    8000f906:	06f70163          	beq	a4,a5,8000f968 <priv_change_8+0x11e>
    8000f90a:	00017517          	auipc	a0,0x17
    8000f90e:	5ce50513          	addi	a0,a0,1486 # 80026ed8 <__func__.0+0x318>
    8000f912:	5f2150ef          	jal	80024f04 <printf>
    8000f916:	02900513          	li	a0,41
    8000f91a:	3f4140ef          	jal	80023d0e <putchar>
    8000f91e:	4529                	li	a0,10
    8000f920:	3ee140ef          	jal	80023d0e <putchar>
    8000f924:	6014                	ld	a3,0(s0)
    8000f926:	f0001737          	lui	a4,0xf0001
    8000f92a:	0712                	slli	a4,a4,0x4
    8000f92c:	4785                	li	a5,1
    8000f92e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f932:	178a                	slli	a5,a5,0x22
    8000f934:	8f75                	and	a4,a4,a3
    8000f936:	10078793          	addi	a5,a5,256
    8000f93a:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000f93c:	00017597          	auipc	a1,0x17
    8000f940:	55458593          	addi	a1,a1,1364 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f944:	04f70663          	beq	a4,a5,8000f990 <priv_change_8+0x146>
    TEST_END();
    8000f948:	00017517          	auipc	a0,0x17
    8000f94c:	5f050513          	addi	a0,a0,1520 # 80026f38 <__func__.0+0x378>
    8000f950:	5b4150ef          	jal	80024f04 <printf>
    8000f954:	4511                	li	a0,4
    8000f956:	aa0f10ef          	jal	80000bf6 <goto_priv>
    8000f95a:	b53f10ef          	jal	800014ac <reset_state>
}
    8000f95e:	60a2                	ld	ra,8(sp)
    8000f960:	8522                	mv	a0,s0
    8000f962:	6402                	ld	s0,0(sp)
    8000f964:	0141                	addi	sp,sp,16
    8000f966:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000f968:	00022797          	auipc	a5,0x22
    8000f96c:	96c7a783          	lw	a5,-1684(a5) # 800312d4 <curr_priv>
    8000f970:	d7dd                	beqz	a5,8000f91e <priv_change_8+0xd4>
    8000f972:	bf61                	j	8000f90a <priv_change_8+0xc0>
    8000f974:	00022797          	auipc	a5,0x22
    8000f978:	9607a783          	lw	a5,-1696(a5) # 800312d4 <curr_priv>
    8000f97c:	00017597          	auipc	a1,0x17
    8000f980:	50458593          	addi	a1,a1,1284 # 80026e80 <__func__.0+0x2c0>
    8000f984:	d3ad                	beqz	a5,8000f8e6 <priv_change_8+0x9c>
    8000f986:	00017597          	auipc	a1,0x17
    8000f98a:	50a58593          	addi	a1,a1,1290 # 80026e90 <__func__.0+0x2d0>
    8000f98e:	bfa1                	j	8000f8e6 <priv_change_8+0x9c>
    8000f990:	00022797          	auipc	a5,0x22
    8000f994:	9447a783          	lw	a5,-1724(a5) # 800312d4 <curr_priv>
    8000f998:	fbc5                	bnez	a5,8000f948 <priv_change_8+0xfe>
    8000f99a:	4405                	li	s0,1
    TEST_END();
    8000f99c:	00017597          	auipc	a1,0x17
    8000f9a0:	4e458593          	addi	a1,a1,1252 # 80026e80 <__func__.0+0x2c0>
    8000f9a4:	b755                	j	8000f948 <priv_change_8+0xfe>

000000008000f9a6 <priv_change_9>:



bool priv_change_9(){
    8000f9a6:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f9a8:	00016597          	auipc	a1,0x16
    8000f9ac:	0f058593          	addi	a1,a1,240 # 80025a98 <__func__.6>
    8000f9b0:	00017517          	auipc	a0,0x17
    8000f9b4:	4f050513          	addi	a0,a0,1264 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_9(){
    8000f9b8:	e406                	sd	ra,8(sp)
    8000f9ba:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f9bc:	548150ef          	jal	80024f04 <printf>
    8000f9c0:	4529                	li	a0,10
    8000f9c2:	34c140ef          	jal	80023d0e <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f9c6:	4511                	li	a0,4
    8000f9c8:	a2ef10ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f9cc:	57fd                	li	a5,-1
    8000f9ce:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f9d2:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f9d6:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f9da:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VU);     
    8000f9de:	4501                	li	a0,0
    8000f9e0:	a16f10ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f9e4:	0330000f          	fence	rw,rw
    8000f9e8:	00039417          	auipc	s0,0x39
    8000f9ec:	62840413          	addi	s0,s0,1576 # 80049010 <excpt>
    8000f9f0:	4785                	li	a5,1
    8000f9f2:	00039717          	auipc	a4,0x39
    8000f9f6:	64073b23          	sd	zero,1622(a4) # 80049048 <excpt+0x38>
    8000f9fa:	00f41023          	sh	a5,0(s0)
    8000f9fe:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000fa02:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fa06:	08200593          	li	a1,130
    8000fa0a:	0001a617          	auipc	a2,0x1a
    8000fa0e:	1ee60613          	addi	a2,a2,494 # 80029bf8 <__func__.0+0x3038>
    8000fa12:	00017517          	auipc	a0,0x17
    8000fa16:	4a650513          	addi	a0,a0,1190 # 80026eb8 <__func__.0+0x2f8>
    8000fa1a:	4ea150ef          	jal	80024f04 <printf>
    8000fa1e:	6014                	ld	a3,0(s0)
    8000fa20:	f0001737          	lui	a4,0xf0001
    8000fa24:	0712                	slli	a4,a4,0x4
    8000fa26:	4785                	li	a5,1
    8000fa28:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fa2c:	1786                	slli	a5,a5,0x21
    8000fa2e:	8f75                	and	a4,a4,a3
    8000fa30:	10078793          	addi	a5,a5,256
    8000fa34:	00017597          	auipc	a1,0x17
    8000fa38:	45c58593          	addi	a1,a1,1116 # 80026e90 <__func__.0+0x2d0>
    8000fa3c:	08f70963          	beq	a4,a5,8000face <priv_change_9+0x128>
    8000fa40:	00017517          	auipc	a0,0x17
    8000fa44:	49050513          	addi	a0,a0,1168 # 80026ed0 <__func__.0+0x310>
    8000fa48:	4bc150ef          	jal	80024f04 <printf>
    8000fa4c:	00039797          	auipc	a5,0x39
    8000fa50:	5c57c783          	lbu	a5,1477(a5) # 80049011 <excpt+0x1>
    8000fa54:	cb81                	beqz	a5,8000fa64 <priv_change_9+0xbe>
    8000fa56:	00039717          	auipc	a4,0x39
    8000fa5a:	5be72703          	lw	a4,1470(a4) # 80049014 <excpt+0x4>
    8000fa5e:	4789                	li	a5,2
    8000fa60:	06f70163          	beq	a4,a5,8000fac2 <priv_change_9+0x11c>
    8000fa64:	00017517          	auipc	a0,0x17
    8000fa68:	47450513          	addi	a0,a0,1140 # 80026ed8 <__func__.0+0x318>
    8000fa6c:	498150ef          	jal	80024f04 <printf>
    8000fa70:	02900513          	li	a0,41
    8000fa74:	29a140ef          	jal	80023d0e <putchar>
    8000fa78:	4529                	li	a0,10
    8000fa7a:	294140ef          	jal	80023d0e <putchar>
    8000fa7e:	6014                	ld	a3,0(s0)
    8000fa80:	f0001737          	lui	a4,0xf0001
    8000fa84:	0712                	slli	a4,a4,0x4
    8000fa86:	4785                	li	a5,1
    8000fa88:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fa8c:	1786                	slli	a5,a5,0x21
    8000fa8e:	8f75                	and	a4,a4,a3
    8000fa90:	10078793          	addi	a5,a5,256
    8000fa94:	4401                	li	s0,0
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VU
    );


    TEST_END();
    8000fa96:	00017597          	auipc	a1,0x17
    8000fa9a:	3fa58593          	addi	a1,a1,1018 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fa9e:	04f70663          	beq	a4,a5,8000faea <priv_change_9+0x144>
    TEST_END();
    8000faa2:	00017517          	auipc	a0,0x17
    8000faa6:	49650513          	addi	a0,a0,1174 # 80026f38 <__func__.0+0x378>
    8000faaa:	45a150ef          	jal	80024f04 <printf>
    8000faae:	4511                	li	a0,4
    8000fab0:	946f10ef          	jal	80000bf6 <goto_priv>
    8000fab4:	9f9f10ef          	jal	800014ac <reset_state>
}
    8000fab8:	60a2                	ld	ra,8(sp)
    8000faba:	8522                	mv	a0,s0
    8000fabc:	6402                	ld	s0,0(sp)
    8000fabe:	0141                	addi	sp,sp,16
    8000fac0:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fac2:	00022797          	auipc	a5,0x22
    8000fac6:	8127a783          	lw	a5,-2030(a5) # 800312d4 <curr_priv>
    8000faca:	d7dd                	beqz	a5,8000fa78 <priv_change_9+0xd2>
    8000facc:	bf61                	j	8000fa64 <priv_change_9+0xbe>
    8000face:	00022797          	auipc	a5,0x22
    8000fad2:	8067a783          	lw	a5,-2042(a5) # 800312d4 <curr_priv>
    8000fad6:	00017597          	auipc	a1,0x17
    8000fada:	3aa58593          	addi	a1,a1,938 # 80026e80 <__func__.0+0x2c0>
    8000fade:	d3ad                	beqz	a5,8000fa40 <priv_change_9+0x9a>
    8000fae0:	00017597          	auipc	a1,0x17
    8000fae4:	3b058593          	addi	a1,a1,944 # 80026e90 <__func__.0+0x2d0>
    8000fae8:	bfa1                	j	8000fa40 <priv_change_9+0x9a>
    8000faea:	00021797          	auipc	a5,0x21
    8000faee:	7ea7a783          	lw	a5,2026(a5) # 800312d4 <curr_priv>
    8000faf2:	fbc5                	bnez	a5,8000faa2 <priv_change_9+0xfc>
    8000faf4:	4405                	li	s0,1
    TEST_END();
    8000faf6:	00017597          	auipc	a1,0x17
    8000fafa:	38a58593          	addi	a1,a1,906 # 80026e80 <__func__.0+0x2c0>
    8000fafe:	b755                	j	8000faa2 <priv_change_9+0xfc>

000000008000fb00 <priv_change_10>:


bool priv_change_10(){
    8000fb00:	1101                	addi	sp,sp,-32
    TEST_START();
    8000fb02:	00016597          	auipc	a1,0x16
    8000fb06:	fa658593          	addi	a1,a1,-90 # 80025aa8 <__func__.5>
    8000fb0a:	00017517          	auipc	a0,0x17
    8000fb0e:	39650513          	addi	a0,a0,918 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_10(){
    8000fb12:	ec06                	sd	ra,24(sp)
    8000fb14:	e822                	sd	s0,16(sp)
    8000fb16:	e426                	sd	s1,8(sp)
    TEST_START();
    8000fb18:	3ec150ef          	jal	80024f04 <printf>
    8000fb1c:	4529                	li	a0,10
    8000fb1e:	1f0140ef          	jal	80023d0e <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000fb22:	4511                	li	a0,4
    8000fb24:	8d2f10ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000fb28:	985f10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000fb2c:	57fd                	li	a5,-1
    8000fb2e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fb32:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000fb36:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000fb3a:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    8000fb3e:	4505                	li	a0,1
    8000fb40:	8b6f10ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000fb44:	0330000f          	fence	rw,rw
    8000fb48:	00039417          	auipc	s0,0x39
    8000fb4c:	4c840413          	addi	s0,s0,1224 # 80049010 <excpt>
    8000fb50:	4485                	li	s1,1
    8000fb52:	00039797          	auipc	a5,0x39
    8000fb56:	4e07bb23          	sd	zero,1270(a5) # 80049048 <excpt+0x38>
    8000fb5a:	00941023          	sh	s1,0(s0)
    8000fb5e:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000fb62:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fb66:	08200593          	li	a1,130
    8000fb6a:	0001a617          	auipc	a2,0x1a
    8000fb6e:	0fe60613          	addi	a2,a2,254 # 80029c68 <__func__.0+0x30a8>
    8000fb72:	00017517          	auipc	a0,0x17
    8000fb76:	34650513          	addi	a0,a0,838 # 80026eb8 <__func__.0+0x2f8>
    8000fb7a:	38a150ef          	jal	80024f04 <printf>
    8000fb7e:	6014                	ld	a3,0(s0)
    8000fb80:	f0001737          	lui	a4,0xf0001
    8000fb84:	0712                	slli	a4,a4,0x4
    8000fb86:	478d                	li	a5,3
    8000fb88:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fb8c:	1782                	slli	a5,a5,0x20
    8000fb8e:	8f75                	and	a4,a4,a3
    8000fb90:	10078793          	addi	a5,a5,256
    8000fb94:	00017597          	auipc	a1,0x17
    8000fb98:	2fc58593          	addi	a1,a1,764 # 80026e90 <__func__.0+0x2d0>
    8000fb9c:	08f70c63          	beq	a4,a5,8000fc34 <priv_change_10+0x134>
    8000fba0:	00017517          	auipc	a0,0x17
    8000fba4:	33050513          	addi	a0,a0,816 # 80026ed0 <__func__.0+0x310>
    8000fba8:	35c150ef          	jal	80024f04 <printf>
    8000fbac:	00039797          	auipc	a5,0x39
    8000fbb0:	4657c783          	lbu	a5,1125(a5) # 80049011 <excpt+0x1>
    8000fbb4:	cb81                	beqz	a5,8000fbc4 <priv_change_10+0xc4>
    8000fbb6:	00039717          	auipc	a4,0x39
    8000fbba:	45e72703          	lw	a4,1118(a4) # 80049014 <excpt+0x4>
    8000fbbe:	478d                	li	a5,3
    8000fbc0:	06f70263          	beq	a4,a5,8000fc24 <priv_change_10+0x124>
    8000fbc4:	00017517          	auipc	a0,0x17
    8000fbc8:	31450513          	addi	a0,a0,788 # 80026ed8 <__func__.0+0x318>
    8000fbcc:	338150ef          	jal	80024f04 <printf>
    8000fbd0:	02900513          	li	a0,41
    8000fbd4:	13a140ef          	jal	80023d0e <putchar>
    8000fbd8:	4529                	li	a0,10
    8000fbda:	134140ef          	jal	80023d0e <putchar>
    8000fbde:	6014                	ld	a3,0(s0)
    8000fbe0:	f0001737          	lui	a4,0xf0001
    8000fbe4:	0712                	slli	a4,a4,0x4
    8000fbe6:	478d                	li	a5,3
    8000fbe8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fbec:	1782                	slli	a5,a5,0x20
    8000fbee:	8f75                	and	a4,a4,a3
    8000fbf0:	10078793          	addi	a5,a5,256
    8000fbf4:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    TEST_END();
    8000fbf6:	00017597          	auipc	a1,0x17
    8000fbfa:	29a58593          	addi	a1,a1,666 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fbfe:	04f70a63          	beq	a4,a5,8000fc52 <priv_change_10+0x152>
    TEST_END();
    8000fc02:	00017517          	auipc	a0,0x17
    8000fc06:	33650513          	addi	a0,a0,822 # 80026f38 <__func__.0+0x378>
    8000fc0a:	2fa150ef          	jal	80024f04 <printf>
    8000fc0e:	4511                	li	a0,4
    8000fc10:	fe7f00ef          	jal	80000bf6 <goto_priv>
    8000fc14:	899f10ef          	jal	800014ac <reset_state>
}
    8000fc18:	60e2                	ld	ra,24(sp)
    8000fc1a:	8522                	mv	a0,s0
    8000fc1c:	6442                	ld	s0,16(sp)
    8000fc1e:	64a2                	ld	s1,8(sp)
    8000fc20:	6105                	addi	sp,sp,32
    8000fc22:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fc24:	00021717          	auipc	a4,0x21
    8000fc28:	6b072703          	lw	a4,1712(a4) # 800312d4 <curr_priv>
    8000fc2c:	4785                	li	a5,1
    8000fc2e:	f8f71be3          	bne	a4,a5,8000fbc4 <priv_change_10+0xc4>
    8000fc32:	b75d                	j	8000fbd8 <priv_change_10+0xd8>
    8000fc34:	00021797          	auipc	a5,0x21
    8000fc38:	6a07a783          	lw	a5,1696(a5) # 800312d4 <curr_priv>
    8000fc3c:	00017597          	auipc	a1,0x17
    8000fc40:	24458593          	addi	a1,a1,580 # 80026e80 <__func__.0+0x2c0>
    8000fc44:	f4978ee3          	beq	a5,s1,8000fba0 <priv_change_10+0xa0>
    8000fc48:	00017597          	auipc	a1,0x17
    8000fc4c:	24858593          	addi	a1,a1,584 # 80026e90 <__func__.0+0x2d0>
    8000fc50:	bf81                	j	8000fba0 <priv_change_10+0xa0>
    8000fc52:	00021797          	auipc	a5,0x21
    8000fc56:	6827a783          	lw	a5,1666(a5) # 800312d4 <curr_priv>
    8000fc5a:	4705                	li	a4,1
    8000fc5c:	fae793e3          	bne	a5,a4,8000fc02 <priv_change_10+0x102>
    8000fc60:	843e                	mv	s0,a5
    TEST_END();
    8000fc62:	00017597          	auipc	a1,0x17
    8000fc66:	21e58593          	addi	a1,a1,542 # 80026e80 <__func__.0+0x2c0>
    8000fc6a:	bf61                	j	8000fc02 <priv_change_10+0x102>

000000008000fc6c <priv_change_11>:


bool priv_change_11(){
    8000fc6c:	1141                	addi	sp,sp,-16
    TEST_START();
    8000fc6e:	00016597          	auipc	a1,0x16
    8000fc72:	e4a58593          	addi	a1,a1,-438 # 80025ab8 <__func__.4>
    8000fc76:	00017517          	auipc	a0,0x17
    8000fc7a:	22a50513          	addi	a0,a0,554 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_11(){
    8000fc7e:	e406                	sd	ra,8(sp)
    8000fc80:	e022                	sd	s0,0(sp)
    TEST_START();
    8000fc82:	282150ef          	jal	80024f04 <printf>
    8000fc86:	4529                	li	a0,10
    8000fc88:	086140ef          	jal	80023d0e <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000fc8c:	4511                	li	a0,4
    8000fc8e:	f69f00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000fc92:	81bf10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000fc96:	57fd                	li	a5,-1
    8000fc98:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fc9c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000fca0:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000fca4:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000fca8:	4509                	li	a0,2
    8000fcaa:	f4df00ef          	jal	80000bf6 <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000fcae:	0330000f          	fence	rw,rw
    8000fcb2:	00039417          	auipc	s0,0x39
    8000fcb6:	35e40413          	addi	s0,s0,862 # 80049010 <excpt>
    8000fcba:	4785                	li	a5,1
    8000fcbc:	00039717          	auipc	a4,0x39
    8000fcc0:	38073623          	sd	zero,908(a4) # 80049048 <excpt+0x38>
    8000fcc4:	00f41023          	sh	a5,0(s0)
    8000fcc8:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    8000fccc:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fcd0:	08200593          	li	a1,130
    8000fcd4:	0001a617          	auipc	a2,0x1a
    8000fcd8:	00460613          	addi	a2,a2,4 # 80029cd8 <__func__.0+0x3118>
    8000fcdc:	00017517          	auipc	a0,0x17
    8000fce0:	1dc50513          	addi	a0,a0,476 # 80026eb8 <__func__.0+0x2f8>
    8000fce4:	220150ef          	jal	80024f04 <printf>
    8000fce8:	6014                	ld	a3,0(s0)
    8000fcea:	f0001737          	lui	a4,0xf0001
    8000fcee:	0712                	slli	a4,a4,0x4
    8000fcf0:	4785                	li	a5,1
    8000fcf2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fcf6:	1786                	slli	a5,a5,0x21
    8000fcf8:	8f75                	and	a4,a4,a3
    8000fcfa:	10078793          	addi	a5,a5,256
    8000fcfe:	00017597          	auipc	a1,0x17
    8000fd02:	18258593          	addi	a1,a1,386 # 80026e80 <__func__.0+0x2c0>
    8000fd06:	00f70663          	beq	a4,a5,8000fd12 <priv_change_11+0xa6>
    8000fd0a:	00017597          	auipc	a1,0x17
    8000fd0e:	18658593          	addi	a1,a1,390 # 80026e90 <__func__.0+0x2d0>
    8000fd12:	00017517          	auipc	a0,0x17
    8000fd16:	1be50513          	addi	a0,a0,446 # 80026ed0 <__func__.0+0x310>
    8000fd1a:	1ea150ef          	jal	80024f04 <printf>
    8000fd1e:	00039797          	auipc	a5,0x39
    8000fd22:	2f37c783          	lbu	a5,755(a5) # 80049011 <excpt+0x1>
    8000fd26:	cb81                	beqz	a5,8000fd36 <priv_change_11+0xca>
    8000fd28:	00039717          	auipc	a4,0x39
    8000fd2c:	2ec72703          	lw	a4,748(a4) # 80049014 <excpt+0x4>
    8000fd30:	4789                	li	a5,2
    8000fd32:	00f70c63          	beq	a4,a5,8000fd4a <priv_change_11+0xde>
    8000fd36:	00017517          	auipc	a0,0x17
    8000fd3a:	1a250513          	addi	a0,a0,418 # 80026ed8 <__func__.0+0x318>
    8000fd3e:	1c6150ef          	jal	80024f04 <printf>
    8000fd42:	02900513          	li	a0,41
    8000fd46:	7c9130ef          	jal	80023d0e <putchar>
    8000fd4a:	4529                	li	a0,10
    8000fd4c:	7c3130ef          	jal	80023d0e <putchar>
    8000fd50:	6014                	ld	a3,0(s0)
    8000fd52:	f0001737          	lui	a4,0xf0001
    8000fd56:	0712                	slli	a4,a4,0x4
    8000fd58:	4785                	li	a5,1
    8000fd5a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fd5e:	1786                	slli	a5,a5,0x21
    8000fd60:	8f75                	and	a4,a4,a3
    8000fd62:	10078793          	addi	a5,a5,256
    8000fd66:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_VS
    ); 


    TEST_END();
    8000fd68:	00017597          	auipc	a1,0x17
    8000fd6c:	12858593          	addi	a1,a1,296 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000fd70:	00f71763          	bne	a4,a5,8000fd7e <priv_change_11+0x112>
    8000fd74:	4405                	li	s0,1
    TEST_END();
    8000fd76:	00017597          	auipc	a1,0x17
    8000fd7a:	10a58593          	addi	a1,a1,266 # 80026e80 <__func__.0+0x2c0>
    8000fd7e:	00017517          	auipc	a0,0x17
    8000fd82:	1ba50513          	addi	a0,a0,442 # 80026f38 <__func__.0+0x378>
    8000fd86:	17e150ef          	jal	80024f04 <printf>
    8000fd8a:	4511                	li	a0,4
    8000fd8c:	e6bf00ef          	jal	80000bf6 <goto_priv>
    8000fd90:	f1cf10ef          	jal	800014ac <reset_state>
}
    8000fd94:	60a2                	ld	ra,8(sp)
    8000fd96:	8522                	mv	a0,s0
    8000fd98:	6402                	ld	s0,0(sp)
    8000fd9a:	0141                	addi	sp,sp,16
    8000fd9c:	8082                	ret

000000008000fd9e <priv_change_12>:



bool priv_change_12(){
    8000fd9e:	1141                	addi	sp,sp,-16
    TEST_START();
    8000fda0:	00016597          	auipc	a1,0x16
    8000fda4:	d2858593          	addi	a1,a1,-728 # 80025ac8 <__func__.3>
    8000fda8:	00017517          	auipc	a0,0x17
    8000fdac:	0f850513          	addi	a0,a0,248 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_12(){
    8000fdb0:	e406                	sd	ra,8(sp)
    8000fdb2:	e022                	sd	s0,0(sp)
    TEST_START();
    8000fdb4:	150150ef          	jal	80024f04 <printf>
    8000fdb8:	4529                	li	a0,10
    8000fdba:	755130ef          	jal	80023d0e <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000fdbe:	4511                	li	a0,4
    8000fdc0:	e37f00ef          	jal	80000bf6 <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000fdc4:	57fd                	li	a5,-1
    8000fdc6:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fdca:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000fdce:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000fdd2:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HS);
    8000fdd6:	450d                	li	a0,3
    8000fdd8:	e1ff00ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000fddc:	0330000f          	fence	rw,rw
    8000fde0:	00039417          	auipc	s0,0x39
    8000fde4:	23040413          	addi	s0,s0,560 # 80049010 <excpt>
    8000fde8:	4785                	li	a5,1
    8000fdea:	00039717          	auipc	a4,0x39
    8000fdee:	24073f23          	sd	zero,606(a4) # 80049048 <excpt+0x38>
    8000fdf2:	00f41023          	sh	a5,0(s0)
    8000fdf6:	0330000f          	fence	rw,rw
    CSRR(CSR_MSTATUS);
    8000fdfa:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fdfe:	08200593          	li	a1,130
    8000fe02:	0001a617          	auipc	a2,0x1a
    8000fe06:	f2e60613          	addi	a2,a2,-210 # 80029d30 <__func__.0+0x3170>
    8000fe0a:	00017517          	auipc	a0,0x17
    8000fe0e:	0ae50513          	addi	a0,a0,174 # 80026eb8 <__func__.0+0x2f8>
    8000fe12:	0f2150ef          	jal	80024f04 <printf>
    8000fe16:	6014                	ld	a3,0(s0)
    8000fe18:	f0001737          	lui	a4,0xf0001
    8000fe1c:	0712                	slli	a4,a4,0x4
    8000fe1e:	478d                	li	a5,3
    8000fe20:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fe24:	1782                	slli	a5,a5,0x20
    8000fe26:	8f75                	and	a4,a4,a3
    8000fe28:	10078793          	addi	a5,a5,256
    8000fe2c:	00017597          	auipc	a1,0x17
    8000fe30:	05458593          	addi	a1,a1,84 # 80026e80 <__func__.0+0x2c0>
    8000fe34:	00f70663          	beq	a4,a5,8000fe40 <priv_change_12+0xa2>
    8000fe38:	00017597          	auipc	a1,0x17
    8000fe3c:	05858593          	addi	a1,a1,88 # 80026e90 <__func__.0+0x2d0>
    8000fe40:	00017517          	auipc	a0,0x17
    8000fe44:	09050513          	addi	a0,a0,144 # 80026ed0 <__func__.0+0x310>
    8000fe48:	0bc150ef          	jal	80024f04 <printf>
    8000fe4c:	00039797          	auipc	a5,0x39
    8000fe50:	1c57c783          	lbu	a5,453(a5) # 80049011 <excpt+0x1>
    8000fe54:	cb81                	beqz	a5,8000fe64 <priv_change_12+0xc6>
    8000fe56:	00039717          	auipc	a4,0x39
    8000fe5a:	1be72703          	lw	a4,446(a4) # 80049014 <excpt+0x4>
    8000fe5e:	478d                	li	a5,3
    8000fe60:	00f70c63          	beq	a4,a5,8000fe78 <priv_change_12+0xda>
    8000fe64:	00017517          	auipc	a0,0x17
    8000fe68:	07450513          	addi	a0,a0,116 # 80026ed8 <__func__.0+0x318>
    8000fe6c:	098150ef          	jal	80024f04 <printf>
    8000fe70:	02900513          	li	a0,41
    8000fe74:	69b130ef          	jal	80023d0e <putchar>
    8000fe78:	4529                	li	a0,10
    8000fe7a:	695130ef          	jal	80023d0e <putchar>
    8000fe7e:	6014                	ld	a3,0(s0)
    8000fe80:	f0001737          	lui	a4,0xf0001
    8000fe84:	0712                	slli	a4,a4,0x4
    8000fe86:	478d                	li	a5,3
    8000fe88:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000fe8c:	1782                	slli	a5,a5,0x20
    8000fe8e:	8f75                	and	a4,a4,a3
    8000fe90:	10078793          	addi	a5,a5,256
    8000fe94:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 


    TEST_END();
    8000fe96:	00017597          	auipc	a1,0x17
    8000fe9a:	ffa58593          	addi	a1,a1,-6 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fe9e:	00f71763          	bne	a4,a5,8000feac <priv_change_12+0x10e>
    8000fea2:	4405                	li	s0,1
    TEST_END();
    8000fea4:	00017597          	auipc	a1,0x17
    8000fea8:	fdc58593          	addi	a1,a1,-36 # 80026e80 <__func__.0+0x2c0>
    8000feac:	00017517          	auipc	a0,0x17
    8000feb0:	08c50513          	addi	a0,a0,140 # 80026f38 <__func__.0+0x378>
    8000feb4:	050150ef          	jal	80024f04 <printf>
    8000feb8:	4511                	li	a0,4
    8000feba:	d3df00ef          	jal	80000bf6 <goto_priv>
    8000febe:	deef10ef          	jal	800014ac <reset_state>

}
    8000fec2:	60a2                	ld	ra,8(sp)
    8000fec4:	8522                	mv	a0,s0
    8000fec6:	6402                	ld	s0,0(sp)
    8000fec8:	0141                	addi	sp,sp,16
    8000feca:	8082                	ret

000000008000fecc <priv_change_13>:

bool priv_change_13(){
    8000fecc:	1141                	addi	sp,sp,-16
    TEST_START();
    8000fece:	00016597          	auipc	a1,0x16
    8000fed2:	c0a58593          	addi	a1,a1,-1014 # 80025ad8 <__func__.2>
    8000fed6:	00017517          	auipc	a0,0x17
    8000feda:	fca50513          	addi	a0,a0,-54 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_13(){
    8000fede:	e406                	sd	ra,8(sp)
    8000fee0:	e022                	sd	s0,0(sp)
    TEST_START();
    8000fee2:	022150ef          	jal	80024f04 <printf>
    8000fee6:	4529                	li	a0,10
    8000fee8:	627130ef          	jal	80023d0e <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000feec:	4511                	li	a0,4
    8000feee:	d09f00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8000fef2:	dbaf10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000fef6:	57fd                	li	a5,-1
    8000fef8:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000fefc:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000ff00:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000ff04:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000ff08:	0330000f          	fence	rw,rw
    8000ff0c:	00039417          	auipc	s0,0x39
    8000ff10:	10440413          	addi	s0,s0,260 # 80049010 <excpt>
    8000ff14:	4785                	li	a5,1
    8000ff16:	00039717          	auipc	a4,0x39
    8000ff1a:	12073923          	sd	zero,306(a4) # 80049048 <excpt+0x38>
    8000ff1e:	00f41023          	sh	a5,0(s0)
    8000ff22:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VU);      
    8000ff26:	4501                	li	a0,0
    8000ff28:	ccff00ef          	jal	80000bf6 <goto_priv>
    CSRR(CSR_MSTATUS);
    8000ff2c:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000ff30:	08200593          	li	a1,130
    8000ff34:	0001a617          	auipc	a2,0x1a
    8000ff38:	e5460613          	addi	a2,a2,-428 # 80029d88 <__func__.0+0x31c8>
    8000ff3c:	00017517          	auipc	a0,0x17
    8000ff40:	f7c50513          	addi	a0,a0,-132 # 80026eb8 <__func__.0+0x2f8>
    8000ff44:	7c1140ef          	jal	80024f04 <printf>
    8000ff48:	6014                	ld	a3,0(s0)
    8000ff4a:	f0001737          	lui	a4,0xf0001
    8000ff4e:	0712                	slli	a4,a4,0x4
    8000ff50:	478d                	li	a5,3
    8000ff52:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ff56:	1782                	slli	a5,a5,0x20
    8000ff58:	8f75                	and	a4,a4,a3
    8000ff5a:	10078793          	addi	a5,a5,256
    8000ff5e:	00017597          	auipc	a1,0x17
    8000ff62:	f3258593          	addi	a1,a1,-206 # 80026e90 <__func__.0+0x2d0>
    8000ff66:	08f70963          	beq	a4,a5,8000fff8 <priv_change_13+0x12c>
    8000ff6a:	00017517          	auipc	a0,0x17
    8000ff6e:	f6650513          	addi	a0,a0,-154 # 80026ed0 <__func__.0+0x310>
    8000ff72:	793140ef          	jal	80024f04 <printf>
    8000ff76:	00039797          	auipc	a5,0x39
    8000ff7a:	09b7c783          	lbu	a5,155(a5) # 80049011 <excpt+0x1>
    8000ff7e:	cb81                	beqz	a5,8000ff8e <priv_change_13+0xc2>
    8000ff80:	00039717          	auipc	a4,0x39
    8000ff84:	09472703          	lw	a4,148(a4) # 80049014 <excpt+0x4>
    8000ff88:	478d                	li	a5,3
    8000ff8a:	06f70163          	beq	a4,a5,8000ffec <priv_change_13+0x120>
    8000ff8e:	00017517          	auipc	a0,0x17
    8000ff92:	f4a50513          	addi	a0,a0,-182 # 80026ed8 <__func__.0+0x318>
    8000ff96:	76f140ef          	jal	80024f04 <printf>
    8000ff9a:	02900513          	li	a0,41
    8000ff9e:	571130ef          	jal	80023d0e <putchar>
    8000ffa2:	4529                	li	a0,10
    8000ffa4:	56b130ef          	jal	80023d0e <putchar>
    8000ffa8:	6014                	ld	a3,0(s0)
    8000ffaa:	f0001737          	lui	a4,0xf0001
    8000ffae:	0712                	slli	a4,a4,0x4
    8000ffb0:	478d                	li	a5,3
    8000ffb2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ffb6:	1782                	slli	a5,a5,0x20
    8000ffb8:	8f75                	and	a4,a4,a3
    8000ffba:	10078793          	addi	a5,a5,256
    8000ffbe:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    TEST_END();
    8000ffc0:	00017597          	auipc	a1,0x17
    8000ffc4:	ed058593          	addi	a1,a1,-304 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000ffc8:	04f70663          	beq	a4,a5,80010014 <priv_change_13+0x148>
    TEST_END();
    8000ffcc:	00017517          	auipc	a0,0x17
    8000ffd0:	f6c50513          	addi	a0,a0,-148 # 80026f38 <__func__.0+0x378>
    8000ffd4:	731140ef          	jal	80024f04 <printf>
    8000ffd8:	4511                	li	a0,4
    8000ffda:	c1df00ef          	jal	80000bf6 <goto_priv>
    8000ffde:	ccef10ef          	jal	800014ac <reset_state>
}
    8000ffe2:	60a2                	ld	ra,8(sp)
    8000ffe4:	8522                	mv	a0,s0
    8000ffe6:	6402                	ld	s0,0(sp)
    8000ffe8:	0141                	addi	sp,sp,16
    8000ffea:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000ffec:	00021797          	auipc	a5,0x21
    8000fff0:	2e87a783          	lw	a5,744(a5) # 800312d4 <curr_priv>
    8000fff4:	d7dd                	beqz	a5,8000ffa2 <priv_change_13+0xd6>
    8000fff6:	bf61                	j	8000ff8e <priv_change_13+0xc2>
    8000fff8:	00021797          	auipc	a5,0x21
    8000fffc:	2dc7a783          	lw	a5,732(a5) # 800312d4 <curr_priv>
    80010000:	00017597          	auipc	a1,0x17
    80010004:	e8058593          	addi	a1,a1,-384 # 80026e80 <__func__.0+0x2c0>
    80010008:	d3ad                	beqz	a5,8000ff6a <priv_change_13+0x9e>
    8001000a:	00017597          	auipc	a1,0x17
    8001000e:	e8658593          	addi	a1,a1,-378 # 80026e90 <__func__.0+0x2d0>
    80010012:	bfa1                	j	8000ff6a <priv_change_13+0x9e>
    80010014:	00021797          	auipc	a5,0x21
    80010018:	2c07a783          	lw	a5,704(a5) # 800312d4 <curr_priv>
    8001001c:	fbc5                	bnez	a5,8000ffcc <priv_change_13+0x100>
    8001001e:	4405                	li	s0,1
    TEST_END();
    80010020:	00017597          	auipc	a1,0x17
    80010024:	e6058593          	addi	a1,a1,-416 # 80026e80 <__func__.0+0x2c0>
    80010028:	b755                	j	8000ffcc <priv_change_13+0x100>

000000008001002a <priv_change_14>:

bool priv_change_14(){
    8001002a:	1141                	addi	sp,sp,-16
    TEST_START();
    8001002c:	00016597          	auipc	a1,0x16
    80010030:	abc58593          	addi	a1,a1,-1348 # 80025ae8 <__func__.1>
    80010034:	00017517          	auipc	a0,0x17
    80010038:	e6c50513          	addi	a0,a0,-404 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_14(){
    8001003c:	e406                	sd	ra,8(sp)
    8001003e:	e022                	sd	s0,0(sp)
    TEST_START();
    80010040:	6c5140ef          	jal	80024f04 <printf>
    80010044:	4529                	li	a0,10
    80010046:	4c9130ef          	jal	80023d0e <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8001004a:	4511                	li	a0,4
    8001004c:	babf00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80010050:	c5cf10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    80010054:	57fd                	li	a5,-1
    80010056:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8001005a:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8001005e:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80010062:	60205073          	csrwi	hedeleg,0
    
    goto_priv(PRIV_VU);     
    80010066:	4501                	li	a0,0
    80010068:	b8ff00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();        
    8001006c:	0330000f          	fence	rw,rw
    80010070:	00039417          	auipc	s0,0x39
    80010074:	fa040413          	addi	s0,s0,-96 # 80049010 <excpt>
    80010078:	4785                	li	a5,1
    8001007a:	00039717          	auipc	a4,0x39
    8001007e:	fc073723          	sd	zero,-50(a4) # 80049048 <excpt+0x38>
    80010082:	00f41023          	sh	a5,0(s0)
    80010086:	0330000f          	fence	rw,rw
    CSRW(medeleg, 0); 
    8001008a:	30205073          	csrwi	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8001008e:	08200593          	li	a1,130
    80010092:	0001a617          	auipc	a2,0x1a
    80010096:	d6660613          	addi	a2,a2,-666 # 80029df8 <__func__.0+0x3238>
    8001009a:	00017517          	auipc	a0,0x17
    8001009e:	e1e50513          	addi	a0,a0,-482 # 80026eb8 <__func__.0+0x2f8>
    800100a2:	663140ef          	jal	80024f04 <printf>
    800100a6:	6014                	ld	a3,0(s0)
    800100a8:	f0001737          	lui	a4,0xf0001
    800100ac:	0712                	slli	a4,a4,0x4
    800100ae:	478d                	li	a5,3
    800100b0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800100b4:	1782                	slli	a5,a5,0x20
    800100b6:	8f75                	and	a4,a4,a3
    800100b8:	10078793          	addi	a5,a5,256
    800100bc:	00017597          	auipc	a1,0x17
    800100c0:	dd458593          	addi	a1,a1,-556 # 80026e90 <__func__.0+0x2d0>
    800100c4:	08f70963          	beq	a4,a5,80010156 <priv_change_14+0x12c>
    800100c8:	00017517          	auipc	a0,0x17
    800100cc:	e0850513          	addi	a0,a0,-504 # 80026ed0 <__func__.0+0x310>
    800100d0:	635140ef          	jal	80024f04 <printf>
    800100d4:	00039797          	auipc	a5,0x39
    800100d8:	f3d7c783          	lbu	a5,-195(a5) # 80049011 <excpt+0x1>
    800100dc:	cb81                	beqz	a5,800100ec <priv_change_14+0xc2>
    800100de:	00039717          	auipc	a4,0x39
    800100e2:	f3672703          	lw	a4,-202(a4) # 80049014 <excpt+0x4>
    800100e6:	478d                	li	a5,3
    800100e8:	06f70163          	beq	a4,a5,8001014a <priv_change_14+0x120>
    800100ec:	00017517          	auipc	a0,0x17
    800100f0:	dec50513          	addi	a0,a0,-532 # 80026ed8 <__func__.0+0x318>
    800100f4:	611140ef          	jal	80024f04 <printf>
    800100f8:	02900513          	li	a0,41
    800100fc:	413130ef          	jal	80023d0e <putchar>
    80010100:	4529                	li	a0,10
    80010102:	40d130ef          	jal	80023d0e <putchar>
    80010106:	6014                	ld	a3,0(s0)
    80010108:	f0001737          	lui	a4,0xf0001
    8001010c:	0712                	slli	a4,a4,0x4
    8001010e:	478d                	li	a5,3
    80010110:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80010114:	1782                	slli	a5,a5,0x20
    80010116:	8f75                	and	a4,a4,a3
    80010118:	10078793          	addi	a5,a5,256
    8001011c:	4401                	li	s0,0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    TEST_END();
    8001011e:	00017597          	auipc	a1,0x17
    80010122:	d7258593          	addi	a1,a1,-654 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80010126:	04f70663          	beq	a4,a5,80010172 <priv_change_14+0x148>
    TEST_END();
    8001012a:	00017517          	auipc	a0,0x17
    8001012e:	e0e50513          	addi	a0,a0,-498 # 80026f38 <__func__.0+0x378>
    80010132:	5d3140ef          	jal	80024f04 <printf>
    80010136:	4511                	li	a0,4
    80010138:	abff00ef          	jal	80000bf6 <goto_priv>
    8001013c:	b70f10ef          	jal	800014ac <reset_state>

}
    80010140:	60a2                	ld	ra,8(sp)
    80010142:	8522                	mv	a0,s0
    80010144:	6402                	ld	s0,0(sp)
    80010146:	0141                	addi	sp,sp,16
    80010148:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8001014a:	00021797          	auipc	a5,0x21
    8001014e:	18a7a783          	lw	a5,394(a5) # 800312d4 <curr_priv>
    80010152:	d7dd                	beqz	a5,80010100 <priv_change_14+0xd6>
    80010154:	bf61                	j	800100ec <priv_change_14+0xc2>
    80010156:	00021797          	auipc	a5,0x21
    8001015a:	17e7a783          	lw	a5,382(a5) # 800312d4 <curr_priv>
    8001015e:	00017597          	auipc	a1,0x17
    80010162:	d2258593          	addi	a1,a1,-734 # 80026e80 <__func__.0+0x2c0>
    80010166:	d3ad                	beqz	a5,800100c8 <priv_change_14+0x9e>
    80010168:	00017597          	auipc	a1,0x17
    8001016c:	d2858593          	addi	a1,a1,-728 # 80026e90 <__func__.0+0x2d0>
    80010170:	bfa1                	j	800100c8 <priv_change_14+0x9e>
    80010172:	00021797          	auipc	a5,0x21
    80010176:	1627a783          	lw	a5,354(a5) # 800312d4 <curr_priv>
    8001017a:	fbc5                	bnez	a5,8001012a <priv_change_14+0x100>
    8001017c:	4405                	li	s0,1
    TEST_END();
    8001017e:	00017597          	auipc	a1,0x17
    80010182:	d0258593          	addi	a1,a1,-766 # 80026e80 <__func__.0+0x2c0>
    80010186:	b755                	j	8001012a <priv_change_14+0x100>

0000000080010188 <priv_change_15>:

bool priv_change_15(){
    80010188:	1141                	addi	sp,sp,-16
    TEST_START();
    8001018a:	00016597          	auipc	a1,0x16
    8001018e:	96e58593          	addi	a1,a1,-1682 # 80025af8 <__func__.0>
    80010192:	00017517          	auipc	a0,0x17
    80010196:	d0e50513          	addi	a0,a0,-754 # 80026ea0 <__func__.0+0x2e0>
bool priv_change_15(){
    8001019a:	e406                	sd	ra,8(sp)
    8001019c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001019e:	567140ef          	jal	80024f04 <printf>
    800101a2:	4529                	li	a0,10
    800101a4:	36b130ef          	jal	80023d0e <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    800101a8:	4511                	li	a0,4
    800101aa:	a4df00ef          	jal	80000bf6 <goto_priv>
    reset_state();
    800101ae:	afef10ef          	jal	800014ac <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    800101b2:	57fd                	li	a5,-1
    800101b4:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    800101b8:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    800101bc:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    800101c0:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();    
    800101c4:	0330000f          	fence	rw,rw
    800101c8:	00039417          	auipc	s0,0x39
    800101cc:	e4840413          	addi	s0,s0,-440 # 80049010 <excpt>
    800101d0:	4785                	li	a5,1
    800101d2:	00039717          	auipc	a4,0x39
    800101d6:	e6073b23          	sd	zero,-394(a4) # 80049048 <excpt+0x38>
    800101da:	00f41023          	sh	a5,0(s0)
    800101de:	0330000f          	fence	rw,rw
    goto_priv(PRIV_VS);     
    800101e2:	4509                	li	a0,2
    800101e4:	a13f00ef          	jal	80000bf6 <goto_priv>
    CSRR(CSR_MSTATUS);
    800101e8:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800101ec:	08200593          	li	a1,130
    800101f0:	0001a617          	auipc	a2,0x1a
    800101f4:	c7860613          	addi	a2,a2,-904 # 80029e68 <__func__.0+0x32a8>
    800101f8:	00017517          	auipc	a0,0x17
    800101fc:	cc050513          	addi	a0,a0,-832 # 80026eb8 <__func__.0+0x2f8>
    80010200:	505140ef          	jal	80024f04 <printf>
    80010204:	6014                	ld	a3,0(s0)
    80010206:	f0001737          	lui	a4,0xf0001
    8001020a:	0712                	slli	a4,a4,0x4
    8001020c:	478d                	li	a5,3
    8001020e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80010212:	1782                	slli	a5,a5,0x20
    80010214:	8f75                	and	a4,a4,a3
    80010216:	10078793          	addi	a5,a5,256
    8001021a:	00017597          	auipc	a1,0x17
    8001021e:	c7658593          	addi	a1,a1,-906 # 80026e90 <__func__.0+0x2d0>
    80010222:	08f70b63          	beq	a4,a5,800102b8 <priv_change_15+0x130>
    80010226:	00017517          	auipc	a0,0x17
    8001022a:	caa50513          	addi	a0,a0,-854 # 80026ed0 <__func__.0+0x310>
    8001022e:	4d7140ef          	jal	80024f04 <printf>
    80010232:	00039797          	auipc	a5,0x39
    80010236:	ddf7c783          	lbu	a5,-545(a5) # 80049011 <excpt+0x1>
    8001023a:	cb81                	beqz	a5,8001024a <priv_change_15+0xc2>
    8001023c:	00039717          	auipc	a4,0x39
    80010240:	dd872703          	lw	a4,-552(a4) # 80049014 <excpt+0x4>
    80010244:	478d                	li	a5,3
    80010246:	06f70163          	beq	a4,a5,800102a8 <priv_change_15+0x120>
    8001024a:	00017517          	auipc	a0,0x17
    8001024e:	c8e50513          	addi	a0,a0,-882 # 80026ed8 <__func__.0+0x318>
    80010252:	4b3140ef          	jal	80024f04 <printf>
    80010256:	02900513          	li	a0,41
    8001025a:	2b5130ef          	jal	80023d0e <putchar>
    8001025e:	4529                	li	a0,10
    80010260:	2af130ef          	jal	80023d0e <putchar>
    80010264:	6014                	ld	a3,0(s0)
    80010266:	f0001737          	lui	a4,0xf0001
    8001026a:	0712                	slli	a4,a4,0x4
    8001026c:	478d                	li	a5,3
    8001026e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80010272:	1782                	slli	a5,a5,0x20
    80010274:	8f75                	and	a4,a4,a3
    80010276:	10078793          	addi	a5,a5,256
    8001027a:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8001027c:	00017597          	auipc	a1,0x17
    80010280:	c1458593          	addi	a1,a1,-1004 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    80010284:	04f70a63          	beq	a4,a5,800102d8 <priv_change_15+0x150>
    TEST_END();
    80010288:	00017517          	auipc	a0,0x17
    8001028c:	cb050513          	addi	a0,a0,-848 # 80026f38 <__func__.0+0x378>
    80010290:	475140ef          	jal	80024f04 <printf>
    80010294:	4511                	li	a0,4
    80010296:	961f00ef          	jal	80000bf6 <goto_priv>
    8001029a:	a12f10ef          	jal	800014ac <reset_state>

}
    8001029e:	60a2                	ld	ra,8(sp)
    800102a0:	8522                	mv	a0,s0
    800102a2:	6402                	ld	s0,0(sp)
    800102a4:	0141                	addi	sp,sp,16
    800102a6:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    800102a8:	00021717          	auipc	a4,0x21
    800102ac:	02c72703          	lw	a4,44(a4) # 800312d4 <curr_priv>
    800102b0:	4789                	li	a5,2
    800102b2:	f8f71ce3          	bne	a4,a5,8001024a <priv_change_15+0xc2>
    800102b6:	b765                	j	8001025e <priv_change_15+0xd6>
    800102b8:	00021717          	auipc	a4,0x21
    800102bc:	01c72703          	lw	a4,28(a4) # 800312d4 <curr_priv>
    800102c0:	4789                	li	a5,2
    800102c2:	00017597          	auipc	a1,0x17
    800102c6:	bbe58593          	addi	a1,a1,-1090 # 80026e80 <__func__.0+0x2c0>
    800102ca:	f4f70ee3          	beq	a4,a5,80010226 <priv_change_15+0x9e>
    800102ce:	00017597          	auipc	a1,0x17
    800102d2:	bc258593          	addi	a1,a1,-1086 # 80026e90 <__func__.0+0x2d0>
    800102d6:	bf81                	j	80010226 <priv_change_15+0x9e>
    800102d8:	00021717          	auipc	a4,0x21
    800102dc:	ffc72703          	lw	a4,-4(a4) # 800312d4 <curr_priv>
    800102e0:	4789                	li	a5,2
    800102e2:	faf713e3          	bne	a4,a5,80010288 <priv_change_15+0x100>
    800102e6:	4405                	li	s0,1
    TEST_END();
    800102e8:	00017597          	auipc	a1,0x17
    800102ec:	b9858593          	addi	a1,a1,-1128 # 80026e80 <__func__.0+0x2c0>
    800102f0:	bf61                	j	80010288 <priv_change_15+0x100>

00000000800102f2 <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    800102f2:	1101                	addi	sp,sp,-32

    TEST_START();
    800102f4:	00016597          	auipc	a1,0x16
    800102f8:	81458593          	addi	a1,a1,-2028 # 80025b08 <__func__.1>
    800102fc:	00017517          	auipc	a0,0x17
    80010300:	ba450513          	addi	a0,a0,-1116 # 80026ea0 <__func__.0+0x2e0>
bool addr_unaligned() {
    80010304:	ec06                	sd	ra,24(sp)
    80010306:	e822                	sd	s0,16(sp)
    80010308:	e426                	sd	s1,8(sp)
    8001030a:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001030c:	3f9140ef          	jal	80024f04 <printf>
    80010310:	4529                	li	a0,10
    80010312:	1fd130ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80010316:	0330000f          	fence	rw,rw
    8001031a:	00039417          	auipc	s0,0x39
    8001031e:	cf640413          	addi	s0,s0,-778 # 80049010 <excpt>
    80010322:	4485                	li	s1,1
    80010324:	00039797          	auipc	a5,0x39
    80010328:	d207b223          	sd	zero,-732(a5) # 80049048 <excpt+0x38>
    8001032c:	00941023          	sh	s1,0(s0)
    80010330:	0330000f          	fence	rw,rw
    
    
    hspt_init();        
    80010334:	aacf00ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    80010338:	450d                	li	a0,3
    8001033a:	8bdf00ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8001033e:	0330000f          	fence	rw,rw
    80010342:	00039797          	auipc	a5,0x39
    80010346:	d007b323          	sd	zero,-762(a5) # 80049048 <excpt+0x38>
    8001034a:	00941023          	sh	s1,0(s0)
    8001034e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80010352:	001007b7          	lui	a5,0x100
    80010356:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8001035a:	07b2                	slli	a5,a5,0xc
    8001035c:	97a6                	add	a5,a5,s1
    8001035e:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    80010362:	08200593          	li	a1,130
    80010366:	0001a617          	auipc	a2,0x1a
    8001036a:	b7260613          	addi	a2,a2,-1166 # 80029ed8 <__func__.0+0x3318>
    8001036e:	00017517          	auipc	a0,0x17
    80010372:	b4a50513          	addi	a0,a0,-1206 # 80026eb8 <__func__.0+0x2f8>
    80010376:	38f140ef          	jal	80024f04 <printf>
    8001037a:	00039797          	auipc	a5,0x39
    8001037e:	c977c783          	lbu	a5,-873(a5) # 80049011 <excpt+0x1>
    80010382:	00017597          	auipc	a1,0x17
    80010386:	afe58593          	addi	a1,a1,-1282 # 80026e80 <__func__.0+0x2c0>
    8001038a:	c789                	beqz	a5,80010394 <addr_unaligned+0xa2>
    8001038c:	00017597          	auipc	a1,0x17
    80010390:	b0458593          	addi	a1,a1,-1276 # 80026e90 <__func__.0+0x2d0>
    80010394:	00017517          	auipc	a0,0x17
    80010398:	b3c50513          	addi	a0,a0,-1220 # 80026ed0 <__func__.0+0x310>
    8001039c:	369140ef          	jal	80024f04 <printf>
    800103a0:	00039797          	auipc	a5,0x39
    800103a4:	c717c783          	lbu	a5,-911(a5) # 80049011 <excpt+0x1>
    800103a8:	52079663          	bnez	a5,800108d4 <addr_unaligned+0x5e2>
    800103ac:	4529                	li	a0,10
    800103ae:	161130ef          	jal	80023d0e <putchar>
    800103b2:	00039917          	auipc	s2,0x39
    800103b6:	c5f94903          	lbu	s2,-929(s2) # 80049011 <excpt+0x1>
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    800103ba:	0330000f          	fence	rw,rw
    800103be:	4785                	li	a5,1
    800103c0:	00039717          	auipc	a4,0x39
    800103c4:	c8073423          	sd	zero,-888(a4) # 80049048 <excpt+0x38>
    800103c8:	00f41023          	sh	a5,0(s0)
    800103cc:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800103d0:	001007b7          	lui	a5,0x100
    800103d4:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800103d8:	07b2                	slli	a5,a5,0xc
    800103da:	0785                	addi	a5,a5,1
    800103dc:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    800103e0:	08200593          	li	a1,130
    800103e4:	0001a617          	auipc	a2,0x1a
    800103e8:	b2460613          	addi	a2,a2,-1244 # 80029f08 <__func__.0+0x3348>
    800103ec:	00017517          	auipc	a0,0x17
    800103f0:	acc50513          	addi	a0,a0,-1332 # 80026eb8 <__func__.0+0x2f8>
    800103f4:	311140ef          	jal	80024f04 <printf>
    800103f8:	00039797          	auipc	a5,0x39
    800103fc:	c197c783          	lbu	a5,-999(a5) # 80049011 <excpt+0x1>
    80010400:	00017597          	auipc	a1,0x17
    80010404:	a9058593          	addi	a1,a1,-1392 # 80026e90 <__func__.0+0x2d0>
    80010408:	cf89                	beqz	a5,80010422 <addr_unaligned+0x130>
    8001040a:	6418                	ld	a4,8(s0)
    8001040c:	4791                	li	a5,4
    8001040e:	00017597          	auipc	a1,0x17
    80010412:	a7258593          	addi	a1,a1,-1422 # 80026e80 <__func__.0+0x2c0>
    80010416:	00f70663          	beq	a4,a5,80010422 <addr_unaligned+0x130>
    8001041a:	00017597          	auipc	a1,0x17
    8001041e:	a7658593          	addi	a1,a1,-1418 # 80026e90 <__func__.0+0x2d0>
    80010422:	00017517          	auipc	a0,0x17
    80010426:	aae50513          	addi	a0,a0,-1362 # 80026ed0 <__func__.0+0x310>
    8001042a:	2db140ef          	jal	80024f04 <printf>
    8001042e:	00039797          	auipc	a5,0x39
    80010432:	be37c783          	lbu	a5,-1053(a5) # 80049011 <excpt+0x1>
    80010436:	c789                	beqz	a5,80010440 <addr_unaligned+0x14e>
    80010438:	6418                	ld	a4,8(s0)
    8001043a:	4791                	li	a5,4
    8001043c:	00f70c63          	beq	a4,a5,80010454 <addr_unaligned+0x162>
    80010440:	00017517          	auipc	a0,0x17
    80010444:	a9850513          	addi	a0,a0,-1384 # 80026ed8 <__func__.0+0x318>
    80010448:	2bd140ef          	jal	80024f04 <printf>
    8001044c:	02900513          	li	a0,41
    80010450:	0bf130ef          	jal	80023d0e <putchar>
    80010454:	4529                	li	a0,10
    80010456:	0b9130ef          	jal	80023d0e <putchar>
    8001045a:	4481                	li	s1,0
    8001045c:	00091863          	bnez	s2,8001046c <addr_unaligned+0x17a>
    80010460:	00039797          	auipc	a5,0x39
    80010464:	bb17c783          	lbu	a5,-1103(a5) # 80049011 <excpt+0x1>
    80010468:	44079263          	bnez	a5,800108ac <addr_unaligned+0x5ba>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8001046c:	0330000f          	fence	rw,rw
    80010470:	4785                	li	a5,1
    80010472:	00039717          	auipc	a4,0x39
    80010476:	bc073b23          	sd	zero,-1066(a4) # 80049048 <excpt+0x38>
    8001047a:	00f41023          	sh	a5,0(s0)
    8001047e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    80010482:	001007b7          	lui	a5,0x100
    80010486:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8001048a:	07b2                	slli	a5,a5,0xc
    8001048c:	0785                	addi	a5,a5,1
    8001048e:	0007a783          	lw	a5,0(a5)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    80010492:	08200593          	li	a1,130
    80010496:	0001a617          	auipc	a2,0x1a
    8001049a:	aaa60613          	addi	a2,a2,-1366 # 80029f40 <__func__.0+0x3380>
    8001049e:	00017517          	auipc	a0,0x17
    800104a2:	a1a50513          	addi	a0,a0,-1510 # 80026eb8 <__func__.0+0x2f8>
    800104a6:	25f140ef          	jal	80024f04 <printf>
    800104aa:	00039797          	auipc	a5,0x39
    800104ae:	b677c783          	lbu	a5,-1177(a5) # 80049011 <excpt+0x1>
    800104b2:	00017597          	auipc	a1,0x17
    800104b6:	9de58593          	addi	a1,a1,-1570 # 80026e90 <__func__.0+0x2d0>
    800104ba:	cf89                	beqz	a5,800104d4 <addr_unaligned+0x1e2>
    800104bc:	6418                	ld	a4,8(s0)
    800104be:	4791                	li	a5,4
    800104c0:	00017597          	auipc	a1,0x17
    800104c4:	9c058593          	addi	a1,a1,-1600 # 80026e80 <__func__.0+0x2c0>
    800104c8:	00f70663          	beq	a4,a5,800104d4 <addr_unaligned+0x1e2>
    800104cc:	00017597          	auipc	a1,0x17
    800104d0:	9c458593          	addi	a1,a1,-1596 # 80026e90 <__func__.0+0x2d0>
    800104d4:	00017517          	auipc	a0,0x17
    800104d8:	9fc50513          	addi	a0,a0,-1540 # 80026ed0 <__func__.0+0x310>
    800104dc:	229140ef          	jal	80024f04 <printf>
    800104e0:	00039797          	auipc	a5,0x39
    800104e4:	b317c783          	lbu	a5,-1231(a5) # 80049011 <excpt+0x1>
    800104e8:	c789                	beqz	a5,800104f2 <addr_unaligned+0x200>
    800104ea:	6418                	ld	a4,8(s0)
    800104ec:	4791                	li	a5,4
    800104ee:	00f70c63          	beq	a4,a5,80010506 <addr_unaligned+0x214>
    800104f2:	00017517          	auipc	a0,0x17
    800104f6:	9e650513          	addi	a0,a0,-1562 # 80026ed8 <__func__.0+0x318>
    800104fa:	20b140ef          	jal	80024f04 <printf>
    800104fe:	02900513          	li	a0,41
    80010502:	00d130ef          	jal	80023d0e <putchar>
    80010506:	4529                	li	a0,10
    80010508:	007130ef          	jal	80023d0e <putchar>
    8001050c:	c881                	beqz	s1,8001051c <addr_unaligned+0x22a>
    8001050e:	00039797          	auipc	a5,0x39
    80010512:	b037c783          	lbu	a5,-1277(a5) # 80049011 <excpt+0x1>
    80010516:	4481                	li	s1,0
    80010518:	38079563          	bnez	a5,800108a2 <addr_unaligned+0x5b0>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8001051c:	0330000f          	fence	rw,rw
    80010520:	4785                	li	a5,1
    80010522:	00039717          	auipc	a4,0x39
    80010526:	b2073323          	sd	zero,-1242(a4) # 80049048 <excpt+0x38>
    8001052a:	00f41023          	sh	a5,0(s0)
    8001052e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80010532:	00100937          	lui	s2,0x100
    80010536:	04b90913          	addi	s2,s2,75 # 10004b <STACK_SIZE+0x4b>
    8001053a:	0932                	slli	s2,s2,0xc
    8001053c:	993e                	add	s2,s2,a5
    8001053e:	00093903          	ld	s2,0(s2)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    80010542:	08200593          	li	a1,130
    80010546:	0001a617          	auipc	a2,0x1a
    8001054a:	a3260613          	addi	a2,a2,-1486 # 80029f78 <__func__.0+0x33b8>
    8001054e:	00017517          	auipc	a0,0x17
    80010552:	96a50513          	addi	a0,a0,-1686 # 80026eb8 <__func__.0+0x2f8>
    80010556:	1af140ef          	jal	80024f04 <printf>
    8001055a:	00039797          	auipc	a5,0x39
    8001055e:	ab77c783          	lbu	a5,-1353(a5) # 80049011 <excpt+0x1>
    80010562:	00017597          	auipc	a1,0x17
    80010566:	92e58593          	addi	a1,a1,-1746 # 80026e90 <__func__.0+0x2d0>
    8001056a:	cf89                	beqz	a5,80010584 <addr_unaligned+0x292>
    8001056c:	6418                	ld	a4,8(s0)
    8001056e:	4791                	li	a5,4
    80010570:	00017597          	auipc	a1,0x17
    80010574:	91058593          	addi	a1,a1,-1776 # 80026e80 <__func__.0+0x2c0>
    80010578:	00f70663          	beq	a4,a5,80010584 <addr_unaligned+0x292>
    8001057c:	00017597          	auipc	a1,0x17
    80010580:	91458593          	addi	a1,a1,-1772 # 80026e90 <__func__.0+0x2d0>
    80010584:	00017517          	auipc	a0,0x17
    80010588:	94c50513          	addi	a0,a0,-1716 # 80026ed0 <__func__.0+0x310>
    8001058c:	179140ef          	jal	80024f04 <printf>
    80010590:	00039797          	auipc	a5,0x39
    80010594:	a817c783          	lbu	a5,-1407(a5) # 80049011 <excpt+0x1>
    80010598:	c789                	beqz	a5,800105a2 <addr_unaligned+0x2b0>
    8001059a:	6418                	ld	a4,8(s0)
    8001059c:	4791                	li	a5,4
    8001059e:	00f70c63          	beq	a4,a5,800105b6 <addr_unaligned+0x2c4>
    800105a2:	00017517          	auipc	a0,0x17
    800105a6:	93650513          	addi	a0,a0,-1738 # 80026ed8 <__func__.0+0x318>
    800105aa:	15b140ef          	jal	80024f04 <printf>
    800105ae:	02900513          	li	a0,41
    800105b2:	75c130ef          	jal	80023d0e <putchar>
    800105b6:	4529                	li	a0,10
    800105b8:	756130ef          	jal	80023d0e <putchar>
    800105bc:	c881                	beqz	s1,800105cc <addr_unaligned+0x2da>
    800105be:	00039797          	auipc	a5,0x39
    800105c2:	a537c783          	lbu	a5,-1453(a5) # 80049011 <excpt+0x1>
    800105c6:	4481                	li	s1,0
    800105c8:	30079163          	bnez	a5,800108ca <addr_unaligned+0x5d8>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    800105cc:	0330000f          	fence	rw,rw
    800105d0:	4785                	li	a5,1
    800105d2:	00039717          	auipc	a4,0x39
    800105d6:	a6073b23          	sd	zero,-1418(a4) # 80049048 <excpt+0x38>
    800105da:	00f41023          	sh	a5,0(s0)
    800105de:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sb, "sb", uint8_t);
    800105e2:	001007b7          	lui	a5,0x100
    800105e6:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800105ea:	07b2                	slli	a5,a5,0xc
    800105ec:	0785                	addi	a5,a5,1
    800105ee:	01278023          	sb	s2,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    800105f2:	08200593          	li	a1,130
    800105f6:	0001a617          	auipc	a2,0x1a
    800105fa:	9ba60613          	addi	a2,a2,-1606 # 80029fb0 <__func__.0+0x33f0>
    800105fe:	00017517          	auipc	a0,0x17
    80010602:	8ba50513          	addi	a0,a0,-1862 # 80026eb8 <__func__.0+0x2f8>
    80010606:	0ff140ef          	jal	80024f04 <printf>
    8001060a:	00039797          	auipc	a5,0x39
    8001060e:	a077c783          	lbu	a5,-1529(a5) # 80049011 <excpt+0x1>
    80010612:	00017597          	auipc	a1,0x17
    80010616:	87e58593          	addi	a1,a1,-1922 # 80026e90 <__func__.0+0x2d0>
    8001061a:	e789                	bnez	a5,80010624 <addr_unaligned+0x332>
    8001061c:	00017597          	auipc	a1,0x17
    80010620:	86458593          	addi	a1,a1,-1948 # 80026e80 <__func__.0+0x2c0>
    80010624:	00017517          	auipc	a0,0x17
    80010628:	8ac50513          	addi	a0,a0,-1876 # 80026ed0 <__func__.0+0x310>
    8001062c:	0d9140ef          	jal	80024f04 <printf>
    80010630:	00039797          	auipc	a5,0x39
    80010634:	9e17c783          	lbu	a5,-1567(a5) # 80049011 <excpt+0x1>
    80010638:	2a079963          	bnez	a5,800108ea <addr_unaligned+0x5f8>
    8001063c:	4529                	li	a0,10
    8001063e:	6d0130ef          	jal	80023d0e <putchar>
    80010642:	c499                	beqz	s1,80010650 <addr_unaligned+0x35e>
    80010644:	00039497          	auipc	s1,0x39
    80010648:	9cd4c483          	lbu	s1,-1587(s1) # 80049011 <excpt+0x1>
    8001064c:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    80010650:	0330000f          	fence	rw,rw
    80010654:	4785                	li	a5,1
    80010656:	00039717          	auipc	a4,0x39
    8001065a:	9e073923          	sd	zero,-1550(a4) # 80049048 <excpt+0x38>
    8001065e:	00f41023          	sh	a5,0(s0)
    80010662:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80010666:	001007b7          	lui	a5,0x100
    8001066a:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8001066e:	07b2                	slli	a5,a5,0xc
    80010670:	0785                	addi	a5,a5,1
    80010672:	01279023          	sh	s2,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    80010676:	08200593          	li	a1,130
    8001067a:	0001a617          	auipc	a2,0x1a
    8001067e:	96660613          	addi	a2,a2,-1690 # 80029fe0 <__func__.0+0x3420>
    80010682:	00017517          	auipc	a0,0x17
    80010686:	83650513          	addi	a0,a0,-1994 # 80026eb8 <__func__.0+0x2f8>
    8001068a:	07b140ef          	jal	80024f04 <printf>
    8001068e:	00039797          	auipc	a5,0x39
    80010692:	9837c783          	lbu	a5,-1661(a5) # 80049011 <excpt+0x1>
    80010696:	00016597          	auipc	a1,0x16
    8001069a:	7fa58593          	addi	a1,a1,2042 # 80026e90 <__func__.0+0x2d0>
    8001069e:	cf89                	beqz	a5,800106b8 <addr_unaligned+0x3c6>
    800106a0:	6418                	ld	a4,8(s0)
    800106a2:	4799                	li	a5,6
    800106a4:	00016597          	auipc	a1,0x16
    800106a8:	7dc58593          	addi	a1,a1,2012 # 80026e80 <__func__.0+0x2c0>
    800106ac:	00f70663          	beq	a4,a5,800106b8 <addr_unaligned+0x3c6>
    800106b0:	00016597          	auipc	a1,0x16
    800106b4:	7e058593          	addi	a1,a1,2016 # 80026e90 <__func__.0+0x2d0>
    800106b8:	00017517          	auipc	a0,0x17
    800106bc:	81850513          	addi	a0,a0,-2024 # 80026ed0 <__func__.0+0x310>
    800106c0:	045140ef          	jal	80024f04 <printf>
    800106c4:	00039797          	auipc	a5,0x39
    800106c8:	94d7c783          	lbu	a5,-1715(a5) # 80049011 <excpt+0x1>
    800106cc:	c789                	beqz	a5,800106d6 <addr_unaligned+0x3e4>
    800106ce:	6418                	ld	a4,8(s0)
    800106d0:	4799                	li	a5,6
    800106d2:	00f70c63          	beq	a4,a5,800106ea <addr_unaligned+0x3f8>
    800106d6:	00017517          	auipc	a0,0x17
    800106da:	80250513          	addi	a0,a0,-2046 # 80026ed8 <__func__.0+0x318>
    800106de:	027140ef          	jal	80024f04 <printf>
    800106e2:	02900513          	li	a0,41
    800106e6:	628130ef          	jal	80023d0e <putchar>
    800106ea:	4529                	li	a0,10
    800106ec:	622130ef          	jal	80023d0e <putchar>
    800106f0:	c881                	beqz	s1,80010700 <addr_unaligned+0x40e>
    800106f2:	00039797          	auipc	a5,0x39
    800106f6:	91f7c783          	lbu	a5,-1761(a5) # 80049011 <excpt+0x1>
    800106fa:	4481                	li	s1,0
    800106fc:	1c079263          	bnez	a5,800108c0 <addr_unaligned+0x5ce>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    80010700:	0330000f          	fence	rw,rw
    80010704:	4785                	li	a5,1
    80010706:	00039717          	auipc	a4,0x39
    8001070a:	94073123          	sd	zero,-1726(a4) # 80049048 <excpt+0x38>
    8001070e:	00f41023          	sh	a5,0(s0)
    80010712:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sw, "sw", uint32_t);
    80010716:	001007b7          	lui	a5,0x100
    8001071a:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8001071e:	07b2                	slli	a5,a5,0xc
    80010720:	0785                	addi	a5,a5,1
    80010722:	0127a023          	sw	s2,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    80010726:	08200593          	li	a1,130
    8001072a:	0001a617          	auipc	a2,0x1a
    8001072e:	8ee60613          	addi	a2,a2,-1810 # 8002a018 <__func__.0+0x3458>
    80010732:	00016517          	auipc	a0,0x16
    80010736:	78650513          	addi	a0,a0,1926 # 80026eb8 <__func__.0+0x2f8>
    8001073a:	7ca140ef          	jal	80024f04 <printf>
    8001073e:	00039797          	auipc	a5,0x39
    80010742:	8d37c783          	lbu	a5,-1837(a5) # 80049011 <excpt+0x1>
    80010746:	00016597          	auipc	a1,0x16
    8001074a:	74a58593          	addi	a1,a1,1866 # 80026e90 <__func__.0+0x2d0>
    8001074e:	cf89                	beqz	a5,80010768 <addr_unaligned+0x476>
    80010750:	6418                	ld	a4,8(s0)
    80010752:	4799                	li	a5,6
    80010754:	00016597          	auipc	a1,0x16
    80010758:	72c58593          	addi	a1,a1,1836 # 80026e80 <__func__.0+0x2c0>
    8001075c:	00f70663          	beq	a4,a5,80010768 <addr_unaligned+0x476>
    80010760:	00016597          	auipc	a1,0x16
    80010764:	73058593          	addi	a1,a1,1840 # 80026e90 <__func__.0+0x2d0>
    80010768:	00016517          	auipc	a0,0x16
    8001076c:	76850513          	addi	a0,a0,1896 # 80026ed0 <__func__.0+0x310>
    80010770:	794140ef          	jal	80024f04 <printf>
    80010774:	00039797          	auipc	a5,0x39
    80010778:	89d7c783          	lbu	a5,-1891(a5) # 80049011 <excpt+0x1>
    8001077c:	c789                	beqz	a5,80010786 <addr_unaligned+0x494>
    8001077e:	6418                	ld	a4,8(s0)
    80010780:	4799                	li	a5,6
    80010782:	00f70c63          	beq	a4,a5,8001079a <addr_unaligned+0x4a8>
    80010786:	00016517          	auipc	a0,0x16
    8001078a:	75250513          	addi	a0,a0,1874 # 80026ed8 <__func__.0+0x318>
    8001078e:	776140ef          	jal	80024f04 <printf>
    80010792:	02900513          	li	a0,41
    80010796:	578130ef          	jal	80023d0e <putchar>
    8001079a:	4529                	li	a0,10
    8001079c:	572130ef          	jal	80023d0e <putchar>
    800107a0:	c881                	beqz	s1,800107b0 <addr_unaligned+0x4be>
    800107a2:	00039797          	auipc	a5,0x39
    800107a6:	86f7c783          	lbu	a5,-1937(a5) # 80049011 <excpt+0x1>
    800107aa:	4481                	li	s1,0
    800107ac:	10079563          	bnez	a5,800108b6 <addr_unaligned+0x5c4>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    800107b0:	0330000f          	fence	rw,rw
    800107b4:	4785                	li	a5,1
    800107b6:	00039717          	auipc	a4,0x39
    800107ba:	88073923          	sd	zero,-1902(a4) # 80049048 <excpt+0x38>
    800107be:	00f41023          	sh	a5,0(s0)
    800107c2:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800107c6:	001007b7          	lui	a5,0x100
    800107ca:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    800107ce:	07b2                	slli	a5,a5,0xc
    800107d0:	0785                	addi	a5,a5,1
    800107d2:	0127b023          	sd	s2,0(a5)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    800107d6:	08200593          	li	a1,130
    800107da:	0001a617          	auipc	a2,0x1a
    800107de:	87660613          	addi	a2,a2,-1930 # 8002a050 <__func__.0+0x3490>
    800107e2:	00016517          	auipc	a0,0x16
    800107e6:	6d650513          	addi	a0,a0,1750 # 80026eb8 <__func__.0+0x2f8>
    800107ea:	71a140ef          	jal	80024f04 <printf>
    800107ee:	00039797          	auipc	a5,0x39
    800107f2:	8237c783          	lbu	a5,-2013(a5) # 80049011 <excpt+0x1>
    800107f6:	00016597          	auipc	a1,0x16
    800107fa:	69a58593          	addi	a1,a1,1690 # 80026e90 <__func__.0+0x2d0>
    800107fe:	cf89                	beqz	a5,80010818 <addr_unaligned+0x526>
    80010800:	6418                	ld	a4,8(s0)
    80010802:	4799                	li	a5,6
    80010804:	00016597          	auipc	a1,0x16
    80010808:	67c58593          	addi	a1,a1,1660 # 80026e80 <__func__.0+0x2c0>
    8001080c:	00f70663          	beq	a4,a5,80010818 <addr_unaligned+0x526>
    80010810:	00016597          	auipc	a1,0x16
    80010814:	68058593          	addi	a1,a1,1664 # 80026e90 <__func__.0+0x2d0>
    80010818:	00016517          	auipc	a0,0x16
    8001081c:	6b850513          	addi	a0,a0,1720 # 80026ed0 <__func__.0+0x310>
    80010820:	6e4140ef          	jal	80024f04 <printf>
    80010824:	00038797          	auipc	a5,0x38
    80010828:	7ed7c783          	lbu	a5,2029(a5) # 80049011 <excpt+0x1>
    8001082c:	c789                	beqz	a5,80010836 <addr_unaligned+0x544>
    8001082e:	6418                	ld	a4,8(s0)
    80010830:	4799                	li	a5,6
    80010832:	00f70c63          	beq	a4,a5,8001084a <addr_unaligned+0x558>
    80010836:	00016517          	auipc	a0,0x16
    8001083a:	6a250513          	addi	a0,a0,1698 # 80026ed8 <__func__.0+0x318>
    8001083e:	6c6140ef          	jal	80024f04 <printf>
    80010842:	02900513          	li	a0,41
    80010846:	4c8130ef          	jal	80023d0e <putchar>
    8001084a:	4529                	li	a0,10
    8001084c:	4c2130ef          	jal	80023d0e <putchar>
    80010850:	c095                	beqz	s1,80010874 <addr_unaligned+0x582>
    80010852:	00038497          	auipc	s1,0x38
    80010856:	7bf4c483          	lbu	s1,1983(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8001085a:	00016597          	auipc	a1,0x16
    8001085e:	63658593          	addi	a1,a1,1590 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    80010862:	cc91                	beqz	s1,8001087e <addr_unaligned+0x58c>
    80010864:	6418                	ld	a4,8(s0)
    80010866:	4799                	li	a5,6
    TEST_END();
    80010868:	00016597          	auipc	a1,0x16
    8001086c:	61858593          	addi	a1,a1,1560 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    80010870:	00f70763          	beq	a4,a5,8001087e <addr_unaligned+0x58c>
    80010874:	4481                	li	s1,0
    TEST_END();
    80010876:	00016597          	auipc	a1,0x16
    8001087a:	61a58593          	addi	a1,a1,1562 # 80026e90 <__func__.0+0x2d0>
    8001087e:	00016517          	auipc	a0,0x16
    80010882:	6ba50513          	addi	a0,a0,1722 # 80026f38 <__func__.0+0x378>
    80010886:	67e140ef          	jal	80024f04 <printf>
    8001088a:	4511                	li	a0,4
    8001088c:	b6af00ef          	jal	80000bf6 <goto_priv>
    80010890:	c1df00ef          	jal	800014ac <reset_state>

    80010894:	60e2                	ld	ra,24(sp)
    80010896:	6442                	ld	s0,16(sp)
    80010898:	6902                	ld	s2,0(sp)
    8001089a:	8526                	mv	a0,s1
    8001089c:	64a2                	ld	s1,8(sp)
    8001089e:	6105                	addi	sp,sp,32
    800108a0:	8082                	ret
    TEST_ASSERT("load word address is not aligned result in a lam",         
    800108a2:	6404                	ld	s1,8(s0)
    800108a4:	14f1                	addi	s1,s1,-4
    800108a6:	0014b493          	seqz	s1,s1
    800108aa:	b98d                	j	8001051c <addr_unaligned+0x22a>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    800108ac:	6404                	ld	s1,8(s0)
    800108ae:	14f1                	addi	s1,s1,-4
    800108b0:	0014b493          	seqz	s1,s1
    800108b4:	be65                	j	8001046c <addr_unaligned+0x17a>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    800108b6:	6404                	ld	s1,8(s0)
    800108b8:	14e9                	addi	s1,s1,-6
    800108ba:	0014b493          	seqz	s1,s1
    800108be:	bdcd                	j	800107b0 <addr_unaligned+0x4be>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    800108c0:	6404                	ld	s1,8(s0)
    800108c2:	14e9                	addi	s1,s1,-6
    800108c4:	0014b493          	seqz	s1,s1
    800108c8:	bd25                	j	80010700 <addr_unaligned+0x40e>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    800108ca:	6404                	ld	s1,8(s0)
    800108cc:	14f1                	addi	s1,s1,-4
    800108ce:	0014b493          	seqz	s1,s1
    800108d2:	b9ed                	j	800105cc <addr_unaligned+0x2da>
    TEST_ASSERT("load byte address is not aligned successful",         
    800108d4:	00016517          	auipc	a0,0x16
    800108d8:	60450513          	addi	a0,a0,1540 # 80026ed8 <__func__.0+0x318>
    800108dc:	628140ef          	jal	80024f04 <printf>
    800108e0:	02900513          	li	a0,41
    800108e4:	42a130ef          	jal	80023d0e <putchar>
    800108e8:	b4d1                	j	800103ac <addr_unaligned+0xba>
    TEST_ASSERT("store byte address is not aligned successful",         
    800108ea:	00016517          	auipc	a0,0x16
    800108ee:	5ee50513          	addi	a0,a0,1518 # 80026ed8 <__func__.0+0x318>
    800108f2:	612140ef          	jal	80024f04 <printf>
    800108f6:	02900513          	li	a0,41
    800108fa:	414130ef          	jal	80023d0e <putchar>
    800108fe:	bb3d                	j	8001063c <addr_unaligned+0x34a>

0000000080010900 <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    80010900:	1101                	addi	sp,sp,-32

    TEST_START();
    80010902:	00015597          	auipc	a1,0x15
    80010906:	21658593          	addi	a1,a1,534 # 80025b18 <__func__.13>
    8001090a:	00016517          	auipc	a0,0x16
    8001090e:	59650513          	addi	a0,a0,1430 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_1() {
    80010912:	ec06                	sd	ra,24(sp)
    80010914:	e822                	sd	s0,16(sp)
    80010916:	e426                	sd	s1,8(sp)
    TEST_START();
    80010918:	5ec140ef          	jal	80024f04 <printf>
    8001091c:	4529                	li	a0,10
    8001091e:	3f0130ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80010922:	0330000f          	fence	rw,rw
    80010926:	00038417          	auipc	s0,0x38
    8001092a:	6ea40413          	addi	s0,s0,1770 # 80049010 <excpt>
    8001092e:	4785                	li	a5,1
    80010930:	00038717          	auipc	a4,0x38
    80010934:	70073c23          	sd	zero,1816(a4) # 80049048 <excpt+0x38>
    80010938:	00f41023          	sh	a5,0(s0)
    8001093c:	0330000f          	fence	rw,rw
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_ILI
    // ); 

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    80010940:	4511                	li	a0,4
    80010942:	ab4f00ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    80010946:	6785                	lui	a5,0x1
    80010948:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8001094a:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    8001094e:	08200593          	li	a1,130
    80010952:	00019617          	auipc	a2,0x19
    80010956:	73e60613          	addi	a2,a2,1854 # 8002a090 <__func__.0+0x34d0>
    8001095a:	00016517          	auipc	a0,0x16
    8001095e:	55e50513          	addi	a0,a0,1374 # 80026eb8 <__func__.0+0x2f8>
    80010962:	5a2140ef          	jal	80024f04 <printf>
    80010966:	00038797          	auipc	a5,0x38
    8001096a:	6ab7c783          	lbu	a5,1707(a5) # 80049011 <excpt+0x1>
    8001096e:	00016597          	auipc	a1,0x16
    80010972:	52258593          	addi	a1,a1,1314 # 80026e90 <__func__.0+0x2d0>
    80010976:	cf89                	beqz	a5,80010990 <illegal_except_1+0x90>
    80010978:	6418                	ld	a4,8(s0)
    8001097a:	4789                	li	a5,2
    8001097c:	00016597          	auipc	a1,0x16
    80010980:	50458593          	addi	a1,a1,1284 # 80026e80 <__func__.0+0x2c0>
    80010984:	00f70663          	beq	a4,a5,80010990 <illegal_except_1+0x90>
    80010988:	00016597          	auipc	a1,0x16
    8001098c:	50858593          	addi	a1,a1,1288 # 80026e90 <__func__.0+0x2d0>
    80010990:	00016517          	auipc	a0,0x16
    80010994:	54050513          	addi	a0,a0,1344 # 80026ed0 <__func__.0+0x310>
    80010998:	56c140ef          	jal	80024f04 <printf>
    8001099c:	00038797          	auipc	a5,0x38
    800109a0:	6757c783          	lbu	a5,1653(a5) # 80049011 <excpt+0x1>
    800109a4:	c789                	beqz	a5,800109ae <illegal_except_1+0xae>
    800109a6:	6418                	ld	a4,8(s0)
    800109a8:	4789                	li	a5,2
    800109aa:	00f70c63          	beq	a4,a5,800109c2 <illegal_except_1+0xc2>
    800109ae:	00016517          	auipc	a0,0x16
    800109b2:	52a50513          	addi	a0,a0,1322 # 80026ed8 <__func__.0+0x318>
    800109b6:	54e140ef          	jal	80024f04 <printf>
    800109ba:	02900513          	li	a0,41
    800109be:	350130ef          	jal	80023d0e <putchar>
    800109c2:	4529                	li	a0,10
    800109c4:	34a130ef          	jal	80023d0e <putchar>
    800109c8:	00038797          	auipc	a5,0x38
    800109cc:	6497c783          	lbu	a5,1609(a5) # 80049011 <excpt+0x1>
    800109d0:	4481                	li	s1,0
    800109d2:	c789                	beqz	a5,800109dc <illegal_except_1+0xdc>
    800109d4:	6404                	ld	s1,8(s0)
    800109d6:	14f9                	addi	s1,s1,-2
    800109d8:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    800109dc:	450d                	li	a0,3
    800109de:	a18f00ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800109e2:	0330000f          	fence	rw,rw
    800109e6:	4785                	li	a5,1
    800109e8:	00038717          	auipc	a4,0x38
    800109ec:	66073023          	sd	zero,1632(a4) # 80049048 <excpt+0x38>
    800109f0:	00f41023          	sh	a5,0(s0)
    800109f4:	0330000f          	fence	rw,rw
    CSRR(CSR_MIE);
    800109f8:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    800109fc:	08200593          	li	a1,130
    80010a00:	00019617          	auipc	a2,0x19
    80010a04:	6d860613          	addi	a2,a2,1752 # 8002a0d8 <__func__.0+0x3518>
    80010a08:	00016517          	auipc	a0,0x16
    80010a0c:	4b050513          	addi	a0,a0,1200 # 80026eb8 <__func__.0+0x2f8>
    80010a10:	4f4140ef          	jal	80024f04 <printf>
    80010a14:	00038797          	auipc	a5,0x38
    80010a18:	5fd7c783          	lbu	a5,1533(a5) # 80049011 <excpt+0x1>
    80010a1c:	00016597          	auipc	a1,0x16
    80010a20:	47458593          	addi	a1,a1,1140 # 80026e90 <__func__.0+0x2d0>
    80010a24:	cf89                	beqz	a5,80010a3e <illegal_except_1+0x13e>
    80010a26:	6418                	ld	a4,8(s0)
    80010a28:	4789                	li	a5,2
    80010a2a:	00016597          	auipc	a1,0x16
    80010a2e:	45658593          	addi	a1,a1,1110 # 80026e80 <__func__.0+0x2c0>
    80010a32:	00f70663          	beq	a4,a5,80010a3e <illegal_except_1+0x13e>
    80010a36:	00016597          	auipc	a1,0x16
    80010a3a:	45a58593          	addi	a1,a1,1114 # 80026e90 <__func__.0+0x2d0>
    80010a3e:	00016517          	auipc	a0,0x16
    80010a42:	49250513          	addi	a0,a0,1170 # 80026ed0 <__func__.0+0x310>
    80010a46:	4be140ef          	jal	80024f04 <printf>
    80010a4a:	00038797          	auipc	a5,0x38
    80010a4e:	5c77c783          	lbu	a5,1479(a5) # 80049011 <excpt+0x1>
    80010a52:	c789                	beqz	a5,80010a5c <illegal_except_1+0x15c>
    80010a54:	6418                	ld	a4,8(s0)
    80010a56:	4789                	li	a5,2
    80010a58:	00f70c63          	beq	a4,a5,80010a70 <illegal_except_1+0x170>
    80010a5c:	00016517          	auipc	a0,0x16
    80010a60:	47c50513          	addi	a0,a0,1148 # 80026ed8 <__func__.0+0x318>
    80010a64:	4a0140ef          	jal	80024f04 <printf>
    80010a68:	02900513          	li	a0,41
    80010a6c:	2a2130ef          	jal	80023d0e <putchar>
    80010a70:	4529                	li	a0,10
    80010a72:	29c130ef          	jal	80023d0e <putchar>
    80010a76:	c095                	beqz	s1,80010a9a <illegal_except_1+0x19a>
    80010a78:	00038497          	auipc	s1,0x38
    80010a7c:	5994c483          	lbu	s1,1433(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010a80:	00016597          	auipc	a1,0x16
    80010a84:	41058593          	addi	a1,a1,1040 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010a88:	cc91                	beqz	s1,80010aa4 <illegal_except_1+0x1a4>
    80010a8a:	6418                	ld	a4,8(s0)
    80010a8c:	4789                	li	a5,2
    TEST_END();
    80010a8e:	00016597          	auipc	a1,0x16
    80010a92:	3f258593          	addi	a1,a1,1010 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010a96:	00f70763          	beq	a4,a5,80010aa4 <illegal_except_1+0x1a4>
    80010a9a:	4481                	li	s1,0
    TEST_END();
    80010a9c:	00016597          	auipc	a1,0x16
    80010aa0:	3f458593          	addi	a1,a1,1012 # 80026e90 <__func__.0+0x2d0>
    80010aa4:	00016517          	auipc	a0,0x16
    80010aa8:	49450513          	addi	a0,a0,1172 # 80026f38 <__func__.0+0x378>
    80010aac:	458140ef          	jal	80024f04 <printf>
    80010ab0:	4511                	li	a0,4
    80010ab2:	944f00ef          	jal	80000bf6 <goto_priv>
    80010ab6:	9f7f00ef          	jal	800014ac <reset_state>

}
    80010aba:	60e2                	ld	ra,24(sp)
    80010abc:	6442                	ld	s0,16(sp)
    80010abe:	8526                	mv	a0,s1
    80010ac0:	64a2                	ld	s1,8(sp)
    80010ac2:	6105                	addi	sp,sp,32
    80010ac4:	8082                	ret

0000000080010ac6 <illegal_except_2>:

bool illegal_except_2() {
    80010ac6:	1101                	addi	sp,sp,-32

    TEST_START();
    80010ac8:	00015597          	auipc	a1,0x15
    80010acc:	06858593          	addi	a1,a1,104 # 80025b30 <__func__.12>
    80010ad0:	00016517          	auipc	a0,0x16
    80010ad4:	3d050513          	addi	a0,a0,976 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_2() {
    80010ad8:	ec06                	sd	ra,24(sp)
    80010ada:	e822                	sd	s0,16(sp)
    80010adc:	e426                	sd	s1,8(sp)
    TEST_START();
    80010ade:	426140ef          	jal	80024f04 <printf>
    80010ae2:	4529                	li	a0,10
    80010ae4:	22a130ef          	jal	80023d0e <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    80010ae8:	4511                	li	a0,4
    80010aea:	90cf00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    80010aee:	001007b7          	lui	a5,0x100
    80010af2:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    80010af6:	18005073          	csrwi	satp,0
    goto_priv(PRIV_HS);
    80010afa:	450d                	li	a0,3
    80010afc:	8faf00ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010b00:	0330000f          	fence	rw,rw
    80010b04:	00038417          	auipc	s0,0x38
    80010b08:	50c40413          	addi	s0,s0,1292 # 80049010 <excpt>
    80010b0c:	4785                	li	a5,1
    80010b0e:	00038717          	auipc	a4,0x38
    80010b12:	52073d23          	sd	zero,1338(a4) # 80049048 <excpt+0x38>
    80010b16:	00f41023          	sh	a5,0(s0)
    80010b1a:	0330000f          	fence	rw,rw
    CSRR(satp);
    80010b1e:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010b22:	08200593          	li	a1,130
    80010b26:	00019617          	auipc	a2,0x19
    80010b2a:	60a60613          	addi	a2,a2,1546 # 8002a130 <__func__.0+0x3570>
    80010b2e:	00016517          	auipc	a0,0x16
    80010b32:	38a50513          	addi	a0,a0,906 # 80026eb8 <__func__.0+0x2f8>
    80010b36:	3ce140ef          	jal	80024f04 <printf>
    80010b3a:	00038797          	auipc	a5,0x38
    80010b3e:	4d77c783          	lbu	a5,1239(a5) # 80049011 <excpt+0x1>
    80010b42:	00016597          	auipc	a1,0x16
    80010b46:	34e58593          	addi	a1,a1,846 # 80026e90 <__func__.0+0x2d0>
    80010b4a:	cf89                	beqz	a5,80010b64 <illegal_except_2+0x9e>
    80010b4c:	6418                	ld	a4,8(s0)
    80010b4e:	4789                	li	a5,2
    80010b50:	00016597          	auipc	a1,0x16
    80010b54:	33058593          	addi	a1,a1,816 # 80026e80 <__func__.0+0x2c0>
    80010b58:	00f70663          	beq	a4,a5,80010b64 <illegal_except_2+0x9e>
    80010b5c:	00016597          	auipc	a1,0x16
    80010b60:	33458593          	addi	a1,a1,820 # 80026e90 <__func__.0+0x2d0>
    80010b64:	00016517          	auipc	a0,0x16
    80010b68:	36c50513          	addi	a0,a0,876 # 80026ed0 <__func__.0+0x310>
    80010b6c:	398140ef          	jal	80024f04 <printf>
    80010b70:	00038797          	auipc	a5,0x38
    80010b74:	4a17c783          	lbu	a5,1185(a5) # 80049011 <excpt+0x1>
    80010b78:	c789                	beqz	a5,80010b82 <illegal_except_2+0xbc>
    80010b7a:	6418                	ld	a4,8(s0)
    80010b7c:	4789                	li	a5,2
    80010b7e:	00f70c63          	beq	a4,a5,80010b96 <illegal_except_2+0xd0>
    80010b82:	00016517          	auipc	a0,0x16
    80010b86:	35650513          	addi	a0,a0,854 # 80026ed8 <__func__.0+0x318>
    80010b8a:	37a140ef          	jal	80024f04 <printf>
    80010b8e:	02900513          	li	a0,41
    80010b92:	17c130ef          	jal	80023d0e <putchar>
    80010b96:	4529                	li	a0,10
    80010b98:	176130ef          	jal	80023d0e <putchar>
    80010b9c:	00038497          	auipc	s1,0x38
    80010ba0:	4754c483          	lbu	s1,1141(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010ba4:	00016597          	auipc	a1,0x16
    80010ba8:	2ec58593          	addi	a1,a1,748 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010bac:	cc91                	beqz	s1,80010bc8 <illegal_except_2+0x102>
    80010bae:	6418                	ld	a4,8(s0)
    80010bb0:	4789                	li	a5,2
    TEST_END();
    80010bb2:	00016597          	auipc	a1,0x16
    80010bb6:	2ce58593          	addi	a1,a1,718 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010bba:	00f70763          	beq	a4,a5,80010bc8 <illegal_except_2+0x102>
    80010bbe:	4481                	li	s1,0
    TEST_END();
    80010bc0:	00016597          	auipc	a1,0x16
    80010bc4:	2d058593          	addi	a1,a1,720 # 80026e90 <__func__.0+0x2d0>
    80010bc8:	00016517          	auipc	a0,0x16
    80010bcc:	37050513          	addi	a0,a0,880 # 80026f38 <__func__.0+0x378>
    80010bd0:	334140ef          	jal	80024f04 <printf>
    80010bd4:	4511                	li	a0,4
    80010bd6:	820f00ef          	jal	80000bf6 <goto_priv>
    80010bda:	8d3f00ef          	jal	800014ac <reset_state>

}
    80010bde:	60e2                	ld	ra,24(sp)
    80010be0:	6442                	ld	s0,16(sp)
    80010be2:	8526                	mv	a0,s1
    80010be4:	64a2                	ld	s1,8(sp)
    80010be6:	6105                	addi	sp,sp,32
    80010be8:	8082                	ret

0000000080010bea <illegal_except_3>:

bool illegal_except_3() {
    80010bea:	1101                	addi	sp,sp,-32

    TEST_START();
    80010bec:	00015597          	auipc	a1,0x15
    80010bf0:	f5c58593          	addi	a1,a1,-164 # 80025b48 <__func__.11>
    80010bf4:	00016517          	auipc	a0,0x16
    80010bf8:	2ac50513          	addi	a0,a0,684 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_3() {
    80010bfc:	ec06                	sd	ra,24(sp)
    80010bfe:	e822                	sd	s0,16(sp)
    80010c00:	e426                	sd	s1,8(sp)
    TEST_START();
    80010c02:	302140ef          	jal	80024f04 <printf>
    80010c06:	4529                	li	a0,10
    80010c08:	106130ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80010c0c:	0330000f          	fence	rw,rw
    80010c10:	00038417          	auipc	s0,0x38
    80010c14:	40040413          	addi	s0,s0,1024 # 80049010 <excpt>
    80010c18:	4785                	li	a5,1
    80010c1a:	00038717          	auipc	a4,0x38
    80010c1e:	42073723          	sd	zero,1070(a4) # 80049048 <excpt+0x38>
    80010c22:	00f41023          	sh	a5,0(s0)
    80010c26:	0330000f          	fence	rw,rw

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    80010c2a:	342025f3          	csrr	a1,mcause
    80010c2e:	0001c517          	auipc	a0,0x1c
    80010c32:	7ba50513          	addi	a0,a0,1978 # 8002d3e8 <__func__.0+0x6828>
    80010c36:	2ce140ef          	jal	80024f04 <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    80010c3a:	57fd                	li	a5,-1
    80010c3c:	83f1                	srli	a5,a5,0x1c
    80010c3e:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    80010c42:	342025f3          	csrr	a1,mcause
    80010c46:	0001c517          	auipc	a0,0x1c
    80010c4a:	7a250513          	addi	a0,a0,1954 # 8002d3e8 <__func__.0+0x6828>
    80010c4e:	2b6140ef          	jal	80024f04 <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010c52:	08200593          	li	a1,130
    80010c56:	00019617          	auipc	a2,0x19
    80010c5a:	53a60613          	addi	a2,a2,1338 # 8002a190 <__func__.0+0x35d0>
    80010c5e:	00016517          	auipc	a0,0x16
    80010c62:	25a50513          	addi	a0,a0,602 # 80026eb8 <__func__.0+0x2f8>
    80010c66:	29e140ef          	jal	80024f04 <printf>
    80010c6a:	00038797          	auipc	a5,0x38
    80010c6e:	3a77c783          	lbu	a5,935(a5) # 80049011 <excpt+0x1>
    80010c72:	00016597          	auipc	a1,0x16
    80010c76:	21e58593          	addi	a1,a1,542 # 80026e90 <__func__.0+0x2d0>
    80010c7a:	cf89                	beqz	a5,80010c94 <illegal_except_3+0xaa>
    80010c7c:	6418                	ld	a4,8(s0)
    80010c7e:	4789                	li	a5,2
    80010c80:	00016597          	auipc	a1,0x16
    80010c84:	20058593          	addi	a1,a1,512 # 80026e80 <__func__.0+0x2c0>
    80010c88:	00f70663          	beq	a4,a5,80010c94 <illegal_except_3+0xaa>
    80010c8c:	00016597          	auipc	a1,0x16
    80010c90:	20458593          	addi	a1,a1,516 # 80026e90 <__func__.0+0x2d0>
    80010c94:	00016517          	auipc	a0,0x16
    80010c98:	23c50513          	addi	a0,a0,572 # 80026ed0 <__func__.0+0x310>
    80010c9c:	268140ef          	jal	80024f04 <printf>
    80010ca0:	00038797          	auipc	a5,0x38
    80010ca4:	3717c783          	lbu	a5,881(a5) # 80049011 <excpt+0x1>
    80010ca8:	c789                	beqz	a5,80010cb2 <illegal_except_3+0xc8>
    80010caa:	6418                	ld	a4,8(s0)
    80010cac:	4789                	li	a5,2
    80010cae:	00f70c63          	beq	a4,a5,80010cc6 <illegal_except_3+0xdc>
    80010cb2:	00016517          	auipc	a0,0x16
    80010cb6:	22650513          	addi	a0,a0,550 # 80026ed8 <__func__.0+0x318>
    80010cba:	24a140ef          	jal	80024f04 <printf>
    80010cbe:	02900513          	li	a0,41
    80010cc2:	04c130ef          	jal	80023d0e <putchar>
    80010cc6:	4529                	li	a0,10
    80010cc8:	046130ef          	jal	80023d0e <putchar>
    80010ccc:	00038497          	auipc	s1,0x38
    80010cd0:	3454c483          	lbu	s1,837(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80010cd4:	00016597          	auipc	a1,0x16
    80010cd8:	1bc58593          	addi	a1,a1,444 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010cdc:	cc91                	beqz	s1,80010cf8 <illegal_except_3+0x10e>
    80010cde:	6418                	ld	a4,8(s0)
    80010ce0:	4789                	li	a5,2
    TEST_END();
    80010ce2:	00016597          	auipc	a1,0x16
    80010ce6:	19e58593          	addi	a1,a1,414 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010cea:	00f70763          	beq	a4,a5,80010cf8 <illegal_except_3+0x10e>
    80010cee:	4481                	li	s1,0
    TEST_END();
    80010cf0:	00016597          	auipc	a1,0x16
    80010cf4:	1a058593          	addi	a1,a1,416 # 80026e90 <__func__.0+0x2d0>
    80010cf8:	00016517          	auipc	a0,0x16
    80010cfc:	24050513          	addi	a0,a0,576 # 80026f38 <__func__.0+0x378>
    80010d00:	204140ef          	jal	80024f04 <printf>
    80010d04:	4511                	li	a0,4
    80010d06:	ef1ef0ef          	jal	80000bf6 <goto_priv>
    80010d0a:	fa2f00ef          	jal	800014ac <reset_state>
}
    80010d0e:	60e2                	ld	ra,24(sp)
    80010d10:	6442                	ld	s0,16(sp)
    80010d12:	8526                	mv	a0,s1
    80010d14:	64a2                	ld	s1,8(sp)
    80010d16:	6105                	addi	sp,sp,32
    80010d18:	8082                	ret

0000000080010d1a <illegal_except_4>:



bool illegal_except_4() {
    80010d1a:	1101                	addi	sp,sp,-32

    TEST_START();
    80010d1c:	00015597          	auipc	a1,0x15
    80010d20:	e4458593          	addi	a1,a1,-444 # 80025b60 <__func__.10>
    80010d24:	00016517          	auipc	a0,0x16
    80010d28:	17c50513          	addi	a0,a0,380 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_4() {
    80010d2c:	ec06                	sd	ra,24(sp)
    80010d2e:	e822                	sd	s0,16(sp)
    80010d30:	e426                	sd	s1,8(sp)
    80010d32:	e04a                	sd	s2,0(sp)
    TEST_START();
    80010d34:	1d0140ef          	jal	80024f04 <printf>
    80010d38:	4529                	li	a0,10
    80010d3a:	7d5120ef          	jal	80023d0e <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    80010d3e:	4511                	li	a0,4
    80010d40:	eb7ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010d44:	0330000f          	fence	rw,rw
    80010d48:	00038417          	auipc	s0,0x38
    80010d4c:	2c840413          	addi	s0,s0,712 # 80049010 <excpt>
    80010d50:	4785                	li	a5,1
    80010d52:	00038717          	auipc	a4,0x38
    80010d56:	2e073b23          	sd	zero,758(a4) # 80049048 <excpt+0x38>
    80010d5a:	00f41023          	sh	a5,0(s0)
    80010d5e:	0330000f          	fence	rw,rw
    CSRR(CSR_MCAUSE);
    80010d62:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    80010d66:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    80010d6a:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    80010d6e:	08200593          	li	a1,130
    80010d72:	00019617          	auipc	a2,0x19
    80010d76:	45e60613          	addi	a2,a2,1118 # 8002a1d0 <__func__.0+0x3610>
    80010d7a:	00016517          	auipc	a0,0x16
    80010d7e:	13e50513          	addi	a0,a0,318 # 80026eb8 <__func__.0+0x2f8>
    80010d82:	182140ef          	jal	80024f04 <printf>
    80010d86:	00038797          	auipc	a5,0x38
    80010d8a:	28b7c783          	lbu	a5,651(a5) # 80049011 <excpt+0x1>
    80010d8e:	00016597          	auipc	a1,0x16
    80010d92:	0f258593          	addi	a1,a1,242 # 80026e80 <__func__.0+0x2c0>
    80010d96:	c789                	beqz	a5,80010da0 <illegal_except_4+0x86>
    80010d98:	00016597          	auipc	a1,0x16
    80010d9c:	0f858593          	addi	a1,a1,248 # 80026e90 <__func__.0+0x2d0>
    80010da0:	00016517          	auipc	a0,0x16
    80010da4:	13050513          	addi	a0,a0,304 # 80026ed0 <__func__.0+0x310>
    80010da8:	15c140ef          	jal	80024f04 <printf>
    80010dac:	00038797          	auipc	a5,0x38
    80010db0:	2657c783          	lbu	a5,613(a5) # 80049011 <excpt+0x1>
    80010db4:	1a079c63          	bnez	a5,80010f6c <illegal_except_4+0x252>
    80010db8:	4529                	li	a0,10
    80010dba:	755120ef          	jal	80023d0e <putchar>
    80010dbe:	00038917          	auipc	s2,0x38
    80010dc2:	25394903          	lbu	s2,595(s2) # 80049011 <excpt+0x1>
        excpt.triggered == false
    ); 

    reset_state();
    80010dc6:	ee6f00ef          	jal	800014ac <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    80010dca:	450d                	li	a0,3
    80010dcc:	e2bef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010dd0:	0330000f          	fence	rw,rw
    80010dd4:	4785                	li	a5,1
    80010dd6:	00038717          	auipc	a4,0x38
    80010dda:	26073923          	sd	zero,626(a4) # 80049048 <excpt+0x38>
    80010dde:	00f41023          	sh	a5,0(s0)
    80010de2:	0330000f          	fence	rw,rw
    CSRR(CSR_MCAUSE);
    80010de6:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    80010dea:	08200593          	li	a1,130
    80010dee:	00019617          	auipc	a2,0x19
    80010df2:	40a60613          	addi	a2,a2,1034 # 8002a1f8 <__func__.0+0x3638>
    80010df6:	00016517          	auipc	a0,0x16
    80010dfa:	0c250513          	addi	a0,a0,194 # 80026eb8 <__func__.0+0x2f8>
    80010dfe:	106140ef          	jal	80024f04 <printf>
    80010e02:	00038797          	auipc	a5,0x38
    80010e06:	20f7c783          	lbu	a5,527(a5) # 80049011 <excpt+0x1>
    80010e0a:	00016597          	auipc	a1,0x16
    80010e0e:	08658593          	addi	a1,a1,134 # 80026e90 <__func__.0+0x2d0>
    80010e12:	cf89                	beqz	a5,80010e2c <illegal_except_4+0x112>
    80010e14:	6418                	ld	a4,8(s0)
    80010e16:	4789                	li	a5,2
    80010e18:	00016597          	auipc	a1,0x16
    80010e1c:	06858593          	addi	a1,a1,104 # 80026e80 <__func__.0+0x2c0>
    80010e20:	00f70663          	beq	a4,a5,80010e2c <illegal_except_4+0x112>
    80010e24:	00016597          	auipc	a1,0x16
    80010e28:	06c58593          	addi	a1,a1,108 # 80026e90 <__func__.0+0x2d0>
    80010e2c:	00016517          	auipc	a0,0x16
    80010e30:	0a450513          	addi	a0,a0,164 # 80026ed0 <__func__.0+0x310>
    80010e34:	0d0140ef          	jal	80024f04 <printf>
    80010e38:	00038797          	auipc	a5,0x38
    80010e3c:	1d97c783          	lbu	a5,473(a5) # 80049011 <excpt+0x1>
    80010e40:	c789                	beqz	a5,80010e4a <illegal_except_4+0x130>
    80010e42:	6418                	ld	a4,8(s0)
    80010e44:	4789                	li	a5,2
    80010e46:	00f70c63          	beq	a4,a5,80010e5e <illegal_except_4+0x144>
    80010e4a:	00016517          	auipc	a0,0x16
    80010e4e:	08e50513          	addi	a0,a0,142 # 80026ed8 <__func__.0+0x318>
    80010e52:	0b2140ef          	jal	80024f04 <printf>
    80010e56:	02900513          	li	a0,41
    80010e5a:	6b5120ef          	jal	80023d0e <putchar>
    80010e5e:	4529                	li	a0,10
    80010e60:	6af120ef          	jal	80023d0e <putchar>
    80010e64:	4481                	li	s1,0
    80010e66:	00091863          	bnez	s2,80010e76 <illegal_except_4+0x15c>
    80010e6a:	00038797          	auipc	a5,0x38
    80010e6e:	1a77c783          	lbu	a5,423(a5) # 80049011 <excpt+0x1>
    80010e72:	0e079863          	bnez	a5,80010f62 <illegal_except_4+0x248>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    80010e76:	4509                	li	a0,2
    80010e78:	d7fef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010e7c:	0330000f          	fence	rw,rw
    80010e80:	4785                	li	a5,1
    80010e82:	00038717          	auipc	a4,0x38
    80010e86:	1c073323          	sd	zero,454(a4) # 80049048 <excpt+0x38>
    80010e8a:	00f41023          	sh	a5,0(s0)
    80010e8e:	0330000f          	fence	rw,rw
    CSRR(CSR_MIDELEG);
    80010e92:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010e96:	08200593          	li	a1,130
    80010e9a:	00019617          	auipc	a2,0x19
    80010e9e:	39660613          	addi	a2,a2,918 # 8002a230 <__func__.0+0x3670>
    80010ea2:	00016517          	auipc	a0,0x16
    80010ea6:	01650513          	addi	a0,a0,22 # 80026eb8 <__func__.0+0x2f8>
    80010eaa:	05a140ef          	jal	80024f04 <printf>
    80010eae:	00038797          	auipc	a5,0x38
    80010eb2:	1637c783          	lbu	a5,355(a5) # 80049011 <excpt+0x1>
    80010eb6:	00016597          	auipc	a1,0x16
    80010eba:	fda58593          	addi	a1,a1,-38 # 80026e90 <__func__.0+0x2d0>
    80010ebe:	cf89                	beqz	a5,80010ed8 <illegal_except_4+0x1be>
    80010ec0:	6418                	ld	a4,8(s0)
    80010ec2:	4789                	li	a5,2
    80010ec4:	00016597          	auipc	a1,0x16
    80010ec8:	fbc58593          	addi	a1,a1,-68 # 80026e80 <__func__.0+0x2c0>
    80010ecc:	00f70663          	beq	a4,a5,80010ed8 <illegal_except_4+0x1be>
    80010ed0:	00016597          	auipc	a1,0x16
    80010ed4:	fc058593          	addi	a1,a1,-64 # 80026e90 <__func__.0+0x2d0>
    80010ed8:	00016517          	auipc	a0,0x16
    80010edc:	ff850513          	addi	a0,a0,-8 # 80026ed0 <__func__.0+0x310>
    80010ee0:	024140ef          	jal	80024f04 <printf>
    80010ee4:	00038797          	auipc	a5,0x38
    80010ee8:	12d7c783          	lbu	a5,301(a5) # 80049011 <excpt+0x1>
    80010eec:	c789                	beqz	a5,80010ef6 <illegal_except_4+0x1dc>
    80010eee:	6418                	ld	a4,8(s0)
    80010ef0:	4789                	li	a5,2
    80010ef2:	00f70c63          	beq	a4,a5,80010f0a <illegal_except_4+0x1f0>
    80010ef6:	00016517          	auipc	a0,0x16
    80010efa:	fe250513          	addi	a0,a0,-30 # 80026ed8 <__func__.0+0x318>
    80010efe:	006140ef          	jal	80024f04 <printf>
    80010f02:	02900513          	li	a0,41
    80010f06:	609120ef          	jal	80023d0e <putchar>
    80010f0a:	4529                	li	a0,10
    80010f0c:	603120ef          	jal	80023d0e <putchar>
    80010f10:	c095                	beqz	s1,80010f34 <illegal_except_4+0x21a>
    80010f12:	00038497          	auipc	s1,0x38
    80010f16:	0ff4c483          	lbu	s1,255(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    80010f1a:	00016597          	auipc	a1,0x16
    80010f1e:	f7658593          	addi	a1,a1,-138 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010f22:	cc91                	beqz	s1,80010f3e <illegal_except_4+0x224>
    80010f24:	6418                	ld	a4,8(s0)
    80010f26:	4789                	li	a5,2
    TEST_END();
    80010f28:	00016597          	auipc	a1,0x16
    80010f2c:	f5858593          	addi	a1,a1,-168 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010f30:	00f70763          	beq	a4,a5,80010f3e <illegal_except_4+0x224>
    80010f34:	4481                	li	s1,0
    TEST_END();
    80010f36:	00016597          	auipc	a1,0x16
    80010f3a:	f5a58593          	addi	a1,a1,-166 # 80026e90 <__func__.0+0x2d0>
    80010f3e:	00016517          	auipc	a0,0x16
    80010f42:	ffa50513          	addi	a0,a0,-6 # 80026f38 <__func__.0+0x378>
    80010f46:	7bf130ef          	jal	80024f04 <printf>
    80010f4a:	4511                	li	a0,4
    80010f4c:	cabef0ef          	jal	80000bf6 <goto_priv>
    80010f50:	d5cf00ef          	jal	800014ac <reset_state>
}
    80010f54:	60e2                	ld	ra,24(sp)
    80010f56:	6442                	ld	s0,16(sp)
    80010f58:	6902                	ld	s2,0(sp)
    80010f5a:	8526                	mv	a0,s1
    80010f5c:	64a2                	ld	s1,8(sp)
    80010f5e:	6105                	addi	sp,sp,32
    80010f60:	8082                	ret
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    80010f62:	6404                	ld	s1,8(s0)
    80010f64:	14f9                	addi	s1,s1,-2
    80010f66:	0014b493          	seqz	s1,s1
    80010f6a:	b731                	j	80010e76 <illegal_except_4+0x15c>
    TEST_ASSERT("m mode access any csr successful",
    80010f6c:	00016517          	auipc	a0,0x16
    80010f70:	f6c50513          	addi	a0,a0,-148 # 80026ed8 <__func__.0+0x318>
    80010f74:	791130ef          	jal	80024f04 <printf>
    80010f78:	02900513          	li	a0,41
    80010f7c:	593120ef          	jal	80023d0e <putchar>
    80010f80:	bd25                	j	80010db8 <illegal_except_4+0x9e>

0000000080010f82 <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    80010f82:	1101                	addi	sp,sp,-32

    TEST_START();
    80010f84:	00015597          	auipc	a1,0x15
    80010f88:	bf458593          	addi	a1,a1,-1036 # 80025b78 <__func__.9>
    80010f8c:	00016517          	auipc	a0,0x16
    80010f90:	f1450513          	addi	a0,a0,-236 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_5() {
    80010f94:	ec06                	sd	ra,24(sp)
    80010f96:	e822                	sd	s0,16(sp)
    80010f98:	e426                	sd	s1,8(sp)
    TEST_START();
    80010f9a:	76b130ef          	jal	80024f04 <printf>
    80010f9e:	4529                	li	a0,10
    80010fa0:	56f120ef          	jal	80023d0e <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    80010fa4:	4511                	li	a0,4
    80010fa6:	c51ef0ef          	jal	80000bf6 <goto_priv>
    CSRW(satp, 0x0);
    80010faa:	18005073          	csrwi	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    80010fae:	001007b7          	lui	a5,0x100
    80010fb2:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010fb6:	450d                	li	a0,3
    80010fb8:	c3fef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80010fbc:	0330000f          	fence	rw,rw
    80010fc0:	00038417          	auipc	s0,0x38
    80010fc4:	05040413          	addi	s0,s0,80 # 80049010 <excpt>
    80010fc8:	4785                	li	a5,1
    80010fca:	00038717          	auipc	a4,0x38
    80010fce:	06073f23          	sd	zero,126(a4) # 80049048 <excpt+0x38>
    80010fd2:	00f41023          	sh	a5,0(s0)
    80010fd6:	0330000f          	fence	rw,rw
    CSRR(satp);
    80010fda:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010fde:	08200593          	li	a1,130
    80010fe2:	00019617          	auipc	a2,0x19
    80010fe6:	14e60613          	addi	a2,a2,334 # 8002a130 <__func__.0+0x3570>
    80010fea:	00016517          	auipc	a0,0x16
    80010fee:	ece50513          	addi	a0,a0,-306 # 80026eb8 <__func__.0+0x2f8>
    80010ff2:	713130ef          	jal	80024f04 <printf>
    80010ff6:	00038797          	auipc	a5,0x38
    80010ffa:	01b7c783          	lbu	a5,27(a5) # 80049011 <excpt+0x1>
    80010ffe:	00016597          	auipc	a1,0x16
    80011002:	e9258593          	addi	a1,a1,-366 # 80026e90 <__func__.0+0x2d0>
    80011006:	cf89                	beqz	a5,80011020 <illegal_except_5+0x9e>
    80011008:	6418                	ld	a4,8(s0)
    8001100a:	4789                	li	a5,2
    8001100c:	00016597          	auipc	a1,0x16
    80011010:	e7458593          	addi	a1,a1,-396 # 80026e80 <__func__.0+0x2c0>
    80011014:	00f70663          	beq	a4,a5,80011020 <illegal_except_5+0x9e>
    80011018:	00016597          	auipc	a1,0x16
    8001101c:	e7858593          	addi	a1,a1,-392 # 80026e90 <__func__.0+0x2d0>
    80011020:	00016517          	auipc	a0,0x16
    80011024:	eb050513          	addi	a0,a0,-336 # 80026ed0 <__func__.0+0x310>
    80011028:	6dd130ef          	jal	80024f04 <printf>
    8001102c:	00038797          	auipc	a5,0x38
    80011030:	fe57c783          	lbu	a5,-27(a5) # 80049011 <excpt+0x1>
    80011034:	c789                	beqz	a5,8001103e <illegal_except_5+0xbc>
    80011036:	6418                	ld	a4,8(s0)
    80011038:	4789                	li	a5,2
    8001103a:	00f70c63          	beq	a4,a5,80011052 <illegal_except_5+0xd0>
    8001103e:	00016517          	auipc	a0,0x16
    80011042:	e9a50513          	addi	a0,a0,-358 # 80026ed8 <__func__.0+0x318>
    80011046:	6bf130ef          	jal	80024f04 <printf>
    8001104a:	02900513          	li	a0,41
    8001104e:	4c1120ef          	jal	80023d0e <putchar>
    80011052:	4529                	li	a0,10
    80011054:	4bb120ef          	jal	80023d0e <putchar>
    80011058:	00038497          	auipc	s1,0x38
    8001105c:	fb94c483          	lbu	s1,-71(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011060:	00016597          	auipc	a1,0x16
    80011064:	e3058593          	addi	a1,a1,-464 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80011068:	cc91                	beqz	s1,80011084 <illegal_except_5+0x102>
    8001106a:	6418                	ld	a4,8(s0)
    8001106c:	4789                	li	a5,2
    TEST_END();
    8001106e:	00016597          	auipc	a1,0x16
    80011072:	e1258593          	addi	a1,a1,-494 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80011076:	00f70763          	beq	a4,a5,80011084 <illegal_except_5+0x102>
    8001107a:	4481                	li	s1,0
    TEST_END();
    8001107c:	00016597          	auipc	a1,0x16
    80011080:	e1458593          	addi	a1,a1,-492 # 80026e90 <__func__.0+0x2d0>
    80011084:	00016517          	auipc	a0,0x16
    80011088:	eb450513          	addi	a0,a0,-332 # 80026f38 <__func__.0+0x378>
    8001108c:	679130ef          	jal	80024f04 <printf>
    80011090:	4511                	li	a0,4
    80011092:	b65ef0ef          	jal	80000bf6 <goto_priv>
    80011096:	c16f00ef          	jal	800014ac <reset_state>
}
    8001109a:	60e2                	ld	ra,24(sp)
    8001109c:	6442                	ld	s0,16(sp)
    8001109e:	8526                	mv	a0,s1
    800110a0:	64a2                	ld	s1,8(sp)
    800110a2:	6105                	addi	sp,sp,32
    800110a4:	8082                	ret

00000000800110a6 <illegal_except_6>:

bool illegal_except_6() {
    800110a6:	1101                	addi	sp,sp,-32

    TEST_START();
    800110a8:	00015597          	auipc	a1,0x15
    800110ac:	ae858593          	addi	a1,a1,-1304 # 80025b90 <__func__.8>
    800110b0:	00016517          	auipc	a0,0x16
    800110b4:	df050513          	addi	a0,a0,-528 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_6() {
    800110b8:	ec06                	sd	ra,24(sp)
    800110ba:	e822                	sd	s0,16(sp)
    800110bc:	e426                	sd	s1,8(sp)
    TEST_START();
    800110be:	647130ef          	jal	80024f04 <printf>
    800110c2:	4529                	li	a0,10
    800110c4:	44b120ef          	jal	80023d0e <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    800110c8:	4511                	li	a0,4
    800110ca:	b2def0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    800110ce:	001007b7          	lui	a5,0x100
    800110d2:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    800110d6:	450d                	li	a0,3
    800110d8:	b1fef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800110dc:	0330000f          	fence	rw,rw
    800110e0:	00038417          	auipc	s0,0x38
    800110e4:	f3040413          	addi	s0,s0,-208 # 80049010 <excpt>
    800110e8:	4785                	li	a5,1
    800110ea:	00038717          	auipc	a4,0x38
    800110ee:	f4073f23          	sd	zero,-162(a4) # 80049048 <excpt+0x38>
    800110f2:	00f41023          	sh	a5,0(s0)
    800110f6:	0330000f          	fence	rw,rw
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    800110fa:	57fd                	li	a5,-1
    800110fc:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80011100:	08200593          	li	a1,130
    80011104:	00019617          	auipc	a2,0x19
    80011108:	16460613          	addi	a2,a2,356 # 8002a268 <__func__.0+0x36a8>
    8001110c:	00016517          	auipc	a0,0x16
    80011110:	dac50513          	addi	a0,a0,-596 # 80026eb8 <__func__.0+0x2f8>
    80011114:	5f1130ef          	jal	80024f04 <printf>
    80011118:	00038797          	auipc	a5,0x38
    8001111c:	ef97c783          	lbu	a5,-263(a5) # 80049011 <excpt+0x1>
    80011120:	00016597          	auipc	a1,0x16
    80011124:	d7058593          	addi	a1,a1,-656 # 80026e90 <__func__.0+0x2d0>
    80011128:	cf89                	beqz	a5,80011142 <illegal_except_6+0x9c>
    8001112a:	6418                	ld	a4,8(s0)
    8001112c:	4789                	li	a5,2
    8001112e:	00016597          	auipc	a1,0x16
    80011132:	d5258593          	addi	a1,a1,-686 # 80026e80 <__func__.0+0x2c0>
    80011136:	00f70663          	beq	a4,a5,80011142 <illegal_except_6+0x9c>
    8001113a:	00016597          	auipc	a1,0x16
    8001113e:	d5658593          	addi	a1,a1,-682 # 80026e90 <__func__.0+0x2d0>
    80011142:	00016517          	auipc	a0,0x16
    80011146:	d8e50513          	addi	a0,a0,-626 # 80026ed0 <__func__.0+0x310>
    8001114a:	5bb130ef          	jal	80024f04 <printf>
    8001114e:	00038797          	auipc	a5,0x38
    80011152:	ec37c783          	lbu	a5,-317(a5) # 80049011 <excpt+0x1>
    80011156:	c789                	beqz	a5,80011160 <illegal_except_6+0xba>
    80011158:	6418                	ld	a4,8(s0)
    8001115a:	4789                	li	a5,2
    8001115c:	00f70c63          	beq	a4,a5,80011174 <illegal_except_6+0xce>
    80011160:	00016517          	auipc	a0,0x16
    80011164:	d7850513          	addi	a0,a0,-648 # 80026ed8 <__func__.0+0x318>
    80011168:	59d130ef          	jal	80024f04 <printf>
    8001116c:	02900513          	li	a0,41
    80011170:	39f120ef          	jal	80023d0e <putchar>
    80011174:	4529                	li	a0,10
    80011176:	399120ef          	jal	80023d0e <putchar>
    8001117a:	00038497          	auipc	s1,0x38
    8001117e:	e974c483          	lbu	s1,-361(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011182:	00016597          	auipc	a1,0x16
    80011186:	d0e58593          	addi	a1,a1,-754 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8001118a:	cc91                	beqz	s1,800111a6 <illegal_except_6+0x100>
    8001118c:	6418                	ld	a4,8(s0)
    8001118e:	4789                	li	a5,2
    TEST_END();
    80011190:	00016597          	auipc	a1,0x16
    80011194:	cf058593          	addi	a1,a1,-784 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    80011198:	00f70763          	beq	a4,a5,800111a6 <illegal_except_6+0x100>
    8001119c:	4481                	li	s1,0
    TEST_END();
    8001119e:	00016597          	auipc	a1,0x16
    800111a2:	cf258593          	addi	a1,a1,-782 # 80026e90 <__func__.0+0x2d0>
    800111a6:	00016517          	auipc	a0,0x16
    800111aa:	d9250513          	addi	a0,a0,-622 # 80026f38 <__func__.0+0x378>
    800111ae:	557130ef          	jal	80024f04 <printf>
    800111b2:	4511                	li	a0,4
    800111b4:	a43ef0ef          	jal	80000bf6 <goto_priv>
    800111b8:	af4f00ef          	jal	800014ac <reset_state>
}
    800111bc:	60e2                	ld	ra,24(sp)
    800111be:	6442                	ld	s0,16(sp)
    800111c0:	8526                	mv	a0,s1
    800111c2:	64a2                	ld	s1,8(sp)
    800111c4:	6105                	addi	sp,sp,32
    800111c6:	8082                	ret

00000000800111c8 <illegal_except_7>:

bool illegal_except_7() {
    800111c8:	1101                	addi	sp,sp,-32

    TEST_START();
    800111ca:	00015597          	auipc	a1,0x15
    800111ce:	9de58593          	addi	a1,a1,-1570 # 80025ba8 <__func__.7>
    800111d2:	00016517          	auipc	a0,0x16
    800111d6:	cce50513          	addi	a0,a0,-818 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_7() {
    800111da:	ec06                	sd	ra,24(sp)
    800111dc:	e822                	sd	s0,16(sp)
    800111de:	e426                	sd	s1,8(sp)
    TEST_START();
    800111e0:	525130ef          	jal	80024f04 <printf>
    800111e4:	4529                	li	a0,10
    800111e6:	329120ef          	jal	80023d0e <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    800111ea:	4511                	li	a0,4
    800111ec:	a0bef0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    800111f0:	001007b7          	lui	a5,0x100
    800111f4:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    800111f8:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    800111fc:	450d                	li	a0,3
    800111fe:	9f9ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011202:	0330000f          	fence	rw,rw
    80011206:	00038417          	auipc	s0,0x38
    8001120a:	e0a40413          	addi	s0,s0,-502 # 80049010 <excpt>
    8001120e:	4785                	li	a5,1
    80011210:	00038717          	auipc	a4,0x38
    80011214:	e2073c23          	sd	zero,-456(a4) # 80049048 <excpt+0x38>
    80011218:	00f41023          	sh	a5,0(s0)
    8001121c:	0330000f          	fence	rw,rw
    asm volatile(
    80011220:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    80011224:	08200593          	li	a1,130
    80011228:	00019617          	auipc	a2,0x19
    8001122c:	0a860613          	addi	a2,a2,168 # 8002a2d0 <__func__.0+0x3710>
    80011230:	00016517          	auipc	a0,0x16
    80011234:	c8850513          	addi	a0,a0,-888 # 80026eb8 <__func__.0+0x2f8>
    80011238:	4cd130ef          	jal	80024f04 <printf>
    8001123c:	00038797          	auipc	a5,0x38
    80011240:	dd57c783          	lbu	a5,-555(a5) # 80049011 <excpt+0x1>
    80011244:	00016597          	auipc	a1,0x16
    80011248:	c4c58593          	addi	a1,a1,-948 # 80026e90 <__func__.0+0x2d0>
    8001124c:	cf89                	beqz	a5,80011266 <illegal_except_7+0x9e>
    8001124e:	6418                	ld	a4,8(s0)
    80011250:	4789                	li	a5,2
    80011252:	00016597          	auipc	a1,0x16
    80011256:	c2e58593          	addi	a1,a1,-978 # 80026e80 <__func__.0+0x2c0>
    8001125a:	00f70663          	beq	a4,a5,80011266 <illegal_except_7+0x9e>
    8001125e:	00016597          	auipc	a1,0x16
    80011262:	c3258593          	addi	a1,a1,-974 # 80026e90 <__func__.0+0x2d0>
    80011266:	00016517          	auipc	a0,0x16
    8001126a:	c6a50513          	addi	a0,a0,-918 # 80026ed0 <__func__.0+0x310>
    8001126e:	497130ef          	jal	80024f04 <printf>
    80011272:	00038797          	auipc	a5,0x38
    80011276:	d9f7c783          	lbu	a5,-609(a5) # 80049011 <excpt+0x1>
    8001127a:	c789                	beqz	a5,80011284 <illegal_except_7+0xbc>
    8001127c:	6418                	ld	a4,8(s0)
    8001127e:	4789                	li	a5,2
    80011280:	00f70c63          	beq	a4,a5,80011298 <illegal_except_7+0xd0>
    80011284:	00016517          	auipc	a0,0x16
    80011288:	c5450513          	addi	a0,a0,-940 # 80026ed8 <__func__.0+0x318>
    8001128c:	479130ef          	jal	80024f04 <printf>
    80011290:	02900513          	li	a0,41
    80011294:	27b120ef          	jal	80023d0e <putchar>
    80011298:	4529                	li	a0,10
    8001129a:	275120ef          	jal	80023d0e <putchar>
    8001129e:	00038797          	auipc	a5,0x38
    800112a2:	d737c783          	lbu	a5,-653(a5) # 80049011 <excpt+0x1>
    800112a6:	4481                	li	s1,0
    800112a8:	c789                	beqz	a5,800112b2 <illegal_except_7+0xea>
    800112aa:	6404                	ld	s1,8(s0)
    800112ac:	14f9                	addi	s1,s1,-2
    800112ae:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    800112b2:	450d                	li	a0,3
    800112b4:	943ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800112b8:	0330000f          	fence	rw,rw
    800112bc:	4785                	li	a5,1
    800112be:	00038717          	auipc	a4,0x38
    800112c2:	d8073523          	sd	zero,-630(a4) # 80049048 <excpt+0x38>
    800112c6:	00f41023          	sh	a5,0(s0)
    800112ca:	0330000f          	fence	rw,rw
    asm volatile(
    800112ce:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    800112d2:	08200593          	li	a1,130
    800112d6:	00019617          	auipc	a2,0x19
    800112da:	02a60613          	addi	a2,a2,42 # 8002a300 <__func__.0+0x3740>
    800112de:	00016517          	auipc	a0,0x16
    800112e2:	bda50513          	addi	a0,a0,-1062 # 80026eb8 <__func__.0+0x2f8>
    800112e6:	41f130ef          	jal	80024f04 <printf>
    800112ea:	00038797          	auipc	a5,0x38
    800112ee:	d277c783          	lbu	a5,-729(a5) # 80049011 <excpt+0x1>
    800112f2:	00016597          	auipc	a1,0x16
    800112f6:	b9e58593          	addi	a1,a1,-1122 # 80026e90 <__func__.0+0x2d0>
    800112fa:	cf89                	beqz	a5,80011314 <illegal_except_7+0x14c>
    800112fc:	6418                	ld	a4,8(s0)
    800112fe:	4789                	li	a5,2
    80011300:	00016597          	auipc	a1,0x16
    80011304:	b8058593          	addi	a1,a1,-1152 # 80026e80 <__func__.0+0x2c0>
    80011308:	00f70663          	beq	a4,a5,80011314 <illegal_except_7+0x14c>
    8001130c:	00016597          	auipc	a1,0x16
    80011310:	b8458593          	addi	a1,a1,-1148 # 80026e90 <__func__.0+0x2d0>
    80011314:	00016517          	auipc	a0,0x16
    80011318:	bbc50513          	addi	a0,a0,-1092 # 80026ed0 <__func__.0+0x310>
    8001131c:	3e9130ef          	jal	80024f04 <printf>
    80011320:	00038797          	auipc	a5,0x38
    80011324:	cf17c783          	lbu	a5,-783(a5) # 80049011 <excpt+0x1>
    80011328:	c789                	beqz	a5,80011332 <illegal_except_7+0x16a>
    8001132a:	6418                	ld	a4,8(s0)
    8001132c:	4789                	li	a5,2
    8001132e:	00f70c63          	beq	a4,a5,80011346 <illegal_except_7+0x17e>
    80011332:	00016517          	auipc	a0,0x16
    80011336:	ba650513          	addi	a0,a0,-1114 # 80026ed8 <__func__.0+0x318>
    8001133a:	3cb130ef          	jal	80024f04 <printf>
    8001133e:	02900513          	li	a0,41
    80011342:	1cd120ef          	jal	80023d0e <putchar>
    80011346:	4529                	li	a0,10
    80011348:	1c7120ef          	jal	80023d0e <putchar>
    8001134c:	c095                	beqz	s1,80011370 <illegal_except_7+0x1a8>
    8001134e:	00038497          	auipc	s1,0x38
    80011352:	cc34c483          	lbu	s1,-829(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011356:	00016597          	auipc	a1,0x16
    8001135a:	b3a58593          	addi	a1,a1,-1222 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8001135e:	cc91                	beqz	s1,8001137a <illegal_except_7+0x1b2>
    80011360:	6418                	ld	a4,8(s0)
    80011362:	4789                	li	a5,2
    TEST_END();
    80011364:	00016597          	auipc	a1,0x16
    80011368:	b1c58593          	addi	a1,a1,-1252 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8001136c:	00f70763          	beq	a4,a5,8001137a <illegal_except_7+0x1b2>
    80011370:	4481                	li	s1,0
    TEST_END();
    80011372:	00016597          	auipc	a1,0x16
    80011376:	b1e58593          	addi	a1,a1,-1250 # 80026e90 <__func__.0+0x2d0>
    8001137a:	00016517          	auipc	a0,0x16
    8001137e:	bbe50513          	addi	a0,a0,-1090 # 80026f38 <__func__.0+0x378>
    80011382:	383130ef          	jal	80024f04 <printf>
    80011386:	4511                	li	a0,4
    80011388:	86fef0ef          	jal	80000bf6 <goto_priv>
    8001138c:	920f00ef          	jal	800014ac <reset_state>
}
    80011390:	60e2                	ld	ra,24(sp)
    80011392:	6442                	ld	s0,16(sp)
    80011394:	8526                	mv	a0,s1
    80011396:	64a2                	ld	s1,8(sp)
    80011398:	6105                	addi	sp,sp,32
    8001139a:	8082                	ret

000000008001139c <illegal_except_8>:


bool illegal_except_8() {
    8001139c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001139e:	00015597          	auipc	a1,0x15
    800113a2:	82258593          	addi	a1,a1,-2014 # 80025bc0 <__func__.6>
    800113a6:	00016517          	auipc	a0,0x16
    800113aa:	afa50513          	addi	a0,a0,-1286 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_8() {
    800113ae:	e406                	sd	ra,8(sp)
    800113b0:	e022                	sd	s0,0(sp)
    TEST_START();
    800113b2:	353130ef          	jal	80024f04 <printf>
    800113b6:	4529                	li	a0,10
    800113b8:	157120ef          	jal	80023d0e <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    800113bc:	4511                	li	a0,4
    800113be:	839ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800113c2:	0330000f          	fence	rw,rw
    800113c6:	4785                	li	a5,1
    800113c8:	00038717          	auipc	a4,0x38
    800113cc:	c8073023          	sd	zero,-896(a4) # 80049048 <excpt+0x38>
    800113d0:	00038717          	auipc	a4,0x38
    800113d4:	c4f71023          	sh	a5,-960(a4) # 80049010 <excpt>
    800113d8:	0330000f          	fence	rw,rw
    asm volatile(
    800113dc:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    800113e0:	08200593          	li	a1,130
    800113e4:	00019617          	auipc	a2,0x19
    800113e8:	f4c60613          	addi	a2,a2,-180 # 8002a330 <__func__.0+0x3770>
    800113ec:	00016517          	auipc	a0,0x16
    800113f0:	acc50513          	addi	a0,a0,-1332 # 80026eb8 <__func__.0+0x2f8>
    800113f4:	311130ef          	jal	80024f04 <printf>
    800113f8:	00038797          	auipc	a5,0x38
    800113fc:	c197c783          	lbu	a5,-999(a5) # 80049011 <excpt+0x1>
    80011400:	00016597          	auipc	a1,0x16
    80011404:	a8058593          	addi	a1,a1,-1408 # 80026e80 <__func__.0+0x2c0>
    80011408:	c789                	beqz	a5,80011412 <illegal_except_8+0x76>
    8001140a:	00016597          	auipc	a1,0x16
    8001140e:	a8658593          	addi	a1,a1,-1402 # 80026e90 <__func__.0+0x2d0>
    80011412:	00016517          	auipc	a0,0x16
    80011416:	abe50513          	addi	a0,a0,-1346 # 80026ed0 <__func__.0+0x310>
    8001141a:	2eb130ef          	jal	80024f04 <printf>
    8001141e:	00038797          	auipc	a5,0x38
    80011422:	bf37c783          	lbu	a5,-1037(a5) # 80049011 <excpt+0x1>
    80011426:	e7a1                	bnez	a5,8001146e <illegal_except_8+0xd2>
    80011428:	4529                	li	a0,10
    8001142a:	0e5120ef          	jal	80023d0e <putchar>
    8001142e:	00038797          	auipc	a5,0x38
    80011432:	be37c783          	lbu	a5,-1053(a5) # 80049011 <excpt+0x1>
    80011436:	e795                	bnez	a5,80011462 <illegal_except_8+0xc6>
    80011438:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    8001143a:	00016597          	auipc	a1,0x16
    8001143e:	a4658593          	addi	a1,a1,-1466 # 80026e80 <__func__.0+0x2c0>
    80011442:	00016517          	auipc	a0,0x16
    80011446:	af650513          	addi	a0,a0,-1290 # 80026f38 <__func__.0+0x378>
    8001144a:	2bb130ef          	jal	80024f04 <printf>
    8001144e:	4511                	li	a0,4
    80011450:	fa6ef0ef          	jal	80000bf6 <goto_priv>
    80011454:	858f00ef          	jal	800014ac <reset_state>
}
    80011458:	60a2                	ld	ra,8(sp)
    8001145a:	8522                	mv	a0,s0
    8001145c:	6402                	ld	s0,0(sp)
    8001145e:	0141                	addi	sp,sp,16
    80011460:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    80011462:	4401                	li	s0,0
    TEST_END();
    80011464:	00016597          	auipc	a1,0x16
    80011468:	a2c58593          	addi	a1,a1,-1492 # 80026e90 <__func__.0+0x2d0>
    8001146c:	bfd9                	j	80011442 <illegal_except_8+0xa6>
    TEST_ASSERT("m mode hfence.gvma successful",
    8001146e:	00016517          	auipc	a0,0x16
    80011472:	a6a50513          	addi	a0,a0,-1430 # 80026ed8 <__func__.0+0x318>
    80011476:	28f130ef          	jal	80024f04 <printf>
    8001147a:	02900513          	li	a0,41
    8001147e:	091120ef          	jal	80023d0e <putchar>
    80011482:	b75d                	j	80011428 <illegal_except_8+0x8c>

0000000080011484 <illegal_except_9>:

bool illegal_except_9() {
    80011484:	1101                	addi	sp,sp,-32

    TEST_START();
    80011486:	00014597          	auipc	a1,0x14
    8001148a:	75258593          	addi	a1,a1,1874 # 80025bd8 <__func__.5>
    8001148e:	00016517          	auipc	a0,0x16
    80011492:	a1250513          	addi	a0,a0,-1518 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_9() {
    80011496:	ec06                	sd	ra,24(sp)
    80011498:	e822                	sd	s0,16(sp)
    8001149a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001149c:	269130ef          	jal	80024f04 <printf>
    800114a0:	4529                	li	a0,10
    800114a2:	06d120ef          	jal	80023d0e <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    800114a6:	4511                	li	a0,4
    800114a8:	f4eef0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    800114ac:	001007b7          	lui	a5,0x100
    800114b0:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    800114b4:	450d                	li	a0,3
    800114b6:	f40ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800114ba:	0330000f          	fence	rw,rw
    800114be:	00038417          	auipc	s0,0x38
    800114c2:	b5240413          	addi	s0,s0,-1198 # 80049010 <excpt>
    800114c6:	4785                	li	a5,1
    800114c8:	00038717          	auipc	a4,0x38
    800114cc:	b8073023          	sd	zero,-1152(a4) # 80049048 <excpt+0x38>
    800114d0:	00f41023          	sh	a5,0(s0)
    800114d4:	0330000f          	fence	rw,rw
    800114d8:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    800114dc:	08200593          	li	a1,130
    800114e0:	00019617          	auipc	a2,0x19
    800114e4:	e7060613          	addi	a2,a2,-400 # 8002a350 <__func__.0+0x3790>
    800114e8:	00016517          	auipc	a0,0x16
    800114ec:	9d050513          	addi	a0,a0,-1584 # 80026eb8 <__func__.0+0x2f8>
    800114f0:	215130ef          	jal	80024f04 <printf>
    800114f4:	00038797          	auipc	a5,0x38
    800114f8:	b1d7c783          	lbu	a5,-1251(a5) # 80049011 <excpt+0x1>
    800114fc:	00016597          	auipc	a1,0x16
    80011500:	98458593          	addi	a1,a1,-1660 # 80026e80 <__func__.0+0x2c0>
    80011504:	c789                	beqz	a5,8001150e <illegal_except_9+0x8a>
    80011506:	00016597          	auipc	a1,0x16
    8001150a:	98a58593          	addi	a1,a1,-1654 # 80026e90 <__func__.0+0x2d0>
    8001150e:	00016517          	auipc	a0,0x16
    80011512:	9c250513          	addi	a0,a0,-1598 # 80026ed0 <__func__.0+0x310>
    80011516:	1ef130ef          	jal	80024f04 <printf>
    8001151a:	00038797          	auipc	a5,0x38
    8001151e:	af77c783          	lbu	a5,-1289(a5) # 80049011 <excpt+0x1>
    80011522:	10079563          	bnez	a5,8001162c <illegal_except_9+0x1a8>
    80011526:	4529                	li	a0,10
    80011528:	7e6120ef          	jal	80023d0e <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    8001152c:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8001152e:	00038497          	auipc	s1,0x38
    80011532:	ae34c483          	lbu	s1,-1309(s1) # 80049011 <excpt+0x1>
    goto_priv(PRIV_M);
    80011536:	ec0ef0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8001153a:	001007b7          	lui	a5,0x100
    8001153e:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80011542:	450d                	li	a0,3
    80011544:	eb2ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011548:	0330000f          	fence	rw,rw
    8001154c:	4785                	li	a5,1
    8001154e:	00038717          	auipc	a4,0x38
    80011552:	ae073d23          	sd	zero,-1286(a4) # 80049048 <excpt+0x38>
    80011556:	00f41023          	sh	a5,0(s0)
    8001155a:	0330000f          	fence	rw,rw
    8001155e:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80011562:	08200593          	li	a1,130
    80011566:	00019617          	auipc	a2,0x19
    8001156a:	e2260613          	addi	a2,a2,-478 # 8002a388 <__func__.0+0x37c8>
    8001156e:	00016517          	auipc	a0,0x16
    80011572:	94a50513          	addi	a0,a0,-1718 # 80026eb8 <__func__.0+0x2f8>
    80011576:	18f130ef          	jal	80024f04 <printf>
    8001157a:	00038797          	auipc	a5,0x38
    8001157e:	a977c783          	lbu	a5,-1385(a5) # 80049011 <excpt+0x1>
    80011582:	00016597          	auipc	a1,0x16
    80011586:	90e58593          	addi	a1,a1,-1778 # 80026e90 <__func__.0+0x2d0>
    8001158a:	cf89                	beqz	a5,800115a4 <illegal_except_9+0x120>
    8001158c:	6418                	ld	a4,8(s0)
    8001158e:	4789                	li	a5,2
    80011590:	00016597          	auipc	a1,0x16
    80011594:	8f058593          	addi	a1,a1,-1808 # 80026e80 <__func__.0+0x2c0>
    80011598:	00f70663          	beq	a4,a5,800115a4 <illegal_except_9+0x120>
    8001159c:	00016597          	auipc	a1,0x16
    800115a0:	8f458593          	addi	a1,a1,-1804 # 80026e90 <__func__.0+0x2d0>
    800115a4:	00016517          	auipc	a0,0x16
    800115a8:	92c50513          	addi	a0,a0,-1748 # 80026ed0 <__func__.0+0x310>
    800115ac:	159130ef          	jal	80024f04 <printf>
    800115b0:	00038797          	auipc	a5,0x38
    800115b4:	a617c783          	lbu	a5,-1439(a5) # 80049011 <excpt+0x1>
    800115b8:	c789                	beqz	a5,800115c2 <illegal_except_9+0x13e>
    800115ba:	6418                	ld	a4,8(s0)
    800115bc:	4789                	li	a5,2
    800115be:	00f70c63          	beq	a4,a5,800115d6 <illegal_except_9+0x152>
    800115c2:	00016517          	auipc	a0,0x16
    800115c6:	91650513          	addi	a0,a0,-1770 # 80026ed8 <__func__.0+0x318>
    800115ca:	13b130ef          	jal	80024f04 <printf>
    800115ce:	02900513          	li	a0,41
    800115d2:	73c120ef          	jal	80023d0e <putchar>
    800115d6:	4529                	li	a0,10
    800115d8:	736120ef          	jal	80023d0e <putchar>
    800115dc:	e095                	bnez	s1,80011600 <illegal_except_9+0x17c>
    800115de:	00038497          	auipc	s1,0x38
    800115e2:	a334c483          	lbu	s1,-1485(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800115e6:	00016597          	auipc	a1,0x16
    800115ea:	8aa58593          	addi	a1,a1,-1878 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    800115ee:	cc91                	beqz	s1,8001160a <illegal_except_9+0x186>
    800115f0:	6418                	ld	a4,8(s0)
    800115f2:	4789                	li	a5,2
    TEST_END();
    800115f4:	00016597          	auipc	a1,0x16
    800115f8:	88c58593          	addi	a1,a1,-1908 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    800115fc:	00f70763          	beq	a4,a5,8001160a <illegal_except_9+0x186>
    80011600:	4481                	li	s1,0
    TEST_END();
    80011602:	00016597          	auipc	a1,0x16
    80011606:	88e58593          	addi	a1,a1,-1906 # 80026e90 <__func__.0+0x2d0>
    8001160a:	00016517          	auipc	a0,0x16
    8001160e:	92e50513          	addi	a0,a0,-1746 # 80026f38 <__func__.0+0x378>
    80011612:	0f3130ef          	jal	80024f04 <printf>
    80011616:	4511                	li	a0,4
    80011618:	ddeef0ef          	jal	80000bf6 <goto_priv>
    8001161c:	e91ef0ef          	jal	800014ac <reset_state>
}
    80011620:	60e2                	ld	ra,24(sp)
    80011622:	6442                	ld	s0,16(sp)
    80011624:	8526                	mv	a0,s1
    80011626:	64a2                	ld	s1,8(sp)
    80011628:	6105                	addi	sp,sp,32
    8001162a:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    8001162c:	00016517          	auipc	a0,0x16
    80011630:	8ac50513          	addi	a0,a0,-1876 # 80026ed8 <__func__.0+0x318>
    80011634:	0d1130ef          	jal	80024f04 <printf>
    80011638:	02900513          	li	a0,41
    8001163c:	6d2120ef          	jal	80023d0e <putchar>
    80011640:	b5dd                	j	80011526 <illegal_except_9+0xa2>

0000000080011642 <illegal_except_10>:

bool illegal_except_10() {
    80011642:	1101                	addi	sp,sp,-32

    TEST_START();
    80011644:	00014597          	auipc	a1,0x14
    80011648:	5ac58593          	addi	a1,a1,1452 # 80025bf0 <__func__.4>
    8001164c:	00016517          	auipc	a0,0x16
    80011650:	85450513          	addi	a0,a0,-1964 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_10() {
    80011654:	ec06                	sd	ra,24(sp)
    80011656:	e822                	sd	s0,16(sp)
    80011658:	e426                	sd	s1,8(sp)
    TEST_START();
    8001165a:	0ab130ef          	jal	80024f04 <printf>
    8001165e:	4529                	li	a0,10
    80011660:	6ae120ef          	jal	80023d0e <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    80011664:	4511                	li	a0,4
    80011666:	d90ef0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8001166a:	e43ef0ef          	jal	800014ac <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    8001166e:	001007b7          	lui	a5,0x100
    80011672:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80011676:	450d                	li	a0,3
    80011678:	d7eef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    8001167c:	0330000f          	fence	rw,rw
    80011680:	00038417          	auipc	s0,0x38
    80011684:	99040413          	addi	s0,s0,-1648 # 80049010 <excpt>
    80011688:	4785                	li	a5,1
    8001168a:	00038717          	auipc	a4,0x38
    8001168e:	9a073f23          	sd	zero,-1602(a4) # 80049048 <excpt+0x38>
    80011692:	00f41023          	sh	a5,0(s0)
    80011696:	0330000f          	fence	rw,rw
    asm volatile(
    8001169a:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    8001169e:	08200593          	li	a1,130
    800116a2:	00019617          	auipc	a2,0x19
    800116a6:	d1e60613          	addi	a2,a2,-738 # 8002a3c0 <__func__.0+0x3800>
    800116aa:	00016517          	auipc	a0,0x16
    800116ae:	80e50513          	addi	a0,a0,-2034 # 80026eb8 <__func__.0+0x2f8>
    800116b2:	053130ef          	jal	80024f04 <printf>
    800116b6:	00038797          	auipc	a5,0x38
    800116ba:	95b7c783          	lbu	a5,-1701(a5) # 80049011 <excpt+0x1>
    800116be:	00015597          	auipc	a1,0x15
    800116c2:	7d258593          	addi	a1,a1,2002 # 80026e90 <__func__.0+0x2d0>
    800116c6:	cf89                	beqz	a5,800116e0 <illegal_except_10+0x9e>
    800116c8:	6418                	ld	a4,8(s0)
    800116ca:	4789                	li	a5,2
    800116cc:	00015597          	auipc	a1,0x15
    800116d0:	7b458593          	addi	a1,a1,1972 # 80026e80 <__func__.0+0x2c0>
    800116d4:	00f70663          	beq	a4,a5,800116e0 <illegal_except_10+0x9e>
    800116d8:	00015597          	auipc	a1,0x15
    800116dc:	7b858593          	addi	a1,a1,1976 # 80026e90 <__func__.0+0x2d0>
    800116e0:	00015517          	auipc	a0,0x15
    800116e4:	7f050513          	addi	a0,a0,2032 # 80026ed0 <__func__.0+0x310>
    800116e8:	01d130ef          	jal	80024f04 <printf>
    800116ec:	00038797          	auipc	a5,0x38
    800116f0:	9257c783          	lbu	a5,-1755(a5) # 80049011 <excpt+0x1>
    800116f4:	c789                	beqz	a5,800116fe <illegal_except_10+0xbc>
    800116f6:	6418                	ld	a4,8(s0)
    800116f8:	4789                	li	a5,2
    800116fa:	00f70c63          	beq	a4,a5,80011712 <illegal_except_10+0xd0>
    800116fe:	00015517          	auipc	a0,0x15
    80011702:	7da50513          	addi	a0,a0,2010 # 80026ed8 <__func__.0+0x318>
    80011706:	7fe130ef          	jal	80024f04 <printf>
    8001170a:	02900513          	li	a0,41
    8001170e:	600120ef          	jal	80023d0e <putchar>
    80011712:	4529                	li	a0,10
    80011714:	5fa120ef          	jal	80023d0e <putchar>
    80011718:	00038797          	auipc	a5,0x38
    8001171c:	8f97c783          	lbu	a5,-1799(a5) # 80049011 <excpt+0x1>
    80011720:	4481                	li	s1,0
    80011722:	c789                	beqz	a5,8001172c <illegal_except_10+0xea>
    80011724:	6404                	ld	s1,8(s0)
    80011726:	14f9                	addi	s1,s1,-2
    80011728:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    8001172c:	4511                	li	a0,4
    8001172e:	cc8ef0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80011732:	001007b7          	lui	a5,0x100
    80011736:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001173a:	450d                	li	a0,3
    8001173c:	cbaef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011740:	0330000f          	fence	rw,rw
    80011744:	4785                	li	a5,1
    80011746:	00038717          	auipc	a4,0x38
    8001174a:	90073123          	sd	zero,-1790(a4) # 80049048 <excpt+0x38>
    8001174e:	00f41023          	sh	a5,0(s0)
    80011752:	0330000f          	fence	rw,rw
    asm volatile(
    80011756:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    8001175a:	08200593          	li	a1,130
    8001175e:	00019617          	auipc	a2,0x19
    80011762:	c9a60613          	addi	a2,a2,-870 # 8002a3f8 <__func__.0+0x3838>
    80011766:	00015517          	auipc	a0,0x15
    8001176a:	75250513          	addi	a0,a0,1874 # 80026eb8 <__func__.0+0x2f8>
    8001176e:	796130ef          	jal	80024f04 <printf>
    80011772:	00038797          	auipc	a5,0x38
    80011776:	89f7c783          	lbu	a5,-1889(a5) # 80049011 <excpt+0x1>
    8001177a:	00015597          	auipc	a1,0x15
    8001177e:	71658593          	addi	a1,a1,1814 # 80026e90 <__func__.0+0x2d0>
    80011782:	cf89                	beqz	a5,8001179c <illegal_except_10+0x15a>
    80011784:	6418                	ld	a4,8(s0)
    80011786:	4789                	li	a5,2
    80011788:	00015597          	auipc	a1,0x15
    8001178c:	6f858593          	addi	a1,a1,1784 # 80026e80 <__func__.0+0x2c0>
    80011790:	00f70663          	beq	a4,a5,8001179c <illegal_except_10+0x15a>
    80011794:	00015597          	auipc	a1,0x15
    80011798:	6fc58593          	addi	a1,a1,1788 # 80026e90 <__func__.0+0x2d0>
    8001179c:	00015517          	auipc	a0,0x15
    800117a0:	73450513          	addi	a0,a0,1844 # 80026ed0 <__func__.0+0x310>
    800117a4:	760130ef          	jal	80024f04 <printf>
    800117a8:	00038797          	auipc	a5,0x38
    800117ac:	8697c783          	lbu	a5,-1943(a5) # 80049011 <excpt+0x1>
    800117b0:	c789                	beqz	a5,800117ba <illegal_except_10+0x178>
    800117b2:	6418                	ld	a4,8(s0)
    800117b4:	4789                	li	a5,2
    800117b6:	00f70c63          	beq	a4,a5,800117ce <illegal_except_10+0x18c>
    800117ba:	00015517          	auipc	a0,0x15
    800117be:	71e50513          	addi	a0,a0,1822 # 80026ed8 <__func__.0+0x318>
    800117c2:	742130ef          	jal	80024f04 <printf>
    800117c6:	02900513          	li	a0,41
    800117ca:	544120ef          	jal	80023d0e <putchar>
    800117ce:	4529                	li	a0,10
    800117d0:	53e120ef          	jal	80023d0e <putchar>
    800117d4:	c095                	beqz	s1,800117f8 <illegal_except_10+0x1b6>
    800117d6:	00038497          	auipc	s1,0x38
    800117da:	83b4c483          	lbu	s1,-1989(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800117de:	00015597          	auipc	a1,0x15
    800117e2:	6b258593          	addi	a1,a1,1714 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    800117e6:	cc91                	beqz	s1,80011802 <illegal_except_10+0x1c0>
    800117e8:	6418                	ld	a4,8(s0)
    800117ea:	4789                	li	a5,2
    TEST_END();
    800117ec:	00015597          	auipc	a1,0x15
    800117f0:	69458593          	addi	a1,a1,1684 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    800117f4:	00f70763          	beq	a4,a5,80011802 <illegal_except_10+0x1c0>
    800117f8:	4481                	li	s1,0
    TEST_END();
    800117fa:	00015597          	auipc	a1,0x15
    800117fe:	69658593          	addi	a1,a1,1686 # 80026e90 <__func__.0+0x2d0>
    80011802:	00015517          	auipc	a0,0x15
    80011806:	73650513          	addi	a0,a0,1846 # 80026f38 <__func__.0+0x378>
    8001180a:	6fa130ef          	jal	80024f04 <printf>
    8001180e:	4511                	li	a0,4
    80011810:	be6ef0ef          	jal	80000bf6 <goto_priv>
    80011814:	c99ef0ef          	jal	800014ac <reset_state>
}
    80011818:	60e2                	ld	ra,24(sp)
    8001181a:	6442                	ld	s0,16(sp)
    8001181c:	8526                	mv	a0,s1
    8001181e:	64a2                	ld	s1,8(sp)
    80011820:	6105                	addi	sp,sp,32
    80011822:	8082                	ret

0000000080011824 <illegal_except_11>:

bool illegal_except_11() {
    80011824:	1101                	addi	sp,sp,-32

    TEST_START();
    80011826:	00014597          	auipc	a1,0x14
    8001182a:	3e258593          	addi	a1,a1,994 # 80025c08 <__func__.3>
    8001182e:	00015517          	auipc	a0,0x15
    80011832:	67250513          	addi	a0,a0,1650 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_11() {
    80011836:	ec06                	sd	ra,24(sp)
    80011838:	e822                	sd	s0,16(sp)
    8001183a:	e426                	sd	s1,8(sp)
    8001183c:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001183e:	6c6130ef          	jal	80024f04 <printf>
    80011842:	4529                	li	a0,10
    80011844:	4ca120ef          	jal	80023d0e <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    80011848:	0330000f          	fence	rw,rw
    8001184c:	00037417          	auipc	s0,0x37
    80011850:	7c440413          	addi	s0,s0,1988 # 80049010 <excpt>
    80011854:	4485                	li	s1,1
    80011856:	00037797          	auipc	a5,0x37
    8001185a:	7e07b923          	sd	zero,2034(a5) # 80049048 <excpt+0x38>
    8001185e:	00941023          	sh	s1,0(s0)
    80011862:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011866:	4511                	li	a0,4
    80011868:	b8eef0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    8001186c:	c41ef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011870:	8526                	mv	a0,s1
    80011872:	b84ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011876:	0330000f          	fence	rw,rw
    8001187a:	00037797          	auipc	a5,0x37
    8001187e:	7c07b723          	sd	zero,1998(a5) # 80049048 <excpt+0x38>
    80011882:	00941023          	sh	s1,0(s0)
    80011886:	0330000f          	fence	rw,rw
    asm volatile(
    8001188a:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    8001188e:	08200593          	li	a1,130
    80011892:	00019617          	auipc	a2,0x19
    80011896:	b9e60613          	addi	a2,a2,-1122 # 8002a430 <__func__.0+0x3870>
    8001189a:	00015517          	auipc	a0,0x15
    8001189e:	61e50513          	addi	a0,a0,1566 # 80026eb8 <__func__.0+0x2f8>
    800118a2:	662130ef          	jal	80024f04 <printf>
    800118a6:	00037797          	auipc	a5,0x37
    800118aa:	76b7c783          	lbu	a5,1899(a5) # 80049011 <excpt+0x1>
    800118ae:	00015597          	auipc	a1,0x15
    800118b2:	5e258593          	addi	a1,a1,1506 # 80026e90 <__func__.0+0x2d0>
    800118b6:	cf89                	beqz	a5,800118d0 <illegal_except_11+0xac>
    800118b8:	6418                	ld	a4,8(s0)
    800118ba:	4789                	li	a5,2
    800118bc:	00015597          	auipc	a1,0x15
    800118c0:	5c458593          	addi	a1,a1,1476 # 80026e80 <__func__.0+0x2c0>
    800118c4:	00f70663          	beq	a4,a5,800118d0 <illegal_except_11+0xac>
    800118c8:	00015597          	auipc	a1,0x15
    800118cc:	5c858593          	addi	a1,a1,1480 # 80026e90 <__func__.0+0x2d0>
    800118d0:	00015517          	auipc	a0,0x15
    800118d4:	60050513          	addi	a0,a0,1536 # 80026ed0 <__func__.0+0x310>
    800118d8:	62c130ef          	jal	80024f04 <printf>
    800118dc:	00037797          	auipc	a5,0x37
    800118e0:	7357c783          	lbu	a5,1845(a5) # 80049011 <excpt+0x1>
    800118e4:	c789                	beqz	a5,800118ee <illegal_except_11+0xca>
    800118e6:	6418                	ld	a4,8(s0)
    800118e8:	4789                	li	a5,2
    800118ea:	00f70c63          	beq	a4,a5,80011902 <illegal_except_11+0xde>
    800118ee:	00015517          	auipc	a0,0x15
    800118f2:	5ea50513          	addi	a0,a0,1514 # 80026ed8 <__func__.0+0x318>
    800118f6:	60e130ef          	jal	80024f04 <printf>
    800118fa:	02900513          	li	a0,41
    800118fe:	410120ef          	jal	80023d0e <putchar>
    80011902:	4529                	li	a0,10
    80011904:	40a120ef          	jal	80023d0e <putchar>
    80011908:	00037797          	auipc	a5,0x37
    8001190c:	7097c783          	lbu	a5,1801(a5) # 80049011 <excpt+0x1>
    80011910:	4481                	li	s1,0
    80011912:	c789                	beqz	a5,8001191c <illegal_except_11+0xf8>
    80011914:	6404                	ld	s1,8(s0)
    80011916:	14f9                	addi	s1,s1,-2
    80011918:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    8001191c:	0330000f          	fence	rw,rw
    80011920:	4905                	li	s2,1
    80011922:	00037797          	auipc	a5,0x37
    80011926:	7207b323          	sd	zero,1830(a5) # 80049048 <excpt+0x38>
    8001192a:	01241023          	sh	s2,0(s0)
    8001192e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011932:	4511                	li	a0,4
    80011934:	ac2ef0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011938:	b75ef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    8001193c:	854a                	mv	a0,s2
    8001193e:	ab8ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011942:	0330000f          	fence	rw,rw
    80011946:	00037797          	auipc	a5,0x37
    8001194a:	7007b123          	sd	zero,1794(a5) # 80049048 <excpt+0x38>
    8001194e:	01241023          	sh	s2,0(s0)
    80011952:	0330000f          	fence	rw,rw
    asm volatile(
    80011956:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    8001195a:	08200593          	li	a1,130
    8001195e:	00019617          	auipc	a2,0x19
    80011962:	b1260613          	addi	a2,a2,-1262 # 8002a470 <__func__.0+0x38b0>
    80011966:	00015517          	auipc	a0,0x15
    8001196a:	55250513          	addi	a0,a0,1362 # 80026eb8 <__func__.0+0x2f8>
    8001196e:	596130ef          	jal	80024f04 <printf>
    80011972:	00037797          	auipc	a5,0x37
    80011976:	69f7c783          	lbu	a5,1695(a5) # 80049011 <excpt+0x1>
    8001197a:	00015597          	auipc	a1,0x15
    8001197e:	51658593          	addi	a1,a1,1302 # 80026e90 <__func__.0+0x2d0>
    80011982:	cf89                	beqz	a5,8001199c <illegal_except_11+0x178>
    80011984:	6418                	ld	a4,8(s0)
    80011986:	4789                	li	a5,2
    80011988:	00015597          	auipc	a1,0x15
    8001198c:	4f858593          	addi	a1,a1,1272 # 80026e80 <__func__.0+0x2c0>
    80011990:	00f70663          	beq	a4,a5,8001199c <illegal_except_11+0x178>
    80011994:	00015597          	auipc	a1,0x15
    80011998:	4fc58593          	addi	a1,a1,1276 # 80026e90 <__func__.0+0x2d0>
    8001199c:	00015517          	auipc	a0,0x15
    800119a0:	53450513          	addi	a0,a0,1332 # 80026ed0 <__func__.0+0x310>
    800119a4:	560130ef          	jal	80024f04 <printf>
    800119a8:	00037797          	auipc	a5,0x37
    800119ac:	6697c783          	lbu	a5,1641(a5) # 80049011 <excpt+0x1>
    800119b0:	c789                	beqz	a5,800119ba <illegal_except_11+0x196>
    800119b2:	6418                	ld	a4,8(s0)
    800119b4:	4789                	li	a5,2
    800119b6:	00f70c63          	beq	a4,a5,800119ce <illegal_except_11+0x1aa>
    800119ba:	00015517          	auipc	a0,0x15
    800119be:	51e50513          	addi	a0,a0,1310 # 80026ed8 <__func__.0+0x318>
    800119c2:	542130ef          	jal	80024f04 <printf>
    800119c6:	02900513          	li	a0,41
    800119ca:	344120ef          	jal	80023d0e <putchar>
    800119ce:	4529                	li	a0,10
    800119d0:	33e120ef          	jal	80023d0e <putchar>
    800119d4:	c095                	beqz	s1,800119f8 <illegal_except_11+0x1d4>
    800119d6:	00037497          	auipc	s1,0x37
    800119da:	63b4c483          	lbu	s1,1595(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800119de:	00015597          	auipc	a1,0x15
    800119e2:	4b258593          	addi	a1,a1,1202 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    800119e6:	cc91                	beqz	s1,80011a02 <illegal_except_11+0x1de>
    800119e8:	6418                	ld	a4,8(s0)
    800119ea:	4789                	li	a5,2
    TEST_END();
    800119ec:	00015597          	auipc	a1,0x15
    800119f0:	49458593          	addi	a1,a1,1172 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    800119f4:	00f70763          	beq	a4,a5,80011a02 <illegal_except_11+0x1de>
    800119f8:	4481                	li	s1,0
    TEST_END();
    800119fa:	00015597          	auipc	a1,0x15
    800119fe:	49658593          	addi	a1,a1,1174 # 80026e90 <__func__.0+0x2d0>
    80011a02:	00015517          	auipc	a0,0x15
    80011a06:	53650513          	addi	a0,a0,1334 # 80026f38 <__func__.0+0x378>
    80011a0a:	4fa130ef          	jal	80024f04 <printf>
    80011a0e:	4511                	li	a0,4
    80011a10:	9e6ef0ef          	jal	80000bf6 <goto_priv>
    80011a14:	a99ef0ef          	jal	800014ac <reset_state>
}
    80011a18:	60e2                	ld	ra,24(sp)
    80011a1a:	6442                	ld	s0,16(sp)
    80011a1c:	6902                	ld	s2,0(sp)
    80011a1e:	8526                	mv	a0,s1
    80011a20:	64a2                	ld	s1,8(sp)
    80011a22:	6105                	addi	sp,sp,32
    80011a24:	8082                	ret

0000000080011a26 <illegal_except_12>:

bool illegal_except_12() {
    80011a26:	1101                	addi	sp,sp,-32

    TEST_START();
    80011a28:	00014597          	auipc	a1,0x14
    80011a2c:	1f858593          	addi	a1,a1,504 # 80025c20 <__func__.2>
    80011a30:	00015517          	auipc	a0,0x15
    80011a34:	47050513          	addi	a0,a0,1136 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_12() {
    80011a38:	ec06                	sd	ra,24(sp)
    80011a3a:	e822                	sd	s0,16(sp)
    80011a3c:	e426                	sd	s1,8(sp)
    80011a3e:	e04a                	sd	s2,0(sp)
    TEST_START();
    80011a40:	4c4130ef          	jal	80024f04 <printf>
    80011a44:	4529                	li	a0,10
    80011a46:	2c8120ef          	jal	80023d0e <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    80011a4a:	0330000f          	fence	rw,rw
    80011a4e:	00037417          	auipc	s0,0x37
    80011a52:	5c240413          	addi	s0,s0,1474 # 80049010 <excpt>
    80011a56:	4485                	li	s1,1
    80011a58:	00037797          	auipc	a5,0x37
    80011a5c:	5e07b823          	sd	zero,1520(a5) # 80049048 <excpt+0x38>
    80011a60:	00941023          	sh	s1,0(s0)
    80011a64:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011a68:	4511                	li	a0,4
    80011a6a:	98cef0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011a6e:	a3fef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011a72:	8526                	mv	a0,s1
    80011a74:	982ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011a78:	0330000f          	fence	rw,rw
    80011a7c:	00037797          	auipc	a5,0x37
    80011a80:	5c07b623          	sd	zero,1484(a5) # 80049048 <excpt+0x38>
    80011a84:	00941023          	sh	s1,0(s0)
    80011a88:	0330000f          	fence	rw,rw
    asm volatile(
    80011a8c:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    80011a90:	08200593          	li	a1,130
    80011a94:	00019617          	auipc	a2,0x19
    80011a98:	a1c60613          	addi	a2,a2,-1508 # 8002a4b0 <__func__.0+0x38f0>
    80011a9c:	00015517          	auipc	a0,0x15
    80011aa0:	41c50513          	addi	a0,a0,1052 # 80026eb8 <__func__.0+0x2f8>
    80011aa4:	460130ef          	jal	80024f04 <printf>
    80011aa8:	00037797          	auipc	a5,0x37
    80011aac:	5697c783          	lbu	a5,1385(a5) # 80049011 <excpt+0x1>
    80011ab0:	00015597          	auipc	a1,0x15
    80011ab4:	3e058593          	addi	a1,a1,992 # 80026e90 <__func__.0+0x2d0>
    80011ab8:	cf89                	beqz	a5,80011ad2 <illegal_except_12+0xac>
    80011aba:	6418                	ld	a4,8(s0)
    80011abc:	4789                	li	a5,2
    80011abe:	00015597          	auipc	a1,0x15
    80011ac2:	3c258593          	addi	a1,a1,962 # 80026e80 <__func__.0+0x2c0>
    80011ac6:	00f70663          	beq	a4,a5,80011ad2 <illegal_except_12+0xac>
    80011aca:	00015597          	auipc	a1,0x15
    80011ace:	3c658593          	addi	a1,a1,966 # 80026e90 <__func__.0+0x2d0>
    80011ad2:	00015517          	auipc	a0,0x15
    80011ad6:	3fe50513          	addi	a0,a0,1022 # 80026ed0 <__func__.0+0x310>
    80011ada:	42a130ef          	jal	80024f04 <printf>
    80011ade:	00037797          	auipc	a5,0x37
    80011ae2:	5337c783          	lbu	a5,1331(a5) # 80049011 <excpt+0x1>
    80011ae6:	c789                	beqz	a5,80011af0 <illegal_except_12+0xca>
    80011ae8:	6418                	ld	a4,8(s0)
    80011aea:	4789                	li	a5,2
    80011aec:	00f70c63          	beq	a4,a5,80011b04 <illegal_except_12+0xde>
    80011af0:	00015517          	auipc	a0,0x15
    80011af4:	3e850513          	addi	a0,a0,1000 # 80026ed8 <__func__.0+0x318>
    80011af8:	40c130ef          	jal	80024f04 <printf>
    80011afc:	02900513          	li	a0,41
    80011b00:	20e120ef          	jal	80023d0e <putchar>
    80011b04:	4529                	li	a0,10
    80011b06:	208120ef          	jal	80023d0e <putchar>
    80011b0a:	00037797          	auipc	a5,0x37
    80011b0e:	5077c783          	lbu	a5,1287(a5) # 80049011 <excpt+0x1>
    80011b12:	4481                	li	s1,0
    80011b14:	c789                	beqz	a5,80011b1e <illegal_except_12+0xf8>
    80011b16:	6404                	ld	s1,8(s0)
    80011b18:	14f9                	addi	s1,s1,-2
    80011b1a:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011b1e:	0330000f          	fence	rw,rw
    80011b22:	4905                	li	s2,1
    80011b24:	00037797          	auipc	a5,0x37
    80011b28:	5207b223          	sd	zero,1316(a5) # 80049048 <excpt+0x38>
    80011b2c:	01241023          	sh	s2,0(s0)
    80011b30:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011b34:	4511                	li	a0,4
    80011b36:	8c0ef0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011b3a:	973ef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011b3e:	854a                	mv	a0,s2
    80011b40:	8b6ef0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011b44:	0330000f          	fence	rw,rw
    80011b48:	00037797          	auipc	a5,0x37
    80011b4c:	5007b023          	sd	zero,1280(a5) # 80049048 <excpt+0x38>
    80011b50:	01241023          	sh	s2,0(s0)
    80011b54:	0330000f          	fence	rw,rw
    asm volatile(
    80011b58:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011b5c:	08200593          	li	a1,130
    80011b60:	00019617          	auipc	a2,0x19
    80011b64:	99060613          	addi	a2,a2,-1648 # 8002a4f0 <__func__.0+0x3930>
    80011b68:	00015517          	auipc	a0,0x15
    80011b6c:	35050513          	addi	a0,a0,848 # 80026eb8 <__func__.0+0x2f8>
    80011b70:	394130ef          	jal	80024f04 <printf>
    80011b74:	00037797          	auipc	a5,0x37
    80011b78:	49d7c783          	lbu	a5,1181(a5) # 80049011 <excpt+0x1>
    80011b7c:	00015597          	auipc	a1,0x15
    80011b80:	31458593          	addi	a1,a1,788 # 80026e90 <__func__.0+0x2d0>
    80011b84:	cf89                	beqz	a5,80011b9e <illegal_except_12+0x178>
    80011b86:	6418                	ld	a4,8(s0)
    80011b88:	4789                	li	a5,2
    80011b8a:	00015597          	auipc	a1,0x15
    80011b8e:	2f658593          	addi	a1,a1,758 # 80026e80 <__func__.0+0x2c0>
    80011b92:	00f70663          	beq	a4,a5,80011b9e <illegal_except_12+0x178>
    80011b96:	00015597          	auipc	a1,0x15
    80011b9a:	2fa58593          	addi	a1,a1,762 # 80026e90 <__func__.0+0x2d0>
    80011b9e:	00015517          	auipc	a0,0x15
    80011ba2:	33250513          	addi	a0,a0,818 # 80026ed0 <__func__.0+0x310>
    80011ba6:	35e130ef          	jal	80024f04 <printf>
    80011baa:	00037797          	auipc	a5,0x37
    80011bae:	4677c783          	lbu	a5,1127(a5) # 80049011 <excpt+0x1>
    80011bb2:	c789                	beqz	a5,80011bbc <illegal_except_12+0x196>
    80011bb4:	6418                	ld	a4,8(s0)
    80011bb6:	4789                	li	a5,2
    80011bb8:	00f70c63          	beq	a4,a5,80011bd0 <illegal_except_12+0x1aa>
    80011bbc:	00015517          	auipc	a0,0x15
    80011bc0:	31c50513          	addi	a0,a0,796 # 80026ed8 <__func__.0+0x318>
    80011bc4:	340130ef          	jal	80024f04 <printf>
    80011bc8:	02900513          	li	a0,41
    80011bcc:	142120ef          	jal	80023d0e <putchar>
    80011bd0:	4529                	li	a0,10
    80011bd2:	13c120ef          	jal	80023d0e <putchar>
    80011bd6:	c881                	beqz	s1,80011be6 <illegal_except_12+0x1c0>
    80011bd8:	00037797          	auipc	a5,0x37
    80011bdc:	4397c783          	lbu	a5,1081(a5) # 80049011 <excpt+0x1>
    80011be0:	4481                	li	s1,0
    80011be2:	10079763          	bnez	a5,80011cf0 <illegal_except_12+0x2ca>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011be6:	0330000f          	fence	rw,rw
    80011bea:	4905                	li	s2,1
    80011bec:	00037797          	auipc	a5,0x37
    80011bf0:	4407be23          	sd	zero,1116(a5) # 80049048 <excpt+0x38>
    80011bf4:	01241023          	sh	s2,0(s0)
    80011bf8:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011bfc:	4511                	li	a0,4
    80011bfe:	ff9ee0ef          	jal	80000bf6 <goto_priv>
    reset_state();
    80011c02:	8abef0ef          	jal	800014ac <reset_state>
    goto_priv(PRIV_HU);
    80011c06:	854a                	mv	a0,s2
    80011c08:	fefee0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80011c0c:	0330000f          	fence	rw,rw
    80011c10:	00037797          	auipc	a5,0x37
    80011c14:	4207bc23          	sd	zero,1080(a5) # 80049048 <excpt+0x38>
    80011c18:	01241023          	sh	s2,0(s0)
    80011c1c:	0330000f          	fence	rw,rw
    asm volatile(
    80011c20:	26000073          	.insn	4, 0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011c24:	08200593          	li	a1,130
    80011c28:	00019617          	auipc	a2,0x19
    80011c2c:	90860613          	addi	a2,a2,-1784 # 8002a530 <__func__.0+0x3970>
    80011c30:	00015517          	auipc	a0,0x15
    80011c34:	28850513          	addi	a0,a0,648 # 80026eb8 <__func__.0+0x2f8>
    80011c38:	2cc130ef          	jal	80024f04 <printf>
    80011c3c:	00037797          	auipc	a5,0x37
    80011c40:	3d57c783          	lbu	a5,981(a5) # 80049011 <excpt+0x1>
    80011c44:	00015597          	auipc	a1,0x15
    80011c48:	24c58593          	addi	a1,a1,588 # 80026e90 <__func__.0+0x2d0>
    80011c4c:	cf89                	beqz	a5,80011c66 <illegal_except_12+0x240>
    80011c4e:	6418                	ld	a4,8(s0)
    80011c50:	4789                	li	a5,2
    80011c52:	00015597          	auipc	a1,0x15
    80011c56:	22e58593          	addi	a1,a1,558 # 80026e80 <__func__.0+0x2c0>
    80011c5a:	00f70663          	beq	a4,a5,80011c66 <illegal_except_12+0x240>
    80011c5e:	00015597          	auipc	a1,0x15
    80011c62:	23258593          	addi	a1,a1,562 # 80026e90 <__func__.0+0x2d0>
    80011c66:	00015517          	auipc	a0,0x15
    80011c6a:	26a50513          	addi	a0,a0,618 # 80026ed0 <__func__.0+0x310>
    80011c6e:	296130ef          	jal	80024f04 <printf>
    80011c72:	00037797          	auipc	a5,0x37
    80011c76:	39f7c783          	lbu	a5,927(a5) # 80049011 <excpt+0x1>
    80011c7a:	c789                	beqz	a5,80011c84 <illegal_except_12+0x25e>
    80011c7c:	6418                	ld	a4,8(s0)
    80011c7e:	4789                	li	a5,2
    80011c80:	00f70c63          	beq	a4,a5,80011c98 <illegal_except_12+0x272>
    80011c84:	00015517          	auipc	a0,0x15
    80011c88:	25450513          	addi	a0,a0,596 # 80026ed8 <__func__.0+0x318>
    80011c8c:	278130ef          	jal	80024f04 <printf>
    80011c90:	02900513          	li	a0,41
    80011c94:	07a120ef          	jal	80023d0e <putchar>
    80011c98:	4529                	li	a0,10
    80011c9a:	074120ef          	jal	80023d0e <putchar>
    80011c9e:	c095                	beqz	s1,80011cc2 <illegal_except_12+0x29c>
    80011ca0:	00037497          	auipc	s1,0x37
    80011ca4:	3714c483          	lbu	s1,881(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011ca8:	00015597          	auipc	a1,0x15
    80011cac:	1e858593          	addi	a1,a1,488 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011cb0:	cc91                	beqz	s1,80011ccc <illegal_except_12+0x2a6>
    80011cb2:	6418                	ld	a4,8(s0)
    80011cb4:	4789                	li	a5,2
    TEST_END();
    80011cb6:	00015597          	auipc	a1,0x15
    80011cba:	1ca58593          	addi	a1,a1,458 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011cbe:	00f70763          	beq	a4,a5,80011ccc <illegal_except_12+0x2a6>
    80011cc2:	4481                	li	s1,0
    TEST_END();
    80011cc4:	00015597          	auipc	a1,0x15
    80011cc8:	1cc58593          	addi	a1,a1,460 # 80026e90 <__func__.0+0x2d0>
    80011ccc:	00015517          	auipc	a0,0x15
    80011cd0:	26c50513          	addi	a0,a0,620 # 80026f38 <__func__.0+0x378>
    80011cd4:	230130ef          	jal	80024f04 <printf>
    80011cd8:	4511                	li	a0,4
    80011cda:	f1dee0ef          	jal	80000bf6 <goto_priv>
    80011cde:	fceef0ef          	jal	800014ac <reset_state>
}
    80011ce2:	60e2                	ld	ra,24(sp)
    80011ce4:	6442                	ld	s0,16(sp)
    80011ce6:	6902                	ld	s2,0(sp)
    80011ce8:	8526                	mv	a0,s1
    80011cea:	64a2                	ld	s1,8(sp)
    80011cec:	6105                	addi	sp,sp,32
    80011cee:	8082                	ret
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    80011cf0:	6404                	ld	s1,8(s0)
    80011cf2:	14f9                	addi	s1,s1,-2
    80011cf4:	0014b493          	seqz	s1,s1
    80011cf8:	b5fd                	j	80011be6 <illegal_except_12+0x1c0>

0000000080011cfa <illegal_except_13>:


bool illegal_except_13() {
    80011cfa:	1101                	addi	sp,sp,-32

    TEST_START();
    80011cfc:	00014597          	auipc	a1,0x14
    80011d00:	f3c58593          	addi	a1,a1,-196 # 80025c38 <__func__.1>
    80011d04:	00015517          	auipc	a0,0x15
    80011d08:	19c50513          	addi	a0,a0,412 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_13() {
    80011d0c:	ec06                	sd	ra,24(sp)
    80011d0e:	e822                	sd	s0,16(sp)
    80011d10:	e426                	sd	s1,8(sp)
    TEST_START();
    80011d12:	1f2130ef          	jal	80024f04 <printf>
    80011d16:	4529                	li	a0,10
    80011d18:	7f7110ef          	jal	80023d0e <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    80011d1c:	0330000f          	fence	rw,rw
    80011d20:	00037417          	auipc	s0,0x37
    80011d24:	2f040413          	addi	s0,s0,752 # 80049010 <excpt>
    80011d28:	4785                	li	a5,1
    80011d2a:	00037717          	auipc	a4,0x37
    80011d2e:	30073f23          	sd	zero,798(a4) # 80049048 <excpt+0x38>
    80011d32:	00f41023          	sh	a5,0(s0)
    80011d36:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    80011d3a:	450d                	li	a0,3
    80011d3c:	ebbee0ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_SATP,0ULL);
    80011d40:	18005073          	csrwi	satp,0
    asm volatile(
    80011d44:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    80011d48:	00037597          	auipc	a1,0x37
    80011d4c:	2c95c583          	lbu	a1,713(a1) # 80049011 <excpt+0x1>
    80011d50:	00019517          	auipc	a0,0x19
    80011d54:	82050513          	addi	a0,a0,-2016 # 8002a570 <__func__.0+0x39b0>
    80011d58:	1ac130ef          	jal	80024f04 <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011d5c:	08200593          	li	a1,130
    80011d60:	00019617          	auipc	a2,0x19
    80011d64:	81860613          	addi	a2,a2,-2024 # 8002a578 <__func__.0+0x39b8>
    80011d68:	00015517          	auipc	a0,0x15
    80011d6c:	15050513          	addi	a0,a0,336 # 80026eb8 <__func__.0+0x2f8>
    80011d70:	194130ef          	jal	80024f04 <printf>
    80011d74:	00037797          	auipc	a5,0x37
    80011d78:	29d7c783          	lbu	a5,669(a5) # 80049011 <excpt+0x1>
    80011d7c:	00015597          	auipc	a1,0x15
    80011d80:	11458593          	addi	a1,a1,276 # 80026e90 <__func__.0+0x2d0>
    80011d84:	cf89                	beqz	a5,80011d9e <illegal_except_13+0xa4>
    80011d86:	6418                	ld	a4,8(s0)
    80011d88:	4789                	li	a5,2
    80011d8a:	00015597          	auipc	a1,0x15
    80011d8e:	0f658593          	addi	a1,a1,246 # 80026e80 <__func__.0+0x2c0>
    80011d92:	00f70663          	beq	a4,a5,80011d9e <illegal_except_13+0xa4>
    80011d96:	00015597          	auipc	a1,0x15
    80011d9a:	0fa58593          	addi	a1,a1,250 # 80026e90 <__func__.0+0x2d0>
    80011d9e:	00015517          	auipc	a0,0x15
    80011da2:	13250513          	addi	a0,a0,306 # 80026ed0 <__func__.0+0x310>
    80011da6:	15e130ef          	jal	80024f04 <printf>
    80011daa:	00037797          	auipc	a5,0x37
    80011dae:	2677c783          	lbu	a5,615(a5) # 80049011 <excpt+0x1>
    80011db2:	c789                	beqz	a5,80011dbc <illegal_except_13+0xc2>
    80011db4:	6418                	ld	a4,8(s0)
    80011db6:	4789                	li	a5,2
    80011db8:	00f70c63          	beq	a4,a5,80011dd0 <illegal_except_13+0xd6>
    80011dbc:	00015517          	auipc	a0,0x15
    80011dc0:	11c50513          	addi	a0,a0,284 # 80026ed8 <__func__.0+0x318>
    80011dc4:	140130ef          	jal	80024f04 <printf>
    80011dc8:	02900513          	li	a0,41
    80011dcc:	743110ef          	jal	80023d0e <putchar>
    80011dd0:	4529                	li	a0,10
    80011dd2:	73d110ef          	jal	80023d0e <putchar>
    80011dd6:	00037497          	auipc	s1,0x37
    80011dda:	23b4c483          	lbu	s1,571(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011dde:	00015597          	auipc	a1,0x15
    80011de2:	0b258593          	addi	a1,a1,178 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011de6:	cc91                	beqz	s1,80011e02 <illegal_except_13+0x108>
    80011de8:	6418                	ld	a4,8(s0)
    80011dea:	4789                	li	a5,2
    TEST_END();
    80011dec:	00015597          	auipc	a1,0x15
    80011df0:	09458593          	addi	a1,a1,148 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011df4:	00f70763          	beq	a4,a5,80011e02 <illegal_except_13+0x108>
    80011df8:	4481                	li	s1,0
    TEST_END();
    80011dfa:	00015597          	auipc	a1,0x15
    80011dfe:	09658593          	addi	a1,a1,150 # 80026e90 <__func__.0+0x2d0>
    80011e02:	00015517          	auipc	a0,0x15
    80011e06:	13650513          	addi	a0,a0,310 # 80026f38 <__func__.0+0x378>
    80011e0a:	0fa130ef          	jal	80024f04 <printf>
    80011e0e:	4511                	li	a0,4
    80011e10:	de7ee0ef          	jal	80000bf6 <goto_priv>
    80011e14:	e98ef0ef          	jal	800014ac <reset_state>
}
    80011e18:	60e2                	ld	ra,24(sp)
    80011e1a:	6442                	ld	s0,16(sp)
    80011e1c:	8526                	mv	a0,s1
    80011e1e:	64a2                	ld	s1,8(sp)
    80011e20:	6105                	addi	sp,sp,32
    80011e22:	8082                	ret

0000000080011e24 <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    80011e24:	1101                	addi	sp,sp,-32

    TEST_START();
    80011e26:	00014597          	auipc	a1,0x14
    80011e2a:	e2a58593          	addi	a1,a1,-470 # 80025c50 <__func__.0>
    80011e2e:	00015517          	auipc	a0,0x15
    80011e32:	07250513          	addi	a0,a0,114 # 80026ea0 <__func__.0+0x2e0>
bool illegal_except_14() {
    80011e36:	ec06                	sd	ra,24(sp)
    80011e38:	e822                	sd	s0,16(sp)
    80011e3a:	e426                	sd	s1,8(sp)
    TEST_START();
    80011e3c:	0c8130ef          	jal	80024f04 <printf>
    80011e40:	4529                	li	a0,10
    80011e42:	6cd110ef          	jal	80023d0e <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    80011e46:	0330000f          	fence	rw,rw
    80011e4a:	00037417          	auipc	s0,0x37
    80011e4e:	1c640413          	addi	s0,s0,454 # 80049010 <excpt>
    80011e52:	4785                	li	a5,1
    80011e54:	00037717          	auipc	a4,0x37
    80011e58:	1e073a23          	sd	zero,500(a4) # 80049048 <excpt+0x38>
    80011e5c:	00f41023          	sh	a5,0(s0)
    80011e60:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80011e64:	4511                	li	a0,4
    80011e66:	d91ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    80011e6a:	004007b7          	lui	a5,0x400
    80011e6e:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80011e72:	450d                	li	a0,3
    80011e74:	d83ee0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VU);
    80011e78:	4501                	li	a0,0
    80011e7a:	c9dee0ef          	jal	80000b16 <set_prev_priv>
    asm volatile(
    80011e7e:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80011e82:	08200593          	li	a1,130
    80011e86:	00018617          	auipc	a2,0x18
    80011e8a:	74260613          	addi	a2,a2,1858 # 8002a5c8 <__func__.0+0x3a08>
    80011e8e:	00015517          	auipc	a0,0x15
    80011e92:	02a50513          	addi	a0,a0,42 # 80026eb8 <__func__.0+0x2f8>
    80011e96:	06e130ef          	jal	80024f04 <printf>
    80011e9a:	00037797          	auipc	a5,0x37
    80011e9e:	1777c783          	lbu	a5,375(a5) # 80049011 <excpt+0x1>
    80011ea2:	00015597          	auipc	a1,0x15
    80011ea6:	fee58593          	addi	a1,a1,-18 # 80026e90 <__func__.0+0x2d0>
    80011eaa:	cf89                	beqz	a5,80011ec4 <illegal_except_14+0xa0>
    80011eac:	6418                	ld	a4,8(s0)
    80011eae:	4789                	li	a5,2
    80011eb0:	00015597          	auipc	a1,0x15
    80011eb4:	fd058593          	addi	a1,a1,-48 # 80026e80 <__func__.0+0x2c0>
    80011eb8:	00f70663          	beq	a4,a5,80011ec4 <illegal_except_14+0xa0>
    80011ebc:	00015597          	auipc	a1,0x15
    80011ec0:	fd458593          	addi	a1,a1,-44 # 80026e90 <__func__.0+0x2d0>
    80011ec4:	00015517          	auipc	a0,0x15
    80011ec8:	00c50513          	addi	a0,a0,12 # 80026ed0 <__func__.0+0x310>
    80011ecc:	038130ef          	jal	80024f04 <printf>
    80011ed0:	00037797          	auipc	a5,0x37
    80011ed4:	1417c783          	lbu	a5,321(a5) # 80049011 <excpt+0x1>
    80011ed8:	c789                	beqz	a5,80011ee2 <illegal_except_14+0xbe>
    80011eda:	6418                	ld	a4,8(s0)
    80011edc:	4789                	li	a5,2
    80011ede:	00f70c63          	beq	a4,a5,80011ef6 <illegal_except_14+0xd2>
    80011ee2:	00015517          	auipc	a0,0x15
    80011ee6:	ff650513          	addi	a0,a0,-10 # 80026ed8 <__func__.0+0x318>
    80011eea:	01a130ef          	jal	80024f04 <printf>
    80011eee:	02900513          	li	a0,41
    80011ef2:	61d110ef          	jal	80023d0e <putchar>
    80011ef6:	4529                	li	a0,10
    80011ef8:	617110ef          	jal	80023d0e <putchar>
    80011efc:	00037497          	auipc	s1,0x37
    80011f00:	1154c483          	lbu	s1,277(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011f04:	00015597          	auipc	a1,0x15
    80011f08:	f8c58593          	addi	a1,a1,-116 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80011f0c:	cc91                	beqz	s1,80011f28 <illegal_except_14+0x104>
    80011f0e:	6418                	ld	a4,8(s0)
    80011f10:	4789                	li	a5,2
    TEST_END();
    80011f12:	00015597          	auipc	a1,0x15
    80011f16:	f6e58593          	addi	a1,a1,-146 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80011f1a:	00f70763          	beq	a4,a5,80011f28 <illegal_except_14+0x104>
    80011f1e:	4481                	li	s1,0
    TEST_END();
    80011f20:	00015597          	auipc	a1,0x15
    80011f24:	f7058593          	addi	a1,a1,-144 # 80026e90 <__func__.0+0x2d0>
    80011f28:	00015517          	auipc	a0,0x15
    80011f2c:	01050513          	addi	a0,a0,16 # 80026f38 <__func__.0+0x378>
    80011f30:	7d5120ef          	jal	80024f04 <printf>
    80011f34:	4511                	li	a0,4
    80011f36:	cc1ee0ef          	jal	80000bf6 <goto_priv>
    80011f3a:	d72ef0ef          	jal	800014ac <reset_state>

}
    80011f3e:	60e2                	ld	ra,24(sp)
    80011f40:	6442                	ld	s0,16(sp)
    80011f42:	8526                	mv	a0,s1
    80011f44:	64a2                	ld	s1,8(sp)
    80011f46:	6105                	addi	sp,sp,32
    80011f48:	8082                	ret

0000000080011f4a <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    80011f4a:	1101                	addi	sp,sp,-32

    TEST_START();
    80011f4c:	00014597          	auipc	a1,0x14
    80011f50:	d1c58593          	addi	a1,a1,-740 # 80025c68 <__func__.2>
    80011f54:	00015517          	auipc	a0,0x15
    80011f58:	f4c50513          	addi	a0,a0,-180 # 80026ea0 <__func__.0+0x2e0>
bool external_interrupt_MEI() {
    80011f5c:	ec06                	sd	ra,24(sp)
    80011f5e:	e822                	sd	s0,16(sp)
    80011f60:	e426                	sd	s1,8(sp)
    TEST_START();
    80011f62:	7a3120ef          	jal	80024f04 <printf>
    80011f66:	4529                	li	a0,10
    80011f68:	5a7110ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80011f6c:	0330000f          	fence	rw,rw
    80011f70:	00037497          	auipc	s1,0x37
    80011f74:	0a048493          	addi	s1,s1,160 # 80049010 <excpt>
    80011f78:	4785                	li	a5,1
    80011f7a:	00037717          	auipc	a4,0x37
    80011f7e:	0c073723          	sd	zero,206(a4) # 80049048 <excpt+0x38>
    80011f82:	00f49023          	sh	a5,0(s1)
    80011f86:	0330000f          	fence	rw,rw

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    80011f8a:	4511                	li	a0,4
    80011f8c:	c6bee0ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    80011f90:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80011f94:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    80011f98:	6785                	lui	a5,0x1
    80011f9a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011f9e:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    80011fa2:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80011fa6:	4511                	li	a0,4
    80011fa8:	c4fee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011fac:	08200593          	li	a1,130
    80011fb0:	00018617          	auipc	a2,0x18
    80011fb4:	64860613          	addi	a2,a2,1608 # 8002a5f8 <__func__.0+0x3a38>
    80011fb8:	00015517          	auipc	a0,0x15
    80011fbc:	f0050513          	addi	a0,a0,-256 # 80026eb8 <__func__.0+0x2f8>
    80011fc0:	745120ef          	jal	80024f04 <printf>
    80011fc4:	00037797          	auipc	a5,0x37
    80011fc8:	04d7c783          	lbu	a5,77(a5) # 80049011 <excpt+0x1>
    80011fcc:	00015597          	auipc	a1,0x15
    80011fd0:	ec458593          	addi	a1,a1,-316 # 80026e90 <__func__.0+0x2d0>
    80011fd4:	cf99                	beqz	a5,80011ff2 <external_interrupt_MEI+0xa8>
    80011fd6:	57fd                	li	a5,-1
    80011fd8:	6498                	ld	a4,8(s1)
    80011fda:	17fe                	slli	a5,a5,0x3f
    80011fdc:	07ad                	addi	a5,a5,11
    80011fde:	00015597          	auipc	a1,0x15
    80011fe2:	ea258593          	addi	a1,a1,-350 # 80026e80 <__func__.0+0x2c0>
    80011fe6:	00f70663          	beq	a4,a5,80011ff2 <external_interrupt_MEI+0xa8>
    80011fea:	00015597          	auipc	a1,0x15
    80011fee:	ea658593          	addi	a1,a1,-346 # 80026e90 <__func__.0+0x2d0>
    80011ff2:	00015517          	auipc	a0,0x15
    80011ff6:	ede50513          	addi	a0,a0,-290 # 80026ed0 <__func__.0+0x310>
    80011ffa:	70b120ef          	jal	80024f04 <printf>
    80011ffe:	00037797          	auipc	a5,0x37
    80012002:	0137c783          	lbu	a5,19(a5) # 80049011 <excpt+0x1>
    80012006:	c799                	beqz	a5,80012014 <external_interrupt_MEI+0xca>
    80012008:	57fd                	li	a5,-1
    8001200a:	6498                	ld	a4,8(s1)
    8001200c:	17fe                	slli	a5,a5,0x3f
    8001200e:	07ad                	addi	a5,a5,11
    80012010:	00f70c63          	beq	a4,a5,80012028 <external_interrupt_MEI+0xde>
    80012014:	00015517          	auipc	a0,0x15
    80012018:	ec450513          	addi	a0,a0,-316 # 80026ed8 <__func__.0+0x318>
    8001201c:	6e9120ef          	jal	80024f04 <printf>
    80012020:	02900513          	li	a0,41
    80012024:	4eb110ef          	jal	80023d0e <putchar>
    80012028:	4529                	li	a0,10
    8001202a:	4e5110ef          	jal	80023d0e <putchar>
    8001202e:	00037797          	auipc	a5,0x37
    80012032:	fe37c783          	lbu	a5,-29(a5) # 80049011 <excpt+0x1>
    80012036:	4401                	li	s0,0
    80012038:	c799                	beqz	a5,80012046 <external_interrupt_MEI+0xfc>
    8001203a:	6480                	ld	s0,8(s1)
    8001203c:	57ad                	li	a5,-21
    8001203e:	8385                	srli	a5,a5,0x1
    80012040:	943e                	add	s0,s0,a5
    80012042:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    80012046:	0330000f          	fence	rw,rw
    8001204a:	4785                	li	a5,1
    8001204c:	00037717          	auipc	a4,0x37
    80012050:	fe073e23          	sd	zero,-4(a4) # 80049048 <excpt+0x38>
    80012054:	00f49023          	sh	a5,0(s1)
    80012058:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001205c:	4511                	li	a0,4
    8001205e:	b99ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012062:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80012066:	6785                	lui	a5,0x1
    80012068:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001206c:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80012070:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80012074:	4511                	li	a0,4
    80012076:	b81ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    8001207a:	08200593          	li	a1,130
    8001207e:	00018617          	auipc	a2,0x18
    80012082:	5da60613          	addi	a2,a2,1498 # 8002a658 <__func__.0+0x3a98>
    80012086:	00015517          	auipc	a0,0x15
    8001208a:	e3250513          	addi	a0,a0,-462 # 80026eb8 <__func__.0+0x2f8>
    8001208e:	677120ef          	jal	80024f04 <printf>
    80012092:	00037797          	auipc	a5,0x37
    80012096:	f7f7c783          	lbu	a5,-129(a5) # 80049011 <excpt+0x1>
    8001209a:	00015597          	auipc	a1,0x15
    8001209e:	df658593          	addi	a1,a1,-522 # 80026e90 <__func__.0+0x2d0>
    800120a2:	e789                	bnez	a5,800120ac <external_interrupt_MEI+0x162>
    800120a4:	00015597          	auipc	a1,0x15
    800120a8:	ddc58593          	addi	a1,a1,-548 # 80026e80 <__func__.0+0x2c0>
    800120ac:	00015517          	auipc	a0,0x15
    800120b0:	e2450513          	addi	a0,a0,-476 # 80026ed0 <__func__.0+0x310>
    800120b4:	651120ef          	jal	80024f04 <printf>
    800120b8:	00037797          	auipc	a5,0x37
    800120bc:	f597c783          	lbu	a5,-167(a5) # 80049011 <excpt+0x1>
    800120c0:	280795e3          	bnez	a5,80012b4a <external_interrupt_MEI+0xc00>
    800120c4:	4529                	li	a0,10
    800120c6:	449110ef          	jal	80023d0e <putchar>
    800120ca:	c419                	beqz	s0,800120d8 <external_interrupt_MEI+0x18e>
    800120cc:	00037417          	auipc	s0,0x37
    800120d0:	f4544403          	lbu	s0,-187(s0) # 80049011 <excpt+0x1>
    800120d4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    800120d8:	0330000f          	fence	rw,rw
    800120dc:	4785                	li	a5,1
    800120de:	00037717          	auipc	a4,0x37
    800120e2:	f6073523          	sd	zero,-150(a4) # 80049048 <excpt+0x38>
    800120e6:	00f49023          	sh	a5,0(s1)
    800120ea:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800120ee:	4511                	li	a0,4
    800120f0:	b07ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800120f4:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800120f8:	6785                	lui	a5,0x1
    800120fa:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800120fe:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80012102:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80012106:	4511                	li	a0,4
    80012108:	aefee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    8001210c:	08200593          	li	a1,130
    80012110:	00018617          	auipc	a2,0x18
    80012114:	5a060613          	addi	a2,a2,1440 # 8002a6b0 <__func__.0+0x3af0>
    80012118:	00015517          	auipc	a0,0x15
    8001211c:	da050513          	addi	a0,a0,-608 # 80026eb8 <__func__.0+0x2f8>
    80012120:	5e5120ef          	jal	80024f04 <printf>
    80012124:	00037797          	auipc	a5,0x37
    80012128:	eed7c783          	lbu	a5,-275(a5) # 80049011 <excpt+0x1>
    8001212c:	00015597          	auipc	a1,0x15
    80012130:	d6458593          	addi	a1,a1,-668 # 80026e90 <__func__.0+0x2d0>
    80012134:	cf99                	beqz	a5,80012152 <external_interrupt_MEI+0x208>
    80012136:	57fd                	li	a5,-1
    80012138:	6498                	ld	a4,8(s1)
    8001213a:	17fe                	slli	a5,a5,0x3f
    8001213c:	07ad                	addi	a5,a5,11
    8001213e:	00015597          	auipc	a1,0x15
    80012142:	d4258593          	addi	a1,a1,-702 # 80026e80 <__func__.0+0x2c0>
    80012146:	00f70663          	beq	a4,a5,80012152 <external_interrupt_MEI+0x208>
    8001214a:	00015597          	auipc	a1,0x15
    8001214e:	d4658593          	addi	a1,a1,-698 # 80026e90 <__func__.0+0x2d0>
    80012152:	00015517          	auipc	a0,0x15
    80012156:	d7e50513          	addi	a0,a0,-642 # 80026ed0 <__func__.0+0x310>
    8001215a:	5ab120ef          	jal	80024f04 <printf>
    8001215e:	00037797          	auipc	a5,0x37
    80012162:	eb37c783          	lbu	a5,-333(a5) # 80049011 <excpt+0x1>
    80012166:	c799                	beqz	a5,80012174 <external_interrupt_MEI+0x22a>
    80012168:	57fd                	li	a5,-1
    8001216a:	6498                	ld	a4,8(s1)
    8001216c:	17fe                	slli	a5,a5,0x3f
    8001216e:	07ad                	addi	a5,a5,11
    80012170:	00f70c63          	beq	a4,a5,80012188 <external_interrupt_MEI+0x23e>
    80012174:	00015517          	auipc	a0,0x15
    80012178:	d6450513          	addi	a0,a0,-668 # 80026ed8 <__func__.0+0x318>
    8001217c:	589120ef          	jal	80024f04 <printf>
    80012180:	02900513          	li	a0,41
    80012184:	38b110ef          	jal	80023d0e <putchar>
    80012188:	4529                	li	a0,10
    8001218a:	385110ef          	jal	80023d0e <putchar>
    8001218e:	c801                	beqz	s0,8001219e <external_interrupt_MEI+0x254>
    80012190:	00037797          	auipc	a5,0x37
    80012194:	e817c783          	lbu	a5,-383(a5) # 80049011 <excpt+0x1>
    80012198:	4401                	li	s0,0
    8001219a:	100798e3          	bnez	a5,80012aaa <external_interrupt_MEI+0xb60>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    8001219e:	0330000f          	fence	rw,rw
    800121a2:	4785                	li	a5,1
    800121a4:	00037717          	auipc	a4,0x37
    800121a8:	ea073223          	sd	zero,-348(a4) # 80049048 <excpt+0x38>
    800121ac:	00f49023          	sh	a5,0(s1)
    800121b0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800121b4:	4511                	li	a0,4
    800121b6:	a41ee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800121ba:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800121be:	6785                	lui	a5,0x1
    800121c0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800121c4:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    800121c8:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    800121cc:	4511                	li	a0,4
    800121ce:	a29ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    800121d2:	08200593          	li	a1,130
    800121d6:	00018617          	auipc	a2,0x18
    800121da:	53a60613          	addi	a2,a2,1338 # 8002a710 <__func__.0+0x3b50>
    800121de:	00015517          	auipc	a0,0x15
    800121e2:	cda50513          	addi	a0,a0,-806 # 80026eb8 <__func__.0+0x2f8>
    800121e6:	51f120ef          	jal	80024f04 <printf>
    800121ea:	00037797          	auipc	a5,0x37
    800121ee:	e277c783          	lbu	a5,-473(a5) # 80049011 <excpt+0x1>
    800121f2:	00015597          	auipc	a1,0x15
    800121f6:	c9e58593          	addi	a1,a1,-866 # 80026e90 <__func__.0+0x2d0>
    800121fa:	e789                	bnez	a5,80012204 <external_interrupt_MEI+0x2ba>
    800121fc:	00015597          	auipc	a1,0x15
    80012200:	c8458593          	addi	a1,a1,-892 # 80026e80 <__func__.0+0x2c0>
    80012204:	00015517          	auipc	a0,0x15
    80012208:	ccc50513          	addi	a0,a0,-820 # 80026ed0 <__func__.0+0x310>
    8001220c:	4f9120ef          	jal	80024f04 <printf>
    80012210:	00037797          	auipc	a5,0x37
    80012214:	e017c783          	lbu	a5,-511(a5) # 80049011 <excpt+0x1>
    80012218:	1a0793e3          	bnez	a5,80012bbe <external_interrupt_MEI+0xc74>
    8001221c:	4529                	li	a0,10
    8001221e:	2f1110ef          	jal	80023d0e <putchar>
    80012222:	c419                	beqz	s0,80012230 <external_interrupt_MEI+0x2e6>
    80012224:	00037417          	auipc	s0,0x37
    80012228:	ded44403          	lbu	s0,-531(s0) # 80049011 <excpt+0x1>
    8001222c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    80012230:	0330000f          	fence	rw,rw
    80012234:	4785                	li	a5,1
    80012236:	00037717          	auipc	a4,0x37
    8001223a:	e0073923          	sd	zero,-494(a4) # 80049048 <excpt+0x38>
    8001223e:	00f49023          	sh	a5,0(s1)
    80012242:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012246:	4511                	li	a0,4
    80012248:	9afee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    8001224c:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012250:	6785                	lui	a5,0x1
    80012252:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012256:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8001225a:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8001225e:	4511                	li	a0,4
    80012260:	997ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80012264:	08200593          	li	a1,130
    80012268:	00018617          	auipc	a2,0x18
    8001226c:	50060613          	addi	a2,a2,1280 # 8002a768 <__func__.0+0x3ba8>
    80012270:	00015517          	auipc	a0,0x15
    80012274:	c4850513          	addi	a0,a0,-952 # 80026eb8 <__func__.0+0x2f8>
    80012278:	48d120ef          	jal	80024f04 <printf>
    8001227c:	00037797          	auipc	a5,0x37
    80012280:	d957c783          	lbu	a5,-619(a5) # 80049011 <excpt+0x1>
    80012284:	00015597          	auipc	a1,0x15
    80012288:	c0c58593          	addi	a1,a1,-1012 # 80026e90 <__func__.0+0x2d0>
    8001228c:	e789                	bnez	a5,80012296 <external_interrupt_MEI+0x34c>
    8001228e:	00015597          	auipc	a1,0x15
    80012292:	bf258593          	addi	a1,a1,-1038 # 80026e80 <__func__.0+0x2c0>
    80012296:	00015517          	auipc	a0,0x15
    8001229a:	c3a50513          	addi	a0,a0,-966 # 80026ed0 <__func__.0+0x310>
    8001229e:	467120ef          	jal	80024f04 <printf>
    800122a2:	00037797          	auipc	a5,0x37
    800122a6:	d6f7c783          	lbu	a5,-657(a5) # 80049011 <excpt+0x1>
    800122aa:	0e079ee3          	bnez	a5,80012ba6 <external_interrupt_MEI+0xc5c>
    800122ae:	4529                	li	a0,10
    800122b0:	25f110ef          	jal	80023d0e <putchar>
    800122b4:	c419                	beqz	s0,800122c2 <external_interrupt_MEI+0x378>
    800122b6:	00037417          	auipc	s0,0x37
    800122ba:	d5b44403          	lbu	s0,-677(s0) # 80049011 <excpt+0x1>
    800122be:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    800122c2:	0330000f          	fence	rw,rw
    800122c6:	4785                	li	a5,1
    800122c8:	00037717          	auipc	a4,0x37
    800122cc:	d8073023          	sd	zero,-640(a4) # 80049048 <excpt+0x38>
    800122d0:	00f49023          	sh	a5,0(s1)
    800122d4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800122d8:	4511                	li	a0,4
    800122da:	91dee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    800122de:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    800122e2:	6785                	lui	a5,0x1
    800122e4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800122e8:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800122ec:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    800122f0:	4511                	li	a0,4
    800122f2:	905ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    800122f6:	08200593          	li	a1,130
    800122fa:	00018617          	auipc	a2,0x18
    800122fe:	4c660613          	addi	a2,a2,1222 # 8002a7c0 <__func__.0+0x3c00>
    80012302:	00015517          	auipc	a0,0x15
    80012306:	bb650513          	addi	a0,a0,-1098 # 80026eb8 <__func__.0+0x2f8>
    8001230a:	3fb120ef          	jal	80024f04 <printf>
    8001230e:	00037797          	auipc	a5,0x37
    80012312:	d037c783          	lbu	a5,-765(a5) # 80049011 <excpt+0x1>
    80012316:	00015597          	auipc	a1,0x15
    8001231a:	b7a58593          	addi	a1,a1,-1158 # 80026e90 <__func__.0+0x2d0>
    8001231e:	e789                	bnez	a5,80012328 <external_interrupt_MEI+0x3de>
    80012320:	00015597          	auipc	a1,0x15
    80012324:	b6058593          	addi	a1,a1,-1184 # 80026e80 <__func__.0+0x2c0>
    80012328:	00015517          	auipc	a0,0x15
    8001232c:	ba850513          	addi	a0,a0,-1112 # 80026ed0 <__func__.0+0x310>
    80012330:	3d5120ef          	jal	80024f04 <printf>
    80012334:	00037797          	auipc	a5,0x37
    80012338:	cdd7c783          	lbu	a5,-803(a5) # 80049011 <excpt+0x1>
    8001233c:	040799e3          	bnez	a5,80012b8e <external_interrupt_MEI+0xc44>
    80012340:	4529                	li	a0,10
    80012342:	1cd110ef          	jal	80023d0e <putchar>
    80012346:	c419                	beqz	s0,80012354 <external_interrupt_MEI+0x40a>
    80012348:	00037417          	auipc	s0,0x37
    8001234c:	cc944403          	lbu	s0,-823(s0) # 80049011 <excpt+0x1>
    80012350:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    80012354:	0330000f          	fence	rw,rw
    80012358:	4785                	li	a5,1
    8001235a:	00037717          	auipc	a4,0x37
    8001235e:	ce073723          	sd	zero,-786(a4) # 80049048 <excpt+0x38>
    80012362:	00f49023          	sh	a5,0(s1)
    80012366:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001236a:	4511                	li	a0,4
    8001236c:	88bee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012370:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012374:	6785                	lui	a5,0x1
    80012376:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001237a:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8001237e:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    80012382:	450d                	li	a0,3
    80012384:	873ee0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80012388:	08200593          	li	a1,130
    8001238c:	00018617          	auipc	a2,0x18
    80012390:	48c60613          	addi	a2,a2,1164 # 8002a818 <__func__.0+0x3c58>
    80012394:	00015517          	auipc	a0,0x15
    80012398:	b2450513          	addi	a0,a0,-1244 # 80026eb8 <__func__.0+0x2f8>
    8001239c:	369120ef          	jal	80024f04 <printf>
    800123a0:	6094                	ld	a3,0(s1)
    800123a2:	f0001737          	lui	a4,0xf0001
    800123a6:	0712                	slli	a4,a4,0x4
    800123a8:	4785                	li	a5,1
    800123aa:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800123ae:	178a                	slli	a5,a5,0x22
    800123b0:	8f75                	and	a4,a4,a3
    800123b2:	10078793          	addi	a5,a5,256
    800123b6:	00015597          	auipc	a1,0x15
    800123ba:	ada58593          	addi	a1,a1,-1318 # 80026e90 <__func__.0+0x2d0>
    800123be:	00f71663          	bne	a4,a5,800123ca <external_interrupt_MEI+0x480>
    800123c2:	00015597          	auipc	a1,0x15
    800123c6:	abe58593          	addi	a1,a1,-1346 # 80026e80 <__func__.0+0x2c0>
    800123ca:	00015517          	auipc	a0,0x15
    800123ce:	b0650513          	addi	a0,a0,-1274 # 80026ed0 <__func__.0+0x310>
    800123d2:	333120ef          	jal	80024f04 <printf>
    800123d6:	00037797          	auipc	a5,0x37
    800123da:	c3b7c783          	lbu	a5,-965(a5) # 80049011 <excpt+0x1>
    800123de:	cb81                	beqz	a5,800123ee <external_interrupt_MEI+0x4a4>
    800123e0:	00037717          	auipc	a4,0x37
    800123e4:	c3472703          	lw	a4,-972(a4) # 80049014 <excpt+0x4>
    800123e8:	4791                	li	a5,4
    800123ea:	00f70c63          	beq	a4,a5,80012402 <external_interrupt_MEI+0x4b8>
    800123ee:	00015517          	auipc	a0,0x15
    800123f2:	aea50513          	addi	a0,a0,-1302 # 80026ed8 <__func__.0+0x318>
    800123f6:	30f120ef          	jal	80024f04 <printf>
    800123fa:	02900513          	li	a0,41
    800123fe:	111110ef          	jal	80023d0e <putchar>
    80012402:	4529                	li	a0,10
    80012404:	10b110ef          	jal	80023d0e <putchar>
    80012408:	cc19                	beqz	s0,80012426 <external_interrupt_MEI+0x4dc>
    8001240a:	6080                	ld	s0,0(s1)
    8001240c:	f0001737          	lui	a4,0xf0001
    80012410:	0712                	slli	a4,a4,0x4
    80012412:	57fd                	li	a5,-1
    80012414:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012418:	178a                	slli	a5,a5,0x22
    8001241a:	8c79                	and	s0,s0,a4
    8001241c:	f0078793          	addi	a5,a5,-256
    80012420:	943e                	add	s0,s0,a5
    80012422:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80012426:	0330000f          	fence	rw,rw
    8001242a:	4785                	li	a5,1
    8001242c:	00037717          	auipc	a4,0x37
    80012430:	c0073e23          	sd	zero,-996(a4) # 80049048 <excpt+0x38>
    80012434:	00f49023          	sh	a5,0(s1)
    80012438:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001243c:	4511                	li	a0,4
    8001243e:	fb8ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012442:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012446:	6785                	lui	a5,0x1
    80012448:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001244c:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80012450:	577d                	li	a4,-1
    80012452:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80012456:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    8001245a:	450d                	li	a0,3
    8001245c:	f9aee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80012460:	08200593          	li	a1,130
    80012464:	00018617          	auipc	a2,0x18
    80012468:	40c60613          	addi	a2,a2,1036 # 8002a870 <__func__.0+0x3cb0>
    8001246c:	00015517          	auipc	a0,0x15
    80012470:	a4c50513          	addi	a0,a0,-1460 # 80026eb8 <__func__.0+0x2f8>
    80012474:	291120ef          	jal	80024f04 <printf>
    80012478:	6094                	ld	a3,0(s1)
    8001247a:	f0001737          	lui	a4,0xf0001
    8001247e:	0712                	slli	a4,a4,0x4
    80012480:	478d                	li	a5,3
    80012482:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012486:	1782                	slli	a5,a5,0x20
    80012488:	8f75                	and	a4,a4,a3
    8001248a:	10078793          	addi	a5,a5,256
    8001248e:	00015597          	auipc	a1,0x15
    80012492:	a0258593          	addi	a1,a1,-1534 # 80026e90 <__func__.0+0x2d0>
    80012496:	00f71663          	bne	a4,a5,800124a2 <external_interrupt_MEI+0x558>
    8001249a:	00015597          	auipc	a1,0x15
    8001249e:	9e658593          	addi	a1,a1,-1562 # 80026e80 <__func__.0+0x2c0>
    800124a2:	00015517          	auipc	a0,0x15
    800124a6:	a2e50513          	addi	a0,a0,-1490 # 80026ed0 <__func__.0+0x310>
    800124aa:	25b120ef          	jal	80024f04 <printf>
    800124ae:	00037797          	auipc	a5,0x37
    800124b2:	b637c783          	lbu	a5,-1181(a5) # 80049011 <excpt+0x1>
    800124b6:	cb81                	beqz	a5,800124c6 <external_interrupt_MEI+0x57c>
    800124b8:	00037717          	auipc	a4,0x37
    800124bc:	b5c72703          	lw	a4,-1188(a4) # 80049014 <excpt+0x4>
    800124c0:	478d                	li	a5,3
    800124c2:	00f70c63          	beq	a4,a5,800124da <external_interrupt_MEI+0x590>
    800124c6:	00015517          	auipc	a0,0x15
    800124ca:	a1250513          	addi	a0,a0,-1518 # 80026ed8 <__func__.0+0x318>
    800124ce:	237120ef          	jal	80024f04 <printf>
    800124d2:	02900513          	li	a0,41
    800124d6:	039110ef          	jal	80023d0e <putchar>
    800124da:	4529                	li	a0,10
    800124dc:	033110ef          	jal	80023d0e <putchar>
    800124e0:	cc19                	beqz	s0,800124fe <external_interrupt_MEI+0x5b4>
    800124e2:	6080                	ld	s0,0(s1)
    800124e4:	f0001737          	lui	a4,0xf0001
    800124e8:	0712                	slli	a4,a4,0x4
    800124ea:	57f5                	li	a5,-3
    800124ec:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800124f0:	1782                	slli	a5,a5,0x20
    800124f2:	8c79                	and	s0,s0,a4
    800124f4:	f0078793          	addi	a5,a5,-256
    800124f8:	943e                	add	s0,s0,a5
    800124fa:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    800124fe:	0330000f          	fence	rw,rw
    80012502:	4785                	li	a5,1
    80012504:	00037717          	auipc	a4,0x37
    80012508:	b4073223          	sd	zero,-1212(a4) # 80049048 <excpt+0x38>
    8001250c:	00f49023          	sh	a5,0(s1)
    80012510:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012514:	4511                	li	a0,4
    80012516:	ee0ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8001251a:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    8001251e:	6785                	lui	a5,0x1
    80012520:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012524:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80012528:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8001252c:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80012530:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80012534:	450d                	li	a0,3
    80012536:	ec0ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    8001253a:	08200593          	li	a1,130
    8001253e:	00018617          	auipc	a2,0x18
    80012542:	38a60613          	addi	a2,a2,906 # 8002a8c8 <__func__.0+0x3d08>
    80012546:	00015517          	auipc	a0,0x15
    8001254a:	97250513          	addi	a0,a0,-1678 # 80026eb8 <__func__.0+0x2f8>
    8001254e:	1b7120ef          	jal	80024f04 <printf>
    80012552:	00037797          	auipc	a5,0x37
    80012556:	abf7c783          	lbu	a5,-1345(a5) # 80049011 <excpt+0x1>
    8001255a:	00015597          	auipc	a1,0x15
    8001255e:	93658593          	addi	a1,a1,-1738 # 80026e90 <__func__.0+0x2d0>
    80012562:	e789                	bnez	a5,8001256c <external_interrupt_MEI+0x622>
    80012564:	00015597          	auipc	a1,0x15
    80012568:	91c58593          	addi	a1,a1,-1764 # 80026e80 <__func__.0+0x2c0>
    8001256c:	00015517          	auipc	a0,0x15
    80012570:	96450513          	addi	a0,a0,-1692 # 80026ed0 <__func__.0+0x310>
    80012574:	191120ef          	jal	80024f04 <printf>
    80012578:	00037797          	auipc	a5,0x37
    8001257c:	a997c783          	lbu	a5,-1383(a5) # 80049011 <excpt+0x1>
    80012580:	5e079c63          	bnez	a5,80012b78 <external_interrupt_MEI+0xc2e>
    80012584:	4529                	li	a0,10
    80012586:	788110ef          	jal	80023d0e <putchar>
    8001258a:	c419                	beqz	s0,80012598 <external_interrupt_MEI+0x64e>
    8001258c:	00037417          	auipc	s0,0x37
    80012590:	a8544403          	lbu	s0,-1403(s0) # 80049011 <excpt+0x1>
    80012594:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80012598:	0330000f          	fence	rw,rw
    8001259c:	4785                	li	a5,1
    8001259e:	00037717          	auipc	a4,0x37
    800125a2:	aa073523          	sd	zero,-1366(a4) # 80049048 <excpt+0x38>
    800125a6:	00f49023          	sh	a5,0(s1)
    800125aa:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800125ae:	4511                	li	a0,4
    800125b0:	e46ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800125b4:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800125b8:	6785                	lui	a5,0x1
    800125ba:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800125be:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800125c2:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    800125c6:	450d                	li	a0,3
    800125c8:	e2eee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    800125cc:	08200593          	li	a1,130
    800125d0:	00018617          	auipc	a2,0x18
    800125d4:	35060613          	addi	a2,a2,848 # 8002a920 <__func__.0+0x3d60>
    800125d8:	00015517          	auipc	a0,0x15
    800125dc:	8e050513          	addi	a0,a0,-1824 # 80026eb8 <__func__.0+0x2f8>
    800125e0:	125120ef          	jal	80024f04 <printf>
    800125e4:	00037797          	auipc	a5,0x37
    800125e8:	a2d7c783          	lbu	a5,-1491(a5) # 80049011 <excpt+0x1>
    800125ec:	00015597          	auipc	a1,0x15
    800125f0:	8a458593          	addi	a1,a1,-1884 # 80026e90 <__func__.0+0x2d0>
    800125f4:	c799                	beqz	a5,80012602 <external_interrupt_MEI+0x6b8>
    800125f6:	57fd                	li	a5,-1
    800125f8:	6498                	ld	a4,8(s1)
    800125fa:	17fe                	slli	a5,a5,0x3f
    800125fc:	07ad                	addi	a5,a5,11
    800125fe:	5cf70c63          	beq	a4,a5,80012bd6 <external_interrupt_MEI+0xc8c>
    80012602:	00015517          	auipc	a0,0x15
    80012606:	8ce50513          	addi	a0,a0,-1842 # 80026ed0 <__func__.0+0x310>
    8001260a:	0fb120ef          	jal	80024f04 <printf>
    8001260e:	00037797          	auipc	a5,0x37
    80012612:	a037c783          	lbu	a5,-1533(a5) # 80049011 <excpt+0x1>
    80012616:	c799                	beqz	a5,80012624 <external_interrupt_MEI+0x6da>
    80012618:	57fd                	li	a5,-1
    8001261a:	6498                	ld	a4,8(s1)
    8001261c:	17fe                	slli	a5,a5,0x3f
    8001261e:	07ad                	addi	a5,a5,11
    80012620:	4ef70763          	beq	a4,a5,80012b0e <external_interrupt_MEI+0xbc4>
    80012624:	00015517          	auipc	a0,0x15
    80012628:	8b450513          	addi	a0,a0,-1868 # 80026ed8 <__func__.0+0x318>
    8001262c:	0d9120ef          	jal	80024f04 <printf>
    80012630:	02900513          	li	a0,41
    80012634:	6da110ef          	jal	80023d0e <putchar>
    80012638:	4529                	li	a0,10
    8001263a:	6d4110ef          	jal	80023d0e <putchar>
    8001263e:	c801                	beqz	s0,8001264e <external_interrupt_MEI+0x704>
    80012640:	00037797          	auipc	a5,0x37
    80012644:	9d17c783          	lbu	a5,-1583(a5) # 80049011 <excpt+0x1>
    80012648:	4401                	li	s0,0
    8001264a:	48079c63          	bnez	a5,80012ae2 <external_interrupt_MEI+0xb98>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    8001264e:	0330000f          	fence	rw,rw
    80012652:	4785                	li	a5,1
    80012654:	00037717          	auipc	a4,0x37
    80012658:	9e073a23          	sd	zero,-1548(a4) # 80049048 <excpt+0x38>
    8001265c:	00f49023          	sh	a5,0(s1)
    80012660:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012664:	4511                	li	a0,4
    80012666:	d90ee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001266a:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001266e:	6785                	lui	a5,0x1
    80012670:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012674:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012678:	577d                	li	a4,-1
    8001267a:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    8001267e:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    80012682:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80012686:	450d                	li	a0,3
    80012688:	d6eee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    8001268c:	08200593          	li	a1,130
    80012690:	00018617          	auipc	a2,0x18
    80012694:	2e860613          	addi	a2,a2,744 # 8002a978 <__func__.0+0x3db8>
    80012698:	00015517          	auipc	a0,0x15
    8001269c:	82050513          	addi	a0,a0,-2016 # 80026eb8 <__func__.0+0x2f8>
    800126a0:	065120ef          	jal	80024f04 <printf>
    800126a4:	00037797          	auipc	a5,0x37
    800126a8:	96d7c783          	lbu	a5,-1683(a5) # 80049011 <excpt+0x1>
    800126ac:	00014597          	auipc	a1,0x14
    800126b0:	7e458593          	addi	a1,a1,2020 # 80026e90 <__func__.0+0x2d0>
    800126b4:	e789                	bnez	a5,800126be <external_interrupt_MEI+0x774>
    800126b6:	00014597          	auipc	a1,0x14
    800126ba:	7ca58593          	addi	a1,a1,1994 # 80026e80 <__func__.0+0x2c0>
    800126be:	00015517          	auipc	a0,0x15
    800126c2:	81250513          	addi	a0,a0,-2030 # 80026ed0 <__func__.0+0x310>
    800126c6:	03f120ef          	jal	80024f04 <printf>
    800126ca:	00037797          	auipc	a5,0x37
    800126ce:	9477c783          	lbu	a5,-1721(a5) # 80049011 <excpt+0x1>
    800126d2:	44079663          	bnez	a5,80012b1e <external_interrupt_MEI+0xbd4>
    800126d6:	4529                	li	a0,10
    800126d8:	636110ef          	jal	80023d0e <putchar>
    800126dc:	c419                	beqz	s0,800126ea <external_interrupt_MEI+0x7a0>
    800126de:	00037417          	auipc	s0,0x37
    800126e2:	93344403          	lbu	s0,-1741(s0) # 80049011 <excpt+0x1>
    800126e6:	00144413          	xori	s0,s0,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    800126ea:	0330000f          	fence	rw,rw
    800126ee:	4785                	li	a5,1
    800126f0:	00037717          	auipc	a4,0x37
    800126f4:	94073c23          	sd	zero,-1704(a4) # 80049048 <excpt+0x38>
    800126f8:	00f49023          	sh	a5,0(s1)
    800126fc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012700:	4511                	li	a0,4
    80012702:	cf4ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80012706:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001270a:	6785                	lui	a5,0x1
    8001270c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012710:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80012714:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    80012718:	4509                	li	a0,2
    8001271a:	cdcee0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8001271e:	08200593          	li	a1,130
    80012722:	00018617          	auipc	a2,0x18
    80012726:	2a660613          	addi	a2,a2,678 # 8002a9c8 <__func__.0+0x3e08>
    8001272a:	00014517          	auipc	a0,0x14
    8001272e:	78e50513          	addi	a0,a0,1934 # 80026eb8 <__func__.0+0x2f8>
    80012732:	7d2120ef          	jal	80024f04 <printf>
    80012736:	6094                	ld	a3,0(s1)
    80012738:	f0001737          	lui	a4,0xf0001
    8001273c:	0712                	slli	a4,a4,0x4
    8001273e:	4785                	li	a5,1
    80012740:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012744:	178a                	slli	a5,a5,0x22
    80012746:	8f75                	and	a4,a4,a3
    80012748:	10078793          	addi	a5,a5,256
    8001274c:	00014597          	auipc	a1,0x14
    80012750:	74458593          	addi	a1,a1,1860 # 80026e90 <__func__.0+0x2d0>
    80012754:	00f71663          	bne	a4,a5,80012760 <external_interrupt_MEI+0x816>
    80012758:	00014597          	auipc	a1,0x14
    8001275c:	72858593          	addi	a1,a1,1832 # 80026e80 <__func__.0+0x2c0>
    80012760:	00014517          	auipc	a0,0x14
    80012764:	77050513          	addi	a0,a0,1904 # 80026ed0 <__func__.0+0x310>
    80012768:	79c120ef          	jal	80024f04 <printf>
    8001276c:	00037797          	auipc	a5,0x37
    80012770:	8a57c783          	lbu	a5,-1883(a5) # 80049011 <excpt+0x1>
    80012774:	cb81                	beqz	a5,80012784 <external_interrupt_MEI+0x83a>
    80012776:	00037717          	auipc	a4,0x37
    8001277a:	89e72703          	lw	a4,-1890(a4) # 80049014 <excpt+0x4>
    8001277e:	4791                	li	a5,4
    80012780:	00f70c63          	beq	a4,a5,80012798 <external_interrupt_MEI+0x84e>
    80012784:	00014517          	auipc	a0,0x14
    80012788:	75450513          	addi	a0,a0,1876 # 80026ed8 <__func__.0+0x318>
    8001278c:	778120ef          	jal	80024f04 <printf>
    80012790:	02900513          	li	a0,41
    80012794:	57a110ef          	jal	80023d0e <putchar>
    80012798:	4529                	li	a0,10
    8001279a:	574110ef          	jal	80023d0e <putchar>
    8001279e:	cc19                	beqz	s0,800127bc <external_interrupt_MEI+0x872>
    800127a0:	6080                	ld	s0,0(s1)
    800127a2:	f0001737          	lui	a4,0xf0001
    800127a6:	0712                	slli	a4,a4,0x4
    800127a8:	57fd                	li	a5,-1
    800127aa:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800127ae:	178a                	slli	a5,a5,0x22
    800127b0:	8c79                	and	s0,s0,a4
    800127b2:	f0078793          	addi	a5,a5,-256
    800127b6:	943e                	add	s0,s0,a5
    800127b8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    800127bc:	0330000f          	fence	rw,rw
    800127c0:	4785                	li	a5,1
    800127c2:	00037717          	auipc	a4,0x37
    800127c6:	88073323          	sd	zero,-1914(a4) # 80049048 <excpt+0x38>
    800127ca:	00f49023          	sh	a5,0(s1)
    800127ce:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800127d2:	4511                	li	a0,4
    800127d4:	c22ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800127d8:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800127dc:	6785                	lui	a5,0x1
    800127de:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800127e2:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    800127e6:	577d                	li	a4,-1
    800127e8:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    800127ec:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    800127f0:	4509                	li	a0,2
    800127f2:	c04ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    800127f6:	08200593          	li	a1,130
    800127fa:	00018617          	auipc	a2,0x18
    800127fe:	22e60613          	addi	a2,a2,558 # 8002aa28 <__func__.0+0x3e68>
    80012802:	00014517          	auipc	a0,0x14
    80012806:	6b650513          	addi	a0,a0,1718 # 80026eb8 <__func__.0+0x2f8>
    8001280a:	6fa120ef          	jal	80024f04 <printf>
    8001280e:	6094                	ld	a3,0(s1)
    80012810:	f0001737          	lui	a4,0xf0001
    80012814:	0712                	slli	a4,a4,0x4
    80012816:	4785                	li	a5,1
    80012818:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8001281c:	1786                	slli	a5,a5,0x21
    8001281e:	8f75                	and	a4,a4,a3
    80012820:	10078793          	addi	a5,a5,256
    80012824:	00014597          	auipc	a1,0x14
    80012828:	66c58593          	addi	a1,a1,1644 # 80026e90 <__func__.0+0x2d0>
    8001282c:	00f71663          	bne	a4,a5,80012838 <external_interrupt_MEI+0x8ee>
    80012830:	00014597          	auipc	a1,0x14
    80012834:	65058593          	addi	a1,a1,1616 # 80026e80 <__func__.0+0x2c0>
    80012838:	00014517          	auipc	a0,0x14
    8001283c:	69850513          	addi	a0,a0,1688 # 80026ed0 <__func__.0+0x310>
    80012840:	6c4120ef          	jal	80024f04 <printf>
    80012844:	00036797          	auipc	a5,0x36
    80012848:	7cd7c783          	lbu	a5,1997(a5) # 80049011 <excpt+0x1>
    8001284c:	cb81                	beqz	a5,8001285c <external_interrupt_MEI+0x912>
    8001284e:	00036717          	auipc	a4,0x36
    80012852:	7c672703          	lw	a4,1990(a4) # 80049014 <excpt+0x4>
    80012856:	4789                	li	a5,2
    80012858:	00f70c63          	beq	a4,a5,80012870 <external_interrupt_MEI+0x926>
    8001285c:	00014517          	auipc	a0,0x14
    80012860:	67c50513          	addi	a0,a0,1660 # 80026ed8 <__func__.0+0x318>
    80012864:	6a0120ef          	jal	80024f04 <printf>
    80012868:	02900513          	li	a0,41
    8001286c:	4a2110ef          	jal	80023d0e <putchar>
    80012870:	4529                	li	a0,10
    80012872:	49c110ef          	jal	80023d0e <putchar>
    80012876:	cc19                	beqz	s0,80012894 <external_interrupt_MEI+0x94a>
    80012878:	6080                	ld	s0,0(s1)
    8001287a:	f0001737          	lui	a4,0xf0001
    8001287e:	0712                	slli	a4,a4,0x4
    80012880:	57fd                	li	a5,-1
    80012882:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80012886:	1786                	slli	a5,a5,0x21
    80012888:	8c79                	and	s0,s0,a4
    8001288a:	f0078793          	addi	a5,a5,-256
    8001288e:	943e                	add	s0,s0,a5
    80012890:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80012894:	0330000f          	fence	rw,rw
    80012898:	4785                	li	a5,1
    8001289a:	00036717          	auipc	a4,0x36
    8001289e:	7a073723          	sd	zero,1966(a4) # 80049048 <excpt+0x38>
    800128a2:	00f49023          	sh	a5,0(s1)
    800128a6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800128aa:	4511                	li	a0,4
    800128ac:	b4aee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800128b0:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    800128b4:	6785                	lui	a5,0x1
    800128b6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800128ba:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    800128be:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800128c2:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    800128c6:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    800128ca:	4509                	li	a0,2
    800128cc:	b2aee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    800128d0:	08200593          	li	a1,130
    800128d4:	00018617          	auipc	a2,0x18
    800128d8:	1b460613          	addi	a2,a2,436 # 8002aa88 <__func__.0+0x3ec8>
    800128dc:	00014517          	auipc	a0,0x14
    800128e0:	5dc50513          	addi	a0,a0,1500 # 80026eb8 <__func__.0+0x2f8>
    800128e4:	620120ef          	jal	80024f04 <printf>
    800128e8:	00036797          	auipc	a5,0x36
    800128ec:	7297c783          	lbu	a5,1833(a5) # 80049011 <excpt+0x1>
    800128f0:	00014597          	auipc	a1,0x14
    800128f4:	5a058593          	addi	a1,a1,1440 # 80026e90 <__func__.0+0x2d0>
    800128f8:	e789                	bnez	a5,80012902 <external_interrupt_MEI+0x9b8>
    800128fa:	00014597          	auipc	a1,0x14
    800128fe:	58658593          	addi	a1,a1,1414 # 80026e80 <__func__.0+0x2c0>
    80012902:	00014517          	auipc	a0,0x14
    80012906:	5ce50513          	addi	a0,a0,1486 # 80026ed0 <__func__.0+0x310>
    8001290a:	5fa120ef          	jal	80024f04 <printf>
    8001290e:	00036797          	auipc	a5,0x36
    80012912:	7037c783          	lbu	a5,1795(a5) # 80049011 <excpt+0x1>
    80012916:	20079f63          	bnez	a5,80012b34 <external_interrupt_MEI+0xbea>
    8001291a:	4529                	li	a0,10
    8001291c:	3f2110ef          	jal	80023d0e <putchar>
    80012920:	c419                	beqz	s0,8001292e <external_interrupt_MEI+0x9e4>
    80012922:	00036417          	auipc	s0,0x36
    80012926:	6ef44403          	lbu	s0,1775(s0) # 80049011 <excpt+0x1>
    8001292a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001292e:	0330000f          	fence	rw,rw
    80012932:	4785                	li	a5,1
    80012934:	00036717          	auipc	a4,0x36
    80012938:	70073a23          	sd	zero,1812(a4) # 80049048 <excpt+0x38>
    8001293c:	00f49023          	sh	a5,0(s1)
    80012940:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012944:	4511                	li	a0,4
    80012946:	ab0ee0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8001294a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001294e:	6785                	lui	a5,0x1
    80012950:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012954:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80012958:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    8001295c:	4509                	li	a0,2
    8001295e:	a98ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012962:	08200593          	li	a1,130
    80012966:	00018617          	auipc	a2,0x18
    8001296a:	18260613          	addi	a2,a2,386 # 8002aae8 <__func__.0+0x3f28>
    8001296e:	00014517          	auipc	a0,0x14
    80012972:	54a50513          	addi	a0,a0,1354 # 80026eb8 <__func__.0+0x2f8>
    80012976:	58e120ef          	jal	80024f04 <printf>
    8001297a:	00036797          	auipc	a5,0x36
    8001297e:	6977c783          	lbu	a5,1687(a5) # 80049011 <excpt+0x1>
    80012982:	00014597          	auipc	a1,0x14
    80012986:	50e58593          	addi	a1,a1,1294 # 80026e90 <__func__.0+0x2d0>
    8001298a:	c799                	beqz	a5,80012998 <external_interrupt_MEI+0xa4e>
    8001298c:	57fd                	li	a5,-1
    8001298e:	6498                	ld	a4,8(s1)
    80012990:	17fe                	slli	a5,a5,0x3f
    80012992:	07ad                	addi	a5,a5,11
    80012994:	26f70163          	beq	a4,a5,80012bf6 <external_interrupt_MEI+0xcac>
    80012998:	00014517          	auipc	a0,0x14
    8001299c:	53850513          	addi	a0,a0,1336 # 80026ed0 <__func__.0+0x310>
    800129a0:	564120ef          	jal	80024f04 <printf>
    800129a4:	00036797          	auipc	a5,0x36
    800129a8:	66d7c783          	lbu	a5,1645(a5) # 80049011 <excpt+0x1>
    800129ac:	c799                	beqz	a5,800129ba <external_interrupt_MEI+0xa70>
    800129ae:	57fd                	li	a5,-1
    800129b0:	6498                	ld	a4,8(s1)
    800129b2:	17fe                	slli	a5,a5,0x3f
    800129b4:	07ad                	addi	a5,a5,11
    800129b6:	14f70463          	beq	a4,a5,80012afe <external_interrupt_MEI+0xbb4>
    800129ba:	00014517          	auipc	a0,0x14
    800129be:	51e50513          	addi	a0,a0,1310 # 80026ed8 <__func__.0+0x318>
    800129c2:	542120ef          	jal	80024f04 <printf>
    800129c6:	02900513          	li	a0,41
    800129ca:	344110ef          	jal	80023d0e <putchar>
    800129ce:	4529                	li	a0,10
    800129d0:	33e110ef          	jal	80023d0e <putchar>
    800129d4:	c801                	beqz	s0,800129e4 <external_interrupt_MEI+0xa9a>
    800129d6:	00036797          	auipc	a5,0x36
    800129da:	63b7c783          	lbu	a5,1595(a5) # 80049011 <excpt+0x1>
    800129de:	4401                	li	s0,0
    800129e0:	0e079363          	bnez	a5,80012ac6 <external_interrupt_MEI+0xb7c>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    800129e4:	0330000f          	fence	rw,rw
    800129e8:	4785                	li	a5,1
    800129ea:	00036717          	auipc	a4,0x36
    800129ee:	64073f23          	sd	zero,1630(a4) # 80049048 <excpt+0x38>
    800129f2:	00f49023          	sh	a5,0(s1)
    800129f6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800129fa:	4511                	li	a0,4
    800129fc:	9faee0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80012a00:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80012a04:	6785                	lui	a5,0x1
    80012a06:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80012a0a:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012a0e:	577d                	li	a4,-1
    80012a10:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    80012a14:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    80012a18:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80012a1c:	4509                	li	a0,2
    80012a1e:	9d8ee0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012a22:	08200593          	li	a1,130
    80012a26:	00018617          	auipc	a2,0x18
    80012a2a:	12260613          	addi	a2,a2,290 # 8002ab48 <__func__.0+0x3f88>
    80012a2e:	00014517          	auipc	a0,0x14
    80012a32:	48a50513          	addi	a0,a0,1162 # 80026eb8 <__func__.0+0x2f8>
    80012a36:	4ce120ef          	jal	80024f04 <printf>
    80012a3a:	00036797          	auipc	a5,0x36
    80012a3e:	5d77c783          	lbu	a5,1495(a5) # 80049011 <excpt+0x1>
    80012a42:	00014597          	auipc	a1,0x14
    80012a46:	44e58593          	addi	a1,a1,1102 # 80026e90 <__func__.0+0x2d0>
    80012a4a:	e789                	bnez	a5,80012a54 <external_interrupt_MEI+0xb0a>
    80012a4c:	00014597          	auipc	a1,0x14
    80012a50:	43458593          	addi	a1,a1,1076 # 80026e80 <__func__.0+0x2c0>
    80012a54:	00014517          	auipc	a0,0x14
    80012a58:	47c50513          	addi	a0,a0,1148 # 80026ed0 <__func__.0+0x310>
    80012a5c:	4a8120ef          	jal	80024f04 <printf>
    80012a60:	00036797          	auipc	a5,0x36
    80012a64:	5b17c783          	lbu	a5,1457(a5) # 80049011 <excpt+0x1>
    80012a68:	0e079d63          	bnez	a5,80012b62 <external_interrupt_MEI+0xc18>
    80012a6c:	4529                	li	a0,10
    80012a6e:	2a0110ef          	jal	80023d0e <putchar>
    80012a72:	c411                	beqz	s0,80012a7e <external_interrupt_MEI+0xb34>
    80012a74:	00036797          	auipc	a5,0x36
    80012a78:	59d7c783          	lbu	a5,1437(a5) # 80049011 <excpt+0x1>
    80012a7c:	cf9d                	beqz	a5,80012aba <external_interrupt_MEI+0xb70>
    80012a7e:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    80012a80:	00014597          	auipc	a1,0x14
    80012a84:	41058593          	addi	a1,a1,1040 # 80026e90 <__func__.0+0x2d0>
    80012a88:	00014517          	auipc	a0,0x14
    80012a8c:	4b050513          	addi	a0,a0,1200 # 80026f38 <__func__.0+0x378>
    80012a90:	474120ef          	jal	80024f04 <printf>
    80012a94:	4511                	li	a0,4
    80012a96:	960ee0ef          	jal	80000bf6 <goto_priv>
    80012a9a:	a13ee0ef          	jal	800014ac <reset_state>
}
    80012a9e:	60e2                	ld	ra,24(sp)
    80012aa0:	8522                	mv	a0,s0
    80012aa2:	6442                	ld	s0,16(sp)
    80012aa4:	64a2                	ld	s1,8(sp)
    80012aa6:	6105                	addi	sp,sp,32
    80012aa8:	8082                	ret
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    80012aaa:	6480                	ld	s0,8(s1)
    80012aac:	57ad                	li	a5,-21
    80012aae:	8385                	srli	a5,a5,0x1
    80012ab0:	943e                	add	s0,s0,a5
    80012ab2:	00143413          	seqz	s0,s0
    80012ab6:	ee8ff06f          	j	8001219e <external_interrupt_MEI+0x254>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012aba:	4405                	li	s0,1
    TEST_END();
    80012abc:	00014597          	auipc	a1,0x14
    80012ac0:	3c458593          	addi	a1,a1,964 # 80026e80 <__func__.0+0x2c0>
    80012ac4:	b7d1                	j	80012a88 <external_interrupt_MEI+0xb3e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012ac6:	57fd                	li	a5,-1
    80012ac8:	6498                	ld	a4,8(s1)
    80012aca:	17fe                	slli	a5,a5,0x3f
    80012acc:	07ad                	addi	a5,a5,11
    80012ace:	f0f71be3          	bne	a4,a5,800129e4 <external_interrupt_MEI+0xa9a>
    80012ad2:	00036417          	auipc	s0,0x36
    80012ad6:	54242403          	lw	s0,1346(s0) # 80049014 <excpt+0x4>
    80012ada:	1479                	addi	s0,s0,-2
    80012adc:	00143413          	seqz	s0,s0
    80012ae0:	b711                	j	800129e4 <external_interrupt_MEI+0xa9a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012ae2:	57fd                	li	a5,-1
    80012ae4:	6498                	ld	a4,8(s1)
    80012ae6:	17fe                	slli	a5,a5,0x3f
    80012ae8:	07ad                	addi	a5,a5,11
    80012aea:	b6f712e3          	bne	a4,a5,8001264e <external_interrupt_MEI+0x704>
    80012aee:	00036417          	auipc	s0,0x36
    80012af2:	52642403          	lw	s0,1318(s0) # 80049014 <excpt+0x4>
    80012af6:	1475                	addi	s0,s0,-3
    80012af8:	00143413          	seqz	s0,s0
    80012afc:	be89                	j	8001264e <external_interrupt_MEI+0x704>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012afe:	00036717          	auipc	a4,0x36
    80012b02:	51672703          	lw	a4,1302(a4) # 80049014 <excpt+0x4>
    80012b06:	4789                	li	a5,2
    80012b08:	eaf719e3          	bne	a4,a5,800129ba <external_interrupt_MEI+0xa70>
    80012b0c:	b5c9                	j	800129ce <external_interrupt_MEI+0xa84>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012b0e:	00036717          	auipc	a4,0x36
    80012b12:	50672703          	lw	a4,1286(a4) # 80049014 <excpt+0x4>
    80012b16:	478d                	li	a5,3
    80012b18:	b0f716e3          	bne	a4,a5,80012624 <external_interrupt_MEI+0x6da>
    80012b1c:	be31                	j	80012638 <external_interrupt_MEI+0x6ee>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012b1e:	00014517          	auipc	a0,0x14
    80012b22:	3ba50513          	addi	a0,a0,954 # 80026ed8 <__func__.0+0x318>
    80012b26:	3de120ef          	jal	80024f04 <printf>
    80012b2a:	02900513          	li	a0,41
    80012b2e:	1e0110ef          	jal	80023d0e <putchar>
    80012b32:	b655                	j	800126d6 <external_interrupt_MEI+0x78c>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012b34:	00014517          	auipc	a0,0x14
    80012b38:	3a450513          	addi	a0,a0,932 # 80026ed8 <__func__.0+0x318>
    80012b3c:	3c8120ef          	jal	80024f04 <printf>
    80012b40:	02900513          	li	a0,41
    80012b44:	1ca110ef          	jal	80023d0e <putchar>
    80012b48:	bbc9                	j	8001291a <external_interrupt_MEI+0x9d0>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    80012b4a:	00014517          	auipc	a0,0x14
    80012b4e:	38e50513          	addi	a0,a0,910 # 80026ed8 <__func__.0+0x318>
    80012b52:	3b2120ef          	jal	80024f04 <printf>
    80012b56:	02900513          	li	a0,41
    80012b5a:	1b4110ef          	jal	80023d0e <putchar>
    80012b5e:	d66ff06f          	j	800120c4 <external_interrupt_MEI+0x17a>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80012b62:	00014517          	auipc	a0,0x14
    80012b66:	37650513          	addi	a0,a0,886 # 80026ed8 <__func__.0+0x318>
    80012b6a:	39a120ef          	jal	80024f04 <printf>
    80012b6e:	02900513          	li	a0,41
    80012b72:	19c110ef          	jal	80023d0e <putchar>
    80012b76:	bddd                	j	80012a6c <external_interrupt_MEI+0xb22>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012b78:	00014517          	auipc	a0,0x14
    80012b7c:	36050513          	addi	a0,a0,864 # 80026ed8 <__func__.0+0x318>
    80012b80:	384120ef          	jal	80024f04 <printf>
    80012b84:	02900513          	li	a0,41
    80012b88:	186110ef          	jal	80023d0e <putchar>
    80012b8c:	bae5                	j	80012584 <external_interrupt_MEI+0x63a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    80012b8e:	00014517          	auipc	a0,0x14
    80012b92:	34a50513          	addi	a0,a0,842 # 80026ed8 <__func__.0+0x318>
    80012b96:	36e120ef          	jal	80024f04 <printf>
    80012b9a:	02900513          	li	a0,41
    80012b9e:	170110ef          	jal	80023d0e <putchar>
    80012ba2:	f9eff06f          	j	80012340 <external_interrupt_MEI+0x3f6>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80012ba6:	00014517          	auipc	a0,0x14
    80012baa:	33250513          	addi	a0,a0,818 # 80026ed8 <__func__.0+0x318>
    80012bae:	356120ef          	jal	80024f04 <printf>
    80012bb2:	02900513          	li	a0,41
    80012bb6:	158110ef          	jal	80023d0e <putchar>
    80012bba:	ef4ff06f          	j	800122ae <external_interrupt_MEI+0x364>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    80012bbe:	00014517          	auipc	a0,0x14
    80012bc2:	31a50513          	addi	a0,a0,794 # 80026ed8 <__func__.0+0x318>
    80012bc6:	33e120ef          	jal	80024f04 <printf>
    80012bca:	02900513          	li	a0,41
    80012bce:	140110ef          	jal	80023d0e <putchar>
    80012bd2:	e4aff06f          	j	8001221c <external_interrupt_MEI+0x2d2>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012bd6:	00036717          	auipc	a4,0x36
    80012bda:	43e72703          	lw	a4,1086(a4) # 80049014 <excpt+0x4>
    80012bde:	478d                	li	a5,3
    80012be0:	00014597          	auipc	a1,0x14
    80012be4:	2a058593          	addi	a1,a1,672 # 80026e80 <__func__.0+0x2c0>
    80012be8:	a0f70de3          	beq	a4,a5,80012602 <external_interrupt_MEI+0x6b8>
    80012bec:	00014597          	auipc	a1,0x14
    80012bf0:	2a458593          	addi	a1,a1,676 # 80026e90 <__func__.0+0x2d0>
    80012bf4:	b439                	j	80012602 <external_interrupt_MEI+0x6b8>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012bf6:	00036717          	auipc	a4,0x36
    80012bfa:	41e72703          	lw	a4,1054(a4) # 80049014 <excpt+0x4>
    80012bfe:	4789                	li	a5,2
    80012c00:	00014597          	auipc	a1,0x14
    80012c04:	28058593          	addi	a1,a1,640 # 80026e80 <__func__.0+0x2c0>
    80012c08:	d8f708e3          	beq	a4,a5,80012998 <external_interrupt_MEI+0xa4e>
    80012c0c:	00014597          	auipc	a1,0x14
    80012c10:	28458593          	addi	a1,a1,644 # 80026e90 <__func__.0+0x2d0>
    80012c14:	b351                	j	80012998 <external_interrupt_MEI+0xa4e>

0000000080012c16 <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    80012c16:	1101                	addi	sp,sp,-32

    TEST_START();
    80012c18:	00013597          	auipc	a1,0x13
    80012c1c:	06858593          	addi	a1,a1,104 # 80025c80 <__func__.1>
    80012c20:	00014517          	auipc	a0,0x14
    80012c24:	28050513          	addi	a0,a0,640 # 80026ea0 <__func__.0+0x2e0>
bool external_interrupt_SEI() {
    80012c28:	ec06                	sd	ra,24(sp)
    80012c2a:	e822                	sd	s0,16(sp)
    80012c2c:	e426                	sd	s1,8(sp)
    TEST_START();
    80012c2e:	2d6120ef          	jal	80024f04 <printf>
    80012c32:	4529                	li	a0,10
    80012c34:	0da110ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80012c38:	0330000f          	fence	rw,rw
    80012c3c:	00036497          	auipc	s1,0x36
    80012c40:	3d448493          	addi	s1,s1,980 # 80049010 <excpt>
    80012c44:	4785                	li	a5,1
    80012c46:	00036717          	auipc	a4,0x36
    80012c4a:	40073123          	sd	zero,1026(a4) # 80049048 <excpt+0x38>
    80012c4e:	00f49023          	sh	a5,0(s1)
    80012c52:	0330000f          	fence	rw,rw

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    80012c56:	450d                	li	a0,3
    80012c58:	f9fed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    80012c5c:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80012c60:	20000793          	li	a5,512
    80012c64:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012c68:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    80012c6c:	450d                	li	a0,3
    80012c6e:	f89ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012c72:	08200593          	li	a1,130
    80012c76:	00018617          	auipc	a2,0x18
    80012c7a:	f3260613          	addi	a2,a2,-206 # 8002aba8 <__func__.0+0x3fe8>
    80012c7e:	00014517          	auipc	a0,0x14
    80012c82:	23a50513          	addi	a0,a0,570 # 80026eb8 <__func__.0+0x2f8>
    80012c86:	27e120ef          	jal	80024f04 <printf>
    80012c8a:	00036797          	auipc	a5,0x36
    80012c8e:	3877c783          	lbu	a5,903(a5) # 80049011 <excpt+0x1>
    80012c92:	00014597          	auipc	a1,0x14
    80012c96:	1fe58593          	addi	a1,a1,510 # 80026e90 <__func__.0+0x2d0>
    80012c9a:	c799                	beqz	a5,80012ca8 <external_interrupt_SEI+0x92>
    80012c9c:	57fd                	li	a5,-1
    80012c9e:	6498                	ld	a4,8(s1)
    80012ca0:	17fe                	slli	a5,a5,0x3f
    80012ca2:	07a5                	addi	a5,a5,9
    80012ca4:	7ef70963          	beq	a4,a5,80013496 <external_interrupt_SEI+0x880>
    80012ca8:	00014517          	auipc	a0,0x14
    80012cac:	22850513          	addi	a0,a0,552 # 80026ed0 <__func__.0+0x310>
    80012cb0:	254120ef          	jal	80024f04 <printf>
    80012cb4:	00036797          	auipc	a5,0x36
    80012cb8:	35d7c783          	lbu	a5,861(a5) # 80049011 <excpt+0x1>
    80012cbc:	c799                	beqz	a5,80012cca <external_interrupt_SEI+0xb4>
    80012cbe:	57fd                	li	a5,-1
    80012cc0:	6498                	ld	a4,8(s1)
    80012cc2:	17fe                	slli	a5,a5,0x3f
    80012cc4:	07a5                	addi	a5,a5,9
    80012cc6:	6af70063          	beq	a4,a5,80013366 <external_interrupt_SEI+0x750>
    80012cca:	00014517          	auipc	a0,0x14
    80012cce:	20e50513          	addi	a0,a0,526 # 80026ed8 <__func__.0+0x318>
    80012cd2:	232120ef          	jal	80024f04 <printf>
    80012cd6:	02900513          	li	a0,41
    80012cda:	034110ef          	jal	80023d0e <putchar>
    80012cde:	4529                	li	a0,10
    80012ce0:	02e110ef          	jal	80023d0e <putchar>
    80012ce4:	00036797          	auipc	a5,0x36
    80012ce8:	32d7c783          	lbu	a5,813(a5) # 80049011 <excpt+0x1>
    80012cec:	4401                	li	s0,0
    80012cee:	c799                	beqz	a5,80012cfc <external_interrupt_SEI+0xe6>
    80012cf0:	57fd                	li	a5,-1
    80012cf2:	6498                	ld	a4,8(s1)
    80012cf4:	17fe                	slli	a5,a5,0x3f
    80012cf6:	07a5                	addi	a5,a5,9
    80012cf8:	74f70663          	beq	a4,a5,80013444 <external_interrupt_SEI+0x82e>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    80012cfc:	0330000f          	fence	rw,rw
    80012d00:	4785                	li	a5,1
    80012d02:	00036717          	auipc	a4,0x36
    80012d06:	34073323          	sd	zero,838(a4) # 80049048 <excpt+0x38>
    80012d0a:	00f49023          	sh	a5,0(s1)
    80012d0e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_HS);
    80012d12:	450d                	li	a0,3
    80012d14:	ee3ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012d18:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012d1c:	20000793          	li	a5,512
    80012d20:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012d24:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    80012d28:	450d                	li	a0,3
    80012d2a:	ecded0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012d2e:	08200593          	li	a1,130
    80012d32:	00018617          	auipc	a2,0x18
    80012d36:	ed660613          	addi	a2,a2,-298 # 8002ac08 <__func__.0+0x4048>
    80012d3a:	00014517          	auipc	a0,0x14
    80012d3e:	17e50513          	addi	a0,a0,382 # 80026eb8 <__func__.0+0x2f8>
    80012d42:	1c2120ef          	jal	80024f04 <printf>
    80012d46:	00036797          	auipc	a5,0x36
    80012d4a:	2cb7c783          	lbu	a5,715(a5) # 80049011 <excpt+0x1>
    80012d4e:	00014597          	auipc	a1,0x14
    80012d52:	14258593          	addi	a1,a1,322 # 80026e90 <__func__.0+0x2d0>
    80012d56:	e789                	bnez	a5,80012d60 <external_interrupt_SEI+0x14a>
    80012d58:	00014597          	auipc	a1,0x14
    80012d5c:	12858593          	addi	a1,a1,296 # 80026e80 <__func__.0+0x2c0>
    80012d60:	00014517          	auipc	a0,0x14
    80012d64:	17050513          	addi	a0,a0,368 # 80026ed0 <__func__.0+0x310>
    80012d68:	19c120ef          	jal	80024f04 <printf>
    80012d6c:	00036797          	auipc	a5,0x36
    80012d70:	2a57c783          	lbu	a5,677(a5) # 80049011 <excpt+0x1>
    80012d74:	64079763          	bnez	a5,800133c2 <external_interrupt_SEI+0x7ac>
    80012d78:	4529                	li	a0,10
    80012d7a:	795100ef          	jal	80023d0e <putchar>
    80012d7e:	c419                	beqz	s0,80012d8c <external_interrupt_SEI+0x176>
    80012d80:	00036417          	auipc	s0,0x36
    80012d84:	29144403          	lbu	s0,657(s0) # 80049011 <excpt+0x1>
    80012d88:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    80012d8c:	0330000f          	fence	rw,rw
    80012d90:	4785                	li	a5,1
    80012d92:	00036717          	auipc	a4,0x36
    80012d96:	2a073b23          	sd	zero,694(a4) # 80049048 <excpt+0x38>
    80012d9a:	00f49023          	sh	a5,0(s1)
    80012d9e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012da2:	4511                	li	a0,4
    80012da4:	e53ed0ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_MIDELEG,0);
    80012da8:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012dac:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80012db0:	20000793          	li	a5,512
    80012db4:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012db8:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012dbc:	450d                	li	a0,3
    80012dbe:	e39ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012dc2:	08200593          	li	a1,130
    80012dc6:	00018617          	auipc	a2,0x18
    80012dca:	e9260613          	addi	a2,a2,-366 # 8002ac58 <__func__.0+0x4098>
    80012dce:	00014517          	auipc	a0,0x14
    80012dd2:	0ea50513          	addi	a0,a0,234 # 80026eb8 <__func__.0+0x2f8>
    80012dd6:	12e120ef          	jal	80024f04 <printf>
    80012dda:	00036797          	auipc	a5,0x36
    80012dde:	2377c783          	lbu	a5,567(a5) # 80049011 <excpt+0x1>
    80012de2:	00014597          	auipc	a1,0x14
    80012de6:	0ae58593          	addi	a1,a1,174 # 80026e90 <__func__.0+0x2d0>
    80012dea:	c799                	beqz	a5,80012df8 <external_interrupt_SEI+0x1e2>
    80012dec:	57fd                	li	a5,-1
    80012dee:	6498                	ld	a4,8(s1)
    80012df0:	17fe                	slli	a5,a5,0x3f
    80012df2:	07a5                	addi	a5,a5,9
    80012df4:	66f70163          	beq	a4,a5,80013456 <external_interrupt_SEI+0x840>
    80012df8:	00014517          	auipc	a0,0x14
    80012dfc:	0d850513          	addi	a0,a0,216 # 80026ed0 <__func__.0+0x310>
    80012e00:	104120ef          	jal	80024f04 <printf>
    80012e04:	00036797          	auipc	a5,0x36
    80012e08:	20d7c783          	lbu	a5,525(a5) # 80049011 <excpt+0x1>
    80012e0c:	c799                	beqz	a5,80012e1a <external_interrupt_SEI+0x204>
    80012e0e:	57fd                	li	a5,-1
    80012e10:	6498                	ld	a4,8(s1)
    80012e12:	17fe                	slli	a5,a5,0x3f
    80012e14:	07a5                	addi	a5,a5,9
    80012e16:	54f70063          	beq	a4,a5,80013356 <external_interrupt_SEI+0x740>
    80012e1a:	00014517          	auipc	a0,0x14
    80012e1e:	0be50513          	addi	a0,a0,190 # 80026ed8 <__func__.0+0x318>
    80012e22:	0e2120ef          	jal	80024f04 <printf>
    80012e26:	02900513          	li	a0,41
    80012e2a:	6e5100ef          	jal	80023d0e <putchar>
    80012e2e:	4529                	li	a0,10
    80012e30:	6df100ef          	jal	80023d0e <putchar>
    80012e34:	c801                	beqz	s0,80012e44 <external_interrupt_SEI+0x22e>
    80012e36:	00036797          	auipc	a5,0x36
    80012e3a:	1db7c783          	lbu	a5,475(a5) # 80049011 <excpt+0x1>
    80012e3e:	4401                	li	s0,0
    80012e40:	4e079563          	bnez	a5,8001332a <external_interrupt_SEI+0x714>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    80012e44:	0330000f          	fence	rw,rw
    80012e48:	4785                	li	a5,1
    80012e4a:	00036717          	auipc	a4,0x36
    80012e4e:	1e073f23          	sd	zero,510(a4) # 80049048 <excpt+0x38>
    80012e52:	00f49023          	sh	a5,0(s1)
    80012e56:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012e5a:	4511                	li	a0,4
    80012e5c:	d9bed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    80012e60:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012e64:	20000793          	li	a5,512
    80012e68:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012e6c:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012e70:	450d                	li	a0,3
    80012e72:	d85ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    80012e76:	08200593          	li	a1,130
    80012e7a:	00018617          	auipc	a2,0x18
    80012e7e:	e3e60613          	addi	a2,a2,-450 # 8002acb8 <__func__.0+0x40f8>
    80012e82:	00014517          	auipc	a0,0x14
    80012e86:	03650513          	addi	a0,a0,54 # 80026eb8 <__func__.0+0x2f8>
    80012e8a:	07a120ef          	jal	80024f04 <printf>
    80012e8e:	00036797          	auipc	a5,0x36
    80012e92:	1837c783          	lbu	a5,387(a5) # 80049011 <excpt+0x1>
    80012e96:	00014597          	auipc	a1,0x14
    80012e9a:	ffa58593          	addi	a1,a1,-6 # 80026e90 <__func__.0+0x2d0>
    80012e9e:	e789                	bnez	a5,80012ea8 <external_interrupt_SEI+0x292>
    80012ea0:	00014597          	auipc	a1,0x14
    80012ea4:	fe058593          	addi	a1,a1,-32 # 80026e80 <__func__.0+0x2c0>
    80012ea8:	00014517          	auipc	a0,0x14
    80012eac:	02850513          	addi	a0,a0,40 # 80026ed0 <__func__.0+0x310>
    80012eb0:	054120ef          	jal	80024f04 <printf>
    80012eb4:	00036797          	auipc	a5,0x36
    80012eb8:	15d7c783          	lbu	a5,349(a5) # 80049011 <excpt+0x1>
    80012ebc:	4e079863          	bnez	a5,800133ac <external_interrupt_SEI+0x796>
    80012ec0:	4529                	li	a0,10
    80012ec2:	64d100ef          	jal	80023d0e <putchar>
    80012ec6:	c419                	beqz	s0,80012ed4 <external_interrupt_SEI+0x2be>
    80012ec8:	00036417          	auipc	s0,0x36
    80012ecc:	14944403          	lbu	s0,329(s0) # 80049011 <excpt+0x1>
    80012ed0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    80012ed4:	0330000f          	fence	rw,rw
    80012ed8:	4785                	li	a5,1
    80012eda:	00036717          	auipc	a4,0x36
    80012ede:	16073723          	sd	zero,366(a4) # 80049048 <excpt+0x38>
    80012ee2:	00f49023          	sh	a5,0(s1)
    80012ee6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012eea:	4511                	li	a0,4
    80012eec:	d0bed0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    80012ef0:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012ef4:	20000793          	li	a5,512
    80012ef8:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80012efc:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012f00:	450d                	li	a0,3
    80012f02:	cf5ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    80012f06:	08200593          	li	a1,130
    80012f0a:	00018617          	auipc	a2,0x18
    80012f0e:	dfe60613          	addi	a2,a2,-514 # 8002ad08 <__func__.0+0x4148>
    80012f12:	00014517          	auipc	a0,0x14
    80012f16:	fa650513          	addi	a0,a0,-90 # 80026eb8 <__func__.0+0x2f8>
    80012f1a:	7eb110ef          	jal	80024f04 <printf>
    80012f1e:	00036797          	auipc	a5,0x36
    80012f22:	0f37c783          	lbu	a5,243(a5) # 80049011 <excpt+0x1>
    80012f26:	00014597          	auipc	a1,0x14
    80012f2a:	f6a58593          	addi	a1,a1,-150 # 80026e90 <__func__.0+0x2d0>
    80012f2e:	e789                	bnez	a5,80012f38 <external_interrupt_SEI+0x322>
    80012f30:	00014597          	auipc	a1,0x14
    80012f34:	f5058593          	addi	a1,a1,-176 # 80026e80 <__func__.0+0x2c0>
    80012f38:	00014517          	auipc	a0,0x14
    80012f3c:	f9850513          	addi	a0,a0,-104 # 80026ed0 <__func__.0+0x310>
    80012f40:	7c5110ef          	jal	80024f04 <printf>
    80012f44:	00036797          	auipc	a5,0x36
    80012f48:	0cd7c783          	lbu	a5,205(a5) # 80049011 <excpt+0x1>
    80012f4c:	44079563          	bnez	a5,80013396 <external_interrupt_SEI+0x780>
    80012f50:	4529                	li	a0,10
    80012f52:	5bd100ef          	jal	80023d0e <putchar>
    80012f56:	c419                	beqz	s0,80012f64 <external_interrupt_SEI+0x34e>
    80012f58:	00036417          	auipc	s0,0x36
    80012f5c:	0b944403          	lbu	s0,185(s0) # 80049011 <excpt+0x1>
    80012f60:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    80012f64:	0330000f          	fence	rw,rw
    80012f68:	4785                	li	a5,1
    80012f6a:	00036717          	auipc	a4,0x36
    80012f6e:	0c073f23          	sd	zero,222(a4) # 80049048 <excpt+0x38>
    80012f72:	00f49023          	sh	a5,0(s1)
    80012f76:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80012f7a:	4511                	li	a0,4
    80012f7c:	c7bed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012f80:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80012f84:	20000793          	li	a5,512
    80012f88:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80012f8c:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80012f90:	4509                	li	a0,2
    80012f92:	c65ed0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80012f96:	08200593          	li	a1,130
    80012f9a:	00018617          	auipc	a2,0x18
    80012f9e:	dbe60613          	addi	a2,a2,-578 # 8002ad58 <__func__.0+0x4198>
    80012fa2:	00014517          	auipc	a0,0x14
    80012fa6:	f1650513          	addi	a0,a0,-234 # 80026eb8 <__func__.0+0x2f8>
    80012faa:	75b110ef          	jal	80024f04 <printf>
    80012fae:	00036797          	auipc	a5,0x36
    80012fb2:	0637c783          	lbu	a5,99(a5) # 80049011 <excpt+0x1>
    80012fb6:	00014597          	auipc	a1,0x14
    80012fba:	eda58593          	addi	a1,a1,-294 # 80026e90 <__func__.0+0x2d0>
    80012fbe:	c799                	beqz	a5,80012fcc <external_interrupt_SEI+0x3b6>
    80012fc0:	57fd                	li	a5,-1
    80012fc2:	6498                	ld	a4,8(s1)
    80012fc4:	17fe                	slli	a5,a5,0x3f
    80012fc6:	07a5                	addi	a5,a5,9
    80012fc8:	44f70e63          	beq	a4,a5,80013424 <external_interrupt_SEI+0x80e>
    80012fcc:	00014517          	auipc	a0,0x14
    80012fd0:	f0450513          	addi	a0,a0,-252 # 80026ed0 <__func__.0+0x310>
    80012fd4:	731110ef          	jal	80024f04 <printf>
    80012fd8:	00036797          	auipc	a5,0x36
    80012fdc:	0397c783          	lbu	a5,57(a5) # 80049011 <excpt+0x1>
    80012fe0:	c799                	beqz	a5,80012fee <external_interrupt_SEI+0x3d8>
    80012fe2:	57fd                	li	a5,-1
    80012fe4:	6498                	ld	a4,8(s1)
    80012fe6:	17fe                	slli	a5,a5,0x3f
    80012fe8:	07a5                	addi	a5,a5,9
    80012fea:	34f70e63          	beq	a4,a5,80013346 <external_interrupt_SEI+0x730>
    80012fee:	00014517          	auipc	a0,0x14
    80012ff2:	eea50513          	addi	a0,a0,-278 # 80026ed8 <__func__.0+0x318>
    80012ff6:	70f110ef          	jal	80024f04 <printf>
    80012ffa:	02900513          	li	a0,41
    80012ffe:	511100ef          	jal	80023d0e <putchar>
    80013002:	4529                	li	a0,10
    80013004:	50b100ef          	jal	80023d0e <putchar>
    80013008:	c801                	beqz	s0,80013018 <external_interrupt_SEI+0x402>
    8001300a:	00036797          	auipc	a5,0x36
    8001300e:	0077c783          	lbu	a5,7(a5) # 80049011 <excpt+0x1>
    80013012:	4401                	li	s0,0
    80013014:	2e079d63          	bnez	a5,8001330e <external_interrupt_SEI+0x6f8>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    80013018:	0330000f          	fence	rw,rw
    8001301c:	4785                	li	a5,1
    8001301e:	00036717          	auipc	a4,0x36
    80013022:	02073523          	sd	zero,42(a4) # 80049048 <excpt+0x38>
    80013026:	00f49023          	sh	a5,0(s1)
    8001302a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001302e:	4511                	li	a0,4
    80013030:	bc7ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80013034:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80013038:	20000793          	li	a5,512
    8001303c:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    80013040:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80013044:	4509                	li	a0,2
    80013046:	bb1ed0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001304a:	08200593          	li	a1,130
    8001304e:	00018617          	auipc	a2,0x18
    80013052:	d6260613          	addi	a2,a2,-670 # 8002adb0 <__func__.0+0x41f0>
    80013056:	00014517          	auipc	a0,0x14
    8001305a:	e6250513          	addi	a0,a0,-414 # 80026eb8 <__func__.0+0x2f8>
    8001305e:	6a7110ef          	jal	80024f04 <printf>
    80013062:	00036797          	auipc	a5,0x36
    80013066:	faf7c783          	lbu	a5,-81(a5) # 80049011 <excpt+0x1>
    8001306a:	00014597          	auipc	a1,0x14
    8001306e:	e2658593          	addi	a1,a1,-474 # 80026e90 <__func__.0+0x2d0>
    80013072:	c799                	beqz	a5,80013080 <external_interrupt_SEI+0x46a>
    80013074:	57fd                	li	a5,-1
    80013076:	6498                	ld	a4,8(s1)
    80013078:	17fe                	slli	a5,a5,0x3f
    8001307a:	07a5                	addi	a5,a5,9
    8001307c:	38f70463          	beq	a4,a5,80013404 <external_interrupt_SEI+0x7ee>
    80013080:	00014517          	auipc	a0,0x14
    80013084:	e5050513          	addi	a0,a0,-432 # 80026ed0 <__func__.0+0x310>
    80013088:	67d110ef          	jal	80024f04 <printf>
    8001308c:	00036797          	auipc	a5,0x36
    80013090:	f857c783          	lbu	a5,-123(a5) # 80049011 <excpt+0x1>
    80013094:	c799                	beqz	a5,800130a2 <external_interrupt_SEI+0x48c>
    80013096:	57fd                	li	a5,-1
    80013098:	6498                	ld	a4,8(s1)
    8001309a:	17fe                	slli	a5,a5,0x3f
    8001309c:	07a5                	addi	a5,a5,9
    8001309e:	2ef70463          	beq	a4,a5,80013386 <external_interrupt_SEI+0x770>
    800130a2:	00014517          	auipc	a0,0x14
    800130a6:	e3650513          	addi	a0,a0,-458 # 80026ed8 <__func__.0+0x318>
    800130aa:	65b110ef          	jal	80024f04 <printf>
    800130ae:	02900513          	li	a0,41
    800130b2:	45d100ef          	jal	80023d0e <putchar>
    800130b6:	4529                	li	a0,10
    800130b8:	457100ef          	jal	80023d0e <putchar>
    800130bc:	c801                	beqz	s0,800130cc <external_interrupt_SEI+0x4b6>
    800130be:	00036797          	auipc	a5,0x36
    800130c2:	f537c783          	lbu	a5,-173(a5) # 80049011 <excpt+0x1>
    800130c6:	4401                	li	s0,0
    800130c8:	22079563          	bnez	a5,800132f2 <external_interrupt_SEI+0x6dc>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    800130cc:	0330000f          	fence	rw,rw
    800130d0:	4785                	li	a5,1
    800130d2:	00036717          	auipc	a4,0x36
    800130d6:	f6073b23          	sd	zero,-138(a4) # 80049048 <excpt+0x38>
    800130da:	00f49023          	sh	a5,0(s1)
    800130de:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800130e2:	4511                	li	a0,4
    800130e4:	b13ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800130e8:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800130ec:	20000793          	li	a5,512
    800130f0:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800130f4:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800130f8:	4509                	li	a0,2
    800130fa:	afded0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800130fe:	08200593          	li	a1,130
    80013102:	00018617          	auipc	a2,0x18
    80013106:	d0660613          	addi	a2,a2,-762 # 8002ae08 <__func__.0+0x4248>
    8001310a:	00014517          	auipc	a0,0x14
    8001310e:	dae50513          	addi	a0,a0,-594 # 80026eb8 <__func__.0+0x2f8>
    80013112:	5f3110ef          	jal	80024f04 <printf>
    80013116:	00036797          	auipc	a5,0x36
    8001311a:	efb7c783          	lbu	a5,-261(a5) # 80049011 <excpt+0x1>
    8001311e:	00014597          	auipc	a1,0x14
    80013122:	d7258593          	addi	a1,a1,-654 # 80026e90 <__func__.0+0x2d0>
    80013126:	c799                	beqz	a5,80013134 <external_interrupt_SEI+0x51e>
    80013128:	57fd                	li	a5,-1
    8001312a:	6498                	ld	a4,8(s1)
    8001312c:	17fe                	slli	a5,a5,0x3f
    8001312e:	07a5                	addi	a5,a5,9
    80013130:	34f70363          	beq	a4,a5,80013476 <external_interrupt_SEI+0x860>
    80013134:	00014517          	auipc	a0,0x14
    80013138:	d9c50513          	addi	a0,a0,-612 # 80026ed0 <__func__.0+0x310>
    8001313c:	5c9110ef          	jal	80024f04 <printf>
    80013140:	00036797          	auipc	a5,0x36
    80013144:	ed17c783          	lbu	a5,-303(a5) # 80049011 <excpt+0x1>
    80013148:	c799                	beqz	a5,80013156 <external_interrupt_SEI+0x540>
    8001314a:	57fd                	li	a5,-1
    8001314c:	6498                	ld	a4,8(s1)
    8001314e:	17fe                	slli	a5,a5,0x3f
    80013150:	07a5                	addi	a5,a5,9
    80013152:	22f70263          	beq	a4,a5,80013376 <external_interrupt_SEI+0x760>
    80013156:	00014517          	auipc	a0,0x14
    8001315a:	d8250513          	addi	a0,a0,-638 # 80026ed8 <__func__.0+0x318>
    8001315e:	5a7110ef          	jal	80024f04 <printf>
    80013162:	02900513          	li	a0,41
    80013166:	3a9100ef          	jal	80023d0e <putchar>
    8001316a:	4529                	li	a0,10
    8001316c:	3a3100ef          	jal	80023d0e <putchar>
    80013170:	c801                	beqz	s0,80013180 <external_interrupt_SEI+0x56a>
    80013172:	00036797          	auipc	a5,0x36
    80013176:	e9f7c783          	lbu	a5,-353(a5) # 80049011 <excpt+0x1>
    8001317a:	4401                	li	s0,0
    8001317c:	14079d63          	bnez	a5,800132d6 <external_interrupt_SEI+0x6c0>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    80013180:	0330000f          	fence	rw,rw
    80013184:	4785                	li	a5,1
    80013186:	00036717          	auipc	a4,0x36
    8001318a:	ec073123          	sd	zero,-318(a4) # 80049048 <excpt+0x38>
    8001318e:	00f49023          	sh	a5,0(s1)
    80013192:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013196:	4511                	li	a0,4
    80013198:	a5fed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8001319c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800131a0:	20000793          	li	a5,512
    800131a4:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800131a8:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800131ac:	4509                	li	a0,2
    800131ae:	a49ed0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800131b2:	08200593          	li	a1,130
    800131b6:	00018617          	auipc	a2,0x18
    800131ba:	caa60613          	addi	a2,a2,-854 # 8002ae60 <__func__.0+0x42a0>
    800131be:	00014517          	auipc	a0,0x14
    800131c2:	cfa50513          	addi	a0,a0,-774 # 80026eb8 <__func__.0+0x2f8>
    800131c6:	53f110ef          	jal	80024f04 <printf>
    800131ca:	00036797          	auipc	a5,0x36
    800131ce:	e477c783          	lbu	a5,-441(a5) # 80049011 <excpt+0x1>
    800131d2:	00014597          	auipc	a1,0x14
    800131d6:	cbe58593          	addi	a1,a1,-834 # 80026e90 <__func__.0+0x2d0>
    800131da:	e789                	bnez	a5,800131e4 <external_interrupt_SEI+0x5ce>
    800131dc:	00014597          	auipc	a1,0x14
    800131e0:	ca458593          	addi	a1,a1,-860 # 80026e80 <__func__.0+0x2c0>
    800131e4:	00014517          	auipc	a0,0x14
    800131e8:	cec50513          	addi	a0,a0,-788 # 80026ed0 <__func__.0+0x310>
    800131ec:	519110ef          	jal	80024f04 <printf>
    800131f0:	00036797          	auipc	a5,0x36
    800131f4:	e217c783          	lbu	a5,-479(a5) # 80049011 <excpt+0x1>
    800131f8:	1e079b63          	bnez	a5,800133ee <external_interrupt_SEI+0x7d8>
    800131fc:	4529                	li	a0,10
    800131fe:	311100ef          	jal	80023d0e <putchar>
    80013202:	c419                	beqz	s0,80013210 <external_interrupt_SEI+0x5fa>
    80013204:	00036417          	auipc	s0,0x36
    80013208:	e0d44403          	lbu	s0,-499(s0) # 80049011 <excpt+0x1>
    8001320c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    80013210:	0330000f          	fence	rw,rw
    80013214:	4785                	li	a5,1
    80013216:	00036717          	auipc	a4,0x36
    8001321a:	e2073923          	sd	zero,-462(a4) # 80049048 <excpt+0x38>
    8001321e:	00f49023          	sh	a5,0(s1)
    80013222:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013226:	4511                	li	a0,4
    80013228:	9cfed0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    8001322c:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80013230:	20000793          	li	a5,512
    80013234:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    80013238:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    8001323c:	4509                	li	a0,2
    8001323e:	9b9ed0ef          	jal	80000bf6 <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80013242:	08200593          	li	a1,130
    80013246:	00018617          	auipc	a2,0x18
    8001324a:	c1a60613          	addi	a2,a2,-998 # 8002ae60 <__func__.0+0x42a0>
    8001324e:	00014517          	auipc	a0,0x14
    80013252:	c6a50513          	addi	a0,a0,-918 # 80026eb8 <__func__.0+0x2f8>
    80013256:	4af110ef          	jal	80024f04 <printf>
    8001325a:	00036797          	auipc	a5,0x36
    8001325e:	db77c783          	lbu	a5,-585(a5) # 80049011 <excpt+0x1>
    80013262:	00014597          	auipc	a1,0x14
    80013266:	c2e58593          	addi	a1,a1,-978 # 80026e90 <__func__.0+0x2d0>
    8001326a:	e789                	bnez	a5,80013274 <external_interrupt_SEI+0x65e>
    8001326c:	00014597          	auipc	a1,0x14
    80013270:	c1458593          	addi	a1,a1,-1004 # 80026e80 <__func__.0+0x2c0>
    80013274:	00014517          	auipc	a0,0x14
    80013278:	c5c50513          	addi	a0,a0,-932 # 80026ed0 <__func__.0+0x310>
    8001327c:	489110ef          	jal	80024f04 <printf>
    80013280:	00036797          	auipc	a5,0x36
    80013284:	d917c783          	lbu	a5,-623(a5) # 80049011 <excpt+0x1>
    80013288:	14079863          	bnez	a5,800133d8 <external_interrupt_SEI+0x7c2>
    8001328c:	4529                	li	a0,10
    8001328e:	281100ef          	jal	80023d0e <putchar>
    80013292:	c411                	beqz	s0,8001329e <external_interrupt_SEI+0x688>
    80013294:	00036797          	auipc	a5,0x36
    80013298:	d7d7c783          	lbu	a5,-643(a5) # 80049011 <excpt+0x1>
    8001329c:	c79d                	beqz	a5,800132ca <external_interrupt_SEI+0x6b4>
    8001329e:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    800132a0:	00014597          	auipc	a1,0x14
    800132a4:	bf058593          	addi	a1,a1,-1040 # 80026e90 <__func__.0+0x2d0>
    800132a8:	00014517          	auipc	a0,0x14
    800132ac:	c9050513          	addi	a0,a0,-880 # 80026f38 <__func__.0+0x378>
    800132b0:	455110ef          	jal	80024f04 <printf>
    800132b4:	4511                	li	a0,4
    800132b6:	941ed0ef          	jal	80000bf6 <goto_priv>
    800132ba:	9f2ee0ef          	jal	800014ac <reset_state>
}
    800132be:	60e2                	ld	ra,24(sp)
    800132c0:	8522                	mv	a0,s0
    800132c2:	6442                	ld	s0,16(sp)
    800132c4:	64a2                	ld	s1,8(sp)
    800132c6:	6105                	addi	sp,sp,32
    800132c8:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800132ca:	4405                	li	s0,1
    TEST_END();
    800132cc:	00014597          	auipc	a1,0x14
    800132d0:	bb458593          	addi	a1,a1,-1100 # 80026e80 <__func__.0+0x2c0>
    800132d4:	bfd1                	j	800132a8 <external_interrupt_SEI+0x692>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800132d6:	57fd                	li	a5,-1
    800132d8:	6498                	ld	a4,8(s1)
    800132da:	17fe                	slli	a5,a5,0x3f
    800132dc:	07a5                	addi	a5,a5,9
    800132de:	eaf711e3          	bne	a4,a5,80013180 <external_interrupt_SEI+0x56a>
    800132e2:	00036417          	auipc	s0,0x36
    800132e6:	d3242403          	lw	s0,-718(s0) # 80049014 <excpt+0x4>
    800132ea:	1471                	addi	s0,s0,-4
    800132ec:	00143413          	seqz	s0,s0
    800132f0:	bd41                	j	80013180 <external_interrupt_SEI+0x56a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800132f2:	57fd                	li	a5,-1
    800132f4:	6498                	ld	a4,8(s1)
    800132f6:	17fe                	slli	a5,a5,0x3f
    800132f8:	07a5                	addi	a5,a5,9
    800132fa:	dcf719e3          	bne	a4,a5,800130cc <external_interrupt_SEI+0x4b6>
    800132fe:	00036417          	auipc	s0,0x36
    80013302:	d1642403          	lw	s0,-746(s0) # 80049014 <excpt+0x4>
    80013306:	1471                	addi	s0,s0,-4
    80013308:	00143413          	seqz	s0,s0
    8001330c:	b3c1                	j	800130cc <external_interrupt_SEI+0x4b6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001330e:	57fd                	li	a5,-1
    80013310:	6498                	ld	a4,8(s1)
    80013312:	17fe                	slli	a5,a5,0x3f
    80013314:	07a5                	addi	a5,a5,9
    80013316:	d0f711e3          	bne	a4,a5,80013018 <external_interrupt_SEI+0x402>
    8001331a:	00036417          	auipc	s0,0x36
    8001331e:	cfa42403          	lw	s0,-774(s0) # 80049014 <excpt+0x4>
    80013322:	1471                	addi	s0,s0,-4
    80013324:	00143413          	seqz	s0,s0
    80013328:	b9c5                	j	80013018 <external_interrupt_SEI+0x402>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001332a:	57fd                	li	a5,-1
    8001332c:	6498                	ld	a4,8(s1)
    8001332e:	17fe                	slli	a5,a5,0x3f
    80013330:	07a5                	addi	a5,a5,9
    80013332:	b0f719e3          	bne	a4,a5,80012e44 <external_interrupt_SEI+0x22e>
    80013336:	00036417          	auipc	s0,0x36
    8001333a:	cde42403          	lw	s0,-802(s0) # 80049014 <excpt+0x4>
    8001333e:	1471                	addi	s0,s0,-4
    80013340:	00143413          	seqz	s0,s0
    80013344:	b601                	j	80012e44 <external_interrupt_SEI+0x22e>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80013346:	00036717          	auipc	a4,0x36
    8001334a:	cce72703          	lw	a4,-818(a4) # 80049014 <excpt+0x4>
    8001334e:	4791                	li	a5,4
    80013350:	c8f71fe3          	bne	a4,a5,80012fee <external_interrupt_SEI+0x3d8>
    80013354:	b17d                	j	80013002 <external_interrupt_SEI+0x3ec>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80013356:	00036717          	auipc	a4,0x36
    8001335a:	cbe72703          	lw	a4,-834(a4) # 80049014 <excpt+0x4>
    8001335e:	4791                	li	a5,4
    80013360:	aaf71de3          	bne	a4,a5,80012e1a <external_interrupt_SEI+0x204>
    80013364:	b4e9                	j	80012e2e <external_interrupt_SEI+0x218>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80013366:	00036717          	auipc	a4,0x36
    8001336a:	cae72703          	lw	a4,-850(a4) # 80049014 <excpt+0x4>
    8001336e:	4791                	li	a5,4
    80013370:	94f71de3          	bne	a4,a5,80012cca <external_interrupt_SEI+0xb4>
    80013374:	b2ad                	j	80012cde <external_interrupt_SEI+0xc8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80013376:	00036717          	auipc	a4,0x36
    8001337a:	c9e72703          	lw	a4,-866(a4) # 80049014 <excpt+0x4>
    8001337e:	4791                	li	a5,4
    80013380:	dcf71be3          	bne	a4,a5,80013156 <external_interrupt_SEI+0x540>
    80013384:	b3dd                	j	8001316a <external_interrupt_SEI+0x554>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80013386:	00036717          	auipc	a4,0x36
    8001338a:	c8e72703          	lw	a4,-882(a4) # 80049014 <excpt+0x4>
    8001338e:	4791                	li	a5,4
    80013390:	d0f719e3          	bne	a4,a5,800130a2 <external_interrupt_SEI+0x48c>
    80013394:	b30d                	j	800130b6 <external_interrupt_SEI+0x4a0>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    80013396:	00014517          	auipc	a0,0x14
    8001339a:	b4250513          	addi	a0,a0,-1214 # 80026ed8 <__func__.0+0x318>
    8001339e:	367110ef          	jal	80024f04 <printf>
    800133a2:	02900513          	li	a0,41
    800133a6:	169100ef          	jal	80023d0e <putchar>
    800133aa:	b65d                	j	80012f50 <external_interrupt_SEI+0x33a>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    800133ac:	00014517          	auipc	a0,0x14
    800133b0:	b2c50513          	addi	a0,a0,-1236 # 80026ed8 <__func__.0+0x318>
    800133b4:	351110ef          	jal	80024f04 <printf>
    800133b8:	02900513          	li	a0,41
    800133bc:	153100ef          	jal	80023d0e <putchar>
    800133c0:	b601                	j	80012ec0 <external_interrupt_SEI+0x2aa>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800133c2:	00014517          	auipc	a0,0x14
    800133c6:	b1650513          	addi	a0,a0,-1258 # 80026ed8 <__func__.0+0x318>
    800133ca:	33b110ef          	jal	80024f04 <printf>
    800133ce:	02900513          	li	a0,41
    800133d2:	13d100ef          	jal	80023d0e <putchar>
    800133d6:	b24d                	j	80012d78 <external_interrupt_SEI+0x162>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800133d8:	00014517          	auipc	a0,0x14
    800133dc:	b0050513          	addi	a0,a0,-1280 # 80026ed8 <__func__.0+0x318>
    800133e0:	325110ef          	jal	80024f04 <printf>
    800133e4:	02900513          	li	a0,41
    800133e8:	127100ef          	jal	80023d0e <putchar>
    800133ec:	b545                	j	8001328c <external_interrupt_SEI+0x676>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800133ee:	00014517          	auipc	a0,0x14
    800133f2:	aea50513          	addi	a0,a0,-1302 # 80026ed8 <__func__.0+0x318>
    800133f6:	30f110ef          	jal	80024f04 <printf>
    800133fa:	02900513          	li	a0,41
    800133fe:	111100ef          	jal	80023d0e <putchar>
    80013402:	bbed                	j	800131fc <external_interrupt_SEI+0x5e6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80013404:	00036717          	auipc	a4,0x36
    80013408:	c1072703          	lw	a4,-1008(a4) # 80049014 <excpt+0x4>
    8001340c:	4791                	li	a5,4
    8001340e:	00014597          	auipc	a1,0x14
    80013412:	a7258593          	addi	a1,a1,-1422 # 80026e80 <__func__.0+0x2c0>
    80013416:	c6f705e3          	beq	a4,a5,80013080 <external_interrupt_SEI+0x46a>
    8001341a:	00014597          	auipc	a1,0x14
    8001341e:	a7658593          	addi	a1,a1,-1418 # 80026e90 <__func__.0+0x2d0>
    80013422:	b9b9                	j	80013080 <external_interrupt_SEI+0x46a>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80013424:	00036717          	auipc	a4,0x36
    80013428:	bf072703          	lw	a4,-1040(a4) # 80049014 <excpt+0x4>
    8001342c:	4791                	li	a5,4
    8001342e:	00014597          	auipc	a1,0x14
    80013432:	a5258593          	addi	a1,a1,-1454 # 80026e80 <__func__.0+0x2c0>
    80013436:	b8f70be3          	beq	a4,a5,80012fcc <external_interrupt_SEI+0x3b6>
    8001343a:	00014597          	auipc	a1,0x14
    8001343e:	a5658593          	addi	a1,a1,-1450 # 80026e90 <__func__.0+0x2d0>
    80013442:	b669                	j	80012fcc <external_interrupt_SEI+0x3b6>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80013444:	00036417          	auipc	s0,0x36
    80013448:	bd042403          	lw	s0,-1072(s0) # 80049014 <excpt+0x4>
    8001344c:	1471                	addi	s0,s0,-4
    8001344e:	00143413          	seqz	s0,s0
    80013452:	8abff06f          	j	80012cfc <external_interrupt_SEI+0xe6>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80013456:	00036717          	auipc	a4,0x36
    8001345a:	bbe72703          	lw	a4,-1090(a4) # 80049014 <excpt+0x4>
    8001345e:	4791                	li	a5,4
    80013460:	00014597          	auipc	a1,0x14
    80013464:	a2058593          	addi	a1,a1,-1504 # 80026e80 <__func__.0+0x2c0>
    80013468:	98f708e3          	beq	a4,a5,80012df8 <external_interrupt_SEI+0x1e2>
    8001346c:	00014597          	auipc	a1,0x14
    80013470:	a2458593          	addi	a1,a1,-1500 # 80026e90 <__func__.0+0x2d0>
    80013474:	b251                	j	80012df8 <external_interrupt_SEI+0x1e2>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80013476:	00036717          	auipc	a4,0x36
    8001347a:	b9e72703          	lw	a4,-1122(a4) # 80049014 <excpt+0x4>
    8001347e:	4791                	li	a5,4
    80013480:	00014597          	auipc	a1,0x14
    80013484:	a0058593          	addi	a1,a1,-1536 # 80026e80 <__func__.0+0x2c0>
    80013488:	caf706e3          	beq	a4,a5,80013134 <external_interrupt_SEI+0x51e>
    8001348c:	00014597          	auipc	a1,0x14
    80013490:	a0458593          	addi	a1,a1,-1532 # 80026e90 <__func__.0+0x2d0>
    80013494:	b145                	j	80013134 <external_interrupt_SEI+0x51e>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    80013496:	00036717          	auipc	a4,0x36
    8001349a:	b7e72703          	lw	a4,-1154(a4) # 80049014 <excpt+0x4>
    8001349e:	4791                	li	a5,4
    800134a0:	00014597          	auipc	a1,0x14
    800134a4:	9e058593          	addi	a1,a1,-1568 # 80026e80 <__func__.0+0x2c0>
    800134a8:	80f700e3          	beq	a4,a5,80012ca8 <external_interrupt_SEI+0x92>
    800134ac:	00014597          	auipc	a1,0x14
    800134b0:	9e458593          	addi	a1,a1,-1564 # 80026e90 <__func__.0+0x2d0>
    800134b4:	ff4ff06f          	j	80012ca8 <external_interrupt_SEI+0x92>

00000000800134b8 <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    800134b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800134ba:	00012597          	auipc	a1,0x12
    800134be:	7de58593          	addi	a1,a1,2014 # 80025c98 <__func__.0>
    800134c2:	00014517          	auipc	a0,0x14
    800134c6:	9de50513          	addi	a0,a0,-1570 # 80026ea0 <__func__.0+0x2e0>
bool external_interrupt_VSEI() {
    800134ca:	ec06                	sd	ra,24(sp)
    800134cc:	e822                	sd	s0,16(sp)
    800134ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800134d0:	235110ef          	jal	80024f04 <printf>
    800134d4:	4529                	li	a0,10
    800134d6:	039100ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    800134da:	0330000f          	fence	rw,rw
    800134de:	00036417          	auipc	s0,0x36
    800134e2:	b3240413          	addi	s0,s0,-1230 # 80049010 <excpt>
    800134e6:	4785                	li	a5,1
    800134e8:	00036717          	auipc	a4,0x36
    800134ec:	b6073023          	sd	zero,-1184(a4) # 80049048 <excpt+0x38>
    800134f0:	00f41023          	sh	a5,0(s0)
    800134f4:	0330000f          	fence	rw,rw

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    800134f8:	4511                	li	a0,4
    800134fa:	efced0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    800134fe:	40000793          	li	a5,1024
    80013502:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    80013506:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8001350a:	4509                	li	a0,2
    8001350c:	eeaed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013510:	08200593          	li	a1,130
    80013514:	00018617          	auipc	a2,0x18
    80013518:	99c60613          	addi	a2,a2,-1636 # 8002aeb0 <__func__.0+0x42f0>
    8001351c:	00014517          	auipc	a0,0x14
    80013520:	99c50513          	addi	a0,a0,-1636 # 80026eb8 <__func__.0+0x2f8>
    80013524:	1e1110ef          	jal	80024f04 <printf>
    80013528:	00036797          	auipc	a5,0x36
    8001352c:	ae97c783          	lbu	a5,-1303(a5) # 80049011 <excpt+0x1>
    80013530:	00014597          	auipc	a1,0x14
    80013534:	96058593          	addi	a1,a1,-1696 # 80026e90 <__func__.0+0x2d0>
    80013538:	c799                	beqz	a5,80013546 <external_interrupt_VSEI+0x8e>
    8001353a:	57fd                	li	a5,-1
    8001353c:	6418                	ld	a4,8(s0)
    8001353e:	17fe                	slli	a5,a5,0x3f
    80013540:	07a9                	addi	a5,a5,10
    80013542:	6af70363          	beq	a4,a5,80013be8 <external_interrupt_VSEI+0x730>
    80013546:	00014517          	auipc	a0,0x14
    8001354a:	98a50513          	addi	a0,a0,-1654 # 80026ed0 <__func__.0+0x310>
    8001354e:	1b7110ef          	jal	80024f04 <printf>
    80013552:	00036797          	auipc	a5,0x36
    80013556:	abf7c783          	lbu	a5,-1345(a5) # 80049011 <excpt+0x1>
    8001355a:	c799                	beqz	a5,80013568 <external_interrupt_VSEI+0xb0>
    8001355c:	57fd                	li	a5,-1
    8001355e:	6418                	ld	a4,8(s0)
    80013560:	17fe                	slli	a5,a5,0x3f
    80013562:	07a9                	addi	a5,a5,10
    80013564:	5cf70463          	beq	a4,a5,80013b2c <external_interrupt_VSEI+0x674>
    80013568:	00014517          	auipc	a0,0x14
    8001356c:	97050513          	addi	a0,a0,-1680 # 80026ed8 <__func__.0+0x318>
    80013570:	195110ef          	jal	80024f04 <printf>
    80013574:	02900513          	li	a0,41
    80013578:	796100ef          	jal	80023d0e <putchar>
    8001357c:	4529                	li	a0,10
    8001357e:	790100ef          	jal	80023d0e <putchar>
    80013582:	00036797          	auipc	a5,0x36
    80013586:	a8f7c783          	lbu	a5,-1393(a5) # 80049011 <excpt+0x1>
    8001358a:	4481                	li	s1,0
    8001358c:	c799                	beqz	a5,8001359a <external_interrupt_VSEI+0xe2>
    8001358e:	57fd                	li	a5,-1
    80013590:	6418                	ld	a4,8(s0)
    80013592:	17fe                	slli	a5,a5,0x3f
    80013594:	07a9                	addi	a5,a5,10
    80013596:	62f70163          	beq	a4,a5,80013bb8 <external_interrupt_VSEI+0x700>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    8001359a:	0330000f          	fence	rw,rw
    8001359e:	4785                	li	a5,1
    800135a0:	00036717          	auipc	a4,0x36
    800135a4:	aa073423          	sd	zero,-1368(a4) # 80049048 <excpt+0x38>
    800135a8:	00f41023          	sh	a5,0(s0)
    800135ac:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800135b0:	4511                	li	a0,4
    800135b2:	e44ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    800135b6:	40000793          	li	a5,1024
    800135ba:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    800135be:	577d                	li	a4,-1
    800135c0:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    800135c4:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    800135c8:	4509                	li	a0,2
    800135ca:	e2ced0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    800135ce:	08200593          	li	a1,130
    800135d2:	00018617          	auipc	a2,0x18
    800135d6:	92e60613          	addi	a2,a2,-1746 # 8002af00 <__func__.0+0x4340>
    800135da:	00014517          	auipc	a0,0x14
    800135de:	8de50513          	addi	a0,a0,-1826 # 80026eb8 <__func__.0+0x2f8>
    800135e2:	123110ef          	jal	80024f04 <printf>
    800135e6:	00036797          	auipc	a5,0x36
    800135ea:	a2b7c783          	lbu	a5,-1493(a5) # 80049011 <excpt+0x1>
    800135ee:	00014597          	auipc	a1,0x14
    800135f2:	8a258593          	addi	a1,a1,-1886 # 80026e90 <__func__.0+0x2d0>
    800135f6:	c799                	beqz	a5,80013604 <external_interrupt_VSEI+0x14c>
    800135f8:	57fd                	li	a5,-1
    800135fa:	6418                	ld	a4,8(s0)
    800135fc:	17fe                	slli	a5,a5,0x3f
    800135fe:	07a9                	addi	a5,a5,10
    80013600:	5cf70463          	beq	a4,a5,80013bc8 <external_interrupt_VSEI+0x710>
    80013604:	00014517          	auipc	a0,0x14
    80013608:	8cc50513          	addi	a0,a0,-1844 # 80026ed0 <__func__.0+0x310>
    8001360c:	0f9110ef          	jal	80024f04 <printf>
    80013610:	00036797          	auipc	a5,0x36
    80013614:	a017c783          	lbu	a5,-1535(a5) # 80049011 <excpt+0x1>
    80013618:	c799                	beqz	a5,80013626 <external_interrupt_VSEI+0x16e>
    8001361a:	57fd                	li	a5,-1
    8001361c:	6418                	ld	a4,8(s0)
    8001361e:	17fe                	slli	a5,a5,0x3f
    80013620:	07a9                	addi	a5,a5,10
    80013622:	4ef70563          	beq	a4,a5,80013b0c <external_interrupt_VSEI+0x654>
    80013626:	00014517          	auipc	a0,0x14
    8001362a:	8b250513          	addi	a0,a0,-1870 # 80026ed8 <__func__.0+0x318>
    8001362e:	0d7110ef          	jal	80024f04 <printf>
    80013632:	02900513          	li	a0,41
    80013636:	6d8100ef          	jal	80023d0e <putchar>
    8001363a:	4529                	li	a0,10
    8001363c:	6d2100ef          	jal	80023d0e <putchar>
    80013640:	c881                	beqz	s1,80013650 <external_interrupt_VSEI+0x198>
    80013642:	00036797          	auipc	a5,0x36
    80013646:	9cf7c783          	lbu	a5,-1585(a5) # 80049011 <excpt+0x1>
    8001364a:	4481                	li	s1,0
    8001364c:	4a079263          	bnez	a5,80013af0 <external_interrupt_VSEI+0x638>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80013650:	0330000f          	fence	rw,rw
    80013654:	4785                	li	a5,1
    80013656:	00036717          	auipc	a4,0x36
    8001365a:	9e073923          	sd	zero,-1550(a4) # 80049048 <excpt+0x38>
    8001365e:	00f41023          	sh	a5,0(s0)
    80013662:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013666:	4511                	li	a0,4
    80013668:	d8eed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8001366c:	40000793          	li	a5,1024
    80013670:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80013674:	577d                	li	a4,-1
    80013676:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    8001367a:	60372073          	csrs	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    8001367e:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80013682:	4509                	li	a0,2
    80013684:	d72ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013688:	08200593          	li	a1,130
    8001368c:	00018617          	auipc	a2,0x18
    80013690:	8d460613          	addi	a2,a2,-1836 # 8002af60 <__func__.0+0x43a0>
    80013694:	00014517          	auipc	a0,0x14
    80013698:	82450513          	addi	a0,a0,-2012 # 80026eb8 <__func__.0+0x2f8>
    8001369c:	069110ef          	jal	80024f04 <printf>
    800136a0:	00036797          	auipc	a5,0x36
    800136a4:	9717c783          	lbu	a5,-1679(a5) # 80049011 <excpt+0x1>
    800136a8:	00013597          	auipc	a1,0x13
    800136ac:	7e858593          	addi	a1,a1,2024 # 80026e90 <__func__.0+0x2d0>
    800136b0:	c799                	beqz	a5,800136be <external_interrupt_VSEI+0x206>
    800136b2:	57fd                	li	a5,-1
    800136b4:	6418                	ld	a4,8(s0)
    800136b6:	17fe                	slli	a5,a5,0x3f
    800136b8:	07a9                	addi	a5,a5,10
    800136ba:	54f70763          	beq	a4,a5,80013c08 <external_interrupt_VSEI+0x750>
    800136be:	00014517          	auipc	a0,0x14
    800136c2:	81250513          	addi	a0,a0,-2030 # 80026ed0 <__func__.0+0x310>
    800136c6:	03f110ef          	jal	80024f04 <printf>
    800136ca:	00036797          	auipc	a5,0x36
    800136ce:	9477c783          	lbu	a5,-1721(a5) # 80049011 <excpt+0x1>
    800136d2:	c799                	beqz	a5,800136e0 <external_interrupt_VSEI+0x228>
    800136d4:	57fd                	li	a5,-1
    800136d6:	6418                	ld	a4,8(s0)
    800136d8:	17fe                	slli	a5,a5,0x3f
    800136da:	07a9                	addi	a5,a5,10
    800136dc:	44f70063          	beq	a4,a5,80013b1c <external_interrupt_VSEI+0x664>
    800136e0:	00013517          	auipc	a0,0x13
    800136e4:	7f850513          	addi	a0,a0,2040 # 80026ed8 <__func__.0+0x318>
    800136e8:	01d110ef          	jal	80024f04 <printf>
    800136ec:	02900513          	li	a0,41
    800136f0:	61e100ef          	jal	80023d0e <putchar>
    800136f4:	4529                	li	a0,10
    800136f6:	618100ef          	jal	80023d0e <putchar>
    800136fa:	c881                	beqz	s1,8001370a <external_interrupt_VSEI+0x252>
    800136fc:	00036797          	auipc	a5,0x36
    80013700:	9157c783          	lbu	a5,-1771(a5) # 80049011 <excpt+0x1>
    80013704:	4481                	li	s1,0
    80013706:	3c079763          	bnez	a5,80013ad4 <external_interrupt_VSEI+0x61c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    8001370a:	0330000f          	fence	rw,rw
    8001370e:	4785                	li	a5,1
    80013710:	00036717          	auipc	a4,0x36
    80013714:	92073c23          	sd	zero,-1736(a4) # 80049048 <excpt+0x38>
    80013718:	00f41023          	sh	a5,0(s0)
    8001371c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013720:	4511                	li	a0,4
    80013722:	cd4ed0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80013726:	40000793          	li	a5,1024
    8001372a:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    8001372e:	577d                	li	a4,-1
    80013730:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    80013734:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80013738:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    8001373c:	4509                	li	a0,2
    8001373e:	cb8ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80013742:	08200593          	li	a1,130
    80013746:	00018617          	auipc	a2,0x18
    8001374a:	88a60613          	addi	a2,a2,-1910 # 8002afd0 <__func__.0+0x4410>
    8001374e:	00013517          	auipc	a0,0x13
    80013752:	76a50513          	addi	a0,a0,1898 # 80026eb8 <__func__.0+0x2f8>
    80013756:	7ae110ef          	jal	80024f04 <printf>
    8001375a:	00036797          	auipc	a5,0x36
    8001375e:	8b77c783          	lbu	a5,-1865(a5) # 80049011 <excpt+0x1>
    80013762:	00013597          	auipc	a1,0x13
    80013766:	72e58593          	addi	a1,a1,1838 # 80026e90 <__func__.0+0x2d0>
    8001376a:	e789                	bnez	a5,80013774 <external_interrupt_VSEI+0x2bc>
    8001376c:	00013597          	auipc	a1,0x13
    80013770:	71458593          	addi	a1,a1,1812 # 80026e80 <__func__.0+0x2c0>
    80013774:	00013517          	auipc	a0,0x13
    80013778:	75c50513          	addi	a0,a0,1884 # 80026ed0 <__func__.0+0x310>
    8001377c:	788110ef          	jal	80024f04 <printf>
    80013780:	00036797          	auipc	a5,0x36
    80013784:	8917c783          	lbu	a5,-1903(a5) # 80049011 <excpt+0x1>
    80013788:	3e079d63          	bnez	a5,80013b82 <external_interrupt_VSEI+0x6ca>
    8001378c:	4529                	li	a0,10
    8001378e:	580100ef          	jal	80023d0e <putchar>
    80013792:	c499                	beqz	s1,800137a0 <external_interrupt_VSEI+0x2e8>
    80013794:	00036497          	auipc	s1,0x36
    80013798:	87d4c483          	lbu	s1,-1923(s1) # 80049011 <excpt+0x1>
    8001379c:	0014c493          	xori	s1,s1,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    800137a0:	0330000f          	fence	rw,rw
    800137a4:	4785                	li	a5,1
    800137a6:	00036717          	auipc	a4,0x36
    800137aa:	8a073123          	sd	zero,-1886(a4) # 80049048 <excpt+0x38>
    800137ae:	00f41023          	sh	a5,0(s0)
    800137b2:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800137b6:	4511                	li	a0,4
    800137b8:	c3eed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    800137bc:	40000793          	li	a5,1024
    800137c0:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    800137c4:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    800137c8:	4509                	li	a0,2
    800137ca:	c2ced0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    800137ce:	08200593          	li	a1,130
    800137d2:	00018617          	auipc	a2,0x18
    800137d6:	83e60613          	addi	a2,a2,-1986 # 8002b010 <__func__.0+0x4450>
    800137da:	00013517          	auipc	a0,0x13
    800137de:	6de50513          	addi	a0,a0,1758 # 80026eb8 <__func__.0+0x2f8>
    800137e2:	722110ef          	jal	80024f04 <printf>
    800137e6:	00036797          	auipc	a5,0x36
    800137ea:	82b7c783          	lbu	a5,-2005(a5) # 80049011 <excpt+0x1>
    800137ee:	00013597          	auipc	a1,0x13
    800137f2:	6a258593          	addi	a1,a1,1698 # 80026e90 <__func__.0+0x2d0>
    800137f6:	e799                	bnez	a5,80013804 <external_interrupt_VSEI+0x34c>
    800137f8:	57fd                	li	a5,-1
    800137fa:	6418                	ld	a4,8(s0)
    800137fc:	17fe                	slli	a5,a5,0x3f
    800137fe:	07a9                	addi	a5,a5,10
    80013800:	44f70463          	beq	a4,a5,80013c48 <external_interrupt_VSEI+0x790>
    80013804:	00013517          	auipc	a0,0x13
    80013808:	6cc50513          	addi	a0,a0,1740 # 80026ed0 <__func__.0+0x310>
    8001380c:	6f8110ef          	jal	80024f04 <printf>
    80013810:	00036797          	auipc	a5,0x36
    80013814:	8017c783          	lbu	a5,-2047(a5) # 80049011 <excpt+0x1>
    80013818:	e799                	bnez	a5,80013826 <external_interrupt_VSEI+0x36e>
    8001381a:	57fd                	li	a5,-1
    8001381c:	6418                	ld	a4,8(s0)
    8001381e:	17fe                	slli	a5,a5,0x3f
    80013820:	07a9                	addi	a5,a5,10
    80013822:	30f70d63          	beq	a4,a5,80013b3c <external_interrupt_VSEI+0x684>
    80013826:	00013517          	auipc	a0,0x13
    8001382a:	6b250513          	addi	a0,a0,1714 # 80026ed8 <__func__.0+0x318>
    8001382e:	6d6110ef          	jal	80024f04 <printf>
    80013832:	02900513          	li	a0,41
    80013836:	4d8100ef          	jal	80023d0e <putchar>
    8001383a:	4529                	li	a0,10
    8001383c:	4d2100ef          	jal	80023d0e <putchar>
    80013840:	c881                	beqz	s1,80013850 <external_interrupt_VSEI+0x398>
    80013842:	00035797          	auipc	a5,0x35
    80013846:	7cf7c783          	lbu	a5,1999(a5) # 80049011 <excpt+0x1>
    8001384a:	4481                	li	s1,0
    8001384c:	26078663          	beqz	a5,80013ab8 <external_interrupt_VSEI+0x600>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    80013850:	0330000f          	fence	rw,rw
    80013854:	4785                	li	a5,1
    80013856:	00035717          	auipc	a4,0x35
    8001385a:	7e073923          	sd	zero,2034(a4) # 80049048 <excpt+0x38>
    8001385e:	00f41023          	sh	a5,0(s0)
    80013862:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013866:	4511                	li	a0,4
    80013868:	b8eed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    8001386c:	40000793          	li	a5,1024
    80013870:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80013874:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80013878:	57fd                	li	a5,-1
    8001387a:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    8001387e:	4509                	li	a0,2
    80013880:	b76ed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013884:	08200593          	li	a1,130
    80013888:	00017617          	auipc	a2,0x17
    8001388c:	7d860613          	addi	a2,a2,2008 # 8002b060 <__func__.0+0x44a0>
    80013890:	00013517          	auipc	a0,0x13
    80013894:	62850513          	addi	a0,a0,1576 # 80026eb8 <__func__.0+0x2f8>
    80013898:	66c110ef          	jal	80024f04 <printf>
    8001389c:	00035797          	auipc	a5,0x35
    800138a0:	7757c783          	lbu	a5,1909(a5) # 80049011 <excpt+0x1>
    800138a4:	00013597          	auipc	a1,0x13
    800138a8:	5ec58593          	addi	a1,a1,1516 # 80026e90 <__func__.0+0x2d0>
    800138ac:	e799                	bnez	a5,800138ba <external_interrupt_VSEI+0x402>
    800138ae:	57fd                	li	a5,-1
    800138b0:	6418                	ld	a4,8(s0)
    800138b2:	17fe                	slli	a5,a5,0x3f
    800138b4:	07a9                	addi	a5,a5,10
    800138b6:	2ef70163          	beq	a4,a5,80013b98 <external_interrupt_VSEI+0x6e0>
    800138ba:	00013517          	auipc	a0,0x13
    800138be:	61650513          	addi	a0,a0,1558 # 80026ed0 <__func__.0+0x310>
    800138c2:	642110ef          	jal	80024f04 <printf>
    800138c6:	00035797          	auipc	a5,0x35
    800138ca:	74b7c783          	lbu	a5,1867(a5) # 80049011 <excpt+0x1>
    800138ce:	e799                	bnez	a5,800138dc <external_interrupt_VSEI+0x424>
    800138d0:	57fd                	li	a5,-1
    800138d2:	6418                	ld	a4,8(s0)
    800138d4:	17fe                	slli	a5,a5,0x3f
    800138d6:	07a9                	addi	a5,a5,10
    800138d8:	28f70263          	beq	a4,a5,80013b5c <external_interrupt_VSEI+0x6a4>
    800138dc:	00013517          	auipc	a0,0x13
    800138e0:	5fc50513          	addi	a0,a0,1532 # 80026ed8 <__func__.0+0x318>
    800138e4:	620110ef          	jal	80024f04 <printf>
    800138e8:	02900513          	li	a0,41
    800138ec:	422100ef          	jal	80023d0e <putchar>
    800138f0:	4529                	li	a0,10
    800138f2:	41c100ef          	jal	80023d0e <putchar>
    800138f6:	c881                	beqz	s1,80013906 <external_interrupt_VSEI+0x44e>
    800138f8:	00035797          	auipc	a5,0x35
    800138fc:	7197c783          	lbu	a5,1817(a5) # 80049011 <excpt+0x1>
    80013900:	4481                	li	s1,0
    80013902:	18078d63          	beqz	a5,80013a9c <external_interrupt_VSEI+0x5e4>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80013906:	0330000f          	fence	rw,rw
    8001390a:	4785                	li	a5,1
    8001390c:	00035717          	auipc	a4,0x35
    80013910:	72073e23          	sd	zero,1852(a4) # 80049048 <excpt+0x38>
    80013914:	00f41023          	sh	a5,0(s0)
    80013918:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001391c:	4511                	li	a0,4
    8001391e:	ad8ed0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80013922:	40000793          	li	a5,1024
    80013926:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    8001392a:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    8001392e:	57fd                	li	a5,-1
    80013930:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80013934:	60379073          	csrw	hideleg,a5

    goto_priv(PRIV_VS);
    80013938:	4509                	li	a0,2
    8001393a:	abced0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    8001393e:	08200593          	li	a1,130
    80013942:	00017617          	auipc	a2,0x17
    80013946:	77e60613          	addi	a2,a2,1918 # 8002b0c0 <__func__.0+0x4500>
    8001394a:	00013517          	auipc	a0,0x13
    8001394e:	56e50513          	addi	a0,a0,1390 # 80026eb8 <__func__.0+0x2f8>
    80013952:	5b2110ef          	jal	80024f04 <printf>
    80013956:	00035797          	auipc	a5,0x35
    8001395a:	6bb7c783          	lbu	a5,1723(a5) # 80049011 <excpt+0x1>
    8001395e:	00013597          	auipc	a1,0x13
    80013962:	53258593          	addi	a1,a1,1330 # 80026e90 <__func__.0+0x2d0>
    80013966:	e799                	bnez	a5,80013974 <external_interrupt_VSEI+0x4bc>
    80013968:	57fd                	li	a5,-1
    8001396a:	6418                	ld	a4,8(s0)
    8001396c:	17fe                	slli	a5,a5,0x3f
    8001396e:	07a9                	addi	a5,a5,10
    80013970:	2af70c63          	beq	a4,a5,80013c28 <external_interrupt_VSEI+0x770>
    80013974:	00013517          	auipc	a0,0x13
    80013978:	55c50513          	addi	a0,a0,1372 # 80026ed0 <__func__.0+0x310>
    8001397c:	588110ef          	jal	80024f04 <printf>
    80013980:	00035797          	auipc	a5,0x35
    80013984:	6917c783          	lbu	a5,1681(a5) # 80049011 <excpt+0x1>
    80013988:	e799                	bnez	a5,80013996 <external_interrupt_VSEI+0x4de>
    8001398a:	57fd                	li	a5,-1
    8001398c:	6418                	ld	a4,8(s0)
    8001398e:	17fe                	slli	a5,a5,0x3f
    80013990:	07a9                	addi	a5,a5,10
    80013992:	1af70d63          	beq	a4,a5,80013b4c <external_interrupt_VSEI+0x694>
    80013996:	00013517          	auipc	a0,0x13
    8001399a:	54250513          	addi	a0,a0,1346 # 80026ed8 <__func__.0+0x318>
    8001399e:	566110ef          	jal	80024f04 <printf>
    800139a2:	02900513          	li	a0,41
    800139a6:	368100ef          	jal	80023d0e <putchar>
    800139aa:	4529                	li	a0,10
    800139ac:	362100ef          	jal	80023d0e <putchar>
    800139b0:	c499                	beqz	s1,800139be <external_interrupt_VSEI+0x506>
    800139b2:	00035797          	auipc	a5,0x35
    800139b6:	65f7c783          	lbu	a5,1631(a5) # 80049011 <excpt+0x1>
    800139ba:	4481                	li	s1,0
    800139bc:	c3f1                	beqz	a5,80013a80 <external_interrupt_VSEI+0x5c8>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    800139be:	0330000f          	fence	rw,rw
    800139c2:	4785                	li	a5,1
    800139c4:	00035717          	auipc	a4,0x35
    800139c8:	68073223          	sd	zero,1668(a4) # 80049048 <excpt+0x38>
    800139cc:	00f41023          	sh	a5,0(s0)
    800139d0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800139d4:	4511                	li	a0,4
    800139d6:	a20ed0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    800139da:	40000793          	li	a5,1024
    800139de:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    800139e2:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    800139e6:	4509                	li	a0,2
    800139e8:	a0eed0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    800139ec:	08200593          	li	a1,130
    800139f0:	00017617          	auipc	a2,0x17
    800139f4:	74060613          	addi	a2,a2,1856 # 8002b130 <__func__.0+0x4570>
    800139f8:	00013517          	auipc	a0,0x13
    800139fc:	4c050513          	addi	a0,a0,1216 # 80026eb8 <__func__.0+0x2f8>
    80013a00:	504110ef          	jal	80024f04 <printf>
    80013a04:	00035797          	auipc	a5,0x35
    80013a08:	60d7c783          	lbu	a5,1549(a5) # 80049011 <excpt+0x1>
    80013a0c:	00013597          	auipc	a1,0x13
    80013a10:	48458593          	addi	a1,a1,1156 # 80026e90 <__func__.0+0x2d0>
    80013a14:	e789                	bnez	a5,80013a1e <external_interrupt_VSEI+0x566>
    80013a16:	00013597          	auipc	a1,0x13
    80013a1a:	46a58593          	addi	a1,a1,1130 # 80026e80 <__func__.0+0x2c0>
    80013a1e:	00013517          	auipc	a0,0x13
    80013a22:	4b250513          	addi	a0,a0,1202 # 80026ed0 <__func__.0+0x310>
    80013a26:	4de110ef          	jal	80024f04 <printf>
    80013a2a:	00035797          	auipc	a5,0x35
    80013a2e:	5e77c783          	lbu	a5,1511(a5) # 80049011 <excpt+0x1>
    80013a32:	12079d63          	bnez	a5,80013b6c <external_interrupt_VSEI+0x6b4>
    80013a36:	4529                	li	a0,10
    80013a38:	2d6100ef          	jal	80023d0e <putchar>
    80013a3c:	c491                	beqz	s1,80013a48 <external_interrupt_VSEI+0x590>
    80013a3e:	00035797          	auipc	a5,0x35
    80013a42:	5d37c783          	lbu	a5,1491(a5) # 80049011 <excpt+0x1>
    80013a46:	c79d                	beqz	a5,80013a74 <external_interrupt_VSEI+0x5bc>
    80013a48:	4401                	li	s0,0





    TEST_END();
    80013a4a:	00013597          	auipc	a1,0x13
    80013a4e:	44658593          	addi	a1,a1,1094 # 80026e90 <__func__.0+0x2d0>
    80013a52:	00013517          	auipc	a0,0x13
    80013a56:	4e650513          	addi	a0,a0,1254 # 80026f38 <__func__.0+0x378>
    80013a5a:	4aa110ef          	jal	80024f04 <printf>
    80013a5e:	4511                	li	a0,4
    80013a60:	996ed0ef          	jal	80000bf6 <goto_priv>
    80013a64:	a49ed0ef          	jal	800014ac <reset_state>
}
    80013a68:	60e2                	ld	ra,24(sp)
    80013a6a:	8522                	mv	a0,s0
    80013a6c:	6442                	ld	s0,16(sp)
    80013a6e:	64a2                	ld	s1,8(sp)
    80013a70:	6105                	addi	sp,sp,32
    80013a72:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80013a74:	4405                	li	s0,1
    TEST_END();
    80013a76:	00013597          	auipc	a1,0x13
    80013a7a:	40a58593          	addi	a1,a1,1034 # 80026e80 <__func__.0+0x2c0>
    80013a7e:	bfd1                	j	80013a52 <external_interrupt_VSEI+0x59a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80013a80:	57fd                	li	a5,-1
    80013a82:	6418                	ld	a4,8(s0)
    80013a84:	17fe                	slli	a5,a5,0x3f
    80013a86:	07a9                	addi	a5,a5,10
    80013a88:	f2f71be3          	bne	a4,a5,800139be <external_interrupt_VSEI+0x506>
    80013a8c:	00035497          	auipc	s1,0x35
    80013a90:	5884a483          	lw	s1,1416(s1) # 80049014 <excpt+0x4>
    80013a94:	14f9                	addi	s1,s1,-2
    80013a96:	0014b493          	seqz	s1,s1
    80013a9a:	b715                	j	800139be <external_interrupt_VSEI+0x506>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013a9c:	57fd                	li	a5,-1
    80013a9e:	6418                	ld	a4,8(s0)
    80013aa0:	17fe                	slli	a5,a5,0x3f
    80013aa2:	07a9                	addi	a5,a5,10
    80013aa4:	e6f711e3          	bne	a4,a5,80013906 <external_interrupt_VSEI+0x44e>
    80013aa8:	00035497          	auipc	s1,0x35
    80013aac:	56c4a483          	lw	s1,1388(s1) # 80049014 <excpt+0x4>
    80013ab0:	14f5                	addi	s1,s1,-3
    80013ab2:	0014b493          	seqz	s1,s1
    80013ab6:	bd81                	j	80013906 <external_interrupt_VSEI+0x44e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80013ab8:	57fd                	li	a5,-1
    80013aba:	6418                	ld	a4,8(s0)
    80013abc:	17fe                	slli	a5,a5,0x3f
    80013abe:	07a9                	addi	a5,a5,10
    80013ac0:	d8f718e3          	bne	a4,a5,80013850 <external_interrupt_VSEI+0x398>
    80013ac4:	00035497          	auipc	s1,0x35
    80013ac8:	5504a483          	lw	s1,1360(s1) # 80049014 <excpt+0x4>
    80013acc:	14f1                	addi	s1,s1,-4
    80013ace:	0014b493          	seqz	s1,s1
    80013ad2:	bbbd                	j	80013850 <external_interrupt_VSEI+0x398>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013ad4:	57fd                	li	a5,-1
    80013ad6:	6418                	ld	a4,8(s0)
    80013ad8:	17fe                	slli	a5,a5,0x3f
    80013ada:	07a9                	addi	a5,a5,10
    80013adc:	c2f717e3          	bne	a4,a5,8001370a <external_interrupt_VSEI+0x252>
    80013ae0:	00035497          	auipc	s1,0x35
    80013ae4:	5344a483          	lw	s1,1332(s1) # 80049014 <excpt+0x4>
    80013ae8:	14f9                	addi	s1,s1,-2
    80013aea:	0014b493          	seqz	s1,s1
    80013aee:	b931                	j	8001370a <external_interrupt_VSEI+0x252>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80013af0:	57fd                	li	a5,-1
    80013af2:	6418                	ld	a4,8(s0)
    80013af4:	17fe                	slli	a5,a5,0x3f
    80013af6:	07a9                	addi	a5,a5,10
    80013af8:	b4f71ce3          	bne	a4,a5,80013650 <external_interrupt_VSEI+0x198>
    80013afc:	00035497          	auipc	s1,0x35
    80013b00:	5184a483          	lw	s1,1304(s1) # 80049014 <excpt+0x4>
    80013b04:	14f5                	addi	s1,s1,-3
    80013b06:	0014b493          	seqz	s1,s1
    80013b0a:	b699                	j	80013650 <external_interrupt_VSEI+0x198>
    80013b0c:	00035717          	auipc	a4,0x35
    80013b10:	50872703          	lw	a4,1288(a4) # 80049014 <excpt+0x4>
    80013b14:	478d                	li	a5,3
    80013b16:	b0f718e3          	bne	a4,a5,80013626 <external_interrupt_VSEI+0x16e>
    80013b1a:	b605                	j	8001363a <external_interrupt_VSEI+0x182>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013b1c:	00035717          	auipc	a4,0x35
    80013b20:	4f872703          	lw	a4,1272(a4) # 80049014 <excpt+0x4>
    80013b24:	4789                	li	a5,2
    80013b26:	baf71de3          	bne	a4,a5,800136e0 <external_interrupt_VSEI+0x228>
    80013b2a:	b6e9                	j	800136f4 <external_interrupt_VSEI+0x23c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013b2c:	00035717          	auipc	a4,0x35
    80013b30:	4e872703          	lw	a4,1256(a4) # 80049014 <excpt+0x4>
    80013b34:	4791                	li	a5,4
    80013b36:	a2f719e3          	bne	a4,a5,80013568 <external_interrupt_VSEI+0xb0>
    80013b3a:	b489                	j	8001357c <external_interrupt_VSEI+0xc4>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80013b3c:	00035717          	auipc	a4,0x35
    80013b40:	4d872703          	lw	a4,1240(a4) # 80049014 <excpt+0x4>
    80013b44:	4791                	li	a5,4
    80013b46:	cef710e3          	bne	a4,a5,80013826 <external_interrupt_VSEI+0x36e>
    80013b4a:	b9c5                	j	8001383a <external_interrupt_VSEI+0x382>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80013b4c:	00035717          	auipc	a4,0x35
    80013b50:	4c872703          	lw	a4,1224(a4) # 80049014 <excpt+0x4>
    80013b54:	4789                	li	a5,2
    80013b56:	e4f710e3          	bne	a4,a5,80013996 <external_interrupt_VSEI+0x4de>
    80013b5a:	bd81                	j	800139aa <external_interrupt_VSEI+0x4f2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013b5c:	00035717          	auipc	a4,0x35
    80013b60:	4b872703          	lw	a4,1208(a4) # 80049014 <excpt+0x4>
    80013b64:	478d                	li	a5,3
    80013b66:	d6f71be3          	bne	a4,a5,800138dc <external_interrupt_VSEI+0x424>
    80013b6a:	b359                	j	800138f0 <external_interrupt_VSEI+0x438>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80013b6c:	00013517          	auipc	a0,0x13
    80013b70:	36c50513          	addi	a0,a0,876 # 80026ed8 <__func__.0+0x318>
    80013b74:	390110ef          	jal	80024f04 <printf>
    80013b78:	02900513          	li	a0,41
    80013b7c:	192100ef          	jal	80023d0e <putchar>
    80013b80:	bd5d                	j	80013a36 <external_interrupt_VSEI+0x57e>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80013b82:	00013517          	auipc	a0,0x13
    80013b86:	35650513          	addi	a0,a0,854 # 80026ed8 <__func__.0+0x318>
    80013b8a:	37a110ef          	jal	80024f04 <printf>
    80013b8e:	02900513          	li	a0,41
    80013b92:	17c100ef          	jal	80023d0e <putchar>
    80013b96:	bedd                	j	8001378c <external_interrupt_VSEI+0x2d4>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80013b98:	00035717          	auipc	a4,0x35
    80013b9c:	47c72703          	lw	a4,1148(a4) # 80049014 <excpt+0x4>
    80013ba0:	478d                	li	a5,3
    80013ba2:	00013597          	auipc	a1,0x13
    80013ba6:	2de58593          	addi	a1,a1,734 # 80026e80 <__func__.0+0x2c0>
    80013baa:	d0f708e3          	beq	a4,a5,800138ba <external_interrupt_VSEI+0x402>
    80013bae:	00013597          	auipc	a1,0x13
    80013bb2:	2e258593          	addi	a1,a1,738 # 80026e90 <__func__.0+0x2d0>
    80013bb6:	b311                	j	800138ba <external_interrupt_VSEI+0x402>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013bb8:	00035497          	auipc	s1,0x35
    80013bbc:	45c4a483          	lw	s1,1116(s1) # 80049014 <excpt+0x4>
    80013bc0:	14f1                	addi	s1,s1,-4
    80013bc2:	0014b493          	seqz	s1,s1
    80013bc6:	bad1                	j	8001359a <external_interrupt_VSEI+0xe2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80013bc8:	00035717          	auipc	a4,0x35
    80013bcc:	44c72703          	lw	a4,1100(a4) # 80049014 <excpt+0x4>
    80013bd0:	478d                	li	a5,3
    80013bd2:	00013597          	auipc	a1,0x13
    80013bd6:	2ae58593          	addi	a1,a1,686 # 80026e80 <__func__.0+0x2c0>
    80013bda:	a2f705e3          	beq	a4,a5,80013604 <external_interrupt_VSEI+0x14c>
    80013bde:	00013597          	auipc	a1,0x13
    80013be2:	2b258593          	addi	a1,a1,690 # 80026e90 <__func__.0+0x2d0>
    80013be6:	bc39                	j	80013604 <external_interrupt_VSEI+0x14c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80013be8:	00035717          	auipc	a4,0x35
    80013bec:	42c72703          	lw	a4,1068(a4) # 80049014 <excpt+0x4>
    80013bf0:	4791                	li	a5,4
    80013bf2:	00013597          	auipc	a1,0x13
    80013bf6:	28e58593          	addi	a1,a1,654 # 80026e80 <__func__.0+0x2c0>
    80013bfa:	94f706e3          	beq	a4,a5,80013546 <external_interrupt_VSEI+0x8e>
    80013bfe:	00013597          	auipc	a1,0x13
    80013c02:	29258593          	addi	a1,a1,658 # 80026e90 <__func__.0+0x2d0>
    80013c06:	b281                	j	80013546 <external_interrupt_VSEI+0x8e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80013c08:	00035717          	auipc	a4,0x35
    80013c0c:	40c72703          	lw	a4,1036(a4) # 80049014 <excpt+0x4>
    80013c10:	4789                	li	a5,2
    80013c12:	00013597          	auipc	a1,0x13
    80013c16:	26e58593          	addi	a1,a1,622 # 80026e80 <__func__.0+0x2c0>
    80013c1a:	aaf702e3          	beq	a4,a5,800136be <external_interrupt_VSEI+0x206>
    80013c1e:	00013597          	auipc	a1,0x13
    80013c22:	27258593          	addi	a1,a1,626 # 80026e90 <__func__.0+0x2d0>
    80013c26:	bc61                	j	800136be <external_interrupt_VSEI+0x206>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80013c28:	00035717          	auipc	a4,0x35
    80013c2c:	3ec72703          	lw	a4,1004(a4) # 80049014 <excpt+0x4>
    80013c30:	4789                	li	a5,2
    80013c32:	00013597          	auipc	a1,0x13
    80013c36:	24e58593          	addi	a1,a1,590 # 80026e80 <__func__.0+0x2c0>
    80013c3a:	d2f70de3          	beq	a4,a5,80013974 <external_interrupt_VSEI+0x4bc>
    80013c3e:	00013597          	auipc	a1,0x13
    80013c42:	25258593          	addi	a1,a1,594 # 80026e90 <__func__.0+0x2d0>
    80013c46:	b33d                	j	80013974 <external_interrupt_VSEI+0x4bc>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80013c48:	00035717          	auipc	a4,0x35
    80013c4c:	3cc72703          	lw	a4,972(a4) # 80049014 <excpt+0x4>
    80013c50:	4791                	li	a5,4
    80013c52:	00013597          	auipc	a1,0x13
    80013c56:	22e58593          	addi	a1,a1,558 # 80026e80 <__func__.0+0x2c0>
    80013c5a:	baf705e3          	beq	a4,a5,80013804 <external_interrupt_VSEI+0x34c>
    80013c5e:	00013597          	auipc	a1,0x13
    80013c62:	23258593          	addi	a1,a1,562 # 80026e90 <__func__.0+0x2d0>
    80013c66:	be79                	j	80013804 <external_interrupt_VSEI+0x34c>

0000000080013c68 <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    80013c68:	1101                	addi	sp,sp,-32

    TEST_START();
    80013c6a:	00012597          	auipc	a1,0x12
    80013c6e:	04658593          	addi	a1,a1,70 # 80025cb0 <__func__.2>
    80013c72:	00013517          	auipc	a0,0x13
    80013c76:	22e50513          	addi	a0,a0,558 # 80026ea0 <__func__.0+0x2e0>
bool software_interrupt_msi() {
    80013c7a:	ec06                	sd	ra,24(sp)
    80013c7c:	e822                	sd	s0,16(sp)
    80013c7e:	e426                	sd	s1,8(sp)
    TEST_START();
    80013c80:	284110ef          	jal	80024f04 <printf>
    80013c84:	4529                	li	a0,10
    80013c86:	088100ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80013c8a:	0330000f          	fence	rw,rw
    80013c8e:	00035497          	auipc	s1,0x35
    80013c92:	38248493          	addi	s1,s1,898 # 80049010 <excpt>
    80013c96:	4785                	li	a5,1
    80013c98:	00035717          	auipc	a4,0x35
    80013c9c:	3a073823          	sd	zero,944(a4) # 80049048 <excpt+0x38>
    80013ca0:	00f49023          	sh	a5,0(s1)
    80013ca4:	0330000f          	fence	rw,rw

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    80013ca8:	4511                	li	a0,4
    80013caa:	f4dec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013cae:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013cb2:	30446073          	csrsi	mie,8
    CSRW(CSR_MIDELEG,0);
    80013cb6:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    80013cba:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013cbe:	4511                	li	a0,4
    80013cc0:	f37ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013cc4:	08200593          	li	a1,130
    80013cc8:	00017617          	auipc	a2,0x17
    80013ccc:	4b860613          	addi	a2,a2,1208 # 8002b180 <__func__.0+0x45c0>
    80013cd0:	00013517          	auipc	a0,0x13
    80013cd4:	1e850513          	addi	a0,a0,488 # 80026eb8 <__func__.0+0x2f8>
    80013cd8:	22c110ef          	jal	80024f04 <printf>
    80013cdc:	00035797          	auipc	a5,0x35
    80013ce0:	3357c783          	lbu	a5,821(a5) # 80049011 <excpt+0x1>
    80013ce4:	00013597          	auipc	a1,0x13
    80013ce8:	1ac58593          	addi	a1,a1,428 # 80026e90 <__func__.0+0x2d0>
    80013cec:	cb89                	beqz	a5,80013cfe <software_interrupt_msi+0x96>
    80013cee:	57fd                	li	a5,-1
    80013cf0:	6498                	ld	a4,8(s1)
    80013cf2:	17fe                	slli	a5,a5,0x3f
    80013cf4:	0789                	addi	a5,a5,2
    80013cf6:	00f71463          	bne	a4,a5,80013cfe <software_interrupt_msi+0x96>
    80013cfa:	61b0006f          	j	80014b14 <software_interrupt_msi+0xeac>
    80013cfe:	00013517          	auipc	a0,0x13
    80013d02:	1d250513          	addi	a0,a0,466 # 80026ed0 <__func__.0+0x310>
    80013d06:	1fe110ef          	jal	80024f04 <printf>
    80013d0a:	00035797          	auipc	a5,0x35
    80013d0e:	3077c783          	lbu	a5,775(a5) # 80049011 <excpt+0x1>
    80013d12:	c799                	beqz	a5,80013d20 <software_interrupt_msi+0xb8>
    80013d14:	57fd                	li	a5,-1
    80013d16:	6498                	ld	a4,8(s1)
    80013d18:	17fe                	slli	a5,a5,0x3f
    80013d1a:	0789                	addi	a5,a5,2
    80013d1c:	46f70be3          	beq	a4,a5,80014992 <software_interrupt_msi+0xd2a>
    80013d20:	00013517          	auipc	a0,0x13
    80013d24:	1b850513          	addi	a0,a0,440 # 80026ed8 <__func__.0+0x318>
    80013d28:	1dc110ef          	jal	80024f04 <printf>
    80013d2c:	02900513          	li	a0,41
    80013d30:	7df0f0ef          	jal	80023d0e <putchar>
    80013d34:	4529                	li	a0,10
    80013d36:	7d90f0ef          	jal	80023d0e <putchar>
    80013d3a:	00035797          	auipc	a5,0x35
    80013d3e:	2d77c783          	lbu	a5,727(a5) # 80049011 <excpt+0x1>
    80013d42:	4401                	li	s0,0
    80013d44:	cb89                	beqz	a5,80013d56 <software_interrupt_msi+0xee>
    80013d46:	57fd                	li	a5,-1
    80013d48:	6498                	ld	a4,8(s1)
    80013d4a:	17fe                	slli	a5,a5,0x3f
    80013d4c:	0789                	addi	a5,a5,2
    80013d4e:	00f71463          	bne	a4,a5,80013d56 <software_interrupt_msi+0xee>
    80013d52:	6af0006f          	j	80014c00 <software_interrupt_msi+0xf98>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80013d56:	0330000f          	fence	rw,rw
    80013d5a:	4785                	li	a5,1
    80013d5c:	00035717          	auipc	a4,0x35
    80013d60:	2e073623          	sd	zero,748(a4) # 80049048 <excpt+0x38>
    80013d64:	00f49023          	sh	a5,0(s1)
    80013d68:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013d6c:	4511                	li	a0,4
    80013d6e:	e89ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80013d72:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013d76:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013d7a:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013d7e:	4511                	li	a0,4
    80013d80:	e77ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80013d84:	08200593          	li	a1,130
    80013d88:	00017617          	auipc	a2,0x17
    80013d8c:	45860613          	addi	a2,a2,1112 # 8002b1e0 <__func__.0+0x4620>
    80013d90:	00013517          	auipc	a0,0x13
    80013d94:	12850513          	addi	a0,a0,296 # 80026eb8 <__func__.0+0x2f8>
    80013d98:	16c110ef          	jal	80024f04 <printf>
    80013d9c:	00035797          	auipc	a5,0x35
    80013da0:	2757c783          	lbu	a5,629(a5) # 80049011 <excpt+0x1>
    80013da4:	00013597          	auipc	a1,0x13
    80013da8:	0ec58593          	addi	a1,a1,236 # 80026e90 <__func__.0+0x2d0>
    80013dac:	e789                	bnez	a5,80013db6 <software_interrupt_msi+0x14e>
    80013dae:	00013597          	auipc	a1,0x13
    80013db2:	0d258593          	addi	a1,a1,210 # 80026e80 <__func__.0+0x2c0>
    80013db6:	00013517          	auipc	a0,0x13
    80013dba:	11a50513          	addi	a0,a0,282 # 80026ed0 <__func__.0+0x310>
    80013dbe:	146110ef          	jal	80024f04 <printf>
    80013dc2:	00035797          	auipc	a5,0x35
    80013dc6:	24f7c783          	lbu	a5,591(a5) # 80049011 <excpt+0x1>
    80013dca:	440797e3          	bnez	a5,80014a18 <software_interrupt_msi+0xdb0>
    80013dce:	4529                	li	a0,10
    80013dd0:	73f0f0ef          	jal	80023d0e <putchar>
    80013dd4:	c419                	beqz	s0,80013de2 <software_interrupt_msi+0x17a>
    80013dd6:	00035417          	auipc	s0,0x35
    80013dda:	23b44403          	lbu	s0,571(s0) # 80049011 <excpt+0x1>
    80013dde:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80013de2:	0330000f          	fence	rw,rw
    80013de6:	4785                	li	a5,1
    80013de8:	00035717          	auipc	a4,0x35
    80013dec:	26073023          	sd	zero,608(a4) # 80049048 <excpt+0x38>
    80013df0:	00f49023          	sh	a5,0(s1)
    80013df4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013df8:	4511                	li	a0,4
    80013dfa:	dfdec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013dfe:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013e02:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013e06:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    80013e0a:	4511                	li	a0,4
    80013e0c:	debec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80013e10:	08200593          	li	a1,130
    80013e14:	00017617          	auipc	a2,0x17
    80013e18:	42460613          	addi	a2,a2,1060 # 8002b238 <__func__.0+0x4678>
    80013e1c:	00013517          	auipc	a0,0x13
    80013e20:	09c50513          	addi	a0,a0,156 # 80026eb8 <__func__.0+0x2f8>
    80013e24:	0e0110ef          	jal	80024f04 <printf>
    80013e28:	00035797          	auipc	a5,0x35
    80013e2c:	1e97c783          	lbu	a5,489(a5) # 80049011 <excpt+0x1>
    80013e30:	00013597          	auipc	a1,0x13
    80013e34:	06058593          	addi	a1,a1,96 # 80026e90 <__func__.0+0x2d0>
    80013e38:	cf99                	beqz	a5,80013e56 <software_interrupt_msi+0x1ee>
    80013e3a:	57fd                	li	a5,-1
    80013e3c:	6498                	ld	a4,8(s1)
    80013e3e:	17fe                	slli	a5,a5,0x3f
    80013e40:	0789                	addi	a5,a5,2
    80013e42:	00013597          	auipc	a1,0x13
    80013e46:	03e58593          	addi	a1,a1,62 # 80026e80 <__func__.0+0x2c0>
    80013e4a:	00f70663          	beq	a4,a5,80013e56 <software_interrupt_msi+0x1ee>
    80013e4e:	00013597          	auipc	a1,0x13
    80013e52:	04258593          	addi	a1,a1,66 # 80026e90 <__func__.0+0x2d0>
    80013e56:	00013517          	auipc	a0,0x13
    80013e5a:	07a50513          	addi	a0,a0,122 # 80026ed0 <__func__.0+0x310>
    80013e5e:	0a6110ef          	jal	80024f04 <printf>
    80013e62:	00035797          	auipc	a5,0x35
    80013e66:	1af7c783          	lbu	a5,431(a5) # 80049011 <excpt+0x1>
    80013e6a:	c799                	beqz	a5,80013e78 <software_interrupt_msi+0x210>
    80013e6c:	57fd                	li	a5,-1
    80013e6e:	6498                	ld	a4,8(s1)
    80013e70:	17fe                	slli	a5,a5,0x3f
    80013e72:	0789                	addi	a5,a5,2
    80013e74:	00f70c63          	beq	a4,a5,80013e8c <software_interrupt_msi+0x224>
    80013e78:	00013517          	auipc	a0,0x13
    80013e7c:	06050513          	addi	a0,a0,96 # 80026ed8 <__func__.0+0x318>
    80013e80:	084110ef          	jal	80024f04 <printf>
    80013e84:	02900513          	li	a0,41
    80013e88:	6870f0ef          	jal	80023d0e <putchar>
    80013e8c:	4529                	li	a0,10
    80013e8e:	6810f0ef          	jal	80023d0e <putchar>
    80013e92:	c801                	beqz	s0,80013ea2 <software_interrupt_msi+0x23a>
    80013e94:	00035797          	auipc	a5,0x35
    80013e98:	17d7c783          	lbu	a5,381(a5) # 80049011 <excpt+0x1>
    80013e9c:	4401                	li	s0,0
    80013e9e:	2c079ae3          	bnez	a5,80014972 <software_interrupt_msi+0xd0a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    80013ea2:	0330000f          	fence	rw,rw
    80013ea6:	4785                	li	a5,1
    80013ea8:	00035717          	auipc	a4,0x35
    80013eac:	1a073023          	sd	zero,416(a4) # 80049048 <excpt+0x38>
    80013eb0:	00f49023          	sh	a5,0(s1)
    80013eb4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013eb8:	4511                	li	a0,4
    80013eba:	d3dec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80013ebe:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013ec2:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013ec6:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013eca:	4511                	li	a0,4
    80013ecc:	d2bec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80013ed0:	08200593          	li	a1,130
    80013ed4:	00017617          	auipc	a2,0x17
    80013ed8:	3c460613          	addi	a2,a2,964 # 8002b298 <__func__.0+0x46d8>
    80013edc:	00013517          	auipc	a0,0x13
    80013ee0:	fdc50513          	addi	a0,a0,-36 # 80026eb8 <__func__.0+0x2f8>
    80013ee4:	020110ef          	jal	80024f04 <printf>
    80013ee8:	00035797          	auipc	a5,0x35
    80013eec:	1297c783          	lbu	a5,297(a5) # 80049011 <excpt+0x1>
    80013ef0:	00013597          	auipc	a1,0x13
    80013ef4:	fa058593          	addi	a1,a1,-96 # 80026e90 <__func__.0+0x2d0>
    80013ef8:	e789                	bnez	a5,80013f02 <software_interrupt_msi+0x29a>
    80013efa:	00013597          	auipc	a1,0x13
    80013efe:	f8658593          	addi	a1,a1,-122 # 80026e80 <__func__.0+0x2c0>
    80013f02:	00013517          	auipc	a0,0x13
    80013f06:	fce50513          	addi	a0,a0,-50 # 80026ed0 <__func__.0+0x310>
    80013f0a:	7fb100ef          	jal	80024f04 <printf>
    80013f0e:	00035797          	auipc	a5,0x35
    80013f12:	1037c783          	lbu	a5,259(a5) # 80049011 <excpt+0x1>
    80013f16:	320798e3          	bnez	a5,80014a46 <software_interrupt_msi+0xdde>
    80013f1a:	4529                	li	a0,10
    80013f1c:	5f30f0ef          	jal	80023d0e <putchar>
    80013f20:	c419                	beqz	s0,80013f2e <software_interrupt_msi+0x2c6>
    80013f22:	00035417          	auipc	s0,0x35
    80013f26:	0ef44403          	lbu	s0,239(s0) # 80049011 <excpt+0x1>
    80013f2a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80013f2e:	0330000f          	fence	rw,rw
    80013f32:	4785                	li	a5,1
    80013f34:	00035717          	auipc	a4,0x35
    80013f38:	10073a23          	sd	zero,276(a4) # 80049048 <excpt+0x38>
    80013f3c:	00f49023          	sh	a5,0(s1)
    80013f40:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013f44:	4511                	li	a0,4
    80013f46:	cb1ec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80013f4a:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013f4e:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013f52:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013f56:	4511                	li	a0,4
    80013f58:	c9fec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80013f5c:	08200593          	li	a1,130
    80013f60:	00017617          	auipc	a2,0x17
    80013f64:	38860613          	addi	a2,a2,904 # 8002b2e8 <__func__.0+0x4728>
    80013f68:	00013517          	auipc	a0,0x13
    80013f6c:	f5050513          	addi	a0,a0,-176 # 80026eb8 <__func__.0+0x2f8>
    80013f70:	795100ef          	jal	80024f04 <printf>
    80013f74:	00035797          	auipc	a5,0x35
    80013f78:	09d7c783          	lbu	a5,157(a5) # 80049011 <excpt+0x1>
    80013f7c:	00013597          	auipc	a1,0x13
    80013f80:	f1458593          	addi	a1,a1,-236 # 80026e90 <__func__.0+0x2d0>
    80013f84:	e789                	bnez	a5,80013f8e <software_interrupt_msi+0x326>
    80013f86:	00013597          	auipc	a1,0x13
    80013f8a:	efa58593          	addi	a1,a1,-262 # 80026e80 <__func__.0+0x2c0>
    80013f8e:	00013517          	auipc	a0,0x13
    80013f92:	f4250513          	addi	a0,a0,-190 # 80026ed0 <__func__.0+0x310>
    80013f96:	76f100ef          	jal	80024f04 <printf>
    80013f9a:	00035797          	auipc	a5,0x35
    80013f9e:	0777c783          	lbu	a5,119(a5) # 80049011 <excpt+0x1>
    80013fa2:	30079ce3          	bnez	a5,80014aba <software_interrupt_msi+0xe52>
    80013fa6:	4529                	li	a0,10
    80013fa8:	5670f0ef          	jal	80023d0e <putchar>
    80013fac:	c419                	beqz	s0,80013fba <software_interrupt_msi+0x352>
    80013fae:	00035417          	auipc	s0,0x35
    80013fb2:	06344403          	lbu	s0,99(s0) # 80049011 <excpt+0x1>
    80013fb6:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80013fba:	0330000f          	fence	rw,rw
    80013fbe:	4785                	li	a5,1
    80013fc0:	00035717          	auipc	a4,0x35
    80013fc4:	08073423          	sd	zero,136(a4) # 80049048 <excpt+0x38>
    80013fc8:	00f49023          	sh	a5,0(s1)
    80013fcc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80013fd0:	4511                	li	a0,4
    80013fd2:	c25ec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80013fd6:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013fda:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013fde:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    80013fe2:	4511                	li	a0,4
    80013fe4:	c13ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80013fe8:	08200593          	li	a1,130
    80013fec:	00017617          	auipc	a2,0x17
    80013ff0:	34c60613          	addi	a2,a2,844 # 8002b338 <__func__.0+0x4778>
    80013ff4:	00013517          	auipc	a0,0x13
    80013ff8:	ec450513          	addi	a0,a0,-316 # 80026eb8 <__func__.0+0x2f8>
    80013ffc:	709100ef          	jal	80024f04 <printf>
    80014000:	00035797          	auipc	a5,0x35
    80014004:	0117c783          	lbu	a5,17(a5) # 80049011 <excpt+0x1>
    80014008:	00013597          	auipc	a1,0x13
    8001400c:	e8858593          	addi	a1,a1,-376 # 80026e90 <__func__.0+0x2d0>
    80014010:	e789                	bnez	a5,8001401a <software_interrupt_msi+0x3b2>
    80014012:	00013597          	auipc	a1,0x13
    80014016:	e6e58593          	addi	a1,a1,-402 # 80026e80 <__func__.0+0x2c0>
    8001401a:	00013517          	auipc	a0,0x13
    8001401e:	eb650513          	addi	a0,a0,-330 # 80026ed0 <__func__.0+0x310>
    80014022:	6e3100ef          	jal	80024f04 <printf>
    80014026:	00035797          	auipc	a5,0x35
    8001402a:	feb7c783          	lbu	a5,-21(a5) # 80049011 <excpt+0x1>
    8001402e:	26079ae3          	bnez	a5,80014aa2 <software_interrupt_msi+0xe3a>
    80014032:	4529                	li	a0,10
    80014034:	4db0f0ef          	jal	80023d0e <putchar>
    80014038:	c419                	beqz	s0,80014046 <software_interrupt_msi+0x3de>
    8001403a:	00035417          	auipc	s0,0x35
    8001403e:	fd744403          	lbu	s0,-41(s0) # 80049011 <excpt+0x1>
    80014042:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    80014046:	0330000f          	fence	rw,rw
    8001404a:	4785                	li	a5,1
    8001404c:	00035717          	auipc	a4,0x35
    80014050:	fe073e23          	sd	zero,-4(a4) # 80049048 <excpt+0x38>
    80014054:	00f49023          	sh	a5,0(s1)
    80014058:	0330000f          	fence	rw,rw
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8001405c:	4511                	li	a0,4
    8001405e:	b99ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80014062:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014066:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001406a:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    8001406e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014072:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80014076:	450d                	li	a0,3
    80014078:	b7fec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001407c:	08200593          	li	a1,130
    80014080:	00017617          	auipc	a2,0x17
    80014084:	30860613          	addi	a2,a2,776 # 8002b388 <__func__.0+0x47c8>
    80014088:	00013517          	auipc	a0,0x13
    8001408c:	e3050513          	addi	a0,a0,-464 # 80026eb8 <__func__.0+0x2f8>
    80014090:	675100ef          	jal	80024f04 <printf>
    80014094:	00035797          	auipc	a5,0x35
    80014098:	f7d7c783          	lbu	a5,-131(a5) # 80049011 <excpt+0x1>
    8001409c:	00013597          	auipc	a1,0x13
    800140a0:	df458593          	addi	a1,a1,-524 # 80026e90 <__func__.0+0x2d0>
    800140a4:	c799                	beqz	a5,800140b2 <software_interrupt_msi+0x44a>
    800140a6:	57fd                	li	a5,-1
    800140a8:	6498                	ld	a4,8(s1)
    800140aa:	17fe                	slli	a5,a5,0x3f
    800140ac:	0789                	addi	a5,a5,2
    800140ae:	2cf707e3          	beq	a4,a5,80014b7c <software_interrupt_msi+0xf14>
    800140b2:	00013517          	auipc	a0,0x13
    800140b6:	e1e50513          	addi	a0,a0,-482 # 80026ed0 <__func__.0+0x310>
    800140ba:	64b100ef          	jal	80024f04 <printf>
    800140be:	00035797          	auipc	a5,0x35
    800140c2:	f537c783          	lbu	a5,-173(a5) # 80049011 <excpt+0x1>
    800140c6:	c799                	beqz	a5,800140d4 <software_interrupt_msi+0x46c>
    800140c8:	57fd                	li	a5,-1
    800140ca:	6498                	ld	a4,8(s1)
    800140cc:	17fe                	slli	a5,a5,0x3f
    800140ce:	0789                	addi	a5,a5,2
    800140d0:	10f703e3          	beq	a4,a5,800149d6 <software_interrupt_msi+0xd6e>
    800140d4:	00013517          	auipc	a0,0x13
    800140d8:	e0450513          	addi	a0,a0,-508 # 80026ed8 <__func__.0+0x318>
    800140dc:	629100ef          	jal	80024f04 <printf>
    800140e0:	02900513          	li	a0,41
    800140e4:	42b0f0ef          	jal	80023d0e <putchar>
    800140e8:	4529                	li	a0,10
    800140ea:	4250f0ef          	jal	80023d0e <putchar>
    800140ee:	c801                	beqz	s0,800140fe <software_interrupt_msi+0x496>
    800140f0:	00035797          	auipc	a5,0x35
    800140f4:	f217c783          	lbu	a5,-223(a5) # 80049011 <excpt+0x1>
    800140f8:	4401                	li	s0,0
    800140fa:	04079de3          	bnez	a5,80014954 <software_interrupt_msi+0xcec>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    800140fe:	0330000f          	fence	rw,rw
    80014102:	4785                	li	a5,1
    80014104:	00035717          	auipc	a4,0x35
    80014108:	f4073223          	sd	zero,-188(a4) # 80049048 <excpt+0x38>
    8001410c:	00f49023          	sh	a5,0(s1)
    80014110:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014114:	4511                	li	a0,4
    80014116:	ae1ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001411a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001411e:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80014122:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80014126:	57fd                	li	a5,-1
    80014128:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8001412c:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80014130:	450d                	li	a0,3
    80014132:	ac5ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014136:	08200593          	li	a1,130
    8001413a:	00017617          	auipc	a2,0x17
    8001413e:	2ae60613          	addi	a2,a2,686 # 8002b3e8 <__func__.0+0x4828>
    80014142:	00013517          	auipc	a0,0x13
    80014146:	d7650513          	addi	a0,a0,-650 # 80026eb8 <__func__.0+0x2f8>
    8001414a:	5bb100ef          	jal	80024f04 <printf>
    8001414e:	00035797          	auipc	a5,0x35
    80014152:	ec37c783          	lbu	a5,-317(a5) # 80049011 <excpt+0x1>
    80014156:	00013597          	auipc	a1,0x13
    8001415a:	d3a58593          	addi	a1,a1,-710 # 80026e90 <__func__.0+0x2d0>
    8001415e:	c799                	beqz	a5,8001416c <software_interrupt_msi+0x504>
    80014160:	57fd                	li	a5,-1
    80014162:	6498                	ld	a4,8(s1)
    80014164:	17fe                	slli	a5,a5,0x3f
    80014166:	0789                	addi	a5,a5,2
    80014168:	22f70be3          	beq	a4,a5,80014b9e <software_interrupt_msi+0xf36>
    8001416c:	00013517          	auipc	a0,0x13
    80014170:	d6450513          	addi	a0,a0,-668 # 80026ed0 <__func__.0+0x310>
    80014174:	591100ef          	jal	80024f04 <printf>
    80014178:	00035797          	auipc	a5,0x35
    8001417c:	e997c783          	lbu	a5,-359(a5) # 80049011 <excpt+0x1>
    80014180:	c799                	beqz	a5,8001418e <software_interrupt_msi+0x526>
    80014182:	57fd                	li	a5,-1
    80014184:	6498                	ld	a4,8(s1)
    80014186:	17fe                	slli	a5,a5,0x3f
    80014188:	0789                	addi	a5,a5,2
    8001418a:	02f70de3          	beq	a4,a5,800149c4 <software_interrupt_msi+0xd5c>
    8001418e:	00013517          	auipc	a0,0x13
    80014192:	d4a50513          	addi	a0,a0,-694 # 80026ed8 <__func__.0+0x318>
    80014196:	56f100ef          	jal	80024f04 <printf>
    8001419a:	02900513          	li	a0,41
    8001419e:	3710f0ef          	jal	80023d0e <putchar>
    800141a2:	4529                	li	a0,10
    800141a4:	36b0f0ef          	jal	80023d0e <putchar>
    800141a8:	c801                	beqz	s0,800141b8 <software_interrupt_msi+0x550>
    800141aa:	00035797          	auipc	a5,0x35
    800141ae:	e677c783          	lbu	a5,-409(a5) # 80049011 <excpt+0x1>
    800141b2:	4401                	li	s0,0
    800141b4:	78079163          	bnez	a5,80014936 <software_interrupt_msi+0xcce>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    800141b8:	0330000f          	fence	rw,rw
    800141bc:	4785                	li	a5,1
    800141be:	00035717          	auipc	a4,0x35
    800141c2:	e8073523          	sd	zero,-374(a4) # 80049048 <excpt+0x38>
    800141c6:	00f49023          	sh	a5,0(s1)
    800141ca:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800141ce:	4511                	li	a0,4
    800141d0:	a27ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800141d4:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800141d8:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800141dc:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800141e0:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800141e4:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800141e8:	450d                	li	a0,3
    800141ea:	a0dec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800141ee:	08200593          	li	a1,130
    800141f2:	00017617          	auipc	a2,0x17
    800141f6:	26660613          	addi	a2,a2,614 # 8002b458 <__func__.0+0x4898>
    800141fa:	00013517          	auipc	a0,0x13
    800141fe:	cbe50513          	addi	a0,a0,-834 # 80026eb8 <__func__.0+0x2f8>
    80014202:	503100ef          	jal	80024f04 <printf>
    80014206:	00035797          	auipc	a5,0x35
    8001420a:	e0b7c783          	lbu	a5,-501(a5) # 80049011 <excpt+0x1>
    8001420e:	00013597          	auipc	a1,0x13
    80014212:	c8258593          	addi	a1,a1,-894 # 80026e90 <__func__.0+0x2d0>
    80014216:	e789                	bnez	a5,80014220 <software_interrupt_msi+0x5b8>
    80014218:	00013597          	auipc	a1,0x13
    8001421c:	c6858593          	addi	a1,a1,-920 # 80026e80 <__func__.0+0x2c0>
    80014220:	00013517          	auipc	a0,0x13
    80014224:	cb050513          	addi	a0,a0,-848 # 80026ed0 <__func__.0+0x310>
    80014228:	4dd100ef          	jal	80024f04 <printf>
    8001422c:	00035797          	auipc	a5,0x35
    80014230:	de57c783          	lbu	a5,-539(a5) # 80049011 <excpt+0x1>
    80014234:	04079be3          	bnez	a5,80014a8a <software_interrupt_msi+0xe22>
    80014238:	4529                	li	a0,10
    8001423a:	2d50f0ef          	jal	80023d0e <putchar>
    8001423e:	c419                	beqz	s0,8001424c <software_interrupt_msi+0x5e4>
    80014240:	00035417          	auipc	s0,0x35
    80014244:	dd144403          	lbu	s0,-559(s0) # 80049011 <excpt+0x1>
    80014248:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001424c:	0330000f          	fence	rw,rw
    80014250:	4785                	li	a5,1
    80014252:	00035717          	auipc	a4,0x35
    80014256:	de073b23          	sd	zero,-522(a4) # 80049048 <excpt+0x38>
    8001425a:	00f49023          	sh	a5,0(s1)
    8001425e:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014262:	4511                	li	a0,4
    80014264:	993ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80014268:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001426c:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014270:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80014274:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014278:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    8001427c:	450d                	li	a0,3
    8001427e:	979ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014282:	08200593          	li	a1,130
    80014286:	00017617          	auipc	a2,0x17
    8001428a:	23a60613          	addi	a2,a2,570 # 8002b4c0 <__func__.0+0x4900>
    8001428e:	00013517          	auipc	a0,0x13
    80014292:	c2a50513          	addi	a0,a0,-982 # 80026eb8 <__func__.0+0x2f8>
    80014296:	46f100ef          	jal	80024f04 <printf>
    8001429a:	00035797          	auipc	a5,0x35
    8001429e:	d777c783          	lbu	a5,-649(a5) # 80049011 <excpt+0x1>
    800142a2:	00013597          	auipc	a1,0x13
    800142a6:	bee58593          	addi	a1,a1,-1042 # 80026e90 <__func__.0+0x2d0>
    800142aa:	c799                	beqz	a5,800142b8 <software_interrupt_msi+0x650>
    800142ac:	57fd                	li	a5,-1
    800142ae:	6498                	ld	a4,8(s1)
    800142b0:	17fe                	slli	a5,a5,0x3f
    800142b2:	0789                	addi	a5,a5,2
    800142b4:	08f703e3          	beq	a4,a5,80014b3a <software_interrupt_msi+0xed2>
    800142b8:	00013517          	auipc	a0,0x13
    800142bc:	c1850513          	addi	a0,a0,-1000 # 80026ed0 <__func__.0+0x310>
    800142c0:	445100ef          	jal	80024f04 <printf>
    800142c4:	00035797          	auipc	a5,0x35
    800142c8:	d4d7c783          	lbu	a5,-691(a5) # 80049011 <excpt+0x1>
    800142cc:	c799                	beqz	a5,800142da <software_interrupt_msi+0x672>
    800142ce:	57fd                	li	a5,-1
    800142d0:	6498                	ld	a4,8(s1)
    800142d2:	17fe                	slli	a5,a5,0x3f
    800142d4:	0789                	addi	a5,a5,2
    800142d6:	72f70163          	beq	a4,a5,800149f8 <software_interrupt_msi+0xd90>
    800142da:	00013517          	auipc	a0,0x13
    800142de:	bfe50513          	addi	a0,a0,-1026 # 80026ed8 <__func__.0+0x318>
    800142e2:	423100ef          	jal	80024f04 <printf>
    800142e6:	02900513          	li	a0,41
    800142ea:	2250f0ef          	jal	80023d0e <putchar>
    800142ee:	4529                	li	a0,10
    800142f0:	21f0f0ef          	jal	80023d0e <putchar>
    800142f4:	c801                	beqz	s0,80014304 <software_interrupt_msi+0x69c>
    800142f6:	00035797          	auipc	a5,0x35
    800142fa:	d1b7c783          	lbu	a5,-741(a5) # 80049011 <excpt+0x1>
    800142fe:	4401                	li	s0,0
    80014300:	60079d63          	bnez	a5,8001491a <software_interrupt_msi+0xcb2>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80014304:	0330000f          	fence	rw,rw
    80014308:	4785                	li	a5,1
    8001430a:	00035717          	auipc	a4,0x35
    8001430e:	d2073f23          	sd	zero,-706(a4) # 80049048 <excpt+0x38>
    80014312:	00f49023          	sh	a5,0(s1)
    80014316:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001431a:	4511                	li	a0,4
    8001431c:	8dbec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80014320:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014324:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014328:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    8001432c:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80014330:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80014334:	450d                	li	a0,3
    80014336:	8c1ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    8001433a:	08200593          	li	a1,130
    8001433e:	00017617          	auipc	a2,0x17
    80014342:	1f260613          	addi	a2,a2,498 # 8002b530 <__func__.0+0x4970>
    80014346:	00013517          	auipc	a0,0x13
    8001434a:	b7250513          	addi	a0,a0,-1166 # 80026eb8 <__func__.0+0x2f8>
    8001434e:	3b7100ef          	jal	80024f04 <printf>
    80014352:	00035797          	auipc	a5,0x35
    80014356:	cbf7c783          	lbu	a5,-833(a5) # 80049011 <excpt+0x1>
    8001435a:	00013597          	auipc	a1,0x13
    8001435e:	b3658593          	addi	a1,a1,-1226 # 80026e90 <__func__.0+0x2d0>
    80014362:	c799                	beqz	a5,80014370 <software_interrupt_msi+0x708>
    80014364:	57fd                	li	a5,-1
    80014366:	6498                	ld	a4,8(s1)
    80014368:	17fe                	slli	a5,a5,0x3f
    8001436a:	0789                	addi	a5,a5,2
    8001436c:	76f70363          	beq	a4,a5,80014ad2 <software_interrupt_msi+0xe6a>
    80014370:	00013517          	auipc	a0,0x13
    80014374:	b6050513          	addi	a0,a0,-1184 # 80026ed0 <__func__.0+0x310>
    80014378:	38d100ef          	jal	80024f04 <printf>
    8001437c:	00035797          	auipc	a5,0x35
    80014380:	c957c783          	lbu	a5,-875(a5) # 80049011 <excpt+0x1>
    80014384:	c799                	beqz	a5,80014392 <software_interrupt_msi+0x72a>
    80014386:	57fd                	li	a5,-1
    80014388:	6498                	ld	a4,8(s1)
    8001438a:	17fe                	slli	a5,a5,0x3f
    8001438c:	0789                	addi	a5,a5,2
    8001438e:	66f70d63          	beq	a4,a5,80014a08 <software_interrupt_msi+0xda0>
    80014392:	00013517          	auipc	a0,0x13
    80014396:	b4650513          	addi	a0,a0,-1210 # 80026ed8 <__func__.0+0x318>
    8001439a:	36b100ef          	jal	80024f04 <printf>
    8001439e:	02900513          	li	a0,41
    800143a2:	16d0f0ef          	jal	80023d0e <putchar>
    800143a6:	4529                	li	a0,10
    800143a8:	1670f0ef          	jal	80023d0e <putchar>
    800143ac:	c801                	beqz	s0,800143bc <software_interrupt_msi+0x754>
    800143ae:	00035797          	auipc	a5,0x35
    800143b2:	c637c783          	lbu	a5,-925(a5) # 80049011 <excpt+0x1>
    800143b6:	4401                	li	s0,0
    800143b8:	54079363          	bnez	a5,800148fe <software_interrupt_msi+0xc96>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    800143bc:	0330000f          	fence	rw,rw
    800143c0:	4785                	li	a5,1
    800143c2:	00035717          	auipc	a4,0x35
    800143c6:	c8073323          	sd	zero,-890(a4) # 80049048 <excpt+0x38>
    800143ca:	00f49023          	sh	a5,0(s1)
    800143ce:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800143d2:	4511                	li	a0,4
    800143d4:	823ec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    800143d8:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800143dc:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800143e0:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    800143e4:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800143e8:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800143ec:	450d                	li	a0,3
    800143ee:	809ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    800143f2:	08200593          	li	a1,130
    800143f6:	00017617          	auipc	a2,0x17
    800143fa:	1aa60613          	addi	a2,a2,426 # 8002b5a0 <__func__.0+0x49e0>
    800143fe:	00013517          	auipc	a0,0x13
    80014402:	aba50513          	addi	a0,a0,-1350 # 80026eb8 <__func__.0+0x2f8>
    80014406:	2ff100ef          	jal	80024f04 <printf>
    8001440a:	00035797          	auipc	a5,0x35
    8001440e:	c077c783          	lbu	a5,-1017(a5) # 80049011 <excpt+0x1>
    80014412:	00013597          	auipc	a1,0x13
    80014416:	a7e58593          	addi	a1,a1,-1410 # 80026e90 <__func__.0+0x2d0>
    8001441a:	e789                	bnez	a5,80014424 <software_interrupt_msi+0x7bc>
    8001441c:	00013597          	auipc	a1,0x13
    80014420:	a6458593          	addi	a1,a1,-1436 # 80026e80 <__func__.0+0x2c0>
    80014424:	00013517          	auipc	a0,0x13
    80014428:	aac50513          	addi	a0,a0,-1364 # 80026ed0 <__func__.0+0x310>
    8001442c:	2d9100ef          	jal	80024f04 <printf>
    80014430:	00035797          	auipc	a5,0x35
    80014434:	be17c783          	lbu	a5,-1055(a5) # 80049011 <excpt+0x1>
    80014438:	62079e63          	bnez	a5,80014a74 <software_interrupt_msi+0xe0c>
    8001443c:	4529                	li	a0,10
    8001443e:	0d10f0ef          	jal	80023d0e <putchar>
    80014442:	c419                	beqz	s0,80014450 <software_interrupt_msi+0x7e8>
    80014444:	00035417          	auipc	s0,0x35
    80014448:	bcd44403          	lbu	s0,-1075(s0) # 80049011 <excpt+0x1>
    8001444c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    80014450:	0330000f          	fence	rw,rw
    80014454:	4785                	li	a5,1
    80014456:	00035717          	auipc	a4,0x35
    8001445a:	be073923          	sd	zero,-1038(a4) # 80049048 <excpt+0x38>
    8001445e:	00f49023          	sh	a5,0(s1)
    80014462:	0330000f          	fence	rw,rw
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    80014466:	4511                	li	a0,4
    80014468:	f8eec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    8001446c:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014470:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80014474:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80014478:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8001447c:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80014480:	4509                	li	a0,2
    80014482:	f74ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014486:	08200593          	li	a1,130
    8001448a:	00017617          	auipc	a2,0x17
    8001448e:	17660613          	addi	a2,a2,374 # 8002b600 <__func__.0+0x4a40>
    80014492:	00013517          	auipc	a0,0x13
    80014496:	a2650513          	addi	a0,a0,-1498 # 80026eb8 <__func__.0+0x2f8>
    8001449a:	26b100ef          	jal	80024f04 <printf>
    8001449e:	00035797          	auipc	a5,0x35
    800144a2:	b737c783          	lbu	a5,-1165(a5) # 80049011 <excpt+0x1>
    800144a6:	00013597          	auipc	a1,0x13
    800144aa:	9ea58593          	addi	a1,a1,-1558 # 80026e90 <__func__.0+0x2d0>
    800144ae:	c799                	beqz	a5,800144bc <software_interrupt_msi+0x854>
    800144b0:	57fd                	li	a5,-1
    800144b2:	6498                	ld	a4,8(s1)
    800144b4:	17fe                	slli	a5,a5,0x3f
    800144b6:	0789                	addi	a5,a5,2
    800144b8:	6af70263          	beq	a4,a5,80014b5c <software_interrupt_msi+0xef4>
    800144bc:	00013517          	auipc	a0,0x13
    800144c0:	a1450513          	addi	a0,a0,-1516 # 80026ed0 <__func__.0+0x310>
    800144c4:	241100ef          	jal	80024f04 <printf>
    800144c8:	00035797          	auipc	a5,0x35
    800144cc:	b497c783          	lbu	a5,-1207(a5) # 80049011 <excpt+0x1>
    800144d0:	c799                	beqz	a5,800144de <software_interrupt_msi+0x876>
    800144d2:	57fd                	li	a5,-1
    800144d4:	6498                	ld	a4,8(s1)
    800144d6:	17fe                	slli	a5,a5,0x3f
    800144d8:	0789                	addi	a5,a5,2
    800144da:	50f70763          	beq	a4,a5,800149e8 <software_interrupt_msi+0xd80>
    800144de:	00013517          	auipc	a0,0x13
    800144e2:	9fa50513          	addi	a0,a0,-1542 # 80026ed8 <__func__.0+0x318>
    800144e6:	21f100ef          	jal	80024f04 <printf>
    800144ea:	02900513          	li	a0,41
    800144ee:	0210f0ef          	jal	80023d0e <putchar>
    800144f2:	4529                	li	a0,10
    800144f4:	01b0f0ef          	jal	80023d0e <putchar>
    800144f8:	c801                	beqz	s0,80014508 <software_interrupt_msi+0x8a0>
    800144fa:	00035797          	auipc	a5,0x35
    800144fe:	b177c783          	lbu	a5,-1257(a5) # 80049011 <excpt+0x1>
    80014502:	4401                	li	s0,0
    80014504:	3c079f63          	bnez	a5,800148e2 <software_interrupt_msi+0xc7a>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    80014508:	0330000f          	fence	rw,rw
    8001450c:	4785                	li	a5,1
    8001450e:	00035717          	auipc	a4,0x35
    80014512:	b2073d23          	sd	zero,-1222(a4) # 80049048 <excpt+0x38>
    80014516:	00f49023          	sh	a5,0(s1)
    8001451a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001451e:	4511                	li	a0,4
    80014520:	ed6ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80014524:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014528:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001452c:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80014530:	57fd                	li	a5,-1
    80014532:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80014536:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    8001453a:	4509                	li	a0,2
    8001453c:	ebaec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014540:	08200593          	li	a1,130
    80014544:	00017617          	auipc	a2,0x17
    80014548:	11c60613          	addi	a2,a2,284 # 8002b660 <__func__.0+0x4aa0>
    8001454c:	00013517          	auipc	a0,0x13
    80014550:	96c50513          	addi	a0,a0,-1684 # 80026eb8 <__func__.0+0x2f8>
    80014554:	1b1100ef          	jal	80024f04 <printf>
    80014558:	00035797          	auipc	a5,0x35
    8001455c:	ab97c783          	lbu	a5,-1351(a5) # 80049011 <excpt+0x1>
    80014560:	00013597          	auipc	a1,0x13
    80014564:	93058593          	addi	a1,a1,-1744 # 80026e90 <__func__.0+0x2d0>
    80014568:	c799                	beqz	a5,80014576 <software_interrupt_msi+0x90e>
    8001456a:	57fd                	li	a5,-1
    8001456c:	6498                	ld	a4,8(s1)
    8001456e:	17fe                	slli	a5,a5,0x3f
    80014570:	0789                	addi	a5,a5,2
    80014572:	66f70763          	beq	a4,a5,80014be0 <software_interrupt_msi+0xf78>
    80014576:	00013517          	auipc	a0,0x13
    8001457a:	95a50513          	addi	a0,a0,-1702 # 80026ed0 <__func__.0+0x310>
    8001457e:	187100ef          	jal	80024f04 <printf>
    80014582:	00035797          	auipc	a5,0x35
    80014586:	a8f7c783          	lbu	a5,-1393(a5) # 80049011 <excpt+0x1>
    8001458a:	c799                	beqz	a5,80014598 <software_interrupt_msi+0x930>
    8001458c:	57fd                	li	a5,-1
    8001458e:	6498                	ld	a4,8(s1)
    80014590:	17fe                	slli	a5,a5,0x3f
    80014592:	0789                	addi	a5,a5,2
    80014594:	40f70863          	beq	a4,a5,800149a4 <software_interrupt_msi+0xd3c>
    80014598:	00013517          	auipc	a0,0x13
    8001459c:	94050513          	addi	a0,a0,-1728 # 80026ed8 <__func__.0+0x318>
    800145a0:	165100ef          	jal	80024f04 <printf>
    800145a4:	02900513          	li	a0,41
    800145a8:	7660f0ef          	jal	80023d0e <putchar>
    800145ac:	4529                	li	a0,10
    800145ae:	7600f0ef          	jal	80023d0e <putchar>
    800145b2:	c801                	beqz	s0,800145c2 <software_interrupt_msi+0x95a>
    800145b4:	00035797          	auipc	a5,0x35
    800145b8:	a5d7c783          	lbu	a5,-1443(a5) # 80049011 <excpt+0x1>
    800145bc:	4401                	li	s0,0
    800145be:	30079463          	bnez	a5,800148c6 <software_interrupt_msi+0xc5e>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    800145c2:	0330000f          	fence	rw,rw
    800145c6:	4785                	li	a5,1
    800145c8:	00035717          	auipc	a4,0x35
    800145cc:	a8073023          	sd	zero,-1408(a4) # 80049048 <excpt+0x38>
    800145d0:	00f49023          	sh	a5,0(s1)
    800145d4:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800145d8:	4511                	li	a0,4
    800145da:	e1cec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800145de:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800145e2:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800145e6:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800145ea:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800145ee:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800145f2:	4509                	li	a0,2
    800145f4:	e02ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    800145f8:	08200593          	li	a1,130
    800145fc:	00017617          	auipc	a2,0x17
    80014600:	0d460613          	addi	a2,a2,212 # 8002b6d0 <__func__.0+0x4b10>
    80014604:	00013517          	auipc	a0,0x13
    80014608:	8b450513          	addi	a0,a0,-1868 # 80026eb8 <__func__.0+0x2f8>
    8001460c:	0f9100ef          	jal	80024f04 <printf>
    80014610:	00035797          	auipc	a5,0x35
    80014614:	a017c783          	lbu	a5,-1535(a5) # 80049011 <excpt+0x1>
    80014618:	00013597          	auipc	a1,0x13
    8001461c:	87858593          	addi	a1,a1,-1928 # 80026e90 <__func__.0+0x2d0>
    80014620:	e789                	bnez	a5,8001462a <software_interrupt_msi+0x9c2>
    80014622:	00013597          	auipc	a1,0x13
    80014626:	85e58593          	addi	a1,a1,-1954 # 80026e80 <__func__.0+0x2c0>
    8001462a:	00013517          	auipc	a0,0x13
    8001462e:	8a650513          	addi	a0,a0,-1882 # 80026ed0 <__func__.0+0x310>
    80014632:	0d3100ef          	jal	80024f04 <printf>
    80014636:	00035797          	auipc	a5,0x35
    8001463a:	9db7c783          	lbu	a5,-1573(a5) # 80049011 <excpt+0x1>
    8001463e:	3e079963          	bnez	a5,80014a30 <software_interrupt_msi+0xdc8>
    80014642:	4529                	li	a0,10
    80014644:	6ca0f0ef          	jal	80023d0e <putchar>
    80014648:	c419                	beqz	s0,80014656 <software_interrupt_msi+0x9ee>
    8001464a:	00035417          	auipc	s0,0x35
    8001464e:	9c744403          	lbu	s0,-1593(s0) # 80049011 <excpt+0x1>
    80014652:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80014656:	0330000f          	fence	rw,rw
    8001465a:	4785                	li	a5,1
    8001465c:	00035717          	auipc	a4,0x35
    80014660:	9e073623          	sd	zero,-1556(a4) # 80049048 <excpt+0x38>
    80014664:	00f49023          	sh	a5,0(s1)
    80014668:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001466c:	4511                	li	a0,4
    8001466e:	d88ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80014672:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80014676:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8001467a:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    8001467e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80014682:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80014686:	4509                	li	a0,2
    80014688:	d6eec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8001468c:	08200593          	li	a1,130
    80014690:	00017617          	auipc	a2,0x17
    80014694:	0a860613          	addi	a2,a2,168 # 8002b738 <__func__.0+0x4b78>
    80014698:	00013517          	auipc	a0,0x13
    8001469c:	82050513          	addi	a0,a0,-2016 # 80026eb8 <__func__.0+0x2f8>
    800146a0:	065100ef          	jal	80024f04 <printf>
    800146a4:	00035797          	auipc	a5,0x35
    800146a8:	96d7c783          	lbu	a5,-1683(a5) # 80049011 <excpt+0x1>
    800146ac:	00012597          	auipc	a1,0x12
    800146b0:	7e458593          	addi	a1,a1,2020 # 80026e90 <__func__.0+0x2d0>
    800146b4:	c799                	beqz	a5,800146c2 <software_interrupt_msi+0xa5a>
    800146b6:	57fd                	li	a5,-1
    800146b8:	6498                	ld	a4,8(s1)
    800146ba:	17fe                	slli	a5,a5,0x3f
    800146bc:	0789                	addi	a5,a5,2
    800146be:	42f70b63          	beq	a4,a5,80014af4 <software_interrupt_msi+0xe8c>
    800146c2:	00013517          	auipc	a0,0x13
    800146c6:	80e50513          	addi	a0,a0,-2034 # 80026ed0 <__func__.0+0x310>
    800146ca:	03b100ef          	jal	80024f04 <printf>
    800146ce:	00035797          	auipc	a5,0x35
    800146d2:	9437c783          	lbu	a5,-1725(a5) # 80049011 <excpt+0x1>
    800146d6:	c799                	beqz	a5,800146e4 <software_interrupt_msi+0xa7c>
    800146d8:	57fd                	li	a5,-1
    800146da:	6498                	ld	a4,8(s1)
    800146dc:	17fe                	slli	a5,a5,0x3f
    800146de:	0789                	addi	a5,a5,2
    800146e0:	2af70163          	beq	a4,a5,80014982 <software_interrupt_msi+0xd1a>
    800146e4:	00012517          	auipc	a0,0x12
    800146e8:	7f450513          	addi	a0,a0,2036 # 80026ed8 <__func__.0+0x318>
    800146ec:	019100ef          	jal	80024f04 <printf>
    800146f0:	02900513          	li	a0,41
    800146f4:	61a0f0ef          	jal	80023d0e <putchar>
    800146f8:	4529                	li	a0,10
    800146fa:	6140f0ef          	jal	80023d0e <putchar>
    800146fe:	c801                	beqz	s0,8001470e <software_interrupt_msi+0xaa6>
    80014700:	00035797          	auipc	a5,0x35
    80014704:	9117c783          	lbu	a5,-1775(a5) # 80049011 <excpt+0x1>
    80014708:	4401                	li	s0,0
    8001470a:	1a079063          	bnez	a5,800148aa <software_interrupt_msi+0xc42>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001470e:	0330000f          	fence	rw,rw
    80014712:	4785                	li	a5,1
    80014714:	00035717          	auipc	a4,0x35
    80014718:	92073a23          	sd	zero,-1740(a4) # 80049048 <excpt+0x38>
    8001471c:	00f49023          	sh	a5,0(s1)
    80014720:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014724:	4511                	li	a0,4
    80014726:	cd0ec0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001472a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    8001472e:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80014732:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80014736:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    8001473a:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    8001473e:	4509                	li	a0,2
    80014740:	cb6ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80014744:	08200593          	li	a1,130
    80014748:	00017617          	auipc	a2,0x17
    8001474c:	06060613          	addi	a2,a2,96 # 8002b7a8 <__func__.0+0x4be8>
    80014750:	00012517          	auipc	a0,0x12
    80014754:	76850513          	addi	a0,a0,1896 # 80026eb8 <__func__.0+0x2f8>
    80014758:	7ac100ef          	jal	80024f04 <printf>
    8001475c:	00035797          	auipc	a5,0x35
    80014760:	8b57c783          	lbu	a5,-1867(a5) # 80049011 <excpt+0x1>
    80014764:	00012597          	auipc	a1,0x12
    80014768:	72c58593          	addi	a1,a1,1836 # 80026e90 <__func__.0+0x2d0>
    8001476c:	c799                	beqz	a5,8001477a <software_interrupt_msi+0xb12>
    8001476e:	57fd                	li	a5,-1
    80014770:	6498                	ld	a4,8(s1)
    80014772:	17fe                	slli	a5,a5,0x3f
    80014774:	0789                	addi	a5,a5,2
    80014776:	44f70563          	beq	a4,a5,80014bc0 <software_interrupt_msi+0xf58>
    8001477a:	00012517          	auipc	a0,0x12
    8001477e:	75650513          	addi	a0,a0,1878 # 80026ed0 <__func__.0+0x310>
    80014782:	782100ef          	jal	80024f04 <printf>
    80014786:	00035797          	auipc	a5,0x35
    8001478a:	88b7c783          	lbu	a5,-1909(a5) # 80049011 <excpt+0x1>
    8001478e:	c799                	beqz	a5,8001479c <software_interrupt_msi+0xb34>
    80014790:	57fd                	li	a5,-1
    80014792:	6498                	ld	a4,8(s1)
    80014794:	17fe                	slli	a5,a5,0x3f
    80014796:	0789                	addi	a5,a5,2
    80014798:	20f70e63          	beq	a4,a5,800149b4 <software_interrupt_msi+0xd4c>
    8001479c:	00012517          	auipc	a0,0x12
    800147a0:	73c50513          	addi	a0,a0,1852 # 80026ed8 <__func__.0+0x318>
    800147a4:	760100ef          	jal	80024f04 <printf>
    800147a8:	02900513          	li	a0,41
    800147ac:	5620f0ef          	jal	80023d0e <putchar>
    800147b0:	4529                	li	a0,10
    800147b2:	55c0f0ef          	jal	80023d0e <putchar>
    800147b6:	c419                	beqz	s0,800147c4 <software_interrupt_msi+0xb5c>
    800147b8:	00035797          	auipc	a5,0x35
    800147bc:	8597c783          	lbu	a5,-1959(a5) # 80049011 <excpt+0x1>
    800147c0:	4401                	li	s0,0
    800147c2:	e7f1                	bnez	a5,8001488e <software_interrupt_msi+0xc26>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    800147c4:	0330000f          	fence	rw,rw
    800147c8:	4785                	li	a5,1
    800147ca:	00035717          	auipc	a4,0x35
    800147ce:	86073f23          	sd	zero,-1922(a4) # 80049048 <excpt+0x38>
    800147d2:	00f49023          	sh	a5,0(s1)
    800147d6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800147da:	4511                	li	a0,4
    800147dc:	c1aec0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    800147e0:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800147e4:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800147e8:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    800147ec:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800147f0:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800147f4:	4509                	li	a0,2
    800147f6:	c00ec0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    800147fa:	08200593          	li	a1,130
    800147fe:	00017617          	auipc	a2,0x17
    80014802:	01a60613          	addi	a2,a2,26 # 8002b818 <__func__.0+0x4c58>
    80014806:	00012517          	auipc	a0,0x12
    8001480a:	6b250513          	addi	a0,a0,1714 # 80026eb8 <__func__.0+0x2f8>
    8001480e:	6f6100ef          	jal	80024f04 <printf>
    80014812:	00034797          	auipc	a5,0x34
    80014816:	7ff7c783          	lbu	a5,2047(a5) # 80049011 <excpt+0x1>
    8001481a:	00012597          	auipc	a1,0x12
    8001481e:	67658593          	addi	a1,a1,1654 # 80026e90 <__func__.0+0x2d0>
    80014822:	e789                	bnez	a5,8001482c <software_interrupt_msi+0xbc4>
    80014824:	00012597          	auipc	a1,0x12
    80014828:	65c58593          	addi	a1,a1,1628 # 80026e80 <__func__.0+0x2c0>
    8001482c:	00012517          	auipc	a0,0x12
    80014830:	6a450513          	addi	a0,a0,1700 # 80026ed0 <__func__.0+0x310>
    80014834:	6d0100ef          	jal	80024f04 <printf>
    80014838:	00034797          	auipc	a5,0x34
    8001483c:	7d97c783          	lbu	a5,2009(a5) # 80049011 <excpt+0x1>
    80014840:	20079f63          	bnez	a5,80014a5e <software_interrupt_msi+0xdf6>
    80014844:	4529                	li	a0,10
    80014846:	4c80f0ef          	jal	80023d0e <putchar>
    8001484a:	c411                	beqz	s0,80014856 <software_interrupt_msi+0xbee>
    8001484c:	00034797          	auipc	a5,0x34
    80014850:	7c57c783          	lbu	a5,1989(a5) # 80049011 <excpt+0x1>
    80014854:	c79d                	beqz	a5,80014882 <software_interrupt_msi+0xc1a>
    80014856:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80014858:	00012597          	auipc	a1,0x12
    8001485c:	63858593          	addi	a1,a1,1592 # 80026e90 <__func__.0+0x2d0>
    80014860:	00012517          	auipc	a0,0x12
    80014864:	6d850513          	addi	a0,a0,1752 # 80026f38 <__func__.0+0x378>
    80014868:	69c100ef          	jal	80024f04 <printf>
    8001486c:	4511                	li	a0,4
    8001486e:	b88ec0ef          	jal	80000bf6 <goto_priv>
    80014872:	c3bec0ef          	jal	800014ac <reset_state>
}
    80014876:	60e2                	ld	ra,24(sp)
    80014878:	8522                	mv	a0,s0
    8001487a:	6442                	ld	s0,16(sp)
    8001487c:	64a2                	ld	s1,8(sp)
    8001487e:	6105                	addi	sp,sp,32
    80014880:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80014882:	4405                	li	s0,1
    TEST_END();
    80014884:	00012597          	auipc	a1,0x12
    80014888:	5fc58593          	addi	a1,a1,1532 # 80026e80 <__func__.0+0x2c0>
    8001488c:	bfd1                	j	80014860 <software_interrupt_msi+0xbf8>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    8001488e:	57fd                	li	a5,-1
    80014890:	6498                	ld	a4,8(s1)
    80014892:	17fe                	slli	a5,a5,0x3f
    80014894:	0789                	addi	a5,a5,2
    80014896:	f2f717e3          	bne	a4,a5,800147c4 <software_interrupt_msi+0xb5c>
    8001489a:	00034417          	auipc	s0,0x34
    8001489e:	77a42403          	lw	s0,1914(s0) # 80049014 <excpt+0x4>
    800148a2:	1475                	addi	s0,s0,-3
    800148a4:	00143413          	seqz	s0,s0
    800148a8:	bf31                	j	800147c4 <software_interrupt_msi+0xb5c>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800148aa:	57fd                	li	a5,-1
    800148ac:	6498                	ld	a4,8(s1)
    800148ae:	17fe                	slli	a5,a5,0x3f
    800148b0:	0789                	addi	a5,a5,2
    800148b2:	e4f71ee3          	bne	a4,a5,8001470e <software_interrupt_msi+0xaa6>
    800148b6:	00034417          	auipc	s0,0x34
    800148ba:	75e42403          	lw	s0,1886(s0) # 80049014 <excpt+0x4>
    800148be:	1471                	addi	s0,s0,-4
    800148c0:	00143413          	seqz	s0,s0
    800148c4:	b5a9                	j	8001470e <software_interrupt_msi+0xaa6>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800148c6:	57fd                	li	a5,-1
    800148c8:	6498                	ld	a4,8(s1)
    800148ca:	17fe                	slli	a5,a5,0x3f
    800148cc:	0789                	addi	a5,a5,2
    800148ce:	cef71ae3          	bne	a4,a5,800145c2 <software_interrupt_msi+0x95a>
    800148d2:	00034417          	auipc	s0,0x34
    800148d6:	74242403          	lw	s0,1858(s0) # 80049014 <excpt+0x4>
    800148da:	1475                	addi	s0,s0,-3
    800148dc:	00143413          	seqz	s0,s0
    800148e0:	b1cd                	j	800145c2 <software_interrupt_msi+0x95a>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800148e2:	57fd                	li	a5,-1
    800148e4:	6498                	ld	a4,8(s1)
    800148e6:	17fe                	slli	a5,a5,0x3f
    800148e8:	0789                	addi	a5,a5,2
    800148ea:	c0f71fe3          	bne	a4,a5,80014508 <software_interrupt_msi+0x8a0>
    800148ee:	00034417          	auipc	s0,0x34
    800148f2:	72642403          	lw	s0,1830(s0) # 80049014 <excpt+0x4>
    800148f6:	1471                	addi	s0,s0,-4
    800148f8:	00143413          	seqz	s0,s0
    800148fc:	b131                	j	80014508 <software_interrupt_msi+0x8a0>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    800148fe:	57fd                	li	a5,-1
    80014900:	6498                	ld	a4,8(s1)
    80014902:	17fe                	slli	a5,a5,0x3f
    80014904:	0789                	addi	a5,a5,2
    80014906:	aaf71be3          	bne	a4,a5,800143bc <software_interrupt_msi+0x754>
    8001490a:	00034417          	auipc	s0,0x34
    8001490e:	70a42403          	lw	s0,1802(s0) # 80049014 <excpt+0x4>
    80014912:	1475                	addi	s0,s0,-3
    80014914:	00143413          	seqz	s0,s0
    80014918:	b455                	j	800143bc <software_interrupt_msi+0x754>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8001491a:	57fd                	li	a5,-1
    8001491c:	6498                	ld	a4,8(s1)
    8001491e:	17fe                	slli	a5,a5,0x3f
    80014920:	0789                	addi	a5,a5,2
    80014922:	9ef711e3          	bne	a4,a5,80014304 <software_interrupt_msi+0x69c>
    80014926:	00034417          	auipc	s0,0x34
    8001492a:	6ee42403          	lw	s0,1774(s0) # 80049014 <excpt+0x4>
    8001492e:	1471                	addi	s0,s0,-4
    80014930:	00143413          	seqz	s0,s0
    80014934:	bac1                	j	80014304 <software_interrupt_msi+0x69c>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014936:	57fd                	li	a5,-1
    80014938:	6498                	ld	a4,8(s1)
    8001493a:	17fe                	slli	a5,a5,0x3f
    8001493c:	0789                	addi	a5,a5,2
    8001493e:	86f71de3          	bne	a4,a5,800141b8 <software_interrupt_msi+0x550>
    80014942:	00034417          	auipc	s0,0x34
    80014946:	6d242403          	lw	s0,1746(s0) # 80049014 <excpt+0x4>
    8001494a:	1475                	addi	s0,s0,-3
    8001494c:	00143413          	seqz	s0,s0
    80014950:	869ff06f          	j	800141b8 <software_interrupt_msi+0x550>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014954:	57fd                	li	a5,-1
    80014956:	6498                	ld	a4,8(s1)
    80014958:	17fe                	slli	a5,a5,0x3f
    8001495a:	0789                	addi	a5,a5,2
    8001495c:	faf71163          	bne	a4,a5,800140fe <software_interrupt_msi+0x496>
    80014960:	00034417          	auipc	s0,0x34
    80014964:	6b442403          	lw	s0,1716(s0) # 80049014 <excpt+0x4>
    80014968:	1471                	addi	s0,s0,-4
    8001496a:	00143413          	seqz	s0,s0
    8001496e:	f90ff06f          	j	800140fe <software_interrupt_msi+0x496>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80014972:	6480                	ld	s0,8(s1)
    80014974:	57f5                	li	a5,-3
    80014976:	8385                	srli	a5,a5,0x1
    80014978:	943e                	add	s0,s0,a5
    8001497a:	00143413          	seqz	s0,s0
    8001497e:	d24ff06f          	j	80013ea2 <software_interrupt_msi+0x23a>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014982:	00034717          	auipc	a4,0x34
    80014986:	69272703          	lw	a4,1682(a4) # 80049014 <excpt+0x4>
    8001498a:	4791                	li	a5,4
    8001498c:	d4f71ce3          	bne	a4,a5,800146e4 <software_interrupt_msi+0xa7c>
    80014990:	b3a5                	j	800146f8 <software_interrupt_msi+0xa90>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014992:	00034717          	auipc	a4,0x34
    80014996:	68272703          	lw	a4,1666(a4) # 80049014 <excpt+0x4>
    8001499a:	4791                	li	a5,4
    8001499c:	b8f71263          	bne	a4,a5,80013d20 <software_interrupt_msi+0xb8>
    800149a0:	b94ff06f          	j	80013d34 <software_interrupt_msi+0xcc>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800149a4:	00034717          	auipc	a4,0x34
    800149a8:	67072703          	lw	a4,1648(a4) # 80049014 <excpt+0x4>
    800149ac:	478d                	li	a5,3
    800149ae:	bef715e3          	bne	a4,a5,80014598 <software_interrupt_msi+0x930>
    800149b2:	beed                	j	800145ac <software_interrupt_msi+0x944>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    800149b4:	00034717          	auipc	a4,0x34
    800149b8:	66072703          	lw	a4,1632(a4) # 80049014 <excpt+0x4>
    800149bc:	478d                	li	a5,3
    800149be:	dcf71fe3          	bne	a4,a5,8001479c <software_interrupt_msi+0xb34>
    800149c2:	b3fd                	j	800147b0 <software_interrupt_msi+0xb48>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800149c4:	00034717          	auipc	a4,0x34
    800149c8:	65072703          	lw	a4,1616(a4) # 80049014 <excpt+0x4>
    800149cc:	478d                	li	a5,3
    800149ce:	fcf71063          	bne	a4,a5,8001418e <software_interrupt_msi+0x526>
    800149d2:	fd0ff06f          	j	800141a2 <software_interrupt_msi+0x53a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800149d6:	00034717          	auipc	a4,0x34
    800149da:	63e72703          	lw	a4,1598(a4) # 80049014 <excpt+0x4>
    800149de:	4791                	li	a5,4
    800149e0:	eef71a63          	bne	a4,a5,800140d4 <software_interrupt_msi+0x46c>
    800149e4:	f04ff06f          	j	800140e8 <software_interrupt_msi+0x480>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800149e8:	00034717          	auipc	a4,0x34
    800149ec:	62c72703          	lw	a4,1580(a4) # 80049014 <excpt+0x4>
    800149f0:	4791                	li	a5,4
    800149f2:	aef716e3          	bne	a4,a5,800144de <software_interrupt_msi+0x876>
    800149f6:	bcf5                	j	800144f2 <software_interrupt_msi+0x88a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800149f8:	00034717          	auipc	a4,0x34
    800149fc:	61c72703          	lw	a4,1564(a4) # 80049014 <excpt+0x4>
    80014a00:	4791                	li	a5,4
    80014a02:	8cf71ce3          	bne	a4,a5,800142da <software_interrupt_msi+0x672>
    80014a06:	b0e5                	j	800142ee <software_interrupt_msi+0x686>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80014a08:	00034717          	auipc	a4,0x34
    80014a0c:	60c72703          	lw	a4,1548(a4) # 80049014 <excpt+0x4>
    80014a10:	478d                	li	a5,3
    80014a12:	98f710e3          	bne	a4,a5,80014392 <software_interrupt_msi+0x72a>
    80014a16:	ba41                	j	800143a6 <software_interrupt_msi+0x73e>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80014a18:	00012517          	auipc	a0,0x12
    80014a1c:	4c050513          	addi	a0,a0,1216 # 80026ed8 <__func__.0+0x318>
    80014a20:	4e4100ef          	jal	80024f04 <printf>
    80014a24:	02900513          	li	a0,41
    80014a28:	2e60f0ef          	jal	80023d0e <putchar>
    80014a2c:	ba2ff06f          	j	80013dce <software_interrupt_msi+0x166>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80014a30:	00012517          	auipc	a0,0x12
    80014a34:	4a850513          	addi	a0,a0,1192 # 80026ed8 <__func__.0+0x318>
    80014a38:	4cc100ef          	jal	80024f04 <printf>
    80014a3c:	02900513          	li	a0,41
    80014a40:	2ce0f0ef          	jal	80023d0e <putchar>
    80014a44:	befd                	j	80014642 <software_interrupt_msi+0x9da>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80014a46:	00012517          	auipc	a0,0x12
    80014a4a:	49250513          	addi	a0,a0,1170 # 80026ed8 <__func__.0+0x318>
    80014a4e:	4b6100ef          	jal	80024f04 <printf>
    80014a52:	02900513          	li	a0,41
    80014a56:	2b80f0ef          	jal	80023d0e <putchar>
    80014a5a:	cc0ff06f          	j	80013f1a <software_interrupt_msi+0x2b2>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80014a5e:	00012517          	auipc	a0,0x12
    80014a62:	47a50513          	addi	a0,a0,1146 # 80026ed8 <__func__.0+0x318>
    80014a66:	49e100ef          	jal	80024f04 <printf>
    80014a6a:	02900513          	li	a0,41
    80014a6e:	2a00f0ef          	jal	80023d0e <putchar>
    80014a72:	bbc9                	j	80014844 <software_interrupt_msi+0xbdc>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80014a74:	00012517          	auipc	a0,0x12
    80014a78:	46450513          	addi	a0,a0,1124 # 80026ed8 <__func__.0+0x318>
    80014a7c:	488100ef          	jal	80024f04 <printf>
    80014a80:	02900513          	li	a0,41
    80014a84:	28a0f0ef          	jal	80023d0e <putchar>
    80014a88:	ba55                	j	8001443c <software_interrupt_msi+0x7d4>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80014a8a:	00012517          	auipc	a0,0x12
    80014a8e:	44e50513          	addi	a0,a0,1102 # 80026ed8 <__func__.0+0x318>
    80014a92:	472100ef          	jal	80024f04 <printf>
    80014a96:	02900513          	li	a0,41
    80014a9a:	2740f0ef          	jal	80023d0e <putchar>
    80014a9e:	f9aff06f          	j	80014238 <software_interrupt_msi+0x5d0>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80014aa2:	00012517          	auipc	a0,0x12
    80014aa6:	43650513          	addi	a0,a0,1078 # 80026ed8 <__func__.0+0x318>
    80014aaa:	45a100ef          	jal	80024f04 <printf>
    80014aae:	02900513          	li	a0,41
    80014ab2:	25c0f0ef          	jal	80023d0e <putchar>
    80014ab6:	d7cff06f          	j	80014032 <software_interrupt_msi+0x3ca>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80014aba:	00012517          	auipc	a0,0x12
    80014abe:	41e50513          	addi	a0,a0,1054 # 80026ed8 <__func__.0+0x318>
    80014ac2:	442100ef          	jal	80024f04 <printf>
    80014ac6:	02900513          	li	a0,41
    80014aca:	2440f0ef          	jal	80023d0e <putchar>
    80014ace:	cd8ff06f          	j	80013fa6 <software_interrupt_msi+0x33e>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80014ad2:	00034717          	auipc	a4,0x34
    80014ad6:	54272703          	lw	a4,1346(a4) # 80049014 <excpt+0x4>
    80014ada:	478d                	li	a5,3
    80014adc:	00012597          	auipc	a1,0x12
    80014ae0:	3a458593          	addi	a1,a1,932 # 80026e80 <__func__.0+0x2c0>
    80014ae4:	88f706e3          	beq	a4,a5,80014370 <software_interrupt_msi+0x708>
    80014ae8:	00012597          	auipc	a1,0x12
    80014aec:	3a858593          	addi	a1,a1,936 # 80026e90 <__func__.0+0x2d0>
    80014af0:	881ff06f          	j	80014370 <software_interrupt_msi+0x708>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014af4:	00034717          	auipc	a4,0x34
    80014af8:	52072703          	lw	a4,1312(a4) # 80049014 <excpt+0x4>
    80014afc:	4791                	li	a5,4
    80014afe:	00012597          	auipc	a1,0x12
    80014b02:	38258593          	addi	a1,a1,898 # 80026e80 <__func__.0+0x2c0>
    80014b06:	baf70ee3          	beq	a4,a5,800146c2 <software_interrupt_msi+0xa5a>
    80014b0a:	00012597          	auipc	a1,0x12
    80014b0e:	38658593          	addi	a1,a1,902 # 80026e90 <__func__.0+0x2d0>
    80014b12:	be45                	j	800146c2 <software_interrupt_msi+0xa5a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014b14:	00034717          	auipc	a4,0x34
    80014b18:	50072703          	lw	a4,1280(a4) # 80049014 <excpt+0x4>
    80014b1c:	4791                	li	a5,4
    80014b1e:	00012597          	auipc	a1,0x12
    80014b22:	36258593          	addi	a1,a1,866 # 80026e80 <__func__.0+0x2c0>
    80014b26:	00f71463          	bne	a4,a5,80014b2e <software_interrupt_msi+0xec6>
    80014b2a:	9d4ff06f          	j	80013cfe <software_interrupt_msi+0x96>
    80014b2e:	00012597          	auipc	a1,0x12
    80014b32:	36258593          	addi	a1,a1,866 # 80026e90 <__func__.0+0x2d0>
    80014b36:	9c8ff06f          	j	80013cfe <software_interrupt_msi+0x96>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80014b3a:	00034717          	auipc	a4,0x34
    80014b3e:	4da72703          	lw	a4,1242(a4) # 80049014 <excpt+0x4>
    80014b42:	4791                	li	a5,4
    80014b44:	00012597          	auipc	a1,0x12
    80014b48:	33c58593          	addi	a1,a1,828 # 80026e80 <__func__.0+0x2c0>
    80014b4c:	f6f70663          	beq	a4,a5,800142b8 <software_interrupt_msi+0x650>
    80014b50:	00012597          	auipc	a1,0x12
    80014b54:	34058593          	addi	a1,a1,832 # 80026e90 <__func__.0+0x2d0>
    80014b58:	f60ff06f          	j	800142b8 <software_interrupt_msi+0x650>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014b5c:	00034717          	auipc	a4,0x34
    80014b60:	4b872703          	lw	a4,1208(a4) # 80049014 <excpt+0x4>
    80014b64:	4791                	li	a5,4
    80014b66:	00012597          	auipc	a1,0x12
    80014b6a:	31a58593          	addi	a1,a1,794 # 80026e80 <__func__.0+0x2c0>
    80014b6e:	94f707e3          	beq	a4,a5,800144bc <software_interrupt_msi+0x854>
    80014b72:	00012597          	auipc	a1,0x12
    80014b76:	31e58593          	addi	a1,a1,798 # 80026e90 <__func__.0+0x2d0>
    80014b7a:	b289                	j	800144bc <software_interrupt_msi+0x854>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014b7c:	00034717          	auipc	a4,0x34
    80014b80:	49872703          	lw	a4,1176(a4) # 80049014 <excpt+0x4>
    80014b84:	4791                	li	a5,4
    80014b86:	00012597          	auipc	a1,0x12
    80014b8a:	2fa58593          	addi	a1,a1,762 # 80026e80 <__func__.0+0x2c0>
    80014b8e:	d2f70263          	beq	a4,a5,800140b2 <software_interrupt_msi+0x44a>
    80014b92:	00012597          	auipc	a1,0x12
    80014b96:	2fe58593          	addi	a1,a1,766 # 80026e90 <__func__.0+0x2d0>
    80014b9a:	d18ff06f          	j	800140b2 <software_interrupt_msi+0x44a>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014b9e:	00034717          	auipc	a4,0x34
    80014ba2:	47672703          	lw	a4,1142(a4) # 80049014 <excpt+0x4>
    80014ba6:	478d                	li	a5,3
    80014ba8:	00012597          	auipc	a1,0x12
    80014bac:	2d858593          	addi	a1,a1,728 # 80026e80 <__func__.0+0x2c0>
    80014bb0:	daf70e63          	beq	a4,a5,8001416c <software_interrupt_msi+0x504>
    80014bb4:	00012597          	auipc	a1,0x12
    80014bb8:	2dc58593          	addi	a1,a1,732 # 80026e90 <__func__.0+0x2d0>
    80014bbc:	db0ff06f          	j	8001416c <software_interrupt_msi+0x504>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80014bc0:	00034717          	auipc	a4,0x34
    80014bc4:	45472703          	lw	a4,1108(a4) # 80049014 <excpt+0x4>
    80014bc8:	478d                	li	a5,3
    80014bca:	00012597          	auipc	a1,0x12
    80014bce:	2b658593          	addi	a1,a1,694 # 80026e80 <__func__.0+0x2c0>
    80014bd2:	baf704e3          	beq	a4,a5,8001477a <software_interrupt_msi+0xb12>
    80014bd6:	00012597          	auipc	a1,0x12
    80014bda:	2ba58593          	addi	a1,a1,698 # 80026e90 <__func__.0+0x2d0>
    80014bde:	be71                	j	8001477a <software_interrupt_msi+0xb12>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80014be0:	00034717          	auipc	a4,0x34
    80014be4:	43472703          	lw	a4,1076(a4) # 80049014 <excpt+0x4>
    80014be8:	478d                	li	a5,3
    80014bea:	00012597          	auipc	a1,0x12
    80014bee:	29658593          	addi	a1,a1,662 # 80026e80 <__func__.0+0x2c0>
    80014bf2:	98f702e3          	beq	a4,a5,80014576 <software_interrupt_msi+0x90e>
    80014bf6:	00012597          	auipc	a1,0x12
    80014bfa:	29a58593          	addi	a1,a1,666 # 80026e90 <__func__.0+0x2d0>
    80014bfe:	baa5                	j	80014576 <software_interrupt_msi+0x90e>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80014c00:	00034417          	auipc	s0,0x34
    80014c04:	41442403          	lw	s0,1044(s0) # 80049014 <excpt+0x4>
    80014c08:	1471                	addi	s0,s0,-4
    80014c0a:	00143413          	seqz	s0,s0
    80014c0e:	948ff06f          	j	80013d56 <software_interrupt_msi+0xee>

0000000080014c12 <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    80014c12:	1101                	addi	sp,sp,-32

    TEST_START();
    80014c14:	00011597          	auipc	a1,0x11
    80014c18:	0b458593          	addi	a1,a1,180 # 80025cc8 <__func__.1>
    80014c1c:	00012517          	auipc	a0,0x12
    80014c20:	28450513          	addi	a0,a0,644 # 80026ea0 <__func__.0+0x2e0>
bool software_interrupt_ssi() {
    80014c24:	ec06                	sd	ra,24(sp)
    80014c26:	e822                	sd	s0,16(sp)
    80014c28:	e426                	sd	s1,8(sp)
    TEST_START();
    80014c2a:	2da100ef          	jal	80024f04 <printf>
    80014c2e:	4529                	li	a0,10
    80014c30:	0de0f0ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80014c34:	0330000f          	fence	rw,rw
    80014c38:	00034497          	auipc	s1,0x34
    80014c3c:	3d848493          	addi	s1,s1,984 # 80049010 <excpt>
    80014c40:	4785                	li	a5,1
    80014c42:	00034717          	auipc	a4,0x34
    80014c46:	40073323          	sd	zero,1030(a4) # 80049048 <excpt+0x38>
    80014c4a:	00f49023          	sh	a5,0(s1)
    80014c4e:	0330000f          	fence	rw,rw

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    80014c52:	4511                	li	a0,4
    80014c54:	fa3eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80014c58:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80014c5c:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80014c60:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80014c64:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80014c68:	450d                	li	a0,3
    80014c6a:	f8deb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014c6e:	08200593          	li	a1,130
    80014c72:	00017617          	auipc	a2,0x17
    80014c76:	c0660613          	addi	a2,a2,-1018 # 8002b878 <__func__.0+0x4cb8>
    80014c7a:	00012517          	auipc	a0,0x12
    80014c7e:	23e50513          	addi	a0,a0,574 # 80026eb8 <__func__.0+0x2f8>
    80014c82:	282100ef          	jal	80024f04 <printf>
    80014c86:	00034797          	auipc	a5,0x34
    80014c8a:	38b7c783          	lbu	a5,907(a5) # 80049011 <excpt+0x1>
    80014c8e:	00012597          	auipc	a1,0x12
    80014c92:	20258593          	addi	a1,a1,514 # 80026e90 <__func__.0+0x2d0>
    80014c96:	c799                	beqz	a5,80014ca4 <software_interrupt_ssi+0x92>
    80014c98:	57fd                	li	a5,-1
    80014c9a:	6498                	ld	a4,8(s1)
    80014c9c:	17fe                	slli	a5,a5,0x3f
    80014c9e:	0785                	addi	a5,a5,1
    80014ca0:	36f705e3          	beq	a4,a5,8001580a <software_interrupt_ssi+0xbf8>
    80014ca4:	00012517          	auipc	a0,0x12
    80014ca8:	22c50513          	addi	a0,a0,556 # 80026ed0 <__func__.0+0x310>
    80014cac:	258100ef          	jal	80024f04 <printf>
    80014cb0:	00034797          	auipc	a5,0x34
    80014cb4:	3617c783          	lbu	a5,865(a5) # 80049011 <excpt+0x1>
    80014cb8:	c799                	beqz	a5,80014cc6 <software_interrupt_ssi+0xb4>
    80014cba:	57fd                	li	a5,-1
    80014cbc:	6498                	ld	a4,8(s1)
    80014cbe:	17fe                	slli	a5,a5,0x3f
    80014cc0:	0785                	addi	a5,a5,1
    80014cc2:	18f70be3          	beq	a4,a5,80015658 <software_interrupt_ssi+0xa46>
    80014cc6:	00012517          	auipc	a0,0x12
    80014cca:	21250513          	addi	a0,a0,530 # 80026ed8 <__func__.0+0x318>
    80014cce:	236100ef          	jal	80024f04 <printf>
    80014cd2:	02900513          	li	a0,41
    80014cd6:	0380f0ef          	jal	80023d0e <putchar>
    80014cda:	4529                	li	a0,10
    80014cdc:	0320f0ef          	jal	80023d0e <putchar>
    80014ce0:	00034797          	auipc	a5,0x34
    80014ce4:	3317c783          	lbu	a5,817(a5) # 80049011 <excpt+0x1>
    80014ce8:	4401                	li	s0,0
    80014cea:	c799                	beqz	a5,80014cf8 <software_interrupt_ssi+0xe6>
    80014cec:	57fd                	li	a5,-1
    80014cee:	6498                	ld	a4,8(s1)
    80014cf0:	17fe                	slli	a5,a5,0x3f
    80014cf2:	0785                	addi	a5,a5,1
    80014cf4:	28f700e3          	beq	a4,a5,80015774 <software_interrupt_ssi+0xb62>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80014cf8:	0330000f          	fence	rw,rw
    80014cfc:	4785                	li	a5,1
    80014cfe:	00034717          	auipc	a4,0x34
    80014d02:	34073523          	sd	zero,842(a4) # 80049048 <excpt+0x38>
    80014d06:	00f49023          	sh	a5,0(s1)
    80014d0a:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014d0e:	4511                	li	a0,4
    80014d10:	ee7eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014d14:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80014d18:	57fd                	li	a5,-1
    80014d1a:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014d1e:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80014d22:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80014d26:	450d                	li	a0,3
    80014d28:	ecfeb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014d2c:	08200593          	li	a1,130
    80014d30:	00017617          	auipc	a2,0x17
    80014d34:	bb860613          	addi	a2,a2,-1096 # 8002b8e8 <__func__.0+0x4d28>
    80014d38:	00012517          	auipc	a0,0x12
    80014d3c:	18050513          	addi	a0,a0,384 # 80026eb8 <__func__.0+0x2f8>
    80014d40:	1c4100ef          	jal	80024f04 <printf>
    80014d44:	00034797          	auipc	a5,0x34
    80014d48:	2cd7c783          	lbu	a5,717(a5) # 80049011 <excpt+0x1>
    80014d4c:	00012597          	auipc	a1,0x12
    80014d50:	14458593          	addi	a1,a1,324 # 80026e90 <__func__.0+0x2d0>
    80014d54:	c799                	beqz	a5,80014d62 <software_interrupt_ssi+0x150>
    80014d56:	57fd                	li	a5,-1
    80014d58:	6498                	ld	a4,8(s1)
    80014d5a:	17fe                	slli	a5,a5,0x3f
    80014d5c:	0785                	addi	a5,a5,1
    80014d5e:	22f704e3          	beq	a4,a5,80015786 <software_interrupt_ssi+0xb74>
    80014d62:	00012517          	auipc	a0,0x12
    80014d66:	16e50513          	addi	a0,a0,366 # 80026ed0 <__func__.0+0x310>
    80014d6a:	19a100ef          	jal	80024f04 <printf>
    80014d6e:	00034797          	auipc	a5,0x34
    80014d72:	2a37c783          	lbu	a5,675(a5) # 80049011 <excpt+0x1>
    80014d76:	c799                	beqz	a5,80014d84 <software_interrupt_ssi+0x172>
    80014d78:	57fd                	li	a5,-1
    80014d7a:	6498                	ld	a4,8(s1)
    80014d7c:	17fe                	slli	a5,a5,0x3f
    80014d7e:	0785                	addi	a5,a5,1
    80014d80:	0cf703e3          	beq	a4,a5,80015646 <software_interrupt_ssi+0xa34>
    80014d84:	00012517          	auipc	a0,0x12
    80014d88:	15450513          	addi	a0,a0,340 # 80026ed8 <__func__.0+0x318>
    80014d8c:	178100ef          	jal	80024f04 <printf>
    80014d90:	02900513          	li	a0,41
    80014d94:	77b0e0ef          	jal	80023d0e <putchar>
    80014d98:	4529                	li	a0,10
    80014d9a:	7750e0ef          	jal	80023d0e <putchar>
    80014d9e:	c801                	beqz	s0,80014dae <software_interrupt_ssi+0x19c>
    80014da0:	00034797          	auipc	a5,0x34
    80014da4:	2717c783          	lbu	a5,625(a5) # 80049011 <excpt+0x1>
    80014da8:	4401                	li	s0,0
    80014daa:	06079fe3          	bnez	a5,80015628 <software_interrupt_ssi+0xa16>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014dae:	0330000f          	fence	rw,rw
    80014db2:	4785                	li	a5,1
    80014db4:	00034717          	auipc	a4,0x34
    80014db8:	28073a23          	sd	zero,660(a4) # 80049048 <excpt+0x38>
    80014dbc:	00f49023          	sh	a5,0(s1)
    80014dc0:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014dc4:	4511                	li	a0,4
    80014dc6:	e31eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014dca:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014dce:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80014dd2:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80014dd6:	450d                	li	a0,3
    80014dd8:	e1feb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80014ddc:	08200593          	li	a1,130
    80014de0:	00017617          	auipc	a2,0x17
    80014de4:	b7860613          	addi	a2,a2,-1160 # 8002b958 <__func__.0+0x4d98>
    80014de8:	00012517          	auipc	a0,0x12
    80014dec:	0d050513          	addi	a0,a0,208 # 80026eb8 <__func__.0+0x2f8>
    80014df0:	114100ef          	jal	80024f04 <printf>
    80014df4:	00034797          	auipc	a5,0x34
    80014df8:	21d7c783          	lbu	a5,541(a5) # 80049011 <excpt+0x1>
    80014dfc:	00012597          	auipc	a1,0x12
    80014e00:	09458593          	addi	a1,a1,148 # 80026e90 <__func__.0+0x2d0>
    80014e04:	e789                	bnez	a5,80014e0e <software_interrupt_ssi+0x1fc>
    80014e06:	00012597          	auipc	a1,0x12
    80014e0a:	07a58593          	addi	a1,a1,122 # 80026e80 <__func__.0+0x2c0>
    80014e0e:	00012517          	auipc	a0,0x12
    80014e12:	0c250513          	addi	a0,a0,194 # 80026ed0 <__func__.0+0x310>
    80014e16:	0ee100ef          	jal	80024f04 <printf>
    80014e1a:	00034797          	auipc	a5,0x34
    80014e1e:	1f77c783          	lbu	a5,503(a5) # 80049011 <excpt+0x1>
    80014e22:	0c0791e3          	bnez	a5,800156e4 <software_interrupt_ssi+0xad2>
    80014e26:	4529                	li	a0,10
    80014e28:	6e70e0ef          	jal	80023d0e <putchar>
    80014e2c:	c419                	beqz	s0,80014e3a <software_interrupt_ssi+0x228>
    80014e2e:	00034417          	auipc	s0,0x34
    80014e32:	1e344403          	lbu	s0,483(s0) # 80049011 <excpt+0x1>
    80014e36:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    80014e3a:	0330000f          	fence	rw,rw
    80014e3e:	4785                	li	a5,1
    80014e40:	00034717          	auipc	a4,0x34
    80014e44:	20073423          	sd	zero,520(a4) # 80049048 <excpt+0x38>
    80014e48:	00f49023          	sh	a5,0(s1)
    80014e4c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014e50:	4511                	li	a0,4
    80014e52:	da5eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014e56:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    80014e5a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80014e5e:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014e62:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014e66:	450d                	li	a0,3
    80014e68:	d8feb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014e6c:	08200593          	li	a1,130
    80014e70:	00017617          	auipc	a2,0x17
    80014e74:	b4060613          	addi	a2,a2,-1216 # 8002b9b0 <__func__.0+0x4df0>
    80014e78:	00012517          	auipc	a0,0x12
    80014e7c:	04050513          	addi	a0,a0,64 # 80026eb8 <__func__.0+0x2f8>
    80014e80:	084100ef          	jal	80024f04 <printf>
    80014e84:	00034797          	auipc	a5,0x34
    80014e88:	18d7c783          	lbu	a5,397(a5) # 80049011 <excpt+0x1>
    80014e8c:	00012597          	auipc	a1,0x12
    80014e90:	00458593          	addi	a1,a1,4 # 80026e90 <__func__.0+0x2d0>
    80014e94:	c799                	beqz	a5,80014ea2 <software_interrupt_ssi+0x290>
    80014e96:	57fd                	li	a5,-1
    80014e98:	6498                	ld	a4,8(s1)
    80014e9a:	17fe                	slli	a5,a5,0x3f
    80014e9c:	0785                	addi	a5,a5,1
    80014e9e:	10f705e3          	beq	a4,a5,800157a8 <software_interrupt_ssi+0xb96>
    80014ea2:	00012517          	auipc	a0,0x12
    80014ea6:	02e50513          	addi	a0,a0,46 # 80026ed0 <__func__.0+0x310>
    80014eaa:	05a100ef          	jal	80024f04 <printf>
    80014eae:	00034797          	auipc	a5,0x34
    80014eb2:	1637c783          	lbu	a5,355(a5) # 80049011 <excpt+0x1>
    80014eb6:	c799                	beqz	a5,80014ec4 <software_interrupt_ssi+0x2b2>
    80014eb8:	57fd                	li	a5,-1
    80014eba:	6498                	ld	a4,8(s1)
    80014ebc:	17fe                	slli	a5,a5,0x3f
    80014ebe:	0785                	addi	a5,a5,1
    80014ec0:	7cf70d63          	beq	a4,a5,8001569a <software_interrupt_ssi+0xa88>
    80014ec4:	00012517          	auipc	a0,0x12
    80014ec8:	01450513          	addi	a0,a0,20 # 80026ed8 <__func__.0+0x318>
    80014ecc:	038100ef          	jal	80024f04 <printf>
    80014ed0:	02900513          	li	a0,41
    80014ed4:	63b0e0ef          	jal	80023d0e <putchar>
    80014ed8:	4529                	li	a0,10
    80014eda:	6350e0ef          	jal	80023d0e <putchar>
    80014ede:	c801                	beqz	s0,80014eee <software_interrupt_ssi+0x2dc>
    80014ee0:	00034797          	auipc	a5,0x34
    80014ee4:	1317c783          	lbu	a5,305(a5) # 80049011 <excpt+0x1>
    80014ee8:	4401                	li	s0,0
    80014eea:	72079063          	bnez	a5,8001560a <software_interrupt_ssi+0x9f8>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    80014eee:	0330000f          	fence	rw,rw
    80014ef2:	4785                	li	a5,1
    80014ef4:	00034717          	auipc	a4,0x34
    80014ef8:	14073a23          	sd	zero,340(a4) # 80049048 <excpt+0x38>
    80014efc:	00f49023          	sh	a5,0(s1)
    80014f00:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014f04:	4511                	li	a0,4
    80014f06:	cf1eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014f0a:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80014f0e:	57fd                	li	a5,-1
    80014f10:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80014f14:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014f18:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014f1c:	450d                	li	a0,3
    80014f1e:	cd9eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014f22:	08200593          	li	a1,130
    80014f26:	00017617          	auipc	a2,0x17
    80014f2a:	afa60613          	addi	a2,a2,-1286 # 8002ba20 <__func__.0+0x4e60>
    80014f2e:	00012517          	auipc	a0,0x12
    80014f32:	f8a50513          	addi	a0,a0,-118 # 80026eb8 <__func__.0+0x2f8>
    80014f36:	7cf0f0ef          	jal	80024f04 <printf>
    80014f3a:	00034797          	auipc	a5,0x34
    80014f3e:	0d77c783          	lbu	a5,215(a5) # 80049011 <excpt+0x1>
    80014f42:	00012597          	auipc	a1,0x12
    80014f46:	f4e58593          	addi	a1,a1,-178 # 80026e90 <__func__.0+0x2d0>
    80014f4a:	c799                	beqz	a5,80014f58 <software_interrupt_ssi+0x346>
    80014f4c:	57fd                	li	a5,-1
    80014f4e:	6498                	ld	a4,8(s1)
    80014f50:	17fe                	slli	a5,a5,0x3f
    80014f52:	0785                	addi	a5,a5,1
    80014f54:	0cf70ce3          	beq	a4,a5,8001582c <software_interrupt_ssi+0xc1a>
    80014f58:	00012517          	auipc	a0,0x12
    80014f5c:	f7850513          	addi	a0,a0,-136 # 80026ed0 <__func__.0+0x310>
    80014f60:	7a50f0ef          	jal	80024f04 <printf>
    80014f64:	00034797          	auipc	a5,0x34
    80014f68:	0ad7c783          	lbu	a5,173(a5) # 80049011 <excpt+0x1>
    80014f6c:	c799                	beqz	a5,80014f7a <software_interrupt_ssi+0x368>
    80014f6e:	57fd                	li	a5,-1
    80014f70:	6498                	ld	a4,8(s1)
    80014f72:	17fe                	slli	a5,a5,0x3f
    80014f74:	0785                	addi	a5,a5,1
    80014f76:	72f70b63          	beq	a4,a5,800156ac <software_interrupt_ssi+0xa9a>
    80014f7a:	00012517          	auipc	a0,0x12
    80014f7e:	f5e50513          	addi	a0,a0,-162 # 80026ed8 <__func__.0+0x318>
    80014f82:	7830f0ef          	jal	80024f04 <printf>
    80014f86:	02900513          	li	a0,41
    80014f8a:	5850e0ef          	jal	80023d0e <putchar>
    80014f8e:	4529                	li	a0,10
    80014f90:	57f0e0ef          	jal	80023d0e <putchar>
    80014f94:	c801                	beqz	s0,80014fa4 <software_interrupt_ssi+0x392>
    80014f96:	00034797          	auipc	a5,0x34
    80014f9a:	07b7c783          	lbu	a5,123(a5) # 80049011 <excpt+0x1>
    80014f9e:	4401                	li	s0,0
    80014fa0:	64079763          	bnez	a5,800155ee <software_interrupt_ssi+0x9dc>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80014fa4:	0330000f          	fence	rw,rw
    80014fa8:	4785                	li	a5,1
    80014faa:	00034717          	auipc	a4,0x34
    80014fae:	08073f23          	sd	zero,158(a4) # 80049048 <excpt+0x38>
    80014fb2:	00f49023          	sh	a5,0(s1)
    80014fb6:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80014fba:	4511                	li	a0,4
    80014fbc:	c3beb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014fc0:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80014fc4:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014fc8:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014fcc:	450d                	li	a0,3
    80014fce:	c29eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80014fd2:	08200593          	li	a1,130
    80014fd6:	00017617          	auipc	a2,0x17
    80014fda:	aaa60613          	addi	a2,a2,-1366 # 8002ba80 <__func__.0+0x4ec0>
    80014fde:	00012517          	auipc	a0,0x12
    80014fe2:	eda50513          	addi	a0,a0,-294 # 80026eb8 <__func__.0+0x2f8>
    80014fe6:	71f0f0ef          	jal	80024f04 <printf>
    80014fea:	00034797          	auipc	a5,0x34
    80014fee:	0277c783          	lbu	a5,39(a5) # 80049011 <excpt+0x1>
    80014ff2:	00012597          	auipc	a1,0x12
    80014ff6:	e9e58593          	addi	a1,a1,-354 # 80026e90 <__func__.0+0x2d0>
    80014ffa:	e789                	bnez	a5,80015004 <software_interrupt_ssi+0x3f2>
    80014ffc:	00012597          	auipc	a1,0x12
    80015000:	e8458593          	addi	a1,a1,-380 # 80026e80 <__func__.0+0x2c0>
    80015004:	00012517          	auipc	a0,0x12
    80015008:	ecc50513          	addi	a0,a0,-308 # 80026ed0 <__func__.0+0x310>
    8001500c:	6f90f0ef          	jal	80024f04 <printf>
    80015010:	00034797          	auipc	a5,0x34
    80015014:	0017c783          	lbu	a5,1(a5) # 80049011 <excpt+0x1>
    80015018:	6e079d63          	bnez	a5,80015712 <software_interrupt_ssi+0xb00>
    8001501c:	4529                	li	a0,10
    8001501e:	4f10e0ef          	jal	80023d0e <putchar>
    80015022:	c419                	beqz	s0,80015030 <software_interrupt_ssi+0x41e>
    80015024:	00034417          	auipc	s0,0x34
    80015028:	fed44403          	lbu	s0,-19(s0) # 80049011 <excpt+0x1>
    8001502c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80015030:	0330000f          	fence	rw,rw
    80015034:	4785                	li	a5,1
    80015036:	00034717          	auipc	a4,0x34
    8001503a:	00073923          	sd	zero,18(a4) # 80049048 <excpt+0x38>
    8001503e:	00f49023          	sh	a5,0(s1)
    80015042:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80015046:	4511                	li	a0,4
    80015048:	bafeb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001504c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80015050:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80015054:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80015058:	450d                	li	a0,3
    8001505a:	b9deb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001505e:	08200593          	li	a1,130
    80015062:	00017617          	auipc	a2,0x17
    80015066:	a6e60613          	addi	a2,a2,-1426 # 8002bad0 <__func__.0+0x4f10>
    8001506a:	00012517          	auipc	a0,0x12
    8001506e:	e4e50513          	addi	a0,a0,-434 # 80026eb8 <__func__.0+0x2f8>
    80015072:	6930f0ef          	jal	80024f04 <printf>
    80015076:	00034797          	auipc	a5,0x34
    8001507a:	f9b7c783          	lbu	a5,-101(a5) # 80049011 <excpt+0x1>
    8001507e:	00012597          	auipc	a1,0x12
    80015082:	e1258593          	addi	a1,a1,-494 # 80026e90 <__func__.0+0x2d0>
    80015086:	e789                	bnez	a5,80015090 <software_interrupt_ssi+0x47e>
    80015088:	00012597          	auipc	a1,0x12
    8001508c:	df858593          	addi	a1,a1,-520 # 80026e80 <__func__.0+0x2c0>
    80015090:	00012517          	auipc	a0,0x12
    80015094:	e4050513          	addi	a0,a0,-448 # 80026ed0 <__func__.0+0x310>
    80015098:	66d0f0ef          	jal	80024f04 <printf>
    8001509c:	00034797          	auipc	a5,0x34
    800150a0:	f757c783          	lbu	a5,-139(a5) # 80049011 <excpt+0x1>
    800150a4:	64079c63          	bnez	a5,800156fc <software_interrupt_ssi+0xaea>
    800150a8:	4529                	li	a0,10
    800150aa:	4650e0ef          	jal	80023d0e <putchar>
    800150ae:	c419                	beqz	s0,800150bc <software_interrupt_ssi+0x4aa>
    800150b0:	00034417          	auipc	s0,0x34
    800150b4:	f6144403          	lbu	s0,-159(s0) # 80049011 <excpt+0x1>
    800150b8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    800150bc:	0330000f          	fence	rw,rw
    800150c0:	4785                	li	a5,1
    800150c2:	00034717          	auipc	a4,0x34
    800150c6:	f8073323          	sd	zero,-122(a4) # 80049048 <excpt+0x38>
    800150ca:	00f49023          	sh	a5,0(s1)
    800150ce:	0330000f          	fence	rw,rw
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    800150d2:	0330000f          	fence	rw,rw
    800150d6:	00034717          	auipc	a4,0x34
    800150da:	f6073923          	sd	zero,-142(a4) # 80049048 <excpt+0x38>
    800150de:	00f49023          	sh	a5,0(s1)
    800150e2:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800150e6:	4511                	li	a0,4
    800150e8:	b0feb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    800150ec:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    800150f0:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    800150f4:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800150f8:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800150fc:	4509                	li	a0,2
    800150fe:	af9eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015102:	08200593          	li	a1,130
    80015106:	00017617          	auipc	a2,0x17
    8001510a:	a1a60613          	addi	a2,a2,-1510 # 8002bb20 <__func__.0+0x4f60>
    8001510e:	00012517          	auipc	a0,0x12
    80015112:	daa50513          	addi	a0,a0,-598 # 80026eb8 <__func__.0+0x2f8>
    80015116:	5ef0f0ef          	jal	80024f04 <printf>
    8001511a:	00034797          	auipc	a5,0x34
    8001511e:	ef77c783          	lbu	a5,-265(a5) # 80049011 <excpt+0x1>
    80015122:	00012597          	auipc	a1,0x12
    80015126:	d6e58593          	addi	a1,a1,-658 # 80026e90 <__func__.0+0x2d0>
    8001512a:	c799                	beqz	a5,80015138 <software_interrupt_ssi+0x526>
    8001512c:	57fd                	li	a5,-1
    8001512e:	6498                	ld	a4,8(s1)
    80015130:	17fe                	slli	a5,a5,0x3f
    80015132:	0785                	addi	a5,a5,1
    80015134:	70f70d63          	beq	a4,a5,8001584e <software_interrupt_ssi+0xc3c>
    80015138:	00012517          	auipc	a0,0x12
    8001513c:	d9850513          	addi	a0,a0,-616 # 80026ed0 <__func__.0+0x310>
    80015140:	5c50f0ef          	jal	80024f04 <printf>
    80015144:	00034797          	auipc	a5,0x34
    80015148:	ecd7c783          	lbu	a5,-307(a5) # 80049011 <excpt+0x1>
    8001514c:	c799                	beqz	a5,8001515a <software_interrupt_ssi+0x548>
    8001514e:	57fd                	li	a5,-1
    80015150:	6498                	ld	a4,8(s1)
    80015152:	17fe                	slli	a5,a5,0x3f
    80015154:	0785                	addi	a5,a5,1
    80015156:	50f70a63          	beq	a4,a5,8001566a <software_interrupt_ssi+0xa58>
    8001515a:	00012517          	auipc	a0,0x12
    8001515e:	d7e50513          	addi	a0,a0,-642 # 80026ed8 <__func__.0+0x318>
    80015162:	5a30f0ef          	jal	80024f04 <printf>
    80015166:	02900513          	li	a0,41
    8001516a:	3a50e0ef          	jal	80023d0e <putchar>
    8001516e:	4529                	li	a0,10
    80015170:	39f0e0ef          	jal	80023d0e <putchar>
    80015174:	c801                	beqz	s0,80015184 <software_interrupt_ssi+0x572>
    80015176:	00034797          	auipc	a5,0x34
    8001517a:	e9b7c783          	lbu	a5,-357(a5) # 80049011 <excpt+0x1>
    8001517e:	4401                	li	s0,0
    80015180:	44079963          	bnez	a5,800155d2 <software_interrupt_ssi+0x9c0>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80015184:	0330000f          	fence	rw,rw
    80015188:	4785                	li	a5,1
    8001518a:	00034717          	auipc	a4,0x34
    8001518e:	ea073f23          	sd	zero,-322(a4) # 80049048 <excpt+0x38>
    80015192:	00f49023          	sh	a5,0(s1)
    80015196:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001519a:	4511                	li	a0,4
    8001519c:	a5beb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800151a0:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800151a4:	57fd                	li	a5,-1
    800151a6:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800151aa:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    800151ae:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800151b2:	4509                	li	a0,2
    800151b4:	a43eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800151b8:	08200593          	li	a1,130
    800151bc:	00017617          	auipc	a2,0x17
    800151c0:	9d460613          	addi	a2,a2,-1580 # 8002bb90 <__func__.0+0x4fd0>
    800151c4:	00012517          	auipc	a0,0x12
    800151c8:	cf450513          	addi	a0,a0,-780 # 80026eb8 <__func__.0+0x2f8>
    800151cc:	5390f0ef          	jal	80024f04 <printf>
    800151d0:	00034797          	auipc	a5,0x34
    800151d4:	e417c783          	lbu	a5,-447(a5) # 80049011 <excpt+0x1>
    800151d8:	00012597          	auipc	a1,0x12
    800151dc:	cb858593          	addi	a1,a1,-840 # 80026e90 <__func__.0+0x2d0>
    800151e0:	c799                	beqz	a5,800151ee <software_interrupt_ssi+0x5dc>
    800151e2:	57fd                	li	a5,-1
    800151e4:	6498                	ld	a4,8(s1)
    800151e6:	17fe                	slli	a5,a5,0x3f
    800151e8:	0785                	addi	a5,a5,1
    800151ea:	60f70063          	beq	a4,a5,800157ea <software_interrupt_ssi+0xbd8>
    800151ee:	00012517          	auipc	a0,0x12
    800151f2:	ce250513          	addi	a0,a0,-798 # 80026ed0 <__func__.0+0x310>
    800151f6:	50f0f0ef          	jal	80024f04 <printf>
    800151fa:	00034797          	auipc	a5,0x34
    800151fe:	e177c783          	lbu	a5,-489(a5) # 80049011 <excpt+0x1>
    80015202:	c799                	beqz	a5,80015210 <software_interrupt_ssi+0x5fe>
    80015204:	57fd                	li	a5,-1
    80015206:	6498                	ld	a4,8(s1)
    80015208:	17fe                	slli	a5,a5,0x3f
    8001520a:	0785                	addi	a5,a5,1
    8001520c:	46f70763          	beq	a4,a5,8001567a <software_interrupt_ssi+0xa68>
    80015210:	00012517          	auipc	a0,0x12
    80015214:	cc850513          	addi	a0,a0,-824 # 80026ed8 <__func__.0+0x318>
    80015218:	4ed0f0ef          	jal	80024f04 <printf>
    8001521c:	02900513          	li	a0,41
    80015220:	2ef0e0ef          	jal	80023d0e <putchar>
    80015224:	4529                	li	a0,10
    80015226:	2e90e0ef          	jal	80023d0e <putchar>
    8001522a:	c801                	beqz	s0,8001523a <software_interrupt_ssi+0x628>
    8001522c:	00034797          	auipc	a5,0x34
    80015230:	de57c783          	lbu	a5,-539(a5) # 80049011 <excpt+0x1>
    80015234:	4401                	li	s0,0
    80015236:	38079063          	bnez	a5,800155b6 <software_interrupt_ssi+0x9a4>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001523a:	0330000f          	fence	rw,rw
    8001523e:	4785                	li	a5,1
    80015240:	00034717          	auipc	a4,0x34
    80015244:	e0073423          	sd	zero,-504(a4) # 80049048 <excpt+0x38>
    80015248:	00f49023          	sh	a5,0(s1)
    8001524c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80015250:	4511                	li	a0,4
    80015252:	9a5eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80015256:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001525a:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    8001525e:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80015262:	4509                	li	a0,2
    80015264:	993eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80015268:	08200593          	li	a1,130
    8001526c:	00017617          	auipc	a2,0x17
    80015270:	99460613          	addi	a2,a2,-1644 # 8002bc00 <__func__.0+0x5040>
    80015274:	00012517          	auipc	a0,0x12
    80015278:	c4450513          	addi	a0,a0,-956 # 80026eb8 <__func__.0+0x2f8>
    8001527c:	4890f0ef          	jal	80024f04 <printf>
    80015280:	00034797          	auipc	a5,0x34
    80015284:	d917c783          	lbu	a5,-623(a5) # 80049011 <excpt+0x1>
    80015288:	00012597          	auipc	a1,0x12
    8001528c:	c0858593          	addi	a1,a1,-1016 # 80026e90 <__func__.0+0x2d0>
    80015290:	e789                	bnez	a5,8001529a <software_interrupt_ssi+0x688>
    80015292:	00012597          	auipc	a1,0x12
    80015296:	bee58593          	addi	a1,a1,-1042 # 80026e80 <__func__.0+0x2c0>
    8001529a:	00012517          	auipc	a0,0x12
    8001529e:	c3650513          	addi	a0,a0,-970 # 80026ed0 <__func__.0+0x310>
    800152a2:	4630f0ef          	jal	80024f04 <printf>
    800152a6:	00034797          	auipc	a5,0x34
    800152aa:	d6b7c783          	lbu	a5,-661(a5) # 80049011 <excpt+0x1>
    800152ae:	42079063          	bnez	a5,800156ce <software_interrupt_ssi+0xabc>
    800152b2:	4529                	li	a0,10
    800152b4:	25b0e0ef          	jal	80023d0e <putchar>
    800152b8:	c419                	beqz	s0,800152c6 <software_interrupt_ssi+0x6b4>
    800152ba:	00034417          	auipc	s0,0x34
    800152be:	d5744403          	lbu	s0,-681(s0) # 80049011 <excpt+0x1>
    800152c2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    800152c6:	0330000f          	fence	rw,rw
    800152ca:	4785                	li	a5,1
    800152cc:	00034717          	auipc	a4,0x34
    800152d0:	d6073e23          	sd	zero,-644(a4) # 80049048 <excpt+0x38>
    800152d4:	00f49023          	sh	a5,0(s1)
    800152d8:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800152dc:	4511                	li	a0,4
    800152de:	919eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800152e2:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    800152e6:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    800152ea:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800152ee:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800152f2:	4509                	li	a0,2
    800152f4:	903eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800152f8:	08200593          	li	a1,130
    800152fc:	00017617          	auipc	a2,0x17
    80015300:	95c60613          	addi	a2,a2,-1700 # 8002bc58 <__func__.0+0x5098>
    80015304:	00012517          	auipc	a0,0x12
    80015308:	bb450513          	addi	a0,a0,-1100 # 80026eb8 <__func__.0+0x2f8>
    8001530c:	3f90f0ef          	jal	80024f04 <printf>
    80015310:	00034797          	auipc	a5,0x34
    80015314:	d017c783          	lbu	a5,-767(a5) # 80049011 <excpt+0x1>
    80015318:	00012597          	auipc	a1,0x12
    8001531c:	b7858593          	addi	a1,a1,-1160 # 80026e90 <__func__.0+0x2d0>
    80015320:	c799                	beqz	a5,8001532e <software_interrupt_ssi+0x71c>
    80015322:	57fd                	li	a5,-1
    80015324:	6498                	ld	a4,8(s1)
    80015326:	17fe                	slli	a5,a5,0x3f
    80015328:	0785                	addi	a5,a5,1
    8001532a:	42f70563          	beq	a4,a5,80015754 <software_interrupt_ssi+0xb42>
    8001532e:	00012517          	auipc	a0,0x12
    80015332:	ba250513          	addi	a0,a0,-1118 # 80026ed0 <__func__.0+0x310>
    80015336:	3cf0f0ef          	jal	80024f04 <printf>
    8001533a:	00034797          	auipc	a5,0x34
    8001533e:	cd77c783          	lbu	a5,-809(a5) # 80049011 <excpt+0x1>
    80015342:	c799                	beqz	a5,80015350 <software_interrupt_ssi+0x73e>
    80015344:	57fd                	li	a5,-1
    80015346:	6498                	ld	a4,8(s1)
    80015348:	17fe                	slli	a5,a5,0x3f
    8001534a:	0785                	addi	a5,a5,1
    8001534c:	36f70963          	beq	a4,a5,800156be <software_interrupt_ssi+0xaac>
    80015350:	00012517          	auipc	a0,0x12
    80015354:	b8850513          	addi	a0,a0,-1144 # 80026ed8 <__func__.0+0x318>
    80015358:	3ad0f0ef          	jal	80024f04 <printf>
    8001535c:	02900513          	li	a0,41
    80015360:	1af0e0ef          	jal	80023d0e <putchar>
    80015364:	4529                	li	a0,10
    80015366:	1a90e0ef          	jal	80023d0e <putchar>
    8001536a:	c801                	beqz	s0,8001537a <software_interrupt_ssi+0x768>
    8001536c:	00034797          	auipc	a5,0x34
    80015370:	ca57c783          	lbu	a5,-859(a5) # 80049011 <excpt+0x1>
    80015374:	4401                	li	s0,0
    80015376:	22079263          	bnez	a5,8001559a <software_interrupt_ssi+0x988>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    8001537a:	0330000f          	fence	rw,rw
    8001537e:	4785                	li	a5,1
    80015380:	00034717          	auipc	a4,0x34
    80015384:	cc073423          	sd	zero,-824(a4) # 80049048 <excpt+0x38>
    80015388:	00f49023          	sh	a5,0(s1)
    8001538c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80015390:	4511                	li	a0,4
    80015392:	865eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80015396:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    8001539a:	57fd                	li	a5,-1
    8001539c:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800153a0:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800153a4:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800153a8:	4509                	li	a0,2
    800153aa:	84deb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800153ae:	08200593          	li	a1,130
    800153b2:	00017617          	auipc	a2,0x17
    800153b6:	91660613          	addi	a2,a2,-1770 # 8002bcc8 <__func__.0+0x5108>
    800153ba:	00012517          	auipc	a0,0x12
    800153be:	afe50513          	addi	a0,a0,-1282 # 80026eb8 <__func__.0+0x2f8>
    800153c2:	3430f0ef          	jal	80024f04 <printf>
    800153c6:	00034797          	auipc	a5,0x34
    800153ca:	c4b7c783          	lbu	a5,-949(a5) # 80049011 <excpt+0x1>
    800153ce:	00012597          	auipc	a1,0x12
    800153d2:	ac258593          	addi	a1,a1,-1342 # 80026e90 <__func__.0+0x2d0>
    800153d6:	c799                	beqz	a5,800153e4 <software_interrupt_ssi+0x7d2>
    800153d8:	57fd                	li	a5,-1
    800153da:	6498                	ld	a4,8(s1)
    800153dc:	17fe                	slli	a5,a5,0x3f
    800153de:	0785                	addi	a5,a5,1
    800153e0:	3ef70563          	beq	a4,a5,800157ca <software_interrupt_ssi+0xbb8>
    800153e4:	00012517          	auipc	a0,0x12
    800153e8:	aec50513          	addi	a0,a0,-1300 # 80026ed0 <__func__.0+0x310>
    800153ec:	3190f0ef          	jal	80024f04 <printf>
    800153f0:	00034797          	auipc	a5,0x34
    800153f4:	c217c783          	lbu	a5,-991(a5) # 80049011 <excpt+0x1>
    800153f8:	c799                	beqz	a5,80015406 <software_interrupt_ssi+0x7f4>
    800153fa:	57fd                	li	a5,-1
    800153fc:	6498                	ld	a4,8(s1)
    800153fe:	17fe                	slli	a5,a5,0x3f
    80015400:	0785                	addi	a5,a5,1
    80015402:	28f70463          	beq	a4,a5,8001568a <software_interrupt_ssi+0xa78>
    80015406:	00012517          	auipc	a0,0x12
    8001540a:	ad250513          	addi	a0,a0,-1326 # 80026ed8 <__func__.0+0x318>
    8001540e:	2f70f0ef          	jal	80024f04 <printf>
    80015412:	02900513          	li	a0,41
    80015416:	0f90e0ef          	jal	80023d0e <putchar>
    8001541a:	4529                	li	a0,10
    8001541c:	0f30e0ef          	jal	80023d0e <putchar>
    80015420:	c801                	beqz	s0,80015430 <software_interrupt_ssi+0x81e>
    80015422:	00034797          	auipc	a5,0x34
    80015426:	bef7c783          	lbu	a5,-1041(a5) # 80049011 <excpt+0x1>
    8001542a:	4401                	li	s0,0
    8001542c:	14079963          	bnez	a5,8001557e <software_interrupt_ssi+0x96c>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80015430:	0330000f          	fence	rw,rw
    80015434:	4785                	li	a5,1
    80015436:	00034717          	auipc	a4,0x34
    8001543a:	c0073923          	sd	zero,-1006(a4) # 80049048 <excpt+0x38>
    8001543e:	00f49023          	sh	a5,0(s1)
    80015442:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    80015446:	4511                	li	a0,4
    80015448:	faeeb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    8001544c:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80015450:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80015454:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80015458:	4509                	li	a0,2
    8001545a:	f9ceb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001545e:	08200593          	li	a1,130
    80015462:	00017617          	auipc	a2,0x17
    80015466:	8c660613          	addi	a2,a2,-1850 # 8002bd28 <__func__.0+0x5168>
    8001546a:	00012517          	auipc	a0,0x12
    8001546e:	a4e50513          	addi	a0,a0,-1458 # 80026eb8 <__func__.0+0x2f8>
    80015472:	2930f0ef          	jal	80024f04 <printf>
    80015476:	00034797          	auipc	a5,0x34
    8001547a:	b9b7c783          	lbu	a5,-1125(a5) # 80049011 <excpt+0x1>
    8001547e:	00012597          	auipc	a1,0x12
    80015482:	a1258593          	addi	a1,a1,-1518 # 80026e90 <__func__.0+0x2d0>
    80015486:	e789                	bnez	a5,80015490 <software_interrupt_ssi+0x87e>
    80015488:	00012597          	auipc	a1,0x12
    8001548c:	9f858593          	addi	a1,a1,-1544 # 80026e80 <__func__.0+0x2c0>
    80015490:	00012517          	auipc	a0,0x12
    80015494:	a4050513          	addi	a0,a0,-1472 # 80026ed0 <__func__.0+0x310>
    80015498:	26d0f0ef          	jal	80024f04 <printf>
    8001549c:	00034797          	auipc	a5,0x34
    800154a0:	b757c783          	lbu	a5,-1163(a5) # 80049011 <excpt+0x1>
    800154a4:	28079d63          	bnez	a5,8001573e <software_interrupt_ssi+0xb2c>
    800154a8:	4529                	li	a0,10
    800154aa:	0650e0ef          	jal	80023d0e <putchar>
    800154ae:	c419                	beqz	s0,800154bc <software_interrupt_ssi+0x8aa>
    800154b0:	00034417          	auipc	s0,0x34
    800154b4:	b6144403          	lbu	s0,-1183(s0) # 80049011 <excpt+0x1>
    800154b8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800154bc:	0330000f          	fence	rw,rw
    800154c0:	4785                	li	a5,1
    800154c2:	00034717          	auipc	a4,0x34
    800154c6:	b8073323          	sd	zero,-1146(a4) # 80049048 <excpt+0x38>
    800154ca:	00f49023          	sh	a5,0(s1)
    800154ce:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    800154d2:	4511                	li	a0,4
    800154d4:	f22eb0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800154d8:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800154dc:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800154e0:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800154e4:	4509                	li	a0,2
    800154e6:	f10eb0ef          	jal	80000bf6 <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800154ea:	08200593          	li	a1,130
    800154ee:	00017617          	auipc	a2,0x17
    800154f2:	88a60613          	addi	a2,a2,-1910 # 8002bd78 <__func__.0+0x51b8>
    800154f6:	00012517          	auipc	a0,0x12
    800154fa:	9c250513          	addi	a0,a0,-1598 # 80026eb8 <__func__.0+0x2f8>
    800154fe:	2070f0ef          	jal	80024f04 <printf>
    80015502:	00034797          	auipc	a5,0x34
    80015506:	b0f7c783          	lbu	a5,-1265(a5) # 80049011 <excpt+0x1>
    8001550a:	00012597          	auipc	a1,0x12
    8001550e:	98658593          	addi	a1,a1,-1658 # 80026e90 <__func__.0+0x2d0>
    80015512:	e789                	bnez	a5,8001551c <software_interrupt_ssi+0x90a>
    80015514:	00012597          	auipc	a1,0x12
    80015518:	96c58593          	addi	a1,a1,-1684 # 80026e80 <__func__.0+0x2c0>
    8001551c:	00012517          	auipc	a0,0x12
    80015520:	9b450513          	addi	a0,a0,-1612 # 80026ed0 <__func__.0+0x310>
    80015524:	1e10f0ef          	jal	80024f04 <printf>
    80015528:	00034797          	auipc	a5,0x34
    8001552c:	ae97c783          	lbu	a5,-1303(a5) # 80049011 <excpt+0x1>
    80015530:	1e079c63          	bnez	a5,80015728 <software_interrupt_ssi+0xb16>
    80015534:	4529                	li	a0,10
    80015536:	7d80e0ef          	jal	80023d0e <putchar>
    8001553a:	c411                	beqz	s0,80015546 <software_interrupt_ssi+0x934>
    8001553c:	00034797          	auipc	a5,0x34
    80015540:	ad57c783          	lbu	a5,-1323(a5) # 80049011 <excpt+0x1>
    80015544:	c79d                	beqz	a5,80015572 <software_interrupt_ssi+0x960>
    80015546:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80015548:	00012597          	auipc	a1,0x12
    8001554c:	94858593          	addi	a1,a1,-1720 # 80026e90 <__func__.0+0x2d0>
    80015550:	00012517          	auipc	a0,0x12
    80015554:	9e850513          	addi	a0,a0,-1560 # 80026f38 <__func__.0+0x378>
    80015558:	1ad0f0ef          	jal	80024f04 <printf>
    8001555c:	4511                	li	a0,4
    8001555e:	e98eb0ef          	jal	80000bf6 <goto_priv>
    80015562:	f4beb0ef          	jal	800014ac <reset_state>
}
    80015566:	60e2                	ld	ra,24(sp)
    80015568:	8522                	mv	a0,s0
    8001556a:	6442                	ld	s0,16(sp)
    8001556c:	64a2                	ld	s1,8(sp)
    8001556e:	6105                	addi	sp,sp,32
    80015570:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80015572:	4405                	li	s0,1
    TEST_END();
    80015574:	00012597          	auipc	a1,0x12
    80015578:	90c58593          	addi	a1,a1,-1780 # 80026e80 <__func__.0+0x2c0>
    8001557c:	bfd1                	j	80015550 <software_interrupt_ssi+0x93e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001557e:	57fd                	li	a5,-1
    80015580:	6498                	ld	a4,8(s1)
    80015582:	17fe                	slli	a5,a5,0x3f
    80015584:	0785                	addi	a5,a5,1
    80015586:	eaf715e3          	bne	a4,a5,80015430 <software_interrupt_ssi+0x81e>
    8001558a:	00034417          	auipc	s0,0x34
    8001558e:	a8a42403          	lw	s0,-1398(s0) # 80049014 <excpt+0x4>
    80015592:	1475                	addi	s0,s0,-3
    80015594:	00143413          	seqz	s0,s0
    80015598:	bd61                	j	80015430 <software_interrupt_ssi+0x81e>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001559a:	57fd                	li	a5,-1
    8001559c:	6498                	ld	a4,8(s1)
    8001559e:	17fe                	slli	a5,a5,0x3f
    800155a0:	0785                	addi	a5,a5,1
    800155a2:	dcf71ce3          	bne	a4,a5,8001537a <software_interrupt_ssi+0x768>
    800155a6:	00034417          	auipc	s0,0x34
    800155aa:	a6e42403          	lw	s0,-1426(s0) # 80049014 <excpt+0x4>
    800155ae:	1471                	addi	s0,s0,-4
    800155b0:	00143413          	seqz	s0,s0
    800155b4:	b3d9                	j	8001537a <software_interrupt_ssi+0x768>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800155b6:	57fd                	li	a5,-1
    800155b8:	6498                	ld	a4,8(s1)
    800155ba:	17fe                	slli	a5,a5,0x3f
    800155bc:	0785                	addi	a5,a5,1
    800155be:	c6f71ee3          	bne	a4,a5,8001523a <software_interrupt_ssi+0x628>
    800155c2:	00034417          	auipc	s0,0x34
    800155c6:	a5242403          	lw	s0,-1454(s0) # 80049014 <excpt+0x4>
    800155ca:	1475                	addi	s0,s0,-3
    800155cc:	00143413          	seqz	s0,s0
    800155d0:	b1ad                	j	8001523a <software_interrupt_ssi+0x628>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800155d2:	57fd                	li	a5,-1
    800155d4:	6498                	ld	a4,8(s1)
    800155d6:	17fe                	slli	a5,a5,0x3f
    800155d8:	0785                	addi	a5,a5,1
    800155da:	baf715e3          	bne	a4,a5,80015184 <software_interrupt_ssi+0x572>
    800155de:	00034417          	auipc	s0,0x34
    800155e2:	a3642403          	lw	s0,-1482(s0) # 80049014 <excpt+0x4>
    800155e6:	1471                	addi	s0,s0,-4
    800155e8:	00143413          	seqz	s0,s0
    800155ec:	be61                	j	80015184 <software_interrupt_ssi+0x572>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800155ee:	57fd                	li	a5,-1
    800155f0:	6498                	ld	a4,8(s1)
    800155f2:	17fe                	slli	a5,a5,0x3f
    800155f4:	0785                	addi	a5,a5,1
    800155f6:	9af717e3          	bne	a4,a5,80014fa4 <software_interrupt_ssi+0x392>
    800155fa:	00034417          	auipc	s0,0x34
    800155fe:	a1a42403          	lw	s0,-1510(s0) # 80049014 <excpt+0x4>
    80015602:	1475                	addi	s0,s0,-3
    80015604:	00143413          	seqz	s0,s0
    80015608:	ba71                	j	80014fa4 <software_interrupt_ssi+0x392>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001560a:	57fd                	li	a5,-1
    8001560c:	6498                	ld	a4,8(s1)
    8001560e:	17fe                	slli	a5,a5,0x3f
    80015610:	0785                	addi	a5,a5,1
    80015612:	8cf71ee3          	bne	a4,a5,80014eee <software_interrupt_ssi+0x2dc>
    80015616:	00034417          	auipc	s0,0x34
    8001561a:	9fe42403          	lw	s0,-1538(s0) # 80049014 <excpt+0x4>
    8001561e:	1471                	addi	s0,s0,-4
    80015620:	00143413          	seqz	s0,s0
    80015624:	8cbff06f          	j	80014eee <software_interrupt_ssi+0x2dc>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80015628:	57fd                	li	a5,-1
    8001562a:	6498                	ld	a4,8(s1)
    8001562c:	17fe                	slli	a5,a5,0x3f
    8001562e:	0785                	addi	a5,a5,1
    80015630:	f6f71f63          	bne	a4,a5,80014dae <software_interrupt_ssi+0x19c>
    80015634:	00034417          	auipc	s0,0x34
    80015638:	9e042403          	lw	s0,-1568(s0) # 80049014 <excpt+0x4>
    8001563c:	1475                	addi	s0,s0,-3
    8001563e:	00143413          	seqz	s0,s0
    80015642:	f6cff06f          	j	80014dae <software_interrupt_ssi+0x19c>
    80015646:	00034717          	auipc	a4,0x34
    8001564a:	9ce72703          	lw	a4,-1586(a4) # 80049014 <excpt+0x4>
    8001564e:	478d                	li	a5,3
    80015650:	f2f71a63          	bne	a4,a5,80014d84 <software_interrupt_ssi+0x172>
    80015654:	f44ff06f          	j	80014d98 <software_interrupt_ssi+0x186>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015658:	00034717          	auipc	a4,0x34
    8001565c:	9bc72703          	lw	a4,-1604(a4) # 80049014 <excpt+0x4>
    80015660:	4791                	li	a5,4
    80015662:	e6f71263          	bne	a4,a5,80014cc6 <software_interrupt_ssi+0xb4>
    80015666:	e74ff06f          	j	80014cda <software_interrupt_ssi+0xc8>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001566a:	00034717          	auipc	a4,0x34
    8001566e:	9aa72703          	lw	a4,-1622(a4) # 80049014 <excpt+0x4>
    80015672:	4791                	li	a5,4
    80015674:	aef713e3          	bne	a4,a5,8001515a <software_interrupt_ssi+0x548>
    80015678:	bcdd                	j	8001516e <software_interrupt_ssi+0x55c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001567a:	00034717          	auipc	a4,0x34
    8001567e:	99a72703          	lw	a4,-1638(a4) # 80049014 <excpt+0x4>
    80015682:	478d                	li	a5,3
    80015684:	b8f716e3          	bne	a4,a5,80015210 <software_interrupt_ssi+0x5fe>
    80015688:	be71                	j	80015224 <software_interrupt_ssi+0x612>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001568a:	00034717          	auipc	a4,0x34
    8001568e:	98a72703          	lw	a4,-1654(a4) # 80049014 <excpt+0x4>
    80015692:	478d                	li	a5,3
    80015694:	d6f719e3          	bne	a4,a5,80015406 <software_interrupt_ssi+0x7f4>
    80015698:	b349                	j	8001541a <software_interrupt_ssi+0x808>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001569a:	00034717          	auipc	a4,0x34
    8001569e:	97a72703          	lw	a4,-1670(a4) # 80049014 <excpt+0x4>
    800156a2:	4791                	li	a5,4
    800156a4:	82f710e3          	bne	a4,a5,80014ec4 <software_interrupt_ssi+0x2b2>
    800156a8:	831ff06f          	j	80014ed8 <software_interrupt_ssi+0x2c6>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800156ac:	00034717          	auipc	a4,0x34
    800156b0:	96872703          	lw	a4,-1688(a4) # 80049014 <excpt+0x4>
    800156b4:	478d                	li	a5,3
    800156b6:	8cf712e3          	bne	a4,a5,80014f7a <software_interrupt_ssi+0x368>
    800156ba:	8d5ff06f          	j	80014f8e <software_interrupt_ssi+0x37c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800156be:	00034717          	auipc	a4,0x34
    800156c2:	95672703          	lw	a4,-1706(a4) # 80049014 <excpt+0x4>
    800156c6:	4791                	li	a5,4
    800156c8:	c8f714e3          	bne	a4,a5,80015350 <software_interrupt_ssi+0x73e>
    800156cc:	b961                	j	80015364 <software_interrupt_ssi+0x752>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    800156ce:	00012517          	auipc	a0,0x12
    800156d2:	80a50513          	addi	a0,a0,-2038 # 80026ed8 <__func__.0+0x318>
    800156d6:	02f0f0ef          	jal	80024f04 <printf>
    800156da:	02900513          	li	a0,41
    800156de:	6300e0ef          	jal	80023d0e <putchar>
    800156e2:	bec1                	j	800152b2 <software_interrupt_ssi+0x6a0>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    800156e4:	00011517          	auipc	a0,0x11
    800156e8:	7f450513          	addi	a0,a0,2036 # 80026ed8 <__func__.0+0x318>
    800156ec:	0190f0ef          	jal	80024f04 <printf>
    800156f0:	02900513          	li	a0,41
    800156f4:	61a0e0ef          	jal	80023d0e <putchar>
    800156f8:	f2eff06f          	j	80014e26 <software_interrupt_ssi+0x214>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800156fc:	00011517          	auipc	a0,0x11
    80015700:	7dc50513          	addi	a0,a0,2012 # 80026ed8 <__func__.0+0x318>
    80015704:	0010f0ef          	jal	80024f04 <printf>
    80015708:	02900513          	li	a0,41
    8001570c:	6020e0ef          	jal	80023d0e <putchar>
    80015710:	ba61                	j	800150a8 <software_interrupt_ssi+0x496>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80015712:	00011517          	auipc	a0,0x11
    80015716:	7c650513          	addi	a0,a0,1990 # 80026ed8 <__func__.0+0x318>
    8001571a:	7ea0f0ef          	jal	80024f04 <printf>
    8001571e:	02900513          	li	a0,41
    80015722:	5ec0e0ef          	jal	80023d0e <putchar>
    80015726:	b8dd                	j	8001501c <software_interrupt_ssi+0x40a>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    80015728:	00011517          	auipc	a0,0x11
    8001572c:	7b050513          	addi	a0,a0,1968 # 80026ed8 <__func__.0+0x318>
    80015730:	7d40f0ef          	jal	80024f04 <printf>
    80015734:	02900513          	li	a0,41
    80015738:	5d60e0ef          	jal	80023d0e <putchar>
    8001573c:	bbe5                	j	80015534 <software_interrupt_ssi+0x922>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001573e:	00011517          	auipc	a0,0x11
    80015742:	79a50513          	addi	a0,a0,1946 # 80026ed8 <__func__.0+0x318>
    80015746:	7be0f0ef          	jal	80024f04 <printf>
    8001574a:	02900513          	li	a0,41
    8001574e:	5c00e0ef          	jal	80023d0e <putchar>
    80015752:	bb99                	j	800154a8 <software_interrupt_ssi+0x896>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80015754:	00034717          	auipc	a4,0x34
    80015758:	8c072703          	lw	a4,-1856(a4) # 80049014 <excpt+0x4>
    8001575c:	4791                	li	a5,4
    8001575e:	00011597          	auipc	a1,0x11
    80015762:	72258593          	addi	a1,a1,1826 # 80026e80 <__func__.0+0x2c0>
    80015766:	bcf704e3          	beq	a4,a5,8001532e <software_interrupt_ssi+0x71c>
    8001576a:	00011597          	auipc	a1,0x11
    8001576e:	72658593          	addi	a1,a1,1830 # 80026e90 <__func__.0+0x2d0>
    80015772:	be75                	j	8001532e <software_interrupt_ssi+0x71c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80015774:	00034417          	auipc	s0,0x34
    80015778:	8a042403          	lw	s0,-1888(s0) # 80049014 <excpt+0x4>
    8001577c:	1471                	addi	s0,s0,-4
    8001577e:	00143413          	seqz	s0,s0
    80015782:	d76ff06f          	j	80014cf8 <software_interrupt_ssi+0xe6>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80015786:	00034717          	auipc	a4,0x34
    8001578a:	88e72703          	lw	a4,-1906(a4) # 80049014 <excpt+0x4>
    8001578e:	478d                	li	a5,3
    80015790:	00011597          	auipc	a1,0x11
    80015794:	6f058593          	addi	a1,a1,1776 # 80026e80 <__func__.0+0x2c0>
    80015798:	dcf70563          	beq	a4,a5,80014d62 <software_interrupt_ssi+0x150>
    8001579c:	00011597          	auipc	a1,0x11
    800157a0:	6f458593          	addi	a1,a1,1780 # 80026e90 <__func__.0+0x2d0>
    800157a4:	dbeff06f          	j	80014d62 <software_interrupt_ssi+0x150>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800157a8:	00034717          	auipc	a4,0x34
    800157ac:	86c72703          	lw	a4,-1940(a4) # 80049014 <excpt+0x4>
    800157b0:	4791                	li	a5,4
    800157b2:	00011597          	auipc	a1,0x11
    800157b6:	6ce58593          	addi	a1,a1,1742 # 80026e80 <__func__.0+0x2c0>
    800157ba:	eef70463          	beq	a4,a5,80014ea2 <software_interrupt_ssi+0x290>
    800157be:	00011597          	auipc	a1,0x11
    800157c2:	6d258593          	addi	a1,a1,1746 # 80026e90 <__func__.0+0x2d0>
    800157c6:	edcff06f          	j	80014ea2 <software_interrupt_ssi+0x290>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800157ca:	00034717          	auipc	a4,0x34
    800157ce:	84a72703          	lw	a4,-1974(a4) # 80049014 <excpt+0x4>
    800157d2:	478d                	li	a5,3
    800157d4:	00011597          	auipc	a1,0x11
    800157d8:	6ac58593          	addi	a1,a1,1708 # 80026e80 <__func__.0+0x2c0>
    800157dc:	c0f704e3          	beq	a4,a5,800153e4 <software_interrupt_ssi+0x7d2>
    800157e0:	00011597          	auipc	a1,0x11
    800157e4:	6b058593          	addi	a1,a1,1712 # 80026e90 <__func__.0+0x2d0>
    800157e8:	bef5                	j	800153e4 <software_interrupt_ssi+0x7d2>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800157ea:	00034717          	auipc	a4,0x34
    800157ee:	82a72703          	lw	a4,-2006(a4) # 80049014 <excpt+0x4>
    800157f2:	478d                	li	a5,3
    800157f4:	00011597          	auipc	a1,0x11
    800157f8:	68c58593          	addi	a1,a1,1676 # 80026e80 <__func__.0+0x2c0>
    800157fc:	9ef709e3          	beq	a4,a5,800151ee <software_interrupt_ssi+0x5dc>
    80015800:	00011597          	auipc	a1,0x11
    80015804:	69058593          	addi	a1,a1,1680 # 80026e90 <__func__.0+0x2d0>
    80015808:	b2dd                	j	800151ee <software_interrupt_ssi+0x5dc>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001580a:	00034717          	auipc	a4,0x34
    8001580e:	80a72703          	lw	a4,-2038(a4) # 80049014 <excpt+0x4>
    80015812:	4791                	li	a5,4
    80015814:	00011597          	auipc	a1,0x11
    80015818:	66c58593          	addi	a1,a1,1644 # 80026e80 <__func__.0+0x2c0>
    8001581c:	c8f70463          	beq	a4,a5,80014ca4 <software_interrupt_ssi+0x92>
    80015820:	00011597          	auipc	a1,0x11
    80015824:	67058593          	addi	a1,a1,1648 # 80026e90 <__func__.0+0x2d0>
    80015828:	c7cff06f          	j	80014ca4 <software_interrupt_ssi+0x92>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    8001582c:	00033717          	auipc	a4,0x33
    80015830:	7e872703          	lw	a4,2024(a4) # 80049014 <excpt+0x4>
    80015834:	478d                	li	a5,3
    80015836:	00011597          	auipc	a1,0x11
    8001583a:	64a58593          	addi	a1,a1,1610 # 80026e80 <__func__.0+0x2c0>
    8001583e:	f0f70d63          	beq	a4,a5,80014f58 <software_interrupt_ssi+0x346>
    80015842:	00011597          	auipc	a1,0x11
    80015846:	64e58593          	addi	a1,a1,1614 # 80026e90 <__func__.0+0x2d0>
    8001584a:	f0eff06f          	j	80014f58 <software_interrupt_ssi+0x346>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001584e:	00033717          	auipc	a4,0x33
    80015852:	7c672703          	lw	a4,1990(a4) # 80049014 <excpt+0x4>
    80015856:	4791                	li	a5,4
    80015858:	00011597          	auipc	a1,0x11
    8001585c:	62858593          	addi	a1,a1,1576 # 80026e80 <__func__.0+0x2c0>
    80015860:	8cf70ce3          	beq	a4,a5,80015138 <software_interrupt_ssi+0x526>
    80015864:	00011597          	auipc	a1,0x11
    80015868:	62c58593          	addi	a1,a1,1580 # 80026e90 <__func__.0+0x2d0>
    8001586c:	8cdff06f          	j	80015138 <software_interrupt_ssi+0x526>

0000000080015870 <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80015870:	1141                	addi	sp,sp,-16

    TEST_START();
    80015872:	00010597          	auipc	a1,0x10
    80015876:	46e58593          	addi	a1,a1,1134 # 80025ce0 <__func__.0>
    8001587a:	00011517          	auipc	a0,0x11
    8001587e:	62650513          	addi	a0,a0,1574 # 80026ea0 <__func__.0+0x2e0>
bool software_interrupt_vssi() {
    80015882:	e406                	sd	ra,8(sp)
    80015884:	e022                	sd	s0,0(sp)
    TEST_START();
    80015886:	67e0f0ef          	jal	80024f04 <printf>
    8001588a:	4529                	li	a0,10
    8001588c:	4820e0ef          	jal	80023d0e <putchar>

    TEST_SETUP_EXCEPT();
    80015890:	0330000f          	fence	rw,rw
    80015894:	00033797          	auipc	a5,0x33
    80015898:	77c78793          	addi	a5,a5,1916 # 80049010 <excpt>
    8001589c:	4405                	li	s0,1
    8001589e:	0207bc23          	sd	zero,56(a5)
    800158a2:	00879023          	sh	s0,0(a5)
    800158a6:	0330000f          	fence	rw,rw

    TEST_END();
    800158aa:	00011597          	auipc	a1,0x11
    800158ae:	5d658593          	addi	a1,a1,1494 # 80026e80 <__func__.0+0x2c0>
    800158b2:	00011517          	auipc	a0,0x11
    800158b6:	68650513          	addi	a0,a0,1670 # 80026f38 <__func__.0+0x378>
    800158ba:	64a0f0ef          	jal	80024f04 <printf>
    800158be:	4511                	li	a0,4
    800158c0:	b36eb0ef          	jal	80000bf6 <goto_priv>
    800158c4:	be9eb0ef          	jal	800014ac <reset_state>


    800158c8:	60a2                	ld	ra,8(sp)
    800158ca:	8522                	mv	a0,s0
    800158cc:	6402                	ld	s0,0(sp)
    800158ce:	0141                	addi	sp,sp,16
    800158d0:	8082                	ret

00000000800158d2 <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    800158d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800158d4:	00010597          	auipc	a1,0x10
    800158d8:	42458593          	addi	a1,a1,1060 # 80025cf8 <__func__.26>
    800158dc:	00011517          	auipc	a0,0x11
    800158e0:	5c450513          	addi	a0,a0,1476 # 80026ea0 <__func__.0+0x2e0>
bool instruction_page_fault_1(){
    800158e4:	ec06                	sd	ra,24(sp)
    800158e6:	e822                	sd	s0,16(sp)
    800158e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800158ea:	61a0f0ef          	jal	80024f04 <printf>
    800158ee:	4529                	li	a0,10
    800158f0:	41e0e0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800158f4:	450d                	li	a0,3
    800158f6:	b00eb0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800158fa:	ce7ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800158fe:	f25ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80015902:	dafea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    80015906:	450d                	li	a0,3
    80015908:	aeeeb0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001590c:	4509                	li	a0,2
    8001590e:	a08eb0ef          	jal	80000b16 <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80015912:	0330000f          	fence	rw,rw
    80015916:	00033417          	auipc	s0,0x33
    8001591a:	6fa40413          	addi	s0,s0,1786 # 80049010 <excpt>
    8001591e:	4785                	li	a5,1
    80015920:	00033717          	auipc	a4,0x33
    80015924:	72073423          	sd	zero,1832(a4) # 80049048 <excpt+0x38>
    80015928:	00f41023          	sh	a5,0(s0)
    8001592c:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80015930:	400197b7          	lui	a5,0x40019
    80015934:	078a                	slli	a5,a5,0x2
    80015936:	00000297          	auipc	t0,0x0
    8001593a:	00c28293          	addi	t0,t0,12 # 80015942 <instruction_page_fault_1+0x70>
    8001593e:	02543c23          	sd	t0,56(s0)
    80015942:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80015944:	08200593          	li	a1,130
    80015948:	00016617          	auipc	a2,0x16
    8001594c:	48060613          	addi	a2,a2,1152 # 8002bdc8 <__func__.0+0x5208>
    80015950:	00011517          	auipc	a0,0x11
    80015954:	56850513          	addi	a0,a0,1384 # 80026eb8 <__func__.0+0x2f8>
    80015958:	5ac0f0ef          	jal	80024f04 <printf>
    8001595c:	00033797          	auipc	a5,0x33
    80015960:	6b57c783          	lbu	a5,1717(a5) # 80049011 <excpt+0x1>
    80015964:	00011597          	auipc	a1,0x11
    80015968:	52c58593          	addi	a1,a1,1324 # 80026e90 <__func__.0+0x2d0>
    8001596c:	cf89                	beqz	a5,80015986 <instruction_page_fault_1+0xb4>
    8001596e:	6418                	ld	a4,8(s0)
    80015970:	47b1                	li	a5,12
    80015972:	00011597          	auipc	a1,0x11
    80015976:	50e58593          	addi	a1,a1,1294 # 80026e80 <__func__.0+0x2c0>
    8001597a:	00f70663          	beq	a4,a5,80015986 <instruction_page_fault_1+0xb4>
    8001597e:	00011597          	auipc	a1,0x11
    80015982:	51258593          	addi	a1,a1,1298 # 80026e90 <__func__.0+0x2d0>
    80015986:	00011517          	auipc	a0,0x11
    8001598a:	54a50513          	addi	a0,a0,1354 # 80026ed0 <__func__.0+0x310>
    8001598e:	5760f0ef          	jal	80024f04 <printf>
    80015992:	00033797          	auipc	a5,0x33
    80015996:	67f7c783          	lbu	a5,1663(a5) # 80049011 <excpt+0x1>
    8001599a:	c789                	beqz	a5,800159a4 <instruction_page_fault_1+0xd2>
    8001599c:	6418                	ld	a4,8(s0)
    8001599e:	47b1                	li	a5,12
    800159a0:	00f70c63          	beq	a4,a5,800159b8 <instruction_page_fault_1+0xe6>
    800159a4:	00011517          	auipc	a0,0x11
    800159a8:	53450513          	addi	a0,a0,1332 # 80026ed8 <__func__.0+0x318>
    800159ac:	5580f0ef          	jal	80024f04 <printf>
    800159b0:	02900513          	li	a0,41
    800159b4:	35a0e0ef          	jal	80023d0e <putchar>
    800159b8:	4529                	li	a0,10
    800159ba:	3540e0ef          	jal	80023d0e <putchar>
    800159be:	00033797          	auipc	a5,0x33
    800159c2:	6537c783          	lbu	a5,1619(a5) # 80049011 <excpt+0x1>
    800159c6:	4481                	li	s1,0
    800159c8:	c789                	beqz	a5,800159d2 <instruction_page_fault_1+0x100>
    800159ca:	6404                	ld	s1,8(s0)
    800159cc:	14d1                	addi	s1,s1,-12
    800159ce:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    800159d2:	0330000f          	fence	rw,rw
    800159d6:	4785                	li	a5,1
    800159d8:	00033717          	auipc	a4,0x33
    800159dc:	66073823          	sd	zero,1648(a4) # 80049048 <excpt+0x38>
    800159e0:	00f41023          	sh	a5,0(s0)
    800159e4:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    800159e8:	001007b7          	lui	a5,0x100
    800159ec:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    800159f0:	07b2                	slli	a5,a5,0xc
    800159f2:	00000297          	auipc	t0,0x0
    800159f6:	00c28293          	addi	t0,t0,12 # 800159fe <instruction_page_fault_1+0x12c>
    800159fa:	02543c23          	sd	t0,56(s0)
    800159fe:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80015a00:	08200593          	li	a1,130
    80015a04:	00016617          	auipc	a2,0x16
    80015a08:	3fc60613          	addi	a2,a2,1020 # 8002be00 <__func__.0+0x5240>
    80015a0c:	00011517          	auipc	a0,0x11
    80015a10:	4ac50513          	addi	a0,a0,1196 # 80026eb8 <__func__.0+0x2f8>
    80015a14:	4f00f0ef          	jal	80024f04 <printf>
    80015a18:	00033797          	auipc	a5,0x33
    80015a1c:	5f97c783          	lbu	a5,1529(a5) # 80049011 <excpt+0x1>
    80015a20:	00011597          	auipc	a1,0x11
    80015a24:	47058593          	addi	a1,a1,1136 # 80026e90 <__func__.0+0x2d0>
    80015a28:	cf89                	beqz	a5,80015a42 <instruction_page_fault_1+0x170>
    80015a2a:	6418                	ld	a4,8(s0)
    80015a2c:	47b1                	li	a5,12
    80015a2e:	00011597          	auipc	a1,0x11
    80015a32:	45258593          	addi	a1,a1,1106 # 80026e80 <__func__.0+0x2c0>
    80015a36:	00f70663          	beq	a4,a5,80015a42 <instruction_page_fault_1+0x170>
    80015a3a:	00011597          	auipc	a1,0x11
    80015a3e:	45658593          	addi	a1,a1,1110 # 80026e90 <__func__.0+0x2d0>
    80015a42:	00011517          	auipc	a0,0x11
    80015a46:	48e50513          	addi	a0,a0,1166 # 80026ed0 <__func__.0+0x310>
    80015a4a:	4ba0f0ef          	jal	80024f04 <printf>
    80015a4e:	00033797          	auipc	a5,0x33
    80015a52:	5c37c783          	lbu	a5,1475(a5) # 80049011 <excpt+0x1>
    80015a56:	c789                	beqz	a5,80015a60 <instruction_page_fault_1+0x18e>
    80015a58:	6418                	ld	a4,8(s0)
    80015a5a:	47b1                	li	a5,12
    80015a5c:	00f70c63          	beq	a4,a5,80015a74 <instruction_page_fault_1+0x1a2>
    80015a60:	00011517          	auipc	a0,0x11
    80015a64:	47850513          	addi	a0,a0,1144 # 80026ed8 <__func__.0+0x318>
    80015a68:	49c0f0ef          	jal	80024f04 <printf>
    80015a6c:	02900513          	li	a0,41
    80015a70:	29e0e0ef          	jal	80023d0e <putchar>
    80015a74:	4529                	li	a0,10
    80015a76:	2980e0ef          	jal	80023d0e <putchar>
    80015a7a:	c095                	beqz	s1,80015a9e <instruction_page_fault_1+0x1cc>
    80015a7c:	00033497          	auipc	s1,0x33
    80015a80:	5954c483          	lbu	s1,1429(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80015a84:	00011597          	auipc	a1,0x11
    80015a88:	40c58593          	addi	a1,a1,1036 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80015a8c:	cc91                	beqz	s1,80015aa8 <instruction_page_fault_1+0x1d6>
    80015a8e:	6418                	ld	a4,8(s0)
    80015a90:	47b1                	li	a5,12
    TEST_END();
    80015a92:	00011597          	auipc	a1,0x11
    80015a96:	3ee58593          	addi	a1,a1,1006 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80015a9a:	00f70763          	beq	a4,a5,80015aa8 <instruction_page_fault_1+0x1d6>
    80015a9e:	4481                	li	s1,0
    TEST_END();
    80015aa0:	00011597          	auipc	a1,0x11
    80015aa4:	3f058593          	addi	a1,a1,1008 # 80026e90 <__func__.0+0x2d0>
    80015aa8:	00011517          	auipc	a0,0x11
    80015aac:	49050513          	addi	a0,a0,1168 # 80026f38 <__func__.0+0x378>
    80015ab0:	4540f0ef          	jal	80024f04 <printf>
    80015ab4:	4511                	li	a0,4
    80015ab6:	940eb0ef          	jal	80000bf6 <goto_priv>
    80015aba:	9f3eb0ef          	jal	800014ac <reset_state>
}
    80015abe:	60e2                	ld	ra,24(sp)
    80015ac0:	6442                	ld	s0,16(sp)
    80015ac2:	8526                	mv	a0,s1
    80015ac4:	64a2                	ld	s1,8(sp)
    80015ac6:	6105                	addi	sp,sp,32
    80015ac8:	8082                	ret

0000000080015aca <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80015aca:	1101                	addi	sp,sp,-32

    TEST_START();
    80015acc:	00010597          	auipc	a1,0x10
    80015ad0:	24c58593          	addi	a1,a1,588 # 80025d18 <__func__.24>
    80015ad4:	00011517          	auipc	a0,0x11
    80015ad8:	3cc50513          	addi	a0,a0,972 # 80026ea0 <__func__.0+0x2e0>
bool instruction_page_fault_2(){
    80015adc:	ec06                	sd	ra,24(sp)
    80015ade:	e822                	sd	s0,16(sp)
    80015ae0:	e426                	sd	s1,8(sp)
    TEST_START();
    80015ae2:	4220f0ef          	jal	80024f04 <printf>
    80015ae6:	4529                	li	a0,10
    80015ae8:	2260e0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80015aec:	450d                	li	a0,3
    80015aee:	908eb0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80015af2:	aefea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015af6:	d2dea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80015afa:	bb7ea0ef          	jal	800006b0 <vspt_init>


    goto_priv(PRIV_HS);
    80015afe:	450d                	li	a0,3
    80015b00:	8f6eb0ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015b04:	0330000f          	fence	rw,rw
    80015b08:	00033417          	auipc	s0,0x33
    80015b0c:	50840413          	addi	s0,s0,1288 # 80049010 <excpt>
    80015b10:	4785                	li	a5,1
    80015b12:	00033717          	auipc	a4,0x33
    80015b16:	52073b23          	sd	zero,1334(a4) # 80049048 <excpt+0x38>
    80015b1a:	00f41023          	sh	a5,0(s0)
    80015b1e:	0330000f          	fence	rw,rw
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80015b22:	000807b7          	lui	a5,0x80
    80015b26:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015b28:	07b6                	slli	a5,a5,0xd
    80015b2a:	00000297          	auipc	t0,0x0
    80015b2e:	00c28293          	addi	t0,t0,12 # 80015b36 <instruction_page_fault_2+0x6c>
    80015b32:	02543c23          	sd	t0,56(s0)
    80015b36:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80015b38:	08200593          	li	a1,130
    80015b3c:	00016617          	auipc	a2,0x16
    80015b40:	2fc60613          	addi	a2,a2,764 # 8002be38 <__func__.0+0x5278>
    80015b44:	00011517          	auipc	a0,0x11
    80015b48:	37450513          	addi	a0,a0,884 # 80026eb8 <__func__.0+0x2f8>
    80015b4c:	3b80f0ef          	jal	80024f04 <printf>
    80015b50:	00033797          	auipc	a5,0x33
    80015b54:	4c17c783          	lbu	a5,1217(a5) # 80049011 <excpt+0x1>
    80015b58:	00011597          	auipc	a1,0x11
    80015b5c:	33858593          	addi	a1,a1,824 # 80026e90 <__func__.0+0x2d0>
    80015b60:	cf89                	beqz	a5,80015b7a <instruction_page_fault_2+0xb0>
    80015b62:	6418                	ld	a4,8(s0)
    80015b64:	47b1                	li	a5,12
    80015b66:	00011597          	auipc	a1,0x11
    80015b6a:	31a58593          	addi	a1,a1,794 # 80026e80 <__func__.0+0x2c0>
    80015b6e:	00f70663          	beq	a4,a5,80015b7a <instruction_page_fault_2+0xb0>
    80015b72:	00011597          	auipc	a1,0x11
    80015b76:	31e58593          	addi	a1,a1,798 # 80026e90 <__func__.0+0x2d0>
    80015b7a:	00011517          	auipc	a0,0x11
    80015b7e:	35650513          	addi	a0,a0,854 # 80026ed0 <__func__.0+0x310>
    80015b82:	3820f0ef          	jal	80024f04 <printf>
    80015b86:	00033797          	auipc	a5,0x33
    80015b8a:	48b7c783          	lbu	a5,1163(a5) # 80049011 <excpt+0x1>
    80015b8e:	c789                	beqz	a5,80015b98 <instruction_page_fault_2+0xce>
    80015b90:	6418                	ld	a4,8(s0)
    80015b92:	47b1                	li	a5,12
    80015b94:	00f70c63          	beq	a4,a5,80015bac <instruction_page_fault_2+0xe2>
    80015b98:	00011517          	auipc	a0,0x11
    80015b9c:	34050513          	addi	a0,a0,832 # 80026ed8 <__func__.0+0x318>
    80015ba0:	3640f0ef          	jal	80024f04 <printf>
    80015ba4:	02900513          	li	a0,41
    80015ba8:	1660e0ef          	jal	80023d0e <putchar>
    80015bac:	4529                	li	a0,10
    80015bae:	1600e0ef          	jal	80023d0e <putchar>
    80015bb2:	00033497          	auipc	s1,0x33
    80015bb6:	45f4c483          	lbu	s1,1119(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80015bba:	00011597          	auipc	a1,0x11
    80015bbe:	2d658593          	addi	a1,a1,726 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80015bc2:	cc91                	beqz	s1,80015bde <instruction_page_fault_2+0x114>
    80015bc4:	6418                	ld	a4,8(s0)
    80015bc6:	47b1                	li	a5,12
    TEST_END();
    80015bc8:	00011597          	auipc	a1,0x11
    80015bcc:	2b858593          	addi	a1,a1,696 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80015bd0:	00f70763          	beq	a4,a5,80015bde <instruction_page_fault_2+0x114>
    80015bd4:	4481                	li	s1,0
    TEST_END();
    80015bd6:	00011597          	auipc	a1,0x11
    80015bda:	2ba58593          	addi	a1,a1,698 # 80026e90 <__func__.0+0x2d0>
    80015bde:	00011517          	auipc	a0,0x11
    80015be2:	35a50513          	addi	a0,a0,858 # 80026f38 <__func__.0+0x378>
    80015be6:	31e0f0ef          	jal	80024f04 <printf>
    80015bea:	4511                	li	a0,4
    80015bec:	80aeb0ef          	jal	80000bf6 <goto_priv>
    80015bf0:	8bdeb0ef          	jal	800014ac <reset_state>
}
    80015bf4:	60e2                	ld	ra,24(sp)
    80015bf6:	6442                	ld	s0,16(sp)
    80015bf8:	8526                	mv	a0,s1
    80015bfa:	64a2                	ld	s1,8(sp)
    80015bfc:	6105                	addi	sp,sp,32
    80015bfe:	8082                	ret

0000000080015c00 <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80015c00:	1101                	addi	sp,sp,-32

    TEST_START();
    80015c02:	00010597          	auipc	a1,0x10
    80015c06:	13658593          	addi	a1,a1,310 # 80025d38 <__func__.23>
    80015c0a:	00011517          	auipc	a0,0x11
    80015c0e:	29650513          	addi	a0,a0,662 # 80026ea0 <__func__.0+0x2e0>
bool instruction_page_fault_3(){
    80015c12:	ec06                	sd	ra,24(sp)
    80015c14:	e822                	sd	s0,16(sp)
    80015c16:	e426                	sd	s1,8(sp)
    TEST_START();
    80015c18:	2ec0f0ef          	jal	80024f04 <printf>
    80015c1c:	4529                	li	a0,10
    80015c1e:	0f00e0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80015c22:	450d                	li	a0,3
    80015c24:	fd3ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80015c28:	9b9ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015c2c:	bf7ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80015c30:	a81ea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80015c34:	4509                	li	a0,2
    80015c36:	fc1ea0ef          	jal	80000bf6 <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80015c3a:	0330000f          	fence	rw,rw
    80015c3e:	00033417          	auipc	s0,0x33
    80015c42:	3d240413          	addi	s0,s0,978 # 80049010 <excpt>
    80015c46:	4785                	li	a5,1
    80015c48:	00033717          	auipc	a4,0x33
    80015c4c:	40073023          	sd	zero,1024(a4) # 80049048 <excpt+0x38>
    80015c50:	00f41023          	sh	a5,0(s0)
    80015c54:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80015c58:	400197b7          	lui	a5,0x40019
    80015c5c:	078a                	slli	a5,a5,0x2
    80015c5e:	00000297          	auipc	t0,0x0
    80015c62:	00c28293          	addi	t0,t0,12 # 80015c6a <instruction_page_fault_3+0x6a>
    80015c66:	02543c23          	sd	t0,56(s0)
    80015c6a:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80015c6c:	08200593          	li	a1,130
    80015c70:	00016617          	auipc	a2,0x16
    80015c74:	20060613          	addi	a2,a2,512 # 8002be70 <__func__.0+0x52b0>
    80015c78:	00011517          	auipc	a0,0x11
    80015c7c:	24050513          	addi	a0,a0,576 # 80026eb8 <__func__.0+0x2f8>
    80015c80:	2840f0ef          	jal	80024f04 <printf>
    80015c84:	00033797          	auipc	a5,0x33
    80015c88:	38d7c783          	lbu	a5,909(a5) # 80049011 <excpt+0x1>
    80015c8c:	00011597          	auipc	a1,0x11
    80015c90:	20458593          	addi	a1,a1,516 # 80026e90 <__func__.0+0x2d0>
    80015c94:	cf89                	beqz	a5,80015cae <instruction_page_fault_3+0xae>
    80015c96:	6418                	ld	a4,8(s0)
    80015c98:	47b1                	li	a5,12
    80015c9a:	00011597          	auipc	a1,0x11
    80015c9e:	1e658593          	addi	a1,a1,486 # 80026e80 <__func__.0+0x2c0>
    80015ca2:	00f70663          	beq	a4,a5,80015cae <instruction_page_fault_3+0xae>
    80015ca6:	00011597          	auipc	a1,0x11
    80015caa:	1ea58593          	addi	a1,a1,490 # 80026e90 <__func__.0+0x2d0>
    80015cae:	00011517          	auipc	a0,0x11
    80015cb2:	22250513          	addi	a0,a0,546 # 80026ed0 <__func__.0+0x310>
    80015cb6:	24e0f0ef          	jal	80024f04 <printf>
    80015cba:	00033797          	auipc	a5,0x33
    80015cbe:	3577c783          	lbu	a5,855(a5) # 80049011 <excpt+0x1>
    80015cc2:	c789                	beqz	a5,80015ccc <instruction_page_fault_3+0xcc>
    80015cc4:	6418                	ld	a4,8(s0)
    80015cc6:	47b1                	li	a5,12
    80015cc8:	00f70c63          	beq	a4,a5,80015ce0 <instruction_page_fault_3+0xe0>
    80015ccc:	00011517          	auipc	a0,0x11
    80015cd0:	20c50513          	addi	a0,a0,524 # 80026ed8 <__func__.0+0x318>
    80015cd4:	2300f0ef          	jal	80024f04 <printf>
    80015cd8:	02900513          	li	a0,41
    80015cdc:	0320e0ef          	jal	80023d0e <putchar>
    80015ce0:	4529                	li	a0,10
    80015ce2:	02c0e0ef          	jal	80023d0e <putchar>
    80015ce6:	00033797          	auipc	a5,0x33
    80015cea:	32b7c783          	lbu	a5,811(a5) # 80049011 <excpt+0x1>
    80015cee:	4481                	li	s1,0
    80015cf0:	c789                	beqz	a5,80015cfa <instruction_page_fault_3+0xfa>
    80015cf2:	6404                	ld	s1,8(s0)
    80015cf4:	14d1                	addi	s1,s1,-12
    80015cf6:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80015cfa:	0330000f          	fence	rw,rw
    80015cfe:	4785                	li	a5,1
    80015d00:	00033717          	auipc	a4,0x33
    80015d04:	34073423          	sd	zero,840(a4) # 80049048 <excpt+0x38>
    80015d08:	00f41023          	sh	a5,0(s0)
    80015d0c:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80015d10:	001007b7          	lui	a5,0x100
    80015d14:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80015d18:	07b2                	slli	a5,a5,0xc
    80015d1a:	00000297          	auipc	t0,0x0
    80015d1e:	00c28293          	addi	t0,t0,12 # 80015d26 <instruction_page_fault_3+0x126>
    80015d22:	02543c23          	sd	t0,56(s0)
    80015d26:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80015d28:	08200593          	li	a1,130
    80015d2c:	00016617          	auipc	a2,0x16
    80015d30:	17c60613          	addi	a2,a2,380 # 8002bea8 <__func__.0+0x52e8>
    80015d34:	00011517          	auipc	a0,0x11
    80015d38:	18450513          	addi	a0,a0,388 # 80026eb8 <__func__.0+0x2f8>
    80015d3c:	1c80f0ef          	jal	80024f04 <printf>
    80015d40:	00033797          	auipc	a5,0x33
    80015d44:	2d17c783          	lbu	a5,721(a5) # 80049011 <excpt+0x1>
    80015d48:	00011597          	auipc	a1,0x11
    80015d4c:	14858593          	addi	a1,a1,328 # 80026e90 <__func__.0+0x2d0>
    80015d50:	cf89                	beqz	a5,80015d6a <instruction_page_fault_3+0x16a>
    80015d52:	6418                	ld	a4,8(s0)
    80015d54:	47b1                	li	a5,12
    80015d56:	00011597          	auipc	a1,0x11
    80015d5a:	12a58593          	addi	a1,a1,298 # 80026e80 <__func__.0+0x2c0>
    80015d5e:	00f70663          	beq	a4,a5,80015d6a <instruction_page_fault_3+0x16a>
    80015d62:	00011597          	auipc	a1,0x11
    80015d66:	12e58593          	addi	a1,a1,302 # 80026e90 <__func__.0+0x2d0>
    80015d6a:	00011517          	auipc	a0,0x11
    80015d6e:	16650513          	addi	a0,a0,358 # 80026ed0 <__func__.0+0x310>
    80015d72:	1920f0ef          	jal	80024f04 <printf>
    80015d76:	00033797          	auipc	a5,0x33
    80015d7a:	29b7c783          	lbu	a5,667(a5) # 80049011 <excpt+0x1>
    80015d7e:	c789                	beqz	a5,80015d88 <instruction_page_fault_3+0x188>
    80015d80:	6418                	ld	a4,8(s0)
    80015d82:	47b1                	li	a5,12
    80015d84:	00f70c63          	beq	a4,a5,80015d9c <instruction_page_fault_3+0x19c>
    80015d88:	00011517          	auipc	a0,0x11
    80015d8c:	15050513          	addi	a0,a0,336 # 80026ed8 <__func__.0+0x318>
    80015d90:	1740f0ef          	jal	80024f04 <printf>
    80015d94:	02900513          	li	a0,41
    80015d98:	7770d0ef          	jal	80023d0e <putchar>
    80015d9c:	4529                	li	a0,10
    80015d9e:	7710d0ef          	jal	80023d0e <putchar>
    80015da2:	c095                	beqz	s1,80015dc6 <instruction_page_fault_3+0x1c6>
    80015da4:	00033497          	auipc	s1,0x33
    80015da8:	26d4c483          	lbu	s1,621(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80015dac:	00011597          	auipc	a1,0x11
    80015db0:	0e458593          	addi	a1,a1,228 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80015db4:	cc91                	beqz	s1,80015dd0 <instruction_page_fault_3+0x1d0>
    80015db6:	6418                	ld	a4,8(s0)
    80015db8:	47b1                	li	a5,12
    TEST_END();
    80015dba:	00011597          	auipc	a1,0x11
    80015dbe:	0c658593          	addi	a1,a1,198 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80015dc2:	00f70763          	beq	a4,a5,80015dd0 <instruction_page_fault_3+0x1d0>
    80015dc6:	4481                	li	s1,0
    TEST_END();
    80015dc8:	00011597          	auipc	a1,0x11
    80015dcc:	0c858593          	addi	a1,a1,200 # 80026e90 <__func__.0+0x2d0>
    80015dd0:	00011517          	auipc	a0,0x11
    80015dd4:	16850513          	addi	a0,a0,360 # 80026f38 <__func__.0+0x378>
    80015dd8:	12c0f0ef          	jal	80024f04 <printf>
    80015ddc:	4511                	li	a0,4
    80015dde:	e19ea0ef          	jal	80000bf6 <goto_priv>
    80015de2:	ecaeb0ef          	jal	800014ac <reset_state>
}
    80015de6:	60e2                	ld	ra,24(sp)
    80015de8:	6442                	ld	s0,16(sp)
    80015dea:	8526                	mv	a0,s1
    80015dec:	64a2                	ld	s1,8(sp)
    80015dee:	6105                	addi	sp,sp,32
    80015df0:	8082                	ret

0000000080015df2 <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    80015df2:	1101                	addi	sp,sp,-32

    TEST_START();
    80015df4:	00010597          	auipc	a1,0x10
    80015df8:	f6458593          	addi	a1,a1,-156 # 80025d58 <__func__.22>
    80015dfc:	00011517          	auipc	a0,0x11
    80015e00:	0a450513          	addi	a0,a0,164 # 80026ea0 <__func__.0+0x2e0>
bool instruction_page_fault_4(){
    80015e04:	ec06                	sd	ra,24(sp)
    80015e06:	e822                	sd	s0,16(sp)
    80015e08:	e426                	sd	s1,8(sp)
    TEST_START();
    80015e0a:	0fa0f0ef          	jal	80024f04 <printf>
    80015e0e:	4529                	li	a0,10
    80015e10:	6ff0d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80015e14:	450d                	li	a0,3
    80015e16:	de1ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80015e1a:	fc6ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015e1e:	a05ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80015e22:	88fea0ef          	jal	800006b0 <vspt_init>


    goto_priv(PRIV_VS);
    80015e26:	4509                	li	a0,2
    80015e28:	dcfea0ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015e2c:	0330000f          	fence	rw,rw
    80015e30:	00033417          	auipc	s0,0x33
    80015e34:	1e040413          	addi	s0,s0,480 # 80049010 <excpt>
    80015e38:	4785                	li	a5,1
    80015e3a:	00033717          	auipc	a4,0x33
    80015e3e:	20073723          	sd	zero,526(a4) # 80049048 <excpt+0x38>
    80015e42:	00f41023          	sh	a5,0(s0)
    80015e46:	0330000f          	fence	rw,rw
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80015e4a:	000807b7          	lui	a5,0x80
    80015e4e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015e50:	07b6                	slli	a5,a5,0xd
    80015e52:	00000297          	auipc	t0,0x0
    80015e56:	00c28293          	addi	t0,t0,12 # 80015e5e <instruction_page_fault_4+0x6c>
    80015e5a:	02543c23          	sd	t0,56(s0)
    80015e5e:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80015e60:	08200593          	li	a1,130
    80015e64:	00016617          	auipc	a2,0x16
    80015e68:	07c60613          	addi	a2,a2,124 # 8002bee0 <__func__.0+0x5320>
    80015e6c:	00011517          	auipc	a0,0x11
    80015e70:	04c50513          	addi	a0,a0,76 # 80026eb8 <__func__.0+0x2f8>
    80015e74:	0900f0ef          	jal	80024f04 <printf>
    80015e78:	00033797          	auipc	a5,0x33
    80015e7c:	1997c783          	lbu	a5,409(a5) # 80049011 <excpt+0x1>
    80015e80:	00011597          	auipc	a1,0x11
    80015e84:	01058593          	addi	a1,a1,16 # 80026e90 <__func__.0+0x2d0>
    80015e88:	cf89                	beqz	a5,80015ea2 <instruction_page_fault_4+0xb0>
    80015e8a:	6418                	ld	a4,8(s0)
    80015e8c:	47b1                	li	a5,12
    80015e8e:	00011597          	auipc	a1,0x11
    80015e92:	ff258593          	addi	a1,a1,-14 # 80026e80 <__func__.0+0x2c0>
    80015e96:	00f70663          	beq	a4,a5,80015ea2 <instruction_page_fault_4+0xb0>
    80015e9a:	00011597          	auipc	a1,0x11
    80015e9e:	ff658593          	addi	a1,a1,-10 # 80026e90 <__func__.0+0x2d0>
    80015ea2:	00011517          	auipc	a0,0x11
    80015ea6:	02e50513          	addi	a0,a0,46 # 80026ed0 <__func__.0+0x310>
    80015eaa:	05a0f0ef          	jal	80024f04 <printf>
    80015eae:	00033797          	auipc	a5,0x33
    80015eb2:	1637c783          	lbu	a5,355(a5) # 80049011 <excpt+0x1>
    80015eb6:	c789                	beqz	a5,80015ec0 <instruction_page_fault_4+0xce>
    80015eb8:	6418                	ld	a4,8(s0)
    80015eba:	47b1                	li	a5,12
    80015ebc:	00f70c63          	beq	a4,a5,80015ed4 <instruction_page_fault_4+0xe2>
    80015ec0:	00011517          	auipc	a0,0x11
    80015ec4:	01850513          	addi	a0,a0,24 # 80026ed8 <__func__.0+0x318>
    80015ec8:	03c0f0ef          	jal	80024f04 <printf>
    80015ecc:	02900513          	li	a0,41
    80015ed0:	63f0d0ef          	jal	80023d0e <putchar>
    80015ed4:	4529                	li	a0,10
    80015ed6:	6390d0ef          	jal	80023d0e <putchar>
    80015eda:	00033497          	auipc	s1,0x33
    80015ede:	1374c483          	lbu	s1,311(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80015ee2:	00011597          	auipc	a1,0x11
    80015ee6:	fae58593          	addi	a1,a1,-82 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80015eea:	cc91                	beqz	s1,80015f06 <instruction_page_fault_4+0x114>
    80015eec:	6418                	ld	a4,8(s0)
    80015eee:	47b1                	li	a5,12
    TEST_END();
    80015ef0:	00011597          	auipc	a1,0x11
    80015ef4:	f9058593          	addi	a1,a1,-112 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80015ef8:	00f70763          	beq	a4,a5,80015f06 <instruction_page_fault_4+0x114>
    80015efc:	4481                	li	s1,0
    TEST_END();
    80015efe:	00011597          	auipc	a1,0x11
    80015f02:	f9258593          	addi	a1,a1,-110 # 80026e90 <__func__.0+0x2d0>
    80015f06:	00011517          	auipc	a0,0x11
    80015f0a:	03250513          	addi	a0,a0,50 # 80026f38 <__func__.0+0x378>
    80015f0e:	7f70e0ef          	jal	80024f04 <printf>
    80015f12:	4511                	li	a0,4
    80015f14:	ce3ea0ef          	jal	80000bf6 <goto_priv>
    80015f18:	d94eb0ef          	jal	800014ac <reset_state>
}
    80015f1c:	60e2                	ld	ra,24(sp)
    80015f1e:	6442                	ld	s0,16(sp)
    80015f20:	8526                	mv	a0,s1
    80015f22:	64a2                	ld	s1,8(sp)
    80015f24:	6105                	addi	sp,sp,32
    80015f26:	8082                	ret

0000000080015f28 <load_page_fault_1>:

bool load_page_fault_1(){
    80015f28:	1101                	addi	sp,sp,-32

    TEST_START();
    80015f2a:	00010597          	auipc	a1,0x10
    80015f2e:	e4e58593          	addi	a1,a1,-434 # 80025d78 <__func__.21>
    80015f32:	00011517          	auipc	a0,0x11
    80015f36:	f6e50513          	addi	a0,a0,-146 # 80026ea0 <__func__.0+0x2e0>
bool load_page_fault_1(){
    80015f3a:	ec06                	sd	ra,24(sp)
    80015f3c:	e822                	sd	s0,16(sp)
    80015f3e:	e426                	sd	s1,8(sp)
    TEST_START();
    80015f40:	7c50e0ef          	jal	80024f04 <printf>
    80015f44:	4529                	li	a0,10
    80015f46:	5c90d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS); 
    80015f4a:	450d                	li	a0,3
    80015f4c:	cabea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80015f50:	e90ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015f54:	8cfea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80015f58:	f58ea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015f5c:	450d                	li	a0,3
    80015f5e:	c99ea0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80015f62:	4509                	li	a0,2
    80015f64:	bb3ea0ef          	jal	80000b16 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015f68:	0330000f          	fence	rw,rw
    80015f6c:	00033417          	auipc	s0,0x33
    80015f70:	0a440413          	addi	s0,s0,164 # 80049010 <excpt>
    80015f74:	4785                	li	a5,1
    80015f76:	00033717          	auipc	a4,0x33
    80015f7a:	0c073923          	sd	zero,210(a4) # 80049048 <excpt+0x38>
    80015f7e:	00f41023          	sh	a5,0(s0)
    80015f82:	0330000f          	fence	rw,rw
    asm volatile(
    80015f86:	400197b7          	lui	a5,0x40019
    80015f8a:	078a                	slli	a5,a5,0x2
    80015f8c:	6007c7f3          	.insn	4, 0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    80015f90:	08200593          	li	a1,130
    80015f94:	00016617          	auipc	a2,0x16
    80015f98:	f8460613          	addi	a2,a2,-124 # 8002bf18 <__func__.0+0x5358>
    80015f9c:	00011517          	auipc	a0,0x11
    80015fa0:	f1c50513          	addi	a0,a0,-228 # 80026eb8 <__func__.0+0x2f8>
    80015fa4:	7610e0ef          	jal	80024f04 <printf>
    80015fa8:	00033797          	auipc	a5,0x33
    80015fac:	0697c783          	lbu	a5,105(a5) # 80049011 <excpt+0x1>
    80015fb0:	00011597          	auipc	a1,0x11
    80015fb4:	ee058593          	addi	a1,a1,-288 # 80026e90 <__func__.0+0x2d0>
    80015fb8:	cf89                	beqz	a5,80015fd2 <load_page_fault_1+0xaa>
    80015fba:	6418                	ld	a4,8(s0)
    80015fbc:	47b5                	li	a5,13
    80015fbe:	00011597          	auipc	a1,0x11
    80015fc2:	ec258593          	addi	a1,a1,-318 # 80026e80 <__func__.0+0x2c0>
    80015fc6:	00f70663          	beq	a4,a5,80015fd2 <load_page_fault_1+0xaa>
    80015fca:	00011597          	auipc	a1,0x11
    80015fce:	ec658593          	addi	a1,a1,-314 # 80026e90 <__func__.0+0x2d0>
    80015fd2:	00011517          	auipc	a0,0x11
    80015fd6:	efe50513          	addi	a0,a0,-258 # 80026ed0 <__func__.0+0x310>
    80015fda:	72b0e0ef          	jal	80024f04 <printf>
    80015fde:	00033797          	auipc	a5,0x33
    80015fe2:	0337c783          	lbu	a5,51(a5) # 80049011 <excpt+0x1>
    80015fe6:	c789                	beqz	a5,80015ff0 <load_page_fault_1+0xc8>
    80015fe8:	6418                	ld	a4,8(s0)
    80015fea:	47b5                	li	a5,13
    80015fec:	00f70c63          	beq	a4,a5,80016004 <load_page_fault_1+0xdc>
    80015ff0:	00011517          	auipc	a0,0x11
    80015ff4:	ee850513          	addi	a0,a0,-280 # 80026ed8 <__func__.0+0x318>
    80015ff8:	70d0e0ef          	jal	80024f04 <printf>
    80015ffc:	02900513          	li	a0,41
    80016000:	50f0d0ef          	jal	80023d0e <putchar>
    80016004:	4529                	li	a0,10
    80016006:	5090d0ef          	jal	80023d0e <putchar>
    8001600a:	00033797          	auipc	a5,0x33
    8001600e:	0077c783          	lbu	a5,7(a5) # 80049011 <excpt+0x1>
    80016012:	4481                	li	s1,0
    80016014:	c789                	beqz	a5,8001601e <load_page_fault_1+0xf6>
    80016016:	6404                	ld	s1,8(s0)
    80016018:	14cd                	addi	s1,s1,-13
    8001601a:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    8001601e:	0330000f          	fence	rw,rw
    80016022:	4785                	li	a5,1
    80016024:	00033717          	auipc	a4,0x33
    80016028:	02073223          	sd	zero,36(a4) # 80049048 <excpt+0x38>
    8001602c:	00f41023          	sh	a5,0(s0)
    80016030:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016034:	000807b7          	lui	a5,0x80
    80016038:	1007b073          	csrc	sstatus,a5
    asm volatile(
    8001603c:	001007b7          	lui	a5,0x100
    80016040:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80016044:	07b2                	slli	a5,a5,0xc
    80016046:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001604a:	08200593          	li	a1,130
    8001604e:	00016617          	auipc	a2,0x16
    80016052:	ef260613          	addi	a2,a2,-270 # 8002bf40 <__func__.0+0x5380>
    80016056:	00011517          	auipc	a0,0x11
    8001605a:	e6250513          	addi	a0,a0,-414 # 80026eb8 <__func__.0+0x2f8>
    8001605e:	6a70e0ef          	jal	80024f04 <printf>
    80016062:	00033797          	auipc	a5,0x33
    80016066:	faf7c783          	lbu	a5,-81(a5) # 80049011 <excpt+0x1>
    8001606a:	00011597          	auipc	a1,0x11
    8001606e:	e2658593          	addi	a1,a1,-474 # 80026e90 <__func__.0+0x2d0>
    80016072:	cf89                	beqz	a5,8001608c <load_page_fault_1+0x164>
    80016074:	6418                	ld	a4,8(s0)
    80016076:	47b5                	li	a5,13
    80016078:	00011597          	auipc	a1,0x11
    8001607c:	e0858593          	addi	a1,a1,-504 # 80026e80 <__func__.0+0x2c0>
    80016080:	00f70663          	beq	a4,a5,8001608c <load_page_fault_1+0x164>
    80016084:	00011597          	auipc	a1,0x11
    80016088:	e0c58593          	addi	a1,a1,-500 # 80026e90 <__func__.0+0x2d0>
    8001608c:	00011517          	auipc	a0,0x11
    80016090:	e4450513          	addi	a0,a0,-444 # 80026ed0 <__func__.0+0x310>
    80016094:	6710e0ef          	jal	80024f04 <printf>
    80016098:	00033797          	auipc	a5,0x33
    8001609c:	f797c783          	lbu	a5,-135(a5) # 80049011 <excpt+0x1>
    800160a0:	c789                	beqz	a5,800160aa <load_page_fault_1+0x182>
    800160a2:	6418                	ld	a4,8(s0)
    800160a4:	47b5                	li	a5,13
    800160a6:	00f70c63          	beq	a4,a5,800160be <load_page_fault_1+0x196>
    800160aa:	00011517          	auipc	a0,0x11
    800160ae:	e2e50513          	addi	a0,a0,-466 # 80026ed8 <__func__.0+0x318>
    800160b2:	6530e0ef          	jal	80024f04 <printf>
    800160b6:	02900513          	li	a0,41
    800160ba:	4550d0ef          	jal	80023d0e <putchar>
    800160be:	4529                	li	a0,10
    800160c0:	44f0d0ef          	jal	80023d0e <putchar>
    800160c4:	c881                	beqz	s1,800160d4 <load_page_fault_1+0x1ac>
    800160c6:	00033797          	auipc	a5,0x33
    800160ca:	f4b7c783          	lbu	a5,-181(a5) # 80049011 <excpt+0x1>
    800160ce:	4481                	li	s1,0
    800160d0:	0e079763          	bnez	a5,800161be <load_page_fault_1+0x296>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    800160d4:	450d                	li	a0,3
    800160d6:	b21ea0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800160da:	0330000f          	fence	rw,rw
    800160de:	4785                	li	a5,1
    800160e0:	00033717          	auipc	a4,0x33
    800160e4:	f6073423          	sd	zero,-152(a4) # 80049048 <excpt+0x38>
    800160e8:	00f41023          	sh	a5,0(s0)
    800160ec:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800160f0:	000807b7          	lui	a5,0x80
    800160f4:	1007a073          	csrs	sstatus,a5
    800160f8:	001007b7          	lui	a5,0x100
    800160fc:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    800160fe:	07b2                	slli	a5,a5,0xc
    80016100:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80016104:	08200593          	li	a1,130
    80016108:	00016617          	auipc	a2,0x16
    8001610c:	e7860613          	addi	a2,a2,-392 # 8002bf80 <__func__.0+0x53c0>
    80016110:	00011517          	auipc	a0,0x11
    80016114:	da850513          	addi	a0,a0,-600 # 80026eb8 <__func__.0+0x2f8>
    80016118:	5ed0e0ef          	jal	80024f04 <printf>
    8001611c:	00033797          	auipc	a5,0x33
    80016120:	ef57c783          	lbu	a5,-267(a5) # 80049011 <excpt+0x1>
    80016124:	00011597          	auipc	a1,0x11
    80016128:	d6c58593          	addi	a1,a1,-660 # 80026e90 <__func__.0+0x2d0>
    8001612c:	cf89                	beqz	a5,80016146 <load_page_fault_1+0x21e>
    8001612e:	6418                	ld	a4,8(s0)
    80016130:	47b5                	li	a5,13
    80016132:	00011597          	auipc	a1,0x11
    80016136:	d4e58593          	addi	a1,a1,-690 # 80026e80 <__func__.0+0x2c0>
    8001613a:	00f70663          	beq	a4,a5,80016146 <load_page_fault_1+0x21e>
    8001613e:	00011597          	auipc	a1,0x11
    80016142:	d5258593          	addi	a1,a1,-686 # 80026e90 <__func__.0+0x2d0>
    80016146:	00011517          	auipc	a0,0x11
    8001614a:	d8a50513          	addi	a0,a0,-630 # 80026ed0 <__func__.0+0x310>
    8001614e:	5b70e0ef          	jal	80024f04 <printf>
    80016152:	00033797          	auipc	a5,0x33
    80016156:	ebf7c783          	lbu	a5,-321(a5) # 80049011 <excpt+0x1>
    8001615a:	c789                	beqz	a5,80016164 <load_page_fault_1+0x23c>
    8001615c:	6418                	ld	a4,8(s0)
    8001615e:	47b5                	li	a5,13
    80016160:	00f70c63          	beq	a4,a5,80016178 <load_page_fault_1+0x250>
    80016164:	00011517          	auipc	a0,0x11
    80016168:	d7450513          	addi	a0,a0,-652 # 80026ed8 <__func__.0+0x318>
    8001616c:	5990e0ef          	jal	80024f04 <printf>
    80016170:	02900513          	li	a0,41
    80016174:	39b0d0ef          	jal	80023d0e <putchar>
    80016178:	4529                	li	a0,10
    8001617a:	3950d0ef          	jal	80023d0e <putchar>
    8001617e:	c491                	beqz	s1,8001618a <load_page_fault_1+0x262>
    80016180:	00033497          	auipc	s1,0x33
    80016184:	e914c483          	lbu	s1,-367(s1) # 80049011 <excpt+0x1>
    80016188:	e0a1                	bnez	s1,800161c8 <load_page_fault_1+0x2a0>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001618a:	000807b7          	lui	a5,0x80
    8001618e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80016192:	4481                	li	s1,0

    TEST_END();
    80016194:	00011597          	auipc	a1,0x11
    80016198:	cfc58593          	addi	a1,a1,-772 # 80026e90 <__func__.0+0x2d0>
    8001619c:	00011517          	auipc	a0,0x11
    800161a0:	d9c50513          	addi	a0,a0,-612 # 80026f38 <__func__.0+0x378>
    800161a4:	5610e0ef          	jal	80024f04 <printf>
    800161a8:	4511                	li	a0,4
    800161aa:	a4dea0ef          	jal	80000bf6 <goto_priv>
    800161ae:	afeeb0ef          	jal	800014ac <reset_state>

}
    800161b2:	60e2                	ld	ra,24(sp)
    800161b4:	6442                	ld	s0,16(sp)
    800161b6:	8526                	mv	a0,s1
    800161b8:	64a2                	ld	s1,8(sp)
    800161ba:	6105                	addi	sp,sp,32
    800161bc:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800161be:	6404                	ld	s1,8(s0)
    800161c0:	14cd                	addi	s1,s1,-13
    800161c2:	0014b493          	seqz	s1,s1
    800161c6:	b739                	j	800160d4 <load_page_fault_1+0x1ac>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800161c8:	6418                	ld	a4,8(s0)
    800161ca:	47b5                	li	a5,13
    800161cc:	faf71fe3          	bne	a4,a5,8001618a <load_page_fault_1+0x262>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800161d0:	000807b7          	lui	a5,0x80
    800161d4:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800161d8:	00011597          	auipc	a1,0x11
    800161dc:	ca858593          	addi	a1,a1,-856 # 80026e80 <__func__.0+0x2c0>
    800161e0:	bf75                	j	8001619c <load_page_fault_1+0x274>

00000000800161e2 <load_page_fault_2>:

bool load_page_fault_2(){
    800161e2:	1101                	addi	sp,sp,-32

    TEST_START();
    800161e4:	00010597          	auipc	a1,0x10
    800161e8:	bac58593          	addi	a1,a1,-1108 # 80025d90 <__func__.20>
    800161ec:	00011517          	auipc	a0,0x11
    800161f0:	cb450513          	addi	a0,a0,-844 # 80026ea0 <__func__.0+0x2e0>
bool load_page_fault_2(){
    800161f4:	ec06                	sd	ra,24(sp)
    800161f6:	e822                	sd	s0,16(sp)
    800161f8:	e426                	sd	s1,8(sp)
    TEST_START();
    800161fa:	50b0e0ef          	jal	80024f04 <printf>
    800161fe:	4529                	li	a0,10
    80016200:	30f0d0ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_HS);
    80016204:	450d                	li	a0,3
    80016206:	9f1ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001620a:	bd6ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001620e:	e14ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016212:	c9eea0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016216:	4511                	li	a0,4
    80016218:	9dfea0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001621c:	000407b7          	lui	a5,0x40
    80016220:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80016224:	450d                	li	a0,3
    80016226:	9d1ea0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001622a:	4509                	li	a0,2
    8001622c:	8ebea0ef          	jal	80000b16 <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016230:	0330000f          	fence	rw,rw
    80016234:	00033417          	auipc	s0,0x33
    80016238:	ddc40413          	addi	s0,s0,-548 # 80049010 <excpt>
    8001623c:	4785                	li	a5,1
    8001623e:	00033717          	auipc	a4,0x33
    80016242:	e0073523          	sd	zero,-502(a4) # 80049048 <excpt+0x38>
    80016246:	00f41023          	sh	a5,0(s0)
    8001624a:	0330000f          	fence	rw,rw
    8001624e:	000807b7          	lui	a5,0x80
    80016252:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016254:	07b6                	slli	a5,a5,0xd
    80016256:	6c07c7f3          	.insn	4, 0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    8001625a:	08200593          	li	a1,130
    8001625e:	00016617          	auipc	a2,0x16
    80016262:	d6a60613          	addi	a2,a2,-662 # 8002bfc8 <__func__.0+0x5408>
    80016266:	00011517          	auipc	a0,0x11
    8001626a:	c5250513          	addi	a0,a0,-942 # 80026eb8 <__func__.0+0x2f8>
    8001626e:	4970e0ef          	jal	80024f04 <printf>
    80016272:	00033797          	auipc	a5,0x33
    80016276:	d9f7c783          	lbu	a5,-609(a5) # 80049011 <excpt+0x1>
    8001627a:	00011597          	auipc	a1,0x11
    8001627e:	c1658593          	addi	a1,a1,-1002 # 80026e90 <__func__.0+0x2d0>
    80016282:	cf89                	beqz	a5,8001629c <load_page_fault_2+0xba>
    80016284:	6418                	ld	a4,8(s0)
    80016286:	47b5                	li	a5,13
    80016288:	00011597          	auipc	a1,0x11
    8001628c:	bf858593          	addi	a1,a1,-1032 # 80026e80 <__func__.0+0x2c0>
    80016290:	00f70663          	beq	a4,a5,8001629c <load_page_fault_2+0xba>
    80016294:	00011597          	auipc	a1,0x11
    80016298:	bfc58593          	addi	a1,a1,-1028 # 80026e90 <__func__.0+0x2d0>
    8001629c:	00011517          	auipc	a0,0x11
    800162a0:	c3450513          	addi	a0,a0,-972 # 80026ed0 <__func__.0+0x310>
    800162a4:	4610e0ef          	jal	80024f04 <printf>
    800162a8:	00033797          	auipc	a5,0x33
    800162ac:	d697c783          	lbu	a5,-663(a5) # 80049011 <excpt+0x1>
    800162b0:	c789                	beqz	a5,800162ba <load_page_fault_2+0xd8>
    800162b2:	6418                	ld	a4,8(s0)
    800162b4:	47b5                	li	a5,13
    800162b6:	00f70c63          	beq	a4,a5,800162ce <load_page_fault_2+0xec>
    800162ba:	00011517          	auipc	a0,0x11
    800162be:	c1e50513          	addi	a0,a0,-994 # 80026ed8 <__func__.0+0x318>
    800162c2:	4430e0ef          	jal	80024f04 <printf>
    800162c6:	02900513          	li	a0,41
    800162ca:	2450d0ef          	jal	80023d0e <putchar>
    800162ce:	4529                	li	a0,10
    800162d0:	23f0d0ef          	jal	80023d0e <putchar>
    800162d4:	00033497          	auipc	s1,0x33
    800162d8:	d3d4c483          	lbu	s1,-707(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800162dc:	00011597          	auipc	a1,0x11
    800162e0:	bb458593          	addi	a1,a1,-1100 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800162e4:	cc91                	beqz	s1,80016300 <load_page_fault_2+0x11e>
    800162e6:	6418                	ld	a4,8(s0)
    800162e8:	47b5                	li	a5,13
    TEST_END();
    800162ea:	00011597          	auipc	a1,0x11
    800162ee:	b9658593          	addi	a1,a1,-1130 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    800162f2:	00f70763          	beq	a4,a5,80016300 <load_page_fault_2+0x11e>
    800162f6:	4481                	li	s1,0
    TEST_END();
    800162f8:	00011597          	auipc	a1,0x11
    800162fc:	b9858593          	addi	a1,a1,-1128 # 80026e90 <__func__.0+0x2d0>
    80016300:	00011517          	auipc	a0,0x11
    80016304:	c3850513          	addi	a0,a0,-968 # 80026f38 <__func__.0+0x378>
    80016308:	3fd0e0ef          	jal	80024f04 <printf>
    8001630c:	4511                	li	a0,4
    8001630e:	8e9ea0ef          	jal	80000bf6 <goto_priv>
    80016312:	99aeb0ef          	jal	800014ac <reset_state>
}
    80016316:	60e2                	ld	ra,24(sp)
    80016318:	6442                	ld	s0,16(sp)
    8001631a:	8526                	mv	a0,s1
    8001631c:	64a2                	ld	s1,8(sp)
    8001631e:	6105                	addi	sp,sp,32
    80016320:	8082                	ret

0000000080016322 <load_page_fault_3>:

bool load_page_fault_3(){
    80016322:	1141                	addi	sp,sp,-16

    TEST_START();
    80016324:	00010597          	auipc	a1,0x10
    80016328:	a8458593          	addi	a1,a1,-1404 # 80025da8 <__func__.19>
    8001632c:	00011517          	auipc	a0,0x11
    80016330:	b7450513          	addi	a0,a0,-1164 # 80026ea0 <__func__.0+0x2e0>
bool load_page_fault_3(){
    80016334:	e406                	sd	ra,8(sp)
    80016336:	e022                	sd	s0,0(sp)
    TEST_START();
    80016338:	3cd0e0ef          	jal	80024f04 <printf>
    8001633c:	4529                	li	a0,10
    8001633e:	1d10d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80016342:	450d                	li	a0,3
    80016344:	8b3ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016348:	a98ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001634c:	cd6ea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016350:	b60ea0ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016354:	4511                	li	a0,4
    80016356:	8a1ea0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001635a:	000407b7          	lui	a5,0x40
    8001635e:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80016362:	450d                	li	a0,3
    80016364:	893ea0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016368:	4509                	li	a0,2
    8001636a:	facea0ef          	jal	80000b16 <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    8001636e:	0330000f          	fence	rw,rw
    80016372:	4785                	li	a5,1
    80016374:	00033717          	auipc	a4,0x33
    80016378:	cc073a23          	sd	zero,-812(a4) # 80049048 <excpt+0x38>
    8001637c:	00033717          	auipc	a4,0x33
    80016380:	c8f71a23          	sh	a5,-876(a4) # 80049010 <excpt>
    80016384:	0330000f          	fence	rw,rw
    asm volatile(
    80016388:	000807b7          	lui	a5,0x80
    8001638c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001638e:	07b6                	slli	a5,a5,0xd
    80016390:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80016394:	08200593          	li	a1,130
    80016398:	00016617          	auipc	a2,0x16
    8001639c:	c7060613          	addi	a2,a2,-912 # 8002c008 <__func__.0+0x5448>
    800163a0:	00011517          	auipc	a0,0x11
    800163a4:	b1850513          	addi	a0,a0,-1256 # 80026eb8 <__func__.0+0x2f8>
    800163a8:	35d0e0ef          	jal	80024f04 <printf>
    800163ac:	00033797          	auipc	a5,0x33
    800163b0:	c657c783          	lbu	a5,-923(a5) # 80049011 <excpt+0x1>
    800163b4:	00011597          	auipc	a1,0x11
    800163b8:	acc58593          	addi	a1,a1,-1332 # 80026e80 <__func__.0+0x2c0>
    800163bc:	c789                	beqz	a5,800163c6 <load_page_fault_3+0xa4>
    800163be:	00011597          	auipc	a1,0x11
    800163c2:	ad258593          	addi	a1,a1,-1326 # 80026e90 <__func__.0+0x2d0>
    800163c6:	00011517          	auipc	a0,0x11
    800163ca:	b0a50513          	addi	a0,a0,-1270 # 80026ed0 <__func__.0+0x310>
    800163ce:	3370e0ef          	jal	80024f04 <printf>
    800163d2:	00033797          	auipc	a5,0x33
    800163d6:	c3f7c783          	lbu	a5,-961(a5) # 80049011 <excpt+0x1>
    800163da:	e7a1                	bnez	a5,80016422 <load_page_fault_3+0x100>
    800163dc:	4529                	li	a0,10
    800163de:	1310d0ef          	jal	80023d0e <putchar>
    800163e2:	00033797          	auipc	a5,0x33
    800163e6:	c2f7c783          	lbu	a5,-977(a5) # 80049011 <excpt+0x1>
    800163ea:	e795                	bnez	a5,80016416 <load_page_fault_3+0xf4>
    800163ec:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800163ee:	00011597          	auipc	a1,0x11
    800163f2:	a9258593          	addi	a1,a1,-1390 # 80026e80 <__func__.0+0x2c0>
    800163f6:	00011517          	auipc	a0,0x11
    800163fa:	b4250513          	addi	a0,a0,-1214 # 80026f38 <__func__.0+0x378>
    800163fe:	3070e0ef          	jal	80024f04 <printf>
    80016402:	4511                	li	a0,4
    80016404:	ff2ea0ef          	jal	80000bf6 <goto_priv>
    80016408:	8a4eb0ef          	jal	800014ac <reset_state>
}
    8001640c:	60a2                	ld	ra,8(sp)
    8001640e:	8522                	mv	a0,s0
    80016410:	6402                	ld	s0,0(sp)
    80016412:	0141                	addi	sp,sp,16
    80016414:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80016416:	4401                	li	s0,0
    TEST_END();
    80016418:	00011597          	auipc	a1,0x11
    8001641c:	a7858593          	addi	a1,a1,-1416 # 80026e90 <__func__.0+0x2d0>
    80016420:	bfd9                	j	800163f6 <load_page_fault_3+0xd4>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80016422:	00011517          	auipc	a0,0x11
    80016426:	ab650513          	addi	a0,a0,-1354 # 80026ed8 <__func__.0+0x318>
    8001642a:	2db0e0ef          	jal	80024f04 <printf>
    8001642e:	02900513          	li	a0,41
    80016432:	0dd0d0ef          	jal	80023d0e <putchar>
    80016436:	b75d                	j	800163dc <load_page_fault_3+0xba>

0000000080016438 <load_page_fault_4>:


bool load_page_fault_4(){
    80016438:	1101                	addi	sp,sp,-32

    TEST_START();
    8001643a:	00010597          	auipc	a1,0x10
    8001643e:	98658593          	addi	a1,a1,-1658 # 80025dc0 <__func__.18>
    80016442:	00011517          	auipc	a0,0x11
    80016446:	a5e50513          	addi	a0,a0,-1442 # 80026ea0 <__func__.0+0x2e0>
bool load_page_fault_4(){
    8001644a:	ec06                	sd	ra,24(sp)
    8001644c:	e822                	sd	s0,16(sp)
    8001644e:	e426                	sd	s1,8(sp)
    TEST_START();
    80016450:	2b50e0ef          	jal	80024f04 <printf>
    80016454:	4529                	li	a0,10
    80016456:	0b90d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS); 
    8001645a:	450d                	li	a0,3
    8001645c:	f9aea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016460:	980ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016464:	bbeea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016468:	a48ea0ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001646c:	4509                	li	a0,2
    8001646e:	f88ea0ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016472:	0330000f          	fence	rw,rw
    80016476:	00033417          	auipc	s0,0x33
    8001647a:	b9a40413          	addi	s0,s0,-1126 # 80049010 <excpt>
    8001647e:	4785                	li	a5,1
    80016480:	00033717          	auipc	a4,0x33
    80016484:	bc073423          	sd	zero,-1080(a4) # 80049048 <excpt+0x38>
    80016488:	00f41023          	sh	a5,0(s0)
    8001648c:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80016490:	400197b7          	lui	a5,0x40019
    80016494:	078a                	slli	a5,a5,0x2
    80016496:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    8001649a:	08200593          	li	a1,130
    8001649e:	00016617          	auipc	a2,0x16
    800164a2:	ba260613          	addi	a2,a2,-1118 # 8002c040 <__func__.0+0x5480>
    800164a6:	00011517          	auipc	a0,0x11
    800164aa:	a1250513          	addi	a0,a0,-1518 # 80026eb8 <__func__.0+0x2f8>
    800164ae:	2570e0ef          	jal	80024f04 <printf>
    800164b2:	00033797          	auipc	a5,0x33
    800164b6:	b5f7c783          	lbu	a5,-1185(a5) # 80049011 <excpt+0x1>
    800164ba:	00011597          	auipc	a1,0x11
    800164be:	9d658593          	addi	a1,a1,-1578 # 80026e90 <__func__.0+0x2d0>
    800164c2:	cf89                	beqz	a5,800164dc <load_page_fault_4+0xa4>
    800164c4:	6418                	ld	a4,8(s0)
    800164c6:	47b5                	li	a5,13
    800164c8:	00011597          	auipc	a1,0x11
    800164cc:	9b858593          	addi	a1,a1,-1608 # 80026e80 <__func__.0+0x2c0>
    800164d0:	00f70663          	beq	a4,a5,800164dc <load_page_fault_4+0xa4>
    800164d4:	00011597          	auipc	a1,0x11
    800164d8:	9bc58593          	addi	a1,a1,-1604 # 80026e90 <__func__.0+0x2d0>
    800164dc:	00011517          	auipc	a0,0x11
    800164e0:	9f450513          	addi	a0,a0,-1548 # 80026ed0 <__func__.0+0x310>
    800164e4:	2210e0ef          	jal	80024f04 <printf>
    800164e8:	00033797          	auipc	a5,0x33
    800164ec:	b297c783          	lbu	a5,-1239(a5) # 80049011 <excpt+0x1>
    800164f0:	c789                	beqz	a5,800164fa <load_page_fault_4+0xc2>
    800164f2:	6418                	ld	a4,8(s0)
    800164f4:	47b5                	li	a5,13
    800164f6:	00f70c63          	beq	a4,a5,8001650e <load_page_fault_4+0xd6>
    800164fa:	00011517          	auipc	a0,0x11
    800164fe:	9de50513          	addi	a0,a0,-1570 # 80026ed8 <__func__.0+0x318>
    80016502:	2030e0ef          	jal	80024f04 <printf>
    80016506:	02900513          	li	a0,41
    8001650a:	0050d0ef          	jal	80023d0e <putchar>
    8001650e:	4529                	li	a0,10
    80016510:	7fe0d0ef          	jal	80023d0e <putchar>
    80016514:	00033797          	auipc	a5,0x33
    80016518:	afd7c783          	lbu	a5,-1283(a5) # 80049011 <excpt+0x1>
    8001651c:	4481                	li	s1,0
    8001651e:	c789                	beqz	a5,80016528 <load_page_fault_4+0xf0>
    80016520:	6404                	ld	s1,8(s0)
    80016522:	14cd                	addi	s1,s1,-13
    80016524:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80016528:	0330000f          	fence	rw,rw
    8001652c:	4785                	li	a5,1
    8001652e:	00033717          	auipc	a4,0x33
    80016532:	b0073d23          	sd	zero,-1254(a4) # 80049048 <excpt+0x38>
    80016536:	00f41023          	sh	a5,0(s0)
    8001653a:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001653e:	000807b7          	lui	a5,0x80
    80016542:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80016546:	001007b7          	lui	a5,0x100
    8001654a:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001654e:	07b2                	slli	a5,a5,0xc
    80016550:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80016554:	08200593          	li	a1,130
    80016558:	00016617          	auipc	a2,0x16
    8001655c:	b1060613          	addi	a2,a2,-1264 # 8002c068 <__func__.0+0x54a8>
    80016560:	00011517          	auipc	a0,0x11
    80016564:	95850513          	addi	a0,a0,-1704 # 80026eb8 <__func__.0+0x2f8>
    80016568:	19d0e0ef          	jal	80024f04 <printf>
    8001656c:	00033797          	auipc	a5,0x33
    80016570:	aa57c783          	lbu	a5,-1371(a5) # 80049011 <excpt+0x1>
    80016574:	00011597          	auipc	a1,0x11
    80016578:	91c58593          	addi	a1,a1,-1764 # 80026e90 <__func__.0+0x2d0>
    8001657c:	cf89                	beqz	a5,80016596 <load_page_fault_4+0x15e>
    8001657e:	6418                	ld	a4,8(s0)
    80016580:	47b5                	li	a5,13
    80016582:	00011597          	auipc	a1,0x11
    80016586:	8fe58593          	addi	a1,a1,-1794 # 80026e80 <__func__.0+0x2c0>
    8001658a:	00f70663          	beq	a4,a5,80016596 <load_page_fault_4+0x15e>
    8001658e:	00011597          	auipc	a1,0x11
    80016592:	90258593          	addi	a1,a1,-1790 # 80026e90 <__func__.0+0x2d0>
    80016596:	00011517          	auipc	a0,0x11
    8001659a:	93a50513          	addi	a0,a0,-1734 # 80026ed0 <__func__.0+0x310>
    8001659e:	1670e0ef          	jal	80024f04 <printf>
    800165a2:	00033797          	auipc	a5,0x33
    800165a6:	a6f7c783          	lbu	a5,-1425(a5) # 80049011 <excpt+0x1>
    800165aa:	c789                	beqz	a5,800165b4 <load_page_fault_4+0x17c>
    800165ac:	6418                	ld	a4,8(s0)
    800165ae:	47b5                	li	a5,13
    800165b0:	00f70c63          	beq	a4,a5,800165c8 <load_page_fault_4+0x190>
    800165b4:	00011517          	auipc	a0,0x11
    800165b8:	92450513          	addi	a0,a0,-1756 # 80026ed8 <__func__.0+0x318>
    800165bc:	1490e0ef          	jal	80024f04 <printf>
    800165c0:	02900513          	li	a0,41
    800165c4:	74a0d0ef          	jal	80023d0e <putchar>
    800165c8:	4529                	li	a0,10
    800165ca:	7440d0ef          	jal	80023d0e <putchar>
    800165ce:	c881                	beqz	s1,800165de <load_page_fault_4+0x1a6>
    800165d0:	00033797          	auipc	a5,0x33
    800165d4:	a417c783          	lbu	a5,-1471(a5) # 80049011 <excpt+0x1>
    800165d8:	4481                	li	s1,0
    800165da:	0e079763          	bnez	a5,800166c8 <load_page_fault_4+0x290>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    800165de:	4509                	li	a0,2
    800165e0:	e16ea0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    800165e4:	0330000f          	fence	rw,rw
    800165e8:	4785                	li	a5,1
    800165ea:	00033717          	auipc	a4,0x33
    800165ee:	a4073f23          	sd	zero,-1442(a4) # 80049048 <excpt+0x38>
    800165f2:	00f41023          	sh	a5,0(s0)
    800165f6:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800165fa:	000807b7          	lui	a5,0x80
    800165fe:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80016602:	001007b7          	lui	a5,0x100
    80016606:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80016608:	07b2                	slli	a5,a5,0xc
    8001660a:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001660e:	08200593          	li	a1,130
    80016612:	00016617          	auipc	a2,0x16
    80016616:	a8e60613          	addi	a2,a2,-1394 # 8002c0a0 <__func__.0+0x54e0>
    8001661a:	00011517          	auipc	a0,0x11
    8001661e:	89e50513          	addi	a0,a0,-1890 # 80026eb8 <__func__.0+0x2f8>
    80016622:	0e30e0ef          	jal	80024f04 <printf>
    80016626:	00033797          	auipc	a5,0x33
    8001662a:	9eb7c783          	lbu	a5,-1557(a5) # 80049011 <excpt+0x1>
    8001662e:	00011597          	auipc	a1,0x11
    80016632:	86258593          	addi	a1,a1,-1950 # 80026e90 <__func__.0+0x2d0>
    80016636:	cf89                	beqz	a5,80016650 <load_page_fault_4+0x218>
    80016638:	6418                	ld	a4,8(s0)
    8001663a:	47b5                	li	a5,13
    8001663c:	00011597          	auipc	a1,0x11
    80016640:	84458593          	addi	a1,a1,-1980 # 80026e80 <__func__.0+0x2c0>
    80016644:	00f70663          	beq	a4,a5,80016650 <load_page_fault_4+0x218>
    80016648:	00011597          	auipc	a1,0x11
    8001664c:	84858593          	addi	a1,a1,-1976 # 80026e90 <__func__.0+0x2d0>
    80016650:	00011517          	auipc	a0,0x11
    80016654:	88050513          	addi	a0,a0,-1920 # 80026ed0 <__func__.0+0x310>
    80016658:	0ad0e0ef          	jal	80024f04 <printf>
    8001665c:	00033797          	auipc	a5,0x33
    80016660:	9b57c783          	lbu	a5,-1611(a5) # 80049011 <excpt+0x1>
    80016664:	c789                	beqz	a5,8001666e <load_page_fault_4+0x236>
    80016666:	6418                	ld	a4,8(s0)
    80016668:	47b5                	li	a5,13
    8001666a:	00f70c63          	beq	a4,a5,80016682 <load_page_fault_4+0x24a>
    8001666e:	00011517          	auipc	a0,0x11
    80016672:	86a50513          	addi	a0,a0,-1942 # 80026ed8 <__func__.0+0x318>
    80016676:	08f0e0ef          	jal	80024f04 <printf>
    8001667a:	02900513          	li	a0,41
    8001667e:	6900d0ef          	jal	80023d0e <putchar>
    80016682:	4529                	li	a0,10
    80016684:	68a0d0ef          	jal	80023d0e <putchar>
    80016688:	c491                	beqz	s1,80016694 <load_page_fault_4+0x25c>
    8001668a:	00033497          	auipc	s1,0x33
    8001668e:	9874c483          	lbu	s1,-1657(s1) # 80049011 <excpt+0x1>
    80016692:	e0a1                	bnez	s1,800166d2 <load_page_fault_4+0x29a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016694:	000807b7          	lui	a5,0x80
    80016698:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001669c:	4481                	li	s1,0

    TEST_END();
    8001669e:	00010597          	auipc	a1,0x10
    800166a2:	7f258593          	addi	a1,a1,2034 # 80026e90 <__func__.0+0x2d0>
    800166a6:	00011517          	auipc	a0,0x11
    800166aa:	89250513          	addi	a0,a0,-1902 # 80026f38 <__func__.0+0x378>
    800166ae:	0570e0ef          	jal	80024f04 <printf>
    800166b2:	4511                	li	a0,4
    800166b4:	d42ea0ef          	jal	80000bf6 <goto_priv>
    800166b8:	df5ea0ef          	jal	800014ac <reset_state>

}
    800166bc:	60e2                	ld	ra,24(sp)
    800166be:	6442                	ld	s0,16(sp)
    800166c0:	8526                	mv	a0,s1
    800166c2:	64a2                	ld	s1,8(sp)
    800166c4:	6105                	addi	sp,sp,32
    800166c6:	8082                	ret
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800166c8:	6404                	ld	s1,8(s0)
    800166ca:	14cd                	addi	s1,s1,-13
    800166cc:	0014b493          	seqz	s1,s1
    800166d0:	b739                	j	800165de <load_page_fault_4+0x1a6>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800166d2:	6418                	ld	a4,8(s0)
    800166d4:	47b5                	li	a5,13
    800166d6:	faf71fe3          	bne	a4,a5,80016694 <load_page_fault_4+0x25c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800166da:	000807b7          	lui	a5,0x80
    800166de:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800166e2:	00010597          	auipc	a1,0x10
    800166e6:	79e58593          	addi	a1,a1,1950 # 80026e80 <__func__.0+0x2c0>
    800166ea:	bf75                	j	800166a6 <load_page_fault_4+0x26e>

00000000800166ec <load_page_fault_5>:

bool load_page_fault_5(){
    800166ec:	1101                	addi	sp,sp,-32

    TEST_START();
    800166ee:	0000f597          	auipc	a1,0xf
    800166f2:	6ea58593          	addi	a1,a1,1770 # 80025dd8 <__func__.17>
    800166f6:	00010517          	auipc	a0,0x10
    800166fa:	7aa50513          	addi	a0,a0,1962 # 80026ea0 <__func__.0+0x2e0>
bool load_page_fault_5(){
    800166fe:	ec06                	sd	ra,24(sp)
    80016700:	e822                	sd	s0,16(sp)
    80016702:	e426                	sd	s1,8(sp)
    TEST_START();
    80016704:	0010e0ef          	jal	80024f04 <printf>
    80016708:	4529                	li	a0,10
    8001670a:	6040d0ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_HS);
    8001670e:	450d                	li	a0,3
    80016710:	ce6ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016714:	ecde90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016718:	90aea0ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001671c:	f95e90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016720:	4511                	li	a0,4
    80016722:	cd4ea0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016726:	000407b7          	lui	a5,0x40
    8001672a:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8001672e:	4509                	li	a0,2
    80016730:	cc6ea0ef          	jal	80000bf6 <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016734:	0330000f          	fence	rw,rw
    80016738:	00033417          	auipc	s0,0x33
    8001673c:	8d840413          	addi	s0,s0,-1832 # 80049010 <excpt>
    80016740:	4785                	li	a5,1
    80016742:	00033717          	auipc	a4,0x33
    80016746:	90073323          	sd	zero,-1786(a4) # 80049048 <excpt+0x38>
    8001674a:	00f41023          	sh	a5,0(s0)
    8001674e:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80016752:	000807b7          	lui	a5,0x80
    80016756:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016758:	07b6                	slli	a5,a5,0xd
    8001675a:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    8001675e:	08200593          	li	a1,130
    80016762:	00016617          	auipc	a2,0x16
    80016766:	98660613          	addi	a2,a2,-1658 # 8002c0e8 <__func__.0+0x5528>
    8001676a:	00010517          	auipc	a0,0x10
    8001676e:	74e50513          	addi	a0,a0,1870 # 80026eb8 <__func__.0+0x2f8>
    80016772:	7920e0ef          	jal	80024f04 <printf>
    80016776:	00033797          	auipc	a5,0x33
    8001677a:	89b7c783          	lbu	a5,-1893(a5) # 80049011 <excpt+0x1>
    8001677e:	00010597          	auipc	a1,0x10
    80016782:	71258593          	addi	a1,a1,1810 # 80026e90 <__func__.0+0x2d0>
    80016786:	cf89                	beqz	a5,800167a0 <load_page_fault_5+0xb4>
    80016788:	6418                	ld	a4,8(s0)
    8001678a:	47b5                	li	a5,13
    8001678c:	00010597          	auipc	a1,0x10
    80016790:	6f458593          	addi	a1,a1,1780 # 80026e80 <__func__.0+0x2c0>
    80016794:	00f70663          	beq	a4,a5,800167a0 <load_page_fault_5+0xb4>
    80016798:	00010597          	auipc	a1,0x10
    8001679c:	6f858593          	addi	a1,a1,1784 # 80026e90 <__func__.0+0x2d0>
    800167a0:	00010517          	auipc	a0,0x10
    800167a4:	73050513          	addi	a0,a0,1840 # 80026ed0 <__func__.0+0x310>
    800167a8:	75c0e0ef          	jal	80024f04 <printf>
    800167ac:	00033797          	auipc	a5,0x33
    800167b0:	8657c783          	lbu	a5,-1947(a5) # 80049011 <excpt+0x1>
    800167b4:	c789                	beqz	a5,800167be <load_page_fault_5+0xd2>
    800167b6:	6418                	ld	a4,8(s0)
    800167b8:	47b5                	li	a5,13
    800167ba:	00f70c63          	beq	a4,a5,800167d2 <load_page_fault_5+0xe6>
    800167be:	00010517          	auipc	a0,0x10
    800167c2:	71a50513          	addi	a0,a0,1818 # 80026ed8 <__func__.0+0x318>
    800167c6:	73e0e0ef          	jal	80024f04 <printf>
    800167ca:	02900513          	li	a0,41
    800167ce:	5400d0ef          	jal	80023d0e <putchar>
    800167d2:	4529                	li	a0,10
    800167d4:	53a0d0ef          	jal	80023d0e <putchar>
    800167d8:	00033497          	auipc	s1,0x33
    800167dc:	8394c483          	lbu	s1,-1991(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800167e0:	00010597          	auipc	a1,0x10
    800167e4:	6b058593          	addi	a1,a1,1712 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    800167e8:	cc91                	beqz	s1,80016804 <load_page_fault_5+0x118>
    800167ea:	6418                	ld	a4,8(s0)
    800167ec:	47b5                	li	a5,13
    TEST_END();
    800167ee:	00010597          	auipc	a1,0x10
    800167f2:	69258593          	addi	a1,a1,1682 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    800167f6:	00f70763          	beq	a4,a5,80016804 <load_page_fault_5+0x118>
    800167fa:	4481                	li	s1,0
    TEST_END();
    800167fc:	00010597          	auipc	a1,0x10
    80016800:	69458593          	addi	a1,a1,1684 # 80026e90 <__func__.0+0x2d0>
    80016804:	00010517          	auipc	a0,0x10
    80016808:	73450513          	addi	a0,a0,1844 # 80026f38 <__func__.0+0x378>
    8001680c:	6f80e0ef          	jal	80024f04 <printf>
    80016810:	4511                	li	a0,4
    80016812:	be4ea0ef          	jal	80000bf6 <goto_priv>
    80016816:	c97ea0ef          	jal	800014ac <reset_state>
}
    8001681a:	60e2                	ld	ra,24(sp)
    8001681c:	6442                	ld	s0,16(sp)
    8001681e:	8526                	mv	a0,s1
    80016820:	64a2                	ld	s1,8(sp)
    80016822:	6105                	addi	sp,sp,32
    80016824:	8082                	ret

0000000080016826 <load_page_fault_6>:

bool load_page_fault_6(){
    80016826:	1141                	addi	sp,sp,-16

    TEST_START();
    80016828:	0000f597          	auipc	a1,0xf
    8001682c:	5c858593          	addi	a1,a1,1480 # 80025df0 <__func__.16>
    80016830:	00010517          	auipc	a0,0x10
    80016834:	67050513          	addi	a0,a0,1648 # 80026ea0 <__func__.0+0x2e0>
bool load_page_fault_6(){
    80016838:	e406                	sd	ra,8(sp)
    8001683a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001683c:	6c80e0ef          	jal	80024f04 <printf>
    80016840:	4529                	li	a0,10
    80016842:	4cc0d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80016846:	450d                	li	a0,3
    80016848:	baeea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001684c:	d95e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016850:	fd3e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016854:	e5de90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016858:	4511                	li	a0,4
    8001685a:	b9cea0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001685e:	000407b7          	lui	a5,0x40
    80016862:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    80016866:	4509                	li	a0,2
    80016868:	b8eea0ef          	jal	80000bf6 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    8001686c:	0330000f          	fence	rw,rw
    80016870:	4785                	li	a5,1
    80016872:	00032717          	auipc	a4,0x32
    80016876:	7c073b23          	sd	zero,2006(a4) # 80049048 <excpt+0x38>
    8001687a:	00032717          	auipc	a4,0x32
    8001687e:	78f71b23          	sh	a5,1942(a4) # 80049010 <excpt>
    80016882:	0330000f          	fence	rw,rw
    80016886:	000807b7          	lui	a5,0x80
    8001688a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001688c:	07b6                	slli	a5,a5,0xd
    8001688e:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80016892:	08200593          	li	a1,130
    80016896:	00016617          	auipc	a2,0x16
    8001689a:	89260613          	addi	a2,a2,-1902 # 8002c128 <__func__.0+0x5568>
    8001689e:	00010517          	auipc	a0,0x10
    800168a2:	61a50513          	addi	a0,a0,1562 # 80026eb8 <__func__.0+0x2f8>
    800168a6:	65e0e0ef          	jal	80024f04 <printf>
    800168aa:	00032797          	auipc	a5,0x32
    800168ae:	7677c783          	lbu	a5,1895(a5) # 80049011 <excpt+0x1>
    800168b2:	00010597          	auipc	a1,0x10
    800168b6:	5ce58593          	addi	a1,a1,1486 # 80026e80 <__func__.0+0x2c0>
    800168ba:	c789                	beqz	a5,800168c4 <load_page_fault_6+0x9e>
    800168bc:	00010597          	auipc	a1,0x10
    800168c0:	5d458593          	addi	a1,a1,1492 # 80026e90 <__func__.0+0x2d0>
    800168c4:	00010517          	auipc	a0,0x10
    800168c8:	60c50513          	addi	a0,a0,1548 # 80026ed0 <__func__.0+0x310>
    800168cc:	6380e0ef          	jal	80024f04 <printf>
    800168d0:	00032797          	auipc	a5,0x32
    800168d4:	7417c783          	lbu	a5,1857(a5) # 80049011 <excpt+0x1>
    800168d8:	e7a1                	bnez	a5,80016920 <load_page_fault_6+0xfa>
    800168da:	4529                	li	a0,10
    800168dc:	4320d0ef          	jal	80023d0e <putchar>
    800168e0:	00032797          	auipc	a5,0x32
    800168e4:	7317c783          	lbu	a5,1841(a5) # 80049011 <excpt+0x1>
    800168e8:	e795                	bnez	a5,80016914 <load_page_fault_6+0xee>
    800168ea:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800168ec:	00010597          	auipc	a1,0x10
    800168f0:	59458593          	addi	a1,a1,1428 # 80026e80 <__func__.0+0x2c0>
    800168f4:	00010517          	auipc	a0,0x10
    800168f8:	64450513          	addi	a0,a0,1604 # 80026f38 <__func__.0+0x378>
    800168fc:	6080e0ef          	jal	80024f04 <printf>
    80016900:	4511                	li	a0,4
    80016902:	af4ea0ef          	jal	80000bf6 <goto_priv>
    80016906:	ba7ea0ef          	jal	800014ac <reset_state>
}
    8001690a:	60a2                	ld	ra,8(sp)
    8001690c:	8522                	mv	a0,s0
    8001690e:	6402                	ld	s0,0(sp)
    80016910:	0141                	addi	sp,sp,16
    80016912:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80016914:	4401                	li	s0,0
    TEST_END();
    80016916:	00010597          	auipc	a1,0x10
    8001691a:	57a58593          	addi	a1,a1,1402 # 80026e90 <__func__.0+0x2d0>
    8001691e:	bfd9                	j	800168f4 <load_page_fault_6+0xce>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80016920:	00010517          	auipc	a0,0x10
    80016924:	5b850513          	addi	a0,a0,1464 # 80026ed8 <__func__.0+0x318>
    80016928:	5dc0e0ef          	jal	80024f04 <printf>
    8001692c:	02900513          	li	a0,41
    80016930:	3de0d0ef          	jal	80023d0e <putchar>
    80016934:	b75d                	j	800168da <load_page_fault_6+0xb4>

0000000080016936 <load_page_fault_7>:


bool load_page_fault_7(){
    80016936:	1101                	addi	sp,sp,-32

    TEST_START();
    80016938:	0000f597          	auipc	a1,0xf
    8001693c:	4d058593          	addi	a1,a1,1232 # 80025e08 <__func__.15>
    80016940:	00010517          	auipc	a0,0x10
    80016944:	56050513          	addi	a0,a0,1376 # 80026ea0 <__func__.0+0x2e0>
bool load_page_fault_7(){
    80016948:	ec06                	sd	ra,24(sp)
    8001694a:	e822                	sd	s0,16(sp)
    8001694c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001694e:	5b60e0ef          	jal	80024f04 <printf>
    80016952:	4529                	li	a0,10
    80016954:	3ba0d0ef          	jal	80023d0e <putchar>


    goto_priv(PRIV_HS);
    80016958:	450d                	li	a0,3
    8001695a:	a9cea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001695e:	c83e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016962:	ec1e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016966:	d4be90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    8001696a:	4511                	li	a0,4
    8001696c:	a8aea0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80016970:	000407b7          	lui	a5,0x40
    80016974:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80016978:	450d                	li	a0,3
    8001697a:	a7cea0ef          	jal	80000bf6 <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001697e:	0330000f          	fence	rw,rw
    80016982:	00032417          	auipc	s0,0x32
    80016986:	68e40413          	addi	s0,s0,1678 # 80049010 <excpt>
    8001698a:	4785                	li	a5,1
    8001698c:	00032717          	auipc	a4,0x32
    80016990:	6a073e23          	sd	zero,1724(a4) # 80049048 <excpt+0x38>
    80016994:	00f41023          	sh	a5,0(s0)
    80016998:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001699c:	000807b7          	lui	a5,0x80
    800169a0:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800169a2:	07b6                	slli	a5,a5,0xd
    800169a4:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    800169a8:	08200593          	li	a1,130
    800169ac:	00015617          	auipc	a2,0x15
    800169b0:	7b460613          	addi	a2,a2,1972 # 8002c160 <__func__.0+0x55a0>
    800169b4:	00010517          	auipc	a0,0x10
    800169b8:	50450513          	addi	a0,a0,1284 # 80026eb8 <__func__.0+0x2f8>
    800169bc:	5480e0ef          	jal	80024f04 <printf>
    800169c0:	00032797          	auipc	a5,0x32
    800169c4:	6517c783          	lbu	a5,1617(a5) # 80049011 <excpt+0x1>
    800169c8:	00010597          	auipc	a1,0x10
    800169cc:	4c858593          	addi	a1,a1,1224 # 80026e90 <__func__.0+0x2d0>
    800169d0:	cf89                	beqz	a5,800169ea <load_page_fault_7+0xb4>
    800169d2:	6418                	ld	a4,8(s0)
    800169d4:	47b5                	li	a5,13
    800169d6:	00010597          	auipc	a1,0x10
    800169da:	4aa58593          	addi	a1,a1,1194 # 80026e80 <__func__.0+0x2c0>
    800169de:	00f70663          	beq	a4,a5,800169ea <load_page_fault_7+0xb4>
    800169e2:	00010597          	auipc	a1,0x10
    800169e6:	4ae58593          	addi	a1,a1,1198 # 80026e90 <__func__.0+0x2d0>
    800169ea:	00010517          	auipc	a0,0x10
    800169ee:	4e650513          	addi	a0,a0,1254 # 80026ed0 <__func__.0+0x310>
    800169f2:	5120e0ef          	jal	80024f04 <printf>
    800169f6:	00032797          	auipc	a5,0x32
    800169fa:	61b7c783          	lbu	a5,1563(a5) # 80049011 <excpt+0x1>
    800169fe:	c789                	beqz	a5,80016a08 <load_page_fault_7+0xd2>
    80016a00:	6418                	ld	a4,8(s0)
    80016a02:	47b5                	li	a5,13
    80016a04:	00f70c63          	beq	a4,a5,80016a1c <load_page_fault_7+0xe6>
    80016a08:	00010517          	auipc	a0,0x10
    80016a0c:	4d050513          	addi	a0,a0,1232 # 80026ed8 <__func__.0+0x318>
    80016a10:	4f40e0ef          	jal	80024f04 <printf>
    80016a14:	02900513          	li	a0,41
    80016a18:	2f60d0ef          	jal	80023d0e <putchar>
    80016a1c:	4529                	li	a0,10
    80016a1e:	2f00d0ef          	jal	80023d0e <putchar>
    80016a22:	00032497          	auipc	s1,0x32
    80016a26:	5ef4c483          	lbu	s1,1519(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80016a2a:	00010597          	auipc	a1,0x10
    80016a2e:	46658593          	addi	a1,a1,1126 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80016a32:	cc91                	beqz	s1,80016a4e <load_page_fault_7+0x118>
    80016a34:	6418                	ld	a4,8(s0)
    80016a36:	47b5                	li	a5,13
    TEST_END();
    80016a38:	00010597          	auipc	a1,0x10
    80016a3c:	44858593          	addi	a1,a1,1096 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    80016a40:	00f70763          	beq	a4,a5,80016a4e <load_page_fault_7+0x118>
    80016a44:	4481                	li	s1,0
    TEST_END();
    80016a46:	00010597          	auipc	a1,0x10
    80016a4a:	44a58593          	addi	a1,a1,1098 # 80026e90 <__func__.0+0x2d0>
    80016a4e:	00010517          	auipc	a0,0x10
    80016a52:	4ea50513          	addi	a0,a0,1258 # 80026f38 <__func__.0+0x378>
    80016a56:	4ae0e0ef          	jal	80024f04 <printf>
    80016a5a:	4511                	li	a0,4
    80016a5c:	99aea0ef          	jal	80000bf6 <goto_priv>
    80016a60:	a4dea0ef          	jal	800014ac <reset_state>
}
    80016a64:	60e2                	ld	ra,24(sp)
    80016a66:	6442                	ld	s0,16(sp)
    80016a68:	8526                	mv	a0,s1
    80016a6a:	64a2                	ld	s1,8(sp)
    80016a6c:	6105                	addi	sp,sp,32
    80016a6e:	8082                	ret

0000000080016a70 <load_page_fault_8>:

bool load_page_fault_8(){
    80016a70:	1141                	addi	sp,sp,-16

    TEST_START();
    80016a72:	0000f597          	auipc	a1,0xf
    80016a76:	3ae58593          	addi	a1,a1,942 # 80025e20 <__func__.14>
    80016a7a:	00010517          	auipc	a0,0x10
    80016a7e:	42650513          	addi	a0,a0,1062 # 80026ea0 <__func__.0+0x2e0>
bool load_page_fault_8(){
    80016a82:	e406                	sd	ra,8(sp)
    80016a84:	e022                	sd	s0,0(sp)
    TEST_START();
    80016a86:	47e0e0ef          	jal	80024f04 <printf>
    80016a8a:	4529                	li	a0,10
    80016a8c:	2820d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80016a90:	450d                	li	a0,3
    80016a92:	964ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016a96:	b4be90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016a9a:	d89e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016a9e:	c13e90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016aa2:	4511                	li	a0,4
    80016aa4:	952ea0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016aa8:	000407b7          	lui	a5,0x40
    80016aac:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80016ab0:	450d                	li	a0,3
    80016ab2:	944ea0ef          	jal	80000bf6 <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80016ab6:	0330000f          	fence	rw,rw
    80016aba:	4785                	li	a5,1
    80016abc:	00032717          	auipc	a4,0x32
    80016ac0:	58073623          	sd	zero,1420(a4) # 80049048 <excpt+0x38>
    80016ac4:	00032717          	auipc	a4,0x32
    80016ac8:	54f71623          	sh	a5,1356(a4) # 80049010 <excpt>
    80016acc:	0330000f          	fence	rw,rw
    80016ad0:	000807b7          	lui	a5,0x80
    80016ad4:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016ad6:	07b6                	slli	a5,a5,0xd
    80016ad8:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80016adc:	08200593          	li	a1,130
    80016ae0:	00015617          	auipc	a2,0x15
    80016ae4:	6b860613          	addi	a2,a2,1720 # 8002c198 <__func__.0+0x55d8>
    80016ae8:	00010517          	auipc	a0,0x10
    80016aec:	3d050513          	addi	a0,a0,976 # 80026eb8 <__func__.0+0x2f8>
    80016af0:	4140e0ef          	jal	80024f04 <printf>
    80016af4:	00032797          	auipc	a5,0x32
    80016af8:	51d7c783          	lbu	a5,1309(a5) # 80049011 <excpt+0x1>
    80016afc:	00010597          	auipc	a1,0x10
    80016b00:	38458593          	addi	a1,a1,900 # 80026e80 <__func__.0+0x2c0>
    80016b04:	c789                	beqz	a5,80016b0e <load_page_fault_8+0x9e>
    80016b06:	00010597          	auipc	a1,0x10
    80016b0a:	38a58593          	addi	a1,a1,906 # 80026e90 <__func__.0+0x2d0>
    80016b0e:	00010517          	auipc	a0,0x10
    80016b12:	3c250513          	addi	a0,a0,962 # 80026ed0 <__func__.0+0x310>
    80016b16:	3ee0e0ef          	jal	80024f04 <printf>
    80016b1a:	00032797          	auipc	a5,0x32
    80016b1e:	4f77c783          	lbu	a5,1271(a5) # 80049011 <excpt+0x1>
    80016b22:	e7a1                	bnez	a5,80016b6a <load_page_fault_8+0xfa>
    80016b24:	4529                	li	a0,10
    80016b26:	1e80d0ef          	jal	80023d0e <putchar>
    80016b2a:	00032797          	auipc	a5,0x32
    80016b2e:	4e77c783          	lbu	a5,1255(a5) # 80049011 <excpt+0x1>
    80016b32:	e795                	bnez	a5,80016b5e <load_page_fault_8+0xee>
    80016b34:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016b36:	00010597          	auipc	a1,0x10
    80016b3a:	34a58593          	addi	a1,a1,842 # 80026e80 <__func__.0+0x2c0>
    80016b3e:	00010517          	auipc	a0,0x10
    80016b42:	3fa50513          	addi	a0,a0,1018 # 80026f38 <__func__.0+0x378>
    80016b46:	3be0e0ef          	jal	80024f04 <printf>
    80016b4a:	4511                	li	a0,4
    80016b4c:	8aaea0ef          	jal	80000bf6 <goto_priv>
    80016b50:	95dea0ef          	jal	800014ac <reset_state>
}
    80016b54:	60a2                	ld	ra,8(sp)
    80016b56:	8522                	mv	a0,s0
    80016b58:	6402                	ld	s0,0(sp)
    80016b5a:	0141                	addi	sp,sp,16
    80016b5c:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80016b5e:	4401                	li	s0,0
    TEST_END();
    80016b60:	00010597          	auipc	a1,0x10
    80016b64:	33058593          	addi	a1,a1,816 # 80026e90 <__func__.0+0x2d0>
    80016b68:	bfd9                	j	80016b3e <load_page_fault_8+0xce>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80016b6a:	00010517          	auipc	a0,0x10
    80016b6e:	36e50513          	addi	a0,a0,878 # 80026ed8 <__func__.0+0x318>
    80016b72:	3920e0ef          	jal	80024f04 <printf>
    80016b76:	02900513          	li	a0,41
    80016b7a:	1940d0ef          	jal	80023d0e <putchar>
    80016b7e:	b75d                	j	80016b24 <load_page_fault_8+0xb4>

0000000080016b80 <store_page_fault_1>:





bool store_page_fault_1(){
    80016b80:	1101                	addi	sp,sp,-32

    TEST_START();
    80016b82:	0000f597          	auipc	a1,0xf
    80016b86:	2b658593          	addi	a1,a1,694 # 80025e38 <__func__.13>
    80016b8a:	00010517          	auipc	a0,0x10
    80016b8e:	31650513          	addi	a0,a0,790 # 80026ea0 <__func__.0+0x2e0>
bool store_page_fault_1(){
    80016b92:	ec06                	sd	ra,24(sp)
    80016b94:	e822                	sd	s0,16(sp)
    80016b96:	e426                	sd	s1,8(sp)
    TEST_START();
    80016b98:	36c0e0ef          	jal	80024f04 <printf>
    80016b9c:	4529                	li	a0,10
    80016b9e:	1700d0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80016ba2:	450d                	li	a0,3
    80016ba4:	852ea0ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016ba8:	a39e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016bac:	c77e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016bb0:	b01e90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80016bb4:	450d                	li	a0,3
    80016bb6:	840ea0ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016bba:	4509                	li	a0,2
    80016bbc:	f5be90ef          	jal	80000b16 <set_prev_priv>

    //执行store指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016bc0:	0330000f          	fence	rw,rw
    80016bc4:	00032497          	auipc	s1,0x32
    80016bc8:	44c48493          	addi	s1,s1,1100 # 80049010 <excpt>
    80016bcc:	4785                	li	a5,1
    80016bce:	00032717          	auipc	a4,0x32
    80016bd2:	46073d23          	sd	zero,1146(a4) # 80049048 <excpt+0x38>
    80016bd6:	00f49023          	sh	a5,0(s1)
    80016bda:	0330000f          	fence	rw,rw
    asm volatile(
    80016bde:	37ab77b7          	lui	a5,0x37ab7
    80016be2:	078a                	slli	a5,a5,0x2
    80016be4:	40019737          	lui	a4,0x40019
    80016be8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016bec:	070a                	slli	a4,a4,0x2
    80016bee:	6ef74073          	.insn	4, 0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80016bf2:	08200593          	li	a1,130
    80016bf6:	00015617          	auipc	a2,0x15
    80016bfa:	5da60613          	addi	a2,a2,1498 # 8002c1d0 <__func__.0+0x5610>
    80016bfe:	00010517          	auipc	a0,0x10
    80016c02:	2ba50513          	addi	a0,a0,698 # 80026eb8 <__func__.0+0x2f8>
    80016c06:	2fe0e0ef          	jal	80024f04 <printf>
    80016c0a:	00032797          	auipc	a5,0x32
    80016c0e:	4077c783          	lbu	a5,1031(a5) # 80049011 <excpt+0x1>
    80016c12:	00010597          	auipc	a1,0x10
    80016c16:	27e58593          	addi	a1,a1,638 # 80026e90 <__func__.0+0x2d0>
    80016c1a:	cf89                	beqz	a5,80016c34 <store_page_fault_1+0xb4>
    80016c1c:	6498                	ld	a4,8(s1)
    80016c1e:	47bd                	li	a5,15
    80016c20:	00010597          	auipc	a1,0x10
    80016c24:	26058593          	addi	a1,a1,608 # 80026e80 <__func__.0+0x2c0>
    80016c28:	00f70663          	beq	a4,a5,80016c34 <store_page_fault_1+0xb4>
    80016c2c:	00010597          	auipc	a1,0x10
    80016c30:	26458593          	addi	a1,a1,612 # 80026e90 <__func__.0+0x2d0>
    80016c34:	00010517          	auipc	a0,0x10
    80016c38:	29c50513          	addi	a0,a0,668 # 80026ed0 <__func__.0+0x310>
    80016c3c:	2c80e0ef          	jal	80024f04 <printf>
    80016c40:	00032797          	auipc	a5,0x32
    80016c44:	3d17c783          	lbu	a5,977(a5) # 80049011 <excpt+0x1>
    80016c48:	c789                	beqz	a5,80016c52 <store_page_fault_1+0xd2>
    80016c4a:	6498                	ld	a4,8(s1)
    80016c4c:	47bd                	li	a5,15
    80016c4e:	00f70c63          	beq	a4,a5,80016c66 <store_page_fault_1+0xe6>
    80016c52:	00010517          	auipc	a0,0x10
    80016c56:	28650513          	addi	a0,a0,646 # 80026ed8 <__func__.0+0x318>
    80016c5a:	2aa0e0ef          	jal	80024f04 <printf>
    80016c5e:	02900513          	li	a0,41
    80016c62:	0ac0d0ef          	jal	80023d0e <putchar>
    80016c66:	4529                	li	a0,10
    80016c68:	0a60d0ef          	jal	80023d0e <putchar>
    80016c6c:	00032797          	auipc	a5,0x32
    80016c70:	3a57c783          	lbu	a5,933(a5) # 80049011 <excpt+0x1>
    80016c74:	4401                	li	s0,0
    80016c76:	c789                	beqz	a5,80016c80 <store_page_fault_1+0x100>
    80016c78:	6480                	ld	s0,8(s1)
    80016c7a:	1445                	addi	s0,s0,-15
    80016c7c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016c80:	0330000f          	fence	rw,rw
    80016c84:	4785                	li	a5,1
    80016c86:	00032717          	auipc	a4,0x32
    80016c8a:	3c073123          	sd	zero,962(a4) # 80049048 <excpt+0x38>
    80016c8e:	00f49023          	sh	a5,0(s1)
    80016c92:	0330000f          	fence	rw,rw
    asm volatile(
    80016c96:	37ab77b7          	lui	a5,0x37ab7
    80016c9a:	00100737          	lui	a4,0x100
    80016c9e:	078a                	slli	a5,a5,0x2
    80016ca0:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80016ca4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016ca8:	0732                	slli	a4,a4,0xc
    80016caa:	62f74073          	.insn	4, 0x62f74073
    addr = hs_page_base(VSRX_GRWX);

    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80016cae:	08200593          	li	a1,130
    80016cb2:	00015617          	auipc	a2,0x15
    80016cb6:	54660613          	addi	a2,a2,1350 # 8002c1f8 <__func__.0+0x5638>
    80016cba:	00010517          	auipc	a0,0x10
    80016cbe:	1fe50513          	addi	a0,a0,510 # 80026eb8 <__func__.0+0x2f8>
    80016cc2:	2420e0ef          	jal	80024f04 <printf>
    80016cc6:	00032797          	auipc	a5,0x32
    80016cca:	34b7c783          	lbu	a5,843(a5) # 80049011 <excpt+0x1>
    80016cce:	00010597          	auipc	a1,0x10
    80016cd2:	1c258593          	addi	a1,a1,450 # 80026e90 <__func__.0+0x2d0>
    80016cd6:	cf89                	beqz	a5,80016cf0 <store_page_fault_1+0x170>
    80016cd8:	6498                	ld	a4,8(s1)
    80016cda:	47bd                	li	a5,15
    80016cdc:	00010597          	auipc	a1,0x10
    80016ce0:	1a458593          	addi	a1,a1,420 # 80026e80 <__func__.0+0x2c0>
    80016ce4:	00f70663          	beq	a4,a5,80016cf0 <store_page_fault_1+0x170>
    80016ce8:	00010597          	auipc	a1,0x10
    80016cec:	1a858593          	addi	a1,a1,424 # 80026e90 <__func__.0+0x2d0>
    80016cf0:	00010517          	auipc	a0,0x10
    80016cf4:	1e050513          	addi	a0,a0,480 # 80026ed0 <__func__.0+0x310>
    80016cf8:	20c0e0ef          	jal	80024f04 <printf>
    80016cfc:	00032797          	auipc	a5,0x32
    80016d00:	3157c783          	lbu	a5,789(a5) # 80049011 <excpt+0x1>
    80016d04:	c789                	beqz	a5,80016d0e <store_page_fault_1+0x18e>
    80016d06:	6498                	ld	a4,8(s1)
    80016d08:	47bd                	li	a5,15
    80016d0a:	00f70c63          	beq	a4,a5,80016d22 <store_page_fault_1+0x1a2>
    80016d0e:	00010517          	auipc	a0,0x10
    80016d12:	1ca50513          	addi	a0,a0,458 # 80026ed8 <__func__.0+0x318>
    80016d16:	1ee0e0ef          	jal	80024f04 <printf>
    80016d1a:	02900513          	li	a0,41
    80016d1e:	7f10c0ef          	jal	80023d0e <putchar>
    80016d22:	4529                	li	a0,10
    80016d24:	7eb0c0ef          	jal	80023d0e <putchar>
    80016d28:	c419                	beqz	s0,80016d36 <store_page_fault_1+0x1b6>
    80016d2a:	00032797          	auipc	a5,0x32
    80016d2e:	2e77c783          	lbu	a5,743(a5) # 80049011 <excpt+0x1>
    80016d32:	4401                	li	s0,0
    80016d34:	e3e1                	bnez	a5,80016df4 <store_page_fault_1+0x274>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，pte.w=1
    TEST_SETUP_EXCEPT();
    80016d36:	0330000f          	fence	rw,rw
    80016d3a:	4785                	li	a5,1
    80016d3c:	00032717          	auipc	a4,0x32
    80016d40:	30073623          	sd	zero,780(a4) # 80049048 <excpt+0x38>
    80016d44:	00f49023          	sh	a5,0(s1)
    80016d48:	0330000f          	fence	rw,rw
    asm volatile(
    80016d4c:	37ab77b7          	lui	a5,0x37ab7
    80016d50:	00080737          	lui	a4,0x80
    80016d54:	078a                	slli	a5,a5,0x2
    80016d56:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80016d58:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016d5c:	0736                	slli	a4,a4,0xd
    80016d5e:	66f74073          	.insn	4, 0x66f74073
    addr = hs_page_base(VSRW_GURW);

    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80016d62:	08200593          	li	a1,130
    80016d66:	00015617          	auipc	a2,0x15
    80016d6a:	4c260613          	addi	a2,a2,1218 # 8002c228 <__func__.0+0x5668>
    80016d6e:	00010517          	auipc	a0,0x10
    80016d72:	14a50513          	addi	a0,a0,330 # 80026eb8 <__func__.0+0x2f8>
    80016d76:	18e0e0ef          	jal	80024f04 <printf>
    80016d7a:	00032797          	auipc	a5,0x32
    80016d7e:	2977c783          	lbu	a5,663(a5) # 80049011 <excpt+0x1>
    80016d82:	00010597          	auipc	a1,0x10
    80016d86:	10e58593          	addi	a1,a1,270 # 80026e90 <__func__.0+0x2d0>
    80016d8a:	e789                	bnez	a5,80016d94 <store_page_fault_1+0x214>
    80016d8c:	00010597          	auipc	a1,0x10
    80016d90:	0f458593          	addi	a1,a1,244 # 80026e80 <__func__.0+0x2c0>
    80016d94:	00010517          	auipc	a0,0x10
    80016d98:	13c50513          	addi	a0,a0,316 # 80026ed0 <__func__.0+0x310>
    80016d9c:	1680e0ef          	jal	80024f04 <printf>
    80016da0:	00032797          	auipc	a5,0x32
    80016da4:	2717c783          	lbu	a5,625(a5) # 80049011 <excpt+0x1>
    80016da8:	ebb9                	bnez	a5,80016dfe <store_page_fault_1+0x27e>
    80016daa:	4529                	li	a0,10
    80016dac:	7630c0ef          	jal	80023d0e <putchar>
    80016db0:	c411                	beqz	s0,80016dbc <store_page_fault_1+0x23c>
    80016db2:	00032797          	auipc	a5,0x32
    80016db6:	25f7c783          	lbu	a5,607(a5) # 80049011 <excpt+0x1>
    80016dba:	c79d                	beqz	a5,80016de8 <store_page_fault_1+0x268>
    80016dbc:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016dbe:	00010597          	auipc	a1,0x10
    80016dc2:	0d258593          	addi	a1,a1,210 # 80026e90 <__func__.0+0x2d0>
    80016dc6:	00010517          	auipc	a0,0x10
    80016dca:	17250513          	addi	a0,a0,370 # 80026f38 <__func__.0+0x378>
    80016dce:	1360e0ef          	jal	80024f04 <printf>
    80016dd2:	4511                	li	a0,4
    80016dd4:	e23e90ef          	jal	80000bf6 <goto_priv>
    80016dd8:	ed4ea0ef          	jal	800014ac <reset_state>
}
    80016ddc:	60e2                	ld	ra,24(sp)
    80016dde:	8522                	mv	a0,s0
    80016de0:	6442                	ld	s0,16(sp)
    80016de2:	64a2                	ld	s1,8(sp)
    80016de4:	6105                	addi	sp,sp,32
    80016de6:	8082                	ret
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80016de8:	4405                	li	s0,1
    TEST_END();
    80016dea:	00010597          	auipc	a1,0x10
    80016dee:	09658593          	addi	a1,a1,150 # 80026e80 <__func__.0+0x2c0>
    80016df2:	bfd1                	j	80016dc6 <store_page_fault_1+0x246>
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80016df4:	6480                	ld	s0,8(s1)
    80016df6:	1445                	addi	s0,s0,-15
    80016df8:	00143413          	seqz	s0,s0
    80016dfc:	bf2d                	j	80016d36 <store_page_fault_1+0x1b6>
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80016dfe:	00010517          	auipc	a0,0x10
    80016e02:	0da50513          	addi	a0,a0,218 # 80026ed8 <__func__.0+0x318>
    80016e06:	0fe0e0ef          	jal	80024f04 <printf>
    80016e0a:	02900513          	li	a0,41
    80016e0e:	7010c0ef          	jal	80023d0e <putchar>
    80016e12:	bf61                	j	80016daa <store_page_fault_1+0x22a>

0000000080016e14 <store_page_fault_2>:

bool store_page_fault_2(){
    80016e14:	1101                	addi	sp,sp,-32

    TEST_START();
    80016e16:	0000f597          	auipc	a1,0xf
    80016e1a:	03a58593          	addi	a1,a1,58 # 80025e50 <__func__.12>
    80016e1e:	00010517          	auipc	a0,0x10
    80016e22:	08250513          	addi	a0,a0,130 # 80026ea0 <__func__.0+0x2e0>
bool store_page_fault_2(){
    80016e26:	ec06                	sd	ra,24(sp)
    80016e28:	e822                	sd	s0,16(sp)
    80016e2a:	e426                	sd	s1,8(sp)
    TEST_START();
    80016e2c:	0d80e0ef          	jal	80024f04 <printf>
    80016e30:	4529                	li	a0,10
    80016e32:	6dd0c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80016e36:	450d                	li	a0,3
    80016e38:	dbfe90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016e3c:	fa4e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016e40:	9e3e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016e44:	86de90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80016e48:	4511                	li	a0,4
    80016e4a:	dade90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016e4e:	000407b7          	lui	a5,0x40
    80016e52:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80016e56:	450d                	li	a0,3
    80016e58:	d9fe90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016e5c:	4509                	li	a0,2
    80016e5e:	cb9e90ef          	jal	80000b16 <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016e62:	0330000f          	fence	rw,rw
    80016e66:	00032417          	auipc	s0,0x32
    80016e6a:	1aa40413          	addi	s0,s0,426 # 80049010 <excpt>
    80016e6e:	4785                	li	a5,1
    80016e70:	00032717          	auipc	a4,0x32
    80016e74:	1c073c23          	sd	zero,472(a4) # 80049048 <excpt+0x38>
    80016e78:	00f41023          	sh	a5,0(s0)
    80016e7c:	0330000f          	fence	rw,rw
    asm volatile(
    80016e80:	37ab77b7          	lui	a5,0x37ab7
    80016e84:	00080737          	lui	a4,0x80
    80016e88:	078a                	slli	a5,a5,0x2
    80016e8a:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016e8c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016e90:	0736                	slli	a4,a4,0xd
    80016e92:	6ef74073          	.insn	4, 0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80016e96:	08200593          	li	a1,130
    80016e9a:	00015617          	auipc	a2,0x15
    80016e9e:	3b660613          	addi	a2,a2,950 # 8002c250 <__func__.0+0x5690>
    80016ea2:	00010517          	auipc	a0,0x10
    80016ea6:	01650513          	addi	a0,a0,22 # 80026eb8 <__func__.0+0x2f8>
    80016eaa:	05a0e0ef          	jal	80024f04 <printf>
    80016eae:	00032797          	auipc	a5,0x32
    80016eb2:	1637c783          	lbu	a5,355(a5) # 80049011 <excpt+0x1>
    80016eb6:	00010597          	auipc	a1,0x10
    80016eba:	fda58593          	addi	a1,a1,-38 # 80026e90 <__func__.0+0x2d0>
    80016ebe:	cf89                	beqz	a5,80016ed8 <store_page_fault_2+0xc4>
    80016ec0:	6418                	ld	a4,8(s0)
    80016ec2:	47bd                	li	a5,15
    80016ec4:	00010597          	auipc	a1,0x10
    80016ec8:	fbc58593          	addi	a1,a1,-68 # 80026e80 <__func__.0+0x2c0>
    80016ecc:	00f70663          	beq	a4,a5,80016ed8 <store_page_fault_2+0xc4>
    80016ed0:	00010597          	auipc	a1,0x10
    80016ed4:	fc058593          	addi	a1,a1,-64 # 80026e90 <__func__.0+0x2d0>
    80016ed8:	00010517          	auipc	a0,0x10
    80016edc:	ff850513          	addi	a0,a0,-8 # 80026ed0 <__func__.0+0x310>
    80016ee0:	0240e0ef          	jal	80024f04 <printf>
    80016ee4:	00032797          	auipc	a5,0x32
    80016ee8:	12d7c783          	lbu	a5,301(a5) # 80049011 <excpt+0x1>
    80016eec:	c789                	beqz	a5,80016ef6 <store_page_fault_2+0xe2>
    80016eee:	6418                	ld	a4,8(s0)
    80016ef0:	47bd                	li	a5,15
    80016ef2:	00f70c63          	beq	a4,a5,80016f0a <store_page_fault_2+0xf6>
    80016ef6:	00010517          	auipc	a0,0x10
    80016efa:	fe250513          	addi	a0,a0,-30 # 80026ed8 <__func__.0+0x318>
    80016efe:	0060e0ef          	jal	80024f04 <printf>
    80016f02:	02900513          	li	a0,41
    80016f06:	6090c0ef          	jal	80023d0e <putchar>
    80016f0a:	4529                	li	a0,10
    80016f0c:	6030c0ef          	jal	80023d0e <putchar>
    80016f10:	00032497          	auipc	s1,0x32
    80016f14:	1014c483          	lbu	s1,257(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80016f18:	00010597          	auipc	a1,0x10
    80016f1c:	f7858593          	addi	a1,a1,-136 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80016f20:	cc91                	beqz	s1,80016f3c <store_page_fault_2+0x128>
    80016f22:	6418                	ld	a4,8(s0)
    80016f24:	47bd                	li	a5,15
    TEST_END();
    80016f26:	00010597          	auipc	a1,0x10
    80016f2a:	f5a58593          	addi	a1,a1,-166 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80016f2e:	00f70763          	beq	a4,a5,80016f3c <store_page_fault_2+0x128>
    80016f32:	4481                	li	s1,0
    TEST_END();
    80016f34:	00010597          	auipc	a1,0x10
    80016f38:	f5c58593          	addi	a1,a1,-164 # 80026e90 <__func__.0+0x2d0>
    80016f3c:	00010517          	auipc	a0,0x10
    80016f40:	ffc50513          	addi	a0,a0,-4 # 80026f38 <__func__.0+0x378>
    80016f44:	7c10d0ef          	jal	80024f04 <printf>
    80016f48:	4511                	li	a0,4
    80016f4a:	cade90ef          	jal	80000bf6 <goto_priv>
    80016f4e:	d5eea0ef          	jal	800014ac <reset_state>
}
    80016f52:	60e2                	ld	ra,24(sp)
    80016f54:	6442                	ld	s0,16(sp)
    80016f56:	8526                	mv	a0,s1
    80016f58:	64a2                	ld	s1,8(sp)
    80016f5a:	6105                	addi	sp,sp,32
    80016f5c:	8082                	ret

0000000080016f5e <store_page_fault_3>:

bool store_page_fault_3(){
    80016f5e:	1141                	addi	sp,sp,-16

    TEST_START();
    80016f60:	0000f597          	auipc	a1,0xf
    80016f64:	f0858593          	addi	a1,a1,-248 # 80025e68 <__func__.11>
    80016f68:	00010517          	auipc	a0,0x10
    80016f6c:	f3850513          	addi	a0,a0,-200 # 80026ea0 <__func__.0+0x2e0>
bool store_page_fault_3(){
    80016f70:	e406                	sd	ra,8(sp)
    80016f72:	e022                	sd	s0,0(sp)
    TEST_START();
    80016f74:	7910d0ef          	jal	80024f04 <printf>
    80016f78:	4529                	li	a0,10
    80016f7a:	5950c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80016f7e:	450d                	li	a0,3
    80016f80:	c77e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80016f84:	e5ce90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016f88:	89be90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80016f8c:	f24e90ef          	jal	800006b0 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016f90:	4511                	li	a0,4
    80016f92:	c65e90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016f96:	000407b7          	lui	a5,0x40
    80016f9a:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80016f9e:	450d                	li	a0,3
    80016fa0:	c57e90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80016fa4:	4509                	li	a0,2
    80016fa6:	b71e90ef          	jal	80000b16 <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80016faa:	0330000f          	fence	rw,rw
    80016fae:	4785                	li	a5,1
    80016fb0:	00032717          	auipc	a4,0x32
    80016fb4:	08073c23          	sd	zero,152(a4) # 80049048 <excpt+0x38>
    80016fb8:	00032717          	auipc	a4,0x32
    80016fbc:	04f71c23          	sh	a5,88(a4) # 80049010 <excpt>
    80016fc0:	0330000f          	fence	rw,rw
    asm volatile(
    80016fc4:	37ab77b7          	lui	a5,0x37ab7
    80016fc8:	00080737          	lui	a4,0x80
    80016fcc:	078a                	slli	a5,a5,0x2
    80016fce:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016fd0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016fd4:	0736                	slli	a4,a4,0xd
    80016fd6:	62f74073          	.insn	4, 0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80016fda:	08200593          	li	a1,130
    80016fde:	00015617          	auipc	a2,0x15
    80016fe2:	2b260613          	addi	a2,a2,690 # 8002c290 <__func__.0+0x56d0>
    80016fe6:	00010517          	auipc	a0,0x10
    80016fea:	ed250513          	addi	a0,a0,-302 # 80026eb8 <__func__.0+0x2f8>
    80016fee:	7170d0ef          	jal	80024f04 <printf>
    80016ff2:	00032797          	auipc	a5,0x32
    80016ff6:	01f7c783          	lbu	a5,31(a5) # 80049011 <excpt+0x1>
    80016ffa:	00010597          	auipc	a1,0x10
    80016ffe:	e8658593          	addi	a1,a1,-378 # 80026e80 <__func__.0+0x2c0>
    80017002:	c789                	beqz	a5,8001700c <store_page_fault_3+0xae>
    80017004:	00010597          	auipc	a1,0x10
    80017008:	e8c58593          	addi	a1,a1,-372 # 80026e90 <__func__.0+0x2d0>
    8001700c:	00010517          	auipc	a0,0x10
    80017010:	ec450513          	addi	a0,a0,-316 # 80026ed0 <__func__.0+0x310>
    80017014:	6f10d0ef          	jal	80024f04 <printf>
    80017018:	00032797          	auipc	a5,0x32
    8001701c:	ff97c783          	lbu	a5,-7(a5) # 80049011 <excpt+0x1>
    80017020:	e7a1                	bnez	a5,80017068 <store_page_fault_3+0x10a>
    80017022:	4529                	li	a0,10
    80017024:	4eb0c0ef          	jal	80023d0e <putchar>
    80017028:	00032797          	auipc	a5,0x32
    8001702c:	fe97c783          	lbu	a5,-23(a5) # 80049011 <excpt+0x1>
    80017030:	e795                	bnez	a5,8001705c <store_page_fault_3+0xfe>
    80017032:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017034:	00010597          	auipc	a1,0x10
    80017038:	e4c58593          	addi	a1,a1,-436 # 80026e80 <__func__.0+0x2c0>
    8001703c:	00010517          	auipc	a0,0x10
    80017040:	efc50513          	addi	a0,a0,-260 # 80026f38 <__func__.0+0x378>
    80017044:	6c10d0ef          	jal	80024f04 <printf>
    80017048:	4511                	li	a0,4
    8001704a:	bade90ef          	jal	80000bf6 <goto_priv>
    8001704e:	c5eea0ef          	jal	800014ac <reset_state>
}
    80017052:	60a2                	ld	ra,8(sp)
    80017054:	8522                	mv	a0,s0
    80017056:	6402                	ld	s0,0(sp)
    80017058:	0141                	addi	sp,sp,16
    8001705a:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    8001705c:	4401                	li	s0,0
    TEST_END();
    8001705e:	00010597          	auipc	a1,0x10
    80017062:	e3258593          	addi	a1,a1,-462 # 80026e90 <__func__.0+0x2d0>
    80017066:	bfd9                	j	8001703c <store_page_fault_3+0xde>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80017068:	00010517          	auipc	a0,0x10
    8001706c:	e7050513          	addi	a0,a0,-400 # 80026ed8 <__func__.0+0x318>
    80017070:	6950d0ef          	jal	80024f04 <printf>
    80017074:	02900513          	li	a0,41
    80017078:	4970c0ef          	jal	80023d0e <putchar>
    8001707c:	b75d                	j	80017022 <store_page_fault_3+0xc4>

000000008001707e <store_page_fault_4>:


bool store_page_fault_4(){
    8001707e:	1101                	addi	sp,sp,-32

    TEST_START();
    80017080:	0000f597          	auipc	a1,0xf
    80017084:	e0058593          	addi	a1,a1,-512 # 80025e80 <__func__.10>
    80017088:	00010517          	auipc	a0,0x10
    8001708c:	e1850513          	addi	a0,a0,-488 # 80026ea0 <__func__.0+0x2e0>
bool store_page_fault_4(){
    80017090:	ec06                	sd	ra,24(sp)
    80017092:	e822                	sd	s0,16(sp)
    80017094:	e426                	sd	s1,8(sp)
    TEST_START();
    80017096:	66f0d0ef          	jal	80024f04 <printf>
    8001709a:	4529                	li	a0,10
    8001709c:	4730c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800170a0:	450d                	li	a0,3
    800170a2:	b55e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800170a6:	d3ae90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800170aa:	f78e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    800170ae:	e02e90ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800170b2:	4509                	li	a0,2
    800170b4:	b43e90ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800170b8:	0330000f          	fence	rw,rw
    800170bc:	00032497          	auipc	s1,0x32
    800170c0:	f5448493          	addi	s1,s1,-172 # 80049010 <excpt>
    800170c4:	4785                	li	a5,1
    800170c6:	00032717          	auipc	a4,0x32
    800170ca:	f8073123          	sd	zero,-126(a4) # 80049048 <excpt+0x38>
    800170ce:	00f49023          	sh	a5,0(s1)
    800170d2:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800170d6:	37ab77b7          	lui	a5,0x37ab7
    800170da:	078a                	slli	a5,a5,0x2
    800170dc:	40019737          	lui	a4,0x40019
    800170e0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800170e4:	070a                	slli	a4,a4,0x2
    800170e6:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    800170ea:	08200593          	li	a1,130
    800170ee:	00015617          	auipc	a2,0x15
    800170f2:	1da60613          	addi	a2,a2,474 # 8002c2c8 <__func__.0+0x5708>
    800170f6:	00010517          	auipc	a0,0x10
    800170fa:	dc250513          	addi	a0,a0,-574 # 80026eb8 <__func__.0+0x2f8>
    800170fe:	6070d0ef          	jal	80024f04 <printf>
    80017102:	00032797          	auipc	a5,0x32
    80017106:	f0f7c783          	lbu	a5,-241(a5) # 80049011 <excpt+0x1>
    8001710a:	00010597          	auipc	a1,0x10
    8001710e:	d8658593          	addi	a1,a1,-634 # 80026e90 <__func__.0+0x2d0>
    80017112:	cf89                	beqz	a5,8001712c <store_page_fault_4+0xae>
    80017114:	6498                	ld	a4,8(s1)
    80017116:	47bd                	li	a5,15
    80017118:	00010597          	auipc	a1,0x10
    8001711c:	d6858593          	addi	a1,a1,-664 # 80026e80 <__func__.0+0x2c0>
    80017120:	00f70663          	beq	a4,a5,8001712c <store_page_fault_4+0xae>
    80017124:	00010597          	auipc	a1,0x10
    80017128:	d6c58593          	addi	a1,a1,-660 # 80026e90 <__func__.0+0x2d0>
    8001712c:	00010517          	auipc	a0,0x10
    80017130:	da450513          	addi	a0,a0,-604 # 80026ed0 <__func__.0+0x310>
    80017134:	5d10d0ef          	jal	80024f04 <printf>
    80017138:	00032797          	auipc	a5,0x32
    8001713c:	ed97c783          	lbu	a5,-295(a5) # 80049011 <excpt+0x1>
    80017140:	c789                	beqz	a5,8001714a <store_page_fault_4+0xcc>
    80017142:	6498                	ld	a4,8(s1)
    80017144:	47bd                	li	a5,15
    80017146:	00f70c63          	beq	a4,a5,8001715e <store_page_fault_4+0xe0>
    8001714a:	00010517          	auipc	a0,0x10
    8001714e:	d8e50513          	addi	a0,a0,-626 # 80026ed8 <__func__.0+0x318>
    80017152:	5b30d0ef          	jal	80024f04 <printf>
    80017156:	02900513          	li	a0,41
    8001715a:	3b50c0ef          	jal	80023d0e <putchar>
    8001715e:	4529                	li	a0,10
    80017160:	3af0c0ef          	jal	80023d0e <putchar>
    80017164:	00032797          	auipc	a5,0x32
    80017168:	ead7c783          	lbu	a5,-339(a5) # 80049011 <excpt+0x1>
    8001716c:	4401                	li	s0,0
    8001716e:	c789                	beqz	a5,80017178 <store_page_fault_4+0xfa>
    80017170:	6480                	ld	s0,8(s1)
    80017172:	1445                	addi	s0,s0,-15
    80017174:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80017178:	0330000f          	fence	rw,rw
    8001717c:	4785                	li	a5,1
    8001717e:	00032717          	auipc	a4,0x32
    80017182:	ec073523          	sd	zero,-310(a4) # 80049048 <excpt+0x38>
    80017186:	00f49023          	sh	a5,0(s1)
    8001718a:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSRX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001718e:	000807b7          	lui	a5,0x80
    80017192:	1007b073          	csrc	sstatus,a5
    80017196:	37ab77b7          	lui	a5,0x37ab7
    8001719a:	00100737          	lui	a4,0x100
    8001719e:	078a                	slli	a5,a5,0x2
    800171a0:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    800171a4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800171a8:	0732                	slli	a4,a4,0xc
    800171aa:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    800171ae:	08200593          	li	a1,130
    800171b2:	00015617          	auipc	a2,0x15
    800171b6:	13e60613          	addi	a2,a2,318 # 8002c2f0 <__func__.0+0x5730>
    800171ba:	00010517          	auipc	a0,0x10
    800171be:	cfe50513          	addi	a0,a0,-770 # 80026eb8 <__func__.0+0x2f8>
    800171c2:	5430d0ef          	jal	80024f04 <printf>
    800171c6:	00032797          	auipc	a5,0x32
    800171ca:	e4b7c783          	lbu	a5,-437(a5) # 80049011 <excpt+0x1>
    800171ce:	00010597          	auipc	a1,0x10
    800171d2:	cc258593          	addi	a1,a1,-830 # 80026e90 <__func__.0+0x2d0>
    800171d6:	cf89                	beqz	a5,800171f0 <store_page_fault_4+0x172>
    800171d8:	6498                	ld	a4,8(s1)
    800171da:	47bd                	li	a5,15
    800171dc:	00010597          	auipc	a1,0x10
    800171e0:	ca458593          	addi	a1,a1,-860 # 80026e80 <__func__.0+0x2c0>
    800171e4:	00f70663          	beq	a4,a5,800171f0 <store_page_fault_4+0x172>
    800171e8:	00010597          	auipc	a1,0x10
    800171ec:	ca858593          	addi	a1,a1,-856 # 80026e90 <__func__.0+0x2d0>
    800171f0:	00010517          	auipc	a0,0x10
    800171f4:	ce050513          	addi	a0,a0,-800 # 80026ed0 <__func__.0+0x310>
    800171f8:	50d0d0ef          	jal	80024f04 <printf>
    800171fc:	00032797          	auipc	a5,0x32
    80017200:	e157c783          	lbu	a5,-491(a5) # 80049011 <excpt+0x1>
    80017204:	c789                	beqz	a5,8001720e <store_page_fault_4+0x190>
    80017206:	6498                	ld	a4,8(s1)
    80017208:	47bd                	li	a5,15
    8001720a:	00f70c63          	beq	a4,a5,80017222 <store_page_fault_4+0x1a4>
    8001720e:	00010517          	auipc	a0,0x10
    80017212:	cca50513          	addi	a0,a0,-822 # 80026ed8 <__func__.0+0x318>
    80017216:	4ef0d0ef          	jal	80024f04 <printf>
    8001721a:	02900513          	li	a0,41
    8001721e:	2f10c0ef          	jal	80023d0e <putchar>
    80017222:	4529                	li	a0,10
    80017224:	2eb0c0ef          	jal	80023d0e <putchar>
    80017228:	c419                	beqz	s0,80017236 <store_page_fault_4+0x1b8>
    8001722a:	00032797          	auipc	a5,0x32
    8001722e:	de77c783          	lbu	a5,-537(a5) # 80049011 <excpt+0x1>
    80017232:	4401                	li	s0,0
    80017234:	e3e1                	bnez	a5,800172f4 <store_page_fault_4+0x276>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80017236:	0330000f          	fence	rw,rw
    8001723a:	4785                	li	a5,1
    8001723c:	00032717          	auipc	a4,0x32
    80017240:	e0073623          	sd	zero,-500(a4) # 80049048 <excpt+0x38>
    80017244:	00f49023          	sh	a5,0(s1)
    80017248:	0330000f          	fence	rw,rw
    8001724c:	37ab77b7          	lui	a5,0x37ab7
    80017250:	00080737          	lui	a4,0x80
    80017254:	078a                	slli	a5,a5,0x2
    80017256:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80017258:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001725c:	0736                	slli	a4,a4,0xd
    8001725e:	00f73023          	sd	a5,0(a4)
    addr = hs_page_base(VSRW_GURW);

    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80017262:	08200593          	li	a1,130
    80017266:	00015617          	auipc	a2,0x15
    8001726a:	0b260613          	addi	a2,a2,178 # 8002c318 <__func__.0+0x5758>
    8001726e:	00010517          	auipc	a0,0x10
    80017272:	c4a50513          	addi	a0,a0,-950 # 80026eb8 <__func__.0+0x2f8>
    80017276:	48f0d0ef          	jal	80024f04 <printf>
    8001727a:	00032797          	auipc	a5,0x32
    8001727e:	d977c783          	lbu	a5,-617(a5) # 80049011 <excpt+0x1>
    80017282:	00010597          	auipc	a1,0x10
    80017286:	c0e58593          	addi	a1,a1,-1010 # 80026e90 <__func__.0+0x2d0>
    8001728a:	e789                	bnez	a5,80017294 <store_page_fault_4+0x216>
    8001728c:	00010597          	auipc	a1,0x10
    80017290:	bf458593          	addi	a1,a1,-1036 # 80026e80 <__func__.0+0x2c0>
    80017294:	00010517          	auipc	a0,0x10
    80017298:	c3c50513          	addi	a0,a0,-964 # 80026ed0 <__func__.0+0x310>
    8001729c:	4690d0ef          	jal	80024f04 <printf>
    800172a0:	00032797          	auipc	a5,0x32
    800172a4:	d717c783          	lbu	a5,-655(a5) # 80049011 <excpt+0x1>
    800172a8:	ebb9                	bnez	a5,800172fe <store_page_fault_4+0x280>
    800172aa:	4529                	li	a0,10
    800172ac:	2630c0ef          	jal	80023d0e <putchar>
    800172b0:	c411                	beqz	s0,800172bc <store_page_fault_4+0x23e>
    800172b2:	00032797          	auipc	a5,0x32
    800172b6:	d5f7c783          	lbu	a5,-673(a5) # 80049011 <excpt+0x1>
    800172ba:	c79d                	beqz	a5,800172e8 <store_page_fault_4+0x26a>
    800172bc:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800172be:	00010597          	auipc	a1,0x10
    800172c2:	bd258593          	addi	a1,a1,-1070 # 80026e90 <__func__.0+0x2d0>
    800172c6:	00010517          	auipc	a0,0x10
    800172ca:	c7250513          	addi	a0,a0,-910 # 80026f38 <__func__.0+0x378>
    800172ce:	4370d0ef          	jal	80024f04 <printf>
    800172d2:	4511                	li	a0,4
    800172d4:	923e90ef          	jal	80000bf6 <goto_priv>
    800172d8:	9d4ea0ef          	jal	800014ac <reset_state>
}
    800172dc:	60e2                	ld	ra,24(sp)
    800172de:	8522                	mv	a0,s0
    800172e0:	6442                	ld	s0,16(sp)
    800172e2:	64a2                	ld	s1,8(sp)
    800172e4:	6105                	addi	sp,sp,32
    800172e6:	8082                	ret
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    800172e8:	4405                	li	s0,1
    TEST_END();
    800172ea:	00010597          	auipc	a1,0x10
    800172ee:	b9658593          	addi	a1,a1,-1130 # 80026e80 <__func__.0+0x2c0>
    800172f2:	bfd1                	j	800172c6 <store_page_fault_4+0x248>
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    800172f4:	6480                	ld	s0,8(s1)
    800172f6:	1445                	addi	s0,s0,-15
    800172f8:	00143413          	seqz	s0,s0
    800172fc:	bf2d                	j	80017236 <store_page_fault_4+0x1b8>
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    800172fe:	00010517          	auipc	a0,0x10
    80017302:	bda50513          	addi	a0,a0,-1062 # 80026ed8 <__func__.0+0x318>
    80017306:	3ff0d0ef          	jal	80024f04 <printf>
    8001730a:	02900513          	li	a0,41
    8001730e:	2010c0ef          	jal	80023d0e <putchar>
    80017312:	bf61                	j	800172aa <store_page_fault_4+0x22c>

0000000080017314 <store_page_fault_5>:

bool store_page_fault_5(){
    80017314:	1101                	addi	sp,sp,-32

    TEST_START();
    80017316:	0000f597          	auipc	a1,0xf
    8001731a:	b8258593          	addi	a1,a1,-1150 # 80025e98 <__func__.9>
    8001731e:	00010517          	auipc	a0,0x10
    80017322:	b8250513          	addi	a0,a0,-1150 # 80026ea0 <__func__.0+0x2e0>
bool store_page_fault_5(){
    80017326:	ec06                	sd	ra,24(sp)
    80017328:	e822                	sd	s0,16(sp)
    8001732a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001732c:	3d90d0ef          	jal	80024f04 <printf>
    80017330:	4529                	li	a0,10
    80017332:	1dd0c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80017336:	450d                	li	a0,3
    80017338:	8bfe90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001733c:	aa4e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017340:	ce2e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017344:	b6ce90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80017348:	4511                	li	a0,4
    8001734a:	8ade90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001734e:	000407b7          	lui	a5,0x40
    80017352:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80017356:	4509                	li	a0,2
    80017358:	89fe90ef          	jal	80000bf6 <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001735c:	0330000f          	fence	rw,rw
    80017360:	00032417          	auipc	s0,0x32
    80017364:	cb040413          	addi	s0,s0,-848 # 80049010 <excpt>
    80017368:	4785                	li	a5,1
    8001736a:	00032717          	auipc	a4,0x32
    8001736e:	cc073f23          	sd	zero,-802(a4) # 80049048 <excpt+0x38>
    80017372:	00f41023          	sh	a5,0(s0)
    80017376:	0330000f          	fence	rw,rw
    8001737a:	37ab77b7          	lui	a5,0x37ab7
    8001737e:	00080737          	lui	a4,0x80
    80017382:	078a                	slli	a5,a5,0x2
    80017384:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80017386:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001738a:	0736                	slli	a4,a4,0xd
    8001738c:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80017390:	08200593          	li	a1,130
    80017394:	00015617          	auipc	a2,0x15
    80017398:	fac60613          	addi	a2,a2,-84 # 8002c340 <__func__.0+0x5780>
    8001739c:	00010517          	auipc	a0,0x10
    800173a0:	b1c50513          	addi	a0,a0,-1252 # 80026eb8 <__func__.0+0x2f8>
    800173a4:	3610d0ef          	jal	80024f04 <printf>
    800173a8:	00032797          	auipc	a5,0x32
    800173ac:	c697c783          	lbu	a5,-919(a5) # 80049011 <excpt+0x1>
    800173b0:	00010597          	auipc	a1,0x10
    800173b4:	ae058593          	addi	a1,a1,-1312 # 80026e90 <__func__.0+0x2d0>
    800173b8:	cf89                	beqz	a5,800173d2 <store_page_fault_5+0xbe>
    800173ba:	6418                	ld	a4,8(s0)
    800173bc:	47bd                	li	a5,15
    800173be:	00010597          	auipc	a1,0x10
    800173c2:	ac258593          	addi	a1,a1,-1342 # 80026e80 <__func__.0+0x2c0>
    800173c6:	00f70663          	beq	a4,a5,800173d2 <store_page_fault_5+0xbe>
    800173ca:	00010597          	auipc	a1,0x10
    800173ce:	ac658593          	addi	a1,a1,-1338 # 80026e90 <__func__.0+0x2d0>
    800173d2:	00010517          	auipc	a0,0x10
    800173d6:	afe50513          	addi	a0,a0,-1282 # 80026ed0 <__func__.0+0x310>
    800173da:	32b0d0ef          	jal	80024f04 <printf>
    800173de:	00032797          	auipc	a5,0x32
    800173e2:	c337c783          	lbu	a5,-973(a5) # 80049011 <excpt+0x1>
    800173e6:	c789                	beqz	a5,800173f0 <store_page_fault_5+0xdc>
    800173e8:	6418                	ld	a4,8(s0)
    800173ea:	47bd                	li	a5,15
    800173ec:	00f70c63          	beq	a4,a5,80017404 <store_page_fault_5+0xf0>
    800173f0:	00010517          	auipc	a0,0x10
    800173f4:	ae850513          	addi	a0,a0,-1304 # 80026ed8 <__func__.0+0x318>
    800173f8:	30d0d0ef          	jal	80024f04 <printf>
    800173fc:	02900513          	li	a0,41
    80017400:	10f0c0ef          	jal	80023d0e <putchar>
    80017404:	4529                	li	a0,10
    80017406:	1090c0ef          	jal	80023d0e <putchar>
    8001740a:	00032497          	auipc	s1,0x32
    8001740e:	c074c483          	lbu	s1,-1017(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80017412:	00010597          	auipc	a1,0x10
    80017416:	a7e58593          	addi	a1,a1,-1410 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    8001741a:	cc91                	beqz	s1,80017436 <store_page_fault_5+0x122>
    8001741c:	6418                	ld	a4,8(s0)
    8001741e:	47bd                	li	a5,15
    TEST_END();
    80017420:	00010597          	auipc	a1,0x10
    80017424:	a6058593          	addi	a1,a1,-1440 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    80017428:	00f70763          	beq	a4,a5,80017436 <store_page_fault_5+0x122>
    8001742c:	4481                	li	s1,0
    TEST_END();
    8001742e:	00010597          	auipc	a1,0x10
    80017432:	a6258593          	addi	a1,a1,-1438 # 80026e90 <__func__.0+0x2d0>
    80017436:	00010517          	auipc	a0,0x10
    8001743a:	b0250513          	addi	a0,a0,-1278 # 80026f38 <__func__.0+0x378>
    8001743e:	2c70d0ef          	jal	80024f04 <printf>
    80017442:	4511                	li	a0,4
    80017444:	fb2e90ef          	jal	80000bf6 <goto_priv>
    80017448:	864ea0ef          	jal	800014ac <reset_state>
}
    8001744c:	60e2                	ld	ra,24(sp)
    8001744e:	6442                	ld	s0,16(sp)
    80017450:	8526                	mv	a0,s1
    80017452:	64a2                	ld	s1,8(sp)
    80017454:	6105                	addi	sp,sp,32
    80017456:	8082                	ret

0000000080017458 <store_page_fault_6>:

bool store_page_fault_6(){
    80017458:	1141                	addi	sp,sp,-16

    TEST_START();
    8001745a:	0000f597          	auipc	a1,0xf
    8001745e:	a5658593          	addi	a1,a1,-1450 # 80025eb0 <__func__.8>
    80017462:	00010517          	auipc	a0,0x10
    80017466:	a3e50513          	addi	a0,a0,-1474 # 80026ea0 <__func__.0+0x2e0>
bool store_page_fault_6(){
    8001746a:	e406                	sd	ra,8(sp)
    8001746c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001746e:	2970d0ef          	jal	80024f04 <printf>
    80017472:	4529                	li	a0,10
    80017474:	09b0c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80017478:	450d                	li	a0,3
    8001747a:	f7ce90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001747e:	962e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017482:	ba0e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017486:	a2ae90ef          	jal	800006b0 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001748a:	4511                	li	a0,4
    8001748c:	f6ae90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80017490:	000407b7          	lui	a5,0x40
    80017494:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80017498:	4509                	li	a0,2
    8001749a:	f5ce90ef          	jal	80000bf6 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001749e:	0330000f          	fence	rw,rw
    800174a2:	4785                	li	a5,1
    800174a4:	00032717          	auipc	a4,0x32
    800174a8:	ba073223          	sd	zero,-1116(a4) # 80049048 <excpt+0x38>
    800174ac:	00032717          	auipc	a4,0x32
    800174b0:	b6f71223          	sh	a5,-1180(a4) # 80049010 <excpt>
    800174b4:	0330000f          	fence	rw,rw
    800174b8:	37ab77b7          	lui	a5,0x37ab7
    800174bc:	00080737          	lui	a4,0x80
    800174c0:	078a                	slli	a5,a5,0x2
    800174c2:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800174c4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800174c8:	0736                	slli	a4,a4,0xd
    800174ca:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    800174ce:	08200593          	li	a1,130
    800174d2:	00015617          	auipc	a2,0x15
    800174d6:	ea660613          	addi	a2,a2,-346 # 8002c378 <__func__.0+0x57b8>
    800174da:	00010517          	auipc	a0,0x10
    800174de:	9de50513          	addi	a0,a0,-1570 # 80026eb8 <__func__.0+0x2f8>
    800174e2:	2230d0ef          	jal	80024f04 <printf>
    800174e6:	00032797          	auipc	a5,0x32
    800174ea:	b2b7c783          	lbu	a5,-1237(a5) # 80049011 <excpt+0x1>
    800174ee:	00010597          	auipc	a1,0x10
    800174f2:	99258593          	addi	a1,a1,-1646 # 80026e80 <__func__.0+0x2c0>
    800174f6:	c789                	beqz	a5,80017500 <store_page_fault_6+0xa8>
    800174f8:	00010597          	auipc	a1,0x10
    800174fc:	99858593          	addi	a1,a1,-1640 # 80026e90 <__func__.0+0x2d0>
    80017500:	00010517          	auipc	a0,0x10
    80017504:	9d050513          	addi	a0,a0,-1584 # 80026ed0 <__func__.0+0x310>
    80017508:	1fd0d0ef          	jal	80024f04 <printf>
    8001750c:	00032797          	auipc	a5,0x32
    80017510:	b057c783          	lbu	a5,-1275(a5) # 80049011 <excpt+0x1>
    80017514:	e7a1                	bnez	a5,8001755c <store_page_fault_6+0x104>
    80017516:	4529                	li	a0,10
    80017518:	7f60c0ef          	jal	80023d0e <putchar>
    8001751c:	00032797          	auipc	a5,0x32
    80017520:	af57c783          	lbu	a5,-1291(a5) # 80049011 <excpt+0x1>
    80017524:	e795                	bnez	a5,80017550 <store_page_fault_6+0xf8>
    80017526:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017528:	00010597          	auipc	a1,0x10
    8001752c:	95858593          	addi	a1,a1,-1704 # 80026e80 <__func__.0+0x2c0>
    80017530:	00010517          	auipc	a0,0x10
    80017534:	a0850513          	addi	a0,a0,-1528 # 80026f38 <__func__.0+0x378>
    80017538:	1cd0d0ef          	jal	80024f04 <printf>
    8001753c:	4511                	li	a0,4
    8001753e:	eb8e90ef          	jal	80000bf6 <goto_priv>
    80017542:	f6be90ef          	jal	800014ac <reset_state>
}
    80017546:	60a2                	ld	ra,8(sp)
    80017548:	8522                	mv	a0,s0
    8001754a:	6402                	ld	s0,0(sp)
    8001754c:	0141                	addi	sp,sp,16
    8001754e:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80017550:	4401                	li	s0,0
    TEST_END();
    80017552:	00010597          	auipc	a1,0x10
    80017556:	93e58593          	addi	a1,a1,-1730 # 80026e90 <__func__.0+0x2d0>
    8001755a:	bfd9                	j	80017530 <store_page_fault_6+0xd8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001755c:	00010517          	auipc	a0,0x10
    80017560:	97c50513          	addi	a0,a0,-1668 # 80026ed8 <__func__.0+0x318>
    80017564:	1a10d0ef          	jal	80024f04 <printf>
    80017568:	02900513          	li	a0,41
    8001756c:	7a20c0ef          	jal	80023d0e <putchar>
    80017570:	b75d                	j	80017516 <store_page_fault_6+0xbe>

0000000080017572 <store_page_fault_7>:

bool store_page_fault_7(){
    80017572:	1101                	addi	sp,sp,-32

    TEST_START();
    80017574:	0000f597          	auipc	a1,0xf
    80017578:	95458593          	addi	a1,a1,-1708 # 80025ec8 <__func__.7>
    8001757c:	00010517          	auipc	a0,0x10
    80017580:	92450513          	addi	a0,a0,-1756 # 80026ea0 <__func__.0+0x2e0>
bool store_page_fault_7(){
    80017584:	ec06                	sd	ra,24(sp)
    80017586:	e822                	sd	s0,16(sp)
    80017588:	e426                	sd	s1,8(sp)
    TEST_START();
    8001758a:	17b0d0ef          	jal	80024f04 <printf>
    8001758e:	4529                	li	a0,10
    80017590:	77e0c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80017594:	450d                	li	a0,3
    80017596:	e60e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001759a:	846e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001759e:	a84e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    800175a2:	90ee90ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    800175a6:	4511                	li	a0,4
    800175a8:	e4ee90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    800175ac:	000407b7          	lui	a5,0x40
    800175b0:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    800175b4:	450d                	li	a0,3
    800175b6:	e40e90ef          	jal	80000bf6 <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800175ba:	0330000f          	fence	rw,rw
    800175be:	00032417          	auipc	s0,0x32
    800175c2:	a5240413          	addi	s0,s0,-1454 # 80049010 <excpt>
    800175c6:	4785                	li	a5,1
    800175c8:	00032717          	auipc	a4,0x32
    800175cc:	a8073023          	sd	zero,-1408(a4) # 80049048 <excpt+0x38>
    800175d0:	00f41023          	sh	a5,0(s0)
    800175d4:	0330000f          	fence	rw,rw
    800175d8:	37ab77b7          	lui	a5,0x37ab7
    800175dc:	00080737          	lui	a4,0x80
    800175e0:	078a                	slli	a5,a5,0x2
    800175e2:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800175e4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800175e8:	0736                	slli	a4,a4,0xd
    800175ea:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800175ee:	08200593          	li	a1,130
    800175f2:	00015617          	auipc	a2,0x15
    800175f6:	dbe60613          	addi	a2,a2,-578 # 8002c3b0 <__func__.0+0x57f0>
    800175fa:	00010517          	auipc	a0,0x10
    800175fe:	8be50513          	addi	a0,a0,-1858 # 80026eb8 <__func__.0+0x2f8>
    80017602:	1030d0ef          	jal	80024f04 <printf>
    80017606:	00032797          	auipc	a5,0x32
    8001760a:	a0b7c783          	lbu	a5,-1525(a5) # 80049011 <excpt+0x1>
    8001760e:	00010597          	auipc	a1,0x10
    80017612:	88258593          	addi	a1,a1,-1918 # 80026e90 <__func__.0+0x2d0>
    80017616:	cf89                	beqz	a5,80017630 <store_page_fault_7+0xbe>
    80017618:	6418                	ld	a4,8(s0)
    8001761a:	47bd                	li	a5,15
    8001761c:	00010597          	auipc	a1,0x10
    80017620:	86458593          	addi	a1,a1,-1948 # 80026e80 <__func__.0+0x2c0>
    80017624:	00f70663          	beq	a4,a5,80017630 <store_page_fault_7+0xbe>
    80017628:	00010597          	auipc	a1,0x10
    8001762c:	86858593          	addi	a1,a1,-1944 # 80026e90 <__func__.0+0x2d0>
    80017630:	00010517          	auipc	a0,0x10
    80017634:	8a050513          	addi	a0,a0,-1888 # 80026ed0 <__func__.0+0x310>
    80017638:	0cd0d0ef          	jal	80024f04 <printf>
    8001763c:	00032797          	auipc	a5,0x32
    80017640:	9d57c783          	lbu	a5,-1579(a5) # 80049011 <excpt+0x1>
    80017644:	c789                	beqz	a5,8001764e <store_page_fault_7+0xdc>
    80017646:	6418                	ld	a4,8(s0)
    80017648:	47bd                	li	a5,15
    8001764a:	00f70c63          	beq	a4,a5,80017662 <store_page_fault_7+0xf0>
    8001764e:	00010517          	auipc	a0,0x10
    80017652:	88a50513          	addi	a0,a0,-1910 # 80026ed8 <__func__.0+0x318>
    80017656:	0af0d0ef          	jal	80024f04 <printf>
    8001765a:	02900513          	li	a0,41
    8001765e:	6b00c0ef          	jal	80023d0e <putchar>
    80017662:	4529                	li	a0,10
    80017664:	6aa0c0ef          	jal	80023d0e <putchar>
    80017668:	00032497          	auipc	s1,0x32
    8001766c:	9a94c483          	lbu	s1,-1623(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80017670:	00010597          	auipc	a1,0x10
    80017674:	82058593          	addi	a1,a1,-2016 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80017678:	cc91                	beqz	s1,80017694 <store_page_fault_7+0x122>
    8001767a:	6418                	ld	a4,8(s0)
    8001767c:	47bd                	li	a5,15
    TEST_END();
    8001767e:	00010597          	auipc	a1,0x10
    80017682:	80258593          	addi	a1,a1,-2046 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80017686:	00f70763          	beq	a4,a5,80017694 <store_page_fault_7+0x122>
    8001768a:	4481                	li	s1,0
    TEST_END();
    8001768c:	00010597          	auipc	a1,0x10
    80017690:	80458593          	addi	a1,a1,-2044 # 80026e90 <__func__.0+0x2d0>
    80017694:	00010517          	auipc	a0,0x10
    80017698:	8a450513          	addi	a0,a0,-1884 # 80026f38 <__func__.0+0x378>
    8001769c:	0690d0ef          	jal	80024f04 <printf>
    800176a0:	4511                	li	a0,4
    800176a2:	d54e90ef          	jal	80000bf6 <goto_priv>
    800176a6:	e07e90ef          	jal	800014ac <reset_state>
}
    800176aa:	60e2                	ld	ra,24(sp)
    800176ac:	6442                	ld	s0,16(sp)
    800176ae:	8526                	mv	a0,s1
    800176b0:	64a2                	ld	s1,8(sp)
    800176b2:	6105                	addi	sp,sp,32
    800176b4:	8082                	ret

00000000800176b6 <store_page_fault_8>:

bool store_page_fault_8(){
    800176b6:	1141                	addi	sp,sp,-16

    TEST_START();
    800176b8:	0000f597          	auipc	a1,0xf
    800176bc:	82858593          	addi	a1,a1,-2008 # 80025ee0 <__func__.6>
    800176c0:	0000f517          	auipc	a0,0xf
    800176c4:	7e050513          	addi	a0,a0,2016 # 80026ea0 <__func__.0+0x2e0>
bool store_page_fault_8(){
    800176c8:	e406                	sd	ra,8(sp)
    800176ca:	e022                	sd	s0,0(sp)
    TEST_START();
    800176cc:	0390d0ef          	jal	80024f04 <printf>
    800176d0:	4529                	li	a0,10
    800176d2:	63c0c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800176d6:	450d                	li	a0,3
    800176d8:	d1ee90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800176dc:	f05e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800176e0:	942e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    800176e4:	fcde80ef          	jal	800006b0 <vspt_init>


    //执行sd指令时，设置了msstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800176e8:	4511                	li	a0,4
    800176ea:	d0ce90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    800176ee:	000407b7          	lui	a5,0x40
    800176f2:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800176f6:	450d                	li	a0,3
    800176f8:	cfee90ef          	jal	80000bf6 <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800176fc:	0330000f          	fence	rw,rw
    80017700:	4785                	li	a5,1
    80017702:	00032717          	auipc	a4,0x32
    80017706:	94073323          	sd	zero,-1722(a4) # 80049048 <excpt+0x38>
    8001770a:	00032717          	auipc	a4,0x32
    8001770e:	90f71323          	sh	a5,-1786(a4) # 80049010 <excpt>
    80017712:	0330000f          	fence	rw,rw
    80017716:	37ab77b7          	lui	a5,0x37ab7
    8001771a:	00080737          	lui	a4,0x80
    8001771e:	078a                	slli	a5,a5,0x2
    80017720:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80017722:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80017726:	0736                	slli	a4,a4,0xd
    80017728:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    8001772c:	08200593          	li	a1,130
    80017730:	00015617          	auipc	a2,0x15
    80017734:	cb860613          	addi	a2,a2,-840 # 8002c3e8 <__func__.0+0x5828>
    80017738:	0000f517          	auipc	a0,0xf
    8001773c:	78050513          	addi	a0,a0,1920 # 80026eb8 <__func__.0+0x2f8>
    80017740:	7c40d0ef          	jal	80024f04 <printf>
    80017744:	00032797          	auipc	a5,0x32
    80017748:	8cd7c783          	lbu	a5,-1843(a5) # 80049011 <excpt+0x1>
    8001774c:	0000f597          	auipc	a1,0xf
    80017750:	73458593          	addi	a1,a1,1844 # 80026e80 <__func__.0+0x2c0>
    80017754:	c789                	beqz	a5,8001775e <store_page_fault_8+0xa8>
    80017756:	0000f597          	auipc	a1,0xf
    8001775a:	73a58593          	addi	a1,a1,1850 # 80026e90 <__func__.0+0x2d0>
    8001775e:	0000f517          	auipc	a0,0xf
    80017762:	77250513          	addi	a0,a0,1906 # 80026ed0 <__func__.0+0x310>
    80017766:	79e0d0ef          	jal	80024f04 <printf>
    8001776a:	00032797          	auipc	a5,0x32
    8001776e:	8a77c783          	lbu	a5,-1881(a5) # 80049011 <excpt+0x1>
    80017772:	e7a1                	bnez	a5,800177ba <store_page_fault_8+0x104>
    80017774:	4529                	li	a0,10
    80017776:	5980c0ef          	jal	80023d0e <putchar>
    8001777a:	00032797          	auipc	a5,0x32
    8001777e:	8977c783          	lbu	a5,-1897(a5) # 80049011 <excpt+0x1>
    80017782:	e795                	bnez	a5,800177ae <store_page_fault_8+0xf8>
    80017784:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017786:	0000f597          	auipc	a1,0xf
    8001778a:	6fa58593          	addi	a1,a1,1786 # 80026e80 <__func__.0+0x2c0>
    8001778e:	0000f517          	auipc	a0,0xf
    80017792:	7aa50513          	addi	a0,a0,1962 # 80026f38 <__func__.0+0x378>
    80017796:	76e0d0ef          	jal	80024f04 <printf>
    8001779a:	4511                	li	a0,4
    8001779c:	c5ae90ef          	jal	80000bf6 <goto_priv>
    800177a0:	d0de90ef          	jal	800014ac <reset_state>
}
    800177a4:	60a2                	ld	ra,8(sp)
    800177a6:	8522                	mv	a0,s0
    800177a8:	6402                	ld	s0,0(sp)
    800177aa:	0141                	addi	sp,sp,16
    800177ac:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    800177ae:	4401                	li	s0,0
    TEST_END();
    800177b0:	0000f597          	auipc	a1,0xf
    800177b4:	6e058593          	addi	a1,a1,1760 # 80026e90 <__func__.0+0x2d0>
    800177b8:	bfd9                	j	8001778e <store_page_fault_8+0xd8>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    800177ba:	0000f517          	auipc	a0,0xf
    800177be:	71e50513          	addi	a0,a0,1822 # 80026ed8 <__func__.0+0x318>
    800177c2:	7420d0ef          	jal	80024f04 <printf>
    800177c6:	02900513          	li	a0,41
    800177ca:	5440c0ef          	jal	80023d0e <putchar>
    800177ce:	b75d                	j	80017774 <store_page_fault_8+0xbe>

00000000800177d0 <amo_page_fault_1>:





bool amo_page_fault_1(){
    800177d0:	1101                	addi	sp,sp,-32

    TEST_START();
    800177d2:	0000e597          	auipc	a1,0xe
    800177d6:	72658593          	addi	a1,a1,1830 # 80025ef8 <__func__.5>
    800177da:	0000f517          	auipc	a0,0xf
    800177de:	6c650513          	addi	a0,a0,1734 # 80026ea0 <__func__.0+0x2e0>
bool amo_page_fault_1(){
    800177e2:	ec06                	sd	ra,24(sp)
    800177e4:	e822                	sd	s0,16(sp)
    800177e6:	e426                	sd	s1,8(sp)
    800177e8:	e04a                	sd	s2,0(sp)
    TEST_START();
    800177ea:	71a0d0ef          	jal	80024f04 <printf>
    800177ee:	4529                	li	a0,10
    800177f0:	51e0c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800177f4:	450d                	li	a0,3
    800177f6:	c00e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800177fa:	de7e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800177fe:	824e90ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017802:	eafe80ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    80017806:	450d                	li	a0,3
    80017808:	beee90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001780c:	4509                	li	a0,2
    8001780e:	b08e90ef          	jal	80000b16 <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80017812:	0330000f          	fence	rw,rw
    80017816:	00031917          	auipc	s2,0x31
    8001781a:	7fa90913          	addi	s2,s2,2042 # 80049010 <excpt>
    8001781e:	4785                	li	a5,1
    80017820:	00032717          	auipc	a4,0x32
    80017824:	82073423          	sd	zero,-2008(a4) # 80049048 <excpt+0x38>
    80017828:	00f91023          	sh	a5,0(s2)
    8001782c:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80017830:	deadc7b7          	lui	a5,0xdeadc
    80017834:	40019737          	lui	a4,0x40019
    80017838:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8001783c:	070a                	slli	a4,a4,0x2
    8001783e:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80017842:	08200593          	li	a1,130
    80017846:	00015617          	auipc	a2,0x15
    8001784a:	bda60613          	addi	a2,a2,-1062 # 8002c420 <__func__.0+0x5860>
    8001784e:	0000f517          	auipc	a0,0xf
    80017852:	66a50513          	addi	a0,a0,1642 # 80026eb8 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80017856:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    8001785a:	6aa0d0ef          	jal	80024f04 <printf>
    8001785e:	00031797          	auipc	a5,0x31
    80017862:	7b37c783          	lbu	a5,1971(a5) # 80049011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80017866:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    80017868:	0000f597          	auipc	a1,0xf
    8001786c:	62858593          	addi	a1,a1,1576 # 80026e90 <__func__.0+0x2d0>
    80017870:	cf91                	beqz	a5,8001788c <amo_page_fault_1+0xbc>
    80017872:	00893703          	ld	a4,8(s2)
    80017876:	47bd                	li	a5,15
    80017878:	0000f597          	auipc	a1,0xf
    8001787c:	60858593          	addi	a1,a1,1544 # 80026e80 <__func__.0+0x2c0>
    80017880:	00f70663          	beq	a4,a5,8001788c <amo_page_fault_1+0xbc>
    80017884:	0000f597          	auipc	a1,0xf
    80017888:	60c58593          	addi	a1,a1,1548 # 80026e90 <__func__.0+0x2d0>
    8001788c:	0000f517          	auipc	a0,0xf
    80017890:	64450513          	addi	a0,a0,1604 # 80026ed0 <__func__.0+0x310>
    80017894:	6700d0ef          	jal	80024f04 <printf>
    80017898:	00031797          	auipc	a5,0x31
    8001789c:	7797c783          	lbu	a5,1913(a5) # 80049011 <excpt+0x1>
    800178a0:	c791                	beqz	a5,800178ac <amo_page_fault_1+0xdc>
    800178a2:	00893703          	ld	a4,8(s2)
    800178a6:	47bd                	li	a5,15
    800178a8:	00f70c63          	beq	a4,a5,800178c0 <amo_page_fault_1+0xf0>
    800178ac:	0000f517          	auipc	a0,0xf
    800178b0:	62c50513          	addi	a0,a0,1580 # 80026ed8 <__func__.0+0x318>
    800178b4:	6500d0ef          	jal	80024f04 <printf>
    800178b8:	02900513          	li	a0,41
    800178bc:	4520c0ef          	jal	80023d0e <putchar>
    800178c0:	4529                	li	a0,10
    800178c2:	44c0c0ef          	jal	80023d0e <putchar>
    800178c6:	00031797          	auipc	a5,0x31
    800178ca:	74b7c783          	lbu	a5,1867(a5) # 80049011 <excpt+0x1>
    800178ce:	4481                	li	s1,0
    800178d0:	c791                	beqz	a5,800178dc <amo_page_fault_1+0x10c>
    800178d2:	00893483          	ld	s1,8(s2)
    800178d6:	14c5                	addi	s1,s1,-15
    800178d8:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    800178dc:	0330000f          	fence	rw,rw
    800178e0:	4785                	li	a5,1
    800178e2:	00031717          	auipc	a4,0x31
    800178e6:	76073323          	sd	zero,1894(a4) # 80049048 <excpt+0x38>
    800178ea:	00f91023          	sh	a5,0(s2)
    800178ee:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    800178f2:	001007b7          	lui	a5,0x100
    800178f6:	05578793          	addi	a5,a5,85 # 100055 <STACK_SIZE+0x55>
    800178fa:	07b2                	slli	a5,a5,0xc
    800178fc:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GRWX);

    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    80017900:	08200593          	li	a1,130
    80017904:	00015617          	auipc	a2,0x15
    80017908:	b5460613          	addi	a2,a2,-1196 # 8002c458 <__func__.0+0x5898>
    8001790c:	0000f517          	auipc	a0,0xf
    80017910:	5ac50513          	addi	a0,a0,1452 # 80026eb8 <__func__.0+0x2f8>
    80017914:	5f00d0ef          	jal	80024f04 <printf>
    80017918:	00031797          	auipc	a5,0x31
    8001791c:	6f97c783          	lbu	a5,1785(a5) # 80049011 <excpt+0x1>
    80017920:	0000f597          	auipc	a1,0xf
    80017924:	57058593          	addi	a1,a1,1392 # 80026e90 <__func__.0+0x2d0>
    80017928:	cf91                	beqz	a5,80017944 <amo_page_fault_1+0x174>
    8001792a:	00893703          	ld	a4,8(s2)
    8001792e:	47bd                	li	a5,15
    80017930:	0000f597          	auipc	a1,0xf
    80017934:	55058593          	addi	a1,a1,1360 # 80026e80 <__func__.0+0x2c0>
    80017938:	00f70663          	beq	a4,a5,80017944 <amo_page_fault_1+0x174>
    8001793c:	0000f597          	auipc	a1,0xf
    80017940:	55458593          	addi	a1,a1,1364 # 80026e90 <__func__.0+0x2d0>
    80017944:	0000f517          	auipc	a0,0xf
    80017948:	58c50513          	addi	a0,a0,1420 # 80026ed0 <__func__.0+0x310>
    8001794c:	5b80d0ef          	jal	80024f04 <printf>
    80017950:	00031797          	auipc	a5,0x31
    80017954:	6c17c783          	lbu	a5,1729(a5) # 80049011 <excpt+0x1>
    80017958:	c791                	beqz	a5,80017964 <amo_page_fault_1+0x194>
    8001795a:	00893703          	ld	a4,8(s2)
    8001795e:	47bd                	li	a5,15
    80017960:	00f70c63          	beq	a4,a5,80017978 <amo_page_fault_1+0x1a8>
    80017964:	0000f517          	auipc	a0,0xf
    80017968:	57450513          	addi	a0,a0,1396 # 80026ed8 <__func__.0+0x318>
    8001796c:	5980d0ef          	jal	80024f04 <printf>
    80017970:	02900513          	li	a0,41
    80017974:	39a0c0ef          	jal	80023d0e <putchar>
    80017978:	4529                	li	a0,10
    8001797a:	3940c0ef          	jal	80023d0e <putchar>
    8001797e:	c499                	beqz	s1,8001798c <amo_page_fault_1+0x1bc>
    80017980:	00031797          	auipc	a5,0x31
    80017984:	6917c783          	lbu	a5,1681(a5) # 80049011 <excpt+0x1>
    80017988:	4481                	li	s1,0
    8001798a:	ebcd                	bnez	a5,80017a3c <amo_page_fault_1+0x26c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    8001798c:	0330000f          	fence	rw,rw
    80017990:	4785                	li	a5,1
    80017992:	00031717          	auipc	a4,0x31
    80017996:	6a073b23          	sd	zero,1718(a4) # 80049048 <excpt+0x38>
    8001799a:	00f91023          	sh	a5,0(s2)
    8001799e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    800179a2:	1782                	slli	a5,a5,0x20
    800179a4:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800179a8:	08200593          	li	a1,130
    800179ac:	00015617          	auipc	a2,0x15
    800179b0:	ae460613          	addi	a2,a2,-1308 # 8002c490 <__func__.0+0x58d0>
    800179b4:	0000f517          	auipc	a0,0xf
    800179b8:	50450513          	addi	a0,a0,1284 # 80026eb8 <__func__.0+0x2f8>
    800179bc:	5480d0ef          	jal	80024f04 <printf>
    800179c0:	00031797          	auipc	a5,0x31
    800179c4:	6517c783          	lbu	a5,1617(a5) # 80049011 <excpt+0x1>
    800179c8:	0000f597          	auipc	a1,0xf
    800179cc:	4c858593          	addi	a1,a1,1224 # 80026e90 <__func__.0+0x2d0>
    800179d0:	e789                	bnez	a5,800179da <amo_page_fault_1+0x20a>
    800179d2:	0000f597          	auipc	a1,0xf
    800179d6:	4ae58593          	addi	a1,a1,1198 # 80026e80 <__func__.0+0x2c0>
    800179da:	0000f517          	auipc	a0,0xf
    800179de:	4f650513          	addi	a0,a0,1270 # 80026ed0 <__func__.0+0x310>
    800179e2:	5220d0ef          	jal	80024f04 <printf>
    800179e6:	00031797          	auipc	a5,0x31
    800179ea:	62b7c783          	lbu	a5,1579(a5) # 80049011 <excpt+0x1>
    800179ee:	efa9                	bnez	a5,80017a48 <amo_page_fault_1+0x278>
    800179f0:	4529                	li	a0,10
    800179f2:	31c0c0ef          	jal	80023d0e <putchar>
    800179f6:	c491                	beqz	s1,80017a02 <amo_page_fault_1+0x232>
    800179f8:	00031797          	auipc	a5,0x31
    800179fc:	6197c783          	lbu	a5,1561(a5) # 80049011 <excpt+0x1>
    80017a00:	cb85                	beqz	a5,80017a30 <amo_page_fault_1+0x260>
    80017a02:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80017a04:	0000f597          	auipc	a1,0xf
    80017a08:	48c58593          	addi	a1,a1,1164 # 80026e90 <__func__.0+0x2d0>
    80017a0c:	0000f517          	auipc	a0,0xf
    80017a10:	52c50513          	addi	a0,a0,1324 # 80026f38 <__func__.0+0x378>
    80017a14:	4f00d0ef          	jal	80024f04 <printf>
    80017a18:	4511                	li	a0,4
    80017a1a:	9dce90ef          	jal	80000bf6 <goto_priv>
    80017a1e:	a8fe90ef          	jal	800014ac <reset_state>
}
    80017a22:	60e2                	ld	ra,24(sp)
    80017a24:	8522                	mv	a0,s0
    80017a26:	6442                	ld	s0,16(sp)
    80017a28:	64a2                	ld	s1,8(sp)
    80017a2a:	6902                	ld	s2,0(sp)
    80017a2c:	6105                	addi	sp,sp,32
    80017a2e:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80017a30:	4405                	li	s0,1
    TEST_END();
    80017a32:	0000f597          	auipc	a1,0xf
    80017a36:	44e58593          	addi	a1,a1,1102 # 80026e80 <__func__.0+0x2c0>
    80017a3a:	bfc9                	j	80017a0c <amo_page_fault_1+0x23c>
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    80017a3c:	00893483          	ld	s1,8(s2)
    80017a40:	14c5                	addi	s1,s1,-15
    80017a42:	0014b493          	seqz	s1,s1
    80017a46:	b799                	j	8001798c <amo_page_fault_1+0x1bc>
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80017a48:	0000f517          	auipc	a0,0xf
    80017a4c:	49050513          	addi	a0,a0,1168 # 80026ed8 <__func__.0+0x318>
    80017a50:	4b40d0ef          	jal	80024f04 <printf>
    80017a54:	02900513          	li	a0,41
    80017a58:	2b60c0ef          	jal	80023d0e <putchar>
    80017a5c:	bf51                	j	800179f0 <amo_page_fault_1+0x220>

0000000080017a5e <amo_page_fault_2>:

bool amo_page_fault_2(){
    80017a5e:	1101                	addi	sp,sp,-32

    TEST_START();
    80017a60:	0000e597          	auipc	a1,0xe
    80017a64:	4b058593          	addi	a1,a1,1200 # 80025f10 <__func__.4>
    80017a68:	0000f517          	auipc	a0,0xf
    80017a6c:	43850513          	addi	a0,a0,1080 # 80026ea0 <__func__.0+0x2e0>
bool amo_page_fault_2(){
    80017a70:	ec06                	sd	ra,24(sp)
    80017a72:	e822                	sd	s0,16(sp)
    80017a74:	e426                	sd	s1,8(sp)
    TEST_START();
    80017a76:	48e0d0ef          	jal	80024f04 <printf>
    80017a7a:	4529                	li	a0,10
    80017a7c:	2920c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80017a80:	450d                	li	a0,3
    80017a82:	974e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017a86:	b5be80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017a8a:	d99e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017a8e:	c23e80ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80017a92:	4511                	li	a0,4
    80017a94:	962e90ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80017a98:	000407b7          	lui	a5,0x40
    80017a9c:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80017aa0:	450d                	li	a0,3
    80017aa2:	954e90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);    
    80017aa6:	4509                	li	a0,2
    80017aa8:	86ee90ef          	jal	80000b16 <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80017aac:	0330000f          	fence	rw,rw
    80017ab0:	00031417          	auipc	s0,0x31
    80017ab4:	56040413          	addi	s0,s0,1376 # 80049010 <excpt>
    80017ab8:	4785                	li	a5,1
    80017aba:	00031717          	auipc	a4,0x31
    80017abe:	58073723          	sd	zero,1422(a4) # 80049048 <excpt+0x38>
    80017ac2:	00f41023          	sh	a5,0(s0)
    80017ac6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80017aca:	000807b7          	lui	a5,0x80
    80017ace:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017ad0:	4701                	li	a4,0
    80017ad2:	07b6                	slli	a5,a5,0xd
    80017ad4:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80017ad8:	08200593          	li	a1,130
    80017adc:	00015617          	auipc	a2,0x15
    80017ae0:	9ec60613          	addi	a2,a2,-1556 # 8002c4c8 <__func__.0+0x5908>
    80017ae4:	0000f517          	auipc	a0,0xf
    80017ae8:	3d450513          	addi	a0,a0,980 # 80026eb8 <__func__.0+0x2f8>
    80017aec:	4180d0ef          	jal	80024f04 <printf>
    80017af0:	00031797          	auipc	a5,0x31
    80017af4:	5217c783          	lbu	a5,1313(a5) # 80049011 <excpt+0x1>
    80017af8:	0000f597          	auipc	a1,0xf
    80017afc:	39858593          	addi	a1,a1,920 # 80026e90 <__func__.0+0x2d0>
    80017b00:	cf89                	beqz	a5,80017b1a <amo_page_fault_2+0xbc>
    80017b02:	6418                	ld	a4,8(s0)
    80017b04:	47bd                	li	a5,15
    80017b06:	0000f597          	auipc	a1,0xf
    80017b0a:	37a58593          	addi	a1,a1,890 # 80026e80 <__func__.0+0x2c0>
    80017b0e:	00f70663          	beq	a4,a5,80017b1a <amo_page_fault_2+0xbc>
    80017b12:	0000f597          	auipc	a1,0xf
    80017b16:	37e58593          	addi	a1,a1,894 # 80026e90 <__func__.0+0x2d0>
    80017b1a:	0000f517          	auipc	a0,0xf
    80017b1e:	3b650513          	addi	a0,a0,950 # 80026ed0 <__func__.0+0x310>
    80017b22:	3e20d0ef          	jal	80024f04 <printf>
    80017b26:	00031797          	auipc	a5,0x31
    80017b2a:	4eb7c783          	lbu	a5,1259(a5) # 80049011 <excpt+0x1>
    80017b2e:	c789                	beqz	a5,80017b38 <amo_page_fault_2+0xda>
    80017b30:	6418                	ld	a4,8(s0)
    80017b32:	47bd                	li	a5,15
    80017b34:	00f70c63          	beq	a4,a5,80017b4c <amo_page_fault_2+0xee>
    80017b38:	0000f517          	auipc	a0,0xf
    80017b3c:	3a050513          	addi	a0,a0,928 # 80026ed8 <__func__.0+0x318>
    80017b40:	3c40d0ef          	jal	80024f04 <printf>
    80017b44:	02900513          	li	a0,41
    80017b48:	1c60c0ef          	jal	80023d0e <putchar>
    80017b4c:	4529                	li	a0,10
    80017b4e:	1c00c0ef          	jal	80023d0e <putchar>
    80017b52:	00031497          	auipc	s1,0x31
    80017b56:	4bf4c483          	lbu	s1,1215(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80017b5a:	0000f597          	auipc	a1,0xf
    80017b5e:	33658593          	addi	a1,a1,822 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80017b62:	cc91                	beqz	s1,80017b7e <amo_page_fault_2+0x120>
    80017b64:	6418                	ld	a4,8(s0)
    80017b66:	47bd                	li	a5,15
    TEST_END();
    80017b68:	0000f597          	auipc	a1,0xf
    80017b6c:	31858593          	addi	a1,a1,792 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    80017b70:	00f70763          	beq	a4,a5,80017b7e <amo_page_fault_2+0x120>
    80017b74:	4481                	li	s1,0
    TEST_END();
    80017b76:	0000f597          	auipc	a1,0xf
    80017b7a:	31a58593          	addi	a1,a1,794 # 80026e90 <__func__.0+0x2d0>
    80017b7e:	0000f517          	auipc	a0,0xf
    80017b82:	3ba50513          	addi	a0,a0,954 # 80026f38 <__func__.0+0x378>
    80017b86:	37e0d0ef          	jal	80024f04 <printf>
    80017b8a:	4511                	li	a0,4
    80017b8c:	86ae90ef          	jal	80000bf6 <goto_priv>
    80017b90:	91de90ef          	jal	800014ac <reset_state>
}
    80017b94:	60e2                	ld	ra,24(sp)
    80017b96:	6442                	ld	s0,16(sp)
    80017b98:	8526                	mv	a0,s1
    80017b9a:	64a2                	ld	s1,8(sp)
    80017b9c:	6105                	addi	sp,sp,32
    80017b9e:	8082                	ret

0000000080017ba0 <amo_page_fault_3>:

bool amo_page_fault_3(){
    80017ba0:	1141                	addi	sp,sp,-16

    TEST_START();
    80017ba2:	0000e597          	auipc	a1,0xe
    80017ba6:	38658593          	addi	a1,a1,902 # 80025f28 <__func__.3>
    80017baa:	0000f517          	auipc	a0,0xf
    80017bae:	2f650513          	addi	a0,a0,758 # 80026ea0 <__func__.0+0x2e0>
bool amo_page_fault_3(){
    80017bb2:	e406                	sd	ra,8(sp)
    80017bb4:	e022                	sd	s0,0(sp)
    TEST_START();
    80017bb6:	34e0d0ef          	jal	80024f04 <printf>
    80017bba:	4529                	li	a0,10
    80017bbc:	1520c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80017bc0:	450d                	li	a0,3
    80017bc2:	834e90ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017bc6:	a1be80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017bca:	c59e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017bce:	ae3e80ef          	jal	800006b0 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80017bd2:	4511                	li	a0,4
    80017bd4:	822e90ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80017bd8:	000407b7          	lui	a5,0x40
    80017bdc:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80017be0:	450d                	li	a0,3
    80017be2:	814e90ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);   
    80017be6:	4509                	li	a0,2
    80017be8:	f2fe80ef          	jal	80000b16 <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80017bec:	0330000f          	fence	rw,rw
    80017bf0:	4785                	li	a5,1
    80017bf2:	00031717          	auipc	a4,0x31
    80017bf6:	44073b23          	sd	zero,1110(a4) # 80049048 <excpt+0x38>
    80017bfa:	00031717          	auipc	a4,0x31
    80017bfe:	40f71b23          	sh	a5,1046(a4) # 80049010 <excpt>
    80017c02:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80017c06:	000807b7          	lui	a5,0x80
    80017c0a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017c0c:	4701                	li	a4,0
    80017c0e:	07b6                	slli	a5,a5,0xd
    80017c10:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80017c14:	08200593          	li	a1,130
    80017c18:	00015617          	auipc	a2,0x15
    80017c1c:	8f860613          	addi	a2,a2,-1800 # 8002c510 <__func__.0+0x5950>
    80017c20:	0000f517          	auipc	a0,0xf
    80017c24:	29850513          	addi	a0,a0,664 # 80026eb8 <__func__.0+0x2f8>
    80017c28:	2dc0d0ef          	jal	80024f04 <printf>
    80017c2c:	00031797          	auipc	a5,0x31
    80017c30:	3e57c783          	lbu	a5,997(a5) # 80049011 <excpt+0x1>
    80017c34:	0000f597          	auipc	a1,0xf
    80017c38:	24c58593          	addi	a1,a1,588 # 80026e80 <__func__.0+0x2c0>
    80017c3c:	c789                	beqz	a5,80017c46 <amo_page_fault_3+0xa6>
    80017c3e:	0000f597          	auipc	a1,0xf
    80017c42:	25258593          	addi	a1,a1,594 # 80026e90 <__func__.0+0x2d0>
    80017c46:	0000f517          	auipc	a0,0xf
    80017c4a:	28a50513          	addi	a0,a0,650 # 80026ed0 <__func__.0+0x310>
    80017c4e:	2b60d0ef          	jal	80024f04 <printf>
    80017c52:	00031797          	auipc	a5,0x31
    80017c56:	3bf7c783          	lbu	a5,959(a5) # 80049011 <excpt+0x1>
    80017c5a:	e7a1                	bnez	a5,80017ca2 <amo_page_fault_3+0x102>
    80017c5c:	4529                	li	a0,10
    80017c5e:	0b00c0ef          	jal	80023d0e <putchar>
    80017c62:	00031797          	auipc	a5,0x31
    80017c66:	3af7c783          	lbu	a5,943(a5) # 80049011 <excpt+0x1>
    80017c6a:	e795                	bnez	a5,80017c96 <amo_page_fault_3+0xf6>
    80017c6c:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017c6e:	0000f597          	auipc	a1,0xf
    80017c72:	21258593          	addi	a1,a1,530 # 80026e80 <__func__.0+0x2c0>
    80017c76:	0000f517          	auipc	a0,0xf
    80017c7a:	2c250513          	addi	a0,a0,706 # 80026f38 <__func__.0+0x378>
    80017c7e:	2860d0ef          	jal	80024f04 <printf>
    80017c82:	4511                	li	a0,4
    80017c84:	f73e80ef          	jal	80000bf6 <goto_priv>
    80017c88:	825e90ef          	jal	800014ac <reset_state>
}
    80017c8c:	60a2                	ld	ra,8(sp)
    80017c8e:	8522                	mv	a0,s0
    80017c90:	6402                	ld	s0,0(sp)
    80017c92:	0141                	addi	sp,sp,16
    80017c94:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80017c96:	4401                	li	s0,0
    TEST_END();
    80017c98:	0000f597          	auipc	a1,0xf
    80017c9c:	1f858593          	addi	a1,a1,504 # 80026e90 <__func__.0+0x2d0>
    80017ca0:	bfd9                	j	80017c76 <amo_page_fault_3+0xd6>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80017ca2:	0000f517          	auipc	a0,0xf
    80017ca6:	23650513          	addi	a0,a0,566 # 80026ed8 <__func__.0+0x318>
    80017caa:	25a0d0ef          	jal	80024f04 <printf>
    80017cae:	02900513          	li	a0,41
    80017cb2:	05c0c0ef          	jal	80023d0e <putchar>
    80017cb6:	b75d                	j	80017c5c <amo_page_fault_3+0xbc>

0000000080017cb8 <amo_page_fault_4>:

bool amo_page_fault_4(){
    80017cb8:	1101                	addi	sp,sp,-32

    TEST_START();
    80017cba:	0000e597          	auipc	a1,0xe
    80017cbe:	28658593          	addi	a1,a1,646 # 80025f40 <__func__.2>
    80017cc2:	0000f517          	auipc	a0,0xf
    80017cc6:	1de50513          	addi	a0,a0,478 # 80026ea0 <__func__.0+0x2e0>
bool amo_page_fault_4(){
    80017cca:	ec06                	sd	ra,24(sp)
    80017ccc:	e822                	sd	s0,16(sp)
    80017cce:	e426                	sd	s1,8(sp)
    80017cd0:	e04a                	sd	s2,0(sp)
    TEST_START();
    80017cd2:	2320d0ef          	jal	80024f04 <printf>
    80017cd6:	4529                	li	a0,10
    80017cd8:	0360c0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80017cdc:	450d                	li	a0,3
    80017cde:	f19e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017ce2:	8ffe80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017ce6:	b3de80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017cea:	9c7e80ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80017cee:	4509                	li	a0,2
    80017cf0:	f07e80ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80017cf4:	0330000f          	fence	rw,rw
    80017cf8:	00031917          	auipc	s2,0x31
    80017cfc:	31890913          	addi	s2,s2,792 # 80049010 <excpt>
    80017d00:	4785                	li	a5,1
    80017d02:	00031717          	auipc	a4,0x31
    80017d06:	34073323          	sd	zero,838(a4) # 80049048 <excpt+0x38>
    80017d0a:	00f91023          	sh	a5,0(s2)
    80017d0e:	0330000f          	fence	rw,rw
    80017d12:	deadc7b7          	lui	a5,0xdeadc
    80017d16:	40019737          	lui	a4,0x40019
    80017d1a:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80017d1e:	070a                	slli	a4,a4,0x2
    80017d20:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80017d24:	08200593          	li	a1,130
    80017d28:	00015617          	auipc	a2,0x15
    80017d2c:	83060613          	addi	a2,a2,-2000 # 8002c558 <__func__.0+0x5998>
    80017d30:	0000f517          	auipc	a0,0xf
    80017d34:	18850513          	addi	a0,a0,392 # 80026eb8 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80017d38:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80017d3c:	1c80d0ef          	jal	80024f04 <printf>
    80017d40:	00031797          	auipc	a5,0x31
    80017d44:	2d17c783          	lbu	a5,721(a5) # 80049011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80017d48:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80017d4a:	0000f597          	auipc	a1,0xf
    80017d4e:	14658593          	addi	a1,a1,326 # 80026e90 <__func__.0+0x2d0>
    80017d52:	cf91                	beqz	a5,80017d6e <amo_page_fault_4+0xb6>
    80017d54:	00893703          	ld	a4,8(s2)
    80017d58:	47bd                	li	a5,15
    80017d5a:	0000f597          	auipc	a1,0xf
    80017d5e:	12658593          	addi	a1,a1,294 # 80026e80 <__func__.0+0x2c0>
    80017d62:	00f70663          	beq	a4,a5,80017d6e <amo_page_fault_4+0xb6>
    80017d66:	0000f597          	auipc	a1,0xf
    80017d6a:	12a58593          	addi	a1,a1,298 # 80026e90 <__func__.0+0x2d0>
    80017d6e:	0000f517          	auipc	a0,0xf
    80017d72:	16250513          	addi	a0,a0,354 # 80026ed0 <__func__.0+0x310>
    80017d76:	18e0d0ef          	jal	80024f04 <printf>
    80017d7a:	00031797          	auipc	a5,0x31
    80017d7e:	2977c783          	lbu	a5,663(a5) # 80049011 <excpt+0x1>
    80017d82:	c791                	beqz	a5,80017d8e <amo_page_fault_4+0xd6>
    80017d84:	00893703          	ld	a4,8(s2)
    80017d88:	47bd                	li	a5,15
    80017d8a:	00f70c63          	beq	a4,a5,80017da2 <amo_page_fault_4+0xea>
    80017d8e:	0000f517          	auipc	a0,0xf
    80017d92:	14a50513          	addi	a0,a0,330 # 80026ed8 <__func__.0+0x318>
    80017d96:	16e0d0ef          	jal	80024f04 <printf>
    80017d9a:	02900513          	li	a0,41
    80017d9e:	7710b0ef          	jal	80023d0e <putchar>
    80017da2:	4529                	li	a0,10
    80017da4:	76b0b0ef          	jal	80023d0e <putchar>
    80017da8:	00031797          	auipc	a5,0x31
    80017dac:	2697c783          	lbu	a5,617(a5) # 80049011 <excpt+0x1>
    80017db0:	4481                	li	s1,0
    80017db2:	c791                	beqz	a5,80017dbe <amo_page_fault_4+0x106>
    80017db4:	00893483          	ld	s1,8(s2)
    80017db8:	14c5                	addi	s1,s1,-15
    80017dba:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80017dbe:	0330000f          	fence	rw,rw
    80017dc2:	4785                	li	a5,1
    80017dc4:	00031717          	auipc	a4,0x31
    80017dc8:	28073223          	sd	zero,644(a4) # 80049048 <excpt+0x38>
    80017dcc:	00f91023          	sh	a5,0(s2)
    80017dd0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80017dd4:	000807b7          	lui	a5,0x80
    80017dd8:	0795                	addi	a5,a5,5 # 80005 <_test_table_size+0x80004>
    80017dda:	07b6                	slli	a5,a5,0xd
    80017ddc:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GURWX);

    value = amoand_d(addr,value);

    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80017de0:	08200593          	li	a1,130
    80017de4:	00014617          	auipc	a2,0x14
    80017de8:	7ac60613          	addi	a2,a2,1964 # 8002c590 <__func__.0+0x59d0>
    80017dec:	0000f517          	auipc	a0,0xf
    80017df0:	0cc50513          	addi	a0,a0,204 # 80026eb8 <__func__.0+0x2f8>
    80017df4:	1100d0ef          	jal	80024f04 <printf>
    80017df8:	00031797          	auipc	a5,0x31
    80017dfc:	2197c783          	lbu	a5,537(a5) # 80049011 <excpt+0x1>
    80017e00:	0000f597          	auipc	a1,0xf
    80017e04:	09058593          	addi	a1,a1,144 # 80026e90 <__func__.0+0x2d0>
    80017e08:	cf91                	beqz	a5,80017e24 <amo_page_fault_4+0x16c>
    80017e0a:	00893703          	ld	a4,8(s2)
    80017e0e:	47bd                	li	a5,15
    80017e10:	0000f597          	auipc	a1,0xf
    80017e14:	07058593          	addi	a1,a1,112 # 80026e80 <__func__.0+0x2c0>
    80017e18:	00f70663          	beq	a4,a5,80017e24 <amo_page_fault_4+0x16c>
    80017e1c:	0000f597          	auipc	a1,0xf
    80017e20:	07458593          	addi	a1,a1,116 # 80026e90 <__func__.0+0x2d0>
    80017e24:	0000f517          	auipc	a0,0xf
    80017e28:	0ac50513          	addi	a0,a0,172 # 80026ed0 <__func__.0+0x310>
    80017e2c:	0d80d0ef          	jal	80024f04 <printf>
    80017e30:	00031797          	auipc	a5,0x31
    80017e34:	1e17c783          	lbu	a5,481(a5) # 80049011 <excpt+0x1>
    80017e38:	c791                	beqz	a5,80017e44 <amo_page_fault_4+0x18c>
    80017e3a:	00893703          	ld	a4,8(s2)
    80017e3e:	47bd                	li	a5,15
    80017e40:	00f70c63          	beq	a4,a5,80017e58 <amo_page_fault_4+0x1a0>
    80017e44:	0000f517          	auipc	a0,0xf
    80017e48:	09450513          	addi	a0,a0,148 # 80026ed8 <__func__.0+0x318>
    80017e4c:	0b80d0ef          	jal	80024f04 <printf>
    80017e50:	02900513          	li	a0,41
    80017e54:	6bb0b0ef          	jal	80023d0e <putchar>
    80017e58:	4529                	li	a0,10
    80017e5a:	6b50b0ef          	jal	80023d0e <putchar>
    80017e5e:	c499                	beqz	s1,80017e6c <amo_page_fault_4+0x1b4>
    80017e60:	00031797          	auipc	a5,0x31
    80017e64:	1b17c783          	lbu	a5,433(a5) # 80049011 <excpt+0x1>
    80017e68:	4481                	li	s1,0
    80017e6a:	ebcd                	bnez	a5,80017f1c <amo_page_fault_4+0x264>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80017e6c:	0330000f          	fence	rw,rw
    80017e70:	4785                	li	a5,1
    80017e72:	00031717          	auipc	a4,0x31
    80017e76:	1c073b23          	sd	zero,470(a4) # 80049048 <excpt+0x38>
    80017e7a:	00f91023          	sh	a5,0(s2)
    80017e7e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80017e82:	1782                	slli	a5,a5,0x20
    80017e84:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80017e88:	08200593          	li	a1,130
    80017e8c:	00014617          	auipc	a2,0x14
    80017e90:	73460613          	addi	a2,a2,1844 # 8002c5c0 <__func__.0+0x5a00>
    80017e94:	0000f517          	auipc	a0,0xf
    80017e98:	02450513          	addi	a0,a0,36 # 80026eb8 <__func__.0+0x2f8>
    80017e9c:	0680d0ef          	jal	80024f04 <printf>
    80017ea0:	00031797          	auipc	a5,0x31
    80017ea4:	1717c783          	lbu	a5,369(a5) # 80049011 <excpt+0x1>
    80017ea8:	0000f597          	auipc	a1,0xf
    80017eac:	fe858593          	addi	a1,a1,-24 # 80026e90 <__func__.0+0x2d0>
    80017eb0:	e789                	bnez	a5,80017eba <amo_page_fault_4+0x202>
    80017eb2:	0000f597          	auipc	a1,0xf
    80017eb6:	fce58593          	addi	a1,a1,-50 # 80026e80 <__func__.0+0x2c0>
    80017eba:	0000f517          	auipc	a0,0xf
    80017ebe:	01650513          	addi	a0,a0,22 # 80026ed0 <__func__.0+0x310>
    80017ec2:	0420d0ef          	jal	80024f04 <printf>
    80017ec6:	00031797          	auipc	a5,0x31
    80017eca:	14b7c783          	lbu	a5,331(a5) # 80049011 <excpt+0x1>
    80017ece:	efa9                	bnez	a5,80017f28 <amo_page_fault_4+0x270>
    80017ed0:	4529                	li	a0,10
    80017ed2:	63d0b0ef          	jal	80023d0e <putchar>
    80017ed6:	c491                	beqz	s1,80017ee2 <amo_page_fault_4+0x22a>
    80017ed8:	00031797          	auipc	a5,0x31
    80017edc:	1397c783          	lbu	a5,313(a5) # 80049011 <excpt+0x1>
    80017ee0:	cb85                	beqz	a5,80017f10 <amo_page_fault_4+0x258>
    80017ee2:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80017ee4:	0000f597          	auipc	a1,0xf
    80017ee8:	fac58593          	addi	a1,a1,-84 # 80026e90 <__func__.0+0x2d0>
    80017eec:	0000f517          	auipc	a0,0xf
    80017ef0:	04c50513          	addi	a0,a0,76 # 80026f38 <__func__.0+0x378>
    80017ef4:	0100d0ef          	jal	80024f04 <printf>
    80017ef8:	4511                	li	a0,4
    80017efa:	cfde80ef          	jal	80000bf6 <goto_priv>
    80017efe:	daee90ef          	jal	800014ac <reset_state>
}
    80017f02:	60e2                	ld	ra,24(sp)
    80017f04:	8522                	mv	a0,s0
    80017f06:	6442                	ld	s0,16(sp)
    80017f08:	64a2                	ld	s1,8(sp)
    80017f0a:	6902                	ld	s2,0(sp)
    80017f0c:	6105                	addi	sp,sp,32
    80017f0e:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80017f10:	4405                	li	s0,1
    TEST_END();
    80017f12:	0000f597          	auipc	a1,0xf
    80017f16:	f6e58593          	addi	a1,a1,-146 # 80026e80 <__func__.0+0x2c0>
    80017f1a:	bfc9                	j	80017eec <amo_page_fault_4+0x234>
    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80017f1c:	00893483          	ld	s1,8(s2)
    80017f20:	14c5                	addi	s1,s1,-15
    80017f22:	0014b493          	seqz	s1,s1
    80017f26:	b799                	j	80017e6c <amo_page_fault_4+0x1b4>
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80017f28:	0000f517          	auipc	a0,0xf
    80017f2c:	fb050513          	addi	a0,a0,-80 # 80026ed8 <__func__.0+0x318>
    80017f30:	7d50c0ef          	jal	80024f04 <printf>
    80017f34:	02900513          	li	a0,41
    80017f38:	5d70b0ef          	jal	80023d0e <putchar>
    80017f3c:	bf51                	j	80017ed0 <amo_page_fault_4+0x218>

0000000080017f3e <amo_page_fault_5>:

bool amo_page_fault_5(){
    80017f3e:	1101                	addi	sp,sp,-32

    TEST_START();
    80017f40:	0000e597          	auipc	a1,0xe
    80017f44:	01858593          	addi	a1,a1,24 # 80025f58 <__func__.1>
    80017f48:	0000f517          	auipc	a0,0xf
    80017f4c:	f5850513          	addi	a0,a0,-168 # 80026ea0 <__func__.0+0x2e0>
bool amo_page_fault_5(){
    80017f50:	ec06                	sd	ra,24(sp)
    80017f52:	e822                	sd	s0,16(sp)
    80017f54:	e426                	sd	s1,8(sp)
    TEST_START();
    80017f56:	7af0c0ef          	jal	80024f04 <printf>
    80017f5a:	4529                	li	a0,10
    80017f5c:	5b30b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80017f60:	450d                	li	a0,3
    80017f62:	c95e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80017f66:	e7ae80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017f6a:	8b9e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    80017f6e:	f42e80ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80017f72:	4511                	li	a0,4
    80017f74:	c83e80ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017f78:	000407b7          	lui	a5,0x40
    80017f7c:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80017f80:	4509                	li	a0,2
    80017f82:	c75e80ef          	jal	80000bf6 <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80017f86:	0330000f          	fence	rw,rw
    80017f8a:	00031417          	auipc	s0,0x31
    80017f8e:	08640413          	addi	s0,s0,134 # 80049010 <excpt>
    80017f92:	4785                	li	a5,1
    80017f94:	00031717          	auipc	a4,0x31
    80017f98:	0a073a23          	sd	zero,180(a4) # 80049048 <excpt+0x38>
    80017f9c:	00f41023          	sh	a5,0(s0)
    80017fa0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80017fa4:	000807b7          	lui	a5,0x80
    80017fa8:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017faa:	4701                	li	a4,0
    80017fac:	07b6                	slli	a5,a5,0xd
    80017fae:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80017fb2:	08200593          	li	a1,130
    80017fb6:	00014617          	auipc	a2,0x14
    80017fba:	64260613          	addi	a2,a2,1602 # 8002c5f8 <__func__.0+0x5a38>
    80017fbe:	0000f517          	auipc	a0,0xf
    80017fc2:	efa50513          	addi	a0,a0,-262 # 80026eb8 <__func__.0+0x2f8>
    80017fc6:	73f0c0ef          	jal	80024f04 <printf>
    80017fca:	00031797          	auipc	a5,0x31
    80017fce:	0477c783          	lbu	a5,71(a5) # 80049011 <excpt+0x1>
    80017fd2:	0000f597          	auipc	a1,0xf
    80017fd6:	ebe58593          	addi	a1,a1,-322 # 80026e90 <__func__.0+0x2d0>
    80017fda:	cf89                	beqz	a5,80017ff4 <amo_page_fault_5+0xb6>
    80017fdc:	6418                	ld	a4,8(s0)
    80017fde:	47bd                	li	a5,15
    80017fe0:	0000f597          	auipc	a1,0xf
    80017fe4:	ea058593          	addi	a1,a1,-352 # 80026e80 <__func__.0+0x2c0>
    80017fe8:	00f70663          	beq	a4,a5,80017ff4 <amo_page_fault_5+0xb6>
    80017fec:	0000f597          	auipc	a1,0xf
    80017ff0:	ea458593          	addi	a1,a1,-348 # 80026e90 <__func__.0+0x2d0>
    80017ff4:	0000f517          	auipc	a0,0xf
    80017ff8:	edc50513          	addi	a0,a0,-292 # 80026ed0 <__func__.0+0x310>
    80017ffc:	7090c0ef          	jal	80024f04 <printf>
    80018000:	00031797          	auipc	a5,0x31
    80018004:	0117c783          	lbu	a5,17(a5) # 80049011 <excpt+0x1>
    80018008:	c789                	beqz	a5,80018012 <amo_page_fault_5+0xd4>
    8001800a:	6418                	ld	a4,8(s0)
    8001800c:	47bd                	li	a5,15
    8001800e:	00f70c63          	beq	a4,a5,80018026 <amo_page_fault_5+0xe8>
    80018012:	0000f517          	auipc	a0,0xf
    80018016:	ec650513          	addi	a0,a0,-314 # 80026ed8 <__func__.0+0x318>
    8001801a:	6eb0c0ef          	jal	80024f04 <printf>
    8001801e:	02900513          	li	a0,41
    80018022:	4ed0b0ef          	jal	80023d0e <putchar>
    80018026:	4529                	li	a0,10
    80018028:	4e70b0ef          	jal	80023d0e <putchar>
    8001802c:	00031497          	auipc	s1,0x31
    80018030:	fe54c483          	lbu	s1,-27(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80018034:	0000f597          	auipc	a1,0xf
    80018038:	e5c58593          	addi	a1,a1,-420 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    8001803c:	cc91                	beqz	s1,80018058 <amo_page_fault_5+0x11a>
    8001803e:	6418                	ld	a4,8(s0)
    80018040:	47bd                	li	a5,15
    TEST_END();
    80018042:	0000f597          	auipc	a1,0xf
    80018046:	e3e58593          	addi	a1,a1,-450 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    8001804a:	00f70763          	beq	a4,a5,80018058 <amo_page_fault_5+0x11a>
    8001804e:	4481                	li	s1,0
    TEST_END();
    80018050:	0000f597          	auipc	a1,0xf
    80018054:	e4058593          	addi	a1,a1,-448 # 80026e90 <__func__.0+0x2d0>
    80018058:	0000f517          	auipc	a0,0xf
    8001805c:	ee050513          	addi	a0,a0,-288 # 80026f38 <__func__.0+0x378>
    80018060:	6a50c0ef          	jal	80024f04 <printf>
    80018064:	4511                	li	a0,4
    80018066:	b91e80ef          	jal	80000bf6 <goto_priv>
    8001806a:	c42e90ef          	jal	800014ac <reset_state>
}
    8001806e:	60e2                	ld	ra,24(sp)
    80018070:	6442                	ld	s0,16(sp)
    80018072:	8526                	mv	a0,s1
    80018074:	64a2                	ld	s1,8(sp)
    80018076:	6105                	addi	sp,sp,32
    80018078:	8082                	ret

000000008001807a <amo_page_fault_6>:

bool amo_page_fault_6(){
    8001807a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001807c:	0000e597          	auipc	a1,0xe
    80018080:	ef458593          	addi	a1,a1,-268 # 80025f70 <__func__.0>
    80018084:	0000f517          	auipc	a0,0xf
    80018088:	e1c50513          	addi	a0,a0,-484 # 80026ea0 <__func__.0+0x2e0>
bool amo_page_fault_6(){
    8001808c:	e406                	sd	ra,8(sp)
    8001808e:	e022                	sd	s0,0(sp)
    TEST_START();
    80018090:	6750c0ef          	jal	80024f04 <printf>
    80018094:	4529                	li	a0,10
    80018096:	4790b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001809a:	450d                	li	a0,3
    8001809c:	b5be80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800180a0:	d40e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800180a4:	f7ee80ef          	jal	80000822 <hpt_init>
    vspt_init();
    800180a8:	e08e80ef          	jal	800006b0 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800180ac:	4511                	li	a0,4
    800180ae:	b49e80ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800180b2:	000407b7          	lui	a5,0x40
    800180b6:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    800180ba:	4509                	li	a0,2
    800180bc:	b3be80ef          	jal	80000bf6 <goto_priv>
    
    TEST_SETUP_EXCEPT();
    800180c0:	0330000f          	fence	rw,rw
    800180c4:	4785                	li	a5,1
    800180c6:	00031717          	auipc	a4,0x31
    800180ca:	f8073123          	sd	zero,-126(a4) # 80049048 <excpt+0x38>
    800180ce:	00031717          	auipc	a4,0x31
    800180d2:	f4f71123          	sh	a5,-190(a4) # 80049010 <excpt>
    800180d6:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    800180da:	000807b7          	lui	a5,0x80
    800180de:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800180e0:	4701                	li	a4,0
    800180e2:	07b6                	slli	a5,a5,0xd
    800180e4:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    800180e8:	08200593          	li	a1,130
    800180ec:	00014617          	auipc	a2,0x14
    800180f0:	55c60613          	addi	a2,a2,1372 # 8002c648 <__func__.0+0x5a88>
    800180f4:	0000f517          	auipc	a0,0xf
    800180f8:	dc450513          	addi	a0,a0,-572 # 80026eb8 <__func__.0+0x2f8>
    800180fc:	6090c0ef          	jal	80024f04 <printf>
    80018100:	00031797          	auipc	a5,0x31
    80018104:	f117c783          	lbu	a5,-239(a5) # 80049011 <excpt+0x1>
    80018108:	0000f597          	auipc	a1,0xf
    8001810c:	d7858593          	addi	a1,a1,-648 # 80026e80 <__func__.0+0x2c0>
    80018110:	c789                	beqz	a5,8001811a <amo_page_fault_6+0xa0>
    80018112:	0000f597          	auipc	a1,0xf
    80018116:	d7e58593          	addi	a1,a1,-642 # 80026e90 <__func__.0+0x2d0>
    8001811a:	0000f517          	auipc	a0,0xf
    8001811e:	db650513          	addi	a0,a0,-586 # 80026ed0 <__func__.0+0x310>
    80018122:	5e30c0ef          	jal	80024f04 <printf>
    80018126:	00031797          	auipc	a5,0x31
    8001812a:	eeb7c783          	lbu	a5,-277(a5) # 80049011 <excpt+0x1>
    8001812e:	e7a1                	bnez	a5,80018176 <amo_page_fault_6+0xfc>
    80018130:	4529                	li	a0,10
    80018132:	3dd0b0ef          	jal	80023d0e <putchar>
    80018136:	00031797          	auipc	a5,0x31
    8001813a:	edb7c783          	lbu	a5,-293(a5) # 80049011 <excpt+0x1>
    8001813e:	e795                	bnez	a5,8001816a <amo_page_fault_6+0xf0>
    80018140:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018142:	0000f597          	auipc	a1,0xf
    80018146:	d3e58593          	addi	a1,a1,-706 # 80026e80 <__func__.0+0x2c0>
    8001814a:	0000f517          	auipc	a0,0xf
    8001814e:	dee50513          	addi	a0,a0,-530 # 80026f38 <__func__.0+0x378>
    80018152:	5b30c0ef          	jal	80024f04 <printf>
    80018156:	4511                	li	a0,4
    80018158:	a9fe80ef          	jal	80000bf6 <goto_priv>
    8001815c:	b50e90ef          	jal	800014ac <reset_state>
}
    80018160:	60a2                	ld	ra,8(sp)
    80018162:	8522                	mv	a0,s0
    80018164:	6402                	ld	s0,0(sp)
    80018166:	0141                	addi	sp,sp,16
    80018168:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    8001816a:	4401                	li	s0,0
    TEST_END();
    8001816c:	0000f597          	auipc	a1,0xf
    80018170:	d2458593          	addi	a1,a1,-732 # 80026e90 <__func__.0+0x2d0>
    80018174:	bfd9                	j	8001814a <amo_page_fault_6+0xd0>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80018176:	0000f517          	auipc	a0,0xf
    8001817a:	d6250513          	addi	a0,a0,-670 # 80026ed8 <__func__.0+0x318>
    8001817e:	5870c0ef          	jal	80024f04 <printf>
    80018182:	02900513          	li	a0,41
    80018186:	3890b0ef          	jal	80023d0e <putchar>
    8001818a:	b75d                	j	80018130 <amo_page_fault_6+0xb6>

000000008001818c <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    8001818c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001818e:	0000e597          	auipc	a1,0xe
    80018192:	dfa58593          	addi	a1,a1,-518 # 80025f88 <__func__.37>
    80018196:	0000f517          	auipc	a0,0xf
    8001819a:	d0a50513          	addi	a0,a0,-758 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_1(){
    8001819e:	ec06                	sd	ra,24(sp)
    800181a0:	e822                	sd	s0,16(sp)
    800181a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800181a4:	5610c0ef          	jal	80024f04 <printf>
    800181a8:	4529                	li	a0,10
    800181aa:	3650b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800181ae:	450d                	li	a0,3
    800181b0:	a47e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800181b4:	c2ce80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800181b8:	e6ae80ef          	jal	80000822 <hpt_init>
    vspt_init();
    800181bc:	cf4e80ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800181c0:	450d                	li	a0,3
    800181c2:	a35e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800181c6:	4509                	li	a0,2
    800181c8:	94fe80ef          	jal	80000b16 <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800181cc:	0330000f          	fence	rw,rw
    800181d0:	00031417          	auipc	s0,0x31
    800181d4:	e4040413          	addi	s0,s0,-448 # 80049010 <excpt>
    800181d8:	4785                	li	a5,1
    800181da:	00031717          	auipc	a4,0x31
    800181de:	e6073723          	sd	zero,-402(a4) # 80049048 <excpt+0x38>
    800181e2:	00f41023          	sh	a5,0(s0)
    800181e6:	0330000f          	fence	rw,rw
    asm volatile(
    800181ea:	001007b7          	lui	a5,0x100
    800181ee:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800181f2:	07b2                	slli	a5,a5,0xc
    800181f4:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    800181f8:	08200593          	li	a1,130
    800181fc:	00014617          	auipc	a2,0x14
    80018200:	49460613          	addi	a2,a2,1172 # 8002c690 <__func__.0+0x5ad0>
    80018204:	0000f517          	auipc	a0,0xf
    80018208:	cb450513          	addi	a0,a0,-844 # 80026eb8 <__func__.0+0x2f8>
    8001820c:	4f90c0ef          	jal	80024f04 <printf>
    80018210:	00031797          	auipc	a5,0x31
    80018214:	e017c783          	lbu	a5,-511(a5) # 80049011 <excpt+0x1>
    80018218:	0000f597          	auipc	a1,0xf
    8001821c:	c7858593          	addi	a1,a1,-904 # 80026e90 <__func__.0+0x2d0>
    80018220:	cf89                	beqz	a5,8001823a <load_guest_page_fault_1+0xae>
    80018222:	6418                	ld	a4,8(s0)
    80018224:	47d5                	li	a5,21
    80018226:	0000f597          	auipc	a1,0xf
    8001822a:	c5a58593          	addi	a1,a1,-934 # 80026e80 <__func__.0+0x2c0>
    8001822e:	00f70663          	beq	a4,a5,8001823a <load_guest_page_fault_1+0xae>
    80018232:	0000f597          	auipc	a1,0xf
    80018236:	c5e58593          	addi	a1,a1,-930 # 80026e90 <__func__.0+0x2d0>
    8001823a:	0000f517          	auipc	a0,0xf
    8001823e:	c9650513          	addi	a0,a0,-874 # 80026ed0 <__func__.0+0x310>
    80018242:	4c30c0ef          	jal	80024f04 <printf>
    80018246:	00031797          	auipc	a5,0x31
    8001824a:	dcb7c783          	lbu	a5,-565(a5) # 80049011 <excpt+0x1>
    8001824e:	c789                	beqz	a5,80018258 <load_guest_page_fault_1+0xcc>
    80018250:	6418                	ld	a4,8(s0)
    80018252:	47d5                	li	a5,21
    80018254:	00f70c63          	beq	a4,a5,8001826c <load_guest_page_fault_1+0xe0>
    80018258:	0000f517          	auipc	a0,0xf
    8001825c:	c8050513          	addi	a0,a0,-896 # 80026ed8 <__func__.0+0x318>
    80018260:	4a50c0ef          	jal	80024f04 <printf>
    80018264:	02900513          	li	a0,41
    80018268:	2a70b0ef          	jal	80023d0e <putchar>
    8001826c:	4529                	li	a0,10
    8001826e:	2a10b0ef          	jal	80023d0e <putchar>
    80018272:	00031797          	auipc	a5,0x31
    80018276:	d9f7c783          	lbu	a5,-609(a5) # 80049011 <excpt+0x1>
    8001827a:	4481                	li	s1,0
    8001827c:	c789                	beqz	a5,80018286 <load_guest_page_fault_1+0xfa>
    8001827e:	6404                	ld	s1,8(s0)
    80018280:	14ad                	addi	s1,s1,-21
    80018282:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018286:	0330000f          	fence	rw,rw
    8001828a:	4785                	li	a5,1
    8001828c:	00031717          	auipc	a4,0x31
    80018290:	da073e23          	sd	zero,-580(a4) # 80049048 <excpt+0x38>
    80018294:	00f41023          	sh	a5,0(s0)
    80018298:	0330000f          	fence	rw,rw
    asm volatile(
    8001829c:	001007b7          	lui	a5,0x100
    800182a0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800182a4:	07b2                	slli	a5,a5,0xc
    800182a6:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800182aa:	08200593          	li	a1,130
    800182ae:	00014617          	auipc	a2,0x14
    800182b2:	43260613          	addi	a2,a2,1074 # 8002c6e0 <__func__.0+0x5b20>
    800182b6:	0000f517          	auipc	a0,0xf
    800182ba:	c0250513          	addi	a0,a0,-1022 # 80026eb8 <__func__.0+0x2f8>
    800182be:	4470c0ef          	jal	80024f04 <printf>
    800182c2:	00031797          	auipc	a5,0x31
    800182c6:	d4f7c783          	lbu	a5,-689(a5) # 80049011 <excpt+0x1>
    800182ca:	0000f597          	auipc	a1,0xf
    800182ce:	bc658593          	addi	a1,a1,-1082 # 80026e90 <__func__.0+0x2d0>
    800182d2:	cf89                	beqz	a5,800182ec <load_guest_page_fault_1+0x160>
    800182d4:	6418                	ld	a4,8(s0)
    800182d6:	47d5                	li	a5,21
    800182d8:	0000f597          	auipc	a1,0xf
    800182dc:	ba858593          	addi	a1,a1,-1112 # 80026e80 <__func__.0+0x2c0>
    800182e0:	00f70663          	beq	a4,a5,800182ec <load_guest_page_fault_1+0x160>
    800182e4:	0000f597          	auipc	a1,0xf
    800182e8:	bac58593          	addi	a1,a1,-1108 # 80026e90 <__func__.0+0x2d0>
    800182ec:	0000f517          	auipc	a0,0xf
    800182f0:	be450513          	addi	a0,a0,-1052 # 80026ed0 <__func__.0+0x310>
    800182f4:	4110c0ef          	jal	80024f04 <printf>
    800182f8:	00031797          	auipc	a5,0x31
    800182fc:	d197c783          	lbu	a5,-743(a5) # 80049011 <excpt+0x1>
    80018300:	c789                	beqz	a5,8001830a <load_guest_page_fault_1+0x17e>
    80018302:	6418                	ld	a4,8(s0)
    80018304:	47d5                	li	a5,21
    80018306:	00f70c63          	beq	a4,a5,8001831e <load_guest_page_fault_1+0x192>
    8001830a:	0000f517          	auipc	a0,0xf
    8001830e:	bce50513          	addi	a0,a0,-1074 # 80026ed8 <__func__.0+0x318>
    80018312:	3f30c0ef          	jal	80024f04 <printf>
    80018316:	02900513          	li	a0,41
    8001831a:	1f50b0ef          	jal	80023d0e <putchar>
    8001831e:	4529                	li	a0,10
    80018320:	1ef0b0ef          	jal	80023d0e <putchar>
    80018324:	c095                	beqz	s1,80018348 <load_guest_page_fault_1+0x1bc>
    80018326:	00031497          	auipc	s1,0x31
    8001832a:	ceb4c483          	lbu	s1,-789(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001832e:	0000f597          	auipc	a1,0xf
    80018332:	b6258593          	addi	a1,a1,-1182 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80018336:	cc91                	beqz	s1,80018352 <load_guest_page_fault_1+0x1c6>
    80018338:	6418                	ld	a4,8(s0)
    8001833a:	47d5                	li	a5,21
    TEST_END();
    8001833c:	0000f597          	auipc	a1,0xf
    80018340:	b4458593          	addi	a1,a1,-1212 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80018344:	00f70763          	beq	a4,a5,80018352 <load_guest_page_fault_1+0x1c6>
    80018348:	4481                	li	s1,0
    TEST_END();
    8001834a:	0000f597          	auipc	a1,0xf
    8001834e:	b4658593          	addi	a1,a1,-1210 # 80026e90 <__func__.0+0x2d0>
    80018352:	0000f517          	auipc	a0,0xf
    80018356:	be650513          	addi	a0,a0,-1050 # 80026f38 <__func__.0+0x378>
    8001835a:	3ab0c0ef          	jal	80024f04 <printf>
    8001835e:	4511                	li	a0,4
    80018360:	897e80ef          	jal	80000bf6 <goto_priv>
    80018364:	948e90ef          	jal	800014ac <reset_state>
}
    80018368:	60e2                	ld	ra,24(sp)
    8001836a:	6442                	ld	s0,16(sp)
    8001836c:	8526                	mv	a0,s1
    8001836e:	64a2                	ld	s1,8(sp)
    80018370:	6105                	addi	sp,sp,32
    80018372:	8082                	ret

0000000080018374 <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    80018374:	1101                	addi	sp,sp,-32

    TEST_START();
    80018376:	0000e597          	auipc	a1,0xe
    8001837a:	c2a58593          	addi	a1,a1,-982 # 80025fa0 <__func__.35>
    8001837e:	0000f517          	auipc	a0,0xf
    80018382:	b2250513          	addi	a0,a0,-1246 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_2(){
    80018386:	ec06                	sd	ra,24(sp)
    80018388:	e822                	sd	s0,16(sp)
    8001838a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001838c:	3790c0ef          	jal	80024f04 <printf>
    80018390:	4529                	li	a0,10
    80018392:	17d0b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80018396:	450d                	li	a0,3
    80018398:	85fe80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001839c:	a44e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800183a0:	c82e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    800183a4:	b0ce80ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800183a8:	450d                	li	a0,3
    800183aa:	84de80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800183ae:	4509                	li	a0,2
    800183b0:	f66e80ef          	jal	80000b16 <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800183b4:	0330000f          	fence	rw,rw
    800183b8:	00031417          	auipc	s0,0x31
    800183bc:	c5840413          	addi	s0,s0,-936 # 80049010 <excpt>
    800183c0:	4785                	li	a5,1
    800183c2:	00031717          	auipc	a4,0x31
    800183c6:	c8073323          	sd	zero,-890(a4) # 80049048 <excpt+0x38>
    800183ca:	00f41023          	sh	a5,0(s0)
    800183ce:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800183d2:	000807b7          	lui	a5,0x80
    800183d6:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800183da:	001007b7          	lui	a5,0x100
    800183de:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800183e2:	07b2                	slli	a5,a5,0xc
    800183e4:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800183e8:	08200593          	li	a1,130
    800183ec:	00014617          	auipc	a2,0x14
    800183f0:	35460613          	addi	a2,a2,852 # 8002c740 <__func__.0+0x5b80>
    800183f4:	0000f517          	auipc	a0,0xf
    800183f8:	ac450513          	addi	a0,a0,-1340 # 80026eb8 <__func__.0+0x2f8>
    800183fc:	3090c0ef          	jal	80024f04 <printf>
    80018400:	00031797          	auipc	a5,0x31
    80018404:	c117c783          	lbu	a5,-1007(a5) # 80049011 <excpt+0x1>
    80018408:	0000f597          	auipc	a1,0xf
    8001840c:	a8858593          	addi	a1,a1,-1400 # 80026e90 <__func__.0+0x2d0>
    80018410:	cf89                	beqz	a5,8001842a <load_guest_page_fault_2+0xb6>
    80018412:	6418                	ld	a4,8(s0)
    80018414:	47d5                	li	a5,21
    80018416:	0000f597          	auipc	a1,0xf
    8001841a:	a6a58593          	addi	a1,a1,-1430 # 80026e80 <__func__.0+0x2c0>
    8001841e:	00f70663          	beq	a4,a5,8001842a <load_guest_page_fault_2+0xb6>
    80018422:	0000f597          	auipc	a1,0xf
    80018426:	a6e58593          	addi	a1,a1,-1426 # 80026e90 <__func__.0+0x2d0>
    8001842a:	0000f517          	auipc	a0,0xf
    8001842e:	aa650513          	addi	a0,a0,-1370 # 80026ed0 <__func__.0+0x310>
    80018432:	2d30c0ef          	jal	80024f04 <printf>
    80018436:	00031797          	auipc	a5,0x31
    8001843a:	bdb7c783          	lbu	a5,-1061(a5) # 80049011 <excpt+0x1>
    8001843e:	c789                	beqz	a5,80018448 <load_guest_page_fault_2+0xd4>
    80018440:	6418                	ld	a4,8(s0)
    80018442:	47d5                	li	a5,21
    80018444:	00f70c63          	beq	a4,a5,8001845c <load_guest_page_fault_2+0xe8>
    80018448:	0000f517          	auipc	a0,0xf
    8001844c:	a9050513          	addi	a0,a0,-1392 # 80026ed8 <__func__.0+0x318>
    80018450:	2b50c0ef          	jal	80024f04 <printf>
    80018454:	02900513          	li	a0,41
    80018458:	0b70b0ef          	jal	80023d0e <putchar>
    8001845c:	4529                	li	a0,10
    8001845e:	0b10b0ef          	jal	80023d0e <putchar>
    80018462:	00031497          	auipc	s1,0x31
    80018466:	baf4c483          	lbu	s1,-1105(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001846a:	0000f597          	auipc	a1,0xf
    8001846e:	a2658593          	addi	a1,a1,-1498 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018472:	cc91                	beqz	s1,8001848e <load_guest_page_fault_2+0x11a>
    80018474:	6418                	ld	a4,8(s0)
    80018476:	47d5                	li	a5,21
    TEST_END();
    80018478:	0000f597          	auipc	a1,0xf
    8001847c:	a0858593          	addi	a1,a1,-1528 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018480:	00f70763          	beq	a4,a5,8001848e <load_guest_page_fault_2+0x11a>
    80018484:	4481                	li	s1,0
    TEST_END();
    80018486:	0000f597          	auipc	a1,0xf
    8001848a:	a0a58593          	addi	a1,a1,-1526 # 80026e90 <__func__.0+0x2d0>
    8001848e:	0000f517          	auipc	a0,0xf
    80018492:	aaa50513          	addi	a0,a0,-1366 # 80026f38 <__func__.0+0x378>
    80018496:	26f0c0ef          	jal	80024f04 <printf>
    8001849a:	4511                	li	a0,4
    8001849c:	f5ae80ef          	jal	80000bf6 <goto_priv>
    800184a0:	80ce90ef          	jal	800014ac <reset_state>
}
    800184a4:	60e2                	ld	ra,24(sp)
    800184a6:	6442                	ld	s0,16(sp)
    800184a8:	8526                	mv	a0,s1
    800184aa:	64a2                	ld	s1,8(sp)
    800184ac:	6105                	addi	sp,sp,32
    800184ae:	8082                	ret

00000000800184b0 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    800184b0:	1101                	addi	sp,sp,-32

    TEST_START();
    800184b2:	0000e597          	auipc	a1,0xe
    800184b6:	b0658593          	addi	a1,a1,-1274 # 80025fb8 <__func__.34>
    800184ba:	0000f517          	auipc	a0,0xf
    800184be:	9e650513          	addi	a0,a0,-1562 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_3(){
    800184c2:	ec06                	sd	ra,24(sp)
    800184c4:	e822                	sd	s0,16(sp)
    800184c6:	e426                	sd	s1,8(sp)
    TEST_START();
    800184c8:	23d0c0ef          	jal	80024f04 <printf>
    800184cc:	4529                	li	a0,10
    800184ce:	0410b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800184d2:	450d                	li	a0,3
    800184d4:	f22e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800184d8:	908e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800184dc:	b46e80ef          	jal	80000822 <hpt_init>
    vspt_init();
    800184e0:	9d0e80ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800184e4:	450d                	li	a0,3
    800184e6:	f10e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800184ea:	4509                	li	a0,2
    800184ec:	e2ae80ef          	jal	80000b16 <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800184f0:	0330000f          	fence	rw,rw
    800184f4:	00031417          	auipc	s0,0x31
    800184f8:	b1c40413          	addi	s0,s0,-1252 # 80049010 <excpt>
    800184fc:	4785                	li	a5,1
    800184fe:	00031717          	auipc	a4,0x31
    80018502:	b4073523          	sd	zero,-1206(a4) # 80049048 <excpt+0x38>
    80018506:	00f41023          	sh	a5,0(s0)
    8001850a:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001850e:	000807b7          	lui	a5,0x80
    80018512:	1007a073          	csrs	sstatus,a5
    80018516:	001007b7          	lui	a5,0x100
    8001851a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001851e:	07b2                	slli	a5,a5,0xc
    80018520:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018524:	08200593          	li	a1,130
    80018528:	00014617          	auipc	a2,0x14
    8001852c:	27860613          	addi	a2,a2,632 # 8002c7a0 <__func__.0+0x5be0>
    80018530:	0000f517          	auipc	a0,0xf
    80018534:	98850513          	addi	a0,a0,-1656 # 80026eb8 <__func__.0+0x2f8>
    80018538:	1cd0c0ef          	jal	80024f04 <printf>
    8001853c:	00031797          	auipc	a5,0x31
    80018540:	ad57c783          	lbu	a5,-1323(a5) # 80049011 <excpt+0x1>
    80018544:	0000f597          	auipc	a1,0xf
    80018548:	94c58593          	addi	a1,a1,-1716 # 80026e90 <__func__.0+0x2d0>
    8001854c:	cf89                	beqz	a5,80018566 <load_guest_page_fault_3+0xb6>
    8001854e:	6418                	ld	a4,8(s0)
    80018550:	47d5                	li	a5,21
    80018552:	0000f597          	auipc	a1,0xf
    80018556:	92e58593          	addi	a1,a1,-1746 # 80026e80 <__func__.0+0x2c0>
    8001855a:	00f70663          	beq	a4,a5,80018566 <load_guest_page_fault_3+0xb6>
    8001855e:	0000f597          	auipc	a1,0xf
    80018562:	93258593          	addi	a1,a1,-1742 # 80026e90 <__func__.0+0x2d0>
    80018566:	0000f517          	auipc	a0,0xf
    8001856a:	96a50513          	addi	a0,a0,-1686 # 80026ed0 <__func__.0+0x310>
    8001856e:	1970c0ef          	jal	80024f04 <printf>
    80018572:	00031797          	auipc	a5,0x31
    80018576:	a9f7c783          	lbu	a5,-1377(a5) # 80049011 <excpt+0x1>
    8001857a:	c789                	beqz	a5,80018584 <load_guest_page_fault_3+0xd4>
    8001857c:	6418                	ld	a4,8(s0)
    8001857e:	47d5                	li	a5,21
    80018580:	00f70c63          	beq	a4,a5,80018598 <load_guest_page_fault_3+0xe8>
    80018584:	0000f517          	auipc	a0,0xf
    80018588:	95450513          	addi	a0,a0,-1708 # 80026ed8 <__func__.0+0x318>
    8001858c:	1790c0ef          	jal	80024f04 <printf>
    80018590:	02900513          	li	a0,41
    80018594:	77a0b0ef          	jal	80023d0e <putchar>
    80018598:	4529                	li	a0,10
    8001859a:	7740b0ef          	jal	80023d0e <putchar>
    8001859e:	00031497          	auipc	s1,0x31
    800185a2:	a734c483          	lbu	s1,-1421(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    800185a6:	0000f597          	auipc	a1,0xf
    800185aa:	8ea58593          	addi	a1,a1,-1814 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800185ae:	cc91                	beqz	s1,800185ca <load_guest_page_fault_3+0x11a>
    800185b0:	6418                	ld	a4,8(s0)
    800185b2:	47d5                	li	a5,21
    TEST_END();
    800185b4:	0000f597          	auipc	a1,0xf
    800185b8:	8cc58593          	addi	a1,a1,-1844 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800185bc:	00f70763          	beq	a4,a5,800185ca <load_guest_page_fault_3+0x11a>
    800185c0:	4481                	li	s1,0
    TEST_END();
    800185c2:	0000f597          	auipc	a1,0xf
    800185c6:	8ce58593          	addi	a1,a1,-1842 # 80026e90 <__func__.0+0x2d0>
    800185ca:	0000f517          	auipc	a0,0xf
    800185ce:	96e50513          	addi	a0,a0,-1682 # 80026f38 <__func__.0+0x378>
    800185d2:	1330c0ef          	jal	80024f04 <printf>
    800185d6:	4511                	li	a0,4
    800185d8:	e1ee80ef          	jal	80000bf6 <goto_priv>
    800185dc:	ed1e80ef          	jal	800014ac <reset_state>
}
    800185e0:	60e2                	ld	ra,24(sp)
    800185e2:	6442                	ld	s0,16(sp)
    800185e4:	8526                	mv	a0,s1
    800185e6:	64a2                	ld	s1,8(sp)
    800185e8:	6105                	addi	sp,sp,32
    800185ea:	8082                	ret

00000000800185ec <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    800185ec:	1101                	addi	sp,sp,-32

    TEST_START();
    800185ee:	0000e597          	auipc	a1,0xe
    800185f2:	9e258593          	addi	a1,a1,-1566 # 80025fd0 <__func__.33>
    800185f6:	0000f517          	auipc	a0,0xf
    800185fa:	8aa50513          	addi	a0,a0,-1878 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_4(){
    800185fe:	ec06                	sd	ra,24(sp)
    80018600:	e822                	sd	s0,16(sp)
    80018602:	e426                	sd	s1,8(sp)
    TEST_START();
    80018604:	1010c0ef          	jal	80024f04 <printf>
    80018608:	4529                	li	a0,10
    8001860a:	7040b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001860e:	450d                	li	a0,3
    80018610:	de6e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018614:	fcde70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018618:	a0ae80ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001861c:	894e80ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80018620:	4511                	li	a0,4
    80018622:	dd4e80ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018626:	000407b7          	lui	a5,0x40
    8001862a:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    8001862e:	450d                	li	a0,3
    80018630:	dc6e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018634:	4509                	li	a0,2
    80018636:	ce0e80ef          	jal	80000b16 <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001863a:	0330000f          	fence	rw,rw
    8001863e:	00031417          	auipc	s0,0x31
    80018642:	9d240413          	addi	s0,s0,-1582 # 80049010 <excpt>
    80018646:	4785                	li	a5,1
    80018648:	00031717          	auipc	a4,0x31
    8001864c:	a0073023          	sd	zero,-1536(a4) # 80049048 <excpt+0x38>
    80018650:	00f41023          	sh	a5,0(s0)
    80018654:	0330000f          	fence	rw,rw
    asm volatile(
    80018658:	000807b7          	lui	a5,0x80
    8001865c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001865e:	07b6                	slli	a5,a5,0xd
    80018660:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80018664:	08200593          	li	a1,130
    80018668:	00014617          	auipc	a2,0x14
    8001866c:	1a860613          	addi	a2,a2,424 # 8002c810 <__func__.0+0x5c50>
    80018670:	0000f517          	auipc	a0,0xf
    80018674:	84850513          	addi	a0,a0,-1976 # 80026eb8 <__func__.0+0x2f8>
    80018678:	08d0c0ef          	jal	80024f04 <printf>
    8001867c:	00031797          	auipc	a5,0x31
    80018680:	9957c783          	lbu	a5,-1643(a5) # 80049011 <excpt+0x1>
    80018684:	0000f597          	auipc	a1,0xf
    80018688:	80c58593          	addi	a1,a1,-2036 # 80026e90 <__func__.0+0x2d0>
    8001868c:	cf89                	beqz	a5,800186a6 <load_guest_page_fault_4+0xba>
    8001868e:	6418                	ld	a4,8(s0)
    80018690:	47b5                	li	a5,13
    80018692:	0000e597          	auipc	a1,0xe
    80018696:	7ee58593          	addi	a1,a1,2030 # 80026e80 <__func__.0+0x2c0>
    8001869a:	00f70663          	beq	a4,a5,800186a6 <load_guest_page_fault_4+0xba>
    8001869e:	0000e597          	auipc	a1,0xe
    800186a2:	7f258593          	addi	a1,a1,2034 # 80026e90 <__func__.0+0x2d0>
    800186a6:	0000f517          	auipc	a0,0xf
    800186aa:	82a50513          	addi	a0,a0,-2006 # 80026ed0 <__func__.0+0x310>
    800186ae:	0570c0ef          	jal	80024f04 <printf>
    800186b2:	00031797          	auipc	a5,0x31
    800186b6:	95f7c783          	lbu	a5,-1697(a5) # 80049011 <excpt+0x1>
    800186ba:	c789                	beqz	a5,800186c4 <load_guest_page_fault_4+0xd8>
    800186bc:	6418                	ld	a4,8(s0)
    800186be:	47b5                	li	a5,13
    800186c0:	00f70c63          	beq	a4,a5,800186d8 <load_guest_page_fault_4+0xec>
    800186c4:	0000f517          	auipc	a0,0xf
    800186c8:	81450513          	addi	a0,a0,-2028 # 80026ed8 <__func__.0+0x318>
    800186cc:	0390c0ef          	jal	80024f04 <printf>
    800186d0:	02900513          	li	a0,41
    800186d4:	63a0b0ef          	jal	80023d0e <putchar>
    800186d8:	4529                	li	a0,10
    800186da:	6340b0ef          	jal	80023d0e <putchar>
    800186de:	00031497          	auipc	s1,0x31
    800186e2:	9334c483          	lbu	s1,-1741(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800186e6:	0000e597          	auipc	a1,0xe
    800186ea:	7aa58593          	addi	a1,a1,1962 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800186ee:	cc91                	beqz	s1,8001870a <load_guest_page_fault_4+0x11e>
    800186f0:	6418                	ld	a4,8(s0)
    800186f2:	47b5                	li	a5,13
    TEST_END();
    800186f4:	0000e597          	auipc	a1,0xe
    800186f8:	78c58593          	addi	a1,a1,1932 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800186fc:	00f70763          	beq	a4,a5,8001870a <load_guest_page_fault_4+0x11e>
    80018700:	4481                	li	s1,0
    TEST_END();
    80018702:	0000e597          	auipc	a1,0xe
    80018706:	78e58593          	addi	a1,a1,1934 # 80026e90 <__func__.0+0x2d0>
    8001870a:	0000f517          	auipc	a0,0xf
    8001870e:	82e50513          	addi	a0,a0,-2002 # 80026f38 <__func__.0+0x378>
    80018712:	7f20c0ef          	jal	80024f04 <printf>
    80018716:	4511                	li	a0,4
    80018718:	cdee80ef          	jal	80000bf6 <goto_priv>
    8001871c:	d91e80ef          	jal	800014ac <reset_state>
}
    80018720:	60e2                	ld	ra,24(sp)
    80018722:	6442                	ld	s0,16(sp)
    80018724:	8526                	mv	a0,s1
    80018726:	64a2                	ld	s1,8(sp)
    80018728:	6105                	addi	sp,sp,32
    8001872a:	8082                	ret

000000008001872c <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    8001872c:	1141                	addi	sp,sp,-16

    TEST_START();
    8001872e:	0000e597          	auipc	a1,0xe
    80018732:	8ba58593          	addi	a1,a1,-1862 # 80025fe8 <__func__.32>
    80018736:	0000e517          	auipc	a0,0xe
    8001873a:	76a50513          	addi	a0,a0,1898 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_5(){
    8001873e:	e406                	sd	ra,8(sp)
    80018740:	e022                	sd	s0,0(sp)
    TEST_START();
    80018742:	7c20c0ef          	jal	80024f04 <printf>
    80018746:	4529                	li	a0,10
    80018748:	5c60b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001874c:	450d                	li	a0,3
    8001874e:	ca8e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018752:	e8fe70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018756:	8cce80ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001875a:	f57e70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001875e:	4511                	li	a0,4
    80018760:	c96e80ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018764:	000407b7          	lui	a5,0x40
    80018768:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    8001876c:	450d                	li	a0,3
    8001876e:	c88e80ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018772:	4509                	li	a0,2
    80018774:	ba2e80ef          	jal	80000b16 <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018778:	0330000f          	fence	rw,rw
    8001877c:	4785                	li	a5,1
    8001877e:	00031717          	auipc	a4,0x31
    80018782:	8c073523          	sd	zero,-1846(a4) # 80049048 <excpt+0x38>
    80018786:	00031717          	auipc	a4,0x31
    8001878a:	88f71523          	sh	a5,-1910(a4) # 80049010 <excpt>
    8001878e:	0330000f          	fence	rw,rw
    80018792:	000807b7          	lui	a5,0x80
    80018796:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80018798:	07b6                	slli	a5,a5,0xd
    8001879a:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001879e:	08200593          	li	a1,130
    800187a2:	00014617          	auipc	a2,0x14
    800187a6:	86660613          	addi	a2,a2,-1946 # 8002c008 <__func__.0+0x5448>
    800187aa:	0000e517          	auipc	a0,0xe
    800187ae:	70e50513          	addi	a0,a0,1806 # 80026eb8 <__func__.0+0x2f8>
    800187b2:	7520c0ef          	jal	80024f04 <printf>
    800187b6:	00031797          	auipc	a5,0x31
    800187ba:	85b7c783          	lbu	a5,-1957(a5) # 80049011 <excpt+0x1>
    800187be:	0000e597          	auipc	a1,0xe
    800187c2:	6c258593          	addi	a1,a1,1730 # 80026e80 <__func__.0+0x2c0>
    800187c6:	c789                	beqz	a5,800187d0 <load_guest_page_fault_5+0xa4>
    800187c8:	0000e597          	auipc	a1,0xe
    800187cc:	6c858593          	addi	a1,a1,1736 # 80026e90 <__func__.0+0x2d0>
    800187d0:	0000e517          	auipc	a0,0xe
    800187d4:	70050513          	addi	a0,a0,1792 # 80026ed0 <__func__.0+0x310>
    800187d8:	72c0c0ef          	jal	80024f04 <printf>
    800187dc:	00031797          	auipc	a5,0x31
    800187e0:	8357c783          	lbu	a5,-1995(a5) # 80049011 <excpt+0x1>
    800187e4:	e7a1                	bnez	a5,8001882c <load_guest_page_fault_5+0x100>
    800187e6:	4529                	li	a0,10
    800187e8:	5260b0ef          	jal	80023d0e <putchar>
    800187ec:	00031797          	auipc	a5,0x31
    800187f0:	8257c783          	lbu	a5,-2011(a5) # 80049011 <excpt+0x1>
    800187f4:	e795                	bnez	a5,80018820 <load_guest_page_fault_5+0xf4>
    800187f6:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800187f8:	0000e597          	auipc	a1,0xe
    800187fc:	68858593          	addi	a1,a1,1672 # 80026e80 <__func__.0+0x2c0>
    80018800:	0000e517          	auipc	a0,0xe
    80018804:	73850513          	addi	a0,a0,1848 # 80026f38 <__func__.0+0x378>
    80018808:	6fc0c0ef          	jal	80024f04 <printf>
    8001880c:	4511                	li	a0,4
    8001880e:	be8e80ef          	jal	80000bf6 <goto_priv>
    80018812:	c9be80ef          	jal	800014ac <reset_state>
}
    80018816:	60a2                	ld	ra,8(sp)
    80018818:	8522                	mv	a0,s0
    8001881a:	6402                	ld	s0,0(sp)
    8001881c:	0141                	addi	sp,sp,16
    8001881e:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80018820:	4401                	li	s0,0
    TEST_END();
    80018822:	0000e597          	auipc	a1,0xe
    80018826:	66e58593          	addi	a1,a1,1646 # 80026e90 <__func__.0+0x2d0>
    8001882a:	bfd9                	j	80018800 <load_guest_page_fault_5+0xd4>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001882c:	0000e517          	auipc	a0,0xe
    80018830:	6ac50513          	addi	a0,a0,1708 # 80026ed8 <__func__.0+0x318>
    80018834:	6d00c0ef          	jal	80024f04 <printf>
    80018838:	02900513          	li	a0,41
    8001883c:	4d20b0ef          	jal	80023d0e <putchar>
    80018840:	b75d                	j	800187e6 <load_guest_page_fault_5+0xba>

0000000080018842 <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    80018842:	1101                	addi	sp,sp,-32

    TEST_START();
    80018844:	0000d597          	auipc	a1,0xd
    80018848:	7bc58593          	addi	a1,a1,1980 # 80026000 <__func__.31>
    8001884c:	0000e517          	auipc	a0,0xe
    80018850:	65450513          	addi	a0,a0,1620 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_6(){
    80018854:	ec06                	sd	ra,24(sp)
    80018856:	e822                	sd	s0,16(sp)
    80018858:	e426                	sd	s1,8(sp)
    TEST_START();
    8001885a:	6aa0c0ef          	jal	80024f04 <printf>
    8001885e:	4529                	li	a0,10
    80018860:	4ae0b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80018864:	450d                	li	a0,3
    80018866:	b90e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001886a:	d77e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001886e:	fb5e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018872:	e3fe70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018876:	4509                	li	a0,2
    80018878:	b7ee80ef          	jal	80000bf6 <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001887c:	0330000f          	fence	rw,rw
    80018880:	00030417          	auipc	s0,0x30
    80018884:	79040413          	addi	s0,s0,1936 # 80049010 <excpt>
    80018888:	4785                	li	a5,1
    8001888a:	00030717          	auipc	a4,0x30
    8001888e:	7a073f23          	sd	zero,1982(a4) # 80049048 <excpt+0x38>
    80018892:	00f41023          	sh	a5,0(s0)
    80018896:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001889a:	001007b7          	lui	a5,0x100
    8001889e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800188a2:	07b2                	slli	a5,a5,0xc
    800188a4:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    800188a8:	08200593          	li	a1,130
    800188ac:	00014617          	auipc	a2,0x14
    800188b0:	fa460613          	addi	a2,a2,-92 # 8002c850 <__func__.0+0x5c90>
    800188b4:	0000e517          	auipc	a0,0xe
    800188b8:	60450513          	addi	a0,a0,1540 # 80026eb8 <__func__.0+0x2f8>
    800188bc:	6480c0ef          	jal	80024f04 <printf>
    800188c0:	00030797          	auipc	a5,0x30
    800188c4:	7517c783          	lbu	a5,1873(a5) # 80049011 <excpt+0x1>
    800188c8:	0000e597          	auipc	a1,0xe
    800188cc:	5c858593          	addi	a1,a1,1480 # 80026e90 <__func__.0+0x2d0>
    800188d0:	cf89                	beqz	a5,800188ea <load_guest_page_fault_6+0xa8>
    800188d2:	6418                	ld	a4,8(s0)
    800188d4:	47d5                	li	a5,21
    800188d6:	0000e597          	auipc	a1,0xe
    800188da:	5aa58593          	addi	a1,a1,1450 # 80026e80 <__func__.0+0x2c0>
    800188de:	00f70663          	beq	a4,a5,800188ea <load_guest_page_fault_6+0xa8>
    800188e2:	0000e597          	auipc	a1,0xe
    800188e6:	5ae58593          	addi	a1,a1,1454 # 80026e90 <__func__.0+0x2d0>
    800188ea:	0000e517          	auipc	a0,0xe
    800188ee:	5e650513          	addi	a0,a0,1510 # 80026ed0 <__func__.0+0x310>
    800188f2:	6120c0ef          	jal	80024f04 <printf>
    800188f6:	00030797          	auipc	a5,0x30
    800188fa:	71b7c783          	lbu	a5,1819(a5) # 80049011 <excpt+0x1>
    800188fe:	c789                	beqz	a5,80018908 <load_guest_page_fault_6+0xc6>
    80018900:	6418                	ld	a4,8(s0)
    80018902:	47d5                	li	a5,21
    80018904:	00f70c63          	beq	a4,a5,8001891c <load_guest_page_fault_6+0xda>
    80018908:	0000e517          	auipc	a0,0xe
    8001890c:	5d050513          	addi	a0,a0,1488 # 80026ed8 <__func__.0+0x318>
    80018910:	5f40c0ef          	jal	80024f04 <printf>
    80018914:	02900513          	li	a0,41
    80018918:	3f60b0ef          	jal	80023d0e <putchar>
    8001891c:	4529                	li	a0,10
    8001891e:	3f00b0ef          	jal	80023d0e <putchar>
    80018922:	00030797          	auipc	a5,0x30
    80018926:	6ef7c783          	lbu	a5,1775(a5) # 80049011 <excpt+0x1>
    8001892a:	4481                	li	s1,0
    8001892c:	c789                	beqz	a5,80018936 <load_guest_page_fault_6+0xf4>
    8001892e:	6404                	ld	s1,8(s0)
    80018930:	14ad                	addi	s1,s1,-21
    80018932:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018936:	0330000f          	fence	rw,rw
    8001893a:	4785                	li	a5,1
    8001893c:	00030717          	auipc	a4,0x30
    80018940:	70073623          	sd	zero,1804(a4) # 80049048 <excpt+0x38>
    80018944:	00f41023          	sh	a5,0(s0)
    80018948:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001894c:	001007b7          	lui	a5,0x100
    80018950:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018954:	07b2                	slli	a5,a5,0xc
    80018956:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001895a:	08200593          	li	a1,130
    8001895e:	00014617          	auipc	a2,0x14
    80018962:	f4260613          	addi	a2,a2,-190 # 8002c8a0 <__func__.0+0x5ce0>
    80018966:	0000e517          	auipc	a0,0xe
    8001896a:	55250513          	addi	a0,a0,1362 # 80026eb8 <__func__.0+0x2f8>
    8001896e:	5960c0ef          	jal	80024f04 <printf>
    80018972:	00030797          	auipc	a5,0x30
    80018976:	69f7c783          	lbu	a5,1695(a5) # 80049011 <excpt+0x1>
    8001897a:	0000e597          	auipc	a1,0xe
    8001897e:	51658593          	addi	a1,a1,1302 # 80026e90 <__func__.0+0x2d0>
    80018982:	cf89                	beqz	a5,8001899c <load_guest_page_fault_6+0x15a>
    80018984:	6418                	ld	a4,8(s0)
    80018986:	47d5                	li	a5,21
    80018988:	0000e597          	auipc	a1,0xe
    8001898c:	4f858593          	addi	a1,a1,1272 # 80026e80 <__func__.0+0x2c0>
    80018990:	00f70663          	beq	a4,a5,8001899c <load_guest_page_fault_6+0x15a>
    80018994:	0000e597          	auipc	a1,0xe
    80018998:	4fc58593          	addi	a1,a1,1276 # 80026e90 <__func__.0+0x2d0>
    8001899c:	0000e517          	auipc	a0,0xe
    800189a0:	53450513          	addi	a0,a0,1332 # 80026ed0 <__func__.0+0x310>
    800189a4:	5600c0ef          	jal	80024f04 <printf>
    800189a8:	00030797          	auipc	a5,0x30
    800189ac:	6697c783          	lbu	a5,1641(a5) # 80049011 <excpt+0x1>
    800189b0:	c789                	beqz	a5,800189ba <load_guest_page_fault_6+0x178>
    800189b2:	6418                	ld	a4,8(s0)
    800189b4:	47d5                	li	a5,21
    800189b6:	00f70c63          	beq	a4,a5,800189ce <load_guest_page_fault_6+0x18c>
    800189ba:	0000e517          	auipc	a0,0xe
    800189be:	51e50513          	addi	a0,a0,1310 # 80026ed8 <__func__.0+0x318>
    800189c2:	5420c0ef          	jal	80024f04 <printf>
    800189c6:	02900513          	li	a0,41
    800189ca:	3440b0ef          	jal	80023d0e <putchar>
    800189ce:	4529                	li	a0,10
    800189d0:	33e0b0ef          	jal	80023d0e <putchar>
    800189d4:	c095                	beqz	s1,800189f8 <load_guest_page_fault_6+0x1b6>
    800189d6:	00030497          	auipc	s1,0x30
    800189da:	63b4c483          	lbu	s1,1595(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800189de:	0000e597          	auipc	a1,0xe
    800189e2:	4b258593          	addi	a1,a1,1202 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800189e6:	cc91                	beqz	s1,80018a02 <load_guest_page_fault_6+0x1c0>
    800189e8:	6418                	ld	a4,8(s0)
    800189ea:	47d5                	li	a5,21
    TEST_END();
    800189ec:	0000e597          	auipc	a1,0xe
    800189f0:	49458593          	addi	a1,a1,1172 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800189f4:	00f70763          	beq	a4,a5,80018a02 <load_guest_page_fault_6+0x1c0>
    800189f8:	4481                	li	s1,0
    TEST_END();
    800189fa:	0000e597          	auipc	a1,0xe
    800189fe:	49658593          	addi	a1,a1,1174 # 80026e90 <__func__.0+0x2d0>
    80018a02:	0000e517          	auipc	a0,0xe
    80018a06:	53650513          	addi	a0,a0,1334 # 80026f38 <__func__.0+0x378>
    80018a0a:	4fa0c0ef          	jal	80024f04 <printf>
    80018a0e:	4511                	li	a0,4
    80018a10:	9e6e80ef          	jal	80000bf6 <goto_priv>
    80018a14:	a99e80ef          	jal	800014ac <reset_state>
}
    80018a18:	60e2                	ld	ra,24(sp)
    80018a1a:	6442                	ld	s0,16(sp)
    80018a1c:	8526                	mv	a0,s1
    80018a1e:	64a2                	ld	s1,8(sp)
    80018a20:	6105                	addi	sp,sp,32
    80018a22:	8082                	ret

0000000080018a24 <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    80018a24:	1101                	addi	sp,sp,-32

    TEST_START();
    80018a26:	0000d597          	auipc	a1,0xd
    80018a2a:	5f258593          	addi	a1,a1,1522 # 80026018 <__func__.30>
    80018a2e:	0000e517          	auipc	a0,0xe
    80018a32:	47250513          	addi	a0,a0,1138 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_7(){
    80018a36:	ec06                	sd	ra,24(sp)
    80018a38:	e822                	sd	s0,16(sp)
    80018a3a:	e426                	sd	s1,8(sp)
    TEST_START();
    80018a3c:	4c80c0ef          	jal	80024f04 <printf>
    80018a40:	4529                	li	a0,10
    80018a42:	2cc0b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80018a46:	450d                	li	a0,3
    80018a48:	9aee80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018a4c:	b95e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018a50:	dd3e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018a54:	c5de70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018a58:	4509                	li	a0,2
    80018a5a:	99ce80ef          	jal	80000bf6 <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018a5e:	0330000f          	fence	rw,rw
    80018a62:	00030417          	auipc	s0,0x30
    80018a66:	5ae40413          	addi	s0,s0,1454 # 80049010 <excpt>
    80018a6a:	4785                	li	a5,1
    80018a6c:	00030717          	auipc	a4,0x30
    80018a70:	5c073e23          	sd	zero,1500(a4) # 80049048 <excpt+0x38>
    80018a74:	00f41023          	sh	a5,0(s0)
    80018a78:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018a7c:	000807b7          	lui	a5,0x80
    80018a80:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80018a84:	001007b7          	lui	a5,0x100
    80018a88:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018a8c:	07b2                	slli	a5,a5,0xc
    80018a8e:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018a92:	08200593          	li	a1,130
    80018a96:	00014617          	auipc	a2,0x14
    80018a9a:	e6260613          	addi	a2,a2,-414 # 8002c8f8 <__func__.0+0x5d38>
    80018a9e:	0000e517          	auipc	a0,0xe
    80018aa2:	41a50513          	addi	a0,a0,1050 # 80026eb8 <__func__.0+0x2f8>
    80018aa6:	45e0c0ef          	jal	80024f04 <printf>
    80018aaa:	00030797          	auipc	a5,0x30
    80018aae:	5677c783          	lbu	a5,1383(a5) # 80049011 <excpt+0x1>
    80018ab2:	0000e597          	auipc	a1,0xe
    80018ab6:	3de58593          	addi	a1,a1,990 # 80026e90 <__func__.0+0x2d0>
    80018aba:	cf89                	beqz	a5,80018ad4 <load_guest_page_fault_7+0xb0>
    80018abc:	6418                	ld	a4,8(s0)
    80018abe:	47d5                	li	a5,21
    80018ac0:	0000e597          	auipc	a1,0xe
    80018ac4:	3c058593          	addi	a1,a1,960 # 80026e80 <__func__.0+0x2c0>
    80018ac8:	00f70663          	beq	a4,a5,80018ad4 <load_guest_page_fault_7+0xb0>
    80018acc:	0000e597          	auipc	a1,0xe
    80018ad0:	3c458593          	addi	a1,a1,964 # 80026e90 <__func__.0+0x2d0>
    80018ad4:	0000e517          	auipc	a0,0xe
    80018ad8:	3fc50513          	addi	a0,a0,1020 # 80026ed0 <__func__.0+0x310>
    80018adc:	4280c0ef          	jal	80024f04 <printf>
    80018ae0:	00030797          	auipc	a5,0x30
    80018ae4:	5317c783          	lbu	a5,1329(a5) # 80049011 <excpt+0x1>
    80018ae8:	c789                	beqz	a5,80018af2 <load_guest_page_fault_7+0xce>
    80018aea:	6418                	ld	a4,8(s0)
    80018aec:	47d5                	li	a5,21
    80018aee:	00f70c63          	beq	a4,a5,80018b06 <load_guest_page_fault_7+0xe2>
    80018af2:	0000e517          	auipc	a0,0xe
    80018af6:	3e650513          	addi	a0,a0,998 # 80026ed8 <__func__.0+0x318>
    80018afa:	40a0c0ef          	jal	80024f04 <printf>
    80018afe:	02900513          	li	a0,41
    80018b02:	20c0b0ef          	jal	80023d0e <putchar>
    80018b06:	4529                	li	a0,10
    80018b08:	2060b0ef          	jal	80023d0e <putchar>
    80018b0c:	00030497          	auipc	s1,0x30
    80018b10:	5054c483          	lbu	s1,1285(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80018b14:	0000e597          	auipc	a1,0xe
    80018b18:	37c58593          	addi	a1,a1,892 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018b1c:	cc91                	beqz	s1,80018b38 <load_guest_page_fault_7+0x114>
    80018b1e:	6418                	ld	a4,8(s0)
    80018b20:	47d5                	li	a5,21
    TEST_END();
    80018b22:	0000e597          	auipc	a1,0xe
    80018b26:	35e58593          	addi	a1,a1,862 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80018b2a:	00f70763          	beq	a4,a5,80018b38 <load_guest_page_fault_7+0x114>
    80018b2e:	4481                	li	s1,0
    TEST_END();
    80018b30:	0000e597          	auipc	a1,0xe
    80018b34:	36058593          	addi	a1,a1,864 # 80026e90 <__func__.0+0x2d0>
    80018b38:	0000e517          	auipc	a0,0xe
    80018b3c:	40050513          	addi	a0,a0,1024 # 80026f38 <__func__.0+0x378>
    80018b40:	3c40c0ef          	jal	80024f04 <printf>
    80018b44:	4511                	li	a0,4
    80018b46:	8b0e80ef          	jal	80000bf6 <goto_priv>
    80018b4a:	963e80ef          	jal	800014ac <reset_state>
}
    80018b4e:	60e2                	ld	ra,24(sp)
    80018b50:	6442                	ld	s0,16(sp)
    80018b52:	8526                	mv	a0,s1
    80018b54:	64a2                	ld	s1,8(sp)
    80018b56:	6105                	addi	sp,sp,32
    80018b58:	8082                	ret

0000000080018b5a <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    80018b5a:	1101                	addi	sp,sp,-32

    TEST_START();
    80018b5c:	0000d597          	auipc	a1,0xd
    80018b60:	4d458593          	addi	a1,a1,1236 # 80026030 <__func__.29>
    80018b64:	0000e517          	auipc	a0,0xe
    80018b68:	33c50513          	addi	a0,a0,828 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_8(){
    80018b6c:	ec06                	sd	ra,24(sp)
    80018b6e:	e822                	sd	s0,16(sp)
    80018b70:	e426                	sd	s1,8(sp)
    TEST_START();
    80018b72:	3920c0ef          	jal	80024f04 <printf>
    80018b76:	4529                	li	a0,10
    80018b78:	1960b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80018b7c:	450d                	li	a0,3
    80018b7e:	878e80ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018b82:	a5fe70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018b86:	c9de70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018b8a:	b27e70ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018b8e:	4509                	li	a0,2
    80018b90:	866e80ef          	jal	80000bf6 <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018b94:	0330000f          	fence	rw,rw
    80018b98:	00030417          	auipc	s0,0x30
    80018b9c:	47840413          	addi	s0,s0,1144 # 80049010 <excpt>
    80018ba0:	4785                	li	a5,1
    80018ba2:	00030717          	auipc	a4,0x30
    80018ba6:	4a073323          	sd	zero,1190(a4) # 80049048 <excpt+0x38>
    80018baa:	00f41023          	sh	a5,0(s0)
    80018bae:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80018bb2:	000807b7          	lui	a5,0x80
    80018bb6:	1007a073          	csrs	sstatus,a5
    80018bba:	001007b7          	lui	a5,0x100
    80018bbe:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018bc2:	07b2                	slli	a5,a5,0xc
    80018bc4:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018bc8:	08200593          	li	a1,130
    80018bcc:	00014617          	auipc	a2,0x14
    80018bd0:	d8c60613          	addi	a2,a2,-628 # 8002c958 <__func__.0+0x5d98>
    80018bd4:	0000e517          	auipc	a0,0xe
    80018bd8:	2e450513          	addi	a0,a0,740 # 80026eb8 <__func__.0+0x2f8>
    80018bdc:	3280c0ef          	jal	80024f04 <printf>
    80018be0:	00030797          	auipc	a5,0x30
    80018be4:	4317c783          	lbu	a5,1073(a5) # 80049011 <excpt+0x1>
    80018be8:	0000e597          	auipc	a1,0xe
    80018bec:	2a858593          	addi	a1,a1,680 # 80026e90 <__func__.0+0x2d0>
    80018bf0:	cf89                	beqz	a5,80018c0a <load_guest_page_fault_8+0xb0>
    80018bf2:	6418                	ld	a4,8(s0)
    80018bf4:	47d5                	li	a5,21
    80018bf6:	0000e597          	auipc	a1,0xe
    80018bfa:	28a58593          	addi	a1,a1,650 # 80026e80 <__func__.0+0x2c0>
    80018bfe:	00f70663          	beq	a4,a5,80018c0a <load_guest_page_fault_8+0xb0>
    80018c02:	0000e597          	auipc	a1,0xe
    80018c06:	28e58593          	addi	a1,a1,654 # 80026e90 <__func__.0+0x2d0>
    80018c0a:	0000e517          	auipc	a0,0xe
    80018c0e:	2c650513          	addi	a0,a0,710 # 80026ed0 <__func__.0+0x310>
    80018c12:	2f20c0ef          	jal	80024f04 <printf>
    80018c16:	00030797          	auipc	a5,0x30
    80018c1a:	3fb7c783          	lbu	a5,1019(a5) # 80049011 <excpt+0x1>
    80018c1e:	c789                	beqz	a5,80018c28 <load_guest_page_fault_8+0xce>
    80018c20:	6418                	ld	a4,8(s0)
    80018c22:	47d5                	li	a5,21
    80018c24:	00f70c63          	beq	a4,a5,80018c3c <load_guest_page_fault_8+0xe2>
    80018c28:	0000e517          	auipc	a0,0xe
    80018c2c:	2b050513          	addi	a0,a0,688 # 80026ed8 <__func__.0+0x318>
    80018c30:	2d40c0ef          	jal	80024f04 <printf>
    80018c34:	02900513          	li	a0,41
    80018c38:	0d60b0ef          	jal	80023d0e <putchar>
    80018c3c:	4529                	li	a0,10
    80018c3e:	0d00b0ef          	jal	80023d0e <putchar>
    80018c42:	00030497          	auipc	s1,0x30
    80018c46:	3cf4c483          	lbu	s1,975(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80018c4a:	0000e597          	auipc	a1,0xe
    80018c4e:	24658593          	addi	a1,a1,582 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018c52:	cc91                	beqz	s1,80018c6e <load_guest_page_fault_8+0x114>
    80018c54:	6418                	ld	a4,8(s0)
    80018c56:	47d5                	li	a5,21
    TEST_END();
    80018c58:	0000e597          	auipc	a1,0xe
    80018c5c:	22858593          	addi	a1,a1,552 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80018c60:	00f70763          	beq	a4,a5,80018c6e <load_guest_page_fault_8+0x114>
    80018c64:	4481                	li	s1,0
    TEST_END();
    80018c66:	0000e597          	auipc	a1,0xe
    80018c6a:	22a58593          	addi	a1,a1,554 # 80026e90 <__func__.0+0x2d0>
    80018c6e:	0000e517          	auipc	a0,0xe
    80018c72:	2ca50513          	addi	a0,a0,714 # 80026f38 <__func__.0+0x378>
    80018c76:	28e0c0ef          	jal	80024f04 <printf>
    80018c7a:	4511                	li	a0,4
    80018c7c:	f7be70ef          	jal	80000bf6 <goto_priv>
    80018c80:	82de80ef          	jal	800014ac <reset_state>
}
    80018c84:	60e2                	ld	ra,24(sp)
    80018c86:	6442                	ld	s0,16(sp)
    80018c88:	8526                	mv	a0,s1
    80018c8a:	64a2                	ld	s1,8(sp)
    80018c8c:	6105                	addi	sp,sp,32
    80018c8e:	8082                	ret

0000000080018c90 <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    80018c90:	1101                	addi	sp,sp,-32

    TEST_START();
    80018c92:	0000d597          	auipc	a1,0xd
    80018c96:	3b658593          	addi	a1,a1,950 # 80026048 <__func__.28>
    80018c9a:	0000e517          	auipc	a0,0xe
    80018c9e:	20650513          	addi	a0,a0,518 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_9(){
    80018ca2:	ec06                	sd	ra,24(sp)
    80018ca4:	e822                	sd	s0,16(sp)
    80018ca6:	e426                	sd	s1,8(sp)
    TEST_START();
    80018ca8:	25c0c0ef          	jal	80024f04 <printf>
    80018cac:	4529                	li	a0,10
    80018cae:	0600b0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80018cb2:	450d                	li	a0,3
    80018cb4:	f43e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018cb8:	929e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018cbc:	b67e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018cc0:	9f1e70ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80018cc4:	4511                	li	a0,4
    80018cc6:	f31e70ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018cca:	000407b7          	lui	a5,0x40
    80018cce:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80018cd2:	4509                	li	a0,2
    80018cd4:	f23e70ef          	jal	80000bf6 <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018cd8:	0330000f          	fence	rw,rw
    80018cdc:	00030417          	auipc	s0,0x30
    80018ce0:	33440413          	addi	s0,s0,820 # 80049010 <excpt>
    80018ce4:	4785                	li	a5,1
    80018ce6:	00030717          	auipc	a4,0x30
    80018cea:	36073123          	sd	zero,866(a4) # 80049048 <excpt+0x38>
    80018cee:	00f41023          	sh	a5,0(s0)
    80018cf2:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80018cf6:	000807b7          	lui	a5,0x80
    80018cfa:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80018cfc:	07b6                	slli	a5,a5,0xd
    80018cfe:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GURWX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80018d02:	08200593          	li	a1,130
    80018d06:	00014617          	auipc	a2,0x14
    80018d0a:	cc260613          	addi	a2,a2,-830 # 8002c9c8 <__func__.0+0x5e08>
    80018d0e:	0000e517          	auipc	a0,0xe
    80018d12:	1aa50513          	addi	a0,a0,426 # 80026eb8 <__func__.0+0x2f8>
    80018d16:	1ee0c0ef          	jal	80024f04 <printf>
    80018d1a:	00030797          	auipc	a5,0x30
    80018d1e:	2f77c783          	lbu	a5,759(a5) # 80049011 <excpt+0x1>
    80018d22:	0000e597          	auipc	a1,0xe
    80018d26:	16e58593          	addi	a1,a1,366 # 80026e90 <__func__.0+0x2d0>
    80018d2a:	cf89                	beqz	a5,80018d44 <load_guest_page_fault_9+0xb4>
    80018d2c:	6418                	ld	a4,8(s0)
    80018d2e:	47b5                	li	a5,13
    80018d30:	0000e597          	auipc	a1,0xe
    80018d34:	15058593          	addi	a1,a1,336 # 80026e80 <__func__.0+0x2c0>
    80018d38:	00f70663          	beq	a4,a5,80018d44 <load_guest_page_fault_9+0xb4>
    80018d3c:	0000e597          	auipc	a1,0xe
    80018d40:	15458593          	addi	a1,a1,340 # 80026e90 <__func__.0+0x2d0>
    80018d44:	0000e517          	auipc	a0,0xe
    80018d48:	18c50513          	addi	a0,a0,396 # 80026ed0 <__func__.0+0x310>
    80018d4c:	1b80c0ef          	jal	80024f04 <printf>
    80018d50:	00030797          	auipc	a5,0x30
    80018d54:	2c17c783          	lbu	a5,705(a5) # 80049011 <excpt+0x1>
    80018d58:	c789                	beqz	a5,80018d62 <load_guest_page_fault_9+0xd2>
    80018d5a:	6418                	ld	a4,8(s0)
    80018d5c:	47b5                	li	a5,13
    80018d5e:	00f70c63          	beq	a4,a5,80018d76 <load_guest_page_fault_9+0xe6>
    80018d62:	0000e517          	auipc	a0,0xe
    80018d66:	17650513          	addi	a0,a0,374 # 80026ed8 <__func__.0+0x318>
    80018d6a:	19a0c0ef          	jal	80024f04 <printf>
    80018d6e:	02900513          	li	a0,41
    80018d72:	79d0a0ef          	jal	80023d0e <putchar>
    80018d76:	4529                	li	a0,10
    80018d78:	7970a0ef          	jal	80023d0e <putchar>
    80018d7c:	00030497          	auipc	s1,0x30
    80018d80:	2954c483          	lbu	s1,661(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80018d84:	0000e597          	auipc	a1,0xe
    80018d88:	10c58593          	addi	a1,a1,268 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80018d8c:	cc91                	beqz	s1,80018da8 <load_guest_page_fault_9+0x118>
    80018d8e:	6418                	ld	a4,8(s0)
    80018d90:	47b5                	li	a5,13
    TEST_END();
    80018d92:	0000e597          	auipc	a1,0xe
    80018d96:	0ee58593          	addi	a1,a1,238 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80018d9a:	00f70763          	beq	a4,a5,80018da8 <load_guest_page_fault_9+0x118>
    80018d9e:	4481                	li	s1,0
    TEST_END();
    80018da0:	0000e597          	auipc	a1,0xe
    80018da4:	0f058593          	addi	a1,a1,240 # 80026e90 <__func__.0+0x2d0>
    80018da8:	0000e517          	auipc	a0,0xe
    80018dac:	19050513          	addi	a0,a0,400 # 80026f38 <__func__.0+0x378>
    80018db0:	1540c0ef          	jal	80024f04 <printf>
    80018db4:	4511                	li	a0,4
    80018db6:	e41e70ef          	jal	80000bf6 <goto_priv>
    80018dba:	ef2e80ef          	jal	800014ac <reset_state>
}
    80018dbe:	60e2                	ld	ra,24(sp)
    80018dc0:	6442                	ld	s0,16(sp)
    80018dc2:	8526                	mv	a0,s1
    80018dc4:	64a2                	ld	s1,8(sp)
    80018dc6:	6105                	addi	sp,sp,32
    80018dc8:	8082                	ret

0000000080018dca <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    80018dca:	1141                	addi	sp,sp,-16

    TEST_START();
    80018dcc:	0000d597          	auipc	a1,0xd
    80018dd0:	29458593          	addi	a1,a1,660 # 80026060 <__func__.27>
    80018dd4:	0000e517          	auipc	a0,0xe
    80018dd8:	0cc50513          	addi	a0,a0,204 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_10(){
    80018ddc:	e406                	sd	ra,8(sp)
    80018dde:	e022                	sd	s0,0(sp)
    TEST_START();
    80018de0:	1240c0ef          	jal	80024f04 <printf>
    80018de4:	4529                	li	a0,10
    80018de6:	7290a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80018dea:	450d                	li	a0,3
    80018dec:	e0be70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018df0:	ff0e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018df4:	a2fe70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018df8:	8b9e70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018dfc:	4511                	li	a0,4
    80018dfe:	df9e70ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018e02:	000407b7          	lui	a5,0x40
    80018e06:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80018e0a:	4509                	li	a0,2
    80018e0c:	debe70ef          	jal	80000bf6 <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018e10:	0330000f          	fence	rw,rw
    80018e14:	4785                	li	a5,1
    80018e16:	00030717          	auipc	a4,0x30
    80018e1a:	22073923          	sd	zero,562(a4) # 80049048 <excpt+0x38>
    80018e1e:	00030717          	auipc	a4,0x30
    80018e22:	1ef71923          	sh	a5,498(a4) # 80049010 <excpt>
    80018e26:	0330000f          	fence	rw,rw
    80018e2a:	000807b7          	lui	a5,0x80
    80018e2e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80018e30:	07b6                	slli	a5,a5,0xd
    80018e32:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80018e36:	08200593          	li	a1,130
    80018e3a:	00014617          	auipc	a2,0x14
    80018e3e:	bc660613          	addi	a2,a2,-1082 # 8002ca00 <__func__.0+0x5e40>
    80018e42:	0000e517          	auipc	a0,0xe
    80018e46:	07650513          	addi	a0,a0,118 # 80026eb8 <__func__.0+0x2f8>
    80018e4a:	0ba0c0ef          	jal	80024f04 <printf>
    80018e4e:	00030797          	auipc	a5,0x30
    80018e52:	1c37c783          	lbu	a5,451(a5) # 80049011 <excpt+0x1>
    80018e56:	0000e597          	auipc	a1,0xe
    80018e5a:	02a58593          	addi	a1,a1,42 # 80026e80 <__func__.0+0x2c0>
    80018e5e:	c789                	beqz	a5,80018e68 <load_guest_page_fault_10+0x9e>
    80018e60:	0000e597          	auipc	a1,0xe
    80018e64:	03058593          	addi	a1,a1,48 # 80026e90 <__func__.0+0x2d0>
    80018e68:	0000e517          	auipc	a0,0xe
    80018e6c:	06850513          	addi	a0,a0,104 # 80026ed0 <__func__.0+0x310>
    80018e70:	0940c0ef          	jal	80024f04 <printf>
    80018e74:	00030797          	auipc	a5,0x30
    80018e78:	19d7c783          	lbu	a5,413(a5) # 80049011 <excpt+0x1>
    80018e7c:	e7a1                	bnez	a5,80018ec4 <load_guest_page_fault_10+0xfa>
    80018e7e:	4529                	li	a0,10
    80018e80:	68f0a0ef          	jal	80023d0e <putchar>
    80018e84:	00030797          	auipc	a5,0x30
    80018e88:	18d7c783          	lbu	a5,397(a5) # 80049011 <excpt+0x1>
    80018e8c:	e795                	bnez	a5,80018eb8 <load_guest_page_fault_10+0xee>
    80018e8e:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018e90:	0000e597          	auipc	a1,0xe
    80018e94:	ff058593          	addi	a1,a1,-16 # 80026e80 <__func__.0+0x2c0>
    80018e98:	0000e517          	auipc	a0,0xe
    80018e9c:	0a050513          	addi	a0,a0,160 # 80026f38 <__func__.0+0x378>
    80018ea0:	0640c0ef          	jal	80024f04 <printf>
    80018ea4:	4511                	li	a0,4
    80018ea6:	d51e70ef          	jal	80000bf6 <goto_priv>
    80018eaa:	e02e80ef          	jal	800014ac <reset_state>
}
    80018eae:	60a2                	ld	ra,8(sp)
    80018eb0:	8522                	mv	a0,s0
    80018eb2:	6402                	ld	s0,0(sp)
    80018eb4:	0141                	addi	sp,sp,16
    80018eb6:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80018eb8:	4401                	li	s0,0
    TEST_END();
    80018eba:	0000e597          	auipc	a1,0xe
    80018ebe:	fd658593          	addi	a1,a1,-42 # 80026e90 <__func__.0+0x2d0>
    80018ec2:	bfd9                	j	80018e98 <load_guest_page_fault_10+0xce>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80018ec4:	0000e517          	auipc	a0,0xe
    80018ec8:	01450513          	addi	a0,a0,20 # 80026ed8 <__func__.0+0x318>
    80018ecc:	0380c0ef          	jal	80024f04 <printf>
    80018ed0:	02900513          	li	a0,41
    80018ed4:	63b0a0ef          	jal	80023d0e <putchar>
    80018ed8:	b75d                	j	80018e7e <load_guest_page_fault_10+0xb4>

0000000080018eda <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    80018eda:	1101                	addi	sp,sp,-32

    TEST_START();
    80018edc:	0000d597          	auipc	a1,0xd
    80018ee0:	1a458593          	addi	a1,a1,420 # 80026080 <__func__.26>
    80018ee4:	0000e517          	auipc	a0,0xe
    80018ee8:	fbc50513          	addi	a0,a0,-68 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_11(){
    80018eec:	ec06                	sd	ra,24(sp)
    80018eee:	e822                	sd	s0,16(sp)
    80018ef0:	e426                	sd	s1,8(sp)
    TEST_START();
    80018ef2:	0120c0ef          	jal	80024f04 <printf>
    80018ef6:	4529                	li	a0,10
    80018ef8:	6170a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80018efc:	450d                	li	a0,3
    80018efe:	cf9e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80018f02:	edee70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018f06:	91de70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80018f0a:	fa6e70ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018f0e:	4511                	li	a0,4
    80018f10:	ce7e70ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80018f14:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80018f18:	450d                	li	a0,3
    80018f1a:	cdde70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80018f1e:	4509                	li	a0,2
    80018f20:	bf7e70ef          	jal	80000b16 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018f24:	0330000f          	fence	rw,rw
    80018f28:	00030417          	auipc	s0,0x30
    80018f2c:	0e840413          	addi	s0,s0,232 # 80049010 <excpt>
    80018f30:	4785                	li	a5,1
    80018f32:	00030717          	auipc	a4,0x30
    80018f36:	10073b23          	sd	zero,278(a4) # 80049048 <excpt+0x38>
    80018f3a:	00f41023          	sh	a5,0(s0)
    80018f3e:	0330000f          	fence	rw,rw
    asm volatile(
    80018f42:	400197b7          	lui	a5,0x40019
    80018f46:	078a                	slli	a5,a5,0x2
    80018f48:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);

    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80018f4c:	08200593          	li	a1,130
    80018f50:	00013617          	auipc	a2,0x13
    80018f54:	74060613          	addi	a2,a2,1856 # 8002c690 <__func__.0+0x5ad0>
    80018f58:	0000e517          	auipc	a0,0xe
    80018f5c:	f6050513          	addi	a0,a0,-160 # 80026eb8 <__func__.0+0x2f8>
    80018f60:	7a50b0ef          	jal	80024f04 <printf>
    80018f64:	00030797          	auipc	a5,0x30
    80018f68:	0ad7c783          	lbu	a5,173(a5) # 80049011 <excpt+0x1>
    80018f6c:	0000e597          	auipc	a1,0xe
    80018f70:	f2458593          	addi	a1,a1,-220 # 80026e90 <__func__.0+0x2d0>
    80018f74:	cf89                	beqz	a5,80018f8e <load_guest_page_fault_11+0xb4>
    80018f76:	6418                	ld	a4,8(s0)
    80018f78:	47d5                	li	a5,21
    80018f7a:	0000e597          	auipc	a1,0xe
    80018f7e:	f0658593          	addi	a1,a1,-250 # 80026e80 <__func__.0+0x2c0>
    80018f82:	00f70663          	beq	a4,a5,80018f8e <load_guest_page_fault_11+0xb4>
    80018f86:	0000e597          	auipc	a1,0xe
    80018f8a:	f0a58593          	addi	a1,a1,-246 # 80026e90 <__func__.0+0x2d0>
    80018f8e:	0000e517          	auipc	a0,0xe
    80018f92:	f4250513          	addi	a0,a0,-190 # 80026ed0 <__func__.0+0x310>
    80018f96:	76f0b0ef          	jal	80024f04 <printf>
    80018f9a:	00030797          	auipc	a5,0x30
    80018f9e:	0777c783          	lbu	a5,119(a5) # 80049011 <excpt+0x1>
    80018fa2:	c789                	beqz	a5,80018fac <load_guest_page_fault_11+0xd2>
    80018fa4:	6418                	ld	a4,8(s0)
    80018fa6:	47d5                	li	a5,21
    80018fa8:	00f70c63          	beq	a4,a5,80018fc0 <load_guest_page_fault_11+0xe6>
    80018fac:	0000e517          	auipc	a0,0xe
    80018fb0:	f2c50513          	addi	a0,a0,-212 # 80026ed8 <__func__.0+0x318>
    80018fb4:	7510b0ef          	jal	80024f04 <printf>
    80018fb8:	02900513          	li	a0,41
    80018fbc:	5530a0ef          	jal	80023d0e <putchar>
    80018fc0:	4529                	li	a0,10
    80018fc2:	54d0a0ef          	jal	80023d0e <putchar>
    80018fc6:	00030497          	auipc	s1,0x30
    80018fca:	04b4c483          	lbu	s1,75(s1) # 80049011 <excpt+0x1>
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    80018fce:	0000e597          	auipc	a1,0xe
    80018fd2:	ec258593          	addi	a1,a1,-318 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80018fd6:	cc91                	beqz	s1,80018ff2 <load_guest_page_fault_11+0x118>
    80018fd8:	6418                	ld	a4,8(s0)
    80018fda:	47d5                	li	a5,21
    TEST_END();
    80018fdc:	0000e597          	auipc	a1,0xe
    80018fe0:	ea458593          	addi	a1,a1,-348 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80018fe4:	00f70763          	beq	a4,a5,80018ff2 <load_guest_page_fault_11+0x118>
    80018fe8:	4481                	li	s1,0
    TEST_END();
    80018fea:	0000e597          	auipc	a1,0xe
    80018fee:	ea658593          	addi	a1,a1,-346 # 80026e90 <__func__.0+0x2d0>
    80018ff2:	0000e517          	auipc	a0,0xe
    80018ff6:	f4650513          	addi	a0,a0,-186 # 80026f38 <__func__.0+0x378>
    80018ffa:	70b0b0ef          	jal	80024f04 <printf>
    80018ffe:	4511                	li	a0,4
    80019000:	bf7e70ef          	jal	80000bf6 <goto_priv>
    80019004:	ca8e80ef          	jal	800014ac <reset_state>
}
    80019008:	60e2                	ld	ra,24(sp)
    8001900a:	6442                	ld	s0,16(sp)
    8001900c:	8526                	mv	a0,s1
    8001900e:	64a2                	ld	s1,8(sp)
    80019010:	6105                	addi	sp,sp,32
    80019012:	8082                	ret

0000000080019014 <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    80019014:	1101                	addi	sp,sp,-32

    TEST_START();
    80019016:	0000d597          	auipc	a1,0xd
    8001901a:	08a58593          	addi	a1,a1,138 # 800260a0 <__func__.25>
    8001901e:	0000e517          	auipc	a0,0xe
    80019022:	e8250513          	addi	a0,a0,-382 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_12(){
    80019026:	ec06                	sd	ra,24(sp)
    80019028:	e822                	sd	s0,16(sp)
    8001902a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001902c:	6d90b0ef          	jal	80024f04 <printf>
    80019030:	4529                	li	a0,10
    80019032:	4dd0a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80019036:	450d                	li	a0,3
    80019038:	bbfe70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001903c:	da4e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019040:	fe2e70ef          	jal	80000822 <hpt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80019044:	4511                	li	a0,4
    80019046:	bb1e70ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001904a:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    8001904e:	450d                	li	a0,3
    80019050:	ba7e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019054:	4509                	li	a0,2
    80019056:	ac1e70ef          	jal	80000b16 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001905a:	0330000f          	fence	rw,rw
    8001905e:	00030417          	auipc	s0,0x30
    80019062:	fb240413          	addi	s0,s0,-78 # 80049010 <excpt>
    80019066:	4785                	li	a5,1
    80019068:	00030717          	auipc	a4,0x30
    8001906c:	fe073023          	sd	zero,-32(a4) # 80049048 <excpt+0x38>
    80019070:	00f41023          	sh	a5,0(s0)
    80019074:	0330000f          	fence	rw,rw
    vaddr = vs_page_base(VSI_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019078:	000807b7          	lui	a5,0x80
    8001907c:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80019080:	2000d5b7          	lui	a1,0x2000d
    80019084:	058e                	slli	a1,a1,0x3
    80019086:	6405c7f3          	.insn	4, 0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    8001908a:	00014517          	auipc	a0,0x14
    8001908e:	35e50513          	addi	a0,a0,862 # 8002d3e8 <__func__.0+0x6828>
    80019092:	6730b0ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    80019096:	640c                	ld	a1,8(s0)
    80019098:	0000f517          	auipc	a0,0xf
    8001909c:	95050513          	addi	a0,a0,-1712 # 800279e8 <__func__.0+0xe28>
    800190a0:	6650b0ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.triggered);
    800190a4:	00030597          	auipc	a1,0x30
    800190a8:	f6d5c583          	lbu	a1,-147(a1) # 80049011 <excpt+0x1>
    800190ac:	0000f517          	auipc	a0,0xf
    800190b0:	93c50513          	addi	a0,a0,-1732 # 800279e8 <__func__.0+0xe28>
    800190b4:	6510b0ef          	jal	80024f04 <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800190b8:	08200593          	li	a1,130
    800190bc:	00013617          	auipc	a2,0x13
    800190c0:	68460613          	addi	a2,a2,1668 # 8002c740 <__func__.0+0x5b80>
    800190c4:	0000e517          	auipc	a0,0xe
    800190c8:	df450513          	addi	a0,a0,-524 # 80026eb8 <__func__.0+0x2f8>
    800190cc:	6390b0ef          	jal	80024f04 <printf>
    800190d0:	00030797          	auipc	a5,0x30
    800190d4:	f417c783          	lbu	a5,-191(a5) # 80049011 <excpt+0x1>
    800190d8:	0000e597          	auipc	a1,0xe
    800190dc:	db858593          	addi	a1,a1,-584 # 80026e90 <__func__.0+0x2d0>
    800190e0:	cf89                	beqz	a5,800190fa <load_guest_page_fault_12+0xe6>
    800190e2:	6418                	ld	a4,8(s0)
    800190e4:	47d5                	li	a5,21
    800190e6:	0000e597          	auipc	a1,0xe
    800190ea:	d9a58593          	addi	a1,a1,-614 # 80026e80 <__func__.0+0x2c0>
    800190ee:	00f70663          	beq	a4,a5,800190fa <load_guest_page_fault_12+0xe6>
    800190f2:	0000e597          	auipc	a1,0xe
    800190f6:	d9e58593          	addi	a1,a1,-610 # 80026e90 <__func__.0+0x2d0>
    800190fa:	0000e517          	auipc	a0,0xe
    800190fe:	dd650513          	addi	a0,a0,-554 # 80026ed0 <__func__.0+0x310>
    80019102:	6030b0ef          	jal	80024f04 <printf>
    80019106:	00030797          	auipc	a5,0x30
    8001910a:	f0b7c783          	lbu	a5,-245(a5) # 80049011 <excpt+0x1>
    8001910e:	c789                	beqz	a5,80019118 <load_guest_page_fault_12+0x104>
    80019110:	6418                	ld	a4,8(s0)
    80019112:	47d5                	li	a5,21
    80019114:	00f70c63          	beq	a4,a5,8001912c <load_guest_page_fault_12+0x118>
    80019118:	0000e517          	auipc	a0,0xe
    8001911c:	dc050513          	addi	a0,a0,-576 # 80026ed8 <__func__.0+0x318>
    80019120:	5e50b0ef          	jal	80024f04 <printf>
    80019124:	02900513          	li	a0,41
    80019128:	3e70a0ef          	jal	80023d0e <putchar>
    8001912c:	4529                	li	a0,10
    8001912e:	3e10a0ef          	jal	80023d0e <putchar>
    80019132:	00030497          	auipc	s1,0x30
    80019136:	edf4c483          	lbu	s1,-289(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001913a:	0000e597          	auipc	a1,0xe
    8001913e:	d5658593          	addi	a1,a1,-682 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80019142:	cc91                	beqz	s1,8001915e <load_guest_page_fault_12+0x14a>
    80019144:	6418                	ld	a4,8(s0)
    80019146:	47d5                	li	a5,21
    TEST_END();
    80019148:	0000e597          	auipc	a1,0xe
    8001914c:	d3858593          	addi	a1,a1,-712 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80019150:	00f70763          	beq	a4,a5,8001915e <load_guest_page_fault_12+0x14a>
    80019154:	4481                	li	s1,0
    TEST_END();
    80019156:	0000e597          	auipc	a1,0xe
    8001915a:	d3a58593          	addi	a1,a1,-710 # 80026e90 <__func__.0+0x2d0>
    8001915e:	0000e517          	auipc	a0,0xe
    80019162:	dda50513          	addi	a0,a0,-550 # 80026f38 <__func__.0+0x378>
    80019166:	59f0b0ef          	jal	80024f04 <printf>
    8001916a:	4511                	li	a0,4
    8001916c:	a8be70ef          	jal	80000bf6 <goto_priv>
    80019170:	b3ce80ef          	jal	800014ac <reset_state>
}
    80019174:	60e2                	ld	ra,24(sp)
    80019176:	6442                	ld	s0,16(sp)
    80019178:	8526                	mv	a0,s1
    8001917a:	64a2                	ld	s1,8(sp)
    8001917c:	6105                	addi	sp,sp,32
    8001917e:	8082                	ret

0000000080019180 <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80019180:	1101                	addi	sp,sp,-32

    TEST_START();
    80019182:	0000d597          	auipc	a1,0xd
    80019186:	f3e58593          	addi	a1,a1,-194 # 800260c0 <__func__.24>
    8001918a:	0000e517          	auipc	a0,0xe
    8001918e:	d1650513          	addi	a0,a0,-746 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_13(){
    80019192:	ec06                	sd	ra,24(sp)
    80019194:	e822                	sd	s0,16(sp)
    80019196:	e426                	sd	s1,8(sp)
    TEST_START();
    80019198:	56d0b0ef          	jal	80024f04 <printf>
    8001919c:	4529                	li	a0,10
    8001919e:	3710a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800191a2:	450d                	li	a0,3
    800191a4:	a53e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800191a8:	c38e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800191ac:	e76e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    800191b0:	d00e70ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800191b4:	4511                	li	a0,4
    800191b6:	a41e70ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    800191ba:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    800191be:	450d                	li	a0,3
    800191c0:	a37e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800191c4:	4509                	li	a0,2
    800191c6:	951e70ef          	jal	80000b16 <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800191ca:	0330000f          	fence	rw,rw
    800191ce:	00030417          	auipc	s0,0x30
    800191d2:	e4240413          	addi	s0,s0,-446 # 80049010 <excpt>
    800191d6:	4785                	li	a5,1
    800191d8:	00030717          	auipc	a4,0x30
    800191dc:	e6073823          	sd	zero,-400(a4) # 80049048 <excpt+0x38>
    800191e0:	00f41023          	sh	a5,0(s0)
    800191e4:	0330000f          	fence	rw,rw
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800191e8:	000807b7          	lui	a5,0x80
    800191ec:	1007a073          	csrs	sstatus,a5
    800191f0:	400197b7          	lui	a5,0x40019
    800191f4:	078a                	slli	a5,a5,0x2
    800191f6:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800191fa:	08200593          	li	a1,130
    800191fe:	00013617          	auipc	a2,0x13
    80019202:	5a260613          	addi	a2,a2,1442 # 8002c7a0 <__func__.0+0x5be0>
    80019206:	0000e517          	auipc	a0,0xe
    8001920a:	cb250513          	addi	a0,a0,-846 # 80026eb8 <__func__.0+0x2f8>
    8001920e:	4f70b0ef          	jal	80024f04 <printf>
    80019212:	00030797          	auipc	a5,0x30
    80019216:	dff7c783          	lbu	a5,-513(a5) # 80049011 <excpt+0x1>
    8001921a:	0000e597          	auipc	a1,0xe
    8001921e:	c7658593          	addi	a1,a1,-906 # 80026e90 <__func__.0+0x2d0>
    80019222:	cf89                	beqz	a5,8001923c <load_guest_page_fault_13+0xbc>
    80019224:	6418                	ld	a4,8(s0)
    80019226:	47d5                	li	a5,21
    80019228:	0000e597          	auipc	a1,0xe
    8001922c:	c5858593          	addi	a1,a1,-936 # 80026e80 <__func__.0+0x2c0>
    80019230:	00f70663          	beq	a4,a5,8001923c <load_guest_page_fault_13+0xbc>
    80019234:	0000e597          	auipc	a1,0xe
    80019238:	c5c58593          	addi	a1,a1,-932 # 80026e90 <__func__.0+0x2d0>
    8001923c:	0000e517          	auipc	a0,0xe
    80019240:	c9450513          	addi	a0,a0,-876 # 80026ed0 <__func__.0+0x310>
    80019244:	4c10b0ef          	jal	80024f04 <printf>
    80019248:	00030797          	auipc	a5,0x30
    8001924c:	dc97c783          	lbu	a5,-567(a5) # 80049011 <excpt+0x1>
    80019250:	c789                	beqz	a5,8001925a <load_guest_page_fault_13+0xda>
    80019252:	6418                	ld	a4,8(s0)
    80019254:	47d5                	li	a5,21
    80019256:	00f70c63          	beq	a4,a5,8001926e <load_guest_page_fault_13+0xee>
    8001925a:	0000e517          	auipc	a0,0xe
    8001925e:	c7e50513          	addi	a0,a0,-898 # 80026ed8 <__func__.0+0x318>
    80019262:	4a30b0ef          	jal	80024f04 <printf>
    80019266:	02900513          	li	a0,41
    8001926a:	2a50a0ef          	jal	80023d0e <putchar>
    8001926e:	4529                	li	a0,10
    80019270:	29f0a0ef          	jal	80023d0e <putchar>
    80019274:	00030497          	auipc	s1,0x30
    80019278:	d9d4c483          	lbu	s1,-611(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    8001927c:	0000e597          	auipc	a1,0xe
    80019280:	c1458593          	addi	a1,a1,-1004 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80019284:	cc91                	beqz	s1,800192a0 <load_guest_page_fault_13+0x120>
    80019286:	6418                	ld	a4,8(s0)
    80019288:	47d5                	li	a5,21
    TEST_END();
    8001928a:	0000e597          	auipc	a1,0xe
    8001928e:	bf658593          	addi	a1,a1,-1034 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80019292:	00f70763          	beq	a4,a5,800192a0 <load_guest_page_fault_13+0x120>
    80019296:	4481                	li	s1,0
    TEST_END();
    80019298:	0000e597          	auipc	a1,0xe
    8001929c:	bf858593          	addi	a1,a1,-1032 # 80026e90 <__func__.0+0x2d0>
    800192a0:	0000e517          	auipc	a0,0xe
    800192a4:	c9850513          	addi	a0,a0,-872 # 80026f38 <__func__.0+0x378>
    800192a8:	45d0b0ef          	jal	80024f04 <printf>
    800192ac:	4511                	li	a0,4
    800192ae:	949e70ef          	jal	80000bf6 <goto_priv>
    800192b2:	9fae80ef          	jal	800014ac <reset_state>
}
    800192b6:	60e2                	ld	ra,24(sp)
    800192b8:	6442                	ld	s0,16(sp)
    800192ba:	8526                	mv	a0,s1
    800192bc:	64a2                	ld	s1,8(sp)
    800192be:	6105                	addi	sp,sp,32
    800192c0:	8082                	ret

00000000800192c2 <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    800192c2:	1101                	addi	sp,sp,-32

    TEST_START();
    800192c4:	0000d597          	auipc	a1,0xd
    800192c8:	e1c58593          	addi	a1,a1,-484 # 800260e0 <__func__.23>
    800192cc:	0000e517          	auipc	a0,0xe
    800192d0:	bd450513          	addi	a0,a0,-1068 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_14(){
    800192d4:	ec06                	sd	ra,24(sp)
    800192d6:	e822                	sd	s0,16(sp)
    800192d8:	e426                	sd	s1,8(sp)
    TEST_START();
    800192da:	42b0b0ef          	jal	80024f04 <printf>
    800192de:	4529                	li	a0,10
    800192e0:	22f0a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800192e4:	450d                	li	a0,3
    800192e6:	911e70ef          	jal	80000bf6 <goto_priv>
    hpt_init();
    800192ea:	d38e70ef          	jal	80000822 <hpt_init>
    hspt_init();
    800192ee:	af2e70ef          	jal	800005e0 <hspt_init>
    vspt_init();
    800192f2:	bbee70ef          	jal	800006b0 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800192f6:	4511                	li	a0,4
    800192f8:	8ffe70ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800192fc:	000407b7          	lui	a5,0x40
    80019300:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80019304:	28005073          	csrwi	vsatp,0
    
    goto_priv(PRIV_HS);
    80019308:	450d                	li	a0,3
    8001930a:	8ede70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001930e:	4509                	li	a0,2
    80019310:	807e70ef          	jal	80000b16 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019314:	0330000f          	fence	rw,rw
    80019318:	00030417          	auipc	s0,0x30
    8001931c:	cf840413          	addi	s0,s0,-776 # 80049010 <excpt>
    80019320:	4785                	li	a5,1
    80019322:	00030717          	auipc	a4,0x30
    80019326:	d2073323          	sd	zero,-730(a4) # 80049048 <excpt+0x38>
    8001932a:	00f41023          	sh	a5,0(s0)
    8001932e:	0330000f          	fence	rw,rw
    asm volatile(
    80019332:	001007b7          	lui	a5,0x100
    80019336:	06778793          	addi	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    8001933a:	07b2                	slli	a5,a5,0xc
    8001933c:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80019340:	640c                	ld	a1,8(s0)
    80019342:	0000e517          	auipc	a0,0xe
    80019346:	6a650513          	addi	a0,a0,1702 # 800279e8 <__func__.0+0xe28>
    8001934a:	3bb0b0ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.triggered);
    8001934e:	00030597          	auipc	a1,0x30
    80019352:	cc35c583          	lbu	a1,-829(a1) # 80049011 <excpt+0x1>
    80019356:	0000e517          	auipc	a0,0xe
    8001935a:	69250513          	addi	a0,a0,1682 # 800279e8 <__func__.0+0xe28>
    8001935e:	3a70b0ef          	jal	80024f04 <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80019362:	08200593          	li	a1,130
    80019366:	00013617          	auipc	a2,0x13
    8001936a:	6d260613          	addi	a2,a2,1746 # 8002ca38 <__func__.0+0x5e78>
    8001936e:	0000e517          	auipc	a0,0xe
    80019372:	b4a50513          	addi	a0,a0,-1206 # 80026eb8 <__func__.0+0x2f8>
    80019376:	38f0b0ef          	jal	80024f04 <printf>
    8001937a:	00030797          	auipc	a5,0x30
    8001937e:	c977c783          	lbu	a5,-873(a5) # 80049011 <excpt+0x1>
    80019382:	0000e597          	auipc	a1,0xe
    80019386:	b0e58593          	addi	a1,a1,-1266 # 80026e90 <__func__.0+0x2d0>
    8001938a:	cf89                	beqz	a5,800193a4 <load_guest_page_fault_14+0xe2>
    8001938c:	6418                	ld	a4,8(s0)
    8001938e:	47d5                	li	a5,21
    80019390:	0000e597          	auipc	a1,0xe
    80019394:	af058593          	addi	a1,a1,-1296 # 80026e80 <__func__.0+0x2c0>
    80019398:	00f70663          	beq	a4,a5,800193a4 <load_guest_page_fault_14+0xe2>
    8001939c:	0000e597          	auipc	a1,0xe
    800193a0:	af458593          	addi	a1,a1,-1292 # 80026e90 <__func__.0+0x2d0>
    800193a4:	0000e517          	auipc	a0,0xe
    800193a8:	b2c50513          	addi	a0,a0,-1236 # 80026ed0 <__func__.0+0x310>
    800193ac:	3590b0ef          	jal	80024f04 <printf>
    800193b0:	00030797          	auipc	a5,0x30
    800193b4:	c617c783          	lbu	a5,-927(a5) # 80049011 <excpt+0x1>
    800193b8:	c789                	beqz	a5,800193c2 <load_guest_page_fault_14+0x100>
    800193ba:	6418                	ld	a4,8(s0)
    800193bc:	47d5                	li	a5,21
    800193be:	00f70c63          	beq	a4,a5,800193d6 <load_guest_page_fault_14+0x114>
    800193c2:	0000e517          	auipc	a0,0xe
    800193c6:	b1650513          	addi	a0,a0,-1258 # 80026ed8 <__func__.0+0x318>
    800193ca:	33b0b0ef          	jal	80024f04 <printf>
    800193ce:	02900513          	li	a0,41
    800193d2:	13d0a0ef          	jal	80023d0e <putchar>
    800193d6:	4529                	li	a0,10
    800193d8:	1370a0ef          	jal	80023d0e <putchar>
    800193dc:	00030497          	auipc	s1,0x30
    800193e0:	c354c483          	lbu	s1,-971(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800193e4:	0000e597          	auipc	a1,0xe
    800193e8:	aac58593          	addi	a1,a1,-1364 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    800193ec:	cc91                	beqz	s1,80019408 <load_guest_page_fault_14+0x146>
    800193ee:	6418                	ld	a4,8(s0)
    800193f0:	47d5                	li	a5,21
    TEST_END();
    800193f2:	0000e597          	auipc	a1,0xe
    800193f6:	a8e58593          	addi	a1,a1,-1394 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    800193fa:	00f70763          	beq	a4,a5,80019408 <load_guest_page_fault_14+0x146>
    800193fe:	4481                	li	s1,0
    TEST_END();
    80019400:	0000e597          	auipc	a1,0xe
    80019404:	a9058593          	addi	a1,a1,-1392 # 80026e90 <__func__.0+0x2d0>
    80019408:	0000e517          	auipc	a0,0xe
    8001940c:	b3050513          	addi	a0,a0,-1232 # 80026f38 <__func__.0+0x378>
    80019410:	2f50b0ef          	jal	80024f04 <printf>
    80019414:	4511                	li	a0,4
    80019416:	fe0e70ef          	jal	80000bf6 <goto_priv>
    8001941a:	892e80ef          	jal	800014ac <reset_state>
}
    8001941e:	60e2                	ld	ra,24(sp)
    80019420:	6442                	ld	s0,16(sp)
    80019422:	8526                	mv	a0,s1
    80019424:	64a2                	ld	s1,8(sp)
    80019426:	6105                	addi	sp,sp,32
    80019428:	8082                	ret

000000008001942a <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    8001942a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001942c:	0000d597          	auipc	a1,0xd
    80019430:	cd458593          	addi	a1,a1,-812 # 80026100 <__func__.22>
    80019434:	0000e517          	auipc	a0,0xe
    80019438:	a6c50513          	addi	a0,a0,-1428 # 80026ea0 <__func__.0+0x2e0>
bool load_guest_page_fault_15(){
    8001943c:	e406                	sd	ra,8(sp)
    8001943e:	e022                	sd	s0,0(sp)
    TEST_START();
    80019440:	2c50b0ef          	jal	80024f04 <printf>
    80019444:	4529                	li	a0,10
    80019446:	0c90a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001944a:	450d                	li	a0,3
    8001944c:	faae70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019450:	990e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019454:	bcee70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019458:	a58e70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001945c:	4511                	li	a0,4
    8001945e:	f98e70ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80019462:	000407b7          	lui	a5,0x40
    80019466:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    8001946a:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    8001946e:	450d                	li	a0,3
    80019470:	f86e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019474:	4509                	li	a0,2
    80019476:	ea0e70ef          	jal	80000b16 <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001947a:	0330000f          	fence	rw,rw
    8001947e:	4785                	li	a5,1
    80019480:	00030717          	auipc	a4,0x30
    80019484:	bc073423          	sd	zero,-1080(a4) # 80049048 <excpt+0x38>
    80019488:	00030717          	auipc	a4,0x30
    8001948c:	b8f71423          	sh	a5,-1144(a4) # 80049010 <excpt>
    80019490:	0330000f          	fence	rw,rw
    80019494:	000807b7          	lui	a5,0x80
    80019498:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001949a:	07b6                	slli	a5,a5,0xd
    8001949c:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800194a0:	08200593          	li	a1,130
    800194a4:	00013617          	auipc	a2,0x13
    800194a8:	b6460613          	addi	a2,a2,-1180 # 8002c008 <__func__.0+0x5448>
    800194ac:	0000e517          	auipc	a0,0xe
    800194b0:	a0c50513          	addi	a0,a0,-1524 # 80026eb8 <__func__.0+0x2f8>
    800194b4:	2510b0ef          	jal	80024f04 <printf>
    800194b8:	00030797          	auipc	a5,0x30
    800194bc:	b597c783          	lbu	a5,-1191(a5) # 80049011 <excpt+0x1>
    800194c0:	0000e597          	auipc	a1,0xe
    800194c4:	9c058593          	addi	a1,a1,-1600 # 80026e80 <__func__.0+0x2c0>
    800194c8:	c789                	beqz	a5,800194d2 <load_guest_page_fault_15+0xa8>
    800194ca:	0000e597          	auipc	a1,0xe
    800194ce:	9c658593          	addi	a1,a1,-1594 # 80026e90 <__func__.0+0x2d0>
    800194d2:	0000e517          	auipc	a0,0xe
    800194d6:	9fe50513          	addi	a0,a0,-1538 # 80026ed0 <__func__.0+0x310>
    800194da:	22b0b0ef          	jal	80024f04 <printf>
    800194de:	00030797          	auipc	a5,0x30
    800194e2:	b337c783          	lbu	a5,-1229(a5) # 80049011 <excpt+0x1>
    800194e6:	e7a1                	bnez	a5,8001952e <load_guest_page_fault_15+0x104>
    800194e8:	4529                	li	a0,10
    800194ea:	0250a0ef          	jal	80023d0e <putchar>
    800194ee:	00030797          	auipc	a5,0x30
    800194f2:	b237c783          	lbu	a5,-1245(a5) # 80049011 <excpt+0x1>
    800194f6:	e795                	bnez	a5,80019522 <load_guest_page_fault_15+0xf8>
    800194f8:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800194fa:	0000e597          	auipc	a1,0xe
    800194fe:	98658593          	addi	a1,a1,-1658 # 80026e80 <__func__.0+0x2c0>
    80019502:	0000e517          	auipc	a0,0xe
    80019506:	a3650513          	addi	a0,a0,-1482 # 80026f38 <__func__.0+0x378>
    8001950a:	1fb0b0ef          	jal	80024f04 <printf>
    8001950e:	4511                	li	a0,4
    80019510:	ee6e70ef          	jal	80000bf6 <goto_priv>
    80019514:	f99e70ef          	jal	800014ac <reset_state>
}
    80019518:	60a2                	ld	ra,8(sp)
    8001951a:	8522                	mv	a0,s0
    8001951c:	6402                	ld	s0,0(sp)
    8001951e:	0141                	addi	sp,sp,16
    80019520:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80019522:	4401                	li	s0,0
    TEST_END();
    80019524:	0000e597          	auipc	a1,0xe
    80019528:	96c58593          	addi	a1,a1,-1684 # 80026e90 <__func__.0+0x2d0>
    8001952c:	bfd9                	j	80019502 <load_guest_page_fault_15+0xd8>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001952e:	0000e517          	auipc	a0,0xe
    80019532:	9aa50513          	addi	a0,a0,-1622 # 80026ed8 <__func__.0+0x318>
    80019536:	1cf0b0ef          	jal	80024f04 <printf>
    8001953a:	02900513          	li	a0,41
    8001953e:	7d00a0ef          	jal	80023d0e <putchar>
    80019542:	b75d                	j	800194e8 <load_guest_page_fault_15+0xbe>

0000000080019544 <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    80019544:	1101                	addi	sp,sp,-32

    TEST_START();
    80019546:	0000d597          	auipc	a1,0xd
    8001954a:	bda58593          	addi	a1,a1,-1062 # 80026120 <__func__.21>
    8001954e:	0000e517          	auipc	a0,0xe
    80019552:	95250513          	addi	a0,a0,-1710 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_1(){
    80019556:	ec06                	sd	ra,24(sp)
    80019558:	e822                	sd	s0,16(sp)
    8001955a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001955c:	1a90b0ef          	jal	80024f04 <printf>
    80019560:	4529                	li	a0,10
    80019562:	7ac0a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80019566:	450d                	li	a0,3
    80019568:	e8ee70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001956c:	874e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019570:	ab2e70ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019574:	93ce70ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80019578:	450d                	li	a0,3
    8001957a:	e7ce70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001957e:	4509                	li	a0,2
    80019580:	d96e70ef          	jal	80000b16 <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80019584:	0330000f          	fence	rw,rw
    80019588:	00030417          	auipc	s0,0x30
    8001958c:	a8840413          	addi	s0,s0,-1400 # 80049010 <excpt>
    80019590:	4785                	li	a5,1
    80019592:	00030717          	auipc	a4,0x30
    80019596:	aa073b23          	sd	zero,-1354(a4) # 80049048 <excpt+0x38>
    8001959a:	00f41023          	sh	a5,0(s0)
    8001959e:	0330000f          	fence	rw,rw
    asm volatile(
    800195a2:	37ab77b7          	lui	a5,0x37ab7
    800195a6:	00100737          	lui	a4,0x100
    800195aa:	078a                	slli	a5,a5,0x2
    800195ac:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800195b0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800195b4:	0732                	slli	a4,a4,0xc
    800195b6:	6ef74073          	.insn	4, 0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    800195ba:	08200593          	li	a1,130
    800195be:	00013617          	auipc	a2,0x13
    800195c2:	4ba60613          	addi	a2,a2,1210 # 8002ca78 <__func__.0+0x5eb8>
    800195c6:	0000e517          	auipc	a0,0xe
    800195ca:	8f250513          	addi	a0,a0,-1806 # 80026eb8 <__func__.0+0x2f8>
    800195ce:	1370b0ef          	jal	80024f04 <printf>
    800195d2:	00030797          	auipc	a5,0x30
    800195d6:	a3f7c783          	lbu	a5,-1473(a5) # 80049011 <excpt+0x1>
    800195da:	0000e597          	auipc	a1,0xe
    800195de:	8b658593          	addi	a1,a1,-1866 # 80026e90 <__func__.0+0x2d0>
    800195e2:	cf89                	beqz	a5,800195fc <store_guest_page_fault_1+0xb8>
    800195e4:	6418                	ld	a4,8(s0)
    800195e6:	47dd                	li	a5,23
    800195e8:	0000e597          	auipc	a1,0xe
    800195ec:	89858593          	addi	a1,a1,-1896 # 80026e80 <__func__.0+0x2c0>
    800195f0:	00f70663          	beq	a4,a5,800195fc <store_guest_page_fault_1+0xb8>
    800195f4:	0000e597          	auipc	a1,0xe
    800195f8:	89c58593          	addi	a1,a1,-1892 # 80026e90 <__func__.0+0x2d0>
    800195fc:	0000e517          	auipc	a0,0xe
    80019600:	8d450513          	addi	a0,a0,-1836 # 80026ed0 <__func__.0+0x310>
    80019604:	1010b0ef          	jal	80024f04 <printf>
    80019608:	00030797          	auipc	a5,0x30
    8001960c:	a097c783          	lbu	a5,-1527(a5) # 80049011 <excpt+0x1>
    80019610:	c789                	beqz	a5,8001961a <store_guest_page_fault_1+0xd6>
    80019612:	6418                	ld	a4,8(s0)
    80019614:	47dd                	li	a5,23
    80019616:	00f70c63          	beq	a4,a5,8001962e <store_guest_page_fault_1+0xea>
    8001961a:	0000e517          	auipc	a0,0xe
    8001961e:	8be50513          	addi	a0,a0,-1858 # 80026ed8 <__func__.0+0x318>
    80019622:	0e30b0ef          	jal	80024f04 <printf>
    80019626:	02900513          	li	a0,41
    8001962a:	6e40a0ef          	jal	80023d0e <putchar>
    8001962e:	4529                	li	a0,10
    80019630:	6de0a0ef          	jal	80023d0e <putchar>
    80019634:	00030797          	auipc	a5,0x30
    80019638:	9dd7c783          	lbu	a5,-1571(a5) # 80049011 <excpt+0x1>
    8001963c:	4481                	li	s1,0
    8001963e:	c789                	beqz	a5,80019648 <store_guest_page_fault_1+0x104>
    80019640:	6404                	ld	s1,8(s0)
    80019642:	14a5                	addi	s1,s1,-23
    80019644:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80019648:	0330000f          	fence	rw,rw
    8001964c:	4785                	li	a5,1
    8001964e:	00030717          	auipc	a4,0x30
    80019652:	9e073d23          	sd	zero,-1542(a4) # 80049048 <excpt+0x38>
    80019656:	00f41023          	sh	a5,0(s0)
    8001965a:	0330000f          	fence	rw,rw
    asm volatile(
    8001965e:	001007b7          	lui	a5,0x100
    80019662:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80019666:	6731                	lui	a4,0xc
    80019668:	07b2                	slli	a5,a5,0xc
    8001966a:	eef70713          	addi	a4,a4,-273 # beef <_test_table_size+0xbeee>
    8001966e:	66e7c073          	.insn	4, 0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019672:	08200593          	li	a1,130
    80019676:	00013617          	auipc	a2,0x13
    8001967a:	45260613          	addi	a2,a2,1106 # 8002cac8 <__func__.0+0x5f08>
    8001967e:	0000e517          	auipc	a0,0xe
    80019682:	83a50513          	addi	a0,a0,-1990 # 80026eb8 <__func__.0+0x2f8>
    80019686:	07f0b0ef          	jal	80024f04 <printf>
    8001968a:	00030797          	auipc	a5,0x30
    8001968e:	9877c783          	lbu	a5,-1657(a5) # 80049011 <excpt+0x1>
    80019692:	0000d597          	auipc	a1,0xd
    80019696:	7fe58593          	addi	a1,a1,2046 # 80026e90 <__func__.0+0x2d0>
    8001969a:	cf89                	beqz	a5,800196b4 <store_guest_page_fault_1+0x170>
    8001969c:	6418                	ld	a4,8(s0)
    8001969e:	47dd                	li	a5,23
    800196a0:	0000d597          	auipc	a1,0xd
    800196a4:	7e058593          	addi	a1,a1,2016 # 80026e80 <__func__.0+0x2c0>
    800196a8:	00f70663          	beq	a4,a5,800196b4 <store_guest_page_fault_1+0x170>
    800196ac:	0000d597          	auipc	a1,0xd
    800196b0:	7e458593          	addi	a1,a1,2020 # 80026e90 <__func__.0+0x2d0>
    800196b4:	0000e517          	auipc	a0,0xe
    800196b8:	81c50513          	addi	a0,a0,-2020 # 80026ed0 <__func__.0+0x310>
    800196bc:	0490b0ef          	jal	80024f04 <printf>
    800196c0:	00030797          	auipc	a5,0x30
    800196c4:	9517c783          	lbu	a5,-1711(a5) # 80049011 <excpt+0x1>
    800196c8:	c789                	beqz	a5,800196d2 <store_guest_page_fault_1+0x18e>
    800196ca:	6418                	ld	a4,8(s0)
    800196cc:	47dd                	li	a5,23
    800196ce:	00f70c63          	beq	a4,a5,800196e6 <store_guest_page_fault_1+0x1a2>
    800196d2:	0000e517          	auipc	a0,0xe
    800196d6:	80650513          	addi	a0,a0,-2042 # 80026ed8 <__func__.0+0x318>
    800196da:	02b0b0ef          	jal	80024f04 <printf>
    800196de:	02900513          	li	a0,41
    800196e2:	62c0a0ef          	jal	80023d0e <putchar>
    800196e6:	4529                	li	a0,10
    800196e8:	6260a0ef          	jal	80023d0e <putchar>
    800196ec:	c095                	beqz	s1,80019710 <store_guest_page_fault_1+0x1cc>
    800196ee:	00030497          	auipc	s1,0x30
    800196f2:	9234c483          	lbu	s1,-1757(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800196f6:	0000d597          	auipc	a1,0xd
    800196fa:	79a58593          	addi	a1,a1,1946 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800196fe:	cc91                	beqz	s1,8001971a <store_guest_page_fault_1+0x1d6>
    80019700:	6418                	ld	a4,8(s0)
    80019702:	47dd                	li	a5,23
    TEST_END();
    80019704:	0000d597          	auipc	a1,0xd
    80019708:	77c58593          	addi	a1,a1,1916 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001970c:	00f70763          	beq	a4,a5,8001971a <store_guest_page_fault_1+0x1d6>
    80019710:	4481                	li	s1,0
    TEST_END();
    80019712:	0000d597          	auipc	a1,0xd
    80019716:	77e58593          	addi	a1,a1,1918 # 80026e90 <__func__.0+0x2d0>
    8001971a:	0000e517          	auipc	a0,0xe
    8001971e:	81e50513          	addi	a0,a0,-2018 # 80026f38 <__func__.0+0x378>
    80019722:	7e20b0ef          	jal	80024f04 <printf>
    80019726:	4511                	li	a0,4
    80019728:	ccee70ef          	jal	80000bf6 <goto_priv>
    8001972c:	d81e70ef          	jal	800014ac <reset_state>

}
    80019730:	60e2                	ld	ra,24(sp)
    80019732:	6442                	ld	s0,16(sp)
    80019734:	8526                	mv	a0,s1
    80019736:	64a2                	ld	s1,8(sp)
    80019738:	6105                	addi	sp,sp,32
    8001973a:	8082                	ret

000000008001973c <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    8001973c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001973e:	0000d597          	auipc	a1,0xd
    80019742:	a0258593          	addi	a1,a1,-1534 # 80026140 <__func__.20>
    80019746:	0000d517          	auipc	a0,0xd
    8001974a:	75a50513          	addi	a0,a0,1882 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_2(){
    8001974e:	ec06                	sd	ra,24(sp)
    80019750:	e822                	sd	s0,16(sp)
    80019752:	e426                	sd	s1,8(sp)
    TEST_START();
    80019754:	7b00b0ef          	jal	80024f04 <printf>
    80019758:	4529                	li	a0,10
    8001975a:	5b40a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001975e:	450d                	li	a0,3
    80019760:	c96e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019764:	e7de60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019768:	8bae70ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001976c:	f45e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80019770:	450d                	li	a0,3
    80019772:	c84e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019776:	4509                	li	a0,2
    80019778:	b9ee70ef          	jal	80000b16 <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001977c:	0330000f          	fence	rw,rw
    80019780:	00030417          	auipc	s0,0x30
    80019784:	89040413          	addi	s0,s0,-1904 # 80049010 <excpt>
    80019788:	4785                	li	a5,1
    8001978a:	00030717          	auipc	a4,0x30
    8001978e:	8a073f23          	sd	zero,-1858(a4) # 80049048 <excpt+0x38>
    80019792:	00f41023          	sh	a5,0(s0)
    80019796:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001979a:	000807b7          	lui	a5,0x80
    8001979e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    800197a2:	37ab77b7          	lui	a5,0x37ab7
    800197a6:	00100737          	lui	a4,0x100
    800197aa:	078a                	slli	a5,a5,0x2
    800197ac:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800197b0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800197b4:	0732                	slli	a4,a4,0xc
    800197b6:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800197ba:	08200593          	li	a1,130
    800197be:	00013617          	auipc	a2,0x13
    800197c2:	36a60613          	addi	a2,a2,874 # 8002cb28 <__func__.0+0x5f68>
    800197c6:	0000d517          	auipc	a0,0xd
    800197ca:	6f250513          	addi	a0,a0,1778 # 80026eb8 <__func__.0+0x2f8>
    800197ce:	7360b0ef          	jal	80024f04 <printf>
    800197d2:	00030797          	auipc	a5,0x30
    800197d6:	83f7c783          	lbu	a5,-1985(a5) # 80049011 <excpt+0x1>
    800197da:	0000d597          	auipc	a1,0xd
    800197de:	6b658593          	addi	a1,a1,1718 # 80026e90 <__func__.0+0x2d0>
    800197e2:	cf89                	beqz	a5,800197fc <store_guest_page_fault_2+0xc0>
    800197e4:	6418                	ld	a4,8(s0)
    800197e6:	47dd                	li	a5,23
    800197e8:	0000d597          	auipc	a1,0xd
    800197ec:	69858593          	addi	a1,a1,1688 # 80026e80 <__func__.0+0x2c0>
    800197f0:	00f70663          	beq	a4,a5,800197fc <store_guest_page_fault_2+0xc0>
    800197f4:	0000d597          	auipc	a1,0xd
    800197f8:	69c58593          	addi	a1,a1,1692 # 80026e90 <__func__.0+0x2d0>
    800197fc:	0000d517          	auipc	a0,0xd
    80019800:	6d450513          	addi	a0,a0,1748 # 80026ed0 <__func__.0+0x310>
    80019804:	7000b0ef          	jal	80024f04 <printf>
    80019808:	00030797          	auipc	a5,0x30
    8001980c:	8097c783          	lbu	a5,-2039(a5) # 80049011 <excpt+0x1>
    80019810:	c789                	beqz	a5,8001981a <store_guest_page_fault_2+0xde>
    80019812:	6418                	ld	a4,8(s0)
    80019814:	47dd                	li	a5,23
    80019816:	00f70c63          	beq	a4,a5,8001982e <store_guest_page_fault_2+0xf2>
    8001981a:	0000d517          	auipc	a0,0xd
    8001981e:	6be50513          	addi	a0,a0,1726 # 80026ed8 <__func__.0+0x318>
    80019822:	6e20b0ef          	jal	80024f04 <printf>
    80019826:	02900513          	li	a0,41
    8001982a:	4e40a0ef          	jal	80023d0e <putchar>
    8001982e:	4529                	li	a0,10
    80019830:	4de0a0ef          	jal	80023d0e <putchar>
    80019834:	0002f497          	auipc	s1,0x2f
    80019838:	7dd4c483          	lbu	s1,2013(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001983c:	0000d597          	auipc	a1,0xd
    80019840:	65458593          	addi	a1,a1,1620 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019844:	cc91                	beqz	s1,80019860 <store_guest_page_fault_2+0x124>
    80019846:	6418                	ld	a4,8(s0)
    80019848:	47dd                	li	a5,23
    TEST_END();
    8001984a:	0000d597          	auipc	a1,0xd
    8001984e:	63658593          	addi	a1,a1,1590 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019852:	00f70763          	beq	a4,a5,80019860 <store_guest_page_fault_2+0x124>
    80019856:	4481                	li	s1,0
    TEST_END();
    80019858:	0000d597          	auipc	a1,0xd
    8001985c:	63858593          	addi	a1,a1,1592 # 80026e90 <__func__.0+0x2d0>
    80019860:	0000d517          	auipc	a0,0xd
    80019864:	6d850513          	addi	a0,a0,1752 # 80026f38 <__func__.0+0x378>
    80019868:	69c0b0ef          	jal	80024f04 <printf>
    8001986c:	4511                	li	a0,4
    8001986e:	b88e70ef          	jal	80000bf6 <goto_priv>
    80019872:	c3be70ef          	jal	800014ac <reset_state>
}
    80019876:	60e2                	ld	ra,24(sp)
    80019878:	6442                	ld	s0,16(sp)
    8001987a:	8526                	mv	a0,s1
    8001987c:	64a2                	ld	s1,8(sp)
    8001987e:	6105                	addi	sp,sp,32
    80019880:	8082                	ret

0000000080019882 <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    80019882:	1101                	addi	sp,sp,-32

    TEST_START();
    80019884:	0000d597          	auipc	a1,0xd
    80019888:	8dc58593          	addi	a1,a1,-1828 # 80026160 <__func__.19>
    8001988c:	0000d517          	auipc	a0,0xd
    80019890:	61450513          	addi	a0,a0,1556 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_3(){
    80019894:	ec06                	sd	ra,24(sp)
    80019896:	e822                	sd	s0,16(sp)
    80019898:	e426                	sd	s1,8(sp)
    TEST_START();
    8001989a:	66a0b0ef          	jal	80024f04 <printf>
    8001989e:	4529                	li	a0,10
    800198a0:	46e0a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800198a4:	450d                	li	a0,3
    800198a6:	b50e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800198aa:	d37e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800198ae:	f75e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    800198b2:	dffe60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800198b6:	450d                	li	a0,3
    800198b8:	b3ee70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    800198bc:	4509                	li	a0,2
    800198be:	a58e70ef          	jal	80000b16 <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800198c2:	0330000f          	fence	rw,rw
    800198c6:	0002f497          	auipc	s1,0x2f
    800198ca:	74a48493          	addi	s1,s1,1866 # 80049010 <excpt>
    800198ce:	4785                	li	a5,1
    800198d0:	0002f717          	auipc	a4,0x2f
    800198d4:	76073c23          	sd	zero,1912(a4) # 80049048 <excpt+0x38>
    800198d8:	00f49023          	sh	a5,0(s1)
    800198dc:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800198e0:	000807b7          	lui	a5,0x80
    800198e4:	1007a073          	csrs	sstatus,a5
    800198e8:	37ab77b7          	lui	a5,0x37ab7
    800198ec:	00100737          	lui	a4,0x100
    800198f0:	078a                	slli	a5,a5,0x2
    800198f2:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800198f6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800198fa:	0732                	slli	a4,a4,0xc
    800198fc:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019900:	08200593          	li	a1,130
    80019904:	00013617          	auipc	a2,0x13
    80019908:	28460613          	addi	a2,a2,644 # 8002cb88 <__func__.0+0x5fc8>
    8001990c:	0000d517          	auipc	a0,0xd
    80019910:	5ac50513          	addi	a0,a0,1452 # 80026eb8 <__func__.0+0x2f8>
    80019914:	5f00b0ef          	jal	80024f04 <printf>
    80019918:	0002f797          	auipc	a5,0x2f
    8001991c:	6f97c783          	lbu	a5,1785(a5) # 80049011 <excpt+0x1>
    80019920:	0000d597          	auipc	a1,0xd
    80019924:	57058593          	addi	a1,a1,1392 # 80026e90 <__func__.0+0x2d0>
    80019928:	cf89                	beqz	a5,80019942 <store_guest_page_fault_3+0xc0>
    8001992a:	6498                	ld	a4,8(s1)
    8001992c:	47dd                	li	a5,23
    8001992e:	0000d597          	auipc	a1,0xd
    80019932:	55258593          	addi	a1,a1,1362 # 80026e80 <__func__.0+0x2c0>
    80019936:	00f70663          	beq	a4,a5,80019942 <store_guest_page_fault_3+0xc0>
    8001993a:	0000d597          	auipc	a1,0xd
    8001993e:	55658593          	addi	a1,a1,1366 # 80026e90 <__func__.0+0x2d0>
    80019942:	0000d517          	auipc	a0,0xd
    80019946:	58e50513          	addi	a0,a0,1422 # 80026ed0 <__func__.0+0x310>
    8001994a:	5ba0b0ef          	jal	80024f04 <printf>
    8001994e:	0002f797          	auipc	a5,0x2f
    80019952:	6c37c783          	lbu	a5,1731(a5) # 80049011 <excpt+0x1>
    80019956:	c789                	beqz	a5,80019960 <store_guest_page_fault_3+0xde>
    80019958:	6498                	ld	a4,8(s1)
    8001995a:	47dd                	li	a5,23
    8001995c:	00f70c63          	beq	a4,a5,80019974 <store_guest_page_fault_3+0xf2>
    80019960:	0000d517          	auipc	a0,0xd
    80019964:	57850513          	addi	a0,a0,1400 # 80026ed8 <__func__.0+0x318>
    80019968:	59c0b0ef          	jal	80024f04 <printf>
    8001996c:	02900513          	li	a0,41
    80019970:	39e0a0ef          	jal	80023d0e <putchar>
    80019974:	4529                	li	a0,10
    80019976:	3980a0ef          	jal	80023d0e <putchar>
    8001997a:	0002f417          	auipc	s0,0x2f
    8001997e:	69744403          	lbu	s0,1687(s0) # 80049011 <excpt+0x1>
    80019982:	c409                	beqz	s0,8001998c <store_guest_page_fault_3+0x10a>
    80019984:	6498                	ld	a4,8(s1)
    80019986:	47dd                	li	a5,23
    80019988:	02f70c63          	beq	a4,a5,800199c0 <store_guest_page_fault_3+0x13e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001998c:	000807b7          	lui	a5,0x80
    80019990:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019994:	4401                	li	s0,0

    TEST_END();
    80019996:	0000d597          	auipc	a1,0xd
    8001999a:	4fa58593          	addi	a1,a1,1274 # 80026e90 <__func__.0+0x2d0>
    8001999e:	0000d517          	auipc	a0,0xd
    800199a2:	59a50513          	addi	a0,a0,1434 # 80026f38 <__func__.0+0x378>
    800199a6:	55e0b0ef          	jal	80024f04 <printf>
    800199aa:	4511                	li	a0,4
    800199ac:	a4ae70ef          	jal	80000bf6 <goto_priv>
    800199b0:	afde70ef          	jal	800014ac <reset_state>
}
    800199b4:	60e2                	ld	ra,24(sp)
    800199b6:	8522                	mv	a0,s0
    800199b8:	6442                	ld	s0,16(sp)
    800199ba:	64a2                	ld	s1,8(sp)
    800199bc:	6105                	addi	sp,sp,32
    800199be:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800199c0:	000807b7          	lui	a5,0x80
    800199c4:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800199c8:	0000d597          	auipc	a1,0xd
    800199cc:	4b858593          	addi	a1,a1,1208 # 80026e80 <__func__.0+0x2c0>
    800199d0:	b7f9                	j	8001999e <store_guest_page_fault_3+0x11c>

00000000800199d2 <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    800199d2:	1101                	addi	sp,sp,-32

    TEST_START();
    800199d4:	0000c597          	auipc	a1,0xc
    800199d8:	7ac58593          	addi	a1,a1,1964 # 80026180 <__func__.18>
    800199dc:	0000d517          	auipc	a0,0xd
    800199e0:	4c450513          	addi	a0,a0,1220 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_4(){
    800199e4:	ec06                	sd	ra,24(sp)
    800199e6:	e822                	sd	s0,16(sp)
    800199e8:	e426                	sd	s1,8(sp)
    TEST_START();
    800199ea:	51a0b0ef          	jal	80024f04 <printf>
    800199ee:	4529                	li	a0,10
    800199f0:	31e0a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    800199f4:	450d                	li	a0,3
    800199f6:	a00e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    800199fa:	be7e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800199fe:	e25e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019a02:	cafe60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80019a06:	4511                	li	a0,4
    80019a08:	9eee70ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80019a0c:	000407b7          	lui	a5,0x40
    80019a10:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80019a14:	450d                	li	a0,3
    80019a16:	9e0e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019a1a:	4509                	li	a0,2
    80019a1c:	8fae70ef          	jal	80000b16 <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019a20:	0330000f          	fence	rw,rw
    80019a24:	0002f417          	auipc	s0,0x2f
    80019a28:	5ec40413          	addi	s0,s0,1516 # 80049010 <excpt>
    80019a2c:	4785                	li	a5,1
    80019a2e:	0002f717          	auipc	a4,0x2f
    80019a32:	60073d23          	sd	zero,1562(a4) # 80049048 <excpt+0x38>
    80019a36:	00f41023          	sh	a5,0(s0)
    80019a3a:	0330000f          	fence	rw,rw
    80019a3e:	37ab77b7          	lui	a5,0x37ab7
    80019a42:	00080737          	lui	a4,0x80
    80019a46:	078a                	slli	a5,a5,0x2
    80019a48:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80019a4a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019a4e:	0736                	slli	a4,a4,0xd
    80019a50:	6ef74073          	.insn	4, 0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80019a54:	08200593          	li	a1,130
    80019a58:	00013617          	auipc	a2,0x13
    80019a5c:	1a060613          	addi	a2,a2,416 # 8002cbf8 <__func__.0+0x6038>
    80019a60:	0000d517          	auipc	a0,0xd
    80019a64:	45850513          	addi	a0,a0,1112 # 80026eb8 <__func__.0+0x2f8>
    80019a68:	49c0b0ef          	jal	80024f04 <printf>
    80019a6c:	0002f797          	auipc	a5,0x2f
    80019a70:	5a57c783          	lbu	a5,1445(a5) # 80049011 <excpt+0x1>
    80019a74:	0000d597          	auipc	a1,0xd
    80019a78:	41c58593          	addi	a1,a1,1052 # 80026e90 <__func__.0+0x2d0>
    80019a7c:	cf89                	beqz	a5,80019a96 <store_guest_page_fault_4+0xc4>
    80019a7e:	6418                	ld	a4,8(s0)
    80019a80:	47bd                	li	a5,15
    80019a82:	0000d597          	auipc	a1,0xd
    80019a86:	3fe58593          	addi	a1,a1,1022 # 80026e80 <__func__.0+0x2c0>
    80019a8a:	00f70663          	beq	a4,a5,80019a96 <store_guest_page_fault_4+0xc4>
    80019a8e:	0000d597          	auipc	a1,0xd
    80019a92:	40258593          	addi	a1,a1,1026 # 80026e90 <__func__.0+0x2d0>
    80019a96:	0000d517          	auipc	a0,0xd
    80019a9a:	43a50513          	addi	a0,a0,1082 # 80026ed0 <__func__.0+0x310>
    80019a9e:	4660b0ef          	jal	80024f04 <printf>
    80019aa2:	0002f797          	auipc	a5,0x2f
    80019aa6:	56f7c783          	lbu	a5,1391(a5) # 80049011 <excpt+0x1>
    80019aaa:	c789                	beqz	a5,80019ab4 <store_guest_page_fault_4+0xe2>
    80019aac:	6418                	ld	a4,8(s0)
    80019aae:	47bd                	li	a5,15
    80019ab0:	00f70c63          	beq	a4,a5,80019ac8 <store_guest_page_fault_4+0xf6>
    80019ab4:	0000d517          	auipc	a0,0xd
    80019ab8:	42450513          	addi	a0,a0,1060 # 80026ed8 <__func__.0+0x318>
    80019abc:	4480b0ef          	jal	80024f04 <printf>
    80019ac0:	02900513          	li	a0,41
    80019ac4:	24a0a0ef          	jal	80023d0e <putchar>
    80019ac8:	4529                	li	a0,10
    80019aca:	2440a0ef          	jal	80023d0e <putchar>
    80019ace:	0002f497          	auipc	s1,0x2f
    80019ad2:	5434c483          	lbu	s1,1347(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80019ad6:	0000d597          	auipc	a1,0xd
    80019ada:	3ba58593          	addi	a1,a1,954 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80019ade:	cc91                	beqz	s1,80019afa <store_guest_page_fault_4+0x128>
    80019ae0:	6418                	ld	a4,8(s0)
    80019ae2:	47bd                	li	a5,15
    TEST_END();
    80019ae4:	0000d597          	auipc	a1,0xd
    80019ae8:	39c58593          	addi	a1,a1,924 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80019aec:	00f70763          	beq	a4,a5,80019afa <store_guest_page_fault_4+0x128>
    80019af0:	4481                	li	s1,0
    TEST_END();
    80019af2:	0000d597          	auipc	a1,0xd
    80019af6:	39e58593          	addi	a1,a1,926 # 80026e90 <__func__.0+0x2d0>
    80019afa:	0000d517          	auipc	a0,0xd
    80019afe:	43e50513          	addi	a0,a0,1086 # 80026f38 <__func__.0+0x378>
    80019b02:	4020b0ef          	jal	80024f04 <printf>
    80019b06:	4511                	li	a0,4
    80019b08:	8eee70ef          	jal	80000bf6 <goto_priv>
    80019b0c:	9a1e70ef          	jal	800014ac <reset_state>
}
    80019b10:	60e2                	ld	ra,24(sp)
    80019b12:	6442                	ld	s0,16(sp)
    80019b14:	8526                	mv	a0,s1
    80019b16:	64a2                	ld	s1,8(sp)
    80019b18:	6105                	addi	sp,sp,32
    80019b1a:	8082                	ret

0000000080019b1c <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    80019b1c:	1141                	addi	sp,sp,-16

    TEST_START();
    80019b1e:	0000c597          	auipc	a1,0xc
    80019b22:	68258593          	addi	a1,a1,1666 # 800261a0 <__func__.17>
    80019b26:	0000d517          	auipc	a0,0xd
    80019b2a:	37a50513          	addi	a0,a0,890 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_5(){
    80019b2e:	e406                	sd	ra,8(sp)
    80019b30:	e022                	sd	s0,0(sp)
    TEST_START();
    80019b32:	3d20b0ef          	jal	80024f04 <printf>
    80019b36:	4529                	li	a0,10
    80019b38:	1d60a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80019b3c:	450d                	li	a0,3
    80019b3e:	8b8e70ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019b42:	a9fe60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019b46:	cdde60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019b4a:	b67e60ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    80019b4e:	4511                	li	a0,4
    80019b50:	8a6e70ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80019b54:	000407b7          	lui	a5,0x40
    80019b58:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80019b5c:	450d                	li	a0,3
    80019b5e:	898e70ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    80019b62:	4509                	li	a0,2
    80019b64:	fb3e60ef          	jal	80000b16 <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019b68:	0330000f          	fence	rw,rw
    80019b6c:	4785                	li	a5,1
    80019b6e:	0002f717          	auipc	a4,0x2f
    80019b72:	4c073d23          	sd	zero,1242(a4) # 80049048 <excpt+0x38>
    80019b76:	0002f717          	auipc	a4,0x2f
    80019b7a:	48f71d23          	sh	a5,1178(a4) # 80049010 <excpt>
    80019b7e:	0330000f          	fence	rw,rw
    asm volatile(
    80019b82:	37ab77b7          	lui	a5,0x37ab7
    80019b86:	00080737          	lui	a4,0x80
    80019b8a:	078a                	slli	a5,a5,0x2
    80019b8c:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80019b8e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019b92:	0736                	slli	a4,a4,0xd
    80019b94:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80019b98:	08200593          	li	a1,130
    80019b9c:	00013617          	auipc	a2,0x13
    80019ba0:	09c60613          	addi	a2,a2,156 # 8002cc38 <__func__.0+0x6078>
    80019ba4:	0000d517          	auipc	a0,0xd
    80019ba8:	31450513          	addi	a0,a0,788 # 80026eb8 <__func__.0+0x2f8>
    80019bac:	3580b0ef          	jal	80024f04 <printf>
    80019bb0:	0002f797          	auipc	a5,0x2f
    80019bb4:	4617c783          	lbu	a5,1121(a5) # 80049011 <excpt+0x1>
    80019bb8:	0000d597          	auipc	a1,0xd
    80019bbc:	2c858593          	addi	a1,a1,712 # 80026e80 <__func__.0+0x2c0>
    80019bc0:	c789                	beqz	a5,80019bca <store_guest_page_fault_5+0xae>
    80019bc2:	0000d597          	auipc	a1,0xd
    80019bc6:	2ce58593          	addi	a1,a1,718 # 80026e90 <__func__.0+0x2d0>
    80019bca:	0000d517          	auipc	a0,0xd
    80019bce:	30650513          	addi	a0,a0,774 # 80026ed0 <__func__.0+0x310>
    80019bd2:	3320b0ef          	jal	80024f04 <printf>
    80019bd6:	0002f797          	auipc	a5,0x2f
    80019bda:	43b7c783          	lbu	a5,1083(a5) # 80049011 <excpt+0x1>
    80019bde:	e7a1                	bnez	a5,80019c26 <store_guest_page_fault_5+0x10a>
    80019be0:	4529                	li	a0,10
    80019be2:	12c0a0ef          	jal	80023d0e <putchar>
    80019be6:	0002f797          	auipc	a5,0x2f
    80019bea:	42b7c783          	lbu	a5,1067(a5) # 80049011 <excpt+0x1>
    80019bee:	e795                	bnez	a5,80019c1a <store_guest_page_fault_5+0xfe>
    80019bf0:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80019bf2:	0000d597          	auipc	a1,0xd
    80019bf6:	28e58593          	addi	a1,a1,654 # 80026e80 <__func__.0+0x2c0>
    80019bfa:	0000d517          	auipc	a0,0xd
    80019bfe:	33e50513          	addi	a0,a0,830 # 80026f38 <__func__.0+0x378>
    80019c02:	3020b0ef          	jal	80024f04 <printf>
    80019c06:	4511                	li	a0,4
    80019c08:	fefe60ef          	jal	80000bf6 <goto_priv>
    80019c0c:	8a1e70ef          	jal	800014ac <reset_state>
}
    80019c10:	60a2                	ld	ra,8(sp)
    80019c12:	8522                	mv	a0,s0
    80019c14:	6402                	ld	s0,0(sp)
    80019c16:	0141                	addi	sp,sp,16
    80019c18:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80019c1a:	4401                	li	s0,0
    TEST_END();
    80019c1c:	0000d597          	auipc	a1,0xd
    80019c20:	27458593          	addi	a1,a1,628 # 80026e90 <__func__.0+0x2d0>
    80019c24:	bfd9                	j	80019bfa <store_guest_page_fault_5+0xde>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80019c26:	0000d517          	auipc	a0,0xd
    80019c2a:	2b250513          	addi	a0,a0,690 # 80026ed8 <__func__.0+0x318>
    80019c2e:	2d60b0ef          	jal	80024f04 <printf>
    80019c32:	02900513          	li	a0,41
    80019c36:	0d80a0ef          	jal	80023d0e <putchar>
    80019c3a:	b75d                	j	80019be0 <store_guest_page_fault_5+0xc4>

0000000080019c3c <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    80019c3c:	1101                	addi	sp,sp,-32

    TEST_START();
    80019c3e:	0000c597          	auipc	a1,0xc
    80019c42:	58258593          	addi	a1,a1,1410 # 800261c0 <__func__.16>
    80019c46:	0000d517          	auipc	a0,0xd
    80019c4a:	25a50513          	addi	a0,a0,602 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_6(){
    80019c4e:	ec06                	sd	ra,24(sp)
    80019c50:	e822                	sd	s0,16(sp)
    80019c52:	e426                	sd	s1,8(sp)
    TEST_START();
    80019c54:	2b00b0ef          	jal	80024f04 <printf>
    80019c58:	4529                	li	a0,10
    80019c5a:	0b40a0ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80019c5e:	450d                	li	a0,3
    80019c60:	f97e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019c64:	97de60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019c68:	bbbe60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019c6c:	a45e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80019c70:	4509                	li	a0,2
    80019c72:	f85e60ef          	jal	80000bf6 <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80019c76:	0330000f          	fence	rw,rw
    80019c7a:	0002f417          	auipc	s0,0x2f
    80019c7e:	39640413          	addi	s0,s0,918 # 80049010 <excpt>
    80019c82:	4785                	li	a5,1
    80019c84:	0002f717          	auipc	a4,0x2f
    80019c88:	3c073223          	sd	zero,964(a4) # 80049048 <excpt+0x38>
    80019c8c:	00f41023          	sh	a5,0(s0)
    80019c90:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80019c94:	37ab77b7          	lui	a5,0x37ab7
    80019c98:	00100737          	lui	a4,0x100
    80019c9c:	078a                	slli	a5,a5,0x2
    80019c9e:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019ca2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019ca6:	0732                	slli	a4,a4,0xc
    80019ca8:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    80019cac:	08200593          	li	a1,130
    80019cb0:	00013617          	auipc	a2,0x13
    80019cb4:	fc060613          	addi	a2,a2,-64 # 8002cc70 <__func__.0+0x60b0>
    80019cb8:	0000d517          	auipc	a0,0xd
    80019cbc:	20050513          	addi	a0,a0,512 # 80026eb8 <__func__.0+0x2f8>
    80019cc0:	2440b0ef          	jal	80024f04 <printf>
    80019cc4:	0002f797          	auipc	a5,0x2f
    80019cc8:	34d7c783          	lbu	a5,845(a5) # 80049011 <excpt+0x1>
    80019ccc:	0000d597          	auipc	a1,0xd
    80019cd0:	1c458593          	addi	a1,a1,452 # 80026e90 <__func__.0+0x2d0>
    80019cd4:	cf89                	beqz	a5,80019cee <store_guest_page_fault_6+0xb2>
    80019cd6:	6418                	ld	a4,8(s0)
    80019cd8:	47dd                	li	a5,23
    80019cda:	0000d597          	auipc	a1,0xd
    80019cde:	1a658593          	addi	a1,a1,422 # 80026e80 <__func__.0+0x2c0>
    80019ce2:	00f70663          	beq	a4,a5,80019cee <store_guest_page_fault_6+0xb2>
    80019ce6:	0000d597          	auipc	a1,0xd
    80019cea:	1aa58593          	addi	a1,a1,426 # 80026e90 <__func__.0+0x2d0>
    80019cee:	0000d517          	auipc	a0,0xd
    80019cf2:	1e250513          	addi	a0,a0,482 # 80026ed0 <__func__.0+0x310>
    80019cf6:	20e0b0ef          	jal	80024f04 <printf>
    80019cfa:	0002f797          	auipc	a5,0x2f
    80019cfe:	3177c783          	lbu	a5,791(a5) # 80049011 <excpt+0x1>
    80019d02:	c789                	beqz	a5,80019d0c <store_guest_page_fault_6+0xd0>
    80019d04:	6418                	ld	a4,8(s0)
    80019d06:	47dd                	li	a5,23
    80019d08:	00f70c63          	beq	a4,a5,80019d20 <store_guest_page_fault_6+0xe4>
    80019d0c:	0000d517          	auipc	a0,0xd
    80019d10:	1cc50513          	addi	a0,a0,460 # 80026ed8 <__func__.0+0x318>
    80019d14:	1f00b0ef          	jal	80024f04 <printf>
    80019d18:	02900513          	li	a0,41
    80019d1c:	7f3090ef          	jal	80023d0e <putchar>
    80019d20:	4529                	li	a0,10
    80019d22:	7ed090ef          	jal	80023d0e <putchar>
    80019d26:	0002f797          	auipc	a5,0x2f
    80019d2a:	2eb7c783          	lbu	a5,747(a5) # 80049011 <excpt+0x1>
    80019d2e:	4481                	li	s1,0
    80019d30:	c789                	beqz	a5,80019d3a <store_guest_page_fault_6+0xfe>
    80019d32:	6404                	ld	s1,8(s0)
    80019d34:	14a5                	addi	s1,s1,-23
    80019d36:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80019d3a:	0330000f          	fence	rw,rw
    80019d3e:	4785                	li	a5,1
    80019d40:	0002f717          	auipc	a4,0x2f
    80019d44:	30073423          	sd	zero,776(a4) # 80049048 <excpt+0x38>
    80019d48:	00f41023          	sh	a5,0(s0)
    80019d4c:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80019d50:	001007b7          	lui	a5,0x100
    80019d54:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80019d58:	7771                	lui	a4,0xffffc
    80019d5a:	07b2                	slli	a5,a5,0xc
    80019d5c:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80019d60:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019d64:	08200593          	li	a1,130
    80019d68:	00013617          	auipc	a2,0x13
    80019d6c:	f5860613          	addi	a2,a2,-168 # 8002ccc0 <__func__.0+0x6100>
    80019d70:	0000d517          	auipc	a0,0xd
    80019d74:	14850513          	addi	a0,a0,328 # 80026eb8 <__func__.0+0x2f8>
    80019d78:	18c0b0ef          	jal	80024f04 <printf>
    80019d7c:	0002f797          	auipc	a5,0x2f
    80019d80:	2957c783          	lbu	a5,661(a5) # 80049011 <excpt+0x1>
    80019d84:	0000d597          	auipc	a1,0xd
    80019d88:	10c58593          	addi	a1,a1,268 # 80026e90 <__func__.0+0x2d0>
    80019d8c:	cf89                	beqz	a5,80019da6 <store_guest_page_fault_6+0x16a>
    80019d8e:	6418                	ld	a4,8(s0)
    80019d90:	47dd                	li	a5,23
    80019d92:	0000d597          	auipc	a1,0xd
    80019d96:	0ee58593          	addi	a1,a1,238 # 80026e80 <__func__.0+0x2c0>
    80019d9a:	00f70663          	beq	a4,a5,80019da6 <store_guest_page_fault_6+0x16a>
    80019d9e:	0000d597          	auipc	a1,0xd
    80019da2:	0f258593          	addi	a1,a1,242 # 80026e90 <__func__.0+0x2d0>
    80019da6:	0000d517          	auipc	a0,0xd
    80019daa:	12a50513          	addi	a0,a0,298 # 80026ed0 <__func__.0+0x310>
    80019dae:	1560b0ef          	jal	80024f04 <printf>
    80019db2:	0002f797          	auipc	a5,0x2f
    80019db6:	25f7c783          	lbu	a5,607(a5) # 80049011 <excpt+0x1>
    80019dba:	c789                	beqz	a5,80019dc4 <store_guest_page_fault_6+0x188>
    80019dbc:	6418                	ld	a4,8(s0)
    80019dbe:	47dd                	li	a5,23
    80019dc0:	00f70c63          	beq	a4,a5,80019dd8 <store_guest_page_fault_6+0x19c>
    80019dc4:	0000d517          	auipc	a0,0xd
    80019dc8:	11450513          	addi	a0,a0,276 # 80026ed8 <__func__.0+0x318>
    80019dcc:	1380b0ef          	jal	80024f04 <printf>
    80019dd0:	02900513          	li	a0,41
    80019dd4:	73b090ef          	jal	80023d0e <putchar>
    80019dd8:	4529                	li	a0,10
    80019dda:	735090ef          	jal	80023d0e <putchar>
    80019dde:	c095                	beqz	s1,80019e02 <store_guest_page_fault_6+0x1c6>
    80019de0:	0002f497          	auipc	s1,0x2f
    80019de4:	2314c483          	lbu	s1,561(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80019de8:	0000d597          	auipc	a1,0xd
    80019dec:	0a858593          	addi	a1,a1,168 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019df0:	cc91                	beqz	s1,80019e0c <store_guest_page_fault_6+0x1d0>
    80019df2:	6418                	ld	a4,8(s0)
    80019df4:	47dd                	li	a5,23
    TEST_END();
    80019df6:	0000d597          	auipc	a1,0xd
    80019dfa:	08a58593          	addi	a1,a1,138 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019dfe:	00f70763          	beq	a4,a5,80019e0c <store_guest_page_fault_6+0x1d0>
    80019e02:	4481                	li	s1,0
    TEST_END();
    80019e04:	0000d597          	auipc	a1,0xd
    80019e08:	08c58593          	addi	a1,a1,140 # 80026e90 <__func__.0+0x2d0>
    80019e0c:	0000d517          	auipc	a0,0xd
    80019e10:	12c50513          	addi	a0,a0,300 # 80026f38 <__func__.0+0x378>
    80019e14:	0f00b0ef          	jal	80024f04 <printf>
    80019e18:	4511                	li	a0,4
    80019e1a:	ddde60ef          	jal	80000bf6 <goto_priv>
    80019e1e:	e8ee70ef          	jal	800014ac <reset_state>

}
    80019e22:	60e2                	ld	ra,24(sp)
    80019e24:	6442                	ld	s0,16(sp)
    80019e26:	8526                	mv	a0,s1
    80019e28:	64a2                	ld	s1,8(sp)
    80019e2a:	6105                	addi	sp,sp,32
    80019e2c:	8082                	ret

0000000080019e2e <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    80019e2e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019e30:	0000c597          	auipc	a1,0xc
    80019e34:	3b058593          	addi	a1,a1,944 # 800261e0 <__func__.15>
    80019e38:	0000d517          	auipc	a0,0xd
    80019e3c:	06850513          	addi	a0,a0,104 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_7(){
    80019e40:	ec06                	sd	ra,24(sp)
    80019e42:	e822                	sd	s0,16(sp)
    80019e44:	e426                	sd	s1,8(sp)
    TEST_START();
    80019e46:	0be0b0ef          	jal	80024f04 <printf>
    80019e4a:	4529                	li	a0,10
    80019e4c:	6c3090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80019e50:	450d                	li	a0,3
    80019e52:	da5e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019e56:	f8ae60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019e5a:	9c9e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019e5e:	853e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80019e62:	4509                	li	a0,2
    80019e64:	d93e60ef          	jal	80000bf6 <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80019e68:	0330000f          	fence	rw,rw
    80019e6c:	0002f417          	auipc	s0,0x2f
    80019e70:	1a440413          	addi	s0,s0,420 # 80049010 <excpt>
    80019e74:	4785                	li	a5,1
    80019e76:	0002f717          	auipc	a4,0x2f
    80019e7a:	1c073923          	sd	zero,466(a4) # 80049048 <excpt+0x38>
    80019e7e:	00f41023          	sh	a5,0(s0)
    80019e82:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80019e86:	000807b7          	lui	a5,0x80
    80019e8a:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80019e8e:	37ab77b7          	lui	a5,0x37ab7
    80019e92:	00100737          	lui	a4,0x100
    80019e96:	078a                	slli	a5,a5,0x2
    80019e98:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80019e9c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019ea0:	0732                	slli	a4,a4,0xc
    80019ea2:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019ea6:	08200593          	li	a1,130
    80019eaa:	00013617          	auipc	a2,0x13
    80019eae:	e6e60613          	addi	a2,a2,-402 # 8002cd18 <__func__.0+0x6158>
    80019eb2:	0000d517          	auipc	a0,0xd
    80019eb6:	00650513          	addi	a0,a0,6 # 80026eb8 <__func__.0+0x2f8>
    80019eba:	04a0b0ef          	jal	80024f04 <printf>
    80019ebe:	0002f797          	auipc	a5,0x2f
    80019ec2:	1537c783          	lbu	a5,339(a5) # 80049011 <excpt+0x1>
    80019ec6:	0000d597          	auipc	a1,0xd
    80019eca:	fca58593          	addi	a1,a1,-54 # 80026e90 <__func__.0+0x2d0>
    80019ece:	cf89                	beqz	a5,80019ee8 <store_guest_page_fault_7+0xba>
    80019ed0:	6418                	ld	a4,8(s0)
    80019ed2:	47dd                	li	a5,23
    80019ed4:	0000d597          	auipc	a1,0xd
    80019ed8:	fac58593          	addi	a1,a1,-84 # 80026e80 <__func__.0+0x2c0>
    80019edc:	00f70663          	beq	a4,a5,80019ee8 <store_guest_page_fault_7+0xba>
    80019ee0:	0000d597          	auipc	a1,0xd
    80019ee4:	fb058593          	addi	a1,a1,-80 # 80026e90 <__func__.0+0x2d0>
    80019ee8:	0000d517          	auipc	a0,0xd
    80019eec:	fe850513          	addi	a0,a0,-24 # 80026ed0 <__func__.0+0x310>
    80019ef0:	0140b0ef          	jal	80024f04 <printf>
    80019ef4:	0002f797          	auipc	a5,0x2f
    80019ef8:	11d7c783          	lbu	a5,285(a5) # 80049011 <excpt+0x1>
    80019efc:	c789                	beqz	a5,80019f06 <store_guest_page_fault_7+0xd8>
    80019efe:	6418                	ld	a4,8(s0)
    80019f00:	47dd                	li	a5,23
    80019f02:	00f70c63          	beq	a4,a5,80019f1a <store_guest_page_fault_7+0xec>
    80019f06:	0000d517          	auipc	a0,0xd
    80019f0a:	fd250513          	addi	a0,a0,-46 # 80026ed8 <__func__.0+0x318>
    80019f0e:	7f70a0ef          	jal	80024f04 <printf>
    80019f12:	02900513          	li	a0,41
    80019f16:	5f9090ef          	jal	80023d0e <putchar>
    80019f1a:	4529                	li	a0,10
    80019f1c:	5f3090ef          	jal	80023d0e <putchar>
    80019f20:	0002f497          	auipc	s1,0x2f
    80019f24:	0f14c483          	lbu	s1,241(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80019f28:	0000d597          	auipc	a1,0xd
    80019f2c:	f6858593          	addi	a1,a1,-152 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019f30:	cc91                	beqz	s1,80019f4c <store_guest_page_fault_7+0x11e>
    80019f32:	6418                	ld	a4,8(s0)
    80019f34:	47dd                	li	a5,23
    TEST_END();
    80019f36:	0000d597          	auipc	a1,0xd
    80019f3a:	f4a58593          	addi	a1,a1,-182 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019f3e:	00f70763          	beq	a4,a5,80019f4c <store_guest_page_fault_7+0x11e>
    80019f42:	4481                	li	s1,0
    TEST_END();
    80019f44:	0000d597          	auipc	a1,0xd
    80019f48:	f4c58593          	addi	a1,a1,-180 # 80026e90 <__func__.0+0x2d0>
    80019f4c:	0000d517          	auipc	a0,0xd
    80019f50:	fec50513          	addi	a0,a0,-20 # 80026f38 <__func__.0+0x378>
    80019f54:	7b10a0ef          	jal	80024f04 <printf>
    80019f58:	4511                	li	a0,4
    80019f5a:	c9de60ef          	jal	80000bf6 <goto_priv>
    80019f5e:	d4ee70ef          	jal	800014ac <reset_state>
}
    80019f62:	60e2                	ld	ra,24(sp)
    80019f64:	6442                	ld	s0,16(sp)
    80019f66:	8526                	mv	a0,s1
    80019f68:	64a2                	ld	s1,8(sp)
    80019f6a:	6105                	addi	sp,sp,32
    80019f6c:	8082                	ret

0000000080019f6e <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    80019f6e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019f70:	0000c597          	auipc	a1,0xc
    80019f74:	29058593          	addi	a1,a1,656 # 80026200 <__func__.14>
    80019f78:	0000d517          	auipc	a0,0xd
    80019f7c:	f2850513          	addi	a0,a0,-216 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_8(){
    80019f80:	ec06                	sd	ra,24(sp)
    80019f82:	e822                	sd	s0,16(sp)
    80019f84:	e426                	sd	s1,8(sp)
    TEST_START();
    80019f86:	77f0a0ef          	jal	80024f04 <printf>
    80019f8a:	4529                	li	a0,10
    80019f8c:	583090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    80019f90:	450d                	li	a0,3
    80019f92:	c65e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    80019f96:	e4ae60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019f9a:	889e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    80019f9e:	f12e60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80019fa2:	4509                	li	a0,2
    80019fa4:	c53e60ef          	jal	80000bf6 <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80019fa8:	0330000f          	fence	rw,rw
    80019fac:	0002f497          	auipc	s1,0x2f
    80019fb0:	06448493          	addi	s1,s1,100 # 80049010 <excpt>
    80019fb4:	4785                	li	a5,1
    80019fb6:	0002f717          	auipc	a4,0x2f
    80019fba:	08073923          	sd	zero,146(a4) # 80049048 <excpt+0x38>
    80019fbe:	00f49023          	sh	a5,0(s1)
    80019fc2:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80019fc6:	000807b7          	lui	a5,0x80
    80019fca:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80019fce:	001007b7          	lui	a5,0x100
    80019fd2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80019fd6:	7771                	lui	a4,0xffffc
    80019fd8:	07b2                	slli	a5,a5,0xc
    80019fda:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80019fde:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019fe2:	08200593          	li	a1,130
    80019fe6:	00013617          	auipc	a2,0x13
    80019fea:	d9260613          	addi	a2,a2,-622 # 8002cd78 <__func__.0+0x61b8>
    80019fee:	0000d517          	auipc	a0,0xd
    80019ff2:	eca50513          	addi	a0,a0,-310 # 80026eb8 <__func__.0+0x2f8>
    80019ff6:	70f0a0ef          	jal	80024f04 <printf>
    80019ffa:	0002f797          	auipc	a5,0x2f
    80019ffe:	0177c783          	lbu	a5,23(a5) # 80049011 <excpt+0x1>
    8001a002:	0000d597          	auipc	a1,0xd
    8001a006:	e8e58593          	addi	a1,a1,-370 # 80026e90 <__func__.0+0x2d0>
    8001a00a:	cf89                	beqz	a5,8001a024 <store_guest_page_fault_8+0xb6>
    8001a00c:	6498                	ld	a4,8(s1)
    8001a00e:	47dd                	li	a5,23
    8001a010:	0000d597          	auipc	a1,0xd
    8001a014:	e7058593          	addi	a1,a1,-400 # 80026e80 <__func__.0+0x2c0>
    8001a018:	00f70663          	beq	a4,a5,8001a024 <store_guest_page_fault_8+0xb6>
    8001a01c:	0000d597          	auipc	a1,0xd
    8001a020:	e7458593          	addi	a1,a1,-396 # 80026e90 <__func__.0+0x2d0>
    8001a024:	0000d517          	auipc	a0,0xd
    8001a028:	eac50513          	addi	a0,a0,-340 # 80026ed0 <__func__.0+0x310>
    8001a02c:	6d90a0ef          	jal	80024f04 <printf>
    8001a030:	0002f797          	auipc	a5,0x2f
    8001a034:	fe17c783          	lbu	a5,-31(a5) # 80049011 <excpt+0x1>
    8001a038:	c789                	beqz	a5,8001a042 <store_guest_page_fault_8+0xd4>
    8001a03a:	6498                	ld	a4,8(s1)
    8001a03c:	47dd                	li	a5,23
    8001a03e:	00f70c63          	beq	a4,a5,8001a056 <store_guest_page_fault_8+0xe8>
    8001a042:	0000d517          	auipc	a0,0xd
    8001a046:	e9650513          	addi	a0,a0,-362 # 80026ed8 <__func__.0+0x318>
    8001a04a:	6bb0a0ef          	jal	80024f04 <printf>
    8001a04e:	02900513          	li	a0,41
    8001a052:	4bd090ef          	jal	80023d0e <putchar>
    8001a056:	4529                	li	a0,10
    8001a058:	4b7090ef          	jal	80023d0e <putchar>
    8001a05c:	0002f417          	auipc	s0,0x2f
    8001a060:	fb544403          	lbu	s0,-75(s0) # 80049011 <excpt+0x1>
    8001a064:	c409                	beqz	s0,8001a06e <store_guest_page_fault_8+0x100>
    8001a066:	6498                	ld	a4,8(s1)
    8001a068:	47dd                	li	a5,23
    8001a06a:	02f70c63          	beq	a4,a5,8001a0a2 <store_guest_page_fault_8+0x134>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a06e:	000807b7          	lui	a5,0x80
    8001a072:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001a076:	4401                	li	s0,0

    TEST_END();
    8001a078:	0000d597          	auipc	a1,0xd
    8001a07c:	e1858593          	addi	a1,a1,-488 # 80026e90 <__func__.0+0x2d0>
    8001a080:	0000d517          	auipc	a0,0xd
    8001a084:	eb850513          	addi	a0,a0,-328 # 80026f38 <__func__.0+0x378>
    8001a088:	67d0a0ef          	jal	80024f04 <printf>
    8001a08c:	4511                	li	a0,4
    8001a08e:	b69e60ef          	jal	80000bf6 <goto_priv>
    8001a092:	c1ae70ef          	jal	800014ac <reset_state>
}
    8001a096:	60e2                	ld	ra,24(sp)
    8001a098:	8522                	mv	a0,s0
    8001a09a:	6442                	ld	s0,16(sp)
    8001a09c:	64a2                	ld	s1,8(sp)
    8001a09e:	6105                	addi	sp,sp,32
    8001a0a0:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a0a2:	000807b7          	lui	a5,0x80
    8001a0a6:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001a0aa:	0000d597          	auipc	a1,0xd
    8001a0ae:	dd658593          	addi	a1,a1,-554 # 80026e80 <__func__.0+0x2c0>
    8001a0b2:	b7f9                	j	8001a080 <store_guest_page_fault_8+0x112>

000000008001a0b4 <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    8001a0b4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a0b6:	0000c597          	auipc	a1,0xc
    8001a0ba:	16a58593          	addi	a1,a1,362 # 80026220 <__func__.13>
    8001a0be:	0000d517          	auipc	a0,0xd
    8001a0c2:	de250513          	addi	a0,a0,-542 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_9(){
    8001a0c6:	ec06                	sd	ra,24(sp)
    8001a0c8:	e822                	sd	s0,16(sp)
    8001a0ca:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a0cc:	6390a0ef          	jal	80024f04 <printf>
    8001a0d0:	4529                	li	a0,10
    8001a0d2:	43d090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001a0d6:	450d                	li	a0,3
    8001a0d8:	b1fe60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a0dc:	d04e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a0e0:	f42e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a0e4:	dcce60ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001a0e8:	4511                	li	a0,4
    8001a0ea:	b0de60ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8001a0ee:	000407b7          	lui	a5,0x40
    8001a0f2:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8001a0f6:	4509                	li	a0,2
    8001a0f8:	affe60ef          	jal	80000bf6 <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001a0fc:	0330000f          	fence	rw,rw
    8001a100:	0002f417          	auipc	s0,0x2f
    8001a104:	f1040413          	addi	s0,s0,-240 # 80049010 <excpt>
    8001a108:	4785                	li	a5,1
    8001a10a:	0002f717          	auipc	a4,0x2f
    8001a10e:	f2073f23          	sd	zero,-194(a4) # 80049048 <excpt+0x38>
    8001a112:	00f41023          	sh	a5,0(s0)
    8001a116:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001a11a:	37ab77b7          	lui	a5,0x37ab7
    8001a11e:	00080737          	lui	a4,0x80
    8001a122:	078a                	slli	a5,a5,0x2
    8001a124:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    8001a126:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a12a:	0736                	slli	a4,a4,0xd
    8001a12c:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    8001a130:	08200593          	li	a1,130
    8001a134:	00013617          	auipc	a2,0x13
    8001a138:	cb460613          	addi	a2,a2,-844 # 8002cde8 <__func__.0+0x6228>
    8001a13c:	0000d517          	auipc	a0,0xd
    8001a140:	d7c50513          	addi	a0,a0,-644 # 80026eb8 <__func__.0+0x2f8>
    8001a144:	5c10a0ef          	jal	80024f04 <printf>
    8001a148:	0002f797          	auipc	a5,0x2f
    8001a14c:	ec97c783          	lbu	a5,-311(a5) # 80049011 <excpt+0x1>
    8001a150:	0000d597          	auipc	a1,0xd
    8001a154:	d4058593          	addi	a1,a1,-704 # 80026e90 <__func__.0+0x2d0>
    8001a158:	cf89                	beqz	a5,8001a172 <store_guest_page_fault_9+0xbe>
    8001a15a:	6418                	ld	a4,8(s0)
    8001a15c:	47bd                	li	a5,15
    8001a15e:	0000d597          	auipc	a1,0xd
    8001a162:	d2258593          	addi	a1,a1,-734 # 80026e80 <__func__.0+0x2c0>
    8001a166:	00f70663          	beq	a4,a5,8001a172 <store_guest_page_fault_9+0xbe>
    8001a16a:	0000d597          	auipc	a1,0xd
    8001a16e:	d2658593          	addi	a1,a1,-730 # 80026e90 <__func__.0+0x2d0>
    8001a172:	0000d517          	auipc	a0,0xd
    8001a176:	d5e50513          	addi	a0,a0,-674 # 80026ed0 <__func__.0+0x310>
    8001a17a:	58b0a0ef          	jal	80024f04 <printf>
    8001a17e:	0002f797          	auipc	a5,0x2f
    8001a182:	e937c783          	lbu	a5,-365(a5) # 80049011 <excpt+0x1>
    8001a186:	c789                	beqz	a5,8001a190 <store_guest_page_fault_9+0xdc>
    8001a188:	6418                	ld	a4,8(s0)
    8001a18a:	47bd                	li	a5,15
    8001a18c:	00f70c63          	beq	a4,a5,8001a1a4 <store_guest_page_fault_9+0xf0>
    8001a190:	0000d517          	auipc	a0,0xd
    8001a194:	d4850513          	addi	a0,a0,-696 # 80026ed8 <__func__.0+0x318>
    8001a198:	56d0a0ef          	jal	80024f04 <printf>
    8001a19c:	02900513          	li	a0,41
    8001a1a0:	36f090ef          	jal	80023d0e <putchar>
    8001a1a4:	4529                	li	a0,10
    8001a1a6:	369090ef          	jal	80023d0e <putchar>
    8001a1aa:	0002f497          	auipc	s1,0x2f
    8001a1ae:	e674c483          	lbu	s1,-409(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001a1b2:	0000d597          	auipc	a1,0xd
    8001a1b6:	cde58593          	addi	a1,a1,-802 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    8001a1ba:	cc91                	beqz	s1,8001a1d6 <store_guest_page_fault_9+0x122>
    8001a1bc:	6418                	ld	a4,8(s0)
    8001a1be:	47bd                	li	a5,15
    TEST_END();
    8001a1c0:	0000d597          	auipc	a1,0xd
    8001a1c4:	cc058593          	addi	a1,a1,-832 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    8001a1c8:	00f70763          	beq	a4,a5,8001a1d6 <store_guest_page_fault_9+0x122>
    8001a1cc:	4481                	li	s1,0
    TEST_END();
    8001a1ce:	0000d597          	auipc	a1,0xd
    8001a1d2:	cc258593          	addi	a1,a1,-830 # 80026e90 <__func__.0+0x2d0>
    8001a1d6:	0000d517          	auipc	a0,0xd
    8001a1da:	d6250513          	addi	a0,a0,-670 # 80026f38 <__func__.0+0x378>
    8001a1de:	5270a0ef          	jal	80024f04 <printf>
    8001a1e2:	4511                	li	a0,4
    8001a1e4:	a13e60ef          	jal	80000bf6 <goto_priv>
    8001a1e8:	ac4e70ef          	jal	800014ac <reset_state>
}
    8001a1ec:	60e2                	ld	ra,24(sp)
    8001a1ee:	6442                	ld	s0,16(sp)
    8001a1f0:	8526                	mv	a0,s1
    8001a1f2:	64a2                	ld	s1,8(sp)
    8001a1f4:	6105                	addi	sp,sp,32
    8001a1f6:	8082                	ret

000000008001a1f8 <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    8001a1f8:	1141                	addi	sp,sp,-16

    TEST_START();
    8001a1fa:	0000c597          	auipc	a1,0xc
    8001a1fe:	04658593          	addi	a1,a1,70 # 80026240 <__func__.12>
    8001a202:	0000d517          	auipc	a0,0xd
    8001a206:	c9e50513          	addi	a0,a0,-866 # 80026ea0 <__func__.0+0x2e0>
bool store_guest_page_fault_10(){
    8001a20a:	e406                	sd	ra,8(sp)
    8001a20c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a20e:	4f70a0ef          	jal	80024f04 <printf>
    8001a212:	4529                	li	a0,10
    8001a214:	2fb090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001a218:	450d                	li	a0,3
    8001a21a:	9dde60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a21e:	bc2e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a222:	e00e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a226:	c8ae60ef          	jal	800006b0 <vspt_init>

    goto_priv(PRIV_M);
    8001a22a:	4511                	li	a0,4
    8001a22c:	9cbe60ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001a230:	000407b7          	lui	a5,0x40
    8001a234:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001a238:	4509                	li	a0,2
    8001a23a:	9bde60ef          	jal	80000bf6 <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001a23e:	0330000f          	fence	rw,rw
    8001a242:	4785                	li	a5,1
    8001a244:	0002f717          	auipc	a4,0x2f
    8001a248:	e0073223          	sd	zero,-508(a4) # 80049048 <excpt+0x38>
    8001a24c:	0002f717          	auipc	a4,0x2f
    8001a250:	dcf71223          	sh	a5,-572(a4) # 80049010 <excpt>
    8001a254:	0330000f          	fence	rw,rw
    8001a258:	37ab77b7          	lui	a5,0x37ab7
    8001a25c:	00080737          	lui	a4,0x80
    8001a260:	078a                	slli	a5,a5,0x2
    8001a262:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001a264:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a268:	0736                	slli	a4,a4,0xd
    8001a26a:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001a26e:	08200593          	li	a1,130
    8001a272:	00012617          	auipc	a2,0x12
    8001a276:	10660613          	addi	a2,a2,262 # 8002c378 <__func__.0+0x57b8>
    8001a27a:	0000d517          	auipc	a0,0xd
    8001a27e:	c3e50513          	addi	a0,a0,-962 # 80026eb8 <__func__.0+0x2f8>
    8001a282:	4830a0ef          	jal	80024f04 <printf>
    8001a286:	0002f797          	auipc	a5,0x2f
    8001a28a:	d8b7c783          	lbu	a5,-629(a5) # 80049011 <excpt+0x1>
    8001a28e:	0000d597          	auipc	a1,0xd
    8001a292:	bf258593          	addi	a1,a1,-1038 # 80026e80 <__func__.0+0x2c0>
    8001a296:	c789                	beqz	a5,8001a2a0 <store_guest_page_fault_10+0xa8>
    8001a298:	0000d597          	auipc	a1,0xd
    8001a29c:	bf858593          	addi	a1,a1,-1032 # 80026e90 <__func__.0+0x2d0>
    8001a2a0:	0000d517          	auipc	a0,0xd
    8001a2a4:	c3050513          	addi	a0,a0,-976 # 80026ed0 <__func__.0+0x310>
    8001a2a8:	45d0a0ef          	jal	80024f04 <printf>
    8001a2ac:	0002f797          	auipc	a5,0x2f
    8001a2b0:	d657c783          	lbu	a5,-667(a5) # 80049011 <excpt+0x1>
    8001a2b4:	e7a1                	bnez	a5,8001a2fc <store_guest_page_fault_10+0x104>
    8001a2b6:	4529                	li	a0,10
    8001a2b8:	257090ef          	jal	80023d0e <putchar>
    8001a2bc:	0002f797          	auipc	a5,0x2f
    8001a2c0:	d557c783          	lbu	a5,-683(a5) # 80049011 <excpt+0x1>
    8001a2c4:	e795                	bnez	a5,8001a2f0 <store_guest_page_fault_10+0xf8>
    8001a2c6:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001a2c8:	0000d597          	auipc	a1,0xd
    8001a2cc:	bb858593          	addi	a1,a1,-1096 # 80026e80 <__func__.0+0x2c0>
    8001a2d0:	0000d517          	auipc	a0,0xd
    8001a2d4:	c6850513          	addi	a0,a0,-920 # 80026f38 <__func__.0+0x378>
    8001a2d8:	42d0a0ef          	jal	80024f04 <printf>
    8001a2dc:	4511                	li	a0,4
    8001a2de:	919e60ef          	jal	80000bf6 <goto_priv>
    8001a2e2:	9cae70ef          	jal	800014ac <reset_state>
}
    8001a2e6:	60a2                	ld	ra,8(sp)
    8001a2e8:	8522                	mv	a0,s0
    8001a2ea:	6402                	ld	s0,0(sp)
    8001a2ec:	0141                	addi	sp,sp,16
    8001a2ee:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001a2f0:	4401                	li	s0,0
    TEST_END();
    8001a2f2:	0000d597          	auipc	a1,0xd
    8001a2f6:	b9e58593          	addi	a1,a1,-1122 # 80026e90 <__func__.0+0x2d0>
    8001a2fa:	bfd9                	j	8001a2d0 <store_guest_page_fault_10+0xd8>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001a2fc:	0000d517          	auipc	a0,0xd
    8001a300:	bdc50513          	addi	a0,a0,-1060 # 80026ed8 <__func__.0+0x318>
    8001a304:	4010a0ef          	jal	80024f04 <printf>
    8001a308:	02900513          	li	a0,41
    8001a30c:	203090ef          	jal	80023d0e <putchar>
    8001a310:	b75d                	j	8001a2b6 <store_guest_page_fault_10+0xbe>

000000008001a312 <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    8001a312:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a314:	0000c597          	auipc	a1,0xc
    8001a318:	f4c58593          	addi	a1,a1,-180 # 80026260 <__func__.11>
    8001a31c:	0000d517          	auipc	a0,0xd
    8001a320:	b8450513          	addi	a0,a0,-1148 # 80026ea0 <__func__.0+0x2e0>
bool amo_guest_page_fault_1(){
    8001a324:	ec06                	sd	ra,24(sp)
    8001a326:	e822                	sd	s0,16(sp)
    8001a328:	e426                	sd	s1,8(sp)
    8001a32a:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001a32c:	3d90a0ef          	jal	80024f04 <printf>
    8001a330:	4529                	li	a0,10
    8001a332:	1dd090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001a336:	450d                	li	a0,3
    8001a338:	8bfe60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a33c:	aa4e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a340:	ce2e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a344:	b6ce60ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    8001a348:	4509                	li	a0,2
    8001a34a:	8ade60ef          	jal	80000bf6 <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    8001a34e:	0330000f          	fence	rw,rw
    8001a352:	0002f497          	auipc	s1,0x2f
    8001a356:	cbe48493          	addi	s1,s1,-834 # 80049010 <excpt>
    8001a35a:	4785                	li	a5,1
    8001a35c:	0002f717          	auipc	a4,0x2f
    8001a360:	ce073623          	sd	zero,-788(a4) # 80049048 <excpt+0x38>
    8001a364:	00f49023          	sh	a5,0(s1)
    8001a368:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8001a36c:	00100737          	lui	a4,0x100
    8001a370:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a374:	0732                	slli	a4,a4,0xc
    8001a376:	00f727af          	amoadd.w	a5,a5,(a4)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    8001a37a:	08200593          	li	a1,130
    8001a37e:	00013617          	auipc	a2,0x13
    8001a382:	aa260613          	addi	a2,a2,-1374 # 8002ce20 <__func__.0+0x6260>
    8001a386:	0000d517          	auipc	a0,0xd
    8001a38a:	b3250513          	addi	a0,a0,-1230 # 80026eb8 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    8001a38e:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    8001a392:	3730a0ef          	jal	80024f04 <printf>
    8001a396:	0002f797          	auipc	a5,0x2f
    8001a39a:	c7b7c783          	lbu	a5,-901(a5) # 80049011 <excpt+0x1>
    value = amoadd_w(addr,value);
    8001a39e:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    8001a3a0:	0000d597          	auipc	a1,0xd
    8001a3a4:	af058593          	addi	a1,a1,-1296 # 80026e90 <__func__.0+0x2d0>
    8001a3a8:	cf89                	beqz	a5,8001a3c2 <amo_guest_page_fault_1+0xb0>
    8001a3aa:	6498                	ld	a4,8(s1)
    8001a3ac:	47dd                	li	a5,23
    8001a3ae:	0000d597          	auipc	a1,0xd
    8001a3b2:	ad258593          	addi	a1,a1,-1326 # 80026e80 <__func__.0+0x2c0>
    8001a3b6:	00f70663          	beq	a4,a5,8001a3c2 <amo_guest_page_fault_1+0xb0>
    8001a3ba:	0000d597          	auipc	a1,0xd
    8001a3be:	ad658593          	addi	a1,a1,-1322 # 80026e90 <__func__.0+0x2d0>
    8001a3c2:	0000d517          	auipc	a0,0xd
    8001a3c6:	b0e50513          	addi	a0,a0,-1266 # 80026ed0 <__func__.0+0x310>
    8001a3ca:	33b0a0ef          	jal	80024f04 <printf>
    8001a3ce:	0002f797          	auipc	a5,0x2f
    8001a3d2:	c437c783          	lbu	a5,-957(a5) # 80049011 <excpt+0x1>
    8001a3d6:	c789                	beqz	a5,8001a3e0 <amo_guest_page_fault_1+0xce>
    8001a3d8:	6498                	ld	a4,8(s1)
    8001a3da:	47dd                	li	a5,23
    8001a3dc:	00f70c63          	beq	a4,a5,8001a3f4 <amo_guest_page_fault_1+0xe2>
    8001a3e0:	0000d517          	auipc	a0,0xd
    8001a3e4:	af850513          	addi	a0,a0,-1288 # 80026ed8 <__func__.0+0x318>
    8001a3e8:	31d0a0ef          	jal	80024f04 <printf>
    8001a3ec:	02900513          	li	a0,41
    8001a3f0:	11f090ef          	jal	80023d0e <putchar>
    8001a3f4:	4529                	li	a0,10
    8001a3f6:	119090ef          	jal	80023d0e <putchar>
    8001a3fa:	0002f797          	auipc	a5,0x2f
    8001a3fe:	c177c783          	lbu	a5,-1001(a5) # 80049011 <excpt+0x1>
    8001a402:	4901                	li	s2,0
    8001a404:	c791                	beqz	a5,8001a410 <amo_guest_page_fault_1+0xfe>
    8001a406:	0084b903          	ld	s2,8(s1)
    8001a40a:	1925                	addi	s2,s2,-23
    8001a40c:	00193913          	seqz	s2,s2
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    8001a410:	0330000f          	fence	rw,rw
    8001a414:	4785                	li	a5,1
    8001a416:	0002f717          	auipc	a4,0x2f
    8001a41a:	c2073923          	sd	zero,-974(a4) # 80049048 <excpt+0x38>
    8001a41e:	00f49023          	sh	a5,0(s1)
    8001a422:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8001a426:	00100737          	lui	a4,0x100
    8001a42a:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a42e:	87a2                	mv	a5,s0
    8001a430:	0732                	slli	a4,a4,0xc
    8001a432:	a0f737af          	amomax.d	a5,a5,(a4)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a436:	08200593          	li	a1,130
    8001a43a:	00013617          	auipc	a2,0x13
    8001a43e:	a3660613          	addi	a2,a2,-1482 # 8002ce70 <__func__.0+0x62b0>
    8001a442:	0000d517          	auipc	a0,0xd
    8001a446:	a7650513          	addi	a0,a0,-1418 # 80026eb8 <__func__.0+0x2f8>
    8001a44a:	2bb0a0ef          	jal	80024f04 <printf>
    8001a44e:	0002f797          	auipc	a5,0x2f
    8001a452:	bc37c783          	lbu	a5,-1085(a5) # 80049011 <excpt+0x1>
    8001a456:	0000d597          	auipc	a1,0xd
    8001a45a:	a3a58593          	addi	a1,a1,-1478 # 80026e90 <__func__.0+0x2d0>
    8001a45e:	cf89                	beqz	a5,8001a478 <amo_guest_page_fault_1+0x166>
    8001a460:	6498                	ld	a4,8(s1)
    8001a462:	47dd                	li	a5,23
    8001a464:	0000d597          	auipc	a1,0xd
    8001a468:	a1c58593          	addi	a1,a1,-1508 # 80026e80 <__func__.0+0x2c0>
    8001a46c:	00f70663          	beq	a4,a5,8001a478 <amo_guest_page_fault_1+0x166>
    8001a470:	0000d597          	auipc	a1,0xd
    8001a474:	a2058593          	addi	a1,a1,-1504 # 80026e90 <__func__.0+0x2d0>
    8001a478:	0000d517          	auipc	a0,0xd
    8001a47c:	a5850513          	addi	a0,a0,-1448 # 80026ed0 <__func__.0+0x310>
    8001a480:	2850a0ef          	jal	80024f04 <printf>
    8001a484:	0002f797          	auipc	a5,0x2f
    8001a488:	b8d7c783          	lbu	a5,-1139(a5) # 80049011 <excpt+0x1>
    8001a48c:	c789                	beqz	a5,8001a496 <amo_guest_page_fault_1+0x184>
    8001a48e:	6498                	ld	a4,8(s1)
    8001a490:	47dd                	li	a5,23
    8001a492:	00f70c63          	beq	a4,a5,8001a4aa <amo_guest_page_fault_1+0x198>
    8001a496:	0000d517          	auipc	a0,0xd
    8001a49a:	a4250513          	addi	a0,a0,-1470 # 80026ed8 <__func__.0+0x318>
    8001a49e:	2670a0ef          	jal	80024f04 <printf>
    8001a4a2:	02900513          	li	a0,41
    8001a4a6:	069090ef          	jal	80023d0e <putchar>
    8001a4aa:	4529                	li	a0,10
    8001a4ac:	063090ef          	jal	80023d0e <putchar>
    8001a4b0:	02090363          	beqz	s2,8001a4d6 <amo_guest_page_fault_1+0x1c4>
    8001a4b4:	0002f417          	auipc	s0,0x2f
    8001a4b8:	b5d44403          	lbu	s0,-1187(s0) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001a4bc:	0000d597          	auipc	a1,0xd
    8001a4c0:	9d458593          	addi	a1,a1,-1580 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a4c4:	cc11                	beqz	s0,8001a4e0 <amo_guest_page_fault_1+0x1ce>
    8001a4c6:	6498                	ld	a4,8(s1)
    8001a4c8:	47dd                	li	a5,23
    TEST_END();
    8001a4ca:	0000d597          	auipc	a1,0xd
    8001a4ce:	9b658593          	addi	a1,a1,-1610 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001a4d2:	00f70763          	beq	a4,a5,8001a4e0 <amo_guest_page_fault_1+0x1ce>
    8001a4d6:	4401                	li	s0,0
    TEST_END();
    8001a4d8:	0000d597          	auipc	a1,0xd
    8001a4dc:	9b858593          	addi	a1,a1,-1608 # 80026e90 <__func__.0+0x2d0>
    8001a4e0:	0000d517          	auipc	a0,0xd
    8001a4e4:	a5850513          	addi	a0,a0,-1448 # 80026f38 <__func__.0+0x378>
    8001a4e8:	21d0a0ef          	jal	80024f04 <printf>
    8001a4ec:	4511                	li	a0,4
    8001a4ee:	f08e60ef          	jal	80000bf6 <goto_priv>
    8001a4f2:	fbbe60ef          	jal	800014ac <reset_state>
}
    8001a4f6:	60e2                	ld	ra,24(sp)
    8001a4f8:	8522                	mv	a0,s0
    8001a4fa:	6442                	ld	s0,16(sp)
    8001a4fc:	64a2                	ld	s1,8(sp)
    8001a4fe:	6902                	ld	s2,0(sp)
    8001a500:	6105                	addi	sp,sp,32
    8001a502:	8082                	ret

000000008001a504 <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    8001a504:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a506:	0000c597          	auipc	a1,0xc
    8001a50a:	d7258593          	addi	a1,a1,-654 # 80026278 <__func__.10>
    8001a50e:	0000d517          	auipc	a0,0xd
    8001a512:	99250513          	addi	a0,a0,-1646 # 80026ea0 <__func__.0+0x2e0>
bool amo_guest_page_fault_2(){
    8001a516:	ec06                	sd	ra,24(sp)
    8001a518:	e822                	sd	s0,16(sp)
    8001a51a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a51c:	1e90a0ef          	jal	80024f04 <printf>
    8001a520:	4529                	li	a0,10
    8001a522:	7ec090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001a526:	450d                	li	a0,3
    8001a528:	ecee60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a52c:	8b4e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a530:	af2e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a534:	97ce60ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    8001a538:	4509                	li	a0,2
    8001a53a:	ebce60ef          	jal	80000bf6 <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001a53e:	0330000f          	fence	rw,rw
    8001a542:	0002f417          	auipc	s0,0x2f
    8001a546:	ace40413          	addi	s0,s0,-1330 # 80049010 <excpt>
    8001a54a:	4785                	li	a5,1
    8001a54c:	0002f717          	auipc	a4,0x2f
    8001a550:	ae073e23          	sd	zero,-1284(a4) # 80049048 <excpt+0x38>
    8001a554:	00f41023          	sh	a5,0(s0)
    8001a558:	0330000f          	fence	rw,rw
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a55c:	000807b7          	lui	a5,0x80
    8001a560:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8001a564:	37ab77b7          	lui	a5,0x37ab7
    8001a568:	00100737          	lui	a4,0x100
    8001a56c:	078a                	slli	a5,a5,0x2
    8001a56e:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a572:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a576:	0732                	slli	a4,a4,0xc
    8001a578:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a57c:	08200593          	li	a1,130
    8001a580:	00013617          	auipc	a2,0x13
    8001a584:	95060613          	addi	a2,a2,-1712 # 8002ced0 <__func__.0+0x6310>
    8001a588:	0000d517          	auipc	a0,0xd
    8001a58c:	93050513          	addi	a0,a0,-1744 # 80026eb8 <__func__.0+0x2f8>
    8001a590:	1750a0ef          	jal	80024f04 <printf>
    8001a594:	0002f797          	auipc	a5,0x2f
    8001a598:	a7d7c783          	lbu	a5,-1411(a5) # 80049011 <excpt+0x1>
    8001a59c:	0000d597          	auipc	a1,0xd
    8001a5a0:	8f458593          	addi	a1,a1,-1804 # 80026e90 <__func__.0+0x2d0>
    8001a5a4:	cf89                	beqz	a5,8001a5be <amo_guest_page_fault_2+0xba>
    8001a5a6:	6418                	ld	a4,8(s0)
    8001a5a8:	47dd                	li	a5,23
    8001a5aa:	0000d597          	auipc	a1,0xd
    8001a5ae:	8d658593          	addi	a1,a1,-1834 # 80026e80 <__func__.0+0x2c0>
    8001a5b2:	00f70663          	beq	a4,a5,8001a5be <amo_guest_page_fault_2+0xba>
    8001a5b6:	0000d597          	auipc	a1,0xd
    8001a5ba:	8da58593          	addi	a1,a1,-1830 # 80026e90 <__func__.0+0x2d0>
    8001a5be:	0000d517          	auipc	a0,0xd
    8001a5c2:	91250513          	addi	a0,a0,-1774 # 80026ed0 <__func__.0+0x310>
    8001a5c6:	13f0a0ef          	jal	80024f04 <printf>
    8001a5ca:	0002f797          	auipc	a5,0x2f
    8001a5ce:	a477c783          	lbu	a5,-1465(a5) # 80049011 <excpt+0x1>
    8001a5d2:	c789                	beqz	a5,8001a5dc <amo_guest_page_fault_2+0xd8>
    8001a5d4:	6418                	ld	a4,8(s0)
    8001a5d6:	47dd                	li	a5,23
    8001a5d8:	00f70c63          	beq	a4,a5,8001a5f0 <amo_guest_page_fault_2+0xec>
    8001a5dc:	0000d517          	auipc	a0,0xd
    8001a5e0:	8fc50513          	addi	a0,a0,-1796 # 80026ed8 <__func__.0+0x318>
    8001a5e4:	1210a0ef          	jal	80024f04 <printf>
    8001a5e8:	02900513          	li	a0,41
    8001a5ec:	722090ef          	jal	80023d0e <putchar>
    8001a5f0:	4529                	li	a0,10
    8001a5f2:	71c090ef          	jal	80023d0e <putchar>
    8001a5f6:	0002f497          	auipc	s1,0x2f
    8001a5fa:	a1b4c483          	lbu	s1,-1509(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001a5fe:	0000d597          	auipc	a1,0xd
    8001a602:	89258593          	addi	a1,a1,-1902 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a606:	cc91                	beqz	s1,8001a622 <amo_guest_page_fault_2+0x11e>
    8001a608:	6418                	ld	a4,8(s0)
    8001a60a:	47dd                	li	a5,23
    TEST_END();
    8001a60c:	0000d597          	auipc	a1,0xd
    8001a610:	87458593          	addi	a1,a1,-1932 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001a614:	00f70763          	beq	a4,a5,8001a622 <amo_guest_page_fault_2+0x11e>
    8001a618:	4481                	li	s1,0
    TEST_END();
    8001a61a:	0000d597          	auipc	a1,0xd
    8001a61e:	87658593          	addi	a1,a1,-1930 # 80026e90 <__func__.0+0x2d0>
    8001a622:	0000d517          	auipc	a0,0xd
    8001a626:	91650513          	addi	a0,a0,-1770 # 80026f38 <__func__.0+0x378>
    8001a62a:	0db0a0ef          	jal	80024f04 <printf>
    8001a62e:	4511                	li	a0,4
    8001a630:	dc6e60ef          	jal	80000bf6 <goto_priv>
    8001a634:	e79e60ef          	jal	800014ac <reset_state>
}
    8001a638:	60e2                	ld	ra,24(sp)
    8001a63a:	6442                	ld	s0,16(sp)
    8001a63c:	8526                	mv	a0,s1
    8001a63e:	64a2                	ld	s1,8(sp)
    8001a640:	6105                	addi	sp,sp,32
    8001a642:	8082                	ret

000000008001a644 <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    8001a644:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a646:	0000c597          	auipc	a1,0xc
    8001a64a:	c4a58593          	addi	a1,a1,-950 # 80026290 <__func__.9>
    8001a64e:	0000d517          	auipc	a0,0xd
    8001a652:	85250513          	addi	a0,a0,-1966 # 80026ea0 <__func__.0+0x2e0>
bool amo_guest_page_fault_3(){
    8001a656:	ec06                	sd	ra,24(sp)
    8001a658:	e822                	sd	s0,16(sp)
    8001a65a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a65c:	0a90a0ef          	jal	80024f04 <printf>
    8001a660:	4529                	li	a0,10
    8001a662:	6ac090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001a666:	450d                	li	a0,3
    8001a668:	d8ee60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a66c:	f75e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a670:	9b2e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a674:	83ce60ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    8001a678:	4509                	li	a0,2
    8001a67a:	d7ce60ef          	jal	80000bf6 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001a67e:	0330000f          	fence	rw,rw
    8001a682:	0002f497          	auipc	s1,0x2f
    8001a686:	98e48493          	addi	s1,s1,-1650 # 80049010 <excpt>
    8001a68a:	4785                	li	a5,1
    8001a68c:	0002f717          	auipc	a4,0x2f
    8001a690:	9a073e23          	sd	zero,-1604(a4) # 80049048 <excpt+0x38>
    8001a694:	00f49023          	sh	a5,0(s1)
    8001a698:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001a69c:	000807b7          	lui	a5,0x80
    8001a6a0:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001a6a4:	37ab77b7          	lui	a5,0x37ab7
    8001a6a8:	00100737          	lui	a4,0x100
    8001a6ac:	078a                	slli	a5,a5,0x2
    8001a6ae:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001a6b2:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a6b6:	0732                	slli	a4,a4,0xc
    8001a6b8:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001a6bc:	08200593          	li	a1,130
    8001a6c0:	00013617          	auipc	a2,0x13
    8001a6c4:	87860613          	addi	a2,a2,-1928 # 8002cf38 <__func__.0+0x6378>
    8001a6c8:	0000c517          	auipc	a0,0xc
    8001a6cc:	7f050513          	addi	a0,a0,2032 # 80026eb8 <__func__.0+0x2f8>
    8001a6d0:	0350a0ef          	jal	80024f04 <printf>
    8001a6d4:	0002f797          	auipc	a5,0x2f
    8001a6d8:	93d7c783          	lbu	a5,-1731(a5) # 80049011 <excpt+0x1>
    8001a6dc:	0000c597          	auipc	a1,0xc
    8001a6e0:	7b458593          	addi	a1,a1,1972 # 80026e90 <__func__.0+0x2d0>
    8001a6e4:	cf89                	beqz	a5,8001a6fe <amo_guest_page_fault_3+0xba>
    8001a6e6:	6498                	ld	a4,8(s1)
    8001a6e8:	47dd                	li	a5,23
    8001a6ea:	0000c597          	auipc	a1,0xc
    8001a6ee:	79658593          	addi	a1,a1,1942 # 80026e80 <__func__.0+0x2c0>
    8001a6f2:	00f70663          	beq	a4,a5,8001a6fe <amo_guest_page_fault_3+0xba>
    8001a6f6:	0000c597          	auipc	a1,0xc
    8001a6fa:	79a58593          	addi	a1,a1,1946 # 80026e90 <__func__.0+0x2d0>
    8001a6fe:	0000c517          	auipc	a0,0xc
    8001a702:	7d250513          	addi	a0,a0,2002 # 80026ed0 <__func__.0+0x310>
    8001a706:	7fe0a0ef          	jal	80024f04 <printf>
    8001a70a:	0002f797          	auipc	a5,0x2f
    8001a70e:	9077c783          	lbu	a5,-1785(a5) # 80049011 <excpt+0x1>
    8001a712:	c789                	beqz	a5,8001a71c <amo_guest_page_fault_3+0xd8>
    8001a714:	6498                	ld	a4,8(s1)
    8001a716:	47dd                	li	a5,23
    8001a718:	00f70c63          	beq	a4,a5,8001a730 <amo_guest_page_fault_3+0xec>
    8001a71c:	0000c517          	auipc	a0,0xc
    8001a720:	7bc50513          	addi	a0,a0,1980 # 80026ed8 <__func__.0+0x318>
    8001a724:	7e00a0ef          	jal	80024f04 <printf>
    8001a728:	02900513          	li	a0,41
    8001a72c:	5e2090ef          	jal	80023d0e <putchar>
    8001a730:	4529                	li	a0,10
    8001a732:	5dc090ef          	jal	80023d0e <putchar>
    8001a736:	0002f417          	auipc	s0,0x2f
    8001a73a:	8db44403          	lbu	s0,-1829(s0) # 80049011 <excpt+0x1>
    8001a73e:	c409                	beqz	s0,8001a748 <amo_guest_page_fault_3+0x104>
    8001a740:	6498                	ld	a4,8(s1)
    8001a742:	47dd                	li	a5,23
    8001a744:	02f70c63          	beq	a4,a5,8001a77c <amo_guest_page_fault_3+0x138>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a748:	000807b7          	lui	a5,0x80
    8001a74c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001a750:	4401                	li	s0,0

    TEST_END();
    8001a752:	0000c597          	auipc	a1,0xc
    8001a756:	73e58593          	addi	a1,a1,1854 # 80026e90 <__func__.0+0x2d0>
    8001a75a:	0000c517          	auipc	a0,0xc
    8001a75e:	7de50513          	addi	a0,a0,2014 # 80026f38 <__func__.0+0x378>
    8001a762:	7a20a0ef          	jal	80024f04 <printf>
    8001a766:	4511                	li	a0,4
    8001a768:	c8ee60ef          	jal	80000bf6 <goto_priv>
    8001a76c:	d41e60ef          	jal	800014ac <reset_state>
}
    8001a770:	60e2                	ld	ra,24(sp)
    8001a772:	8522                	mv	a0,s0
    8001a774:	6442                	ld	s0,16(sp)
    8001a776:	64a2                	ld	s1,8(sp)
    8001a778:	6105                	addi	sp,sp,32
    8001a77a:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001a77c:	000807b7          	lui	a5,0x80
    8001a780:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001a784:	0000c597          	auipc	a1,0xc
    8001a788:	6fc58593          	addi	a1,a1,1788 # 80026e80 <__func__.0+0x2c0>
    8001a78c:	b7f9                	j	8001a75a <amo_guest_page_fault_3+0x116>

000000008001a78e <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    8001a78e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a790:	0000c597          	auipc	a1,0xc
    8001a794:	b1858593          	addi	a1,a1,-1256 # 800262a8 <__func__.8>
    8001a798:	0000c517          	auipc	a0,0xc
    8001a79c:	70850513          	addi	a0,a0,1800 # 80026ea0 <__func__.0+0x2e0>
bool amo_guest_page_fault_4(){
    8001a7a0:	ec06                	sd	ra,24(sp)
    8001a7a2:	e822                	sd	s0,16(sp)
    8001a7a4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a7a6:	75e0a0ef          	jal	80024f04 <printf>
    8001a7aa:	4529                	li	a0,10
    8001a7ac:	562090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001a7b0:	450d                	li	a0,3
    8001a7b2:	c44e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a7b6:	e2be50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a7ba:	868e60ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a7be:	ef3e50ef          	jal	800006b0 <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    8001a7c2:	4511                	li	a0,4
    8001a7c4:	c32e60ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    8001a7c8:	000407b7          	lui	a5,0x40
    8001a7cc:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    8001a7d0:	450d                	li	a0,3
    8001a7d2:	c24e60ef          	jal	80000bf6 <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001a7d6:	0330000f          	fence	rw,rw
    8001a7da:	0002f417          	auipc	s0,0x2f
    8001a7de:	83640413          	addi	s0,s0,-1994 # 80049010 <excpt>
    8001a7e2:	4785                	li	a5,1
    8001a7e4:	0002f717          	auipc	a4,0x2f
    8001a7e8:	86073223          	sd	zero,-1948(a4) # 80049048 <excpt+0x38>
    8001a7ec:	00f41023          	sh	a5,0(s0)
    8001a7f0:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8001a7f4:	37ab77b7          	lui	a5,0x37ab7
    8001a7f8:	00080737          	lui	a4,0x80
    8001a7fc:	078a                	slli	a5,a5,0x2
    8001a7fe:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    8001a800:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a804:	0736                	slli	a4,a4,0xd
    8001a806:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001a80a:	08200593          	li	a1,130
    8001a80e:	00012617          	auipc	a2,0x12
    8001a812:	79a60613          	addi	a2,a2,1946 # 8002cfa8 <__func__.0+0x63e8>
    8001a816:	0000c517          	auipc	a0,0xc
    8001a81a:	6a250513          	addi	a0,a0,1698 # 80026eb8 <__func__.0+0x2f8>
    8001a81e:	6e60a0ef          	jal	80024f04 <printf>
    8001a822:	0002e797          	auipc	a5,0x2e
    8001a826:	7ef7c783          	lbu	a5,2031(a5) # 80049011 <excpt+0x1>
    8001a82a:	0000c597          	auipc	a1,0xc
    8001a82e:	66658593          	addi	a1,a1,1638 # 80026e90 <__func__.0+0x2d0>
    8001a832:	cf89                	beqz	a5,8001a84c <amo_guest_page_fault_4+0xbe>
    8001a834:	6418                	ld	a4,8(s0)
    8001a836:	47bd                	li	a5,15
    8001a838:	0000c597          	auipc	a1,0xc
    8001a83c:	64858593          	addi	a1,a1,1608 # 80026e80 <__func__.0+0x2c0>
    8001a840:	00f70663          	beq	a4,a5,8001a84c <amo_guest_page_fault_4+0xbe>
    8001a844:	0000c597          	auipc	a1,0xc
    8001a848:	64c58593          	addi	a1,a1,1612 # 80026e90 <__func__.0+0x2d0>
    8001a84c:	0000c517          	auipc	a0,0xc
    8001a850:	68450513          	addi	a0,a0,1668 # 80026ed0 <__func__.0+0x310>
    8001a854:	6b00a0ef          	jal	80024f04 <printf>
    8001a858:	0002e797          	auipc	a5,0x2e
    8001a85c:	7b97c783          	lbu	a5,1977(a5) # 80049011 <excpt+0x1>
    8001a860:	c789                	beqz	a5,8001a86a <amo_guest_page_fault_4+0xdc>
    8001a862:	6418                	ld	a4,8(s0)
    8001a864:	47bd                	li	a5,15
    8001a866:	00f70c63          	beq	a4,a5,8001a87e <amo_guest_page_fault_4+0xf0>
    8001a86a:	0000c517          	auipc	a0,0xc
    8001a86e:	66e50513          	addi	a0,a0,1646 # 80026ed8 <__func__.0+0x318>
    8001a872:	6920a0ef          	jal	80024f04 <printf>
    8001a876:	02900513          	li	a0,41
    8001a87a:	494090ef          	jal	80023d0e <putchar>
    8001a87e:	4529                	li	a0,10
    8001a880:	48e090ef          	jal	80023d0e <putchar>
    8001a884:	0002e497          	auipc	s1,0x2e
    8001a888:	78d4c483          	lbu	s1,1933(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001a88c:	0000c597          	auipc	a1,0xc
    8001a890:	60458593          	addi	a1,a1,1540 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001a894:	cc91                	beqz	s1,8001a8b0 <amo_guest_page_fault_4+0x122>
    8001a896:	6418                	ld	a4,8(s0)
    8001a898:	47bd                	li	a5,15
    TEST_END();
    8001a89a:	0000c597          	auipc	a1,0xc
    8001a89e:	5e658593          	addi	a1,a1,1510 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    8001a8a2:	00f70763          	beq	a4,a5,8001a8b0 <amo_guest_page_fault_4+0x122>
    8001a8a6:	4481                	li	s1,0
    TEST_END();
    8001a8a8:	0000c597          	auipc	a1,0xc
    8001a8ac:	5e858593          	addi	a1,a1,1512 # 80026e90 <__func__.0+0x2d0>
    8001a8b0:	0000c517          	auipc	a0,0xc
    8001a8b4:	68850513          	addi	a0,a0,1672 # 80026f38 <__func__.0+0x378>
    8001a8b8:	64c0a0ef          	jal	80024f04 <printf>
    8001a8bc:	4511                	li	a0,4
    8001a8be:	b38e60ef          	jal	80000bf6 <goto_priv>
    8001a8c2:	bebe60ef          	jal	800014ac <reset_state>
}
    8001a8c6:	60e2                	ld	ra,24(sp)
    8001a8c8:	6442                	ld	s0,16(sp)
    8001a8ca:	8526                	mv	a0,s1
    8001a8cc:	64a2                	ld	s1,8(sp)
    8001a8ce:	6105                	addi	sp,sp,32
    8001a8d0:	8082                	ret

000000008001a8d2 <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    8001a8d2:	1141                	addi	sp,sp,-16

    TEST_START();
    8001a8d4:	0000c597          	auipc	a1,0xc
    8001a8d8:	9ec58593          	addi	a1,a1,-1556 # 800262c0 <__func__.7>
    8001a8dc:	0000c517          	auipc	a0,0xc
    8001a8e0:	5c450513          	addi	a0,a0,1476 # 80026ea0 <__func__.0+0x2e0>
bool amo_guest_page_fault_5(){
    8001a8e4:	e406                	sd	ra,8(sp)
    8001a8e6:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a8e8:	61c0a0ef          	jal	80024f04 <printf>
    8001a8ec:	4529                	li	a0,10
    8001a8ee:	420090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001a8f2:	450d                	li	a0,3
    8001a8f4:	b02e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001a8f8:	ce9e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001a8fc:	f27e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001a900:	db1e50ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    8001a904:	4511                	li	a0,4
    8001a906:	af0e60ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    8001a90a:	000407b7          	lui	a5,0x40
    8001a90e:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001a912:	450d                	li	a0,3
    8001a914:	ae2e60ef          	jal	80000bf6 <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001a918:	0330000f          	fence	rw,rw
    8001a91c:	4785                	li	a5,1
    8001a91e:	0002e717          	auipc	a4,0x2e
    8001a922:	72073523          	sd	zero,1834(a4) # 80049048 <excpt+0x38>
    8001a926:	0002e717          	auipc	a4,0x2e
    8001a92a:	6ef71523          	sh	a5,1770(a4) # 80049010 <excpt>
    8001a92e:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8001a932:	37ab77b7          	lui	a5,0x37ab7
    8001a936:	00080737          	lui	a4,0x80
    8001a93a:	078a                	slli	a5,a5,0x2
    8001a93c:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    8001a93e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001a942:	0736                	slli	a4,a4,0xd
    8001a944:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001a948:	08200593          	li	a1,130
    8001a94c:	00012617          	auipc	a2,0x12
    8001a950:	69c60613          	addi	a2,a2,1692 # 8002cfe8 <__func__.0+0x6428>
    8001a954:	0000c517          	auipc	a0,0xc
    8001a958:	56450513          	addi	a0,a0,1380 # 80026eb8 <__func__.0+0x2f8>
    8001a95c:	5a80a0ef          	jal	80024f04 <printf>
    8001a960:	0002e797          	auipc	a5,0x2e
    8001a964:	6b17c783          	lbu	a5,1713(a5) # 80049011 <excpt+0x1>
    8001a968:	0000c597          	auipc	a1,0xc
    8001a96c:	51858593          	addi	a1,a1,1304 # 80026e80 <__func__.0+0x2c0>
    8001a970:	c789                	beqz	a5,8001a97a <amo_guest_page_fault_5+0xa8>
    8001a972:	0000c597          	auipc	a1,0xc
    8001a976:	51e58593          	addi	a1,a1,1310 # 80026e90 <__func__.0+0x2d0>
    8001a97a:	0000c517          	auipc	a0,0xc
    8001a97e:	55650513          	addi	a0,a0,1366 # 80026ed0 <__func__.0+0x310>
    8001a982:	5820a0ef          	jal	80024f04 <printf>
    8001a986:	0002e797          	auipc	a5,0x2e
    8001a98a:	68b7c783          	lbu	a5,1675(a5) # 80049011 <excpt+0x1>
    8001a98e:	e7a1                	bnez	a5,8001a9d6 <amo_guest_page_fault_5+0x104>
    8001a990:	4529                	li	a0,10
    8001a992:	37c090ef          	jal	80023d0e <putchar>
    8001a996:	0002e797          	auipc	a5,0x2e
    8001a99a:	67b7c783          	lbu	a5,1659(a5) # 80049011 <excpt+0x1>
    8001a99e:	e795                	bnez	a5,8001a9ca <amo_guest_page_fault_5+0xf8>
    8001a9a0:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001a9a2:	0000c597          	auipc	a1,0xc
    8001a9a6:	4de58593          	addi	a1,a1,1246 # 80026e80 <__func__.0+0x2c0>
    8001a9aa:	0000c517          	auipc	a0,0xc
    8001a9ae:	58e50513          	addi	a0,a0,1422 # 80026f38 <__func__.0+0x378>
    8001a9b2:	5520a0ef          	jal	80024f04 <printf>
    8001a9b6:	4511                	li	a0,4
    8001a9b8:	a3ee60ef          	jal	80000bf6 <goto_priv>
    8001a9bc:	af1e60ef          	jal	800014ac <reset_state>
}
    8001a9c0:	60a2                	ld	ra,8(sp)
    8001a9c2:	8522                	mv	a0,s0
    8001a9c4:	6402                	ld	s0,0(sp)
    8001a9c6:	0141                	addi	sp,sp,16
    8001a9c8:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001a9ca:	4401                	li	s0,0
    TEST_END();
    8001a9cc:	0000c597          	auipc	a1,0xc
    8001a9d0:	4c458593          	addi	a1,a1,1220 # 80026e90 <__func__.0+0x2d0>
    8001a9d4:	bfd9                	j	8001a9aa <amo_guest_page_fault_5+0xd8>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001a9d6:	0000c517          	auipc	a0,0xc
    8001a9da:	50250513          	addi	a0,a0,1282 # 80026ed8 <__func__.0+0x318>
    8001a9de:	5260a0ef          	jal	80024f04 <printf>
    8001a9e2:	02900513          	li	a0,41
    8001a9e6:	328090ef          	jal	80023d0e <putchar>
    8001a9ea:	b75d                	j	8001a990 <amo_guest_page_fault_5+0xbe>

000000008001a9ec <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    8001a9ec:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a9ee:	0000c597          	auipc	a1,0xc
    8001a9f2:	8ea58593          	addi	a1,a1,-1814 # 800262d8 <__func__.6>
    8001a9f6:	0000c517          	auipc	a0,0xc
    8001a9fa:	4aa50513          	addi	a0,a0,1194 # 80026ea0 <__func__.0+0x2e0>
bool instruction_guest_page_fault_1(){
    8001a9fe:	ec06                	sd	ra,24(sp)
    8001aa00:	e822                	sd	s0,16(sp)
    8001aa02:	e426                	sd	s1,8(sp)
    TEST_START();
    8001aa04:	5000a0ef          	jal	80024f04 <printf>
    8001aa08:	4529                	li	a0,10
    8001aa0a:	304090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001aa0e:	450d                	li	a0,3
    8001aa10:	9e6e60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001aa14:	bcde50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001aa18:	e0be50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001aa1c:	c95e50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001aa20:	4509                	li	a0,2
    8001aa22:	9d4e60ef          	jal	80000bf6 <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    8001aa26:	0330000f          	fence	rw,rw
    8001aa2a:	0002e417          	auipc	s0,0x2e
    8001aa2e:	5e640413          	addi	s0,s0,1510 # 80049010 <excpt>
    8001aa32:	4785                	li	a5,1
    8001aa34:	0002e717          	auipc	a4,0x2e
    8001aa38:	60073a23          	sd	zero,1556(a4) # 80049048 <excpt+0x38>
    8001aa3c:	00f41023          	sh	a5,0(s0)
    8001aa40:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001aa44:	001007b7          	lui	a5,0x100
    8001aa48:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001aa4c:	07b2                	slli	a5,a5,0xc
    8001aa4e:	00000297          	auipc	t0,0x0
    8001aa52:	00c28293          	addi	t0,t0,12 # 8001aa5a <instruction_guest_page_fault_1+0x6e>
    8001aa56:	02543c23          	sd	t0,56(s0)
    8001aa5a:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001aa5c:	08200593          	li	a1,130
    8001aa60:	00012617          	auipc	a2,0x12
    8001aa64:	5c860613          	addi	a2,a2,1480 # 8002d028 <__func__.0+0x6468>
    8001aa68:	0000c517          	auipc	a0,0xc
    8001aa6c:	45050513          	addi	a0,a0,1104 # 80026eb8 <__func__.0+0x2f8>
    8001aa70:	4940a0ef          	jal	80024f04 <printf>
    8001aa74:	0002e797          	auipc	a5,0x2e
    8001aa78:	59d7c783          	lbu	a5,1437(a5) # 80049011 <excpt+0x1>
    8001aa7c:	0000c597          	auipc	a1,0xc
    8001aa80:	41458593          	addi	a1,a1,1044 # 80026e90 <__func__.0+0x2d0>
    8001aa84:	cf89                	beqz	a5,8001aa9e <instruction_guest_page_fault_1+0xb2>
    8001aa86:	6418                	ld	a4,8(s0)
    8001aa88:	47d1                	li	a5,20
    8001aa8a:	0000c597          	auipc	a1,0xc
    8001aa8e:	3f658593          	addi	a1,a1,1014 # 80026e80 <__func__.0+0x2c0>
    8001aa92:	00f70663          	beq	a4,a5,8001aa9e <instruction_guest_page_fault_1+0xb2>
    8001aa96:	0000c597          	auipc	a1,0xc
    8001aa9a:	3fa58593          	addi	a1,a1,1018 # 80026e90 <__func__.0+0x2d0>
    8001aa9e:	0000c517          	auipc	a0,0xc
    8001aaa2:	43250513          	addi	a0,a0,1074 # 80026ed0 <__func__.0+0x310>
    8001aaa6:	45e0a0ef          	jal	80024f04 <printf>
    8001aaaa:	0002e797          	auipc	a5,0x2e
    8001aaae:	5677c783          	lbu	a5,1383(a5) # 80049011 <excpt+0x1>
    8001aab2:	c789                	beqz	a5,8001aabc <instruction_guest_page_fault_1+0xd0>
    8001aab4:	6418                	ld	a4,8(s0)
    8001aab6:	47d1                	li	a5,20
    8001aab8:	00f70c63          	beq	a4,a5,8001aad0 <instruction_guest_page_fault_1+0xe4>
    8001aabc:	0000c517          	auipc	a0,0xc
    8001aac0:	41c50513          	addi	a0,a0,1052 # 80026ed8 <__func__.0+0x318>
    8001aac4:	4400a0ef          	jal	80024f04 <printf>
    8001aac8:	02900513          	li	a0,41
    8001aacc:	242090ef          	jal	80023d0e <putchar>
    8001aad0:	4529                	li	a0,10
    8001aad2:	23c090ef          	jal	80023d0e <putchar>
    8001aad6:	0002e497          	auipc	s1,0x2e
    8001aada:	53b4c483          	lbu	s1,1339(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001aade:	0000c597          	auipc	a1,0xc
    8001aae2:	3b258593          	addi	a1,a1,946 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001aae6:	cc91                	beqz	s1,8001ab02 <instruction_guest_page_fault_1+0x116>
    8001aae8:	6418                	ld	a4,8(s0)
    8001aaea:	47d1                	li	a5,20
    TEST_END();
    8001aaec:	0000c597          	auipc	a1,0xc
    8001aaf0:	39458593          	addi	a1,a1,916 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001aaf4:	00f70763          	beq	a4,a5,8001ab02 <instruction_guest_page_fault_1+0x116>
    8001aaf8:	4481                	li	s1,0
    TEST_END();
    8001aafa:	0000c597          	auipc	a1,0xc
    8001aafe:	39658593          	addi	a1,a1,918 # 80026e90 <__func__.0+0x2d0>
    8001ab02:	0000c517          	auipc	a0,0xc
    8001ab06:	43650513          	addi	a0,a0,1078 # 80026f38 <__func__.0+0x378>
    8001ab0a:	3fa0a0ef          	jal	80024f04 <printf>
    8001ab0e:	4511                	li	a0,4
    8001ab10:	8e6e60ef          	jal	80000bf6 <goto_priv>
    8001ab14:	999e60ef          	jal	800014ac <reset_state>

}
    8001ab18:	60e2                	ld	ra,24(sp)
    8001ab1a:	6442                	ld	s0,16(sp)
    8001ab1c:	8526                	mv	a0,s1
    8001ab1e:	64a2                	ld	s1,8(sp)
    8001ab20:	6105                	addi	sp,sp,32
    8001ab22:	8082                	ret

000000008001ab24 <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    8001ab24:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ab26:	0000b597          	auipc	a1,0xb
    8001ab2a:	7d258593          	addi	a1,a1,2002 # 800262f8 <__func__.5>
    8001ab2e:	0000c517          	auipc	a0,0xc
    8001ab32:	37250513          	addi	a0,a0,882 # 80026ea0 <__func__.0+0x2e0>
bool instruction_guest_page_fault_2(){
    8001ab36:	ec06                	sd	ra,24(sp)
    8001ab38:	e822                	sd	s0,16(sp)
    8001ab3a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ab3c:	3c80a0ef          	jal	80024f04 <printf>
    8001ab40:	4529                	li	a0,10
    8001ab42:	1cc090ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001ab46:	450d                	li	a0,3
    8001ab48:	8aee60ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001ab4c:	a95e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001ab50:	cd3e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001ab54:	b5de50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001ab58:	4509                	li	a0,2
    8001ab5a:	89ce60ef          	jal	80000bf6 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001ab5e:	0330000f          	fence	rw,rw
    8001ab62:	0002e417          	auipc	s0,0x2e
    8001ab66:	4ae40413          	addi	s0,s0,1198 # 80049010 <excpt>
    8001ab6a:	4785                	li	a5,1
    8001ab6c:	0002e717          	auipc	a4,0x2e
    8001ab70:	4c073e23          	sd	zero,1244(a4) # 80049048 <excpt+0x38>
    8001ab74:	00f41023          	sh	a5,0(s0)
    8001ab78:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001ab7c:	400137b7          	lui	a5,0x40013
    8001ab80:	078a                	slli	a5,a5,0x2
    8001ab82:	00000297          	auipc	t0,0x0
    8001ab86:	00c28293          	addi	t0,t0,12 # 8001ab8e <instruction_guest_page_fault_2+0x6a>
    8001ab8a:	02543c23          	sd	t0,56(s0)
    8001ab8e:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001ab90:	08200593          	li	a1,130
    8001ab94:	00012617          	auipc	a2,0x12
    8001ab98:	4f460613          	addi	a2,a2,1268 # 8002d088 <__func__.0+0x64c8>
    8001ab9c:	0000c517          	auipc	a0,0xc
    8001aba0:	31c50513          	addi	a0,a0,796 # 80026eb8 <__func__.0+0x2f8>
    8001aba4:	3600a0ef          	jal	80024f04 <printf>
    8001aba8:	0002e797          	auipc	a5,0x2e
    8001abac:	4697c783          	lbu	a5,1129(a5) # 80049011 <excpt+0x1>
    8001abb0:	0000c597          	auipc	a1,0xc
    8001abb4:	2e058593          	addi	a1,a1,736 # 80026e90 <__func__.0+0x2d0>
    8001abb8:	cf89                	beqz	a5,8001abd2 <instruction_guest_page_fault_2+0xae>
    8001abba:	6418                	ld	a4,8(s0)
    8001abbc:	47d1                	li	a5,20
    8001abbe:	0000c597          	auipc	a1,0xc
    8001abc2:	2c258593          	addi	a1,a1,706 # 80026e80 <__func__.0+0x2c0>
    8001abc6:	00f70663          	beq	a4,a5,8001abd2 <instruction_guest_page_fault_2+0xae>
    8001abca:	0000c597          	auipc	a1,0xc
    8001abce:	2c658593          	addi	a1,a1,710 # 80026e90 <__func__.0+0x2d0>
    8001abd2:	0000c517          	auipc	a0,0xc
    8001abd6:	2fe50513          	addi	a0,a0,766 # 80026ed0 <__func__.0+0x310>
    8001abda:	32a0a0ef          	jal	80024f04 <printf>
    8001abde:	0002e797          	auipc	a5,0x2e
    8001abe2:	4337c783          	lbu	a5,1075(a5) # 80049011 <excpt+0x1>
    8001abe6:	c789                	beqz	a5,8001abf0 <instruction_guest_page_fault_2+0xcc>
    8001abe8:	6418                	ld	a4,8(s0)
    8001abea:	47d1                	li	a5,20
    8001abec:	00f70c63          	beq	a4,a5,8001ac04 <instruction_guest_page_fault_2+0xe0>
    8001abf0:	0000c517          	auipc	a0,0xc
    8001abf4:	2e850513          	addi	a0,a0,744 # 80026ed8 <__func__.0+0x318>
    8001abf8:	30c0a0ef          	jal	80024f04 <printf>
    8001abfc:	02900513          	li	a0,41
    8001ac00:	10e090ef          	jal	80023d0e <putchar>
    8001ac04:	4529                	li	a0,10
    8001ac06:	108090ef          	jal	80023d0e <putchar>
    8001ac0a:	0002e497          	auipc	s1,0x2e
    8001ac0e:	4074c483          	lbu	s1,1031(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001ac12:	0000c597          	auipc	a1,0xc
    8001ac16:	27e58593          	addi	a1,a1,638 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001ac1a:	cc91                	beqz	s1,8001ac36 <instruction_guest_page_fault_2+0x112>
    8001ac1c:	6418                	ld	a4,8(s0)
    8001ac1e:	47d1                	li	a5,20
    TEST_END();
    8001ac20:	0000c597          	auipc	a1,0xc
    8001ac24:	26058593          	addi	a1,a1,608 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001ac28:	00f70763          	beq	a4,a5,8001ac36 <instruction_guest_page_fault_2+0x112>
    8001ac2c:	4481                	li	s1,0
    TEST_END();
    8001ac2e:	0000c597          	auipc	a1,0xc
    8001ac32:	26258593          	addi	a1,a1,610 # 80026e90 <__func__.0+0x2d0>
    8001ac36:	0000c517          	auipc	a0,0xc
    8001ac3a:	30250513          	addi	a0,a0,770 # 80026f38 <__func__.0+0x378>
    8001ac3e:	2c60a0ef          	jal	80024f04 <printf>
    8001ac42:	4511                	li	a0,4
    8001ac44:	fb3e50ef          	jal	80000bf6 <goto_priv>
    8001ac48:	865e60ef          	jal	800014ac <reset_state>
}
    8001ac4c:	60e2                	ld	ra,24(sp)
    8001ac4e:	6442                	ld	s0,16(sp)
    8001ac50:	8526                	mv	a0,s1
    8001ac52:	64a2                	ld	s1,8(sp)
    8001ac54:	6105                	addi	sp,sp,32
    8001ac56:	8082                	ret

000000008001ac58 <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    8001ac58:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ac5a:	0000b597          	auipc	a1,0xb
    8001ac5e:	6be58593          	addi	a1,a1,1726 # 80026318 <__func__.4>
    8001ac62:	0000c517          	auipc	a0,0xc
    8001ac66:	23e50513          	addi	a0,a0,574 # 80026ea0 <__func__.0+0x2e0>
bool instruction_guest_page_fault_3(){
    8001ac6a:	ec06                	sd	ra,24(sp)
    8001ac6c:	e822                	sd	s0,16(sp)
    8001ac6e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ac70:	2940a0ef          	jal	80024f04 <printf>
    8001ac74:	4529                	li	a0,10
    8001ac76:	098090ef          	jal	80023d0e <putchar>

    CSRC(CSR_VSSTATUS,SSTATUS_SUM);
    8001ac7a:	000407b7          	lui	a5,0x40
    8001ac7e:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001ac82:	450d                	li	a0,3
    8001ac84:	f73e50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001ac88:	959e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001ac8c:	b97e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001ac90:	a21e50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001ac94:	4509                	li	a0,2
    8001ac96:	f61e50ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001ac9a:	0330000f          	fence	rw,rw
    8001ac9e:	0002e417          	auipc	s0,0x2e
    8001aca2:	37240413          	addi	s0,s0,882 # 80049010 <excpt>
    8001aca6:	4785                	li	a5,1
    8001aca8:	0002e717          	auipc	a4,0x2e
    8001acac:	3a073023          	sd	zero,928(a4) # 80049048 <excpt+0x38>
    8001acb0:	00f41023          	sh	a5,0(s0)
    8001acb4:	0330000f          	fence	rw,rw
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    8001acb8:	000807b7          	lui	a5,0x80
    8001acbc:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001acbe:	07b6                	slli	a5,a5,0xd
    8001acc0:	00000297          	auipc	t0,0x0
    8001acc4:	00c28293          	addi	t0,t0,12 # 8001accc <instruction_guest_page_fault_3+0x74>
    8001acc8:	02543c23          	sd	t0,56(s0)
    8001accc:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001acce:	08200593          	li	a1,130
    8001acd2:	00012617          	auipc	a2,0x12
    8001acd6:	41660613          	addi	a2,a2,1046 # 8002d0e8 <__func__.0+0x6528>
    8001acda:	0000c517          	auipc	a0,0xc
    8001acde:	1de50513          	addi	a0,a0,478 # 80026eb8 <__func__.0+0x2f8>
    8001ace2:	2220a0ef          	jal	80024f04 <printf>
    8001ace6:	0002e797          	auipc	a5,0x2e
    8001acea:	32b7c783          	lbu	a5,811(a5) # 80049011 <excpt+0x1>
    8001acee:	0000c597          	auipc	a1,0xc
    8001acf2:	1a258593          	addi	a1,a1,418 # 80026e90 <__func__.0+0x2d0>
    8001acf6:	cf89                	beqz	a5,8001ad10 <instruction_guest_page_fault_3+0xb8>
    8001acf8:	6418                	ld	a4,8(s0)
    8001acfa:	47b1                	li	a5,12
    8001acfc:	0000c597          	auipc	a1,0xc
    8001ad00:	18458593          	addi	a1,a1,388 # 80026e80 <__func__.0+0x2c0>
    8001ad04:	00f70663          	beq	a4,a5,8001ad10 <instruction_guest_page_fault_3+0xb8>
    8001ad08:	0000c597          	auipc	a1,0xc
    8001ad0c:	18858593          	addi	a1,a1,392 # 80026e90 <__func__.0+0x2d0>
    8001ad10:	0000c517          	auipc	a0,0xc
    8001ad14:	1c050513          	addi	a0,a0,448 # 80026ed0 <__func__.0+0x310>
    8001ad18:	1ec0a0ef          	jal	80024f04 <printf>
    8001ad1c:	0002e797          	auipc	a5,0x2e
    8001ad20:	2f57c783          	lbu	a5,757(a5) # 80049011 <excpt+0x1>
    8001ad24:	c789                	beqz	a5,8001ad2e <instruction_guest_page_fault_3+0xd6>
    8001ad26:	6418                	ld	a4,8(s0)
    8001ad28:	47b1                	li	a5,12
    8001ad2a:	00f70c63          	beq	a4,a5,8001ad42 <instruction_guest_page_fault_3+0xea>
    8001ad2e:	0000c517          	auipc	a0,0xc
    8001ad32:	1aa50513          	addi	a0,a0,426 # 80026ed8 <__func__.0+0x318>
    8001ad36:	1ce0a0ef          	jal	80024f04 <printf>
    8001ad3a:	02900513          	li	a0,41
    8001ad3e:	7d1080ef          	jal	80023d0e <putchar>
    8001ad42:	4529                	li	a0,10
    8001ad44:	7cb080ef          	jal	80023d0e <putchar>
    8001ad48:	0002e497          	auipc	s1,0x2e
    8001ad4c:	2c94c483          	lbu	s1,713(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    8001ad50:	0000c597          	auipc	a1,0xc
    8001ad54:	14058593          	addi	a1,a1,320 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001ad58:	cc91                	beqz	s1,8001ad74 <instruction_guest_page_fault_3+0x11c>
    8001ad5a:	6418                	ld	a4,8(s0)
    8001ad5c:	47b1                	li	a5,12
    TEST_END();
    8001ad5e:	0000c597          	auipc	a1,0xc
    8001ad62:	12258593          	addi	a1,a1,290 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001ad66:	00f70763          	beq	a4,a5,8001ad74 <instruction_guest_page_fault_3+0x11c>
    8001ad6a:	4481                	li	s1,0
    TEST_END();
    8001ad6c:	0000c597          	auipc	a1,0xc
    8001ad70:	12458593          	addi	a1,a1,292 # 80026e90 <__func__.0+0x2d0>
    8001ad74:	0000c517          	auipc	a0,0xc
    8001ad78:	1c450513          	addi	a0,a0,452 # 80026f38 <__func__.0+0x378>
    8001ad7c:	1880a0ef          	jal	80024f04 <printf>
    8001ad80:	4511                	li	a0,4
    8001ad82:	e75e50ef          	jal	80000bf6 <goto_priv>
    8001ad86:	f26e60ef          	jal	800014ac <reset_state>
}
    8001ad8a:	60e2                	ld	ra,24(sp)
    8001ad8c:	6442                	ld	s0,16(sp)
    8001ad8e:	8526                	mv	a0,s1
    8001ad90:	64a2                	ld	s1,8(sp)
    8001ad92:	6105                	addi	sp,sp,32
    8001ad94:	8082                	ret

000000008001ad96 <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    8001ad96:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ad98:	0000b597          	auipc	a1,0xb
    8001ad9c:	5a058593          	addi	a1,a1,1440 # 80026338 <__func__.3>
    8001ada0:	0000c517          	auipc	a0,0xc
    8001ada4:	10050513          	addi	a0,a0,256 # 80026ea0 <__func__.0+0x2e0>
bool instruction_guest_page_fault_4(){
    8001ada8:	ec06                	sd	ra,24(sp)
    8001adaa:	e822                	sd	s0,16(sp)
    8001adac:	e426                	sd	s1,8(sp)
    TEST_START();
    8001adae:	1560a0ef          	jal	80024f04 <printf>
    8001adb2:	4529                	li	a0,10
    8001adb4:	75b080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001adb8:	450d                	li	a0,3
    8001adba:	e3de50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001adbe:	823e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001adc2:	a61e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001adc6:	8ebe50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    8001adca:	4511                	li	a0,4
    8001adcc:	e2be50ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001add0:	28005073          	csrwi	vsatp,0
    goto_priv(PRIV_VS);
    8001add4:	4509                	li	a0,2
    8001add6:	e21e50ef          	jal	80000bf6 <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    8001adda:	0330000f          	fence	rw,rw
    8001adde:	0002e417          	auipc	s0,0x2e
    8001ade2:	23240413          	addi	s0,s0,562 # 80049010 <excpt>
    8001ade6:	4785                	li	a5,1
    8001ade8:	0002e717          	auipc	a4,0x2e
    8001adec:	26073023          	sd	zero,608(a4) # 80049048 <excpt+0x38>
    8001adf0:	00f41023          	sh	a5,0(s0)
    8001adf4:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(addr); 
    8001adf8:	000807b7          	lui	a5,0x80
    8001adfc:	07b5                	addi	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    8001adfe:	07b6                	slli	a5,a5,0xd
    8001ae00:	00000297          	auipc	t0,0x0
    8001ae04:	00c28293          	addi	t0,t0,12 # 8001ae0c <instruction_guest_page_fault_4+0x76>
    8001ae08:	02543c23          	sd	t0,56(s0)
    8001ae0c:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    8001ae0e:	640c                	ld	a1,8(s0)
    8001ae10:	0000d517          	auipc	a0,0xd
    8001ae14:	bd850513          	addi	a0,a0,-1064 # 800279e8 <__func__.0+0xe28>
    8001ae18:	0ec0a0ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.triggered);
    8001ae1c:	0002e597          	auipc	a1,0x2e
    8001ae20:	1f55c583          	lbu	a1,501(a1) # 80049011 <excpt+0x1>
    8001ae24:	0000d517          	auipc	a0,0xd
    8001ae28:	bc450513          	addi	a0,a0,-1084 # 800279e8 <__func__.0+0xe28>
    8001ae2c:	0d80a0ef          	jal	80024f04 <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001ae30:	08200593          	li	a1,130
    8001ae34:	00012617          	auipc	a2,0x12
    8001ae38:	2fc60613          	addi	a2,a2,764 # 8002d130 <__func__.0+0x6570>
    8001ae3c:	0000c517          	auipc	a0,0xc
    8001ae40:	07c50513          	addi	a0,a0,124 # 80026eb8 <__func__.0+0x2f8>
    8001ae44:	0c00a0ef          	jal	80024f04 <printf>
    8001ae48:	0002e797          	auipc	a5,0x2e
    8001ae4c:	1c97c783          	lbu	a5,457(a5) # 80049011 <excpt+0x1>
    8001ae50:	0000c597          	auipc	a1,0xc
    8001ae54:	04058593          	addi	a1,a1,64 # 80026e90 <__func__.0+0x2d0>
    8001ae58:	cf89                	beqz	a5,8001ae72 <instruction_guest_page_fault_4+0xdc>
    8001ae5a:	6418                	ld	a4,8(s0)
    8001ae5c:	47d1                	li	a5,20
    8001ae5e:	0000c597          	auipc	a1,0xc
    8001ae62:	02258593          	addi	a1,a1,34 # 80026e80 <__func__.0+0x2c0>
    8001ae66:	00f70663          	beq	a4,a5,8001ae72 <instruction_guest_page_fault_4+0xdc>
    8001ae6a:	0000c597          	auipc	a1,0xc
    8001ae6e:	02658593          	addi	a1,a1,38 # 80026e90 <__func__.0+0x2d0>
    8001ae72:	0000c517          	auipc	a0,0xc
    8001ae76:	05e50513          	addi	a0,a0,94 # 80026ed0 <__func__.0+0x310>
    8001ae7a:	08a0a0ef          	jal	80024f04 <printf>
    8001ae7e:	0002e797          	auipc	a5,0x2e
    8001ae82:	1937c783          	lbu	a5,403(a5) # 80049011 <excpt+0x1>
    8001ae86:	c789                	beqz	a5,8001ae90 <instruction_guest_page_fault_4+0xfa>
    8001ae88:	6418                	ld	a4,8(s0)
    8001ae8a:	47d1                	li	a5,20
    8001ae8c:	00f70c63          	beq	a4,a5,8001aea4 <instruction_guest_page_fault_4+0x10e>
    8001ae90:	0000c517          	auipc	a0,0xc
    8001ae94:	04850513          	addi	a0,a0,72 # 80026ed8 <__func__.0+0x318>
    8001ae98:	06c0a0ef          	jal	80024f04 <printf>
    8001ae9c:	02900513          	li	a0,41
    8001aea0:	66f080ef          	jal	80023d0e <putchar>
    8001aea4:	4529                	li	a0,10
    8001aea6:	669080ef          	jal	80023d0e <putchar>
    8001aeaa:	0002e497          	auipc	s1,0x2e
    8001aeae:	1674c483          	lbu	s1,359(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001aeb2:	0000c597          	auipc	a1,0xc
    8001aeb6:	fde58593          	addi	a1,a1,-34 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001aeba:	cc91                	beqz	s1,8001aed6 <instruction_guest_page_fault_4+0x140>
    8001aebc:	6418                	ld	a4,8(s0)
    8001aebe:	47d1                	li	a5,20
    TEST_END();
    8001aec0:	0000c597          	auipc	a1,0xc
    8001aec4:	fc058593          	addi	a1,a1,-64 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    8001aec8:	00f70763          	beq	a4,a5,8001aed6 <instruction_guest_page_fault_4+0x140>
    8001aecc:	4481                	li	s1,0
    TEST_END();
    8001aece:	0000c597          	auipc	a1,0xc
    8001aed2:	fc258593          	addi	a1,a1,-62 # 80026e90 <__func__.0+0x2d0>
    8001aed6:	0000c517          	auipc	a0,0xc
    8001aeda:	06250513          	addi	a0,a0,98 # 80026f38 <__func__.0+0x378>
    8001aede:	0260a0ef          	jal	80024f04 <printf>
    8001aee2:	4511                	li	a0,4
    8001aee4:	d13e50ef          	jal	80000bf6 <goto_priv>
    8001aee8:	dc4e60ef          	jal	800014ac <reset_state>
}
    8001aeec:	60e2                	ld	ra,24(sp)
    8001aeee:	6442                	ld	s0,16(sp)
    8001aef0:	8526                	mv	a0,s1
    8001aef2:	64a2                	ld	s1,8(sp)
    8001aef4:	6105                	addi	sp,sp,32
    8001aef6:	8082                	ret

000000008001aef8 <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    8001aef8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001aefa:	0000b597          	auipc	a1,0xb
    8001aefe:	45e58593          	addi	a1,a1,1118 # 80026358 <__func__.2>
    8001af02:	0000c517          	auipc	a0,0xc
    8001af06:	f9e50513          	addi	a0,a0,-98 # 80026ea0 <__func__.0+0x2e0>
bool instruction_guest_page_fault_5(){
    8001af0a:	ec06                	sd	ra,24(sp)
    8001af0c:	e822                	sd	s0,16(sp)
    8001af0e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001af10:	7f5090ef          	jal	80024f04 <printf>
    8001af14:	4529                	li	a0,10
    8001af16:	5f9080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001af1a:	450d                	li	a0,3
    8001af1c:	cdbe50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001af20:	ec0e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001af24:	8ffe50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001af28:	f88e50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    8001af2c:	4511                	li	a0,4
    8001af2e:	cc9e50ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    8001af32:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_VS);
    8001af36:	4509                	li	a0,2
    8001af38:	cbfe50ef          	jal	80000bf6 <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    8001af3c:	0330000f          	fence	rw,rw
    8001af40:	0002e417          	auipc	s0,0x2e
    8001af44:	0d040413          	addi	s0,s0,208 # 80049010 <excpt>
    8001af48:	4785                	li	a5,1
    8001af4a:	0002e717          	auipc	a4,0x2e
    8001af4e:	0e073f23          	sd	zero,254(a4) # 80049048 <excpt+0x38>
    8001af52:	00f41023          	sh	a5,0(s0)
    8001af56:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001af5a:	400197b7          	lui	a5,0x40019
    8001af5e:	078a                	slli	a5,a5,0x2
    8001af60:	00000297          	auipc	t0,0x0
    8001af64:	00c28293          	addi	t0,t0,12 # 8001af6c <instruction_guest_page_fault_5+0x74>
    8001af68:	02543c23          	sd	t0,56(s0)
    8001af6c:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    8001af6e:	08200593          	li	a1,130
    8001af72:	00012617          	auipc	a2,0x12
    8001af76:	21e60613          	addi	a2,a2,542 # 8002d190 <__func__.0+0x65d0>
    8001af7a:	0000c517          	auipc	a0,0xc
    8001af7e:	f3e50513          	addi	a0,a0,-194 # 80026eb8 <__func__.0+0x2f8>
    8001af82:	783090ef          	jal	80024f04 <printf>
    8001af86:	0002e797          	auipc	a5,0x2e
    8001af8a:	08b7c783          	lbu	a5,139(a5) # 80049011 <excpt+0x1>
    8001af8e:	0000c597          	auipc	a1,0xc
    8001af92:	f0258593          	addi	a1,a1,-254 # 80026e90 <__func__.0+0x2d0>
    8001af96:	cf89                	beqz	a5,8001afb0 <instruction_guest_page_fault_5+0xb8>
    8001af98:	6418                	ld	a4,8(s0)
    8001af9a:	47d1                	li	a5,20
    8001af9c:	0000c597          	auipc	a1,0xc
    8001afa0:	ee458593          	addi	a1,a1,-284 # 80026e80 <__func__.0+0x2c0>
    8001afa4:	00f70663          	beq	a4,a5,8001afb0 <instruction_guest_page_fault_5+0xb8>
    8001afa8:	0000c597          	auipc	a1,0xc
    8001afac:	ee858593          	addi	a1,a1,-280 # 80026e90 <__func__.0+0x2d0>
    8001afb0:	0000c517          	auipc	a0,0xc
    8001afb4:	f2050513          	addi	a0,a0,-224 # 80026ed0 <__func__.0+0x310>
    8001afb8:	74d090ef          	jal	80024f04 <printf>
    8001afbc:	0002e797          	auipc	a5,0x2e
    8001afc0:	0557c783          	lbu	a5,85(a5) # 80049011 <excpt+0x1>
    8001afc4:	c789                	beqz	a5,8001afce <instruction_guest_page_fault_5+0xd6>
    8001afc6:	6418                	ld	a4,8(s0)
    8001afc8:	47d1                	li	a5,20
    8001afca:	00f70c63          	beq	a4,a5,8001afe2 <instruction_guest_page_fault_5+0xea>
    8001afce:	0000c517          	auipc	a0,0xc
    8001afd2:	f0a50513          	addi	a0,a0,-246 # 80026ed8 <__func__.0+0x318>
    8001afd6:	72f090ef          	jal	80024f04 <printf>
    8001afda:	02900513          	li	a0,41
    8001afde:	531080ef          	jal	80023d0e <putchar>
    8001afe2:	4529                	li	a0,10
    8001afe4:	52b080ef          	jal	80023d0e <putchar>
    8001afe8:	0002e497          	auipc	s1,0x2e
    8001afec:	0294c483          	lbu	s1,41(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001aff0:	0000c597          	auipc	a1,0xc
    8001aff4:	ea058593          	addi	a1,a1,-352 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    8001aff8:	cc91                	beqz	s1,8001b014 <instruction_guest_page_fault_5+0x11c>
    8001affa:	6418                	ld	a4,8(s0)
    8001affc:	47d1                	li	a5,20
    TEST_END();
    8001affe:	0000c597          	auipc	a1,0xc
    8001b002:	e8258593          	addi	a1,a1,-382 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    8001b006:	00f70763          	beq	a4,a5,8001b014 <instruction_guest_page_fault_5+0x11c>
    8001b00a:	4481                	li	s1,0
    TEST_END();
    8001b00c:	0000c597          	auipc	a1,0xc
    8001b010:	e8458593          	addi	a1,a1,-380 # 80026e90 <__func__.0+0x2d0>
    8001b014:	0000c517          	auipc	a0,0xc
    8001b018:	f2450513          	addi	a0,a0,-220 # 80026f38 <__func__.0+0x378>
    8001b01c:	6e9090ef          	jal	80024f04 <printf>
    8001b020:	4511                	li	a0,4
    8001b022:	bd5e50ef          	jal	80000bf6 <goto_priv>
    8001b026:	c86e60ef          	jal	800014ac <reset_state>

}
    8001b02a:	60e2                	ld	ra,24(sp)
    8001b02c:	6442                	ld	s0,16(sp)
    8001b02e:	8526                	mv	a0,s1
    8001b030:	64a2                	ld	s1,8(sp)
    8001b032:	6105                	addi	sp,sp,32
    8001b034:	8082                	ret

000000008001b036 <instruction_guest_page_fault_6>:



bool instruction_guest_page_fault_6(){
    8001b036:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b038:	0000b597          	auipc	a1,0xb
    8001b03c:	34058593          	addi	a1,a1,832 # 80026378 <__func__.1>
    8001b040:	0000c517          	auipc	a0,0xc
    8001b044:	e6050513          	addi	a0,a0,-416 # 80026ea0 <__func__.0+0x2e0>
bool instruction_guest_page_fault_6(){
    8001b048:	e406                	sd	ra,8(sp)
    8001b04a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b04c:	6b9090ef          	jal	80024f04 <printf>
    8001b050:	4529                	li	a0,10
    8001b052:	4bd080ef          	jal	80023d0e <putchar>
    // CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    // CSRS(CSR_MSTATUS, SSTATUS_SUM);


    goto_priv(PRIV_HS);
    8001b056:	450d                	li	a0,3
    8001b058:	b9fe50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001b05c:	d84e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b060:	fc2e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001b064:	e4ce50ef          	jal	800006b0 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr ;


    goto_priv(PRIV_VS);
    8001b068:	4509                	li	a0,2
    8001b06a:	b8de50ef          	jal	80000bf6 <goto_priv>

    //执行取指指令时，在VS模式下
    vaddr = vs_page_base(VSRWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001b06e:	0330000f          	fence	rw,rw
    8001b072:	0002e717          	auipc	a4,0x2e
    8001b076:	f9e70713          	addi	a4,a4,-98 # 80049010 <excpt>
    8001b07a:	4785                	li	a5,1
    8001b07c:	0002e697          	auipc	a3,0x2e
    8001b080:	fc06b623          	sd	zero,-52(a3) # 80049048 <excpt+0x38>
    8001b084:	00f71023          	sh	a5,0(a4)
    8001b088:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001b08c:	1782                	slli	a5,a5,0x20
    8001b08e:	00000297          	auipc	t0,0x0
    8001b092:	00c28293          	addi	t0,t0,12 # 8001b09a <instruction_guest_page_fault_6+0x64>
    8001b096:	02573c23          	sd	t0,56(a4)
    8001b09a:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    8001b09c:	08200593          	li	a1,130
    8001b0a0:	00012617          	auipc	a2,0x12
    8001b0a4:	15860613          	addi	a2,a2,344 # 8002d1f8 <__func__.0+0x6638>
    8001b0a8:	0000c517          	auipc	a0,0xc
    8001b0ac:	e1050513          	addi	a0,a0,-496 # 80026eb8 <__func__.0+0x2f8>
    8001b0b0:	655090ef          	jal	80024f04 <printf>
    8001b0b4:	0002e797          	auipc	a5,0x2e
    8001b0b8:	f5d7c783          	lbu	a5,-163(a5) # 80049011 <excpt+0x1>
    8001b0bc:	0000c597          	auipc	a1,0xc
    8001b0c0:	dc458593          	addi	a1,a1,-572 # 80026e80 <__func__.0+0x2c0>
    8001b0c4:	c789                	beqz	a5,8001b0ce <instruction_guest_page_fault_6+0x98>
    8001b0c6:	0000c597          	auipc	a1,0xc
    8001b0ca:	dca58593          	addi	a1,a1,-566 # 80026e90 <__func__.0+0x2d0>
    8001b0ce:	0000c517          	auipc	a0,0xc
    8001b0d2:	e0250513          	addi	a0,a0,-510 # 80026ed0 <__func__.0+0x310>
    8001b0d6:	62f090ef          	jal	80024f04 <printf>
    8001b0da:	0002e797          	auipc	a5,0x2e
    8001b0de:	f377c783          	lbu	a5,-201(a5) # 80049011 <excpt+0x1>
    8001b0e2:	e7a1                	bnez	a5,8001b12a <instruction_guest_page_fault_6+0xf4>
    8001b0e4:	4529                	li	a0,10
    8001b0e6:	429080ef          	jal	80023d0e <putchar>
    8001b0ea:	0002e797          	auipc	a5,0x2e
    8001b0ee:	f277c783          	lbu	a5,-217(a5) # 80049011 <excpt+0x1>
    8001b0f2:	e795                	bnez	a5,8001b11e <instruction_guest_page_fault_6+0xe8>
    8001b0f4:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001b0f6:	0000c597          	auipc	a1,0xc
    8001b0fa:	d8a58593          	addi	a1,a1,-630 # 80026e80 <__func__.0+0x2c0>
    8001b0fe:	0000c517          	auipc	a0,0xc
    8001b102:	e3a50513          	addi	a0,a0,-454 # 80026f38 <__func__.0+0x378>
    8001b106:	5ff090ef          	jal	80024f04 <printf>
    8001b10a:	4511                	li	a0,4
    8001b10c:	aebe50ef          	jal	80000bf6 <goto_priv>
    8001b110:	b9ce60ef          	jal	800014ac <reset_state>
}
    8001b114:	60a2                	ld	ra,8(sp)
    8001b116:	8522                	mv	a0,s0
    8001b118:	6402                	ld	s0,0(sp)
    8001b11a:	0141                	addi	sp,sp,16
    8001b11c:	8082                	ret
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    8001b11e:	4401                	li	s0,0
    TEST_END();
    8001b120:	0000c597          	auipc	a1,0xc
    8001b124:	d7058593          	addi	a1,a1,-656 # 80026e90 <__func__.0+0x2d0>
    8001b128:	bfd9                	j	8001b0fe <instruction_guest_page_fault_6+0xc8>
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    8001b12a:	0000c517          	auipc	a0,0xc
    8001b12e:	dae50513          	addi	a0,a0,-594 # 80026ed8 <__func__.0+0x318>
    8001b132:	5d3090ef          	jal	80024f04 <printf>
    8001b136:	02900513          	li	a0,41
    8001b13a:	3d5080ef          	jal	80023d0e <putchar>
    8001b13e:	b75d                	j	8001b0e4 <instruction_guest_page_fault_6+0xae>

000000008001b140 <instruction_guest_page_fault_7>:

bool instruction_guest_page_fault_7(){
    8001b140:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b142:	0000b597          	auipc	a1,0xb
    8001b146:	25658593          	addi	a1,a1,598 # 80026398 <__func__.0>
    8001b14a:	0000c517          	auipc	a0,0xc
    8001b14e:	d5650513          	addi	a0,a0,-682 # 80026ea0 <__func__.0+0x2e0>
bool instruction_guest_page_fault_7(){
    8001b152:	ec06                	sd	ra,24(sp)
    8001b154:	e822                	sd	s0,16(sp)
    8001b156:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b158:	5ad090ef          	jal	80024f04 <printf>
    8001b15c:	4529                	li	a0,10
    8001b15e:	3b1080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001b162:	450d                	li	a0,3
    8001b164:	a93e50ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001b168:	c78e50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001b16c:	eb6e50ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001b170:	d40e50ef          	jal	800006b0 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    8001b174:	4509                	li	a0,2
    8001b176:	a81e50ef          	jal	80000bf6 <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8001b17a:	0330000f          	fence	rw,rw
    8001b17e:	0002e417          	auipc	s0,0x2e
    8001b182:	e9240413          	addi	s0,s0,-366 # 80049010 <excpt>
    8001b186:	4785                	li	a5,1
    8001b188:	0002e717          	auipc	a4,0x2e
    8001b18c:	ec073023          	sd	zero,-320(a4) # 80049048 <excpt+0x38>
    8001b190:	00f41023          	sh	a5,0(s0)
    8001b194:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001b198:	400137b7          	lui	a5,0x40013
    8001b19c:	078a                	slli	a5,a5,0x2
    8001b19e:	00000297          	auipc	t0,0x0
    8001b1a2:	00c28293          	addi	t0,t0,12 # 8001b1aa <instruction_guest_page_fault_7+0x6a>
    8001b1a6:	02543c23          	sd	t0,56(s0)
    8001b1aa:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001b1ac:	08200593          	li	a1,130
    8001b1b0:	00012617          	auipc	a2,0x12
    8001b1b4:	08060613          	addi	a2,a2,128 # 8002d230 <__func__.0+0x6670>
    8001b1b8:	0000c517          	auipc	a0,0xc
    8001b1bc:	d0050513          	addi	a0,a0,-768 # 80026eb8 <__func__.0+0x2f8>
    8001b1c0:	545090ef          	jal	80024f04 <printf>
    8001b1c4:	0002e797          	auipc	a5,0x2e
    8001b1c8:	e4d7c783          	lbu	a5,-435(a5) # 80049011 <excpt+0x1>
    8001b1cc:	0000c597          	auipc	a1,0xc
    8001b1d0:	cc458593          	addi	a1,a1,-828 # 80026e90 <__func__.0+0x2d0>
    8001b1d4:	cf89                	beqz	a5,8001b1ee <instruction_guest_page_fault_7+0xae>
    8001b1d6:	6418                	ld	a4,8(s0)
    8001b1d8:	47d1                	li	a5,20
    8001b1da:	0000c597          	auipc	a1,0xc
    8001b1de:	ca658593          	addi	a1,a1,-858 # 80026e80 <__func__.0+0x2c0>
    8001b1e2:	00f70663          	beq	a4,a5,8001b1ee <instruction_guest_page_fault_7+0xae>
    8001b1e6:	0000c597          	auipc	a1,0xc
    8001b1ea:	caa58593          	addi	a1,a1,-854 # 80026e90 <__func__.0+0x2d0>
    8001b1ee:	0000c517          	auipc	a0,0xc
    8001b1f2:	ce250513          	addi	a0,a0,-798 # 80026ed0 <__func__.0+0x310>
    8001b1f6:	50f090ef          	jal	80024f04 <printf>
    8001b1fa:	0002e797          	auipc	a5,0x2e
    8001b1fe:	e177c783          	lbu	a5,-489(a5) # 80049011 <excpt+0x1>
    8001b202:	c789                	beqz	a5,8001b20c <instruction_guest_page_fault_7+0xcc>
    8001b204:	6418                	ld	a4,8(s0)
    8001b206:	47d1                	li	a5,20
    8001b208:	00f70c63          	beq	a4,a5,8001b220 <instruction_guest_page_fault_7+0xe0>
    8001b20c:	0000c517          	auipc	a0,0xc
    8001b210:	ccc50513          	addi	a0,a0,-820 # 80026ed8 <__func__.0+0x318>
    8001b214:	4f1090ef          	jal	80024f04 <printf>
    8001b218:	02900513          	li	a0,41
    8001b21c:	2f3080ef          	jal	80023d0e <putchar>
    8001b220:	4529                	li	a0,10
    8001b222:	2ed080ef          	jal	80023d0e <putchar>
    8001b226:	0002e797          	auipc	a5,0x2e
    8001b22a:	deb7c783          	lbu	a5,-533(a5) # 80049011 <excpt+0x1>
    8001b22e:	4481                	li	s1,0
    8001b230:	c789                	beqz	a5,8001b23a <instruction_guest_page_fault_7+0xfa>
    8001b232:	6404                	ld	s1,8(s0)
    8001b234:	14b1                	addi	s1,s1,-20
    8001b236:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_SETUP_EXCEPT();
    8001b23a:	0330000f          	fence	rw,rw
    8001b23e:	4785                	li	a5,1
    8001b240:	0002e717          	auipc	a4,0x2e
    8001b244:	e0073423          	sd	zero,-504(a4) # 80049048 <excpt+0x38>
    8001b248:	00f41023          	sh	a5,0(s0)
    8001b24c:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    8001b250:	400137b7          	lui	a5,0x40013
    8001b254:	078a                	slli	a5,a5,0x2
    8001b256:	00000297          	auipc	t0,0x0
    8001b25a:	00c28293          	addi	t0,t0,12 # 8001b262 <instruction_guest_page_fault_7+0x122>
    8001b25e:	02543c23          	sd	t0,56(s0)
    8001b262:	8782                	jr	a5

    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001b264:	08200593          	li	a1,130
    8001b268:	00012617          	auipc	a2,0x12
    8001b26c:	03060613          	addi	a2,a2,48 # 8002d298 <__func__.0+0x66d8>
    8001b270:	0000c517          	auipc	a0,0xc
    8001b274:	c4850513          	addi	a0,a0,-952 # 80026eb8 <__func__.0+0x2f8>
    8001b278:	48d090ef          	jal	80024f04 <printf>
    8001b27c:	0002e797          	auipc	a5,0x2e
    8001b280:	d957c783          	lbu	a5,-619(a5) # 80049011 <excpt+0x1>
    8001b284:	0000c597          	auipc	a1,0xc
    8001b288:	c0c58593          	addi	a1,a1,-1012 # 80026e90 <__func__.0+0x2d0>
    8001b28c:	cf89                	beqz	a5,8001b2a6 <instruction_guest_page_fault_7+0x166>
    8001b28e:	6418                	ld	a4,8(s0)
    8001b290:	47d1                	li	a5,20
    8001b292:	0000c597          	auipc	a1,0xc
    8001b296:	bee58593          	addi	a1,a1,-1042 # 80026e80 <__func__.0+0x2c0>
    8001b29a:	00f70663          	beq	a4,a5,8001b2a6 <instruction_guest_page_fault_7+0x166>
    8001b29e:	0000c597          	auipc	a1,0xc
    8001b2a2:	bf258593          	addi	a1,a1,-1038 # 80026e90 <__func__.0+0x2d0>
    8001b2a6:	0000c517          	auipc	a0,0xc
    8001b2aa:	c2a50513          	addi	a0,a0,-982 # 80026ed0 <__func__.0+0x310>
    8001b2ae:	457090ef          	jal	80024f04 <printf>
    8001b2b2:	0002e797          	auipc	a5,0x2e
    8001b2b6:	d5f7c783          	lbu	a5,-673(a5) # 80049011 <excpt+0x1>
    8001b2ba:	c789                	beqz	a5,8001b2c4 <instruction_guest_page_fault_7+0x184>
    8001b2bc:	6418                	ld	a4,8(s0)
    8001b2be:	47d1                	li	a5,20
    8001b2c0:	00f70c63          	beq	a4,a5,8001b2d8 <instruction_guest_page_fault_7+0x198>
    8001b2c4:	0000c517          	auipc	a0,0xc
    8001b2c8:	c1450513          	addi	a0,a0,-1004 # 80026ed8 <__func__.0+0x318>
    8001b2cc:	439090ef          	jal	80024f04 <printf>
    8001b2d0:	02900513          	li	a0,41
    8001b2d4:	23b080ef          	jal	80023d0e <putchar>
    8001b2d8:	4529                	li	a0,10
    8001b2da:	235080ef          	jal	80023d0e <putchar>
    8001b2de:	c095                	beqz	s1,8001b302 <instruction_guest_page_fault_7+0x1c2>
    8001b2e0:	0002e497          	auipc	s1,0x2e
    8001b2e4:	d314c483          	lbu	s1,-719(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    8001b2e8:	0000c597          	auipc	a1,0xc
    8001b2ec:	ba858593          	addi	a1,a1,-1112 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001b2f0:	cc91                	beqz	s1,8001b30c <instruction_guest_page_fault_7+0x1cc>
    8001b2f2:	6418                	ld	a4,8(s0)
    8001b2f4:	47d1                	li	a5,20
    TEST_END();
    8001b2f6:	0000c597          	auipc	a1,0xc
    8001b2fa:	b8a58593          	addi	a1,a1,-1142 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001b2fe:	00f70763          	beq	a4,a5,8001b30c <instruction_guest_page_fault_7+0x1cc>
    8001b302:	4481                	li	s1,0
    TEST_END();
    8001b304:	0000c597          	auipc	a1,0xc
    8001b308:	b8c58593          	addi	a1,a1,-1140 # 80026e90 <__func__.0+0x2d0>
    8001b30c:	0000c517          	auipc	a0,0xc
    8001b310:	c2c50513          	addi	a0,a0,-980 # 80026f38 <__func__.0+0x378>
    8001b314:	3f1090ef          	jal	80024f04 <printf>
    8001b318:	4511                	li	a0,4
    8001b31a:	8dde50ef          	jal	80000bf6 <goto_priv>
    8001b31e:	98ee60ef          	jal	800014ac <reset_state>
    8001b322:	60e2                	ld	ra,24(sp)
    8001b324:	6442                	ld	s0,16(sp)
    8001b326:	8526                	mv	a0,s1
    8001b328:	64a2                	ld	s1,8(sp)
    8001b32a:	6105                	addi	sp,sp,32
    8001b32c:	8082                	ret

000000008001b32e <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    8001b32e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b330:	0000b597          	auipc	a1,0xb
    8001b334:	08858593          	addi	a1,a1,136 # 800263b8 <__func__.39>
    8001b338:	0000c517          	auipc	a0,0xc
    8001b33c:	b6850513          	addi	a0,a0,-1176 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_1(){
    8001b340:	ec06                	sd	ra,24(sp)
    8001b342:	e822                	sd	s0,16(sp)
    8001b344:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b346:	3bf090ef          	jal	80024f04 <printf>
    8001b34a:	4529                	li	a0,10
    8001b34c:	1c3080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001b350:	4511                	li	a0,4
    8001b352:	8a5e50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b356:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位（清除）
    8001b35a:	10000793          	li	a5,256
    8001b35e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b362:	20000793          	li	a5,512
    8001b366:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b36a:	40000793          	li	a5,1024
    8001b36e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b372:	6785                	lui	a5,0x1
    8001b374:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b378:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b37c:	4785                	li	a5,1
    8001b37e:	07fe                	slli	a5,a5,0x1f
    8001b380:	4705                	li	a4,1
    8001b382:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b386:	08100793          	li	a5,129
    8001b38a:	07e2                	slli	a5,a5,0x18
    8001b38c:	3b179073          	csrw	pmpaddr1,a5
    // sfence();
    // hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b390:	67a1                	lui	a5,0x8
    8001b392:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    8001b396:	0330000f          	fence	rw,rw
    8001b39a:	0002e417          	auipc	s0,0x2e
    8001b39e:	c7640413          	addi	s0,s0,-906 # 80049010 <excpt>
    8001b3a2:	0002e797          	auipc	a5,0x2e
    8001b3a6:	ca07b323          	sd	zero,-858(a5) # 80049048 <excpt+0x38>
    8001b3aa:	00e41023          	sh	a4,0(s0)
    8001b3ae:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8001b3b2:	02171793          	slli	a5,a4,0x21
    8001b3b6:	40078793          	addi	a5,a5,1024
    8001b3ba:	00078783          	lb	a5,0(a5)

    lb(0x80000100UL << 2);    //访问区域内地址


    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    8001b3be:	08200593          	li	a1,130
    8001b3c2:	00012617          	auipc	a2,0x12
    8001b3c6:	f3e60613          	addi	a2,a2,-194 # 8002d300 <__func__.0+0x6740>
    8001b3ca:	0000c517          	auipc	a0,0xc
    8001b3ce:	aee50513          	addi	a0,a0,-1298 # 80026eb8 <__func__.0+0x2f8>
    8001b3d2:	333090ef          	jal	80024f04 <printf>
    8001b3d6:	0002e797          	auipc	a5,0x2e
    8001b3da:	c3b7c783          	lbu	a5,-965(a5) # 80049011 <excpt+0x1>
    8001b3de:	0000c597          	auipc	a1,0xc
    8001b3e2:	ab258593          	addi	a1,a1,-1358 # 80026e90 <__func__.0+0x2d0>
    8001b3e6:	cf89                	beqz	a5,8001b400 <load_access_fault_1+0xd2>
    8001b3e8:	6418                	ld	a4,8(s0)
    8001b3ea:	4795                	li	a5,5
    8001b3ec:	0000c597          	auipc	a1,0xc
    8001b3f0:	a9458593          	addi	a1,a1,-1388 # 80026e80 <__func__.0+0x2c0>
    8001b3f4:	00f70663          	beq	a4,a5,8001b400 <load_access_fault_1+0xd2>
    8001b3f8:	0000c597          	auipc	a1,0xc
    8001b3fc:	a9858593          	addi	a1,a1,-1384 # 80026e90 <__func__.0+0x2d0>
    8001b400:	0000c517          	auipc	a0,0xc
    8001b404:	ad050513          	addi	a0,a0,-1328 # 80026ed0 <__func__.0+0x310>
    8001b408:	2fd090ef          	jal	80024f04 <printf>
    8001b40c:	0002e797          	auipc	a5,0x2e
    8001b410:	c057c783          	lbu	a5,-1019(a5) # 80049011 <excpt+0x1>
    8001b414:	c789                	beqz	a5,8001b41e <load_access_fault_1+0xf0>
    8001b416:	6418                	ld	a4,8(s0)
    8001b418:	4795                	li	a5,5
    8001b41a:	00f70c63          	beq	a4,a5,8001b432 <load_access_fault_1+0x104>
    8001b41e:	0000c517          	auipc	a0,0xc
    8001b422:	aba50513          	addi	a0,a0,-1350 # 80026ed8 <__func__.0+0x318>
    8001b426:	2df090ef          	jal	80024f04 <printf>
    8001b42a:	02900513          	li	a0,41
    8001b42e:	0e1080ef          	jal	80023d0e <putchar>
    8001b432:	4529                	li	a0,10
    8001b434:	0db080ef          	jal	80023d0e <putchar>
    8001b438:	0002e497          	auipc	s1,0x2e
    8001b43c:	bd94c483          	lbu	s1,-1063(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001b440:	0000c597          	auipc	a1,0xc
    8001b444:	a5058593          	addi	a1,a1,-1456 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    8001b448:	cc91                	beqz	s1,8001b464 <load_access_fault_1+0x136>
    8001b44a:	6418                	ld	a4,8(s0)
    8001b44c:	4795                	li	a5,5
    TEST_END();
    8001b44e:	0000c597          	auipc	a1,0xc
    8001b452:	a3258593          	addi	a1,a1,-1486 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    8001b456:	00f70763          	beq	a4,a5,8001b464 <load_access_fault_1+0x136>
    8001b45a:	4481                	li	s1,0
    TEST_END();
    8001b45c:	0000c597          	auipc	a1,0xc
    8001b460:	a3458593          	addi	a1,a1,-1484 # 80026e90 <__func__.0+0x2d0>
    8001b464:	0000c517          	auipc	a0,0xc
    8001b468:	ad450513          	addi	a0,a0,-1324 # 80026f38 <__func__.0+0x378>
    8001b46c:	299090ef          	jal	80024f04 <printf>
    8001b470:	4511                	li	a0,4
    8001b472:	f84e50ef          	jal	80000bf6 <goto_priv>
    8001b476:	836e60ef          	jal	800014ac <reset_state>
}
    8001b47a:	60e2                	ld	ra,24(sp)
    8001b47c:	6442                	ld	s0,16(sp)
    8001b47e:	8526                	mv	a0,s1
    8001b480:	64a2                	ld	s1,8(sp)
    8001b482:	6105                	addi	sp,sp,32
    8001b484:	8082                	ret

000000008001b486 <load_access_fault_2>:

bool load_access_fault_2(){
    8001b486:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b488:	0000b597          	auipc	a1,0xb
    8001b48c:	f4858593          	addi	a1,a1,-184 # 800263d0 <__func__.38>
    8001b490:	0000c517          	auipc	a0,0xc
    8001b494:	a1050513          	addi	a0,a0,-1520 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_2(){
    8001b498:	ec06                	sd	ra,24(sp)
    8001b49a:	e822                	sd	s0,16(sp)
    8001b49c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b49e:	267090ef          	jal	80024f04 <printf>
    8001b4a2:	4529                	li	a0,10
    8001b4a4:	06b080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001b4a8:	4511                	li	a0,4
    8001b4aa:	f4ce50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0

    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b4ae:	3a005073          	csrwi	pmpcfg0,0

    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b4b2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b4b6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b4ba:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b4be:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b4c2:	10000793          	li	a5,256
    8001b4c6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b4ca:	20000793          	li	a5,512
    8001b4ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b4d2:	40000793          	li	a5,1024
    8001b4d6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b4da:	6785                	lui	a5,0x1
    8001b4dc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b4e0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, 0x88000000UL);
    8001b4e4:	47c5                	li	a5,17
    8001b4e6:	07ee                	slli	a5,a5,0x1b
    8001b4e8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, 0x89000000UL);
    8001b4ec:	08900793          	li	a5,137
    8001b4f0:	07e2                	slli	a5,a5,0x18
    8001b4f2:	3b179073          	csrw	pmpaddr1,a5


    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    8001b4f6:	08000793          	li	a5,128
    8001b4fa:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    8001b4fe:	67a1                	lui	a5,0x8
    8001b500:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b504:	450d                	li	a0,3
    8001b506:	ef0e50ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b50a:	0330000f          	fence	rw,rw
    8001b50e:	0002e417          	auipc	s0,0x2e
    8001b512:	b0240413          	addi	s0,s0,-1278 # 80049010 <excpt>
    8001b516:	4785                	li	a5,1
    8001b518:	0002e717          	auipc	a4,0x2e
    8001b51c:	b2073823          	sd	zero,-1232(a4) # 80049048 <excpt+0x38>
    8001b520:	00f41023          	sh	a5,0(s0)
    8001b524:	0330000f          	fence	rw,rw
    8001b528:	008817b7          	lui	a5,0x881
    8001b52c:	07aa                	slli	a5,a5,0xa
    8001b52e:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb(0x88100000UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b532:	08200593          	li	a1,130
    8001b536:	00012617          	auipc	a2,0x12
    8001b53a:	e0260613          	addi	a2,a2,-510 # 8002d338 <__func__.0+0x6778>
    8001b53e:	0000c517          	auipc	a0,0xc
    8001b542:	97a50513          	addi	a0,a0,-1670 # 80026eb8 <__func__.0+0x2f8>
    8001b546:	1bf090ef          	jal	80024f04 <printf>
    8001b54a:	0002e797          	auipc	a5,0x2e
    8001b54e:	ac77c783          	lbu	a5,-1337(a5) # 80049011 <excpt+0x1>
    8001b552:	0000c597          	auipc	a1,0xc
    8001b556:	93e58593          	addi	a1,a1,-1730 # 80026e90 <__func__.0+0x2d0>
    8001b55a:	cf89                	beqz	a5,8001b574 <load_access_fault_2+0xee>
    8001b55c:	6418                	ld	a4,8(s0)
    8001b55e:	4795                	li	a5,5
    8001b560:	0000c597          	auipc	a1,0xc
    8001b564:	92058593          	addi	a1,a1,-1760 # 80026e80 <__func__.0+0x2c0>
    8001b568:	00f70663          	beq	a4,a5,8001b574 <load_access_fault_2+0xee>
    8001b56c:	0000c597          	auipc	a1,0xc
    8001b570:	92458593          	addi	a1,a1,-1756 # 80026e90 <__func__.0+0x2d0>
    8001b574:	0000c517          	auipc	a0,0xc
    8001b578:	95c50513          	addi	a0,a0,-1700 # 80026ed0 <__func__.0+0x310>
    8001b57c:	189090ef          	jal	80024f04 <printf>
    8001b580:	0002e797          	auipc	a5,0x2e
    8001b584:	a917c783          	lbu	a5,-1391(a5) # 80049011 <excpt+0x1>
    8001b588:	c789                	beqz	a5,8001b592 <load_access_fault_2+0x10c>
    8001b58a:	6418                	ld	a4,8(s0)
    8001b58c:	4795                	li	a5,5
    8001b58e:	00f70c63          	beq	a4,a5,8001b5a6 <load_access_fault_2+0x120>
    8001b592:	0000c517          	auipc	a0,0xc
    8001b596:	94650513          	addi	a0,a0,-1722 # 80026ed8 <__func__.0+0x318>
    8001b59a:	16b090ef          	jal	80024f04 <printf>
    8001b59e:	02900513          	li	a0,41
    8001b5a2:	76c080ef          	jal	80023d0e <putchar>
    8001b5a6:	4529                	li	a0,10
    8001b5a8:	766080ef          	jal	80023d0e <putchar>
    8001b5ac:	0002e497          	auipc	s1,0x2e
    8001b5b0:	a654c483          	lbu	s1,-1435(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001b5b4:	0000c597          	auipc	a1,0xc
    8001b5b8:	8dc58593          	addi	a1,a1,-1828 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b5bc:	cc91                	beqz	s1,8001b5d8 <load_access_fault_2+0x152>
    8001b5be:	6418                	ld	a4,8(s0)
    8001b5c0:	4795                	li	a5,5
    TEST_END();
    8001b5c2:	0000c597          	auipc	a1,0xc
    8001b5c6:	8be58593          	addi	a1,a1,-1858 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b5ca:	00f70763          	beq	a4,a5,8001b5d8 <load_access_fault_2+0x152>
    8001b5ce:	4481                	li	s1,0
    TEST_END();
    8001b5d0:	0000c597          	auipc	a1,0xc
    8001b5d4:	8c058593          	addi	a1,a1,-1856 # 80026e90 <__func__.0+0x2d0>
    8001b5d8:	0000c517          	auipc	a0,0xc
    8001b5dc:	96050513          	addi	a0,a0,-1696 # 80026f38 <__func__.0+0x378>
    8001b5e0:	125090ef          	jal	80024f04 <printf>
    8001b5e4:	4511                	li	a0,4
    8001b5e6:	e10e50ef          	jal	80000bf6 <goto_priv>
    8001b5ea:	ec3e50ef          	jal	800014ac <reset_state>
}
    8001b5ee:	60e2                	ld	ra,24(sp)
    8001b5f0:	6442                	ld	s0,16(sp)
    8001b5f2:	8526                	mv	a0,s1
    8001b5f4:	64a2                	ld	s1,8(sp)
    8001b5f6:	6105                	addi	sp,sp,32
    8001b5f8:	8082                	ret

000000008001b5fa <load_access_fault_3>:


bool load_access_fault_3(){
    8001b5fa:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b5fc:	0000b597          	auipc	a1,0xb
    8001b600:	dec58593          	addi	a1,a1,-532 # 800263e8 <__func__.37>
    8001b604:	0000c517          	auipc	a0,0xc
    8001b608:	89c50513          	addi	a0,a0,-1892 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_3(){
    8001b60c:	ec06                	sd	ra,24(sp)
    8001b60e:	e822                	sd	s0,16(sp)
    8001b610:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b612:	0f3090ef          	jal	80024f04 <printf>
    8001b616:	4529                	li	a0,10
    8001b618:	6f6080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001b61c:	4511                	li	a0,4
    8001b61e:	dd8e50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b622:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b626:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b62a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b62e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b632:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b636:	10000793          	li	a5,256
    8001b63a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b63e:	20000793          	li	a5,512
    8001b642:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b646:	40000793          	li	a5,1024
    8001b64a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b64e:	6785                	lui	a5,0x1
    8001b650:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b654:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b658:	4785                	li	a5,1
    8001b65a:	07fe                	slli	a5,a5,0x1f
    8001b65c:	4485                	li	s1,1
    8001b65e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b662:	08100793          	li	a5,129
    8001b666:	07e2                	slli	a5,a5,0x18
    8001b668:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b66c:	08000793          	li	a5,128
    8001b670:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b674:	67a1                	lui	a5,0x8
    8001b676:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001b67a:	8526                	mv	a0,s1
    8001b67c:	d7ae50ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b680:	0330000f          	fence	rw,rw
    8001b684:	0002e417          	auipc	s0,0x2e
    8001b688:	98c40413          	addi	s0,s0,-1652 # 80049010 <excpt>
    8001b68c:	0002e797          	auipc	a5,0x2e
    8001b690:	9a07be23          	sd	zero,-1604(a5) # 80049048 <excpt+0x38>
    8001b694:	00941023          	sh	s1,0(s0)
    8001b698:	0330000f          	fence	rw,rw
    8001b69c:	02149793          	slli	a5,s1,0x21
    8001b6a0:	40078793          	addi	a5,a5,1024
    8001b6a4:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b6a8:	08200593          	li	a1,130
    8001b6ac:	00012617          	auipc	a2,0x12
    8001b6b0:	cc460613          	addi	a2,a2,-828 # 8002d370 <__func__.0+0x67b0>
    8001b6b4:	0000c517          	auipc	a0,0xc
    8001b6b8:	80450513          	addi	a0,a0,-2044 # 80026eb8 <__func__.0+0x2f8>
    8001b6bc:	049090ef          	jal	80024f04 <printf>
    8001b6c0:	0002e797          	auipc	a5,0x2e
    8001b6c4:	9517c783          	lbu	a5,-1711(a5) # 80049011 <excpt+0x1>
    8001b6c8:	0000b597          	auipc	a1,0xb
    8001b6cc:	7c858593          	addi	a1,a1,1992 # 80026e90 <__func__.0+0x2d0>
    8001b6d0:	cf89                	beqz	a5,8001b6ea <load_access_fault_3+0xf0>
    8001b6d2:	6418                	ld	a4,8(s0)
    8001b6d4:	4795                	li	a5,5
    8001b6d6:	0000b597          	auipc	a1,0xb
    8001b6da:	7aa58593          	addi	a1,a1,1962 # 80026e80 <__func__.0+0x2c0>
    8001b6de:	00f70663          	beq	a4,a5,8001b6ea <load_access_fault_3+0xf0>
    8001b6e2:	0000b597          	auipc	a1,0xb
    8001b6e6:	7ae58593          	addi	a1,a1,1966 # 80026e90 <__func__.0+0x2d0>
    8001b6ea:	0000b517          	auipc	a0,0xb
    8001b6ee:	7e650513          	addi	a0,a0,2022 # 80026ed0 <__func__.0+0x310>
    8001b6f2:	013090ef          	jal	80024f04 <printf>
    8001b6f6:	0002e797          	auipc	a5,0x2e
    8001b6fa:	91b7c783          	lbu	a5,-1765(a5) # 80049011 <excpt+0x1>
    8001b6fe:	c789                	beqz	a5,8001b708 <load_access_fault_3+0x10e>
    8001b700:	6418                	ld	a4,8(s0)
    8001b702:	4795                	li	a5,5
    8001b704:	00f70c63          	beq	a4,a5,8001b71c <load_access_fault_3+0x122>
    8001b708:	0000b517          	auipc	a0,0xb
    8001b70c:	7d050513          	addi	a0,a0,2000 # 80026ed8 <__func__.0+0x318>
    8001b710:	7f4090ef          	jal	80024f04 <printf>
    8001b714:	02900513          	li	a0,41
    8001b718:	5f6080ef          	jal	80023d0e <putchar>
    8001b71c:	4529                	li	a0,10
    8001b71e:	5f0080ef          	jal	80023d0e <putchar>
    8001b722:	0002e497          	auipc	s1,0x2e
    8001b726:	8ef4c483          	lbu	s1,-1809(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001b72a:	0000b597          	auipc	a1,0xb
    8001b72e:	76658593          	addi	a1,a1,1894 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b732:	cc91                	beqz	s1,8001b74e <load_access_fault_3+0x154>
    8001b734:	6418                	ld	a4,8(s0)
    8001b736:	4795                	li	a5,5
    TEST_END();
    8001b738:	0000b597          	auipc	a1,0xb
    8001b73c:	74858593          	addi	a1,a1,1864 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b740:	00f70763          	beq	a4,a5,8001b74e <load_access_fault_3+0x154>
    8001b744:	4481                	li	s1,0
    TEST_END();
    8001b746:	0000b597          	auipc	a1,0xb
    8001b74a:	74a58593          	addi	a1,a1,1866 # 80026e90 <__func__.0+0x2d0>
    8001b74e:	0000b517          	auipc	a0,0xb
    8001b752:	7ea50513          	addi	a0,a0,2026 # 80026f38 <__func__.0+0x378>
    8001b756:	7ae090ef          	jal	80024f04 <printf>
    8001b75a:	4511                	li	a0,4
    8001b75c:	c9ae50ef          	jal	80000bf6 <goto_priv>
    8001b760:	d4de50ef          	jal	800014ac <reset_state>
}
    8001b764:	60e2                	ld	ra,24(sp)
    8001b766:	6442                	ld	s0,16(sp)
    8001b768:	8526                	mv	a0,s1
    8001b76a:	64a2                	ld	s1,8(sp)
    8001b76c:	6105                	addi	sp,sp,32
    8001b76e:	8082                	ret

000000008001b770 <load_access_fault_4>:

bool load_access_fault_4(){
    8001b770:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b772:	0000b597          	auipc	a1,0xb
    8001b776:	c8e58593          	addi	a1,a1,-882 # 80026400 <__func__.36>
    8001b77a:	0000b517          	auipc	a0,0xb
    8001b77e:	72650513          	addi	a0,a0,1830 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_4(){
    8001b782:	ec06                	sd	ra,24(sp)
    8001b784:	e822                	sd	s0,16(sp)
    8001b786:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b788:	77c090ef          	jal	80024f04 <printf>
    8001b78c:	4529                	li	a0,10
    8001b78e:	580080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001b792:	4511                	li	a0,4
    8001b794:	c62e50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b798:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b79c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b7a0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b7a4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b7a8:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b7ac:	10000793          	li	a5,256
    8001b7b0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b7b4:	20000793          	li	a5,512
    8001b7b8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b7bc:	40000793          	li	a5,1024
    8001b7c0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b7c4:	6785                	lui	a5,0x1
    8001b7c6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b7ca:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b7ce:	4785                	li	a5,1
    8001b7d0:	07fe                	slli	a5,a5,0x1f
    8001b7d2:	4485                	li	s1,1
    8001b7d4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b7d8:	08100793          	li	a5,129
    8001b7dc:	07e2                	slli	a5,a5,0x18
    8001b7de:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b7e2:	08000793          	li	a5,128
    8001b7e6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b7ea:	67a1                	lui	a5,0x8
    8001b7ec:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b7f0:	4501                	li	a0,0
    8001b7f2:	c04e50ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b7f6:	0330000f          	fence	rw,rw
    8001b7fa:	0002e417          	auipc	s0,0x2e
    8001b7fe:	81640413          	addi	s0,s0,-2026 # 80049010 <excpt>
    8001b802:	0002e797          	auipc	a5,0x2e
    8001b806:	8407b323          	sd	zero,-1978(a5) # 80049048 <excpt+0x38>
    8001b80a:	00941023          	sh	s1,0(s0)
    8001b80e:	0330000f          	fence	rw,rw
    8001b812:	02149793          	slli	a5,s1,0x21
    8001b816:	40078793          	addi	a5,a5,1024
    8001b81a:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b81e:	08200593          	li	a1,130
    8001b822:	00012617          	auipc	a2,0x12
    8001b826:	b8660613          	addi	a2,a2,-1146 # 8002d3a8 <__func__.0+0x67e8>
    8001b82a:	0000b517          	auipc	a0,0xb
    8001b82e:	68e50513          	addi	a0,a0,1678 # 80026eb8 <__func__.0+0x2f8>
    8001b832:	6d2090ef          	jal	80024f04 <printf>
    8001b836:	0002d797          	auipc	a5,0x2d
    8001b83a:	7db7c783          	lbu	a5,2011(a5) # 80049011 <excpt+0x1>
    8001b83e:	0000b597          	auipc	a1,0xb
    8001b842:	65258593          	addi	a1,a1,1618 # 80026e90 <__func__.0+0x2d0>
    8001b846:	cf89                	beqz	a5,8001b860 <load_access_fault_4+0xf0>
    8001b848:	6418                	ld	a4,8(s0)
    8001b84a:	4795                	li	a5,5
    8001b84c:	0000b597          	auipc	a1,0xb
    8001b850:	63458593          	addi	a1,a1,1588 # 80026e80 <__func__.0+0x2c0>
    8001b854:	00f70663          	beq	a4,a5,8001b860 <load_access_fault_4+0xf0>
    8001b858:	0000b597          	auipc	a1,0xb
    8001b85c:	63858593          	addi	a1,a1,1592 # 80026e90 <__func__.0+0x2d0>
    8001b860:	0000b517          	auipc	a0,0xb
    8001b864:	67050513          	addi	a0,a0,1648 # 80026ed0 <__func__.0+0x310>
    8001b868:	69c090ef          	jal	80024f04 <printf>
    8001b86c:	0002d797          	auipc	a5,0x2d
    8001b870:	7a57c783          	lbu	a5,1957(a5) # 80049011 <excpt+0x1>
    8001b874:	c789                	beqz	a5,8001b87e <load_access_fault_4+0x10e>
    8001b876:	6418                	ld	a4,8(s0)
    8001b878:	4795                	li	a5,5
    8001b87a:	00f70c63          	beq	a4,a5,8001b892 <load_access_fault_4+0x122>
    8001b87e:	0000b517          	auipc	a0,0xb
    8001b882:	65a50513          	addi	a0,a0,1626 # 80026ed8 <__func__.0+0x318>
    8001b886:	67e090ef          	jal	80024f04 <printf>
    8001b88a:	02900513          	li	a0,41
    8001b88e:	480080ef          	jal	80023d0e <putchar>
    8001b892:	4529                	li	a0,10
    8001b894:	47a080ef          	jal	80023d0e <putchar>
    8001b898:	0002d497          	auipc	s1,0x2d
    8001b89c:	7794c483          	lbu	s1,1913(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001b8a0:	0000b597          	auipc	a1,0xb
    8001b8a4:	5f058593          	addi	a1,a1,1520 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b8a8:	cc91                	beqz	s1,8001b8c4 <load_access_fault_4+0x154>
    8001b8aa:	6418                	ld	a4,8(s0)
    8001b8ac:	4795                	li	a5,5
    TEST_END();
    8001b8ae:	0000b597          	auipc	a1,0xb
    8001b8b2:	5d258593          	addi	a1,a1,1490 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001b8b6:	00f70763          	beq	a4,a5,8001b8c4 <load_access_fault_4+0x154>
    8001b8ba:	4481                	li	s1,0
    TEST_END();
    8001b8bc:	0000b597          	auipc	a1,0xb
    8001b8c0:	5d458593          	addi	a1,a1,1492 # 80026e90 <__func__.0+0x2d0>
    8001b8c4:	0000b517          	auipc	a0,0xb
    8001b8c8:	67450513          	addi	a0,a0,1652 # 80026f38 <__func__.0+0x378>
    8001b8cc:	638090ef          	jal	80024f04 <printf>
    8001b8d0:	4511                	li	a0,4
    8001b8d2:	b24e50ef          	jal	80000bf6 <goto_priv>
    8001b8d6:	bd7e50ef          	jal	800014ac <reset_state>
}
    8001b8da:	60e2                	ld	ra,24(sp)
    8001b8dc:	6442                	ld	s0,16(sp)
    8001b8de:	8526                	mv	a0,s1
    8001b8e0:	64a2                	ld	s1,8(sp)
    8001b8e2:	6105                	addi	sp,sp,32
    8001b8e4:	8082                	ret

000000008001b8e6 <load_access_fault_5>:

bool load_access_fault_5(){
    8001b8e6:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b8e8:	0000b597          	auipc	a1,0xb
    8001b8ec:	b3058593          	addi	a1,a1,-1232 # 80026418 <__func__.35>
    8001b8f0:	0000b517          	auipc	a0,0xb
    8001b8f4:	5b050513          	addi	a0,a0,1456 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_5(){
    8001b8f8:	e406                	sd	ra,8(sp)
    8001b8fa:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b8fc:	608090ef          	jal	80024f04 <printf>
    8001b900:	4529                	li	a0,10
    8001b902:	40c080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001b906:	4511                	li	a0,4
    8001b908:	aeee50ef          	jal	80000bf6 <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001b90c:	3a0025f3          	csrr	a1,pmpcfg0
    8001b910:	00012517          	auipc	a0,0x12
    8001b914:	ad050513          	addi	a0,a0,-1328 # 8002d3e0 <__func__.0+0x6820>
    8001b918:	5ec090ef          	jal	80024f04 <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b91c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b920:	10000793          	li	a5,256
    8001b924:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b928:	20000793          	li	a5,512
    8001b92c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b930:	40000793          	li	a5,1024
    8001b934:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b938:	6785                	lui	a5,0x1
    8001b93a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b93e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b942:	4785                	li	a5,1
    8001b944:	07fe                	slli	a5,a5,0x1f
    8001b946:	4705                	li	a4,1
    8001b948:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b94c:	08100793          	li	a5,129
    8001b950:	07e2                	slli	a5,a5,0x18
    8001b952:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b956:	67a1                	lui	a5,0x8
    8001b958:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001b95c:	0330000f          	fence	rw,rw
    8001b960:	0002d417          	auipc	s0,0x2d
    8001b964:	6b040413          	addi	s0,s0,1712 # 80049010 <excpt>
    8001b968:	0002d797          	auipc	a5,0x2d
    8001b96c:	6e07b023          	sd	zero,1760(a5) # 80049048 <excpt+0x38>
    8001b970:	00e41023          	sh	a4,0(s0)
    8001b974:	0330000f          	fence	rw,rw
    8001b978:	02171793          	slli	a5,a4,0x21
    8001b97c:	40078793          	addi	a5,a5,1024
    8001b980:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    printf("%d\n",excpt.triggered);
    8001b984:	0002d597          	auipc	a1,0x2d
    8001b988:	68d5c583          	lbu	a1,1677(a1) # 80049011 <excpt+0x1>
    8001b98c:	0000c517          	auipc	a0,0xc
    8001b990:	05c50513          	addi	a0,a0,92 # 800279e8 <__func__.0+0xe28>
    8001b994:	570090ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001b998:	640c                	ld	a1,8(s0)
    8001b99a:	0000c517          	auipc	a0,0xc
    8001b99e:	04e50513          	addi	a0,a0,78 # 800279e8 <__func__.0+0xe28>
    8001b9a2:	562090ef          	jal	80024f04 <printf>



    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001b9a6:	08200593          	li	a1,130
    8001b9aa:	00012617          	auipc	a2,0x12
    8001b9ae:	a4660613          	addi	a2,a2,-1466 # 8002d3f0 <__func__.0+0x6830>
    8001b9b2:	0000b517          	auipc	a0,0xb
    8001b9b6:	50650513          	addi	a0,a0,1286 # 80026eb8 <__func__.0+0x2f8>
    8001b9ba:	54a090ef          	jal	80024f04 <printf>
    8001b9be:	0002d797          	auipc	a5,0x2d
    8001b9c2:	6537c783          	lbu	a5,1619(a5) # 80049011 <excpt+0x1>
    8001b9c6:	0000b597          	auipc	a1,0xb
    8001b9ca:	4ba58593          	addi	a1,a1,1210 # 80026e80 <__func__.0+0x2c0>
    8001b9ce:	c789                	beqz	a5,8001b9d8 <load_access_fault_5+0xf2>
    8001b9d0:	0000b597          	auipc	a1,0xb
    8001b9d4:	4c058593          	addi	a1,a1,1216 # 80026e90 <__func__.0+0x2d0>
    8001b9d8:	0000b517          	auipc	a0,0xb
    8001b9dc:	4f850513          	addi	a0,a0,1272 # 80026ed0 <__func__.0+0x310>
    8001b9e0:	524090ef          	jal	80024f04 <printf>
    8001b9e4:	0002d797          	auipc	a5,0x2d
    8001b9e8:	62d7c783          	lbu	a5,1581(a5) # 80049011 <excpt+0x1>
    8001b9ec:	e7a1                	bnez	a5,8001ba34 <load_access_fault_5+0x14e>
    8001b9ee:	4529                	li	a0,10
    8001b9f0:	31e080ef          	jal	80023d0e <putchar>
    8001b9f4:	0002d797          	auipc	a5,0x2d
    8001b9f8:	61d7c783          	lbu	a5,1565(a5) # 80049011 <excpt+0x1>
    8001b9fc:	e795                	bnez	a5,8001ba28 <load_access_fault_5+0x142>
    8001b9fe:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001ba00:	0000b597          	auipc	a1,0xb
    8001ba04:	48058593          	addi	a1,a1,1152 # 80026e80 <__func__.0+0x2c0>
    8001ba08:	0000b517          	auipc	a0,0xb
    8001ba0c:	53050513          	addi	a0,a0,1328 # 80026f38 <__func__.0+0x378>
    8001ba10:	4f4090ef          	jal	80024f04 <printf>
    8001ba14:	4511                	li	a0,4
    8001ba16:	9e0e50ef          	jal	80000bf6 <goto_priv>
    8001ba1a:	a93e50ef          	jal	800014ac <reset_state>
}
    8001ba1e:	60a2                	ld	ra,8(sp)
    8001ba20:	8522                	mv	a0,s0
    8001ba22:	6402                	ld	s0,0(sp)
    8001ba24:	0141                	addi	sp,sp,16
    8001ba26:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001ba28:	4401                	li	s0,0
    TEST_END();
    8001ba2a:	0000b597          	auipc	a1,0xb
    8001ba2e:	46658593          	addi	a1,a1,1126 # 80026e90 <__func__.0+0x2d0>
    8001ba32:	bfd9                	j	8001ba08 <load_access_fault_5+0x122>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001ba34:	0000b517          	auipc	a0,0xb
    8001ba38:	4a450513          	addi	a0,a0,1188 # 80026ed8 <__func__.0+0x318>
    8001ba3c:	4c8090ef          	jal	80024f04 <printf>
    8001ba40:	02900513          	li	a0,41
    8001ba44:	2ca080ef          	jal	80023d0e <putchar>
    8001ba48:	b75d                	j	8001b9ee <load_access_fault_5+0x108>

000000008001ba4a <load_access_fault_6>:


bool load_access_fault_6(){
    8001ba4a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ba4c:	0000b597          	auipc	a1,0xb
    8001ba50:	9e458593          	addi	a1,a1,-1564 # 80026430 <__func__.34>
    8001ba54:	0000b517          	auipc	a0,0xb
    8001ba58:	44c50513          	addi	a0,a0,1100 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_6(){
    8001ba5c:	ec06                	sd	ra,24(sp)
    8001ba5e:	e822                	sd	s0,16(sp)
    8001ba60:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ba62:	4a2090ef          	jal	80024f04 <printf>
    8001ba66:	4529                	li	a0,10
    8001ba68:	2a6080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001ba6c:	4511                	li	a0,4
    8001ba6e:	988e50ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ba72:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ba76:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ba7a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ba7e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ba82:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ba86:	10000793          	li	a5,256
    8001ba8a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ba8e:	20000793          	li	a5,512
    8001ba92:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ba96:	40000793          	li	a5,1024
    8001ba9a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ba9e:	6785                	lui	a5,0x1
    8001baa0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001baa4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001baa8:	4785                	li	a5,1
    8001baaa:	07fe                	slli	a5,a5,0x1f
    8001baac:	4485                	li	s1,1
    8001baae:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bab2:	08100793          	li	a5,129
    8001bab6:	07e2                	slli	a5,a5,0x18
    8001bab8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );           //pmp0cfg的L位 
    8001babc:	08000793          	li	a5,128
    8001bac0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );          //pmp1cfg的L位 
    8001bac4:	67a1                	lui	a5,0x8
    8001bac6:	3a07b073          	csrc	pmpcfg0,a5

    printf("%llx\n",CSRR(CSR_PMPADDR0));
    8001baca:	3b0025f3          	csrr	a1,pmpaddr0
    8001bace:	00012517          	auipc	a0,0x12
    8001bad2:	91a50513          	addi	a0,a0,-1766 # 8002d3e8 <__func__.0+0x6828>
    8001bad6:	42e090ef          	jal	80024f04 <printf>
    printf("%llx\n",CSRR(CSR_PMPADDR1));
    8001bada:	3b1025f3          	csrr	a1,pmpaddr1
    8001bade:	00012517          	auipc	a0,0x12
    8001bae2:	90a50513          	addi	a0,a0,-1782 # 8002d3e8 <__func__.0+0x6828>
    8001bae6:	41e090ef          	jal	80024f04 <printf>
    goto_priv(PRIV_HS);
    8001baea:	450d                	li	a0,3
    8001baec:	90ae50ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001baf0:	0330000f          	fence	rw,rw
    8001baf4:	0002d417          	auipc	s0,0x2d
    8001baf8:	51c40413          	addi	s0,s0,1308 # 80049010 <excpt>
    8001bafc:	0002d797          	auipc	a5,0x2d
    8001bb00:	5407b623          	sd	zero,1356(a5) # 80049048 <excpt+0x38>
    8001bb04:	00941023          	sh	s1,0(s0)
    8001bb08:	0330000f          	fence	rw,rw
    8001bb0c:	02149793          	slli	a5,s1,0x21
    8001bb10:	40078793          	addi	a5,a5,1024
    8001bb14:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bb18:	08200593          	li	a1,130
    8001bb1c:	00012617          	auipc	a2,0x12
    8001bb20:	90c60613          	addi	a2,a2,-1780 # 8002d428 <__func__.0+0x6868>
    8001bb24:	0000b517          	auipc	a0,0xb
    8001bb28:	39450513          	addi	a0,a0,916 # 80026eb8 <__func__.0+0x2f8>
    8001bb2c:	3d8090ef          	jal	80024f04 <printf>
    8001bb30:	0002d797          	auipc	a5,0x2d
    8001bb34:	4e17c783          	lbu	a5,1249(a5) # 80049011 <excpt+0x1>
    8001bb38:	0000b597          	auipc	a1,0xb
    8001bb3c:	35858593          	addi	a1,a1,856 # 80026e90 <__func__.0+0x2d0>
    8001bb40:	cf89                	beqz	a5,8001bb5a <load_access_fault_6+0x110>
    8001bb42:	6418                	ld	a4,8(s0)
    8001bb44:	4795                	li	a5,5
    8001bb46:	0000b597          	auipc	a1,0xb
    8001bb4a:	33a58593          	addi	a1,a1,826 # 80026e80 <__func__.0+0x2c0>
    8001bb4e:	00f70663          	beq	a4,a5,8001bb5a <load_access_fault_6+0x110>
    8001bb52:	0000b597          	auipc	a1,0xb
    8001bb56:	33e58593          	addi	a1,a1,830 # 80026e90 <__func__.0+0x2d0>
    8001bb5a:	0000b517          	auipc	a0,0xb
    8001bb5e:	37650513          	addi	a0,a0,886 # 80026ed0 <__func__.0+0x310>
    8001bb62:	3a2090ef          	jal	80024f04 <printf>
    8001bb66:	0002d797          	auipc	a5,0x2d
    8001bb6a:	4ab7c783          	lbu	a5,1195(a5) # 80049011 <excpt+0x1>
    8001bb6e:	c789                	beqz	a5,8001bb78 <load_access_fault_6+0x12e>
    8001bb70:	6418                	ld	a4,8(s0)
    8001bb72:	4795                	li	a5,5
    8001bb74:	00f70c63          	beq	a4,a5,8001bb8c <load_access_fault_6+0x142>
    8001bb78:	0000b517          	auipc	a0,0xb
    8001bb7c:	36050513          	addi	a0,a0,864 # 80026ed8 <__func__.0+0x318>
    8001bb80:	384090ef          	jal	80024f04 <printf>
    8001bb84:	02900513          	li	a0,41
    8001bb88:	186080ef          	jal	80023d0e <putchar>
    8001bb8c:	4529                	li	a0,10
    8001bb8e:	180080ef          	jal	80023d0e <putchar>
    8001bb92:	0002d497          	auipc	s1,0x2d
    8001bb96:	47f4c483          	lbu	s1,1151(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001bb9a:	0000b597          	auipc	a1,0xb
    8001bb9e:	2f658593          	addi	a1,a1,758 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bba2:	cc91                	beqz	s1,8001bbbe <load_access_fault_6+0x174>
    8001bba4:	6418                	ld	a4,8(s0)
    8001bba6:	4795                	li	a5,5
    TEST_END();
    8001bba8:	0000b597          	auipc	a1,0xb
    8001bbac:	2d858593          	addi	a1,a1,728 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bbb0:	00f70763          	beq	a4,a5,8001bbbe <load_access_fault_6+0x174>
    8001bbb4:	4481                	li	s1,0
    TEST_END();
    8001bbb6:	0000b597          	auipc	a1,0xb
    8001bbba:	2da58593          	addi	a1,a1,730 # 80026e90 <__func__.0+0x2d0>
    8001bbbe:	0000b517          	auipc	a0,0xb
    8001bbc2:	37a50513          	addi	a0,a0,890 # 80026f38 <__func__.0+0x378>
    8001bbc6:	33e090ef          	jal	80024f04 <printf>
    8001bbca:	4511                	li	a0,4
    8001bbcc:	82ae50ef          	jal	80000bf6 <goto_priv>
    8001bbd0:	8dde50ef          	jal	800014ac <reset_state>
}
    8001bbd4:	60e2                	ld	ra,24(sp)
    8001bbd6:	6442                	ld	s0,16(sp)
    8001bbd8:	8526                	mv	a0,s1
    8001bbda:	64a2                	ld	s1,8(sp)
    8001bbdc:	6105                	addi	sp,sp,32
    8001bbde:	8082                	ret

000000008001bbe0 <load_access_fault_7>:


bool load_access_fault_7(){
    8001bbe0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bbe2:	0000b597          	auipc	a1,0xb
    8001bbe6:	86658593          	addi	a1,a1,-1946 # 80026448 <__func__.33>
    8001bbea:	0000b517          	auipc	a0,0xb
    8001bbee:	2b650513          	addi	a0,a0,694 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_7(){
    8001bbf2:	ec06                	sd	ra,24(sp)
    8001bbf4:	e822                	sd	s0,16(sp)
    8001bbf6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bbf8:	30c090ef          	jal	80024f04 <printf>
    8001bbfc:	4529                	li	a0,10
    8001bbfe:	110080ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001bc02:	4511                	li	a0,4
    8001bc04:	ff3e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bc08:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bc0c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bc10:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bc14:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bc18:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bc1c:	10000793          	li	a5,256
    8001bc20:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bc24:	20000793          	li	a5,512
    8001bc28:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bc2c:	40000793          	li	a5,1024
    8001bc30:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bc34:	6785                	lui	a5,0x1
    8001bc36:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bc3a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bc3e:	4785                	li	a5,1
    8001bc40:	07fe                	slli	a5,a5,0x1f
    8001bc42:	4485                	li	s1,1
    8001bc44:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bc48:	08100793          	li	a5,129
    8001bc4c:	07e2                	slli	a5,a5,0x18
    8001bc4e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bc52:	08000793          	li	a5,128
    8001bc56:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bc5a:	67a1                	lui	a5,0x8
    8001bc5c:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001bc60:	8526                	mv	a0,s1
    8001bc62:	f95e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bc66:	0330000f          	fence	rw,rw
    8001bc6a:	0002d417          	auipc	s0,0x2d
    8001bc6e:	3a640413          	addi	s0,s0,934 # 80049010 <excpt>
    8001bc72:	0002d797          	auipc	a5,0x2d
    8001bc76:	3c07bb23          	sd	zero,982(a5) # 80049048 <excpt+0x38>
    8001bc7a:	00941023          	sh	s1,0(s0)
    8001bc7e:	0330000f          	fence	rw,rw
    8001bc82:	02149793          	slli	a5,s1,0x21
    8001bc86:	40078793          	addi	a5,a5,1024
    8001bc8a:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bc8e:	08200593          	li	a1,130
    8001bc92:	00011617          	auipc	a2,0x11
    8001bc96:	7ce60613          	addi	a2,a2,1998 # 8002d460 <__func__.0+0x68a0>
    8001bc9a:	0000b517          	auipc	a0,0xb
    8001bc9e:	21e50513          	addi	a0,a0,542 # 80026eb8 <__func__.0+0x2f8>
    8001bca2:	262090ef          	jal	80024f04 <printf>
    8001bca6:	0002d797          	auipc	a5,0x2d
    8001bcaa:	36b7c783          	lbu	a5,875(a5) # 80049011 <excpt+0x1>
    8001bcae:	0000b597          	auipc	a1,0xb
    8001bcb2:	1e258593          	addi	a1,a1,482 # 80026e90 <__func__.0+0x2d0>
    8001bcb6:	cf89                	beqz	a5,8001bcd0 <load_access_fault_7+0xf0>
    8001bcb8:	6418                	ld	a4,8(s0)
    8001bcba:	4795                	li	a5,5
    8001bcbc:	0000b597          	auipc	a1,0xb
    8001bcc0:	1c458593          	addi	a1,a1,452 # 80026e80 <__func__.0+0x2c0>
    8001bcc4:	00f70663          	beq	a4,a5,8001bcd0 <load_access_fault_7+0xf0>
    8001bcc8:	0000b597          	auipc	a1,0xb
    8001bccc:	1c858593          	addi	a1,a1,456 # 80026e90 <__func__.0+0x2d0>
    8001bcd0:	0000b517          	auipc	a0,0xb
    8001bcd4:	20050513          	addi	a0,a0,512 # 80026ed0 <__func__.0+0x310>
    8001bcd8:	22c090ef          	jal	80024f04 <printf>
    8001bcdc:	0002d797          	auipc	a5,0x2d
    8001bce0:	3357c783          	lbu	a5,821(a5) # 80049011 <excpt+0x1>
    8001bce4:	c789                	beqz	a5,8001bcee <load_access_fault_7+0x10e>
    8001bce6:	6418                	ld	a4,8(s0)
    8001bce8:	4795                	li	a5,5
    8001bcea:	00f70c63          	beq	a4,a5,8001bd02 <load_access_fault_7+0x122>
    8001bcee:	0000b517          	auipc	a0,0xb
    8001bcf2:	1ea50513          	addi	a0,a0,490 # 80026ed8 <__func__.0+0x318>
    8001bcf6:	20e090ef          	jal	80024f04 <printf>
    8001bcfa:	02900513          	li	a0,41
    8001bcfe:	010080ef          	jal	80023d0e <putchar>
    8001bd02:	4529                	li	a0,10
    8001bd04:	00a080ef          	jal	80023d0e <putchar>
    8001bd08:	0002d497          	auipc	s1,0x2d
    8001bd0c:	3094c483          	lbu	s1,777(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001bd10:	0000b597          	auipc	a1,0xb
    8001bd14:	18058593          	addi	a1,a1,384 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bd18:	cc91                	beqz	s1,8001bd34 <load_access_fault_7+0x154>
    8001bd1a:	6418                	ld	a4,8(s0)
    8001bd1c:	4795                	li	a5,5
    TEST_END();
    8001bd1e:	0000b597          	auipc	a1,0xb
    8001bd22:	16258593          	addi	a1,a1,354 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001bd26:	00f70763          	beq	a4,a5,8001bd34 <load_access_fault_7+0x154>
    8001bd2a:	4481                	li	s1,0
    TEST_END();
    8001bd2c:	0000b597          	auipc	a1,0xb
    8001bd30:	16458593          	addi	a1,a1,356 # 80026e90 <__func__.0+0x2d0>
    8001bd34:	0000b517          	auipc	a0,0xb
    8001bd38:	20450513          	addi	a0,a0,516 # 80026f38 <__func__.0+0x378>
    8001bd3c:	1c8090ef          	jal	80024f04 <printf>
    8001bd40:	4511                	li	a0,4
    8001bd42:	eb5e40ef          	jal	80000bf6 <goto_priv>
    8001bd46:	f66e50ef          	jal	800014ac <reset_state>
}
    8001bd4a:	60e2                	ld	ra,24(sp)
    8001bd4c:	6442                	ld	s0,16(sp)
    8001bd4e:	8526                	mv	a0,s1
    8001bd50:	64a2                	ld	s1,8(sp)
    8001bd52:	6105                	addi	sp,sp,32
    8001bd54:	8082                	ret

000000008001bd56 <load_access_fault_8>:

bool load_access_fault_8(){
    8001bd56:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bd58:	0000a597          	auipc	a1,0xa
    8001bd5c:	70858593          	addi	a1,a1,1800 # 80026460 <__func__.32>
    8001bd60:	0000b517          	auipc	a0,0xb
    8001bd64:	14050513          	addi	a0,a0,320 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_8(){
    8001bd68:	ec06                	sd	ra,24(sp)
    8001bd6a:	e822                	sd	s0,16(sp)
    8001bd6c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bd6e:	196090ef          	jal	80024f04 <printf>
    8001bd72:	4529                	li	a0,10
    8001bd74:	79b070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001bd78:	4511                	li	a0,4
    8001bd7a:	e7de40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bd7e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bd82:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bd86:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bd8a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bd8e:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bd92:	10000793          	li	a5,256
    8001bd96:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bd9a:	20000793          	li	a5,512
    8001bd9e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bda2:	40000793          	li	a5,1024
    8001bda6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bdaa:	6785                	lui	a5,0x1
    8001bdac:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bdb0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bdb4:	4785                	li	a5,1
    8001bdb6:	07fe                	slli	a5,a5,0x1f
    8001bdb8:	4485                	li	s1,1
    8001bdba:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bdbe:	08100793          	li	a5,129
    8001bdc2:	07e2                	slli	a5,a5,0x18
    8001bdc4:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bdc8:	08000793          	li	a5,128
    8001bdcc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bdd0:	67a1                	lui	a5,0x8
    8001bdd2:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001bdd6:	4501                	li	a0,0
    8001bdd8:	e1fe40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bddc:	0330000f          	fence	rw,rw
    8001bde0:	0002d417          	auipc	s0,0x2d
    8001bde4:	23040413          	addi	s0,s0,560 # 80049010 <excpt>
    8001bde8:	0002d797          	auipc	a5,0x2d
    8001bdec:	2607b023          	sd	zero,608(a5) # 80049048 <excpt+0x38>
    8001bdf0:	00941023          	sh	s1,0(s0)
    8001bdf4:	0330000f          	fence	rw,rw
    8001bdf8:	02149793          	slli	a5,s1,0x21
    8001bdfc:	40078793          	addi	a5,a5,1024
    8001be00:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001be04:	08200593          	li	a1,130
    8001be08:	00011617          	auipc	a2,0x11
    8001be0c:	69060613          	addi	a2,a2,1680 # 8002d498 <__func__.0+0x68d8>
    8001be10:	0000b517          	auipc	a0,0xb
    8001be14:	0a850513          	addi	a0,a0,168 # 80026eb8 <__func__.0+0x2f8>
    8001be18:	0ec090ef          	jal	80024f04 <printf>
    8001be1c:	0002d797          	auipc	a5,0x2d
    8001be20:	1f57c783          	lbu	a5,501(a5) # 80049011 <excpt+0x1>
    8001be24:	0000b597          	auipc	a1,0xb
    8001be28:	06c58593          	addi	a1,a1,108 # 80026e90 <__func__.0+0x2d0>
    8001be2c:	cf89                	beqz	a5,8001be46 <load_access_fault_8+0xf0>
    8001be2e:	6418                	ld	a4,8(s0)
    8001be30:	4795                	li	a5,5
    8001be32:	0000b597          	auipc	a1,0xb
    8001be36:	04e58593          	addi	a1,a1,78 # 80026e80 <__func__.0+0x2c0>
    8001be3a:	00f70663          	beq	a4,a5,8001be46 <load_access_fault_8+0xf0>
    8001be3e:	0000b597          	auipc	a1,0xb
    8001be42:	05258593          	addi	a1,a1,82 # 80026e90 <__func__.0+0x2d0>
    8001be46:	0000b517          	auipc	a0,0xb
    8001be4a:	08a50513          	addi	a0,a0,138 # 80026ed0 <__func__.0+0x310>
    8001be4e:	0b6090ef          	jal	80024f04 <printf>
    8001be52:	0002d797          	auipc	a5,0x2d
    8001be56:	1bf7c783          	lbu	a5,447(a5) # 80049011 <excpt+0x1>
    8001be5a:	c789                	beqz	a5,8001be64 <load_access_fault_8+0x10e>
    8001be5c:	6418                	ld	a4,8(s0)
    8001be5e:	4795                	li	a5,5
    8001be60:	00f70c63          	beq	a4,a5,8001be78 <load_access_fault_8+0x122>
    8001be64:	0000b517          	auipc	a0,0xb
    8001be68:	07450513          	addi	a0,a0,116 # 80026ed8 <__func__.0+0x318>
    8001be6c:	098090ef          	jal	80024f04 <printf>
    8001be70:	02900513          	li	a0,41
    8001be74:	69b070ef          	jal	80023d0e <putchar>
    8001be78:	4529                	li	a0,10
    8001be7a:	695070ef          	jal	80023d0e <putchar>
    8001be7e:	0002d497          	auipc	s1,0x2d
    8001be82:	1934c483          	lbu	s1,403(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001be86:	0000b597          	auipc	a1,0xb
    8001be8a:	00a58593          	addi	a1,a1,10 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001be8e:	cc91                	beqz	s1,8001beaa <load_access_fault_8+0x154>
    8001be90:	6418                	ld	a4,8(s0)
    8001be92:	4795                	li	a5,5
    TEST_END();
    8001be94:	0000b597          	auipc	a1,0xb
    8001be98:	fec58593          	addi	a1,a1,-20 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001be9c:	00f70763          	beq	a4,a5,8001beaa <load_access_fault_8+0x154>
    8001bea0:	4481                	li	s1,0
    TEST_END();
    8001bea2:	0000b597          	auipc	a1,0xb
    8001bea6:	fee58593          	addi	a1,a1,-18 # 80026e90 <__func__.0+0x2d0>
    8001beaa:	0000b517          	auipc	a0,0xb
    8001beae:	08e50513          	addi	a0,a0,142 # 80026f38 <__func__.0+0x378>
    8001beb2:	052090ef          	jal	80024f04 <printf>
    8001beb6:	4511                	li	a0,4
    8001beb8:	d3fe40ef          	jal	80000bf6 <goto_priv>
    8001bebc:	df0e50ef          	jal	800014ac <reset_state>
}
    8001bec0:	60e2                	ld	ra,24(sp)
    8001bec2:	6442                	ld	s0,16(sp)
    8001bec4:	8526                	mv	a0,s1
    8001bec6:	64a2                	ld	s1,8(sp)
    8001bec8:	6105                	addi	sp,sp,32
    8001beca:	8082                	ret

000000008001becc <load_access_fault_9>:

bool load_access_fault_9(){
    8001becc:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bece:	0000a597          	auipc	a1,0xa
    8001bed2:	5aa58593          	addi	a1,a1,1450 # 80026478 <__func__.31>
    8001bed6:	0000b517          	auipc	a0,0xb
    8001beda:	fca50513          	addi	a0,a0,-54 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_9(){
    8001bede:	ec06                	sd	ra,24(sp)
    8001bee0:	e822                	sd	s0,16(sp)
    8001bee2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bee4:	020090ef          	jal	80024f04 <printf>
    8001bee8:	4529                	li	a0,10
    8001beea:	625070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001beee:	4511                	li	a0,4
    8001bef0:	d07e40ef          	jal	80000bf6 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bef4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bef8:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001befc:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bf00:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bf04:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bf08:	10000793          	li	a5,256
    8001bf0c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bf10:	20000793          	li	a5,512
    8001bf14:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bf18:	40000793          	li	a5,1024
    8001bf1c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bf20:	6785                	lui	a5,0x1
    8001bf22:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bf26:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bf2a:	4785                	li	a5,1
    8001bf2c:	07fe                	slli	a5,a5,0x1f
    8001bf2e:	4485                	li	s1,1
    8001bf30:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bf34:	08100793          	li	a5,129
    8001bf38:	07e2                	slli	a5,a5,0x18
    8001bf3a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bf3e:	08000793          	li	a5,128
    8001bf42:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bf46:	67a1                	lui	a5,0x8
    8001bf48:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001bf4c:	4501                	li	a0,0
    8001bf4e:	ca9e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bf52:	0330000f          	fence	rw,rw
    8001bf56:	0002d417          	auipc	s0,0x2d
    8001bf5a:	0ba40413          	addi	s0,s0,186 # 80049010 <excpt>
    8001bf5e:	0002d797          	auipc	a5,0x2d
    8001bf62:	0e07b523          	sd	zero,234(a5) # 80049048 <excpt+0x38>
    8001bf66:	00941023          	sh	s1,0(s0)
    8001bf6a:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001bf6e:	02349793          	slli	a5,s1,0x23
    8001bf72:	17e1                	addi	a5,a5,-8
    8001bf74:	0007b783          	ld	a5,0(a5)
    
    ld(0x1fffffffeUL << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001bf78:	08200593          	li	a1,130
    8001bf7c:	00011617          	auipc	a2,0x11
    8001bf80:	55460613          	addi	a2,a2,1364 # 8002d4d0 <__func__.0+0x6910>
    8001bf84:	0000b517          	auipc	a0,0xb
    8001bf88:	f3450513          	addi	a0,a0,-204 # 80026eb8 <__func__.0+0x2f8>
    8001bf8c:	779080ef          	jal	80024f04 <printf>
    8001bf90:	0002d797          	auipc	a5,0x2d
    8001bf94:	0817c783          	lbu	a5,129(a5) # 80049011 <excpt+0x1>
    8001bf98:	0000b597          	auipc	a1,0xb
    8001bf9c:	ef858593          	addi	a1,a1,-264 # 80026e90 <__func__.0+0x2d0>
    8001bfa0:	cf89                	beqz	a5,8001bfba <load_access_fault_9+0xee>
    8001bfa2:	6418                	ld	a4,8(s0)
    8001bfa4:	4795                	li	a5,5
    8001bfa6:	0000b597          	auipc	a1,0xb
    8001bfaa:	eda58593          	addi	a1,a1,-294 # 80026e80 <__func__.0+0x2c0>
    8001bfae:	00f70663          	beq	a4,a5,8001bfba <load_access_fault_9+0xee>
    8001bfb2:	0000b597          	auipc	a1,0xb
    8001bfb6:	ede58593          	addi	a1,a1,-290 # 80026e90 <__func__.0+0x2d0>
    8001bfba:	0000b517          	auipc	a0,0xb
    8001bfbe:	f1650513          	addi	a0,a0,-234 # 80026ed0 <__func__.0+0x310>
    8001bfc2:	743080ef          	jal	80024f04 <printf>
    8001bfc6:	0002d797          	auipc	a5,0x2d
    8001bfca:	04b7c783          	lbu	a5,75(a5) # 80049011 <excpt+0x1>
    8001bfce:	c789                	beqz	a5,8001bfd8 <load_access_fault_9+0x10c>
    8001bfd0:	6418                	ld	a4,8(s0)
    8001bfd2:	4795                	li	a5,5
    8001bfd4:	00f70c63          	beq	a4,a5,8001bfec <load_access_fault_9+0x120>
    8001bfd8:	0000b517          	auipc	a0,0xb
    8001bfdc:	f0050513          	addi	a0,a0,-256 # 80026ed8 <__func__.0+0x318>
    8001bfe0:	725080ef          	jal	80024f04 <printf>
    8001bfe4:	02900513          	li	a0,41
    8001bfe8:	527070ef          	jal	80023d0e <putchar>
    8001bfec:	4529                	li	a0,10
    8001bfee:	521070ef          	jal	80023d0e <putchar>
    8001bff2:	0002d497          	auipc	s1,0x2d
    8001bff6:	01f4c483          	lbu	s1,31(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001bffa:	0000b597          	auipc	a1,0xb
    8001bffe:	e9658593          	addi	a1,a1,-362 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001c002:	cc91                	beqz	s1,8001c01e <load_access_fault_9+0x152>
    8001c004:	6418                	ld	a4,8(s0)
    8001c006:	4795                	li	a5,5
    TEST_END();
    8001c008:	0000b597          	auipc	a1,0xb
    8001c00c:	e7858593          	addi	a1,a1,-392 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001c010:	00f70763          	beq	a4,a5,8001c01e <load_access_fault_9+0x152>
    8001c014:	4481                	li	s1,0
    TEST_END();
    8001c016:	0000b597          	auipc	a1,0xb
    8001c01a:	e7a58593          	addi	a1,a1,-390 # 80026e90 <__func__.0+0x2d0>
    8001c01e:	0000b517          	auipc	a0,0xb
    8001c022:	f1a50513          	addi	a0,a0,-230 # 80026f38 <__func__.0+0x378>
    8001c026:	6df080ef          	jal	80024f04 <printf>
    8001c02a:	4511                	li	a0,4
    8001c02c:	bcbe40ef          	jal	80000bf6 <goto_priv>
    8001c030:	c7ce50ef          	jal	800014ac <reset_state>
}
    8001c034:	60e2                	ld	ra,24(sp)
    8001c036:	6442                	ld	s0,16(sp)
    8001c038:	8526                	mv	a0,s1
    8001c03a:	64a2                	ld	s1,8(sp)
    8001c03c:	6105                	addi	sp,sp,32
    8001c03e:	8082                	ret

000000008001c040 <load_access_fault_10>:

bool load_access_fault_10(){
    8001c040:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c042:	0000a597          	auipc	a1,0xa
    8001c046:	44e58593          	addi	a1,a1,1102 # 80026490 <__func__.30>
    8001c04a:	0000b517          	auipc	a0,0xb
    8001c04e:	e5650513          	addi	a0,a0,-426 # 80026ea0 <__func__.0+0x2e0>
bool load_access_fault_10(){
    8001c052:	ec06                	sd	ra,24(sp)
    8001c054:	e822                	sd	s0,16(sp)
    8001c056:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c058:	6ad080ef          	jal	80024f04 <printf>
    8001c05c:	4529                	li	a0,10
    8001c05e:	4b1070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001c062:	4511                	li	a0,4
    8001c064:	b93e40ef          	jal	80000bf6 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c068:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c06c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c070:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c074:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c078:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c07c:	4785                	li	a5,1
    8001c07e:	07fe                	slli	a5,a5,0x1f
    8001c080:	4485                	li	s1,1
    8001c082:	3b079073          	csrw	pmpaddr0,a5
    
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c086:	08000793          	li	a5,128
    8001c08a:	3a07a073          	csrs	pmpcfg0,a5

    printf("pmpcfg0=%llx \n",CSRR(CSR_PMPCFG0));
    8001c08e:	3a0025f3          	csrr	a1,pmpcfg0
    8001c092:	00011517          	auipc	a0,0x11
    8001c096:	4ae50513          	addi	a0,a0,1198 # 8002d540 <__func__.0+0x6980>
    8001c09a:	66b080ef          	jal	80024f04 <printf>
    printf("pmpcfg2=%llx \n",CSRR(CSR_PMPCFG2));
    8001c09e:	3a2025f3          	csrr	a1,pmpcfg2
    8001c0a2:	00011517          	auipc	a0,0x11
    8001c0a6:	4ae50513          	addi	a0,a0,1198 # 8002d550 <__func__.0+0x6990>
    8001c0aa:	65b080ef          	jal	80024f04 <printf>


    goto_priv(PRIV_HS);
    8001c0ae:	450d                	li	a0,3
    8001c0b0:	b47e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c0b4:	0330000f          	fence	rw,rw
    8001c0b8:	0002d417          	auipc	s0,0x2d
    8001c0bc:	f5840413          	addi	s0,s0,-168 # 80049010 <excpt>
    8001c0c0:	0002d797          	auipc	a5,0x2d
    8001c0c4:	f807b423          	sd	zero,-120(a5) # 80049048 <excpt+0x38>
    8001c0c8:	00941023          	sh	s1,0(s0)
    8001c0cc:	0330000f          	fence	rw,rw
    8001c0d0:	08f00793          	li	a5,143
    8001c0d4:	07ea                	slli	a5,a5,0x1a
    8001c0d6:	0007b783          	ld	a5,0(a5)

    ld(0x8f000000UL << 2);

    printf("%d\n",excpt.triggered);
    8001c0da:	0002d597          	auipc	a1,0x2d
    8001c0de:	f375c583          	lbu	a1,-201(a1) # 80049011 <excpt+0x1>
    8001c0e2:	0000c517          	auipc	a0,0xc
    8001c0e6:	90650513          	addi	a0,a0,-1786 # 800279e8 <__func__.0+0xe28>
    8001c0ea:	61b080ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001c0ee:	640c                	ld	a1,8(s0)
    8001c0f0:	0000c517          	auipc	a0,0xc
    8001c0f4:	8f850513          	addi	a0,a0,-1800 # 800279e8 <__func__.0+0xe28>
    8001c0f8:	60d080ef          	jal	80024f04 <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001c0fc:	08200593          	li	a1,130
    8001c100:	00011617          	auipc	a2,0x11
    8001c104:	46060613          	addi	a2,a2,1120 # 8002d560 <__func__.0+0x69a0>
    8001c108:	0000b517          	auipc	a0,0xb
    8001c10c:	db050513          	addi	a0,a0,-592 # 80026eb8 <__func__.0+0x2f8>
    8001c110:	5f5080ef          	jal	80024f04 <printf>
    8001c114:	0002d797          	auipc	a5,0x2d
    8001c118:	efd7c783          	lbu	a5,-259(a5) # 80049011 <excpt+0x1>
    8001c11c:	0000b597          	auipc	a1,0xb
    8001c120:	d7458593          	addi	a1,a1,-652 # 80026e90 <__func__.0+0x2d0>
    8001c124:	cf89                	beqz	a5,8001c13e <load_access_fault_10+0xfe>
    8001c126:	6418                	ld	a4,8(s0)
    8001c128:	4795                	li	a5,5
    8001c12a:	0000b597          	auipc	a1,0xb
    8001c12e:	d5658593          	addi	a1,a1,-682 # 80026e80 <__func__.0+0x2c0>
    8001c132:	00f70663          	beq	a4,a5,8001c13e <load_access_fault_10+0xfe>
    8001c136:	0000b597          	auipc	a1,0xb
    8001c13a:	d5a58593          	addi	a1,a1,-678 # 80026e90 <__func__.0+0x2d0>
    8001c13e:	0000b517          	auipc	a0,0xb
    8001c142:	d9250513          	addi	a0,a0,-622 # 80026ed0 <__func__.0+0x310>
    8001c146:	5bf080ef          	jal	80024f04 <printf>
    8001c14a:	0002d797          	auipc	a5,0x2d
    8001c14e:	ec77c783          	lbu	a5,-313(a5) # 80049011 <excpt+0x1>
    8001c152:	c789                	beqz	a5,8001c15c <load_access_fault_10+0x11c>
    8001c154:	6418                	ld	a4,8(s0)
    8001c156:	4795                	li	a5,5
    8001c158:	00f70c63          	beq	a4,a5,8001c170 <load_access_fault_10+0x130>
    8001c15c:	0000b517          	auipc	a0,0xb
    8001c160:	d7c50513          	addi	a0,a0,-644 # 80026ed8 <__func__.0+0x318>
    8001c164:	5a1080ef          	jal	80024f04 <printf>
    8001c168:	02900513          	li	a0,41
    8001c16c:	3a3070ef          	jal	80023d0e <putchar>
    8001c170:	4529                	li	a0,10
    8001c172:	39d070ef          	jal	80023d0e <putchar>
    8001c176:	0002d497          	auipc	s1,0x2d
    8001c17a:	e9b4c483          	lbu	s1,-357(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001c17e:	0000b597          	auipc	a1,0xb
    8001c182:	d1258593          	addi	a1,a1,-750 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001c186:	cc91                	beqz	s1,8001c1a2 <load_access_fault_10+0x162>
    8001c188:	6418                	ld	a4,8(s0)
    8001c18a:	4795                	li	a5,5
    TEST_END();
    8001c18c:	0000b597          	auipc	a1,0xb
    8001c190:	cf458593          	addi	a1,a1,-780 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001c194:	00f70763          	beq	a4,a5,8001c1a2 <load_access_fault_10+0x162>
    8001c198:	4481                	li	s1,0
    TEST_END();
    8001c19a:	0000b597          	auipc	a1,0xb
    8001c19e:	cf658593          	addi	a1,a1,-778 # 80026e90 <__func__.0+0x2d0>
    8001c1a2:	0000b517          	auipc	a0,0xb
    8001c1a6:	d9650513          	addi	a0,a0,-618 # 80026f38 <__func__.0+0x378>
    8001c1aa:	55b080ef          	jal	80024f04 <printf>
    8001c1ae:	4511                	li	a0,4
    8001c1b0:	a47e40ef          	jal	80000bf6 <goto_priv>
    8001c1b4:	af8e50ef          	jal	800014ac <reset_state>
}
    8001c1b8:	60e2                	ld	ra,24(sp)
    8001c1ba:	6442                	ld	s0,16(sp)
    8001c1bc:	8526                	mv	a0,s1
    8001c1be:	64a2                	ld	s1,8(sp)
    8001c1c0:	6105                	addi	sp,sp,32
    8001c1c2:	8082                	ret

000000008001c1c4 <store_access_fault_1>:


bool store_access_fault_1(){
    8001c1c4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c1c6:	0000a597          	auipc	a1,0xa
    8001c1ca:	2e258593          	addi	a1,a1,738 # 800264a8 <__func__.29>
    8001c1ce:	0000b517          	auipc	a0,0xb
    8001c1d2:	cd250513          	addi	a0,a0,-814 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_1(){
    8001c1d6:	ec06                	sd	ra,24(sp)
    8001c1d8:	e822                	sd	s0,16(sp)
    8001c1da:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c1dc:	529080ef          	jal	80024f04 <printf>
    8001c1e0:	4529                	li	a0,10
    8001c1e2:	32d070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001c1e6:	4511                	li	a0,4
    8001c1e8:	a0fe40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c1ec:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c1f0:	10000793          	li	a5,256
    8001c1f4:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c1f8:	20000793          	li	a5,512
    8001c1fc:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c200:	40000793          	li	a5,1024
    8001c204:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c208:	6785                	lui	a5,0x1
    8001c20a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c20e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c212:	4785                	li	a5,1
    8001c214:	07fe                	slli	a5,a5,0x1f
    8001c216:	4705                	li	a4,1
    8001c218:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c21c:	08100793          	li	a5,129
    8001c220:	07e2                	slli	a5,a5,0x18
    8001c222:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c226:	67a1                	lui	a5,0x8
    8001c228:	3a07a073          	csrs	pmpcfg0,a5
    asm volatile ("sfence.vma \n\t");
    8001c22c:	12000073          	sfence.vma
    asm volatile(
    8001c230:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8001c234:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
    TEST_SETUP_EXCEPT();
    8001c238:	0330000f          	fence	rw,rw
    8001c23c:	0002d417          	auipc	s0,0x2d
    8001c240:	dd440413          	addi	s0,s0,-556 # 80049010 <excpt>
    8001c244:	0002d797          	auipc	a5,0x2d
    8001c248:	e007b223          	sd	zero,-508(a5) # 80049048 <excpt+0x38>
    8001c24c:	00e41023          	sh	a4,0(s0)
    8001c250:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8001c254:	02171793          	slli	a5,a4,0x21
    8001c258:	40078793          	addi	a5,a5,1024
    8001c25c:	4701                	li	a4,0
    8001c25e:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    8001c262:	0002d597          	auipc	a1,0x2d
    8001c266:	daf5c583          	lbu	a1,-593(a1) # 80049011 <excpt+0x1>
    8001c26a:	0000b517          	auipc	a0,0xb
    8001c26e:	77e50513          	addi	a0,a0,1918 # 800279e8 <__func__.0+0xe28>
    8001c272:	493080ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001c276:	640c                	ld	a1,8(s0)
    8001c278:	0000b517          	auipc	a0,0xb
    8001c27c:	77050513          	addi	a0,a0,1904 # 800279e8 <__func__.0+0xe28>
    8001c280:	485080ef          	jal	80024f04 <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c284:	08200593          	li	a1,130
    8001c288:	00011617          	auipc	a2,0x11
    8001c28c:	33860613          	addi	a2,a2,824 # 8002d5c0 <__func__.0+0x6a00>
    8001c290:	0000b517          	auipc	a0,0xb
    8001c294:	c2850513          	addi	a0,a0,-984 # 80026eb8 <__func__.0+0x2f8>
    8001c298:	46d080ef          	jal	80024f04 <printf>
    8001c29c:	0002d797          	auipc	a5,0x2d
    8001c2a0:	d757c783          	lbu	a5,-651(a5) # 80049011 <excpt+0x1>
    8001c2a4:	0000b597          	auipc	a1,0xb
    8001c2a8:	bec58593          	addi	a1,a1,-1044 # 80026e90 <__func__.0+0x2d0>
    8001c2ac:	cf89                	beqz	a5,8001c2c6 <store_access_fault_1+0x102>
    8001c2ae:	6418                	ld	a4,8(s0)
    8001c2b0:	479d                	li	a5,7
    8001c2b2:	0000b597          	auipc	a1,0xb
    8001c2b6:	bce58593          	addi	a1,a1,-1074 # 80026e80 <__func__.0+0x2c0>
    8001c2ba:	00f70663          	beq	a4,a5,8001c2c6 <store_access_fault_1+0x102>
    8001c2be:	0000b597          	auipc	a1,0xb
    8001c2c2:	bd258593          	addi	a1,a1,-1070 # 80026e90 <__func__.0+0x2d0>
    8001c2c6:	0000b517          	auipc	a0,0xb
    8001c2ca:	c0a50513          	addi	a0,a0,-1014 # 80026ed0 <__func__.0+0x310>
    8001c2ce:	437080ef          	jal	80024f04 <printf>
    8001c2d2:	0002d797          	auipc	a5,0x2d
    8001c2d6:	d3f7c783          	lbu	a5,-705(a5) # 80049011 <excpt+0x1>
    8001c2da:	c789                	beqz	a5,8001c2e4 <store_access_fault_1+0x120>
    8001c2dc:	6418                	ld	a4,8(s0)
    8001c2de:	479d                	li	a5,7
    8001c2e0:	00f70c63          	beq	a4,a5,8001c2f8 <store_access_fault_1+0x134>
    8001c2e4:	0000b517          	auipc	a0,0xb
    8001c2e8:	bf450513          	addi	a0,a0,-1036 # 80026ed8 <__func__.0+0x318>
    8001c2ec:	419080ef          	jal	80024f04 <printf>
    8001c2f0:	02900513          	li	a0,41
    8001c2f4:	21b070ef          	jal	80023d0e <putchar>
    8001c2f8:	4529                	li	a0,10
    8001c2fa:	215070ef          	jal	80023d0e <putchar>
    8001c2fe:	0002d497          	auipc	s1,0x2d
    8001c302:	d134c483          	lbu	s1,-749(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c306:	0000b597          	auipc	a1,0xb
    8001c30a:	b8a58593          	addi	a1,a1,-1142 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c30e:	cc91                	beqz	s1,8001c32a <store_access_fault_1+0x166>
    8001c310:	6418                	ld	a4,8(s0)
    8001c312:	479d                	li	a5,7
    TEST_END();
    8001c314:	0000b597          	auipc	a1,0xb
    8001c318:	b6c58593          	addi	a1,a1,-1172 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c31c:	00f70763          	beq	a4,a5,8001c32a <store_access_fault_1+0x166>
    8001c320:	4481                	li	s1,0
    TEST_END();
    8001c322:	0000b597          	auipc	a1,0xb
    8001c326:	b6e58593          	addi	a1,a1,-1170 # 80026e90 <__func__.0+0x2d0>
    8001c32a:	0000b517          	auipc	a0,0xb
    8001c32e:	c0e50513          	addi	a0,a0,-1010 # 80026f38 <__func__.0+0x378>
    8001c332:	3d3080ef          	jal	80024f04 <printf>
    8001c336:	4511                	li	a0,4
    8001c338:	8bfe40ef          	jal	80000bf6 <goto_priv>
    8001c33c:	970e50ef          	jal	800014ac <reset_state>
}
    8001c340:	60e2                	ld	ra,24(sp)
    8001c342:	6442                	ld	s0,16(sp)
    8001c344:	8526                	mv	a0,s1
    8001c346:	64a2                	ld	s1,8(sp)
    8001c348:	6105                	addi	sp,sp,32
    8001c34a:	8082                	ret

000000008001c34c <store_access_fault_2>:

bool store_access_fault_2(){
    8001c34c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c34e:	0000a597          	auipc	a1,0xa
    8001c352:	17258593          	addi	a1,a1,370 # 800264c0 <__func__.28>
    8001c356:	0000b517          	auipc	a0,0xb
    8001c35a:	b4a50513          	addi	a0,a0,-1206 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_2(){
    8001c35e:	ec06                	sd	ra,24(sp)
    8001c360:	e822                	sd	s0,16(sp)
    8001c362:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c364:	3a1080ef          	jal	80024f04 <printf>
    8001c368:	4529                	li	a0,10
    8001c36a:	1a5070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001c36e:	4511                	li	a0,4
    8001c370:	887e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c374:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c378:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c37c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c380:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c384:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c388:	10000793          	li	a5,256
    8001c38c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c390:	20000793          	li	a5,512
    8001c394:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c398:	40000793          	li	a5,1024
    8001c39c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c3a0:	6785                	lui	a5,0x1
    8001c3a2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c3a6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c3aa:	4785                	li	a5,1
    8001c3ac:	07fe                	slli	a5,a5,0x1f
    8001c3ae:	4485                	li	s1,1
    8001c3b0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c3b4:	08100793          	li	a5,129
    8001c3b8:	07e2                	slli	a5,a5,0x18
    8001c3ba:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c3be:	08000793          	li	a5,128
    8001c3c2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c3c6:	67a1                	lui	a5,0x8
    8001c3c8:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c3cc:	450d                	li	a0,3
    8001c3ce:	829e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c3d2:	0330000f          	fence	rw,rw
    8001c3d6:	0002d417          	auipc	s0,0x2d
    8001c3da:	c3a40413          	addi	s0,s0,-966 # 80049010 <excpt>
    8001c3de:	0002d797          	auipc	a5,0x2d
    8001c3e2:	c607b523          	sd	zero,-918(a5) # 80049048 <excpt+0x38>
    8001c3e6:	00941023          	sh	s1,0(s0)
    8001c3ea:	0330000f          	fence	rw,rw
    8001c3ee:	02149793          	slli	a5,s1,0x21
    8001c3f2:	40078793          	addi	a5,a5,1024
    8001c3f6:	4701                	li	a4,0
    8001c3f8:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c3fc:	08200593          	li	a1,130
    8001c400:	00011617          	auipc	a2,0x11
    8001c404:	1f860613          	addi	a2,a2,504 # 8002d5f8 <__func__.0+0x6a38>
    8001c408:	0000b517          	auipc	a0,0xb
    8001c40c:	ab050513          	addi	a0,a0,-1360 # 80026eb8 <__func__.0+0x2f8>
    8001c410:	2f5080ef          	jal	80024f04 <printf>
    8001c414:	0002d797          	auipc	a5,0x2d
    8001c418:	bfd7c783          	lbu	a5,-1027(a5) # 80049011 <excpt+0x1>
    8001c41c:	0000b597          	auipc	a1,0xb
    8001c420:	a7458593          	addi	a1,a1,-1420 # 80026e90 <__func__.0+0x2d0>
    8001c424:	cf89                	beqz	a5,8001c43e <store_access_fault_2+0xf2>
    8001c426:	6418                	ld	a4,8(s0)
    8001c428:	479d                	li	a5,7
    8001c42a:	0000b597          	auipc	a1,0xb
    8001c42e:	a5658593          	addi	a1,a1,-1450 # 80026e80 <__func__.0+0x2c0>
    8001c432:	00f70663          	beq	a4,a5,8001c43e <store_access_fault_2+0xf2>
    8001c436:	0000b597          	auipc	a1,0xb
    8001c43a:	a5a58593          	addi	a1,a1,-1446 # 80026e90 <__func__.0+0x2d0>
    8001c43e:	0000b517          	auipc	a0,0xb
    8001c442:	a9250513          	addi	a0,a0,-1390 # 80026ed0 <__func__.0+0x310>
    8001c446:	2bf080ef          	jal	80024f04 <printf>
    8001c44a:	0002d797          	auipc	a5,0x2d
    8001c44e:	bc77c783          	lbu	a5,-1081(a5) # 80049011 <excpt+0x1>
    8001c452:	c789                	beqz	a5,8001c45c <store_access_fault_2+0x110>
    8001c454:	6418                	ld	a4,8(s0)
    8001c456:	479d                	li	a5,7
    8001c458:	00f70c63          	beq	a4,a5,8001c470 <store_access_fault_2+0x124>
    8001c45c:	0000b517          	auipc	a0,0xb
    8001c460:	a7c50513          	addi	a0,a0,-1412 # 80026ed8 <__func__.0+0x318>
    8001c464:	2a1080ef          	jal	80024f04 <printf>
    8001c468:	02900513          	li	a0,41
    8001c46c:	0a3070ef          	jal	80023d0e <putchar>
    8001c470:	4529                	li	a0,10
    8001c472:	09d070ef          	jal	80023d0e <putchar>
    8001c476:	0002d497          	auipc	s1,0x2d
    8001c47a:	b9b4c483          	lbu	s1,-1125(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c47e:	0000b597          	auipc	a1,0xb
    8001c482:	a1258593          	addi	a1,a1,-1518 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c486:	cc91                	beqz	s1,8001c4a2 <store_access_fault_2+0x156>
    8001c488:	6418                	ld	a4,8(s0)
    8001c48a:	479d                	li	a5,7
    TEST_END();
    8001c48c:	0000b597          	auipc	a1,0xb
    8001c490:	9f458593          	addi	a1,a1,-1548 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c494:	00f70763          	beq	a4,a5,8001c4a2 <store_access_fault_2+0x156>
    8001c498:	4481                	li	s1,0
    TEST_END();
    8001c49a:	0000b597          	auipc	a1,0xb
    8001c49e:	9f658593          	addi	a1,a1,-1546 # 80026e90 <__func__.0+0x2d0>
    8001c4a2:	0000b517          	auipc	a0,0xb
    8001c4a6:	a9650513          	addi	a0,a0,-1386 # 80026f38 <__func__.0+0x378>
    8001c4aa:	25b080ef          	jal	80024f04 <printf>
    8001c4ae:	4511                	li	a0,4
    8001c4b0:	f46e40ef          	jal	80000bf6 <goto_priv>
    8001c4b4:	ff9e40ef          	jal	800014ac <reset_state>
}
    8001c4b8:	60e2                	ld	ra,24(sp)
    8001c4ba:	6442                	ld	s0,16(sp)
    8001c4bc:	8526                	mv	a0,s1
    8001c4be:	64a2                	ld	s1,8(sp)
    8001c4c0:	6105                	addi	sp,sp,32
    8001c4c2:	8082                	ret

000000008001c4c4 <store_access_fault_3>:


bool store_access_fault_3(){
    8001c4c4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c4c6:	0000a597          	auipc	a1,0xa
    8001c4ca:	01258593          	addi	a1,a1,18 # 800264d8 <__func__.27>
    8001c4ce:	0000b517          	auipc	a0,0xb
    8001c4d2:	9d250513          	addi	a0,a0,-1582 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_3(){
    8001c4d6:	ec06                	sd	ra,24(sp)
    8001c4d8:	e822                	sd	s0,16(sp)
    8001c4da:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c4dc:	229080ef          	jal	80024f04 <printf>
    8001c4e0:	4529                	li	a0,10
    8001c4e2:	02d070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001c4e6:	4511                	li	a0,4
    8001c4e8:	f0ee40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c4ec:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c4f0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c4f4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c4f8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c4fc:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c500:	10000793          	li	a5,256
    8001c504:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c508:	20000793          	li	a5,512
    8001c50c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c510:	40000793          	li	a5,1024
    8001c514:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c518:	6785                	lui	a5,0x1
    8001c51a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c51e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c522:	4785                	li	a5,1
    8001c524:	07fe                	slli	a5,a5,0x1f
    8001c526:	4485                	li	s1,1
    8001c528:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c52c:	08100793          	li	a5,129
    8001c530:	07e2                	slli	a5,a5,0x18
    8001c532:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c536:	08000793          	li	a5,128
    8001c53a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c53e:	67a1                	lui	a5,0x8
    8001c540:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001c544:	8526                	mv	a0,s1
    8001c546:	eb0e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c54a:	0330000f          	fence	rw,rw
    8001c54e:	0002d417          	auipc	s0,0x2d
    8001c552:	ac240413          	addi	s0,s0,-1342 # 80049010 <excpt>
    8001c556:	0002d797          	auipc	a5,0x2d
    8001c55a:	ae07b923          	sd	zero,-1294(a5) # 80049048 <excpt+0x38>
    8001c55e:	00941023          	sh	s1,0(s0)
    8001c562:	0330000f          	fence	rw,rw
    8001c566:	02149793          	slli	a5,s1,0x21
    8001c56a:	40078793          	addi	a5,a5,1024
    8001c56e:	4701                	li	a4,0
    8001c570:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c574:	08200593          	li	a1,130
    8001c578:	00011617          	auipc	a2,0x11
    8001c57c:	0b860613          	addi	a2,a2,184 # 8002d630 <__func__.0+0x6a70>
    8001c580:	0000b517          	auipc	a0,0xb
    8001c584:	93850513          	addi	a0,a0,-1736 # 80026eb8 <__func__.0+0x2f8>
    8001c588:	17d080ef          	jal	80024f04 <printf>
    8001c58c:	0002d797          	auipc	a5,0x2d
    8001c590:	a857c783          	lbu	a5,-1403(a5) # 80049011 <excpt+0x1>
    8001c594:	0000b597          	auipc	a1,0xb
    8001c598:	8fc58593          	addi	a1,a1,-1796 # 80026e90 <__func__.0+0x2d0>
    8001c59c:	cf89                	beqz	a5,8001c5b6 <store_access_fault_3+0xf2>
    8001c59e:	6418                	ld	a4,8(s0)
    8001c5a0:	479d                	li	a5,7
    8001c5a2:	0000b597          	auipc	a1,0xb
    8001c5a6:	8de58593          	addi	a1,a1,-1826 # 80026e80 <__func__.0+0x2c0>
    8001c5aa:	00f70663          	beq	a4,a5,8001c5b6 <store_access_fault_3+0xf2>
    8001c5ae:	0000b597          	auipc	a1,0xb
    8001c5b2:	8e258593          	addi	a1,a1,-1822 # 80026e90 <__func__.0+0x2d0>
    8001c5b6:	0000b517          	auipc	a0,0xb
    8001c5ba:	91a50513          	addi	a0,a0,-1766 # 80026ed0 <__func__.0+0x310>
    8001c5be:	147080ef          	jal	80024f04 <printf>
    8001c5c2:	0002d797          	auipc	a5,0x2d
    8001c5c6:	a4f7c783          	lbu	a5,-1457(a5) # 80049011 <excpt+0x1>
    8001c5ca:	c789                	beqz	a5,8001c5d4 <store_access_fault_3+0x110>
    8001c5cc:	6418                	ld	a4,8(s0)
    8001c5ce:	479d                	li	a5,7
    8001c5d0:	00f70c63          	beq	a4,a5,8001c5e8 <store_access_fault_3+0x124>
    8001c5d4:	0000b517          	auipc	a0,0xb
    8001c5d8:	90450513          	addi	a0,a0,-1788 # 80026ed8 <__func__.0+0x318>
    8001c5dc:	129080ef          	jal	80024f04 <printf>
    8001c5e0:	02900513          	li	a0,41
    8001c5e4:	72a070ef          	jal	80023d0e <putchar>
    8001c5e8:	4529                	li	a0,10
    8001c5ea:	724070ef          	jal	80023d0e <putchar>
    8001c5ee:	0002d497          	auipc	s1,0x2d
    8001c5f2:	a234c483          	lbu	s1,-1501(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c5f6:	0000b597          	auipc	a1,0xb
    8001c5fa:	89a58593          	addi	a1,a1,-1894 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c5fe:	cc91                	beqz	s1,8001c61a <store_access_fault_3+0x156>
    8001c600:	6418                	ld	a4,8(s0)
    8001c602:	479d                	li	a5,7
    TEST_END();
    8001c604:	0000b597          	auipc	a1,0xb
    8001c608:	87c58593          	addi	a1,a1,-1924 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c60c:	00f70763          	beq	a4,a5,8001c61a <store_access_fault_3+0x156>
    8001c610:	4481                	li	s1,0
    TEST_END();
    8001c612:	0000b597          	auipc	a1,0xb
    8001c616:	87e58593          	addi	a1,a1,-1922 # 80026e90 <__func__.0+0x2d0>
    8001c61a:	0000b517          	auipc	a0,0xb
    8001c61e:	91e50513          	addi	a0,a0,-1762 # 80026f38 <__func__.0+0x378>
    8001c622:	0e3080ef          	jal	80024f04 <printf>
    8001c626:	4511                	li	a0,4
    8001c628:	dcee40ef          	jal	80000bf6 <goto_priv>
    8001c62c:	e81e40ef          	jal	800014ac <reset_state>
}
    8001c630:	60e2                	ld	ra,24(sp)
    8001c632:	6442                	ld	s0,16(sp)
    8001c634:	8526                	mv	a0,s1
    8001c636:	64a2                	ld	s1,8(sp)
    8001c638:	6105                	addi	sp,sp,32
    8001c63a:	8082                	ret

000000008001c63c <store_access_fault_4>:

bool store_access_fault_4(){
    8001c63c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c63e:	0000a597          	auipc	a1,0xa
    8001c642:	eb258593          	addi	a1,a1,-334 # 800264f0 <__func__.26>
    8001c646:	0000b517          	auipc	a0,0xb
    8001c64a:	85a50513          	addi	a0,a0,-1958 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_4(){
    8001c64e:	ec06                	sd	ra,24(sp)
    8001c650:	e822                	sd	s0,16(sp)
    8001c652:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c654:	0b1080ef          	jal	80024f04 <printf>
    8001c658:	4529                	li	a0,10
    8001c65a:	6b4070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001c65e:	4511                	li	a0,4
    8001c660:	d96e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c664:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c668:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c66c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c670:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c674:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c678:	10000793          	li	a5,256
    8001c67c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c680:	20000793          	li	a5,512
    8001c684:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c688:	40000793          	li	a5,1024
    8001c68c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c690:	6785                	lui	a5,0x1
    8001c692:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c696:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c69a:	4785                	li	a5,1
    8001c69c:	07fe                	slli	a5,a5,0x1f
    8001c69e:	4485                	li	s1,1
    8001c6a0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c6a4:	08100793          	li	a5,129
    8001c6a8:	07e2                	slli	a5,a5,0x18
    8001c6aa:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c6ae:	08000793          	li	a5,128
    8001c6b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c6b6:	67a1                	lui	a5,0x8
    8001c6b8:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c6bc:	4501                	li	a0,0
    8001c6be:	d38e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c6c2:	0330000f          	fence	rw,rw
    8001c6c6:	0002d417          	auipc	s0,0x2d
    8001c6ca:	94a40413          	addi	s0,s0,-1718 # 80049010 <excpt>
    8001c6ce:	0002d797          	auipc	a5,0x2d
    8001c6d2:	9607bd23          	sd	zero,-1670(a5) # 80049048 <excpt+0x38>
    8001c6d6:	00941023          	sh	s1,0(s0)
    8001c6da:	0330000f          	fence	rw,rw
    8001c6de:	02149793          	slli	a5,s1,0x21
    8001c6e2:	40078793          	addi	a5,a5,1024
    8001c6e6:	4701                	li	a4,0
    8001c6e8:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c6ec:	08200593          	li	a1,130
    8001c6f0:	00011617          	auipc	a2,0x11
    8001c6f4:	f7860613          	addi	a2,a2,-136 # 8002d668 <__func__.0+0x6aa8>
    8001c6f8:	0000a517          	auipc	a0,0xa
    8001c6fc:	7c050513          	addi	a0,a0,1984 # 80026eb8 <__func__.0+0x2f8>
    8001c700:	005080ef          	jal	80024f04 <printf>
    8001c704:	0002d797          	auipc	a5,0x2d
    8001c708:	90d7c783          	lbu	a5,-1779(a5) # 80049011 <excpt+0x1>
    8001c70c:	0000a597          	auipc	a1,0xa
    8001c710:	78458593          	addi	a1,a1,1924 # 80026e90 <__func__.0+0x2d0>
    8001c714:	cf89                	beqz	a5,8001c72e <store_access_fault_4+0xf2>
    8001c716:	6418                	ld	a4,8(s0)
    8001c718:	479d                	li	a5,7
    8001c71a:	0000a597          	auipc	a1,0xa
    8001c71e:	76658593          	addi	a1,a1,1894 # 80026e80 <__func__.0+0x2c0>
    8001c722:	00f70663          	beq	a4,a5,8001c72e <store_access_fault_4+0xf2>
    8001c726:	0000a597          	auipc	a1,0xa
    8001c72a:	76a58593          	addi	a1,a1,1898 # 80026e90 <__func__.0+0x2d0>
    8001c72e:	0000a517          	auipc	a0,0xa
    8001c732:	7a250513          	addi	a0,a0,1954 # 80026ed0 <__func__.0+0x310>
    8001c736:	7ce080ef          	jal	80024f04 <printf>
    8001c73a:	0002d797          	auipc	a5,0x2d
    8001c73e:	8d77c783          	lbu	a5,-1833(a5) # 80049011 <excpt+0x1>
    8001c742:	c789                	beqz	a5,8001c74c <store_access_fault_4+0x110>
    8001c744:	6418                	ld	a4,8(s0)
    8001c746:	479d                	li	a5,7
    8001c748:	00f70c63          	beq	a4,a5,8001c760 <store_access_fault_4+0x124>
    8001c74c:	0000a517          	auipc	a0,0xa
    8001c750:	78c50513          	addi	a0,a0,1932 # 80026ed8 <__func__.0+0x318>
    8001c754:	7b0080ef          	jal	80024f04 <printf>
    8001c758:	02900513          	li	a0,41
    8001c75c:	5b2070ef          	jal	80023d0e <putchar>
    8001c760:	4529                	li	a0,10
    8001c762:	5ac070ef          	jal	80023d0e <putchar>
    8001c766:	0002d497          	auipc	s1,0x2d
    8001c76a:	8ab4c483          	lbu	s1,-1877(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c76e:	0000a597          	auipc	a1,0xa
    8001c772:	72258593          	addi	a1,a1,1826 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c776:	cc91                	beqz	s1,8001c792 <store_access_fault_4+0x156>
    8001c778:	6418                	ld	a4,8(s0)
    8001c77a:	479d                	li	a5,7
    TEST_END();
    8001c77c:	0000a597          	auipc	a1,0xa
    8001c780:	70458593          	addi	a1,a1,1796 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001c784:	00f70763          	beq	a4,a5,8001c792 <store_access_fault_4+0x156>
    8001c788:	4481                	li	s1,0
    TEST_END();
    8001c78a:	0000a597          	auipc	a1,0xa
    8001c78e:	70658593          	addi	a1,a1,1798 # 80026e90 <__func__.0+0x2d0>
    8001c792:	0000a517          	auipc	a0,0xa
    8001c796:	7a650513          	addi	a0,a0,1958 # 80026f38 <__func__.0+0x378>
    8001c79a:	76a080ef          	jal	80024f04 <printf>
    8001c79e:	4511                	li	a0,4
    8001c7a0:	c56e40ef          	jal	80000bf6 <goto_priv>
    8001c7a4:	d09e40ef          	jal	800014ac <reset_state>
}
    8001c7a8:	60e2                	ld	ra,24(sp)
    8001c7aa:	6442                	ld	s0,16(sp)
    8001c7ac:	8526                	mv	a0,s1
    8001c7ae:	64a2                	ld	s1,8(sp)
    8001c7b0:	6105                	addi	sp,sp,32
    8001c7b2:	8082                	ret

000000008001c7b4 <store_access_fault_5>:

bool store_access_fault_5(){
    8001c7b4:	1141                	addi	sp,sp,-16

    TEST_START();
    8001c7b6:	0000a597          	auipc	a1,0xa
    8001c7ba:	d5258593          	addi	a1,a1,-686 # 80026508 <__func__.25>
    8001c7be:	0000a517          	auipc	a0,0xa
    8001c7c2:	6e250513          	addi	a0,a0,1762 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_5(){
    8001c7c6:	e406                	sd	ra,8(sp)
    8001c7c8:	e022                	sd	s0,0(sp)
    TEST_START();
    8001c7ca:	73a080ef          	jal	80024f04 <printf>
    8001c7ce:	4529                	li	a0,10
    8001c7d0:	53e070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001c7d4:	4511                	li	a0,4
    8001c7d6:	c20e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c7da:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c7de:	10000793          	li	a5,256
    8001c7e2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c7e6:	20000793          	li	a5,512
    8001c7ea:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c7ee:	40000793          	li	a5,1024
    8001c7f2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c7f6:	6785                	lui	a5,0x1
    8001c7f8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c7fc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c800:	4785                	li	a5,1
    8001c802:	07fe                	slli	a5,a5,0x1f
    8001c804:	4705                	li	a4,1
    8001c806:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c80a:	08100793          	li	a5,129
    8001c80e:	07e2                	slli	a5,a5,0x18
    8001c810:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c814:	67a1                	lui	a5,0x8
    8001c816:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c81a:	0330000f          	fence	rw,rw
    8001c81e:	0002c417          	auipc	s0,0x2c
    8001c822:	7f240413          	addi	s0,s0,2034 # 80049010 <excpt>
    8001c826:	0002d797          	auipc	a5,0x2d
    8001c82a:	8207b123          	sd	zero,-2014(a5) # 80049048 <excpt+0x38>
    8001c82e:	00e41023          	sh	a4,0(s0)
    8001c832:	0330000f          	fence	rw,rw
    8001c836:	02171793          	slli	a5,a4,0x21
    8001c83a:	40078793          	addi	a5,a5,1024
    8001c83e:	4701                	li	a4,0
    8001c840:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    printf("%d\n",excpt.triggered);
    8001c844:	0002c597          	auipc	a1,0x2c
    8001c848:	7cd5c583          	lbu	a1,1997(a1) # 80049011 <excpt+0x1>
    8001c84c:	0000b517          	auipc	a0,0xb
    8001c850:	19c50513          	addi	a0,a0,412 # 800279e8 <__func__.0+0xe28>
    8001c854:	6b0080ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001c858:	640c                	ld	a1,8(s0)
    8001c85a:	0000b517          	auipc	a0,0xb
    8001c85e:	18e50513          	addi	a0,a0,398 # 800279e8 <__func__.0+0xe28>
    8001c862:	6a2080ef          	jal	80024f04 <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c866:	08200593          	li	a1,130
    8001c86a:	00011617          	auipc	a2,0x11
    8001c86e:	e3660613          	addi	a2,a2,-458 # 8002d6a0 <__func__.0+0x6ae0>
    8001c872:	0000a517          	auipc	a0,0xa
    8001c876:	64650513          	addi	a0,a0,1606 # 80026eb8 <__func__.0+0x2f8>
    8001c87a:	68a080ef          	jal	80024f04 <printf>
    8001c87e:	0002c797          	auipc	a5,0x2c
    8001c882:	7937c783          	lbu	a5,1939(a5) # 80049011 <excpt+0x1>
    8001c886:	0000a597          	auipc	a1,0xa
    8001c88a:	5fa58593          	addi	a1,a1,1530 # 80026e80 <__func__.0+0x2c0>
    8001c88e:	c789                	beqz	a5,8001c898 <store_access_fault_5+0xe4>
    8001c890:	0000a597          	auipc	a1,0xa
    8001c894:	60058593          	addi	a1,a1,1536 # 80026e90 <__func__.0+0x2d0>
    8001c898:	0000a517          	auipc	a0,0xa
    8001c89c:	63850513          	addi	a0,a0,1592 # 80026ed0 <__func__.0+0x310>
    8001c8a0:	664080ef          	jal	80024f04 <printf>
    8001c8a4:	0002c797          	auipc	a5,0x2c
    8001c8a8:	76d7c783          	lbu	a5,1901(a5) # 80049011 <excpt+0x1>
    8001c8ac:	e7a1                	bnez	a5,8001c8f4 <store_access_fault_5+0x140>
    8001c8ae:	4529                	li	a0,10
    8001c8b0:	45e070ef          	jal	80023d0e <putchar>
    8001c8b4:	0002c797          	auipc	a5,0x2c
    8001c8b8:	75d7c783          	lbu	a5,1885(a5) # 80049011 <excpt+0x1>
    8001c8bc:	e795                	bnez	a5,8001c8e8 <store_access_fault_5+0x134>
    8001c8be:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001c8c0:	0000a597          	auipc	a1,0xa
    8001c8c4:	5c058593          	addi	a1,a1,1472 # 80026e80 <__func__.0+0x2c0>
    8001c8c8:	0000a517          	auipc	a0,0xa
    8001c8cc:	67050513          	addi	a0,a0,1648 # 80026f38 <__func__.0+0x378>
    8001c8d0:	634080ef          	jal	80024f04 <printf>
    8001c8d4:	4511                	li	a0,4
    8001c8d6:	b20e40ef          	jal	80000bf6 <goto_priv>
    8001c8da:	bd3e40ef          	jal	800014ac <reset_state>
}
    8001c8de:	60a2                	ld	ra,8(sp)
    8001c8e0:	8522                	mv	a0,s0
    8001c8e2:	6402                	ld	s0,0(sp)
    8001c8e4:	0141                	addi	sp,sp,16
    8001c8e6:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c8e8:	4401                	li	s0,0
    TEST_END();
    8001c8ea:	0000a597          	auipc	a1,0xa
    8001c8ee:	5a658593          	addi	a1,a1,1446 # 80026e90 <__func__.0+0x2d0>
    8001c8f2:	bfd9                	j	8001c8c8 <store_access_fault_5+0x114>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c8f4:	0000a517          	auipc	a0,0xa
    8001c8f8:	5e450513          	addi	a0,a0,1508 # 80026ed8 <__func__.0+0x318>
    8001c8fc:	608080ef          	jal	80024f04 <printf>
    8001c900:	02900513          	li	a0,41
    8001c904:	40a070ef          	jal	80023d0e <putchar>
    8001c908:	b75d                	j	8001c8ae <store_access_fault_5+0xfa>

000000008001c90a <store_access_fault_6>:


bool store_access_fault_6(){
    8001c90a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c90c:	0000a597          	auipc	a1,0xa
    8001c910:	c1458593          	addi	a1,a1,-1004 # 80026520 <__func__.24>
    8001c914:	0000a517          	auipc	a0,0xa
    8001c918:	58c50513          	addi	a0,a0,1420 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_6(){
    8001c91c:	ec06                	sd	ra,24(sp)
    8001c91e:	e822                	sd	s0,16(sp)
    8001c920:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c922:	5e2080ef          	jal	80024f04 <printf>
    8001c926:	4529                	li	a0,10
    8001c928:	3e6070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001c92c:	4511                	li	a0,4
    8001c92e:	ac8e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c932:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c936:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c93a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c93e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c942:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c946:	10000793          	li	a5,256
    8001c94a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c94e:	20000793          	li	a5,512
    8001c952:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c956:	40000793          	li	a5,1024
    8001c95a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c95e:	6785                	lui	a5,0x1
    8001c960:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c964:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c968:	4785                	li	a5,1
    8001c96a:	07fe                	slli	a5,a5,0x1f
    8001c96c:	4485                	li	s1,1
    8001c96e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c972:	08100793          	li	a5,129
    8001c976:	07e2                	slli	a5,a5,0x18
    8001c978:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c97c:	08000793          	li	a5,128
    8001c980:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c984:	67a1                	lui	a5,0x8
    8001c986:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c98a:	450d                	li	a0,3
    8001c98c:	a6ae40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c990:	0330000f          	fence	rw,rw
    8001c994:	0002c417          	auipc	s0,0x2c
    8001c998:	67c40413          	addi	s0,s0,1660 # 80049010 <excpt>
    8001c99c:	0002c797          	auipc	a5,0x2c
    8001c9a0:	6a07b623          	sd	zero,1708(a5) # 80049048 <excpt+0x38>
    8001c9a4:	00941023          	sh	s1,0(s0)
    8001c9a8:	0330000f          	fence	rw,rw
    8001c9ac:	02149793          	slli	a5,s1,0x21
    8001c9b0:	40078793          	addi	a5,a5,1024
    8001c9b4:	4701                	li	a4,0
    8001c9b6:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c9ba:	08200593          	li	a1,130
    8001c9be:	00011617          	auipc	a2,0x11
    8001c9c2:	d1a60613          	addi	a2,a2,-742 # 8002d6d8 <__func__.0+0x6b18>
    8001c9c6:	0000a517          	auipc	a0,0xa
    8001c9ca:	4f250513          	addi	a0,a0,1266 # 80026eb8 <__func__.0+0x2f8>
    8001c9ce:	536080ef          	jal	80024f04 <printf>
    8001c9d2:	0002c797          	auipc	a5,0x2c
    8001c9d6:	63f7c783          	lbu	a5,1599(a5) # 80049011 <excpt+0x1>
    8001c9da:	0000a597          	auipc	a1,0xa
    8001c9de:	4b658593          	addi	a1,a1,1206 # 80026e90 <__func__.0+0x2d0>
    8001c9e2:	cf89                	beqz	a5,8001c9fc <store_access_fault_6+0xf2>
    8001c9e4:	6418                	ld	a4,8(s0)
    8001c9e6:	479d                	li	a5,7
    8001c9e8:	0000a597          	auipc	a1,0xa
    8001c9ec:	49858593          	addi	a1,a1,1176 # 80026e80 <__func__.0+0x2c0>
    8001c9f0:	00f70663          	beq	a4,a5,8001c9fc <store_access_fault_6+0xf2>
    8001c9f4:	0000a597          	auipc	a1,0xa
    8001c9f8:	49c58593          	addi	a1,a1,1180 # 80026e90 <__func__.0+0x2d0>
    8001c9fc:	0000a517          	auipc	a0,0xa
    8001ca00:	4d450513          	addi	a0,a0,1236 # 80026ed0 <__func__.0+0x310>
    8001ca04:	500080ef          	jal	80024f04 <printf>
    8001ca08:	0002c797          	auipc	a5,0x2c
    8001ca0c:	6097c783          	lbu	a5,1545(a5) # 80049011 <excpt+0x1>
    8001ca10:	c789                	beqz	a5,8001ca1a <store_access_fault_6+0x110>
    8001ca12:	6418                	ld	a4,8(s0)
    8001ca14:	479d                	li	a5,7
    8001ca16:	00f70c63          	beq	a4,a5,8001ca2e <store_access_fault_6+0x124>
    8001ca1a:	0000a517          	auipc	a0,0xa
    8001ca1e:	4be50513          	addi	a0,a0,1214 # 80026ed8 <__func__.0+0x318>
    8001ca22:	4e2080ef          	jal	80024f04 <printf>
    8001ca26:	02900513          	li	a0,41
    8001ca2a:	2e4070ef          	jal	80023d0e <putchar>
    8001ca2e:	4529                	li	a0,10
    8001ca30:	2de070ef          	jal	80023d0e <putchar>
    8001ca34:	0002c497          	auipc	s1,0x2c
    8001ca38:	5dd4c483          	lbu	s1,1501(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ca3c:	0000a597          	auipc	a1,0xa
    8001ca40:	45458593          	addi	a1,a1,1108 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001ca44:	cc91                	beqz	s1,8001ca60 <store_access_fault_6+0x156>
    8001ca46:	6418                	ld	a4,8(s0)
    8001ca48:	479d                	li	a5,7
    TEST_END();
    8001ca4a:	0000a597          	auipc	a1,0xa
    8001ca4e:	43658593          	addi	a1,a1,1078 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001ca52:	00f70763          	beq	a4,a5,8001ca60 <store_access_fault_6+0x156>
    8001ca56:	4481                	li	s1,0
    TEST_END();
    8001ca58:	0000a597          	auipc	a1,0xa
    8001ca5c:	43858593          	addi	a1,a1,1080 # 80026e90 <__func__.0+0x2d0>
    8001ca60:	0000a517          	auipc	a0,0xa
    8001ca64:	4d850513          	addi	a0,a0,1240 # 80026f38 <__func__.0+0x378>
    8001ca68:	49c080ef          	jal	80024f04 <printf>
    8001ca6c:	4511                	li	a0,4
    8001ca6e:	988e40ef          	jal	80000bf6 <goto_priv>
    8001ca72:	a3be40ef          	jal	800014ac <reset_state>
}
    8001ca76:	60e2                	ld	ra,24(sp)
    8001ca78:	6442                	ld	s0,16(sp)
    8001ca7a:	8526                	mv	a0,s1
    8001ca7c:	64a2                	ld	s1,8(sp)
    8001ca7e:	6105                	addi	sp,sp,32
    8001ca80:	8082                	ret

000000008001ca82 <store_access_fault_7>:


bool store_access_fault_7(){
    8001ca82:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ca84:	0000a597          	auipc	a1,0xa
    8001ca88:	ab458593          	addi	a1,a1,-1356 # 80026538 <__func__.23>
    8001ca8c:	0000a517          	auipc	a0,0xa
    8001ca90:	41450513          	addi	a0,a0,1044 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_7(){
    8001ca94:	ec06                	sd	ra,24(sp)
    8001ca96:	e822                	sd	s0,16(sp)
    8001ca98:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ca9a:	46a080ef          	jal	80024f04 <printf>
    8001ca9e:	4529                	li	a0,10
    8001caa0:	26e070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001caa4:	4511                	li	a0,4
    8001caa6:	950e40ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001caaa:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001caae:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cab2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cab6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001caba:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cabe:	10000793          	li	a5,256
    8001cac2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cac6:	20000793          	li	a5,512
    8001caca:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cace:	40000793          	li	a5,1024
    8001cad2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cad6:	6785                	lui	a5,0x1
    8001cad8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cadc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cae0:	4785                	li	a5,1
    8001cae2:	07fe                	slli	a5,a5,0x1f
    8001cae4:	4485                	li	s1,1
    8001cae6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001caea:	08100793          	li	a5,129
    8001caee:	07e2                	slli	a5,a5,0x18
    8001caf0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001caf4:	08000793          	li	a5,128
    8001caf8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cafc:	67a1                	lui	a5,0x8
    8001cafe:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001cb02:	8526                	mv	a0,s1
    8001cb04:	8f2e40ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cb08:	0330000f          	fence	rw,rw
    8001cb0c:	0002c417          	auipc	s0,0x2c
    8001cb10:	50440413          	addi	s0,s0,1284 # 80049010 <excpt>
    8001cb14:	0002c797          	auipc	a5,0x2c
    8001cb18:	5207ba23          	sd	zero,1332(a5) # 80049048 <excpt+0x38>
    8001cb1c:	00941023          	sh	s1,0(s0)
    8001cb20:	0330000f          	fence	rw,rw
    8001cb24:	02149793          	slli	a5,s1,0x21
    8001cb28:	40078793          	addi	a5,a5,1024
    8001cb2c:	4701                	li	a4,0
    8001cb2e:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cb32:	08200593          	li	a1,130
    8001cb36:	00011617          	auipc	a2,0x11
    8001cb3a:	bda60613          	addi	a2,a2,-1062 # 8002d710 <__func__.0+0x6b50>
    8001cb3e:	0000a517          	auipc	a0,0xa
    8001cb42:	37a50513          	addi	a0,a0,890 # 80026eb8 <__func__.0+0x2f8>
    8001cb46:	3be080ef          	jal	80024f04 <printf>
    8001cb4a:	0002c797          	auipc	a5,0x2c
    8001cb4e:	4c77c783          	lbu	a5,1223(a5) # 80049011 <excpt+0x1>
    8001cb52:	0000a597          	auipc	a1,0xa
    8001cb56:	33e58593          	addi	a1,a1,830 # 80026e90 <__func__.0+0x2d0>
    8001cb5a:	cf89                	beqz	a5,8001cb74 <store_access_fault_7+0xf2>
    8001cb5c:	6418                	ld	a4,8(s0)
    8001cb5e:	479d                	li	a5,7
    8001cb60:	0000a597          	auipc	a1,0xa
    8001cb64:	32058593          	addi	a1,a1,800 # 80026e80 <__func__.0+0x2c0>
    8001cb68:	00f70663          	beq	a4,a5,8001cb74 <store_access_fault_7+0xf2>
    8001cb6c:	0000a597          	auipc	a1,0xa
    8001cb70:	32458593          	addi	a1,a1,804 # 80026e90 <__func__.0+0x2d0>
    8001cb74:	0000a517          	auipc	a0,0xa
    8001cb78:	35c50513          	addi	a0,a0,860 # 80026ed0 <__func__.0+0x310>
    8001cb7c:	388080ef          	jal	80024f04 <printf>
    8001cb80:	0002c797          	auipc	a5,0x2c
    8001cb84:	4917c783          	lbu	a5,1169(a5) # 80049011 <excpt+0x1>
    8001cb88:	c789                	beqz	a5,8001cb92 <store_access_fault_7+0x110>
    8001cb8a:	6418                	ld	a4,8(s0)
    8001cb8c:	479d                	li	a5,7
    8001cb8e:	00f70c63          	beq	a4,a5,8001cba6 <store_access_fault_7+0x124>
    8001cb92:	0000a517          	auipc	a0,0xa
    8001cb96:	34650513          	addi	a0,a0,838 # 80026ed8 <__func__.0+0x318>
    8001cb9a:	36a080ef          	jal	80024f04 <printf>
    8001cb9e:	02900513          	li	a0,41
    8001cba2:	16c070ef          	jal	80023d0e <putchar>
    8001cba6:	4529                	li	a0,10
    8001cba8:	166070ef          	jal	80023d0e <putchar>
    8001cbac:	0002c497          	auipc	s1,0x2c
    8001cbb0:	4654c483          	lbu	s1,1125(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001cbb4:	0000a597          	auipc	a1,0xa
    8001cbb8:	2dc58593          	addi	a1,a1,732 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cbbc:	cc91                	beqz	s1,8001cbd8 <store_access_fault_7+0x156>
    8001cbbe:	6418                	ld	a4,8(s0)
    8001cbc0:	479d                	li	a5,7
    TEST_END();
    8001cbc2:	0000a597          	auipc	a1,0xa
    8001cbc6:	2be58593          	addi	a1,a1,702 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cbca:	00f70763          	beq	a4,a5,8001cbd8 <store_access_fault_7+0x156>
    8001cbce:	4481                	li	s1,0
    TEST_END();
    8001cbd0:	0000a597          	auipc	a1,0xa
    8001cbd4:	2c058593          	addi	a1,a1,704 # 80026e90 <__func__.0+0x2d0>
    8001cbd8:	0000a517          	auipc	a0,0xa
    8001cbdc:	36050513          	addi	a0,a0,864 # 80026f38 <__func__.0+0x378>
    8001cbe0:	324080ef          	jal	80024f04 <printf>
    8001cbe4:	4511                	li	a0,4
    8001cbe6:	810e40ef          	jal	80000bf6 <goto_priv>
    8001cbea:	8c3e40ef          	jal	800014ac <reset_state>
}
    8001cbee:	60e2                	ld	ra,24(sp)
    8001cbf0:	6442                	ld	s0,16(sp)
    8001cbf2:	8526                	mv	a0,s1
    8001cbf4:	64a2                	ld	s1,8(sp)
    8001cbf6:	6105                	addi	sp,sp,32
    8001cbf8:	8082                	ret

000000008001cbfa <store_access_fault_8>:

bool store_access_fault_8(){
    8001cbfa:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cbfc:	0000a597          	auipc	a1,0xa
    8001cc00:	95458593          	addi	a1,a1,-1708 # 80026550 <__func__.22>
    8001cc04:	0000a517          	auipc	a0,0xa
    8001cc08:	29c50513          	addi	a0,a0,668 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_8(){
    8001cc0c:	ec06                	sd	ra,24(sp)
    8001cc0e:	e822                	sd	s0,16(sp)
    8001cc10:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cc12:	2f2080ef          	jal	80024f04 <printf>
    8001cc16:	4529                	li	a0,10
    8001cc18:	0f6070ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001cc1c:	4511                	li	a0,4
    8001cc1e:	fd9e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cc22:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cc26:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cc2a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cc2e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cc32:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cc36:	10000793          	li	a5,256
    8001cc3a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cc3e:	20000793          	li	a5,512
    8001cc42:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cc46:	40000793          	li	a5,1024
    8001cc4a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cc4e:	6785                	lui	a5,0x1
    8001cc50:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cc54:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cc58:	4785                	li	a5,1
    8001cc5a:	07fe                	slli	a5,a5,0x1f
    8001cc5c:	4485                	li	s1,1
    8001cc5e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cc62:	08100793          	li	a5,129
    8001cc66:	07e2                	slli	a5,a5,0x18
    8001cc68:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cc6c:	08000793          	li	a5,128
    8001cc70:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cc74:	67a1                	lui	a5,0x8
    8001cc76:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001cc7a:	4501                	li	a0,0
    8001cc7c:	f7be30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cc80:	0330000f          	fence	rw,rw
    8001cc84:	0002c417          	auipc	s0,0x2c
    8001cc88:	38c40413          	addi	s0,s0,908 # 80049010 <excpt>
    8001cc8c:	0002c797          	auipc	a5,0x2c
    8001cc90:	3a07be23          	sd	zero,956(a5) # 80049048 <excpt+0x38>
    8001cc94:	00941023          	sh	s1,0(s0)
    8001cc98:	0330000f          	fence	rw,rw
    8001cc9c:	02149793          	slli	a5,s1,0x21
    8001cca0:	40078793          	addi	a5,a5,1024
    8001cca4:	4701                	li	a4,0
    8001cca6:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001ccaa:	08200593          	li	a1,130
    8001ccae:	00011617          	auipc	a2,0x11
    8001ccb2:	a9a60613          	addi	a2,a2,-1382 # 8002d748 <__func__.0+0x6b88>
    8001ccb6:	0000a517          	auipc	a0,0xa
    8001ccba:	20250513          	addi	a0,a0,514 # 80026eb8 <__func__.0+0x2f8>
    8001ccbe:	246080ef          	jal	80024f04 <printf>
    8001ccc2:	0002c797          	auipc	a5,0x2c
    8001ccc6:	34f7c783          	lbu	a5,847(a5) # 80049011 <excpt+0x1>
    8001ccca:	0000a597          	auipc	a1,0xa
    8001ccce:	1c658593          	addi	a1,a1,454 # 80026e90 <__func__.0+0x2d0>
    8001ccd2:	cf89                	beqz	a5,8001ccec <store_access_fault_8+0xf2>
    8001ccd4:	6418                	ld	a4,8(s0)
    8001ccd6:	479d                	li	a5,7
    8001ccd8:	0000a597          	auipc	a1,0xa
    8001ccdc:	1a858593          	addi	a1,a1,424 # 80026e80 <__func__.0+0x2c0>
    8001cce0:	00f70663          	beq	a4,a5,8001ccec <store_access_fault_8+0xf2>
    8001cce4:	0000a597          	auipc	a1,0xa
    8001cce8:	1ac58593          	addi	a1,a1,428 # 80026e90 <__func__.0+0x2d0>
    8001ccec:	0000a517          	auipc	a0,0xa
    8001ccf0:	1e450513          	addi	a0,a0,484 # 80026ed0 <__func__.0+0x310>
    8001ccf4:	210080ef          	jal	80024f04 <printf>
    8001ccf8:	0002c797          	auipc	a5,0x2c
    8001ccfc:	3197c783          	lbu	a5,793(a5) # 80049011 <excpt+0x1>
    8001cd00:	c789                	beqz	a5,8001cd0a <store_access_fault_8+0x110>
    8001cd02:	6418                	ld	a4,8(s0)
    8001cd04:	479d                	li	a5,7
    8001cd06:	00f70c63          	beq	a4,a5,8001cd1e <store_access_fault_8+0x124>
    8001cd0a:	0000a517          	auipc	a0,0xa
    8001cd0e:	1ce50513          	addi	a0,a0,462 # 80026ed8 <__func__.0+0x318>
    8001cd12:	1f2080ef          	jal	80024f04 <printf>
    8001cd16:	02900513          	li	a0,41
    8001cd1a:	7f5060ef          	jal	80023d0e <putchar>
    8001cd1e:	4529                	li	a0,10
    8001cd20:	7ef060ef          	jal	80023d0e <putchar>
    8001cd24:	0002c497          	auipc	s1,0x2c
    8001cd28:	2ed4c483          	lbu	s1,749(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001cd2c:	0000a597          	auipc	a1,0xa
    8001cd30:	16458593          	addi	a1,a1,356 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cd34:	cc91                	beqz	s1,8001cd50 <store_access_fault_8+0x156>
    8001cd36:	6418                	ld	a4,8(s0)
    8001cd38:	479d                	li	a5,7
    TEST_END();
    8001cd3a:	0000a597          	auipc	a1,0xa
    8001cd3e:	14658593          	addi	a1,a1,326 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001cd42:	00f70763          	beq	a4,a5,8001cd50 <store_access_fault_8+0x156>
    8001cd46:	4481                	li	s1,0
    TEST_END();
    8001cd48:	0000a597          	auipc	a1,0xa
    8001cd4c:	14858593          	addi	a1,a1,328 # 80026e90 <__func__.0+0x2d0>
    8001cd50:	0000a517          	auipc	a0,0xa
    8001cd54:	1e850513          	addi	a0,a0,488 # 80026f38 <__func__.0+0x378>
    8001cd58:	1ac080ef          	jal	80024f04 <printf>
    8001cd5c:	4511                	li	a0,4
    8001cd5e:	e99e30ef          	jal	80000bf6 <goto_priv>
    8001cd62:	f4ae40ef          	jal	800014ac <reset_state>
}
    8001cd66:	60e2                	ld	ra,24(sp)
    8001cd68:	6442                	ld	s0,16(sp)
    8001cd6a:	8526                	mv	a0,s1
    8001cd6c:	64a2                	ld	s1,8(sp)
    8001cd6e:	6105                	addi	sp,sp,32
    8001cd70:	8082                	ret

000000008001cd72 <store_access_fault_9>:

bool store_access_fault_9(){
    8001cd72:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cd74:	00009597          	auipc	a1,0x9
    8001cd78:	7f458593          	addi	a1,a1,2036 # 80026568 <__func__.21>
    8001cd7c:	0000a517          	auipc	a0,0xa
    8001cd80:	12450513          	addi	a0,a0,292 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_9(){
    8001cd84:	ec06                	sd	ra,24(sp)
    8001cd86:	e822                	sd	s0,16(sp)
    8001cd88:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cd8a:	17a080ef          	jal	80024f04 <printf>
    8001cd8e:	4529                	li	a0,10
    8001cd90:	77f060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001cd94:	4511                	li	a0,4
    8001cd96:	e61e30ef          	jal	80000bf6 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cd9a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cd9e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cda2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cda6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cdaa:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cdae:	10000793          	li	a5,256
    8001cdb2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cdb6:	20000793          	li	a5,512
    8001cdba:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cdbe:	40000793          	li	a5,1024
    8001cdc2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cdc6:	6785                	lui	a5,0x1
    8001cdc8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cdcc:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cdd0:	4785                	li	a5,1
    8001cdd2:	07fe                	slli	a5,a5,0x1f
    8001cdd4:	4485                	li	s1,1
    8001cdd6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cdda:	08100793          	li	a5,129
    8001cdde:	07e2                	slli	a5,a5,0x18
    8001cde0:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cde4:	08000793          	li	a5,128
    8001cde8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cdec:	67a1                	lui	a5,0x8
    8001cdee:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001cdf2:	4501                	li	a0,0
    8001cdf4:	e03e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cdf8:	0330000f          	fence	rw,rw
    8001cdfc:	0002c417          	auipc	s0,0x2c
    8001ce00:	21440413          	addi	s0,s0,532 # 80049010 <excpt>
    8001ce04:	0002c797          	auipc	a5,0x2c
    8001ce08:	2407b223          	sd	zero,580(a5) # 80049048 <excpt+0x38>
    8001ce0c:	00941023          	sh	s1,0(s0)
    8001ce10:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001ce14:	37ab77b7          	lui	a5,0x37ab7
    8001ce18:	02349713          	slli	a4,s1,0x23
    8001ce1c:	078a                	slli	a5,a5,0x2
    8001ce1e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001ce22:	1761                	addi	a4,a4,-8
    8001ce24:	00f73023          	sd	a5,0(a4)
    
    sd(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001ce28:	08200593          	li	a1,130
    8001ce2c:	00011617          	auipc	a2,0x11
    8001ce30:	95460613          	addi	a2,a2,-1708 # 8002d780 <__func__.0+0x6bc0>
    8001ce34:	0000a517          	auipc	a0,0xa
    8001ce38:	08450513          	addi	a0,a0,132 # 80026eb8 <__func__.0+0x2f8>
    8001ce3c:	0c8080ef          	jal	80024f04 <printf>
    8001ce40:	0002c797          	auipc	a5,0x2c
    8001ce44:	1d17c783          	lbu	a5,465(a5) # 80049011 <excpt+0x1>
    8001ce48:	0000a597          	auipc	a1,0xa
    8001ce4c:	04858593          	addi	a1,a1,72 # 80026e90 <__func__.0+0x2d0>
    8001ce50:	cf89                	beqz	a5,8001ce6a <store_access_fault_9+0xf8>
    8001ce52:	6418                	ld	a4,8(s0)
    8001ce54:	479d                	li	a5,7
    8001ce56:	0000a597          	auipc	a1,0xa
    8001ce5a:	02a58593          	addi	a1,a1,42 # 80026e80 <__func__.0+0x2c0>
    8001ce5e:	00f70663          	beq	a4,a5,8001ce6a <store_access_fault_9+0xf8>
    8001ce62:	0000a597          	auipc	a1,0xa
    8001ce66:	02e58593          	addi	a1,a1,46 # 80026e90 <__func__.0+0x2d0>
    8001ce6a:	0000a517          	auipc	a0,0xa
    8001ce6e:	06650513          	addi	a0,a0,102 # 80026ed0 <__func__.0+0x310>
    8001ce72:	092080ef          	jal	80024f04 <printf>
    8001ce76:	0002c797          	auipc	a5,0x2c
    8001ce7a:	19b7c783          	lbu	a5,411(a5) # 80049011 <excpt+0x1>
    8001ce7e:	c789                	beqz	a5,8001ce88 <store_access_fault_9+0x116>
    8001ce80:	6418                	ld	a4,8(s0)
    8001ce82:	479d                	li	a5,7
    8001ce84:	00f70c63          	beq	a4,a5,8001ce9c <store_access_fault_9+0x12a>
    8001ce88:	0000a517          	auipc	a0,0xa
    8001ce8c:	05050513          	addi	a0,a0,80 # 80026ed8 <__func__.0+0x318>
    8001ce90:	074080ef          	jal	80024f04 <printf>
    8001ce94:	02900513          	li	a0,41
    8001ce98:	677060ef          	jal	80023d0e <putchar>
    8001ce9c:	4529                	li	a0,10
    8001ce9e:	671060ef          	jal	80023d0e <putchar>
    8001cea2:	0002c497          	auipc	s1,0x2c
    8001cea6:	16f4c483          	lbu	s1,367(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ceaa:	0000a597          	auipc	a1,0xa
    8001ceae:	fe658593          	addi	a1,a1,-26 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001ceb2:	cc91                	beqz	s1,8001cece <store_access_fault_9+0x15c>
    8001ceb4:	6418                	ld	a4,8(s0)
    8001ceb6:	479d                	li	a5,7
    TEST_END();
    8001ceb8:	0000a597          	auipc	a1,0xa
    8001cebc:	fc858593          	addi	a1,a1,-56 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001cec0:	00f70763          	beq	a4,a5,8001cece <store_access_fault_9+0x15c>
    8001cec4:	4481                	li	s1,0
    TEST_END();
    8001cec6:	0000a597          	auipc	a1,0xa
    8001ceca:	fca58593          	addi	a1,a1,-54 # 80026e90 <__func__.0+0x2d0>
    8001cece:	0000a517          	auipc	a0,0xa
    8001ced2:	06a50513          	addi	a0,a0,106 # 80026f38 <__func__.0+0x378>
    8001ced6:	02e080ef          	jal	80024f04 <printf>
    8001ceda:	4511                	li	a0,4
    8001cedc:	d1be30ef          	jal	80000bf6 <goto_priv>
    8001cee0:	dcce40ef          	jal	800014ac <reset_state>
}
    8001cee4:	60e2                	ld	ra,24(sp)
    8001cee6:	6442                	ld	s0,16(sp)
    8001cee8:	8526                	mv	a0,s1
    8001ceea:	64a2                	ld	s1,8(sp)
    8001ceec:	6105                	addi	sp,sp,32
    8001ceee:	8082                	ret

000000008001cef0 <store_access_fault_10>:


bool store_access_fault_10(){
    8001cef0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cef2:	00009597          	auipc	a1,0x9
    8001cef6:	68e58593          	addi	a1,a1,1678 # 80026580 <__func__.20>
    8001cefa:	0000a517          	auipc	a0,0xa
    8001cefe:	fa650513          	addi	a0,a0,-90 # 80026ea0 <__func__.0+0x2e0>
bool store_access_fault_10(){
    8001cf02:	ec06                	sd	ra,24(sp)
    8001cf04:	e822                	sd	s0,16(sp)
    8001cf06:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cf08:	7fd070ef          	jal	80024f04 <printf>
    8001cf0c:	4529                	li	a0,10
    8001cf0e:	601060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001cf12:	4511                	li	a0,4
    8001cf14:	ce3e30ef          	jal	80000bf6 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cf18:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cf1c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cf20:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cf24:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cf28:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cf2c:	4785                	li	a5,1
    8001cf2e:	07fe                	slli	a5,a5,0x1f
    8001cf30:	4485                	li	s1,1
    8001cf32:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cf36:	08000793          	li	a5,128
    8001cf3a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001cf3e:	450d                	li	a0,3
    8001cf40:	cb7e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cf44:	0330000f          	fence	rw,rw
    8001cf48:	0002c417          	auipc	s0,0x2c
    8001cf4c:	0c840413          	addi	s0,s0,200 # 80049010 <excpt>
    8001cf50:	0002c797          	auipc	a5,0x2c
    8001cf54:	0e07bc23          	sd	zero,248(a5) # 80049048 <excpt+0x38>
    8001cf58:	00941023          	sh	s1,0(s0)
    8001cf5c:	0330000f          	fence	rw,rw
    8001cf60:	37ab77b7          	lui	a5,0x37ab7
    8001cf64:	078a                	slli	a5,a5,0x2
    8001cf66:	00803737          	lui	a4,0x803
    8001cf6a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001cf6e:	072a                	slli	a4,a4,0xa
    8001cf70:	00f73023          	sd	a5,0(a4) # 803000 <STACK_SIZE+0x703000>
    
    sd(0x80300000UL << 2,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001cf74:	08200593          	li	a1,130
    8001cf78:	00011617          	auipc	a2,0x11
    8001cf7c:	87860613          	addi	a2,a2,-1928 # 8002d7f0 <__func__.0+0x6c30>
    8001cf80:	0000a517          	auipc	a0,0xa
    8001cf84:	f3850513          	addi	a0,a0,-200 # 80026eb8 <__func__.0+0x2f8>
    8001cf88:	77d070ef          	jal	80024f04 <printf>
    8001cf8c:	0002c797          	auipc	a5,0x2c
    8001cf90:	0857c783          	lbu	a5,133(a5) # 80049011 <excpt+0x1>
    8001cf94:	0000a597          	auipc	a1,0xa
    8001cf98:	efc58593          	addi	a1,a1,-260 # 80026e90 <__func__.0+0x2d0>
    8001cf9c:	cf89                	beqz	a5,8001cfb6 <store_access_fault_10+0xc6>
    8001cf9e:	6418                	ld	a4,8(s0)
    8001cfa0:	479d                	li	a5,7
    8001cfa2:	0000a597          	auipc	a1,0xa
    8001cfa6:	ede58593          	addi	a1,a1,-290 # 80026e80 <__func__.0+0x2c0>
    8001cfaa:	00f70663          	beq	a4,a5,8001cfb6 <store_access_fault_10+0xc6>
    8001cfae:	0000a597          	auipc	a1,0xa
    8001cfb2:	ee258593          	addi	a1,a1,-286 # 80026e90 <__func__.0+0x2d0>
    8001cfb6:	0000a517          	auipc	a0,0xa
    8001cfba:	f1a50513          	addi	a0,a0,-230 # 80026ed0 <__func__.0+0x310>
    8001cfbe:	747070ef          	jal	80024f04 <printf>
    8001cfc2:	0002c797          	auipc	a5,0x2c
    8001cfc6:	04f7c783          	lbu	a5,79(a5) # 80049011 <excpt+0x1>
    8001cfca:	c789                	beqz	a5,8001cfd4 <store_access_fault_10+0xe4>
    8001cfcc:	6418                	ld	a4,8(s0)
    8001cfce:	479d                	li	a5,7
    8001cfd0:	00f70c63          	beq	a4,a5,8001cfe8 <store_access_fault_10+0xf8>
    8001cfd4:	0000a517          	auipc	a0,0xa
    8001cfd8:	f0450513          	addi	a0,a0,-252 # 80026ed8 <__func__.0+0x318>
    8001cfdc:	729070ef          	jal	80024f04 <printf>
    8001cfe0:	02900513          	li	a0,41
    8001cfe4:	52b060ef          	jal	80023d0e <putchar>
    8001cfe8:	4529                	li	a0,10
    8001cfea:	525060ef          	jal	80023d0e <putchar>
    8001cfee:	0002c497          	auipc	s1,0x2c
    8001cff2:	0234c483          	lbu	s1,35(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001cff6:	0000a597          	auipc	a1,0xa
    8001cffa:	e9a58593          	addi	a1,a1,-358 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001cffe:	cc91                	beqz	s1,8001d01a <store_access_fault_10+0x12a>
    8001d000:	6418                	ld	a4,8(s0)
    8001d002:	479d                	li	a5,7
    TEST_END();
    8001d004:	0000a597          	auipc	a1,0xa
    8001d008:	e7c58593          	addi	a1,a1,-388 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001d00c:	00f70763          	beq	a4,a5,8001d01a <store_access_fault_10+0x12a>
    8001d010:	4481                	li	s1,0
    TEST_END();
    8001d012:	0000a597          	auipc	a1,0xa
    8001d016:	e7e58593          	addi	a1,a1,-386 # 80026e90 <__func__.0+0x2d0>
    8001d01a:	0000a517          	auipc	a0,0xa
    8001d01e:	f1e50513          	addi	a0,a0,-226 # 80026f38 <__func__.0+0x378>
    8001d022:	6e3070ef          	jal	80024f04 <printf>
    8001d026:	4511                	li	a0,4
    8001d028:	bcfe30ef          	jal	80000bf6 <goto_priv>
    8001d02c:	c80e40ef          	jal	800014ac <reset_state>
}
    8001d030:	60e2                	ld	ra,24(sp)
    8001d032:	6442                	ld	s0,16(sp)
    8001d034:	8526                	mv	a0,s1
    8001d036:	64a2                	ld	s1,8(sp)
    8001d038:	6105                	addi	sp,sp,32
    8001d03a:	8082                	ret

000000008001d03c <amo_access_fault_1>:




bool amo_access_fault_1(){
    8001d03c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d03e:	00009597          	auipc	a1,0x9
    8001d042:	55a58593          	addi	a1,a1,1370 # 80026598 <__func__.19>
    8001d046:	0000a517          	auipc	a0,0xa
    8001d04a:	e5a50513          	addi	a0,a0,-422 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_1(){
    8001d04e:	ec06                	sd	ra,24(sp)
    8001d050:	e822                	sd	s0,16(sp)
    8001d052:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d054:	6b1070ef          	jal	80024f04 <printf>
    8001d058:	4529                	li	a0,10
    8001d05a:	4b5060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001d05e:	4511                	li	a0,4
    8001d060:	b97e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d064:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d068:	10000793          	li	a5,256
    8001d06c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d070:	20000793          	li	a5,512
    8001d074:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d078:	40000793          	li	a5,1024
    8001d07c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d080:	6785                	lui	a5,0x1
    8001d082:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d086:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d08a:	4785                	li	a5,1
    8001d08c:	07fe                	slli	a5,a5,0x1f
    8001d08e:	4705                	li	a4,1
    8001d090:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d094:	08100793          	li	a5,129
    8001d098:	07e2                	slli	a5,a5,0x18
    8001d09a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d09e:	67a1                	lui	a5,0x8
    8001d0a0:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001d0a4:	0330000f          	fence	rw,rw
    8001d0a8:	0002c417          	auipc	s0,0x2c
    8001d0ac:	f6840413          	addi	s0,s0,-152 # 80049010 <excpt>
    8001d0b0:	0002c797          	auipc	a5,0x2c
    8001d0b4:	f807bc23          	sd	zero,-104(a5) # 80049048 <excpt+0x38>
    8001d0b8:	00e41023          	sh	a4,0(s0)
    8001d0bc:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8001d0c0:	37ab77b7          	lui	a5,0x37ab7
    8001d0c4:	078a                	slli	a5,a5,0x2
    8001d0c6:	1706                	slli	a4,a4,0x21
    8001d0c8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d0cc:	40070713          	addi	a4,a4,1024
    8001d0d0:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001d0d4:	0002c597          	auipc	a1,0x2c
    8001d0d8:	f3d5c583          	lbu	a1,-195(a1) # 80049011 <excpt+0x1>
    8001d0dc:	0000b517          	auipc	a0,0xb
    8001d0e0:	90c50513          	addi	a0,a0,-1780 # 800279e8 <__func__.0+0xe28>
    8001d0e4:	621070ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001d0e8:	640c                	ld	a1,8(s0)
    8001d0ea:	0000b517          	auipc	a0,0xb
    8001d0ee:	8fe50513          	addi	a0,a0,-1794 # 800279e8 <__func__.0+0xe28>
    8001d0f2:	613070ef          	jal	80024f04 <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d0f6:	08200593          	li	a1,130
    8001d0fa:	00010617          	auipc	a2,0x10
    8001d0fe:	75660613          	addi	a2,a2,1878 # 8002d850 <__func__.0+0x6c90>
    8001d102:	0000a517          	auipc	a0,0xa
    8001d106:	db650513          	addi	a0,a0,-586 # 80026eb8 <__func__.0+0x2f8>
    8001d10a:	5fb070ef          	jal	80024f04 <printf>
    8001d10e:	0002c797          	auipc	a5,0x2c
    8001d112:	f037c783          	lbu	a5,-253(a5) # 80049011 <excpt+0x1>
    8001d116:	0000a597          	auipc	a1,0xa
    8001d11a:	d7a58593          	addi	a1,a1,-646 # 80026e90 <__func__.0+0x2d0>
    8001d11e:	cf89                	beqz	a5,8001d138 <amo_access_fault_1+0xfc>
    8001d120:	6418                	ld	a4,8(s0)
    8001d122:	479d                	li	a5,7
    8001d124:	0000a597          	auipc	a1,0xa
    8001d128:	d5c58593          	addi	a1,a1,-676 # 80026e80 <__func__.0+0x2c0>
    8001d12c:	00f70663          	beq	a4,a5,8001d138 <amo_access_fault_1+0xfc>
    8001d130:	0000a597          	auipc	a1,0xa
    8001d134:	d6058593          	addi	a1,a1,-672 # 80026e90 <__func__.0+0x2d0>
    8001d138:	0000a517          	auipc	a0,0xa
    8001d13c:	d9850513          	addi	a0,a0,-616 # 80026ed0 <__func__.0+0x310>
    8001d140:	5c5070ef          	jal	80024f04 <printf>
    8001d144:	0002c797          	auipc	a5,0x2c
    8001d148:	ecd7c783          	lbu	a5,-307(a5) # 80049011 <excpt+0x1>
    8001d14c:	c789                	beqz	a5,8001d156 <amo_access_fault_1+0x11a>
    8001d14e:	6418                	ld	a4,8(s0)
    8001d150:	479d                	li	a5,7
    8001d152:	00f70c63          	beq	a4,a5,8001d16a <amo_access_fault_1+0x12e>
    8001d156:	0000a517          	auipc	a0,0xa
    8001d15a:	d8250513          	addi	a0,a0,-638 # 80026ed8 <__func__.0+0x318>
    8001d15e:	5a7070ef          	jal	80024f04 <printf>
    8001d162:	02900513          	li	a0,41
    8001d166:	3a9060ef          	jal	80023d0e <putchar>
    8001d16a:	4529                	li	a0,10
    8001d16c:	3a3060ef          	jal	80023d0e <putchar>
    8001d170:	0002c497          	auipc	s1,0x2c
    8001d174:	ea14c483          	lbu	s1,-351(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d178:	0000a597          	auipc	a1,0xa
    8001d17c:	d1858593          	addi	a1,a1,-744 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d180:	cc91                	beqz	s1,8001d19c <amo_access_fault_1+0x160>
    8001d182:	6418                	ld	a4,8(s0)
    8001d184:	479d                	li	a5,7
    TEST_END();
    8001d186:	0000a597          	auipc	a1,0xa
    8001d18a:	cfa58593          	addi	a1,a1,-774 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d18e:	00f70763          	beq	a4,a5,8001d19c <amo_access_fault_1+0x160>
    8001d192:	4481                	li	s1,0
    TEST_END();
    8001d194:	0000a597          	auipc	a1,0xa
    8001d198:	cfc58593          	addi	a1,a1,-772 # 80026e90 <__func__.0+0x2d0>
    8001d19c:	0000a517          	auipc	a0,0xa
    8001d1a0:	d9c50513          	addi	a0,a0,-612 # 80026f38 <__func__.0+0x378>
    8001d1a4:	561070ef          	jal	80024f04 <printf>
    8001d1a8:	4511                	li	a0,4
    8001d1aa:	a4de30ef          	jal	80000bf6 <goto_priv>
    8001d1ae:	afee40ef          	jal	800014ac <reset_state>
}
    8001d1b2:	60e2                	ld	ra,24(sp)
    8001d1b4:	6442                	ld	s0,16(sp)
    8001d1b6:	8526                	mv	a0,s1
    8001d1b8:	64a2                	ld	s1,8(sp)
    8001d1ba:	6105                	addi	sp,sp,32
    8001d1bc:	8082                	ret

000000008001d1be <amo_access_fault_2>:

bool amo_access_fault_2(){
    8001d1be:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d1c0:	00009597          	auipc	a1,0x9
    8001d1c4:	3f058593          	addi	a1,a1,1008 # 800265b0 <__func__.18>
    8001d1c8:	0000a517          	auipc	a0,0xa
    8001d1cc:	cd850513          	addi	a0,a0,-808 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_2(){
    8001d1d0:	ec06                	sd	ra,24(sp)
    8001d1d2:	e822                	sd	s0,16(sp)
    8001d1d4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d1d6:	52f070ef          	jal	80024f04 <printf>
    8001d1da:	4529                	li	a0,10
    8001d1dc:	333060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001d1e0:	4511                	li	a0,4
    8001d1e2:	a15e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d1e6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d1ea:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d1ee:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d1f2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d1f6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d1fa:	10000793          	li	a5,256
    8001d1fe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d202:	20000793          	li	a5,512
    8001d206:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d20a:	40000793          	li	a5,1024
    8001d20e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d212:	6785                	lui	a5,0x1
    8001d214:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d218:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d21c:	4785                	li	a5,1
    8001d21e:	07fe                	slli	a5,a5,0x1f
    8001d220:	4485                	li	s1,1
    8001d222:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d226:	08100793          	li	a5,129
    8001d22a:	07e2                	slli	a5,a5,0x18
    8001d22c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d230:	08000793          	li	a5,128
    8001d234:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d238:	67a1                	lui	a5,0x8
    8001d23a:	3a07a073          	csrs	pmpcfg0,a5


    goto_priv(PRIV_HS);
    8001d23e:	450d                	li	a0,3
    8001d240:	9b7e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d244:	0330000f          	fence	rw,rw
    8001d248:	0002c417          	auipc	s0,0x2c
    8001d24c:	dc840413          	addi	s0,s0,-568 # 80049010 <excpt>
    8001d250:	0002c797          	auipc	a5,0x2c
    8001d254:	de07bc23          	sd	zero,-520(a5) # 80049048 <excpt+0x38>
    8001d258:	00941023          	sh	s1,0(s0)
    8001d25c:	0330000f          	fence	rw,rw
    8001d260:	37ab77b7          	lui	a5,0x37ab7
    8001d264:	02149713          	slli	a4,s1,0x21
    8001d268:	078a                	slli	a5,a5,0x2
    8001d26a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d26e:	40070713          	addi	a4,a4,1024
    8001d272:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d276:	08200593          	li	a1,130
    8001d27a:	00010617          	auipc	a2,0x10
    8001d27e:	61660613          	addi	a2,a2,1558 # 8002d890 <__func__.0+0x6cd0>
    8001d282:	0000a517          	auipc	a0,0xa
    8001d286:	c3650513          	addi	a0,a0,-970 # 80026eb8 <__func__.0+0x2f8>
    8001d28a:	47b070ef          	jal	80024f04 <printf>
    8001d28e:	0002c797          	auipc	a5,0x2c
    8001d292:	d837c783          	lbu	a5,-637(a5) # 80049011 <excpt+0x1>
    8001d296:	0000a597          	auipc	a1,0xa
    8001d29a:	bfa58593          	addi	a1,a1,-1030 # 80026e90 <__func__.0+0x2d0>
    8001d29e:	cf89                	beqz	a5,8001d2b8 <amo_access_fault_2+0xfa>
    8001d2a0:	6418                	ld	a4,8(s0)
    8001d2a2:	479d                	li	a5,7
    8001d2a4:	0000a597          	auipc	a1,0xa
    8001d2a8:	bdc58593          	addi	a1,a1,-1060 # 80026e80 <__func__.0+0x2c0>
    8001d2ac:	00f70663          	beq	a4,a5,8001d2b8 <amo_access_fault_2+0xfa>
    8001d2b0:	0000a597          	auipc	a1,0xa
    8001d2b4:	be058593          	addi	a1,a1,-1056 # 80026e90 <__func__.0+0x2d0>
    8001d2b8:	0000a517          	auipc	a0,0xa
    8001d2bc:	c1850513          	addi	a0,a0,-1000 # 80026ed0 <__func__.0+0x310>
    8001d2c0:	445070ef          	jal	80024f04 <printf>
    8001d2c4:	0002c797          	auipc	a5,0x2c
    8001d2c8:	d4d7c783          	lbu	a5,-691(a5) # 80049011 <excpt+0x1>
    8001d2cc:	c789                	beqz	a5,8001d2d6 <amo_access_fault_2+0x118>
    8001d2ce:	6418                	ld	a4,8(s0)
    8001d2d0:	479d                	li	a5,7
    8001d2d2:	00f70c63          	beq	a4,a5,8001d2ea <amo_access_fault_2+0x12c>
    8001d2d6:	0000a517          	auipc	a0,0xa
    8001d2da:	c0250513          	addi	a0,a0,-1022 # 80026ed8 <__func__.0+0x318>
    8001d2de:	427070ef          	jal	80024f04 <printf>
    8001d2e2:	02900513          	li	a0,41
    8001d2e6:	229060ef          	jal	80023d0e <putchar>
    8001d2ea:	4529                	li	a0,10
    8001d2ec:	223060ef          	jal	80023d0e <putchar>
    8001d2f0:	0002c497          	auipc	s1,0x2c
    8001d2f4:	d214c483          	lbu	s1,-735(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d2f8:	0000a597          	auipc	a1,0xa
    8001d2fc:	b9858593          	addi	a1,a1,-1128 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d300:	cc91                	beqz	s1,8001d31c <amo_access_fault_2+0x15e>
    8001d302:	6418                	ld	a4,8(s0)
    8001d304:	479d                	li	a5,7
    TEST_END();
    8001d306:	0000a597          	auipc	a1,0xa
    8001d30a:	b7a58593          	addi	a1,a1,-1158 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d30e:	00f70763          	beq	a4,a5,8001d31c <amo_access_fault_2+0x15e>
    8001d312:	4481                	li	s1,0
    TEST_END();
    8001d314:	0000a597          	auipc	a1,0xa
    8001d318:	b7c58593          	addi	a1,a1,-1156 # 80026e90 <__func__.0+0x2d0>
    8001d31c:	0000a517          	auipc	a0,0xa
    8001d320:	c1c50513          	addi	a0,a0,-996 # 80026f38 <__func__.0+0x378>
    8001d324:	3e1070ef          	jal	80024f04 <printf>
    8001d328:	4511                	li	a0,4
    8001d32a:	8cde30ef          	jal	80000bf6 <goto_priv>
    8001d32e:	97ee40ef          	jal	800014ac <reset_state>
}
    8001d332:	60e2                	ld	ra,24(sp)
    8001d334:	6442                	ld	s0,16(sp)
    8001d336:	8526                	mv	a0,s1
    8001d338:	64a2                	ld	s1,8(sp)
    8001d33a:	6105                	addi	sp,sp,32
    8001d33c:	8082                	ret

000000008001d33e <amo_access_fault_3>:


bool amo_access_fault_3(){
    8001d33e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d340:	00009597          	auipc	a1,0x9
    8001d344:	28858593          	addi	a1,a1,648 # 800265c8 <__func__.17>
    8001d348:	0000a517          	auipc	a0,0xa
    8001d34c:	b5850513          	addi	a0,a0,-1192 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_3(){
    8001d350:	ec06                	sd	ra,24(sp)
    8001d352:	e822                	sd	s0,16(sp)
    8001d354:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d356:	3af070ef          	jal	80024f04 <printf>
    8001d35a:	4529                	li	a0,10
    8001d35c:	1b3060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001d360:	4511                	li	a0,4
    8001d362:	895e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d366:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d36a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d36e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d372:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d376:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d37a:	10000793          	li	a5,256
    8001d37e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d382:	20000793          	li	a5,512
    8001d386:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d38a:	40000793          	li	a5,1024
    8001d38e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d392:	6785                	lui	a5,0x1
    8001d394:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d398:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d39c:	4785                	li	a5,1
    8001d39e:	07fe                	slli	a5,a5,0x1f
    8001d3a0:	4485                	li	s1,1
    8001d3a2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d3a6:	08100793          	li	a5,129
    8001d3aa:	07e2                	slli	a5,a5,0x18
    8001d3ac:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d3b0:	08000793          	li	a5,128
    8001d3b4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d3b8:	67a1                	lui	a5,0x8
    8001d3ba:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001d3be:	8526                	mv	a0,s1
    8001d3c0:	837e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d3c4:	0330000f          	fence	rw,rw
    8001d3c8:	0002c417          	auipc	s0,0x2c
    8001d3cc:	c4840413          	addi	s0,s0,-952 # 80049010 <excpt>
    8001d3d0:	0002c797          	auipc	a5,0x2c
    8001d3d4:	c607bc23          	sd	zero,-904(a5) # 80049048 <excpt+0x38>
    8001d3d8:	00941023          	sh	s1,0(s0)
    8001d3dc:	0330000f          	fence	rw,rw
    8001d3e0:	37ab77b7          	lui	a5,0x37ab7
    8001d3e4:	02149713          	slli	a4,s1,0x21
    8001d3e8:	078a                	slli	a5,a5,0x2
    8001d3ea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d3ee:	40070713          	addi	a4,a4,1024
    8001d3f2:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d3f6:	08200593          	li	a1,130
    8001d3fa:	00010617          	auipc	a2,0x10
    8001d3fe:	4d660613          	addi	a2,a2,1238 # 8002d8d0 <__func__.0+0x6d10>
    8001d402:	0000a517          	auipc	a0,0xa
    8001d406:	ab650513          	addi	a0,a0,-1354 # 80026eb8 <__func__.0+0x2f8>
    8001d40a:	2fb070ef          	jal	80024f04 <printf>
    8001d40e:	0002c797          	auipc	a5,0x2c
    8001d412:	c037c783          	lbu	a5,-1021(a5) # 80049011 <excpt+0x1>
    8001d416:	0000a597          	auipc	a1,0xa
    8001d41a:	a7a58593          	addi	a1,a1,-1414 # 80026e90 <__func__.0+0x2d0>
    8001d41e:	cf89                	beqz	a5,8001d438 <amo_access_fault_3+0xfa>
    8001d420:	6418                	ld	a4,8(s0)
    8001d422:	479d                	li	a5,7
    8001d424:	0000a597          	auipc	a1,0xa
    8001d428:	a5c58593          	addi	a1,a1,-1444 # 80026e80 <__func__.0+0x2c0>
    8001d42c:	00f70663          	beq	a4,a5,8001d438 <amo_access_fault_3+0xfa>
    8001d430:	0000a597          	auipc	a1,0xa
    8001d434:	a6058593          	addi	a1,a1,-1440 # 80026e90 <__func__.0+0x2d0>
    8001d438:	0000a517          	auipc	a0,0xa
    8001d43c:	a9850513          	addi	a0,a0,-1384 # 80026ed0 <__func__.0+0x310>
    8001d440:	2c5070ef          	jal	80024f04 <printf>
    8001d444:	0002c797          	auipc	a5,0x2c
    8001d448:	bcd7c783          	lbu	a5,-1075(a5) # 80049011 <excpt+0x1>
    8001d44c:	c789                	beqz	a5,8001d456 <amo_access_fault_3+0x118>
    8001d44e:	6418                	ld	a4,8(s0)
    8001d450:	479d                	li	a5,7
    8001d452:	00f70c63          	beq	a4,a5,8001d46a <amo_access_fault_3+0x12c>
    8001d456:	0000a517          	auipc	a0,0xa
    8001d45a:	a8250513          	addi	a0,a0,-1406 # 80026ed8 <__func__.0+0x318>
    8001d45e:	2a7070ef          	jal	80024f04 <printf>
    8001d462:	02900513          	li	a0,41
    8001d466:	0a9060ef          	jal	80023d0e <putchar>
    8001d46a:	4529                	li	a0,10
    8001d46c:	0a3060ef          	jal	80023d0e <putchar>
    8001d470:	0002c497          	auipc	s1,0x2c
    8001d474:	ba14c483          	lbu	s1,-1119(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d478:	0000a597          	auipc	a1,0xa
    8001d47c:	a1858593          	addi	a1,a1,-1512 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d480:	cc91                	beqz	s1,8001d49c <amo_access_fault_3+0x15e>
    8001d482:	6418                	ld	a4,8(s0)
    8001d484:	479d                	li	a5,7
    TEST_END();
    8001d486:	0000a597          	auipc	a1,0xa
    8001d48a:	9fa58593          	addi	a1,a1,-1542 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d48e:	00f70763          	beq	a4,a5,8001d49c <amo_access_fault_3+0x15e>
    8001d492:	4481                	li	s1,0
    TEST_END();
    8001d494:	0000a597          	auipc	a1,0xa
    8001d498:	9fc58593          	addi	a1,a1,-1540 # 80026e90 <__func__.0+0x2d0>
    8001d49c:	0000a517          	auipc	a0,0xa
    8001d4a0:	a9c50513          	addi	a0,a0,-1380 # 80026f38 <__func__.0+0x378>
    8001d4a4:	261070ef          	jal	80024f04 <printf>
    8001d4a8:	4511                	li	a0,4
    8001d4aa:	f4ce30ef          	jal	80000bf6 <goto_priv>
    8001d4ae:	fffe30ef          	jal	800014ac <reset_state>
}
    8001d4b2:	60e2                	ld	ra,24(sp)
    8001d4b4:	6442                	ld	s0,16(sp)
    8001d4b6:	8526                	mv	a0,s1
    8001d4b8:	64a2                	ld	s1,8(sp)
    8001d4ba:	6105                	addi	sp,sp,32
    8001d4bc:	8082                	ret

000000008001d4be <amo_access_fault_4>:

bool amo_access_fault_4(){
    8001d4be:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d4c0:	00009597          	auipc	a1,0x9
    8001d4c4:	12058593          	addi	a1,a1,288 # 800265e0 <__func__.16>
    8001d4c8:	0000a517          	auipc	a0,0xa
    8001d4cc:	9d850513          	addi	a0,a0,-1576 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_4(){
    8001d4d0:	ec06                	sd	ra,24(sp)
    8001d4d2:	e822                	sd	s0,16(sp)
    8001d4d4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d4d6:	22f070ef          	jal	80024f04 <printf>
    8001d4da:	4529                	li	a0,10
    8001d4dc:	033060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001d4e0:	4511                	li	a0,4
    8001d4e2:	f14e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d4e6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d4ea:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d4ee:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d4f2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d4f6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d4fa:	10000793          	li	a5,256
    8001d4fe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d502:	20000793          	li	a5,512
    8001d506:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d50a:	40000793          	li	a5,1024
    8001d50e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d512:	6785                	lui	a5,0x1
    8001d514:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d518:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d51c:	4785                	li	a5,1
    8001d51e:	07fe                	slli	a5,a5,0x1f
    8001d520:	4485                	li	s1,1
    8001d522:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d526:	08100793          	li	a5,129
    8001d52a:	07e2                	slli	a5,a5,0x18
    8001d52c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d530:	08000793          	li	a5,128
    8001d534:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d538:	67a1                	lui	a5,0x8
    8001d53a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d53e:	4501                	li	a0,0
    8001d540:	eb6e30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d544:	0330000f          	fence	rw,rw
    8001d548:	0002c417          	auipc	s0,0x2c
    8001d54c:	ac840413          	addi	s0,s0,-1336 # 80049010 <excpt>
    8001d550:	0002c797          	auipc	a5,0x2c
    8001d554:	ae07bc23          	sd	zero,-1288(a5) # 80049048 <excpt+0x38>
    8001d558:	00941023          	sh	s1,0(s0)
    8001d55c:	0330000f          	fence	rw,rw
    8001d560:	37ab77b7          	lui	a5,0x37ab7
    8001d564:	02149713          	slli	a4,s1,0x21
    8001d568:	078a                	slli	a5,a5,0x2
    8001d56a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d56e:	40070713          	addi	a4,a4,1024
    8001d572:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d576:	08200593          	li	a1,130
    8001d57a:	00010617          	auipc	a2,0x10
    8001d57e:	39660613          	addi	a2,a2,918 # 8002d910 <__func__.0+0x6d50>
    8001d582:	0000a517          	auipc	a0,0xa
    8001d586:	93650513          	addi	a0,a0,-1738 # 80026eb8 <__func__.0+0x2f8>
    8001d58a:	17b070ef          	jal	80024f04 <printf>
    8001d58e:	0002c797          	auipc	a5,0x2c
    8001d592:	a837c783          	lbu	a5,-1405(a5) # 80049011 <excpt+0x1>
    8001d596:	0000a597          	auipc	a1,0xa
    8001d59a:	8fa58593          	addi	a1,a1,-1798 # 80026e90 <__func__.0+0x2d0>
    8001d59e:	cf89                	beqz	a5,8001d5b8 <amo_access_fault_4+0xfa>
    8001d5a0:	6418                	ld	a4,8(s0)
    8001d5a2:	479d                	li	a5,7
    8001d5a4:	0000a597          	auipc	a1,0xa
    8001d5a8:	8dc58593          	addi	a1,a1,-1828 # 80026e80 <__func__.0+0x2c0>
    8001d5ac:	00f70663          	beq	a4,a5,8001d5b8 <amo_access_fault_4+0xfa>
    8001d5b0:	0000a597          	auipc	a1,0xa
    8001d5b4:	8e058593          	addi	a1,a1,-1824 # 80026e90 <__func__.0+0x2d0>
    8001d5b8:	0000a517          	auipc	a0,0xa
    8001d5bc:	91850513          	addi	a0,a0,-1768 # 80026ed0 <__func__.0+0x310>
    8001d5c0:	145070ef          	jal	80024f04 <printf>
    8001d5c4:	0002c797          	auipc	a5,0x2c
    8001d5c8:	a4d7c783          	lbu	a5,-1459(a5) # 80049011 <excpt+0x1>
    8001d5cc:	c789                	beqz	a5,8001d5d6 <amo_access_fault_4+0x118>
    8001d5ce:	6418                	ld	a4,8(s0)
    8001d5d0:	479d                	li	a5,7
    8001d5d2:	00f70c63          	beq	a4,a5,8001d5ea <amo_access_fault_4+0x12c>
    8001d5d6:	0000a517          	auipc	a0,0xa
    8001d5da:	90250513          	addi	a0,a0,-1790 # 80026ed8 <__func__.0+0x318>
    8001d5de:	127070ef          	jal	80024f04 <printf>
    8001d5e2:	02900513          	li	a0,41
    8001d5e6:	728060ef          	jal	80023d0e <putchar>
    8001d5ea:	4529                	li	a0,10
    8001d5ec:	722060ef          	jal	80023d0e <putchar>
    8001d5f0:	0002c497          	auipc	s1,0x2c
    8001d5f4:	a214c483          	lbu	s1,-1503(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d5f8:	0000a597          	auipc	a1,0xa
    8001d5fc:	89858593          	addi	a1,a1,-1896 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d600:	cc91                	beqz	s1,8001d61c <amo_access_fault_4+0x15e>
    8001d602:	6418                	ld	a4,8(s0)
    8001d604:	479d                	li	a5,7
    TEST_END();
    8001d606:	0000a597          	auipc	a1,0xa
    8001d60a:	87a58593          	addi	a1,a1,-1926 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001d60e:	00f70763          	beq	a4,a5,8001d61c <amo_access_fault_4+0x15e>
    8001d612:	4481                	li	s1,0
    TEST_END();
    8001d614:	0000a597          	auipc	a1,0xa
    8001d618:	87c58593          	addi	a1,a1,-1924 # 80026e90 <__func__.0+0x2d0>
    8001d61c:	0000a517          	auipc	a0,0xa
    8001d620:	91c50513          	addi	a0,a0,-1764 # 80026f38 <__func__.0+0x378>
    8001d624:	0e1070ef          	jal	80024f04 <printf>
    8001d628:	4511                	li	a0,4
    8001d62a:	dcce30ef          	jal	80000bf6 <goto_priv>
    8001d62e:	e7fe30ef          	jal	800014ac <reset_state>
}
    8001d632:	60e2                	ld	ra,24(sp)
    8001d634:	6442                	ld	s0,16(sp)
    8001d636:	8526                	mv	a0,s1
    8001d638:	64a2                	ld	s1,8(sp)
    8001d63a:	6105                	addi	sp,sp,32
    8001d63c:	8082                	ret

000000008001d63e <amo_access_fault_5>:

bool amo_access_fault_5(){
    8001d63e:	1141                	addi	sp,sp,-16

    TEST_START();
    8001d640:	00009597          	auipc	a1,0x9
    8001d644:	fb858593          	addi	a1,a1,-72 # 800265f8 <__func__.15>
    8001d648:	0000a517          	auipc	a0,0xa
    8001d64c:	85850513          	addi	a0,a0,-1960 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_5(){
    8001d650:	e406                	sd	ra,8(sp)
    8001d652:	e022                	sd	s0,0(sp)
    TEST_START();
    8001d654:	0b1070ef          	jal	80024f04 <printf>
    8001d658:	4529                	li	a0,10
    8001d65a:	6b4060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001d65e:	4511                	li	a0,4
    8001d660:	d96e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d664:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d668:	10000793          	li	a5,256
    8001d66c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d670:	20000793          	li	a5,512
    8001d674:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d678:	40000793          	li	a5,1024
    8001d67c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d680:	6785                	lui	a5,0x1
    8001d682:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d686:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d68a:	4785                	li	a5,1
    8001d68c:	07fe                	slli	a5,a5,0x1f
    8001d68e:	4705                	li	a4,1
    8001d690:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d694:	08100793          	li	a5,129
    8001d698:	07e2                	slli	a5,a5,0x18
    8001d69a:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d69e:	67a1                	lui	a5,0x8
    8001d6a0:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001d6a4:	0330000f          	fence	rw,rw
    8001d6a8:	0002c417          	auipc	s0,0x2c
    8001d6ac:	96840413          	addi	s0,s0,-1688 # 80049010 <excpt>
    8001d6b0:	0002c797          	auipc	a5,0x2c
    8001d6b4:	9807bc23          	sd	zero,-1640(a5) # 80049048 <excpt+0x38>
    8001d6b8:	00e41023          	sh	a4,0(s0)
    8001d6bc:	0330000f          	fence	rw,rw
    8001d6c0:	37ab77b7          	lui	a5,0x37ab7
    8001d6c4:	078a                	slli	a5,a5,0x2
    8001d6c6:	1706                	slli	a4,a4,0x21
    8001d6c8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d6cc:	40070713          	addi	a4,a4,1024
    8001d6d0:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001d6d4:	0002c597          	auipc	a1,0x2c
    8001d6d8:	93d5c583          	lbu	a1,-1731(a1) # 80049011 <excpt+0x1>
    8001d6dc:	0000a517          	auipc	a0,0xa
    8001d6e0:	30c50513          	addi	a0,a0,780 # 800279e8 <__func__.0+0xe28>
    8001d6e4:	021070ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001d6e8:	640c                	ld	a1,8(s0)
    8001d6ea:	0000a517          	auipc	a0,0xa
    8001d6ee:	2fe50513          	addi	a0,a0,766 # 800279e8 <__func__.0+0xe28>
    8001d6f2:	013070ef          	jal	80024f04 <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001d6f6:	08200593          	li	a1,130
    8001d6fa:	00010617          	auipc	a2,0x10
    8001d6fe:	25660613          	addi	a2,a2,598 # 8002d950 <__func__.0+0x6d90>
    8001d702:	00009517          	auipc	a0,0x9
    8001d706:	7b650513          	addi	a0,a0,1974 # 80026eb8 <__func__.0+0x2f8>
    8001d70a:	7fa070ef          	jal	80024f04 <printf>
    8001d70e:	0002c797          	auipc	a5,0x2c
    8001d712:	9037c783          	lbu	a5,-1789(a5) # 80049011 <excpt+0x1>
    8001d716:	00009597          	auipc	a1,0x9
    8001d71a:	76a58593          	addi	a1,a1,1898 # 80026e80 <__func__.0+0x2c0>
    8001d71e:	c789                	beqz	a5,8001d728 <amo_access_fault_5+0xea>
    8001d720:	00009597          	auipc	a1,0x9
    8001d724:	77058593          	addi	a1,a1,1904 # 80026e90 <__func__.0+0x2d0>
    8001d728:	00009517          	auipc	a0,0x9
    8001d72c:	7a850513          	addi	a0,a0,1960 # 80026ed0 <__func__.0+0x310>
    8001d730:	7d4070ef          	jal	80024f04 <printf>
    8001d734:	0002c797          	auipc	a5,0x2c
    8001d738:	8dd7c783          	lbu	a5,-1827(a5) # 80049011 <excpt+0x1>
    8001d73c:	e7a1                	bnez	a5,8001d784 <amo_access_fault_5+0x146>
    8001d73e:	4529                	li	a0,10
    8001d740:	5ce060ef          	jal	80023d0e <putchar>
    8001d744:	0002c797          	auipc	a5,0x2c
    8001d748:	8cd7c783          	lbu	a5,-1843(a5) # 80049011 <excpt+0x1>
    8001d74c:	e795                	bnez	a5,8001d778 <amo_access_fault_5+0x13a>
    8001d74e:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001d750:	00009597          	auipc	a1,0x9
    8001d754:	73058593          	addi	a1,a1,1840 # 80026e80 <__func__.0+0x2c0>
    8001d758:	00009517          	auipc	a0,0x9
    8001d75c:	7e050513          	addi	a0,a0,2016 # 80026f38 <__func__.0+0x378>
    8001d760:	7a4070ef          	jal	80024f04 <printf>
    8001d764:	4511                	li	a0,4
    8001d766:	c90e30ef          	jal	80000bf6 <goto_priv>
    8001d76a:	d43e30ef          	jal	800014ac <reset_state>
}
    8001d76e:	60a2                	ld	ra,8(sp)
    8001d770:	8522                	mv	a0,s0
    8001d772:	6402                	ld	s0,0(sp)
    8001d774:	0141                	addi	sp,sp,16
    8001d776:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001d778:	4401                	li	s0,0
    TEST_END();
    8001d77a:	00009597          	auipc	a1,0x9
    8001d77e:	71658593          	addi	a1,a1,1814 # 80026e90 <__func__.0+0x2d0>
    8001d782:	bfd9                	j	8001d758 <amo_access_fault_5+0x11a>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001d784:	00009517          	auipc	a0,0x9
    8001d788:	75450513          	addi	a0,a0,1876 # 80026ed8 <__func__.0+0x318>
    8001d78c:	778070ef          	jal	80024f04 <printf>
    8001d790:	02900513          	li	a0,41
    8001d794:	57a060ef          	jal	80023d0e <putchar>
    8001d798:	b75d                	j	8001d73e <amo_access_fault_5+0x100>

000000008001d79a <amo_access_fault_6>:


bool amo_access_fault_6(){
    8001d79a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d79c:	00009597          	auipc	a1,0x9
    8001d7a0:	e7458593          	addi	a1,a1,-396 # 80026610 <__func__.14>
    8001d7a4:	00009517          	auipc	a0,0x9
    8001d7a8:	6fc50513          	addi	a0,a0,1788 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_6(){
    8001d7ac:	ec06                	sd	ra,24(sp)
    8001d7ae:	e822                	sd	s0,16(sp)
    8001d7b0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d7b2:	752070ef          	jal	80024f04 <printf>
    8001d7b6:	4529                	li	a0,10
    8001d7b8:	556060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001d7bc:	4511                	li	a0,4
    8001d7be:	c38e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d7c2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d7c6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d7ca:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d7ce:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d7d2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d7d6:	10000793          	li	a5,256
    8001d7da:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d7de:	20000793          	li	a5,512
    8001d7e2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d7e6:	40000793          	li	a5,1024
    8001d7ea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d7ee:	6785                	lui	a5,0x1
    8001d7f0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d7f4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d7f8:	4785                	li	a5,1
    8001d7fa:	07fe                	slli	a5,a5,0x1f
    8001d7fc:	4485                	li	s1,1
    8001d7fe:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d802:	08100793          	li	a5,129
    8001d806:	07e2                	slli	a5,a5,0x18
    8001d808:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d80c:	08000793          	li	a5,128
    8001d810:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d814:	67a1                	lui	a5,0x8
    8001d816:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001d81a:	450d                	li	a0,3
    8001d81c:	bdae30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d820:	0330000f          	fence	rw,rw
    8001d824:	0002b417          	auipc	s0,0x2b
    8001d828:	7ec40413          	addi	s0,s0,2028 # 80049010 <excpt>
    8001d82c:	0002c797          	auipc	a5,0x2c
    8001d830:	8007be23          	sd	zero,-2020(a5) # 80049048 <excpt+0x38>
    8001d834:	00941023          	sh	s1,0(s0)
    8001d838:	0330000f          	fence	rw,rw
    8001d83c:	37ab77b7          	lui	a5,0x37ab7
    8001d840:	02149713          	slli	a4,s1,0x21
    8001d844:	078a                	slli	a5,a5,0x2
    8001d846:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d84a:	40070713          	addi	a4,a4,1024
    8001d84e:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001d852:	08200593          	li	a1,130
    8001d856:	00010617          	auipc	a2,0x10
    8001d85a:	13a60613          	addi	a2,a2,314 # 8002d990 <__func__.0+0x6dd0>
    8001d85e:	00009517          	auipc	a0,0x9
    8001d862:	65a50513          	addi	a0,a0,1626 # 80026eb8 <__func__.0+0x2f8>
    8001d866:	69e070ef          	jal	80024f04 <printf>
    8001d86a:	0002b797          	auipc	a5,0x2b
    8001d86e:	7a77c783          	lbu	a5,1959(a5) # 80049011 <excpt+0x1>
    8001d872:	00009597          	auipc	a1,0x9
    8001d876:	61e58593          	addi	a1,a1,1566 # 80026e90 <__func__.0+0x2d0>
    8001d87a:	cf89                	beqz	a5,8001d894 <amo_access_fault_6+0xfa>
    8001d87c:	6418                	ld	a4,8(s0)
    8001d87e:	479d                	li	a5,7
    8001d880:	00009597          	auipc	a1,0x9
    8001d884:	60058593          	addi	a1,a1,1536 # 80026e80 <__func__.0+0x2c0>
    8001d888:	00f70663          	beq	a4,a5,8001d894 <amo_access_fault_6+0xfa>
    8001d88c:	00009597          	auipc	a1,0x9
    8001d890:	60458593          	addi	a1,a1,1540 # 80026e90 <__func__.0+0x2d0>
    8001d894:	00009517          	auipc	a0,0x9
    8001d898:	63c50513          	addi	a0,a0,1596 # 80026ed0 <__func__.0+0x310>
    8001d89c:	668070ef          	jal	80024f04 <printf>
    8001d8a0:	0002b797          	auipc	a5,0x2b
    8001d8a4:	7717c783          	lbu	a5,1905(a5) # 80049011 <excpt+0x1>
    8001d8a8:	c789                	beqz	a5,8001d8b2 <amo_access_fault_6+0x118>
    8001d8aa:	6418                	ld	a4,8(s0)
    8001d8ac:	479d                	li	a5,7
    8001d8ae:	00f70c63          	beq	a4,a5,8001d8c6 <amo_access_fault_6+0x12c>
    8001d8b2:	00009517          	auipc	a0,0x9
    8001d8b6:	62650513          	addi	a0,a0,1574 # 80026ed8 <__func__.0+0x318>
    8001d8ba:	64a070ef          	jal	80024f04 <printf>
    8001d8be:	02900513          	li	a0,41
    8001d8c2:	44c060ef          	jal	80023d0e <putchar>
    8001d8c6:	4529                	li	a0,10
    8001d8c8:	446060ef          	jal	80023d0e <putchar>
    8001d8cc:	0002b497          	auipc	s1,0x2b
    8001d8d0:	7454c483          	lbu	s1,1861(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001d8d4:	00009597          	auipc	a1,0x9
    8001d8d8:	5bc58593          	addi	a1,a1,1468 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001d8dc:	cc91                	beqz	s1,8001d8f8 <amo_access_fault_6+0x15e>
    8001d8de:	6418                	ld	a4,8(s0)
    8001d8e0:	479d                	li	a5,7
    TEST_END();
    8001d8e2:	00009597          	auipc	a1,0x9
    8001d8e6:	59e58593          	addi	a1,a1,1438 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001d8ea:	00f70763          	beq	a4,a5,8001d8f8 <amo_access_fault_6+0x15e>
    8001d8ee:	4481                	li	s1,0
    TEST_END();
    8001d8f0:	00009597          	auipc	a1,0x9
    8001d8f4:	5a058593          	addi	a1,a1,1440 # 80026e90 <__func__.0+0x2d0>
    8001d8f8:	00009517          	auipc	a0,0x9
    8001d8fc:	64050513          	addi	a0,a0,1600 # 80026f38 <__func__.0+0x378>
    8001d900:	604070ef          	jal	80024f04 <printf>
    8001d904:	4511                	li	a0,4
    8001d906:	af0e30ef          	jal	80000bf6 <goto_priv>
    8001d90a:	ba3e30ef          	jal	800014ac <reset_state>
}
    8001d90e:	60e2                	ld	ra,24(sp)
    8001d910:	6442                	ld	s0,16(sp)
    8001d912:	8526                	mv	a0,s1
    8001d914:	64a2                	ld	s1,8(sp)
    8001d916:	6105                	addi	sp,sp,32
    8001d918:	8082                	ret

000000008001d91a <amo_access_fault_7>:


bool amo_access_fault_7(){
    8001d91a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d91c:	00009597          	auipc	a1,0x9
    8001d920:	d0c58593          	addi	a1,a1,-756 # 80026628 <__func__.13>
    8001d924:	00009517          	auipc	a0,0x9
    8001d928:	57c50513          	addi	a0,a0,1404 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_7(){
    8001d92c:	ec06                	sd	ra,24(sp)
    8001d92e:	e822                	sd	s0,16(sp)
    8001d930:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d932:	5d2070ef          	jal	80024f04 <printf>
    8001d936:	4529                	li	a0,10
    8001d938:	3d6060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001d93c:	4511                	li	a0,4
    8001d93e:	ab8e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d942:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d946:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d94a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d94e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d952:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d956:	10000793          	li	a5,256
    8001d95a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d95e:	20000793          	li	a5,512
    8001d962:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d966:	40000793          	li	a5,1024
    8001d96a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d96e:	6785                	lui	a5,0x1
    8001d970:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d974:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d978:	4785                	li	a5,1
    8001d97a:	07fe                	slli	a5,a5,0x1f
    8001d97c:	4485                	li	s1,1
    8001d97e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d982:	08100793          	li	a5,129
    8001d986:	07e2                	slli	a5,a5,0x18
    8001d988:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d98c:	08000793          	li	a5,128
    8001d990:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d994:	67a1                	lui	a5,0x8
    8001d996:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001d99a:	8526                	mv	a0,s1
    8001d99c:	a5ae30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d9a0:	0330000f          	fence	rw,rw
    8001d9a4:	0002b417          	auipc	s0,0x2b
    8001d9a8:	66c40413          	addi	s0,s0,1644 # 80049010 <excpt>
    8001d9ac:	0002b797          	auipc	a5,0x2b
    8001d9b0:	6807be23          	sd	zero,1692(a5) # 80049048 <excpt+0x38>
    8001d9b4:	00941023          	sh	s1,0(s0)
    8001d9b8:	0330000f          	fence	rw,rw
    8001d9bc:	37ab77b7          	lui	a5,0x37ab7
    8001d9c0:	02149713          	slli	a4,s1,0x21
    8001d9c4:	078a                	slli	a5,a5,0x2
    8001d9c6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001d9ca:	40070713          	addi	a4,a4,1024
    8001d9ce:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001d9d2:	08200593          	li	a1,130
    8001d9d6:	00010617          	auipc	a2,0x10
    8001d9da:	ffa60613          	addi	a2,a2,-6 # 8002d9d0 <__func__.0+0x6e10>
    8001d9de:	00009517          	auipc	a0,0x9
    8001d9e2:	4da50513          	addi	a0,a0,1242 # 80026eb8 <__func__.0+0x2f8>
    8001d9e6:	51e070ef          	jal	80024f04 <printf>
    8001d9ea:	0002b797          	auipc	a5,0x2b
    8001d9ee:	6277c783          	lbu	a5,1575(a5) # 80049011 <excpt+0x1>
    8001d9f2:	00009597          	auipc	a1,0x9
    8001d9f6:	49e58593          	addi	a1,a1,1182 # 80026e90 <__func__.0+0x2d0>
    8001d9fa:	cf89                	beqz	a5,8001da14 <amo_access_fault_7+0xfa>
    8001d9fc:	6418                	ld	a4,8(s0)
    8001d9fe:	479d                	li	a5,7
    8001da00:	00009597          	auipc	a1,0x9
    8001da04:	48058593          	addi	a1,a1,1152 # 80026e80 <__func__.0+0x2c0>
    8001da08:	00f70663          	beq	a4,a5,8001da14 <amo_access_fault_7+0xfa>
    8001da0c:	00009597          	auipc	a1,0x9
    8001da10:	48458593          	addi	a1,a1,1156 # 80026e90 <__func__.0+0x2d0>
    8001da14:	00009517          	auipc	a0,0x9
    8001da18:	4bc50513          	addi	a0,a0,1212 # 80026ed0 <__func__.0+0x310>
    8001da1c:	4e8070ef          	jal	80024f04 <printf>
    8001da20:	0002b797          	auipc	a5,0x2b
    8001da24:	5f17c783          	lbu	a5,1521(a5) # 80049011 <excpt+0x1>
    8001da28:	c789                	beqz	a5,8001da32 <amo_access_fault_7+0x118>
    8001da2a:	6418                	ld	a4,8(s0)
    8001da2c:	479d                	li	a5,7
    8001da2e:	00f70c63          	beq	a4,a5,8001da46 <amo_access_fault_7+0x12c>
    8001da32:	00009517          	auipc	a0,0x9
    8001da36:	4a650513          	addi	a0,a0,1190 # 80026ed8 <__func__.0+0x318>
    8001da3a:	4ca070ef          	jal	80024f04 <printf>
    8001da3e:	02900513          	li	a0,41
    8001da42:	2cc060ef          	jal	80023d0e <putchar>
    8001da46:	4529                	li	a0,10
    8001da48:	2c6060ef          	jal	80023d0e <putchar>
    8001da4c:	0002b497          	auipc	s1,0x2b
    8001da50:	5c54c483          	lbu	s1,1477(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001da54:	00009597          	auipc	a1,0x9
    8001da58:	43c58593          	addi	a1,a1,1084 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001da5c:	cc91                	beqz	s1,8001da78 <amo_access_fault_7+0x15e>
    8001da5e:	6418                	ld	a4,8(s0)
    8001da60:	479d                	li	a5,7
    TEST_END();
    8001da62:	00009597          	auipc	a1,0x9
    8001da66:	41e58593          	addi	a1,a1,1054 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001da6a:	00f70763          	beq	a4,a5,8001da78 <amo_access_fault_7+0x15e>
    8001da6e:	4481                	li	s1,0
    TEST_END();
    8001da70:	00009597          	auipc	a1,0x9
    8001da74:	42058593          	addi	a1,a1,1056 # 80026e90 <__func__.0+0x2d0>
    8001da78:	00009517          	auipc	a0,0x9
    8001da7c:	4c050513          	addi	a0,a0,1216 # 80026f38 <__func__.0+0x378>
    8001da80:	484070ef          	jal	80024f04 <printf>
    8001da84:	4511                	li	a0,4
    8001da86:	970e30ef          	jal	80000bf6 <goto_priv>
    8001da8a:	a23e30ef          	jal	800014ac <reset_state>
}
    8001da8e:	60e2                	ld	ra,24(sp)
    8001da90:	6442                	ld	s0,16(sp)
    8001da92:	8526                	mv	a0,s1
    8001da94:	64a2                	ld	s1,8(sp)
    8001da96:	6105                	addi	sp,sp,32
    8001da98:	8082                	ret

000000008001da9a <amo_access_fault_8>:

bool amo_access_fault_8(){
    8001da9a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001da9c:	00009597          	auipc	a1,0x9
    8001daa0:	ba458593          	addi	a1,a1,-1116 # 80026640 <__func__.12>
    8001daa4:	00009517          	auipc	a0,0x9
    8001daa8:	3fc50513          	addi	a0,a0,1020 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_8(){
    8001daac:	ec06                	sd	ra,24(sp)
    8001daae:	e822                	sd	s0,16(sp)
    8001dab0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dab2:	452070ef          	jal	80024f04 <printf>
    8001dab6:	4529                	li	a0,10
    8001dab8:	256060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001dabc:	4511                	li	a0,4
    8001dabe:	938e30ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001dac2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001dac6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001daca:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001dace:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001dad2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001dad6:	10000793          	li	a5,256
    8001dada:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001dade:	20000793          	li	a5,512
    8001dae2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001dae6:	40000793          	li	a5,1024
    8001daea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001daee:	6785                	lui	a5,0x1
    8001daf0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001daf4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001daf8:	4785                	li	a5,1
    8001dafa:	07fe                	slli	a5,a5,0x1f
    8001dafc:	4485                	li	s1,1
    8001dafe:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001db02:	08100793          	li	a5,129
    8001db06:	07e2                	slli	a5,a5,0x18
    8001db08:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001db0c:	08000793          	li	a5,128
    8001db10:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001db14:	67a1                	lui	a5,0x8
    8001db16:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001db1a:	4501                	li	a0,0
    8001db1c:	8dae30ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001db20:	0330000f          	fence	rw,rw
    8001db24:	0002b417          	auipc	s0,0x2b
    8001db28:	4ec40413          	addi	s0,s0,1260 # 80049010 <excpt>
    8001db2c:	0002b797          	auipc	a5,0x2b
    8001db30:	5007be23          	sd	zero,1308(a5) # 80049048 <excpt+0x38>
    8001db34:	00941023          	sh	s1,0(s0)
    8001db38:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001db3c:	37ab77b7          	lui	a5,0x37ab7
    8001db40:	02149713          	slli	a4,s1,0x21
    8001db44:	078a                	slli	a5,a5,0x2
    8001db46:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001db4a:	40070713          	addi	a4,a4,1024
    8001db4e:	40f737af          	amoor.d	a5,a5,(a4)
    
    amoor_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001db52:	08200593          	li	a1,130
    8001db56:	00010617          	auipc	a2,0x10
    8001db5a:	eba60613          	addi	a2,a2,-326 # 8002da10 <__func__.0+0x6e50>
    8001db5e:	00009517          	auipc	a0,0x9
    8001db62:	35a50513          	addi	a0,a0,858 # 80026eb8 <__func__.0+0x2f8>
    8001db66:	39e070ef          	jal	80024f04 <printf>
    8001db6a:	0002b797          	auipc	a5,0x2b
    8001db6e:	4a77c783          	lbu	a5,1191(a5) # 80049011 <excpt+0x1>
    8001db72:	00009597          	auipc	a1,0x9
    8001db76:	31e58593          	addi	a1,a1,798 # 80026e90 <__func__.0+0x2d0>
    8001db7a:	cf89                	beqz	a5,8001db94 <amo_access_fault_8+0xfa>
    8001db7c:	6418                	ld	a4,8(s0)
    8001db7e:	479d                	li	a5,7
    8001db80:	00009597          	auipc	a1,0x9
    8001db84:	30058593          	addi	a1,a1,768 # 80026e80 <__func__.0+0x2c0>
    8001db88:	00f70663          	beq	a4,a5,8001db94 <amo_access_fault_8+0xfa>
    8001db8c:	00009597          	auipc	a1,0x9
    8001db90:	30458593          	addi	a1,a1,772 # 80026e90 <__func__.0+0x2d0>
    8001db94:	00009517          	auipc	a0,0x9
    8001db98:	33c50513          	addi	a0,a0,828 # 80026ed0 <__func__.0+0x310>
    8001db9c:	368070ef          	jal	80024f04 <printf>
    8001dba0:	0002b797          	auipc	a5,0x2b
    8001dba4:	4717c783          	lbu	a5,1137(a5) # 80049011 <excpt+0x1>
    8001dba8:	c789                	beqz	a5,8001dbb2 <amo_access_fault_8+0x118>
    8001dbaa:	6418                	ld	a4,8(s0)
    8001dbac:	479d                	li	a5,7
    8001dbae:	00f70c63          	beq	a4,a5,8001dbc6 <amo_access_fault_8+0x12c>
    8001dbb2:	00009517          	auipc	a0,0x9
    8001dbb6:	32650513          	addi	a0,a0,806 # 80026ed8 <__func__.0+0x318>
    8001dbba:	34a070ef          	jal	80024f04 <printf>
    8001dbbe:	02900513          	li	a0,41
    8001dbc2:	14c060ef          	jal	80023d0e <putchar>
    8001dbc6:	4529                	li	a0,10
    8001dbc8:	146060ef          	jal	80023d0e <putchar>
    8001dbcc:	0002b497          	auipc	s1,0x2b
    8001dbd0:	4454c483          	lbu	s1,1093(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001dbd4:	00009597          	auipc	a1,0x9
    8001dbd8:	2bc58593          	addi	a1,a1,700 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001dbdc:	cc91                	beqz	s1,8001dbf8 <amo_access_fault_8+0x15e>
    8001dbde:	6418                	ld	a4,8(s0)
    8001dbe0:	479d                	li	a5,7
    TEST_END();
    8001dbe2:	00009597          	auipc	a1,0x9
    8001dbe6:	29e58593          	addi	a1,a1,670 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001dbea:	00f70763          	beq	a4,a5,8001dbf8 <amo_access_fault_8+0x15e>
    8001dbee:	4481                	li	s1,0
    TEST_END();
    8001dbf0:	00009597          	auipc	a1,0x9
    8001dbf4:	2a058593          	addi	a1,a1,672 # 80026e90 <__func__.0+0x2d0>
    8001dbf8:	00009517          	auipc	a0,0x9
    8001dbfc:	34050513          	addi	a0,a0,832 # 80026f38 <__func__.0+0x378>
    8001dc00:	304070ef          	jal	80024f04 <printf>
    8001dc04:	4511                	li	a0,4
    8001dc06:	ff1e20ef          	jal	80000bf6 <goto_priv>
    8001dc0a:	8a3e30ef          	jal	800014ac <reset_state>
}
    8001dc0e:	60e2                	ld	ra,24(sp)
    8001dc10:	6442                	ld	s0,16(sp)
    8001dc12:	8526                	mv	a0,s1
    8001dc14:	64a2                	ld	s1,8(sp)
    8001dc16:	6105                	addi	sp,sp,32
    8001dc18:	8082                	ret

000000008001dc1a <amo_access_fault_9>:

bool amo_access_fault_9(){
    8001dc1a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dc1c:	00009597          	auipc	a1,0x9
    8001dc20:	a3c58593          	addi	a1,a1,-1476 # 80026658 <__func__.11>
    8001dc24:	00009517          	auipc	a0,0x9
    8001dc28:	27c50513          	addi	a0,a0,636 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_9(){
    8001dc2c:	ec06                	sd	ra,24(sp)
    8001dc2e:	e822                	sd	s0,16(sp)
    8001dc30:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dc32:	2d2070ef          	jal	80024f04 <printf>
    8001dc36:	4529                	li	a0,10
    8001dc38:	0d6060ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001dc3c:	4511                	li	a0,4
    8001dc3e:	fb9e20ef          	jal	80000bf6 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001dc42:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001dc46:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001dc4a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001dc4e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001dc52:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001dc56:	10000793          	li	a5,256
    8001dc5a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001dc5e:	20000793          	li	a5,512
    8001dc62:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001dc66:	40000793          	li	a5,1024
    8001dc6a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001dc6e:	6785                	lui	a5,0x1
    8001dc70:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001dc74:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001dc78:	4785                	li	a5,1
    8001dc7a:	07fe                	slli	a5,a5,0x1f
    8001dc7c:	4485                	li	s1,1
    8001dc7e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001dc82:	08100793          	li	a5,129
    8001dc86:	07e2                	slli	a5,a5,0x18
    8001dc88:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001dc8c:	08000793          	li	a5,128
    8001dc90:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001dc94:	67a1                	lui	a5,0x8
    8001dc96:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001dc9a:	4501                	li	a0,0
    8001dc9c:	f5be20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001dca0:	0330000f          	fence	rw,rw
    8001dca4:	0002b417          	auipc	s0,0x2b
    8001dca8:	36c40413          	addi	s0,s0,876 # 80049010 <excpt>
    8001dcac:	0002b797          	auipc	a5,0x2b
    8001dcb0:	3807be23          	sd	zero,924(a5) # 80049048 <excpt+0x38>
    8001dcb4:	00941023          	sh	s1,0(s0)
    8001dcb8:	0330000f          	fence	rw,rw
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001dcbc:	37ab77b7          	lui	a5,0x37ab7
    8001dcc0:	02349713          	slli	a4,s1,0x23
    8001dcc4:	078a                	slli	a5,a5,0x2
    8001dcc6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001dcca:	1761                	addi	a4,a4,-8
    8001dccc:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001dcd0:	08200593          	li	a1,130
    8001dcd4:	00010617          	auipc	a2,0x10
    8001dcd8:	d7c60613          	addi	a2,a2,-644 # 8002da50 <__func__.0+0x6e90>
    8001dcdc:	00009517          	auipc	a0,0x9
    8001dce0:	1dc50513          	addi	a0,a0,476 # 80026eb8 <__func__.0+0x2f8>
    8001dce4:	220070ef          	jal	80024f04 <printf>
    8001dce8:	0002b797          	auipc	a5,0x2b
    8001dcec:	3297c783          	lbu	a5,809(a5) # 80049011 <excpt+0x1>
    8001dcf0:	00009597          	auipc	a1,0x9
    8001dcf4:	1a058593          	addi	a1,a1,416 # 80026e90 <__func__.0+0x2d0>
    8001dcf8:	cf89                	beqz	a5,8001dd12 <amo_access_fault_9+0xf8>
    8001dcfa:	6418                	ld	a4,8(s0)
    8001dcfc:	479d                	li	a5,7
    8001dcfe:	00009597          	auipc	a1,0x9
    8001dd02:	18258593          	addi	a1,a1,386 # 80026e80 <__func__.0+0x2c0>
    8001dd06:	00f70663          	beq	a4,a5,8001dd12 <amo_access_fault_9+0xf8>
    8001dd0a:	00009597          	auipc	a1,0x9
    8001dd0e:	18658593          	addi	a1,a1,390 # 80026e90 <__func__.0+0x2d0>
    8001dd12:	00009517          	auipc	a0,0x9
    8001dd16:	1be50513          	addi	a0,a0,446 # 80026ed0 <__func__.0+0x310>
    8001dd1a:	1ea070ef          	jal	80024f04 <printf>
    8001dd1e:	0002b797          	auipc	a5,0x2b
    8001dd22:	2f37c783          	lbu	a5,755(a5) # 80049011 <excpt+0x1>
    8001dd26:	c789                	beqz	a5,8001dd30 <amo_access_fault_9+0x116>
    8001dd28:	6418                	ld	a4,8(s0)
    8001dd2a:	479d                	li	a5,7
    8001dd2c:	00f70c63          	beq	a4,a5,8001dd44 <amo_access_fault_9+0x12a>
    8001dd30:	00009517          	auipc	a0,0x9
    8001dd34:	1a850513          	addi	a0,a0,424 # 80026ed8 <__func__.0+0x318>
    8001dd38:	1cc070ef          	jal	80024f04 <printf>
    8001dd3c:	02900513          	li	a0,41
    8001dd40:	7cf050ef          	jal	80023d0e <putchar>
    8001dd44:	4529                	li	a0,10
    8001dd46:	7c9050ef          	jal	80023d0e <putchar>
    8001dd4a:	0002b497          	auipc	s1,0x2b
    8001dd4e:	2c74c483          	lbu	s1,711(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001dd52:	00009597          	auipc	a1,0x9
    8001dd56:	13e58593          	addi	a1,a1,318 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001dd5a:	cc91                	beqz	s1,8001dd76 <amo_access_fault_9+0x15c>
    8001dd5c:	6418                	ld	a4,8(s0)
    8001dd5e:	479d                	li	a5,7
    TEST_END();
    8001dd60:	00009597          	auipc	a1,0x9
    8001dd64:	12058593          	addi	a1,a1,288 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001dd68:	00f70763          	beq	a4,a5,8001dd76 <amo_access_fault_9+0x15c>
    8001dd6c:	4481                	li	s1,0
    TEST_END();
    8001dd6e:	00009597          	auipc	a1,0x9
    8001dd72:	12258593          	addi	a1,a1,290 # 80026e90 <__func__.0+0x2d0>
    8001dd76:	00009517          	auipc	a0,0x9
    8001dd7a:	1c250513          	addi	a0,a0,450 # 80026f38 <__func__.0+0x378>
    8001dd7e:	186070ef          	jal	80024f04 <printf>
    8001dd82:	4511                	li	a0,4
    8001dd84:	e73e20ef          	jal	80000bf6 <goto_priv>
    8001dd88:	f24e30ef          	jal	800014ac <reset_state>
}
    8001dd8c:	60e2                	ld	ra,24(sp)
    8001dd8e:	6442                	ld	s0,16(sp)
    8001dd90:	8526                	mv	a0,s1
    8001dd92:	64a2                	ld	s1,8(sp)
    8001dd94:	6105                	addi	sp,sp,32
    8001dd96:	8082                	ret

000000008001dd98 <amo_access_fault_10>:


bool amo_access_fault_10(){
    8001dd98:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dd9a:	00009597          	auipc	a1,0x9
    8001dd9e:	8d658593          	addi	a1,a1,-1834 # 80026670 <__func__.10>
    8001dda2:	00009517          	auipc	a0,0x9
    8001dda6:	0fe50513          	addi	a0,a0,254 # 80026ea0 <__func__.0+0x2e0>
bool amo_access_fault_10(){
    8001ddaa:	ec06                	sd	ra,24(sp)
    8001ddac:	e822                	sd	s0,16(sp)
    8001ddae:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ddb0:	154070ef          	jal	80024f04 <printf>
    8001ddb4:	4529                	li	a0,10
    8001ddb6:	759050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001ddba:	4511                	li	a0,4
    8001ddbc:	e3be20ef          	jal	80000bf6 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ddc0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ddc4:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ddc8:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ddcc:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ddd0:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ddd4:	4785                	li	a5,1
    8001ddd6:	07fe                	slli	a5,a5,0x1f
    8001ddd8:	4485                	li	s1,1
    8001ddda:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ddde:	08000793          	li	a5,128
    8001dde2:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001dde6:	450d                	li	a0,3
    8001dde8:	e0fe20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ddec:	0330000f          	fence	rw,rw
    8001ddf0:	0002b417          	auipc	s0,0x2b
    8001ddf4:	22040413          	addi	s0,s0,544 # 80049010 <excpt>
    8001ddf8:	0002b797          	auipc	a5,0x2b
    8001ddfc:	2407b823          	sd	zero,592(a5) # 80049048 <excpt+0x38>
    8001de00:	00941023          	sh	s1,0(s0)
    8001de04:	0330000f          	fence	rw,rw
    8001de08:	37ab77b7          	lui	a5,0x37ab7
    8001de0c:	078a                	slli	a5,a5,0x2
    8001de0e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001de12:	02149713          	slli	a4,s1,0x21
    8001de16:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000UL << 2 ,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001de1a:	08200593          	li	a1,130
    8001de1e:	00010617          	auipc	a2,0x10
    8001de22:	caa60613          	addi	a2,a2,-854 # 8002dac8 <__func__.0+0x6f08>
    8001de26:	00009517          	auipc	a0,0x9
    8001de2a:	09250513          	addi	a0,a0,146 # 80026eb8 <__func__.0+0x2f8>
    8001de2e:	0d6070ef          	jal	80024f04 <printf>
    8001de32:	0002b797          	auipc	a5,0x2b
    8001de36:	1df7c783          	lbu	a5,479(a5) # 80049011 <excpt+0x1>
    8001de3a:	00009597          	auipc	a1,0x9
    8001de3e:	05658593          	addi	a1,a1,86 # 80026e90 <__func__.0+0x2d0>
    8001de42:	cf89                	beqz	a5,8001de5c <amo_access_fault_10+0xc4>
    8001de44:	6418                	ld	a4,8(s0)
    8001de46:	479d                	li	a5,7
    8001de48:	00009597          	auipc	a1,0x9
    8001de4c:	03858593          	addi	a1,a1,56 # 80026e80 <__func__.0+0x2c0>
    8001de50:	00f70663          	beq	a4,a5,8001de5c <amo_access_fault_10+0xc4>
    8001de54:	00009597          	auipc	a1,0x9
    8001de58:	03c58593          	addi	a1,a1,60 # 80026e90 <__func__.0+0x2d0>
    8001de5c:	00009517          	auipc	a0,0x9
    8001de60:	07450513          	addi	a0,a0,116 # 80026ed0 <__func__.0+0x310>
    8001de64:	0a0070ef          	jal	80024f04 <printf>
    8001de68:	0002b797          	auipc	a5,0x2b
    8001de6c:	1a97c783          	lbu	a5,425(a5) # 80049011 <excpt+0x1>
    8001de70:	c789                	beqz	a5,8001de7a <amo_access_fault_10+0xe2>
    8001de72:	6418                	ld	a4,8(s0)
    8001de74:	479d                	li	a5,7
    8001de76:	00f70c63          	beq	a4,a5,8001de8e <amo_access_fault_10+0xf6>
    8001de7a:	00009517          	auipc	a0,0x9
    8001de7e:	05e50513          	addi	a0,a0,94 # 80026ed8 <__func__.0+0x318>
    8001de82:	082070ef          	jal	80024f04 <printf>
    8001de86:	02900513          	li	a0,41
    8001de8a:	685050ef          	jal	80023d0e <putchar>
    8001de8e:	4529                	li	a0,10
    8001de90:	67f050ef          	jal	80023d0e <putchar>
    8001de94:	0002b497          	auipc	s1,0x2b
    8001de98:	17d4c483          	lbu	s1,381(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001de9c:	00009597          	auipc	a1,0x9
    8001dea0:	ff458593          	addi	a1,a1,-12 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001dea4:	cc91                	beqz	s1,8001dec0 <amo_access_fault_10+0x128>
    8001dea6:	6418                	ld	a4,8(s0)
    8001dea8:	479d                	li	a5,7
    TEST_END();
    8001deaa:	00009597          	auipc	a1,0x9
    8001deae:	fd658593          	addi	a1,a1,-42 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001deb2:	00f70763          	beq	a4,a5,8001dec0 <amo_access_fault_10+0x128>
    8001deb6:	4481                	li	s1,0
    TEST_END();
    8001deb8:	00009597          	auipc	a1,0x9
    8001debc:	fd858593          	addi	a1,a1,-40 # 80026e90 <__func__.0+0x2d0>
    8001dec0:	00009517          	auipc	a0,0x9
    8001dec4:	07850513          	addi	a0,a0,120 # 80026f38 <__func__.0+0x378>
    8001dec8:	03c070ef          	jal	80024f04 <printf>
    8001decc:	4511                	li	a0,4
    8001dece:	d29e20ef          	jal	80000bf6 <goto_priv>
    8001ded2:	ddae30ef          	jal	800014ac <reset_state>
}
    8001ded6:	60e2                	ld	ra,24(sp)
    8001ded8:	6442                	ld	s0,16(sp)
    8001deda:	8526                	mv	a0,s1
    8001dedc:	64a2                	ld	s1,8(sp)
    8001dede:	6105                	addi	sp,sp,32
    8001dee0:	8082                	ret

000000008001dee2 <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    8001dee2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001dee4:	00008597          	auipc	a1,0x8
    8001dee8:	7a458593          	addi	a1,a1,1956 # 80026688 <__func__.9>
    8001deec:	00009517          	auipc	a0,0x9
    8001def0:	fb450513          	addi	a0,a0,-76 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_1(){
    8001def4:	ec06                	sd	ra,24(sp)
    8001def6:	e822                	sd	s0,16(sp)
    8001def8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001defa:	00a070ef          	jal	80024f04 <printf>
    8001defe:	4529                	li	a0,10
    8001df00:	60f050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001df04:	4511                	li	a0,4
    8001df06:	cf1e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001df0a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001df0e:	10000793          	li	a5,256
    8001df12:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001df16:	20000793          	li	a5,512
    8001df1a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001df1e:	40000793          	li	a5,1024
    8001df22:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001df26:	6785                	lui	a5,0x1
    8001df28:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001df2c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001df30:	4785                	li	a5,1
    8001df32:	07fe                	slli	a5,a5,0x1f
    8001df34:	4485                	li	s1,1
    8001df36:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001df3a:	08100793          	li	a5,129
    8001df3e:	07e2                	slli	a5,a5,0x18
    8001df40:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001df44:	67a1                	lui	a5,0x8
    8001df46:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001df4a:	0330000f          	fence	rw,rw
    8001df4e:	0002b417          	auipc	s0,0x2b
    8001df52:	0c240413          	addi	s0,s0,194 # 80049010 <excpt>
    8001df56:	0002b797          	auipc	a5,0x2b
    8001df5a:	0e07b923          	sd	zero,242(a5) # 80049048 <excpt+0x38>
    8001df5e:	00941023          	sh	s1,0(s0)
    8001df62:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001df66:	02149793          	slli	a5,s1,0x21
    8001df6a:	40078793          	addi	a5,a5,1024
    8001df6e:	00000297          	auipc	t0,0x0
    8001df72:	00c28293          	addi	t0,t0,12 # 8001df7a <instruction_access_fault_1+0x98>
    8001df76:	02543c23          	sd	t0,56(s0)
    8001df7a:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001df7c:	0002b597          	auipc	a1,0x2b
    8001df80:	0955c583          	lbu	a1,149(a1) # 80049011 <excpt+0x1>
    8001df84:	0000a517          	auipc	a0,0xa
    8001df88:	a6450513          	addi	a0,a0,-1436 # 800279e8 <__func__.0+0xe28>
    8001df8c:	779060ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001df90:	640c                	ld	a1,8(s0)
    8001df92:	0000a517          	auipc	a0,0xa
    8001df96:	a5650513          	addi	a0,a0,-1450 # 800279e8 <__func__.0+0xe28>
    8001df9a:	76b060ef          	jal	80024f04 <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001df9e:	08200593          	li	a1,130
    8001dfa2:	00010617          	auipc	a2,0x10
    8001dfa6:	b9660613          	addi	a2,a2,-1130 # 8002db38 <__func__.0+0x6f78>
    8001dfaa:	00009517          	auipc	a0,0x9
    8001dfae:	f0e50513          	addi	a0,a0,-242 # 80026eb8 <__func__.0+0x2f8>
    8001dfb2:	753060ef          	jal	80024f04 <printf>
    8001dfb6:	0002b797          	auipc	a5,0x2b
    8001dfba:	05b7c783          	lbu	a5,91(a5) # 80049011 <excpt+0x1>
    8001dfbe:	00009597          	auipc	a1,0x9
    8001dfc2:	ed258593          	addi	a1,a1,-302 # 80026e90 <__func__.0+0x2d0>
    8001dfc6:	cf81                	beqz	a5,8001dfde <instruction_access_fault_1+0xfc>
    8001dfc8:	641c                	ld	a5,8(s0)
    8001dfca:	00009597          	auipc	a1,0x9
    8001dfce:	eb658593          	addi	a1,a1,-330 # 80026e80 <__func__.0+0x2c0>
    8001dfd2:	00978663          	beq	a5,s1,8001dfde <instruction_access_fault_1+0xfc>
    8001dfd6:	00009597          	auipc	a1,0x9
    8001dfda:	eba58593          	addi	a1,a1,-326 # 80026e90 <__func__.0+0x2d0>
    8001dfde:	00009517          	auipc	a0,0x9
    8001dfe2:	ef250513          	addi	a0,a0,-270 # 80026ed0 <__func__.0+0x310>
    8001dfe6:	71f060ef          	jal	80024f04 <printf>
    8001dfea:	0002b797          	auipc	a5,0x2b
    8001dfee:	0277c783          	lbu	a5,39(a5) # 80049011 <excpt+0x1>
    8001dff2:	c789                	beqz	a5,8001dffc <instruction_access_fault_1+0x11a>
    8001dff4:	6418                	ld	a4,8(s0)
    8001dff6:	4785                	li	a5,1
    8001dff8:	00f70c63          	beq	a4,a5,8001e010 <instruction_access_fault_1+0x12e>
    8001dffc:	00009517          	auipc	a0,0x9
    8001e000:	edc50513          	addi	a0,a0,-292 # 80026ed8 <__func__.0+0x318>
    8001e004:	701060ef          	jal	80024f04 <printf>
    8001e008:	02900513          	li	a0,41
    8001e00c:	503050ef          	jal	80023d0e <putchar>
    8001e010:	4529                	li	a0,10
    8001e012:	4fd050ef          	jal	80023d0e <putchar>
    8001e016:	0002b497          	auipc	s1,0x2b
    8001e01a:	ffb4c483          	lbu	s1,-5(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e01e:	00009597          	auipc	a1,0x9
    8001e022:	e7258593          	addi	a1,a1,-398 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e026:	cc91                	beqz	s1,8001e042 <instruction_access_fault_1+0x160>
    8001e028:	6418                	ld	a4,8(s0)
    8001e02a:	4785                	li	a5,1
    TEST_END();
    8001e02c:	00009597          	auipc	a1,0x9
    8001e030:	e5458593          	addi	a1,a1,-428 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e034:	00f70763          	beq	a4,a5,8001e042 <instruction_access_fault_1+0x160>
    8001e038:	4481                	li	s1,0
    TEST_END();
    8001e03a:	00009597          	auipc	a1,0x9
    8001e03e:	e5658593          	addi	a1,a1,-426 # 80026e90 <__func__.0+0x2d0>
    8001e042:	00009517          	auipc	a0,0x9
    8001e046:	ef650513          	addi	a0,a0,-266 # 80026f38 <__func__.0+0x378>
    8001e04a:	6bb060ef          	jal	80024f04 <printf>
    8001e04e:	4511                	li	a0,4
    8001e050:	ba7e20ef          	jal	80000bf6 <goto_priv>
    8001e054:	c58e30ef          	jal	800014ac <reset_state>
}
    8001e058:	60e2                	ld	ra,24(sp)
    8001e05a:	6442                	ld	s0,16(sp)
    8001e05c:	8526                	mv	a0,s1
    8001e05e:	64a2                	ld	s1,8(sp)
    8001e060:	6105                	addi	sp,sp,32
    8001e062:	8082                	ret

000000008001e064 <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    8001e064:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e066:	00008597          	auipc	a1,0x8
    8001e06a:	64258593          	addi	a1,a1,1602 # 800266a8 <__func__.8>
    8001e06e:	00009517          	auipc	a0,0x9
    8001e072:	e3250513          	addi	a0,a0,-462 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_2(){
    8001e076:	ec06                	sd	ra,24(sp)
    8001e078:	e822                	sd	s0,16(sp)
    8001e07a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e07c:	689060ef          	jal	80024f04 <printf>
    8001e080:	4529                	li	a0,10
    8001e082:	48d050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001e086:	4511                	li	a0,4
    8001e088:	b6fe20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e08c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e090:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e094:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e098:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e09c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e0a0:	10000793          	li	a5,256
    8001e0a4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e0a8:	20000793          	li	a5,512
    8001e0ac:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e0b0:	40000793          	li	a5,1024
    8001e0b4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e0b8:	6785                	lui	a5,0x1
    8001e0ba:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e0be:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e0c2:	4785                	li	a5,1
    8001e0c4:	07fe                	slli	a5,a5,0x1f
    8001e0c6:	4485                	li	s1,1
    8001e0c8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e0cc:	08100793          	li	a5,129
    8001e0d0:	07e2                	slli	a5,a5,0x18
    8001e0d2:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e0d6:	08000793          	li	a5,128
    8001e0da:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e0de:	67a1                	lui	a5,0x8
    8001e0e0:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001e0e4:	450d                	li	a0,3
    8001e0e6:	b11e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e0ea:	0330000f          	fence	rw,rw
    8001e0ee:	0002b417          	auipc	s0,0x2b
    8001e0f2:	f2240413          	addi	s0,s0,-222 # 80049010 <excpt>
    8001e0f6:	0002b797          	auipc	a5,0x2b
    8001e0fa:	f407b923          	sd	zero,-174(a5) # 80049048 <excpt+0x38>
    8001e0fe:	00941023          	sh	s1,0(s0)
    8001e102:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e106:	02149793          	slli	a5,s1,0x21
    8001e10a:	40078793          	addi	a5,a5,1024
    8001e10e:	00000297          	auipc	t0,0x0
    8001e112:	00c28293          	addi	t0,t0,12 # 8001e11a <instruction_access_fault_2+0xb6>
    8001e116:	02543c23          	sd	t0,56(s0)
    8001e11a:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e11c:	08200593          	li	a1,130
    8001e120:	00010617          	auipc	a2,0x10
    8001e124:	a6060613          	addi	a2,a2,-1440 # 8002db80 <__func__.0+0x6fc0>
    8001e128:	00009517          	auipc	a0,0x9
    8001e12c:	d9050513          	addi	a0,a0,-624 # 80026eb8 <__func__.0+0x2f8>
    8001e130:	5d5060ef          	jal	80024f04 <printf>
    8001e134:	0002b797          	auipc	a5,0x2b
    8001e138:	edd7c783          	lbu	a5,-291(a5) # 80049011 <excpt+0x1>
    8001e13c:	00009597          	auipc	a1,0x9
    8001e140:	d5458593          	addi	a1,a1,-684 # 80026e90 <__func__.0+0x2d0>
    8001e144:	cf81                	beqz	a5,8001e15c <instruction_access_fault_2+0xf8>
    8001e146:	641c                	ld	a5,8(s0)
    8001e148:	00009597          	auipc	a1,0x9
    8001e14c:	d3858593          	addi	a1,a1,-712 # 80026e80 <__func__.0+0x2c0>
    8001e150:	00978663          	beq	a5,s1,8001e15c <instruction_access_fault_2+0xf8>
    8001e154:	00009597          	auipc	a1,0x9
    8001e158:	d3c58593          	addi	a1,a1,-708 # 80026e90 <__func__.0+0x2d0>
    8001e15c:	00009517          	auipc	a0,0x9
    8001e160:	d7450513          	addi	a0,a0,-652 # 80026ed0 <__func__.0+0x310>
    8001e164:	5a1060ef          	jal	80024f04 <printf>
    8001e168:	0002b797          	auipc	a5,0x2b
    8001e16c:	ea97c783          	lbu	a5,-343(a5) # 80049011 <excpt+0x1>
    8001e170:	c789                	beqz	a5,8001e17a <instruction_access_fault_2+0x116>
    8001e172:	6418                	ld	a4,8(s0)
    8001e174:	4785                	li	a5,1
    8001e176:	00f70c63          	beq	a4,a5,8001e18e <instruction_access_fault_2+0x12a>
    8001e17a:	00009517          	auipc	a0,0x9
    8001e17e:	d5e50513          	addi	a0,a0,-674 # 80026ed8 <__func__.0+0x318>
    8001e182:	583060ef          	jal	80024f04 <printf>
    8001e186:	02900513          	li	a0,41
    8001e18a:	385050ef          	jal	80023d0e <putchar>
    8001e18e:	4529                	li	a0,10
    8001e190:	37f050ef          	jal	80023d0e <putchar>
    8001e194:	0002b497          	auipc	s1,0x2b
    8001e198:	e7d4c483          	lbu	s1,-387(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e19c:	00009597          	auipc	a1,0x9
    8001e1a0:	cf458593          	addi	a1,a1,-780 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e1a4:	cc91                	beqz	s1,8001e1c0 <instruction_access_fault_2+0x15c>
    8001e1a6:	6418                	ld	a4,8(s0)
    8001e1a8:	4785                	li	a5,1
    TEST_END();
    8001e1aa:	00009597          	auipc	a1,0x9
    8001e1ae:	cd658593          	addi	a1,a1,-810 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e1b2:	00f70763          	beq	a4,a5,8001e1c0 <instruction_access_fault_2+0x15c>
    8001e1b6:	4481                	li	s1,0
    TEST_END();
    8001e1b8:	00009597          	auipc	a1,0x9
    8001e1bc:	cd858593          	addi	a1,a1,-808 # 80026e90 <__func__.0+0x2d0>
    8001e1c0:	00009517          	auipc	a0,0x9
    8001e1c4:	d7850513          	addi	a0,a0,-648 # 80026f38 <__func__.0+0x378>
    8001e1c8:	53d060ef          	jal	80024f04 <printf>
    8001e1cc:	4511                	li	a0,4
    8001e1ce:	a29e20ef          	jal	80000bf6 <goto_priv>
    8001e1d2:	adae30ef          	jal	800014ac <reset_state>
}
    8001e1d6:	60e2                	ld	ra,24(sp)
    8001e1d8:	6442                	ld	s0,16(sp)
    8001e1da:	8526                	mv	a0,s1
    8001e1dc:	64a2                	ld	s1,8(sp)
    8001e1de:	6105                	addi	sp,sp,32
    8001e1e0:	8082                	ret

000000008001e1e2 <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001e1e2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e1e4:	00008597          	auipc	a1,0x8
    8001e1e8:	4e458593          	addi	a1,a1,1252 # 800266c8 <__func__.7>
    8001e1ec:	00009517          	auipc	a0,0x9
    8001e1f0:	cb450513          	addi	a0,a0,-844 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_3(){
    8001e1f4:	ec06                	sd	ra,24(sp)
    8001e1f6:	e822                	sd	s0,16(sp)
    8001e1f8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e1fa:	50b060ef          	jal	80024f04 <printf>
    8001e1fe:	4529                	li	a0,10
    8001e200:	30f050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001e204:	4511                	li	a0,4
    8001e206:	9f1e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e20a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e20e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e212:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e216:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e21a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e21e:	10000793          	li	a5,256
    8001e222:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e226:	20000793          	li	a5,512
    8001e22a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e22e:	40000793          	li	a5,1024
    8001e232:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e236:	6785                	lui	a5,0x1
    8001e238:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e23c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e240:	4785                	li	a5,1
    8001e242:	07fe                	slli	a5,a5,0x1f
    8001e244:	4485                	li	s1,1
    8001e246:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e24a:	08100793          	li	a5,129
    8001e24e:	07e2                	slli	a5,a5,0x18
    8001e250:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e254:	08000793          	li	a5,128
    8001e258:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e25c:	67a1                	lui	a5,0x8
    8001e25e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001e262:	8526                	mv	a0,s1
    8001e264:	993e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e268:	0330000f          	fence	rw,rw
    8001e26c:	0002b417          	auipc	s0,0x2b
    8001e270:	da440413          	addi	s0,s0,-604 # 80049010 <excpt>
    8001e274:	0002b797          	auipc	a5,0x2b
    8001e278:	dc07ba23          	sd	zero,-556(a5) # 80049048 <excpt+0x38>
    8001e27c:	00941023          	sh	s1,0(s0)
    8001e280:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e284:	02149793          	slli	a5,s1,0x21
    8001e288:	40078793          	addi	a5,a5,1024
    8001e28c:	00000297          	auipc	t0,0x0
    8001e290:	00c28293          	addi	t0,t0,12 # 8001e298 <instruction_access_fault_3+0xb6>
    8001e294:	02543c23          	sd	t0,56(s0)
    8001e298:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e29a:	08200593          	li	a1,130
    8001e29e:	00010617          	auipc	a2,0x10
    8001e2a2:	92a60613          	addi	a2,a2,-1750 # 8002dbc8 <__func__.0+0x7008>
    8001e2a6:	00009517          	auipc	a0,0x9
    8001e2aa:	c1250513          	addi	a0,a0,-1006 # 80026eb8 <__func__.0+0x2f8>
    8001e2ae:	457060ef          	jal	80024f04 <printf>
    8001e2b2:	0002b797          	auipc	a5,0x2b
    8001e2b6:	d5f7c783          	lbu	a5,-673(a5) # 80049011 <excpt+0x1>
    8001e2ba:	00009597          	auipc	a1,0x9
    8001e2be:	bd658593          	addi	a1,a1,-1066 # 80026e90 <__func__.0+0x2d0>
    8001e2c2:	cf81                	beqz	a5,8001e2da <instruction_access_fault_3+0xf8>
    8001e2c4:	641c                	ld	a5,8(s0)
    8001e2c6:	00009597          	auipc	a1,0x9
    8001e2ca:	bba58593          	addi	a1,a1,-1094 # 80026e80 <__func__.0+0x2c0>
    8001e2ce:	00978663          	beq	a5,s1,8001e2da <instruction_access_fault_3+0xf8>
    8001e2d2:	00009597          	auipc	a1,0x9
    8001e2d6:	bbe58593          	addi	a1,a1,-1090 # 80026e90 <__func__.0+0x2d0>
    8001e2da:	00009517          	auipc	a0,0x9
    8001e2de:	bf650513          	addi	a0,a0,-1034 # 80026ed0 <__func__.0+0x310>
    8001e2e2:	423060ef          	jal	80024f04 <printf>
    8001e2e6:	0002b797          	auipc	a5,0x2b
    8001e2ea:	d2b7c783          	lbu	a5,-725(a5) # 80049011 <excpt+0x1>
    8001e2ee:	c789                	beqz	a5,8001e2f8 <instruction_access_fault_3+0x116>
    8001e2f0:	6418                	ld	a4,8(s0)
    8001e2f2:	4785                	li	a5,1
    8001e2f4:	00f70c63          	beq	a4,a5,8001e30c <instruction_access_fault_3+0x12a>
    8001e2f8:	00009517          	auipc	a0,0x9
    8001e2fc:	be050513          	addi	a0,a0,-1056 # 80026ed8 <__func__.0+0x318>
    8001e300:	405060ef          	jal	80024f04 <printf>
    8001e304:	02900513          	li	a0,41
    8001e308:	207050ef          	jal	80023d0e <putchar>
    8001e30c:	4529                	li	a0,10
    8001e30e:	201050ef          	jal	80023d0e <putchar>
    8001e312:	0002b497          	auipc	s1,0x2b
    8001e316:	cff4c483          	lbu	s1,-769(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e31a:	00009597          	auipc	a1,0x9
    8001e31e:	b7658593          	addi	a1,a1,-1162 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e322:	cc91                	beqz	s1,8001e33e <instruction_access_fault_3+0x15c>
    8001e324:	6418                	ld	a4,8(s0)
    8001e326:	4785                	li	a5,1
    TEST_END();
    8001e328:	00009597          	auipc	a1,0x9
    8001e32c:	b5858593          	addi	a1,a1,-1192 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e330:	00f70763          	beq	a4,a5,8001e33e <instruction_access_fault_3+0x15c>
    8001e334:	4481                	li	s1,0
    TEST_END();
    8001e336:	00009597          	auipc	a1,0x9
    8001e33a:	b5a58593          	addi	a1,a1,-1190 # 80026e90 <__func__.0+0x2d0>
    8001e33e:	00009517          	auipc	a0,0x9
    8001e342:	bfa50513          	addi	a0,a0,-1030 # 80026f38 <__func__.0+0x378>
    8001e346:	3bf060ef          	jal	80024f04 <printf>
    8001e34a:	4511                	li	a0,4
    8001e34c:	8abe20ef          	jal	80000bf6 <goto_priv>
    8001e350:	95ce30ef          	jal	800014ac <reset_state>
}
    8001e354:	60e2                	ld	ra,24(sp)
    8001e356:	6442                	ld	s0,16(sp)
    8001e358:	8526                	mv	a0,s1
    8001e35a:	64a2                	ld	s1,8(sp)
    8001e35c:	6105                	addi	sp,sp,32
    8001e35e:	8082                	ret

000000008001e360 <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001e360:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e362:	00008597          	auipc	a1,0x8
    8001e366:	38658593          	addi	a1,a1,902 # 800266e8 <__func__.6>
    8001e36a:	00009517          	auipc	a0,0x9
    8001e36e:	b3650513          	addi	a0,a0,-1226 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_4(){
    8001e372:	ec06                	sd	ra,24(sp)
    8001e374:	e822                	sd	s0,16(sp)
    8001e376:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e378:	38d060ef          	jal	80024f04 <printf>
    8001e37c:	4529                	li	a0,10
    8001e37e:	191050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001e382:	4511                	li	a0,4
    8001e384:	873e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e388:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e38c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e390:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e394:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e398:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e39c:	10000793          	li	a5,256
    8001e3a0:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e3a4:	20000793          	li	a5,512
    8001e3a8:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e3ac:	40000793          	li	a5,1024
    8001e3b0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e3b4:	6785                	lui	a5,0x1
    8001e3b6:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e3ba:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e3be:	4785                	li	a5,1
    8001e3c0:	07fe                	slli	a5,a5,0x1f
    8001e3c2:	4485                	li	s1,1
    8001e3c4:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e3c8:	08100793          	li	a5,129
    8001e3cc:	07e2                	slli	a5,a5,0x18
    8001e3ce:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e3d2:	08000793          	li	a5,128
    8001e3d6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e3da:	67a1                	lui	a5,0x8
    8001e3dc:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001e3e0:	4501                	li	a0,0
    8001e3e2:	815e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e3e6:	0330000f          	fence	rw,rw
    8001e3ea:	0002b417          	auipc	s0,0x2b
    8001e3ee:	c2640413          	addi	s0,s0,-986 # 80049010 <excpt>
    8001e3f2:	0002b797          	auipc	a5,0x2b
    8001e3f6:	c407bb23          	sd	zero,-938(a5) # 80049048 <excpt+0x38>
    8001e3fa:	00941023          	sh	s1,0(s0)
    8001e3fe:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e402:	02149793          	slli	a5,s1,0x21
    8001e406:	40078793          	addi	a5,a5,1024
    8001e40a:	00000297          	auipc	t0,0x0
    8001e40e:	00c28293          	addi	t0,t0,12 # 8001e416 <instruction_access_fault_4+0xb6>
    8001e412:	02543c23          	sd	t0,56(s0)
    8001e416:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e418:	08200593          	li	a1,130
    8001e41c:	0000f617          	auipc	a2,0xf
    8001e420:	7f460613          	addi	a2,a2,2036 # 8002dc10 <__func__.0+0x7050>
    8001e424:	00009517          	auipc	a0,0x9
    8001e428:	a9450513          	addi	a0,a0,-1388 # 80026eb8 <__func__.0+0x2f8>
    8001e42c:	2d9060ef          	jal	80024f04 <printf>
    8001e430:	0002b797          	auipc	a5,0x2b
    8001e434:	be17c783          	lbu	a5,-1055(a5) # 80049011 <excpt+0x1>
    8001e438:	00009597          	auipc	a1,0x9
    8001e43c:	a5858593          	addi	a1,a1,-1448 # 80026e90 <__func__.0+0x2d0>
    8001e440:	cf81                	beqz	a5,8001e458 <instruction_access_fault_4+0xf8>
    8001e442:	641c                	ld	a5,8(s0)
    8001e444:	00009597          	auipc	a1,0x9
    8001e448:	a3c58593          	addi	a1,a1,-1476 # 80026e80 <__func__.0+0x2c0>
    8001e44c:	00978663          	beq	a5,s1,8001e458 <instruction_access_fault_4+0xf8>
    8001e450:	00009597          	auipc	a1,0x9
    8001e454:	a4058593          	addi	a1,a1,-1472 # 80026e90 <__func__.0+0x2d0>
    8001e458:	00009517          	auipc	a0,0x9
    8001e45c:	a7850513          	addi	a0,a0,-1416 # 80026ed0 <__func__.0+0x310>
    8001e460:	2a5060ef          	jal	80024f04 <printf>
    8001e464:	0002b797          	auipc	a5,0x2b
    8001e468:	bad7c783          	lbu	a5,-1107(a5) # 80049011 <excpt+0x1>
    8001e46c:	c789                	beqz	a5,8001e476 <instruction_access_fault_4+0x116>
    8001e46e:	6418                	ld	a4,8(s0)
    8001e470:	4785                	li	a5,1
    8001e472:	00f70c63          	beq	a4,a5,8001e48a <instruction_access_fault_4+0x12a>
    8001e476:	00009517          	auipc	a0,0x9
    8001e47a:	a6250513          	addi	a0,a0,-1438 # 80026ed8 <__func__.0+0x318>
    8001e47e:	287060ef          	jal	80024f04 <printf>
    8001e482:	02900513          	li	a0,41
    8001e486:	089050ef          	jal	80023d0e <putchar>
    8001e48a:	4529                	li	a0,10
    8001e48c:	083050ef          	jal	80023d0e <putchar>
    8001e490:	0002b497          	auipc	s1,0x2b
    8001e494:	b814c483          	lbu	s1,-1151(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e498:	00009597          	auipc	a1,0x9
    8001e49c:	9f858593          	addi	a1,a1,-1544 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e4a0:	cc91                	beqz	s1,8001e4bc <instruction_access_fault_4+0x15c>
    8001e4a2:	6418                	ld	a4,8(s0)
    8001e4a4:	4785                	li	a5,1
    TEST_END();
    8001e4a6:	00009597          	auipc	a1,0x9
    8001e4aa:	9da58593          	addi	a1,a1,-1574 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001e4ae:	00f70763          	beq	a4,a5,8001e4bc <instruction_access_fault_4+0x15c>
    8001e4b2:	4481                	li	s1,0
    TEST_END();
    8001e4b4:	00009597          	auipc	a1,0x9
    8001e4b8:	9dc58593          	addi	a1,a1,-1572 # 80026e90 <__func__.0+0x2d0>
    8001e4bc:	00009517          	auipc	a0,0x9
    8001e4c0:	a7c50513          	addi	a0,a0,-1412 # 80026f38 <__func__.0+0x378>
    8001e4c4:	241060ef          	jal	80024f04 <printf>
    8001e4c8:	4511                	li	a0,4
    8001e4ca:	f2ce20ef          	jal	80000bf6 <goto_priv>
    8001e4ce:	fdfe20ef          	jal	800014ac <reset_state>
}
    8001e4d2:	60e2                	ld	ra,24(sp)
    8001e4d4:	6442                	ld	s0,16(sp)
    8001e4d6:	8526                	mv	a0,s1
    8001e4d8:	64a2                	ld	s1,8(sp)
    8001e4da:	6105                	addi	sp,sp,32
    8001e4dc:	8082                	ret

000000008001e4de <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    8001e4de:	1141                	addi	sp,sp,-16

    TEST_START();
    8001e4e0:	00008597          	auipc	a1,0x8
    8001e4e4:	22858593          	addi	a1,a1,552 # 80026708 <__func__.5>
    8001e4e8:	00009517          	auipc	a0,0x9
    8001e4ec:	9b850513          	addi	a0,a0,-1608 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_5(){
    8001e4f0:	e406                	sd	ra,8(sp)
    8001e4f2:	e022                	sd	s0,0(sp)
    TEST_START();
    8001e4f4:	211060ef          	jal	80024f04 <printf>
    8001e4f8:	4529                	li	a0,10
    8001e4fa:	015050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001e4fe:	4511                	li	a0,4
    8001e500:	ef6e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e504:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e508:	10000793          	li	a5,256
    8001e50c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e510:	20000793          	li	a5,512
    8001e514:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e518:	40000793          	li	a5,1024
    8001e51c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e520:	6785                	lui	a5,0x1
    8001e522:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e526:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000UL);
    8001e52a:	4785                	li	a5,1
    8001e52c:	07fe                	slli	a5,a5,0x1f
    8001e52e:	4705                	li	a4,1
    8001e530:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000UL);
    8001e534:	08100793          	li	a5,129
    8001e538:	07e2                	slli	a5,a5,0x18
    8001e53a:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e53e:	67a1                	lui	a5,0x8
    8001e540:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001e544:	0330000f          	fence	rw,rw
    8001e548:	0002b417          	auipc	s0,0x2b
    8001e54c:	ac840413          	addi	s0,s0,-1336 # 80049010 <excpt>
    8001e550:	0002b797          	auipc	a5,0x2b
    8001e554:	ae07bc23          	sd	zero,-1288(a5) # 80049048 <excpt+0x38>
    8001e558:	00e41023          	sh	a4,0(s0)
    8001e55c:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e560:	02171793          	slli	a5,a4,0x21
    8001e564:	40078793          	addi	a5,a5,1024
    8001e568:	00000297          	auipc	t0,0x0
    8001e56c:	00c28293          	addi	t0,t0,12 # 8001e574 <instruction_access_fault_5+0x96>
    8001e570:	02543c23          	sd	t0,56(s0)
    8001e574:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001e576:	0002b597          	auipc	a1,0x2b
    8001e57a:	a9b5c583          	lbu	a1,-1381(a1) # 80049011 <excpt+0x1>
    8001e57e:	00009517          	auipc	a0,0x9
    8001e582:	46a50513          	addi	a0,a0,1130 # 800279e8 <__func__.0+0xe28>
    8001e586:	17f060ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001e58a:	640c                	ld	a1,8(s0)
    8001e58c:	00009517          	auipc	a0,0x9
    8001e590:	45c50513          	addi	a0,a0,1116 # 800279e8 <__func__.0+0xe28>
    8001e594:	171060ef          	jal	80024f04 <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001e598:	08200593          	li	a1,130
    8001e59c:	0000f617          	auipc	a2,0xf
    8001e5a0:	6bc60613          	addi	a2,a2,1724 # 8002dc58 <__func__.0+0x7098>
    8001e5a4:	00009517          	auipc	a0,0x9
    8001e5a8:	91450513          	addi	a0,a0,-1772 # 80026eb8 <__func__.0+0x2f8>
    8001e5ac:	159060ef          	jal	80024f04 <printf>
    8001e5b0:	0002b797          	auipc	a5,0x2b
    8001e5b4:	a617c783          	lbu	a5,-1439(a5) # 80049011 <excpt+0x1>
    8001e5b8:	00009597          	auipc	a1,0x9
    8001e5bc:	8c858593          	addi	a1,a1,-1848 # 80026e80 <__func__.0+0x2c0>
    8001e5c0:	c789                	beqz	a5,8001e5ca <instruction_access_fault_5+0xec>
    8001e5c2:	00009597          	auipc	a1,0x9
    8001e5c6:	8ce58593          	addi	a1,a1,-1842 # 80026e90 <__func__.0+0x2d0>
    8001e5ca:	00009517          	auipc	a0,0x9
    8001e5ce:	90650513          	addi	a0,a0,-1786 # 80026ed0 <__func__.0+0x310>
    8001e5d2:	133060ef          	jal	80024f04 <printf>
    8001e5d6:	0002b797          	auipc	a5,0x2b
    8001e5da:	a3b7c783          	lbu	a5,-1477(a5) # 80049011 <excpt+0x1>
    8001e5de:	e7a1                	bnez	a5,8001e626 <instruction_access_fault_5+0x148>
    8001e5e0:	4529                	li	a0,10
    8001e5e2:	72c050ef          	jal	80023d0e <putchar>
    8001e5e6:	0002b797          	auipc	a5,0x2b
    8001e5ea:	a2b7c783          	lbu	a5,-1493(a5) # 80049011 <excpt+0x1>
    8001e5ee:	e795                	bnez	a5,8001e61a <instruction_access_fault_5+0x13c>
    8001e5f0:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001e5f2:	00009597          	auipc	a1,0x9
    8001e5f6:	88e58593          	addi	a1,a1,-1906 # 80026e80 <__func__.0+0x2c0>
    8001e5fa:	00009517          	auipc	a0,0x9
    8001e5fe:	93e50513          	addi	a0,a0,-1730 # 80026f38 <__func__.0+0x378>
    8001e602:	103060ef          	jal	80024f04 <printf>
    8001e606:	4511                	li	a0,4
    8001e608:	deee20ef          	jal	80000bf6 <goto_priv>
    8001e60c:	ea1e20ef          	jal	800014ac <reset_state>
}
    8001e610:	60a2                	ld	ra,8(sp)
    8001e612:	8522                	mv	a0,s0
    8001e614:	6402                	ld	s0,0(sp)
    8001e616:	0141                	addi	sp,sp,16
    8001e618:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001e61a:	4401                	li	s0,0
    TEST_END();
    8001e61c:	00009597          	auipc	a1,0x9
    8001e620:	87458593          	addi	a1,a1,-1932 # 80026e90 <__func__.0+0x2d0>
    8001e624:	bfd9                	j	8001e5fa <instruction_access_fault_5+0x11c>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001e626:	00009517          	auipc	a0,0x9
    8001e62a:	8b250513          	addi	a0,a0,-1870 # 80026ed8 <__func__.0+0x318>
    8001e62e:	0d7060ef          	jal	80024f04 <printf>
    8001e632:	02900513          	li	a0,41
    8001e636:	6d8050ef          	jal	80023d0e <putchar>
    8001e63a:	b75d                	j	8001e5e0 <instruction_access_fault_5+0x102>

000000008001e63c <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001e63c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e63e:	00008597          	auipc	a1,0x8
    8001e642:	0ea58593          	addi	a1,a1,234 # 80026728 <__func__.4>
    8001e646:	00009517          	auipc	a0,0x9
    8001e64a:	85a50513          	addi	a0,a0,-1958 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_6(){
    8001e64e:	ec06                	sd	ra,24(sp)
    8001e650:	e822                	sd	s0,16(sp)
    8001e652:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e654:	0b1060ef          	jal	80024f04 <printf>
    8001e658:	4529                	li	a0,10
    8001e65a:	6b4050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001e65e:	4511                	li	a0,4
    8001e660:	d96e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e664:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e668:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e66c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e670:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e674:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e678:	10000793          	li	a5,256
    8001e67c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e680:	20000793          	li	a5,512
    8001e684:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e688:	40000793          	li	a5,1024
    8001e68c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e690:	6785                	lui	a5,0x1
    8001e692:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e696:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e69a:	4785                	li	a5,1
    8001e69c:	07fe                	slli	a5,a5,0x1f
    8001e69e:	4485                	li	s1,1
    8001e6a0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e6a4:	08100793          	li	a5,129
    8001e6a8:	07e2                	slli	a5,a5,0x18
    8001e6aa:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e6ae:	08000793          	li	a5,128
    8001e6b2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e6b6:	67a1                	lui	a5,0x8
    8001e6b8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001e6bc:	450d                	li	a0,3
    8001e6be:	d38e20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e6c2:	0330000f          	fence	rw,rw
    8001e6c6:	0002b417          	auipc	s0,0x2b
    8001e6ca:	94a40413          	addi	s0,s0,-1718 # 80049010 <excpt>
    8001e6ce:	0002b797          	auipc	a5,0x2b
    8001e6d2:	9607bd23          	sd	zero,-1670(a5) # 80049048 <excpt+0x38>
    8001e6d6:	00941023          	sh	s1,0(s0)
    8001e6da:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e6de:	02149793          	slli	a5,s1,0x21
    8001e6e2:	40078793          	addi	a5,a5,1024
    8001e6e6:	00000297          	auipc	t0,0x0
    8001e6ea:	00c28293          	addi	t0,t0,12 # 8001e6f2 <instruction_access_fault_6+0xb6>
    8001e6ee:	02543c23          	sd	t0,56(s0)
    8001e6f2:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001e6f4:	08200593          	li	a1,130
    8001e6f8:	0000f617          	auipc	a2,0xf
    8001e6fc:	5a860613          	addi	a2,a2,1448 # 8002dca0 <__func__.0+0x70e0>
    8001e700:	00008517          	auipc	a0,0x8
    8001e704:	7b850513          	addi	a0,a0,1976 # 80026eb8 <__func__.0+0x2f8>
    8001e708:	7fc060ef          	jal	80024f04 <printf>
    8001e70c:	0002b797          	auipc	a5,0x2b
    8001e710:	9057c783          	lbu	a5,-1787(a5) # 80049011 <excpt+0x1>
    8001e714:	00008597          	auipc	a1,0x8
    8001e718:	77c58593          	addi	a1,a1,1916 # 80026e90 <__func__.0+0x2d0>
    8001e71c:	cf81                	beqz	a5,8001e734 <instruction_access_fault_6+0xf8>
    8001e71e:	641c                	ld	a5,8(s0)
    8001e720:	00008597          	auipc	a1,0x8
    8001e724:	76058593          	addi	a1,a1,1888 # 80026e80 <__func__.0+0x2c0>
    8001e728:	00978663          	beq	a5,s1,8001e734 <instruction_access_fault_6+0xf8>
    8001e72c:	00008597          	auipc	a1,0x8
    8001e730:	76458593          	addi	a1,a1,1892 # 80026e90 <__func__.0+0x2d0>
    8001e734:	00008517          	auipc	a0,0x8
    8001e738:	79c50513          	addi	a0,a0,1948 # 80026ed0 <__func__.0+0x310>
    8001e73c:	7c8060ef          	jal	80024f04 <printf>
    8001e740:	0002b797          	auipc	a5,0x2b
    8001e744:	8d17c783          	lbu	a5,-1839(a5) # 80049011 <excpt+0x1>
    8001e748:	c789                	beqz	a5,8001e752 <instruction_access_fault_6+0x116>
    8001e74a:	6418                	ld	a4,8(s0)
    8001e74c:	4785                	li	a5,1
    8001e74e:	00f70c63          	beq	a4,a5,8001e766 <instruction_access_fault_6+0x12a>
    8001e752:	00008517          	auipc	a0,0x8
    8001e756:	78650513          	addi	a0,a0,1926 # 80026ed8 <__func__.0+0x318>
    8001e75a:	7aa060ef          	jal	80024f04 <printf>
    8001e75e:	02900513          	li	a0,41
    8001e762:	5ac050ef          	jal	80023d0e <putchar>
    8001e766:	4529                	li	a0,10
    8001e768:	5a6050ef          	jal	80023d0e <putchar>
    8001e76c:	0002b497          	auipc	s1,0x2b
    8001e770:	8a54c483          	lbu	s1,-1883(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001e774:	00008597          	auipc	a1,0x8
    8001e778:	71c58593          	addi	a1,a1,1820 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001e77c:	cc91                	beqz	s1,8001e798 <instruction_access_fault_6+0x15c>
    8001e77e:	6418                	ld	a4,8(s0)
    8001e780:	4785                	li	a5,1
    TEST_END();
    8001e782:	00008597          	auipc	a1,0x8
    8001e786:	6fe58593          	addi	a1,a1,1790 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001e78a:	00f70763          	beq	a4,a5,8001e798 <instruction_access_fault_6+0x15c>
    8001e78e:	4481                	li	s1,0
    TEST_END();
    8001e790:	00008597          	auipc	a1,0x8
    8001e794:	70058593          	addi	a1,a1,1792 # 80026e90 <__func__.0+0x2d0>
    8001e798:	00008517          	auipc	a0,0x8
    8001e79c:	7a050513          	addi	a0,a0,1952 # 80026f38 <__func__.0+0x378>
    8001e7a0:	764060ef          	jal	80024f04 <printf>
    8001e7a4:	4511                	li	a0,4
    8001e7a6:	c50e20ef          	jal	80000bf6 <goto_priv>
    8001e7aa:	d03e20ef          	jal	800014ac <reset_state>
}
    8001e7ae:	60e2                	ld	ra,24(sp)
    8001e7b0:	6442                	ld	s0,16(sp)
    8001e7b2:	8526                	mv	a0,s1
    8001e7b4:	64a2                	ld	s1,8(sp)
    8001e7b6:	6105                	addi	sp,sp,32
    8001e7b8:	8082                	ret

000000008001e7ba <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    8001e7ba:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e7bc:	00008597          	auipc	a1,0x8
    8001e7c0:	f8c58593          	addi	a1,a1,-116 # 80026748 <__func__.3>
    8001e7c4:	00008517          	auipc	a0,0x8
    8001e7c8:	6dc50513          	addi	a0,a0,1756 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_7(){
    8001e7cc:	ec06                	sd	ra,24(sp)
    8001e7ce:	e822                	sd	s0,16(sp)
    8001e7d0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e7d2:	732060ef          	jal	80024f04 <printf>
    8001e7d6:	4529                	li	a0,10
    8001e7d8:	536050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001e7dc:	4511                	li	a0,4
    8001e7de:	c18e20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e7e2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e7e6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e7ea:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e7ee:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e7f2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e7f6:	10000793          	li	a5,256
    8001e7fa:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e7fe:	20000793          	li	a5,512
    8001e802:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e806:	40000793          	li	a5,1024
    8001e80a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e80e:	6785                	lui	a5,0x1
    8001e810:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e814:	3a07a073          	csrs	pmpcfg0,a5
    
    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e818:	4785                	li	a5,1
    8001e81a:	07fe                	slli	a5,a5,0x1f
    8001e81c:	4485                	li	s1,1
    8001e81e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e822:	08100793          	li	a5,129
    8001e826:	07e2                	slli	a5,a5,0x18
    8001e828:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e82c:	08000793          	li	a5,128
    8001e830:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e834:	67a1                	lui	a5,0x8
    8001e836:	3a07b073          	csrc	pmpcfg0,a5


    goto_priv(PRIV_HU);
    8001e83a:	8526                	mv	a0,s1
    8001e83c:	bbae20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e840:	0330000f          	fence	rw,rw
    8001e844:	0002a417          	auipc	s0,0x2a
    8001e848:	7cc40413          	addi	s0,s0,1996 # 80049010 <excpt>
    8001e84c:	0002a797          	auipc	a5,0x2a
    8001e850:	7e07be23          	sd	zero,2044(a5) # 80049048 <excpt+0x38>
    8001e854:	00941023          	sh	s1,0(s0)
    8001e858:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e85c:	02149793          	slli	a5,s1,0x21
    8001e860:	40078793          	addi	a5,a5,1024
    8001e864:	00000297          	auipc	t0,0x0
    8001e868:	00c28293          	addi	t0,t0,12 # 8001e870 <instruction_access_fault_7+0xb6>
    8001e86c:	02543c23          	sd	t0,56(s0)
    8001e870:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001e872:	08200593          	li	a1,130
    8001e876:	0000f617          	auipc	a2,0xf
    8001e87a:	47260613          	addi	a2,a2,1138 # 8002dce8 <__func__.0+0x7128>
    8001e87e:	00008517          	auipc	a0,0x8
    8001e882:	63a50513          	addi	a0,a0,1594 # 80026eb8 <__func__.0+0x2f8>
    8001e886:	67e060ef          	jal	80024f04 <printf>
    8001e88a:	0002a797          	auipc	a5,0x2a
    8001e88e:	7877c783          	lbu	a5,1927(a5) # 80049011 <excpt+0x1>
    8001e892:	00008597          	auipc	a1,0x8
    8001e896:	5fe58593          	addi	a1,a1,1534 # 80026e90 <__func__.0+0x2d0>
    8001e89a:	cf81                	beqz	a5,8001e8b2 <instruction_access_fault_7+0xf8>
    8001e89c:	641c                	ld	a5,8(s0)
    8001e89e:	00008597          	auipc	a1,0x8
    8001e8a2:	5e258593          	addi	a1,a1,1506 # 80026e80 <__func__.0+0x2c0>
    8001e8a6:	00978663          	beq	a5,s1,8001e8b2 <instruction_access_fault_7+0xf8>
    8001e8aa:	00008597          	auipc	a1,0x8
    8001e8ae:	5e658593          	addi	a1,a1,1510 # 80026e90 <__func__.0+0x2d0>
    8001e8b2:	00008517          	auipc	a0,0x8
    8001e8b6:	61e50513          	addi	a0,a0,1566 # 80026ed0 <__func__.0+0x310>
    8001e8ba:	64a060ef          	jal	80024f04 <printf>
    8001e8be:	0002a797          	auipc	a5,0x2a
    8001e8c2:	7537c783          	lbu	a5,1875(a5) # 80049011 <excpt+0x1>
    8001e8c6:	c789                	beqz	a5,8001e8d0 <instruction_access_fault_7+0x116>
    8001e8c8:	6418                	ld	a4,8(s0)
    8001e8ca:	4785                	li	a5,1
    8001e8cc:	00f70c63          	beq	a4,a5,8001e8e4 <instruction_access_fault_7+0x12a>
    8001e8d0:	00008517          	auipc	a0,0x8
    8001e8d4:	60850513          	addi	a0,a0,1544 # 80026ed8 <__func__.0+0x318>
    8001e8d8:	62c060ef          	jal	80024f04 <printf>
    8001e8dc:	02900513          	li	a0,41
    8001e8e0:	42e050ef          	jal	80023d0e <putchar>
    8001e8e4:	4529                	li	a0,10
    8001e8e6:	428050ef          	jal	80023d0e <putchar>
    8001e8ea:	0002a497          	auipc	s1,0x2a
    8001e8ee:	7274c483          	lbu	s1,1831(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );

    TEST_END();
    8001e8f2:	00008597          	auipc	a1,0x8
    8001e8f6:	59e58593          	addi	a1,a1,1438 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001e8fa:	cc91                	beqz	s1,8001e916 <instruction_access_fault_7+0x15c>
    8001e8fc:	6418                	ld	a4,8(s0)
    8001e8fe:	4785                	li	a5,1
    TEST_END();
    8001e900:	00008597          	auipc	a1,0x8
    8001e904:	58058593          	addi	a1,a1,1408 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001e908:	00f70763          	beq	a4,a5,8001e916 <instruction_access_fault_7+0x15c>
    8001e90c:	4481                	li	s1,0
    TEST_END();
    8001e90e:	00008597          	auipc	a1,0x8
    8001e912:	58258593          	addi	a1,a1,1410 # 80026e90 <__func__.0+0x2d0>
    8001e916:	00008517          	auipc	a0,0x8
    8001e91a:	62250513          	addi	a0,a0,1570 # 80026f38 <__func__.0+0x378>
    8001e91e:	5e6060ef          	jal	80024f04 <printf>
    8001e922:	4511                	li	a0,4
    8001e924:	ad2e20ef          	jal	80000bf6 <goto_priv>
    8001e928:	b85e20ef          	jal	800014ac <reset_state>
}
    8001e92c:	60e2                	ld	ra,24(sp)
    8001e92e:	6442                	ld	s0,16(sp)
    8001e930:	8526                	mv	a0,s1
    8001e932:	64a2                	ld	s1,8(sp)
    8001e934:	6105                	addi	sp,sp,32
    8001e936:	8082                	ret

000000008001e938 <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    8001e938:	1101                	addi	sp,sp,-32

    TEST_START();
    8001e93a:	00008597          	auipc	a1,0x8
    8001e93e:	e2e58593          	addi	a1,a1,-466 # 80026768 <__func__.2>
    8001e942:	00008517          	auipc	a0,0x8
    8001e946:	55e50513          	addi	a0,a0,1374 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_8(){
    8001e94a:	ec06                	sd	ra,24(sp)
    8001e94c:	e822                	sd	s0,16(sp)
    8001e94e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001e950:	5b4060ef          	jal	80024f04 <printf>
    8001e954:	4529                	li	a0,10
    8001e956:	3b8050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001e95a:	4511                	li	a0,4
    8001e95c:	a9ae20ef          	jal	80000bf6 <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001e960:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001e964:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001e968:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001e96c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001e970:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001e974:	10000793          	li	a5,256
    8001e978:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001e97c:	20000793          	li	a5,512
    8001e980:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001e984:	40000793          	li	a5,1024
    8001e988:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001e98c:	6785                	lui	a5,0x1
    8001e98e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001e992:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001e996:	4785                	li	a5,1
    8001e998:	07fe                	slli	a5,a5,0x1f
    8001e99a:	4485                	li	s1,1
    8001e99c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001e9a0:	08100793          	li	a5,129
    8001e9a4:	07e2                	slli	a5,a5,0x18
    8001e9a6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001e9aa:	08000793          	li	a5,128
    8001e9ae:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001e9b2:	67a1                	lui	a5,0x8
    8001e9b4:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001e9b8:	4501                	li	a0,0
    8001e9ba:	a3ce20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001e9be:	0330000f          	fence	rw,rw
    8001e9c2:	0002a417          	auipc	s0,0x2a
    8001e9c6:	64e40413          	addi	s0,s0,1614 # 80049010 <excpt>
    8001e9ca:	0002a797          	auipc	a5,0x2a
    8001e9ce:	6607bf23          	sd	zero,1662(a5) # 80049048 <excpt+0x38>
    8001e9d2:	00941023          	sh	s1,0(s0)
    8001e9d6:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001e9da:	02149793          	slli	a5,s1,0x21
    8001e9de:	40078793          	addi	a5,a5,1024
    8001e9e2:	00000297          	auipc	t0,0x0
    8001e9e6:	00c28293          	addi	t0,t0,12 # 8001e9ee <instruction_access_fault_8+0xb6>
    8001e9ea:	02543c23          	sd	t0,56(s0)
    8001e9ee:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001e9f0:	08200593          	li	a1,130
    8001e9f4:	0000f617          	auipc	a2,0xf
    8001e9f8:	33c60613          	addi	a2,a2,828 # 8002dd30 <__func__.0+0x7170>
    8001e9fc:	00008517          	auipc	a0,0x8
    8001ea00:	4bc50513          	addi	a0,a0,1212 # 80026eb8 <__func__.0+0x2f8>
    8001ea04:	500060ef          	jal	80024f04 <printf>
    8001ea08:	0002a797          	auipc	a5,0x2a
    8001ea0c:	6097c783          	lbu	a5,1545(a5) # 80049011 <excpt+0x1>
    8001ea10:	00008597          	auipc	a1,0x8
    8001ea14:	48058593          	addi	a1,a1,1152 # 80026e90 <__func__.0+0x2d0>
    8001ea18:	cf81                	beqz	a5,8001ea30 <instruction_access_fault_8+0xf8>
    8001ea1a:	641c                	ld	a5,8(s0)
    8001ea1c:	00008597          	auipc	a1,0x8
    8001ea20:	46458593          	addi	a1,a1,1124 # 80026e80 <__func__.0+0x2c0>
    8001ea24:	00978663          	beq	a5,s1,8001ea30 <instruction_access_fault_8+0xf8>
    8001ea28:	00008597          	auipc	a1,0x8
    8001ea2c:	46858593          	addi	a1,a1,1128 # 80026e90 <__func__.0+0x2d0>
    8001ea30:	00008517          	auipc	a0,0x8
    8001ea34:	4a050513          	addi	a0,a0,1184 # 80026ed0 <__func__.0+0x310>
    8001ea38:	4cc060ef          	jal	80024f04 <printf>
    8001ea3c:	0002a797          	auipc	a5,0x2a
    8001ea40:	5d57c783          	lbu	a5,1493(a5) # 80049011 <excpt+0x1>
    8001ea44:	c789                	beqz	a5,8001ea4e <instruction_access_fault_8+0x116>
    8001ea46:	6418                	ld	a4,8(s0)
    8001ea48:	4785                	li	a5,1
    8001ea4a:	00f70c63          	beq	a4,a5,8001ea62 <instruction_access_fault_8+0x12a>
    8001ea4e:	00008517          	auipc	a0,0x8
    8001ea52:	48a50513          	addi	a0,a0,1162 # 80026ed8 <__func__.0+0x318>
    8001ea56:	4ae060ef          	jal	80024f04 <printf>
    8001ea5a:	02900513          	li	a0,41
    8001ea5e:	2b0050ef          	jal	80023d0e <putchar>
    8001ea62:	4529                	li	a0,10
    8001ea64:	2aa050ef          	jal	80023d0e <putchar>
    8001ea68:	0002a497          	auipc	s1,0x2a
    8001ea6c:	5a94c483          	lbu	s1,1449(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ea70:	00008597          	auipc	a1,0x8
    8001ea74:	42058593          	addi	a1,a1,1056 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001ea78:	cc91                	beqz	s1,8001ea94 <instruction_access_fault_8+0x15c>
    8001ea7a:	6418                	ld	a4,8(s0)
    8001ea7c:	4785                	li	a5,1
    TEST_END();
    8001ea7e:	00008597          	auipc	a1,0x8
    8001ea82:	40258593          	addi	a1,a1,1026 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001ea86:	00f70763          	beq	a4,a5,8001ea94 <instruction_access_fault_8+0x15c>
    8001ea8a:	4481                	li	s1,0
    TEST_END();
    8001ea8c:	00008597          	auipc	a1,0x8
    8001ea90:	40458593          	addi	a1,a1,1028 # 80026e90 <__func__.0+0x2d0>
    8001ea94:	00008517          	auipc	a0,0x8
    8001ea98:	4a450513          	addi	a0,a0,1188 # 80026f38 <__func__.0+0x378>
    8001ea9c:	468060ef          	jal	80024f04 <printf>
    8001eaa0:	4511                	li	a0,4
    8001eaa2:	954e20ef          	jal	80000bf6 <goto_priv>
    8001eaa6:	a07e20ef          	jal	800014ac <reset_state>
}
    8001eaaa:	60e2                	ld	ra,24(sp)
    8001eaac:	6442                	ld	s0,16(sp)
    8001eaae:	8526                	mv	a0,s1
    8001eab0:	64a2                	ld	s1,8(sp)
    8001eab2:	6105                	addi	sp,sp,32
    8001eab4:	8082                	ret

000000008001eab6 <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001eab6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001eab8:	00008597          	auipc	a1,0x8
    8001eabc:	cd058593          	addi	a1,a1,-816 # 80026788 <__func__.1>
    8001eac0:	00008517          	auipc	a0,0x8
    8001eac4:	3e050513          	addi	a0,a0,992 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_9(){
    8001eac8:	ec06                	sd	ra,24(sp)
    8001eaca:	e822                	sd	s0,16(sp)
    8001eacc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001eace:	436060ef          	jal	80024f04 <printf>
    8001ead2:	4529                	li	a0,10
    8001ead4:	23a050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001ead8:	4511                	li	a0,4
    8001eada:	91ce20ef          	jal	80000bf6 <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001eade:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001eae2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001eae6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001eaea:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001eaee:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001eaf2:	10000793          	li	a5,256
    8001eaf6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001eafa:	20000793          	li	a5,512
    8001eafe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001eb02:	40000793          	li	a5,1024
    8001eb06:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001eb0a:	6785                	lui	a5,0x1
    8001eb0c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001eb10:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001eb14:	4785                	li	a5,1
    8001eb16:	07fe                	slli	a5,a5,0x1f
    8001eb18:	4485                	li	s1,1
    8001eb1a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001eb1e:	08100793          	li	a5,129
    8001eb22:	07e2                	slli	a5,a5,0x18
    8001eb24:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001eb28:	08000793          	li	a5,128
    8001eb2c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001eb30:	67a1                	lui	a5,0x8
    8001eb32:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001eb36:	4501                	li	a0,0
    8001eb38:	8bee20ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001eb3c:	0330000f          	fence	rw,rw
    8001eb40:	0002a417          	auipc	s0,0x2a
    8001eb44:	4d040413          	addi	s0,s0,1232 # 80049010 <excpt>
    8001eb48:	0002a797          	auipc	a5,0x2a
    8001eb4c:	5007b023          	sd	zero,1280(a5) # 80049048 <excpt+0x38>
    8001eb50:	00941023          	sh	s1,0(s0)
    8001eb54:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x1fffffffeUL << 2);
    8001eb58:	02349793          	slli	a5,s1,0x23
    8001eb5c:	17e1                	addi	a5,a5,-8
    8001eb5e:	00000297          	auipc	t0,0x0
    8001eb62:	00c28293          	addi	t0,t0,12 # 8001eb6a <instruction_access_fault_9+0xb4>
    8001eb66:	02543c23          	sd	t0,56(s0)
    8001eb6a:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001eb6c:	08200593          	li	a1,130
    8001eb70:	0000f617          	auipc	a2,0xf
    8001eb74:	1f860613          	addi	a2,a2,504 # 8002dd68 <__func__.0+0x71a8>
    8001eb78:	00008517          	auipc	a0,0x8
    8001eb7c:	34050513          	addi	a0,a0,832 # 80026eb8 <__func__.0+0x2f8>
    8001eb80:	384060ef          	jal	80024f04 <printf>
    8001eb84:	0002a797          	auipc	a5,0x2a
    8001eb88:	48d7c783          	lbu	a5,1165(a5) # 80049011 <excpt+0x1>
    8001eb8c:	00008597          	auipc	a1,0x8
    8001eb90:	30458593          	addi	a1,a1,772 # 80026e90 <__func__.0+0x2d0>
    8001eb94:	cf81                	beqz	a5,8001ebac <instruction_access_fault_9+0xf6>
    8001eb96:	641c                	ld	a5,8(s0)
    8001eb98:	00008597          	auipc	a1,0x8
    8001eb9c:	2e858593          	addi	a1,a1,744 # 80026e80 <__func__.0+0x2c0>
    8001eba0:	00978663          	beq	a5,s1,8001ebac <instruction_access_fault_9+0xf6>
    8001eba4:	00008597          	auipc	a1,0x8
    8001eba8:	2ec58593          	addi	a1,a1,748 # 80026e90 <__func__.0+0x2d0>
    8001ebac:	00008517          	auipc	a0,0x8
    8001ebb0:	32450513          	addi	a0,a0,804 # 80026ed0 <__func__.0+0x310>
    8001ebb4:	350060ef          	jal	80024f04 <printf>
    8001ebb8:	0002a797          	auipc	a5,0x2a
    8001ebbc:	4597c783          	lbu	a5,1113(a5) # 80049011 <excpt+0x1>
    8001ebc0:	c789                	beqz	a5,8001ebca <instruction_access_fault_9+0x114>
    8001ebc2:	6418                	ld	a4,8(s0)
    8001ebc4:	4785                	li	a5,1
    8001ebc6:	00f70c63          	beq	a4,a5,8001ebde <instruction_access_fault_9+0x128>
    8001ebca:	00008517          	auipc	a0,0x8
    8001ebce:	30e50513          	addi	a0,a0,782 # 80026ed8 <__func__.0+0x318>
    8001ebd2:	332060ef          	jal	80024f04 <printf>
    8001ebd6:	02900513          	li	a0,41
    8001ebda:	134050ef          	jal	80023d0e <putchar>
    8001ebde:	4529                	li	a0,10
    8001ebe0:	12e050ef          	jal	80023d0e <putchar>
    8001ebe4:	0002a497          	auipc	s1,0x2a
    8001ebe8:	42d4c483          	lbu	s1,1069(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ebec:	00008597          	auipc	a1,0x8
    8001ebf0:	2a458593          	addi	a1,a1,676 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001ebf4:	cc91                	beqz	s1,8001ec10 <instruction_access_fault_9+0x15a>
    8001ebf6:	6418                	ld	a4,8(s0)
    8001ebf8:	4785                	li	a5,1
    TEST_END();
    8001ebfa:	00008597          	auipc	a1,0x8
    8001ebfe:	28658593          	addi	a1,a1,646 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001ec02:	00f70763          	beq	a4,a5,8001ec10 <instruction_access_fault_9+0x15a>
    8001ec06:	4481                	li	s1,0
    TEST_END();
    8001ec08:	00008597          	auipc	a1,0x8
    8001ec0c:	28858593          	addi	a1,a1,648 # 80026e90 <__func__.0+0x2d0>
    8001ec10:	00008517          	auipc	a0,0x8
    8001ec14:	32850513          	addi	a0,a0,808 # 80026f38 <__func__.0+0x378>
    8001ec18:	2ec060ef          	jal	80024f04 <printf>
    8001ec1c:	4511                	li	a0,4
    8001ec1e:	fd9e10ef          	jal	80000bf6 <goto_priv>
    8001ec22:	88be20ef          	jal	800014ac <reset_state>
}
    8001ec26:	60e2                	ld	ra,24(sp)
    8001ec28:	6442                	ld	s0,16(sp)
    8001ec2a:	8526                	mv	a0,s1
    8001ec2c:	64a2                	ld	s1,8(sp)
    8001ec2e:	6105                	addi	sp,sp,32
    8001ec30:	8082                	ret

000000008001ec32 <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001ec32:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ec34:	00008597          	auipc	a1,0x8
    8001ec38:	b7458593          	addi	a1,a1,-1164 # 800267a8 <__func__.0>
    8001ec3c:	00008517          	auipc	a0,0x8
    8001ec40:	26450513          	addi	a0,a0,612 # 80026ea0 <__func__.0+0x2e0>
bool instruction_access_fault_10(){
    8001ec44:	ec06                	sd	ra,24(sp)
    8001ec46:	e822                	sd	s0,16(sp)
    8001ec48:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ec4a:	2ba060ef          	jal	80024f04 <printf>
    8001ec4e:	4529                	li	a0,10
    8001ec50:	0be050ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    8001ec54:	4511                	li	a0,4
    8001ec56:	fa1e10ef          	jal	80000bf6 <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ec5a:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ec5e:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ec62:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ec66:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ec6a:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x90000000);
    8001ec6e:	47a5                	li	a5,9
    8001ec70:	07f2                	slli	a5,a5,0x1c
    8001ec72:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001ec76:	08000793          	li	a5,128
    8001ec7a:	3a07a073          	csrs	pmpcfg0,a5
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));printf("pmpcfg2=%llx\n",CSRR(CSR_PMPCFG2));
    8001ec7e:	3a0025f3          	csrr	a1,pmpcfg0
    8001ec82:	0000e517          	auipc	a0,0xe
    8001ec86:	75e50513          	addi	a0,a0,1886 # 8002d3e0 <__func__.0+0x6820>
    8001ec8a:	27a060ef          	jal	80024f04 <printf>
    8001ec8e:	3a2025f3          	csrr	a1,pmpcfg2
    8001ec92:	0000f517          	auipc	a0,0xf
    8001ec96:	14650513          	addi	a0,a0,326 # 8002ddd8 <__func__.0+0x7218>
    8001ec9a:	26a060ef          	jal	80024f04 <printf>
    goto_priv(PRIV_HS);
    8001ec9e:	450d                	li	a0,3
    8001eca0:	f57e10ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001eca4:	0330000f          	fence	rw,rw
    8001eca8:	0002a417          	auipc	s0,0x2a
    8001ecac:	36840413          	addi	s0,s0,872 # 80049010 <excpt>
    8001ecb0:	4485                	li	s1,1
    8001ecb2:	0002a797          	auipc	a5,0x2a
    8001ecb6:	3807bb23          	sd	zero,918(a5) # 80049048 <excpt+0x38>
    8001ecba:	00941023          	sh	s1,0(s0)
    8001ecbe:	0330000f          	fence	rw,rw
    
    TEST_EXEC_EXCEPT(0x9f000000UL << 2);
    8001ecc2:	09f00793          	li	a5,159
    8001ecc6:	07ea                	slli	a5,a5,0x1a
    8001ecc8:	00000297          	auipc	t0,0x0
    8001eccc:	00c28293          	addi	t0,t0,12 # 8001ecd4 <instruction_access_fault_10+0xa2>
    8001ecd0:	02543c23          	sd	t0,56(s0)
    8001ecd4:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001ecd6:	08200593          	li	a1,130
    8001ecda:	0000f617          	auipc	a2,0xf
    8001ecde:	10e60613          	addi	a2,a2,270 # 8002dde8 <__func__.0+0x7228>
    8001ece2:	00008517          	auipc	a0,0x8
    8001ece6:	1d650513          	addi	a0,a0,470 # 80026eb8 <__func__.0+0x2f8>
    8001ecea:	21a060ef          	jal	80024f04 <printf>
    8001ecee:	0002a797          	auipc	a5,0x2a
    8001ecf2:	3237c783          	lbu	a5,803(a5) # 80049011 <excpt+0x1>
    8001ecf6:	00008597          	auipc	a1,0x8
    8001ecfa:	19a58593          	addi	a1,a1,410 # 80026e90 <__func__.0+0x2d0>
    8001ecfe:	cf81                	beqz	a5,8001ed16 <instruction_access_fault_10+0xe4>
    8001ed00:	641c                	ld	a5,8(s0)
    8001ed02:	00008597          	auipc	a1,0x8
    8001ed06:	17e58593          	addi	a1,a1,382 # 80026e80 <__func__.0+0x2c0>
    8001ed0a:	00978663          	beq	a5,s1,8001ed16 <instruction_access_fault_10+0xe4>
    8001ed0e:	00008597          	auipc	a1,0x8
    8001ed12:	18258593          	addi	a1,a1,386 # 80026e90 <__func__.0+0x2d0>
    8001ed16:	00008517          	auipc	a0,0x8
    8001ed1a:	1ba50513          	addi	a0,a0,442 # 80026ed0 <__func__.0+0x310>
    8001ed1e:	1e6060ef          	jal	80024f04 <printf>
    8001ed22:	0002a797          	auipc	a5,0x2a
    8001ed26:	2ef7c783          	lbu	a5,751(a5) # 80049011 <excpt+0x1>
    8001ed2a:	c789                	beqz	a5,8001ed34 <instruction_access_fault_10+0x102>
    8001ed2c:	6418                	ld	a4,8(s0)
    8001ed2e:	4785                	li	a5,1
    8001ed30:	00f70c63          	beq	a4,a5,8001ed48 <instruction_access_fault_10+0x116>
    8001ed34:	00008517          	auipc	a0,0x8
    8001ed38:	1a450513          	addi	a0,a0,420 # 80026ed8 <__func__.0+0x318>
    8001ed3c:	1c8060ef          	jal	80024f04 <printf>
    8001ed40:	02900513          	li	a0,41
    8001ed44:	7cb040ef          	jal	80023d0e <putchar>
    8001ed48:	4529                	li	a0,10
    8001ed4a:	7c5040ef          	jal	80023d0e <putchar>
    8001ed4e:	0002a497          	auipc	s1,0x2a
    8001ed52:	2c34c483          	lbu	s1,707(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ed56:	00008597          	auipc	a1,0x8
    8001ed5a:	13a58593          	addi	a1,a1,314 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001ed5e:	cc91                	beqz	s1,8001ed7a <instruction_access_fault_10+0x148>
    8001ed60:	6418                	ld	a4,8(s0)
    8001ed62:	4785                	li	a5,1
    TEST_END();
    8001ed64:	00008597          	auipc	a1,0x8
    8001ed68:	11c58593          	addi	a1,a1,284 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001ed6c:	00f70763          	beq	a4,a5,8001ed7a <instruction_access_fault_10+0x148>
    8001ed70:	4481                	li	s1,0
    TEST_END();
    8001ed72:	00008597          	auipc	a1,0x8
    8001ed76:	11e58593          	addi	a1,a1,286 # 80026e90 <__func__.0+0x2d0>
    8001ed7a:	00008517          	auipc	a0,0x8
    8001ed7e:	1be50513          	addi	a0,a0,446 # 80026f38 <__func__.0+0x378>
    8001ed82:	182060ef          	jal	80024f04 <printf>
    8001ed86:	4511                	li	a0,4
    8001ed88:	e6fe10ef          	jal	80000bf6 <goto_priv>
    8001ed8c:	f20e20ef          	jal	800014ac <reset_state>
    8001ed90:	60e2                	ld	ra,24(sp)
    8001ed92:	6442                	ld	s0,16(sp)
    8001ed94:	8526                	mv	a0,s1
    8001ed96:	64a2                	ld	s1,8(sp)
    8001ed98:	6105                	addi	sp,sp,32
    8001ed9a:	8082                	ret

000000008001ed9c <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001ed9c:	1101                	addi	sp,sp,-32

TEST_START();
    8001ed9e:	00008597          	auipc	a1,0x8
    8001eda2:	a2a58593          	addi	a1,a1,-1494 # 800267c8 <__func__.9>
    8001eda6:	00008517          	auipc	a0,0x8
    8001edaa:	0fa50513          	addi	a0,a0,250 # 80026ea0 <__func__.0+0x2e0>
bool mstatus_csr_tests_1(){
    8001edae:	ec06                	sd	ra,24(sp)
    8001edb0:	e822                	sd	s0,16(sp)
    8001edb2:	e426                	sd	s1,8(sp)
TEST_START();
    8001edb4:	150060ef          	jal	80024f04 <printf>
    8001edb8:	4529                	li	a0,10
    8001edba:	755040ef          	jal	80023d0e <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    8001edbe:	450d                	li	a0,3
    8001edc0:	e37e10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001edc4:	81de10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001edc8:	a5be10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001edcc:	8e5e10ef          	jal	800006b0 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001edd0:	4511                	li	a0,4
    8001edd2:	e25e10ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    8001edd6:	000407b7          	lui	a5,0x40
    8001edda:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001edde:	0330000f          	fence	rw,rw
    8001ede2:	0002a417          	auipc	s0,0x2a
    8001ede6:	22e40413          	addi	s0,s0,558 # 80049010 <excpt>
    8001edea:	4785                	li	a5,1
    8001edec:	0002a717          	auipc	a4,0x2a
    8001edf0:	24073e23          	sd	zero,604(a4) # 80049048 <excpt+0x38>
    8001edf4:	00f41023          	sh	a5,0(s0)
    8001edf8:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    8001edfc:	450d                	li	a0,3
    8001edfe:	df9e10ef          	jal	80000bf6 <goto_priv>
    asm volatile(
    8001ee02:	000807b7          	lui	a5,0x80
    8001ee06:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001ee08:	07b6                	slli	a5,a5,0xd
    8001ee0a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001ee0e:	08200593          	li	a1,130
    8001ee12:	0000f617          	auipc	a2,0xf
    8001ee16:	03660613          	addi	a2,a2,54 # 8002de48 <__func__.0+0x7288>
    8001ee1a:	00008517          	auipc	a0,0x8
    8001ee1e:	09e50513          	addi	a0,a0,158 # 80026eb8 <__func__.0+0x2f8>
    8001ee22:	0e2060ef          	jal	80024f04 <printf>
    8001ee26:	0002a797          	auipc	a5,0x2a
    8001ee2a:	1eb7c783          	lbu	a5,491(a5) # 80049011 <excpt+0x1>
    8001ee2e:	00008597          	auipc	a1,0x8
    8001ee32:	06258593          	addi	a1,a1,98 # 80026e90 <__func__.0+0x2d0>
    8001ee36:	cf89                	beqz	a5,8001ee50 <mstatus_csr_tests_1+0xb4>
    8001ee38:	6418                	ld	a4,8(s0)
    8001ee3a:	47b5                	li	a5,13
    8001ee3c:	00008597          	auipc	a1,0x8
    8001ee40:	04458593          	addi	a1,a1,68 # 80026e80 <__func__.0+0x2c0>
    8001ee44:	00f70663          	beq	a4,a5,8001ee50 <mstatus_csr_tests_1+0xb4>
    8001ee48:	00008597          	auipc	a1,0x8
    8001ee4c:	04858593          	addi	a1,a1,72 # 80026e90 <__func__.0+0x2d0>
    8001ee50:	00008517          	auipc	a0,0x8
    8001ee54:	08050513          	addi	a0,a0,128 # 80026ed0 <__func__.0+0x310>
    8001ee58:	0ac060ef          	jal	80024f04 <printf>
    8001ee5c:	0002a797          	auipc	a5,0x2a
    8001ee60:	1b57c783          	lbu	a5,437(a5) # 80049011 <excpt+0x1>
    8001ee64:	c789                	beqz	a5,8001ee6e <mstatus_csr_tests_1+0xd2>
    8001ee66:	6418                	ld	a4,8(s0)
    8001ee68:	47b5                	li	a5,13
    8001ee6a:	00f70c63          	beq	a4,a5,8001ee82 <mstatus_csr_tests_1+0xe6>
    8001ee6e:	00008517          	auipc	a0,0x8
    8001ee72:	06a50513          	addi	a0,a0,106 # 80026ed8 <__func__.0+0x318>
    8001ee76:	08e060ef          	jal	80024f04 <printf>
    8001ee7a:	02900513          	li	a0,41
    8001ee7e:	691040ef          	jal	80023d0e <putchar>
    8001ee82:	4529                	li	a0,10
    8001ee84:	68b040ef          	jal	80023d0e <putchar>
    8001ee88:	0002a497          	auipc	s1,0x2a
    8001ee8c:	1894c483          	lbu	s1,393(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001ee90:	00008597          	auipc	a1,0x8
    8001ee94:	00058593          	mv	a1,a1
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001ee98:	cc91                	beqz	s1,8001eeb4 <mstatus_csr_tests_1+0x118>
    8001ee9a:	6418                	ld	a4,8(s0)
    8001ee9c:	47b5                	li	a5,13
    TEST_END();
    8001ee9e:	00008597          	auipc	a1,0x8
    8001eea2:	fe258593          	addi	a1,a1,-30 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001eea6:	00f70763          	beq	a4,a5,8001eeb4 <mstatus_csr_tests_1+0x118>
    8001eeaa:	4481                	li	s1,0
    TEST_END();
    8001eeac:	00008597          	auipc	a1,0x8
    8001eeb0:	fe458593          	addi	a1,a1,-28 # 80026e90 <__func__.0+0x2d0>
    8001eeb4:	00008517          	auipc	a0,0x8
    8001eeb8:	08450513          	addi	a0,a0,132 # 80026f38 <__func__.0+0x378>
    8001eebc:	048060ef          	jal	80024f04 <printf>
    8001eec0:	4511                	li	a0,4
    8001eec2:	d35e10ef          	jal	80000bf6 <goto_priv>
    8001eec6:	de6e20ef          	jal	800014ac <reset_state>
}
    8001eeca:	60e2                	ld	ra,24(sp)
    8001eecc:	6442                	ld	s0,16(sp)
    8001eece:	8526                	mv	a0,s1
    8001eed0:	64a2                	ld	s1,8(sp)
    8001eed2:	6105                	addi	sp,sp,32
    8001eed4:	8082                	ret

000000008001eed6 <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    8001eed6:	1141                	addi	sp,sp,-16

    TEST_START();
    8001eed8:	00008597          	auipc	a1,0x8
    8001eedc:	90858593          	addi	a1,a1,-1784 # 800267e0 <__func__.7>
    8001eee0:	00008517          	auipc	a0,0x8
    8001eee4:	fc050513          	addi	a0,a0,-64 # 80026ea0 <__func__.0+0x2e0>
bool mstatus_csr_tests_2(){
    8001eee8:	e406                	sd	ra,8(sp)
    8001eeea:	e022                	sd	s0,0(sp)
    TEST_START();
    8001eeec:	018060ef          	jal	80024f04 <printf>
    8001eef0:	4529                	li	a0,10
    8001eef2:	61d040ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001eef6:	450d                	li	a0,3
    8001eef8:	cffe10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001eefc:	ee4e10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001ef00:	923e10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001ef04:	face10ef          	jal	800006b0 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001ef08:	4511                	li	a0,4
    8001ef0a:	cede10ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    8001ef0e:	000407b7          	lui	a5,0x40
    8001ef12:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001ef16:	0330000f          	fence	rw,rw
    8001ef1a:	0002a417          	auipc	s0,0x2a
    8001ef1e:	0f640413          	addi	s0,s0,246 # 80049010 <excpt>
    8001ef22:	4785                	li	a5,1
    8001ef24:	0002a717          	auipc	a4,0x2a
    8001ef28:	12073223          	sd	zero,292(a4) # 80049048 <excpt+0x38>
    8001ef2c:	00f41023          	sh	a5,0(s0)
    8001ef30:	0330000f          	fence	rw,rw

    goto_priv(PRIV_HS);
    8001ef34:	450d                	li	a0,3
    8001ef36:	cc1e10ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001ef3a:	4509                	li	a0,2
    8001ef3c:	bdbe10ef          	jal	80000b16 <set_prev_priv>
    8001ef40:	000807b7          	lui	a5,0x80
    8001ef44:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001ef46:	07b6                	slli	a5,a5,0xd
    8001ef48:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    8001ef4c:	0002a597          	auipc	a1,0x2a
    8001ef50:	0c55c583          	lbu	a1,197(a1) # 80049011 <excpt+0x1>
    8001ef54:	00009517          	auipc	a0,0x9
    8001ef58:	a9450513          	addi	a0,a0,-1388 # 800279e8 <__func__.0+0xe28>
    8001ef5c:	7a9050ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001ef60:	640c                	ld	a1,8(s0)
    8001ef62:	00009517          	auipc	a0,0x9
    8001ef66:	a8650513          	addi	a0,a0,-1402 # 800279e8 <__func__.0+0xe28>
    8001ef6a:	79b050ef          	jal	80024f04 <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001ef6e:	08200593          	li	a1,130
    8001ef72:	0000f617          	auipc	a2,0xf
    8001ef76:	f0e60613          	addi	a2,a2,-242 # 8002de80 <__func__.0+0x72c0>
    8001ef7a:	00008517          	auipc	a0,0x8
    8001ef7e:	f3e50513          	addi	a0,a0,-194 # 80026eb8 <__func__.0+0x2f8>
    8001ef82:	783050ef          	jal	80024f04 <printf>
    8001ef86:	0002a797          	auipc	a5,0x2a
    8001ef8a:	08b7c783          	lbu	a5,139(a5) # 80049011 <excpt+0x1>
    8001ef8e:	00008597          	auipc	a1,0x8
    8001ef92:	ef258593          	addi	a1,a1,-270 # 80026e80 <__func__.0+0x2c0>
    8001ef96:	c789                	beqz	a5,8001efa0 <mstatus_csr_tests_2+0xca>
    8001ef98:	00008597          	auipc	a1,0x8
    8001ef9c:	ef858593          	addi	a1,a1,-264 # 80026e90 <__func__.0+0x2d0>
    8001efa0:	00008517          	auipc	a0,0x8
    8001efa4:	f3050513          	addi	a0,a0,-208 # 80026ed0 <__func__.0+0x310>
    8001efa8:	75d050ef          	jal	80024f04 <printf>
    8001efac:	0002a797          	auipc	a5,0x2a
    8001efb0:	0657c783          	lbu	a5,101(a5) # 80049011 <excpt+0x1>
    8001efb4:	e7a1                	bnez	a5,8001effc <mstatus_csr_tests_2+0x126>
    8001efb6:	4529                	li	a0,10
    8001efb8:	557040ef          	jal	80023d0e <putchar>
    8001efbc:	0002a797          	auipc	a5,0x2a
    8001efc0:	0557c783          	lbu	a5,85(a5) # 80049011 <excpt+0x1>
    8001efc4:	e795                	bnez	a5,8001eff0 <mstatus_csr_tests_2+0x11a>
    8001efc6:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001efc8:	00008597          	auipc	a1,0x8
    8001efcc:	eb858593          	addi	a1,a1,-328 # 80026e80 <__func__.0+0x2c0>
    8001efd0:	00008517          	auipc	a0,0x8
    8001efd4:	f6850513          	addi	a0,a0,-152 # 80026f38 <__func__.0+0x378>
    8001efd8:	72d050ef          	jal	80024f04 <printf>
    8001efdc:	4511                	li	a0,4
    8001efde:	c19e10ef          	jal	80000bf6 <goto_priv>
    8001efe2:	ccae20ef          	jal	800014ac <reset_state>
}
    8001efe6:	60a2                	ld	ra,8(sp)
    8001efe8:	8522                	mv	a0,s0
    8001efea:	6402                	ld	s0,0(sp)
    8001efec:	0141                	addi	sp,sp,16
    8001efee:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001eff0:	4401                	li	s0,0
    TEST_END();
    8001eff2:	00008597          	auipc	a1,0x8
    8001eff6:	e9e58593          	addi	a1,a1,-354 # 80026e90 <__func__.0+0x2d0>
    8001effa:	bfd9                	j	8001efd0 <mstatus_csr_tests_2+0xfa>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001effc:	00008517          	auipc	a0,0x8
    8001f000:	edc50513          	addi	a0,a0,-292 # 80026ed8 <__func__.0+0x318>
    8001f004:	701050ef          	jal	80024f04 <printf>
    8001f008:	02900513          	li	a0,41
    8001f00c:	503040ef          	jal	80023d0e <putchar>
    8001f010:	b75d                	j	8001efb6 <mstatus_csr_tests_2+0xe0>

000000008001f012 <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    8001f012:	1101                	addi	sp,sp,-32

    TEST_START();
    8001f014:	00007597          	auipc	a1,0x7
    8001f018:	7e458593          	addi	a1,a1,2020 # 800267f8 <__func__.6>
    8001f01c:	00008517          	auipc	a0,0x8
    8001f020:	e8450513          	addi	a0,a0,-380 # 80026ea0 <__func__.0+0x2e0>
bool mstatus_csr_tests_3(){
    8001f024:	ec06                	sd	ra,24(sp)
    8001f026:	e822                	sd	s0,16(sp)
    8001f028:	e426                	sd	s1,8(sp)
    TEST_START();
    8001f02a:	6db050ef          	jal	80024f04 <printf>
    8001f02e:	4529                	li	a0,10
    8001f030:	4df040ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001f034:	450d                	li	a0,3
    8001f036:	bc1e10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001f03a:	da6e10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001f03e:	fe4e10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001f042:	e6ee10ef          	jal	800006b0 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    8001f046:	4511                	li	a0,4
    8001f048:	bafe10ef          	jal	80000bf6 <goto_priv>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    8001f04c:	000807b7          	lui	a5,0x80
    8001f050:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8001f054:	450d                	li	a0,3
    8001f056:	ba1e10ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001f05a:	4509                	li	a0,2
    8001f05c:	abbe10ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001f060:	0330000f          	fence	rw,rw
    8001f064:	0002a417          	auipc	s0,0x2a
    8001f068:	fac40413          	addi	s0,s0,-84 # 80049010 <excpt>
    8001f06c:	4785                	li	a5,1
    8001f06e:	0002a717          	auipc	a4,0x2a
    8001f072:	fc073d23          	sd	zero,-38(a4) # 80049048 <excpt+0x38>
    8001f076:	00f41023          	sh	a5,0(s0)
    8001f07a:	0330000f          	fence	rw,rw
    8001f07e:	001007b7          	lui	a5,0x100
    8001f082:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001f086:	07b2                	slli	a5,a5,0xc
    8001f088:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    8001f08c:	0002a597          	auipc	a1,0x2a
    8001f090:	f855c583          	lbu	a1,-123(a1) # 80049011 <excpt+0x1>
    8001f094:	00009517          	auipc	a0,0x9
    8001f098:	95450513          	addi	a0,a0,-1708 # 800279e8 <__func__.0+0xe28>
    8001f09c:	669050ef          	jal	80024f04 <printf>
    printf("%d\n",excpt.cause);
    8001f0a0:	640c                	ld	a1,8(s0)
    8001f0a2:	00009517          	auipc	a0,0x9
    8001f0a6:	94650513          	addi	a0,a0,-1722 # 800279e8 <__func__.0+0xe28>
    8001f0aa:	65b050ef          	jal	80024f04 <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001f0ae:	08200593          	li	a1,130
    8001f0b2:	0000f617          	auipc	a2,0xf
    8001f0b6:	e0660613          	addi	a2,a2,-506 # 8002deb8 <__func__.0+0x72f8>
    8001f0ba:	00008517          	auipc	a0,0x8
    8001f0be:	dfe50513          	addi	a0,a0,-514 # 80026eb8 <__func__.0+0x2f8>
    8001f0c2:	643050ef          	jal	80024f04 <printf>
    8001f0c6:	0002a797          	auipc	a5,0x2a
    8001f0ca:	f4b7c783          	lbu	a5,-181(a5) # 80049011 <excpt+0x1>
    8001f0ce:	00008597          	auipc	a1,0x8
    8001f0d2:	dc258593          	addi	a1,a1,-574 # 80026e90 <__func__.0+0x2d0>
    8001f0d6:	cf89                	beqz	a5,8001f0f0 <mstatus_csr_tests_3+0xde>
    8001f0d8:	6418                	ld	a4,8(s0)
    8001f0da:	47b5                	li	a5,13
    8001f0dc:	00008597          	auipc	a1,0x8
    8001f0e0:	da458593          	addi	a1,a1,-604 # 80026e80 <__func__.0+0x2c0>
    8001f0e4:	00f70663          	beq	a4,a5,8001f0f0 <mstatus_csr_tests_3+0xde>
    8001f0e8:	00008597          	auipc	a1,0x8
    8001f0ec:	da858593          	addi	a1,a1,-600 # 80026e90 <__func__.0+0x2d0>
    8001f0f0:	00008517          	auipc	a0,0x8
    8001f0f4:	de050513          	addi	a0,a0,-544 # 80026ed0 <__func__.0+0x310>
    8001f0f8:	60d050ef          	jal	80024f04 <printf>
    8001f0fc:	0002a797          	auipc	a5,0x2a
    8001f100:	f157c783          	lbu	a5,-235(a5) # 80049011 <excpt+0x1>
    8001f104:	c789                	beqz	a5,8001f10e <mstatus_csr_tests_3+0xfc>
    8001f106:	6418                	ld	a4,8(s0)
    8001f108:	47b5                	li	a5,13
    8001f10a:	00f70c63          	beq	a4,a5,8001f122 <mstatus_csr_tests_3+0x110>
    8001f10e:	00008517          	auipc	a0,0x8
    8001f112:	dca50513          	addi	a0,a0,-566 # 80026ed8 <__func__.0+0x318>
    8001f116:	5ef050ef          	jal	80024f04 <printf>
    8001f11a:	02900513          	li	a0,41
    8001f11e:	3f1040ef          	jal	80023d0e <putchar>
    8001f122:	4529                	li	a0,10
    8001f124:	3eb040ef          	jal	80023d0e <putchar>
    8001f128:	0002a497          	auipc	s1,0x2a
    8001f12c:	ee94c483          	lbu	s1,-279(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    8001f130:	00008597          	auipc	a1,0x8
    8001f134:	d6058593          	addi	a1,a1,-672 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001f138:	cc91                	beqz	s1,8001f154 <mstatus_csr_tests_3+0x142>
    8001f13a:	6418                	ld	a4,8(s0)
    8001f13c:	47b5                	li	a5,13
    TEST_END();
    8001f13e:	00008597          	auipc	a1,0x8
    8001f142:	d4258593          	addi	a1,a1,-702 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001f146:	00f70763          	beq	a4,a5,8001f154 <mstatus_csr_tests_3+0x142>
    8001f14a:	4481                	li	s1,0
    TEST_END();
    8001f14c:	00008597          	auipc	a1,0x8
    8001f150:	d4458593          	addi	a1,a1,-700 # 80026e90 <__func__.0+0x2d0>
    8001f154:	00008517          	auipc	a0,0x8
    8001f158:	de450513          	addi	a0,a0,-540 # 80026f38 <__func__.0+0x378>
    8001f15c:	5a9050ef          	jal	80024f04 <printf>
    8001f160:	4511                	li	a0,4
    8001f162:	a95e10ef          	jal	80000bf6 <goto_priv>
    8001f166:	b46e20ef          	jal	800014ac <reset_state>
}
    8001f16a:	60e2                	ld	ra,24(sp)
    8001f16c:	6442                	ld	s0,16(sp)
    8001f16e:	8526                	mv	a0,s1
    8001f170:	64a2                	ld	s1,8(sp)
    8001f172:	6105                	addi	sp,sp,32
    8001f174:	8082                	ret

000000008001f176 <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    8001f176:	1101                	addi	sp,sp,-32

    TEST_START();
    8001f178:	00007597          	auipc	a1,0x7
    8001f17c:	69858593          	addi	a1,a1,1688 # 80026810 <__func__.5>
    8001f180:	00008517          	auipc	a0,0x8
    8001f184:	d2050513          	addi	a0,a0,-736 # 80026ea0 <__func__.0+0x2e0>
bool mstatus_csr_tests_4(){
    8001f188:	ec06                	sd	ra,24(sp)
    8001f18a:	e822                	sd	s0,16(sp)
    8001f18c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001f18e:	577050ef          	jal	80024f04 <printf>
    8001f192:	4529                	li	a0,10
    8001f194:	37b040ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_HS);
    8001f198:	450d                	li	a0,3
    8001f19a:	a5de10ef          	jal	80000bf6 <goto_priv>
    hspt_init();
    8001f19e:	c42e10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001f1a2:	e80e10ef          	jal	80000822 <hpt_init>
    vspt_init();
    8001f1a6:	d0ae10ef          	jal	800006b0 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    8001f1aa:	4511                	li	a0,4
    8001f1ac:	a4be10ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001f1b0:	000807b7          	lui	a5,0x80
    8001f1b4:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001f1b8:	450d                	li	a0,3
    8001f1ba:	a3de10ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VS);
    8001f1be:	4509                	li	a0,2
    8001f1c0:	957e10ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001f1c4:	0330000f          	fence	rw,rw
    8001f1c8:	0002a497          	auipc	s1,0x2a
    8001f1cc:	e4848493          	addi	s1,s1,-440 # 80049010 <excpt>
    8001f1d0:	4785                	li	a5,1
    8001f1d2:	0002a717          	auipc	a4,0x2a
    8001f1d6:	e6073b23          	sd	zero,-394(a4) # 80049048 <excpt+0x38>
    8001f1da:	00f49023          	sh	a5,0(s1)
    8001f1de:	0330000f          	fence	rw,rw
    8001f1e2:	001007b7          	lui	a5,0x100
    8001f1e6:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001f1e8:	07b2                	slli	a5,a5,0xc
    8001f1ea:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001f1ee:	08200593          	li	a1,130
    8001f1f2:	0000f617          	auipc	a2,0xf
    8001f1f6:	cfe60613          	addi	a2,a2,-770 # 8002def0 <__func__.0+0x7330>
    8001f1fa:	00008517          	auipc	a0,0x8
    8001f1fe:	cbe50513          	addi	a0,a0,-834 # 80026eb8 <__func__.0+0x2f8>
    8001f202:	503050ef          	jal	80024f04 <printf>
    8001f206:	0002a797          	auipc	a5,0x2a
    8001f20a:	e0b7c783          	lbu	a5,-501(a5) # 80049011 <excpt+0x1>
    8001f20e:	00008597          	auipc	a1,0x8
    8001f212:	c8258593          	addi	a1,a1,-894 # 80026e90 <__func__.0+0x2d0>
    8001f216:	cf89                	beqz	a5,8001f230 <mstatus_csr_tests_4+0xba>
    8001f218:	6498                	ld	a4,8(s1)
    8001f21a:	47b5                	li	a5,13
    8001f21c:	00008597          	auipc	a1,0x8
    8001f220:	c6458593          	addi	a1,a1,-924 # 80026e80 <__func__.0+0x2c0>
    8001f224:	00f70663          	beq	a4,a5,8001f230 <mstatus_csr_tests_4+0xba>
    8001f228:	00008597          	auipc	a1,0x8
    8001f22c:	c6858593          	addi	a1,a1,-920 # 80026e90 <__func__.0+0x2d0>
    8001f230:	00008517          	auipc	a0,0x8
    8001f234:	ca050513          	addi	a0,a0,-864 # 80026ed0 <__func__.0+0x310>
    8001f238:	4cd050ef          	jal	80024f04 <printf>
    8001f23c:	0002a797          	auipc	a5,0x2a
    8001f240:	dd57c783          	lbu	a5,-555(a5) # 80049011 <excpt+0x1>
    8001f244:	c789                	beqz	a5,8001f24e <mstatus_csr_tests_4+0xd8>
    8001f246:	6498                	ld	a4,8(s1)
    8001f248:	47b5                	li	a5,13
    8001f24a:	00f70c63          	beq	a4,a5,8001f262 <mstatus_csr_tests_4+0xec>
    8001f24e:	00008517          	auipc	a0,0x8
    8001f252:	c8a50513          	addi	a0,a0,-886 # 80026ed8 <__func__.0+0x318>
    8001f256:	4af050ef          	jal	80024f04 <printf>
    8001f25a:	02900513          	li	a0,41
    8001f25e:	2b1040ef          	jal	80023d0e <putchar>
    8001f262:	4529                	li	a0,10
    8001f264:	2ab040ef          	jal	80023d0e <putchar>
    8001f268:	0002a417          	auipc	s0,0x2a
    8001f26c:	da944403          	lbu	s0,-599(s0) # 80049011 <excpt+0x1>
    8001f270:	c409                	beqz	s0,8001f27a <mstatus_csr_tests_4+0x104>
    8001f272:	6498                	ld	a4,8(s1)
    8001f274:	47b5                	li	a5,13
    8001f276:	02f70c63          	beq	a4,a5,8001f2ae <mstatus_csr_tests_4+0x138>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001f27a:	000807b7          	lui	a5,0x80
    8001f27e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001f282:	4401                	li	s0,0


TEST_END();
    8001f284:	00008597          	auipc	a1,0x8
    8001f288:	c0c58593          	addi	a1,a1,-1012 # 80026e90 <__func__.0+0x2d0>
    8001f28c:	00008517          	auipc	a0,0x8
    8001f290:	cac50513          	addi	a0,a0,-852 # 80026f38 <__func__.0+0x378>
    8001f294:	471050ef          	jal	80024f04 <printf>
    8001f298:	4511                	li	a0,4
    8001f29a:	95de10ef          	jal	80000bf6 <goto_priv>
    8001f29e:	a0ee20ef          	jal	800014ac <reset_state>

}
    8001f2a2:	60e2                	ld	ra,24(sp)
    8001f2a4:	8522                	mv	a0,s0
    8001f2a6:	6442                	ld	s0,16(sp)
    8001f2a8:	64a2                	ld	s1,8(sp)
    8001f2aa:	6105                	addi	sp,sp,32
    8001f2ac:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001f2ae:	000807b7          	lui	a5,0x80
    8001f2b2:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001f2b6:	00008597          	auipc	a1,0x8
    8001f2ba:	bca58593          	addi	a1,a1,-1078 # 80026e80 <__func__.0+0x2c0>
    8001f2be:	b7f9                	j	8001f28c <mstatus_csr_tests_4+0x116>

000000008001f2c0 <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001f2c0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001f2c2:	00007597          	auipc	a1,0x7
    8001f2c6:	56658593          	addi	a1,a1,1382 # 80026828 <__func__.4>
    8001f2ca:	00008517          	auipc	a0,0x8
    8001f2ce:	bd650513          	addi	a0,a0,-1066 # 80026ea0 <__func__.0+0x2e0>
bool mstatus_csr_tests_5(){
    8001f2d2:	ec06                	sd	ra,24(sp)
    8001f2d4:	e822                	sd	s0,16(sp)
    8001f2d6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001f2d8:	42d050ef          	jal	80024f04 <printf>
    8001f2dc:	4529                	li	a0,10
    8001f2de:	231040ef          	jal	80023d0e <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001f2e2:	0330000f          	fence	rw,rw
    8001f2e6:	0002a417          	auipc	s0,0x2a
    8001f2ea:	d2a40413          	addi	s0,s0,-726 # 80049010 <excpt>
    8001f2ee:	4785                	li	a5,1
    8001f2f0:	0002a717          	auipc	a4,0x2a
    8001f2f4:	d4073c23          	sd	zero,-680(a4) # 80049048 <excpt+0x38>
    8001f2f8:	00f41023          	sh	a5,0(s0)
    8001f2fc:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f300:	4511                	li	a0,4
    8001f302:	8f5e10ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001f306:	004007b7          	lui	a5,0x400
    8001f30a:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001f30e:	450d                	li	a0,3
    8001f310:	8e7e10ef          	jal	80000bf6 <goto_priv>
    set_prev_priv(PRIV_VU);
    8001f314:	4501                	li	a0,0
    8001f316:	801e10ef          	jal	80000b16 <set_prev_priv>

    TEST_EXEC_SRET();
    8001f31a:	00000297          	auipc	t0,0x0
    8001f31e:	01028293          	addi	t0,t0,16 # 8001f32a <mstatus_csr_tests_5+0x6a>
    8001f322:	14129073          	csrw	sepc,t0
    8001f326:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001f32a:	08200593          	li	a1,130
    8001f32e:	0000b617          	auipc	a2,0xb
    8001f332:	29a60613          	addi	a2,a2,666 # 8002a5c8 <__func__.0+0x3a08>
    8001f336:	00008517          	auipc	a0,0x8
    8001f33a:	b8250513          	addi	a0,a0,-1150 # 80026eb8 <__func__.0+0x2f8>
    8001f33e:	3c7050ef          	jal	80024f04 <printf>
    8001f342:	0002a797          	auipc	a5,0x2a
    8001f346:	ccf7c783          	lbu	a5,-817(a5) # 80049011 <excpt+0x1>
    8001f34a:	00008597          	auipc	a1,0x8
    8001f34e:	b4658593          	addi	a1,a1,-1210 # 80026e90 <__func__.0+0x2d0>
    8001f352:	cf89                	beqz	a5,8001f36c <mstatus_csr_tests_5+0xac>
    8001f354:	6418                	ld	a4,8(s0)
    8001f356:	4789                	li	a5,2
    8001f358:	00008597          	auipc	a1,0x8
    8001f35c:	b2858593          	addi	a1,a1,-1240 # 80026e80 <__func__.0+0x2c0>
    8001f360:	00f70663          	beq	a4,a5,8001f36c <mstatus_csr_tests_5+0xac>
    8001f364:	00008597          	auipc	a1,0x8
    8001f368:	b2c58593          	addi	a1,a1,-1236 # 80026e90 <__func__.0+0x2d0>
    8001f36c:	00008517          	auipc	a0,0x8
    8001f370:	b6450513          	addi	a0,a0,-1180 # 80026ed0 <__func__.0+0x310>
    8001f374:	391050ef          	jal	80024f04 <printf>
    8001f378:	0002a797          	auipc	a5,0x2a
    8001f37c:	c997c783          	lbu	a5,-871(a5) # 80049011 <excpt+0x1>
    8001f380:	c789                	beqz	a5,8001f38a <mstatus_csr_tests_5+0xca>
    8001f382:	6418                	ld	a4,8(s0)
    8001f384:	4789                	li	a5,2
    8001f386:	00f70c63          	beq	a4,a5,8001f39e <mstatus_csr_tests_5+0xde>
    8001f38a:	00008517          	auipc	a0,0x8
    8001f38e:	b4e50513          	addi	a0,a0,-1202 # 80026ed8 <__func__.0+0x318>
    8001f392:	373050ef          	jal	80024f04 <printf>
    8001f396:	02900513          	li	a0,41
    8001f39a:	175040ef          	jal	80023d0e <putchar>
    8001f39e:	4529                	li	a0,10
    8001f3a0:	16f040ef          	jal	80023d0e <putchar>
    8001f3a4:	0002a497          	auipc	s1,0x2a
    8001f3a8:	c6d4c483          	lbu	s1,-915(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001f3ac:	00008597          	auipc	a1,0x8
    8001f3b0:	ae458593          	addi	a1,a1,-1308 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001f3b4:	cc91                	beqz	s1,8001f3d0 <mstatus_csr_tests_5+0x110>
    8001f3b6:	6418                	ld	a4,8(s0)
    8001f3b8:	4789                	li	a5,2
    TEST_END();
    8001f3ba:	00008597          	auipc	a1,0x8
    8001f3be:	ac658593          	addi	a1,a1,-1338 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001f3c2:	00f70763          	beq	a4,a5,8001f3d0 <mstatus_csr_tests_5+0x110>
    8001f3c6:	4481                	li	s1,0
    TEST_END();
    8001f3c8:	00008597          	auipc	a1,0x8
    8001f3cc:	ac858593          	addi	a1,a1,-1336 # 80026e90 <__func__.0+0x2d0>
    8001f3d0:	00008517          	auipc	a0,0x8
    8001f3d4:	b6850513          	addi	a0,a0,-1176 # 80026f38 <__func__.0+0x378>
    8001f3d8:	32d050ef          	jal	80024f04 <printf>
    8001f3dc:	4511                	li	a0,4
    8001f3de:	819e10ef          	jal	80000bf6 <goto_priv>
    8001f3e2:	8cae20ef          	jal	800014ac <reset_state>

}
    8001f3e6:	60e2                	ld	ra,24(sp)
    8001f3e8:	6442                	ld	s0,16(sp)
    8001f3ea:	8526                	mv	a0,s1
    8001f3ec:	64a2                	ld	s1,8(sp)
    8001f3ee:	6105                	addi	sp,sp,32
    8001f3f0:	8082                	ret

000000008001f3f2 <hedeleg_csr_tests_1>:

bool hedeleg_csr_tests_1(){
    8001f3f2:	1141                	addi	sp,sp,-16

    TEST_START();
    8001f3f4:	00007597          	auipc	a1,0x7
    8001f3f8:	44c58593          	addi	a1,a1,1100 # 80026840 <__func__.3>
    8001f3fc:	00008517          	auipc	a0,0x8
    8001f400:	aa450513          	addi	a0,a0,-1372 # 80026ea0 <__func__.0+0x2e0>
bool hedeleg_csr_tests_1(){
    8001f404:	e406                	sd	ra,8(sp)
    8001f406:	e022                	sd	s0,0(sp)
    TEST_START();
    8001f408:	2fd050ef          	jal	80024f04 <printf>
    8001f40c:	4529                	li	a0,10
    8001f40e:	101040ef          	jal	80023d0e <putchar>
    TEST_SETUP_EXCEPT();
    8001f412:	0330000f          	fence	rw,rw
    8001f416:	4785                	li	a5,1
    8001f418:	0002a717          	auipc	a4,0x2a
    8001f41c:	c2073823          	sd	zero,-976(a4) # 80049048 <excpt+0x38>
    8001f420:	0002a717          	auipc	a4,0x2a
    8001f424:	bef71823          	sh	a5,-1040(a4) # 80049010 <excpt>
    8001f428:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f42c:	4511                	li	a0,4
    8001f42e:	fc8e10ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_HEDELEG, (uint64_t)-1);
    8001f432:	57fd                	li	a5,-1
    8001f434:	60279073          	csrw	hedeleg,a5
    printf("%llx\n",CSRR(CSR_HEDELEG));
    8001f438:	602025f3          	csrr	a1,hedeleg
    8001f43c:	0000e517          	auipc	a0,0xe
    8001f440:	fac50513          	addi	a0,a0,-84 # 8002d3e8 <__func__.0+0x6828>
    8001f444:	2c1050ef          	jal	80024f04 <printf>

    TEST_ASSERT("hedeleg right",
    8001f448:	0000f617          	auipc	a2,0xf
    8001f44c:	af060613          	addi	a2,a2,-1296 # 8002df38 <__func__.0+0x7378>
    8001f450:	08200593          	li	a1,130
    8001f454:	00008517          	auipc	a0,0x8
    8001f458:	a6450513          	addi	a0,a0,-1436 # 80026eb8 <__func__.0+0x2f8>
    8001f45c:	2a9050ef          	jal	80024f04 <printf>
    8001f460:	60202773          	csrr	a4,hedeleg
    8001f464:	67ad                	lui	a5,0xb
    8001f466:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f46a:	00008597          	auipc	a1,0x8
    8001f46e:	a1658593          	addi	a1,a1,-1514 # 80026e80 <__func__.0+0x2c0>
    8001f472:	00f70663          	beq	a4,a5,8001f47e <hedeleg_csr_tests_1+0x8c>
    8001f476:	00008597          	auipc	a1,0x8
    8001f47a:	a1a58593          	addi	a1,a1,-1510 # 80026e90 <__func__.0+0x2d0>
    8001f47e:	00008517          	auipc	a0,0x8
    8001f482:	a5250513          	addi	a0,a0,-1454 # 80026ed0 <__func__.0+0x310>
    8001f486:	27f050ef          	jal	80024f04 <printf>
    8001f48a:	60202773          	csrr	a4,hedeleg
    8001f48e:	67ad                	lui	a5,0xb
    8001f490:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f494:	00f70c63          	beq	a4,a5,8001f4ac <hedeleg_csr_tests_1+0xba>
    8001f498:	00008517          	auipc	a0,0x8
    8001f49c:	a4050513          	addi	a0,a0,-1472 # 80026ed8 <__func__.0+0x318>
    8001f4a0:	265050ef          	jal	80024f04 <printf>
    8001f4a4:	02900513          	li	a0,41
    8001f4a8:	067040ef          	jal	80023d0e <putchar>
    8001f4ac:	4529                	li	a0,10
    8001f4ae:	061040ef          	jal	80023d0e <putchar>
    8001f4b2:	60202773          	csrr	a4,hedeleg
    8001f4b6:	67ad                	lui	a5,0xb
    8001f4b8:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f4bc:	02f70763          	beq	a4,a5,8001f4ea <hedeleg_csr_tests_1+0xf8>
    8001f4c0:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001f4c2:	00008597          	auipc	a1,0x8
    8001f4c6:	9ce58593          	addi	a1,a1,-1586 # 80026e90 <__func__.0+0x2d0>
    8001f4ca:	00008517          	auipc	a0,0x8
    8001f4ce:	a6e50513          	addi	a0,a0,-1426 # 80026f38 <__func__.0+0x378>
    8001f4d2:	233050ef          	jal	80024f04 <printf>
    8001f4d6:	4511                	li	a0,4
    8001f4d8:	f1ee10ef          	jal	80000bf6 <goto_priv>
    8001f4dc:	fd1e10ef          	jal	800014ac <reset_state>

}
    8001f4e0:	60a2                	ld	ra,8(sp)
    8001f4e2:	8522                	mv	a0,s0
    8001f4e4:	6402                	ld	s0,0(sp)
    8001f4e6:	0141                	addi	sp,sp,16
    8001f4e8:	8082                	ret
    TEST_ASSERT("hedeleg right",
    8001f4ea:	4405                	li	s0,1
    TEST_END();
    8001f4ec:	00008597          	auipc	a1,0x8
    8001f4f0:	99458593          	addi	a1,a1,-1644 # 80026e80 <__func__.0+0x2c0>
    8001f4f4:	bfd9                	j	8001f4ca <hedeleg_csr_tests_1+0xd8>

000000008001f4f6 <mhpmevent_csr_tests_1>:

bool mhpmevent_csr_tests_1(){
    8001f4f6:	1141                	addi	sp,sp,-16

    TEST_START();
    8001f4f8:	00007597          	auipc	a1,0x7
    8001f4fc:	36058593          	addi	a1,a1,864 # 80026858 <__func__.2>
    8001f500:	00008517          	auipc	a0,0x8
    8001f504:	9a050513          	addi	a0,a0,-1632 # 80026ea0 <__func__.0+0x2e0>
bool mhpmevent_csr_tests_1(){
    8001f508:	e406                	sd	ra,8(sp)
    8001f50a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001f50c:	1f9050ef          	jal	80024f04 <printf>
    8001f510:	4529                	li	a0,10
    8001f512:	7fc040ef          	jal	80023d0e <putchar>
    TEST_SETUP_EXCEPT();
    8001f516:	0330000f          	fence	rw,rw
    8001f51a:	0002a797          	auipc	a5,0x2a
    8001f51e:	af678793          	addi	a5,a5,-1290 # 80049010 <excpt>
    8001f522:	4405                	li	s0,1
    8001f524:	0207bc23          	sd	zero,56(a5)
    8001f528:	00879023          	sh	s0,0(a5)
    8001f52c:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f530:	4511                	li	a0,4
    8001f532:	ec4e10ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_MHPMEVENT3, (uint64_t)-1);
    8001f536:	57fd                	li	a5,-1
    8001f538:	32379073          	csrw	mhpmevent3,a5
    printf("%llx\n",CSRR(CSR_MHPMEVENT3));
    8001f53c:	323025f3          	csrr	a1,mhpmevent3
    8001f540:	0000e517          	auipc	a0,0xe
    8001f544:	ea850513          	addi	a0,a0,-344 # 8002d3e8 <__func__.0+0x6828>
    8001f548:	1bd050ef          	jal	80024f04 <printf>

    TEST_END();
    8001f54c:	00008597          	auipc	a1,0x8
    8001f550:	93458593          	addi	a1,a1,-1740 # 80026e80 <__func__.0+0x2c0>
    8001f554:	00008517          	auipc	a0,0x8
    8001f558:	9e450513          	addi	a0,a0,-1564 # 80026f38 <__func__.0+0x378>
    8001f55c:	1a9050ef          	jal	80024f04 <printf>
    8001f560:	4511                	li	a0,4
    8001f562:	e94e10ef          	jal	80000bf6 <goto_priv>
    8001f566:	f47e10ef          	jal	800014ac <reset_state>

}
    8001f56a:	60a2                	ld	ra,8(sp)
    8001f56c:	8522                	mv	a0,s0
    8001f56e:	6402                	ld	s0,0(sp)
    8001f570:	0141                	addi	sp,sp,16
    8001f572:	8082                	ret

000000008001f574 <tselect_csr_tests_1>:

bool tselect_csr_tests_1(){
    8001f574:	1141                	addi	sp,sp,-16

    TEST_START();
    8001f576:	00007597          	auipc	a1,0x7
    8001f57a:	2fa58593          	addi	a1,a1,762 # 80026870 <__func__.1>
    8001f57e:	00008517          	auipc	a0,0x8
    8001f582:	92250513          	addi	a0,a0,-1758 # 80026ea0 <__func__.0+0x2e0>
bool tselect_csr_tests_1(){
    8001f586:	e406                	sd	ra,8(sp)
    8001f588:	e022                	sd	s0,0(sp)
    TEST_START();
    8001f58a:	17b050ef          	jal	80024f04 <printf>
    8001f58e:	4529                	li	a0,10
    8001f590:	77e040ef          	jal	80023d0e <putchar>
    TEST_SETUP_EXCEPT();
    8001f594:	0330000f          	fence	rw,rw
    8001f598:	4785                	li	a5,1
    8001f59a:	0002a717          	auipc	a4,0x2a
    8001f59e:	aa073723          	sd	zero,-1362(a4) # 80049048 <excpt+0x38>
    8001f5a2:	0002a717          	auipc	a4,0x2a
    8001f5a6:	a6f71723          	sh	a5,-1426(a4) # 80049010 <excpt>
    8001f5aa:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f5ae:	4511                	li	a0,4
    8001f5b0:	e46e10ef          	jal	80000bf6 <goto_priv>
    CSRW(CSR_TSELECT, (uint64_t)-1);
    8001f5b4:	57fd                	li	a5,-1
    8001f5b6:	7a079073          	csrw	tselect,a5
    printf("%llx\n",CSRR(CSR_TSELECT));
    8001f5ba:	7a0025f3          	csrr	a1,tselect
    8001f5be:	0000e517          	auipc	a0,0xe
    8001f5c2:	e2a50513          	addi	a0,a0,-470 # 8002d3e8 <__func__.0+0x6828>
    8001f5c6:	13f050ef          	jal	80024f04 <printf>

    TEST_ASSERT("tselect right",
    8001f5ca:	0000f617          	auipc	a2,0xf
    8001f5ce:	97e60613          	addi	a2,a2,-1666 # 8002df48 <__func__.0+0x7388>
    8001f5d2:	08200593          	li	a1,130
    8001f5d6:	00008517          	auipc	a0,0x8
    8001f5da:	8e250513          	addi	a0,a0,-1822 # 80026eb8 <__func__.0+0x2f8>
    8001f5de:	127050ef          	jal	80024f04 <printf>
    8001f5e2:	60202773          	csrr	a4,hedeleg
    8001f5e6:	67ad                	lui	a5,0xb
    8001f5e8:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f5ec:	00008597          	auipc	a1,0x8
    8001f5f0:	89458593          	addi	a1,a1,-1900 # 80026e80 <__func__.0+0x2c0>
    8001f5f4:	00f70663          	beq	a4,a5,8001f600 <tselect_csr_tests_1+0x8c>
    8001f5f8:	00008597          	auipc	a1,0x8
    8001f5fc:	89858593          	addi	a1,a1,-1896 # 80026e90 <__func__.0+0x2d0>
    8001f600:	00008517          	auipc	a0,0x8
    8001f604:	8d050513          	addi	a0,a0,-1840 # 80026ed0 <__func__.0+0x310>
    8001f608:	0fd050ef          	jal	80024f04 <printf>
    8001f60c:	60202773          	csrr	a4,hedeleg
    8001f610:	67ad                	lui	a5,0xb
    8001f612:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f616:	00f70c63          	beq	a4,a5,8001f62e <tselect_csr_tests_1+0xba>
    8001f61a:	00008517          	auipc	a0,0x8
    8001f61e:	8be50513          	addi	a0,a0,-1858 # 80026ed8 <__func__.0+0x318>
    8001f622:	0e3050ef          	jal	80024f04 <printf>
    8001f626:	02900513          	li	a0,41
    8001f62a:	6e4040ef          	jal	80023d0e <putchar>
    8001f62e:	4529                	li	a0,10
    8001f630:	6de040ef          	jal	80023d0e <putchar>
    8001f634:	60202773          	csrr	a4,hedeleg
    8001f638:	67ad                	lui	a5,0xb
    8001f63a:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001f63e:	02f70763          	beq	a4,a5,8001f66c <tselect_csr_tests_1+0xf8>
    8001f642:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001f644:	00008597          	auipc	a1,0x8
    8001f648:	84c58593          	addi	a1,a1,-1972 # 80026e90 <__func__.0+0x2d0>
    8001f64c:	00008517          	auipc	a0,0x8
    8001f650:	8ec50513          	addi	a0,a0,-1812 # 80026f38 <__func__.0+0x378>
    8001f654:	0b1050ef          	jal	80024f04 <printf>
    8001f658:	4511                	li	a0,4
    8001f65a:	d9ce10ef          	jal	80000bf6 <goto_priv>
    8001f65e:	e4fe10ef          	jal	800014ac <reset_state>

}
    8001f662:	60a2                	ld	ra,8(sp)
    8001f664:	8522                	mv	a0,s0
    8001f666:	6402                	ld	s0,0(sp)
    8001f668:	0141                	addi	sp,sp,16
    8001f66a:	8082                	ret
    TEST_ASSERT("tselect right",
    8001f66c:	4405                	li	s0,1
    TEST_END();
    8001f66e:	00008597          	auipc	a1,0x8
    8001f672:	81258593          	addi	a1,a1,-2030 # 80026e80 <__func__.0+0x2c0>
    8001f676:	bfd9                	j	8001f64c <tselect_csr_tests_1+0xd8>

000000008001f678 <random_instruction_tests>:


bool random_instruction_tests(){
    8001f678:	1141                	addi	sp,sp,-16

    TEST_START();
    8001f67a:	00007597          	auipc	a1,0x7
    8001f67e:	20e58593          	addi	a1,a1,526 # 80026888 <__func__.0>
    8001f682:	00008517          	auipc	a0,0x8
    8001f686:	81e50513          	addi	a0,a0,-2018 # 80026ea0 <__func__.0+0x2e0>
bool random_instruction_tests(){
    8001f68a:	e406                	sd	ra,8(sp)
    8001f68c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001f68e:	077050ef          	jal	80024f04 <printf>
    8001f692:	4529                	li	a0,10
    8001f694:	67a040ef          	jal	80023d0e <putchar>
    TEST_SETUP_EXCEPT();
    8001f698:	0330000f          	fence	rw,rw
    8001f69c:	0002a797          	auipc	a5,0x2a
    8001f6a0:	97478793          	addi	a5,a5,-1676 # 80049010 <excpt>
    8001f6a4:	4405                	li	s0,1
    8001f6a6:	0207bc23          	sd	zero,56(a5)
    8001f6aa:	00879023          	sh	s0,0(a5)
    8001f6ae:	0330000f          	fence	rw,rw
    goto_priv(PRIV_M);
    8001f6b2:	4511                	li	a0,4
    8001f6b4:	d42e10ef          	jal	80000bf6 <goto_priv>

    for (int i = 0; i < 5; i++)
    {
        random_m_instruction();
    8001f6b8:	edbe10ef          	jal	80001592 <random_m_instruction>
    8001f6bc:	ed7e10ef          	jal	80001592 <random_m_instruction>
    8001f6c0:	ed3e10ef          	jal	80001592 <random_m_instruction>
    8001f6c4:	ecfe10ef          	jal	80001592 <random_m_instruction>
    8001f6c8:	ecbe10ef          	jal	80001592 <random_m_instruction>
    }
    

    TEST_END();
    8001f6cc:	00007597          	auipc	a1,0x7
    8001f6d0:	7b458593          	addi	a1,a1,1972 # 80026e80 <__func__.0+0x2c0>
    8001f6d4:	00008517          	auipc	a0,0x8
    8001f6d8:	86450513          	addi	a0,a0,-1948 # 80026f38 <__func__.0+0x378>
    8001f6dc:	029050ef          	jal	80024f04 <printf>
    8001f6e0:	4511                	li	a0,4
    8001f6e2:	d14e10ef          	jal	80000bf6 <goto_priv>
    8001f6e6:	dc7e10ef          	jal	800014ac <reset_state>

    8001f6ea:	60a2                	ld	ra,8(sp)
    8001f6ec:	8522                	mv	a0,s0
    8001f6ee:	6402                	ld	s0,0(sp)
    8001f6f0:	0141                	addi	sp,sp,16
    8001f6f2:	8082                	ret

000000008001f6f4 <time_test_1>:
#include <rvh_test.h>
#include <csrs.h> 

bool time_test_1() {
    8001f6f4:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f6f6:	00007597          	auipc	a1,0x7
    8001f6fa:	1b258593          	addi	a1,a1,434 # 800268a8 <__func__.43>
    8001f6fe:	00007517          	auipc	a0,0x7
    8001f702:	7a250513          	addi	a0,a0,1954 # 80026ea0 <__func__.0+0x2e0>
bool time_test_1() {
    8001f706:	ec06                	sd	ra,24(sp)
    8001f708:	e822                	sd	s0,16(sp)
    8001f70a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f70c:	7f8050ef          	jal	80024f04 <printf>
    8001f710:	4529                	li	a0,10
    8001f712:	5fc040ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8001f716:	4511                	li	a0,4
    8001f718:	cdee10ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001f71c:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001f720:	4509                	li	a0,2
    8001f722:	cd4e10ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f726:	0330000f          	fence	rw,rw
    8001f72a:	0002a417          	auipc	s0,0x2a
    8001f72e:	8e640413          	addi	s0,s0,-1818 # 80049010 <excpt>
    8001f732:	4785                	li	a5,1
    8001f734:	0002a717          	auipc	a4,0x2a
    8001f738:	90073a23          	sd	zero,-1772(a4) # 80049048 <excpt+0x38>
    8001f73c:	00f41023          	sh	a5,0(s0)
    8001f740:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001f744:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001f748:	08200593          	li	a1,130
    8001f74c:	0000f617          	auipc	a2,0xf
    8001f750:	80c60613          	addi	a2,a2,-2036 # 8002df58 <__func__.0+0x7398>
    8001f754:	00007517          	auipc	a0,0x7
    8001f758:	76450513          	addi	a0,a0,1892 # 80026eb8 <__func__.0+0x2f8>
    8001f75c:	7a8050ef          	jal	80024f04 <printf>
    8001f760:	0002a797          	auipc	a5,0x2a
    8001f764:	8b17c783          	lbu	a5,-1871(a5) # 80049011 <excpt+0x1>
    8001f768:	00007597          	auipc	a1,0x7
    8001f76c:	72858593          	addi	a1,a1,1832 # 80026e90 <__func__.0+0x2d0>
    8001f770:	cf89                	beqz	a5,8001f78a <time_test_1+0x96>
    8001f772:	6418                	ld	a4,8(s0)
    8001f774:	4789                	li	a5,2
    8001f776:	00007597          	auipc	a1,0x7
    8001f77a:	70a58593          	addi	a1,a1,1802 # 80026e80 <__func__.0+0x2c0>
    8001f77e:	00f70663          	beq	a4,a5,8001f78a <time_test_1+0x96>
    8001f782:	00007597          	auipc	a1,0x7
    8001f786:	70e58593          	addi	a1,a1,1806 # 80026e90 <__func__.0+0x2d0>
    8001f78a:	00007517          	auipc	a0,0x7
    8001f78e:	74650513          	addi	a0,a0,1862 # 80026ed0 <__func__.0+0x310>
    8001f792:	772050ef          	jal	80024f04 <printf>
    8001f796:	0002a797          	auipc	a5,0x2a
    8001f79a:	87b7c783          	lbu	a5,-1925(a5) # 80049011 <excpt+0x1>
    8001f79e:	c789                	beqz	a5,8001f7a8 <time_test_1+0xb4>
    8001f7a0:	6418                	ld	a4,8(s0)
    8001f7a2:	4789                	li	a5,2
    8001f7a4:	00f70c63          	beq	a4,a5,8001f7bc <time_test_1+0xc8>
    8001f7a8:	00007517          	auipc	a0,0x7
    8001f7ac:	73050513          	addi	a0,a0,1840 # 80026ed8 <__func__.0+0x318>
    8001f7b0:	754050ef          	jal	80024f04 <printf>
    8001f7b4:	02900513          	li	a0,41
    8001f7b8:	556040ef          	jal	80023d0e <putchar>
    8001f7bc:	4529                	li	a0,10
    8001f7be:	550040ef          	jal	80023d0e <putchar>
    8001f7c2:	0002a797          	auipc	a5,0x2a
    8001f7c6:	84f7c783          	lbu	a5,-1969(a5) # 80049011 <excpt+0x1>
    8001f7ca:	4481                	li	s1,0
    8001f7cc:	c789                	beqz	a5,8001f7d6 <time_test_1+0xe2>
    8001f7ce:	6404                	ld	s1,8(s0)
    8001f7d0:	14f9                	addi	s1,s1,-2
    8001f7d2:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001f7d6:	450d                	li	a0,3
    8001f7d8:	c1ee10ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f7dc:	0330000f          	fence	rw,rw
    8001f7e0:	4785                	li	a5,1
    8001f7e2:	0002a717          	auipc	a4,0x2a
    8001f7e6:	86073323          	sd	zero,-1946(a4) # 80049048 <excpt+0x38>
    8001f7ea:	00f41023          	sh	a5,0(s0)
    8001f7ee:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001f7f2:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001f7f6:	08200593          	li	a1,130
    8001f7fa:	0000e617          	auipc	a2,0xe
    8001f7fe:	7ae60613          	addi	a2,a2,1966 # 8002dfa8 <__func__.0+0x73e8>
    8001f802:	00007517          	auipc	a0,0x7
    8001f806:	6b650513          	addi	a0,a0,1718 # 80026eb8 <__func__.0+0x2f8>
    8001f80a:	6fa050ef          	jal	80024f04 <printf>
    8001f80e:	0002a797          	auipc	a5,0x2a
    8001f812:	8037c783          	lbu	a5,-2045(a5) # 80049011 <excpt+0x1>
    8001f816:	00007597          	auipc	a1,0x7
    8001f81a:	67a58593          	addi	a1,a1,1658 # 80026e90 <__func__.0+0x2d0>
    8001f81e:	cf89                	beqz	a5,8001f838 <time_test_1+0x144>
    8001f820:	6418                	ld	a4,8(s0)
    8001f822:	4789                	li	a5,2
    8001f824:	00007597          	auipc	a1,0x7
    8001f828:	65c58593          	addi	a1,a1,1628 # 80026e80 <__func__.0+0x2c0>
    8001f82c:	00f70663          	beq	a4,a5,8001f838 <time_test_1+0x144>
    8001f830:	00007597          	auipc	a1,0x7
    8001f834:	66058593          	addi	a1,a1,1632 # 80026e90 <__func__.0+0x2d0>
    8001f838:	00007517          	auipc	a0,0x7
    8001f83c:	69850513          	addi	a0,a0,1688 # 80026ed0 <__func__.0+0x310>
    8001f840:	6c4050ef          	jal	80024f04 <printf>
    8001f844:	00029797          	auipc	a5,0x29
    8001f848:	7cd7c783          	lbu	a5,1997(a5) # 80049011 <excpt+0x1>
    8001f84c:	c789                	beqz	a5,8001f856 <time_test_1+0x162>
    8001f84e:	6418                	ld	a4,8(s0)
    8001f850:	4789                	li	a5,2
    8001f852:	00f70c63          	beq	a4,a5,8001f86a <time_test_1+0x176>
    8001f856:	00007517          	auipc	a0,0x7
    8001f85a:	68250513          	addi	a0,a0,1666 # 80026ed8 <__func__.0+0x318>
    8001f85e:	6a6050ef          	jal	80024f04 <printf>
    8001f862:	02900513          	li	a0,41
    8001f866:	4a8040ef          	jal	80023d0e <putchar>
    8001f86a:	4529                	li	a0,10
    8001f86c:	4a2040ef          	jal	80023d0e <putchar>
    8001f870:	c881                	beqz	s1,8001f880 <time_test_1+0x18c>
    8001f872:	00029797          	auipc	a5,0x29
    8001f876:	79f7c783          	lbu	a5,1951(a5) # 80049011 <excpt+0x1>
    8001f87a:	4481                	li	s1,0
    8001f87c:	1a079163          	bnez	a5,8001fa1e <time_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001f880:	4501                	li	a0,0
    8001f882:	b74e10ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f886:	0330000f          	fence	rw,rw
    8001f88a:	4785                	li	a5,1
    8001f88c:	00029717          	auipc	a4,0x29
    8001f890:	7a073e23          	sd	zero,1980(a4) # 80049048 <excpt+0x38>
    8001f894:	00f41023          	sh	a5,0(s0)
    8001f898:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001f89c:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001f8a0:	08200593          	li	a1,130
    8001f8a4:	0000e617          	auipc	a2,0xe
    8001f8a8:	75460613          	addi	a2,a2,1876 # 8002dff8 <__func__.0+0x7438>
    8001f8ac:	00007517          	auipc	a0,0x7
    8001f8b0:	60c50513          	addi	a0,a0,1548 # 80026eb8 <__func__.0+0x2f8>
    8001f8b4:	650050ef          	jal	80024f04 <printf>
    8001f8b8:	00029797          	auipc	a5,0x29
    8001f8bc:	7597c783          	lbu	a5,1881(a5) # 80049011 <excpt+0x1>
    8001f8c0:	00007597          	auipc	a1,0x7
    8001f8c4:	5d058593          	addi	a1,a1,1488 # 80026e90 <__func__.0+0x2d0>
    8001f8c8:	cf89                	beqz	a5,8001f8e2 <time_test_1+0x1ee>
    8001f8ca:	6418                	ld	a4,8(s0)
    8001f8cc:	4789                	li	a5,2
    8001f8ce:	00007597          	auipc	a1,0x7
    8001f8d2:	5b258593          	addi	a1,a1,1458 # 80026e80 <__func__.0+0x2c0>
    8001f8d6:	00f70663          	beq	a4,a5,8001f8e2 <time_test_1+0x1ee>
    8001f8da:	00007597          	auipc	a1,0x7
    8001f8de:	5b658593          	addi	a1,a1,1462 # 80026e90 <__func__.0+0x2d0>
    8001f8e2:	00007517          	auipc	a0,0x7
    8001f8e6:	5ee50513          	addi	a0,a0,1518 # 80026ed0 <__func__.0+0x310>
    8001f8ea:	61a050ef          	jal	80024f04 <printf>
    8001f8ee:	00029797          	auipc	a5,0x29
    8001f8f2:	7237c783          	lbu	a5,1827(a5) # 80049011 <excpt+0x1>
    8001f8f6:	c789                	beqz	a5,8001f900 <time_test_1+0x20c>
    8001f8f8:	6418                	ld	a4,8(s0)
    8001f8fa:	4789                	li	a5,2
    8001f8fc:	00f70c63          	beq	a4,a5,8001f914 <time_test_1+0x220>
    8001f900:	00007517          	auipc	a0,0x7
    8001f904:	5d850513          	addi	a0,a0,1496 # 80026ed8 <__func__.0+0x318>
    8001f908:	5fc050ef          	jal	80024f04 <printf>
    8001f90c:	02900513          	li	a0,41
    8001f910:	3fe040ef          	jal	80023d0e <putchar>
    8001f914:	4529                	li	a0,10
    8001f916:	3f8040ef          	jal	80023d0e <putchar>
    8001f91a:	c881                	beqz	s1,8001f92a <time_test_1+0x236>
    8001f91c:	00029797          	auipc	a5,0x29
    8001f920:	6f57c783          	lbu	a5,1781(a5) # 80049011 <excpt+0x1>
    8001f924:	4481                	li	s1,0
    8001f926:	0e079763          	bnez	a5,8001fa14 <time_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001f92a:	4505                	li	a0,1
    8001f92c:	acae10ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f930:	0330000f          	fence	rw,rw
    8001f934:	4785                	li	a5,1
    8001f936:	00029717          	auipc	a4,0x29
    8001f93a:	70073923          	sd	zero,1810(a4) # 80049048 <excpt+0x38>
    8001f93e:	00f41023          	sh	a5,0(s0)
    8001f942:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001f946:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001f94a:	08200593          	li	a1,130
    8001f94e:	0000e617          	auipc	a2,0xe
    8001f952:	6fa60613          	addi	a2,a2,1786 # 8002e048 <__func__.0+0x7488>
    8001f956:	00007517          	auipc	a0,0x7
    8001f95a:	56250513          	addi	a0,a0,1378 # 80026eb8 <__func__.0+0x2f8>
    8001f95e:	5a6050ef          	jal	80024f04 <printf>
    8001f962:	00029797          	auipc	a5,0x29
    8001f966:	6af7c783          	lbu	a5,1711(a5) # 80049011 <excpt+0x1>
    8001f96a:	00007597          	auipc	a1,0x7
    8001f96e:	52658593          	addi	a1,a1,1318 # 80026e90 <__func__.0+0x2d0>
    8001f972:	cf89                	beqz	a5,8001f98c <time_test_1+0x298>
    8001f974:	6418                	ld	a4,8(s0)
    8001f976:	4789                	li	a5,2
    8001f978:	00007597          	auipc	a1,0x7
    8001f97c:	50858593          	addi	a1,a1,1288 # 80026e80 <__func__.0+0x2c0>
    8001f980:	00f70663          	beq	a4,a5,8001f98c <time_test_1+0x298>
    8001f984:	00007597          	auipc	a1,0x7
    8001f988:	50c58593          	addi	a1,a1,1292 # 80026e90 <__func__.0+0x2d0>
    8001f98c:	00007517          	auipc	a0,0x7
    8001f990:	54450513          	addi	a0,a0,1348 # 80026ed0 <__func__.0+0x310>
    8001f994:	570050ef          	jal	80024f04 <printf>
    8001f998:	00029797          	auipc	a5,0x29
    8001f99c:	6797c783          	lbu	a5,1657(a5) # 80049011 <excpt+0x1>
    8001f9a0:	c789                	beqz	a5,8001f9aa <time_test_1+0x2b6>
    8001f9a2:	6418                	ld	a4,8(s0)
    8001f9a4:	4789                	li	a5,2
    8001f9a6:	00f70c63          	beq	a4,a5,8001f9be <time_test_1+0x2ca>
    8001f9aa:	00007517          	auipc	a0,0x7
    8001f9ae:	52e50513          	addi	a0,a0,1326 # 80026ed8 <__func__.0+0x318>
    8001f9b2:	552050ef          	jal	80024f04 <printf>
    8001f9b6:	02900513          	li	a0,41
    8001f9ba:	354040ef          	jal	80023d0e <putchar>
    8001f9be:	4529                	li	a0,10
    8001f9c0:	34e040ef          	jal	80023d0e <putchar>
    8001f9c4:	c095                	beqz	s1,8001f9e8 <time_test_1+0x2f4>
    8001f9c6:	00029497          	auipc	s1,0x29
    8001f9ca:	64b4c483          	lbu	s1,1611(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f9ce:	00007597          	auipc	a1,0x7
    8001f9d2:	4c258593          	addi	a1,a1,1218 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001f9d6:	cc91                	beqz	s1,8001f9f2 <time_test_1+0x2fe>
    8001f9d8:	6418                	ld	a4,8(s0)
    8001f9da:	4789                	li	a5,2
    TEST_END(); 
    8001f9dc:	00007597          	auipc	a1,0x7
    8001f9e0:	4a458593          	addi	a1,a1,1188 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001f9e4:	00f70763          	beq	a4,a5,8001f9f2 <time_test_1+0x2fe>
    8001f9e8:	4481                	li	s1,0
    TEST_END(); 
    8001f9ea:	00007597          	auipc	a1,0x7
    8001f9ee:	4a658593          	addi	a1,a1,1190 # 80026e90 <__func__.0+0x2d0>
    8001f9f2:	00007517          	auipc	a0,0x7
    8001f9f6:	54650513          	addi	a0,a0,1350 # 80026f38 <__func__.0+0x378>
    8001f9fa:	50a050ef          	jal	80024f04 <printf>
    8001f9fe:	4511                	li	a0,4
    8001fa00:	9f6e10ef          	jal	80000bf6 <goto_priv>
    8001fa04:	aa9e10ef          	jal	800014ac <reset_state>
}
    8001fa08:	60e2                	ld	ra,24(sp)
    8001fa0a:	6442                	ld	s0,16(sp)
    8001fa0c:	8526                	mv	a0,s1
    8001fa0e:	64a2                	ld	s1,8(sp)
    8001fa10:	6105                	addi	sp,sp,32
    8001fa12:	8082                	ret
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fa14:	6404                	ld	s1,8(s0)
    8001fa16:	14f9                	addi	s1,s1,-2
    8001fa18:	0014b493          	seqz	s1,s1
    8001fa1c:	b739                	j	8001f92a <time_test_1+0x236>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001fa1e:	6404                	ld	s1,8(s0)
    8001fa20:	14f9                	addi	s1,s1,-2
    8001fa22:	0014b493          	seqz	s1,s1
    8001fa26:	bda9                	j	8001f880 <time_test_1+0x18c>

000000008001fa28 <time_test_2>:

bool time_test_2() {
    8001fa28:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fa2a:	00007597          	auipc	a1,0x7
    8001fa2e:	e8e58593          	addi	a1,a1,-370 # 800268b8 <__func__.42>
    8001fa32:	00007517          	auipc	a0,0x7
    8001fa36:	46e50513          	addi	a0,a0,1134 # 80026ea0 <__func__.0+0x2e0>
bool time_test_2() {
    8001fa3a:	e406                	sd	ra,8(sp)
    8001fa3c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fa3e:	4c6050ef          	jal	80024f04 <printf>
    8001fa42:	4529                	li	a0,10
    8001fa44:	2ca040ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8001fa48:	4511                	li	a0,4
    8001fa4a:	9ace10ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001fa4e:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001fa52:	450d                	li	a0,3
    8001fa54:	9a2e10ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fa58:	0330000f          	fence	rw,rw
    8001fa5c:	4785                	li	a5,1
    8001fa5e:	00029717          	auipc	a4,0x29
    8001fa62:	5e073523          	sd	zero,1514(a4) # 80049048 <excpt+0x38>
    8001fa66:	00029717          	auipc	a4,0x29
    8001fa6a:	5af71523          	sh	a5,1450(a4) # 80049010 <excpt>
    8001fa6e:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fa72:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001fa76:	08200593          	li	a1,130
    8001fa7a:	0000e617          	auipc	a2,0xe
    8001fa7e:	61e60613          	addi	a2,a2,1566 # 8002e098 <__func__.0+0x74d8>
    8001fa82:	00007517          	auipc	a0,0x7
    8001fa86:	43650513          	addi	a0,a0,1078 # 80026eb8 <__func__.0+0x2f8>
    8001fa8a:	47a050ef          	jal	80024f04 <printf>
    8001fa8e:	00029797          	auipc	a5,0x29
    8001fa92:	5837c783          	lbu	a5,1411(a5) # 80049011 <excpt+0x1>
    8001fa96:	00007597          	auipc	a1,0x7
    8001fa9a:	3ea58593          	addi	a1,a1,1002 # 80026e80 <__func__.0+0x2c0>
    8001fa9e:	c789                	beqz	a5,8001faa8 <time_test_2+0x80>
    8001faa0:	00007597          	auipc	a1,0x7
    8001faa4:	3f058593          	addi	a1,a1,1008 # 80026e90 <__func__.0+0x2d0>
    8001faa8:	00007517          	auipc	a0,0x7
    8001faac:	42850513          	addi	a0,a0,1064 # 80026ed0 <__func__.0+0x310>
    8001fab0:	454050ef          	jal	80024f04 <printf>
    8001fab4:	00029797          	auipc	a5,0x29
    8001fab8:	55d7c783          	lbu	a5,1373(a5) # 80049011 <excpt+0x1>
    8001fabc:	e7a1                	bnez	a5,8001fb04 <time_test_2+0xdc>
    8001fabe:	4529                	li	a0,10
    8001fac0:	24e040ef          	jal	80023d0e <putchar>
    8001fac4:	00029797          	auipc	a5,0x29
    8001fac8:	54d7c783          	lbu	a5,1357(a5) # 80049011 <excpt+0x1>
    8001facc:	e795                	bnez	a5,8001faf8 <time_test_2+0xd0>
    8001face:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001fad0:	00007597          	auipc	a1,0x7
    8001fad4:	3b058593          	addi	a1,a1,944 # 80026e80 <__func__.0+0x2c0>
    8001fad8:	00007517          	auipc	a0,0x7
    8001fadc:	46050513          	addi	a0,a0,1120 # 80026f38 <__func__.0+0x378>
    8001fae0:	424050ef          	jal	80024f04 <printf>
    8001fae4:	4511                	li	a0,4
    8001fae6:	910e10ef          	jal	80000bf6 <goto_priv>
    8001faea:	9c3e10ef          	jal	800014ac <reset_state>
}
    8001faee:	60a2                	ld	ra,8(sp)
    8001faf0:	8522                	mv	a0,s0
    8001faf2:	6402                	ld	s0,0(sp)
    8001faf4:	0141                	addi	sp,sp,16
    8001faf6:	8082                	ret
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001faf8:	4401                	li	s0,0
    TEST_END(); 
    8001fafa:	00007597          	auipc	a1,0x7
    8001fafe:	39658593          	addi	a1,a1,918 # 80026e90 <__func__.0+0x2d0>
    8001fb02:	bfd9                	j	8001fad8 <time_test_2+0xb0>
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001fb04:	00007517          	auipc	a0,0x7
    8001fb08:	3d450513          	addi	a0,a0,980 # 80026ed8 <__func__.0+0x318>
    8001fb0c:	3f8050ef          	jal	80024f04 <printf>
    8001fb10:	02900513          	li	a0,41
    8001fb14:	1fa040ef          	jal	80023d0e <putchar>
    8001fb18:	b75d                	j	8001fabe <time_test_2+0x96>

000000008001fb1a <time_test_3>:

bool time_test_3() {
    8001fb1a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fb1c:	00007597          	auipc	a1,0x7
    8001fb20:	dac58593          	addi	a1,a1,-596 # 800268c8 <__func__.41>
    8001fb24:	00007517          	auipc	a0,0x7
    8001fb28:	37c50513          	addi	a0,a0,892 # 80026ea0 <__func__.0+0x2e0>
bool time_test_3() {
    8001fb2c:	ec06                	sd	ra,24(sp)
    8001fb2e:	e822                	sd	s0,16(sp)
    8001fb30:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fb32:	3d2050ef          	jal	80024f04 <printf>
    8001fb36:	4529                	li	a0,10
    8001fb38:	1d6040ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8001fb3c:	4511                	li	a0,4
    8001fb3e:	8b8e10ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001fb42:	10617073          	csrci	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001fb46:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001fb4a:	4505                	li	a0,1
    8001fb4c:	8aae10ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fb50:	0330000f          	fence	rw,rw
    8001fb54:	00029417          	auipc	s0,0x29
    8001fb58:	4bc40413          	addi	s0,s0,1212 # 80049010 <excpt>
    8001fb5c:	4785                	li	a5,1
    8001fb5e:	00029717          	auipc	a4,0x29
    8001fb62:	4e073523          	sd	zero,1258(a4) # 80049048 <excpt+0x38>
    8001fb66:	00f41023          	sh	a5,0(s0)
    8001fb6a:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fb6e:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001fb72:	08200593          	li	a1,130
    8001fb76:	0000e617          	auipc	a2,0xe
    8001fb7a:	55a60613          	addi	a2,a2,1370 # 8002e0d0 <__func__.0+0x7510>
    8001fb7e:	00007517          	auipc	a0,0x7
    8001fb82:	33a50513          	addi	a0,a0,826 # 80026eb8 <__func__.0+0x2f8>
    8001fb86:	37e050ef          	jal	80024f04 <printf>
    8001fb8a:	00029797          	auipc	a5,0x29
    8001fb8e:	4877c783          	lbu	a5,1159(a5) # 80049011 <excpt+0x1>
    8001fb92:	00007597          	auipc	a1,0x7
    8001fb96:	2fe58593          	addi	a1,a1,766 # 80026e90 <__func__.0+0x2d0>
    8001fb9a:	cf89                	beqz	a5,8001fbb4 <time_test_3+0x9a>
    8001fb9c:	6418                	ld	a4,8(s0)
    8001fb9e:	4789                	li	a5,2
    8001fba0:	00007597          	auipc	a1,0x7
    8001fba4:	2e058593          	addi	a1,a1,736 # 80026e80 <__func__.0+0x2c0>
    8001fba8:	00f70663          	beq	a4,a5,8001fbb4 <time_test_3+0x9a>
    8001fbac:	00007597          	auipc	a1,0x7
    8001fbb0:	2e458593          	addi	a1,a1,740 # 80026e90 <__func__.0+0x2d0>
    8001fbb4:	00007517          	auipc	a0,0x7
    8001fbb8:	31c50513          	addi	a0,a0,796 # 80026ed0 <__func__.0+0x310>
    8001fbbc:	348050ef          	jal	80024f04 <printf>
    8001fbc0:	00029797          	auipc	a5,0x29
    8001fbc4:	4517c783          	lbu	a5,1105(a5) # 80049011 <excpt+0x1>
    8001fbc8:	c789                	beqz	a5,8001fbd2 <time_test_3+0xb8>
    8001fbca:	6418                	ld	a4,8(s0)
    8001fbcc:	4789                	li	a5,2
    8001fbce:	00f70c63          	beq	a4,a5,8001fbe6 <time_test_3+0xcc>
    8001fbd2:	00007517          	auipc	a0,0x7
    8001fbd6:	30650513          	addi	a0,a0,774 # 80026ed8 <__func__.0+0x318>
    8001fbda:	32a050ef          	jal	80024f04 <printf>
    8001fbde:	02900513          	li	a0,41
    8001fbe2:	12c040ef          	jal	80023d0e <putchar>
    8001fbe6:	4529                	li	a0,10
    8001fbe8:	126040ef          	jal	80023d0e <putchar>
    8001fbec:	00029497          	auipc	s1,0x29
    8001fbf0:	4254c483          	lbu	s1,1061(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001fbf4:	00007597          	auipc	a1,0x7
    8001fbf8:	29c58593          	addi	a1,a1,668 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001fbfc:	cc91                	beqz	s1,8001fc18 <time_test_3+0xfe>
    8001fbfe:	6418                	ld	a4,8(s0)
    8001fc00:	4789                	li	a5,2
    TEST_END(); 
    8001fc02:	00007597          	auipc	a1,0x7
    8001fc06:	27e58593          	addi	a1,a1,638 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001fc0a:	00f70763          	beq	a4,a5,8001fc18 <time_test_3+0xfe>
    8001fc0e:	4481                	li	s1,0
    TEST_END(); 
    8001fc10:	00007597          	auipc	a1,0x7
    8001fc14:	28058593          	addi	a1,a1,640 # 80026e90 <__func__.0+0x2d0>
    8001fc18:	00007517          	auipc	a0,0x7
    8001fc1c:	32050513          	addi	a0,a0,800 # 80026f38 <__func__.0+0x378>
    8001fc20:	2e4050ef          	jal	80024f04 <printf>
    8001fc24:	4511                	li	a0,4
    8001fc26:	fd1e00ef          	jal	80000bf6 <goto_priv>
    8001fc2a:	883e10ef          	jal	800014ac <reset_state>
}
    8001fc2e:	60e2                	ld	ra,24(sp)
    8001fc30:	6442                	ld	s0,16(sp)
    8001fc32:	8526                	mv	a0,s1
    8001fc34:	64a2                	ld	s1,8(sp)
    8001fc36:	6105                	addi	sp,sp,32
    8001fc38:	8082                	ret

000000008001fc3a <time_test_4>:

bool time_test_4() {
    8001fc3a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fc3c:	00007597          	auipc	a1,0x7
    8001fc40:	c9c58593          	addi	a1,a1,-868 # 800268d8 <__func__.40>
    8001fc44:	00007517          	auipc	a0,0x7
    8001fc48:	25c50513          	addi	a0,a0,604 # 80026ea0 <__func__.0+0x2e0>
bool time_test_4() {
    8001fc4c:	e406                	sd	ra,8(sp)
    8001fc4e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fc50:	2b4050ef          	jal	80024f04 <printf>
    8001fc54:	4529                	li	a0,10
    8001fc56:	0b8040ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8001fc5a:	4511                	li	a0,4
    8001fc5c:	f9be00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001fc60:	10616073          	csrsi	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001fc64:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001fc68:	4505                	li	a0,1
    8001fc6a:	f8de00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fc6e:	0330000f          	fence	rw,rw
    8001fc72:	4785                	li	a5,1
    8001fc74:	00029717          	auipc	a4,0x29
    8001fc78:	3c073a23          	sd	zero,980(a4) # 80049048 <excpt+0x38>
    8001fc7c:	00029717          	auipc	a4,0x29
    8001fc80:	38f71a23          	sh	a5,916(a4) # 80049010 <excpt>
    8001fc84:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fc88:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001fc8c:	08200593          	li	a1,130
    8001fc90:	0000e617          	auipc	a2,0xe
    8001fc94:	49060613          	addi	a2,a2,1168 # 8002e120 <__func__.0+0x7560>
    8001fc98:	00007517          	auipc	a0,0x7
    8001fc9c:	22050513          	addi	a0,a0,544 # 80026eb8 <__func__.0+0x2f8>
    8001fca0:	264050ef          	jal	80024f04 <printf>
    8001fca4:	00029797          	auipc	a5,0x29
    8001fca8:	36d7c783          	lbu	a5,877(a5) # 80049011 <excpt+0x1>
    8001fcac:	00007597          	auipc	a1,0x7
    8001fcb0:	1d458593          	addi	a1,a1,468 # 80026e80 <__func__.0+0x2c0>
    8001fcb4:	c789                	beqz	a5,8001fcbe <time_test_4+0x84>
    8001fcb6:	00007597          	auipc	a1,0x7
    8001fcba:	1da58593          	addi	a1,a1,474 # 80026e90 <__func__.0+0x2d0>
    8001fcbe:	00007517          	auipc	a0,0x7
    8001fcc2:	21250513          	addi	a0,a0,530 # 80026ed0 <__func__.0+0x310>
    8001fcc6:	23e050ef          	jal	80024f04 <printf>
    8001fcca:	00029797          	auipc	a5,0x29
    8001fcce:	3477c783          	lbu	a5,839(a5) # 80049011 <excpt+0x1>
    8001fcd2:	e7a1                	bnez	a5,8001fd1a <time_test_4+0xe0>
    8001fcd4:	4529                	li	a0,10
    8001fcd6:	038040ef          	jal	80023d0e <putchar>
    8001fcda:	00029797          	auipc	a5,0x29
    8001fcde:	3377c783          	lbu	a5,823(a5) # 80049011 <excpt+0x1>
    8001fce2:	e795                	bnez	a5,8001fd0e <time_test_4+0xd4>
    8001fce4:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fce6:	00007597          	auipc	a1,0x7
    8001fcea:	19a58593          	addi	a1,a1,410 # 80026e80 <__func__.0+0x2c0>
    8001fcee:	00007517          	auipc	a0,0x7
    8001fcf2:	24a50513          	addi	a0,a0,586 # 80026f38 <__func__.0+0x378>
    8001fcf6:	20e050ef          	jal	80024f04 <printf>
    8001fcfa:	4511                	li	a0,4
    8001fcfc:	efbe00ef          	jal	80000bf6 <goto_priv>
    8001fd00:	face10ef          	jal	800014ac <reset_state>
}
    8001fd04:	60a2                	ld	ra,8(sp)
    8001fd06:	8522                	mv	a0,s0
    8001fd08:	6402                	ld	s0,0(sp)
    8001fd0a:	0141                	addi	sp,sp,16
    8001fd0c:	8082                	ret
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001fd0e:	4401                	li	s0,0
    TEST_END(); 
    8001fd10:	00007597          	auipc	a1,0x7
    8001fd14:	18058593          	addi	a1,a1,384 # 80026e90 <__func__.0+0x2d0>
    8001fd18:	bfd9                	j	8001fcee <time_test_4+0xb4>
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001fd1a:	00007517          	auipc	a0,0x7
    8001fd1e:	1be50513          	addi	a0,a0,446 # 80026ed8 <__func__.0+0x318>
    8001fd22:	1e2050ef          	jal	80024f04 <printf>
    8001fd26:	02900513          	li	a0,41
    8001fd2a:	7e5030ef          	jal	80023d0e <putchar>
    8001fd2e:	b75d                	j	8001fcd4 <time_test_4+0x9a>

000000008001fd30 <time_test_5>:

bool time_test_5() {
    8001fd30:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fd32:	00007597          	auipc	a1,0x7
    8001fd36:	bb658593          	addi	a1,a1,-1098 # 800268e8 <__func__.39>
    8001fd3a:	00007517          	auipc	a0,0x7
    8001fd3e:	16650513          	addi	a0,a0,358 # 80026ea0 <__func__.0+0x2e0>
bool time_test_5() {
    8001fd42:	ec06                	sd	ra,24(sp)
    8001fd44:	e822                	sd	s0,16(sp)
    8001fd46:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fd48:	1bc050ef          	jal	80024f04 <printf>
    8001fd4c:	4529                	li	a0,10
    8001fd4e:	7c1030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8001fd52:	4511                	li	a0,4
    8001fd54:	ea3e00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001fd58:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001fd5c:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001fd60:	4509                	li	a0,2
    8001fd62:	e95e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fd66:	0330000f          	fence	rw,rw
    8001fd6a:	00029417          	auipc	s0,0x29
    8001fd6e:	2a640413          	addi	s0,s0,678 # 80049010 <excpt>
    8001fd72:	4785                	li	a5,1
    8001fd74:	00029717          	auipc	a4,0x29
    8001fd78:	2c073a23          	sd	zero,724(a4) # 80049048 <excpt+0x38>
    8001fd7c:	00f41023          	sh	a5,0(s0)
    8001fd80:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fd84:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001fd88:	08200593          	li	a1,130
    8001fd8c:	0000e617          	auipc	a2,0xe
    8001fd90:	3dc60613          	addi	a2,a2,988 # 8002e168 <__func__.0+0x75a8>
    8001fd94:	00007517          	auipc	a0,0x7
    8001fd98:	12450513          	addi	a0,a0,292 # 80026eb8 <__func__.0+0x2f8>
    8001fd9c:	168050ef          	jal	80024f04 <printf>
    8001fda0:	00029797          	auipc	a5,0x29
    8001fda4:	2717c783          	lbu	a5,625(a5) # 80049011 <excpt+0x1>
    8001fda8:	00007597          	auipc	a1,0x7
    8001fdac:	0e858593          	addi	a1,a1,232 # 80026e90 <__func__.0+0x2d0>
    8001fdb0:	cf89                	beqz	a5,8001fdca <time_test_5+0x9a>
    8001fdb2:	6418                	ld	a4,8(s0)
    8001fdb4:	47d9                	li	a5,22
    8001fdb6:	00007597          	auipc	a1,0x7
    8001fdba:	0ca58593          	addi	a1,a1,202 # 80026e80 <__func__.0+0x2c0>
    8001fdbe:	00f70663          	beq	a4,a5,8001fdca <time_test_5+0x9a>
    8001fdc2:	00007597          	auipc	a1,0x7
    8001fdc6:	0ce58593          	addi	a1,a1,206 # 80026e90 <__func__.0+0x2d0>
    8001fdca:	00007517          	auipc	a0,0x7
    8001fdce:	10650513          	addi	a0,a0,262 # 80026ed0 <__func__.0+0x310>
    8001fdd2:	132050ef          	jal	80024f04 <printf>
    8001fdd6:	00029797          	auipc	a5,0x29
    8001fdda:	23b7c783          	lbu	a5,571(a5) # 80049011 <excpt+0x1>
    8001fdde:	c789                	beqz	a5,8001fde8 <time_test_5+0xb8>
    8001fde0:	6418                	ld	a4,8(s0)
    8001fde2:	47d9                	li	a5,22
    8001fde4:	00f70c63          	beq	a4,a5,8001fdfc <time_test_5+0xcc>
    8001fde8:	00007517          	auipc	a0,0x7
    8001fdec:	0f050513          	addi	a0,a0,240 # 80026ed8 <__func__.0+0x318>
    8001fdf0:	114050ef          	jal	80024f04 <printf>
    8001fdf4:	02900513          	li	a0,41
    8001fdf8:	717030ef          	jal	80023d0e <putchar>
    8001fdfc:	4529                	li	a0,10
    8001fdfe:	711030ef          	jal	80023d0e <putchar>
    8001fe02:	00029497          	auipc	s1,0x29
    8001fe06:	20f4c483          	lbu	s1,527(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001fe0a:	00007597          	auipc	a1,0x7
    8001fe0e:	08658593          	addi	a1,a1,134 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001fe12:	cc91                	beqz	s1,8001fe2e <time_test_5+0xfe>
    8001fe14:	6418                	ld	a4,8(s0)
    8001fe16:	47d9                	li	a5,22
    TEST_END(); 
    8001fe18:	00007597          	auipc	a1,0x7
    8001fe1c:	06858593          	addi	a1,a1,104 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001fe20:	00f70763          	beq	a4,a5,8001fe2e <time_test_5+0xfe>
    8001fe24:	4481                	li	s1,0
    TEST_END(); 
    8001fe26:	00007597          	auipc	a1,0x7
    8001fe2a:	06a58593          	addi	a1,a1,106 # 80026e90 <__func__.0+0x2d0>
    8001fe2e:	00007517          	auipc	a0,0x7
    8001fe32:	10a50513          	addi	a0,a0,266 # 80026f38 <__func__.0+0x378>
    8001fe36:	0ce050ef          	jal	80024f04 <printf>
    8001fe3a:	4511                	li	a0,4
    8001fe3c:	dbbe00ef          	jal	80000bf6 <goto_priv>
    8001fe40:	e6ce10ef          	jal	800014ac <reset_state>
}
    8001fe44:	60e2                	ld	ra,24(sp)
    8001fe46:	6442                	ld	s0,16(sp)
    8001fe48:	8526                	mv	a0,s1
    8001fe4a:	64a2                	ld	s1,8(sp)
    8001fe4c:	6105                	addi	sp,sp,32
    8001fe4e:	8082                	ret

000000008001fe50 <time_test_6>:

bool time_test_6() {
    8001fe50:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fe52:	00007597          	auipc	a1,0x7
    8001fe56:	aa658593          	addi	a1,a1,-1370 # 800268f8 <__func__.38>
    8001fe5a:	00007517          	auipc	a0,0x7
    8001fe5e:	04650513          	addi	a0,a0,70 # 80026ea0 <__func__.0+0x2e0>
bool time_test_6() {
    8001fe62:	e406                	sd	ra,8(sp)
    8001fe64:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fe66:	09e050ef          	jal	80024f04 <printf>
    8001fe6a:	4529                	li	a0,10
    8001fe6c:	6a3030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8001fe70:	4511                	li	a0,4
    8001fe72:	d85e00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001fe76:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001fe7a:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001fe7e:	4509                	li	a0,2
    8001fe80:	d77e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fe84:	0330000f          	fence	rw,rw
    8001fe88:	4785                	li	a5,1
    8001fe8a:	00029717          	auipc	a4,0x29
    8001fe8e:	1a073f23          	sd	zero,446(a4) # 80049048 <excpt+0x38>
    8001fe92:	00029717          	auipc	a4,0x29
    8001fe96:	16f71f23          	sh	a5,382(a4) # 80049010 <excpt>
    8001fe9a:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001fe9e:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001fea2:	08200593          	li	a1,130
    8001fea6:	0000e617          	auipc	a2,0xe
    8001feaa:	32260613          	addi	a2,a2,802 # 8002e1c8 <__func__.0+0x7608>
    8001feae:	00007517          	auipc	a0,0x7
    8001feb2:	00a50513          	addi	a0,a0,10 # 80026eb8 <__func__.0+0x2f8>
    8001feb6:	04e050ef          	jal	80024f04 <printf>
    8001feba:	00029797          	auipc	a5,0x29
    8001febe:	1577c783          	lbu	a5,343(a5) # 80049011 <excpt+0x1>
    8001fec2:	00007597          	auipc	a1,0x7
    8001fec6:	fbe58593          	addi	a1,a1,-66 # 80026e80 <__func__.0+0x2c0>
    8001feca:	c789                	beqz	a5,8001fed4 <time_test_6+0x84>
    8001fecc:	00007597          	auipc	a1,0x7
    8001fed0:	fc458593          	addi	a1,a1,-60 # 80026e90 <__func__.0+0x2d0>
    8001fed4:	00007517          	auipc	a0,0x7
    8001fed8:	ffc50513          	addi	a0,a0,-4 # 80026ed0 <__func__.0+0x310>
    8001fedc:	028050ef          	jal	80024f04 <printf>
    8001fee0:	00029797          	auipc	a5,0x29
    8001fee4:	1317c783          	lbu	a5,305(a5) # 80049011 <excpt+0x1>
    8001fee8:	e7a1                	bnez	a5,8001ff30 <time_test_6+0xe0>
    8001feea:	4529                	li	a0,10
    8001feec:	623030ef          	jal	80023d0e <putchar>
    8001fef0:	00029797          	auipc	a5,0x29
    8001fef4:	1217c783          	lbu	a5,289(a5) # 80049011 <excpt+0x1>
    8001fef8:	e795                	bnez	a5,8001ff24 <time_test_6+0xd4>
    8001fefa:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fefc:	00007597          	auipc	a1,0x7
    8001ff00:	f8458593          	addi	a1,a1,-124 # 80026e80 <__func__.0+0x2c0>
    8001ff04:	00007517          	auipc	a0,0x7
    8001ff08:	03450513          	addi	a0,a0,52 # 80026f38 <__func__.0+0x378>
    8001ff0c:	7f9040ef          	jal	80024f04 <printf>
    8001ff10:	4511                	li	a0,4
    8001ff12:	ce5e00ef          	jal	80000bf6 <goto_priv>
    8001ff16:	d96e10ef          	jal	800014ac <reset_state>
}
    8001ff1a:	60a2                	ld	ra,8(sp)
    8001ff1c:	8522                	mv	a0,s0
    8001ff1e:	6402                	ld	s0,0(sp)
    8001ff20:	0141                	addi	sp,sp,16
    8001ff22:	8082                	ret
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001ff24:	4401                	li	s0,0
    TEST_END(); 
    8001ff26:	00007597          	auipc	a1,0x7
    8001ff2a:	f6a58593          	addi	a1,a1,-150 # 80026e90 <__func__.0+0x2d0>
    8001ff2e:	bfd9                	j	8001ff04 <time_test_6+0xb4>
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001ff30:	00007517          	auipc	a0,0x7
    8001ff34:	fa850513          	addi	a0,a0,-88 # 80026ed8 <__func__.0+0x318>
    8001ff38:	7cd040ef          	jal	80024f04 <printf>
    8001ff3c:	02900513          	li	a0,41
    8001ff40:	5cf030ef          	jal	80023d0e <putchar>
    8001ff44:	b75d                	j	8001feea <time_test_6+0x9a>

000000008001ff46 <time_test_7>:

bool time_test_7() {
    8001ff46:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001ff48:	00007597          	auipc	a1,0x7
    8001ff4c:	9c058593          	addi	a1,a1,-1600 # 80026908 <__func__.37>
    8001ff50:	00007517          	auipc	a0,0x7
    8001ff54:	f5050513          	addi	a0,a0,-176 # 80026ea0 <__func__.0+0x2e0>
bool time_test_7() {
    8001ff58:	e406                	sd	ra,8(sp)
    8001ff5a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001ff5c:	7a9040ef          	jal	80024f04 <printf>
    8001ff60:	4529                	li	a0,10
    8001ff62:	5ad030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8001ff66:	4511                	li	a0,4
    8001ff68:	c8fe00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001ff6c:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001ff70:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001ff74:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001ff78:	4501                	li	a0,0
    8001ff7a:	c7de00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ff7e:	0330000f          	fence	rw,rw
    8001ff82:	4785                	li	a5,1
    8001ff84:	00029717          	auipc	a4,0x29
    8001ff88:	0c073223          	sd	zero,196(a4) # 80049048 <excpt+0x38>
    8001ff8c:	00029717          	auipc	a4,0x29
    8001ff90:	08f71223          	sh	a5,132(a4) # 80049010 <excpt>
    8001ff94:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    8001ff98:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001ff9c:	08200593          	li	a1,130
    8001ffa0:	0000e617          	auipc	a2,0xe
    8001ffa4:	27060613          	addi	a2,a2,624 # 8002e210 <__func__.0+0x7650>
    8001ffa8:	00007517          	auipc	a0,0x7
    8001ffac:	f1050513          	addi	a0,a0,-240 # 80026eb8 <__func__.0+0x2f8>
    8001ffb0:	755040ef          	jal	80024f04 <printf>
    8001ffb4:	00029797          	auipc	a5,0x29
    8001ffb8:	05d7c783          	lbu	a5,93(a5) # 80049011 <excpt+0x1>
    8001ffbc:	00007597          	auipc	a1,0x7
    8001ffc0:	ec458593          	addi	a1,a1,-316 # 80026e80 <__func__.0+0x2c0>
    8001ffc4:	c789                	beqz	a5,8001ffce <time_test_7+0x88>
    8001ffc6:	00007597          	auipc	a1,0x7
    8001ffca:	eca58593          	addi	a1,a1,-310 # 80026e90 <__func__.0+0x2d0>
    8001ffce:	00007517          	auipc	a0,0x7
    8001ffd2:	f0250513          	addi	a0,a0,-254 # 80026ed0 <__func__.0+0x310>
    8001ffd6:	72f040ef          	jal	80024f04 <printf>
    8001ffda:	00029797          	auipc	a5,0x29
    8001ffde:	0377c783          	lbu	a5,55(a5) # 80049011 <excpt+0x1>
    8001ffe2:	e7a1                	bnez	a5,8002002a <time_test_7+0xe4>
    8001ffe4:	4529                	li	a0,10
    8001ffe6:	529030ef          	jal	80023d0e <putchar>
    8001ffea:	00029797          	auipc	a5,0x29
    8001ffee:	0277c783          	lbu	a5,39(a5) # 80049011 <excpt+0x1>
    8001fff2:	e795                	bnez	a5,8002001e <time_test_7+0xd8>
    8001fff4:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fff6:	00007597          	auipc	a1,0x7
    8001fffa:	e8a58593          	addi	a1,a1,-374 # 80026e80 <__func__.0+0x2c0>
    8001fffe:	00007517          	auipc	a0,0x7
    80020002:	f3a50513          	addi	a0,a0,-198 # 80026f38 <__func__.0+0x378>
    80020006:	6ff040ef          	jal	80024f04 <printf>
    8002000a:	4511                	li	a0,4
    8002000c:	bebe00ef          	jal	80000bf6 <goto_priv>
    80020010:	c9ce10ef          	jal	800014ac <reset_state>
}
    80020014:	60a2                	ld	ra,8(sp)
    80020016:	8522                	mv	a0,s0
    80020018:	6402                	ld	s0,0(sp)
    8002001a:	0141                	addi	sp,sp,16
    8002001c:	8082                	ret
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8002001e:	4401                	li	s0,0
    TEST_END(); 
    80020020:	00007597          	auipc	a1,0x7
    80020024:	e7058593          	addi	a1,a1,-400 # 80026e90 <__func__.0+0x2d0>
    80020028:	bfd9                	j	8001fffe <time_test_7+0xb8>
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8002002a:	00007517          	auipc	a0,0x7
    8002002e:	eae50513          	addi	a0,a0,-338 # 80026ed8 <__func__.0+0x318>
    80020032:	6d3040ef          	jal	80024f04 <printf>
    80020036:	02900513          	li	a0,41
    8002003a:	4d5030ef          	jal	80023d0e <putchar>
    8002003e:	b75d                	j	8001ffe4 <time_test_7+0x9e>

0000000080020040 <time_test_8>:

bool time_test_8() {
    80020040:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020042:	00007597          	auipc	a1,0x7
    80020046:	8d658593          	addi	a1,a1,-1834 # 80026918 <__func__.36>
    8002004a:	00007517          	auipc	a0,0x7
    8002004e:	e5650513          	addi	a0,a0,-426 # 80026ea0 <__func__.0+0x2e0>
bool time_test_8() {
    80020052:	ec06                	sd	ra,24(sp)
    80020054:	e822                	sd	s0,16(sp)
    80020056:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020058:	6ad040ef          	jal	80024f04 <printf>
    8002005c:	4529                	li	a0,10
    8002005e:	4b1030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80020062:	4511                	li	a0,4
    80020064:	b93e00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020068:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002006c:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    80020070:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    80020074:	4501                	li	a0,0
    80020076:	b81e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002007a:	0330000f          	fence	rw,rw
    8002007e:	00029417          	auipc	s0,0x29
    80020082:	f9240413          	addi	s0,s0,-110 # 80049010 <excpt>
    80020086:	4785                	li	a5,1
    80020088:	00029717          	auipc	a4,0x29
    8002008c:	fc073023          	sd	zero,-64(a4) # 80049048 <excpt+0x38>
    80020090:	00f41023          	sh	a5,0(s0)
    80020094:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    80020098:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8002009c:	08200593          	li	a1,130
    800200a0:	0000e617          	auipc	a2,0xe
    800200a4:	1c860613          	addi	a2,a2,456 # 8002e268 <__func__.0+0x76a8>
    800200a8:	00007517          	auipc	a0,0x7
    800200ac:	e1050513          	addi	a0,a0,-496 # 80026eb8 <__func__.0+0x2f8>
    800200b0:	655040ef          	jal	80024f04 <printf>
    800200b4:	00029797          	auipc	a5,0x29
    800200b8:	f5d7c783          	lbu	a5,-163(a5) # 80049011 <excpt+0x1>
    800200bc:	00007597          	auipc	a1,0x7
    800200c0:	dd458593          	addi	a1,a1,-556 # 80026e90 <__func__.0+0x2d0>
    800200c4:	cf89                	beqz	a5,800200de <time_test_8+0x9e>
    800200c6:	6418                	ld	a4,8(s0)
    800200c8:	47d9                	li	a5,22
    800200ca:	00007597          	auipc	a1,0x7
    800200ce:	db658593          	addi	a1,a1,-586 # 80026e80 <__func__.0+0x2c0>
    800200d2:	00f70663          	beq	a4,a5,800200de <time_test_8+0x9e>
    800200d6:	00007597          	auipc	a1,0x7
    800200da:	dba58593          	addi	a1,a1,-582 # 80026e90 <__func__.0+0x2d0>
    800200de:	00007517          	auipc	a0,0x7
    800200e2:	df250513          	addi	a0,a0,-526 # 80026ed0 <__func__.0+0x310>
    800200e6:	61f040ef          	jal	80024f04 <printf>
    800200ea:	00029797          	auipc	a5,0x29
    800200ee:	f277c783          	lbu	a5,-217(a5) # 80049011 <excpt+0x1>
    800200f2:	c789                	beqz	a5,800200fc <time_test_8+0xbc>
    800200f4:	6418                	ld	a4,8(s0)
    800200f6:	47d9                	li	a5,22
    800200f8:	00f70c63          	beq	a4,a5,80020110 <time_test_8+0xd0>
    800200fc:	00007517          	auipc	a0,0x7
    80020100:	ddc50513          	addi	a0,a0,-548 # 80026ed8 <__func__.0+0x318>
    80020104:	601040ef          	jal	80024f04 <printf>
    80020108:	02900513          	li	a0,41
    8002010c:	403030ef          	jal	80023d0e <putchar>
    80020110:	4529                	li	a0,10
    80020112:	3fd030ef          	jal	80023d0e <putchar>
    80020116:	00029497          	auipc	s1,0x29
    8002011a:	efb4c483          	lbu	s1,-261(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8002011e:	00007597          	auipc	a1,0x7
    80020122:	d7258593          	addi	a1,a1,-654 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    80020126:	cc91                	beqz	s1,80020142 <time_test_8+0x102>
    80020128:	6418                	ld	a4,8(s0)
    8002012a:	47d9                	li	a5,22
    TEST_END(); 
    8002012c:	00007597          	auipc	a1,0x7
    80020130:	d5458593          	addi	a1,a1,-684 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    80020134:	00f70763          	beq	a4,a5,80020142 <time_test_8+0x102>
    80020138:	4481                	li	s1,0
    TEST_END(); 
    8002013a:	00007597          	auipc	a1,0x7
    8002013e:	d5658593          	addi	a1,a1,-682 # 80026e90 <__func__.0+0x2d0>
    80020142:	00007517          	auipc	a0,0x7
    80020146:	df650513          	addi	a0,a0,-522 # 80026f38 <__func__.0+0x378>
    8002014a:	5bb040ef          	jal	80024f04 <printf>
    8002014e:	4511                	li	a0,4
    80020150:	aa7e00ef          	jal	80000bf6 <goto_priv>
    80020154:	b58e10ef          	jal	800014ac <reset_state>
}
    80020158:	60e2                	ld	ra,24(sp)
    8002015a:	6442                	ld	s0,16(sp)
    8002015c:	8526                	mv	a0,s1
    8002015e:	64a2                	ld	s1,8(sp)
    80020160:	6105                	addi	sp,sp,32
    80020162:	8082                	ret

0000000080020164 <time_test_9>:

bool time_test_9() {
    80020164:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020166:	00006597          	auipc	a1,0x6
    8002016a:	7c258593          	addi	a1,a1,1986 # 80026928 <__func__.35>
    8002016e:	00007517          	auipc	a0,0x7
    80020172:	d3250513          	addi	a0,a0,-718 # 80026ea0 <__func__.0+0x2e0>
bool time_test_9() {
    80020176:	ec06                	sd	ra,24(sp)
    80020178:	e822                	sd	s0,16(sp)
    8002017a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002017c:	589040ef          	jal	80024f04 <printf>
    80020180:	4529                	li	a0,10
    80020182:	38d030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80020186:	4511                	li	a0,4
    80020188:	a6fe00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8002018c:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020190:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    80020194:	10617073          	csrci	scounteren,2

    goto_priv(PRIV_HU);
    80020198:	4505                	li	a0,1
    8002019a:	a5de00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002019e:	0330000f          	fence	rw,rw
    800201a2:	00029417          	auipc	s0,0x29
    800201a6:	e6e40413          	addi	s0,s0,-402 # 80049010 <excpt>
    800201aa:	4785                	li	a5,1
    800201ac:	00029717          	auipc	a4,0x29
    800201b0:	e8073e23          	sd	zero,-356(a4) # 80049048 <excpt+0x38>
    800201b4:	00f41023          	sh	a5,0(s0)
    800201b8:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    800201bc:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    800201c0:	08200593          	li	a1,130
    800201c4:	0000e617          	auipc	a2,0xe
    800201c8:	11460613          	addi	a2,a2,276 # 8002e2d8 <__func__.0+0x7718>
    800201cc:	00007517          	auipc	a0,0x7
    800201d0:	cec50513          	addi	a0,a0,-788 # 80026eb8 <__func__.0+0x2f8>
    800201d4:	531040ef          	jal	80024f04 <printf>
    800201d8:	00029797          	auipc	a5,0x29
    800201dc:	e397c783          	lbu	a5,-455(a5) # 80049011 <excpt+0x1>
    800201e0:	00007597          	auipc	a1,0x7
    800201e4:	cb058593          	addi	a1,a1,-848 # 80026e90 <__func__.0+0x2d0>
    800201e8:	cf89                	beqz	a5,80020202 <time_test_9+0x9e>
    800201ea:	6418                	ld	a4,8(s0)
    800201ec:	4789                	li	a5,2
    800201ee:	00007597          	auipc	a1,0x7
    800201f2:	c9258593          	addi	a1,a1,-878 # 80026e80 <__func__.0+0x2c0>
    800201f6:	00f70663          	beq	a4,a5,80020202 <time_test_9+0x9e>
    800201fa:	00007597          	auipc	a1,0x7
    800201fe:	c9658593          	addi	a1,a1,-874 # 80026e90 <__func__.0+0x2d0>
    80020202:	00007517          	auipc	a0,0x7
    80020206:	cce50513          	addi	a0,a0,-818 # 80026ed0 <__func__.0+0x310>
    8002020a:	4fb040ef          	jal	80024f04 <printf>
    8002020e:	00029797          	auipc	a5,0x29
    80020212:	e037c783          	lbu	a5,-509(a5) # 80049011 <excpt+0x1>
    80020216:	c789                	beqz	a5,80020220 <time_test_9+0xbc>
    80020218:	6418                	ld	a4,8(s0)
    8002021a:	4789                	li	a5,2
    8002021c:	00f70c63          	beq	a4,a5,80020234 <time_test_9+0xd0>
    80020220:	00007517          	auipc	a0,0x7
    80020224:	cb850513          	addi	a0,a0,-840 # 80026ed8 <__func__.0+0x318>
    80020228:	4dd040ef          	jal	80024f04 <printf>
    8002022c:	02900513          	li	a0,41
    80020230:	2df030ef          	jal	80023d0e <putchar>
    80020234:	4529                	li	a0,10
    80020236:	2d9030ef          	jal	80023d0e <putchar>
    8002023a:	00029497          	auipc	s1,0x29
    8002023e:	dd74c483          	lbu	s1,-553(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020242:	00007597          	auipc	a1,0x7
    80020246:	c4e58593          	addi	a1,a1,-946 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8002024a:	cc91                	beqz	s1,80020266 <time_test_9+0x102>
    8002024c:	6418                	ld	a4,8(s0)
    8002024e:	4789                	li	a5,2
    TEST_END(); 
    80020250:	00007597          	auipc	a1,0x7
    80020254:	c3058593          	addi	a1,a1,-976 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    80020258:	00f70763          	beq	a4,a5,80020266 <time_test_9+0x102>
    8002025c:	4481                	li	s1,0
    TEST_END(); 
    8002025e:	00007597          	auipc	a1,0x7
    80020262:	c3258593          	addi	a1,a1,-974 # 80026e90 <__func__.0+0x2d0>
    80020266:	00007517          	auipc	a0,0x7
    8002026a:	cd250513          	addi	a0,a0,-814 # 80026f38 <__func__.0+0x378>
    8002026e:	497040ef          	jal	80024f04 <printf>
    80020272:	4511                	li	a0,4
    80020274:	983e00ef          	jal	80000bf6 <goto_priv>
    80020278:	a34e10ef          	jal	800014ac <reset_state>
}
    8002027c:	60e2                	ld	ra,24(sp)
    8002027e:	6442                	ld	s0,16(sp)
    80020280:	8526                	mv	a0,s1
    80020282:	64a2                	ld	s1,8(sp)
    80020284:	6105                	addi	sp,sp,32
    80020286:	8082                	ret

0000000080020288 <time_test_10>:

bool time_test_10() {
    80020288:	1141                	addi	sp,sp,-16

    TEST_START();    
    8002028a:	00006597          	auipc	a1,0x6
    8002028e:	6ae58593          	addi	a1,a1,1710 # 80026938 <__func__.34>
    80020292:	00007517          	auipc	a0,0x7
    80020296:	c0e50513          	addi	a0,a0,-1010 # 80026ea0 <__func__.0+0x2e0>
bool time_test_10() {
    8002029a:	e406                	sd	ra,8(sp)
    8002029c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8002029e:	467040ef          	jal	80024f04 <printf>
    800202a2:	4529                	li	a0,10
    800202a4:	26b030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800202a8:	4511                	li	a0,4
    800202aa:	94de00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    800202ae:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800202b2:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    800202b6:	4509                	li	a0,2
    800202b8:	93fe00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800202bc:	0330000f          	fence	rw,rw
    800202c0:	4785                	li	a5,1
    800202c2:	00029717          	auipc	a4,0x29
    800202c6:	d8073323          	sd	zero,-634(a4) # 80049048 <excpt+0x38>
    800202ca:	00029717          	auipc	a4,0x29
    800202ce:	d4f71323          	sh	a5,-698(a4) # 80049010 <excpt>
    800202d2:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    800202d6:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    800202da:	08200593          	li	a1,130
    800202de:	0000e617          	auipc	a2,0xe
    800202e2:	06a60613          	addi	a2,a2,106 # 8002e348 <__func__.0+0x7788>
    800202e6:	00007517          	auipc	a0,0x7
    800202ea:	bd250513          	addi	a0,a0,-1070 # 80026eb8 <__func__.0+0x2f8>
    800202ee:	417040ef          	jal	80024f04 <printf>
    800202f2:	00029797          	auipc	a5,0x29
    800202f6:	d1f7c783          	lbu	a5,-737(a5) # 80049011 <excpt+0x1>
    800202fa:	00007597          	auipc	a1,0x7
    800202fe:	b8658593          	addi	a1,a1,-1146 # 80026e80 <__func__.0+0x2c0>
    80020302:	c789                	beqz	a5,8002030c <time_test_10+0x84>
    80020304:	00007597          	auipc	a1,0x7
    80020308:	b8c58593          	addi	a1,a1,-1140 # 80026e90 <__func__.0+0x2d0>
    8002030c:	00007517          	auipc	a0,0x7
    80020310:	bc450513          	addi	a0,a0,-1084 # 80026ed0 <__func__.0+0x310>
    80020314:	3f1040ef          	jal	80024f04 <printf>
    80020318:	00029797          	auipc	a5,0x29
    8002031c:	cf97c783          	lbu	a5,-775(a5) # 80049011 <excpt+0x1>
    80020320:	e7a1                	bnez	a5,80020368 <time_test_10+0xe0>
    80020322:	4529                	li	a0,10
    80020324:	1eb030ef          	jal	80023d0e <putchar>
    80020328:	00029797          	auipc	a5,0x29
    8002032c:	ce97c783          	lbu	a5,-791(a5) # 80049011 <excpt+0x1>
    80020330:	e795                	bnez	a5,8002035c <time_test_10+0xd4>
    80020332:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020334:	00007597          	auipc	a1,0x7
    80020338:	b4c58593          	addi	a1,a1,-1204 # 80026e80 <__func__.0+0x2c0>
    8002033c:	00007517          	auipc	a0,0x7
    80020340:	bfc50513          	addi	a0,a0,-1028 # 80026f38 <__func__.0+0x378>
    80020344:	3c1040ef          	jal	80024f04 <printf>
    80020348:	4511                	li	a0,4
    8002034a:	8ade00ef          	jal	80000bf6 <goto_priv>
    8002034e:	95ee10ef          	jal	800014ac <reset_state>
}
    80020352:	60a2                	ld	ra,8(sp)
    80020354:	8522                	mv	a0,s0
    80020356:	6402                	ld	s0,0(sp)
    80020358:	0141                	addi	sp,sp,16
    8002035a:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8002035c:	4401                	li	s0,0
    TEST_END(); 
    8002035e:	00007597          	auipc	a1,0x7
    80020362:	b3258593          	addi	a1,a1,-1230 # 80026e90 <__func__.0+0x2d0>
    80020366:	bfd9                	j	8002033c <time_test_10+0xb4>
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    80020368:	00007517          	auipc	a0,0x7
    8002036c:	b7050513          	addi	a0,a0,-1168 # 80026ed8 <__func__.0+0x318>
    80020370:	395040ef          	jal	80024f04 <printf>
    80020374:	02900513          	li	a0,41
    80020378:	197030ef          	jal	80023d0e <putchar>
    8002037c:	b75d                	j	80020322 <time_test_10+0x9a>

000000008002037e <cycle_test_1>:


bool cycle_test_1() {
    8002037e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020380:	00006597          	auipc	a1,0x6
    80020384:	5c858593          	addi	a1,a1,1480 # 80026948 <__func__.33>
    80020388:	00007517          	auipc	a0,0x7
    8002038c:	b1850513          	addi	a0,a0,-1256 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_1() {
    80020390:	ec06                	sd	ra,24(sp)
    80020392:	e822                	sd	s0,16(sp)
    80020394:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020396:	36f040ef          	jal	80024f04 <printf>
    8002039a:	4529                	li	a0,10
    8002039c:	173030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800203a0:	4511                	li	a0,4
    800203a2:	855e00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    800203a6:	3060f073          	csrci	mcounteren,1

    goto_priv(PRIV_VS);
    800203aa:	4509                	li	a0,2
    800203ac:	84be00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800203b0:	0330000f          	fence	rw,rw
    800203b4:	00029417          	auipc	s0,0x29
    800203b8:	c5c40413          	addi	s0,s0,-932 # 80049010 <excpt>
    800203bc:	4785                	li	a5,1
    800203be:	00029717          	auipc	a4,0x29
    800203c2:	c8073523          	sd	zero,-886(a4) # 80049048 <excpt+0x38>
    800203c6:	00f41023          	sh	a5,0(s0)
    800203ca:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    800203ce:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    800203d2:	08200593          	li	a1,130
    800203d6:	0000e617          	auipc	a2,0xe
    800203da:	fc260613          	addi	a2,a2,-62 # 8002e398 <__func__.0+0x77d8>
    800203de:	00007517          	auipc	a0,0x7
    800203e2:	ada50513          	addi	a0,a0,-1318 # 80026eb8 <__func__.0+0x2f8>
    800203e6:	31f040ef          	jal	80024f04 <printf>
    800203ea:	00029797          	auipc	a5,0x29
    800203ee:	c277c783          	lbu	a5,-985(a5) # 80049011 <excpt+0x1>
    800203f2:	00007597          	auipc	a1,0x7
    800203f6:	a9e58593          	addi	a1,a1,-1378 # 80026e90 <__func__.0+0x2d0>
    800203fa:	cf89                	beqz	a5,80020414 <cycle_test_1+0x96>
    800203fc:	6418                	ld	a4,8(s0)
    800203fe:	4789                	li	a5,2
    80020400:	00007597          	auipc	a1,0x7
    80020404:	a8058593          	addi	a1,a1,-1408 # 80026e80 <__func__.0+0x2c0>
    80020408:	00f70663          	beq	a4,a5,80020414 <cycle_test_1+0x96>
    8002040c:	00007597          	auipc	a1,0x7
    80020410:	a8458593          	addi	a1,a1,-1404 # 80026e90 <__func__.0+0x2d0>
    80020414:	00007517          	auipc	a0,0x7
    80020418:	abc50513          	addi	a0,a0,-1348 # 80026ed0 <__func__.0+0x310>
    8002041c:	2e9040ef          	jal	80024f04 <printf>
    80020420:	00029797          	auipc	a5,0x29
    80020424:	bf17c783          	lbu	a5,-1039(a5) # 80049011 <excpt+0x1>
    80020428:	c789                	beqz	a5,80020432 <cycle_test_1+0xb4>
    8002042a:	6418                	ld	a4,8(s0)
    8002042c:	4789                	li	a5,2
    8002042e:	00f70c63          	beq	a4,a5,80020446 <cycle_test_1+0xc8>
    80020432:	00007517          	auipc	a0,0x7
    80020436:	aa650513          	addi	a0,a0,-1370 # 80026ed8 <__func__.0+0x318>
    8002043a:	2cb040ef          	jal	80024f04 <printf>
    8002043e:	02900513          	li	a0,41
    80020442:	0cd030ef          	jal	80023d0e <putchar>
    80020446:	4529                	li	a0,10
    80020448:	0c7030ef          	jal	80023d0e <putchar>
    8002044c:	00029797          	auipc	a5,0x29
    80020450:	bc57c783          	lbu	a5,-1083(a5) # 80049011 <excpt+0x1>
    80020454:	4481                	li	s1,0
    80020456:	c789                	beqz	a5,80020460 <cycle_test_1+0xe2>
    80020458:	6404                	ld	s1,8(s0)
    8002045a:	14f9                	addi	s1,s1,-2
    8002045c:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    80020460:	450d                	li	a0,3
    80020462:	f94e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020466:	0330000f          	fence	rw,rw
    8002046a:	4785                	li	a5,1
    8002046c:	00029717          	auipc	a4,0x29
    80020470:	bc073e23          	sd	zero,-1060(a4) # 80049048 <excpt+0x38>
    80020474:	00f41023          	sh	a5,0(s0)
    80020478:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    8002047c:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020480:	08200593          	li	a1,130
    80020484:	0000e617          	auipc	a2,0xe
    80020488:	f6460613          	addi	a2,a2,-156 # 8002e3e8 <__func__.0+0x7828>
    8002048c:	00007517          	auipc	a0,0x7
    80020490:	a2c50513          	addi	a0,a0,-1492 # 80026eb8 <__func__.0+0x2f8>
    80020494:	271040ef          	jal	80024f04 <printf>
    80020498:	00029797          	auipc	a5,0x29
    8002049c:	b797c783          	lbu	a5,-1159(a5) # 80049011 <excpt+0x1>
    800204a0:	00007597          	auipc	a1,0x7
    800204a4:	9f058593          	addi	a1,a1,-1552 # 80026e90 <__func__.0+0x2d0>
    800204a8:	cf89                	beqz	a5,800204c2 <cycle_test_1+0x144>
    800204aa:	6418                	ld	a4,8(s0)
    800204ac:	4789                	li	a5,2
    800204ae:	00007597          	auipc	a1,0x7
    800204b2:	9d258593          	addi	a1,a1,-1582 # 80026e80 <__func__.0+0x2c0>
    800204b6:	00f70663          	beq	a4,a5,800204c2 <cycle_test_1+0x144>
    800204ba:	00007597          	auipc	a1,0x7
    800204be:	9d658593          	addi	a1,a1,-1578 # 80026e90 <__func__.0+0x2d0>
    800204c2:	00007517          	auipc	a0,0x7
    800204c6:	a0e50513          	addi	a0,a0,-1522 # 80026ed0 <__func__.0+0x310>
    800204ca:	23b040ef          	jal	80024f04 <printf>
    800204ce:	00029797          	auipc	a5,0x29
    800204d2:	b437c783          	lbu	a5,-1213(a5) # 80049011 <excpt+0x1>
    800204d6:	c789                	beqz	a5,800204e0 <cycle_test_1+0x162>
    800204d8:	6418                	ld	a4,8(s0)
    800204da:	4789                	li	a5,2
    800204dc:	00f70c63          	beq	a4,a5,800204f4 <cycle_test_1+0x176>
    800204e0:	00007517          	auipc	a0,0x7
    800204e4:	9f850513          	addi	a0,a0,-1544 # 80026ed8 <__func__.0+0x318>
    800204e8:	21d040ef          	jal	80024f04 <printf>
    800204ec:	02900513          	li	a0,41
    800204f0:	01f030ef          	jal	80023d0e <putchar>
    800204f4:	4529                	li	a0,10
    800204f6:	019030ef          	jal	80023d0e <putchar>
    800204fa:	c881                	beqz	s1,8002050a <cycle_test_1+0x18c>
    800204fc:	00029797          	auipc	a5,0x29
    80020500:	b157c783          	lbu	a5,-1259(a5) # 80049011 <excpt+0x1>
    80020504:	4481                	li	s1,0
    80020506:	1a079163          	bnez	a5,800206a8 <cycle_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8002050a:	4501                	li	a0,0
    8002050c:	eeae00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020510:	0330000f          	fence	rw,rw
    80020514:	4785                	li	a5,1
    80020516:	00029717          	auipc	a4,0x29
    8002051a:	b2073923          	sd	zero,-1230(a4) # 80049048 <excpt+0x38>
    8002051e:	00f41023          	sh	a5,0(s0)
    80020522:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020526:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8002052a:	08200593          	li	a1,130
    8002052e:	0000e617          	auipc	a2,0xe
    80020532:	f0a60613          	addi	a2,a2,-246 # 8002e438 <__func__.0+0x7878>
    80020536:	00007517          	auipc	a0,0x7
    8002053a:	98250513          	addi	a0,a0,-1662 # 80026eb8 <__func__.0+0x2f8>
    8002053e:	1c7040ef          	jal	80024f04 <printf>
    80020542:	00029797          	auipc	a5,0x29
    80020546:	acf7c783          	lbu	a5,-1329(a5) # 80049011 <excpt+0x1>
    8002054a:	00007597          	auipc	a1,0x7
    8002054e:	94658593          	addi	a1,a1,-1722 # 80026e90 <__func__.0+0x2d0>
    80020552:	cf89                	beqz	a5,8002056c <cycle_test_1+0x1ee>
    80020554:	6418                	ld	a4,8(s0)
    80020556:	4789                	li	a5,2
    80020558:	00007597          	auipc	a1,0x7
    8002055c:	92858593          	addi	a1,a1,-1752 # 80026e80 <__func__.0+0x2c0>
    80020560:	00f70663          	beq	a4,a5,8002056c <cycle_test_1+0x1ee>
    80020564:	00007597          	auipc	a1,0x7
    80020568:	92c58593          	addi	a1,a1,-1748 # 80026e90 <__func__.0+0x2d0>
    8002056c:	00007517          	auipc	a0,0x7
    80020570:	96450513          	addi	a0,a0,-1692 # 80026ed0 <__func__.0+0x310>
    80020574:	191040ef          	jal	80024f04 <printf>
    80020578:	00029797          	auipc	a5,0x29
    8002057c:	a997c783          	lbu	a5,-1383(a5) # 80049011 <excpt+0x1>
    80020580:	c789                	beqz	a5,8002058a <cycle_test_1+0x20c>
    80020582:	6418                	ld	a4,8(s0)
    80020584:	4789                	li	a5,2
    80020586:	00f70c63          	beq	a4,a5,8002059e <cycle_test_1+0x220>
    8002058a:	00007517          	auipc	a0,0x7
    8002058e:	94e50513          	addi	a0,a0,-1714 # 80026ed8 <__func__.0+0x318>
    80020592:	173040ef          	jal	80024f04 <printf>
    80020596:	02900513          	li	a0,41
    8002059a:	774030ef          	jal	80023d0e <putchar>
    8002059e:	4529                	li	a0,10
    800205a0:	76e030ef          	jal	80023d0e <putchar>
    800205a4:	c881                	beqz	s1,800205b4 <cycle_test_1+0x236>
    800205a6:	00029797          	auipc	a5,0x29
    800205aa:	a6b7c783          	lbu	a5,-1429(a5) # 80049011 <excpt+0x1>
    800205ae:	4481                	li	s1,0
    800205b0:	0e079763          	bnez	a5,8002069e <cycle_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    800205b4:	4505                	li	a0,1
    800205b6:	e40e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800205ba:	0330000f          	fence	rw,rw
    800205be:	4785                	li	a5,1
    800205c0:	00029717          	auipc	a4,0x29
    800205c4:	a8073423          	sd	zero,-1400(a4) # 80049048 <excpt+0x38>
    800205c8:	00f41023          	sh	a5,0(s0)
    800205cc:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    800205d0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    800205d4:	08200593          	li	a1,130
    800205d8:	0000e617          	auipc	a2,0xe
    800205dc:	eb060613          	addi	a2,a2,-336 # 8002e488 <__func__.0+0x78c8>
    800205e0:	00007517          	auipc	a0,0x7
    800205e4:	8d850513          	addi	a0,a0,-1832 # 80026eb8 <__func__.0+0x2f8>
    800205e8:	11d040ef          	jal	80024f04 <printf>
    800205ec:	00029797          	auipc	a5,0x29
    800205f0:	a257c783          	lbu	a5,-1499(a5) # 80049011 <excpt+0x1>
    800205f4:	00007597          	auipc	a1,0x7
    800205f8:	89c58593          	addi	a1,a1,-1892 # 80026e90 <__func__.0+0x2d0>
    800205fc:	cf89                	beqz	a5,80020616 <cycle_test_1+0x298>
    800205fe:	6418                	ld	a4,8(s0)
    80020600:	4789                	li	a5,2
    80020602:	00007597          	auipc	a1,0x7
    80020606:	87e58593          	addi	a1,a1,-1922 # 80026e80 <__func__.0+0x2c0>
    8002060a:	00f70663          	beq	a4,a5,80020616 <cycle_test_1+0x298>
    8002060e:	00007597          	auipc	a1,0x7
    80020612:	88258593          	addi	a1,a1,-1918 # 80026e90 <__func__.0+0x2d0>
    80020616:	00007517          	auipc	a0,0x7
    8002061a:	8ba50513          	addi	a0,a0,-1862 # 80026ed0 <__func__.0+0x310>
    8002061e:	0e7040ef          	jal	80024f04 <printf>
    80020622:	00029797          	auipc	a5,0x29
    80020626:	9ef7c783          	lbu	a5,-1553(a5) # 80049011 <excpt+0x1>
    8002062a:	c789                	beqz	a5,80020634 <cycle_test_1+0x2b6>
    8002062c:	6418                	ld	a4,8(s0)
    8002062e:	4789                	li	a5,2
    80020630:	00f70c63          	beq	a4,a5,80020648 <cycle_test_1+0x2ca>
    80020634:	00007517          	auipc	a0,0x7
    80020638:	8a450513          	addi	a0,a0,-1884 # 80026ed8 <__func__.0+0x318>
    8002063c:	0c9040ef          	jal	80024f04 <printf>
    80020640:	02900513          	li	a0,41
    80020644:	6ca030ef          	jal	80023d0e <putchar>
    80020648:	4529                	li	a0,10
    8002064a:	6c4030ef          	jal	80023d0e <putchar>
    8002064e:	c095                	beqz	s1,80020672 <cycle_test_1+0x2f4>
    80020650:	00029497          	auipc	s1,0x29
    80020654:	9c14c483          	lbu	s1,-1599(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020658:	00007597          	auipc	a1,0x7
    8002065c:	83858593          	addi	a1,a1,-1992 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    80020660:	cc91                	beqz	s1,8002067c <cycle_test_1+0x2fe>
    80020662:	6418                	ld	a4,8(s0)
    80020664:	4789                	li	a5,2
    TEST_END(); 
    80020666:	00007597          	auipc	a1,0x7
    8002066a:	81a58593          	addi	a1,a1,-2022 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8002066e:	00f70763          	beq	a4,a5,8002067c <cycle_test_1+0x2fe>
    80020672:	4481                	li	s1,0
    TEST_END(); 
    80020674:	00007597          	auipc	a1,0x7
    80020678:	81c58593          	addi	a1,a1,-2020 # 80026e90 <__func__.0+0x2d0>
    8002067c:	00007517          	auipc	a0,0x7
    80020680:	8bc50513          	addi	a0,a0,-1860 # 80026f38 <__func__.0+0x378>
    80020684:	081040ef          	jal	80024f04 <printf>
    80020688:	4511                	li	a0,4
    8002068a:	d6ce00ef          	jal	80000bf6 <goto_priv>
    8002068e:	e1fe00ef          	jal	800014ac <reset_state>
}
    80020692:	60e2                	ld	ra,24(sp)
    80020694:	6442                	ld	s0,16(sp)
    80020696:	8526                	mv	a0,s1
    80020698:	64a2                	ld	s1,8(sp)
    8002069a:	6105                	addi	sp,sp,32
    8002069c:	8082                	ret
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8002069e:	6404                	ld	s1,8(s0)
    800206a0:	14f9                	addi	s1,s1,-2
    800206a2:	0014b493          	seqz	s1,s1
    800206a6:	b739                	j	800205b4 <cycle_test_1+0x236>
    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    800206a8:	6404                	ld	s1,8(s0)
    800206aa:	14f9                	addi	s1,s1,-2
    800206ac:	0014b493          	seqz	s1,s1
    800206b0:	bda9                	j	8002050a <cycle_test_1+0x18c>

00000000800206b2 <cycle_test_2>:

bool cycle_test_2() {
    800206b2:	1141                	addi	sp,sp,-16

    TEST_START();    
    800206b4:	00006597          	auipc	a1,0x6
    800206b8:	2a458593          	addi	a1,a1,676 # 80026958 <__func__.32>
    800206bc:	00006517          	auipc	a0,0x6
    800206c0:	7e450513          	addi	a0,a0,2020 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_2() {
    800206c4:	e406                	sd	ra,8(sp)
    800206c6:	e022                	sd	s0,0(sp)
    TEST_START();    
    800206c8:	03d040ef          	jal	80024f04 <printf>
    800206cc:	4529                	li	a0,10
    800206ce:	640030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800206d2:	4511                	li	a0,4
    800206d4:	d22e00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    800206d8:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HS);
    800206dc:	450d                	li	a0,3
    800206de:	d18e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800206e2:	0330000f          	fence	rw,rw
    800206e6:	4785                	li	a5,1
    800206e8:	00029717          	auipc	a4,0x29
    800206ec:	96073023          	sd	zero,-1696(a4) # 80049048 <excpt+0x38>
    800206f0:	00029717          	auipc	a4,0x29
    800206f4:	92f71023          	sh	a5,-1760(a4) # 80049010 <excpt>
    800206f8:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    800206fc:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    80020700:	08200593          	li	a1,130
    80020704:	0000e617          	auipc	a2,0xe
    80020708:	dd460613          	addi	a2,a2,-556 # 8002e4d8 <__func__.0+0x7918>
    8002070c:	00006517          	auipc	a0,0x6
    80020710:	7ac50513          	addi	a0,a0,1964 # 80026eb8 <__func__.0+0x2f8>
    80020714:	7f0040ef          	jal	80024f04 <printf>
    80020718:	00029797          	auipc	a5,0x29
    8002071c:	8f97c783          	lbu	a5,-1799(a5) # 80049011 <excpt+0x1>
    80020720:	00006597          	auipc	a1,0x6
    80020724:	76058593          	addi	a1,a1,1888 # 80026e80 <__func__.0+0x2c0>
    80020728:	c789                	beqz	a5,80020732 <cycle_test_2+0x80>
    8002072a:	00006597          	auipc	a1,0x6
    8002072e:	76658593          	addi	a1,a1,1894 # 80026e90 <__func__.0+0x2d0>
    80020732:	00006517          	auipc	a0,0x6
    80020736:	79e50513          	addi	a0,a0,1950 # 80026ed0 <__func__.0+0x310>
    8002073a:	7ca040ef          	jal	80024f04 <printf>
    8002073e:	00029797          	auipc	a5,0x29
    80020742:	8d37c783          	lbu	a5,-1837(a5) # 80049011 <excpt+0x1>
    80020746:	e7a1                	bnez	a5,8002078e <cycle_test_2+0xdc>
    80020748:	4529                	li	a0,10
    8002074a:	5c4030ef          	jal	80023d0e <putchar>
    8002074e:	00029797          	auipc	a5,0x29
    80020752:	8c37c783          	lbu	a5,-1853(a5) # 80049011 <excpt+0x1>
    80020756:	e795                	bnez	a5,80020782 <cycle_test_2+0xd0>
    80020758:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8002075a:	00006597          	auipc	a1,0x6
    8002075e:	72658593          	addi	a1,a1,1830 # 80026e80 <__func__.0+0x2c0>
    80020762:	00006517          	auipc	a0,0x6
    80020766:	7d650513          	addi	a0,a0,2006 # 80026f38 <__func__.0+0x378>
    8002076a:	79a040ef          	jal	80024f04 <printf>
    8002076e:	4511                	li	a0,4
    80020770:	c86e00ef          	jal	80000bf6 <goto_priv>
    80020774:	d39e00ef          	jal	800014ac <reset_state>
}
    80020778:	60a2                	ld	ra,8(sp)
    8002077a:	8522                	mv	a0,s0
    8002077c:	6402                	ld	s0,0(sp)
    8002077e:	0141                	addi	sp,sp,16
    80020780:	8082                	ret
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    80020782:	4401                	li	s0,0
    TEST_END(); 
    80020784:	00006597          	auipc	a1,0x6
    80020788:	70c58593          	addi	a1,a1,1804 # 80026e90 <__func__.0+0x2d0>
    8002078c:	bfd9                	j	80020762 <cycle_test_2+0xb0>
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8002078e:	00006517          	auipc	a0,0x6
    80020792:	74a50513          	addi	a0,a0,1866 # 80026ed8 <__func__.0+0x318>
    80020796:	76e040ef          	jal	80024f04 <printf>
    8002079a:	02900513          	li	a0,41
    8002079e:	570030ef          	jal	80023d0e <putchar>
    800207a2:	b75d                	j	80020748 <cycle_test_2+0x96>

00000000800207a4 <cycle_test_3>:

bool cycle_test_3() {
    800207a4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800207a6:	00006597          	auipc	a1,0x6
    800207aa:	1c258593          	addi	a1,a1,450 # 80026968 <__func__.31>
    800207ae:	00006517          	auipc	a0,0x6
    800207b2:	6f250513          	addi	a0,a0,1778 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_3() {
    800207b6:	ec06                	sd	ra,24(sp)
    800207b8:	e822                	sd	s0,16(sp)
    800207ba:	e426                	sd	s1,8(sp)
    TEST_START();    
    800207bc:	748040ef          	jal	80024f04 <printf>
    800207c0:	4529                	li	a0,10
    800207c2:	54c030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800207c6:	4511                	li	a0,4
    800207c8:	c2ee00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    800207cc:	1060f073          	csrci	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    800207d0:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    800207d4:	4505                	li	a0,1
    800207d6:	c20e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800207da:	0330000f          	fence	rw,rw
    800207de:	00029417          	auipc	s0,0x29
    800207e2:	83240413          	addi	s0,s0,-1998 # 80049010 <excpt>
    800207e6:	4785                	li	a5,1
    800207e8:	00029717          	auipc	a4,0x29
    800207ec:	86073023          	sd	zero,-1952(a4) # 80049048 <excpt+0x38>
    800207f0:	00f41023          	sh	a5,0(s0)
    800207f4:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    800207f8:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    800207fc:	08200593          	li	a1,130
    80020800:	0000e617          	auipc	a2,0xe
    80020804:	d1060613          	addi	a2,a2,-752 # 8002e510 <__func__.0+0x7950>
    80020808:	00006517          	auipc	a0,0x6
    8002080c:	6b050513          	addi	a0,a0,1712 # 80026eb8 <__func__.0+0x2f8>
    80020810:	6f4040ef          	jal	80024f04 <printf>
    80020814:	00028797          	auipc	a5,0x28
    80020818:	7fd7c783          	lbu	a5,2045(a5) # 80049011 <excpt+0x1>
    8002081c:	00006597          	auipc	a1,0x6
    80020820:	67458593          	addi	a1,a1,1652 # 80026e90 <__func__.0+0x2d0>
    80020824:	cf89                	beqz	a5,8002083e <cycle_test_3+0x9a>
    80020826:	6418                	ld	a4,8(s0)
    80020828:	4789                	li	a5,2
    8002082a:	00006597          	auipc	a1,0x6
    8002082e:	65658593          	addi	a1,a1,1622 # 80026e80 <__func__.0+0x2c0>
    80020832:	00f70663          	beq	a4,a5,8002083e <cycle_test_3+0x9a>
    80020836:	00006597          	auipc	a1,0x6
    8002083a:	65a58593          	addi	a1,a1,1626 # 80026e90 <__func__.0+0x2d0>
    8002083e:	00006517          	auipc	a0,0x6
    80020842:	69250513          	addi	a0,a0,1682 # 80026ed0 <__func__.0+0x310>
    80020846:	6be040ef          	jal	80024f04 <printf>
    8002084a:	00028797          	auipc	a5,0x28
    8002084e:	7c77c783          	lbu	a5,1991(a5) # 80049011 <excpt+0x1>
    80020852:	c789                	beqz	a5,8002085c <cycle_test_3+0xb8>
    80020854:	6418                	ld	a4,8(s0)
    80020856:	4789                	li	a5,2
    80020858:	00f70c63          	beq	a4,a5,80020870 <cycle_test_3+0xcc>
    8002085c:	00006517          	auipc	a0,0x6
    80020860:	67c50513          	addi	a0,a0,1660 # 80026ed8 <__func__.0+0x318>
    80020864:	6a0040ef          	jal	80024f04 <printf>
    80020868:	02900513          	li	a0,41
    8002086c:	4a2030ef          	jal	80023d0e <putchar>
    80020870:	4529                	li	a0,10
    80020872:	49c030ef          	jal	80023d0e <putchar>
    80020876:	00028497          	auipc	s1,0x28
    8002087a:	79b4c483          	lbu	s1,1947(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002087e:	00006597          	auipc	a1,0x6
    80020882:	61258593          	addi	a1,a1,1554 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    80020886:	cc91                	beqz	s1,800208a2 <cycle_test_3+0xfe>
    80020888:	6418                	ld	a4,8(s0)
    8002088a:	4789                	li	a5,2
    TEST_END(); 
    8002088c:	00006597          	auipc	a1,0x6
    80020890:	5f458593          	addi	a1,a1,1524 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    80020894:	00f70763          	beq	a4,a5,800208a2 <cycle_test_3+0xfe>
    80020898:	4481                	li	s1,0
    TEST_END(); 
    8002089a:	00006597          	auipc	a1,0x6
    8002089e:	5f658593          	addi	a1,a1,1526 # 80026e90 <__func__.0+0x2d0>
    800208a2:	00006517          	auipc	a0,0x6
    800208a6:	69650513          	addi	a0,a0,1686 # 80026f38 <__func__.0+0x378>
    800208aa:	65a040ef          	jal	80024f04 <printf>
    800208ae:	4511                	li	a0,4
    800208b0:	b46e00ef          	jal	80000bf6 <goto_priv>
    800208b4:	bf9e00ef          	jal	800014ac <reset_state>
}
    800208b8:	60e2                	ld	ra,24(sp)
    800208ba:	6442                	ld	s0,16(sp)
    800208bc:	8526                	mv	a0,s1
    800208be:	64a2                	ld	s1,8(sp)
    800208c0:	6105                	addi	sp,sp,32
    800208c2:	8082                	ret

00000000800208c4 <cycle_test_4>:

bool cycle_test_4() {
    800208c4:	1141                	addi	sp,sp,-16

    TEST_START();    
    800208c6:	00006597          	auipc	a1,0x6
    800208ca:	0b258593          	addi	a1,a1,178 # 80026978 <__func__.30>
    800208ce:	00006517          	auipc	a0,0x6
    800208d2:	5d250513          	addi	a0,a0,1490 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_4() {
    800208d6:	e406                	sd	ra,8(sp)
    800208d8:	e022                	sd	s0,0(sp)
    TEST_START();    
    800208da:	62a040ef          	jal	80024f04 <printf>
    800208de:	4529                	li	a0,10
    800208e0:	42e030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800208e4:	4511                	li	a0,4
    800208e6:	b10e00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    800208ea:	1060e073          	csrsi	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    800208ee:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    800208f2:	4505                	li	a0,1
    800208f4:	b02e00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800208f8:	0330000f          	fence	rw,rw
    800208fc:	4785                	li	a5,1
    800208fe:	00028717          	auipc	a4,0x28
    80020902:	74073523          	sd	zero,1866(a4) # 80049048 <excpt+0x38>
    80020906:	00028717          	auipc	a4,0x28
    8002090a:	70f71523          	sh	a5,1802(a4) # 80049010 <excpt>
    8002090e:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020912:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    80020916:	08200593          	li	a1,130
    8002091a:	0000e617          	auipc	a2,0xe
    8002091e:	c4660613          	addi	a2,a2,-954 # 8002e560 <__func__.0+0x79a0>
    80020922:	00006517          	auipc	a0,0x6
    80020926:	59650513          	addi	a0,a0,1430 # 80026eb8 <__func__.0+0x2f8>
    8002092a:	5da040ef          	jal	80024f04 <printf>
    8002092e:	00028797          	auipc	a5,0x28
    80020932:	6e37c783          	lbu	a5,1763(a5) # 80049011 <excpt+0x1>
    80020936:	00006597          	auipc	a1,0x6
    8002093a:	54a58593          	addi	a1,a1,1354 # 80026e80 <__func__.0+0x2c0>
    8002093e:	c789                	beqz	a5,80020948 <cycle_test_4+0x84>
    80020940:	00006597          	auipc	a1,0x6
    80020944:	55058593          	addi	a1,a1,1360 # 80026e90 <__func__.0+0x2d0>
    80020948:	00006517          	auipc	a0,0x6
    8002094c:	58850513          	addi	a0,a0,1416 # 80026ed0 <__func__.0+0x310>
    80020950:	5b4040ef          	jal	80024f04 <printf>
    80020954:	00028797          	auipc	a5,0x28
    80020958:	6bd7c783          	lbu	a5,1725(a5) # 80049011 <excpt+0x1>
    8002095c:	e7a1                	bnez	a5,800209a4 <cycle_test_4+0xe0>
    8002095e:	4529                	li	a0,10
    80020960:	3ae030ef          	jal	80023d0e <putchar>
    80020964:	00028797          	auipc	a5,0x28
    80020968:	6ad7c783          	lbu	a5,1709(a5) # 80049011 <excpt+0x1>
    8002096c:	e795                	bnez	a5,80020998 <cycle_test_4+0xd4>
    8002096e:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020970:	00006597          	auipc	a1,0x6
    80020974:	51058593          	addi	a1,a1,1296 # 80026e80 <__func__.0+0x2c0>
    80020978:	00006517          	auipc	a0,0x6
    8002097c:	5c050513          	addi	a0,a0,1472 # 80026f38 <__func__.0+0x378>
    80020980:	584040ef          	jal	80024f04 <printf>
    80020984:	4511                	li	a0,4
    80020986:	a70e00ef          	jal	80000bf6 <goto_priv>
    8002098a:	b23e00ef          	jal	800014ac <reset_state>
}
    8002098e:	60a2                	ld	ra,8(sp)
    80020990:	8522                	mv	a0,s0
    80020992:	6402                	ld	s0,0(sp)
    80020994:	0141                	addi	sp,sp,16
    80020996:	8082                	ret
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    80020998:	4401                	li	s0,0
    TEST_END(); 
    8002099a:	00006597          	auipc	a1,0x6
    8002099e:	4f658593          	addi	a1,a1,1270 # 80026e90 <__func__.0+0x2d0>
    800209a2:	bfd9                	j	80020978 <cycle_test_4+0xb4>
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    800209a4:	00006517          	auipc	a0,0x6
    800209a8:	53450513          	addi	a0,a0,1332 # 80026ed8 <__func__.0+0x318>
    800209ac:	558040ef          	jal	80024f04 <printf>
    800209b0:	02900513          	li	a0,41
    800209b4:	35a030ef          	jal	80023d0e <putchar>
    800209b8:	b75d                	j	8002095e <cycle_test_4+0x9a>

00000000800209ba <cycle_test_5>:

bool cycle_test_5() {
    800209ba:	1101                	addi	sp,sp,-32

    TEST_START();    
    800209bc:	00006597          	auipc	a1,0x6
    800209c0:	fcc58593          	addi	a1,a1,-52 # 80026988 <__func__.29>
    800209c4:	00006517          	auipc	a0,0x6
    800209c8:	4dc50513          	addi	a0,a0,1244 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_5() {
    800209cc:	ec06                	sd	ra,24(sp)
    800209ce:	e822                	sd	s0,16(sp)
    800209d0:	e426                	sd	s1,8(sp)
    TEST_START();    
    800209d2:	532040ef          	jal	80024f04 <printf>
    800209d6:	4529                	li	a0,10
    800209d8:	336030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    800209dc:	4511                	li	a0,4
    800209de:	a18e00ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    800209e2:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    800209e6:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    800209ea:	4509                	li	a0,2
    800209ec:	a0ae00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800209f0:	0330000f          	fence	rw,rw
    800209f4:	00028417          	auipc	s0,0x28
    800209f8:	61c40413          	addi	s0,s0,1564 # 80049010 <excpt>
    800209fc:	4785                	li	a5,1
    800209fe:	00028717          	auipc	a4,0x28
    80020a02:	64073523          	sd	zero,1610(a4) # 80049048 <excpt+0x38>
    80020a06:	00f41023          	sh	a5,0(s0)
    80020a0a:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020a0e:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    80020a12:	08200593          	li	a1,130
    80020a16:	0000e617          	auipc	a2,0xe
    80020a1a:	b9260613          	addi	a2,a2,-1134 # 8002e5a8 <__func__.0+0x79e8>
    80020a1e:	00006517          	auipc	a0,0x6
    80020a22:	49a50513          	addi	a0,a0,1178 # 80026eb8 <__func__.0+0x2f8>
    80020a26:	4de040ef          	jal	80024f04 <printf>
    80020a2a:	00028797          	auipc	a5,0x28
    80020a2e:	5e77c783          	lbu	a5,1511(a5) # 80049011 <excpt+0x1>
    80020a32:	00006597          	auipc	a1,0x6
    80020a36:	45e58593          	addi	a1,a1,1118 # 80026e90 <__func__.0+0x2d0>
    80020a3a:	cf89                	beqz	a5,80020a54 <cycle_test_5+0x9a>
    80020a3c:	6418                	ld	a4,8(s0)
    80020a3e:	47d9                	li	a5,22
    80020a40:	00006597          	auipc	a1,0x6
    80020a44:	44058593          	addi	a1,a1,1088 # 80026e80 <__func__.0+0x2c0>
    80020a48:	00f70663          	beq	a4,a5,80020a54 <cycle_test_5+0x9a>
    80020a4c:	00006597          	auipc	a1,0x6
    80020a50:	44458593          	addi	a1,a1,1092 # 80026e90 <__func__.0+0x2d0>
    80020a54:	00006517          	auipc	a0,0x6
    80020a58:	47c50513          	addi	a0,a0,1148 # 80026ed0 <__func__.0+0x310>
    80020a5c:	4a8040ef          	jal	80024f04 <printf>
    80020a60:	00028797          	auipc	a5,0x28
    80020a64:	5b17c783          	lbu	a5,1457(a5) # 80049011 <excpt+0x1>
    80020a68:	c789                	beqz	a5,80020a72 <cycle_test_5+0xb8>
    80020a6a:	6418                	ld	a4,8(s0)
    80020a6c:	47d9                	li	a5,22
    80020a6e:	00f70c63          	beq	a4,a5,80020a86 <cycle_test_5+0xcc>
    80020a72:	00006517          	auipc	a0,0x6
    80020a76:	46650513          	addi	a0,a0,1126 # 80026ed8 <__func__.0+0x318>
    80020a7a:	48a040ef          	jal	80024f04 <printf>
    80020a7e:	02900513          	li	a0,41
    80020a82:	28c030ef          	jal	80023d0e <putchar>
    80020a86:	4529                	li	a0,10
    80020a88:	286030ef          	jal	80023d0e <putchar>
    80020a8c:	00028497          	auipc	s1,0x28
    80020a90:	5854c483          	lbu	s1,1413(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020a94:	00006597          	auipc	a1,0x6
    80020a98:	3fc58593          	addi	a1,a1,1020 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    80020a9c:	cc91                	beqz	s1,80020ab8 <cycle_test_5+0xfe>
    80020a9e:	6418                	ld	a4,8(s0)
    80020aa0:	47d9                	li	a5,22
    TEST_END(); 
    80020aa2:	00006597          	auipc	a1,0x6
    80020aa6:	3de58593          	addi	a1,a1,990 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    80020aaa:	00f70763          	beq	a4,a5,80020ab8 <cycle_test_5+0xfe>
    80020aae:	4481                	li	s1,0
    TEST_END(); 
    80020ab0:	00006597          	auipc	a1,0x6
    80020ab4:	3e058593          	addi	a1,a1,992 # 80026e90 <__func__.0+0x2d0>
    80020ab8:	00006517          	auipc	a0,0x6
    80020abc:	48050513          	addi	a0,a0,1152 # 80026f38 <__func__.0+0x378>
    80020ac0:	444040ef          	jal	80024f04 <printf>
    80020ac4:	4511                	li	a0,4
    80020ac6:	930e00ef          	jal	80000bf6 <goto_priv>
    80020aca:	9e3e00ef          	jal	800014ac <reset_state>
}
    80020ace:	60e2                	ld	ra,24(sp)
    80020ad0:	6442                	ld	s0,16(sp)
    80020ad2:	8526                	mv	a0,s1
    80020ad4:	64a2                	ld	s1,8(sp)
    80020ad6:	6105                	addi	sp,sp,32
    80020ad8:	8082                	ret

0000000080020ada <cycle_test_6>:

bool cycle_test_6() {
    80020ada:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020adc:	00006597          	auipc	a1,0x6
    80020ae0:	ebc58593          	addi	a1,a1,-324 # 80026998 <__func__.28>
    80020ae4:	00006517          	auipc	a0,0x6
    80020ae8:	3bc50513          	addi	a0,a0,956 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_6() {
    80020aec:	e406                	sd	ra,8(sp)
    80020aee:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020af0:	414040ef          	jal	80024f04 <printf>
    80020af4:	4529                	li	a0,10
    80020af6:	218030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80020afa:	4511                	li	a0,4
    80020afc:	8fae00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    80020b00:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020b04:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    80020b08:	4509                	li	a0,2
    80020b0a:	8ece00ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020b0e:	0330000f          	fence	rw,rw
    80020b12:	4785                	li	a5,1
    80020b14:	00028717          	auipc	a4,0x28
    80020b18:	52073a23          	sd	zero,1332(a4) # 80049048 <excpt+0x38>
    80020b1c:	00028717          	auipc	a4,0x28
    80020b20:	4ef71a23          	sh	a5,1268(a4) # 80049010 <excpt>
    80020b24:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020b28:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    80020b2c:	08200593          	li	a1,130
    80020b30:	0000e617          	auipc	a2,0xe
    80020b34:	ad860613          	addi	a2,a2,-1320 # 8002e608 <__func__.0+0x7a48>
    80020b38:	00006517          	auipc	a0,0x6
    80020b3c:	38050513          	addi	a0,a0,896 # 80026eb8 <__func__.0+0x2f8>
    80020b40:	3c4040ef          	jal	80024f04 <printf>
    80020b44:	00028797          	auipc	a5,0x28
    80020b48:	4cd7c783          	lbu	a5,1229(a5) # 80049011 <excpt+0x1>
    80020b4c:	00006597          	auipc	a1,0x6
    80020b50:	33458593          	addi	a1,a1,820 # 80026e80 <__func__.0+0x2c0>
    80020b54:	c789                	beqz	a5,80020b5e <cycle_test_6+0x84>
    80020b56:	00006597          	auipc	a1,0x6
    80020b5a:	33a58593          	addi	a1,a1,826 # 80026e90 <__func__.0+0x2d0>
    80020b5e:	00006517          	auipc	a0,0x6
    80020b62:	37250513          	addi	a0,a0,882 # 80026ed0 <__func__.0+0x310>
    80020b66:	39e040ef          	jal	80024f04 <printf>
    80020b6a:	00028797          	auipc	a5,0x28
    80020b6e:	4a77c783          	lbu	a5,1191(a5) # 80049011 <excpt+0x1>
    80020b72:	e7a1                	bnez	a5,80020bba <cycle_test_6+0xe0>
    80020b74:	4529                	li	a0,10
    80020b76:	198030ef          	jal	80023d0e <putchar>
    80020b7a:	00028797          	auipc	a5,0x28
    80020b7e:	4977c783          	lbu	a5,1175(a5) # 80049011 <excpt+0x1>
    80020b82:	e795                	bnez	a5,80020bae <cycle_test_6+0xd4>
    80020b84:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020b86:	00006597          	auipc	a1,0x6
    80020b8a:	2fa58593          	addi	a1,a1,762 # 80026e80 <__func__.0+0x2c0>
    80020b8e:	00006517          	auipc	a0,0x6
    80020b92:	3aa50513          	addi	a0,a0,938 # 80026f38 <__func__.0+0x378>
    80020b96:	36e040ef          	jal	80024f04 <printf>
    80020b9a:	4511                	li	a0,4
    80020b9c:	85ae00ef          	jal	80000bf6 <goto_priv>
    80020ba0:	90de00ef          	jal	800014ac <reset_state>
}
    80020ba4:	60a2                	ld	ra,8(sp)
    80020ba6:	8522                	mv	a0,s0
    80020ba8:	6402                	ld	s0,0(sp)
    80020baa:	0141                	addi	sp,sp,16
    80020bac:	8082                	ret
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    80020bae:	4401                	li	s0,0
    TEST_END(); 
    80020bb0:	00006597          	auipc	a1,0x6
    80020bb4:	2e058593          	addi	a1,a1,736 # 80026e90 <__func__.0+0x2d0>
    80020bb8:	bfd9                	j	80020b8e <cycle_test_6+0xb4>
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    80020bba:	00006517          	auipc	a0,0x6
    80020bbe:	31e50513          	addi	a0,a0,798 # 80026ed8 <__func__.0+0x318>
    80020bc2:	342040ef          	jal	80024f04 <printf>
    80020bc6:	02900513          	li	a0,41
    80020bca:	144030ef          	jal	80023d0e <putchar>
    80020bce:	b75d                	j	80020b74 <cycle_test_6+0x9a>

0000000080020bd0 <cycle_test_7>:

bool cycle_test_7() {
    80020bd0:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020bd2:	00006597          	auipc	a1,0x6
    80020bd6:	dd658593          	addi	a1,a1,-554 # 800269a8 <__func__.27>
    80020bda:	00006517          	auipc	a0,0x6
    80020bde:	2c650513          	addi	a0,a0,710 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_7() {
    80020be2:	e406                	sd	ra,8(sp)
    80020be4:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020be6:	31e040ef          	jal	80024f04 <printf>
    80020bea:	4529                	li	a0,10
    80020bec:	122030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80020bf0:	4511                	li	a0,4
    80020bf2:	804e00ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    80020bf6:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020bfa:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    80020bfe:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    80020c02:	4501                	li	a0,0
    80020c04:	ff3df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020c08:	0330000f          	fence	rw,rw
    80020c0c:	4785                	li	a5,1
    80020c0e:	00028717          	auipc	a4,0x28
    80020c12:	42073d23          	sd	zero,1082(a4) # 80049048 <excpt+0x38>
    80020c16:	00028717          	auipc	a4,0x28
    80020c1a:	3ef71d23          	sh	a5,1018(a4) # 80049010 <excpt>
    80020c1e:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020c22:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    80020c26:	08200593          	li	a1,130
    80020c2a:	0000e617          	auipc	a2,0xe
    80020c2e:	a2660613          	addi	a2,a2,-1498 # 8002e650 <__func__.0+0x7a90>
    80020c32:	00006517          	auipc	a0,0x6
    80020c36:	28650513          	addi	a0,a0,646 # 80026eb8 <__func__.0+0x2f8>
    80020c3a:	2ca040ef          	jal	80024f04 <printf>
    80020c3e:	00028797          	auipc	a5,0x28
    80020c42:	3d37c783          	lbu	a5,979(a5) # 80049011 <excpt+0x1>
    80020c46:	00006597          	auipc	a1,0x6
    80020c4a:	23a58593          	addi	a1,a1,570 # 80026e80 <__func__.0+0x2c0>
    80020c4e:	c789                	beqz	a5,80020c58 <cycle_test_7+0x88>
    80020c50:	00006597          	auipc	a1,0x6
    80020c54:	24058593          	addi	a1,a1,576 # 80026e90 <__func__.0+0x2d0>
    80020c58:	00006517          	auipc	a0,0x6
    80020c5c:	27850513          	addi	a0,a0,632 # 80026ed0 <__func__.0+0x310>
    80020c60:	2a4040ef          	jal	80024f04 <printf>
    80020c64:	00028797          	auipc	a5,0x28
    80020c68:	3ad7c783          	lbu	a5,941(a5) # 80049011 <excpt+0x1>
    80020c6c:	e7a1                	bnez	a5,80020cb4 <cycle_test_7+0xe4>
    80020c6e:	4529                	li	a0,10
    80020c70:	09e030ef          	jal	80023d0e <putchar>
    80020c74:	00028797          	auipc	a5,0x28
    80020c78:	39d7c783          	lbu	a5,925(a5) # 80049011 <excpt+0x1>
    80020c7c:	e795                	bnez	a5,80020ca8 <cycle_test_7+0xd8>
    80020c7e:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020c80:	00006597          	auipc	a1,0x6
    80020c84:	20058593          	addi	a1,a1,512 # 80026e80 <__func__.0+0x2c0>
    80020c88:	00006517          	auipc	a0,0x6
    80020c8c:	2b050513          	addi	a0,a0,688 # 80026f38 <__func__.0+0x378>
    80020c90:	274040ef          	jal	80024f04 <printf>
    80020c94:	4511                	li	a0,4
    80020c96:	f61df0ef          	jal	80000bf6 <goto_priv>
    80020c9a:	813e00ef          	jal	800014ac <reset_state>
}
    80020c9e:	60a2                	ld	ra,8(sp)
    80020ca0:	8522                	mv	a0,s0
    80020ca2:	6402                	ld	s0,0(sp)
    80020ca4:	0141                	addi	sp,sp,16
    80020ca6:	8082                	ret
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    80020ca8:	4401                	li	s0,0
    TEST_END(); 
    80020caa:	00006597          	auipc	a1,0x6
    80020cae:	1e658593          	addi	a1,a1,486 # 80026e90 <__func__.0+0x2d0>
    80020cb2:	bfd9                	j	80020c88 <cycle_test_7+0xb8>
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    80020cb4:	00006517          	auipc	a0,0x6
    80020cb8:	22450513          	addi	a0,a0,548 # 80026ed8 <__func__.0+0x318>
    80020cbc:	248040ef          	jal	80024f04 <printf>
    80020cc0:	02900513          	li	a0,41
    80020cc4:	04a030ef          	jal	80023d0e <putchar>
    80020cc8:	b75d                	j	80020c6e <cycle_test_7+0x9e>

0000000080020cca <cycle_test_8>:

bool cycle_test_8() {
    80020cca:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020ccc:	00006597          	auipc	a1,0x6
    80020cd0:	cec58593          	addi	a1,a1,-788 # 800269b8 <__func__.26>
    80020cd4:	00006517          	auipc	a0,0x6
    80020cd8:	1cc50513          	addi	a0,a0,460 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_8() {
    80020cdc:	ec06                	sd	ra,24(sp)
    80020cde:	e822                	sd	s0,16(sp)
    80020ce0:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020ce2:	222040ef          	jal	80024f04 <printf>
    80020ce6:	4529                	li	a0,10
    80020ce8:	026030ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80020cec:	4511                	li	a0,4
    80020cee:	f09df0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    80020cf2:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020cf6:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    80020cfa:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    80020cfe:	4501                	li	a0,0
    80020d00:	ef7df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020d04:	0330000f          	fence	rw,rw
    80020d08:	00028417          	auipc	s0,0x28
    80020d0c:	30840413          	addi	s0,s0,776 # 80049010 <excpt>
    80020d10:	4785                	li	a5,1
    80020d12:	00028717          	auipc	a4,0x28
    80020d16:	32073b23          	sd	zero,822(a4) # 80049048 <excpt+0x38>
    80020d1a:	00f41023          	sh	a5,0(s0)
    80020d1e:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020d22:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    80020d26:	08200593          	li	a1,130
    80020d2a:	0000e617          	auipc	a2,0xe
    80020d2e:	97e60613          	addi	a2,a2,-1666 # 8002e6a8 <__func__.0+0x7ae8>
    80020d32:	00006517          	auipc	a0,0x6
    80020d36:	18650513          	addi	a0,a0,390 # 80026eb8 <__func__.0+0x2f8>
    80020d3a:	1ca040ef          	jal	80024f04 <printf>
    80020d3e:	00028797          	auipc	a5,0x28
    80020d42:	2d37c783          	lbu	a5,723(a5) # 80049011 <excpt+0x1>
    80020d46:	00006597          	auipc	a1,0x6
    80020d4a:	14a58593          	addi	a1,a1,330 # 80026e90 <__func__.0+0x2d0>
    80020d4e:	cf89                	beqz	a5,80020d68 <cycle_test_8+0x9e>
    80020d50:	6418                	ld	a4,8(s0)
    80020d52:	47d9                	li	a5,22
    80020d54:	00006597          	auipc	a1,0x6
    80020d58:	12c58593          	addi	a1,a1,300 # 80026e80 <__func__.0+0x2c0>
    80020d5c:	00f70663          	beq	a4,a5,80020d68 <cycle_test_8+0x9e>
    80020d60:	00006597          	auipc	a1,0x6
    80020d64:	13058593          	addi	a1,a1,304 # 80026e90 <__func__.0+0x2d0>
    80020d68:	00006517          	auipc	a0,0x6
    80020d6c:	16850513          	addi	a0,a0,360 # 80026ed0 <__func__.0+0x310>
    80020d70:	194040ef          	jal	80024f04 <printf>
    80020d74:	00028797          	auipc	a5,0x28
    80020d78:	29d7c783          	lbu	a5,669(a5) # 80049011 <excpt+0x1>
    80020d7c:	c789                	beqz	a5,80020d86 <cycle_test_8+0xbc>
    80020d7e:	6418                	ld	a4,8(s0)
    80020d80:	47d9                	li	a5,22
    80020d82:	00f70c63          	beq	a4,a5,80020d9a <cycle_test_8+0xd0>
    80020d86:	00006517          	auipc	a0,0x6
    80020d8a:	15250513          	addi	a0,a0,338 # 80026ed8 <__func__.0+0x318>
    80020d8e:	176040ef          	jal	80024f04 <printf>
    80020d92:	02900513          	li	a0,41
    80020d96:	779020ef          	jal	80023d0e <putchar>
    80020d9a:	4529                	li	a0,10
    80020d9c:	773020ef          	jal	80023d0e <putchar>
    80020da0:	00028497          	auipc	s1,0x28
    80020da4:	2714c483          	lbu	s1,625(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020da8:	00006597          	auipc	a1,0x6
    80020dac:	0e858593          	addi	a1,a1,232 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    80020db0:	cc91                	beqz	s1,80020dcc <cycle_test_8+0x102>
    80020db2:	6418                	ld	a4,8(s0)
    80020db4:	47d9                	li	a5,22
    TEST_END(); 
    80020db6:	00006597          	auipc	a1,0x6
    80020dba:	0ca58593          	addi	a1,a1,202 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    80020dbe:	00f70763          	beq	a4,a5,80020dcc <cycle_test_8+0x102>
    80020dc2:	4481                	li	s1,0
    TEST_END(); 
    80020dc4:	00006597          	auipc	a1,0x6
    80020dc8:	0cc58593          	addi	a1,a1,204 # 80026e90 <__func__.0+0x2d0>
    80020dcc:	00006517          	auipc	a0,0x6
    80020dd0:	16c50513          	addi	a0,a0,364 # 80026f38 <__func__.0+0x378>
    80020dd4:	130040ef          	jal	80024f04 <printf>
    80020dd8:	4511                	li	a0,4
    80020dda:	e1ddf0ef          	jal	80000bf6 <goto_priv>
    80020dde:	ecee00ef          	jal	800014ac <reset_state>
}
    80020de2:	60e2                	ld	ra,24(sp)
    80020de4:	6442                	ld	s0,16(sp)
    80020de6:	8526                	mv	a0,s1
    80020de8:	64a2                	ld	s1,8(sp)
    80020dea:	6105                	addi	sp,sp,32
    80020dec:	8082                	ret

0000000080020dee <cycle_test_9>:

bool cycle_test_9() {
    80020dee:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020df0:	00006597          	auipc	a1,0x6
    80020df4:	bd858593          	addi	a1,a1,-1064 # 800269c8 <__func__.25>
    80020df8:	00006517          	auipc	a0,0x6
    80020dfc:	0a850513          	addi	a0,a0,168 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_9() {
    80020e00:	ec06                	sd	ra,24(sp)
    80020e02:	e822                	sd	s0,16(sp)
    80020e04:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020e06:	0fe040ef          	jal	80024f04 <printf>
    80020e0a:	4529                	li	a0,10
    80020e0c:	703020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80020e10:	4511                	li	a0,4
    80020e12:	de5df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020e16:	3060e073          	csrsi	mcounteren,1
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    80020e1a:	1060f073          	csrci	scounteren,1

    goto_priv(PRIV_HU);
    80020e1e:	4505                	li	a0,1
    80020e20:	dd7df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020e24:	0330000f          	fence	rw,rw
    80020e28:	00028417          	auipc	s0,0x28
    80020e2c:	1e840413          	addi	s0,s0,488 # 80049010 <excpt>
    80020e30:	4785                	li	a5,1
    80020e32:	00028717          	auipc	a4,0x28
    80020e36:	20073b23          	sd	zero,534(a4) # 80049048 <excpt+0x38>
    80020e3a:	00f41023          	sh	a5,0(s0)
    80020e3e:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020e42:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    80020e46:	08200593          	li	a1,130
    80020e4a:	0000e617          	auipc	a2,0xe
    80020e4e:	8ce60613          	addi	a2,a2,-1842 # 8002e718 <__func__.0+0x7b58>
    80020e52:	00006517          	auipc	a0,0x6
    80020e56:	06650513          	addi	a0,a0,102 # 80026eb8 <__func__.0+0x2f8>
    80020e5a:	0aa040ef          	jal	80024f04 <printf>
    80020e5e:	00028797          	auipc	a5,0x28
    80020e62:	1b37c783          	lbu	a5,435(a5) # 80049011 <excpt+0x1>
    80020e66:	00006597          	auipc	a1,0x6
    80020e6a:	02a58593          	addi	a1,a1,42 # 80026e90 <__func__.0+0x2d0>
    80020e6e:	cf89                	beqz	a5,80020e88 <cycle_test_9+0x9a>
    80020e70:	6418                	ld	a4,8(s0)
    80020e72:	4789                	li	a5,2
    80020e74:	00006597          	auipc	a1,0x6
    80020e78:	00c58593          	addi	a1,a1,12 # 80026e80 <__func__.0+0x2c0>
    80020e7c:	00f70663          	beq	a4,a5,80020e88 <cycle_test_9+0x9a>
    80020e80:	00006597          	auipc	a1,0x6
    80020e84:	01058593          	addi	a1,a1,16 # 80026e90 <__func__.0+0x2d0>
    80020e88:	00006517          	auipc	a0,0x6
    80020e8c:	04850513          	addi	a0,a0,72 # 80026ed0 <__func__.0+0x310>
    80020e90:	074040ef          	jal	80024f04 <printf>
    80020e94:	00028797          	auipc	a5,0x28
    80020e98:	17d7c783          	lbu	a5,381(a5) # 80049011 <excpt+0x1>
    80020e9c:	c789                	beqz	a5,80020ea6 <cycle_test_9+0xb8>
    80020e9e:	6418                	ld	a4,8(s0)
    80020ea0:	4789                	li	a5,2
    80020ea2:	00f70c63          	beq	a4,a5,80020eba <cycle_test_9+0xcc>
    80020ea6:	00006517          	auipc	a0,0x6
    80020eaa:	03250513          	addi	a0,a0,50 # 80026ed8 <__func__.0+0x318>
    80020eae:	056040ef          	jal	80024f04 <printf>
    80020eb2:	02900513          	li	a0,41
    80020eb6:	659020ef          	jal	80023d0e <putchar>
    80020eba:	4529                	li	a0,10
    80020ebc:	653020ef          	jal	80023d0e <putchar>
    80020ec0:	00028497          	auipc	s1,0x28
    80020ec4:	1514c483          	lbu	s1,337(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020ec8:	00006597          	auipc	a1,0x6
    80020ecc:	fc858593          	addi	a1,a1,-56 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    80020ed0:	cc91                	beqz	s1,80020eec <cycle_test_9+0xfe>
    80020ed2:	6418                	ld	a4,8(s0)
    80020ed4:	4789                	li	a5,2
    TEST_END(); 
    80020ed6:	00006597          	auipc	a1,0x6
    80020eda:	faa58593          	addi	a1,a1,-86 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    80020ede:	00f70763          	beq	a4,a5,80020eec <cycle_test_9+0xfe>
    80020ee2:	4481                	li	s1,0
    TEST_END(); 
    80020ee4:	00006597          	auipc	a1,0x6
    80020ee8:	fac58593          	addi	a1,a1,-84 # 80026e90 <__func__.0+0x2d0>
    80020eec:	00006517          	auipc	a0,0x6
    80020ef0:	04c50513          	addi	a0,a0,76 # 80026f38 <__func__.0+0x378>
    80020ef4:	010040ef          	jal	80024f04 <printf>
    80020ef8:	4511                	li	a0,4
    80020efa:	cfddf0ef          	jal	80000bf6 <goto_priv>
    80020efe:	daee00ef          	jal	800014ac <reset_state>
}
    80020f02:	60e2                	ld	ra,24(sp)
    80020f04:	6442                	ld	s0,16(sp)
    80020f06:	8526                	mv	a0,s1
    80020f08:	64a2                	ld	s1,8(sp)
    80020f0a:	6105                	addi	sp,sp,32
    80020f0c:	8082                	ret

0000000080020f0e <cycle_test_10>:

bool cycle_test_10() {
    80020f0e:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020f10:	00006597          	auipc	a1,0x6
    80020f14:	ac858593          	addi	a1,a1,-1336 # 800269d8 <__func__.24>
    80020f18:	00006517          	auipc	a0,0x6
    80020f1c:	f8850513          	addi	a0,a0,-120 # 80026ea0 <__func__.0+0x2e0>
bool cycle_test_10() {
    80020f20:	e406                	sd	ra,8(sp)
    80020f22:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020f24:	7e1030ef          	jal	80024f04 <printf>
    80020f28:	4529                	li	a0,10
    80020f2a:	5e5020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80020f2e:	4511                	li	a0,4
    80020f30:	cc7df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    80020f34:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    80020f38:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    80020f3c:	4509                	li	a0,2
    80020f3e:	cb9df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80020f42:	0330000f          	fence	rw,rw
    80020f46:	4785                	li	a5,1
    80020f48:	00028717          	auipc	a4,0x28
    80020f4c:	10073023          	sd	zero,256(a4) # 80049048 <excpt+0x38>
    80020f50:	00028717          	auipc	a4,0x28
    80020f54:	0cf71023          	sh	a5,192(a4) # 80049010 <excpt>
    80020f58:	0330000f          	fence	rw,rw
    CSRR(CSR_CYCLE);
    80020f5c:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    80020f60:	08200593          	li	a1,130
    80020f64:	0000e617          	auipc	a2,0xe
    80020f68:	81460613          	addi	a2,a2,-2028 # 8002e778 <__func__.0+0x7bb8>
    80020f6c:	00006517          	auipc	a0,0x6
    80020f70:	f4c50513          	addi	a0,a0,-180 # 80026eb8 <__func__.0+0x2f8>
    80020f74:	791030ef          	jal	80024f04 <printf>
    80020f78:	00028797          	auipc	a5,0x28
    80020f7c:	0997c783          	lbu	a5,153(a5) # 80049011 <excpt+0x1>
    80020f80:	00006597          	auipc	a1,0x6
    80020f84:	f0058593          	addi	a1,a1,-256 # 80026e80 <__func__.0+0x2c0>
    80020f88:	c789                	beqz	a5,80020f92 <cycle_test_10+0x84>
    80020f8a:	00006597          	auipc	a1,0x6
    80020f8e:	f0658593          	addi	a1,a1,-250 # 80026e90 <__func__.0+0x2d0>
    80020f92:	00006517          	auipc	a0,0x6
    80020f96:	f3e50513          	addi	a0,a0,-194 # 80026ed0 <__func__.0+0x310>
    80020f9a:	76b030ef          	jal	80024f04 <printf>
    80020f9e:	00028797          	auipc	a5,0x28
    80020fa2:	0737c783          	lbu	a5,115(a5) # 80049011 <excpt+0x1>
    80020fa6:	e7a1                	bnez	a5,80020fee <cycle_test_10+0xe0>
    80020fa8:	4529                	li	a0,10
    80020faa:	565020ef          	jal	80023d0e <putchar>
    80020fae:	00028797          	auipc	a5,0x28
    80020fb2:	0637c783          	lbu	a5,99(a5) # 80049011 <excpt+0x1>
    80020fb6:	e795                	bnez	a5,80020fe2 <cycle_test_10+0xd4>
    80020fb8:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020fba:	00006597          	auipc	a1,0x6
    80020fbe:	ec658593          	addi	a1,a1,-314 # 80026e80 <__func__.0+0x2c0>
    80020fc2:	00006517          	auipc	a0,0x6
    80020fc6:	f7650513          	addi	a0,a0,-138 # 80026f38 <__func__.0+0x378>
    80020fca:	73b030ef          	jal	80024f04 <printf>
    80020fce:	4511                	li	a0,4
    80020fd0:	c27df0ef          	jal	80000bf6 <goto_priv>
    80020fd4:	cd8e00ef          	jal	800014ac <reset_state>
}
    80020fd8:	60a2                	ld	ra,8(sp)
    80020fda:	8522                	mv	a0,s0
    80020fdc:	6402                	ld	s0,0(sp)
    80020fde:	0141                	addi	sp,sp,16
    80020fe0:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    80020fe2:	4401                	li	s0,0
    TEST_END(); 
    80020fe4:	00006597          	auipc	a1,0x6
    80020fe8:	eac58593          	addi	a1,a1,-340 # 80026e90 <__func__.0+0x2d0>
    80020fec:	bfd9                	j	80020fc2 <cycle_test_10+0xb4>
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    80020fee:	00006517          	auipc	a0,0x6
    80020ff2:	eea50513          	addi	a0,a0,-278 # 80026ed8 <__func__.0+0x318>
    80020ff6:	70f030ef          	jal	80024f04 <printf>
    80020ffa:	02900513          	li	a0,41
    80020ffe:	511020ef          	jal	80023d0e <putchar>
    80021002:	b75d                	j	80020fa8 <cycle_test_10+0x9a>

0000000080021004 <instret_test_1>:


bool instret_test_1() {
    80021004:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021006:	00006597          	auipc	a1,0x6
    8002100a:	9e258593          	addi	a1,a1,-1566 # 800269e8 <__func__.23>
    8002100e:	00006517          	auipc	a0,0x6
    80021012:	e9250513          	addi	a0,a0,-366 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_1() {
    80021016:	ec06                	sd	ra,24(sp)
    80021018:	e822                	sd	s0,16(sp)
    8002101a:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002101c:	6e9030ef          	jal	80024f04 <printf>
    80021020:	4529                	li	a0,10
    80021022:	4ed020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80021026:	4511                	li	a0,4
    80021028:	bcfdf0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8002102c:	30627073          	csrci	mcounteren,4

    goto_priv(PRIV_VS);
    80021030:	4509                	li	a0,2
    80021032:	bc5df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021036:	0330000f          	fence	rw,rw
    8002103a:	00028417          	auipc	s0,0x28
    8002103e:	fd640413          	addi	s0,s0,-42 # 80049010 <excpt>
    80021042:	4785                	li	a5,1
    80021044:	00028717          	auipc	a4,0x28
    80021048:	00073223          	sd	zero,4(a4) # 80049048 <excpt+0x38>
    8002104c:	00f41023          	sh	a5,0(s0)
    80021050:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021054:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    80021058:	08200593          	li	a1,130
    8002105c:	0000d617          	auipc	a2,0xd
    80021060:	76c60613          	addi	a2,a2,1900 # 8002e7c8 <__func__.0+0x7c08>
    80021064:	00006517          	auipc	a0,0x6
    80021068:	e5450513          	addi	a0,a0,-428 # 80026eb8 <__func__.0+0x2f8>
    8002106c:	699030ef          	jal	80024f04 <printf>
    80021070:	00028797          	auipc	a5,0x28
    80021074:	fa17c783          	lbu	a5,-95(a5) # 80049011 <excpt+0x1>
    80021078:	00006597          	auipc	a1,0x6
    8002107c:	e1858593          	addi	a1,a1,-488 # 80026e90 <__func__.0+0x2d0>
    80021080:	cf89                	beqz	a5,8002109a <instret_test_1+0x96>
    80021082:	6418                	ld	a4,8(s0)
    80021084:	4789                	li	a5,2
    80021086:	00006597          	auipc	a1,0x6
    8002108a:	dfa58593          	addi	a1,a1,-518 # 80026e80 <__func__.0+0x2c0>
    8002108e:	00f70663          	beq	a4,a5,8002109a <instret_test_1+0x96>
    80021092:	00006597          	auipc	a1,0x6
    80021096:	dfe58593          	addi	a1,a1,-514 # 80026e90 <__func__.0+0x2d0>
    8002109a:	00006517          	auipc	a0,0x6
    8002109e:	e3650513          	addi	a0,a0,-458 # 80026ed0 <__func__.0+0x310>
    800210a2:	663030ef          	jal	80024f04 <printf>
    800210a6:	00028797          	auipc	a5,0x28
    800210aa:	f6b7c783          	lbu	a5,-149(a5) # 80049011 <excpt+0x1>
    800210ae:	c789                	beqz	a5,800210b8 <instret_test_1+0xb4>
    800210b0:	6418                	ld	a4,8(s0)
    800210b2:	4789                	li	a5,2
    800210b4:	00f70c63          	beq	a4,a5,800210cc <instret_test_1+0xc8>
    800210b8:	00006517          	auipc	a0,0x6
    800210bc:	e2050513          	addi	a0,a0,-480 # 80026ed8 <__func__.0+0x318>
    800210c0:	645030ef          	jal	80024f04 <printf>
    800210c4:	02900513          	li	a0,41
    800210c8:	447020ef          	jal	80023d0e <putchar>
    800210cc:	4529                	li	a0,10
    800210ce:	441020ef          	jal	80023d0e <putchar>
    800210d2:	00028797          	auipc	a5,0x28
    800210d6:	f3f7c783          	lbu	a5,-193(a5) # 80049011 <excpt+0x1>
    800210da:	4481                	li	s1,0
    800210dc:	c789                	beqz	a5,800210e6 <instret_test_1+0xe2>
    800210de:	6404                	ld	s1,8(s0)
    800210e0:	14f9                	addi	s1,s1,-2
    800210e2:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    800210e6:	450d                	li	a0,3
    800210e8:	b0fdf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800210ec:	0330000f          	fence	rw,rw
    800210f0:	4785                	li	a5,1
    800210f2:	00028717          	auipc	a4,0x28
    800210f6:	f4073b23          	sd	zero,-170(a4) # 80049048 <excpt+0x38>
    800210fa:	00f41023          	sh	a5,0(s0)
    800210fe:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021102:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    80021106:	08200593          	li	a1,130
    8002110a:	0000d617          	auipc	a2,0xd
    8002110e:	70e60613          	addi	a2,a2,1806 # 8002e818 <__func__.0+0x7c58>
    80021112:	00006517          	auipc	a0,0x6
    80021116:	da650513          	addi	a0,a0,-602 # 80026eb8 <__func__.0+0x2f8>
    8002111a:	5eb030ef          	jal	80024f04 <printf>
    8002111e:	00028797          	auipc	a5,0x28
    80021122:	ef37c783          	lbu	a5,-269(a5) # 80049011 <excpt+0x1>
    80021126:	00006597          	auipc	a1,0x6
    8002112a:	d6a58593          	addi	a1,a1,-662 # 80026e90 <__func__.0+0x2d0>
    8002112e:	cf89                	beqz	a5,80021148 <instret_test_1+0x144>
    80021130:	6418                	ld	a4,8(s0)
    80021132:	4789                	li	a5,2
    80021134:	00006597          	auipc	a1,0x6
    80021138:	d4c58593          	addi	a1,a1,-692 # 80026e80 <__func__.0+0x2c0>
    8002113c:	00f70663          	beq	a4,a5,80021148 <instret_test_1+0x144>
    80021140:	00006597          	auipc	a1,0x6
    80021144:	d5058593          	addi	a1,a1,-688 # 80026e90 <__func__.0+0x2d0>
    80021148:	00006517          	auipc	a0,0x6
    8002114c:	d8850513          	addi	a0,a0,-632 # 80026ed0 <__func__.0+0x310>
    80021150:	5b5030ef          	jal	80024f04 <printf>
    80021154:	00028797          	auipc	a5,0x28
    80021158:	ebd7c783          	lbu	a5,-323(a5) # 80049011 <excpt+0x1>
    8002115c:	c789                	beqz	a5,80021166 <instret_test_1+0x162>
    8002115e:	6418                	ld	a4,8(s0)
    80021160:	4789                	li	a5,2
    80021162:	00f70c63          	beq	a4,a5,8002117a <instret_test_1+0x176>
    80021166:	00006517          	auipc	a0,0x6
    8002116a:	d7250513          	addi	a0,a0,-654 # 80026ed8 <__func__.0+0x318>
    8002116e:	597030ef          	jal	80024f04 <printf>
    80021172:	02900513          	li	a0,41
    80021176:	399020ef          	jal	80023d0e <putchar>
    8002117a:	4529                	li	a0,10
    8002117c:	393020ef          	jal	80023d0e <putchar>
    80021180:	c881                	beqz	s1,80021190 <instret_test_1+0x18c>
    80021182:	00028797          	auipc	a5,0x28
    80021186:	e8f7c783          	lbu	a5,-369(a5) # 80049011 <excpt+0x1>
    8002118a:	4481                	li	s1,0
    8002118c:	1a079163          	bnez	a5,8002132e <instret_test_1+0x32a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    80021190:	4501                	li	a0,0
    80021192:	a65df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021196:	0330000f          	fence	rw,rw
    8002119a:	4785                	li	a5,1
    8002119c:	00028717          	auipc	a4,0x28
    800211a0:	ea073623          	sd	zero,-340(a4) # 80049048 <excpt+0x38>
    800211a4:	00f41023          	sh	a5,0(s0)
    800211a8:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    800211ac:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    800211b0:	08200593          	li	a1,130
    800211b4:	0000d617          	auipc	a2,0xd
    800211b8:	6b460613          	addi	a2,a2,1716 # 8002e868 <__func__.0+0x7ca8>
    800211bc:	00006517          	auipc	a0,0x6
    800211c0:	cfc50513          	addi	a0,a0,-772 # 80026eb8 <__func__.0+0x2f8>
    800211c4:	541030ef          	jal	80024f04 <printf>
    800211c8:	00028797          	auipc	a5,0x28
    800211cc:	e497c783          	lbu	a5,-439(a5) # 80049011 <excpt+0x1>
    800211d0:	00006597          	auipc	a1,0x6
    800211d4:	cc058593          	addi	a1,a1,-832 # 80026e90 <__func__.0+0x2d0>
    800211d8:	cf89                	beqz	a5,800211f2 <instret_test_1+0x1ee>
    800211da:	6418                	ld	a4,8(s0)
    800211dc:	4789                	li	a5,2
    800211de:	00006597          	auipc	a1,0x6
    800211e2:	ca258593          	addi	a1,a1,-862 # 80026e80 <__func__.0+0x2c0>
    800211e6:	00f70663          	beq	a4,a5,800211f2 <instret_test_1+0x1ee>
    800211ea:	00006597          	auipc	a1,0x6
    800211ee:	ca658593          	addi	a1,a1,-858 # 80026e90 <__func__.0+0x2d0>
    800211f2:	00006517          	auipc	a0,0x6
    800211f6:	cde50513          	addi	a0,a0,-802 # 80026ed0 <__func__.0+0x310>
    800211fa:	50b030ef          	jal	80024f04 <printf>
    800211fe:	00028797          	auipc	a5,0x28
    80021202:	e137c783          	lbu	a5,-493(a5) # 80049011 <excpt+0x1>
    80021206:	c789                	beqz	a5,80021210 <instret_test_1+0x20c>
    80021208:	6418                	ld	a4,8(s0)
    8002120a:	4789                	li	a5,2
    8002120c:	00f70c63          	beq	a4,a5,80021224 <instret_test_1+0x220>
    80021210:	00006517          	auipc	a0,0x6
    80021214:	cc850513          	addi	a0,a0,-824 # 80026ed8 <__func__.0+0x318>
    80021218:	4ed030ef          	jal	80024f04 <printf>
    8002121c:	02900513          	li	a0,41
    80021220:	2ef020ef          	jal	80023d0e <putchar>
    80021224:	4529                	li	a0,10
    80021226:	2e9020ef          	jal	80023d0e <putchar>
    8002122a:	c881                	beqz	s1,8002123a <instret_test_1+0x236>
    8002122c:	00028797          	auipc	a5,0x28
    80021230:	de57c783          	lbu	a5,-539(a5) # 80049011 <excpt+0x1>
    80021234:	4481                	li	s1,0
    80021236:	0e079763          	bnez	a5,80021324 <instret_test_1+0x320>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8002123a:	4505                	li	a0,1
    8002123c:	9bbdf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021240:	0330000f          	fence	rw,rw
    80021244:	4785                	li	a5,1
    80021246:	00028717          	auipc	a4,0x28
    8002124a:	e0073123          	sd	zero,-510(a4) # 80049048 <excpt+0x38>
    8002124e:	00f41023          	sh	a5,0(s0)
    80021252:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021256:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8002125a:	08200593          	li	a1,130
    8002125e:	0000d617          	auipc	a2,0xd
    80021262:	65a60613          	addi	a2,a2,1626 # 8002e8b8 <__func__.0+0x7cf8>
    80021266:	00006517          	auipc	a0,0x6
    8002126a:	c5250513          	addi	a0,a0,-942 # 80026eb8 <__func__.0+0x2f8>
    8002126e:	497030ef          	jal	80024f04 <printf>
    80021272:	00028797          	auipc	a5,0x28
    80021276:	d9f7c783          	lbu	a5,-609(a5) # 80049011 <excpt+0x1>
    8002127a:	00006597          	auipc	a1,0x6
    8002127e:	c1658593          	addi	a1,a1,-1002 # 80026e90 <__func__.0+0x2d0>
    80021282:	cf89                	beqz	a5,8002129c <instret_test_1+0x298>
    80021284:	6418                	ld	a4,8(s0)
    80021286:	4789                	li	a5,2
    80021288:	00006597          	auipc	a1,0x6
    8002128c:	bf858593          	addi	a1,a1,-1032 # 80026e80 <__func__.0+0x2c0>
    80021290:	00f70663          	beq	a4,a5,8002129c <instret_test_1+0x298>
    80021294:	00006597          	auipc	a1,0x6
    80021298:	bfc58593          	addi	a1,a1,-1028 # 80026e90 <__func__.0+0x2d0>
    8002129c:	00006517          	auipc	a0,0x6
    800212a0:	c3450513          	addi	a0,a0,-972 # 80026ed0 <__func__.0+0x310>
    800212a4:	461030ef          	jal	80024f04 <printf>
    800212a8:	00028797          	auipc	a5,0x28
    800212ac:	d697c783          	lbu	a5,-663(a5) # 80049011 <excpt+0x1>
    800212b0:	c789                	beqz	a5,800212ba <instret_test_1+0x2b6>
    800212b2:	6418                	ld	a4,8(s0)
    800212b4:	4789                	li	a5,2
    800212b6:	00f70c63          	beq	a4,a5,800212ce <instret_test_1+0x2ca>
    800212ba:	00006517          	auipc	a0,0x6
    800212be:	c1e50513          	addi	a0,a0,-994 # 80026ed8 <__func__.0+0x318>
    800212c2:	443030ef          	jal	80024f04 <printf>
    800212c6:	02900513          	li	a0,41
    800212ca:	245020ef          	jal	80023d0e <putchar>
    800212ce:	4529                	li	a0,10
    800212d0:	23f020ef          	jal	80023d0e <putchar>
    800212d4:	c095                	beqz	s1,800212f8 <instret_test_1+0x2f4>
    800212d6:	00028497          	auipc	s1,0x28
    800212da:	d3b4c483          	lbu	s1,-709(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800212de:	00006597          	auipc	a1,0x6
    800212e2:	bb258593          	addi	a1,a1,-1102 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    800212e6:	cc91                	beqz	s1,80021302 <instret_test_1+0x2fe>
    800212e8:	6418                	ld	a4,8(s0)
    800212ea:	4789                	li	a5,2
    TEST_END(); 
    800212ec:	00006597          	auipc	a1,0x6
    800212f0:	b9458593          	addi	a1,a1,-1132 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    800212f4:	00f70763          	beq	a4,a5,80021302 <instret_test_1+0x2fe>
    800212f8:	4481                	li	s1,0
    TEST_END(); 
    800212fa:	00006597          	auipc	a1,0x6
    800212fe:	b9658593          	addi	a1,a1,-1130 # 80026e90 <__func__.0+0x2d0>
    80021302:	00006517          	auipc	a0,0x6
    80021306:	c3650513          	addi	a0,a0,-970 # 80026f38 <__func__.0+0x378>
    8002130a:	3fb030ef          	jal	80024f04 <printf>
    8002130e:	4511                	li	a0,4
    80021310:	8e7df0ef          	jal	80000bf6 <goto_priv>
    80021314:	998e00ef          	jal	800014ac <reset_state>
}
    80021318:	60e2                	ld	ra,24(sp)
    8002131a:	6442                	ld	s0,16(sp)
    8002131c:	8526                	mv	a0,s1
    8002131e:	64a2                	ld	s1,8(sp)
    80021320:	6105                	addi	sp,sp,32
    80021322:	8082                	ret
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    80021324:	6404                	ld	s1,8(s0)
    80021326:	14f9                	addi	s1,s1,-2
    80021328:	0014b493          	seqz	s1,s1
    8002132c:	b739                	j	8002123a <instret_test_1+0x236>
    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8002132e:	6404                	ld	s1,8(s0)
    80021330:	14f9                	addi	s1,s1,-2
    80021332:	0014b493          	seqz	s1,s1
    80021336:	bda9                	j	80021190 <instret_test_1+0x18c>

0000000080021338 <instret_test_2>:

bool instret_test_2() {
    80021338:	1141                	addi	sp,sp,-16

    TEST_START();    
    8002133a:	00005597          	auipc	a1,0x5
    8002133e:	6be58593          	addi	a1,a1,1726 # 800269f8 <__func__.22>
    80021342:	00006517          	auipc	a0,0x6
    80021346:	b5e50513          	addi	a0,a0,-1186 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_2() {
    8002134a:	e406                	sd	ra,8(sp)
    8002134c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8002134e:	3b7030ef          	jal	80024f04 <printf>
    80021352:	4529                	li	a0,10
    80021354:	1bb020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80021358:	4511                	li	a0,4
    8002135a:	89ddf0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8002135e:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HS);
    80021362:	450d                	li	a0,3
    80021364:	893df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021368:	0330000f          	fence	rw,rw
    8002136c:	4785                	li	a5,1
    8002136e:	00028717          	auipc	a4,0x28
    80021372:	cc073d23          	sd	zero,-806(a4) # 80049048 <excpt+0x38>
    80021376:	00028717          	auipc	a4,0x28
    8002137a:	c8f71d23          	sh	a5,-870(a4) # 80049010 <excpt>
    8002137e:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021382:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    80021386:	08200593          	li	a1,130
    8002138a:	0000d617          	auipc	a2,0xd
    8002138e:	57e60613          	addi	a2,a2,1406 # 8002e908 <__func__.0+0x7d48>
    80021392:	00006517          	auipc	a0,0x6
    80021396:	b2650513          	addi	a0,a0,-1242 # 80026eb8 <__func__.0+0x2f8>
    8002139a:	36b030ef          	jal	80024f04 <printf>
    8002139e:	00028797          	auipc	a5,0x28
    800213a2:	c737c783          	lbu	a5,-909(a5) # 80049011 <excpt+0x1>
    800213a6:	00006597          	auipc	a1,0x6
    800213aa:	ada58593          	addi	a1,a1,-1318 # 80026e80 <__func__.0+0x2c0>
    800213ae:	c789                	beqz	a5,800213b8 <instret_test_2+0x80>
    800213b0:	00006597          	auipc	a1,0x6
    800213b4:	ae058593          	addi	a1,a1,-1312 # 80026e90 <__func__.0+0x2d0>
    800213b8:	00006517          	auipc	a0,0x6
    800213bc:	b1850513          	addi	a0,a0,-1256 # 80026ed0 <__func__.0+0x310>
    800213c0:	345030ef          	jal	80024f04 <printf>
    800213c4:	00028797          	auipc	a5,0x28
    800213c8:	c4d7c783          	lbu	a5,-947(a5) # 80049011 <excpt+0x1>
    800213cc:	e7a1                	bnez	a5,80021414 <instret_test_2+0xdc>
    800213ce:	4529                	li	a0,10
    800213d0:	13f020ef          	jal	80023d0e <putchar>
    800213d4:	00028797          	auipc	a5,0x28
    800213d8:	c3d7c783          	lbu	a5,-963(a5) # 80049011 <excpt+0x1>
    800213dc:	e795                	bnez	a5,80021408 <instret_test_2+0xd0>
    800213de:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    800213e0:	00006597          	auipc	a1,0x6
    800213e4:	aa058593          	addi	a1,a1,-1376 # 80026e80 <__func__.0+0x2c0>
    800213e8:	00006517          	auipc	a0,0x6
    800213ec:	b5050513          	addi	a0,a0,-1200 # 80026f38 <__func__.0+0x378>
    800213f0:	315030ef          	jal	80024f04 <printf>
    800213f4:	4511                	li	a0,4
    800213f6:	801df0ef          	jal	80000bf6 <goto_priv>
    800213fa:	8b2e00ef          	jal	800014ac <reset_state>
}
    800213fe:	60a2                	ld	ra,8(sp)
    80021400:	8522                	mv	a0,s0
    80021402:	6402                	ld	s0,0(sp)
    80021404:	0141                	addi	sp,sp,16
    80021406:	8082                	ret
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    80021408:	4401                	li	s0,0
    TEST_END(); 
    8002140a:	00006597          	auipc	a1,0x6
    8002140e:	a8658593          	addi	a1,a1,-1402 # 80026e90 <__func__.0+0x2d0>
    80021412:	bfd9                	j	800213e8 <instret_test_2+0xb0>
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    80021414:	00006517          	auipc	a0,0x6
    80021418:	ac450513          	addi	a0,a0,-1340 # 80026ed8 <__func__.0+0x318>
    8002141c:	2e9030ef          	jal	80024f04 <printf>
    80021420:	02900513          	li	a0,41
    80021424:	0eb020ef          	jal	80023d0e <putchar>
    80021428:	b75d                	j	800213ce <instret_test_2+0x96>

000000008002142a <instret_test_3>:

bool instret_test_3() {
    8002142a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002142c:	00005597          	auipc	a1,0x5
    80021430:	5dc58593          	addi	a1,a1,1500 # 80026a08 <__func__.21>
    80021434:	00006517          	auipc	a0,0x6
    80021438:	a6c50513          	addi	a0,a0,-1428 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_3() {
    8002143c:	ec06                	sd	ra,24(sp)
    8002143e:	e822                	sd	s0,16(sp)
    80021440:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021442:	2c3030ef          	jal	80024f04 <printf>
    80021446:	4529                	li	a0,10
    80021448:	0c7020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8002144c:	4511                	li	a0,4
    8002144e:	fa8df0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021452:	10627073          	csrci	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021456:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8002145a:	4505                	li	a0,1
    8002145c:	f9adf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021460:	0330000f          	fence	rw,rw
    80021464:	00028417          	auipc	s0,0x28
    80021468:	bac40413          	addi	s0,s0,-1108 # 80049010 <excpt>
    8002146c:	4785                	li	a5,1
    8002146e:	00028717          	auipc	a4,0x28
    80021472:	bc073d23          	sd	zero,-1062(a4) # 80049048 <excpt+0x38>
    80021476:	00f41023          	sh	a5,0(s0)
    8002147a:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    8002147e:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    80021482:	08200593          	li	a1,130
    80021486:	0000d617          	auipc	a2,0xd
    8002148a:	4ba60613          	addi	a2,a2,1210 # 8002e940 <__func__.0+0x7d80>
    8002148e:	00006517          	auipc	a0,0x6
    80021492:	a2a50513          	addi	a0,a0,-1494 # 80026eb8 <__func__.0+0x2f8>
    80021496:	26f030ef          	jal	80024f04 <printf>
    8002149a:	00028797          	auipc	a5,0x28
    8002149e:	b777c783          	lbu	a5,-1161(a5) # 80049011 <excpt+0x1>
    800214a2:	00006597          	auipc	a1,0x6
    800214a6:	9ee58593          	addi	a1,a1,-1554 # 80026e90 <__func__.0+0x2d0>
    800214aa:	cf89                	beqz	a5,800214c4 <instret_test_3+0x9a>
    800214ac:	6418                	ld	a4,8(s0)
    800214ae:	4789                	li	a5,2
    800214b0:	00006597          	auipc	a1,0x6
    800214b4:	9d058593          	addi	a1,a1,-1584 # 80026e80 <__func__.0+0x2c0>
    800214b8:	00f70663          	beq	a4,a5,800214c4 <instret_test_3+0x9a>
    800214bc:	00006597          	auipc	a1,0x6
    800214c0:	9d458593          	addi	a1,a1,-1580 # 80026e90 <__func__.0+0x2d0>
    800214c4:	00006517          	auipc	a0,0x6
    800214c8:	a0c50513          	addi	a0,a0,-1524 # 80026ed0 <__func__.0+0x310>
    800214cc:	239030ef          	jal	80024f04 <printf>
    800214d0:	00028797          	auipc	a5,0x28
    800214d4:	b417c783          	lbu	a5,-1215(a5) # 80049011 <excpt+0x1>
    800214d8:	c789                	beqz	a5,800214e2 <instret_test_3+0xb8>
    800214da:	6418                	ld	a4,8(s0)
    800214dc:	4789                	li	a5,2
    800214de:	00f70c63          	beq	a4,a5,800214f6 <instret_test_3+0xcc>
    800214e2:	00006517          	auipc	a0,0x6
    800214e6:	9f650513          	addi	a0,a0,-1546 # 80026ed8 <__func__.0+0x318>
    800214ea:	21b030ef          	jal	80024f04 <printf>
    800214ee:	02900513          	li	a0,41
    800214f2:	01d020ef          	jal	80023d0e <putchar>
    800214f6:	4529                	li	a0,10
    800214f8:	017020ef          	jal	80023d0e <putchar>
    800214fc:	00028497          	auipc	s1,0x28
    80021500:	b154c483          	lbu	s1,-1259(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021504:	00006597          	auipc	a1,0x6
    80021508:	98c58593          	addi	a1,a1,-1652 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8002150c:	cc91                	beqz	s1,80021528 <instret_test_3+0xfe>
    8002150e:	6418                	ld	a4,8(s0)
    80021510:	4789                	li	a5,2
    TEST_END(); 
    80021512:	00006597          	auipc	a1,0x6
    80021516:	96e58593          	addi	a1,a1,-1682 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8002151a:	00f70763          	beq	a4,a5,80021528 <instret_test_3+0xfe>
    8002151e:	4481                	li	s1,0
    TEST_END(); 
    80021520:	00006597          	auipc	a1,0x6
    80021524:	97058593          	addi	a1,a1,-1680 # 80026e90 <__func__.0+0x2d0>
    80021528:	00006517          	auipc	a0,0x6
    8002152c:	a1050513          	addi	a0,a0,-1520 # 80026f38 <__func__.0+0x378>
    80021530:	1d5030ef          	jal	80024f04 <printf>
    80021534:	4511                	li	a0,4
    80021536:	ec0df0ef          	jal	80000bf6 <goto_priv>
    8002153a:	f73df0ef          	jal	800014ac <reset_state>
}
    8002153e:	60e2                	ld	ra,24(sp)
    80021540:	6442                	ld	s0,16(sp)
    80021542:	8526                	mv	a0,s1
    80021544:	64a2                	ld	s1,8(sp)
    80021546:	6105                	addi	sp,sp,32
    80021548:	8082                	ret

000000008002154a <instret_test_4>:

bool instret_test_4() {
    8002154a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8002154c:	00005597          	auipc	a1,0x5
    80021550:	4cc58593          	addi	a1,a1,1228 # 80026a18 <__func__.20>
    80021554:	00006517          	auipc	a0,0x6
    80021558:	94c50513          	addi	a0,a0,-1716 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_4() {
    8002155c:	e406                	sd	ra,8(sp)
    8002155e:	e022                	sd	s0,0(sp)
    TEST_START();    
    80021560:	1a5030ef          	jal	80024f04 <printf>
    80021564:	4529                	li	a0,10
    80021566:	7a8020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    8002156a:	4511                	li	a0,4
    8002156c:	e8adf0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021570:	10626073          	csrsi	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021574:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    80021578:	4505                	li	a0,1
    8002157a:	e7cdf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002157e:	0330000f          	fence	rw,rw
    80021582:	4785                	li	a5,1
    80021584:	00028717          	auipc	a4,0x28
    80021588:	ac073223          	sd	zero,-1340(a4) # 80049048 <excpt+0x38>
    8002158c:	00028717          	auipc	a4,0x28
    80021590:	a8f71223          	sh	a5,-1404(a4) # 80049010 <excpt>
    80021594:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021598:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8002159c:	08200593          	li	a1,130
    800215a0:	0000d617          	auipc	a2,0xd
    800215a4:	3f060613          	addi	a2,a2,1008 # 8002e990 <__func__.0+0x7dd0>
    800215a8:	00006517          	auipc	a0,0x6
    800215ac:	91050513          	addi	a0,a0,-1776 # 80026eb8 <__func__.0+0x2f8>
    800215b0:	155030ef          	jal	80024f04 <printf>
    800215b4:	00028797          	auipc	a5,0x28
    800215b8:	a5d7c783          	lbu	a5,-1443(a5) # 80049011 <excpt+0x1>
    800215bc:	00006597          	auipc	a1,0x6
    800215c0:	8c458593          	addi	a1,a1,-1852 # 80026e80 <__func__.0+0x2c0>
    800215c4:	c789                	beqz	a5,800215ce <instret_test_4+0x84>
    800215c6:	00006597          	auipc	a1,0x6
    800215ca:	8ca58593          	addi	a1,a1,-1846 # 80026e90 <__func__.0+0x2d0>
    800215ce:	00006517          	auipc	a0,0x6
    800215d2:	90250513          	addi	a0,a0,-1790 # 80026ed0 <__func__.0+0x310>
    800215d6:	12f030ef          	jal	80024f04 <printf>
    800215da:	00028797          	auipc	a5,0x28
    800215de:	a377c783          	lbu	a5,-1481(a5) # 80049011 <excpt+0x1>
    800215e2:	e7a1                	bnez	a5,8002162a <instret_test_4+0xe0>
    800215e4:	4529                	li	a0,10
    800215e6:	728020ef          	jal	80023d0e <putchar>
    800215ea:	00028797          	auipc	a5,0x28
    800215ee:	a277c783          	lbu	a5,-1497(a5) # 80049011 <excpt+0x1>
    800215f2:	e795                	bnez	a5,8002161e <instret_test_4+0xd4>
    800215f4:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    800215f6:	00006597          	auipc	a1,0x6
    800215fa:	88a58593          	addi	a1,a1,-1910 # 80026e80 <__func__.0+0x2c0>
    800215fe:	00006517          	auipc	a0,0x6
    80021602:	93a50513          	addi	a0,a0,-1734 # 80026f38 <__func__.0+0x378>
    80021606:	0ff030ef          	jal	80024f04 <printf>
    8002160a:	4511                	li	a0,4
    8002160c:	deadf0ef          	jal	80000bf6 <goto_priv>
    80021610:	e9ddf0ef          	jal	800014ac <reset_state>
}
    80021614:	60a2                	ld	ra,8(sp)
    80021616:	8522                	mv	a0,s0
    80021618:	6402                	ld	s0,0(sp)
    8002161a:	0141                	addi	sp,sp,16
    8002161c:	8082                	ret
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8002161e:	4401                	li	s0,0
    TEST_END(); 
    80021620:	00006597          	auipc	a1,0x6
    80021624:	87058593          	addi	a1,a1,-1936 # 80026e90 <__func__.0+0x2d0>
    80021628:	bfd9                	j	800215fe <instret_test_4+0xb4>
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8002162a:	00006517          	auipc	a0,0x6
    8002162e:	8ae50513          	addi	a0,a0,-1874 # 80026ed8 <__func__.0+0x318>
    80021632:	0d3030ef          	jal	80024f04 <printf>
    80021636:	02900513          	li	a0,41
    8002163a:	6d4020ef          	jal	80023d0e <putchar>
    8002163e:	b75d                	j	800215e4 <instret_test_4+0x9a>

0000000080021640 <instret_test_5>:

bool instret_test_5() {
    80021640:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021642:	00005597          	auipc	a1,0x5
    80021646:	3e658593          	addi	a1,a1,998 # 80026a28 <__func__.19>
    8002164a:	00006517          	auipc	a0,0x6
    8002164e:	85650513          	addi	a0,a0,-1962 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_5() {
    80021652:	ec06                	sd	ra,24(sp)
    80021654:	e822                	sd	s0,16(sp)
    80021656:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021658:	0ad030ef          	jal	80024f04 <printf>
    8002165c:	4529                	li	a0,10
    8002165e:	6b0020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80021662:	4511                	li	a0,4
    80021664:	d92df0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021668:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8002166c:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    80021670:	4509                	li	a0,2
    80021672:	d84df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021676:	0330000f          	fence	rw,rw
    8002167a:	00028417          	auipc	s0,0x28
    8002167e:	99640413          	addi	s0,s0,-1642 # 80049010 <excpt>
    80021682:	4785                	li	a5,1
    80021684:	00028717          	auipc	a4,0x28
    80021688:	9c073223          	sd	zero,-1596(a4) # 80049048 <excpt+0x38>
    8002168c:	00f41023          	sh	a5,0(s0)
    80021690:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021694:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    80021698:	08200593          	li	a1,130
    8002169c:	0000d617          	auipc	a2,0xd
    800216a0:	33c60613          	addi	a2,a2,828 # 8002e9d8 <__func__.0+0x7e18>
    800216a4:	00006517          	auipc	a0,0x6
    800216a8:	81450513          	addi	a0,a0,-2028 # 80026eb8 <__func__.0+0x2f8>
    800216ac:	059030ef          	jal	80024f04 <printf>
    800216b0:	00028797          	auipc	a5,0x28
    800216b4:	9617c783          	lbu	a5,-1695(a5) # 80049011 <excpt+0x1>
    800216b8:	00005597          	auipc	a1,0x5
    800216bc:	7d858593          	addi	a1,a1,2008 # 80026e90 <__func__.0+0x2d0>
    800216c0:	cf89                	beqz	a5,800216da <instret_test_5+0x9a>
    800216c2:	6418                	ld	a4,8(s0)
    800216c4:	47d9                	li	a5,22
    800216c6:	00005597          	auipc	a1,0x5
    800216ca:	7ba58593          	addi	a1,a1,1978 # 80026e80 <__func__.0+0x2c0>
    800216ce:	00f70663          	beq	a4,a5,800216da <instret_test_5+0x9a>
    800216d2:	00005597          	auipc	a1,0x5
    800216d6:	7be58593          	addi	a1,a1,1982 # 80026e90 <__func__.0+0x2d0>
    800216da:	00005517          	auipc	a0,0x5
    800216de:	7f650513          	addi	a0,a0,2038 # 80026ed0 <__func__.0+0x310>
    800216e2:	023030ef          	jal	80024f04 <printf>
    800216e6:	00028797          	auipc	a5,0x28
    800216ea:	92b7c783          	lbu	a5,-1749(a5) # 80049011 <excpt+0x1>
    800216ee:	c789                	beqz	a5,800216f8 <instret_test_5+0xb8>
    800216f0:	6418                	ld	a4,8(s0)
    800216f2:	47d9                	li	a5,22
    800216f4:	00f70c63          	beq	a4,a5,8002170c <instret_test_5+0xcc>
    800216f8:	00005517          	auipc	a0,0x5
    800216fc:	7e050513          	addi	a0,a0,2016 # 80026ed8 <__func__.0+0x318>
    80021700:	005030ef          	jal	80024f04 <printf>
    80021704:	02900513          	li	a0,41
    80021708:	606020ef          	jal	80023d0e <putchar>
    8002170c:	4529                	li	a0,10
    8002170e:	600020ef          	jal	80023d0e <putchar>
    80021712:	00028497          	auipc	s1,0x28
    80021716:	8ff4c483          	lbu	s1,-1793(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8002171a:	00005597          	auipc	a1,0x5
    8002171e:	77658593          	addi	a1,a1,1910 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    80021722:	cc91                	beqz	s1,8002173e <instret_test_5+0xfe>
    80021724:	6418                	ld	a4,8(s0)
    80021726:	47d9                	li	a5,22
    TEST_END(); 
    80021728:	00005597          	auipc	a1,0x5
    8002172c:	75858593          	addi	a1,a1,1880 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    80021730:	00f70763          	beq	a4,a5,8002173e <instret_test_5+0xfe>
    80021734:	4481                	li	s1,0
    TEST_END(); 
    80021736:	00005597          	auipc	a1,0x5
    8002173a:	75a58593          	addi	a1,a1,1882 # 80026e90 <__func__.0+0x2d0>
    8002173e:	00005517          	auipc	a0,0x5
    80021742:	7fa50513          	addi	a0,a0,2042 # 80026f38 <__func__.0+0x378>
    80021746:	7be030ef          	jal	80024f04 <printf>
    8002174a:	4511                	li	a0,4
    8002174c:	caadf0ef          	jal	80000bf6 <goto_priv>
    80021750:	d5ddf0ef          	jal	800014ac <reset_state>
}
    80021754:	60e2                	ld	ra,24(sp)
    80021756:	6442                	ld	s0,16(sp)
    80021758:	8526                	mv	a0,s1
    8002175a:	64a2                	ld	s1,8(sp)
    8002175c:	6105                	addi	sp,sp,32
    8002175e:	8082                	ret

0000000080021760 <instret_test_6>:

bool instret_test_6() {
    80021760:	1141                	addi	sp,sp,-16

    TEST_START();    
    80021762:	00005597          	auipc	a1,0x5
    80021766:	2d658593          	addi	a1,a1,726 # 80026a38 <__func__.18>
    8002176a:	00005517          	auipc	a0,0x5
    8002176e:	73650513          	addi	a0,a0,1846 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_6() {
    80021772:	e406                	sd	ra,8(sp)
    80021774:	e022                	sd	s0,0(sp)
    TEST_START();    
    80021776:	78e030ef          	jal	80024f04 <printf>
    8002177a:	4529                	li	a0,10
    8002177c:	592020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80021780:	4511                	li	a0,4
    80021782:	c74df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021786:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8002178a:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8002178e:	4509                	li	a0,2
    80021790:	c66df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021794:	0330000f          	fence	rw,rw
    80021798:	4785                	li	a5,1
    8002179a:	00028717          	auipc	a4,0x28
    8002179e:	8a073723          	sd	zero,-1874(a4) # 80049048 <excpt+0x38>
    800217a2:	00028717          	auipc	a4,0x28
    800217a6:	86f71723          	sh	a5,-1938(a4) # 80049010 <excpt>
    800217aa:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    800217ae:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    800217b2:	08200593          	li	a1,130
    800217b6:	0000d617          	auipc	a2,0xd
    800217ba:	28260613          	addi	a2,a2,642 # 8002ea38 <__func__.0+0x7e78>
    800217be:	00005517          	auipc	a0,0x5
    800217c2:	6fa50513          	addi	a0,a0,1786 # 80026eb8 <__func__.0+0x2f8>
    800217c6:	73e030ef          	jal	80024f04 <printf>
    800217ca:	00028797          	auipc	a5,0x28
    800217ce:	8477c783          	lbu	a5,-1977(a5) # 80049011 <excpt+0x1>
    800217d2:	00005597          	auipc	a1,0x5
    800217d6:	6ae58593          	addi	a1,a1,1710 # 80026e80 <__func__.0+0x2c0>
    800217da:	c789                	beqz	a5,800217e4 <instret_test_6+0x84>
    800217dc:	00005597          	auipc	a1,0x5
    800217e0:	6b458593          	addi	a1,a1,1716 # 80026e90 <__func__.0+0x2d0>
    800217e4:	00005517          	auipc	a0,0x5
    800217e8:	6ec50513          	addi	a0,a0,1772 # 80026ed0 <__func__.0+0x310>
    800217ec:	718030ef          	jal	80024f04 <printf>
    800217f0:	00028797          	auipc	a5,0x28
    800217f4:	8217c783          	lbu	a5,-2015(a5) # 80049011 <excpt+0x1>
    800217f8:	e7a1                	bnez	a5,80021840 <instret_test_6+0xe0>
    800217fa:	4529                	li	a0,10
    800217fc:	512020ef          	jal	80023d0e <putchar>
    80021800:	00028797          	auipc	a5,0x28
    80021804:	8117c783          	lbu	a5,-2031(a5) # 80049011 <excpt+0x1>
    80021808:	e795                	bnez	a5,80021834 <instret_test_6+0xd4>
    8002180a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8002180c:	00005597          	auipc	a1,0x5
    80021810:	67458593          	addi	a1,a1,1652 # 80026e80 <__func__.0+0x2c0>
    80021814:	00005517          	auipc	a0,0x5
    80021818:	72450513          	addi	a0,a0,1828 # 80026f38 <__func__.0+0x378>
    8002181c:	6e8030ef          	jal	80024f04 <printf>
    80021820:	4511                	li	a0,4
    80021822:	bd4df0ef          	jal	80000bf6 <goto_priv>
    80021826:	c87df0ef          	jal	800014ac <reset_state>
}
    8002182a:	60a2                	ld	ra,8(sp)
    8002182c:	8522                	mv	a0,s0
    8002182e:	6402                	ld	s0,0(sp)
    80021830:	0141                	addi	sp,sp,16
    80021832:	8082                	ret
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    80021834:	4401                	li	s0,0
    TEST_END(); 
    80021836:	00005597          	auipc	a1,0x5
    8002183a:	65a58593          	addi	a1,a1,1626 # 80026e90 <__func__.0+0x2d0>
    8002183e:	bfd9                	j	80021814 <instret_test_6+0xb4>
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    80021840:	00005517          	auipc	a0,0x5
    80021844:	69850513          	addi	a0,a0,1688 # 80026ed8 <__func__.0+0x318>
    80021848:	6bc030ef          	jal	80024f04 <printf>
    8002184c:	02900513          	li	a0,41
    80021850:	4be020ef          	jal	80023d0e <putchar>
    80021854:	b75d                	j	800217fa <instret_test_6+0x9a>

0000000080021856 <instret_test_7>:

bool instret_test_7() {
    80021856:	1141                	addi	sp,sp,-16

    TEST_START();    
    80021858:	00005597          	auipc	a1,0x5
    8002185c:	1f058593          	addi	a1,a1,496 # 80026a48 <__func__.17>
    80021860:	00005517          	auipc	a0,0x5
    80021864:	64050513          	addi	a0,a0,1600 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_7() {
    80021868:	e406                	sd	ra,8(sp)
    8002186a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8002186c:	698030ef          	jal	80024f04 <printf>
    80021870:	4529                	li	a0,10
    80021872:	49c020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80021876:	4511                	li	a0,4
    80021878:	b7edf0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8002187c:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021880:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021884:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    80021888:	4501                	li	a0,0
    8002188a:	b6cdf0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002188e:	0330000f          	fence	rw,rw
    80021892:	4785                	li	a5,1
    80021894:	00027717          	auipc	a4,0x27
    80021898:	7a073a23          	sd	zero,1972(a4) # 80049048 <excpt+0x38>
    8002189c:	00027717          	auipc	a4,0x27
    800218a0:	76f71a23          	sh	a5,1908(a4) # 80049010 <excpt>
    800218a4:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    800218a8:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    800218ac:	08200593          	li	a1,130
    800218b0:	0000d617          	auipc	a2,0xd
    800218b4:	1d060613          	addi	a2,a2,464 # 8002ea80 <__func__.0+0x7ec0>
    800218b8:	00005517          	auipc	a0,0x5
    800218bc:	60050513          	addi	a0,a0,1536 # 80026eb8 <__func__.0+0x2f8>
    800218c0:	644030ef          	jal	80024f04 <printf>
    800218c4:	00027797          	auipc	a5,0x27
    800218c8:	74d7c783          	lbu	a5,1869(a5) # 80049011 <excpt+0x1>
    800218cc:	00005597          	auipc	a1,0x5
    800218d0:	5b458593          	addi	a1,a1,1460 # 80026e80 <__func__.0+0x2c0>
    800218d4:	c789                	beqz	a5,800218de <instret_test_7+0x88>
    800218d6:	00005597          	auipc	a1,0x5
    800218da:	5ba58593          	addi	a1,a1,1466 # 80026e90 <__func__.0+0x2d0>
    800218de:	00005517          	auipc	a0,0x5
    800218e2:	5f250513          	addi	a0,a0,1522 # 80026ed0 <__func__.0+0x310>
    800218e6:	61e030ef          	jal	80024f04 <printf>
    800218ea:	00027797          	auipc	a5,0x27
    800218ee:	7277c783          	lbu	a5,1831(a5) # 80049011 <excpt+0x1>
    800218f2:	e7a1                	bnez	a5,8002193a <instret_test_7+0xe4>
    800218f4:	4529                	li	a0,10
    800218f6:	418020ef          	jal	80023d0e <putchar>
    800218fa:	00027797          	auipc	a5,0x27
    800218fe:	7177c783          	lbu	a5,1815(a5) # 80049011 <excpt+0x1>
    80021902:	e795                	bnez	a5,8002192e <instret_test_7+0xd8>
    80021904:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80021906:	00005597          	auipc	a1,0x5
    8002190a:	57a58593          	addi	a1,a1,1402 # 80026e80 <__func__.0+0x2c0>
    8002190e:	00005517          	auipc	a0,0x5
    80021912:	62a50513          	addi	a0,a0,1578 # 80026f38 <__func__.0+0x378>
    80021916:	5ee030ef          	jal	80024f04 <printf>
    8002191a:	4511                	li	a0,4
    8002191c:	adadf0ef          	jal	80000bf6 <goto_priv>
    80021920:	b8ddf0ef          	jal	800014ac <reset_state>
}
    80021924:	60a2                	ld	ra,8(sp)
    80021926:	8522                	mv	a0,s0
    80021928:	6402                	ld	s0,0(sp)
    8002192a:	0141                	addi	sp,sp,16
    8002192c:	8082                	ret
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8002192e:	4401                	li	s0,0
    TEST_END(); 
    80021930:	00005597          	auipc	a1,0x5
    80021934:	56058593          	addi	a1,a1,1376 # 80026e90 <__func__.0+0x2d0>
    80021938:	bfd9                	j	8002190e <instret_test_7+0xb8>
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8002193a:	00005517          	auipc	a0,0x5
    8002193e:	59e50513          	addi	a0,a0,1438 # 80026ed8 <__func__.0+0x318>
    80021942:	5c2030ef          	jal	80024f04 <printf>
    80021946:	02900513          	li	a0,41
    8002194a:	3c4020ef          	jal	80023d0e <putchar>
    8002194e:	b75d                	j	800218f4 <instret_test_7+0x9e>

0000000080021950 <instret_test_8>:

bool instret_test_8() {
    80021950:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021952:	00005597          	auipc	a1,0x5
    80021956:	10658593          	addi	a1,a1,262 # 80026a58 <__func__.16>
    8002195a:	00005517          	auipc	a0,0x5
    8002195e:	54650513          	addi	a0,a0,1350 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_8() {
    80021962:	ec06                	sd	ra,24(sp)
    80021964:	e822                	sd	s0,16(sp)
    80021966:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021968:	59c030ef          	jal	80024f04 <printf>
    8002196c:	4529                	li	a0,10
    8002196e:	3a0020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80021972:	4511                	li	a0,4
    80021974:	a82df0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021978:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8002197c:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021980:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    80021984:	4501                	li	a0,0
    80021986:	a70df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002198a:	0330000f          	fence	rw,rw
    8002198e:	00027417          	auipc	s0,0x27
    80021992:	68240413          	addi	s0,s0,1666 # 80049010 <excpt>
    80021996:	4785                	li	a5,1
    80021998:	00027717          	auipc	a4,0x27
    8002199c:	6a073823          	sd	zero,1712(a4) # 80049048 <excpt+0x38>
    800219a0:	00f41023          	sh	a5,0(s0)
    800219a4:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    800219a8:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    800219ac:	08200593          	li	a1,130
    800219b0:	0000d617          	auipc	a2,0xd
    800219b4:	12860613          	addi	a2,a2,296 # 8002ead8 <__func__.0+0x7f18>
    800219b8:	00005517          	auipc	a0,0x5
    800219bc:	50050513          	addi	a0,a0,1280 # 80026eb8 <__func__.0+0x2f8>
    800219c0:	544030ef          	jal	80024f04 <printf>
    800219c4:	00027797          	auipc	a5,0x27
    800219c8:	64d7c783          	lbu	a5,1613(a5) # 80049011 <excpt+0x1>
    800219cc:	00005597          	auipc	a1,0x5
    800219d0:	4c458593          	addi	a1,a1,1220 # 80026e90 <__func__.0+0x2d0>
    800219d4:	cf89                	beqz	a5,800219ee <instret_test_8+0x9e>
    800219d6:	6418                	ld	a4,8(s0)
    800219d8:	47d9                	li	a5,22
    800219da:	00005597          	auipc	a1,0x5
    800219de:	4a658593          	addi	a1,a1,1190 # 80026e80 <__func__.0+0x2c0>
    800219e2:	00f70663          	beq	a4,a5,800219ee <instret_test_8+0x9e>
    800219e6:	00005597          	auipc	a1,0x5
    800219ea:	4aa58593          	addi	a1,a1,1194 # 80026e90 <__func__.0+0x2d0>
    800219ee:	00005517          	auipc	a0,0x5
    800219f2:	4e250513          	addi	a0,a0,1250 # 80026ed0 <__func__.0+0x310>
    800219f6:	50e030ef          	jal	80024f04 <printf>
    800219fa:	00027797          	auipc	a5,0x27
    800219fe:	6177c783          	lbu	a5,1559(a5) # 80049011 <excpt+0x1>
    80021a02:	c789                	beqz	a5,80021a0c <instret_test_8+0xbc>
    80021a04:	6418                	ld	a4,8(s0)
    80021a06:	47d9                	li	a5,22
    80021a08:	00f70c63          	beq	a4,a5,80021a20 <instret_test_8+0xd0>
    80021a0c:	00005517          	auipc	a0,0x5
    80021a10:	4cc50513          	addi	a0,a0,1228 # 80026ed8 <__func__.0+0x318>
    80021a14:	4f0030ef          	jal	80024f04 <printf>
    80021a18:	02900513          	li	a0,41
    80021a1c:	2f2020ef          	jal	80023d0e <putchar>
    80021a20:	4529                	li	a0,10
    80021a22:	2ec020ef          	jal	80023d0e <putchar>
    80021a26:	00027497          	auipc	s1,0x27
    80021a2a:	5eb4c483          	lbu	s1,1515(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80021a2e:	00005597          	auipc	a1,0x5
    80021a32:	46258593          	addi	a1,a1,1122 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    80021a36:	cc91                	beqz	s1,80021a52 <instret_test_8+0x102>
    80021a38:	6418                	ld	a4,8(s0)
    80021a3a:	47d9                	li	a5,22
    TEST_END(); 
    80021a3c:	00005597          	auipc	a1,0x5
    80021a40:	44458593          	addi	a1,a1,1092 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    80021a44:	00f70763          	beq	a4,a5,80021a52 <instret_test_8+0x102>
    80021a48:	4481                	li	s1,0
    TEST_END(); 
    80021a4a:	00005597          	auipc	a1,0x5
    80021a4e:	44658593          	addi	a1,a1,1094 # 80026e90 <__func__.0+0x2d0>
    80021a52:	00005517          	auipc	a0,0x5
    80021a56:	4e650513          	addi	a0,a0,1254 # 80026f38 <__func__.0+0x378>
    80021a5a:	4aa030ef          	jal	80024f04 <printf>
    80021a5e:	4511                	li	a0,4
    80021a60:	996df0ef          	jal	80000bf6 <goto_priv>
    80021a64:	a49df0ef          	jal	800014ac <reset_state>
}
    80021a68:	60e2                	ld	ra,24(sp)
    80021a6a:	6442                	ld	s0,16(sp)
    80021a6c:	8526                	mv	a0,s1
    80021a6e:	64a2                	ld	s1,8(sp)
    80021a70:	6105                	addi	sp,sp,32
    80021a72:	8082                	ret

0000000080021a74 <instret_test_9>:

bool instret_test_9() {
    80021a74:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021a76:	00005597          	auipc	a1,0x5
    80021a7a:	ff258593          	addi	a1,a1,-14 # 80026a68 <__func__.15>
    80021a7e:	00005517          	auipc	a0,0x5
    80021a82:	42250513          	addi	a0,a0,1058 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_9() {
    80021a86:	ec06                	sd	ra,24(sp)
    80021a88:	e822                	sd	s0,16(sp)
    80021a8a:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021a8c:	478030ef          	jal	80024f04 <printf>
    80021a90:	4529                	li	a0,10
    80021a92:	27c020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80021a96:	4511                	li	a0,4
    80021a98:	95edf0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021a9c:	30626073          	csrsi	mcounteren,4
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    80021aa0:	10627073          	csrci	scounteren,4

    goto_priv(PRIV_HU);
    80021aa4:	4505                	li	a0,1
    80021aa6:	950df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021aaa:	0330000f          	fence	rw,rw
    80021aae:	00027417          	auipc	s0,0x27
    80021ab2:	56240413          	addi	s0,s0,1378 # 80049010 <excpt>
    80021ab6:	4785                	li	a5,1
    80021ab8:	00027717          	auipc	a4,0x27
    80021abc:	58073823          	sd	zero,1424(a4) # 80049048 <excpt+0x38>
    80021ac0:	00f41023          	sh	a5,0(s0)
    80021ac4:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021ac8:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80021acc:	08200593          	li	a1,130
    80021ad0:	0000d617          	auipc	a2,0xd
    80021ad4:	07860613          	addi	a2,a2,120 # 8002eb48 <__func__.0+0x7f88>
    80021ad8:	00005517          	auipc	a0,0x5
    80021adc:	3e050513          	addi	a0,a0,992 # 80026eb8 <__func__.0+0x2f8>
    80021ae0:	424030ef          	jal	80024f04 <printf>
    80021ae4:	00027797          	auipc	a5,0x27
    80021ae8:	52d7c783          	lbu	a5,1325(a5) # 80049011 <excpt+0x1>
    80021aec:	00005597          	auipc	a1,0x5
    80021af0:	3a458593          	addi	a1,a1,932 # 80026e90 <__func__.0+0x2d0>
    80021af4:	cf89                	beqz	a5,80021b0e <instret_test_9+0x9a>
    80021af6:	6418                	ld	a4,8(s0)
    80021af8:	4789                	li	a5,2
    80021afa:	00005597          	auipc	a1,0x5
    80021afe:	38658593          	addi	a1,a1,902 # 80026e80 <__func__.0+0x2c0>
    80021b02:	00f70663          	beq	a4,a5,80021b0e <instret_test_9+0x9a>
    80021b06:	00005597          	auipc	a1,0x5
    80021b0a:	38a58593          	addi	a1,a1,906 # 80026e90 <__func__.0+0x2d0>
    80021b0e:	00005517          	auipc	a0,0x5
    80021b12:	3c250513          	addi	a0,a0,962 # 80026ed0 <__func__.0+0x310>
    80021b16:	3ee030ef          	jal	80024f04 <printf>
    80021b1a:	00027797          	auipc	a5,0x27
    80021b1e:	4f77c783          	lbu	a5,1271(a5) # 80049011 <excpt+0x1>
    80021b22:	c789                	beqz	a5,80021b2c <instret_test_9+0xb8>
    80021b24:	6418                	ld	a4,8(s0)
    80021b26:	4789                	li	a5,2
    80021b28:	00f70c63          	beq	a4,a5,80021b40 <instret_test_9+0xcc>
    80021b2c:	00005517          	auipc	a0,0x5
    80021b30:	3ac50513          	addi	a0,a0,940 # 80026ed8 <__func__.0+0x318>
    80021b34:	3d0030ef          	jal	80024f04 <printf>
    80021b38:	02900513          	li	a0,41
    80021b3c:	1d2020ef          	jal	80023d0e <putchar>
    80021b40:	4529                	li	a0,10
    80021b42:	1cc020ef          	jal	80023d0e <putchar>
    80021b46:	00027497          	auipc	s1,0x27
    80021b4a:	4cb4c483          	lbu	s1,1227(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021b4e:	00005597          	auipc	a1,0x5
    80021b52:	34258593          	addi	a1,a1,834 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80021b56:	cc91                	beqz	s1,80021b72 <instret_test_9+0xfe>
    80021b58:	6418                	ld	a4,8(s0)
    80021b5a:	4789                	li	a5,2
    TEST_END(); 
    80021b5c:	00005597          	auipc	a1,0x5
    80021b60:	32458593          	addi	a1,a1,804 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    80021b64:	00f70763          	beq	a4,a5,80021b72 <instret_test_9+0xfe>
    80021b68:	4481                	li	s1,0
    TEST_END(); 
    80021b6a:	00005597          	auipc	a1,0x5
    80021b6e:	32658593          	addi	a1,a1,806 # 80026e90 <__func__.0+0x2d0>
    80021b72:	00005517          	auipc	a0,0x5
    80021b76:	3c650513          	addi	a0,a0,966 # 80026f38 <__func__.0+0x378>
    80021b7a:	38a030ef          	jal	80024f04 <printf>
    80021b7e:	4511                	li	a0,4
    80021b80:	876df0ef          	jal	80000bf6 <goto_priv>
    80021b84:	929df0ef          	jal	800014ac <reset_state>
}
    80021b88:	60e2                	ld	ra,24(sp)
    80021b8a:	6442                	ld	s0,16(sp)
    80021b8c:	8526                	mv	a0,s1
    80021b8e:	64a2                	ld	s1,8(sp)
    80021b90:	6105                	addi	sp,sp,32
    80021b92:	8082                	ret

0000000080021b94 <instret_test_10>:

bool instret_test_10() {
    80021b94:	1141                	addi	sp,sp,-16

    TEST_START();    
    80021b96:	00005597          	auipc	a1,0x5
    80021b9a:	ee258593          	addi	a1,a1,-286 # 80026a78 <__func__.14>
    80021b9e:	00005517          	auipc	a0,0x5
    80021ba2:	30250513          	addi	a0,a0,770 # 80026ea0 <__func__.0+0x2e0>
bool instret_test_10() {
    80021ba6:	e406                	sd	ra,8(sp)
    80021ba8:	e022                	sd	s0,0(sp)
    TEST_START();    
    80021baa:	35a030ef          	jal	80024f04 <printf>
    80021bae:	4529                	li	a0,10
    80021bb0:	15e020ef          	jal	80023d0e <putchar>
    goto_priv(PRIV_M);
    80021bb4:	4511                	li	a0,4
    80021bb6:	840df0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80021bba:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80021bbe:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    80021bc2:	4509                	li	a0,2
    80021bc4:	832df0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021bc8:	0330000f          	fence	rw,rw
    80021bcc:	4785                	li	a5,1
    80021bce:	00027717          	auipc	a4,0x27
    80021bd2:	46073d23          	sd	zero,1146(a4) # 80049048 <excpt+0x38>
    80021bd6:	00027717          	auipc	a4,0x27
    80021bda:	42f71d23          	sh	a5,1082(a4) # 80049010 <excpt>
    80021bde:	0330000f          	fence	rw,rw
    CSRR(CSR_INSTRET);
    80021be2:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80021be6:	08200593          	li	a1,130
    80021bea:	0000d617          	auipc	a2,0xd
    80021bee:	fbe60613          	addi	a2,a2,-66 # 8002eba8 <__func__.0+0x7fe8>
    80021bf2:	00005517          	auipc	a0,0x5
    80021bf6:	2c650513          	addi	a0,a0,710 # 80026eb8 <__func__.0+0x2f8>
    80021bfa:	30a030ef          	jal	80024f04 <printf>
    80021bfe:	00027797          	auipc	a5,0x27
    80021c02:	4137c783          	lbu	a5,1043(a5) # 80049011 <excpt+0x1>
    80021c06:	00005597          	auipc	a1,0x5
    80021c0a:	27a58593          	addi	a1,a1,634 # 80026e80 <__func__.0+0x2c0>
    80021c0e:	c789                	beqz	a5,80021c18 <instret_test_10+0x84>
    80021c10:	00005597          	auipc	a1,0x5
    80021c14:	28058593          	addi	a1,a1,640 # 80026e90 <__func__.0+0x2d0>
    80021c18:	00005517          	auipc	a0,0x5
    80021c1c:	2b850513          	addi	a0,a0,696 # 80026ed0 <__func__.0+0x310>
    80021c20:	2e4030ef          	jal	80024f04 <printf>
    80021c24:	00027797          	auipc	a5,0x27
    80021c28:	3ed7c783          	lbu	a5,1005(a5) # 80049011 <excpt+0x1>
    80021c2c:	e7a1                	bnez	a5,80021c74 <instret_test_10+0xe0>
    80021c2e:	4529                	li	a0,10
    80021c30:	0de020ef          	jal	80023d0e <putchar>
    80021c34:	00027797          	auipc	a5,0x27
    80021c38:	3dd7c783          	lbu	a5,989(a5) # 80049011 <excpt+0x1>
    80021c3c:	e795                	bnez	a5,80021c68 <instret_test_10+0xd4>
    80021c3e:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80021c40:	00005597          	auipc	a1,0x5
    80021c44:	24058593          	addi	a1,a1,576 # 80026e80 <__func__.0+0x2c0>
    80021c48:	00005517          	auipc	a0,0x5
    80021c4c:	2f050513          	addi	a0,a0,752 # 80026f38 <__func__.0+0x378>
    80021c50:	2b4030ef          	jal	80024f04 <printf>
    80021c54:	4511                	li	a0,4
    80021c56:	fa1de0ef          	jal	80000bf6 <goto_priv>
    80021c5a:	853df0ef          	jal	800014ac <reset_state>
}
    80021c5e:	60a2                	ld	ra,8(sp)
    80021c60:	8522                	mv	a0,s0
    80021c62:	6402                	ld	s0,0(sp)
    80021c64:	0141                	addi	sp,sp,16
    80021c66:	8082                	ret
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80021c68:	4401                	li	s0,0
    TEST_END(); 
    80021c6a:	00005597          	auipc	a1,0x5
    80021c6e:	22658593          	addi	a1,a1,550 # 80026e90 <__func__.0+0x2d0>
    80021c72:	bfd9                	j	80021c48 <instret_test_10+0xb4>
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    80021c74:	00005517          	auipc	a0,0x5
    80021c78:	26450513          	addi	a0,a0,612 # 80026ed8 <__func__.0+0x318>
    80021c7c:	288030ef          	jal	80024f04 <printf>
    80021c80:	02900513          	li	a0,41
    80021c84:	08a020ef          	jal	80023d0e <putchar>
    80021c88:	b75d                	j	80021c2e <instret_test_10+0x9a>

0000000080021c8a <timecmp_test_1>:


bool timecmp_test_1() {
    80021c8a:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021c8c:	00005597          	auipc	a1,0x5
    80021c90:	dfc58593          	addi	a1,a1,-516 # 80026a88 <__func__.13>
    80021c94:	00005517          	auipc	a0,0x5
    80021c98:	20c50513          	addi	a0,a0,524 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_1() {
    80021c9c:	ec06                	sd	ra,24(sp)
    80021c9e:	e822                	sd	s0,16(sp)
    80021ca0:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021ca2:	262030ef          	jal	80024f04 <printf>
    80021ca6:	4529                	li	a0,10
    80021ca8:	066020ef          	jal	80023d0e <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80021cac:	57fd                	li	a5,-1
    80021cae:	17fe                	slli	a5,a5,0x3f
    80021cb0:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021cb4:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80021cb8:	450d                	li	a0,3
    80021cba:	f3dde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021cbe:	0330000f          	fence	rw,rw
    80021cc2:	00027417          	auipc	s0,0x27
    80021cc6:	34e40413          	addi	s0,s0,846 # 80049010 <excpt>
    80021cca:	4785                	li	a5,1
    80021ccc:	00027717          	auipc	a4,0x27
    80021cd0:	36073e23          	sd	zero,892(a4) # 80049048 <excpt+0x38>
    80021cd4:	00f41023          	sh	a5,0(s0)
    80021cd8:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80021cdc:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021ce0:	08200593          	li	a1,130
    80021ce4:	0000d617          	auipc	a2,0xd
    80021ce8:	f1460613          	addi	a2,a2,-236 # 8002ebf8 <__func__.0+0x8038>
    80021cec:	00005517          	auipc	a0,0x5
    80021cf0:	1cc50513          	addi	a0,a0,460 # 80026eb8 <__func__.0+0x2f8>
    80021cf4:	210030ef          	jal	80024f04 <printf>
    80021cf8:	00027797          	auipc	a5,0x27
    80021cfc:	3197c783          	lbu	a5,793(a5) # 80049011 <excpt+0x1>
    80021d00:	00005597          	auipc	a1,0x5
    80021d04:	19058593          	addi	a1,a1,400 # 80026e90 <__func__.0+0x2d0>
    80021d08:	cf89                	beqz	a5,80021d22 <timecmp_test_1+0x98>
    80021d0a:	6418                	ld	a4,8(s0)
    80021d0c:	4789                	li	a5,2
    80021d0e:	00005597          	auipc	a1,0x5
    80021d12:	17258593          	addi	a1,a1,370 # 80026e80 <__func__.0+0x2c0>
    80021d16:	00f70663          	beq	a4,a5,80021d22 <timecmp_test_1+0x98>
    80021d1a:	00005597          	auipc	a1,0x5
    80021d1e:	17658593          	addi	a1,a1,374 # 80026e90 <__func__.0+0x2d0>
    80021d22:	00005517          	auipc	a0,0x5
    80021d26:	1ae50513          	addi	a0,a0,430 # 80026ed0 <__func__.0+0x310>
    80021d2a:	1da030ef          	jal	80024f04 <printf>
    80021d2e:	00027797          	auipc	a5,0x27
    80021d32:	2e37c783          	lbu	a5,739(a5) # 80049011 <excpt+0x1>
    80021d36:	c789                	beqz	a5,80021d40 <timecmp_test_1+0xb6>
    80021d38:	6418                	ld	a4,8(s0)
    80021d3a:	4789                	li	a5,2
    80021d3c:	00f70c63          	beq	a4,a5,80021d54 <timecmp_test_1+0xca>
    80021d40:	00005517          	auipc	a0,0x5
    80021d44:	19850513          	addi	a0,a0,408 # 80026ed8 <__func__.0+0x318>
    80021d48:	1bc030ef          	jal	80024f04 <printf>
    80021d4c:	02900513          	li	a0,41
    80021d50:	7bf010ef          	jal	80023d0e <putchar>
    80021d54:	4529                	li	a0,10
    80021d56:	7b9010ef          	jal	80023d0e <putchar>
    80021d5a:	00027497          	auipc	s1,0x27
    80021d5e:	2b74c483          	lbu	s1,695(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021d62:	00005597          	auipc	a1,0x5
    80021d66:	12e58593          	addi	a1,a1,302 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021d6a:	cc91                	beqz	s1,80021d86 <timecmp_test_1+0xfc>
    80021d6c:	6418                	ld	a4,8(s0)
    80021d6e:	4789                	li	a5,2
    TEST_END(); 
    80021d70:	00005597          	auipc	a1,0x5
    80021d74:	11058593          	addi	a1,a1,272 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80021d78:	00f70763          	beq	a4,a5,80021d86 <timecmp_test_1+0xfc>
    80021d7c:	4481                	li	s1,0
    TEST_END(); 
    80021d7e:	00005597          	auipc	a1,0x5
    80021d82:	11258593          	addi	a1,a1,274 # 80026e90 <__func__.0+0x2d0>
    80021d86:	00005517          	auipc	a0,0x5
    80021d8a:	1b250513          	addi	a0,a0,434 # 80026f38 <__func__.0+0x378>
    80021d8e:	176030ef          	jal	80024f04 <printf>
    80021d92:	4511                	li	a0,4
    80021d94:	e63de0ef          	jal	80000bf6 <goto_priv>
    80021d98:	f14df0ef          	jal	800014ac <reset_state>
}
    80021d9c:	60e2                	ld	ra,24(sp)
    80021d9e:	6442                	ld	s0,16(sp)
    80021da0:	8526                	mv	a0,s1
    80021da2:	64a2                	ld	s1,8(sp)
    80021da4:	6105                	addi	sp,sp,32
    80021da6:	8082                	ret

0000000080021da8 <timecmp_test_2>:

bool timecmp_test_2() {
    80021da8:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021daa:	00005597          	auipc	a1,0x5
    80021dae:	cee58593          	addi	a1,a1,-786 # 80026a98 <__func__.12>
    80021db2:	00005517          	auipc	a0,0x5
    80021db6:	0ee50513          	addi	a0,a0,238 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_2() {
    80021dba:	ec06                	sd	ra,24(sp)
    80021dbc:	e822                	sd	s0,16(sp)
    80021dbe:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021dc0:	144030ef          	jal	80024f04 <printf>
    80021dc4:	4529                	li	a0,10
    80021dc6:	749010ef          	jal	80023d0e <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80021dca:	57fd                	li	a5,-1
    80021dcc:	17fe                	slli	a5,a5,0x3f
    80021dce:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HS);
    80021dd2:	450d                	li	a0,3
    80021dd4:	e23de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021dd8:	0330000f          	fence	rw,rw
    80021ddc:	00027417          	auipc	s0,0x27
    80021de0:	23440413          	addi	s0,s0,564 # 80049010 <excpt>
    80021de4:	4785                	li	a5,1
    80021de6:	00027717          	auipc	a4,0x27
    80021dea:	26073123          	sd	zero,610(a4) # 80049048 <excpt+0x38>
    80021dee:	00f41023          	sh	a5,0(s0)
    80021df2:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80021df6:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80021dfa:	08200593          	li	a1,130
    80021dfe:	0000d617          	auipc	a2,0xd
    80021e02:	e6260613          	addi	a2,a2,-414 # 8002ec60 <__func__.0+0x80a0>
    80021e06:	00005517          	auipc	a0,0x5
    80021e0a:	0b250513          	addi	a0,a0,178 # 80026eb8 <__func__.0+0x2f8>
    80021e0e:	0f6030ef          	jal	80024f04 <printf>
    80021e12:	00027797          	auipc	a5,0x27
    80021e16:	1ff7c783          	lbu	a5,511(a5) # 80049011 <excpt+0x1>
    80021e1a:	00005597          	auipc	a1,0x5
    80021e1e:	07658593          	addi	a1,a1,118 # 80026e90 <__func__.0+0x2d0>
    80021e22:	cf89                	beqz	a5,80021e3c <timecmp_test_2+0x94>
    80021e24:	6418                	ld	a4,8(s0)
    80021e26:	4789                	li	a5,2
    80021e28:	00005597          	auipc	a1,0x5
    80021e2c:	05858593          	addi	a1,a1,88 # 80026e80 <__func__.0+0x2c0>
    80021e30:	00f70663          	beq	a4,a5,80021e3c <timecmp_test_2+0x94>
    80021e34:	00005597          	auipc	a1,0x5
    80021e38:	05c58593          	addi	a1,a1,92 # 80026e90 <__func__.0+0x2d0>
    80021e3c:	00005517          	auipc	a0,0x5
    80021e40:	09450513          	addi	a0,a0,148 # 80026ed0 <__func__.0+0x310>
    80021e44:	0c0030ef          	jal	80024f04 <printf>
    80021e48:	00027797          	auipc	a5,0x27
    80021e4c:	1c97c783          	lbu	a5,457(a5) # 80049011 <excpt+0x1>
    80021e50:	c789                	beqz	a5,80021e5a <timecmp_test_2+0xb2>
    80021e52:	6418                	ld	a4,8(s0)
    80021e54:	4789                	li	a5,2
    80021e56:	00f70c63          	beq	a4,a5,80021e6e <timecmp_test_2+0xc6>
    80021e5a:	00005517          	auipc	a0,0x5
    80021e5e:	07e50513          	addi	a0,a0,126 # 80026ed8 <__func__.0+0x318>
    80021e62:	0a2030ef          	jal	80024f04 <printf>
    80021e66:	02900513          	li	a0,41
    80021e6a:	6a5010ef          	jal	80023d0e <putchar>
    80021e6e:	4529                	li	a0,10
    80021e70:	69f010ef          	jal	80023d0e <putchar>
    80021e74:	00027497          	auipc	s1,0x27
    80021e78:	19d4c483          	lbu	s1,413(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021e7c:	00005597          	auipc	a1,0x5
    80021e80:	01458593          	addi	a1,a1,20 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80021e84:	cc91                	beqz	s1,80021ea0 <timecmp_test_2+0xf8>
    80021e86:	6418                	ld	a4,8(s0)
    80021e88:	4789                	li	a5,2
    TEST_END(); 
    80021e8a:	00005597          	auipc	a1,0x5
    80021e8e:	ff658593          	addi	a1,a1,-10 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80021e92:	00f70763          	beq	a4,a5,80021ea0 <timecmp_test_2+0xf8>
    80021e96:	4481                	li	s1,0
    TEST_END(); 
    80021e98:	00005597          	auipc	a1,0x5
    80021e9c:	ff858593          	addi	a1,a1,-8 # 80026e90 <__func__.0+0x2d0>
    80021ea0:	00005517          	auipc	a0,0x5
    80021ea4:	09850513          	addi	a0,a0,152 # 80026f38 <__func__.0+0x378>
    80021ea8:	05c030ef          	jal	80024f04 <printf>
    80021eac:	4511                	li	a0,4
    80021eae:	d49de0ef          	jal	80000bf6 <goto_priv>
    80021eb2:	dfadf0ef          	jal	800014ac <reset_state>
}
    80021eb6:	60e2                	ld	ra,24(sp)
    80021eb8:	6442                	ld	s0,16(sp)
    80021eba:	8526                	mv	a0,s1
    80021ebc:	64a2                	ld	s1,8(sp)
    80021ebe:	6105                	addi	sp,sp,32
    80021ec0:	8082                	ret

0000000080021ec2 <timecmp_test_3>:

bool timecmp_test_3() {
    80021ec2:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021ec4:	00005597          	auipc	a1,0x5
    80021ec8:	be458593          	addi	a1,a1,-1052 # 80026aa8 <__func__.11>
    80021ecc:	00005517          	auipc	a0,0x5
    80021ed0:	fd450513          	addi	a0,a0,-44 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_3() {
    80021ed4:	ec06                	sd	ra,24(sp)
    80021ed6:	e822                	sd	s0,16(sp)
    80021ed8:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021eda:	02a030ef          	jal	80024f04 <printf>
    80021ede:	4529                	li	a0,10
    80021ee0:	62f010ef          	jal	80023d0e <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80021ee4:	57fd                	li	a5,-1
    80021ee6:	17fe                	slli	a5,a5,0x3f
    80021ee8:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VS); 
    80021eec:	4509                	li	a0,2
    80021eee:	d09de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80021ef2:	0330000f          	fence	rw,rw
    80021ef6:	00027417          	auipc	s0,0x27
    80021efa:	11a40413          	addi	s0,s0,282 # 80049010 <excpt>
    80021efe:	4785                	li	a5,1
    80021f00:	00027717          	auipc	a4,0x27
    80021f04:	14073423          	sd	zero,328(a4) # 80049048 <excpt+0x38>
    80021f08:	00f41023          	sh	a5,0(s0)
    80021f0c:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80021f10:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80021f14:	08200593          	li	a1,130
    80021f18:	0000d617          	auipc	a2,0xd
    80021f1c:	da060613          	addi	a2,a2,-608 # 8002ecb8 <__func__.0+0x80f8>
    80021f20:	00005517          	auipc	a0,0x5
    80021f24:	f9850513          	addi	a0,a0,-104 # 80026eb8 <__func__.0+0x2f8>
    80021f28:	7dd020ef          	jal	80024f04 <printf>
    80021f2c:	00027797          	auipc	a5,0x27
    80021f30:	0e57c783          	lbu	a5,229(a5) # 80049011 <excpt+0x1>
    80021f34:	00005597          	auipc	a1,0x5
    80021f38:	f5c58593          	addi	a1,a1,-164 # 80026e90 <__func__.0+0x2d0>
    80021f3c:	cf89                	beqz	a5,80021f56 <timecmp_test_3+0x94>
    80021f3e:	6418                	ld	a4,8(s0)
    80021f40:	4789                	li	a5,2
    80021f42:	00005597          	auipc	a1,0x5
    80021f46:	f3e58593          	addi	a1,a1,-194 # 80026e80 <__func__.0+0x2c0>
    80021f4a:	00f70663          	beq	a4,a5,80021f56 <timecmp_test_3+0x94>
    80021f4e:	00005597          	auipc	a1,0x5
    80021f52:	f4258593          	addi	a1,a1,-190 # 80026e90 <__func__.0+0x2d0>
    80021f56:	00005517          	auipc	a0,0x5
    80021f5a:	f7a50513          	addi	a0,a0,-134 # 80026ed0 <__func__.0+0x310>
    80021f5e:	7a7020ef          	jal	80024f04 <printf>
    80021f62:	00027797          	auipc	a5,0x27
    80021f66:	0af7c783          	lbu	a5,175(a5) # 80049011 <excpt+0x1>
    80021f6a:	c789                	beqz	a5,80021f74 <timecmp_test_3+0xb2>
    80021f6c:	6418                	ld	a4,8(s0)
    80021f6e:	4789                	li	a5,2
    80021f70:	00f70c63          	beq	a4,a5,80021f88 <timecmp_test_3+0xc6>
    80021f74:	00005517          	auipc	a0,0x5
    80021f78:	f6450513          	addi	a0,a0,-156 # 80026ed8 <__func__.0+0x318>
    80021f7c:	789020ef          	jal	80024f04 <printf>
    80021f80:	02900513          	li	a0,41
    80021f84:	58b010ef          	jal	80023d0e <putchar>
    80021f88:	4529                	li	a0,10
    80021f8a:	585010ef          	jal	80023d0e <putchar>
    80021f8e:	00027497          	auipc	s1,0x27
    80021f92:	0834c483          	lbu	s1,131(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021f96:	00005597          	auipc	a1,0x5
    80021f9a:	efa58593          	addi	a1,a1,-262 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80021f9e:	cc91                	beqz	s1,80021fba <timecmp_test_3+0xf8>
    80021fa0:	6418                	ld	a4,8(s0)
    80021fa2:	4789                	li	a5,2
    TEST_END(); 
    80021fa4:	00005597          	auipc	a1,0x5
    80021fa8:	edc58593          	addi	a1,a1,-292 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80021fac:	00f70763          	beq	a4,a5,80021fba <timecmp_test_3+0xf8>
    80021fb0:	4481                	li	s1,0
    TEST_END(); 
    80021fb2:	00005597          	auipc	a1,0x5
    80021fb6:	ede58593          	addi	a1,a1,-290 # 80026e90 <__func__.0+0x2d0>
    80021fba:	00005517          	auipc	a0,0x5
    80021fbe:	f7e50513          	addi	a0,a0,-130 # 80026f38 <__func__.0+0x378>
    80021fc2:	743020ef          	jal	80024f04 <printf>
    80021fc6:	4511                	li	a0,4
    80021fc8:	c2fde0ef          	jal	80000bf6 <goto_priv>
    80021fcc:	ce0df0ef          	jal	800014ac <reset_state>
}
    80021fd0:	60e2                	ld	ra,24(sp)
    80021fd2:	6442                	ld	s0,16(sp)
    80021fd4:	8526                	mv	a0,s1
    80021fd6:	64a2                	ld	s1,8(sp)
    80021fd8:	6105                	addi	sp,sp,32
    80021fda:	8082                	ret

0000000080021fdc <timecmp_test_4>:

bool timecmp_test_4() {
    80021fdc:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021fde:	00005597          	auipc	a1,0x5
    80021fe2:	ada58593          	addi	a1,a1,-1318 # 80026ab8 <__func__.10>
    80021fe6:	00005517          	auipc	a0,0x5
    80021fea:	eba50513          	addi	a0,a0,-326 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_4() {
    80021fee:	ec06                	sd	ra,24(sp)
    80021ff0:	e822                	sd	s0,16(sp)
    80021ff2:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021ff4:	711020ef          	jal	80024f04 <printf>
    80021ff8:	4529                	li	a0,10
    80021ffa:	515010ef          	jal	80023d0e <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80021ffe:	57fd                	li	a5,-1
    80022000:	17fe                	slli	a5,a5,0x3f
    80022002:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HU);
    80022006:	4505                	li	a0,1
    80022008:	befde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002200c:	0330000f          	fence	rw,rw
    80022010:	00027417          	auipc	s0,0x27
    80022014:	00040413          	mv	s0,s0
    80022018:	4785                	li	a5,1
    8002201a:	00027717          	auipc	a4,0x27
    8002201e:	02073723          	sd	zero,46(a4) # 80049048 <excpt+0x38>
    80022022:	00f41023          	sh	a5,0(s0) # 80049010 <excpt>
    80022026:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    8002202a:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002202e:	08200593          	li	a1,130
    80022032:	0000d617          	auipc	a2,0xd
    80022036:	cde60613          	addi	a2,a2,-802 # 8002ed10 <__func__.0+0x8150>
    8002203a:	00005517          	auipc	a0,0x5
    8002203e:	e7e50513          	addi	a0,a0,-386 # 80026eb8 <__func__.0+0x2f8>
    80022042:	6c3020ef          	jal	80024f04 <printf>
    80022046:	00027797          	auipc	a5,0x27
    8002204a:	fcb7c783          	lbu	a5,-53(a5) # 80049011 <excpt+0x1>
    8002204e:	00005597          	auipc	a1,0x5
    80022052:	e4258593          	addi	a1,a1,-446 # 80026e90 <__func__.0+0x2d0>
    80022056:	cf89                	beqz	a5,80022070 <timecmp_test_4+0x94>
    80022058:	6418                	ld	a4,8(s0)
    8002205a:	4789                	li	a5,2
    8002205c:	00005597          	auipc	a1,0x5
    80022060:	e2458593          	addi	a1,a1,-476 # 80026e80 <__func__.0+0x2c0>
    80022064:	00f70663          	beq	a4,a5,80022070 <timecmp_test_4+0x94>
    80022068:	00005597          	auipc	a1,0x5
    8002206c:	e2858593          	addi	a1,a1,-472 # 80026e90 <__func__.0+0x2d0>
    80022070:	00005517          	auipc	a0,0x5
    80022074:	e6050513          	addi	a0,a0,-416 # 80026ed0 <__func__.0+0x310>
    80022078:	68d020ef          	jal	80024f04 <printf>
    8002207c:	00027797          	auipc	a5,0x27
    80022080:	f957c783          	lbu	a5,-107(a5) # 80049011 <excpt+0x1>
    80022084:	c789                	beqz	a5,8002208e <timecmp_test_4+0xb2>
    80022086:	6418                	ld	a4,8(s0)
    80022088:	4789                	li	a5,2
    8002208a:	00f70c63          	beq	a4,a5,800220a2 <timecmp_test_4+0xc6>
    8002208e:	00005517          	auipc	a0,0x5
    80022092:	e4a50513          	addi	a0,a0,-438 # 80026ed8 <__func__.0+0x318>
    80022096:	66f020ef          	jal	80024f04 <printf>
    8002209a:	02900513          	li	a0,41
    8002209e:	471010ef          	jal	80023d0e <putchar>
    800220a2:	4529                	li	a0,10
    800220a4:	46b010ef          	jal	80023d0e <putchar>
    800220a8:	00027497          	auipc	s1,0x27
    800220ac:	f694c483          	lbu	s1,-151(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800220b0:	00005597          	auipc	a1,0x5
    800220b4:	de058593          	addi	a1,a1,-544 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800220b8:	cc91                	beqz	s1,800220d4 <timecmp_test_4+0xf8>
    800220ba:	6418                	ld	a4,8(s0)
    800220bc:	4789                	li	a5,2
    TEST_END(); 
    800220be:	00005597          	auipc	a1,0x5
    800220c2:	dc258593          	addi	a1,a1,-574 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800220c6:	00f70763          	beq	a4,a5,800220d4 <timecmp_test_4+0xf8>
    800220ca:	4481                	li	s1,0
    TEST_END(); 
    800220cc:	00005597          	auipc	a1,0x5
    800220d0:	dc458593          	addi	a1,a1,-572 # 80026e90 <__func__.0+0x2d0>
    800220d4:	00005517          	auipc	a0,0x5
    800220d8:	e6450513          	addi	a0,a0,-412 # 80026f38 <__func__.0+0x378>
    800220dc:	629020ef          	jal	80024f04 <printf>
    800220e0:	4511                	li	a0,4
    800220e2:	b15de0ef          	jal	80000bf6 <goto_priv>
    800220e6:	bc6df0ef          	jal	800014ac <reset_state>
}
    800220ea:	60e2                	ld	ra,24(sp)
    800220ec:	6442                	ld	s0,16(sp)
    800220ee:	8526                	mv	a0,s1
    800220f0:	64a2                	ld	s1,8(sp)
    800220f2:	6105                	addi	sp,sp,32
    800220f4:	8082                	ret

00000000800220f6 <timecmp_test_5>:

bool timecmp_test_5() {
    800220f6:	1101                	addi	sp,sp,-32

    TEST_START();    
    800220f8:	00005597          	auipc	a1,0x5
    800220fc:	9d058593          	addi	a1,a1,-1584 # 80026ac8 <__func__.9>
    80022100:	00005517          	auipc	a0,0x5
    80022104:	da050513          	addi	a0,a0,-608 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_5() {
    80022108:	ec06                	sd	ra,24(sp)
    8002210a:	e822                	sd	s0,16(sp)
    8002210c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002210e:	5f7020ef          	jal	80024f04 <printf>
    80022112:	4529                	li	a0,10
    80022114:	3fb010ef          	jal	80023d0e <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80022118:	57fd                	li	a5,-1
    8002211a:	17fe                	slli	a5,a5,0x3f
    8002211c:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VU);
    80022120:	4501                	li	a0,0
    80022122:	ad5de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022126:	0330000f          	fence	rw,rw
    8002212a:	00027417          	auipc	s0,0x27
    8002212e:	ee640413          	addi	s0,s0,-282 # 80049010 <excpt>
    80022132:	4785                	li	a5,1
    80022134:	00027717          	auipc	a4,0x27
    80022138:	f0073a23          	sd	zero,-236(a4) # 80049048 <excpt+0x38>
    8002213c:	00f41023          	sh	a5,0(s0)
    80022140:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    80022144:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80022148:	08200593          	li	a1,130
    8002214c:	0000d617          	auipc	a2,0xd
    80022150:	c1c60613          	addi	a2,a2,-996 # 8002ed68 <__func__.0+0x81a8>
    80022154:	00005517          	auipc	a0,0x5
    80022158:	d6450513          	addi	a0,a0,-668 # 80026eb8 <__func__.0+0x2f8>
    8002215c:	5a9020ef          	jal	80024f04 <printf>
    80022160:	00027797          	auipc	a5,0x27
    80022164:	eb17c783          	lbu	a5,-335(a5) # 80049011 <excpt+0x1>
    80022168:	00005597          	auipc	a1,0x5
    8002216c:	d2858593          	addi	a1,a1,-728 # 80026e90 <__func__.0+0x2d0>
    80022170:	cf89                	beqz	a5,8002218a <timecmp_test_5+0x94>
    80022172:	6418                	ld	a4,8(s0)
    80022174:	4789                	li	a5,2
    80022176:	00005597          	auipc	a1,0x5
    8002217a:	d0a58593          	addi	a1,a1,-758 # 80026e80 <__func__.0+0x2c0>
    8002217e:	00f70663          	beq	a4,a5,8002218a <timecmp_test_5+0x94>
    80022182:	00005597          	auipc	a1,0x5
    80022186:	d0e58593          	addi	a1,a1,-754 # 80026e90 <__func__.0+0x2d0>
    8002218a:	00005517          	auipc	a0,0x5
    8002218e:	d4650513          	addi	a0,a0,-698 # 80026ed0 <__func__.0+0x310>
    80022192:	573020ef          	jal	80024f04 <printf>
    80022196:	00027797          	auipc	a5,0x27
    8002219a:	e7b7c783          	lbu	a5,-389(a5) # 80049011 <excpt+0x1>
    8002219e:	c789                	beqz	a5,800221a8 <timecmp_test_5+0xb2>
    800221a0:	6418                	ld	a4,8(s0)
    800221a2:	4789                	li	a5,2
    800221a4:	00f70c63          	beq	a4,a5,800221bc <timecmp_test_5+0xc6>
    800221a8:	00005517          	auipc	a0,0x5
    800221ac:	d3050513          	addi	a0,a0,-720 # 80026ed8 <__func__.0+0x318>
    800221b0:	555020ef          	jal	80024f04 <printf>
    800221b4:	02900513          	li	a0,41
    800221b8:	357010ef          	jal	80023d0e <putchar>
    800221bc:	4529                	li	a0,10
    800221be:	351010ef          	jal	80023d0e <putchar>
    800221c2:	00027497          	auipc	s1,0x27
    800221c6:	e4f4c483          	lbu	s1,-433(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800221ca:	00005597          	auipc	a1,0x5
    800221ce:	cc658593          	addi	a1,a1,-826 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800221d2:	cc91                	beqz	s1,800221ee <timecmp_test_5+0xf8>
    800221d4:	6418                	ld	a4,8(s0)
    800221d6:	4789                	li	a5,2
    TEST_END(); 
    800221d8:	00005597          	auipc	a1,0x5
    800221dc:	ca858593          	addi	a1,a1,-856 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800221e0:	00f70763          	beq	a4,a5,800221ee <timecmp_test_5+0xf8>
    800221e4:	4481                	li	s1,0
    TEST_END(); 
    800221e6:	00005597          	auipc	a1,0x5
    800221ea:	caa58593          	addi	a1,a1,-854 # 80026e90 <__func__.0+0x2d0>
    800221ee:	00005517          	auipc	a0,0x5
    800221f2:	d4a50513          	addi	a0,a0,-694 # 80026f38 <__func__.0+0x378>
    800221f6:	50f020ef          	jal	80024f04 <printf>
    800221fa:	4511                	li	a0,4
    800221fc:	9fbde0ef          	jal	80000bf6 <goto_priv>
    80022200:	aacdf0ef          	jal	800014ac <reset_state>
}
    80022204:	60e2                	ld	ra,24(sp)
    80022206:	6442                	ld	s0,16(sp)
    80022208:	8526                	mv	a0,s1
    8002220a:	64a2                	ld	s1,8(sp)
    8002220c:	6105                	addi	sp,sp,32
    8002220e:	8082                	ret

0000000080022210 <timecmp_test_6>:

bool timecmp_test_6() {
    80022210:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022212:	00005597          	auipc	a1,0x5
    80022216:	8c658593          	addi	a1,a1,-1850 # 80026ad8 <__func__.8>
    8002221a:	00005517          	auipc	a0,0x5
    8002221e:	c8650513          	addi	a0,a0,-890 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_6() {
    80022222:	ec06                	sd	ra,24(sp)
    80022224:	e822                	sd	s0,16(sp)
    80022226:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022228:	4dd020ef          	jal	80024f04 <printf>
    8002222c:	4529                	li	a0,10
    8002222e:	2e1010ef          	jal	80023d0e <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022232:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80022236:	450d                	li	a0,3
    80022238:	9bfde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002223c:	0330000f          	fence	rw,rw
    80022240:	00027417          	auipc	s0,0x27
    80022244:	dd040413          	addi	s0,s0,-560 # 80049010 <excpt>
    80022248:	4785                	li	a5,1
    8002224a:	00027717          	auipc	a4,0x27
    8002224e:	de073f23          	sd	zero,-514(a4) # 80049048 <excpt+0x38>
    80022252:	00f41023          	sh	a5,0(s0)
    80022256:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    8002225a:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002225e:	08200593          	li	a1,130
    80022262:	0000d617          	auipc	a2,0xd
    80022266:	b5e60613          	addi	a2,a2,-1186 # 8002edc0 <__func__.0+0x8200>
    8002226a:	00005517          	auipc	a0,0x5
    8002226e:	c4e50513          	addi	a0,a0,-946 # 80026eb8 <__func__.0+0x2f8>
    80022272:	493020ef          	jal	80024f04 <printf>
    80022276:	00027797          	auipc	a5,0x27
    8002227a:	d9b7c783          	lbu	a5,-613(a5) # 80049011 <excpt+0x1>
    8002227e:	00005597          	auipc	a1,0x5
    80022282:	c1258593          	addi	a1,a1,-1006 # 80026e90 <__func__.0+0x2d0>
    80022286:	cf89                	beqz	a5,800222a0 <timecmp_test_6+0x90>
    80022288:	6418                	ld	a4,8(s0)
    8002228a:	4789                	li	a5,2
    8002228c:	00005597          	auipc	a1,0x5
    80022290:	bf458593          	addi	a1,a1,-1036 # 80026e80 <__func__.0+0x2c0>
    80022294:	00f70663          	beq	a4,a5,800222a0 <timecmp_test_6+0x90>
    80022298:	00005597          	auipc	a1,0x5
    8002229c:	bf858593          	addi	a1,a1,-1032 # 80026e90 <__func__.0+0x2d0>
    800222a0:	00005517          	auipc	a0,0x5
    800222a4:	c3050513          	addi	a0,a0,-976 # 80026ed0 <__func__.0+0x310>
    800222a8:	45d020ef          	jal	80024f04 <printf>
    800222ac:	00027797          	auipc	a5,0x27
    800222b0:	d657c783          	lbu	a5,-667(a5) # 80049011 <excpt+0x1>
    800222b4:	c789                	beqz	a5,800222be <timecmp_test_6+0xae>
    800222b6:	6418                	ld	a4,8(s0)
    800222b8:	4789                	li	a5,2
    800222ba:	00f70c63          	beq	a4,a5,800222d2 <timecmp_test_6+0xc2>
    800222be:	00005517          	auipc	a0,0x5
    800222c2:	c1a50513          	addi	a0,a0,-998 # 80026ed8 <__func__.0+0x318>
    800222c6:	43f020ef          	jal	80024f04 <printf>
    800222ca:	02900513          	li	a0,41
    800222ce:	241010ef          	jal	80023d0e <putchar>
    800222d2:	4529                	li	a0,10
    800222d4:	23b010ef          	jal	80023d0e <putchar>
    800222d8:	00027497          	auipc	s1,0x27
    800222dc:	d394c483          	lbu	s1,-711(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800222e0:	00005597          	auipc	a1,0x5
    800222e4:	bb058593          	addi	a1,a1,-1104 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800222e8:	cc91                	beqz	s1,80022304 <timecmp_test_6+0xf4>
    800222ea:	6418                	ld	a4,8(s0)
    800222ec:	4789                	li	a5,2
    TEST_END(); 
    800222ee:	00005597          	auipc	a1,0x5
    800222f2:	b9258593          	addi	a1,a1,-1134 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800222f6:	00f70763          	beq	a4,a5,80022304 <timecmp_test_6+0xf4>
    800222fa:	4481                	li	s1,0
    TEST_END(); 
    800222fc:	00005597          	auipc	a1,0x5
    80022300:	b9458593          	addi	a1,a1,-1132 # 80026e90 <__func__.0+0x2d0>
    80022304:	00005517          	auipc	a0,0x5
    80022308:	c3450513          	addi	a0,a0,-972 # 80026f38 <__func__.0+0x378>
    8002230c:	3f9020ef          	jal	80024f04 <printf>
    80022310:	4511                	li	a0,4
    80022312:	8e5de0ef          	jal	80000bf6 <goto_priv>
    80022316:	996df0ef          	jal	800014ac <reset_state>
}
    8002231a:	60e2                	ld	ra,24(sp)
    8002231c:	6442                	ld	s0,16(sp)
    8002231e:	8526                	mv	a0,s1
    80022320:	64a2                	ld	s1,8(sp)
    80022322:	6105                	addi	sp,sp,32
    80022324:	8082                	ret

0000000080022326 <timecmp_test_7>:

bool timecmp_test_7() {
    80022326:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022328:	00004597          	auipc	a1,0x4
    8002232c:	7c058593          	addi	a1,a1,1984 # 80026ae8 <__func__.7>
    80022330:	00005517          	auipc	a0,0x5
    80022334:	b7050513          	addi	a0,a0,-1168 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_7() {
    80022338:	ec06                	sd	ra,24(sp)
    8002233a:	e822                	sd	s0,16(sp)
    8002233c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002233e:	3c7020ef          	jal	80024f04 <printf>
    80022342:	4529                	li	a0,10
    80022344:	1cb010ef          	jal	80023d0e <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022348:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8002234c:	4509                	li	a0,2
    8002234e:	8a9de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022352:	0330000f          	fence	rw,rw
    80022356:	00027417          	auipc	s0,0x27
    8002235a:	cba40413          	addi	s0,s0,-838 # 80049010 <excpt>
    8002235e:	4785                	li	a5,1
    80022360:	00027717          	auipc	a4,0x27
    80022364:	ce073423          	sd	zero,-792(a4) # 80049048 <excpt+0x38>
    80022368:	00f41023          	sh	a5,0(s0)
    8002236c:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    80022370:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80022374:	08200593          	li	a1,130
    80022378:	0000d617          	auipc	a2,0xd
    8002237c:	aa060613          	addi	a2,a2,-1376 # 8002ee18 <__func__.0+0x8258>
    80022380:	00005517          	auipc	a0,0x5
    80022384:	b3850513          	addi	a0,a0,-1224 # 80026eb8 <__func__.0+0x2f8>
    80022388:	37d020ef          	jal	80024f04 <printf>
    8002238c:	00027797          	auipc	a5,0x27
    80022390:	c857c783          	lbu	a5,-891(a5) # 80049011 <excpt+0x1>
    80022394:	00005597          	auipc	a1,0x5
    80022398:	afc58593          	addi	a1,a1,-1284 # 80026e90 <__func__.0+0x2d0>
    8002239c:	cf89                	beqz	a5,800223b6 <timecmp_test_7+0x90>
    8002239e:	6418                	ld	a4,8(s0)
    800223a0:	4789                	li	a5,2
    800223a2:	00005597          	auipc	a1,0x5
    800223a6:	ade58593          	addi	a1,a1,-1314 # 80026e80 <__func__.0+0x2c0>
    800223aa:	00f70663          	beq	a4,a5,800223b6 <timecmp_test_7+0x90>
    800223ae:	00005597          	auipc	a1,0x5
    800223b2:	ae258593          	addi	a1,a1,-1310 # 80026e90 <__func__.0+0x2d0>
    800223b6:	00005517          	auipc	a0,0x5
    800223ba:	b1a50513          	addi	a0,a0,-1254 # 80026ed0 <__func__.0+0x310>
    800223be:	347020ef          	jal	80024f04 <printf>
    800223c2:	00027797          	auipc	a5,0x27
    800223c6:	c4f7c783          	lbu	a5,-945(a5) # 80049011 <excpt+0x1>
    800223ca:	c789                	beqz	a5,800223d4 <timecmp_test_7+0xae>
    800223cc:	6418                	ld	a4,8(s0)
    800223ce:	4789                	li	a5,2
    800223d0:	00f70c63          	beq	a4,a5,800223e8 <timecmp_test_7+0xc2>
    800223d4:	00005517          	auipc	a0,0x5
    800223d8:	b0450513          	addi	a0,a0,-1276 # 80026ed8 <__func__.0+0x318>
    800223dc:	329020ef          	jal	80024f04 <printf>
    800223e0:	02900513          	li	a0,41
    800223e4:	12b010ef          	jal	80023d0e <putchar>
    800223e8:	4529                	li	a0,10
    800223ea:	125010ef          	jal	80023d0e <putchar>
    800223ee:	00027497          	auipc	s1,0x27
    800223f2:	c234c483          	lbu	s1,-989(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800223f6:	00005597          	auipc	a1,0x5
    800223fa:	a9a58593          	addi	a1,a1,-1382 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800223fe:	cc91                	beqz	s1,8002241a <timecmp_test_7+0xf4>
    80022400:	6418                	ld	a4,8(s0)
    80022402:	4789                	li	a5,2
    TEST_END(); 
    80022404:	00005597          	auipc	a1,0x5
    80022408:	a7c58593          	addi	a1,a1,-1412 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002240c:	00f70763          	beq	a4,a5,8002241a <timecmp_test_7+0xf4>
    80022410:	4481                	li	s1,0
    TEST_END(); 
    80022412:	00005597          	auipc	a1,0x5
    80022416:	a7e58593          	addi	a1,a1,-1410 # 80026e90 <__func__.0+0x2d0>
    8002241a:	00005517          	auipc	a0,0x5
    8002241e:	b1e50513          	addi	a0,a0,-1250 # 80026f38 <__func__.0+0x378>
    80022422:	2e3020ef          	jal	80024f04 <printf>
    80022426:	4511                	li	a0,4
    80022428:	fcede0ef          	jal	80000bf6 <goto_priv>
    8002242c:	880df0ef          	jal	800014ac <reset_state>
}
    80022430:	60e2                	ld	ra,24(sp)
    80022432:	6442                	ld	s0,16(sp)
    80022434:	8526                	mv	a0,s1
    80022436:	64a2                	ld	s1,8(sp)
    80022438:	6105                	addi	sp,sp,32
    8002243a:	8082                	ret

000000008002243c <timecmp_test_8>:

bool timecmp_test_8() {
    8002243c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002243e:	00004597          	auipc	a1,0x4
    80022442:	6ba58593          	addi	a1,a1,1722 # 80026af8 <__func__.6>
    80022446:	00005517          	auipc	a0,0x5
    8002244a:	a5a50513          	addi	a0,a0,-1446 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_8() {
    8002244e:	ec06                	sd	ra,24(sp)
    80022450:	e822                	sd	s0,16(sp)
    80022452:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022454:	2b1020ef          	jal	80024f04 <printf>
    80022458:	4529                	li	a0,10
    8002245a:	0b5010ef          	jal	80023d0e <putchar>

    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002245e:	57fd                	li	a5,-1
    80022460:	17fe                	slli	a5,a5,0x3f
    80022462:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80022466:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002246a:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8002246e:	60617073          	csrci	hcounteren,2

    goto_priv(PRIV_VS);
    80022472:	4509                	li	a0,2
    80022474:	f82de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022478:	0330000f          	fence	rw,rw
    8002247c:	00027417          	auipc	s0,0x27
    80022480:	b9440413          	addi	s0,s0,-1132 # 80049010 <excpt>
    80022484:	4785                	li	a5,1
    80022486:	00027717          	auipc	a4,0x27
    8002248a:	bc073123          	sd	zero,-1086(a4) # 80049048 <excpt+0x38>
    8002248e:	00f41023          	sh	a5,0(s0)
    80022492:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    80022496:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    8002249a:	08200593          	li	a1,130
    8002249e:	0000d617          	auipc	a2,0xd
    800224a2:	9d260613          	addi	a2,a2,-1582 # 8002ee70 <__func__.0+0x82b0>
    800224a6:	00005517          	auipc	a0,0x5
    800224aa:	a1250513          	addi	a0,a0,-1518 # 80026eb8 <__func__.0+0x2f8>
    800224ae:	257020ef          	jal	80024f04 <printf>
    800224b2:	00027797          	auipc	a5,0x27
    800224b6:	b5f7c783          	lbu	a5,-1185(a5) # 80049011 <excpt+0x1>
    800224ba:	00005597          	auipc	a1,0x5
    800224be:	9d658593          	addi	a1,a1,-1578 # 80026e90 <__func__.0+0x2d0>
    800224c2:	cf89                	beqz	a5,800224dc <timecmp_test_8+0xa0>
    800224c4:	6418                	ld	a4,8(s0)
    800224c6:	47d9                	li	a5,22
    800224c8:	00005597          	auipc	a1,0x5
    800224cc:	9b858593          	addi	a1,a1,-1608 # 80026e80 <__func__.0+0x2c0>
    800224d0:	00f70663          	beq	a4,a5,800224dc <timecmp_test_8+0xa0>
    800224d4:	00005597          	auipc	a1,0x5
    800224d8:	9bc58593          	addi	a1,a1,-1604 # 80026e90 <__func__.0+0x2d0>
    800224dc:	00005517          	auipc	a0,0x5
    800224e0:	9f450513          	addi	a0,a0,-1548 # 80026ed0 <__func__.0+0x310>
    800224e4:	221020ef          	jal	80024f04 <printf>
    800224e8:	00027797          	auipc	a5,0x27
    800224ec:	b297c783          	lbu	a5,-1239(a5) # 80049011 <excpt+0x1>
    800224f0:	c789                	beqz	a5,800224fa <timecmp_test_8+0xbe>
    800224f2:	6418                	ld	a4,8(s0)
    800224f4:	47d9                	li	a5,22
    800224f6:	00f70c63          	beq	a4,a5,8002250e <timecmp_test_8+0xd2>
    800224fa:	00005517          	auipc	a0,0x5
    800224fe:	9de50513          	addi	a0,a0,-1570 # 80026ed8 <__func__.0+0x318>
    80022502:	203020ef          	jal	80024f04 <printf>
    80022506:	02900513          	li	a0,41
    8002250a:	005010ef          	jal	80023d0e <putchar>
    8002250e:	4529                	li	a0,10
    80022510:	7fe010ef          	jal	80023d0e <putchar>
    80022514:	00027497          	auipc	s1,0x27
    80022518:	afd4c483          	lbu	s1,-1283(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8002251c:	00005597          	auipc	a1,0x5
    80022520:	97458593          	addi	a1,a1,-1676 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80022524:	cc91                	beqz	s1,80022540 <timecmp_test_8+0x104>
    80022526:	6418                	ld	a4,8(s0)
    80022528:	47d9                	li	a5,22
    TEST_END(); 
    8002252a:	00005597          	auipc	a1,0x5
    8002252e:	95658593          	addi	a1,a1,-1706 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80022532:	00f70763          	beq	a4,a5,80022540 <timecmp_test_8+0x104>
    80022536:	4481                	li	s1,0
    TEST_END(); 
    80022538:	00005597          	auipc	a1,0x5
    8002253c:	95858593          	addi	a1,a1,-1704 # 80026e90 <__func__.0+0x2d0>
    80022540:	00005517          	auipc	a0,0x5
    80022544:	9f850513          	addi	a0,a0,-1544 # 80026f38 <__func__.0+0x378>
    80022548:	1bd020ef          	jal	80024f04 <printf>
    8002254c:	4511                	li	a0,4
    8002254e:	ea8de0ef          	jal	80000bf6 <goto_priv>
    80022552:	f5bde0ef          	jal	800014ac <reset_state>
}
    80022556:	60e2                	ld	ra,24(sp)
    80022558:	6442                	ld	s0,16(sp)
    8002255a:	8526                	mv	a0,s1
    8002255c:	64a2                	ld	s1,8(sp)
    8002255e:	6105                	addi	sp,sp,32
    80022560:	8082                	ret

0000000080022562 <timecmp_test_9>:

bool timecmp_test_9() {
    80022562:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022564:	00004597          	auipc	a1,0x4
    80022568:	5a458593          	addi	a1,a1,1444 # 80026b08 <__func__.5>
    8002256c:	00005517          	auipc	a0,0x5
    80022570:	93450513          	addi	a0,a0,-1740 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_9() {
    80022574:	ec06                	sd	ra,24(sp)
    80022576:	e822                	sd	s0,16(sp)
    80022578:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002257a:	18b020ef          	jal	80024f04 <printf>
    8002257e:	4529                	li	a0,10
    80022580:	78e010ef          	jal	80023d0e <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80022584:	57fd                	li	a5,-1
    80022586:	17fe                	slli	a5,a5,0x3f
    80022588:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002258c:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022590:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80022594:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80022598:	4509                	li	a0,2
    8002259a:	e5cde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    8002259e:	0330000f          	fence	rw,rw
    800225a2:	00027417          	auipc	s0,0x27
    800225a6:	a6e40413          	addi	s0,s0,-1426 # 80049010 <excpt>
    800225aa:	4785                	li	a5,1
    800225ac:	00027717          	auipc	a4,0x27
    800225b0:	a8073e23          	sd	zero,-1380(a4) # 80049048 <excpt+0x38>
    800225b4:	00f41023          	sh	a5,0(s0)
    800225b8:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    800225bc:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    800225c0:	08200593          	li	a1,130
    800225c4:	0000d617          	auipc	a2,0xd
    800225c8:	92c60613          	addi	a2,a2,-1748 # 8002eef0 <__func__.0+0x8330>
    800225cc:	00005517          	auipc	a0,0x5
    800225d0:	8ec50513          	addi	a0,a0,-1812 # 80026eb8 <__func__.0+0x2f8>
    800225d4:	131020ef          	jal	80024f04 <printf>
    800225d8:	00027797          	auipc	a5,0x27
    800225dc:	a397c783          	lbu	a5,-1479(a5) # 80049011 <excpt+0x1>
    800225e0:	00005597          	auipc	a1,0x5
    800225e4:	8b058593          	addi	a1,a1,-1872 # 80026e90 <__func__.0+0x2d0>
    800225e8:	cf89                	beqz	a5,80022602 <timecmp_test_9+0xa0>
    800225ea:	6418                	ld	a4,8(s0)
    800225ec:	47d9                	li	a5,22
    800225ee:	00005597          	auipc	a1,0x5
    800225f2:	89258593          	addi	a1,a1,-1902 # 80026e80 <__func__.0+0x2c0>
    800225f6:	00f70663          	beq	a4,a5,80022602 <timecmp_test_9+0xa0>
    800225fa:	00005597          	auipc	a1,0x5
    800225fe:	89658593          	addi	a1,a1,-1898 # 80026e90 <__func__.0+0x2d0>
    80022602:	00005517          	auipc	a0,0x5
    80022606:	8ce50513          	addi	a0,a0,-1842 # 80026ed0 <__func__.0+0x310>
    8002260a:	0fb020ef          	jal	80024f04 <printf>
    8002260e:	00027797          	auipc	a5,0x27
    80022612:	a037c783          	lbu	a5,-1533(a5) # 80049011 <excpt+0x1>
    80022616:	c789                	beqz	a5,80022620 <timecmp_test_9+0xbe>
    80022618:	6418                	ld	a4,8(s0)
    8002261a:	47d9                	li	a5,22
    8002261c:	00f70c63          	beq	a4,a5,80022634 <timecmp_test_9+0xd2>
    80022620:	00005517          	auipc	a0,0x5
    80022624:	8b850513          	addi	a0,a0,-1864 # 80026ed8 <__func__.0+0x318>
    80022628:	0dd020ef          	jal	80024f04 <printf>
    8002262c:	02900513          	li	a0,41
    80022630:	6de010ef          	jal	80023d0e <putchar>
    80022634:	4529                	li	a0,10
    80022636:	6d8010ef          	jal	80023d0e <putchar>
    8002263a:	00027497          	auipc	s1,0x27
    8002263e:	9d74c483          	lbu	s1,-1577(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80022642:	00005597          	auipc	a1,0x5
    80022646:	84e58593          	addi	a1,a1,-1970 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    8002264a:	cc91                	beqz	s1,80022666 <timecmp_test_9+0x104>
    8002264c:	6418                	ld	a4,8(s0)
    8002264e:	47d9                	li	a5,22
    TEST_END(); 
    80022650:	00005597          	auipc	a1,0x5
    80022654:	83058593          	addi	a1,a1,-2000 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80022658:	00f70763          	beq	a4,a5,80022666 <timecmp_test_9+0x104>
    8002265c:	4481                	li	s1,0
    TEST_END(); 
    8002265e:	00005597          	auipc	a1,0x5
    80022662:	83258593          	addi	a1,a1,-1998 # 80026e90 <__func__.0+0x2d0>
    80022666:	00005517          	auipc	a0,0x5
    8002266a:	8d250513          	addi	a0,a0,-1838 # 80026f38 <__func__.0+0x378>
    8002266e:	097020ef          	jal	80024f04 <printf>
    80022672:	4511                	li	a0,4
    80022674:	d82de0ef          	jal	80000bf6 <goto_priv>
    80022678:	e35de0ef          	jal	800014ac <reset_state>
}
    8002267c:	60e2                	ld	ra,24(sp)
    8002267e:	6442                	ld	s0,16(sp)
    80022680:	8526                	mv	a0,s1
    80022682:	64a2                	ld	s1,8(sp)
    80022684:	6105                	addi	sp,sp,32
    80022686:	8082                	ret

0000000080022688 <timecmp_test_10>:

bool timecmp_test_10() {
    80022688:	1141                	addi	sp,sp,-16

    TEST_START();    
    8002268a:	00004597          	auipc	a1,0x4
    8002268e:	48e58593          	addi	a1,a1,1166 # 80026b18 <__func__.4>
    80022692:	00005517          	auipc	a0,0x5
    80022696:	80e50513          	addi	a0,a0,-2034 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_10() {
    8002269a:	e406                	sd	ra,8(sp)
    8002269c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8002269e:	067020ef          	jal	80024f04 <printf>
    800226a2:	4529                	li	a0,10
    800226a4:	66a010ef          	jal	80023d0e <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800226a8:	57fd                	li	a5,-1
    800226aa:	17fe                	slli	a5,a5,0x3f
    800226ac:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    800226b0:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800226b4:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    800226b8:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    800226bc:	4509                	li	a0,2
    800226be:	d38de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800226c2:	0330000f          	fence	rw,rw
    800226c6:	4785                	li	a5,1
    800226c8:	00027717          	auipc	a4,0x27
    800226cc:	98073023          	sd	zero,-1664(a4) # 80049048 <excpt+0x38>
    800226d0:	00027717          	auipc	a4,0x27
    800226d4:	94f71023          	sh	a5,-1728(a4) # 80049010 <excpt>
    800226d8:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    800226dc:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    800226e0:	08200593          	li	a1,130
    800226e4:	0000d617          	auipc	a2,0xd
    800226e8:	88c60613          	addi	a2,a2,-1908 # 8002ef70 <__func__.0+0x83b0>
    800226ec:	00004517          	auipc	a0,0x4
    800226f0:	7cc50513          	addi	a0,a0,1996 # 80026eb8 <__func__.0+0x2f8>
    800226f4:	011020ef          	jal	80024f04 <printf>
    800226f8:	00027797          	auipc	a5,0x27
    800226fc:	9197c783          	lbu	a5,-1767(a5) # 80049011 <excpt+0x1>
    80022700:	00004597          	auipc	a1,0x4
    80022704:	78058593          	addi	a1,a1,1920 # 80026e80 <__func__.0+0x2c0>
    80022708:	c789                	beqz	a5,80022712 <timecmp_test_10+0x8a>
    8002270a:	00004597          	auipc	a1,0x4
    8002270e:	78658593          	addi	a1,a1,1926 # 80026e90 <__func__.0+0x2d0>
    80022712:	00004517          	auipc	a0,0x4
    80022716:	7be50513          	addi	a0,a0,1982 # 80026ed0 <__func__.0+0x310>
    8002271a:	7ea020ef          	jal	80024f04 <printf>
    8002271e:	00027797          	auipc	a5,0x27
    80022722:	8f37c783          	lbu	a5,-1805(a5) # 80049011 <excpt+0x1>
    80022726:	e7a1                	bnez	a5,8002276e <timecmp_test_10+0xe6>
    80022728:	4529                	li	a0,10
    8002272a:	5e4010ef          	jal	80023d0e <putchar>
    8002272e:	00027797          	auipc	a5,0x27
    80022732:	8e37c783          	lbu	a5,-1821(a5) # 80049011 <excpt+0x1>
    80022736:	e795                	bnez	a5,80022762 <timecmp_test_10+0xda>
    80022738:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8002273a:	00004597          	auipc	a1,0x4
    8002273e:	74658593          	addi	a1,a1,1862 # 80026e80 <__func__.0+0x2c0>
    80022742:	00004517          	auipc	a0,0x4
    80022746:	7f650513          	addi	a0,a0,2038 # 80026f38 <__func__.0+0x378>
    8002274a:	7ba020ef          	jal	80024f04 <printf>
    8002274e:	4511                	li	a0,4
    80022750:	ca6de0ef          	jal	80000bf6 <goto_priv>
    80022754:	d59de0ef          	jal	800014ac <reset_state>
}
    80022758:	60a2                	ld	ra,8(sp)
    8002275a:	8522                	mv	a0,s0
    8002275c:	6402                	ld	s0,0(sp)
    8002275e:	0141                	addi	sp,sp,16
    80022760:	8082                	ret
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80022762:	4401                	li	s0,0
    TEST_END(); 
    80022764:	00004597          	auipc	a1,0x4
    80022768:	72c58593          	addi	a1,a1,1836 # 80026e90 <__func__.0+0x2d0>
    8002276c:	bfd9                	j	80022742 <timecmp_test_10+0xba>
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    8002276e:	00004517          	auipc	a0,0x4
    80022772:	76a50513          	addi	a0,a0,1898 # 80026ed8 <__func__.0+0x318>
    80022776:	78e020ef          	jal	80024f04 <printf>
    8002277a:	02900513          	li	a0,41
    8002277e:	590010ef          	jal	80023d0e <putchar>
    80022782:	b75d                	j	80022728 <timecmp_test_10+0xa0>

0000000080022784 <timecmp_test_11>:

bool timecmp_test_11() {
    80022784:	1141                	addi	sp,sp,-16

    TEST_START();    
    80022786:	00004597          	auipc	a1,0x4
    8002278a:	3a258593          	addi	a1,a1,930 # 80026b28 <__func__.3>
    8002278e:	00004517          	auipc	a0,0x4
    80022792:	71250513          	addi	a0,a0,1810 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_11() {
    80022796:	e406                	sd	ra,8(sp)
    80022798:	e022                	sd	s0,0(sp)
    TEST_START();    
    8002279a:	76a020ef          	jal	80024f04 <printf>
    8002279e:	4529                	li	a0,10
    800227a0:	56e010ef          	jal	80023d0e <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800227a4:	57fd                	li	a5,-1
    800227a6:	17fe                	slli	a5,a5,0x3f
    800227a8:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800227ac:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    800227b0:	450d                	li	a0,3
    800227b2:	c44de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800227b6:	0330000f          	fence	rw,rw
    800227ba:	4785                	li	a5,1
    800227bc:	00027717          	auipc	a4,0x27
    800227c0:	88073623          	sd	zero,-1908(a4) # 80049048 <excpt+0x38>
    800227c4:	00027717          	auipc	a4,0x27
    800227c8:	84f71623          	sh	a5,-1972(a4) # 80049010 <excpt>
    800227cc:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    800227d0:	14d027f3          	csrr	a5,stimecmp
    CSRR(CSR_VSTIMECMP);
    800227d4:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    800227d8:	08200593          	li	a1,130
    800227dc:	0000c617          	auipc	a2,0xc
    800227e0:	7fc60613          	addi	a2,a2,2044 # 8002efd8 <__func__.0+0x8418>
    800227e4:	00004517          	auipc	a0,0x4
    800227e8:	6d450513          	addi	a0,a0,1748 # 80026eb8 <__func__.0+0x2f8>
    800227ec:	718020ef          	jal	80024f04 <printf>
    800227f0:	00027797          	auipc	a5,0x27
    800227f4:	8217c783          	lbu	a5,-2015(a5) # 80049011 <excpt+0x1>
    800227f8:	00004597          	auipc	a1,0x4
    800227fc:	68858593          	addi	a1,a1,1672 # 80026e80 <__func__.0+0x2c0>
    80022800:	c789                	beqz	a5,8002280a <timecmp_test_11+0x86>
    80022802:	00004597          	auipc	a1,0x4
    80022806:	68e58593          	addi	a1,a1,1678 # 80026e90 <__func__.0+0x2d0>
    8002280a:	00004517          	auipc	a0,0x4
    8002280e:	6c650513          	addi	a0,a0,1734 # 80026ed0 <__func__.0+0x310>
    80022812:	6f2020ef          	jal	80024f04 <printf>
    80022816:	00026797          	auipc	a5,0x26
    8002281a:	7fb7c783          	lbu	a5,2043(a5) # 80049011 <excpt+0x1>
    8002281e:	e7a1                	bnez	a5,80022866 <timecmp_test_11+0xe2>
    80022820:	4529                	li	a0,10
    80022822:	4ec010ef          	jal	80023d0e <putchar>
    80022826:	00026797          	auipc	a5,0x26
    8002282a:	7eb7c783          	lbu	a5,2027(a5) # 80049011 <excpt+0x1>
    8002282e:	e795                	bnez	a5,8002285a <timecmp_test_11+0xd6>
    80022830:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80022832:	00004597          	auipc	a1,0x4
    80022836:	64e58593          	addi	a1,a1,1614 # 80026e80 <__func__.0+0x2c0>
    8002283a:	00004517          	auipc	a0,0x4
    8002283e:	6fe50513          	addi	a0,a0,1790 # 80026f38 <__func__.0+0x378>
    80022842:	6c2020ef          	jal	80024f04 <printf>
    80022846:	4511                	li	a0,4
    80022848:	baede0ef          	jal	80000bf6 <goto_priv>
    8002284c:	c61de0ef          	jal	800014ac <reset_state>
}
    80022850:	60a2                	ld	ra,8(sp)
    80022852:	8522                	mv	a0,s0
    80022854:	6402                	ld	s0,0(sp)
    80022856:	0141                	addi	sp,sp,16
    80022858:	8082                	ret
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    8002285a:	4401                	li	s0,0
    TEST_END(); 
    8002285c:	00004597          	auipc	a1,0x4
    80022860:	63458593          	addi	a1,a1,1588 # 80026e90 <__func__.0+0x2d0>
    80022864:	bfd9                	j	8002283a <timecmp_test_11+0xb6>
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80022866:	00004517          	auipc	a0,0x4
    8002286a:	67250513          	addi	a0,a0,1650 # 80026ed8 <__func__.0+0x318>
    8002286e:	696020ef          	jal	80024f04 <printf>
    80022872:	02900513          	li	a0,41
    80022876:	498010ef          	jal	80023d0e <putchar>
    8002287a:	b75d                	j	80022820 <timecmp_test_11+0x9c>

000000008002287c <timecmp_test_12>:

bool timecmp_test_12() {
    8002287c:	1141                	addi	sp,sp,-16

    TEST_START();    
    8002287e:	00004597          	auipc	a1,0x4
    80022882:	2ba58593          	addi	a1,a1,698 # 80026b38 <__func__.2>
    80022886:	00004517          	auipc	a0,0x4
    8002288a:	61a50513          	addi	a0,a0,1562 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_12() {
    8002288e:	e406                	sd	ra,8(sp)
    80022890:	e022                	sd	s0,0(sp)
    TEST_START();    
    80022892:	672020ef          	jal	80024f04 <printf>
    80022896:	4529                	li	a0,10
    80022898:	476010ef          	jal	80023d0e <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    8002289c:	57fd                	li	a5,-1
    8002289e:	17fe                	slli	a5,a5,0x3f
    800228a0:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800228a4:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    800228a8:	450d                	li	a0,3
    800228aa:	b4cde0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800228ae:	0330000f          	fence	rw,rw
    800228b2:	4785                	li	a5,1
    800228b4:	00026717          	auipc	a4,0x26
    800228b8:	78073a23          	sd	zero,1940(a4) # 80049048 <excpt+0x38>
    800228bc:	00026717          	auipc	a4,0x26
    800228c0:	74f71a23          	sh	a5,1876(a4) # 80049010 <excpt>
    800228c4:	0330000f          	fence	rw,rw
    CSRR(CSR_VSTIMECMP);
    800228c8:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    800228cc:	08200593          	li	a1,130
    800228d0:	0000c617          	auipc	a2,0xc
    800228d4:	75860613          	addi	a2,a2,1880 # 8002f028 <__func__.0+0x8468>
    800228d8:	00004517          	auipc	a0,0x4
    800228dc:	5e050513          	addi	a0,a0,1504 # 80026eb8 <__func__.0+0x2f8>
    800228e0:	624020ef          	jal	80024f04 <printf>
    800228e4:	00026797          	auipc	a5,0x26
    800228e8:	72d7c783          	lbu	a5,1837(a5) # 80049011 <excpt+0x1>
    800228ec:	00004597          	auipc	a1,0x4
    800228f0:	59458593          	addi	a1,a1,1428 # 80026e80 <__func__.0+0x2c0>
    800228f4:	c789                	beqz	a5,800228fe <timecmp_test_12+0x82>
    800228f6:	00004597          	auipc	a1,0x4
    800228fa:	59a58593          	addi	a1,a1,1434 # 80026e90 <__func__.0+0x2d0>
    800228fe:	00004517          	auipc	a0,0x4
    80022902:	5d250513          	addi	a0,a0,1490 # 80026ed0 <__func__.0+0x310>
    80022906:	5fe020ef          	jal	80024f04 <printf>
    8002290a:	00026797          	auipc	a5,0x26
    8002290e:	7077c783          	lbu	a5,1799(a5) # 80049011 <excpt+0x1>
    80022912:	e7a1                	bnez	a5,8002295a <timecmp_test_12+0xde>
    80022914:	4529                	li	a0,10
    80022916:	3f8010ef          	jal	80023d0e <putchar>
    8002291a:	00026797          	auipc	a5,0x26
    8002291e:	6f77c783          	lbu	a5,1783(a5) # 80049011 <excpt+0x1>
    80022922:	e795                	bnez	a5,8002294e <timecmp_test_12+0xd2>
    80022924:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80022926:	00004597          	auipc	a1,0x4
    8002292a:	55a58593          	addi	a1,a1,1370 # 80026e80 <__func__.0+0x2c0>
    8002292e:	00004517          	auipc	a0,0x4
    80022932:	60a50513          	addi	a0,a0,1546 # 80026f38 <__func__.0+0x378>
    80022936:	5ce020ef          	jal	80024f04 <printf>
    8002293a:	4511                	li	a0,4
    8002293c:	abade0ef          	jal	80000bf6 <goto_priv>
    80022940:	b6dde0ef          	jal	800014ac <reset_state>
}
    80022944:	60a2                	ld	ra,8(sp)
    80022946:	8522                	mv	a0,s0
    80022948:	6402                	ld	s0,0(sp)
    8002294a:	0141                	addi	sp,sp,16
    8002294c:	8082                	ret
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    8002294e:	4401                	li	s0,0
    TEST_END(); 
    80022950:	00004597          	auipc	a1,0x4
    80022954:	54058593          	addi	a1,a1,1344 # 80026e90 <__func__.0+0x2d0>
    80022958:	bfd9                	j	8002292e <timecmp_test_12+0xb2>
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    8002295a:	00004517          	auipc	a0,0x4
    8002295e:	57e50513          	addi	a0,a0,1406 # 80026ed8 <__func__.0+0x318>
    80022962:	5a2020ef          	jal	80024f04 <printf>
    80022966:	02900513          	li	a0,41
    8002296a:	3a4010ef          	jal	80023d0e <putchar>
    8002296e:	b75d                	j	80022914 <timecmp_test_12+0x98>

0000000080022970 <timecmp_test_13>:

bool timecmp_test_13() {
    80022970:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022972:	00004597          	auipc	a1,0x4
    80022976:	1d658593          	addi	a1,a1,470 # 80026b48 <__func__.1>
    8002297a:	00004517          	auipc	a0,0x4
    8002297e:	52650513          	addi	a0,a0,1318 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_13() {
    80022982:	ec06                	sd	ra,24(sp)
    80022984:	e822                	sd	s0,16(sp)
    80022986:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022988:	57c020ef          	jal	80024f04 <printf>
    8002298c:	4529                	li	a0,10
    8002298e:	380010ef          	jal	80023d0e <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80022992:	57fd                	li	a5,-1
    80022994:	17fe                	slli	a5,a5,0x3f
    80022996:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002299a:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002299e:	30a025f3          	csrr	a1,0x30a
    800229a2:	0000b517          	auipc	a0,0xb
    800229a6:	a4650513          	addi	a0,a0,-1466 # 8002d3e8 <__func__.0+0x6828>
    800229aa:	55a020ef          	jal	80024f04 <printf>
    800229ae:	60a025f3          	csrr	a1,henvcfg
    800229b2:	0000b517          	auipc	a0,0xb
    800229b6:	a3650513          	addi	a0,a0,-1482 # 8002d3e8 <__func__.0+0x6828>
    800229ba:	54a020ef          	jal	80024f04 <printf>

    goto_priv(PRIV_VU);
    800229be:	4501                	li	a0,0
    800229c0:	a36de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    800229c4:	0330000f          	fence	rw,rw
    800229c8:	00026417          	auipc	s0,0x26
    800229cc:	64840413          	addi	s0,s0,1608 # 80049010 <excpt>
    800229d0:	4785                	li	a5,1
    800229d2:	00026717          	auipc	a4,0x26
    800229d6:	66073b23          	sd	zero,1654(a4) # 80049048 <excpt+0x38>
    800229da:	00f41023          	sh	a5,0(s0)
    800229de:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    800229e2:	14d027f3          	csrr	a5,stimecmp
    printf("trigger=%d\n",excpt.triggered);
    800229e6:	00026597          	auipc	a1,0x26
    800229ea:	62b5c583          	lbu	a1,1579(a1) # 80049011 <excpt+0x1>
    800229ee:	0000c517          	auipc	a0,0xc
    800229f2:	68a50513          	addi	a0,a0,1674 # 8002f078 <__func__.0+0x84b8>
    800229f6:	50e020ef          	jal	80024f04 <printf>
    printf("cause=%d\n",excpt.cause);
    800229fa:	640c                	ld	a1,8(s0)
    800229fc:	0000c517          	auipc	a0,0xc
    80022a00:	68c50513          	addi	a0,a0,1676 # 8002f088 <__func__.0+0x84c8>
    80022a04:	500020ef          	jal	80024f04 <printf>
    TEST_ASSERT("vu access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    80022a08:	08200593          	li	a1,130
    80022a0c:	0000c617          	auipc	a2,0xc
    80022a10:	68c60613          	addi	a2,a2,1676 # 8002f098 <__func__.0+0x84d8>
    80022a14:	00004517          	auipc	a0,0x4
    80022a18:	4a450513          	addi	a0,a0,1188 # 80026eb8 <__func__.0+0x2f8>
    80022a1c:	4e8020ef          	jal	80024f04 <printf>
    80022a20:	00026797          	auipc	a5,0x26
    80022a24:	5f17c783          	lbu	a5,1521(a5) # 80049011 <excpt+0x1>
    80022a28:	00004597          	auipc	a1,0x4
    80022a2c:	46858593          	addi	a1,a1,1128 # 80026e90 <__func__.0+0x2d0>
    80022a30:	cf89                	beqz	a5,80022a4a <timecmp_test_13+0xda>
    80022a32:	6418                	ld	a4,8(s0)
    80022a34:	47d9                	li	a5,22
    80022a36:	00004597          	auipc	a1,0x4
    80022a3a:	44a58593          	addi	a1,a1,1098 # 80026e80 <__func__.0+0x2c0>
    80022a3e:	00f70663          	beq	a4,a5,80022a4a <timecmp_test_13+0xda>
    80022a42:	00004597          	auipc	a1,0x4
    80022a46:	44e58593          	addi	a1,a1,1102 # 80026e90 <__func__.0+0x2d0>
    80022a4a:	00004517          	auipc	a0,0x4
    80022a4e:	48650513          	addi	a0,a0,1158 # 80026ed0 <__func__.0+0x310>
    80022a52:	4b2020ef          	jal	80024f04 <printf>
    80022a56:	00026797          	auipc	a5,0x26
    80022a5a:	5bb7c783          	lbu	a5,1467(a5) # 80049011 <excpt+0x1>
    80022a5e:	c789                	beqz	a5,80022a68 <timecmp_test_13+0xf8>
    80022a60:	6418                	ld	a4,8(s0)
    80022a62:	47d9                	li	a5,22
    80022a64:	00f70c63          	beq	a4,a5,80022a7c <timecmp_test_13+0x10c>
    80022a68:	00004517          	auipc	a0,0x4
    80022a6c:	47050513          	addi	a0,a0,1136 # 80026ed8 <__func__.0+0x318>
    80022a70:	494020ef          	jal	80024f04 <printf>
    80022a74:	02900513          	li	a0,41
    80022a78:	296010ef          	jal	80023d0e <putchar>
    80022a7c:	4529                	li	a0,10
    80022a7e:	290010ef          	jal	80023d0e <putchar>
    80022a82:	00026497          	auipc	s1,0x26
    80022a86:	58f4c483          	lbu	s1,1423(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80022a8a:	00004597          	auipc	a1,0x4
    80022a8e:	40658593          	addi	a1,a1,1030 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    80022a92:	cc91                	beqz	s1,80022aae <timecmp_test_13+0x13e>
    80022a94:	6418                	ld	a4,8(s0)
    80022a96:	47d9                	li	a5,22
    TEST_END(); 
    80022a98:	00004597          	auipc	a1,0x4
    80022a9c:	3e858593          	addi	a1,a1,1000 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    80022aa0:	00f70763          	beq	a4,a5,80022aae <timecmp_test_13+0x13e>
    80022aa4:	4481                	li	s1,0
    TEST_END(); 
    80022aa6:	00004597          	auipc	a1,0x4
    80022aaa:	3ea58593          	addi	a1,a1,1002 # 80026e90 <__func__.0+0x2d0>
    80022aae:	00004517          	auipc	a0,0x4
    80022ab2:	48a50513          	addi	a0,a0,1162 # 80026f38 <__func__.0+0x378>
    80022ab6:	44e020ef          	jal	80024f04 <printf>
    80022aba:	4511                	li	a0,4
    80022abc:	93ade0ef          	jal	80000bf6 <goto_priv>
    80022ac0:	9edde0ef          	jal	800014ac <reset_state>
}
    80022ac4:	60e2                	ld	ra,24(sp)
    80022ac6:	6442                	ld	s0,16(sp)
    80022ac8:	8526                	mv	a0,s1
    80022aca:	64a2                	ld	s1,8(sp)
    80022acc:	6105                	addi	sp,sp,32
    80022ace:	8082                	ret

0000000080022ad0 <timecmp_test_14>:

bool timecmp_test_14() {
    80022ad0:	1101                	addi	sp,sp,-32

    TEST_START();    
    80022ad2:	00004597          	auipc	a1,0x4
    80022ad6:	08658593          	addi	a1,a1,134 # 80026b58 <__func__.0>
    80022ada:	00004517          	auipc	a0,0x4
    80022ade:	3c650513          	addi	a0,a0,966 # 80026ea0 <__func__.0+0x2e0>
bool timecmp_test_14() {
    80022ae2:	ec06                	sd	ra,24(sp)
    80022ae4:	e822                	sd	s0,16(sp)
    80022ae6:	e426                	sd	s1,8(sp)
    TEST_START();    
    80022ae8:	41c020ef          	jal	80024f04 <printf>
    80022aec:	4529                	li	a0,10
    80022aee:	220010ef          	jal	80023d0e <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80022af2:	57fd                	li	a5,-1
    80022af4:	17fe                	slli	a5,a5,0x3f
    80022af6:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80022afa:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80022afe:	30a025f3          	csrr	a1,0x30a
    80022b02:	0000b517          	auipc	a0,0xb
    80022b06:	8e650513          	addi	a0,a0,-1818 # 8002d3e8 <__func__.0+0x6828>
    80022b0a:	3fa020ef          	jal	80024f04 <printf>
    80022b0e:	60a025f3          	csrr	a1,henvcfg
    80022b12:	0000b517          	auipc	a0,0xb
    80022b16:	8d650513          	addi	a0,a0,-1834 # 8002d3e8 <__func__.0+0x6828>
    80022b1a:	3ea020ef          	jal	80024f04 <printf>

    goto_priv(PRIV_VS);
    80022b1e:	4509                	li	a0,2
    80022b20:	8d6de0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022b24:	0330000f          	fence	rw,rw
    80022b28:	00026417          	auipc	s0,0x26
    80022b2c:	4e840413          	addi	s0,s0,1256 # 80049010 <excpt>
    80022b30:	4785                	li	a5,1
    80022b32:	00026717          	auipc	a4,0x26
    80022b36:	50073b23          	sd	zero,1302(a4) # 80049048 <excpt+0x38>
    80022b3a:	00f41023          	sh	a5,0(s0)
    80022b3e:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    80022b42:	14d027f3          	csrr	a5,stimecmp
    printf("trigger=%d\n",excpt.triggered);
    80022b46:	00026597          	auipc	a1,0x26
    80022b4a:	4cb5c583          	lbu	a1,1227(a1) # 80049011 <excpt+0x1>
    80022b4e:	0000c517          	auipc	a0,0xc
    80022b52:	52a50513          	addi	a0,a0,1322 # 8002f078 <__func__.0+0x84b8>
    80022b56:	3ae020ef          	jal	80024f04 <printf>
    printf("cause=%d\n",excpt.cause);
    80022b5a:	640c                	ld	a1,8(s0)
    80022b5c:	0000c517          	auipc	a0,0xc
    80022b60:	52c50513          	addi	a0,a0,1324 # 8002f088 <__func__.0+0x84c8>
    80022b64:	3a0020ef          	jal	80024f04 <printf>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    80022b68:	08200593          	li	a1,130
    80022b6c:	0000c617          	auipc	a2,0xc
    80022b70:	58c60613          	addi	a2,a2,1420 # 8002f0f8 <__func__.0+0x8538>
    80022b74:	00004517          	auipc	a0,0x4
    80022b78:	34450513          	addi	a0,a0,836 # 80026eb8 <__func__.0+0x2f8>
    80022b7c:	388020ef          	jal	80024f04 <printf>
    80022b80:	00026797          	auipc	a5,0x26
    80022b84:	4917c783          	lbu	a5,1169(a5) # 80049011 <excpt+0x1>
    80022b88:	00004597          	auipc	a1,0x4
    80022b8c:	30858593          	addi	a1,a1,776 # 80026e90 <__func__.0+0x2d0>
    80022b90:	cf89                	beqz	a5,80022baa <timecmp_test_14+0xda>
    80022b92:	6418                	ld	a4,8(s0)
    80022b94:	47d9                	li	a5,22
    80022b96:	00004597          	auipc	a1,0x4
    80022b9a:	2ea58593          	addi	a1,a1,746 # 80026e80 <__func__.0+0x2c0>
    80022b9e:	00f70663          	beq	a4,a5,80022baa <timecmp_test_14+0xda>
    80022ba2:	00004597          	auipc	a1,0x4
    80022ba6:	2ee58593          	addi	a1,a1,750 # 80026e90 <__func__.0+0x2d0>
    80022baa:	00004517          	auipc	a0,0x4
    80022bae:	32650513          	addi	a0,a0,806 # 80026ed0 <__func__.0+0x310>
    80022bb2:	352020ef          	jal	80024f04 <printf>
    80022bb6:	00026797          	auipc	a5,0x26
    80022bba:	45b7c783          	lbu	a5,1115(a5) # 80049011 <excpt+0x1>
    80022bbe:	c789                	beqz	a5,80022bc8 <timecmp_test_14+0xf8>
    80022bc0:	6418                	ld	a4,8(s0)
    80022bc2:	47d9                	li	a5,22
    80022bc4:	00f70c63          	beq	a4,a5,80022bdc <timecmp_test_14+0x10c>
    80022bc8:	00004517          	auipc	a0,0x4
    80022bcc:	31050513          	addi	a0,a0,784 # 80026ed8 <__func__.0+0x318>
    80022bd0:	334020ef          	jal	80024f04 <printf>
    80022bd4:	02900513          	li	a0,41
    80022bd8:	136010ef          	jal	80023d0e <putchar>
    80022bdc:	4529                	li	a0,10
    80022bde:	130010ef          	jal	80023d0e <putchar>
    80022be2:	00026497          	auipc	s1,0x26
    80022be6:	42f4c483          	lbu	s1,1071(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80022bea:	00004597          	auipc	a1,0x4
    80022bee:	2a658593          	addi	a1,a1,678 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    80022bf2:	cc91                	beqz	s1,80022c0e <timecmp_test_14+0x13e>
    80022bf4:	6418                	ld	a4,8(s0)
    80022bf6:	47d9                	li	a5,22
    TEST_END(); 
    80022bf8:	00004597          	auipc	a1,0x4
    80022bfc:	28858593          	addi	a1,a1,648 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0",
    80022c00:	00f70763          	beq	a4,a5,80022c0e <timecmp_test_14+0x13e>
    80022c04:	4481                	li	s1,0
    TEST_END(); 
    80022c06:	00004597          	auipc	a1,0x4
    80022c0a:	28a58593          	addi	a1,a1,650 # 80026e90 <__func__.0+0x2d0>
    80022c0e:	00004517          	auipc	a0,0x4
    80022c12:	32a50513          	addi	a0,a0,810 # 80026f38 <__func__.0+0x378>
    80022c16:	2ee020ef          	jal	80024f04 <printf>
    80022c1a:	4511                	li	a0,4
    80022c1c:	fdbdd0ef          	jal	80000bf6 <goto_priv>
    80022c20:	88dde0ef          	jal	800014ac <reset_state>
    80022c24:	60e2                	ld	ra,24(sp)
    80022c26:	6442                	ld	s0,16(sp)
    80022c28:	8526                	mv	a0,s1
    80022c2a:	64a2                	ld	s1,8(sp)
    80022c2c:	6105                	addi	sp,sp,32
    80022c2e:	8082                	ret

0000000080022c30 <mix_instruction_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h>

bool mix_instruction_1(){
    80022c30:	7179                	addi	sp,sp,-48

    TEST_START();
    80022c32:	00004597          	auipc	a1,0x4
    80022c36:	f3658593          	addi	a1,a1,-202 # 80026b68 <__func__.2>
    80022c3a:	00004517          	auipc	a0,0x4
    80022c3e:	26650513          	addi	a0,a0,614 # 80026ea0 <__func__.0+0x2e0>
bool mix_instruction_1(){
    80022c42:	f406                	sd	ra,40(sp)
    80022c44:	f022                	sd	s0,32(sp)
    80022c46:	ec26                	sd	s1,24(sp)
    80022c48:	e84a                	sd	s2,16(sp)
    80022c4a:	e44e                	sd	s3,8(sp)
    TEST_START();
    80022c4c:	2b8020ef          	jal	80024f04 <printf>
    80022c50:	4529                	li	a0,10
    80022c52:	0bc010ef          	jal	80023d0e <putchar>

    goto_priv(PRIV_M);
    80022c56:	4511                	li	a0,4
    80022c58:	f9fdd0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80022c5c:	57fd                	li	a5,-1
    80022c5e:	17fe                	slli	a5,a5,0x3f
    80022c60:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80022c64:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022c68:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80022c6c:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80022c70:	4509                	li	a0,2
    80022c72:	f85dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022c76:	0330000f          	fence	rw,rw
    80022c7a:	00026497          	auipc	s1,0x26
    80022c7e:	39648493          	addi	s1,s1,918 # 80049010 <excpt>
    80022c82:	4785                	li	a5,1
    80022c84:	00026717          	auipc	a4,0x26
    80022c88:	3c073223          	sd	zero,964(a4) # 80049048 <excpt+0x38>
    80022c8c:	00f49023          	sh	a5,0(s1)
    80022c90:	0330000f          	fence	rw,rw
    CSRR(CSR_STIMECMP);
    80022c94:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 and henvcfg.stce=0",
    80022c98:	08200593          	li	a1,130
    80022c9c:	0000c617          	auipc	a2,0xc
    80022ca0:	4bc60613          	addi	a2,a2,1212 # 8002f158 <__func__.0+0x8598>
    80022ca4:	00004517          	auipc	a0,0x4
    80022ca8:	21450513          	addi	a0,a0,532 # 80026eb8 <__func__.0+0x2f8>
    80022cac:	258020ef          	jal	80024f04 <printf>
    80022cb0:	00026797          	auipc	a5,0x26
    80022cb4:	3617c783          	lbu	a5,865(a5) # 80049011 <excpt+0x1>
    80022cb8:	00004597          	auipc	a1,0x4
    80022cbc:	1d858593          	addi	a1,a1,472 # 80026e90 <__func__.0+0x2d0>
    80022cc0:	cf89                	beqz	a5,80022cda <mix_instruction_1+0xaa>
    80022cc2:	6498                	ld	a4,8(s1)
    80022cc4:	47d9                	li	a5,22
    80022cc6:	00004597          	auipc	a1,0x4
    80022cca:	1ba58593          	addi	a1,a1,442 # 80026e80 <__func__.0+0x2c0>
    80022cce:	00f70663          	beq	a4,a5,80022cda <mix_instruction_1+0xaa>
    80022cd2:	00004597          	auipc	a1,0x4
    80022cd6:	1be58593          	addi	a1,a1,446 # 80026e90 <__func__.0+0x2d0>
    80022cda:	00004517          	auipc	a0,0x4
    80022cde:	1f650513          	addi	a0,a0,502 # 80026ed0 <__func__.0+0x310>
    80022ce2:	222020ef          	jal	80024f04 <printf>
    80022ce6:	00026797          	auipc	a5,0x26
    80022cea:	32b7c783          	lbu	a5,811(a5) # 80049011 <excpt+0x1>
    80022cee:	c789                	beqz	a5,80022cf8 <mix_instruction_1+0xc8>
    80022cf0:	6498                	ld	a4,8(s1)
    80022cf2:	47d9                	li	a5,22
    80022cf4:	00f70c63          	beq	a4,a5,80022d0c <mix_instruction_1+0xdc>
    80022cf8:	00004517          	auipc	a0,0x4
    80022cfc:	1e050513          	addi	a0,a0,480 # 80026ed8 <__func__.0+0x318>
    80022d00:	204020ef          	jal	80024f04 <printf>
    80022d04:	02900513          	li	a0,41
    80022d08:	006010ef          	jal	80023d0e <putchar>
    80022d0c:	4529                	li	a0,10
    80022d0e:	000010ef          	jal	80023d0e <putchar>
    80022d12:	00026797          	auipc	a5,0x26
    80022d16:	2ff7c783          	lbu	a5,767(a5) # 80049011 <excpt+0x1>
    80022d1a:	4401                	li	s0,0
    80022d1c:	c789                	beqz	a5,80022d26 <mix_instruction_1+0xf6>
    80022d1e:	6480                	ld	s0,8(s1)
    80022d20:	1429                	addi	s0,s0,-22
    80022d22:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80022d26:	4511                	li	a0,4
    80022d28:	ecfdd0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80022d2c:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80022d30:	450d                	li	a0,3
    80022d32:	ec5dd0ef          	jal	80000bf6 <goto_priv>

    TEST_SETUP_EXCEPT();
    80022d36:	0330000f          	fence	rw,rw
    80022d3a:	4785                	li	a5,1
    80022d3c:	00026717          	auipc	a4,0x26
    80022d40:	30073623          	sd	zero,780(a4) # 80049048 <excpt+0x38>
    80022d44:	00f49023          	sh	a5,0(s1)
    80022d48:	0330000f          	fence	rw,rw
    CSRR(CSR_TIME);
    80022d4c:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80022d50:	08200593          	li	a1,130
    80022d54:	0000b617          	auipc	a2,0xb
    80022d58:	25460613          	addi	a2,a2,596 # 8002dfa8 <__func__.0+0x73e8>
    80022d5c:	00004517          	auipc	a0,0x4
    80022d60:	15c50513          	addi	a0,a0,348 # 80026eb8 <__func__.0+0x2f8>
    80022d64:	1a0020ef          	jal	80024f04 <printf>
    80022d68:	00026797          	auipc	a5,0x26
    80022d6c:	2a97c783          	lbu	a5,681(a5) # 80049011 <excpt+0x1>
    80022d70:	00004597          	auipc	a1,0x4
    80022d74:	12058593          	addi	a1,a1,288 # 80026e90 <__func__.0+0x2d0>
    80022d78:	cf89                	beqz	a5,80022d92 <mix_instruction_1+0x162>
    80022d7a:	6498                	ld	a4,8(s1)
    80022d7c:	4789                	li	a5,2
    80022d7e:	00004597          	auipc	a1,0x4
    80022d82:	10258593          	addi	a1,a1,258 # 80026e80 <__func__.0+0x2c0>
    80022d86:	00f70663          	beq	a4,a5,80022d92 <mix_instruction_1+0x162>
    80022d8a:	00004597          	auipc	a1,0x4
    80022d8e:	10658593          	addi	a1,a1,262 # 80026e90 <__func__.0+0x2d0>
    80022d92:	00004517          	auipc	a0,0x4
    80022d96:	13e50513          	addi	a0,a0,318 # 80026ed0 <__func__.0+0x310>
    80022d9a:	16a020ef          	jal	80024f04 <printf>
    80022d9e:	00026797          	auipc	a5,0x26
    80022da2:	2737c783          	lbu	a5,627(a5) # 80049011 <excpt+0x1>
    80022da6:	c789                	beqz	a5,80022db0 <mix_instruction_1+0x180>
    80022da8:	6498                	ld	a4,8(s1)
    80022daa:	4789                	li	a5,2
    80022dac:	00f70c63          	beq	a4,a5,80022dc4 <mix_instruction_1+0x194>
    80022db0:	00004517          	auipc	a0,0x4
    80022db4:	12850513          	addi	a0,a0,296 # 80026ed8 <__func__.0+0x318>
    80022db8:	14c020ef          	jal	80024f04 <printf>
    80022dbc:	02900513          	li	a0,41
    80022dc0:	74f000ef          	jal	80023d0e <putchar>
    80022dc4:	4529                	li	a0,10
    80022dc6:	749000ef          	jal	80023d0e <putchar>
    80022dca:	c801                	beqz	s0,80022dda <mix_instruction_1+0x1aa>
    80022dcc:	00026797          	auipc	a5,0x26
    80022dd0:	2457c783          	lbu	a5,581(a5) # 80049011 <excpt+0x1>
    80022dd4:	4401                	li	s0,0
    80022dd6:	0c0792e3          	bnez	a5,8002369a <mix_instruction_1+0xa6a>
    //     excpt.cause == CAUSE_ILI
    // ); 
    
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80022dda:	4511                	li	a0,4
    80022ddc:	e1bdd0ef          	jal	80000bf6 <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80022de0:	004007b7          	lui	a5,0x400
    80022de4:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80022de8:	002007b7          	lui	a5,0x200
    80022dec:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80022df0:	4501                	li	a0,0
    80022df2:	e05dd0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80022df6:	0330000f          	fence	rw,rw
    80022dfa:	4785                	li	a5,1
    80022dfc:	00026717          	auipc	a4,0x26
    80022e00:	24073623          	sd	zero,588(a4) # 80049048 <excpt+0x38>
    80022e04:	00f49023          	sh	a5,0(s1)
    80022e08:	0330000f          	fence	rw,rw
    asm volatile(
    80022e0c:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80022e10:	08200593          	li	a1,130
    80022e14:	00005617          	auipc	a2,0x5
    80022e18:	19c60613          	addi	a2,a2,412 # 80027fb0 <__func__.0+0x13f0>
    80022e1c:	00004517          	auipc	a0,0x4
    80022e20:	09c50513          	addi	a0,a0,156 # 80026eb8 <__func__.0+0x2f8>
    80022e24:	0e0020ef          	jal	80024f04 <printf>
    80022e28:	00026797          	auipc	a5,0x26
    80022e2c:	1e97c783          	lbu	a5,489(a5) # 80049011 <excpt+0x1>
    80022e30:	00004597          	auipc	a1,0x4
    80022e34:	06058593          	addi	a1,a1,96 # 80026e90 <__func__.0+0x2d0>
    80022e38:	cf89                	beqz	a5,80022e52 <mix_instruction_1+0x222>
    80022e3a:	6498                	ld	a4,8(s1)
    80022e3c:	47d9                	li	a5,22
    80022e3e:	00004597          	auipc	a1,0x4
    80022e42:	04258593          	addi	a1,a1,66 # 80026e80 <__func__.0+0x2c0>
    80022e46:	00f70663          	beq	a4,a5,80022e52 <mix_instruction_1+0x222>
    80022e4a:	00004597          	auipc	a1,0x4
    80022e4e:	04658593          	addi	a1,a1,70 # 80026e90 <__func__.0+0x2d0>
    80022e52:	00004517          	auipc	a0,0x4
    80022e56:	07e50513          	addi	a0,a0,126 # 80026ed0 <__func__.0+0x310>
    80022e5a:	0aa020ef          	jal	80024f04 <printf>
    80022e5e:	00026797          	auipc	a5,0x26
    80022e62:	1b37c783          	lbu	a5,435(a5) # 80049011 <excpt+0x1>
    80022e66:	c789                	beqz	a5,80022e70 <mix_instruction_1+0x240>
    80022e68:	6498                	ld	a4,8(s1)
    80022e6a:	47d9                	li	a5,22
    80022e6c:	00f70c63          	beq	a4,a5,80022e84 <mix_instruction_1+0x254>
    80022e70:	00004517          	auipc	a0,0x4
    80022e74:	06850513          	addi	a0,a0,104 # 80026ed8 <__func__.0+0x318>
    80022e78:	08c020ef          	jal	80024f04 <printf>
    80022e7c:	02900513          	li	a0,41
    80022e80:	68f000ef          	jal	80023d0e <putchar>
    80022e84:	4529                	li	a0,10
    80022e86:	689000ef          	jal	80023d0e <putchar>
    80022e8a:	c801                	beqz	s0,80022e9a <mix_instruction_1+0x26a>
    80022e8c:	00026797          	auipc	a5,0x26
    80022e90:	1857c783          	lbu	a5,389(a5) # 80049011 <excpt+0x1>
    80022e94:	4401                	li	s0,0
    80022e96:	7e079c63          	bnez	a5,8002368e <mix_instruction_1+0xa5e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80022e9a:	4511                	li	a0,4
    80022e9c:	d5bdd0ef          	jal	80000bf6 <goto_priv>
    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    hspt_init();
    80022ea0:	f40dd0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80022ea4:	97fdd0ef          	jal	80000822 <hpt_init>
    vspt_init();
    80022ea8:	809dd0ef          	jal	800006b0 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80022eac:	450d                	li	a0,3
    80022eae:	d49dd0ef          	jal	80000bf6 <goto_priv>

    set_prev_priv(PRIV_VU);
    80022eb2:	4501                	li	a0,0
    80022eb4:	c63dd0ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80022eb8:	0330000f          	fence	rw,rw
    80022ebc:	4785                	li	a5,1
    80022ebe:	00026717          	auipc	a4,0x26
    80022ec2:	18073523          	sd	zero,394(a4) # 80049048 <excpt+0x38>
    80022ec6:	00f49023          	sh	a5,0(s1)
    80022eca:	0330000f          	fence	rw,rw
    *((volatile uint64_t*) addr) = val;
    80022ece:	0000c917          	auipc	s2,0xc
    80022ed2:	3e290913          	addi	s2,s2,994 # 8002f2b0 <__func__.0+0x86f0>
    80022ed6:	00093683          	ld	a3,0(s2)
    80022eda:	44019737          	lui	a4,0x44019
    asm volatile(
    80022ede:	000807b7          	lui	a5,0x80
    80022ee2:	0706                	slli	a4,a4,0x1
    80022ee4:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80022ee6:	e314                	sd	a3,0(a4)
    80022ee8:	07b6                	slli	a5,a5,0xd
    80022eea:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80022eee:	08200593          	li	a1,130
    80022ef2:	00005617          	auipc	a2,0x5
    80022ef6:	94e60613          	addi	a2,a2,-1714 # 80027840 <__func__.0+0xc80>
    80022efa:	00004517          	auipc	a0,0x4
    80022efe:	fbe50513          	addi	a0,a0,-66 # 80026eb8 <__func__.0+0x2f8>
    80022f02:	002020ef          	jal	80024f04 <printf>
    80022f06:	00026797          	auipc	a5,0x26
    80022f0a:	10b7c783          	lbu	a5,267(a5) # 80049011 <excpt+0x1>
    80022f0e:	00004597          	auipc	a1,0x4
    80022f12:	f8258593          	addi	a1,a1,-126 # 80026e90 <__func__.0+0x2d0>
    80022f16:	e789                	bnez	a5,80022f20 <mix_instruction_1+0x2f0>
    80022f18:	00004597          	auipc	a1,0x4
    80022f1c:	f6858593          	addi	a1,a1,-152 # 80026e80 <__func__.0+0x2c0>
    80022f20:	00004517          	auipc	a0,0x4
    80022f24:	fb050513          	addi	a0,a0,-80 # 80026ed0 <__func__.0+0x310>
    80022f28:	7dd010ef          	jal	80024f04 <printf>
    80022f2c:	00026797          	auipc	a5,0x26
    80022f30:	0e57c783          	lbu	a5,229(a5) # 80049011 <excpt+0x1>
    80022f34:	7c079263          	bnez	a5,800236f8 <mix_instruction_1+0xac8>
    80022f38:	4529                	li	a0,10
    80022f3a:	5d5000ef          	jal	80023d0e <putchar>
    80022f3e:	c419                	beqz	s0,80022f4c <mix_instruction_1+0x31c>
    80022f40:	00026417          	auipc	s0,0x26
    80022f44:	0d144403          	lbu	s0,209(s0) # 80049011 <excpt+0x1>
    80022f48:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80022f4c:	4509                	li	a0,2
    80022f4e:	bc9dd0ef          	jal	80000b16 <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80022f52:	0330000f          	fence	rw,rw
    80022f56:	4785                	li	a5,1
    80022f58:	00026717          	auipc	a4,0x26
    80022f5c:	0e073823          	sd	zero,240(a4) # 80049048 <excpt+0x38>
    80022f60:	00f49023          	sh	a5,0(s1)
    80022f64:	0330000f          	fence	rw,rw
    80022f68:	00093683          	ld	a3,0(s2)
    80022f6c:	44019737          	lui	a4,0x44019
    80022f70:	000807b7          	lui	a5,0x80
    80022f74:	0706                	slli	a4,a4,0x1
    80022f76:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80022f78:	e314                	sd	a3,0(a4)
    80022f7a:	07b6                	slli	a5,a5,0xd
    80022f7c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80022f80:	08200593          	li	a1,130
    80022f84:	00005617          	auipc	a2,0x5
    80022f88:	8ec60613          	addi	a2,a2,-1812 # 80027870 <__func__.0+0xcb0>
    80022f8c:	00004517          	auipc	a0,0x4
    80022f90:	f2c50513          	addi	a0,a0,-212 # 80026eb8 <__func__.0+0x2f8>
    80022f94:	771010ef          	jal	80024f04 <printf>
    80022f98:	00026797          	auipc	a5,0x26
    80022f9c:	0797c783          	lbu	a5,121(a5) # 80049011 <excpt+0x1>
    80022fa0:	00004597          	auipc	a1,0x4
    80022fa4:	ef058593          	addi	a1,a1,-272 # 80026e90 <__func__.0+0x2d0>
    80022fa8:	cf89                	beqz	a5,80022fc2 <mix_instruction_1+0x392>
    80022faa:	6498                	ld	a4,8(s1)
    80022fac:	47b5                	li	a5,13
    80022fae:	00004597          	auipc	a1,0x4
    80022fb2:	ed258593          	addi	a1,a1,-302 # 80026e80 <__func__.0+0x2c0>
    80022fb6:	00f70663          	beq	a4,a5,80022fc2 <mix_instruction_1+0x392>
    80022fba:	00004597          	auipc	a1,0x4
    80022fbe:	ed658593          	addi	a1,a1,-298 # 80026e90 <__func__.0+0x2d0>
    80022fc2:	00004517          	auipc	a0,0x4
    80022fc6:	f0e50513          	addi	a0,a0,-242 # 80026ed0 <__func__.0+0x310>
    80022fca:	73b010ef          	jal	80024f04 <printf>
    80022fce:	00026797          	auipc	a5,0x26
    80022fd2:	0437c783          	lbu	a5,67(a5) # 80049011 <excpt+0x1>
    80022fd6:	c789                	beqz	a5,80022fe0 <mix_instruction_1+0x3b0>
    80022fd8:	6498                	ld	a4,8(s1)
    80022fda:	47b5                	li	a5,13
    80022fdc:	00f70c63          	beq	a4,a5,80022ff4 <mix_instruction_1+0x3c4>
    80022fe0:	00004517          	auipc	a0,0x4
    80022fe4:	ef850513          	addi	a0,a0,-264 # 80026ed8 <__func__.0+0x318>
    80022fe8:	71d010ef          	jal	80024f04 <printf>
    80022fec:	02900513          	li	a0,41
    80022ff0:	51f000ef          	jal	80023d0e <putchar>
    80022ff4:	4529                	li	a0,10
    80022ff6:	519000ef          	jal	80023d0e <putchar>
    80022ffa:	c801                	beqz	s0,8002300a <mix_instruction_1+0x3da>
    80022ffc:	00026797          	auipc	a5,0x26
    80023000:	0157c783          	lbu	a5,21(a5) # 80049011 <excpt+0x1>
    80023004:	4401                	li	s0,0
    80023006:	6a079563          	bnez	a5,800236b0 <mix_instruction_1+0xa80>


//----------------------------------------------------------------------


    goto_priv(PRIV_M);     
    8002300a:	4511                	li	a0,4
    8002300c:	bebdd0ef          	jal	80000bf6 <goto_priv>

    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80023010:	000407b7          	lui	a5,0x40
    80023014:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80023018:	450d                	li	a0,3
    8002301a:	bdddd0ef          	jal	80000bf6 <goto_priv>

    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8002301e:	0330000f          	fence	rw,rw
    80023022:	4785                	li	a5,1
    80023024:	00026717          	auipc	a4,0x26
    80023028:	02073223          	sd	zero,36(a4) # 80049048 <excpt+0x38>
    8002302c:	00f49023          	sh	a5,0(s1)
    80023030:	0330000f          	fence	rw,rw
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80023034:	37ab77b7          	lui	a5,0x37ab7
    80023038:	00080737          	lui	a4,0x80
    8002303c:	078a                	slli	a5,a5,0x2
    8002303e:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80023040:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80023044:	0736                	slli	a4,a4,0xd
    80023046:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    8002304a:	08200593          	li	a1,130
    8002304e:	00009617          	auipc	a2,0x9
    80023052:	36260613          	addi	a2,a2,866 # 8002c3b0 <__func__.0+0x57f0>
    80023056:	00004517          	auipc	a0,0x4
    8002305a:	e6250513          	addi	a0,a0,-414 # 80026eb8 <__func__.0+0x2f8>
    8002305e:	6a7010ef          	jal	80024f04 <printf>
    80023062:	00026797          	auipc	a5,0x26
    80023066:	faf7c783          	lbu	a5,-81(a5) # 80049011 <excpt+0x1>
    8002306a:	00004597          	auipc	a1,0x4
    8002306e:	e2658593          	addi	a1,a1,-474 # 80026e90 <__func__.0+0x2d0>
    80023072:	cf89                	beqz	a5,8002308c <mix_instruction_1+0x45c>
    80023074:	6498                	ld	a4,8(s1)
    80023076:	47bd                	li	a5,15
    80023078:	00004597          	auipc	a1,0x4
    8002307c:	e0858593          	addi	a1,a1,-504 # 80026e80 <__func__.0+0x2c0>
    80023080:	00f70663          	beq	a4,a5,8002308c <mix_instruction_1+0x45c>
    80023084:	00004597          	auipc	a1,0x4
    80023088:	e0c58593          	addi	a1,a1,-500 # 80026e90 <__func__.0+0x2d0>
    8002308c:	00004517          	auipc	a0,0x4
    80023090:	e4450513          	addi	a0,a0,-444 # 80026ed0 <__func__.0+0x310>
    80023094:	671010ef          	jal	80024f04 <printf>
    80023098:	00026797          	auipc	a5,0x26
    8002309c:	f797c783          	lbu	a5,-135(a5) # 80049011 <excpt+0x1>
    800230a0:	c789                	beqz	a5,800230aa <mix_instruction_1+0x47a>
    800230a2:	6498                	ld	a4,8(s1)
    800230a4:	47bd                	li	a5,15
    800230a6:	00f70c63          	beq	a4,a5,800230be <mix_instruction_1+0x48e>
    800230aa:	00004517          	auipc	a0,0x4
    800230ae:	e2e50513          	addi	a0,a0,-466 # 80026ed8 <__func__.0+0x318>
    800230b2:	653010ef          	jal	80024f04 <printf>
    800230b6:	02900513          	li	a0,41
    800230ba:	455000ef          	jal	80023d0e <putchar>
    800230be:	4529                	li	a0,10
    800230c0:	44f000ef          	jal	80023d0e <putchar>
    800230c4:	c801                	beqz	s0,800230d4 <mix_instruction_1+0x4a4>
    800230c6:	00026797          	auipc	a5,0x26
    800230ca:	f4b7c783          	lbu	a5,-181(a5) # 80049011 <excpt+0x1>
    800230ce:	4401                	li	s0,0
    800230d0:	5e079663          	bnez	a5,800236bc <mix_instruction_1+0xa8c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    800230d4:	4511                	li	a0,4
    800230d6:	b21dd0ef          	jal	80000bf6 <goto_priv>
    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    800230da:	57fd                	li	a5,-1
    800230dc:	03f79713          	slli	a4,a5,0x3f
    800230e0:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    800230e4:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    800230e8:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    800230ec:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    800230f0:	64402973          	csrr	s2,hip
    800230f4:	00004617          	auipc	a2,0x4
    800230f8:	24460613          	addi	a2,a2,580 # 80027338 <__func__.0+0x778>
    800230fc:	08200593          	li	a1,130
    80023100:	00004517          	auipc	a0,0x4
    80023104:	db850513          	addi	a0,a0,-584 # 80026eb8 <__func__.0+0x2f8>
    80023108:	4991                	li	s3,4
    8002310a:	5fb010ef          	jal	80024f04 <printf>
    8002310e:	5b390c63          	beq	s2,s3,800236c6 <mix_instruction_1+0xa96>
    80023112:	00004597          	auipc	a1,0x4
    80023116:	d7e58593          	addi	a1,a1,-642 # 80026e90 <__func__.0+0x2d0>
    8002311a:	00004517          	auipc	a0,0x4
    8002311e:	db650513          	addi	a0,a0,-586 # 80026ed0 <__func__.0+0x310>
    80023122:	5e3010ef          	jal	80024f04 <printf>
    80023126:	00004517          	auipc	a0,0x4
    8002312a:	db250513          	addi	a0,a0,-590 # 80026ed8 <__func__.0+0x318>
    8002312e:	5d7010ef          	jal	80024f04 <printf>
    80023132:	86ce                	mv	a3,s3
    80023134:	864a                	mv	a2,s2
    80023136:	02d00593          	li	a1,45
    8002313a:	00004517          	auipc	a0,0x4
    8002313e:	20650513          	addi	a0,a0,518 # 80027340 <__func__.0+0x780>
    80023142:	5c3010ef          	jal	80024f04 <printf>
    80023146:	02900513          	li	a0,41
    8002314a:	3c5000ef          	jal	80023d0e <putchar>
    8002314e:	4529                	li	a0,10
    80023150:	3bf000ef          	jal	80023d0e <putchar>
    80023154:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    80023156:	14402973          	csrr	s2,sip
    8002315a:	00004617          	auipc	a2,0x4
    8002315e:	1fe60613          	addi	a2,a2,510 # 80027358 <__func__.0+0x798>
    80023162:	08200593          	li	a1,130
    80023166:	00004517          	auipc	a0,0x4
    8002316a:	d5250513          	addi	a0,a0,-686 # 80026eb8 <__func__.0+0x2f8>
    8002316e:	22200993          	li	s3,546
    80023172:	593010ef          	jal	80024f04 <printf>
    80023176:	4f390863          	beq	s2,s3,80023666 <mix_instruction_1+0xa36>
    8002317a:	00004597          	auipc	a1,0x4
    8002317e:	d1658593          	addi	a1,a1,-746 # 80026e90 <__func__.0+0x2d0>
    80023182:	00004517          	auipc	a0,0x4
    80023186:	d4e50513          	addi	a0,a0,-690 # 80026ed0 <__func__.0+0x310>
    8002318a:	57b010ef          	jal	80024f04 <printf>
    8002318e:	00004517          	auipc	a0,0x4
    80023192:	d4a50513          	addi	a0,a0,-694 # 80026ed8 <__func__.0+0x318>
    80023196:	56f010ef          	jal	80024f04 <printf>
    8002319a:	86ce                	mv	a3,s3
    8002319c:	864a                	mv	a2,s2
    8002319e:	02d00593          	li	a1,45
    800231a2:	00004517          	auipc	a0,0x4
    800231a6:	19e50513          	addi	a0,a0,414 # 80027340 <__func__.0+0x780>
    800231aa:	55b010ef          	jal	80024f04 <printf>
    800231ae:	02900513          	li	a0,41
    800231b2:	35d000ef          	jal	80023d0e <putchar>
    800231b6:	4529                	li	a0,10
    800231b8:	357000ef          	jal	80023d0e <putchar>
    800231bc:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    800231be:	24402973          	csrr	s2,vsip
    800231c2:	00004617          	auipc	a2,0x4
    800231c6:	16660613          	addi	a2,a2,358 # 80027328 <__func__.0+0x768>
    800231ca:	08200593          	li	a1,130
    800231ce:	00004517          	auipc	a0,0x4
    800231d2:	cea50513          	addi	a0,a0,-790 # 80026eb8 <__func__.0+0x2f8>
    800231d6:	4989                	li	s3,2
    800231d8:	52d010ef          	jal	80024f04 <printf>
    800231dc:	47390763          	beq	s2,s3,8002364a <mix_instruction_1+0xa1a>
    800231e0:	00004597          	auipc	a1,0x4
    800231e4:	cb058593          	addi	a1,a1,-848 # 80026e90 <__func__.0+0x2d0>
    800231e8:	00004517          	auipc	a0,0x4
    800231ec:	ce850513          	addi	a0,a0,-792 # 80026ed0 <__func__.0+0x310>
    800231f0:	515010ef          	jal	80024f04 <printf>
    800231f4:	00004517          	auipc	a0,0x4
    800231f8:	ce450513          	addi	a0,a0,-796 # 80026ed8 <__func__.0+0x318>
    800231fc:	509010ef          	jal	80024f04 <printf>
    80023200:	86ce                	mv	a3,s3
    80023202:	864a                	mv	a2,s2
    80023204:	02d00593          	li	a1,45
    80023208:	00004517          	auipc	a0,0x4
    8002320c:	13850513          	addi	a0,a0,312 # 80027340 <__func__.0+0x780>
    80023210:	4f5010ef          	jal	80024f04 <printf>
    80023214:	02900513          	li	a0,41
    80023218:	2f7000ef          	jal	80023d0e <putchar>
    8002321c:	4529                	li	a0,10
    8002321e:	2f1000ef          	jal	80023d0e <putchar>
    80023222:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80023224:	4509                	li	a0,2
    80023226:	9d1dd0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    8002322a:	14402973          	csrr	s2,sip
    8002322e:	00004617          	auipc	a2,0x4
    80023232:	13260613          	addi	a2,a2,306 # 80027360 <__func__.0+0x7a0>
    80023236:	08200593          	li	a1,130
    8002323a:	00004517          	auipc	a0,0x4
    8002323e:	c7e50513          	addi	a0,a0,-898 # 80026eb8 <__func__.0+0x2f8>
    80023242:	4989                	li	s3,2
    80023244:	4c1010ef          	jal	80024f04 <printf>
    80023248:	3f390363          	beq	s2,s3,8002362e <mix_instruction_1+0x9fe>
    8002324c:	00004597          	auipc	a1,0x4
    80023250:	c4458593          	addi	a1,a1,-956 # 80026e90 <__func__.0+0x2d0>
    80023254:	00004517          	auipc	a0,0x4
    80023258:	c7c50513          	addi	a0,a0,-900 # 80026ed0 <__func__.0+0x310>
    8002325c:	4a9010ef          	jal	80024f04 <printf>
    80023260:	00004517          	auipc	a0,0x4
    80023264:	c7850513          	addi	a0,a0,-904 # 80026ed8 <__func__.0+0x318>
    80023268:	49d010ef          	jal	80024f04 <printf>
    8002326c:	86ce                	mv	a3,s3
    8002326e:	864a                	mv	a2,s2
    80023270:	02d00593          	li	a1,45
    80023274:	00004517          	auipc	a0,0x4
    80023278:	0cc50513          	addi	a0,a0,204 # 80027340 <__func__.0+0x780>
    8002327c:	489010ef          	jal	80024f04 <printf>
    80023280:	02900513          	li	a0,41
    80023284:	28b000ef          	jal	80023d0e <putchar>
    80023288:	4529                	li	a0,10
    8002328a:	285000ef          	jal	80023d0e <putchar>
    8002328e:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80023290:	4511                	li	a0,4
    80023292:	965dd0ef          	jal	80000bf6 <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80023296:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    8002329a:	64402973          	csrr	s2,hip
    8002329e:	00004617          	auipc	a2,0x4
    800232a2:	09a60613          	addi	a2,a2,154 # 80027338 <__func__.0+0x778>
    800232a6:	08200593          	li	a1,130
    800232aa:	00004517          	auipc	a0,0x4
    800232ae:	c0e50513          	addi	a0,a0,-1010 # 80026eb8 <__func__.0+0x2f8>
    800232b2:	453010ef          	jal	80024f04 <printf>
    800232b6:	34090e63          	beqz	s2,80023612 <mix_instruction_1+0x9e2>
    800232ba:	00004597          	auipc	a1,0x4
    800232be:	bd658593          	addi	a1,a1,-1066 # 80026e90 <__func__.0+0x2d0>
    800232c2:	00004517          	auipc	a0,0x4
    800232c6:	c0e50513          	addi	a0,a0,-1010 # 80026ed0 <__func__.0+0x310>
    800232ca:	43b010ef          	jal	80024f04 <printf>
    800232ce:	00004517          	auipc	a0,0x4
    800232d2:	c0a50513          	addi	a0,a0,-1014 # 80026ed8 <__func__.0+0x318>
    800232d6:	42f010ef          	jal	80024f04 <printf>
    800232da:	864a                	mv	a2,s2
    800232dc:	4681                	li	a3,0
    800232de:	02d00593          	li	a1,45
    800232e2:	00004517          	auipc	a0,0x4
    800232e6:	05e50513          	addi	a0,a0,94 # 80027340 <__func__.0+0x780>
    800232ea:	41b010ef          	jal	80024f04 <printf>
    800232ee:	02900513          	li	a0,41
    800232f2:	21d000ef          	jal	80023d0e <putchar>
    800232f6:	4529                	li	a0,10
    800232f8:	217000ef          	jal	80023d0e <putchar>
    800232fc:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    800232fe:	14402973          	csrr	s2,sip
    80023302:	00004617          	auipc	a2,0x4
    80023306:	05660613          	addi	a2,a2,86 # 80027358 <__func__.0+0x798>
    8002330a:	08200593          	li	a1,130
    8002330e:	00004517          	auipc	a0,0x4
    80023312:	baa50513          	addi	a0,a0,-1110 # 80026eb8 <__func__.0+0x2f8>
    80023316:	3ef010ef          	jal	80024f04 <printf>
    8002331a:	2c090e63          	beqz	s2,800235f6 <mix_instruction_1+0x9c6>
    8002331e:	00004597          	auipc	a1,0x4
    80023322:	b7258593          	addi	a1,a1,-1166 # 80026e90 <__func__.0+0x2d0>
    80023326:	00004517          	auipc	a0,0x4
    8002332a:	baa50513          	addi	a0,a0,-1110 # 80026ed0 <__func__.0+0x310>
    8002332e:	3d7010ef          	jal	80024f04 <printf>
    80023332:	00004517          	auipc	a0,0x4
    80023336:	ba650513          	addi	a0,a0,-1114 # 80026ed8 <__func__.0+0x318>
    8002333a:	3cb010ef          	jal	80024f04 <printf>
    8002333e:	864a                	mv	a2,s2
    80023340:	4681                	li	a3,0
    80023342:	02d00593          	li	a1,45
    80023346:	00004517          	auipc	a0,0x4
    8002334a:	ffa50513          	addi	a0,a0,-6 # 80027340 <__func__.0+0x780>
    8002334e:	3b7010ef          	jal	80024f04 <printf>
    80023352:	02900513          	li	a0,41
    80023356:	1b9000ef          	jal	80023d0e <putchar>
    8002335a:	4529                	li	a0,10
    8002335c:	1b3000ef          	jal	80023d0e <putchar>
    80023360:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80023362:	24402973          	csrr	s2,vsip
    80023366:	00004617          	auipc	a2,0x4
    8002336a:	fc260613          	addi	a2,a2,-62 # 80027328 <__func__.0+0x768>
    8002336e:	08200593          	li	a1,130
    80023372:	00004517          	auipc	a0,0x4
    80023376:	b4650513          	addi	a0,a0,-1210 # 80026eb8 <__func__.0+0x2f8>
    8002337a:	38b010ef          	jal	80024f04 <printf>
    8002337e:	24090e63          	beqz	s2,800235da <mix_instruction_1+0x9aa>
    80023382:	00004597          	auipc	a1,0x4
    80023386:	b0e58593          	addi	a1,a1,-1266 # 80026e90 <__func__.0+0x2d0>
    8002338a:	00004517          	auipc	a0,0x4
    8002338e:	b4650513          	addi	a0,a0,-1210 # 80026ed0 <__func__.0+0x310>
    80023392:	373010ef          	jal	80024f04 <printf>
    80023396:	00004517          	auipc	a0,0x4
    8002339a:	b4250513          	addi	a0,a0,-1214 # 80026ed8 <__func__.0+0x318>
    8002339e:	367010ef          	jal	80024f04 <printf>
    800233a2:	864a                	mv	a2,s2
    800233a4:	4681                	li	a3,0
    800233a6:	02d00593          	li	a1,45
    800233aa:	00004517          	auipc	a0,0x4
    800233ae:	f9650513          	addi	a0,a0,-106 # 80027340 <__func__.0+0x780>
    800233b2:	353010ef          	jal	80024f04 <printf>
    800233b6:	02900513          	li	a0,41
    800233ba:	155000ef          	jal	80023d0e <putchar>
    800233be:	4529                	li	a0,10
    800233c0:	14f000ef          	jal	80023d0e <putchar>
    800233c4:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    800233c6:	4509                	li	a0,2
    800233c8:	82fdd0ef          	jal	80000bf6 <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800233cc:	14402973          	csrr	s2,sip
    800233d0:	00004617          	auipc	a2,0x4
    800233d4:	f9060613          	addi	a2,a2,-112 # 80027360 <__func__.0+0x7a0>
    800233d8:	08200593          	li	a1,130
    800233dc:	00004517          	auipc	a0,0x4
    800233e0:	adc50513          	addi	a0,a0,-1316 # 80026eb8 <__func__.0+0x2f8>
    800233e4:	321010ef          	jal	80024f04 <printf>
    800233e8:	1c090b63          	beqz	s2,800235be <mix_instruction_1+0x98e>
    800233ec:	00004597          	auipc	a1,0x4
    800233f0:	aa458593          	addi	a1,a1,-1372 # 80026e90 <__func__.0+0x2d0>
    800233f4:	00004517          	auipc	a0,0x4
    800233f8:	adc50513          	addi	a0,a0,-1316 # 80026ed0 <__func__.0+0x310>
    800233fc:	309010ef          	jal	80024f04 <printf>
    80023400:	00004517          	auipc	a0,0x4
    80023404:	ad850513          	addi	a0,a0,-1320 # 80026ed8 <__func__.0+0x318>
    80023408:	2fd010ef          	jal	80024f04 <printf>
    8002340c:	864a                	mv	a2,s2
    8002340e:	4681                	li	a3,0
    80023410:	02d00593          	li	a1,45
    80023414:	00004517          	auipc	a0,0x4
    80023418:	f2c50513          	addi	a0,a0,-212 # 80027340 <__func__.0+0x780>
    8002341c:	2e9010ef          	jal	80024f04 <printf>
    80023420:	02900513          	li	a0,41
    80023424:	0eb000ef          	jal	80023d0e <putchar>
    80023428:	4529                	li	a0,10
    8002342a:	0e5000ef          	jal	80023d0e <putchar>
    8002342e:	4401                	li	s0,0
    goto_priv(PRIV_M);   
    80023430:	4511                	li	a0,4
    80023432:	fc4dd0ef          	jal	80000bf6 <goto_priv>


//----------------------------------------------------------------------
    //执行取指指令二级地址翻译阶段时，pte.x=0
    goto_priv(PRIV_VS);
    80023436:	4509                	li	a0,2
    80023438:	fbedd0ef          	jal	80000bf6 <goto_priv>
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    8002343c:	0330000f          	fence	rw,rw
    80023440:	4785                	li	a5,1
    80023442:	00026717          	auipc	a4,0x26
    80023446:	c0073323          	sd	zero,-1018(a4) # 80049048 <excpt+0x38>
    8002344a:	00f49023          	sh	a5,0(s1)
    8002344e:	0330000f          	fence	rw,rw
    TEST_EXEC_EXCEPT(vaddr); 
    80023452:	400137b7          	lui	a5,0x40013
    80023456:	078a                	slli	a5,a5,0x2
    80023458:	00000297          	auipc	t0,0x0
    8002345c:	00c28293          	addi	t0,t0,12 # 80023464 <mix_instruction_1+0x834>
    80023460:	0254bc23          	sd	t0,56(s1)
    80023464:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80023466:	08200593          	li	a1,130
    8002346a:	0000a617          	auipc	a2,0xa
    8002346e:	dc660613          	addi	a2,a2,-570 # 8002d230 <__func__.0+0x6670>
    80023472:	00004517          	auipc	a0,0x4
    80023476:	a4650513          	addi	a0,a0,-1466 # 80026eb8 <__func__.0+0x2f8>
    8002347a:	28b010ef          	jal	80024f04 <printf>
    8002347e:	00026797          	auipc	a5,0x26
    80023482:	b937c783          	lbu	a5,-1133(a5) # 80049011 <excpt+0x1>
    80023486:	00004597          	auipc	a1,0x4
    8002348a:	a0a58593          	addi	a1,a1,-1526 # 80026e90 <__func__.0+0x2d0>
    8002348e:	cf89                	beqz	a5,800234a8 <mix_instruction_1+0x878>
    80023490:	6498                	ld	a4,8(s1)
    80023492:	47d1                	li	a5,20
    80023494:	00004597          	auipc	a1,0x4
    80023498:	9ec58593          	addi	a1,a1,-1556 # 80026e80 <__func__.0+0x2c0>
    8002349c:	00f70663          	beq	a4,a5,800234a8 <mix_instruction_1+0x878>
    800234a0:	00004597          	auipc	a1,0x4
    800234a4:	9f058593          	addi	a1,a1,-1552 # 80026e90 <__func__.0+0x2d0>
    800234a8:	00004517          	auipc	a0,0x4
    800234ac:	a2850513          	addi	a0,a0,-1496 # 80026ed0 <__func__.0+0x310>
    800234b0:	255010ef          	jal	80024f04 <printf>
    800234b4:	00026797          	auipc	a5,0x26
    800234b8:	b5d7c783          	lbu	a5,-1187(a5) # 80049011 <excpt+0x1>
    800234bc:	c789                	beqz	a5,800234c6 <mix_instruction_1+0x896>
    800234be:	6498                	ld	a4,8(s1)
    800234c0:	47d1                	li	a5,20
    800234c2:	00f70c63          	beq	a4,a5,800234da <mix_instruction_1+0x8aa>
    800234c6:	00004517          	auipc	a0,0x4
    800234ca:	a1250513          	addi	a0,a0,-1518 # 80026ed8 <__func__.0+0x318>
    800234ce:	237010ef          	jal	80024f04 <printf>
    800234d2:	02900513          	li	a0,41
    800234d6:	039000ef          	jal	80023d0e <putchar>
    800234da:	4529                	li	a0,10
    800234dc:	033000ef          	jal	80023d0e <putchar>
    800234e0:	c801                	beqz	s0,800234f0 <mix_instruction_1+0x8c0>
    800234e2:	00026797          	auipc	a5,0x26
    800234e6:	b2f7c783          	lbu	a5,-1233(a5) # 80049011 <excpt+0x1>
    800234ea:	4401                	li	s0,0
    800234ec:	1a079d63          	bnez	a5,800236a6 <mix_instruction_1+0xa76>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );
//----------------------------------------------------------------------
    TEST_SETUP_EXCEPT();
    800234f0:	0330000f          	fence	rw,rw
    800234f4:	4905                	li	s2,1
    800234f6:	00026797          	auipc	a5,0x26
    800234fa:	b407b923          	sd	zero,-1198(a5) # 80049048 <excpt+0x38>
    800234fe:	01249023          	sh	s2,0(s1)
    80023502:	0330000f          	fence	rw,rw
    
    
    goto_priv(PRIV_HS);     
    80023506:	450d                	li	a0,3
    80023508:	eeedd0ef          	jal	80000bf6 <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8002350c:	0330000f          	fence	rw,rw
    80023510:	00026797          	auipc	a5,0x26
    80023514:	b207bc23          	sd	zero,-1224(a5) # 80049048 <excpt+0x38>
    80023518:	01249023          	sh	s2,0(s1)
    8002351c:	0330000f          	fence	rw,rw
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80023520:	001007b7          	lui	a5,0x100
    80023524:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    80023528:	07b2                	slli	a5,a5,0xc
    8002352a:	97ca                	add	a5,a5,s2
    8002352c:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    80023530:	08200593          	li	a1,130
    80023534:	00007617          	auipc	a2,0x7
    80023538:	9a460613          	addi	a2,a2,-1628 # 80029ed8 <__func__.0+0x3318>
    8002353c:	00004517          	auipc	a0,0x4
    80023540:	97c50513          	addi	a0,a0,-1668 # 80026eb8 <__func__.0+0x2f8>
    80023544:	1c1010ef          	jal	80024f04 <printf>
    80023548:	00026797          	auipc	a5,0x26
    8002354c:	ac97c783          	lbu	a5,-1335(a5) # 80049011 <excpt+0x1>
    80023550:	00004597          	auipc	a1,0x4
    80023554:	94058593          	addi	a1,a1,-1728 # 80026e90 <__func__.0+0x2d0>
    80023558:	e789                	bnez	a5,80023562 <mix_instruction_1+0x932>
    8002355a:	00004597          	auipc	a1,0x4
    8002355e:	92658593          	addi	a1,a1,-1754 # 80026e80 <__func__.0+0x2c0>
    80023562:	00004517          	auipc	a0,0x4
    80023566:	96e50513          	addi	a0,a0,-1682 # 80026ed0 <__func__.0+0x310>
    8002356a:	19b010ef          	jal	80024f04 <printf>
    8002356e:	00026797          	auipc	a5,0x26
    80023572:	aa37c783          	lbu	a5,-1373(a5) # 80049011 <excpt+0x1>
    80023576:	16079663          	bnez	a5,800236e2 <mix_instruction_1+0xab2>
    8002357a:	4529                	li	a0,10
    8002357c:	792000ef          	jal	80023d0e <putchar>
    80023580:	c419                	beqz	s0,8002358e <mix_instruction_1+0x95e>
    80023582:	00026797          	auipc	a5,0x26
    80023586:	a8f7c783          	lbu	a5,-1393(a5) # 80049011 <excpt+0x1>
    8002358a:	0e078c63          	beqz	a5,80023682 <mix_instruction_1+0xa52>
    8002358e:	4401                	li	s0,0
        excpt.triggered == false
    );
//----------------------------------------------------------------------

    TEST_END();
    80023590:	00004597          	auipc	a1,0x4
    80023594:	90058593          	addi	a1,a1,-1792 # 80026e90 <__func__.0+0x2d0>
    80023598:	00004517          	auipc	a0,0x4
    8002359c:	9a050513          	addi	a0,a0,-1632 # 80026f38 <__func__.0+0x378>
    800235a0:	165010ef          	jal	80024f04 <printf>
    800235a4:	4511                	li	a0,4
    800235a6:	e50dd0ef          	jal	80000bf6 <goto_priv>
    800235aa:	f03dd0ef          	jal	800014ac <reset_state>

    800235ae:	70a2                	ld	ra,40(sp)
    800235b0:	8522                	mv	a0,s0
    800235b2:	7402                	ld	s0,32(sp)
    800235b4:	64e2                	ld	s1,24(sp)
    800235b6:	6942                	ld	s2,16(sp)
    800235b8:	69a2                	ld	s3,8(sp)
    800235ba:	6145                	addi	sp,sp,48
    800235bc:	8082                	ret
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800235be:	00004597          	auipc	a1,0x4
    800235c2:	8c258593          	addi	a1,a1,-1854 # 80026e80 <__func__.0+0x2c0>
    800235c6:	00004517          	auipc	a0,0x4
    800235ca:	90a50513          	addi	a0,a0,-1782 # 80026ed0 <__func__.0+0x310>
    800235ce:	137010ef          	jal	80024f04 <printf>
    800235d2:	4529                	li	a0,10
    800235d4:	73a000ef          	jal	80023d0e <putchar>
    800235d8:	bda1                	j	80023430 <mix_instruction_1+0x800>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800235da:	00004597          	auipc	a1,0x4
    800235de:	8a658593          	addi	a1,a1,-1882 # 80026e80 <__func__.0+0x2c0>
    800235e2:	00004517          	auipc	a0,0x4
    800235e6:	8ee50513          	addi	a0,a0,-1810 # 80026ed0 <__func__.0+0x310>
    800235ea:	11b010ef          	jal	80024f04 <printf>
    800235ee:	4529                	li	a0,10
    800235f0:	71e000ef          	jal	80023d0e <putchar>
    800235f4:	bbc9                	j	800233c6 <mix_instruction_1+0x796>
    check_csr_rd("sip", sip, 0x0);
    800235f6:	00004597          	auipc	a1,0x4
    800235fa:	88a58593          	addi	a1,a1,-1910 # 80026e80 <__func__.0+0x2c0>
    800235fe:	00004517          	auipc	a0,0x4
    80023602:	8d250513          	addi	a0,a0,-1838 # 80026ed0 <__func__.0+0x310>
    80023606:	0ff010ef          	jal	80024f04 <printf>
    8002360a:	4529                	li	a0,10
    8002360c:	702000ef          	jal	80023d0e <putchar>
    80023610:	bb89                	j	80023362 <mix_instruction_1+0x732>
    check_csr_rd("hip", CSR_HIP, 0x0);
    80023612:	00004597          	auipc	a1,0x4
    80023616:	86e58593          	addi	a1,a1,-1938 # 80026e80 <__func__.0+0x2c0>
    8002361a:	00004517          	auipc	a0,0x4
    8002361e:	8b650513          	addi	a0,a0,-1866 # 80026ed0 <__func__.0+0x310>
    80023622:	0e3010ef          	jal	80024f04 <printf>
    80023626:	4529                	li	a0,10
    80023628:	6e6000ef          	jal	80023d0e <putchar>
    8002362c:	b9c9                	j	800232fe <mix_instruction_1+0x6ce>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    8002362e:	00004597          	auipc	a1,0x4
    80023632:	85258593          	addi	a1,a1,-1966 # 80026e80 <__func__.0+0x2c0>
    80023636:	00004517          	auipc	a0,0x4
    8002363a:	89a50513          	addi	a0,a0,-1894 # 80026ed0 <__func__.0+0x310>
    8002363e:	0c7010ef          	jal	80024f04 <printf>
    80023642:	4529                	li	a0,10
    80023644:	6ca000ef          	jal	80023d0e <putchar>
    80023648:	b1a1                	j	80023290 <mix_instruction_1+0x660>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    8002364a:	00004597          	auipc	a1,0x4
    8002364e:	83658593          	addi	a1,a1,-1994 # 80026e80 <__func__.0+0x2c0>
    80023652:	00004517          	auipc	a0,0x4
    80023656:	87e50513          	addi	a0,a0,-1922 # 80026ed0 <__func__.0+0x310>
    8002365a:	0ab010ef          	jal	80024f04 <printf>
    8002365e:	4529                	li	a0,10
    80023660:	6ae000ef          	jal	80023d0e <putchar>
    80023664:	b6c1                	j	80023224 <mix_instruction_1+0x5f4>
    check_csr_rd("sip", sip, 0x222);    
    80023666:	00004597          	auipc	a1,0x4
    8002366a:	81a58593          	addi	a1,a1,-2022 # 80026e80 <__func__.0+0x2c0>
    8002366e:	00004517          	auipc	a0,0x4
    80023672:	86250513          	addi	a0,a0,-1950 # 80026ed0 <__func__.0+0x310>
    80023676:	08f010ef          	jal	80024f04 <printf>
    8002367a:	4529                	li	a0,10
    8002367c:	692000ef          	jal	80023d0e <putchar>
    80023680:	be3d                	j	800231be <mix_instruction_1+0x58e>
    TEST_ASSERT("load byte address is not aligned successful",         
    80023682:	4405                	li	s0,1
    TEST_END();
    80023684:	00003597          	auipc	a1,0x3
    80023688:	7fc58593          	addi	a1,a1,2044 # 80026e80 <__func__.0+0x2c0>
    8002368c:	b731                	j	80023598 <mix_instruction_1+0x968>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8002368e:	6480                	ld	s0,8(s1)
    80023690:	1429                	addi	s0,s0,-22
    80023692:	00143413          	seqz	s0,s0
    80023696:	805ff06f          	j	80022e9a <mix_instruction_1+0x26a>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8002369a:	6480                	ld	s0,8(s1)
    8002369c:	1479                	addi	s0,s0,-2
    8002369e:	00143413          	seqz	s0,s0
    800236a2:	f38ff06f          	j	80022dda <mix_instruction_1+0x1aa>
    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800236a6:	6480                	ld	s0,8(s1)
    800236a8:	1431                	addi	s0,s0,-20
    800236aa:	00143413          	seqz	s0,s0
    800236ae:	b589                	j	800234f0 <mix_instruction_1+0x8c0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800236b0:	6480                	ld	s0,8(s1)
    800236b2:	144d                	addi	s0,s0,-13
    800236b4:	00143413          	seqz	s0,s0
    800236b8:	953ff06f          	j	8002300a <mix_instruction_1+0x3da>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800236bc:	6480                	ld	s0,8(s1)
    800236be:	1445                	addi	s0,s0,-15
    800236c0:	00143413          	seqz	s0,s0
    800236c4:	bc01                	j	800230d4 <mix_instruction_1+0x4a4>
    check_csr_rd("hip", CSR_HIP, 0x4);
    800236c6:	00003597          	auipc	a1,0x3
    800236ca:	7ba58593          	addi	a1,a1,1978 # 80026e80 <__func__.0+0x2c0>
    800236ce:	00004517          	auipc	a0,0x4
    800236d2:	80250513          	addi	a0,a0,-2046 # 80026ed0 <__func__.0+0x310>
    800236d6:	02f010ef          	jal	80024f04 <printf>
    800236da:	4529                	li	a0,10
    800236dc:	632000ef          	jal	80023d0e <putchar>
    800236e0:	bc9d                	j	80023156 <mix_instruction_1+0x526>
    TEST_ASSERT("load byte address is not aligned successful",         
    800236e2:	00003517          	auipc	a0,0x3
    800236e6:	7f650513          	addi	a0,a0,2038 # 80026ed8 <__func__.0+0x318>
    800236ea:	01b010ef          	jal	80024f04 <printf>
    800236ee:	02900513          	li	a0,41
    800236f2:	61c000ef          	jal	80023d0e <putchar>
    800236f6:	b551                	j	8002357a <mix_instruction_1+0x94a>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800236f8:	00003517          	auipc	a0,0x3
    800236fc:	7e050513          	addi	a0,a0,2016 # 80026ed8 <__func__.0+0x318>
    80023700:	005010ef          	jal	80024f04 <printf>
    80023704:	02900513          	li	a0,41
    80023708:	606000ef          	jal	80023d0e <putchar>
    8002370c:	82dff06f          	j	80022f38 <mix_instruction_1+0x308>

0000000080023710 <ebreak_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool ebreak_tests_1() {
    80023710:	1101                	addi	sp,sp,-32

    TEST_START();
    80023712:	00003597          	auipc	a1,0x3
    80023716:	46e58593          	addi	a1,a1,1134 # 80026b80 <__func__.4>
    8002371a:	00003517          	auipc	a0,0x3
    8002371e:	78650513          	addi	a0,a0,1926 # 80026ea0 <__func__.0+0x2e0>
bool ebreak_tests_1() {
    80023722:	ec06                	sd	ra,24(sp)
    80023724:	e822                	sd	s0,16(sp)
    80023726:	e426                	sd	s1,8(sp)
    TEST_START();
    80023728:	7dc010ef          	jal	80024f04 <printf>
    8002372c:	4529                	li	a0,10
    8002372e:	5e0000ef          	jal	80023d0e <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_M);
    80023732:	4511                	li	a0,4
    80023734:	cc2dd0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023738:	0330000f          	fence	rw,rw
    8002373c:	00026417          	auipc	s0,0x26
    80023740:	8d440413          	addi	s0,s0,-1836 # 80049010 <excpt>
    80023744:	4785                	li	a5,1
    80023746:	00026717          	auipc	a4,0x26
    8002374a:	90073123          	sd	zero,-1790(a4) # 80049048 <excpt+0x38>
    8002374e:	00f41023          	sh	a5,0(s0)
    80023752:	0330000f          	fence	rw,rw
    ebreak;
    printf("trigger=%d\n",excpt.triggered);
    80023756:	00026597          	auipc	a1,0x26
    8002375a:	8bb5c583          	lbu	a1,-1861(a1) # 80049011 <excpt+0x1>
    8002375e:	0000c517          	auipc	a0,0xc
    80023762:	91a50513          	addi	a0,a0,-1766 # 8002f078 <__func__.0+0x84b8>
    80023766:	79e010ef          	jal	80024f04 <printf>
    printf("cause=%d\n",excpt.cause);
    8002376a:	640c                	ld	a1,8(s0)
    8002376c:	0000c517          	auipc	a0,0xc
    80023770:	91c50513          	addi	a0,a0,-1764 # 8002f088 <__func__.0+0x84c8>
    80023774:	790010ef          	jal	80024f04 <printf>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80023778:	08200593          	li	a1,130
    8002377c:	0000c617          	auipc	a2,0xc
    80023780:	a4460613          	addi	a2,a2,-1468 # 8002f1c0 <__func__.0+0x8600>
    80023784:	00003517          	auipc	a0,0x3
    80023788:	73450513          	addi	a0,a0,1844 # 80026eb8 <__func__.0+0x2f8>
    8002378c:	778010ef          	jal	80024f04 <printf>
    80023790:	00026797          	auipc	a5,0x26
    80023794:	8817c783          	lbu	a5,-1919(a5) # 80049011 <excpt+0x1>
    80023798:	00003597          	auipc	a1,0x3
    8002379c:	6f858593          	addi	a1,a1,1784 # 80026e90 <__func__.0+0x2d0>
    800237a0:	cf89                	beqz	a5,800237ba <ebreak_tests_1+0xaa>
    800237a2:	6418                	ld	a4,8(s0)
    800237a4:	478d                	li	a5,3
    800237a6:	00003597          	auipc	a1,0x3
    800237aa:	6da58593          	addi	a1,a1,1754 # 80026e80 <__func__.0+0x2c0>
    800237ae:	00f70663          	beq	a4,a5,800237ba <ebreak_tests_1+0xaa>
    800237b2:	00003597          	auipc	a1,0x3
    800237b6:	6de58593          	addi	a1,a1,1758 # 80026e90 <__func__.0+0x2d0>
    800237ba:	00003517          	auipc	a0,0x3
    800237be:	71650513          	addi	a0,a0,1814 # 80026ed0 <__func__.0+0x310>
    800237c2:	742010ef          	jal	80024f04 <printf>
    800237c6:	00026797          	auipc	a5,0x26
    800237ca:	84b7c783          	lbu	a5,-1973(a5) # 80049011 <excpt+0x1>
    800237ce:	c789                	beqz	a5,800237d8 <ebreak_tests_1+0xc8>
    800237d0:	6418                	ld	a4,8(s0)
    800237d2:	478d                	li	a5,3
    800237d4:	00f70c63          	beq	a4,a5,800237ec <ebreak_tests_1+0xdc>
    800237d8:	00003517          	auipc	a0,0x3
    800237dc:	70050513          	addi	a0,a0,1792 # 80026ed8 <__func__.0+0x318>
    800237e0:	724010ef          	jal	80024f04 <printf>
    800237e4:	02900513          	li	a0,41
    800237e8:	526000ef          	jal	80023d0e <putchar>
    800237ec:	4529                	li	a0,10
    800237ee:	520000ef          	jal	80023d0e <putchar>
    800237f2:	00026497          	auipc	s1,0x26
    800237f6:	81f4c483          	lbu	s1,-2017(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800237fa:	00003597          	auipc	a1,0x3
    800237fe:	69658593          	addi	a1,a1,1686 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80023802:	cc91                	beqz	s1,8002381e <ebreak_tests_1+0x10e>
    80023804:	6418                	ld	a4,8(s0)
    80023806:	478d                	li	a5,3
    TEST_END();
    80023808:	00003597          	auipc	a1,0x3
    8002380c:	67858593          	addi	a1,a1,1656 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80023810:	00f70763          	beq	a4,a5,8002381e <ebreak_tests_1+0x10e>
    80023814:	4481                	li	s1,0
    TEST_END();
    80023816:	00003597          	auipc	a1,0x3
    8002381a:	67a58593          	addi	a1,a1,1658 # 80026e90 <__func__.0+0x2d0>
    8002381e:	00003517          	auipc	a0,0x3
    80023822:	71a50513          	addi	a0,a0,1818 # 80026f38 <__func__.0+0x378>
    80023826:	6de010ef          	jal	80024f04 <printf>
    8002382a:	4511                	li	a0,4
    8002382c:	bcadd0ef          	jal	80000bf6 <goto_priv>
    80023830:	c7ddd0ef          	jal	800014ac <reset_state>

}
    80023834:	60e2                	ld	ra,24(sp)
    80023836:	6442                	ld	s0,16(sp)
    80023838:	8526                	mv	a0,s1
    8002383a:	64a2                	ld	s1,8(sp)
    8002383c:	6105                	addi	sp,sp,32
    8002383e:	8082                	ret

0000000080023840 <ebreak_tests_2>:

bool ebreak_tests_2() {
    80023840:	1101                	addi	sp,sp,-32

    TEST_START();
    80023842:	00003597          	auipc	a1,0x3
    80023846:	34e58593          	addi	a1,a1,846 # 80026b90 <__func__.3>
    8002384a:	00003517          	auipc	a0,0x3
    8002384e:	65650513          	addi	a0,a0,1622 # 80026ea0 <__func__.0+0x2e0>
bool ebreak_tests_2() {
    80023852:	ec06                	sd	ra,24(sp)
    80023854:	e822                	sd	s0,16(sp)
    80023856:	e426                	sd	s1,8(sp)
    TEST_START();
    80023858:	6ac010ef          	jal	80024f04 <printf>
    8002385c:	4529                	li	a0,10
    8002385e:	4b0000ef          	jal	80023d0e <putchar>

    //vs模式下执行ebreak指令
    goto_priv(PRIV_M);
    80023862:	4511                	li	a0,4
    80023864:	b92dd0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023868:	0330000f          	fence	rw,rw
    8002386c:	00025417          	auipc	s0,0x25
    80023870:	7a440413          	addi	s0,s0,1956 # 80049010 <excpt>
    80023874:	4785                	li	a5,1
    80023876:	00025717          	auipc	a4,0x25
    8002387a:	7c073923          	sd	zero,2002(a4) # 80049048 <excpt+0x38>
    8002387e:	00f41023          	sh	a5,0(s0)
    80023882:	0330000f          	fence	rw,rw
    ebreak;
    printf("trigger=%d\n",excpt.triggered);
    80023886:	00025597          	auipc	a1,0x25
    8002388a:	78b5c583          	lbu	a1,1931(a1) # 80049011 <excpt+0x1>
    8002388e:	0000b517          	auipc	a0,0xb
    80023892:	7ea50513          	addi	a0,a0,2026 # 8002f078 <__func__.0+0x84b8>
    80023896:	66e010ef          	jal	80024f04 <printf>
    printf("cause=%d\n",excpt.cause);
    8002389a:	640c                	ld	a1,8(s0)
    8002389c:	0000b517          	auipc	a0,0xb
    800238a0:	7ec50513          	addi	a0,a0,2028 # 8002f088 <__func__.0+0x84c8>
    800238a4:	660010ef          	jal	80024f04 <printf>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800238a8:	08200593          	li	a1,130
    800238ac:	0000c617          	auipc	a2,0xc
    800238b0:	93c60613          	addi	a2,a2,-1732 # 8002f1e8 <__func__.0+0x8628>
    800238b4:	00003517          	auipc	a0,0x3
    800238b8:	60450513          	addi	a0,a0,1540 # 80026eb8 <__func__.0+0x2f8>
    800238bc:	648010ef          	jal	80024f04 <printf>
    800238c0:	00025797          	auipc	a5,0x25
    800238c4:	7517c783          	lbu	a5,1873(a5) # 80049011 <excpt+0x1>
    800238c8:	00003597          	auipc	a1,0x3
    800238cc:	5c858593          	addi	a1,a1,1480 # 80026e90 <__func__.0+0x2d0>
    800238d0:	cf89                	beqz	a5,800238ea <ebreak_tests_2+0xaa>
    800238d2:	6418                	ld	a4,8(s0)
    800238d4:	478d                	li	a5,3
    800238d6:	00003597          	auipc	a1,0x3
    800238da:	5aa58593          	addi	a1,a1,1450 # 80026e80 <__func__.0+0x2c0>
    800238de:	00f70663          	beq	a4,a5,800238ea <ebreak_tests_2+0xaa>
    800238e2:	00003597          	auipc	a1,0x3
    800238e6:	5ae58593          	addi	a1,a1,1454 # 80026e90 <__func__.0+0x2d0>
    800238ea:	00003517          	auipc	a0,0x3
    800238ee:	5e650513          	addi	a0,a0,1510 # 80026ed0 <__func__.0+0x310>
    800238f2:	612010ef          	jal	80024f04 <printf>
    800238f6:	00025797          	auipc	a5,0x25
    800238fa:	71b7c783          	lbu	a5,1819(a5) # 80049011 <excpt+0x1>
    800238fe:	c789                	beqz	a5,80023908 <ebreak_tests_2+0xc8>
    80023900:	6418                	ld	a4,8(s0)
    80023902:	478d                	li	a5,3
    80023904:	00f70c63          	beq	a4,a5,8002391c <ebreak_tests_2+0xdc>
    80023908:	00003517          	auipc	a0,0x3
    8002390c:	5d050513          	addi	a0,a0,1488 # 80026ed8 <__func__.0+0x318>
    80023910:	5f4010ef          	jal	80024f04 <printf>
    80023914:	02900513          	li	a0,41
    80023918:	3f6000ef          	jal	80023d0e <putchar>
    8002391c:	4529                	li	a0,10
    8002391e:	3f0000ef          	jal	80023d0e <putchar>
    80023922:	00025497          	auipc	s1,0x25
    80023926:	6ef4c483          	lbu	s1,1775(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    8002392a:	00003597          	auipc	a1,0x3
    8002392e:	56658593          	addi	a1,a1,1382 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    80023932:	cc91                	beqz	s1,8002394e <ebreak_tests_2+0x10e>
    80023934:	6418                	ld	a4,8(s0)
    80023936:	478d                	li	a5,3
    TEST_END();
    80023938:	00003597          	auipc	a1,0x3
    8002393c:	54858593          	addi	a1,a1,1352 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    80023940:	00f70763          	beq	a4,a5,8002394e <ebreak_tests_2+0x10e>
    80023944:	4481                	li	s1,0
    TEST_END();
    80023946:	00003597          	auipc	a1,0x3
    8002394a:	54a58593          	addi	a1,a1,1354 # 80026e90 <__func__.0+0x2d0>
    8002394e:	00003517          	auipc	a0,0x3
    80023952:	5ea50513          	addi	a0,a0,1514 # 80026f38 <__func__.0+0x378>
    80023956:	5ae010ef          	jal	80024f04 <printf>
    8002395a:	4511                	li	a0,4
    8002395c:	a9add0ef          	jal	80000bf6 <goto_priv>
    80023960:	b4ddd0ef          	jal	800014ac <reset_state>

}
    80023964:	60e2                	ld	ra,24(sp)
    80023966:	6442                	ld	s0,16(sp)
    80023968:	8526                	mv	a0,s1
    8002396a:	64a2                	ld	s1,8(sp)
    8002396c:	6105                	addi	sp,sp,32
    8002396e:	8082                	ret

0000000080023970 <ebreak_tests_3>:

bool ebreak_tests_3() {
    80023970:	1101                	addi	sp,sp,-32

    TEST_START();
    80023972:	00003597          	auipc	a1,0x3
    80023976:	22e58593          	addi	a1,a1,558 # 80026ba0 <__func__.2>
    8002397a:	00003517          	auipc	a0,0x3
    8002397e:	52650513          	addi	a0,a0,1318 # 80026ea0 <__func__.0+0x2e0>
bool ebreak_tests_3() {
    80023982:	ec06                	sd	ra,24(sp)
    80023984:	e822                	sd	s0,16(sp)
    80023986:	e426                	sd	s1,8(sp)
    TEST_START();
    80023988:	57c010ef          	jal	80024f04 <printf>
    8002398c:	4529                	li	a0,10
    8002398e:	380000ef          	jal	80023d0e <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_HS);
    80023992:	450d                	li	a0,3
    80023994:	a62dd0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023998:	0330000f          	fence	rw,rw
    8002399c:	00025417          	auipc	s0,0x25
    800239a0:	67440413          	addi	s0,s0,1652 # 80049010 <excpt>
    800239a4:	4785                	li	a5,1
    800239a6:	00025717          	auipc	a4,0x25
    800239aa:	6a073123          	sd	zero,1698(a4) # 80049048 <excpt+0x38>
    800239ae:	00f41023          	sh	a5,0(s0)
    800239b2:	0330000f          	fence	rw,rw
    ebreak;
    printf("trigger=%d\n",excpt.triggered);
    800239b6:	00025597          	auipc	a1,0x25
    800239ba:	65b5c583          	lbu	a1,1627(a1) # 80049011 <excpt+0x1>
    800239be:	0000b517          	auipc	a0,0xb
    800239c2:	6ba50513          	addi	a0,a0,1722 # 8002f078 <__func__.0+0x84b8>
    800239c6:	53e010ef          	jal	80024f04 <printf>
    printf("cause=%d\n",excpt.cause);
    800239ca:	640c                	ld	a1,8(s0)
    800239cc:	0000b517          	auipc	a0,0xb
    800239d0:	6bc50513          	addi	a0,a0,1724 # 8002f088 <__func__.0+0x84c8>
    800239d4:	530010ef          	jal	80024f04 <printf>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800239d8:	08200593          	li	a1,130
    800239dc:	0000c617          	auipc	a2,0xc
    800239e0:	83460613          	addi	a2,a2,-1996 # 8002f210 <__func__.0+0x8650>
    800239e4:	00003517          	auipc	a0,0x3
    800239e8:	4d450513          	addi	a0,a0,1236 # 80026eb8 <__func__.0+0x2f8>
    800239ec:	518010ef          	jal	80024f04 <printf>
    800239f0:	00025797          	auipc	a5,0x25
    800239f4:	6217c783          	lbu	a5,1569(a5) # 80049011 <excpt+0x1>
    800239f8:	00003597          	auipc	a1,0x3
    800239fc:	49858593          	addi	a1,a1,1176 # 80026e90 <__func__.0+0x2d0>
    80023a00:	cf89                	beqz	a5,80023a1a <ebreak_tests_3+0xaa>
    80023a02:	6418                	ld	a4,8(s0)
    80023a04:	478d                	li	a5,3
    80023a06:	00003597          	auipc	a1,0x3
    80023a0a:	47a58593          	addi	a1,a1,1146 # 80026e80 <__func__.0+0x2c0>
    80023a0e:	00f70663          	beq	a4,a5,80023a1a <ebreak_tests_3+0xaa>
    80023a12:	00003597          	auipc	a1,0x3
    80023a16:	47e58593          	addi	a1,a1,1150 # 80026e90 <__func__.0+0x2d0>
    80023a1a:	00003517          	auipc	a0,0x3
    80023a1e:	4b650513          	addi	a0,a0,1206 # 80026ed0 <__func__.0+0x310>
    80023a22:	4e2010ef          	jal	80024f04 <printf>
    80023a26:	00025797          	auipc	a5,0x25
    80023a2a:	5eb7c783          	lbu	a5,1515(a5) # 80049011 <excpt+0x1>
    80023a2e:	c789                	beqz	a5,80023a38 <ebreak_tests_3+0xc8>
    80023a30:	6418                	ld	a4,8(s0)
    80023a32:	478d                	li	a5,3
    80023a34:	00f70c63          	beq	a4,a5,80023a4c <ebreak_tests_3+0xdc>
    80023a38:	00003517          	auipc	a0,0x3
    80023a3c:	4a050513          	addi	a0,a0,1184 # 80026ed8 <__func__.0+0x318>
    80023a40:	4c4010ef          	jal	80024f04 <printf>
    80023a44:	02900513          	li	a0,41
    80023a48:	2c6000ef          	jal	80023d0e <putchar>
    80023a4c:	4529                	li	a0,10
    80023a4e:	2c0000ef          	jal	80023d0e <putchar>
    80023a52:	00025497          	auipc	s1,0x25
    80023a56:	5bf4c483          	lbu	s1,1471(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80023a5a:	00003597          	auipc	a1,0x3
    80023a5e:	43658593          	addi	a1,a1,1078 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80023a62:	cc91                	beqz	s1,80023a7e <ebreak_tests_3+0x10e>
    80023a64:	6418                	ld	a4,8(s0)
    80023a66:	478d                	li	a5,3
    TEST_END();
    80023a68:	00003597          	auipc	a1,0x3
    80023a6c:	41858593          	addi	a1,a1,1048 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80023a70:	00f70763          	beq	a4,a5,80023a7e <ebreak_tests_3+0x10e>
    80023a74:	4481                	li	s1,0
    TEST_END();
    80023a76:	00003597          	auipc	a1,0x3
    80023a7a:	41a58593          	addi	a1,a1,1050 # 80026e90 <__func__.0+0x2d0>
    80023a7e:	00003517          	auipc	a0,0x3
    80023a82:	4ba50513          	addi	a0,a0,1210 # 80026f38 <__func__.0+0x378>
    80023a86:	47e010ef          	jal	80024f04 <printf>
    80023a8a:	4511                	li	a0,4
    80023a8c:	96add0ef          	jal	80000bf6 <goto_priv>
    80023a90:	a1ddd0ef          	jal	800014ac <reset_state>

}
    80023a94:	60e2                	ld	ra,24(sp)
    80023a96:	6442                	ld	s0,16(sp)
    80023a98:	8526                	mv	a0,s1
    80023a9a:	64a2                	ld	s1,8(sp)
    80023a9c:	6105                	addi	sp,sp,32
    80023a9e:	8082                	ret

0000000080023aa0 <ebreak_tests_4>:

bool ebreak_tests_4() {
    80023aa0:	1101                	addi	sp,sp,-32

    TEST_START();
    80023aa2:	00003597          	auipc	a1,0x3
    80023aa6:	10e58593          	addi	a1,a1,270 # 80026bb0 <__func__.1>
    80023aaa:	00003517          	auipc	a0,0x3
    80023aae:	3f650513          	addi	a0,a0,1014 # 80026ea0 <__func__.0+0x2e0>
bool ebreak_tests_4() {
    80023ab2:	ec06                	sd	ra,24(sp)
    80023ab4:	e822                	sd	s0,16(sp)
    80023ab6:	e426                	sd	s1,8(sp)
    TEST_START();
    80023ab8:	44c010ef          	jal	80024f04 <printf>
    80023abc:	4529                	li	a0,10
    80023abe:	250000ef          	jal	80023d0e <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_HU);
    80023ac2:	4505                	li	a0,1
    80023ac4:	932dd0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023ac8:	0330000f          	fence	rw,rw
    80023acc:	00025417          	auipc	s0,0x25
    80023ad0:	54440413          	addi	s0,s0,1348 # 80049010 <excpt>
    80023ad4:	4785                	li	a5,1
    80023ad6:	00025717          	auipc	a4,0x25
    80023ada:	56073923          	sd	zero,1394(a4) # 80049048 <excpt+0x38>
    80023ade:	00f41023          	sh	a5,0(s0)
    80023ae2:	0330000f          	fence	rw,rw
    ebreak;
    printf("trigger=%d\n",excpt.triggered);
    80023ae6:	00025597          	auipc	a1,0x25
    80023aea:	52b5c583          	lbu	a1,1323(a1) # 80049011 <excpt+0x1>
    80023aee:	0000b517          	auipc	a0,0xb
    80023af2:	58a50513          	addi	a0,a0,1418 # 8002f078 <__func__.0+0x84b8>
    80023af6:	40e010ef          	jal	80024f04 <printf>
    printf("cause=%d\n",excpt.cause);
    80023afa:	640c                	ld	a1,8(s0)
    80023afc:	0000b517          	auipc	a0,0xb
    80023b00:	58c50513          	addi	a0,a0,1420 # 8002f088 <__func__.0+0x84c8>
    80023b04:	400010ef          	jal	80024f04 <printf>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80023b08:	08200593          	li	a1,130
    80023b0c:	0000b617          	auipc	a2,0xb
    80023b10:	72c60613          	addi	a2,a2,1836 # 8002f238 <__func__.0+0x8678>
    80023b14:	00003517          	auipc	a0,0x3
    80023b18:	3a450513          	addi	a0,a0,932 # 80026eb8 <__func__.0+0x2f8>
    80023b1c:	3e8010ef          	jal	80024f04 <printf>
    80023b20:	00025797          	auipc	a5,0x25
    80023b24:	4f17c783          	lbu	a5,1265(a5) # 80049011 <excpt+0x1>
    80023b28:	00003597          	auipc	a1,0x3
    80023b2c:	36858593          	addi	a1,a1,872 # 80026e90 <__func__.0+0x2d0>
    80023b30:	cf89                	beqz	a5,80023b4a <ebreak_tests_4+0xaa>
    80023b32:	6418                	ld	a4,8(s0)
    80023b34:	478d                	li	a5,3
    80023b36:	00003597          	auipc	a1,0x3
    80023b3a:	34a58593          	addi	a1,a1,842 # 80026e80 <__func__.0+0x2c0>
    80023b3e:	00f70663          	beq	a4,a5,80023b4a <ebreak_tests_4+0xaa>
    80023b42:	00003597          	auipc	a1,0x3
    80023b46:	34e58593          	addi	a1,a1,846 # 80026e90 <__func__.0+0x2d0>
    80023b4a:	00003517          	auipc	a0,0x3
    80023b4e:	38650513          	addi	a0,a0,902 # 80026ed0 <__func__.0+0x310>
    80023b52:	3b2010ef          	jal	80024f04 <printf>
    80023b56:	00025797          	auipc	a5,0x25
    80023b5a:	4bb7c783          	lbu	a5,1211(a5) # 80049011 <excpt+0x1>
    80023b5e:	c789                	beqz	a5,80023b68 <ebreak_tests_4+0xc8>
    80023b60:	6418                	ld	a4,8(s0)
    80023b62:	478d                	li	a5,3
    80023b64:	00f70c63          	beq	a4,a5,80023b7c <ebreak_tests_4+0xdc>
    80023b68:	00003517          	auipc	a0,0x3
    80023b6c:	37050513          	addi	a0,a0,880 # 80026ed8 <__func__.0+0x318>
    80023b70:	394010ef          	jal	80024f04 <printf>
    80023b74:	02900513          	li	a0,41
    80023b78:	196000ef          	jal	80023d0e <putchar>
    80023b7c:	4529                	li	a0,10
    80023b7e:	190000ef          	jal	80023d0e <putchar>
    80023b82:	00025497          	auipc	s1,0x25
    80023b86:	48f4c483          	lbu	s1,1167(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80023b8a:	00003597          	auipc	a1,0x3
    80023b8e:	30658593          	addi	a1,a1,774 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80023b92:	cc91                	beqz	s1,80023bae <ebreak_tests_4+0x10e>
    80023b94:	6418                	ld	a4,8(s0)
    80023b96:	478d                	li	a5,3
    TEST_END();
    80023b98:	00003597          	auipc	a1,0x3
    80023b9c:	2e858593          	addi	a1,a1,744 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    80023ba0:	00f70763          	beq	a4,a5,80023bae <ebreak_tests_4+0x10e>
    80023ba4:	4481                	li	s1,0
    TEST_END();
    80023ba6:	00003597          	auipc	a1,0x3
    80023baa:	2ea58593          	addi	a1,a1,746 # 80026e90 <__func__.0+0x2d0>
    80023bae:	00003517          	auipc	a0,0x3
    80023bb2:	38a50513          	addi	a0,a0,906 # 80026f38 <__func__.0+0x378>
    80023bb6:	34e010ef          	jal	80024f04 <printf>
    80023bba:	4511                	li	a0,4
    80023bbc:	83add0ef          	jal	80000bf6 <goto_priv>
    80023bc0:	8eddd0ef          	jal	800014ac <reset_state>

}
    80023bc4:	60e2                	ld	ra,24(sp)
    80023bc6:	6442                	ld	s0,16(sp)
    80023bc8:	8526                	mv	a0,s1
    80023bca:	64a2                	ld	s1,8(sp)
    80023bcc:	6105                	addi	sp,sp,32
    80023bce:	8082                	ret

0000000080023bd0 <ebreak_tests_5>:

bool ebreak_tests_5() {
    80023bd0:	1101                	addi	sp,sp,-32

    TEST_START();
    80023bd2:	00003597          	auipc	a1,0x3
    80023bd6:	fee58593          	addi	a1,a1,-18 # 80026bc0 <__func__.0>
    80023bda:	00003517          	auipc	a0,0x3
    80023bde:	2c650513          	addi	a0,a0,710 # 80026ea0 <__func__.0+0x2e0>
bool ebreak_tests_5() {
    80023be2:	ec06                	sd	ra,24(sp)
    80023be4:	e822                	sd	s0,16(sp)
    80023be6:	e426                	sd	s1,8(sp)
    TEST_START();
    80023be8:	31c010ef          	jal	80024f04 <printf>
    80023bec:	4529                	li	a0,10
    80023bee:	120000ef          	jal	80023d0e <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_VU);
    80023bf2:	4501                	li	a0,0
    80023bf4:	802dd0ef          	jal	80000bf6 <goto_priv>
    TEST_SETUP_EXCEPT();
    80023bf8:	0330000f          	fence	rw,rw
    80023bfc:	00025417          	auipc	s0,0x25
    80023c00:	41440413          	addi	s0,s0,1044 # 80049010 <excpt>
    80023c04:	4785                	li	a5,1
    80023c06:	00025717          	auipc	a4,0x25
    80023c0a:	44073123          	sd	zero,1090(a4) # 80049048 <excpt+0x38>
    80023c0e:	00f41023          	sh	a5,0(s0)
    80023c12:	0330000f          	fence	rw,rw
    ebreak;
    printf("trigger=%d\n",excpt.triggered);
    80023c16:	00025597          	auipc	a1,0x25
    80023c1a:	3fb5c583          	lbu	a1,1019(a1) # 80049011 <excpt+0x1>
    80023c1e:	0000b517          	auipc	a0,0xb
    80023c22:	45a50513          	addi	a0,a0,1114 # 8002f078 <__func__.0+0x84b8>
    80023c26:	2de010ef          	jal	80024f04 <printf>
    printf("cause=%d\n",excpt.cause);
    80023c2a:	640c                	ld	a1,8(s0)
    80023c2c:	0000b517          	auipc	a0,0xb
    80023c30:	45c50513          	addi	a0,a0,1116 # 8002f088 <__func__.0+0x84c8>
    80023c34:	2d0010ef          	jal	80024f04 <printf>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80023c38:	08200593          	li	a1,130
    80023c3c:	0000b617          	auipc	a2,0xb
    80023c40:	62460613          	addi	a2,a2,1572 # 8002f260 <__func__.0+0x86a0>
    80023c44:	00003517          	auipc	a0,0x3
    80023c48:	27450513          	addi	a0,a0,628 # 80026eb8 <__func__.0+0x2f8>
    80023c4c:	2b8010ef          	jal	80024f04 <printf>
    80023c50:	00025797          	auipc	a5,0x25
    80023c54:	3c17c783          	lbu	a5,961(a5) # 80049011 <excpt+0x1>
    80023c58:	00003597          	auipc	a1,0x3
    80023c5c:	23858593          	addi	a1,a1,568 # 80026e90 <__func__.0+0x2d0>
    80023c60:	cf89                	beqz	a5,80023c7a <ebreak_tests_5+0xaa>
    80023c62:	6418                	ld	a4,8(s0)
    80023c64:	478d                	li	a5,3
    80023c66:	00003597          	auipc	a1,0x3
    80023c6a:	21a58593          	addi	a1,a1,538 # 80026e80 <__func__.0+0x2c0>
    80023c6e:	00f70663          	beq	a4,a5,80023c7a <ebreak_tests_5+0xaa>
    80023c72:	00003597          	auipc	a1,0x3
    80023c76:	21e58593          	addi	a1,a1,542 # 80026e90 <__func__.0+0x2d0>
    80023c7a:	00003517          	auipc	a0,0x3
    80023c7e:	25650513          	addi	a0,a0,598 # 80026ed0 <__func__.0+0x310>
    80023c82:	282010ef          	jal	80024f04 <printf>
    80023c86:	00025797          	auipc	a5,0x25
    80023c8a:	38b7c783          	lbu	a5,907(a5) # 80049011 <excpt+0x1>
    80023c8e:	c789                	beqz	a5,80023c98 <ebreak_tests_5+0xc8>
    80023c90:	6418                	ld	a4,8(s0)
    80023c92:	478d                	li	a5,3
    80023c94:	00f70c63          	beq	a4,a5,80023cac <ebreak_tests_5+0xdc>
    80023c98:	00003517          	auipc	a0,0x3
    80023c9c:	24050513          	addi	a0,a0,576 # 80026ed8 <__func__.0+0x318>
    80023ca0:	264010ef          	jal	80024f04 <printf>
    80023ca4:	02900513          	li	a0,41
    80023ca8:	066000ef          	jal	80023d0e <putchar>
    80023cac:	4529                	li	a0,10
    80023cae:	060000ef          	jal	80023d0e <putchar>
    80023cb2:	00025497          	auipc	s1,0x25
    80023cb6:	35f4c483          	lbu	s1,863(s1) # 80049011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    80023cba:	00003597          	auipc	a1,0x3
    80023cbe:	1d658593          	addi	a1,a1,470 # 80026e90 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80023cc2:	cc91                	beqz	s1,80023cde <ebreak_tests_5+0x10e>
    80023cc4:	6418                	ld	a4,8(s0)
    80023cc6:	478d                	li	a5,3
    TEST_END();
    80023cc8:	00003597          	auipc	a1,0x3
    80023ccc:	1b858593          	addi	a1,a1,440 # 80026e80 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    80023cd0:	00f70763          	beq	a4,a5,80023cde <ebreak_tests_5+0x10e>
    80023cd4:	4481                	li	s1,0
    TEST_END();
    80023cd6:	00003597          	auipc	a1,0x3
    80023cda:	1ba58593          	addi	a1,a1,442 # 80026e90 <__func__.0+0x2d0>
    80023cde:	00003517          	auipc	a0,0x3
    80023ce2:	25a50513          	addi	a0,a0,602 # 80026f38 <__func__.0+0x378>
    80023ce6:	21e010ef          	jal	80024f04 <printf>
    80023cea:	4511                	li	a0,4
    80023cec:	f0bdc0ef          	jal	80000bf6 <goto_priv>
    80023cf0:	fbcdd0ef          	jal	800014ac <reset_state>

    80023cf4:	60e2                	ld	ra,24(sp)
    80023cf6:	6442                	ld	s0,16(sp)
    80023cf8:	8526                	mv	a0,s1
    80023cfa:	64a2                	ld	s1,8(sp)
    80023cfc:	6105                	addi	sp,sp,32
    80023cfe:	8082                	ret

0000000080023d00 <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    80023d00:	619c                	ld	a5,0(a1)
    80023d02:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    80023d06:	619c                	ld	a5,0(a1)
    80023d08:	0785                	addi	a5,a5,1
    80023d0a:	e19c                	sd	a5,0(a1)
  }
    80023d0c:	8082                	ret

0000000080023d0e <putchar>:
  buf[buflen++] = ch;
    80023d0e:	00025797          	auipc	a5,0x25
    80023d12:	3c67a783          	lw	a5,966(a5) # 800490d4 <buflen.2>
    80023d16:	00025697          	auipc	a3,0x25
    80023d1a:	36a68693          	addi	a3,a3,874 # 80049080 <buf.1>
{
    80023d1e:	7159                	addi	sp,sp,-112
  buf[buflen++] = ch;
    80023d20:	00f68733          	add	a4,a3,a5
    80023d24:	2785                	addiw	a5,a5,1
    80023d26:	00a70023          	sb	a0,0(a4)
    80023d2a:	00025717          	auipc	a4,0x25
    80023d2e:	3af72523          	sw	a5,938(a4) # 800490d4 <buflen.2>
{
    80023d32:	03f10713          	addi	a4,sp,63
  if (ch == '\n' || buflen == sizeof(buf))
    80023d36:	4629                	li	a2,10
{
    80023d38:	fc077713          	andi	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    80023d3c:	00c50963          	beq	a0,a2,80023d4e <putchar+0x40>
    80023d40:	04000613          	li	a2,64
    80023d44:	00c78563          	beq	a5,a2,80023d4e <putchar+0x40>
}
    80023d48:	4501                	li	a0,0
    80023d4a:	6165                	addi	sp,sp,112
    80023d4c:	8082                	ret
  magic_mem[0] = which;
    80023d4e:	04000613          	li	a2,64
    80023d52:	e310                	sd	a2,0(a4)
  magic_mem[1] = arg0;
    80023d54:	4605                	li	a2,1
    80023d56:	e710                	sd	a2,8(a4)
  magic_mem[2] = arg1;
    80023d58:	eb14                	sd	a3,16(a4)
  magic_mem[3] = arg2;
    80023d5a:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    80023d5c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80023d60:	0000e697          	auipc	a3,0xe
    80023d64:	2e068693          	addi	a3,a3,736 # 80032040 <fromhost>
    80023d68:	0000e797          	auipc	a5,0xe
    80023d6c:	28e7bc23          	sd	a4,664(a5) # 80032000 <tohost>
  while (fromhost == 0)
    80023d70:	629c                	ld	a5,0(a3)
    80023d72:	dffd                	beqz	a5,80023d70 <putchar+0x62>
  fromhost = 0;
    80023d74:	0000e797          	auipc	a5,0xe
    80023d78:	2c07b623          	sd	zero,716(a5) # 80032040 <fromhost>
  __sync_synchronize();
    80023d7c:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80023d80:	631c                	ld	a5,0(a4)
}
    80023d82:	4501                	li	a0,0
    buflen = 0;
    80023d84:	00025797          	auipc	a5,0x25
    80023d88:	3407a823          	sw	zero,848(a5) # 800490d4 <buflen.2>
}
    80023d8c:	6165                	addi	sp,sp,112
    80023d8e:	8082                	ret

0000000080023d90 <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80023d90:	716d                	addi	sp,sp,-272
    while ((ch = *(unsigned char *) fmt) != '%') {
    80023d92:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    80023d96:	05500e93          	li	t4,85
    80023d9a:	00003e17          	auipc	t3,0x3
    80023d9e:	e36e0e13          	addi	t3,t3,-458 # 80026bd0 <__func__.0+0x10>
    80023da2:	a809                	j	80023db4 <vprintfmt.constprop.0+0x24>
      if (ch == '\0')
    80023da4:	c729                	beqz	a4,80023dee <vprintfmt.constprop.0+0x5e>
    **pstr = ch;
    80023da6:	6118                	ld	a4,0(a0)
      fmt++;
    80023da8:	0585                	addi	a1,a1,1
    **pstr = ch;
    80023daa:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80023dae:	611c                	ld	a5,0(a0)
    80023db0:	0785                	addi	a5,a5,1
    80023db2:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    80023db4:	0005c783          	lbu	a5,0(a1)
    80023db8:	0007871b          	sext.w	a4,a5
    80023dbc:	fe6794e3          	bne	a5,t1,80023da4 <vprintfmt.constprop.0+0x14>
    switch (ch = *(unsigned char *) fmt++) {
    80023dc0:	0015c803          	lbu	a6,1(a1)
    fmt++;
    80023dc4:	00158893          	addi	a7,a1,1
    precision = -1;
    80023dc8:	577d                	li	a4,-1
    fmt++;
    80023dca:	86c6                	mv	a3,a7
    width = -1;
    80023dcc:	8fba                	mv	t6,a4
    padc = ' ';
    80023dce:	02000293          	li	t0,32
    lflag = 0;
    80023dd2:	4f01                	li	t5,0
    switch (ch = *(unsigned char *) fmt++) {
    80023dd4:	fdd8079b          	addiw	a5,a6,-35 # fffffdd <STACK_SIZE+0xfefffdd>
    80023dd8:	0ff7f793          	zext.b	a5,a5
    80023ddc:	00168593          	addi	a1,a3,1
    80023de0:	02fee563          	bltu	t4,a5,80023e0a <vprintfmt.constprop.0+0x7a>
    80023de4:	078a                	slli	a5,a5,0x2
    80023de6:	97f2                	add	a5,a5,t3
    80023de8:	439c                	lw	a5,0(a5)
    80023dea:	97f2                	add	a5,a5,t3
    80023dec:	8782                	jr	a5
}
    80023dee:	6151                	addi	sp,sp,272
    80023df0:	8082                	ret
      padc = '0';
    80023df2:	82c2                	mv	t0,a6
      goto reswitch;
    80023df4:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80023df8:	86ae                	mv	a3,a1
    80023dfa:	00168593          	addi	a1,a3,1
    80023dfe:	fdd8079b          	addiw	a5,a6,-35
    80023e02:	0ff7f793          	zext.b	a5,a5
    80023e06:	fcfeffe3          	bgeu	t4,a5,80023de4 <vprintfmt.constprop.0+0x54>
    **pstr = ch;
    80023e0a:	611c                	ld	a5,0(a0)
    80023e0c:	02500713          	li	a4,37
      fmt = last_fmt;
    80023e10:	85c6                	mv	a1,a7
    **pstr = ch;
    80023e12:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80023e16:	611c                	ld	a5,0(a0)
    80023e18:	0785                	addi	a5,a5,1
    80023e1a:	e11c                	sd	a5,0(a0)
  }
    80023e1c:	bf61                	j	80023db4 <vprintfmt.constprop.0+0x24>
    80023e1e:	e622                	sd	s0,264(sp)
        precision = precision * 10 + ch - '0';
    80023e20:	fd08071b          	addiw	a4,a6,-48
        ch = *fmt;
    80023e24:	0016c803          	lbu	a6,1(a3)
        if (ch < '0' || ch > '9')
    80023e28:	4425                	li	s0,9
    switch (ch = *(unsigned char *) fmt++) {
    80023e2a:	86ae                	mv	a3,a1
        if (ch < '0' || ch > '9')
    80023e2c:	fd08079b          	addiw	a5,a6,-48
        ch = *fmt;
    80023e30:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    80023e34:	02f46463          	bltu	s0,a5,80023e5c <vprintfmt.constprop.0+0xcc>
        precision = precision * 10 + ch - '0';
    80023e38:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    80023e3c:	0016c803          	lbu	a6,1(a3)
        precision = precision * 10 + ch - '0';
    80023e40:	9fb9                	addw	a5,a5,a4
    80023e42:	0017979b          	slliw	a5,a5,0x1
    80023e46:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    80023e4a:	fd08059b          	addiw	a1,a6,-48
      for (precision = 0; ; ++fmt) {
    80023e4e:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    80023e50:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    80023e54:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    80023e58:	feb470e3          	bgeu	s0,a1,80023e38 <vprintfmt.constprop.0+0xa8>
    switch (ch = *(unsigned char *) fmt++) {
    80023e5c:	6432                	ld	s0,264(sp)
      if (width < 0)
    80023e5e:	f60fdbe3          	bgez	t6,80023dd4 <vprintfmt.constprop.0+0x44>
        width = precision, precision = -1;
    80023e62:	8fba                	mv	t6,a4
    80023e64:	577d                	li	a4,-1
    80023e66:	b7bd                	j	80023dd4 <vprintfmt.constprop.0+0x44>
        ch = *fmt;
    80023e68:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80023e6c:	86ae                	mv	a3,a1
      goto reswitch;
    80023e6e:	b79d                	j	80023dd4 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80023e70:	611c                	ld	a5,0(a0)
    80023e72:	02500713          	li	a4,37
    80023e76:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80023e7a:	611c                	ld	a5,0(a0)
    80023e7c:	0785                	addi	a5,a5,1
    80023e7e:	e11c                	sd	a5,0(a0)
  }
    80023e80:	bf15                	j	80023db4 <vprintfmt.constprop.0+0x24>
        ch = *fmt;
    80023e82:	0016c803          	lbu	a6,1(a3)
      precision = va_arg(ap, int);
    80023e86:	4218                	lw	a4,0(a2)
    switch (ch = *(unsigned char *) fmt++) {
    80023e88:	86ae                	mv	a3,a1
      precision = va_arg(ap, int);
    80023e8a:	0621                	addi	a2,a2,8
      goto process_precision;
    80023e8c:	bfc9                	j	80023e5e <vprintfmt.constprop.0+0xce>
    **pstr = ch;
    80023e8e:	611c                	ld	a5,0(a0)
    80023e90:	03000693          	li	a3,48
    80023e94:	07800713          	li	a4,120
    80023e98:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80023e9c:	611c                	ld	a5,0(a0)
    80023e9e:	4841                	li	a6,16
    80023ea0:	00860693          	addi	a3,a2,8
    80023ea4:	00178893          	addi	a7,a5,1
    80023ea8:	01153023          	sd	a7,0(a0)
    **pstr = ch;
    80023eac:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    80023eb0:	611c                	ld	a5,0(a0)
    80023eb2:	0785                	addi	a5,a5,1
    80023eb4:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    80023eb6:	6218                	ld	a4,0(a2)
    80023eb8:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    80023eba:	03077f33          	remu	t5,a4,a6
    80023ebe:	00410893          	addi	a7,sp,4
    80023ec2:	4685                	li	a3,1
    80023ec4:	c07a                	sw	t5,0(sp)
    if (num < base)
    80023ec6:	1b076c63          	bltu	a4,a6,8002407e <vprintfmt.constprop.0+0x2ee>
    num /= base;
    80023eca:	03075733          	divu	a4,a4,a6
    digs[pos++] = num % base;
    80023ece:	83b6                	mv	t2,a3
    if (num < base)
    80023ed0:	0891                	addi	a7,a7,4 # 1004 <_test_table_size+0x1003>
    digs[pos++] = num % base;
    80023ed2:	2685                	addiw	a3,a3,1
    80023ed4:	03077f33          	remu	t5,a4,a6
    80023ed8:	ffe8ae23          	sw	t5,-4(a7)
    if (num < base)
    80023edc:	ff0777e3          	bgeu	a4,a6,80023eca <vprintfmt.constprop.0+0x13a>
  while (width-- > pos)
    80023ee0:	ffff871b          	addiw	a4,t6,-1
    80023ee4:	fff6881b          	addiw	a6,a3,-1
    80023ee8:	01f6da63          	bge	a3,t6,80023efc <vprintfmt.constprop.0+0x16c>
    **pstr = ch;
    80023eec:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80023ef0:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    80023ef2:	377d                	addiw	a4,a4,-1
    (*pstr)++;
    80023ef4:	0785                	addi	a5,a5,1
    80023ef6:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    80023ef8:	fee81ae3          	bne	a6,a4,80023eec <vprintfmt.constprop.0+0x15c>
  while (pos-- > 0)
    80023efc:	038a                	slli	t2,t2,0x2
    80023efe:	007106b3          	add	a3,sp,t2
    80023f02:	ffc10893          	addi	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80023f06:	4825                	li	a6,9
    80023f08:	a819                	j	80023f1e <vprintfmt.constprop.0+0x18e>
    80023f0a:	0577071b          	addiw	a4,a4,87
    **pstr = ch;
    80023f0e:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80023f12:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    80023f14:	16f1                	addi	a3,a3,-4
    (*pstr)++;
    80023f16:	0785                	addi	a5,a5,1
    80023f18:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    80023f1a:	e8d88de3          	beq	a7,a3,80023db4 <vprintfmt.constprop.0+0x24>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80023f1e:	4298                	lw	a4,0(a3)
    80023f20:	fee865e3          	bltu	a6,a4,80023f0a <vprintfmt.constprop.0+0x17a>
    80023f24:	0307071b          	addiw	a4,a4,48
    80023f28:	b7dd                	j	80023f0e <vprintfmt.constprop.0+0x17e>
  if (lflag >= 2)
    80023f2a:	4785                	li	a5,1
      precision = va_arg(ap, int);
    80023f2c:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    80023f30:	01e7c463          	blt	a5,t5,80023f38 <vprintfmt.constprop.0+0x1a8>
  else if (lflag)
    80023f34:	140f0763          	beqz	t5,80024082 <vprintfmt.constprop.0+0x2f2>
    return va_arg(*ap, long);
    80023f38:	6218                	ld	a4,0(a2)
    **pstr = ch;
    80023f3a:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    80023f3c:	14074963          	bltz	a4,8002408e <vprintfmt.constprop.0+0x2fe>
      num = getint(&ap, lflag);
    80023f40:	8636                	mv	a2,a3
    80023f42:	4829                	li	a6,10
    80023f44:	bf9d                	j	80023eba <vprintfmt.constprop.0+0x12a>
        ch = *fmt;
    80023f46:	0016c803          	lbu	a6,1(a3)
      lflag++;
    80023f4a:	2f05                	addiw	t5,t5,1
    switch (ch = *(unsigned char *) fmt++) {
    80023f4c:	86ae                	mv	a3,a1
      goto reswitch;
    80023f4e:	b559                	j	80023dd4 <vprintfmt.constprop.0+0x44>
    switch (ch = *(unsigned char *) fmt++) {
    80023f50:	4841                	li	a6,16
  if (lflag >= 2)
    80023f52:	4705                	li	a4,1
    **pstr = ch;
    80023f54:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    80023f56:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    80023f5a:	f5e74ee3          	blt	a4,t5,80023eb6 <vprintfmt.constprop.0+0x126>
  else if (lflag)
    80023f5e:	f40f1ce3          	bnez	t5,80023eb6 <vprintfmt.constprop.0+0x126>
    return va_arg(*ap, unsigned int);
    80023f62:	00066703          	lwu	a4,0(a2)
    80023f66:	8636                	mv	a2,a3
    80023f68:	bf89                	j	80023eba <vprintfmt.constprop.0+0x12a>
      if ((p = va_arg(ap, char *)) == NULL)
    80023f6a:	6214                	ld	a3,0(a2)
    80023f6c:	ca99                	beqz	a3,80023f82 <vprintfmt.constprop.0+0x1f2>
      if (width > 0 && padc != '-')
    80023f6e:	07f05663          	blez	t6,80023fda <vprintfmt.constprop.0+0x24a>
    80023f72:	02d00793          	li	a5,45
    80023f76:	02f29863          	bne	t0,a5,80023fa6 <vprintfmt.constprop.0+0x216>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80023f7a:	0006c783          	lbu	a5,0(a3)
    80023f7e:	e3ad                	bnez	a5,80023fe0 <vprintfmt.constprop.0+0x250>
    80023f80:	a879                	j	8002401e <vprintfmt.constprop.0+0x28e>
        p = "(null)";
    80023f82:	0000b697          	auipc	a3,0xb
    80023f86:	30668693          	addi	a3,a3,774 # 8002f288 <__func__.0+0x86c8>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80023f8a:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80023f8e:	05f05963          	blez	t6,80023fe0 <vprintfmt.constprop.0+0x250>
    80023f92:	02d00813          	li	a6,45
        p = "(null)";
    80023f96:	0000b697          	auipc	a3,0xb
    80023f9a:	2f268693          	addi	a3,a3,754 # 8002f288 <__func__.0+0x86c8>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80023f9e:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80023fa2:	03028f63          	beq	t0,a6,80023fe0 <vprintfmt.constprop.0+0x250>
  const char *p = s;
    80023fa6:	87b6                	mv	a5,a3
  while (n-- && *p)
    80023fa8:	00e688b3          	add	a7,a3,a4
    80023fac:	e709                	bnez	a4,80023fb6 <vprintfmt.constprop.0+0x226>
    80023fae:	a829                	j	80023fc8 <vprintfmt.constprop.0+0x238>
    p++;
    80023fb0:	0785                	addi	a5,a5,1
  while (n-- && *p)
    80023fb2:	01178663          	beq	a5,a7,80023fbe <vprintfmt.constprop.0+0x22e>
    80023fb6:	0007c803          	lbu	a6,0(a5)
    80023fba:	fe081be3          	bnez	a6,80023fb0 <vprintfmt.constprop.0+0x220>
  return p - s;
    80023fbe:	8f95                	sub	a5,a5,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    80023fc0:	40ff8fbb          	subw	t6,t6,a5
    80023fc4:	01f05b63          	blez	t6,80023fda <vprintfmt.constprop.0+0x24a>
    **pstr = ch;
    80023fc8:	611c                	ld	a5,0(a0)
    80023fca:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80023fce:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80023fd0:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    80023fd2:	0785                	addi	a5,a5,1
    80023fd4:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80023fd6:	fe0f9ae3          	bnez	t6,80023fca <vprintfmt.constprop.0+0x23a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80023fda:	0006c783          	lbu	a5,0(a3)
    80023fde:	cbb9                	beqz	a5,80024034 <vprintfmt.constprop.0+0x2a4>
    80023fe0:	58fd                	li	a7,-1
    80023fe2:	04075b63          	bgez	a4,80024038 <vprintfmt.constprop.0+0x2a8>
    **pstr = ch;
    80023fe6:	6118                	ld	a4,0(a0)
        p++;
    80023fe8:	00168813          	addi	a6,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80023fec:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80023fee:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80023ff2:	611c                	ld	a5,0(a0)
    80023ff4:	8742                	mv	a4,a6
    80023ff6:	0785                	addi	a5,a5,1
    80023ff8:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80023ffa:	0016c683          	lbu	a3,1(a3)
    80023ffe:	ce91                	beqz	a3,8002401a <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    80024000:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80024004:	611c                	ld	a5,0(a0)
        p++;
    80024006:	0705                	addi	a4,a4,1
    (*pstr)++;
    80024008:	0785                	addi	a5,a5,1
    8002400a:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002400c:	00074683          	lbu	a3,0(a4)
    80024010:	fae5                	bnez	a3,80024000 <vprintfmt.constprop.0+0x270>
    80024012:	40e8083b          	subw	a6,a6,a4
    80024016:	01f80fbb          	addw	t6,a6,t6
      for (; width > 0; width--)
    8002401a:	01f05d63          	blez	t6,80024034 <vprintfmt.constprop.0+0x2a4>
    **pstr = ch;
    8002401e:	611c                	ld	a5,0(a0)
    80024020:	02000713          	li	a4,32
    80024024:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80024028:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    8002402a:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    8002402c:	0785                	addi	a5,a5,1
    8002402e:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    80024030:	fe0f9ae3          	bnez	t6,80024024 <vprintfmt.constprop.0+0x294>
      if ((p = va_arg(ap, char *)) == NULL)
    80024034:	0621                	addi	a2,a2,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    80024036:	bbbd                	j	80023db4 <vprintfmt.constprop.0+0x24>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024038:	377d                	addiw	a4,a4,-1
    8002403a:	ff1700e3          	beq	a4,a7,8002401a <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    8002403e:	00053803          	ld	a6,0(a0)
        p++;
    80024042:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024044:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80024046:	00f80023          	sb	a5,0(a6)
    (*pstr)++;
    8002404a:	611c                	ld	a5,0(a0)
    8002404c:	0785                	addi	a5,a5,1
    8002404e:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024050:	0006c783          	lbu	a5,0(a3)
    80024054:	f3f5                	bnez	a5,80024038 <vprintfmt.constprop.0+0x2a8>
    80024056:	b7d1                	j	8002401a <vprintfmt.constprop.0+0x28a>
      if (width < 0)
    80024058:	87fe                	mv	a5,t6
    8002405a:	000fd363          	bgez	t6,80024060 <vprintfmt.constprop.0+0x2d0>
    8002405e:	4781                	li	a5,0
        ch = *fmt;
    80024060:	0016c803          	lbu	a6,1(a3)
      if (width < 0)
    80024064:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    80024068:	86ae                	mv	a3,a1
      goto reswitch;
    8002406a:	b3ad                	j	80023dd4 <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    8002406c:	611c                	ld	a5,0(a0)
    8002406e:	4218                	lw	a4,0(a2)
      putch(va_arg(ap, int), putdat);
    80024070:	0621                	addi	a2,a2,8
    **pstr = ch;
    80024072:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80024076:	611c                	ld	a5,0(a0)
    80024078:	0785                	addi	a5,a5,1
    8002407a:	e11c                	sd	a5,0(a0)
  }
    8002407c:	bb25                	j	80023db4 <vprintfmt.constprop.0+0x24>
    if (num < base)
    8002407e:	4381                	li	t2,0
    80024080:	b585                	j	80023ee0 <vprintfmt.constprop.0+0x150>
    return va_arg(*ap, int);
    80024082:	4218                	lw	a4,0(a2)
    80024084:	bd5d                	j	80023f3a <vprintfmt.constprop.0+0x1aa>
    switch (ch = *(unsigned char *) fmt++) {
    80024086:	4829                	li	a6,10
    80024088:	b5e9                	j	80023f52 <vprintfmt.constprop.0+0x1c2>
    8002408a:	4821                	li	a6,8
    8002408c:	b5d9                	j	80023f52 <vprintfmt.constprop.0+0x1c2>
    **pstr = ch;
    8002408e:	02d00613          	li	a2,45
    80024092:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    80024096:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    80024098:	40e00733          	neg	a4,a4
    8002409c:	8636                	mv	a2,a3
    (*pstr)++;
    8002409e:	0785                	addi	a5,a5,1
    800240a0:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    800240a2:	4829                	li	a6,10
    800240a4:	bd19                	j	80023eba <vprintfmt.constprop.0+0x12a>

00000000800240a6 <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    800240a6:	b6010113          	addi	sp,sp,-1184
    800240aa:	14f10713          	addi	a4,sp,335
    800240ae:	fc077713          	andi	a4,a4,-64
    800240b2:	45b13023          	sd	s11,1088(sp)
    800240b6:	83ae                	mv	t2,a1
    800240b8:	48813c23          	sd	s0,1176(sp)
    800240bc:	48913823          	sd	s1,1168(sp)
    800240c0:	49213423          	sd	s2,1160(sp)
    800240c4:	49313023          	sd	s3,1152(sp)
    800240c8:	47413c23          	sd	s4,1144(sp)
    800240cc:	47513823          	sd	s5,1136(sp)
    800240d0:	47613423          	sd	s6,1128(sp)
  tohost = (uintptr_t)magic_mem;
    800240d4:	2c070f13          	addi	t5,a4,704
    while ((ch = *(unsigned char *) fmt) != '%') {
    800240d8:	02500593          	li	a1,37
  buf[buflen++] = ch;
    800240dc:	00025897          	auipc	a7,0x25
    800240e0:	ff888893          	addi	a7,a7,-8 # 800490d4 <buflen.2>
    800240e4:	00025697          	auipc	a3,0x25
    800240e8:	f9c68693          	addi	a3,a3,-100 # 80049080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    800240ec:	4829                	li	a6,10
  magic_mem[0] = which;
    800240ee:	04000613          	li	a2,64
  magic_mem[1] = arg0;
    800240f2:	4e85                	li	t4,1
  tohost = (uintptr_t)magic_mem;
    800240f4:	0000ee17          	auipc	t3,0xe
    800240f8:	f0ce0e13          	addi	t3,t3,-244 # 80032000 <tohost>
    800240fc:	0000e797          	auipc	a5,0xe
    80024100:	f4478793          	addi	a5,a5,-188 # 80032040 <fromhost>
    switch (ch = *(unsigned char *) fmt++) {
    80024104:	00003d97          	auipc	s11,0x3
    80024108:	c24d8d93          	addi	s11,s11,-988 # 80026d28 <__func__.0+0x168>
    while ((ch = *(unsigned char *) fmt) != '%') {
    8002410c:	00054f83          	lbu	t6,0(a0)
    80024110:	000f841b          	sext.w	s0,t6
    80024114:	06bf8563          	beq	t6,a1,8002417e <vprintfmt.constprop.1+0xd8>
      if (ch == '\0')
    80024118:	cc49                	beqz	s0,800241b2 <vprintfmt.constprop.1+0x10c>
  buf[buflen++] = ch;
    8002411a:	00025317          	auipc	t1,0x25
    8002411e:	fba32303          	lw	t1,-70(t1) # 800490d4 <buflen.2>
      fmt++;
    80024122:	0505                	addi	a0,a0,1
  buf[buflen++] = ch;
    80024124:	0013029b          	addiw	t0,t1,1
    80024128:	9336                	add	t1,t1,a3
    8002412a:	0058a023          	sw	t0,0(a7)
    8002412e:	01f30023          	sb	t6,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    80024132:	01040463          	beq	s0,a6,8002413a <vprintfmt.constprop.1+0x94>
    80024136:	fcc29be3          	bne	t0,a2,8002410c <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002413a:	2cc73023          	sd	a2,704(a4)
  magic_mem[1] = arg0;
    8002413e:	2dd73423          	sd	t4,712(a4)
  magic_mem[2] = arg1;
    80024142:	2cd73823          	sd	a3,720(a4)
  magic_mem[3] = arg2;
    80024146:	2c573c23          	sd	t0,728(a4)
  __sync_synchronize();
    8002414a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002414e:	01ee3023          	sd	t5,0(t3)
  while (fromhost == 0)
    80024152:	0007b303          	ld	t1,0(a5)
    80024156:	fe030ee3          	beqz	t1,80024152 <vprintfmt.constprop.1+0xac>
  fromhost = 0;
    8002415a:	0000e317          	auipc	t1,0xe
    8002415e:	ee033323          	sd	zero,-282(t1) # 80032040 <fromhost>
  __sync_synchronize();
    80024162:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024166:	2c073303          	ld	t1,704(a4)
    buflen = 0;
    8002416a:	00025317          	auipc	t1,0x25
    8002416e:	f6032523          	sw	zero,-150(t1) # 800490d4 <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    80024172:	00054f83          	lbu	t6,0(a0)
    80024176:	000f841b          	sext.w	s0,t6
    8002417a:	f8bf9fe3          	bne	t6,a1,80024118 <vprintfmt.constprop.1+0x72>
    switch (ch = *(unsigned char *) fmt++) {
    8002417e:	00154483          	lbu	s1,1(a0)
    fmt++;
    80024182:	00150a13          	addi	s4,a0,1
    precision = -1;
    80024186:	537d                	li	t1,-1
    fmt++;
    80024188:	8452                	mv	s0,s4
    width = -1;
    8002418a:	8f9a                	mv	t6,t1
    padc = ' ';
    8002418c:	02000a93          	li	s5,32
    lflag = 0;
    80024190:	4901                	li	s2,0
    switch (ch = *(unsigned char *) fmt++) {
    80024192:	05500993          	li	s3,85
    80024196:	fdd4829b          	addiw	t0,s1,-35
    8002419a:	0ff2f293          	zext.b	t0,t0
    8002419e:	00140513          	addi	a0,s0,1
    800241a2:	0459e763          	bltu	s3,t0,800241f0 <vprintfmt.constprop.1+0x14a>
    800241a6:	028a                	slli	t0,t0,0x2
    800241a8:	92ee                	add	t0,t0,s11
    800241aa:	0002ab03          	lw	s6,0(t0)
    800241ae:	9b6e                	add	s6,s6,s11
    800241b0:	8b02                	jr	s6
}
    800241b2:	49813403          	ld	s0,1176(sp)
    800241b6:	49013483          	ld	s1,1168(sp)
    800241ba:	48813903          	ld	s2,1160(sp)
    800241be:	48013983          	ld	s3,1152(sp)
    800241c2:	47813a03          	ld	s4,1144(sp)
    800241c6:	47013a83          	ld	s5,1136(sp)
    800241ca:	46813b03          	ld	s6,1128(sp)
    800241ce:	44013d83          	ld	s11,1088(sp)
    800241d2:	4a010113          	addi	sp,sp,1184
    800241d6:	8082                	ret
      padc = '0';
    800241d8:	8aa6                	mv	s5,s1
      goto reswitch;
    800241da:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    800241de:	842a                	mv	s0,a0
    800241e0:	00140513          	addi	a0,s0,1
    800241e4:	fdd4829b          	addiw	t0,s1,-35
    800241e8:	0ff2f293          	zext.b	t0,t0
    800241ec:	fa59fde3          	bgeu	s3,t0,800241a6 <vprintfmt.constprop.1+0x100>
  buf[buflen++] = ch;
    800241f0:	00025317          	auipc	t1,0x25
    800241f4:	ee432303          	lw	t1,-284(t1) # 800490d4 <buflen.2>
    800241f8:	00025f97          	auipc	t6,0x25
    800241fc:	e88f8f93          	addi	t6,t6,-376 # 80049080 <buf.1>
    80024200:	02500293          	li	t0,37
    80024204:	0013051b          	addiw	a0,t1,1
    80024208:	937e                	add	t1,t1,t6
    8002420a:	00530023          	sb	t0,0(t1)
    8002420e:	00025417          	auipc	s0,0x25
    80024212:	eca42323          	sw	a0,-314(s0) # 800490d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    80024216:	04000313          	li	t1,64
    8002421a:	56650f63          	beq	a0,t1,80024798 <vprintfmt.constprop.1+0x6f2>
      fmt = last_fmt;
    8002421e:	8552                	mv	a0,s4
    80024220:	b5f5                	j	8002410c <vprintfmt.constprop.1+0x66>
    80024222:	47713023          	sd	s7,1120(sp)
        precision = precision * 10 + ch - '0';
    80024226:	fd04831b          	addiw	t1,s1,-48
        ch = *fmt;
    8002422a:	00144483          	lbu	s1,1(s0)
        if (ch < '0' || ch > '9')
    8002422e:	4ba5                	li	s7,9
    80024230:	fd04841b          	addiw	s0,s1,-48
        ch = *fmt;
    80024234:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    80024238:	088befe3          	bltu	s7,s0,80024ad6 <vprintfmt.constprop.1+0xa30>
    switch (ch = *(unsigned char *) fmt++) {
    8002423c:	842a                	mv	s0,a0
        precision = precision * 10 + ch - '0';
    8002423e:	0023151b          	slliw	a0,t1,0x2
        ch = *fmt;
    80024242:	00144483          	lbu	s1,1(s0)
        precision = precision * 10 + ch - '0';
    80024246:	0065053b          	addw	a0,a0,t1
    8002424a:	0015151b          	slliw	a0,a0,0x1
    8002424e:	0055053b          	addw	a0,a0,t0
        if (ch < '0' || ch > '9')
    80024252:	fd048b1b          	addiw	s6,s1,-48
      for (precision = 0; ; ++fmt) {
    80024256:	0405                	addi	s0,s0,1
        precision = precision * 10 + ch - '0';
    80024258:	fd05031b          	addiw	t1,a0,-48
        ch = *fmt;
    8002425c:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    80024260:	fd6bffe3          	bgeu	s7,s6,8002423e <vprintfmt.constprop.1+0x198>
    switch (ch = *(unsigned char *) fmt++) {
    80024264:	46013b83          	ld	s7,1120(sp)
      if (width < 0)
    80024268:	f20fd7e3          	bgez	t6,80024196 <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8002426c:	8f9a                	mv	t6,t1
    8002426e:	537d                	li	t1,-1
    80024270:	b71d                	j	80024196 <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    80024272:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    80024276:	842a                	mv	s0,a0
      goto reswitch;
    80024278:	bf39                	j	80024196 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002427a:	00025f97          	auipc	t6,0x25
    8002427e:	e5afaf83          	lw	t6,-422(t6) # 800490d4 <buflen.2>
    80024282:	00025297          	auipc	t0,0x25
    80024286:	dfe28293          	addi	t0,t0,-514 # 80049080 <buf.1>
    8002428a:	02500413          	li	s0,37
    8002428e:	001f831b          	addiw	t1,t6,1
    80024292:	9f96                	add	t6,t6,t0
    80024294:	008f8023          	sb	s0,0(t6)
    80024298:	00025497          	auipc	s1,0x25
    8002429c:	e264ae23          	sw	t1,-452(s1) # 800490d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    800242a0:	04000f93          	li	t6,64
    800242a4:	e7f314e3          	bne	t1,t6,8002410c <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    800242a8:	04673023          	sd	t1,64(a4)
  magic_mem[1] = arg0;
    800242ac:	4f85                	li	t6,1
    800242ae:	05f73423          	sd	t6,72(a4)
  magic_mem[2] = arg1;
    800242b2:	04573823          	sd	t0,80(a4)
  magic_mem[3] = arg2;
    800242b6:	04673c23          	sd	t1,88(a4)
  __sync_synchronize();
    800242ba:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800242be:	04070313          	addi	t1,a4,64
    800242c2:	0000ef97          	auipc	t6,0xe
    800242c6:	d26fbf23          	sd	t1,-706(t6) # 80032000 <tohost>
  while (fromhost == 0)
    800242ca:	0000e317          	auipc	t1,0xe
    800242ce:	d7630313          	addi	t1,t1,-650 # 80032040 <fromhost>
    800242d2:	00033f83          	ld	t6,0(t1)
    800242d6:	fe0f8ee3          	beqz	t6,800242d2 <vprintfmt.constprop.1+0x22c>
  fromhost = 0;
    800242da:	0000e317          	auipc	t1,0xe
    800242de:	d6033323          	sd	zero,-666(t1) # 80032040 <fromhost>
  __sync_synchronize();
    800242e2:	0330000f          	fence	rw,rw
    buflen = 0;
    800242e6:	00025317          	auipc	t1,0x25
    800242ea:	de032723          	sw	zero,-530(t1) # 800490d4 <buflen.2>
  return magic_mem[0];
    800242ee:	04073303          	ld	t1,64(a4)
    buflen = 0;
    800242f2:	bd29                	j	8002410c <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    800242f4:	00144483          	lbu	s1,1(s0)
      precision = va_arg(ap, int);
    800242f8:	0003a303          	lw	t1,0(t2)
    switch (ch = *(unsigned char *) fmt++) {
    800242fc:	842a                	mv	s0,a0
      precision = va_arg(ap, int);
    800242fe:	03a1                	addi	t2,t2,8
      goto process_precision;
    80024300:	b7a5                	j	80024268 <vprintfmt.constprop.1+0x1c2>
  buf[buflen++] = ch;
    80024302:	00025317          	auipc	t1,0x25
    80024306:	dd232303          	lw	t1,-558(t1) # 800490d4 <buflen.2>
    8002430a:	00025917          	auipc	s2,0x25
    8002430e:	d7690913          	addi	s2,s2,-650 # 80049080 <buf.1>
    80024312:	47713023          	sd	s7,1120(sp)
    80024316:	45813c23          	sd	s8,1112(sp)
    8002431a:	45913823          	sd	s9,1104(sp)
    8002431e:	45a13423          	sd	s10,1096(sp)
    80024322:	00690433          	add	s0,s2,t1
    80024326:	00025997          	auipc	s3,0x25
    8002432a:	dae98993          	addi	s3,s3,-594 # 800490d4 <buflen.2>
    8002432e:	0013029b          	addiw	t0,t1,1
    80024332:	03000493          	li	s1,48
    80024336:	00940023          	sb	s1,0(s0)
    8002433a:	0059a023          	sw	t0,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002433e:	04000413          	li	s0,64
    80024342:	62828d63          	beq	t0,s0,8002497c <vprintfmt.constprop.1+0x8d6>
  buf[buflen++] = ch;
    80024346:	2309                	addiw	t1,t1,2
    80024348:	92ca                	add	t0,t0,s2
    8002434a:	07800493          	li	s1,120
    8002434e:	0069a023          	sw	t1,0(s3)
    80024352:	00928023          	sb	s1,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    80024356:	42831a63          	bne	t1,s0,8002478a <vprintfmt.constprop.1+0x6e4>
  magic_mem[0] = which;
    8002435a:	10673023          	sd	t1,256(a4)
  magic_mem[1] = arg0;
    8002435e:	4285                	li	t0,1
    80024360:	10573423          	sd	t0,264(a4)
  magic_mem[2] = arg1;
    80024364:	11273823          	sd	s2,272(a4)
  magic_mem[3] = arg2;
    80024368:	10673c23          	sd	t1,280(a4)
  __sync_synchronize();
    8002436c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024370:	10070313          	addi	t1,a4,256
    80024374:	0000e297          	auipc	t0,0xe
    80024378:	c862b623          	sd	t1,-884(t0) # 80032000 <tohost>
  while (fromhost == 0)
    8002437c:	0000e317          	auipc	t1,0xe
    80024380:	cc430313          	addi	t1,t1,-828 # 80032040 <fromhost>
    80024384:	00033283          	ld	t0,0(t1)
    80024388:	fe028ee3          	beqz	t0,80024384 <vprintfmt.constprop.1+0x2de>
  fromhost = 0;
    8002438c:	0000e317          	auipc	t1,0xe
    80024390:	ca033a23          	sd	zero,-844(t1) # 80032040 <fromhost>
  __sync_synchronize();
    80024394:	0330000f          	fence	rw,rw
    buflen = 0;
    80024398:	00025317          	auipc	t1,0x25
    8002439c:	d2032e23          	sw	zero,-708(t1) # 800490d4 <buflen.2>
  return magic_mem[0];
    800243a0:	10073303          	ld	t1,256(a4)
  else if (lflag)
    800243a4:	00838493          	addi	s1,t2,8
    buflen = 0;
    800243a8:	4301                	li	t1,0
    800243aa:	4441                	li	s0,16
    800243ac:	a6d5                	j	80024790 <vprintfmt.constprop.1+0x6ea>
    800243ae:	47713023          	sd	s7,1120(sp)
    800243b2:	45813c23          	sd	s8,1112(sp)
    800243b6:	45913823          	sd	s9,1104(sp)
    800243ba:	45a13423          	sd	s10,1096(sp)
  if (lflag >= 2)
    800243be:	4305                	li	t1,1
      precision = va_arg(ap, int);
    800243c0:	00838413          	addi	s0,t2,8
  if (lflag >= 2)
    800243c4:	01234463          	blt	t1,s2,800243cc <vprintfmt.constprop.1+0x326>
  else if (lflag)
    800243c8:	3a090e63          	beqz	s2,80024784 <vprintfmt.constprop.1+0x6de>
    return va_arg(*ap, long);
    800243cc:	0003b283          	ld	t0,0(t2)
  buf[buflen++] = ch;
    800243d0:	00025317          	auipc	t1,0x25
    800243d4:	d0432303          	lw	t1,-764(t1) # 800490d4 <buflen.2>
    800243d8:	00025997          	auipc	s3,0x25
    800243dc:	cfc98993          	addi	s3,s3,-772 # 800490d4 <buflen.2>
      if ((long long) num < 0) {
    800243e0:	5402cd63          	bltz	t0,8002493a <vprintfmt.constprop.1+0x894>
      num = getint(&ap, lflag);
    800243e4:	83a2                	mv	t2,s0
    800243e6:	00025917          	auipc	s2,0x25
    800243ea:	c9a90913          	addi	s2,s2,-870 # 80049080 <buf.1>
    800243ee:	4429                	li	s0,10
    digs[pos++] = num % base;
    800243f0:	0282fb33          	remu	s6,t0,s0
    800243f4:	01410a13          	addi	s4,sp,20
    800243f8:	4485                	li	s1,1
    800243fa:	c85a                	sw	s6,16(sp)
    if (num < base)
    800243fc:	3682e263          	bltu	t0,s0,80024760 <vprintfmt.constprop.1+0x6ba>
    num /= base;
    80024400:	0282d2b3          	divu	t0,t0,s0
    digs[pos++] = num % base;
    80024404:	8ba6                	mv	s7,s1
    if (num < base)
    80024406:	0a11                	addi	s4,s4,4 # 20004 <_test_table_size+0x20003>
    digs[pos++] = num % base;
    80024408:	2485                	addiw	s1,s1,1
    8002440a:	0282fb33          	remu	s6,t0,s0
    8002440e:	ff6a2e23          	sw	s6,-4(s4)
    if (num < base)
    80024412:	fe82f7e3          	bgeu	t0,s0,80024400 <vprintfmt.constprop.1+0x35a>
  while (width-- > pos)
    80024416:	ffff829b          	addiw	t0,t6,-1
    8002441a:	fff48a1b          	addiw	s4,s1,-1
    8002441e:	09f4d463          	bge	s1,t6,800244a6 <vprintfmt.constprop.1+0x400>
  if (ch == '\n' || buflen == sizeof(buf))
    80024422:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    80024426:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    80024428:	0c070b13          	addi	s6,a4,192
    8002442c:	0000e497          	auipc	s1,0xe
    80024430:	bd448493          	addi	s1,s1,-1068 # 80032000 <tohost>
    80024434:	0000ef97          	auipc	t6,0xe
    80024438:	c0cf8f93          	addi	t6,t6,-1012 # 80032040 <fromhost>
  buf[buflen++] = ch;
    8002443c:	4c89                	li	s9,2
    8002443e:	00130d1b          	addiw	s10,t1,1
    80024442:	934a                	add	t1,t1,s2
    80024444:	01a9a023          	sw	s10,0(s3)
    80024448:	01530023          	sb	s5,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002444c:	2e8d1863          	bne	s10,s0,8002473c <vprintfmt.constprop.1+0x696>
  magic_mem[0] = which;
    80024450:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    80024452:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    80024456:	0d273823          	sd	s2,208(a4)
  magic_mem[3] = arg2;
    8002445a:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8002445c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024460:	0164b023          	sd	s6,0(s1)
  while (fromhost == 0)
    80024464:	000fb303          	ld	t1,0(t6)
    80024468:	fe030ee3          	beqz	t1,80024464 <vprintfmt.constprop.1+0x3be>
  fromhost = 0;
    8002446c:	0000e317          	auipc	t1,0xe
    80024470:	bc033a23          	sd	zero,-1068(t1) # 80032040 <fromhost>
  __sync_synchronize();
    80024474:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024478:	0c073303          	ld	t1,192(a4)
    buflen = 0;
    8002447c:	00025317          	auipc	t1,0x25
    80024480:	c4032c23          	sw	zero,-936(t1) # 800490d4 <buflen.2>
  while (width-- > pos)
    80024484:	fff2831b          	addiw	t1,t0,-1
    80024488:	2b430c63          	beq	t1,s4,80024740 <vprintfmt.constprop.1+0x69a>
  buf[buflen++] = ch;
    8002448c:	01590023          	sb	s5,0(s2)
  while (width-- > pos)
    80024490:	32f9                	addiw	t0,t0,-2
    80024492:	2a5a0963          	beq	s4,t0,80024744 <vprintfmt.constprop.1+0x69e>
  buf[buflen++] = ch;
    80024496:	0199a023          	sw	s9,0(s3)
    8002449a:	015900a3          	sb	s5,1(s2)
    8002449e:	4309                	li	t1,2
  while (width-- > pos)
    800244a0:	32fd                	addiw	t0,t0,-1
    800244a2:	f85a1ee3          	bne	s4,t0,8002443e <vprintfmt.constprop.1+0x398>
  while (pos-- > 0)
    800244a6:	0b8a                	slli	s7,s7,0x2
    800244a8:	0800                	addi	s0,sp,16
    800244aa:	945e                	add	s0,s0,s7
    800244ac:	00c10a93          	addi	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800244b0:	4a25                	li	s4,9
  magic_mem[0] = which;
    800244b2:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    800244b6:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    800244b8:	08070c13          	addi	s8,a4,128
    800244bc:	0000eb97          	auipc	s7,0xe
    800244c0:	b44b8b93          	addi	s7,s7,-1212 # 80032000 <tohost>
    800244c4:	0000e297          	auipc	t0,0xe
    800244c8:	b7c28293          	addi	t0,t0,-1156 # 80032040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    800244cc:	4b29                	li	s6,10
    800244ce:	a831                	j	800244ea <vprintfmt.constprop.1+0x444>
  buf[buflen++] = ch;
    800244d0:	934a                	add	t1,t1,s2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800244d2:	030f8f9b          	addiw	t6,t6,48
  buf[buflen++] = ch;
    800244d6:	01f30023          	sb	t6,0(t1)
    800244da:	01a9a023          	sw	s10,0(s3)
    800244de:	836a                	mv	t1,s10
  if (ch == '\n' || buflen == sizeof(buf))
    800244e0:	029d0463          	beq	s10,s1,80024508 <vprintfmt.constprop.1+0x462>
  while (pos-- > 0)
    800244e4:	1471                	addi	s0,s0,-4
    800244e6:	068a8063          	beq	s5,s0,80024546 <vprintfmt.constprop.1+0x4a0>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800244ea:	00042f83          	lw	t6,0(s0)
  buf[buflen++] = ch;
    800244ee:	00130d1b          	addiw	s10,t1,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    800244f2:	fdfa7fe3          	bgeu	s4,t6,800244d0 <vprintfmt.constprop.1+0x42a>
    800244f6:	057f8f9b          	addiw	t6,t6,87
  buf[buflen++] = ch;
    800244fa:	934a                	add	t1,t1,s2
    800244fc:	01f30023          	sb	t6,0(t1)
    80024500:	01a9a023          	sw	s10,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    80024504:	fd6f9de3          	bne	t6,s6,800244de <vprintfmt.constprop.1+0x438>
  magic_mem[0] = which;
    80024508:	e344                	sd	s1,128(a4)
  magic_mem[1] = arg0;
    8002450a:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    8002450e:	09273823          	sd	s2,144(a4)
  magic_mem[3] = arg2;
    80024512:	09a73c23          	sd	s10,152(a4)
  __sync_synchronize();
    80024516:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002451a:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8002451e:	0002b303          	ld	t1,0(t0)
    80024522:	fe030ee3          	beqz	t1,8002451e <vprintfmt.constprop.1+0x478>
  fromhost = 0;
    80024526:	0000e317          	auipc	t1,0xe
    8002452a:	b0033d23          	sd	zero,-1254(t1) # 80032040 <fromhost>
  __sync_synchronize();
    8002452e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024532:	08073303          	ld	t1,128(a4)
  while (pos-- > 0)
    80024536:	1471                	addi	s0,s0,-4
    buflen = 0;
    80024538:	00025317          	auipc	t1,0x25
    8002453c:	b8032e23          	sw	zero,-1124(t1) # 800490d4 <buflen.2>
    80024540:	4301                	li	t1,0
  while (pos-- > 0)
    80024542:	fa8a94e3          	bne	s5,s0,800244ea <vprintfmt.constprop.1+0x444>
    80024546:	46013b83          	ld	s7,1120(sp)
    8002454a:	45813c03          	ld	s8,1112(sp)
    8002454e:	45013c83          	ld	s9,1104(sp)
    80024552:	44813d03          	ld	s10,1096(sp)
    80024556:	be5d                	j	8002410c <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    80024558:	00144483          	lbu	s1,1(s0)
      lflag++;
    8002455c:	2905                	addiw	s2,s2,1
    switch (ch = *(unsigned char *) fmt++) {
    8002455e:	842a                	mv	s0,a0
      goto reswitch;
    80024560:	b91d                	j	80024196 <vprintfmt.constprop.1+0xf0>
    80024562:	47713023          	sd	s7,1120(sp)
    80024566:	45813c23          	sd	s8,1112(sp)
    8002456a:	45913823          	sd	s9,1104(sp)
    8002456e:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    80024572:	4441                	li	s0,16
  if (lflag >= 2)
    80024574:	4285                	li	t0,1
  buf[buflen++] = ch;
    80024576:	00025317          	auipc	t1,0x25
    8002457a:	b5e32303          	lw	t1,-1186(t1) # 800490d4 <buflen.2>
      precision = va_arg(ap, int);
    8002457e:	00838493          	addi	s1,t2,8
  if (lflag >= 2)
    80024582:	1d22c363          	blt	t0,s2,80024748 <vprintfmt.constprop.1+0x6a2>
  else if (lflag)
    80024586:	3e091263          	bnez	s2,8002496a <vprintfmt.constprop.1+0x8c4>
    return va_arg(*ap, unsigned int);
    8002458a:	0003e283          	lwu	t0,0(t2)
    8002458e:	00025997          	auipc	s3,0x25
    80024592:	b4698993          	addi	s3,s3,-1210 # 800490d4 <buflen.2>
    80024596:	83a6                	mv	t2,s1
    80024598:	00025917          	auipc	s2,0x25
    8002459c:	ae890913          	addi	s2,s2,-1304 # 80049080 <buf.1>
    800245a0:	bd81                	j	800243f0 <vprintfmt.constprop.1+0x34a>
      if ((p = va_arg(ap, char *)) == NULL)
    800245a2:	0003b483          	ld	s1,0(t2)
    800245a6:	47713023          	sd	s7,1120(sp)
    800245aa:	45813c23          	sd	s8,1112(sp)
    800245ae:	45913823          	sd	s9,1104(sp)
    800245b2:	45a13423          	sd	s10,1096(sp)
    800245b6:	42048463          	beqz	s1,800249de <vprintfmt.constprop.1+0x938>
      if (width > 0 && padc != '-')
    800245ba:	1bf05563          	blez	t6,80024764 <vprintfmt.constprop.1+0x6be>
    800245be:	02d00293          	li	t0,45
    800245c2:	445a9063          	bne	s5,t0,80024a02 <vprintfmt.constprop.1+0x95c>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800245c6:	0004c283          	lbu	t0,0(s1)
    800245ca:	0002899b          	sext.w	s3,t0
    800245ce:	2c028363          	beqz	t0,80024894 <vprintfmt.constprop.1+0x7ee>
  tohost = (uintptr_t)magic_mem;
    800245d2:	20070413          	addi	s0,a4,512
    800245d6:	e422                	sd	s0,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800245d8:	5d7d                	li	s10,-1
  buf[buflen++] = ch;
    800245da:	00025b97          	auipc	s7,0x25
    800245de:	afab8b93          	addi	s7,s7,-1286 # 800490d4 <buflen.2>
    800245e2:	00025b17          	auipc	s6,0x25
    800245e6:	a9eb0b13          	addi	s6,s6,-1378 # 80049080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    800245ea:	4ca9                	li	s9,10
  magic_mem[0] = which;
    800245ec:	04000c13          	li	s8,64
    800245f0:	0000e917          	auipc	s2,0xe
    800245f4:	a5090913          	addi	s2,s2,-1456 # 80032040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800245f8:	04034263          	bltz	t1,8002463c <vprintfmt.constprop.1+0x596>
    800245fc:	fff30a9b          	addiw	s5,t1,-1
    80024600:	29aa8863          	beq	s5,s10,80024890 <vprintfmt.constprop.1+0x7ea>
  buf[buflen++] = ch;
    80024604:	00025417          	auipc	s0,0x25
    80024608:	ad042403          	lw	s0,-1328(s0) # 800490d4 <buflen.2>
    8002460c:	00140a1b          	addiw	s4,s0,1
    80024610:	945a                	add	s0,s0,s6
    80024612:	014ba023          	sw	s4,0(s7)
    80024616:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002461a:	03998f63          	beq	s3,s9,80024658 <vprintfmt.constprop.1+0x5b2>
    8002461e:	038a0d63          	beq	s4,s8,80024658 <vprintfmt.constprop.1+0x5b2>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024622:	0014c283          	lbu	t0,1(s1)
        p++;
    80024626:	0485                	addi	s1,s1,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024628:	3ffd                	addiw	t6,t6,-1
    8002462a:	0002899b          	sext.w	s3,t0
    8002462e:	26028163          	beqz	t0,80024890 <vprintfmt.constprop.1+0x7ea>
    80024632:	1c034863          	bltz	t1,80024802 <vprintfmt.constprop.1+0x75c>
    80024636:	8356                	mv	t1,s5
    80024638:	fc0352e3          	bgez	t1,800245fc <vprintfmt.constprop.1+0x556>
  buf[buflen++] = ch;
    8002463c:	00025417          	auipc	s0,0x25
    80024640:	a9842403          	lw	s0,-1384(s0) # 800490d4 <buflen.2>
    80024644:	8a9a                	mv	s5,t1
    80024646:	00140a1b          	addiw	s4,s0,1
    8002464a:	945a                	add	s0,s0,s6
    8002464c:	014ba023          	sw	s4,0(s7)
    80024650:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    80024654:	fd9995e3          	bne	s3,s9,8002461e <vprintfmt.constprop.1+0x578>
  magic_mem[0] = which;
    80024658:	21873023          	sd	s8,512(a4)
  magic_mem[1] = arg0;
    8002465c:	4405                	li	s0,1
    8002465e:	20873423          	sd	s0,520(a4)
  magic_mem[2] = arg1;
    80024662:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    80024666:	21473c23          	sd	s4,536(a4)
  __sync_synchronize();
    8002466a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002466e:	62a2                	ld	t0,8(sp)
    80024670:	0000e417          	auipc	s0,0xe
    80024674:	99040413          	addi	s0,s0,-1648 # 80032000 <tohost>
    80024678:	00543023          	sd	t0,0(s0)
  while (fromhost == 0)
    8002467c:	00093283          	ld	t0,0(s2)
    80024680:	fe028ee3          	beqz	t0,8002467c <vprintfmt.constprop.1+0x5d6>
  fromhost = 0;
    80024684:	0000e297          	auipc	t0,0xe
    80024688:	9a02be23          	sd	zero,-1604(t0) # 80032040 <fromhost>
  __sync_synchronize();
    8002468c:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024690:	20073283          	ld	t0,512(a4)
    buflen = 0;
    80024694:	00025297          	auipc	t0,0x25
    80024698:	a402a023          	sw	zero,-1472(t0) # 800490d4 <buflen.2>
    8002469c:	b759                	j	80024622 <vprintfmt.constprop.1+0x57c>
      if (width < 0)
    8002469e:	82fe                	mv	t0,t6
    800246a0:	000fd363          	bgez	t6,800246a6 <vprintfmt.constprop.1+0x600>
    800246a4:	4281                	li	t0,0
        ch = *fmt;
    800246a6:	00144483          	lbu	s1,1(s0)
      if (width < 0)
    800246aa:	00028f9b          	sext.w	t6,t0
    switch (ch = *(unsigned char *) fmt++) {
    800246ae:	842a                	mv	s0,a0
      goto reswitch;
    800246b0:	b4dd                	j	80024196 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    800246b2:	00025317          	auipc	t1,0x25
    800246b6:	a2232303          	lw	t1,-1502(t1) # 800490d4 <buflen.2>
      putch(va_arg(ap, int), putdat);
    800246ba:	0003a283          	lw	t0,0(t2)
  buf[buflen++] = ch;
    800246be:	00025917          	auipc	s2,0x25
    800246c2:	9c290913          	addi	s2,s2,-1598 # 80049080 <buf.1>
    800246c6:	00130f9b          	addiw	t6,t1,1
    800246ca:	934a                	add	t1,t1,s2
    800246cc:	00530023          	sb	t0,0(t1)
    800246d0:	00025417          	auipc	s0,0x25
    800246d4:	a1f42223          	sw	t6,-1532(s0) # 800490d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    800246d8:	4329                	li	t1,10
    800246da:	00628863          	beq	t0,t1,800246ea <vprintfmt.constprop.1+0x644>
    800246de:	04000313          	li	t1,64
    800246e2:	006f8463          	beq	t6,t1,800246ea <vprintfmt.constprop.1+0x644>
      putch(va_arg(ap, int), putdat);
    800246e6:	03a1                	addi	t2,t2,8
    800246e8:	b415                	j	8002410c <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    800246ea:	04000313          	li	t1,64
    800246ee:	28673023          	sd	t1,640(a4)
  magic_mem[1] = arg0;
    800246f2:	4305                	li	t1,1
    800246f4:	28673423          	sd	t1,648(a4)
  magic_mem[2] = arg1;
    800246f8:	29273823          	sd	s2,656(a4)
  magic_mem[3] = arg2;
    800246fc:	29f73c23          	sd	t6,664(a4)
  __sync_synchronize();
    80024700:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024704:	28070313          	addi	t1,a4,640
    80024708:	0000ef97          	auipc	t6,0xe
    8002470c:	8e6fbc23          	sd	t1,-1800(t6) # 80032000 <tohost>
  while (fromhost == 0)
    80024710:	0000e317          	auipc	t1,0xe
    80024714:	93030313          	addi	t1,t1,-1744 # 80032040 <fromhost>
    80024718:	00033f83          	ld	t6,0(t1)
    8002471c:	fe0f8ee3          	beqz	t6,80024718 <vprintfmt.constprop.1+0x672>
  fromhost = 0;
    80024720:	0000e317          	auipc	t1,0xe
    80024724:	92033023          	sd	zero,-1760(t1) # 80032040 <fromhost>
  __sync_synchronize();
    80024728:	0330000f          	fence	rw,rw
    buflen = 0;
    8002472c:	00025317          	auipc	t1,0x25
    80024730:	9a032423          	sw	zero,-1624(t1) # 800490d4 <buflen.2>
  return magic_mem[0];
    80024734:	28073303          	ld	t1,640(a4)
      putch(va_arg(ap, int), putdat);
    80024738:	03a1                	addi	t2,t2,8
    8002473a:	bac9                	j	8002410c <vprintfmt.constprop.1+0x66>
    8002473c:	836a                	mv	t1,s10
    8002473e:	b38d                	j	800244a0 <vprintfmt.constprop.1+0x3fa>
  while (width-- > pos)
    80024740:	4301                	li	t1,0
    80024742:	b395                	j	800244a6 <vprintfmt.constprop.1+0x400>
  buf[buflen++] = ch;
    80024744:	4305                	li	t1,1
    80024746:	b385                	j	800244a6 <vprintfmt.constprop.1+0x400>
    return va_arg(*ap, unsigned long long);
    80024748:	0003b283          	ld	t0,0(t2)
    8002474c:	00025997          	auipc	s3,0x25
    80024750:	98898993          	addi	s3,s3,-1656 # 800490d4 <buflen.2>
    80024754:	83a6                	mv	t2,s1
    80024756:	00025917          	auipc	s2,0x25
    8002475a:	92a90913          	addi	s2,s2,-1750 # 80049080 <buf.1>
    8002475e:	b949                	j	800243f0 <vprintfmt.constprop.1+0x34a>
    if (num < base)
    80024760:	4b81                	li	s7,0
    80024762:	b955                	j	80024416 <vprintfmt.constprop.1+0x370>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024764:	0004c283          	lbu	t0,0(s1)
    80024768:	0002899b          	sext.w	s3,t0
    8002476c:	e60293e3          	bnez	t0,800245d2 <vprintfmt.constprop.1+0x52c>
    80024770:	46013b83          	ld	s7,1120(sp)
    80024774:	45813c03          	ld	s8,1112(sp)
    80024778:	45013c83          	ld	s9,1104(sp)
    8002477c:	44813d03          	ld	s10,1096(sp)
      if ((p = va_arg(ap, char *)) == NULL)
    80024780:	03a1                	addi	t2,t2,8
    80024782:	b269                	j	8002410c <vprintfmt.constprop.1+0x66>
    return va_arg(*ap, int);
    80024784:	0003a283          	lw	t0,0(t2)
    80024788:	b1a1                	j	800243d0 <vprintfmt.constprop.1+0x32a>
    8002478a:	4441                	li	s0,16
    8002478c:	00838493          	addi	s1,t2,8
    return va_arg(*ap, unsigned long);
    80024790:	0003b283          	ld	t0,0(t2)
    80024794:	83a6                	mv	t2,s1
    80024796:	b9a9                	j	800243f0 <vprintfmt.constprop.1+0x34a>
  magic_mem[0] = which;
    80024798:	e308                	sd	a0,0(a4)
  magic_mem[1] = arg0;
    8002479a:	4305                	li	t1,1
    8002479c:	00673423          	sd	t1,8(a4)
  magic_mem[2] = arg1;
    800247a0:	01f73823          	sd	t6,16(a4)
  magic_mem[3] = arg2;
    800247a4:	ef08                	sd	a0,24(a4)
  __sync_synchronize();
    800247a6:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800247aa:	0000e317          	auipc	t1,0xe
    800247ae:	89630313          	addi	t1,t1,-1898 # 80032040 <fromhost>
    800247b2:	0000e517          	auipc	a0,0xe
    800247b6:	84e53723          	sd	a4,-1970(a0) # 80032000 <tohost>
  while (fromhost == 0)
    800247ba:	00033503          	ld	a0,0(t1)
    800247be:	dd75                	beqz	a0,800247ba <vprintfmt.constprop.1+0x714>
  fromhost = 0;
    800247c0:	0000e517          	auipc	a0,0xe
    800247c4:	88053023          	sd	zero,-1920(a0) # 80032040 <fromhost>
  __sync_synchronize();
    800247c8:	0330000f          	fence	rw,rw
  return magic_mem[0];
    800247cc:	6308                	ld	a0,0(a4)
    buflen = 0;
    800247ce:	00025517          	auipc	a0,0x25
    800247d2:	90052323          	sw	zero,-1786(a0) # 800490d4 <buflen.2>
      fmt = last_fmt;
    800247d6:	8552                	mv	a0,s4
    800247d8:	ba15                	j	8002410c <vprintfmt.constprop.1+0x66>
    800247da:	47713023          	sd	s7,1120(sp)
    800247de:	45813c23          	sd	s8,1112(sp)
    800247e2:	45913823          	sd	s9,1104(sp)
    800247e6:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    800247ea:	4429                	li	s0,10
    800247ec:	b361                	j	80024574 <vprintfmt.constprop.1+0x4ce>
    800247ee:	47713023          	sd	s7,1120(sp)
    800247f2:	45813c23          	sd	s8,1112(sp)
    800247f6:	45913823          	sd	s9,1104(sp)
    800247fa:	45a13423          	sd	s10,1096(sp)
    800247fe:	4421                	li	s0,8
    80024800:	bb95                	j	80024574 <vprintfmt.constprop.1+0x4ce>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024802:	8926                	mv	s2,s1
  if (ch == '\n' || buflen == sizeof(buf))
    80024804:	4a29                	li	s4,10
    80024806:	04000a93          	li	s5,64
    8002480a:	a801                	j	8002481a <vprintfmt.constprop.1+0x774>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002480c:	00194283          	lbu	t0,1(s2)
        p++;
    80024810:	0905                	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024812:	0002899b          	sext.w	s3,t0
    80024816:	06028963          	beqz	t0,80024888 <vprintfmt.constprop.1+0x7e2>
  buf[buflen++] = ch;
    8002481a:	00025317          	auipc	t1,0x25
    8002481e:	8ba32303          	lw	t1,-1862(t1) # 800490d4 <buflen.2>
    80024822:	0013041b          	addiw	s0,t1,1
    80024826:	935a                	add	t1,t1,s6
    80024828:	008ba023          	sw	s0,0(s7)
    8002482c:	00530023          	sb	t0,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    80024830:	01498463          	beq	s3,s4,80024838 <vprintfmt.constprop.1+0x792>
    80024834:	fd541ce3          	bne	s0,s5,8002480c <vprintfmt.constprop.1+0x766>
  magic_mem[0] = which;
    80024838:	04000313          	li	t1,64
    8002483c:	20673023          	sd	t1,512(a4)
  magic_mem[1] = arg0;
    80024840:	4305                	li	t1,1
    80024842:	20673423          	sd	t1,520(a4)
  magic_mem[2] = arg1;
    80024846:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002484a:	20873c23          	sd	s0,536(a4)
  __sync_synchronize();
    8002484e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024852:	20070313          	addi	t1,a4,512
    80024856:	0000d297          	auipc	t0,0xd
    8002485a:	7a62b523          	sd	t1,1962(t0) # 80032000 <tohost>
  while (fromhost == 0)
    8002485e:	0000d297          	auipc	t0,0xd
    80024862:	7e228293          	addi	t0,t0,2018 # 80032040 <fromhost>
    80024866:	0002b303          	ld	t1,0(t0)
    8002486a:	fe030ee3          	beqz	t1,80024866 <vprintfmt.constprop.1+0x7c0>
  fromhost = 0;
    8002486e:	0000d317          	auipc	t1,0xd
    80024872:	7c033923          	sd	zero,2002(t1) # 80032040 <fromhost>
  __sync_synchronize();
    80024876:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002487a:	20073303          	ld	t1,512(a4)
    buflen = 0;
    8002487e:	00025317          	auipc	t1,0x25
    80024882:	84032b23          	sw	zero,-1962(t1) # 800490d4 <buflen.2>
    80024886:	b759                	j	8002480c <vprintfmt.constprop.1+0x766>
    80024888:	009f8fbb          	addw	t6,t6,s1
    8002488c:	412f8fbb          	subw	t6,t6,s2
      for (; width > 0; width--)
    80024890:	eff050e3          	blez	t6,80024770 <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    80024894:	00025317          	auipc	t1,0x25
    80024898:	84032303          	lw	t1,-1984(t1) # 800490d4 <buflen.2>
    8002489c:	00025997          	auipc	s3,0x25
    800248a0:	83898993          	addi	s3,s3,-1992 # 800490d4 <buflen.2>
    800248a4:	00024917          	auipc	s2,0x24
    800248a8:	7dc90913          	addi	s2,s2,2012 # 80049080 <buf.1>
    800248ac:	02000a13          	li	s4,32
  if (ch == '\n' || buflen == sizeof(buf))
    800248b0:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    800248b4:	4a85                	li	s5,1
  tohost = (uintptr_t)magic_mem;
    800248b6:	1c070b93          	addi	s7,a4,448
    800248ba:	0000db17          	auipc	s6,0xd
    800248be:	746b0b13          	addi	s6,s6,1862 # 80032000 <tohost>
    800248c2:	0000d297          	auipc	t0,0xd
    800248c6:	77e28293          	addi	t0,t0,1918 # 80032040 <fromhost>
  buf[buflen++] = ch;
    800248ca:	4c09                	li	s8,2
    800248cc:	0013041b          	addiw	s0,t1,1
    800248d0:	934a                	add	t1,t1,s2
    800248d2:	0089a023          	sw	s0,0(s3)
    800248d6:	01430023          	sb	s4,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    800248da:	04941e63          	bne	s0,s1,80024936 <vprintfmt.constprop.1+0x890>
  magic_mem[0] = which;
    800248de:	1c973023          	sd	s1,448(a4)
  magic_mem[1] = arg0;
    800248e2:	1d573423          	sd	s5,456(a4)
  magic_mem[2] = arg1;
    800248e6:	1d273823          	sd	s2,464(a4)
  magic_mem[3] = arg2;
    800248ea:	1c973c23          	sd	s1,472(a4)
  __sync_synchronize();
    800248ee:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800248f2:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    800248f6:	0002b303          	ld	t1,0(t0)
    800248fa:	fe030ee3          	beqz	t1,800248f6 <vprintfmt.constprop.1+0x850>
  fromhost = 0;
    800248fe:	0000d317          	auipc	t1,0xd
    80024902:	74033123          	sd	zero,1858(t1) # 80032040 <fromhost>
  __sync_synchronize();
    80024906:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002490a:	1c073303          	ld	t1,448(a4)
      for (; width > 0; width--)
    8002490e:	ffff831b          	addiw	t1,t6,-1
    80024912:	0c030163          	beqz	t1,800249d4 <vprintfmt.constprop.1+0x92e>
  buf[buflen++] = ch;
    80024916:	0159a023          	sw	s5,0(s3)
    8002491a:	01490023          	sb	s4,0(s2)
      for (; width > 0; width--)
    8002491e:	3ff9                	addiw	t6,t6,-2
    80024920:	e40f88e3          	beqz	t6,80024770 <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    80024924:	0189a023          	sw	s8,0(s3)
    80024928:	014900a3          	sb	s4,1(s2)
    8002492c:	4309                	li	t1,2
      for (; width > 0; width--)
    8002492e:	3ffd                	addiw	t6,t6,-1
    80024930:	f80f9ee3          	bnez	t6,800248cc <vprintfmt.constprop.1+0x826>
    80024934:	bd35                	j	80024770 <vprintfmt.constprop.1+0x6ca>
    80024936:	8322                	mv	t1,s0
    80024938:	bfdd                	j	8002492e <vprintfmt.constprop.1+0x888>
  buf[buflen++] = ch;
    8002493a:	00024917          	auipc	s2,0x24
    8002493e:	74690913          	addi	s2,s2,1862 # 80049080 <buf.1>
    80024942:	006904b3          	add	s1,s2,t1
    80024946:	0013039b          	addiw	t2,t1,1
    8002494a:	02d00313          	li	t1,45
    8002494e:	00648023          	sb	t1,0(s1)
    80024952:	0079a023          	sw	t2,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    80024956:	04000493          	li	s1,64
  buf[buflen++] = ch;
    8002495a:	831e                	mv	t1,t2
  if (ch == '\n' || buflen == sizeof(buf))
    8002495c:	18938263          	beq	t2,s1,80024ae0 <vprintfmt.constprop.1+0xa3a>
        num = -(long long) num;
    80024960:	83a2                	mv	t2,s0
    80024962:	405002b3          	neg	t0,t0
    80024966:	4429                	li	s0,10
    80024968:	b461                	j	800243f0 <vprintfmt.constprop.1+0x34a>
    8002496a:	00024997          	auipc	s3,0x24
    8002496e:	76a98993          	addi	s3,s3,1898 # 800490d4 <buflen.2>
    80024972:	00024917          	auipc	s2,0x24
    80024976:	70e90913          	addi	s2,s2,1806 # 80049080 <buf.1>
    8002497a:	bd19                	j	80024790 <vprintfmt.constprop.1+0x6ea>
  magic_mem[0] = which;
    8002497c:	14573023          	sd	t0,320(a4)
  magic_mem[1] = arg0;
    80024980:	4305                	li	t1,1
    80024982:	14673423          	sd	t1,328(a4)
  magic_mem[2] = arg1;
    80024986:	15273823          	sd	s2,336(a4)
  magic_mem[3] = arg2;
    8002498a:	14573c23          	sd	t0,344(a4)
  __sync_synchronize();
    8002498e:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024992:	14070313          	addi	t1,a4,320
    80024996:	0000d297          	auipc	t0,0xd
    8002499a:	6662b523          	sd	t1,1642(t0) # 80032000 <tohost>
  while (fromhost == 0)
    8002499e:	0000d317          	auipc	t1,0xd
    800249a2:	6a230313          	addi	t1,t1,1698 # 80032040 <fromhost>
    800249a6:	00033283          	ld	t0,0(t1)
    800249aa:	fe028ee3          	beqz	t0,800249a6 <vprintfmt.constprop.1+0x900>
  fromhost = 0;
    800249ae:	0000d317          	auipc	t1,0xd
    800249b2:	68033923          	sd	zero,1682(t1) # 80032040 <fromhost>
  __sync_synchronize();
    800249b6:	0330000f          	fence	rw,rw
  return magic_mem[0];
    800249ba:	14073403          	ld	s0,320(a4)
  buf[buflen++] = ch;
    800249be:	07800293          	li	t0,120
    800249c2:	4305                	li	t1,1
    800249c4:	00590023          	sb	t0,0(s2)
    800249c8:	0069a023          	sw	t1,0(s3)
    800249cc:	00838493          	addi	s1,t2,8
    800249d0:	4441                	li	s0,16
    800249d2:	bb7d                	j	80024790 <vprintfmt.constprop.1+0x6ea>
    buflen = 0;
    800249d4:	00024317          	auipc	t1,0x24
    800249d8:	70032023          	sw	zero,1792(t1) # 800490d4 <buflen.2>
    800249dc:	bb51                	j	80024770 <vprintfmt.constprop.1+0x6ca>
      if (width > 0 && padc != '-')
    800249de:	01f05663          	blez	t6,800249ea <vprintfmt.constprop.1+0x944>
    800249e2:	02d00293          	li	t0,45
    800249e6:	005a9a63          	bne	s5,t0,800249fa <vprintfmt.constprop.1+0x954>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800249ea:	02800293          	li	t0,40
    800249ee:	8996                	mv	s3,t0
        p = "(null)";
    800249f0:	0000b497          	auipc	s1,0xb
    800249f4:	89848493          	addi	s1,s1,-1896 # 8002f288 <__func__.0+0x86c8>
    800249f8:	bee9                	j	800245d2 <vprintfmt.constprop.1+0x52c>
    800249fa:	0000b497          	auipc	s1,0xb
    800249fe:	88e48493          	addi	s1,s1,-1906 # 8002f288 <__func__.0+0x86c8>
  const char *p = s;
    80024a02:	82a6                	mv	t0,s1
  while (n-- && *p)
    80024a04:	00648933          	add	s2,s1,t1
    80024a08:	00031663          	bnez	t1,80024a14 <vprintfmt.constprop.1+0x96e>
    80024a0c:	a829                	j	80024a26 <vprintfmt.constprop.1+0x980>
    p++;
    80024a0e:	0285                	addi	t0,t0,1
  while (n-- && *p)
    80024a10:	01228563          	beq	t0,s2,80024a1a <vprintfmt.constprop.1+0x974>
    80024a14:	0002c403          	lbu	s0,0(t0)
    80024a18:	f87d                	bnez	s0,80024a0e <vprintfmt.constprop.1+0x968>
  return p - s;
    80024a1a:	409282b3          	sub	t0,t0,s1
        for (width -= strnlen(p, precision); width > 0; width--)
    80024a1e:	405f8fbb          	subw	t6,t6,t0
    80024a22:	d5f051e3          	blez	t6,80024764 <vprintfmt.constprop.1+0x6be>
  buf[buflen++] = ch;
    80024a26:	00024297          	auipc	t0,0x24
    80024a2a:	6ae2a283          	lw	t0,1710(t0) # 800490d4 <buflen.2>
    80024a2e:	00024997          	auipc	s3,0x24
    80024a32:	6a698993          	addi	s3,s3,1702 # 800490d4 <buflen.2>
    80024a36:	00024917          	auipc	s2,0x24
    80024a3a:	64a90913          	addi	s2,s2,1610 # 80049080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    80024a3e:	04000a13          	li	s4,64
  magic_mem[1] = arg0;
    80024a42:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    80024a44:	24070c93          	addi	s9,a4,576
    80024a48:	0000dc17          	auipc	s8,0xd
    80024a4c:	5b8c0c13          	addi	s8,s8,1464 # 80032000 <tohost>
    80024a50:	0000d417          	auipc	s0,0xd
    80024a54:	5f040413          	addi	s0,s0,1520 # 80032040 <fromhost>
  buf[buflen++] = ch;
    80024a58:	4b89                	li	s7,2
    80024a5a:	00128d1b          	addiw	s10,t0,1
    80024a5e:	92ca                	add	t0,t0,s2
    80024a60:	01a9a023          	sw	s10,0(s3)
    80024a64:	01528023          	sb	s5,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    80024a68:	074d1563          	bne	s10,s4,80024ad2 <vprintfmt.constprop.1+0xa2c>
  magic_mem[0] = which;
    80024a6c:	25473023          	sd	s4,576(a4)
  magic_mem[1] = arg0;
    80024a70:	25673423          	sd	s6,584(a4)
  magic_mem[2] = arg1;
    80024a74:	25273823          	sd	s2,592(a4)
  magic_mem[3] = arg2;
    80024a78:	25473c23          	sd	s4,600(a4)
  __sync_synchronize();
    80024a7c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024a80:	019c3023          	sd	s9,0(s8)
  while (fromhost == 0)
    80024a84:	00043283          	ld	t0,0(s0)
    80024a88:	fe028ee3          	beqz	t0,80024a84 <vprintfmt.constprop.1+0x9de>
  fromhost = 0;
    80024a8c:	0000d297          	auipc	t0,0xd
    80024a90:	5a02ba23          	sd	zero,1460(t0) # 80032040 <fromhost>
  __sync_synchronize();
    80024a94:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024a98:	24073283          	ld	t0,576(a4)
        for (width -= strnlen(p, precision); width > 0; width--)
    80024a9c:	ffff829b          	addiw	t0,t6,-1
    80024aa0:	08028763          	beqz	t0,80024b2e <vprintfmt.constprop.1+0xa88>
  buf[buflen++] = ch;
    80024aa4:	0169a023          	sw	s6,0(s3)
    80024aa8:	01590023          	sb	s5,0(s2)
        for (width -= strnlen(p, precision); width > 0; width--)
    80024aac:	3ff9                	addiw	t6,t6,-2
    80024aae:	000f8a63          	beqz	t6,80024ac2 <vprintfmt.constprop.1+0xa1c>
  buf[buflen++] = ch;
    80024ab2:	0179a023          	sw	s7,0(s3)
    80024ab6:	015900a3          	sb	s5,1(s2)
    80024aba:	4289                	li	t0,2
        for (width -= strnlen(p, precision); width > 0; width--)
    80024abc:	3ffd                	addiw	t6,t6,-1
    80024abe:	f80f9ee3          	bnez	t6,80024a5a <vprintfmt.constprop.1+0x9b4>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80024ac2:	0004c283          	lbu	t0,0(s1)
    80024ac6:	0002899b          	sext.w	s3,t0
    80024aca:	ca0283e3          	beqz	t0,80024770 <vprintfmt.constprop.1+0x6ca>
    80024ace:	4f81                	li	t6,0
    80024ad0:	b609                	j	800245d2 <vprintfmt.constprop.1+0x52c>
    80024ad2:	82ea                	mv	t0,s10
    80024ad4:	b7e5                	j	80024abc <vprintfmt.constprop.1+0xa16>
    switch (ch = *(unsigned char *) fmt++) {
    80024ad6:	46013b83          	ld	s7,1120(sp)
    80024ada:	842a                	mv	s0,a0
    80024adc:	f8cff06f          	j	80024268 <vprintfmt.constprop.1+0x1c2>
  magic_mem[0] = which;
    80024ae0:	18773023          	sd	t2,384(a4)
  magic_mem[1] = arg0;
    80024ae4:	4305                	li	t1,1
    80024ae6:	18673423          	sd	t1,392(a4)
  magic_mem[2] = arg1;
    80024aea:	19273823          	sd	s2,400(a4)
  magic_mem[3] = arg2;
    80024aee:	18773c23          	sd	t2,408(a4)
  __sync_synchronize();
    80024af2:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024af6:	18070313          	addi	t1,a4,384
    80024afa:	0000d397          	auipc	t2,0xd
    80024afe:	5063b323          	sd	t1,1286(t2) # 80032000 <tohost>
  while (fromhost == 0)
    80024b02:	0000d317          	auipc	t1,0xd
    80024b06:	53e30313          	addi	t1,t1,1342 # 80032040 <fromhost>
    80024b0a:	00033383          	ld	t2,0(t1)
    80024b0e:	fe038ee3          	beqz	t2,80024b0a <vprintfmt.constprop.1+0xa64>
  fromhost = 0;
    80024b12:	0000d317          	auipc	t1,0xd
    80024b16:	52033723          	sd	zero,1326(t1) # 80032040 <fromhost>
  __sync_synchronize();
    80024b1a:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024b1e:	18073303          	ld	t1,384(a4)
    buflen = 0;
    80024b22:	00024317          	auipc	t1,0x24
    80024b26:	5a032923          	sw	zero,1458(t1) # 800490d4 <buflen.2>
    80024b2a:	4301                	li	t1,0
    80024b2c:	bd15                	j	80024960 <vprintfmt.constprop.1+0x8ba>
    80024b2e:	00024f97          	auipc	t6,0x24
    80024b32:	5a0fa323          	sw	zero,1446(t6) # 800490d4 <buflen.2>
    80024b36:	b771                	j	80024ac2 <vprintfmt.constprop.1+0xa1c>

0000000080024b38 <strlen>:
  while (*p)
    80024b38:	00054783          	lbu	a5,0(a0)
    80024b3c:	cb89                	beqz	a5,80024b4e <strlen+0x16>
  const char *p = s;
    80024b3e:	87aa                	mv	a5,a0
  while (*p)
    80024b40:	0017c703          	lbu	a4,1(a5)
    p++;
    80024b44:	0785                	addi	a5,a5,1
  while (*p)
    80024b46:	ff6d                	bnez	a4,80024b40 <strlen+0x8>
  return p - s;
    80024b48:	40a78533          	sub	a0,a5,a0
    80024b4c:	8082                	ret
  while (*p)
    80024b4e:	4501                	li	a0,0
}
    80024b50:	8082                	ret

0000000080024b52 <strnlen>:
  while (n-- && *p)
    80024b52:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    80024b56:	87aa                	mv	a5,a0
  while (n-- && *p)
    80024b58:	e589                	bnez	a1,80024b62 <strnlen+0x10>
    80024b5a:	a821                	j	80024b72 <strnlen+0x20>
    p++;
    80024b5c:	0785                	addi	a5,a5,1
  while (n-- && *p)
    80024b5e:	00f68863          	beq	a3,a5,80024b6e <strnlen+0x1c>
    80024b62:	0007c703          	lbu	a4,0(a5)
    80024b66:	fb7d                	bnez	a4,80024b5c <strnlen+0xa>
  return p - s;
    80024b68:	40a78533          	sub	a0,a5,a0
}
    80024b6c:	8082                	ret
  return p - s;
    80024b6e:	852e                	mv	a0,a1
    80024b70:	8082                	ret
  while (n-- && *p)
    80024b72:	4501                	li	a0,0
    80024b74:	8082                	ret

0000000080024b76 <setStats>:
  READ_CTR(mcycle);
    80024b76:	b0002773          	csrr	a4,mcycle
    80024b7a:	00024797          	auipc	a5,0x24
    80024b7e:	50678793          	addi	a5,a5,1286 # 80049080 <buf.1>
    80024b82:	c511                	beqz	a0,80024b8e <setStats+0x18>
    80024b84:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    80024b86:	b0202773          	csrr	a4,minstret
    80024b8a:	e7b8                	sd	a4,72(a5)
}
    80024b8c:	8082                	ret
  READ_CTR(mcycle);
    80024b8e:	63b4                	ld	a3,64(a5)
    80024b90:	8f15                	sub	a4,a4,a3
    80024b92:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    80024b94:	b0202773          	csrr	a4,minstret
    80024b98:	67b4                	ld	a3,72(a5)
    80024b9a:	8f15                	sub	a4,a4,a3
    80024b9c:	e7b8                	sd	a4,72(a5)
}
    80024b9e:	8082                	ret

0000000080024ba0 <tohost_exit>:
  tohost = (code << 1) | 1;
    80024ba0:	00151793          	slli	a5,a0,0x1
    80024ba4:	0017e793          	ori	a5,a5,1
    80024ba8:	0000d717          	auipc	a4,0xd
    80024bac:	44f73c23          	sd	a5,1112(a4) # 80032000 <tohost>
  while (1);
    80024bb0:	a001                	j	80024bb0 <tohost_exit+0x10>

0000000080024bb2 <handle_trap>:
  tohost = (code << 1) | 1;
    80024bb2:	6785                	lui	a5,0x1
    80024bb4:	a7378793          	addi	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    80024bb8:	0000d717          	auipc	a4,0xd
    80024bbc:	44f73423          	sd	a5,1096(a4) # 80032000 <tohost>
  while (1);
    80024bc0:	a001                	j	80024bc0 <handle_trap+0xe>

0000000080024bc2 <exit>:
{
    80024bc2:	1141                	addi	sp,sp,-16
    80024bc4:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    80024bc6:	fdbff0ef          	jal	80024ba0 <tohost_exit>

0000000080024bca <abort>:
  tohost = (code << 1) | 1;
    80024bca:	10d00793          	li	a5,269
    80024bce:	0000d717          	auipc	a4,0xd
    80024bd2:	42f73923          	sd	a5,1074(a4) # 80032000 <tohost>
  while (1);
    80024bd6:	a001                	j	80024bd6 <abort+0xc>

0000000080024bd8 <printstr>:
  while (*p)
    80024bd8:	00054783          	lbu	a5,0(a0)
{
    80024bdc:	7159                	addi	sp,sp,-112
    80024bde:	03f10693          	addi	a3,sp,63
    80024be2:	fc06f693          	andi	a3,a3,-64
  while (*p)
    80024be6:	c3b9                	beqz	a5,80024c2c <printstr+0x54>
  const char *p = s;
    80024be8:	87aa                	mv	a5,a0
  while (*p)
    80024bea:	0017c703          	lbu	a4,1(a5)
    p++;
    80024bee:	0785                	addi	a5,a5,1
  while (*p)
    80024bf0:	ff6d                	bnez	a4,80024bea <printstr+0x12>
  return p - s;
    80024bf2:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    80024bf4:	04000713          	li	a4,64
    80024bf8:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    80024bfa:	4705                	li	a4,1
    80024bfc:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    80024bfe:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    80024c00:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    80024c02:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024c06:	0000d717          	auipc	a4,0xd
    80024c0a:	43a70713          	addi	a4,a4,1082 # 80032040 <fromhost>
    80024c0e:	0000d797          	auipc	a5,0xd
    80024c12:	3ed7b923          	sd	a3,1010(a5) # 80032000 <tohost>
  while (fromhost == 0)
    80024c16:	631c                	ld	a5,0(a4)
    80024c18:	dffd                	beqz	a5,80024c16 <printstr+0x3e>
  fromhost = 0;
    80024c1a:	0000d797          	auipc	a5,0xd
    80024c1e:	4207b323          	sd	zero,1062(a5) # 80032040 <fromhost>
  __sync_synchronize();
    80024c22:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024c26:	629c                	ld	a5,0(a3)
}
    80024c28:	6165                	addi	sp,sp,112
    80024c2a:	8082                	ret
  while (*p)
    80024c2c:	4781                	li	a5,0
    80024c2e:	b7d9                	j	80024bf4 <printstr+0x1c>

0000000080024c30 <puts>:
    80024c30:	00054783          	lbu	a5,0(a0)
{
    80024c34:	7171                	addi	sp,sp,-176
    80024c36:	03f10693          	addi	a3,sp,63
    80024c3a:	fc06f693          	andi	a3,a3,-64
  while (*p)
    80024c3e:	c7d9                	beqz	a5,80024ccc <puts+0x9c>
  const char *p = s;
    80024c40:	87aa                	mv	a5,a0
  while (*p)
    80024c42:	0017c703          	lbu	a4,1(a5)
    p++;
    80024c46:	0785                	addi	a5,a5,1
  while (*p)
    80024c48:	ff6d                	bnez	a4,80024c42 <puts+0x12>
  return p - s;
    80024c4a:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    80024c4c:	04000713          	li	a4,64
    80024c50:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    80024c52:	4705                	li	a4,1
    80024c54:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    80024c56:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    80024c58:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    80024c5a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024c5e:	0000d617          	auipc	a2,0xd
    80024c62:	3a260613          	addi	a2,a2,930 # 80032000 <tohost>
    80024c66:	04068793          	addi	a5,a3,64
    80024c6a:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    80024c6c:	0000d797          	auipc	a5,0xd
    80024c70:	3d478793          	addi	a5,a5,980 # 80032040 <fromhost>
    80024c74:	6398                	ld	a4,0(a5)
    80024c76:	df7d                	beqz	a4,80024c74 <puts+0x44>
  fromhost = 0;
    80024c78:	0000d717          	auipc	a4,0xd
    80024c7c:	3c073423          	sd	zero,968(a4) # 80032040 <fromhost>
  __sync_synchronize();
    80024c80:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024c84:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    80024c86:	04000593          	li	a1,64
    80024c8a:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    80024c8c:	4705                	li	a4,1
    80024c8e:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    80024c90:	0000a597          	auipc	a1,0xa
    80024c94:	60058593          	addi	a1,a1,1536 # 8002f290 <__func__.0+0x86d0>
  magic_mem[2] = arg1;
    80024c98:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    80024c9a:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    80024c9c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024ca0:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    80024ca2:	6398                	ld	a4,0(a5)
    80024ca4:	df7d                	beqz	a4,80024ca2 <puts+0x72>
  fromhost = 0;
    80024ca6:	0000d797          	auipc	a5,0xd
    80024caa:	3807bd23          	sd	zero,922(a5) # 80032040 <fromhost>
  __sync_synchronize();
    80024cae:	0330000f          	fence	rw,rw
  while (*p)
    80024cb2:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    80024cb6:	6298                	ld	a4,0(a3)
  while (*p)
    80024cb8:	cf81                	beqz	a5,80024cd0 <puts+0xa0>
  const char *p = s;
    80024cba:	87aa                	mv	a5,a0
  while (*p)
    80024cbc:	0017c703          	lbu	a4,1(a5)
    p++;
    80024cc0:	0785                	addi	a5,a5,1
  while (*p)
    80024cc2:	ff6d                	bnez	a4,80024cbc <puts+0x8c>
  return strlen(s);
    80024cc4:	40a7853b          	subw	a0,a5,a0
}
    80024cc8:	614d                	addi	sp,sp,176
    80024cca:	8082                	ret
  while (*p)
    80024ccc:	4781                	li	a5,0
    80024cce:	bfbd                	j	80024c4c <puts+0x1c>
    80024cd0:	4501                	li	a0,0
}
    80024cd2:	614d                	addi	sp,sp,176
    80024cd4:	8082                	ret

0000000080024cd6 <thread_entry>:
  while (cid != 0);
    80024cd6:	e111                	bnez	a0,80024cda <thread_entry+0x4>
}
    80024cd8:	8082                	ret
  while (cid != 0);
    80024cda:	a001                	j	80024cda <thread_entry+0x4>

0000000080024cdc <printhex>:
{
    80024cdc:	7175                	addi	sp,sp,-144
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024cde:	00f57593          	andi	a1,a0,15
{
    80024ce2:	05f10693          	addi	a3,sp,95
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024ce6:	4625                	li	a2,9
    80024ce8:	872e                	mv	a4,a1
{
    80024cea:	fc06f693          	andi	a3,a3,-64
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024cee:	05700793          	li	a5,87
    80024cf2:	00b66463          	bltu	a2,a1,80024cfa <printhex+0x1e>
    80024cf6:	03000793          	li	a5,48
    80024cfa:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024cfc:	00455793          	srli	a5,a0,0x4
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024d00:	00e10ba3          	sb	a4,23(sp)
    80024d04:	00f7f593          	andi	a1,a5,15
    80024d08:	4625                	li	a2,9
    80024d0a:	87ae                	mv	a5,a1
    80024d0c:	03000713          	li	a4,48
    80024d10:	00b67463          	bgeu	a2,a1,80024d18 <printhex+0x3c>
    80024d14:	05700713          	li	a4,87
    80024d18:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024d1a:	00855793          	srli	a5,a0,0x8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024d1e:	00e10b23          	sb	a4,22(sp)
    80024d22:	00f7f593          	andi	a1,a5,15
    80024d26:	4625                	li	a2,9
    80024d28:	87ae                	mv	a5,a1
    80024d2a:	03000713          	li	a4,48
    80024d2e:	00b67463          	bgeu	a2,a1,80024d36 <printhex+0x5a>
    80024d32:	05700713          	li	a4,87
    80024d36:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024d38:	00c55793          	srli	a5,a0,0xc
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024d3c:	00e10aa3          	sb	a4,21(sp)
    80024d40:	00f7f593          	andi	a1,a5,15
    80024d44:	4625                	li	a2,9
    80024d46:	87ae                	mv	a5,a1
    80024d48:	03000713          	li	a4,48
    80024d4c:	00b67463          	bgeu	a2,a1,80024d54 <printhex+0x78>
    80024d50:	05700713          	li	a4,87
    80024d54:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024d56:	01055793          	srli	a5,a0,0x10
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024d5a:	00e10a23          	sb	a4,20(sp)
    80024d5e:	00f7f593          	andi	a1,a5,15
    80024d62:	4625                	li	a2,9
    80024d64:	87ae                	mv	a5,a1
    80024d66:	03000713          	li	a4,48
    80024d6a:	00b67463          	bgeu	a2,a1,80024d72 <printhex+0x96>
    80024d6e:	05700713          	li	a4,87
    80024d72:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024d74:	01455793          	srli	a5,a0,0x14
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024d78:	00e109a3          	sb	a4,19(sp)
    80024d7c:	00f7f593          	andi	a1,a5,15
    80024d80:	4625                	li	a2,9
    80024d82:	87ae                	mv	a5,a1
    80024d84:	03000713          	li	a4,48
    80024d88:	00b67463          	bgeu	a2,a1,80024d90 <printhex+0xb4>
    80024d8c:	05700713          	li	a4,87
    80024d90:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024d92:	01855793          	srli	a5,a0,0x18
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024d96:	00e10923          	sb	a4,18(sp)
    80024d9a:	00f7f593          	andi	a1,a5,15
    80024d9e:	4625                	li	a2,9
    80024da0:	87ae                	mv	a5,a1
    80024da2:	03000713          	li	a4,48
    80024da6:	00b67463          	bgeu	a2,a1,80024dae <printhex+0xd2>
    80024daa:	05700713          	li	a4,87
    80024dae:	9fb9                	addw	a5,a5,a4
    80024db0:	00f108a3          	sb	a5,17(sp)
    80024db4:	45a5                	li	a1,9
    80024db6:	01c5579b          	srliw	a5,a0,0x1c
    80024dba:	873e                	mv	a4,a5
    80024dbc:	03000613          	li	a2,48
    80024dc0:	00f5f463          	bgeu	a1,a5,80024dc8 <printhex+0xec>
    80024dc4:	05700613          	li	a2,87
    80024dc8:	9f31                	addw	a4,a4,a2
    x >>= 4;
    80024dca:	02055793          	srli	a5,a0,0x20
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024dce:	00e10823          	sb	a4,16(sp)
    80024dd2:	00f7f593          	andi	a1,a5,15
    80024dd6:	4625                	li	a2,9
    80024dd8:	87ae                	mv	a5,a1
    80024dda:	03000713          	li	a4,48
    80024dde:	00b67463          	bgeu	a2,a1,80024de6 <printhex+0x10a>
    80024de2:	05700713          	li	a4,87
    80024de6:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024de8:	02455793          	srli	a5,a0,0x24
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024dec:	00e107a3          	sb	a4,15(sp)
    80024df0:	00f7f593          	andi	a1,a5,15
    80024df4:	4625                	li	a2,9
    80024df6:	87ae                	mv	a5,a1
    80024df8:	03000713          	li	a4,48
    80024dfc:	00b67463          	bgeu	a2,a1,80024e04 <printhex+0x128>
    80024e00:	05700713          	li	a4,87
    80024e04:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024e06:	02855793          	srli	a5,a0,0x28
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024e0a:	00e10723          	sb	a4,14(sp)
    80024e0e:	00f7f593          	andi	a1,a5,15
    80024e12:	4625                	li	a2,9
    80024e14:	87ae                	mv	a5,a1
    80024e16:	03000713          	li	a4,48
    80024e1a:	00b67463          	bgeu	a2,a1,80024e22 <printhex+0x146>
    80024e1e:	05700713          	li	a4,87
    80024e22:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024e24:	02c55793          	srli	a5,a0,0x2c
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024e28:	00e106a3          	sb	a4,13(sp)
    80024e2c:	00f7f593          	andi	a1,a5,15
    80024e30:	4625                	li	a2,9
    80024e32:	87ae                	mv	a5,a1
    80024e34:	03000713          	li	a4,48
    80024e38:	00b67463          	bgeu	a2,a1,80024e40 <printhex+0x164>
    80024e3c:	05700713          	li	a4,87
    80024e40:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024e42:	03055793          	srli	a5,a0,0x30
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024e46:	00e10623          	sb	a4,12(sp)
    80024e4a:	00f7f593          	andi	a1,a5,15
    80024e4e:	4625                	li	a2,9
    80024e50:	87ae                	mv	a5,a1
    80024e52:	03000713          	li	a4,48
    80024e56:	00b67463          	bgeu	a2,a1,80024e5e <printhex+0x182>
    80024e5a:	05700713          	li	a4,87
    80024e5e:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024e60:	03455793          	srli	a5,a0,0x34
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024e64:	00e105a3          	sb	a4,11(sp)
    80024e68:	00f7f593          	andi	a1,a5,15
    80024e6c:	4625                	li	a2,9
    80024e6e:	87ae                	mv	a5,a1
    80024e70:	03000713          	li	a4,48
    80024e74:	00b67463          	bgeu	a2,a1,80024e7c <printhex+0x1a0>
    80024e78:	05700713          	li	a4,87
    80024e7c:	9f3d                	addw	a4,a4,a5
    x >>= 4;
    80024e7e:	03855793          	srli	a5,a0,0x38
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024e82:	00e10523          	sb	a4,10(sp)
    80024e86:	00f7f593          	andi	a1,a5,15
    80024e8a:	4625                	li	a2,9
    80024e8c:	87ae                	mv	a5,a1
    80024e8e:	03000713          	li	a4,48
    80024e92:	00b67463          	bgeu	a2,a1,80024e9a <printhex+0x1be>
    80024e96:	05700713          	li	a4,87
    80024e9a:	9fb9                	addw	a5,a5,a4
    80024e9c:	00f104a3          	sb	a5,9(sp)
    x >>= 4;
    80024ea0:	03c55613          	srli	a2,a0,0x3c
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024ea4:	4725                	li	a4,9
    80024ea6:	8532                	mv	a0,a2
    80024ea8:	03000793          	li	a5,48
    80024eac:	00c77463          	bgeu	a4,a2,80024eb4 <printhex+0x1d8>
    80024eb0:	05700793          	li	a5,87
    80024eb4:	9d3d                	addw	a0,a0,a5
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    80024eb6:	0030                	addi	a2,sp,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80024eb8:	00a10423          	sb	a0,8(sp)
  str[16] = 0;
    80024ebc:	00010c23          	sb	zero,24(sp)
  const char *p = s;
    80024ec0:	87b2                	mv	a5,a2
  while (*p)
    80024ec2:	0017c703          	lbu	a4,1(a5)
    p++;
    80024ec6:	0785                	addi	a5,a5,1
  while (*p)
    80024ec8:	ff6d                	bnez	a4,80024ec2 <printhex+0x1e6>
  magic_mem[0] = which;
    80024eca:	04000713          	li	a4,64
    80024ece:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    80024ed0:	4705                	li	a4,1
    80024ed2:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    80024ed4:	ea90                	sd	a2,16(a3)
  return p - s;
    80024ed6:	8f91                	sub	a5,a5,a2
  magic_mem[3] = arg2;
    80024ed8:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    80024eda:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80024ede:	0000d717          	auipc	a4,0xd
    80024ee2:	16270713          	addi	a4,a4,354 # 80032040 <fromhost>
    80024ee6:	0000d797          	auipc	a5,0xd
    80024eea:	10d7bd23          	sd	a3,282(a5) # 80032000 <tohost>
  while (fromhost == 0)
    80024eee:	631c                	ld	a5,0(a4)
    80024ef0:	dffd                	beqz	a5,80024eee <printhex+0x212>
  fromhost = 0;
    80024ef2:	0000d797          	auipc	a5,0xd
    80024ef6:	1407b723          	sd	zero,334(a5) # 80032040 <fromhost>
  __sync_synchronize();
    80024efa:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80024efe:	629c                	ld	a5,0(a3)
}
    80024f00:	6149                	addi	sp,sp,144
    80024f02:	8082                	ret

0000000080024f04 <printf>:
{
    80024f04:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    80024f06:	02810313          	addi	t1,sp,40
{
    80024f0a:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    80024f0c:	859a                	mv	a1,t1
{
    80024f0e:	ec06                	sd	ra,24(sp)
    80024f10:	f832                	sd	a2,48(sp)
    80024f12:	fc36                	sd	a3,56(sp)
    80024f14:	e0ba                	sd	a4,64(sp)
    80024f16:	e4be                	sd	a5,72(sp)
    80024f18:	e8c2                	sd	a6,80(sp)
    80024f1a:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    80024f1c:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    80024f1e:	988ff0ef          	jal	800240a6 <vprintfmt.constprop.1>
}
    80024f22:	60e2                	ld	ra,24(sp)
    80024f24:	4501                	li	a0,0
    80024f26:	6125                	addi	sp,sp,96
    80024f28:	8082                	ret

0000000080024f2a <sprintf>:
{
    80024f2a:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    80024f2c:	03010313          	addi	t1,sp,48
{
    80024f30:	f022                	sd	s0,32(sp)
    80024f32:	e42a                	sd	a0,8(sp)
    80024f34:	f832                	sd	a2,48(sp)
  char* str0 = str;
    80024f36:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    80024f38:	861a                	mv	a2,t1
    80024f3a:	0028                	addi	a0,sp,8
{
    80024f3c:	f406                	sd	ra,40(sp)
    80024f3e:	fc36                	sd	a3,56(sp)
    80024f40:	e0ba                	sd	a4,64(sp)
    80024f42:	e4be                	sd	a5,72(sp)
    80024f44:	e8c2                	sd	a6,80(sp)
    80024f46:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    80024f48:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    80024f4a:	e47fe0ef          	jal	80023d90 <vprintfmt.constprop.0>
  *str = 0;
    80024f4e:	6522                	ld	a0,8(sp)
    80024f50:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    80024f54:	70a2                	ld	ra,40(sp)
    80024f56:	9d01                	subw	a0,a0,s0
    80024f58:	7402                	ld	s0,32(sp)
    80024f5a:	6125                	addi	sp,sp,96
    80024f5c:	8082                	ret

0000000080024f5e <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    80024f5e:	00c5e833          	or	a6,a1,a2
    80024f62:	00a86833          	or	a6,a6,a0
    80024f66:	00787813          	andi	a6,a6,7
    80024f6a:	87ae                	mv	a5,a1
    80024f6c:	872a                	mv	a4,a0
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    80024f6e:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    80024f72:	0a080b63          	beqz	a6,80025028 <memcpy+0xca>
    while (d < (char*)(dest + len))
    80024f76:	0ed57263          	bgeu	a0,a3,8002505a <memcpy+0xfc>
    80024f7a:	fff60813          	addi	a6,a2,-1
    80024f7e:	489d                	li	a7,7
    80024f80:	0b08ff63          	bgeu	a7,a6,8002503e <memcpy+0xe0>
    80024f84:	00b56833          	or	a6,a0,a1
    80024f88:	00787813          	andi	a6,a6,7
    80024f8c:	0a081963          	bnez	a6,8002503e <memcpy+0xe0>
    80024f90:	00158813          	addi	a6,a1,1
    80024f94:	410508b3          	sub	a7,a0,a6
    80024f98:	0078b893          	sltiu	a7,a7,7
    80024f9c:	0a089363          	bnez	a7,80025042 <memcpy+0xe4>
    80024fa0:	ff867893          	andi	a7,a2,-8
    80024fa4:	01158833          	add	a6,a1,a7
      *d++ = *s++;
    80024fa8:	638c                	ld	a1,0(a5)
    80024faa:	07a1                	addi	a5,a5,8
    80024fac:	0721                	addi	a4,a4,8
    80024fae:	feb73c23          	sd	a1,-8(a4)
    while (d < (char*)(dest + len))
    80024fb2:	fef81be3          	bne	a6,a5,80024fa8 <memcpy+0x4a>
    80024fb6:	011507b3          	add	a5,a0,a7
    80024fba:	09160f63          	beq	a2,a7,80025058 <memcpy+0xfa>
      *d++ = *s++;
    80024fbe:	00084603          	lbu	a2,0(a6)
    80024fc2:	00178713          	addi	a4,a5,1
    80024fc6:	00c78023          	sb	a2,0(a5)
    while (d < (char*)(dest + len))
    80024fca:	08d77763          	bgeu	a4,a3,80025058 <memcpy+0xfa>
      *d++ = *s++;
    80024fce:	00184603          	lbu	a2,1(a6)
    80024fd2:	00278713          	addi	a4,a5,2
    80024fd6:	00c780a3          	sb	a2,1(a5)
    while (d < (char*)(dest + len))
    80024fda:	06d77f63          	bgeu	a4,a3,80025058 <memcpy+0xfa>
      *d++ = *s++;
    80024fde:	00284603          	lbu	a2,2(a6)
    80024fe2:	00378713          	addi	a4,a5,3
    80024fe6:	00c78123          	sb	a2,2(a5)
    while (d < (char*)(dest + len))
    80024fea:	06d77763          	bgeu	a4,a3,80025058 <memcpy+0xfa>
      *d++ = *s++;
    80024fee:	00384603          	lbu	a2,3(a6)
    80024ff2:	00478713          	addi	a4,a5,4
    80024ff6:	00c781a3          	sb	a2,3(a5)
    while (d < (char*)(dest + len))
    80024ffa:	04d77f63          	bgeu	a4,a3,80025058 <memcpy+0xfa>
      *d++ = *s++;
    80024ffe:	00484603          	lbu	a2,4(a6)
    80025002:	00578713          	addi	a4,a5,5
    80025006:	00c78223          	sb	a2,4(a5)
    while (d < (char*)(dest + len))
    8002500a:	04d77763          	bgeu	a4,a3,80025058 <memcpy+0xfa>
      *d++ = *s++;
    8002500e:	00584603          	lbu	a2,5(a6)
    80025012:	00678713          	addi	a4,a5,6
    80025016:	00c782a3          	sb	a2,5(a5)
    while (d < (char*)(dest + len))
    8002501a:	02d77f63          	bgeu	a4,a3,80025058 <memcpy+0xfa>
      *d++ = *s++;
    8002501e:	00684703          	lbu	a4,6(a6)
    80025022:	00e78323          	sb	a4,6(a5)
    while (d < (char*)(dest + len))
    80025026:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    80025028:	02d57863          	bgeu	a0,a3,80025058 <memcpy+0xfa>
    uintptr_t *d = dest;
    8002502c:	87aa                	mv	a5,a0
      *d++ = *s++;
    8002502e:	6198                	ld	a4,0(a1)
    80025030:	07a1                	addi	a5,a5,8
    80025032:	05a1                	addi	a1,a1,8
    80025034:	fee7bc23          	sd	a4,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    80025038:	fed7ebe3          	bltu	a5,a3,8002502e <memcpy+0xd0>
    8002503c:	8082                	ret
    8002503e:	00158813          	addi	a6,a1,1
    80025042:	95b2                	add	a1,a1,a2
    char *d = dest;
    80025044:	87aa                	mv	a5,a0
    80025046:	a011                	j	8002504a <memcpy+0xec>
    80025048:	0805                	addi	a6,a6,1
      *d++ = *s++;
    8002504a:	fff84703          	lbu	a4,-1(a6)
    8002504e:	0785                	addi	a5,a5,1
    80025050:	fee78fa3          	sb	a4,-1(a5)
    while (d < (char*)(dest + len))
    80025054:	feb81ae3          	bne	a6,a1,80025048 <memcpy+0xea>
  }
  return dest;
}
    80025058:	8082                	ret
    8002505a:	8082                	ret

000000008002505c <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8002505c:	1141                	addi	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002505e:	00c567b3          	or	a5,a0,a2
{
    80025062:	e022                	sd	s0,0(sp)
    80025064:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80025066:	8b9d                	andi	a5,a5,7
{
    80025068:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    8002506a:	00c50733          	add	a4,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002506e:	cf81                	beqz	a5,80025086 <memset+0x2a>
    while (d < (char*)(dest + len))
    80025070:	00e57663          	bgeu	a0,a4,8002507c <memset+0x20>
      *d++ = byte;
    80025074:	0ff5f593          	zext.b	a1,a1
    80025078:	fe5ff0ef          	jal	8002505c <memset>
  }
  return dest;
}
    8002507c:	60a2                	ld	ra,8(sp)
    8002507e:	8522                	mv	a0,s0
    80025080:	6402                	ld	s0,0(sp)
    80025082:	0141                	addi	sp,sp,16
    80025084:	8082                	ret
    word |= word << 16 << 16;
    80025086:	010107b7          	lui	a5,0x1010
    8002508a:	10178793          	addi	a5,a5,257 # 1010101 <STACK_SIZE+0xf10101>
    8002508e:	02079693          	slli	a3,a5,0x20
    uintptr_t word = byte & 0xFF;
    80025092:	0ff5f593          	zext.b	a1,a1
    80025096:	96be                	add	a3,a3,a5
    80025098:	02d585b3          	mul	a1,a1,a3
    while (d < (uintptr_t*)(dest + len))
    8002509c:	fee570e3          	bgeu	a0,a4,8002507c <memset+0x20>
    uintptr_t *d = dest;
    800250a0:	87aa                	mv	a5,a0
      *d++ = word;
    800250a2:	07a1                	addi	a5,a5,8
    800250a4:	feb7bc23          	sd	a1,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    800250a8:	fee7ede3          	bltu	a5,a4,800250a2 <memset+0x46>
}
    800250ac:	60a2                	ld	ra,8(sp)
    800250ae:	8522                	mv	a0,s0
    800250b0:	6402                	ld	s0,0(sp)
    800250b2:	0141                	addi	sp,sp,16
    800250b4:	8082                	ret

00000000800250b6 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    800250b6:	00054783          	lbu	a5,0(a0)
    800250ba:	0505                	addi	a0,a0,1
    c2 = *s2++;
    800250bc:	0585                	addi	a1,a1,1
    800250be:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    800250c2:	c799                	beqz	a5,800250d0 <strcmp+0x1a>
    800250c4:	fee789e3          	beq	a5,a4,800250b6 <strcmp>

  return c1 - c2;
    800250c8:	0007851b          	sext.w	a0,a5
}
    800250cc:	9d19                	subw	a0,a0,a4
    800250ce:	8082                	ret
    800250d0:	4501                	li	a0,0
    800250d2:	bfed                	j	800250cc <strcmp+0x16>

00000000800250d4 <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    800250d4:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    800250d6:	0005c703          	lbu	a4,0(a1)
    800250da:	0585                	addi	a1,a1,1
    800250dc:	0785                	addi	a5,a5,1
    800250de:	fee78fa3          	sb	a4,-1(a5)
    800250e2:	fb75                	bnez	a4,800250d6 <strcpy+0x2>
    ;
  return dest;
}
    800250e4:	8082                	ret

00000000800250e6 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    800250e6:	00054683          	lbu	a3,0(a0)
    800250ea:	02000713          	li	a4,32
{
    800250ee:	87aa                	mv	a5,a0
  while (*str == ' ')
    800250f0:	00e69863          	bne	a3,a4,80025100 <atol+0x1a>
    800250f4:	8736                	mv	a4,a3
    800250f6:	0017c683          	lbu	a3,1(a5)
    str++;
    800250fa:	0785                	addi	a5,a5,1
  while (*str == ' ')
    800250fc:	fee68de3          	beq	a3,a4,800250f6 <atol+0x10>

  if (*str == '-' || *str == '+') {
    80025100:	02d00713          	li	a4,45
    80025104:	02e68f63          	beq	a3,a4,80025142 <atol+0x5c>
    80025108:	02b00713          	li	a4,43
    8002510c:	02e68563          	beq	a3,a4,80025136 <atol+0x50>
  int sign = 0;
    80025110:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    80025112:	ce8d                	beqz	a3,8002514c <atol+0x66>
  int sign = 0;
    80025114:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    80025116:	0785                	addi	a5,a5,1
    80025118:	fd06861b          	addiw	a2,a3,-48
    res *= 10;
    8002511c:	00251713          	slli	a4,a0,0x2
  while (*str) {
    80025120:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    80025124:	972a                	add	a4,a4,a0
    80025126:	0706                	slli	a4,a4,0x1
    res += *str++ - '0';
    80025128:	00e60533          	add	a0,a2,a4
  while (*str) {
    8002512c:	f6ed                	bnez	a3,80025116 <atol+0x30>
  }

  return sign ? -res : res;
    8002512e:	c185                	beqz	a1,8002514e <atol+0x68>
    80025130:	40a00533          	neg	a0,a0
    80025134:	8082                	ret
  while (*str) {
    80025136:	0017c683          	lbu	a3,1(a5)
    str++;
    8002513a:	0785                	addi	a5,a5,1
  while (*str) {
    8002513c:	ca81                	beqz	a3,8002514c <atol+0x66>
    sign = *str == '-';
    8002513e:	4581                	li	a1,0
    80025140:	bfd1                	j	80025114 <atol+0x2e>
  while (*str) {
    80025142:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    80025146:	4585                	li	a1,1
    str++;
    80025148:	97ae                	add	a5,a5,a1
  while (*str) {
    8002514a:	f6e9                	bnez	a3,80025114 <atol+0x2e>
  return sign ? -res : res;
    8002514c:	4501                	li	a0,0
}
    8002514e:	8082                	ret

0000000080025150 <_init>:

void _init(){

    80025150:	8082                	ret
	...

0000000080025154 <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    80025154:	f0810113          	addi	sp,sp,-248
    80025158:	e006                	sd	ra,0(sp)
    8002515a:	e80e                	sd	gp,16(sp)
    8002515c:	ec12                	sd	tp,24(sp)
    8002515e:	f016                	sd	t0,32(sp)
    80025160:	f41a                	sd	t1,40(sp)
    80025162:	f81e                	sd	t2,48(sp)
    80025164:	fc22                	sd	s0,56(sp)
    80025166:	e0a6                	sd	s1,64(sp)
    80025168:	e4aa                	sd	a0,72(sp)
    8002516a:	e8ae                	sd	a1,80(sp)
    8002516c:	ecb2                	sd	a2,88(sp)
    8002516e:	f0b6                	sd	a3,96(sp)
    80025170:	f4ba                	sd	a4,104(sp)
    80025172:	f8be                	sd	a5,112(sp)
    80025174:	fcc2                	sd	a6,120(sp)
    80025176:	e146                	sd	a7,128(sp)
    80025178:	e54a                	sd	s2,136(sp)
    8002517a:	e94e                	sd	s3,144(sp)
    8002517c:	ed52                	sd	s4,152(sp)
    8002517e:	f156                	sd	s5,160(sp)
    80025180:	f55a                	sd	s6,168(sp)
    80025182:	f95e                	sd	s7,176(sp)
    80025184:	fd62                	sd	s8,184(sp)
    80025186:	e1e6                	sd	s9,192(sp)
    80025188:	e5ea                	sd	s10,200(sp)
    8002518a:	e9ee                	sd	s11,208(sp)
    8002518c:	edf2                	sd	t3,216(sp)
    8002518e:	f1f6                	sd	t4,224(sp)
    80025190:	f5fa                	sd	t5,232(sp)
    80025192:	f5fe                	sd	t6,232(sp)
    jal mhandler
    80025194:	ba9db0ef          	jal	80000d3c <mhandler>
    j _return
    80025198:	a849                	j	8002522a <_return>
    8002519a:	0001                	nop

000000008002519c <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    8002519c:	f0810113          	addi	sp,sp,-248
    800251a0:	e006                	sd	ra,0(sp)
    800251a2:	e80e                	sd	gp,16(sp)
    800251a4:	ec12                	sd	tp,24(sp)
    800251a6:	f016                	sd	t0,32(sp)
    800251a8:	f41a                	sd	t1,40(sp)
    800251aa:	f81e                	sd	t2,48(sp)
    800251ac:	fc22                	sd	s0,56(sp)
    800251ae:	e0a6                	sd	s1,64(sp)
    800251b0:	e4aa                	sd	a0,72(sp)
    800251b2:	e8ae                	sd	a1,80(sp)
    800251b4:	ecb2                	sd	a2,88(sp)
    800251b6:	f0b6                	sd	a3,96(sp)
    800251b8:	f4ba                	sd	a4,104(sp)
    800251ba:	f8be                	sd	a5,112(sp)
    800251bc:	fcc2                	sd	a6,120(sp)
    800251be:	e146                	sd	a7,128(sp)
    800251c0:	e54a                	sd	s2,136(sp)
    800251c2:	e94e                	sd	s3,144(sp)
    800251c4:	ed52                	sd	s4,152(sp)
    800251c6:	f156                	sd	s5,160(sp)
    800251c8:	f55a                	sd	s6,168(sp)
    800251ca:	f95e                	sd	s7,176(sp)
    800251cc:	fd62                	sd	s8,184(sp)
    800251ce:	e1e6                	sd	s9,192(sp)
    800251d0:	e5ea                	sd	s10,200(sp)
    800251d2:	e9ee                	sd	s11,208(sp)
    800251d4:	edf2                	sd	t3,216(sp)
    800251d6:	f1f6                	sd	t4,224(sp)
    800251d8:	f5fa                	sd	t5,232(sp)
    800251da:	f5fe                	sd	t6,232(sp)
    jal hshandler
    800251dc:	d93db0ef          	jal	80000f6e <hshandler>
    j _return
    800251e0:	a0a9                	j	8002522a <_return>
    800251e2:	0001                	nop

00000000800251e4 <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    800251e4:	f0810113          	addi	sp,sp,-248
    800251e8:	e006                	sd	ra,0(sp)
    800251ea:	e80e                	sd	gp,16(sp)
    800251ec:	ec12                	sd	tp,24(sp)
    800251ee:	f016                	sd	t0,32(sp)
    800251f0:	f41a                	sd	t1,40(sp)
    800251f2:	f81e                	sd	t2,48(sp)
    800251f4:	fc22                	sd	s0,56(sp)
    800251f6:	e0a6                	sd	s1,64(sp)
    800251f8:	e4aa                	sd	a0,72(sp)
    800251fa:	e8ae                	sd	a1,80(sp)
    800251fc:	ecb2                	sd	a2,88(sp)
    800251fe:	f0b6                	sd	a3,96(sp)
    80025200:	f4ba                	sd	a4,104(sp)
    80025202:	f8be                	sd	a5,112(sp)
    80025204:	fcc2                	sd	a6,120(sp)
    80025206:	e146                	sd	a7,128(sp)
    80025208:	e54a                	sd	s2,136(sp)
    8002520a:	e94e                	sd	s3,144(sp)
    8002520c:	ed52                	sd	s4,152(sp)
    8002520e:	f156                	sd	s5,160(sp)
    80025210:	f55a                	sd	s6,168(sp)
    80025212:	f95e                	sd	s7,176(sp)
    80025214:	fd62                	sd	s8,184(sp)
    80025216:	e1e6                	sd	s9,192(sp)
    80025218:	e5ea                	sd	s10,200(sp)
    8002521a:	e9ee                	sd	s11,208(sp)
    8002521c:	edf2                	sd	t3,216(sp)
    8002521e:	f1f6                	sd	t4,224(sp)
    80025220:	f5fa                	sd	t5,232(sp)
    80025222:	f5fe                	sd	t6,232(sp)
    jal vshandler
    80025224:	f7ddb0ef          	jal	800011a0 <vshandler>
    j _return
    80025228:	a009                	j	8002522a <_return>

000000008002522a <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8002522a:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002522c:	04550563          	beq	a0,t0,80025276 <_return_from_m>

0000000080025230 <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    80025230:	6082                	ld	ra,0(sp)
    80025232:	61c2                	ld	gp,16(sp)
    80025234:	6262                	ld	tp,24(sp)
    80025236:	7282                	ld	t0,32(sp)
    80025238:	7322                	ld	t1,40(sp)
    8002523a:	73c2                	ld	t2,48(sp)
    8002523c:	7462                	ld	s0,56(sp)
    8002523e:	6486                	ld	s1,64(sp)
    80025240:	6526                	ld	a0,72(sp)
    80025242:	65c6                	ld	a1,80(sp)
    80025244:	6666                	ld	a2,88(sp)
    80025246:	7686                	ld	a3,96(sp)
    80025248:	7726                	ld	a4,104(sp)
    8002524a:	77c6                	ld	a5,112(sp)
    8002524c:	7866                	ld	a6,120(sp)
    8002524e:	688a                	ld	a7,128(sp)
    80025250:	692a                	ld	s2,136(sp)
    80025252:	69ca                	ld	s3,144(sp)
    80025254:	6a6a                	ld	s4,152(sp)
    80025256:	7a8a                	ld	s5,160(sp)
    80025258:	7b2a                	ld	s6,168(sp)
    8002525a:	7bca                	ld	s7,176(sp)
    8002525c:	7c6a                	ld	s8,184(sp)
    8002525e:	6c8e                	ld	s9,192(sp)
    80025260:	6d2e                	ld	s10,200(sp)
    80025262:	6dce                	ld	s11,208(sp)
    80025264:	6e6e                	ld	t3,216(sp)
    80025266:	7e8e                	ld	t4,224(sp)
    80025268:	7f2e                	ld	t5,232(sp)
    8002526a:	7fce                	ld	t6,240(sp)
    8002526c:	0f810113          	addi	sp,sp,248
    sret
    80025270:	10200073          	sret
    j   .
    80025274:	a001                	j	80025274 <_return_from_s+0x44>

0000000080025276 <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    80025276:	6082                	ld	ra,0(sp)
    80025278:	61c2                	ld	gp,16(sp)
    8002527a:	6262                	ld	tp,24(sp)
    8002527c:	7282                	ld	t0,32(sp)
    8002527e:	7322                	ld	t1,40(sp)
    80025280:	73c2                	ld	t2,48(sp)
    80025282:	7462                	ld	s0,56(sp)
    80025284:	6486                	ld	s1,64(sp)
    80025286:	6526                	ld	a0,72(sp)
    80025288:	65c6                	ld	a1,80(sp)
    8002528a:	6666                	ld	a2,88(sp)
    8002528c:	7686                	ld	a3,96(sp)
    8002528e:	7726                	ld	a4,104(sp)
    80025290:	77c6                	ld	a5,112(sp)
    80025292:	7866                	ld	a6,120(sp)
    80025294:	688a                	ld	a7,128(sp)
    80025296:	692a                	ld	s2,136(sp)
    80025298:	69ca                	ld	s3,144(sp)
    8002529a:	6a6a                	ld	s4,152(sp)
    8002529c:	7a8a                	ld	s5,160(sp)
    8002529e:	7b2a                	ld	s6,168(sp)
    800252a0:	7bca                	ld	s7,176(sp)
    800252a2:	7c6a                	ld	s8,184(sp)
    800252a4:	6c8e                	ld	s9,192(sp)
    800252a6:	6d2e                	ld	s10,200(sp)
    800252a8:	6dce                	ld	s11,208(sp)
    800252aa:	6e6e                	ld	t3,216(sp)
    800252ac:	7e8e                	ld	t4,224(sp)
    800252ae:	7f2e                	ld	t5,232(sp)
    800252b0:	7fce                	ld	t6,240(sp)
    800252b2:	0f810113          	addi	sp,sp,248
    mret
    800252b6:	30200073          	mret

Disassembly of section .text.startup:

00000000800252ba <main>:

void main(){
    800252ba:	1101                	addi	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    800252bc:	00002517          	auipc	a0,0x2
    800252c0:	ccc50513          	addi	a0,a0,-820 # 80026f88 <__func__.0+0x3c8>
void main(){
    800252c4:	ec06                	sd	ra,24(sp)
    800252c6:	e822                	sd	s0,16(sp)
    800252c8:	e426                	sd	s1,8(sp)
    800252ca:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    800252cc:	c39ff0ef          	jal	80024f04 <printf>
    800252d0:	4529                	li	a0,10
    800252d2:	a3dfe0ef          	jal	80023d0e <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    800252d6:	a36db0ef          	jal	8000050c <check_misa_h>
    800252da:	c539                	beqz	a0,80025328 <main+0x6e>
        
        reset_state();
    800252dc:	9d0dc0ef          	jal	800014ac <reset_state>
        for(int i = 0; i < test_table_size; i++){
    800252e0:	0000c497          	auipc	s1,0xc
    800252e4:	ff848493          	addi	s1,s1,-8 # 800312d8 <test_table_size>
    800252e8:	609c                	ld	a5,0(s1)
    800252ea:	4401                	li	s0,0
    800252ec:	0000c917          	auipc	s2,0xc
    800252f0:	ff490913          	addi	s2,s2,-12 # 800312e0 <test_table>
    800252f4:	cf91                	beqz	a5,80025310 <main+0x56>
            reset_state();
    800252f6:	9b6dc0ef          	jal	800014ac <reset_state>
            test_table[i]();
    800252fa:	00093783          	ld	a5,0(s2)
    800252fe:	00341713          	slli	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    80025302:	0405                	addi	s0,s0,1
            test_table[i]();
    80025304:	97ba                	add	a5,a5,a4
    80025306:	639c                	ld	a5,0(a5)
    80025308:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    8002530a:	609c                	ld	a5,0(s1)
    8002530c:	fef465e3          	bltu	s0,a5,800252f6 <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    80025310:	00002517          	auipc	a0,0x2
    80025314:	cc850513          	addi	a0,a0,-824 # 80026fd8 <__func__.0+0x418>
    80025318:	bedff0ef          	jal	80024f04 <printf>
    8002531c:	4529                	li	a0,10
    8002531e:	9f1fe0ef          	jal	80023d0e <putchar>
    exit(0);
    80025322:	4501                	li	a0,0
    80025324:	89fff0ef          	jal	80024bc2 <exit>
        printf("hypervisor extension is not supported!\n");
    80025328:	00002517          	auipc	a0,0x2
    8002532c:	c8850513          	addi	a0,a0,-888 # 80026fb0 <__func__.0+0x3f0>
    80025330:	901ff0ef          	jal	80024c30 <puts>
    80025334:	bff1                	j	80025310 <main+0x56>
{
    80025336:	1141                	addi	sp,sp,-16
  printstr("Implement main(), foo!\n");
    80025338:	0000a517          	auipc	a0,0xa
    8002533c:	f6050513          	addi	a0,a0,-160 # 8002f298 <__func__.0+0x86d8>
{
    80025340:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    80025342:	897ff0ef          	jal	80024bd8 <printstr>
}
    80025346:	60a2                	ld	ra,8(sp)
    80025348:	557d                	li	a0,-1
    8002534a:	0141                	addi	sp,sp,16
    8002534c:	8082                	ret
