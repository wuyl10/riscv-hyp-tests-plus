
build/spike/rvh_test.elf:     file format elf64-littleriscv


Disassembly of section .boot:

0000000080000000 <_boot>:

.section .boot, "ax" 
.globl _boot
_boot:
    bnez a0, .
    80000000:	e101                	bnez	a0,80000000 <_boot>
    csrwi    sscratch, 0xf
    80000002:	1407d073          	csrwi	sscratch,15
    /* Initialize stack pointer */
    la sp, __stack_top
    80000006:	002ff117          	auipc	sp,0x2ff
    8000000a:	ffa10113          	addi	sp,sp,-6 # 802ff000 <__stack_top>

    /* Clear bss */ 
    la a0, __bss_start
    8000000e:	0003c517          	auipc	a0,0x3c
    80000012:	ff250513          	addi	a0,a0,-14 # 8003c000 <hpt>
    la a1, __bss_end
    80000016:	00051597          	auipc	a1,0x51
    8000001a:	0c258593          	addi	a1,a1,194 # 800510d8 <__bss_end>
    bgeu a0, a1, 2f
    8000001e:	00b57763          	bgeu	a0,a1,8000002c <_boot+0x2c>
1:
    sw zero, (a0)
    80000022:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    80000026:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    80000028:	feb56de3          	bltu	a0,a1,80000022 <_boot+0x22>
2:
    call _init
    8000002c:	7c32a0ef          	jal	8002afee <_init>
    call main
    80000030:	1262b0ef          	jal	8002b156 <main>
    li a0, 0
    80000034:	4501                	li	a0,0
    call exit
    80000036:	13b2a0ef          	jal	8002a970 <exit>
    j .
    8000003a:	a001                	j	8000003a <_boot+0x3a>

Disassembly of section .text:

000000008000003c <check_csr_field_spec>:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <rvh_test.h>

bool check_csr_field_spec(){
    8000003c:	7179                	addi	sp,sp,-48

    TEST_START();
    8000003e:	0002b597          	auipc	a1,0x2b
    80000042:	1b258593          	addi	a1,a1,434 # 8002b1f0 <__func__.1>
    80000046:	0002d517          	auipc	a0,0x2d
    8000004a:	2ba50513          	addi	a0,a0,698 # 8002d300 <__func__.0+0x2e0>
bool check_csr_field_spec(){
    8000004e:	f406                	sd	ra,40(sp)
    80000050:	f022                	sd	s0,32(sp)
    80000052:	ec26                	sd	s1,24(sp)
    80000054:	e84a                	sd	s2,16(sp)
    80000056:	e44e                	sd	s3,8(sp)
    80000058:	e052                	sd	s4,0(sp)
    TEST_START();
    8000005a:	5612a0ef          	jal	8002adba <printf>
    8000005e:	4529                	li	a0,10
    80000060:	249290ef          	jal	80029aa8 <putchar>

    /* this assumes machine mode */
    //check_csr_wrrd("mstatus", mstatus, (uint64_t) -1, 0x800000ca007e79aaULL);
    //check_csr_wrrd("mideleg", mideleg, (uint64_t) -1, 0x1666);
    //check_csr_wrrd("medeleg", medeleg, (uint64_t) -1, 0xb15d);
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    80000064:	30302973          	csrr	s2,mideleg
    80000068:	30305073          	csrwi	mideleg,0
    8000006c:	30302473          	csrr	s0,mideleg
    80000070:	0002d617          	auipc	a2,0x2d
    80000074:	2a060613          	addi	a2,a2,672 # 8002d310 <__func__.0+0x2f0>
    80000078:	08200593          	li	a1,130
    8000007c:	0002d517          	auipc	a0,0x2d
    80000080:	29c50513          	addi	a0,a0,668 # 8002d318 <__func__.0+0x2f8>
    80000084:	44400493          	li	s1,1092
    80000088:	5332a0ef          	jal	8002adba <printf>
    8000008c:	46940163          	beq	s0,s1,800004ee <check_csr_field_spec+0x4b2>
    80000090:	0002d597          	auipc	a1,0x2d
    80000094:	26058593          	addi	a1,a1,608 # 8002d2f0 <__func__.0+0x2d0>
    80000098:	0002d517          	auipc	a0,0x2d
    8000009c:	29850513          	addi	a0,a0,664 # 8002d330 <__func__.0+0x310>
    800000a0:	51b2a0ef          	jal	8002adba <printf>
    800000a4:	0002d517          	auipc	a0,0x2d
    800000a8:	29450513          	addi	a0,a0,660 # 8002d338 <__func__.0+0x318>
    800000ac:	50f2a0ef          	jal	8002adba <printf>
    800000b0:	8622                	mv	a2,s0
    800000b2:	86a6                	mv	a3,s1
    800000b4:	4581                	li	a1,0
    800000b6:	0002d517          	auipc	a0,0x2d
    800000ba:	28a50513          	addi	a0,a0,650 # 8002d340 <__func__.0+0x320>
    800000be:	4fd2a0ef          	jal	8002adba <printf>
    800000c2:	02900513          	li	a0,41
    800000c6:	1e3290ef          	jal	80029aa8 <putchar>
    800000ca:	4529                	li	a0,10
    800000cc:	1dd290ef          	jal	80029aa8 <putchar>
    800000d0:	4401                	li	s0,0
    800000d2:	30391073          	csrw	mideleg,s2
    //check_csr_wrrd("mip", mip, (uint64_t) -1, 0x6e6);
    //check_csr_wrrd("mie", mie, (uint64_t) -1, 0x1eee);
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    800000d6:	34a029f3          	csrr	s3,0x34a
    800000da:	54fd                	li	s1,-1
    800000dc:	34a49073          	csrw	0x34a,s1
    800000e0:	34a02973          	csrr	s2,0x34a
    800000e4:	0002d617          	auipc	a2,0x2d
    800000e8:	27460613          	addi	a2,a2,628 # 8002d358 <__func__.0+0x338>
    800000ec:	08200593          	li	a1,130
    800000f0:	0002d517          	auipc	a0,0x2d
    800000f4:	22850513          	addi	a0,a0,552 # 8002d318 <__func__.0+0x2f8>
    800000f8:	4c32a0ef          	jal	8002adba <printf>
    800000fc:	30990f63          	beq	s2,s1,8000041a <check_csr_field_spec+0x3de>
    80000100:	0002d597          	auipc	a1,0x2d
    80000104:	1f058593          	addi	a1,a1,496 # 8002d2f0 <__func__.0+0x2d0>
    80000108:	0002d517          	auipc	a0,0x2d
    8000010c:	22850513          	addi	a0,a0,552 # 8002d330 <__func__.0+0x310>
    80000110:	4ab2a0ef          	jal	8002adba <printf>
    80000114:	0002d517          	auipc	a0,0x2d
    80000118:	22450513          	addi	a0,a0,548 # 8002d338 <__func__.0+0x318>
    8000011c:	49f2a0ef          	jal	8002adba <printf>
    80000120:	86a6                	mv	a3,s1
    80000122:	864a                	mv	a2,s2
    80000124:	85a6                	mv	a1,s1
    80000126:	0002d517          	auipc	a0,0x2d
    8000012a:	21a50513          	addi	a0,a0,538 # 8002d340 <__func__.0+0x320>
    8000012e:	48d2a0ef          	jal	8002adba <printf>
    80000132:	02900513          	li	a0,41
    80000136:	173290ef          	jal	80029aa8 <putchar>
    8000013a:	4529                	li	a0,10
    8000013c:	16d290ef          	jal	80029aa8 <putchar>
    80000140:	4401                	li	s0,0
    80000142:	34a99073          	csrw	0x34a,s3
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    80000146:	34b029f3          	csrr	s3,0x34b
    8000014a:	54fd                	li	s1,-1
    8000014c:	34b49073          	csrw	0x34b,s1
    80000150:	34b02973          	csrr	s2,0x34b
    80000154:	0002d617          	auipc	a2,0x2d
    80000158:	20c60613          	addi	a2,a2,524 # 8002d360 <__func__.0+0x340>
    8000015c:	08200593          	li	a1,130
    80000160:	0002d517          	auipc	a0,0x2d
    80000164:	1b850513          	addi	a0,a0,440 # 8002d318 <__func__.0+0x2f8>
    80000168:	4532a0ef          	jal	8002adba <printf>
    8000016c:	36990363          	beq	s2,s1,800004d2 <check_csr_field_spec+0x496>
    80000170:	0002d597          	auipc	a1,0x2d
    80000174:	18058593          	addi	a1,a1,384 # 8002d2f0 <__func__.0+0x2d0>
    80000178:	0002d517          	auipc	a0,0x2d
    8000017c:	1b850513          	addi	a0,a0,440 # 8002d330 <__func__.0+0x310>
    80000180:	43b2a0ef          	jal	8002adba <printf>
    80000184:	0002d517          	auipc	a0,0x2d
    80000188:	1b450513          	addi	a0,a0,436 # 8002d338 <__func__.0+0x318>
    8000018c:	42f2a0ef          	jal	8002adba <printf>
    80000190:	86a6                	mv	a3,s1
    80000192:	864a                	mv	a2,s2
    80000194:	85a6                	mv	a1,s1
    80000196:	0002d517          	auipc	a0,0x2d
    8000019a:	1aa50513          	addi	a0,a0,426 # 8002d340 <__func__.0+0x320>
    8000019e:	41d2a0ef          	jal	8002adba <printf>
    800001a2:	02900513          	li	a0,41
    800001a6:	103290ef          	jal	80029aa8 <putchar>
    800001aa:	4529                	li	a0,10
    800001ac:	0fd290ef          	jal	80029aa8 <putchar>
    800001b0:	4401                	li	s0,0
    800001b2:	34b99073          	csrw	0x34b,s3
    //check_csr_wrrd("hstatus", CSR_HSTATUS, (uint64_t) -1, 0x30053f3e0);
    //check_csr_wrrd("hideleg", CSR_HIDELEG, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hedeleg", CSR_HEDELEG, (uint64_t) -1, 0xb1ff);
    //check_csr_wrrd("hvip", CSR_HVIP, (uint64_t) -1, 0x444);
    //check_csr_wrrd("hip", CSR_HIP, (uint64_t) -1, 0x4);
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800001b6:	60402a73          	csrr	s4,hie
    800001ba:	54fd                	li	s1,-1
    800001bc:	60449073          	csrw	hie,s1
    800001c0:	60402973          	csrr	s2,hie
    800001c4:	0002d617          	auipc	a2,0x2d
    800001c8:	1a460613          	addi	a2,a2,420 # 8002d368 <__func__.0+0x348>
    800001cc:	08200593          	li	a1,130
    800001d0:	0002d517          	auipc	a0,0x2d
    800001d4:	14850513          	addi	a0,a0,328 # 8002d318 <__func__.0+0x2f8>
    800001d8:	44400993          	li	s3,1092
    800001dc:	3df2a0ef          	jal	8002adba <printf>
    800001e0:	2d390b63          	beq	s2,s3,800004b6 <check_csr_field_spec+0x47a>
    800001e4:	0002d597          	auipc	a1,0x2d
    800001e8:	10c58593          	addi	a1,a1,268 # 8002d2f0 <__func__.0+0x2d0>
    800001ec:	0002d517          	auipc	a0,0x2d
    800001f0:	14450513          	addi	a0,a0,324 # 8002d330 <__func__.0+0x310>
    800001f4:	3c72a0ef          	jal	8002adba <printf>
    800001f8:	0002d517          	auipc	a0,0x2d
    800001fc:	14050513          	addi	a0,a0,320 # 8002d338 <__func__.0+0x318>
    80000200:	3bb2a0ef          	jal	8002adba <printf>
    80000204:	86ce                	mv	a3,s3
    80000206:	864a                	mv	a2,s2
    80000208:	85a6                	mv	a1,s1
    8000020a:	0002d517          	auipc	a0,0x2d
    8000020e:	13650513          	addi	a0,a0,310 # 8002d340 <__func__.0+0x320>
    80000212:	3a92a0ef          	jal	8002adba <printf>
    80000216:	02900513          	li	a0,41
    8000021a:	08f290ef          	jal	80029aa8 <putchar>
    8000021e:	4529                	li	a0,10
    80000220:	089290ef          	jal	80029aa8 <putchar>
    80000224:	4401                	li	s0,0
    80000226:	604a1073          	csrw	hie,s4
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000022a:	643029f3          	csrr	s3,htval
    8000022e:	54fd                	li	s1,-1
    80000230:	64349073          	csrw	htval,s1
    80000234:	64302973          	csrr	s2,htval
    80000238:	0002d617          	auipc	a2,0x2d
    8000023c:	13860613          	addi	a2,a2,312 # 8002d370 <__func__.0+0x350>
    80000240:	08200593          	li	a1,130
    80000244:	0002d517          	auipc	a0,0x2d
    80000248:	0d450513          	addi	a0,a0,212 # 8002d318 <__func__.0+0x2f8>
    8000024c:	36f2a0ef          	jal	8002adba <printf>
    80000250:	24990563          	beq	s2,s1,8000049a <check_csr_field_spec+0x45e>
    80000254:	0002d597          	auipc	a1,0x2d
    80000258:	09c58593          	addi	a1,a1,156 # 8002d2f0 <__func__.0+0x2d0>
    8000025c:	0002d517          	auipc	a0,0x2d
    80000260:	0d450513          	addi	a0,a0,212 # 8002d330 <__func__.0+0x310>
    80000264:	3572a0ef          	jal	8002adba <printf>
    80000268:	0002d517          	auipc	a0,0x2d
    8000026c:	0d050513          	addi	a0,a0,208 # 8002d338 <__func__.0+0x318>
    80000270:	34b2a0ef          	jal	8002adba <printf>
    80000274:	86a6                	mv	a3,s1
    80000276:	864a                	mv	a2,s2
    80000278:	85a6                	mv	a1,s1
    8000027a:	0002d517          	auipc	a0,0x2d
    8000027e:	0c650513          	addi	a0,a0,198 # 8002d340 <__func__.0+0x320>
    80000282:	3392a0ef          	jal	8002adba <printf>
    80000286:	02900513          	li	a0,41
    8000028a:	01f290ef          	jal	80029aa8 <putchar>
    8000028e:	4529                	li	a0,10
    80000290:	019290ef          	jal	80029aa8 <putchar>
    80000294:	4401                	li	s0,0
    80000296:	64399073          	csrw	htval,s3
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000029a:	64a029f3          	csrr	s3,htinst
    8000029e:	54fd                	li	s1,-1
    800002a0:	64a49073          	csrw	htinst,s1
    800002a4:	64a02973          	csrr	s2,htinst
    800002a8:	0002d617          	auipc	a2,0x2d
    800002ac:	0d060613          	addi	a2,a2,208 # 8002d378 <__func__.0+0x358>
    800002b0:	08200593          	li	a1,130
    800002b4:	0002d517          	auipc	a0,0x2d
    800002b8:	06450513          	addi	a0,a0,100 # 8002d318 <__func__.0+0x2f8>
    800002bc:	2ff2a0ef          	jal	8002adba <printf>
    800002c0:	1a990f63          	beq	s2,s1,8000047e <check_csr_field_spec+0x442>
    800002c4:	0002d597          	auipc	a1,0x2d
    800002c8:	02c58593          	addi	a1,a1,44 # 8002d2f0 <__func__.0+0x2d0>
    800002cc:	0002d517          	auipc	a0,0x2d
    800002d0:	06450513          	addi	a0,a0,100 # 8002d330 <__func__.0+0x310>
    800002d4:	2e72a0ef          	jal	8002adba <printf>
    800002d8:	0002d517          	auipc	a0,0x2d
    800002dc:	06050513          	addi	a0,a0,96 # 8002d338 <__func__.0+0x318>
    800002e0:	2db2a0ef          	jal	8002adba <printf>
    800002e4:	86a6                	mv	a3,s1
    800002e6:	864a                	mv	a2,s2
    800002e8:	85a6                	mv	a1,s1
    800002ea:	0002d517          	auipc	a0,0x2d
    800002ee:	05650513          	addi	a0,a0,86 # 8002d340 <__func__.0+0x320>
    800002f2:	2c92a0ef          	jal	8002adba <printf>
    800002f6:	02900513          	li	a0,41
    800002fa:	7ae290ef          	jal	80029aa8 <putchar>
    800002fe:	4529                	li	a0,10
    80000300:	7a8290ef          	jal	80029aa8 <putchar>
    80000304:	4401                	li	s0,0
    80000306:	64a99073          	csrw	htinst,s3
    //check_csr_wrrd("hgatp", CSR_HGATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);
    //check_csr_wrrd("vsstatus", CSR_VSSTATUS, (uint64_t) -1, 0x80000000000c6122ULL);
    //check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vstvec", CSR_VSTVEC, (uint64_t) -1, 0xffffffffffffff01ULL);
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    8000030a:	240029f3          	csrr	s3,vsscratch
    8000030e:	54fd                	li	s1,-1
    80000310:	24049073          	csrw	vsscratch,s1
    80000314:	24002973          	csrr	s2,vsscratch
    80000318:	0002d617          	auipc	a2,0x2d
    8000031c:	06860613          	addi	a2,a2,104 # 8002d380 <__func__.0+0x360>
    80000320:	08200593          	li	a1,130
    80000324:	0002d517          	auipc	a0,0x2d
    80000328:	ff450513          	addi	a0,a0,-12 # 8002d318 <__func__.0+0x2f8>
    8000032c:	28f2a0ef          	jal	8002adba <printf>
    80000330:	12990963          	beq	s2,s1,80000462 <check_csr_field_spec+0x426>
    80000334:	0002d597          	auipc	a1,0x2d
    80000338:	fbc58593          	addi	a1,a1,-68 # 8002d2f0 <__func__.0+0x2d0>
    8000033c:	0002d517          	auipc	a0,0x2d
    80000340:	ff450513          	addi	a0,a0,-12 # 8002d330 <__func__.0+0x310>
    80000344:	2772a0ef          	jal	8002adba <printf>
    80000348:	0002d517          	auipc	a0,0x2d
    8000034c:	ff050513          	addi	a0,a0,-16 # 8002d338 <__func__.0+0x318>
    80000350:	26b2a0ef          	jal	8002adba <printf>
    80000354:	86a6                	mv	a3,s1
    80000356:	864a                	mv	a2,s2
    80000358:	85a6                	mv	a1,s1
    8000035a:	0002d517          	auipc	a0,0x2d
    8000035e:	fe650513          	addi	a0,a0,-26 # 8002d340 <__func__.0+0x320>
    80000362:	2592a0ef          	jal	8002adba <printf>
    80000366:	02900513          	li	a0,41
    8000036a:	73e290ef          	jal	80029aa8 <putchar>
    8000036e:	4529                	li	a0,10
    80000370:	738290ef          	jal	80029aa8 <putchar>
    80000374:	4401                	li	s0,0
    80000376:	24099073          	csrw	vsscratch,s3
    //check_csr_wrrd("vsepc", CSR_VSEPC, (uint64_t) -1, 0xfffffffffffffffeULL);
    //check_csr_wrrd("vscause", CSR_VSCAUSE, (uint64_t) -1, 0x800000000000001fULL);
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    8000037a:	243029f3          	csrr	s3,vstval
    8000037e:	54fd                	li	s1,-1
    80000380:	24349073          	csrw	vstval,s1
    80000384:	24302973          	csrr	s2,vstval
    80000388:	0002d617          	auipc	a2,0x2d
    8000038c:	00860613          	addi	a2,a2,8 # 8002d390 <__func__.0+0x370>
    80000390:	08200593          	li	a1,130
    80000394:	0002d517          	auipc	a0,0x2d
    80000398:	f8450513          	addi	a0,a0,-124 # 8002d318 <__func__.0+0x2f8>
    8000039c:	21f2a0ef          	jal	8002adba <printf>
    800003a0:	08990b63          	beq	s2,s1,80000436 <check_csr_field_spec+0x3fa>
    800003a4:	0002d597          	auipc	a1,0x2d
    800003a8:	f4c58593          	addi	a1,a1,-180 # 8002d2f0 <__func__.0+0x2d0>
    800003ac:	0002d517          	auipc	a0,0x2d
    800003b0:	f8450513          	addi	a0,a0,-124 # 8002d330 <__func__.0+0x310>
    800003b4:	2072a0ef          	jal	8002adba <printf>
    800003b8:	0002d517          	auipc	a0,0x2d
    800003bc:	f8050513          	addi	a0,a0,-128 # 8002d338 <__func__.0+0x318>
    800003c0:	1fb2a0ef          	jal	8002adba <printf>
    800003c4:	86a6                	mv	a3,s1
    800003c6:	864a                	mv	a2,s2
    800003c8:	85a6                	mv	a1,s1
    800003ca:	0002d517          	auipc	a0,0x2d
    800003ce:	f7650513          	addi	a0,a0,-138 # 8002d340 <__func__.0+0x320>
    800003d2:	1e92a0ef          	jal	8002adba <printf>
    800003d6:	02900513          	li	a0,41
    800003da:	6ce290ef          	jal	80029aa8 <putchar>
    800003de:	4529                	li	a0,10
    800003e0:	6c8290ef          	jal	80029aa8 <putchar>
    800003e4:	24399073          	csrw	vstval,s3
    800003e8:	4401                	li	s0,0
    //check_csr_wrrd("vsatp", CSR_VSATP, (uint64_t) -1, 0x0);
    //check_csr_wrrd("vsatp", CSR_VSATP, (8ULL << 60) | (1ULL << 60)-1, 0x80000000000fffffULL);

    TEST_END();
    800003ea:	0002d597          	auipc	a1,0x2d
    800003ee:	f0658593          	addi	a1,a1,-250 # 8002d2f0 <__func__.0+0x2d0>
    800003f2:	0002d517          	auipc	a0,0x2d
    800003f6:	fa650513          	addi	a0,a0,-90 # 8002d398 <__func__.0+0x378>
    800003fa:	1c12a0ef          	jal	8002adba <printf>
    800003fe:	4511                	li	a0,4
    80000400:	26f000ef          	jal	80000e6e <goto_priv>
    80000404:	386010ef          	jal	8000178a <reset_state>
}
    80000408:	70a2                	ld	ra,40(sp)
    8000040a:	8522                	mv	a0,s0
    8000040c:	7402                	ld	s0,32(sp)
    8000040e:	64e2                	ld	s1,24(sp)
    80000410:	6942                	ld	s2,16(sp)
    80000412:	69a2                	ld	s3,8(sp)
    80000414:	6a02                	ld	s4,0(sp)
    80000416:	6145                	addi	sp,sp,48
    80000418:	8082                	ret
    check_csr_wrrd("mtinst", CSR_MTINST, (uint64_t) -1, (uint64_t) -1);
    8000041a:	0002d597          	auipc	a1,0x2d
    8000041e:	ec658593          	addi	a1,a1,-314 # 8002d2e0 <__func__.0+0x2c0>
    80000422:	0002d517          	auipc	a0,0x2d
    80000426:	f0e50513          	addi	a0,a0,-242 # 8002d330 <__func__.0+0x310>
    8000042a:	1912a0ef          	jal	8002adba <printf>
    8000042e:	4529                	li	a0,10
    80000430:	678290ef          	jal	80029aa8 <putchar>
    80000434:	b339                	j	80000142 <check_csr_field_spec+0x106>
    check_csr_wrrd("vstval", CSR_VSTVAL, (uint64_t) -1, 0xffffffffffffffffULL);
    80000436:	0002d597          	auipc	a1,0x2d
    8000043a:	eaa58593          	addi	a1,a1,-342 # 8002d2e0 <__func__.0+0x2c0>
    8000043e:	0002d517          	auipc	a0,0x2d
    80000442:	ef250513          	addi	a0,a0,-270 # 8002d330 <__func__.0+0x310>
    80000446:	1752a0ef          	jal	8002adba <printf>
    8000044a:	4529                	li	a0,10
    8000044c:	65c290ef          	jal	80029aa8 <putchar>
    80000450:	d851                	beqz	s0,800003e4 <check_csr_field_spec+0x3a8>
    80000452:	24399073          	csrw	vstval,s3
    80000456:	4405                	li	s0,1
    TEST_END();
    80000458:	0002d597          	auipc	a1,0x2d
    8000045c:	e8858593          	addi	a1,a1,-376 # 8002d2e0 <__func__.0+0x2c0>
    80000460:	bf49                	j	800003f2 <check_csr_field_spec+0x3b6>
    check_csr_wrrd("vsscratch", CSR_VSSCRATCH, (uint64_t) -1, (uint64_t) -1);
    80000462:	0002d597          	auipc	a1,0x2d
    80000466:	e7e58593          	addi	a1,a1,-386 # 8002d2e0 <__func__.0+0x2c0>
    8000046a:	0002d517          	auipc	a0,0x2d
    8000046e:	ec650513          	addi	a0,a0,-314 # 8002d330 <__func__.0+0x310>
    80000472:	1492a0ef          	jal	8002adba <printf>
    80000476:	4529                	li	a0,10
    80000478:	630290ef          	jal	80029aa8 <putchar>
    8000047c:	bded                	j	80000376 <check_csr_field_spec+0x33a>
    check_csr_wrrd("htinst", CSR_HTINST, (uint64_t) -1, (uint64_t) -1);
    8000047e:	0002d597          	auipc	a1,0x2d
    80000482:	e6258593          	addi	a1,a1,-414 # 8002d2e0 <__func__.0+0x2c0>
    80000486:	0002d517          	auipc	a0,0x2d
    8000048a:	eaa50513          	addi	a0,a0,-342 # 8002d330 <__func__.0+0x310>
    8000048e:	12d2a0ef          	jal	8002adba <printf>
    80000492:	4529                	li	a0,10
    80000494:	614290ef          	jal	80029aa8 <putchar>
    80000498:	b5bd                	j	80000306 <check_csr_field_spec+0x2ca>
    check_csr_wrrd("htval", CSR_HTVAL, (uint64_t) -1, (uint64_t) -1);
    8000049a:	0002d597          	auipc	a1,0x2d
    8000049e:	e4658593          	addi	a1,a1,-442 # 8002d2e0 <__func__.0+0x2c0>
    800004a2:	0002d517          	auipc	a0,0x2d
    800004a6:	e8e50513          	addi	a0,a0,-370 # 8002d330 <__func__.0+0x310>
    800004aa:	1112a0ef          	jal	8002adba <printf>
    800004ae:	4529                	li	a0,10
    800004b0:	5f8290ef          	jal	80029aa8 <putchar>
    800004b4:	b3cd                	j	80000296 <check_csr_field_spec+0x25a>
    check_csr_wrrd("hie", CSR_HIE, (uint64_t) -1, 0x444);
    800004b6:	0002d597          	auipc	a1,0x2d
    800004ba:	e2a58593          	addi	a1,a1,-470 # 8002d2e0 <__func__.0+0x2c0>
    800004be:	0002d517          	auipc	a0,0x2d
    800004c2:	e7250513          	addi	a0,a0,-398 # 8002d330 <__func__.0+0x310>
    800004c6:	0f52a0ef          	jal	8002adba <printf>
    800004ca:	4529                	li	a0,10
    800004cc:	5dc290ef          	jal	80029aa8 <putchar>
    800004d0:	bb99                	j	80000226 <check_csr_field_spec+0x1ea>
    check_csr_wrrd("mtval2", CSR_MTVAL2, (uint64_t) -1, (uint64_t) -1);
    800004d2:	0002d597          	auipc	a1,0x2d
    800004d6:	e0e58593          	addi	a1,a1,-498 # 8002d2e0 <__func__.0+0x2c0>
    800004da:	0002d517          	auipc	a0,0x2d
    800004de:	e5650513          	addi	a0,a0,-426 # 8002d330 <__func__.0+0x310>
    800004e2:	0d92a0ef          	jal	8002adba <printf>
    800004e6:	4529                	li	a0,10
    800004e8:	5c0290ef          	jal	80029aa8 <putchar>
    800004ec:	b1d9                	j	800001b2 <check_csr_field_spec+0x176>
    check_csr_wrrd("mideleg", mideleg, (uint64_t)0, 0x444);
    800004ee:	0002d597          	auipc	a1,0x2d
    800004f2:	df258593          	addi	a1,a1,-526 # 8002d2e0 <__func__.0+0x2c0>
    800004f6:	0002d517          	auipc	a0,0x2d
    800004fa:	e3a50513          	addi	a0,a0,-454 # 8002d330 <__func__.0+0x310>
    800004fe:	0bd2a0ef          	jal	8002adba <printf>
    80000502:	4529                	li	a0,10
    80000504:	5a4290ef          	jal	80029aa8 <putchar>
    80000508:	4405                	li	s0,1
    8000050a:	b6e1                	j	800000d2 <check_csr_field_spec+0x96>

000000008000050c <check_misa_h>:

bool check_misa_h(){
    8000050c:	1141                	addi	sp,sp,-16

    TEST_START();
    8000050e:	0002b597          	auipc	a1,0x2b
    80000512:	cfa58593          	addi	a1,a1,-774 # 8002b208 <__func__.0>
    80000516:	0002d517          	auipc	a0,0x2d
    8000051a:	dea50513          	addi	a0,a0,-534 # 8002d300 <__func__.0+0x2e0>
bool check_misa_h(){
    8000051e:	e406                	sd	ra,8(sp)
    80000520:	e022                	sd	s0,0(sp)
    TEST_START();
    80000522:	0992a0ef          	jal	8002adba <printf>
    80000526:	4529                	li	a0,10
    80000528:	580290ef          	jal	80029aa8 <putchar>

    uint64_t misa = CSRR(misa);
    8000052c:	301027f3          	csrr	a5,misa
    CSRS(misa, (1ULL << 7));
    80000530:	08000793          	li	a5,128
    80000534:	3017a073          	csrs	misa,a5

    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000538:	30102473          	csrr	s0,misa
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000053c:	0002d617          	auipc	a2,0x2d
    80000540:	e6460613          	addi	a2,a2,-412 # 8002d3a0 <__func__.0+0x380>
    80000544:	08200593          	li	a1,130
    80000548:	0002d517          	auipc	a0,0x2d
    8000054c:	dd050513          	addi	a0,a0,-560 # 8002d318 <__func__.0+0x2f8>
    bool hyp_ext_present = CSRR(misa) & (1ULL << 7);
    80000550:	08047413          	andi	s0,s0,128
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    80000554:	0672a0ef          	jal	8002adba <printf>
    80000558:	c031                	beqz	s0,8000059c <check_misa_h+0x90>
    8000055a:	0002d597          	auipc	a1,0x2d
    8000055e:	d8658593          	addi	a1,a1,-634 # 8002d2e0 <__func__.0+0x2c0>
    80000562:	0002d517          	auipc	a0,0x2d
    80000566:	dce50513          	addi	a0,a0,-562 # 8002d330 <__func__.0+0x310>
    8000056a:	0512a0ef          	jal	8002adba <printf>
    8000056e:	4529                	li	a0,10
    80000570:	538290ef          	jal	80029aa8 <putchar>
    //     VERBOSE("misa h bit is hardwired");
    // }

    // CSRW(misa, misa);

    TEST_END();
    80000574:	0002d597          	auipc	a1,0x2d
    80000578:	d6c58593          	addi	a1,a1,-660 # 8002d2e0 <__func__.0+0x2c0>
    8000057c:	0002d517          	auipc	a0,0x2d
    80000580:	e1c50513          	addi	a0,a0,-484 # 8002d398 <__func__.0+0x378>
    80000584:	0372a0ef          	jal	8002adba <printf>
    80000588:	4511                	li	a0,4
    8000058a:	0e5000ef          	jal	80000e6e <goto_priv>
    8000058e:	1fc010ef          	jal	8000178a <reset_state>
}
    80000592:	60a2                	ld	ra,8(sp)
    80000594:	6402                	ld	s0,0(sp)
    TEST_END();
    80000596:	4505                	li	a0,1
}
    80000598:	0141                	addi	sp,sp,16
    8000059a:	8082                	ret
    TEST_ASSERT("check h bit after setting it",  hyp_ext_present, "hypervisor extensions not present");
    8000059c:	0002d597          	auipc	a1,0x2d
    800005a0:	d5458593          	addi	a1,a1,-684 # 8002d2f0 <__func__.0+0x2d0>
    800005a4:	0002d517          	auipc	a0,0x2d
    800005a8:	d8c50513          	addi	a0,a0,-628 # 8002d330 <__func__.0+0x310>
    800005ac:	00f2a0ef          	jal	8002adba <printf>
    800005b0:	0002d517          	auipc	a0,0x2d
    800005b4:	d8850513          	addi	a0,a0,-632 # 8002d338 <__func__.0+0x318>
    800005b8:	0032a0ef          	jal	8002adba <printf>
    800005bc:	0002d517          	auipc	a0,0x2d
    800005c0:	e0450513          	addi	a0,a0,-508 # 8002d3c0 <__func__.0+0x3a0>
    800005c4:	7f62a0ef          	jal	8002adba <printf>
    800005c8:	02900513          	li	a0,41
    800005cc:	4dc290ef          	jal	80029aa8 <putchar>
    800005d0:	4529                	li	a0,10
    800005d2:	4d6290ef          	jal	80029aa8 <putchar>
}
    800005d6:	60a2                	ld	ra,8(sp)
    800005d8:	6402                	ld	s0,0(sp)
        return false;
    800005da:	4501                	li	a0,0
}
    800005dc:	0141                	addi	sp,sp,16
    800005de:	8082                	ret

00000000800005e0 <hspt_init>:
    //     for(int i = 0; i < 512; i++)
    //         hspt[j][i] = 0;

    addr = 0x00000000;
    for(int i = 0; i < 4; i++){
        hspt[0][i] = 
    800005e0:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    800005e4:	5208a0d7          	vid.v	v1
    800005e8:	0cf00693          	li	a3,207
    800005ec:	961e30d7          	vsll.vi	v1,v1,28
    800005f0:	20000737          	lui	a4,0x20000
        addr +=  SUPERPAGE_SIZE(0);
    }

    hspt[0][4] =
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    hspt[1][0] = 
    800005f4:	0d8077d7          	vsetvli	a5,zero,e64,m1,ta,ma
        hspt[0][i] = 
    800005f8:	9736                	add	a4,a4,a3
    hspt[1][0] = 
    800005fa:	5208a257          	vid.v	v4
        hspt[0][i] = 
    800005fe:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    80000602:	0216c157          	vadd.vx	v2,v1,a3
    80000606:	021740d7          	vadd.vx	v1,v1,a4
    hspt[1][0] = 
    8000060a:	0d8077d7          	vsetvli	a5,zero,e64,m1,ta,ma
    8000060e:	96463257          	vsll.vi	v4,v4,12
        hspt[0][i] = 
    80000612:	0004e897          	auipc	a7,0x4e
    80000616:	9ee88893          	addi	a7,a7,-1554 # 8004e000 <hspt>
    8000061a:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8000061e:	0004e697          	auipc	a3,0x4e
    80000622:	9f268693          	addi	a3,a3,-1550 # 8004e010 <hspt+0x10>
    hspt[1][0] = 
    80000626:	4545                	li	a0,17
        hspt[0][i] = 
    80000628:	0206f0a7          	vse64.v	v1,(a3)
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    8000062c:	0004f817          	auipc	a6,0x4f
    80000630:	9d480813          	addi	a6,a6,-1580 # 8004f000 <hspt+0x1000>
        hspt[0][i] = 
    80000634:	0208f127          	vse64.v	v2,(a7)
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    80000638:	00050717          	auipc	a4,0x50
    8000063c:	9c870713          	addi	a4,a4,-1592 # 80050000 <hspt+0x2000>
    hspt[1][0] = 
    80000640:	0d8077d7          	vsetvli	a5,zero,e64,m1,ta,ma
    80000644:	056e                	slli	a0,a0,0x1b
    80000646:	0c000313          	li	t1,192
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000064a:	00275693          	srli	a3,a4,0x2
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    8000064e:	00285613          	srli	a2,a6,0x2
    hspt[1][0] = 
    80000652:	02454257          	vadd.vx	v4,v4,a0
    80000656:	5e034357          	vmv.v.x	v6,t1
        PTE_V | (((uintptr_t)&hspt[2][0]) >> 2);
    8000065a:	0016e793          	ori	a5,a3,1
        PTE_V | (((uintptr_t)&hspt[1][0]) >> 2);
    8000065e:	00166613          	ori	a2,a2,1
    hspt[0][4] =
    80000662:	02c8b023          	sd	a2,32(a7)
    hspt[1][0] = 
    80000666:	00f83023          	sd	a5,0(a6)
    8000066a:	1ff00693          	li	a3,511
    8000066e:	00038597          	auipc	a1,0x38
    80000672:	26258593          	addi	a1,a1,610 # 800388d0 <test_page_perm_table>
    80000676:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma


    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hspt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    8000067a:	2205f107          	vlseg2e64.v	v2,(a1)
        hspt[2][i] = (addr >> 2) | PTE_AD |
    8000067e:	a24130d7          	vsrl.vi	v1,v4,2
    80000682:	00c79513          	slli	a0,a5,0xc
    80000686:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    8000068a:	5e0542d7          	vmv.v.x	v5,a0
    8000068e:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000692:	00479813          	slli	a6,a5,0x4
    80000696:	00379513          	slli	a0,a5,0x3
    8000069a:	8e9d                	sub	a3,a3,a5
    8000069c:	95c2                	add	a1,a1,a6
        hspt[2][i] = (addr >> 2) | PTE_AD |
    8000069e:	2a610157          	vor.vv	v2,v6,v2
    800006a2:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800006a6:	02428257          	vadd.vv	v4,v4,v5
    800006aa:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    800006ae:	2a1100d7          	vor.vv	v1,v1,v2
    800006b2:	020770a7          	vse64.v	v1,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    800006b6:	972a                	add	a4,a4,a0
    800006b8:	fedd                	bnez	a3,80000676 <hspt_init+0x96>
        hspt[2][i] = (addr >> 2) | PTE_AD |
    800006ba:	0003a717          	auipc	a4,0x3a
    800006be:	20673703          	ld	a4,518(a4) # 8003a8c0 <test_page_perm_table+0x1ff0>
    //     hspt[2][i] = 
    //         PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    //     addr +=  PAGE_SIZE;
    // }

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    800006c2:	0003a797          	auipc	a5,0x3a
    800006c6:	2127a783          	lw	a5,530(a5) # 8003a8d4 <curr_priv>
        hspt[2][i] = (addr >> 2) | PTE_AD |
    800006ca:	220806b7          	lui	a3,0x22080
    800006ce:	cc068693          	addi	a3,a3,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
    800006d2:	8f55                	or	a4,a4,a3
    800006d4:	00051697          	auipc	a3,0x51
    800006d8:	92e6b223          	sd	a4,-1756(a3) # 80050ff8 <hspt+0x2ff8>
    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    800006dc:	37f5                	addiw	a5,a5,-3
    800006de:	4705                	li	a4,1
    800006e0:	00f76a63          	bltu	a4,a5,800006f4 <hspt_init+0x114>
        uintptr_t satp = (((uintptr_t)hspt) >> 12) | (0x8ULL << 60);
    800006e4:	577d                	li	a4,-1
    800006e6:	00c8d793          	srli	a5,a7,0xc
    800006ea:	177e                	slli	a4,a4,0x3f
    800006ec:	8fd9                	or	a5,a5,a4
        CSRW(satp, satp);
    800006ee:	18079073          	csrw	satp,a5
    } else {
        ERROR("trying to set hs level satp from lower privilege");
    800006f2:	8082                	ret
void hspt_init(){
    800006f4:	1141                	addi	sp,sp,-16
        ERROR("trying to set hs level satp from lower privilege");
    800006f6:	0002d517          	auipc	a0,0x2d
    800006fa:	d4a50513          	addi	a0,a0,-694 # 8002d440 <__func__.0+0x420>
void hspt_init(){
    800006fe:	e406                	sd	ra,8(sp)
        ERROR("trying to set hs level satp from lower privilege");
    80000700:	6ba2a0ef          	jal	8002adba <printf>
    80000704:	0c000613          	li	a2,192
    80000708:	0002b597          	auipc	a1,0x2b
    8000070c:	b1058593          	addi	a1,a1,-1264 # 8002b218 <__func__.2>
    80000710:	0002d517          	auipc	a0,0x2d
    80000714:	d7850513          	addi	a0,a0,-648 # 8002d488 <__func__.0+0x468>
    80000718:	6a22a0ef          	jal	8002adba <printf>
    8000071c:	4501                	li	a0,0
    8000071e:	2522a0ef          	jal	8002a970 <exit>

0000000080000722 <vspt_init>:

    uintptr_t addr;

    addr = 0x00000000;
    for(int i = 0; i < 4; i++){
        vspt[0][i] = 
    80000722:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    80000726:	5208a0d7          	vid.v	v1
    8000072a:	0cf00713          	li	a4,207
    8000072e:	961e30d7          	vsll.vi	v1,v1,28
            PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    80000732:	00049797          	auipc	a5,0x49
    80000736:	8ce78793          	addi	a5,a5,-1842 # 80049000 <vspt+0x1000>
void vspt_init(){
    8000073a:	1141                	addi	sp,sp,-16
        vspt[0][i] = 
    8000073c:	021740d7          	vadd.vx	v1,v1,a4
    80000740:	300006b7          	lui	a3,0x30000
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    80000744:	0027d713          	srli	a4,a5,0x2
void vspt_init(){
    80000748:	e022                	sd	s0,0(sp)
    8000074a:	e406                	sd	ra,8(sp)
        vspt[0][i] = 
    8000074c:	00048417          	auipc	s0,0x48
    80000750:	8b440413          	addi	s0,s0,-1868 # 80048000 <vspt>
    80000754:	0cf68693          	addi	a3,a3,207 # 300000cf <STACK_SIZE+0x2ff000cf>
        PTE_V | (((uintptr_t)&vspt[1][0]) >> 2);
    80000758:	00176713          	ori	a4,a4,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    8000075c:	6605                	lui	a2,0x1
    8000075e:	853e                	mv	a0,a5
    80000760:	4581                	li	a1,0
        vspt[0][i] = 
    80000762:	020470a7          	vse64.v	v1,(s0)
    80000766:	ec14                	sd	a3,24(s0)
    vspt[0][MEM_BASE/SUPERPAGE_SIZE(0)] = 
    80000768:	e818                	sd	a4,16(s0)
    for(int i = 0; i < 512; i++) vspt[1][i] = 0;
    8000076a:	7542a0ef          	jal	8002aebe <memset>
    8000076e:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000772:	5208a157          	vid.v	v2
    80000776:	4685                	li	a3,1
    80000778:	962ab157          	vsll.vi	v2,v2,21
    8000077c:	06fe                	slli	a3,a3,0x1f
    8000077e:	0cf00613          	li	a2,207
    80000782:	0226c157          	vadd.vx	v2,v2,a3
    80000786:	5e0642d7          	vmv.v.x	v5,a2
    8000078a:	04000713          	li	a4,64
    8000078e:	0d8777d7          	vsetvli	a5,a4,e64,m1,ta,ma
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
        vspt[1][i] = 
           PTE_V | PTE_AD | PTE_RWX | (addr >> 2);  
    80000792:	a22130d7          	vsrl.vi	v1,v2,2
    80000796:	01579693          	slli	a3,a5,0x15
    8000079a:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    8000079e:	5e06c1d7          	vmv.v.x	v3,a3
    800007a2:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    800007a6:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800007aa:	00379693          	slli	a3,a5,0x3
    800007ae:	8f1d                	sub	a4,a4,a5
        vspt[1][i] = 
    800007b0:	020570a7          	vse64.v	v1,(a0)
    800007b4:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    800007b8:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i <  MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    800007bc:	9536                	add	a0,a0,a3
    800007be:	fb61                	bnez	a4,8000078e <vspt_init+0x6c>
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);

    // vspt[0][5] =
    //     PTE_V | PTE_U | PTE_AD | (((uintptr_t)&vspt[2][0]) >> 2);

    vspt[2][0] = 
    800007c0:	5208a257          	vid.v	v4
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007c4:	0004a317          	auipc	t1,0x4a
    800007c8:	83c30313          	addi	t1,t1,-1988 # 8004a000 <vspt+0x2000>
    vspt[2][0] = 
    800007cc:	96463257          	vsll.vi	v4,v4,12
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    800007d0:	0004b717          	auipc	a4,0x4b
    800007d4:	83070713          	addi	a4,a4,-2000 # 8004b000 <vspt+0x3000>
    800007d8:	0c000513          	li	a0,192
    vspt[2][0] = 
    800007dc:	4585                	li	a1,1
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    800007de:	00275693          	srli	a3,a4,0x2
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007e2:	00235793          	srli	a5,t1,0x2
    800007e6:	5e0543d7          	vmv.v.x	v7,a0
    vspt[2][0] = 
    800007ea:	1582                	slli	a1,a1,0x20
        PTE_V | (((uintptr_t)&vspt[3][0]) >> 2);
    800007ec:	0016e693          	ori	a3,a3,1
        PTE_V | (((uintptr_t)&vspt[2][0]) >> 2);
    800007f0:	0017e793          	ori	a5,a5,1
    vspt[2][0] = 
    800007f4:	0245c257          	vadd.vx	v4,v4,a1
    800007f8:	00d33023          	sd	a3,0(t1)
    vspt[0][4] =
    800007fc:	f01c                	sd	a5,32(s0)
    vspt[2][0] = 
    800007fe:	1ff00693          	li	a3,511
    80000802:	00038597          	auipc	a1,0x38
    80000806:	0ce58593          	addi	a1,a1,206 # 800388d0 <test_page_perm_table>
    8000080a:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = TEST_VPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        vspt[3][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].vs;
    8000080e:	2205f107          	vlseg2e64.v	v2,(a1)
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000812:	a24130d7          	vsrl.vi	v1,v4,2
    80000816:	00c79513          	slli	a0,a5,0xc
    8000081a:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    8000081e:	5e054357          	vmv.v.x	v6,a0
    80000822:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000826:	00479813          	slli	a6,a5,0x4
    8000082a:	00379513          	slli	a0,a5,0x3
    8000082e:	8e9d                	sub	a3,a3,a5
    80000830:	95c2                	add	a1,a1,a6
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000832:	2a710157          	vor.vv	v2,v7,v2
    80000836:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    8000083a:	02430257          	vadd.vv	v4,v4,v6
    8000083e:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000842:	2a208157          	vor.vv	v2,v2,v1
    80000846:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    8000084a:	972a                	add	a4,a4,a0
    8000084c:	fedd                	bnez	a3,8000080a <vspt_init+0xe8>
        addr +=  PAGE_SIZE;
    }

    vspt[2][1] = 
    8000084e:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000852:	5208a157          	vid.v	v2
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000856:	0003a697          	auipc	a3,0x3a
    8000085a:	06a6b683          	ld	a3,106(a3) # 8003a8c0 <test_page_perm_table+0x1ff0>
    vspt[2][1] = 
    8000085e:	96263157          	vsll.vi	v2,v2,12
    80000862:	008015b7          	lui	a1,0x801
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000866:	0004b717          	auipc	a4,0x4b
    8000086a:	79a70713          	addi	a4,a4,1946 # 8004c000 <vspt+0x4000>
    8000086e:	40080637          	lui	a2,0x40080
    vspt[2][1] = 
    80000872:	05a6                	slli	a1,a1,0x9
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000874:	cc060613          	addi	a2,a2,-832 # 4007fcc0 <STACK_SIZE+0x3ff7fcc0>
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    80000878:	00275793          	srli	a5,a4,0x2
    vspt[2][1] = 
    8000087c:	0225c157          	vadd.vx	v2,v2,a1
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000880:	8ed1                	or	a3,a3,a2
        PTE_V | (((uintptr_t)&vspt[4][0]) >> 2);
    80000882:	0017e793          	ori	a5,a5,1
        vspt[3][i] = (addr >> 2) | PTE_AD |
    80000886:	fed73c23          	sd	a3,-8(a4)
    vspt[2][1] = 
    8000088a:	00f33423          	sd	a5,8(t1)
    8000088e:	20000693          	li	a3,512
    80000892:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma

    addr = 4 * SUPERPAGE_SIZE(0) + SUPERPAGE_SIZE(1);
    for(int i = 0; i < 512; i++){
        vspt[4][i] = (addr >> 2) | 
    80000896:	a22130d7          	vsrl.vi	v1,v2,2
    8000089a:	00c79613          	slli	a2,a5,0xc
    8000089e:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    800008a2:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_AD | PTE_RWX; 
    800008a6:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    800008aa:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    800008ae:	00379613          	slli	a2,a5,0x3
    800008b2:	8e9d                	sub	a3,a3,a5
        vspt[4][i] = (addr >> 2) | 
    800008b4:	020770a7          	vse64.v	v1,(a4)
    800008b8:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    800008bc:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    800008c0:	9732                	add	a4,a4,a2
    800008c2:	fae1                	bnez	a3,80000892 <vspt_init+0x170>
        addr +=  PAGE_SIZE;
    }  

    vspt[0][5] = 
    800008c4:	5208a157          	vid.v	v2
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    800008c8:	0004c717          	auipc	a4,0x4c
    800008cc:	73870713          	addi	a4,a4,1848 # 8004d000 <vspt+0x5000>
    vspt[0][5] = 
    800008d0:	962ab157          	vsll.vi	v2,v2,21
    800008d4:	4695                	li	a3,5
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    800008d6:	00275793          	srli	a5,a4,0x2
    vspt[0][5] = 
    800008da:	06fa                	slli	a3,a3,0x1e
        PTE_V | (((uintptr_t)&vspt[5][0]) >> 2);
    800008dc:	0017e793          	ori	a5,a5,1
    vspt[0][5] = 
    800008e0:	0226c157          	vadd.vx	v2,v2,a3
    800008e4:	f41c                	sd	a5,40(s0)
    800008e6:	20000693          	li	a3,512
    800008ea:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
    
    addr = 5 * SUPERPAGE_SIZE(0);
    for(int i = 0; i < 512; i++){
        vspt[5][i] = (addr >> 2) |
    800008ee:	a22130d7          	vsrl.vi	v1,v2,2
    800008f2:	01579613          	slli	a2,a5,0x15
    800008f6:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    800008fa:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_AD | PTE_RWX;  
    800008fe:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000902:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000906:	00379613          	slli	a2,a5,0x3
    8000090a:	8e9d                	sub	a3,a3,a5
        vspt[5][i] = (addr >> 2) |
    8000090c:	020770a7          	vse64.v	v1,(a4)
    80000910:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000914:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000918:	9732                	add	a4,a4,a2
    8000091a:	fae1                	bnez	a3,800008ea <vspt_init+0x1c8>
        addr +=  SUPERPAGE_SIZE(1);
    }  

    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    if(curr_priv == PRIV_VS){
    8000091c:	0003a717          	auipc	a4,0x3a
    80000920:	fb872703          	lw	a4,-72(a4) # 8003a8d4 <curr_priv>
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    80000924:	57fd                	li	a5,-1
    80000926:	8031                	srli	s0,s0,0xc
    80000928:	17fe                	slli	a5,a5,0x3f
    if(curr_priv == PRIV_VS){
    8000092a:	4689                	li	a3,2
    uintptr_t satp = (((uintptr_t)vspt) >> 12) | (0x8ULL << 60);
    8000092c:	8c5d                	or	s0,s0,a5
    if(curr_priv == PRIV_VS){
    8000092e:	04d70163          	beq	a4,a3,80000970 <vspt_init+0x24e>
        CSRW(satp, satp);
    } else if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000932:	3775                	addiw	a4,a4,-3
    80000934:	4785                	li	a5,1
    80000936:	00e7e863          	bltu	a5,a4,80000946 <vspt_init+0x224>
        CSRW(CSR_VSATP, satp);
    8000093a:	28041073          	csrw	vsatp,s0
    } else {
        ERROR("");
    }
}
    8000093e:	60a2                	ld	ra,8(sp)
    80000940:	6402                	ld	s0,0(sp)
    80000942:	0141                	addi	sp,sp,16
    80000944:	8082                	ret
        ERROR("");
    80000946:	0002d517          	auipc	a0,0x2d
    8000094a:	b5250513          	addi	a0,a0,-1198 # 8002d498 <__func__.0+0x478>
    8000094e:	46c2a0ef          	jal	8002adba <printf>
    80000952:	10600613          	li	a2,262
    80000956:	0002b597          	auipc	a1,0x2b
    8000095a:	8d258593          	addi	a1,a1,-1838 # 8002b228 <__func__.1>
    8000095e:	0002d517          	auipc	a0,0x2d
    80000962:	b2a50513          	addi	a0,a0,-1238 # 8002d488 <__func__.0+0x468>
    80000966:	4542a0ef          	jal	8002adba <printf>
    8000096a:	4501                	li	a0,0
    8000096c:	0042a0ef          	jal	8002a970 <exit>
        CSRW(satp, satp);
    80000970:	18041073          	csrw	satp,s0
}
    80000974:	60a2                	ld	ra,8(sp)
    80000976:	6402                	ld	s0,0(sp)
    80000978:	0141                	addi	sp,sp,16
    8000097a:	8082                	ret

000000008000097c <hpt_init>:

pte_t hpt_root[PAGE_SIZE*4/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE*4)));
pte_t hpt[5][PAGE_SIZE/sizeof(pte_t)] __attribute__((aligned(PAGE_SIZE)));

void hpt_init(){
    8000097c:	1141                	addi	sp,sp,-16
    8000097e:	e022                	sd	s0,0(sp)

    for(int i = 0; i < 2048; i++){
        hpt_root[i] = 0;
    80000980:	00043417          	auipc	s0,0x43
    80000984:	68040413          	addi	s0,s0,1664 # 80044000 <hpt_root>
    80000988:	6611                	lui	a2,0x4
    8000098a:	4581                	li	a1,0
    8000098c:	8522                	mv	a0,s0
void hpt_init(){
    8000098e:	e406                	sd	ra,8(sp)
        hpt_root[i] = 0;
    80000990:	52e2a0ef          	jal	8002aebe <memset>
    }

    uintptr_t addr = 0x0;
    for(int i = 0; i < 4; i++){
        hpt_root[i] = 
    80000994:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    80000998:	5208a0d7          	vid.v	v1
    8000099c:	0df00713          	li	a4,223
    800009a0:	961e30d7          	vsll.vi	v1,v1,28
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
        addr +=  SUPERPAGE_SIZE(0);
    }

    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    800009a4:	0003b797          	auipc	a5,0x3b
    800009a8:	65c78793          	addi	a5,a5,1628 # 8003c000 <hpt>
        hpt_root[i] = 
    800009ac:	300006b7          	lui	a3,0x30000
    800009b0:	021740d7          	vadd.vx	v1,v1,a4
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    800009b4:	0027d713          	srli	a4,a5,0x2
        hpt_root[i] = 
    800009b8:	0df68693          	addi	a3,a3,223 # 300000df <STACK_SIZE+0x2ff000df>
        PTE_V | (((uintptr_t)&hpt[0][0]) >> 2);
    800009bc:	00176713          	ori	a4,a4,1

    addr = MEM_BASE;
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    800009c0:	6605                	lui	a2,0x1
    800009c2:	853e                	mv	a0,a5
    800009c4:	4581                	li	a1,0
        hpt_root[i] = 
    800009c6:	020470a7          	vse64.v	v1,(s0)
    800009ca:	ec14                	sd	a3,24(s0)
    hpt_root[MEM_BASE/SUPERPAGE_SIZE(0)] =
    800009cc:	e818                	sd	a4,16(s0)
    for(int i = 0; i < 512; i++) hpt[0][i] = 0;
    800009ce:	4f02a0ef          	jal	8002aebe <memset>
    800009d2:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    800009d6:	5208a157          	vid.v	v2
    800009da:	4685                	li	a3,1
    800009dc:	962ab157          	vsll.vi	v2,v2,21
    800009e0:	06fe                	slli	a3,a3,0x1f
    800009e2:	0df00613          	li	a2,223
    800009e6:	0226c157          	vadd.vx	v2,v2,a3
    800009ea:	5e0642d7          	vmv.v.x	v5,a2
    800009ee:	04000713          	li	a4,64
    800009f2:	0d8777d7          	vsetvli	a5,a4,e64,m1,ta,ma
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
        hpt[0][i] = 
            PTE_V | PTE_U | PTE_AD | PTE_RWX | (addr >> 2);  
    800009f6:	a22130d7          	vsrl.vi	v1,v2,2
    800009fa:	01579693          	slli	a3,a5,0x15
    800009fe:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000a02:	5e06c1d7          	vmv.v.x	v3,a3
    80000a06:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000a0a:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000a0e:	00379693          	slli	a3,a5,0x3
    80000a12:	8f1d                	sub	a4,a4,a5
        hpt[0][i] = 
    80000a14:	020570a7          	vse64.v	v1,(a0)
    80000a18:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000a1c:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < MEM_SIZE/SUPERPAGE_SIZE(1)/2; i++){
    80000a20:	9536                	add	a0,a0,a3
    80000a22:	fb61                	bnez	a4,800009f2 <hpt_init+0x76>
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);

    hpt[1][0] = 
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    hpt[1][511] = 
    80000a24:	5208a257          	vid.v	v4
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a28:	0003c317          	auipc	t1,0x3c
    80000a2c:	5d830313          	addi	t1,t1,1496 # 8003d000 <hpt+0x1000>
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a30:	0003d717          	auipc	a4,0x3d
    80000a34:	5d070713          	addi	a4,a4,1488 # 8003e000 <hpt+0x2000>
    hpt[1][511] = 
    80000a38:	96463257          	vsll.vi	v4,v4,12
    80000a3c:	0c000513          	li	a0,192
    80000a40:	45c5                	li	a1,17
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a42:	00235693          	srli	a3,t1,0x2
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a46:	00275793          	srli	a5,a4,0x2
    80000a4a:	5e0543d7          	vmv.v.x	v7,a0
        PTE_V | (((uintptr_t)&hpt[1][0]) >> 2);
    80000a4e:	0016e693          	ori	a3,a3,1
    hpt[1][511] = 
    80000a52:	05ee                	slli	a1,a1,0x1b
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);
    80000a54:	0017e793          	ori	a5,a5,1
    hpt[1][511] = 
    80000a58:	0245c257          	vadd.vx	v4,v4,a1
    hpt_root[4] =
    80000a5c:	f014                	sd	a3,32(s0)
    hpt_root[2047] =
    80000a5e:	00047617          	auipc	a2,0x47
    80000a62:	58d63d23          	sd	a3,1434(a2) # 80047ff8 <hpt_root+0x3ff8>
    hpt[1][0] = 
    80000a66:	00f33023          	sd	a5,0(t1)
    hpt[1][511] = 
    80000a6a:	fef73c23          	sd	a5,-8(a4)
    80000a6e:	1ff00693          	li	a3,511
    80000a72:	00038597          	auipc	a1,0x38
    80000a76:	e6658593          	addi	a1,a1,-410 # 800388d8 <test_page_perm_table+0x8>
    80000a7a:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
        PTE_V | (((uintptr_t)&hpt[2][0]) >> 2);

    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < TEST_PAGE_MAX; i++){
        hpt[2][i] = (addr >> 2) | PTE_AD |
            test_page_perm_table[i].h; 
    80000a7e:	2205f107          	vlseg2e64.v	v2,(a1)
        hpt[2][i] = (addr >> 2) | PTE_AD |
    80000a82:	a24130d7          	vsrl.vi	v1,v4,2
    80000a86:	00c79513          	slli	a0,a5,0xc
    80000a8a:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000a8e:	5e054357          	vmv.v.x	v6,a0
    80000a92:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000a96:	00479813          	slli	a6,a5,0x4
    80000a9a:	00379513          	slli	a0,a5,0x3
    80000a9e:	8e9d                	sub	a3,a3,a5
    80000aa0:	95c2                	add	a1,a1,a6
        hpt[2][i] = (addr >> 2) | PTE_AD |
    80000aa2:	2a710157          	vor.vv	v2,v7,v2
    80000aa6:	0d807657          	vsetvli	a2,zero,e64,m1,ta,ma
    80000aaa:	02430257          	vadd.vv	v4,v4,v6
    80000aae:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000ab2:	2a208157          	vor.vv	v2,v2,v1
    80000ab6:	02077127          	vse64.v	v2,(a4)
    for(int i = 0; i < TEST_PAGE_MAX; i++){
    80000aba:	972a                	add	a4,a4,a0
    80000abc:	fedd                	bnez	a3,80000a7a <hpt_init+0xfe>
        addr +=  PAGE_SIZE;
    }

    hpt[1][1] = 
    80000abe:	0d8078d7          	vsetvli	a7,zero,e64,m1,ta,ma
    80000ac2:	5208a157          	vid.v	v2
        hpt[2][i] = (addr >> 2) | PTE_AD |
    80000ac6:	0003a697          	auipc	a3,0x3a
    80000aca:	e026b683          	ld	a3,-510(a3) # 8003a8c8 <test_page_perm_table+0x1ff8>
    hpt[1][1] = 
    80000ace:	96263157          	vsll.vi	v2,v2,12
    80000ad2:	45c5                	li	a1,17
        hpt[2][i] = (addr >> 2) | PTE_AD |
    80000ad4:	0003e717          	auipc	a4,0x3e
    80000ad8:	52c70713          	addi	a4,a4,1324 # 8003f000 <hpt+0x3000>
    80000adc:	22080637          	lui	a2,0x22080
    hpt[1][1] = 
    80000ae0:	05ee                	slli	a1,a1,0x1b
        hpt[2][i] = (addr >> 2) | PTE_AD |
    80000ae2:	cc060613          	addi	a2,a2,-832 # 2207fcc0 <STACK_SIZE+0x21f7fcc0>
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000ae6:	00275793          	srli	a5,a4,0x2
    hpt[1][1] = 
    80000aea:	0225c157          	vadd.vx	v2,v2,a1
        hpt[2][i] = (addr >> 2) | PTE_AD |
    80000aee:	8ed1                	or	a3,a3,a2
        PTE_V | (((uintptr_t)&hpt[3][0]) >> 2);
    80000af0:	0017e793          	ori	a5,a5,1
        hpt[2][i] = (addr >> 2) | PTE_AD |
    80000af4:	fed73c23          	sd	a3,-8(a4)
    hpt[1][1] = 
    80000af8:	00f33423          	sd	a5,8(t1)
    80000afc:	20000693          	li	a3,512
    80000b00:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[3][i] = (addr >> 2) | 
    80000b04:	a22130d7          	vsrl.vi	v1,v2,2
    80000b08:	00c79613          	slli	a2,a5,0xc
    80000b0c:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b10:	5e0641d7          	vmv.v.x	v3,a2
            PTE_V | PTE_U | PTE_AD | PTE_RWX; 
    80000b14:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000b18:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000b1c:	00379613          	slli	a2,a5,0x3
    80000b20:	8e9d                	sub	a3,a3,a5
        hpt[3][i] = (addr >> 2) | 
    80000b22:	020770a7          	vse64.v	v1,(a4)
    80000b26:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b2a:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000b2e:	9732                	add	a4,a4,a2
    80000b30:	fae1                	bnez	a3,80000b00 <hpt_init+0x184>
        addr +=  PAGE_SIZE;
    }  

    hpt_root[5] =
    80000b32:	5208a157          	vid.v	v2
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);
    80000b36:	0003f717          	auipc	a4,0x3f
    80000b3a:	4ca70713          	addi	a4,a4,1226 # 80040000 <hpt+0x4000>
    hpt_root[5] =
    80000b3e:	962ab157          	vsll.vi	v2,v2,21
    80000b42:	46c5                	li	a3,17
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);
    80000b44:	00275793          	srli	a5,a4,0x2
    hpt_root[5] =
    80000b48:	06ee                	slli	a3,a3,0x1b
        PTE_V | (((uintptr_t)&hpt[4][0]) >> 2);
    80000b4a:	0017e793          	ori	a5,a5,1
    hpt_root[5] =
    80000b4e:	0226c157          	vadd.vx	v2,v2,a3
    80000b52:	f41c                	sd	a5,40(s0)
    80000b54:	20000693          	li	a3,512
    80000b58:	0d86f7d7          	vsetvli	a5,a3,e64,m1,ta,ma
    addr = TEST_PPAGE_BASE;
    for(int i = 0; i < 512; i++){
        hpt[4][i] = (addr >> 2) |
    80000b5c:	a22130d7          	vsrl.vi	v1,v2,2
    80000b60:	01579613          	slli	a2,a5,0x15
    80000b64:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b68:	5e0641d7          	vmv.v.x	v3,a2
             PTE_V | PTE_U | PTE_AD | PTE_RWX;  
    80000b6c:	0d87f057          	vsetvli	zero,a5,e64,m1,ta,ma
    80000b70:	2a1280d7          	vor.vv	v1,v1,v5
    for(int i = 0; i < 512; i++){
    80000b74:	00379613          	slli	a2,a5,0x3
    80000b78:	8e9d                	sub	a3,a3,a5
        hpt[4][i] = (addr >> 2) |
    80000b7a:	020770a7          	vse64.v	v1,(a4)
    80000b7e:	0d8075d7          	vsetvli	a1,zero,e64,m1,ta,ma
    80000b82:	02218157          	vadd.vv	v2,v2,v3
    for(int i = 0; i < 512; i++){
    80000b86:	9732                	add	a4,a4,a2
    80000b88:	fae1                	bnez	a3,80000b58 <hpt_init+0x1dc>
        addr +=  SUPERPAGE_SIZE(1);
    }  

    if(curr_priv == PRIV_HS || curr_priv == PRIV_M){
    80000b8a:	0003a797          	auipc	a5,0x3a
    80000b8e:	d4a7a783          	lw	a5,-694(a5) # 8003a8d4 <curr_priv>
    80000b92:	4705                	li	a4,1
    80000b94:	37f5                	addiw	a5,a5,-3
    80000b96:	00f76d63          	bltu	a4,a5,80000bb0 <hpt_init+0x234>
        uintptr_t hsatp = (((uintptr_t)hpt_root) >> 12) | (0x8ULL << 60);
    80000b9a:	577d                	li	a4,-1
    80000b9c:	00c45793          	srli	a5,s0,0xc
    80000ba0:	177e                	slli	a4,a4,0x3f
    80000ba2:	8fd9                	or	a5,a5,a4
        CSRW(CSR_HGATP, hsatp);
    80000ba4:	68079073          	csrw	hgatp,a5
    } else {
        ERROR("trying to set hs hgatp from lower privilege");
    }
}
    80000ba8:	60a2                	ld	ra,8(sp)
    80000baa:	6402                	ld	s0,0(sp)
    80000bac:	0141                	addi	sp,sp,16
    80000bae:	8082                	ret
        ERROR("trying to set hs hgatp from lower privilege");
    80000bb0:	0002d517          	auipc	a0,0x2d
    80000bb4:	90050513          	addi	a0,a0,-1792 # 8002d4b0 <__func__.0+0x490>
    80000bb8:	2022a0ef          	jal	8002adba <printf>
    80000bbc:	14e00613          	li	a2,334
    80000bc0:	0002a597          	auipc	a1,0x2a
    80000bc4:	67858593          	addi	a1,a1,1656 # 8002b238 <__func__.0>
    80000bc8:	0002d517          	auipc	a0,0x2d
    80000bcc:	8c050513          	addi	a0,a0,-1856 # 8002d488 <__func__.0+0x468>
    80000bd0:	1ea2a0ef          	jal	8002adba <printf>
    80000bd4:	4501                	li	a0,0
    80000bd6:	59b290ef          	jal	8002a970 <exit>

0000000080000bda <page_table_add_vs_AD>:

void page_table_add_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000bda:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000bde:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000be2:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000be6:	00038617          	auipc	a2,0x38
    80000bea:	cea60613          	addi	a2,a2,-790 # 800388d0 <test_page_perm_table>
    addr = 0x88000000 + i*0x1000;
    80000bee:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000bf0:	962e                	add	a2,a2,a1

    addr = 0x100000000 + i*0x1000;
    80000bf2:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000bf4:	6210                	ld	a2,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000bf6:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000bf8:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000bfa:	9736                	add	a4,a4,a3
    addr = 0x88000000 + i*0x1000;
    80000bfc:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000bfe:	40050593          	addi	a1,a0,1024
    80000c02:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c04:	8309                	srli	a4,a4,0x2
    80000c06:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c0a:	8fd1                	or	a5,a5,a2
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c0c:	8f51                	or	a4,a4,a2
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c0e:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c10:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c12:	0004d617          	auipc	a2,0x4d
    80000c16:	3ee60613          	addi	a2,a2,1006 # 8004e000 <hspt>
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c1a:	00047697          	auipc	a3,0x47
    80000c1e:	3e668693          	addi	a3,a3,998 # 80048000 <vspt>
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c22:	0c07e793          	ori	a5,a5,192
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c26:	0c076713          	ori	a4,a4,192
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c2a:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c2c:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c2e:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | PTE_AD | test_page_perm_table[i].vs;
    80000c30:	e298                	sd	a4,0(a3)
}
    80000c32:	8082                	ret

0000000080000c34 <page_table_del_vs_AD>:

void page_table_del_vs_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000c34:	00c5171b          	slliw	a4,a0,0xc
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c38:	00451593          	slli	a1,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000c3c:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c40:	00038617          	auipc	a2,0x38
    80000c44:	c9060613          	addi	a2,a2,-880 # 800388d0 <test_page_perm_table>
    80000c48:	962e                	add	a2,a2,a1
    addr = 0x88000000 + i*0x1000;
    80000c4a:	9fb9                	addw	a5,a5,a4

    addr = 0x100000000 + i*0x1000;
    80000c4c:	4685                	li	a3,1
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c4e:	00063803          	ld	a6,0(a2)
    addr = 0x100000000 + i*0x1000;
    80000c52:	1682                	slli	a3,a3,0x20
    addr = 0x88000000 + i*0x1000;
    80000c54:	1782                	slli	a5,a5,0x20
    addr = 0x100000000 + i*0x1000;
    80000c56:	9736                	add	a4,a4,a3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c58:	40050593          	addi	a1,a0,1024
    addr = 0x88000000 + i*0x1000;
    80000c5c:	9381                	srli	a5,a5,0x20
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c5e:	60050513          	addi	a0,a0,1536
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c62:	8389                	srli	a5,a5,0x2
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c64:	8309                	srli	a4,a4,0x2
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c66:	058e                	slli	a1,a1,0x3
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c68:	050e                	slli	a0,a0,0x3
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c6a:	0004d617          	auipc	a2,0x4d
    80000c6e:	39660613          	addi	a2,a2,918 # 8004e000 <hspt>
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c72:	00047697          	auipc	a3,0x47
    80000c76:	38e68693          	addi	a3,a3,910 # 80048000 <vspt>
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c7a:	0107e7b3          	or	a5,a5,a6
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c7e:	01076733          	or	a4,a4,a6
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c82:	962e                	add	a2,a2,a1
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c84:	96aa                	add	a3,a3,a0
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c86:	e21c                	sd	a5,0(a2)
    vspt[3][i] = (addr >> 2) | test_page_perm_table[i].vs;
    80000c88:	e298                	sd	a4,0(a3)
}
    80000c8a:	8082                	ret

0000000080000c8c <page_table_add_h_AD>:


void page_table_add_h_AD(int i){
    uintptr_t addr;
    addr = 0x88000000 + i*0x1000;
    80000c8c:	00c5171b          	slliw	a4,a0,0xc
    80000c90:	880007b7          	lui	a5,0x88000
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000c94:	00451693          	slli	a3,a0,0x4
    addr = 0x88000000 + i*0x1000;
    80000c98:	9fb9                	addw	a5,a5,a4
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000c9a:	00038717          	auipc	a4,0x38
    80000c9e:	c3670713          	addi	a4,a4,-970 # 800388d0 <test_page_perm_table>
    80000ca2:	9736                	add	a4,a4,a3
    80000ca4:	6714                	ld	a3,8(a4)
    addr = 0x88000000 + i*0x1000;
    80000ca6:	1782                	slli	a5,a5,0x20
    80000ca8:	9381                	srli	a5,a5,0x20
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
    80000caa:	40050513          	addi	a0,a0,1024
    80000cae:	8389                	srli	a5,a5,0x2
    80000cb0:	050e                	slli	a0,a0,0x3
    80000cb2:	0004d717          	auipc	a4,0x4d
    80000cb6:	34e70713          	addi	a4,a4,846 # 8004e000 <hspt>
    80000cba:	8fd5                	or	a5,a5,a3
    80000cbc:	972a                	add	a4,a4,a0
    80000cbe:	e31c                	sd	a5,0(a4)
}
    80000cc0:	8082                	ret

0000000080000cc2 <page_table_del_h_AD>:

void page_table_del_h_AD(int i){
    80000cc2:	00c5171b          	slliw	a4,a0,0xc
    80000cc6:	880007b7          	lui	a5,0x88000
    80000cca:	00451693          	slli	a3,a0,0x4
    80000cce:	9fb9                	addw	a5,a5,a4
    80000cd0:	00038717          	auipc	a4,0x38
    80000cd4:	c0070713          	addi	a4,a4,-1024 # 800388d0 <test_page_perm_table>
    80000cd8:	9736                	add	a4,a4,a3
    80000cda:	6714                	ld	a3,8(a4)
    80000cdc:	1782                	slli	a5,a5,0x20
    80000cde:	9381                	srli	a5,a5,0x20
    80000ce0:	40050513          	addi	a0,a0,1024
    80000ce4:	8389                	srli	a5,a5,0x2
    80000ce6:	050e                	slli	a0,a0,0x3
    80000ce8:	0004d717          	auipc	a4,0x4d
    80000cec:	31870713          	addi	a4,a4,792 # 8004e000 <hspt>
    80000cf0:	8fd5                	or	a5,a5,a3
    80000cf2:	972a                	add	a4,a4,a0
    80000cf4:	e31c                	sd	a5,0(a4)
    80000cf6:	8082                	ret

0000000080000cf8 <hspt_switch>:
    addr = 0x88000000 + i*0x1000;
    hspt[2][i] = (addr >> 2) | test_page_perm_table[i].h;
}

void hspt_switch(){
    pte_t temp = hspt[2][SWITCH1];
    80000cf8:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    80000cfc:	0004f797          	auipc	a5,0x4f
    80000d00:	66478793          	addi	a5,a5,1636 # 80050360 <hspt+0x2360>
    80000d04:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hspt[2][SWITCH1];
    80000d08:	5208a0d7          	vid.v	v1
    80000d0c:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000d10:	32308157          	vrgather.vv	v2,v3,v1
    hspt[2][SWITCH1] = hspt[2][SWITCH2];
    80000d14:	0207f127          	vse64.v	v2,(a5)
    hspt[2][SWITCH2] = temp;
}
    80000d18:	8082                	ret

0000000080000d1a <vspt_switch>:

void vspt_switch(){
    pte_t temp = vspt[3][SWITCH1];
    80000d1a:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    80000d1e:	0004a797          	auipc	a5,0x4a
    80000d22:	64278793          	addi	a5,a5,1602 # 8004b360 <vspt+0x3360>
    80000d26:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = vspt[3][SWITCH1];
    80000d2a:	5208a0d7          	vid.v	v1
    80000d2e:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000d32:	32308157          	vrgather.vv	v2,v3,v1
    vspt[3][SWITCH1] = vspt[3][SWITCH2];
    80000d36:	0207f127          	vse64.v	v2,(a5)
    vspt[3][SWITCH2] = temp;
}
    80000d3a:	8082                	ret

0000000080000d3c <hpt_switch>:

void hpt_switch(){
    pte_t temp = hpt[2][SWITCH1];
    80000d3c:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    80000d40:	0003d797          	auipc	a5,0x3d
    80000d44:	62078793          	addi	a5,a5,1568 # 8003e360 <hpt+0x2360>
    80000d48:	0207f187          	vle64.v	v3,(a5)
    pte_t temp = hpt[2][SWITCH1];
    80000d4c:	5208a0d7          	vid.v	v1
    80000d50:	0e10b0d7          	vrsub.vi	v1,v1,1
    80000d54:	32308157          	vrgather.vv	v2,v3,v1
    hpt[2][SWITCH1] = hpt[2][SWITCH2];
    80000d58:	0207f127          	vse64.v	v2,(a5)
    hpt[2][SWITCH2] = temp;
}
    80000d5c:	8082                	ret

0000000080000d5e <ecall>:

uint64_t ecall_args[2];

uint64_t ecall(uint64_t a0, uint64_t a1)
{
    ecall_args[0] = a0;
    80000d5e:	00050797          	auipc	a5,0x50
    80000d62:	2a278793          	addi	a5,a5,674 # 80051000 <ecall_args>
    80000d66:	e388                	sd	a0,0(a5)
    ecall_args[1] = a1;
    80000d68:	e78c                	sd	a1,8(a5)

    asm volatile("ecall" ::: "memory");
    80000d6a:	00000073          	ecall
    return ecall_args[0];

}
    80000d6e:	6388                	ld	a0,0(a5)
    80000d70:	8082                	ret

0000000080000d72 <test_setup_except_function>:

//v扩展时防止被编译成向量指令干扰测试环境
#ifdef __riscv_vector
__attribute__((target("arch=rv64imac_zicsr")))
void test_setup_except_function() {
    __sync_synchronize();
    80000d72:	0330000f          	fence	rw,rw
    excpt.testing = true;
    80000d76:	00050797          	auipc	a5,0x50
    80000d7a:	28a78793          	addi	a5,a5,650 # 80051000 <ecall_args>
    80000d7e:	4705                	li	a4,1
    excpt.triggered = false;
    excpt.fault_inst = 0;
    80000d80:	0407b423          	sd	zero,72(a5)
    excpt.testing = true;
    80000d84:	00e79823          	sh	a4,16(a5)
    __sync_synchronize();
    80000d88:	0330000f          	fence	rw,rw
    DEBUG("setting up exception test");
}
    80000d8c:	8082                	ret

0000000080000d8e <set_prev_priv>:
    return priv == PRIV_VU || priv == PRIV_HU;
}

void set_prev_priv(int priv){

    switch(curr_priv){
    80000d8e:	0003a797          	auipc	a5,0x3a
    80000d92:	b467a783          	lw	a5,-1210(a5) # 8003a8d4 <curr_priv>
    80000d96:	470d                	li	a4,3
    80000d98:	06e78963          	beq	a5,a4,80000e0a <set_prev_priv+0x7c>
    80000d9c:	4711                	li	a4,4
    80000d9e:	04e78163          	beq	a5,a4,80000de0 <set_prev_priv+0x52>
    80000da2:	4709                	li	a4,2
    80000da4:	08e78863          	beq	a5,a4,80000e34 <set_prev_priv+0xa6>
void set_prev_priv(int priv){
    80000da8:	1141                	addi	sp,sp,-16
        case PRIV_VS: {
            uint64_t temp = CSRR(sstatus);
            CSRC(sstatus, 0x1ULL << 8);
        }
        break;
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000daa:	85aa                	mv	a1,a0
    80000dac:	0002a617          	auipc	a2,0x2a
    80000db0:	49c60613          	addi	a2,a2,1180 # 8002b248 <__func__.6>
    80000db4:	0002c517          	auipc	a0,0x2c
    80000db8:	73c50513          	addi	a0,a0,1852 # 8002d4f0 <__func__.0+0x4d0>
void set_prev_priv(int priv){
    80000dbc:	e406                	sd	ra,8(sp)
        default: ERROR("unknown current priv %d (%s)\n", priv, __func__);
    80000dbe:	7fd290ef          	jal	8002adba <printf>
    80000dc2:	04b00613          	li	a2,75
    80000dc6:	0002a597          	auipc	a1,0x2a
    80000dca:	48258593          	addi	a1,a1,1154 # 8002b248 <__func__.6>
    80000dce:	0002c517          	auipc	a0,0x2c
    80000dd2:	6ba50513          	addi	a0,a0,1722 # 8002d488 <__func__.0+0x468>
    80000dd6:	7e5290ef          	jal	8002adba <printf>
    80000dda:	4501                	li	a0,0
    80000ddc:	395290ef          	jal	8002a970 <exit>
            uint64_t temp = CSRR(mstatus);
    80000de0:	30002773          	csrr	a4,mstatus
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000de4:	fc0007b7          	lui	a5,0xfc000
    80000de8:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80000dea:	07b6                	slli	a5,a5,0xd
    80000dec:	7ff78793          	addi	a5,a5,2047
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000df0:	ffe5069b          	addiw	a3,a0,-2
    80000df4:	4605                	li	a2,1
            temp &= ~((3ULL << 11) | (1ULL << 39));
    80000df6:	8ff9                	and	a5,a5,a4
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000df8:	06d67363          	bgeu	a2,a3,80000e5e <set_prev_priv+0xd0>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000dfc:	e501                	bnez	a0,80000e04 <set_prev_priv+0x76>
    80000dfe:	4705                	li	a4,1
    80000e00:	171e                	slli	a4,a4,0x27
    80000e02:	8fd9                	or	a5,a5,a4
            CSRW(mstatus, temp);
    80000e04:	30079073          	csrw	mstatus,a5
        break;
    80000e08:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000e0a:	100027f3          	csrr	a5,sstatus
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000e0e:	4705                	li	a4,1
    80000e10:	ffe5069b          	addiw	a3,a0,-2
    80000e14:	02d77763          	bgeu	a4,a3,80000e42 <set_prev_priv+0xb4>
            temp &= ~(0x1ULL << 8);
    80000e18:	eff7f793          	andi	a5,a5,-257
            CSRW(sstatus, temp);
    80000e1c:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000e20:	600027f3          	csrr	a5,hstatus
            temp &= ~(0x3ULL << 7);
    80000e24:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000e28:	e119                	bnez	a0,80000e2e <set_prev_priv+0xa0>
    80000e2a:	0807e793          	ori	a5,a5,128
            CSRW(CSR_HSTATUS, temp);
    80000e2e:	60079073          	csrw	hstatus,a5
        break;
    80000e32:	8082                	ret
            uint64_t temp = CSRR(sstatus);
    80000e34:	100027f3          	csrr	a5,sstatus
            CSRC(sstatus, 0x1ULL << 8);
    80000e38:	10000793          	li	a5,256
    80000e3c:	1007b073          	csrc	sstatus,a5
        break;
    80000e40:	8082                	ret
            if(priv == PRIV_HS || priv == PRIV_VS) temp |= (0x1ULL << 8);   //spp
    80000e42:	1007e793          	ori	a5,a5,256
            CSRW(sstatus, temp);
    80000e46:	10079073          	csrw	sstatus,a5
            temp = CSRR(CSR_HSTATUS);   //p101
    80000e4a:	600027f3          	csrr	a5,hstatus
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000e4e:	4709                	li	a4,2
            temp &= ~(0x3ULL << 7);
    80000e50:	e7f7f793          	andi	a5,a5,-385
            if(priv == PRIV_VS) temp |= (1ULL << 8);        //spvp
    80000e54:	fce51de3          	bne	a0,a4,80000e2e <set_prev_priv+0xa0>
    80000e58:	1007e793          	ori	a5,a5,256
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (0x1ULL << 7);       //spv
    80000e5c:	b7f9                	j	80000e2a <set_prev_priv+0x9c>
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e5e:	6705                	lui	a4,0x1
    80000e60:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000e64:	4689                	li	a3,2
            if(priv == PRIV_VS || priv == PRIV_HS) temp |= (1ULL << 11);    //mpp   
    80000e66:	8fd9                	or	a5,a5,a4
            if(priv == PRIV_VU || priv == PRIV_VS) temp |= (1ULL << 39);     //mpv
    80000e68:	f8d50be3          	beq	a0,a3,80000dfe <set_prev_priv+0x70>
    80000e6c:	bf61                	j	80000e04 <set_prev_priv+0x76>

0000000080000e6e <goto_priv>:
    curr_priv = priv;

}


void goto_priv(int target_priv){
    80000e6e:	1101                	addi	sp,sp,-32
    80000e70:	e822                	sd	s0,16(sp)
    80000e72:	ec06                	sd	ra,24(sp)
    80000e74:	e426                	sd	s1,8(sp)

    static bool on_going = false;

    DEBUG("goto_priv: real = %s, target = %s, curr = %s",  priv_strs[real_priv], priv_strs[target_priv], priv_strs[curr_priv]);

    if(is_user(target_priv) && is_user(curr_priv)) {
    80000e76:	4785                	li	a5,1
void goto_priv(int target_priv){
    80000e78:	842a                	mv	s0,a0
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000e7a:	02a7f963          	bgeu	a5,a0,80000eac <goto_priv+0x3e>
        goto_priv(PRIV_M);
    }

    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000e7e:	0003a797          	auipc	a5,0x3a
    80000e82:	a527a783          	lw	a5,-1454(a5) # 8003a8d0 <real_priv>
    80000e86:	0003a497          	auipc	s1,0x3a
    80000e8a:	a4e48493          	addi	s1,s1,-1458 # 8003a8d4 <curr_priv>
    80000e8e:	00a78963          	beq	a5,a0,80000ea0 <goto_priv+0x32>
    80000e92:	4791                	li	a5,4
    80000e94:	0003a497          	auipc	s1,0x3a
    80000e98:	a4048493          	addi	s1,s1,-1472 # 8003a8d4 <curr_priv>
    80000e9c:	06a7d363          	bge	a5,a0,80000f02 <goto_priv+0x94>
        if(on_going)
            VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        curr_priv = target_priv;
    80000ea0:	c080                	sw	s0,0(s1)
        VERBOSE("...entered %s mode", priv_strs[target_priv]);
        on_going = false;
        lower_priv(target_priv);
    }

}
    80000ea2:	60e2                	ld	ra,24(sp)
    80000ea4:	6442                	ld	s0,16(sp)
    80000ea6:	64a2                	ld	s1,8(sp)
    80000ea8:	6105                	addi	sp,sp,32
    80000eaa:	8082                	ret
    if(is_user(target_priv) && is_user(curr_priv)) {
    80000eac:	0003a717          	auipc	a4,0x3a
    80000eb0:	a2872703          	lw	a4,-1496(a4) # 8003a8d4 <curr_priv>
    80000eb4:	0003a497          	auipc	s1,0x3a
    80000eb8:	a2048493          	addi	s1,s1,-1504 # 8003a8d4 <curr_priv>
    80000ebc:	0ae7f863          	bgeu	a5,a4,80000f6c <goto_priv+0xfe>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000ec0:	0003a797          	auipc	a5,0x3a
    80000ec4:	a107a783          	lw	a5,-1520(a5) # 8003a8d0 <real_priv>
    80000ec8:	fca78ce3          	beq	a5,a0,80000ea0 <goto_priv+0x32>
    if(curr_priv == PRIV_VS && priv == PRIV_HU){
    80000ecc:	4789                	li	a5,2
    80000ece:	06f71063          	bne	a4,a5,80000f2e <goto_priv+0xc0>
    80000ed2:	4785                	li	a5,1
    80000ed4:	04f41d63          	bne	s0,a5,80000f2e <goto_priv+0xc0>
        ERROR("trying to go from vs to hu");
    80000ed8:	0002c517          	auipc	a0,0x2c
    80000edc:	64850513          	addi	a0,a0,1608 # 8002d520 <__func__.0+0x500>
    80000ee0:	6db290ef          	jal	8002adba <printf>
    80000ee4:	05a00613          	li	a2,90
        ERROR("cant lower priv from u");
    80000ee8:	0002a597          	auipc	a1,0x2a
    80000eec:	37058593          	addi	a1,a1,880 # 8002b258 <__func__.4>
    80000ef0:	0002c517          	auipc	a0,0x2c
    80000ef4:	59850513          	addi	a0,a0,1432 # 8002d488 <__func__.0+0x468>
    80000ef8:	6c3290ef          	jal	8002adba <printf>
    80000efc:	4501                	li	a0,0
    80000efe:	273290ef          	jal	8002a970 <exit>
    if(target_priv > curr_priv){
    80000f02:	0003a797          	auipc	a5,0x3a
    80000f06:	9d27a783          	lw	a5,-1582(a5) # 8003a8d4 <curr_priv>
    80000f0a:	02a7f063          	bgeu	a5,a0,80000f2a <goto_priv+0xbc>
    ecall_args[0] = a0;
    80000f0e:	00050797          	auipc	a5,0x50
    80000f12:	0f278793          	addi	a5,a5,242 # 80051000 <ecall_args>
    80000f16:	4705                	li	a4,1
        ecall(ECALL_GOTO_PRIV, target_priv);
    80000f18:	e780                	sd	s0,8(a5)
    ecall_args[0] = a0;
    80000f1a:	e398                	sd	a4,0(a5)
    asm volatile("ecall" ::: "memory");
    80000f1c:	00000073          	ecall
}
    80000f20:	60e2                	ld	ra,24(sp)
    80000f22:	6442                	ld	s0,16(sp)
    80000f24:	64a2                	ld	s1,8(sp)
    80000f26:	6105                	addi	sp,sp,32
    80000f28:	8082                	ret
    if(priv == curr_priv) 
    80000f2a:	f6f50ce3          	beq	a0,a5,80000ea2 <goto_priv+0x34>
    set_prev_priv(priv);
    80000f2e:	8522                	mv	a0,s0
    80000f30:	e5fff0ef          	jal	80000d8e <set_prev_priv>
    if(curr_priv == PRIV_M) {
    80000f34:	0003a797          	auipc	a5,0x3a
    80000f38:	9a07a783          	lw	a5,-1632(a5) # 8003a8d4 <curr_priv>
    real_priv = priv;
    80000f3c:	0003a717          	auipc	a4,0x3a
    80000f40:	98872a23          	sw	s0,-1644(a4) # 8003a8d0 <real_priv>
    if(curr_priv == PRIV_M) {
    80000f44:	4711                	li	a4,4
    80000f46:	04e78e63          	beq	a5,a4,80000fa2 <goto_priv+0x134>
    } else if(curr_priv == PRIV_VS || curr_priv == PRIV_HS){
    80000f4a:	37f9                	addiw	a5,a5,-2
    80000f4c:	4705                	li	a4,1
    80000f4e:	04f76163          	bltu	a4,a5,80000f90 <goto_priv+0x122>
        asm volatile(
    80000f52:	00000297          	auipc	t0,0x0
    80000f56:	01028293          	addi	t0,t0,16 # 80000f62 <goto_priv+0xf4>
    80000f5a:	14129073          	csrw	sepc,t0
    80000f5e:	10200073          	sret
    curr_priv = priv;
    80000f62:	0003a797          	auipc	a5,0x3a
    80000f66:	9687a923          	sw	s0,-1678(a5) # 8003a8d4 <curr_priv>
    80000f6a:	bf25                	j	80000ea2 <goto_priv+0x34>
        goto_priv(PRIV_M);
    80000f6c:	4511                	li	a0,4
    80000f6e:	f01ff0ef          	jal	80000e6e <goto_priv>
    if(real_priv == target_priv || target_priv >= PRIV_MAX){
    80000f72:	0003a797          	auipc	a5,0x3a
    80000f76:	95e7a783          	lw	a5,-1698(a5) # 8003a8d0 <real_priv>
    80000f7a:	f28783e3          	beq	a5,s0,80000ea0 <goto_priv+0x32>
    if(target_priv > curr_priv){
    80000f7e:	0003a717          	auipc	a4,0x3a
    80000f82:	95672703          	lw	a4,-1706(a4) # 8003a8d4 <curr_priv>
    80000f86:	f88764e3          	bltu	a4,s0,80000f0e <goto_priv+0xa0>
    if(priv == curr_priv) 
    80000f8a:	f0870ce3          	beq	a4,s0,80000ea2 <goto_priv+0x34>
    80000f8e:	bf3d                	j	80000ecc <goto_priv+0x5e>
        ERROR("cant lower priv from u");
    80000f90:	0002c517          	auipc	a0,0x2c
    80000f94:	5c050513          	addi	a0,a0,1472 # 8002d550 <__func__.0+0x530>
    80000f98:	623290ef          	jal	8002adba <printf>
    80000f9c:	07200613          	li	a2,114
    80000fa0:	b7a1                	j	80000ee8 <goto_priv+0x7a>
        asm volatile(
    80000fa2:	00000297          	auipc	t0,0x0
    80000fa6:	01028293          	addi	t0,t0,16 # 80000fb2 <goto_priv+0x144>
    80000faa:	34129073          	csrw	mepc,t0
    80000fae:	30200073          	mret
    80000fb2:	bf45                	j	80000f62 <goto_priv+0xf4>

0000000080000fb4 <excpt_info>:
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    else return epc + 2;
}

void excpt_info(){
    const char* x = excpt.triggered ? "是" : "否";
    80000fb4:	00050797          	auipc	a5,0x50
    80000fb8:	05d7c783          	lbu	a5,93(a5) # 80051011 <excpt+0x1>
void excpt_info(){
    80000fbc:	1141                	addi	sp,sp,-16
    80000fbe:	e406                	sd	ra,8(sp)
    const char* x = excpt.triggered ? "是" : "否";
    80000fc0:	0002c597          	auipc	a1,0x2c
    80000fc4:	5b858593          	addi	a1,a1,1464 # 8002d578 <__func__.0+0x558>
    80000fc8:	e789                	bnez	a5,80000fd2 <excpt_info+0x1e>
    80000fca:	0002c597          	auipc	a1,0x2c
    80000fce:	5b658593          	addi	a1,a1,1462 # 8002d580 <__func__.0+0x560>
    printf("异常触发：%s\n",x);
    80000fd2:	0002c517          	auipc	a0,0x2c
    80000fd6:	5b650513          	addi	a0,a0,1462 # 8002d588 <__func__.0+0x568>
    80000fda:	5e1290ef          	jal	8002adba <printf>
    printf("异常原因：%d\n",excpt.cause);
}
    80000fde:	60a2                	ld	ra,8(sp)
    printf("异常原因：%d\n",excpt.cause);
    80000fe0:	00050597          	auipc	a1,0x50
    80000fe4:	0385b583          	ld	a1,56(a1) # 80051018 <excpt+0x8>
    80000fe8:	0002c517          	auipc	a0,0x2c
    80000fec:	5b850513          	addi	a0,a0,1464 # 8002d5a0 <__func__.0+0x580>
}
    80000ff0:	0141                	addi	sp,sp,16
    printf("异常原因：%d\n",excpt.cause);
    80000ff2:	5c92906f          	j	8002adba <printf>

0000000080000ff6 <mhandler>:
        break;\
    }\
    return from_priv;\
}

uint64_t mhandler(){
    80000ff6:	715d                	addi	sp,sp,-80
    80000ff8:	f44e                	sd	s3,40(sp)
    80000ffa:	e486                	sd	ra,72(sp)
    80000ffc:	e0a2                	sd	s0,64(sp)
    80000ffe:	fc26                	sd	s1,56(sp)
    80001000:	f84a                	sd	s2,48(sp)
    80001002:	f052                	sd	s4,32(sp)
    80001004:	ec56                	sd	s5,24(sp)
    80001006:	e85a                	sd	s6,16(sp)
    80001008:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_M;
    8000100a:	0003a997          	auipc	s3,0x3a
    8000100e:	8c698993          	addi	s3,s3,-1850 # 8003a8d0 <real_priv>
    80001012:	4791                	li	a5,4
    80001014:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(mcause);
    80001018:	342024f3          	csrr	s1,mcause
    uint64_t epc = CSRR(mepc);
    8000101c:	34102973          	csrr	s2,mepc
    80001020:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(mtval);
    80001022:	34302bf3          	csrr	s7,mtval
    uint64_t tval2 = CSRR(CSR_MTVAL2);
    80001026:	34b02af3          	csrr	s5,0x34b
    uint64_t tinst= CSRR(CSR_MTINST);
    8000102a:	34a02b73          	csrr	s6,0x34a
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    8000102e:	478d                	li	a5,3
    80001030:	ff848713          	addi	a4,s1,-8
    80001034:	12e7ef63          	bltu	a5,a4,80001172 <mhandler+0x17c>
    DEBUG("mtinst = 0x%lx", tinst);
    DEBUG("mpp = 0x%lx", (CSRR(mstatus) >> 11) & 0x3);
    DEBUG("mpv = 0x%lx", (CSRR(mstatus) >> 39) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    
    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){
    80001038:	00050417          	auipc	s0,0x50
    8000103c:	fc840413          	addi	s0,s0,-56 # 80051000 <ecall_args>
    80001040:	6018                	ld	a4,0(s0)
    80001042:	4785                	li	a5,1
    80001044:	1cf70763          	beq	a4,a5,80001212 <mhandler+0x21c>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    80001048:	00050797          	auipc	a5,0x50
    8000104c:	fc87c783          	lbu	a5,-56(a5) # 80051010 <excpt>
    80001050:	c3cd                	beqz	a5,800010f2 <mhandler+0xfc>

    if(cause & (1ULL << 63)){
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    }

    excpt.triggered = true;
    80001052:	4705                	li	a4,1
    excpt.priv = PRIV_M;
    80001054:	4791                	li	a5,4
    excpt.cause = cause;
    80001056:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    80001058:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    8000105c:	03743423          	sd	s7,40(s0)
    excpt.tinst = tinst;
    80001060:	03643823          	sd	s6,48(s0)
    excpt.tval2 = tval2;
    80001064:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    80001068:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_M;
    8000106c:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(mstatus) >> MSTATUS_GVA_OFF) & 0x1);
    8000106e:	300027f3          	csrr	a5,mstatus
    80001072:	9399                	srli	a5,a5,0x26
    80001074:	8ff9                	and	a5,a5,a4
    80001076:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(mstatus) >> 39) & 0x1);
    8000107a:	300027f3          	csrr	a5,mstatus
    8000107e:	939d                	srli	a5,a5,0x27
    80001080:	8ff9                	and	a5,a5,a4
    80001082:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    80001086:	00050797          	auipc	a5,0x50
    8000108a:	f8078523          	sb	zero,-118(a5) # 80051010 <excpt>
    if(is_inst_fault(cause)){
    8000108e:	47d1                	li	a5,20
    80001090:	0097ed63          	bltu	a5,s1,800010aa <mhandler+0xb4>
    80001094:	001017b7          	lui	a5,0x101
    80001098:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    8000109a:	0097d7b3          	srl	a5,a5,s1
    8000109e:	8ff9                	and	a5,a5,a4
    800010a0:	c789                	beqz	a5,800010aa <mhandler+0xb4>
        if(excpt.fault_inst != 0){ 
    800010a2:	04843a03          	ld	s4,72(s0)
    800010a6:	0e0a0763          	beqz	s4,80001194 <mhandler+0x19e>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    800010aa:	0003a797          	auipc	a5,0x3a
    800010ae:	82a7a783          	lw	a5,-2006(a5) # 8003a8d4 <curr_priv>
    unsigned temp_priv = real_priv;
    800010b2:	0003a517          	auipc	a0,0x3a
    800010b6:	81e52503          	lw	a0,-2018(a0) # 8003a8d0 <real_priv>
    excpt.fault_inst = 0;
    800010ba:	00050717          	auipc	a4,0x50
    800010be:	f8073723          	sd	zero,-114(a4) # 80051048 <excpt+0x38>
    real_priv = curr_priv;
    800010c2:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800010c6:	478d                	li	a5,3
    800010c8:	04f50a63          	beq	a0,a5,8000111c <mhandler+0x126>
    800010cc:	4791                	li	a5,4
    800010ce:	0ef50363          	beq	a0,a5,800011b4 <mhandler+0x1be>
    800010d2:	4789                	li	a5,2
    800010d4:	06f50263          	beq	a0,a5,80001138 <mhandler+0x142>
}
    800010d8:	60a6                	ld	ra,72(sp)
    800010da:	6406                	ld	s0,64(sp)
    800010dc:	1502                	slli	a0,a0,0x20
    800010de:	74e2                	ld	s1,56(sp)
    800010e0:	7942                	ld	s2,48(sp)
    800010e2:	79a2                	ld	s3,40(sp)
    800010e4:	7a02                	ld	s4,32(sp)
    800010e6:	6ae2                	ld	s5,24(sp)
    800010e8:	6b42                	ld	s6,16(sp)
    800010ea:	6ba2                	ld	s7,8(sp)
    800010ec:	9101                	srli	a0,a0,0x20
    800010ee:	6161                	addi	sp,sp,80
    800010f0:	8082                	ret
        ERROR("untested exception!");
    800010f2:	0002c517          	auipc	a0,0x2c
    800010f6:	4c650513          	addi	a0,a0,1222 # 8002d5b8 <__func__.0+0x598>
    800010fa:	4c1290ef          	jal	8002adba <printf>
    800010fe:	0ec00613          	li	a2,236
            ERROR("instruction fault without return address");
    80001102:	0002a597          	auipc	a1,0x2a
    80001106:	16658593          	addi	a1,a1,358 # 8002b268 <__func__.3>
    8000110a:	0002c517          	auipc	a0,0x2c
    8000110e:	37e50513          	addi	a0,a0,894 # 8002d488 <__func__.0+0x468>
    80001112:	4a9290ef          	jal	8002adba <printf>
    80001116:	4501                	li	a0,0
    80001118:	059290ef          	jal	8002a970 <exit>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000111c:	600026f3          	csrr	a3,hstatus
    80001120:	00039797          	auipc	a5,0x39
    80001124:	7b47a783          	lw	a5,1972(a5) # 8003a8d4 <curr_priv>
    80001128:	0806e713          	ori	a4,a3,128
    8000112c:	9bf5                	andi	a5,a5,-3
    8000112e:	c399                	beqz	a5,80001134 <mhandler+0x13e>
    80001130:	f7f6f713          	andi	a4,a3,-129
    80001134:	60071073          	csrw	hstatus,a4
    80001138:	100027f3          	csrr	a5,sstatus
    8000113c:	00039717          	auipc	a4,0x39
    80001140:	79872703          	lw	a4,1944(a4) # 8003a8d4 <curr_priv>
    80001144:	4685                	li	a3,1
    80001146:	edf7f793          	andi	a5,a5,-289
    8000114a:	3779                	addiw	a4,a4,-2
    8000114c:	04e6fd63          	bgeu	a3,a4,800011a6 <mhandler+0x1b0>
    80001150:	10079073          	csrw	sstatus,a5
    80001154:	f804c2e3          	bltz	s1,800010d8 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001158:	000a5783          	lhu	a5,0(s4)
    8000115c:	468d                	li	a3,3
    else return epc + 2;
    8000115e:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001162:	8ff5                	and	a5,a5,a3
    80001164:	00d79463          	bne	a5,a3,8000116c <mhandler+0x176>
    80001168:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000116c:	14171073          	csrw	sepc,a4
    80001170:	b7a5                	j	800010d8 <mhandler+0xe2>
    } else if(!excpt.testing){
    80001172:	00050797          	auipc	a5,0x50
    80001176:	e9e7c783          	lbu	a5,-354(a5) # 80051010 <excpt>
    8000117a:	dfa5                	beqz	a5,800010f2 <mhandler+0xfc>
    if(cause & (1ULL << 63)){
    8000117c:	0004d763          	bgez	s1,8000118a <mhandler+0x194>
        CSRC(mip, 1ULL << (cause &  ~(1ULL << 63)));
    80001180:	4785                	li	a5,1
    80001182:	009797b3          	sll	a5,a5,s1
    80001186:	3447b073          	csrc	mip,a5
    8000118a:	00050417          	auipc	s0,0x50
    8000118e:	e7640413          	addi	s0,s0,-394 # 80051000 <ecall_args>
    80001192:	b5c1                	j	80001052 <mhandler+0x5c>
            ERROR("instruction fault without return address");
    80001194:	0002c517          	auipc	a0,0x2c
    80001198:	44c50513          	addi	a0,a0,1100 # 8002d5e0 <__func__.0+0x5c0>
    8000119c:	41f290ef          	jal	8002adba <printf>
    800011a0:	10200613          	li	a2,258
    800011a4:	bfb9                	j	80001102 <mhandler+0x10c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800011a6:	1007e793          	ori	a5,a5,256
    800011aa:	10079073          	csrw	sstatus,a5
    800011ae:	fa04d5e3          	bgez	s1,80001158 <mhandler+0x162>
    800011b2:	b71d                	j	800010d8 <mhandler+0xe2>
    800011b4:	30002773          	csrr	a4,mstatus
    800011b8:	fc0007b7          	lui	a5,0xfc000
    800011bc:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    800011be:	00039697          	auipc	a3,0x39
    800011c2:	7166a683          	lw	a3,1814(a3) # 8003a8d4 <curr_priv>
    800011c6:	07b6                	slli	a5,a5,0xd
    800011c8:	77f78793          	addi	a5,a5,1919
    800011cc:	8ff9                	and	a5,a5,a4
    800011ce:	04a68663          	beq	a3,a0,8000121a <mhandler+0x224>
    800011d2:	ffe6871b          	addiw	a4,a3,-2
    800011d6:	4605                	li	a2,1
    800011d8:	04e66663          	bltu	a2,a4,80001224 <mhandler+0x22e>
    800011dc:	6705                	lui	a4,0x1
    800011de:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    800011e2:	4609                	li	a2,2
    800011e4:	8fd9                	or	a5,a5,a4
    800011e6:	00c69563          	bne	a3,a2,800011f0 <mhandler+0x1fa>
    800011ea:	4705                	li	a4,1
    800011ec:	171e                	slli	a4,a4,0x27
    800011ee:	8fd9                	or	a5,a5,a4
    800011f0:	30079073          	csrw	mstatus,a5
    800011f4:	ee04c2e3          	bltz	s1,800010d8 <mhandler+0xe2>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800011f8:	000a5783          	lhu	a5,0(s4)
    800011fc:	468d                	li	a3,3
    else return epc + 2;
    800011fe:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001202:	8ff5                	and	a5,a5,a3
    80001204:	00d79463          	bne	a5,a3,8000120c <mhandler+0x216>
    80001208:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000120c:	34171073          	csrw	mepc,a4
    80001210:	b5e1                	j	800010d8 <mhandler+0xe2>
        goto_priv(ecall_args[1]); 
    80001212:	4408                	lw	a0,8(s0)
    80001214:	c5bff0ef          	jal	80000e6e <goto_priv>
    if(cause & (1ULL << 63)){
    80001218:	bd2d                	j	80001052 <mhandler+0x5c>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000121a:	6709                	lui	a4,0x2
    8000121c:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001220:	8fd9                	or	a5,a5,a4
    80001222:	b7f9                	j	800011f0 <mhandler+0x1fa>
    80001224:	d2f9                	beqz	a3,800011ea <mhandler+0x1f4>
    80001226:	b7e9                	j	800011f0 <mhandler+0x1fa>

0000000080001228 <hshandler>:
uint64_t hshandler(){
    80001228:	715d                	addi	sp,sp,-80
    8000122a:	f44e                	sd	s3,40(sp)
    8000122c:	e486                	sd	ra,72(sp)
    8000122e:	e0a2                	sd	s0,64(sp)
    80001230:	fc26                	sd	s1,56(sp)
    80001232:	f84a                	sd	s2,48(sp)
    80001234:	f052                	sd	s4,32(sp)
    80001236:	ec56                	sd	s5,24(sp)
    80001238:	e85a                	sd	s6,16(sp)
    8000123a:	e45e                	sd	s7,8(sp)

    real_priv = PRIV_HS;
    8000123c:	00039997          	auipc	s3,0x39
    80001240:	69498993          	addi	s3,s3,1684 # 8003a8d0 <real_priv>
    80001244:	478d                	li	a5,3
    80001246:	00f9a023          	sw	a5,0(s3)

    uint64_t cause = CSRR(scause);
    8000124a:	142024f3          	csrr	s1,scause
    uint64_t epc = CSRR(sepc);
    8000124e:	14102973          	csrr	s2,sepc
    80001252:	8a4a                	mv	s4,s2
    uint64_t tval = CSRR(stval);
    80001254:	14302bf3          	csrr	s7,stval
    uint64_t htval = CSRR(CSR_HTVAL);
    80001258:	64302af3          	csrr	s5,htval
    uint64_t htinst = CSRR(CSR_HTINST);
    8000125c:	64a02b73          	csrr	s6,htinst
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80001260:	ff848713          	addi	a4,s1,-8
    80001264:	02e7ef63          	bltu	a5,a4,800012a2 <hshandler+0x7a>
    DEBUG("spv = 0x%lx", (CSRR(CSR_HSTATUS) >> 7) & 0x1);
    DEBUG("spvp = 0x%lx", (CSRR(CSR_HSTATUS) >> 8) & 0x1);
    DEBUG("gva = 0x%lx", (CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);


    if(is_ecall(cause) && ecall_args[0] == ECALL_GOTO_PRIV){ 
    80001268:	00050417          	auipc	s0,0x50
    8000126c:	d9840413          	addi	s0,s0,-616 # 80051000 <ecall_args>
    80001270:	6018                	ld	a4,0(s0)
    80001272:	4785                	li	a5,1
    80001274:	14f70063          	beq	a4,a5,800013b4 <hshandler+0x18c>
        goto_priv(ecall_args[1]); 
    } else if(is_ecall(cause)) {
        ERROR("unknown ecall"); 
    80001278:	0002c517          	auipc	a0,0x2c
    8000127c:	3a850513          	addi	a0,a0,936 # 8002d620 <__func__.0+0x600>
    80001280:	33b290ef          	jal	8002adba <printf>
    80001284:	12200613          	li	a2,290
    } else if(!excpt.testing){
        ERROR("untested exception!");
    80001288:	0002a597          	auipc	a1,0x2a
    8000128c:	ff058593          	addi	a1,a1,-16 # 8002b278 <__func__.2>
    80001290:	0002c517          	auipc	a0,0x2c
    80001294:	1f850513          	addi	a0,a0,504 # 8002d488 <__func__.0+0x468>
    80001298:	323290ef          	jal	8002adba <printf>
    8000129c:	4501                	li	a0,0
    8000129e:	6d2290ef          	jal	8002a970 <exit>
    } else if(!excpt.testing){
    800012a2:	00050797          	auipc	a5,0x50
    800012a6:	d6e7c783          	lbu	a5,-658(a5) # 80051010 <excpt>
    800012aa:	cfe5                	beqz	a5,800013a2 <hshandler+0x17a>
    }
    
    if(cause & (1ULL << 63)){
    800012ac:	0004d963          	bgez	s1,800012be <hshandler+0x96>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    800012b0:	4785                	li	a5,1
    800012b2:	009797b3          	sll	a5,a5,s1
    800012b6:	1447b073          	csrc	sip,a5
        //CSRC(CSR_HVIP, 1ULL << (cause &  ~(1ULL << 63)));
        CSRC(CSR_HIP, 1ULL << (cause &  ~(1ULL << 63)));
    800012ba:	6447b073          	csrc	hip,a5
    800012be:	00050417          	auipc	s0,0x50
    800012c2:	d4240413          	addi	s0,s0,-702 # 80051000 <ecall_args>
    }

    excpt.triggered = true;
    800012c6:	4705                	li	a4,1
    excpt.priv = PRIV_HS;
    800012c8:	478d                	li	a5,3
    excpt.cause = cause;
    800012ca:	ec04                	sd	s1,24(s0)
    excpt.epc = epc;
    800012cc:	03243023          	sd	s2,32(s0)
    excpt.tval = tval;
    800012d0:	03743423          	sd	s7,40(s0)
    excpt.tinst = htinst;
    800012d4:	03643823          	sd	s6,48(s0)
    excpt.tval2 = htval;
    800012d8:	03543c23          	sd	s5,56(s0)
    excpt.triggered = true;
    800012dc:	00e408a3          	sb	a4,17(s0)
    excpt.priv = PRIV_HS;
    800012e0:	c85c                	sw	a5,20(s0)
    excpt.gva = !!((CSRR(CSR_HSTATUS) >> HSTATUS_GVA_OFF) & 0x1);
    800012e2:	600027f3          	csrr	a5,hstatus
    800012e6:	8399                	srli	a5,a5,0x6
    800012e8:	8ff9                	and	a5,a5,a4
    800012ea:	04f40023          	sb	a5,64(s0)
    excpt.xpv = !!((CSRR(CSR_HSTATUS) >> 7) & 0x1);
    800012ee:	600027f3          	csrr	a5,hstatus
    800012f2:	839d                	srli	a5,a5,0x7
    800012f4:	8ff9                	and	a5,a5,a4
    800012f6:	04f400a3          	sb	a5,65(s0)
    excpt.testing = false;
    800012fa:	00050797          	auipc	a5,0x50
    800012fe:	d0078b23          	sb	zero,-746(a5) # 80051010 <excpt>
    if(is_inst_fault(cause)){
    80001302:	47d1                	li	a5,20
    80001304:	0097ed63          	bltu	a5,s1,8000131e <hshandler+0xf6>
    80001308:	001017b7          	lui	a5,0x101
    8000130c:	078d                	addi	a5,a5,3 # 101003 <STACK_SIZE+0x1003>
    8000130e:	0097d7b3          	srl	a5,a5,s1
    80001312:	8ff9                	and	a5,a5,a4
    80001314:	c789                	beqz	a5,8000131e <hshandler+0xf6>
        if(excpt.fault_inst != 0){ 
    80001316:	04843a03          	ld	s4,72(s0)
    8000131a:	0a0a0163          	beqz	s4,800013bc <hshandler+0x194>
            ERROR("instruction fault without return address");
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    8000131e:	00039797          	auipc	a5,0x39
    80001322:	5b67a783          	lw	a5,1462(a5) # 8003a8d4 <curr_priv>
    unsigned temp_priv = real_priv;
    80001326:	00039517          	auipc	a0,0x39
    8000132a:	5aa52503          	lw	a0,1450(a0) # 8003a8d0 <real_priv>
    excpt.fault_inst = 0;
    8000132e:	00050717          	auipc	a4,0x50
    80001332:	d0073d23          	sd	zero,-742(a4) # 80051048 <excpt+0x38>
    real_priv = curr_priv;
    80001336:	00f9a023          	sw	a5,0(s3)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000133a:	478d                	li	a5,3
    8000133c:	0ef50863          	beq	a0,a5,8000142c <hshandler+0x204>
    80001340:	4791                	li	a5,4
    80001342:	08f50663          	beq	a0,a5,800013ce <hshandler+0x1a6>
    80001346:	4789                	li	a5,2
    80001348:	04f51063          	bne	a0,a5,80001388 <hshandler+0x160>
    8000134c:	100027f3          	csrr	a5,sstatus
    80001350:	00039717          	auipc	a4,0x39
    80001354:	58472703          	lw	a4,1412(a4) # 8003a8d4 <curr_priv>
    80001358:	4685                	li	a3,1
    8000135a:	edf7f793          	andi	a5,a5,-289
    8000135e:	3779                	addiw	a4,a4,-2
    80001360:	00e6e463          	bltu	a3,a4,80001368 <hshandler+0x140>
    80001364:	1007e793          	ori	a5,a5,256
    80001368:	10079073          	csrw	sstatus,a5
    8000136c:	0004ce63          	bltz	s1,80001388 <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001370:	000a5783          	lhu	a5,0(s4)
    80001374:	468d                	li	a3,3
    else return epc + 2;
    80001376:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000137a:	8ff5                	and	a5,a5,a3
    8000137c:	00d79463          	bne	a5,a3,80001384 <hshandler+0x15c>
    80001380:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001384:	14171073          	csrw	sepc,a4
}
    80001388:	60a6                	ld	ra,72(sp)
    8000138a:	6406                	ld	s0,64(sp)
    8000138c:	1502                	slli	a0,a0,0x20
    8000138e:	74e2                	ld	s1,56(sp)
    80001390:	7942                	ld	s2,48(sp)
    80001392:	79a2                	ld	s3,40(sp)
    80001394:	7a02                	ld	s4,32(sp)
    80001396:	6ae2                	ld	s5,24(sp)
    80001398:	6b42                	ld	s6,16(sp)
    8000139a:	6ba2                	ld	s7,8(sp)
    8000139c:	9101                	srli	a0,a0,0x20
    8000139e:	6161                	addi	sp,sp,80
    800013a0:	8082                	ret
        ERROR("untested exception!");
    800013a2:	0002c517          	auipc	a0,0x2c
    800013a6:	21650513          	addi	a0,a0,534 # 8002d5b8 <__func__.0+0x598>
    800013aa:	211290ef          	jal	8002adba <printf>
    800013ae:	12400613          	li	a2,292
    800013b2:	bdd9                	j	80001288 <hshandler+0x60>
        goto_priv(ecall_args[1]); 
    800013b4:	4408                	lw	a0,8(s0)
    800013b6:	ab9ff0ef          	jal	80000e6e <goto_priv>
    if(cause & (1ULL << 63)){
    800013ba:	b731                	j	800012c6 <hshandler+0x9e>
            ERROR("instruction fault without return address");
    800013bc:	0002c517          	auipc	a0,0x2c
    800013c0:	22450513          	addi	a0,a0,548 # 8002d5e0 <__func__.0+0x5c0>
    800013c4:	1f7290ef          	jal	8002adba <printf>
    800013c8:	13c00613          	li	a2,316
    800013cc:	bd75                	j	80001288 <hshandler+0x60>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800013ce:	30002773          	csrr	a4,mstatus
    800013d2:	fc0007b7          	lui	a5,0xfc000
    800013d6:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    800013d8:	00039697          	auipc	a3,0x39
    800013dc:	4fc6a683          	lw	a3,1276(a3) # 8003a8d4 <curr_priv>
    800013e0:	07b6                	slli	a5,a5,0xd
    800013e2:	77f78793          	addi	a5,a5,1919
    800013e6:	8ff9                	and	a5,a5,a4
    800013e8:	06a68263          	beq	a3,a0,8000144c <hshandler+0x224>
    800013ec:	ffe6871b          	addiw	a4,a3,-2
    800013f0:	4605                	li	a2,1
    800013f2:	06e66263          	bltu	a2,a4,80001456 <hshandler+0x22e>
    800013f6:	6705                	lui	a4,0x1
    800013f8:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    800013fc:	4609                	li	a2,2
    800013fe:	8fd9                	or	a5,a5,a4
    80001400:	00c69563          	bne	a3,a2,8000140a <hshandler+0x1e2>
    80001404:	4705                	li	a4,1
    80001406:	171e                	slli	a4,a4,0x27
    80001408:	8fd9                	or	a5,a5,a4
    8000140a:	30079073          	csrw	mstatus,a5
    8000140e:	f604cde3          	bltz	s1,80001388 <hshandler+0x160>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001412:	000a5783          	lhu	a5,0(s4)
    80001416:	468d                	li	a3,3
    else return epc + 2;
    80001418:	002a0713          	addi	a4,s4,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000141c:	8ff5                	and	a5,a5,a3
    8000141e:	00d79463          	bne	a5,a3,80001426 <hshandler+0x1fe>
    80001422:	004a0713          	addi	a4,s4,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001426:	34171073          	csrw	mepc,a4
    8000142a:	bfb9                	j	80001388 <hshandler+0x160>
    8000142c:	600026f3          	csrr	a3,hstatus
    80001430:	00039797          	auipc	a5,0x39
    80001434:	4a47a783          	lw	a5,1188(a5) # 8003a8d4 <curr_priv>
    80001438:	0806e713          	ori	a4,a3,128
    8000143c:	9bf5                	andi	a5,a5,-3
    8000143e:	e781                	bnez	a5,80001446 <hshandler+0x21e>
    80001440:	60071073          	csrw	hstatus,a4
    80001444:	b721                	j	8000134c <hshandler+0x124>
    80001446:	f7f6f713          	andi	a4,a3,-129
    8000144a:	bfdd                	j	80001440 <hshandler+0x218>
    8000144c:	6709                	lui	a4,0x2
    8000144e:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    80001452:	8fd9                	or	a5,a5,a4
    80001454:	bf5d                	j	8000140a <hshandler+0x1e2>
    80001456:	d6dd                	beqz	a3,80001404 <hshandler+0x1dc>
    80001458:	bf4d                	j	8000140a <hshandler+0x1e2>

000000008000145a <vshandler>:

uint64_t vshandler(){
    8000145a:	7139                	addi	sp,sp,-64
    8000145c:	f04a                	sd	s2,32(sp)
    8000145e:	fc06                	sd	ra,56(sp)
    80001460:	f822                	sd	s0,48(sp)
    80001462:	f426                	sd	s1,40(sp)
    80001464:	ec4e                	sd	s3,24(sp)
    80001466:	e852                	sd	s4,16(sp)
    80001468:	e456                	sd	s5,8(sp)

    real_priv = PRIV_VS;
    8000146a:	00039917          	auipc	s2,0x39
    8000146e:	46690913          	addi	s2,s2,1126 # 8003a8d0 <real_priv>
    80001472:	4709                	li	a4,2
    80001474:	00e92023          	sw	a4,0(s2)

    uint64_t cause = CSRR(scause);
    80001478:	14202473          	csrr	s0,scause
    uint64_t epc = CSRR(sepc);
    8000147c:	141029f3          	csrr	s3,sepc
    80001480:	84ce                	mv	s1,s3
    uint64_t tval = CSRR(stval);
    80001482:	14302a73          	csrr	s4,stval
    if(!(cause == CAUSE_ECU || cause == CAUSE_ECS || 
    80001486:	478d                	li	a5,3
    80001488:	ff840693          	addi	a3,s0,-8
    8000148c:	04d7e663          	bltu	a5,a3,800014d8 <vshandler+0x7e>
    VERBOSE("virtual supervisor handler (scause = 0x%llx)", cause);
    DEBUG("scause = 0x%llx", cause);
    DEBUG("sepc = 0x%lx", epc);
    DEBUG("stval = 0x%lx", tval);
    
    if(is_ecall(cause) && ecall_args[0] ==ECALL_GOTO_PRIV ){
    80001490:	00050a97          	auipc	s5,0x50
    80001494:	b70a8a93          	addi	s5,s5,-1168 # 80051000 <ecall_args>
    80001498:	000ab703          	ld	a4,0(s5)
    8000149c:	4785                	li	a5,1
    8000149e:	1cf70563          	beq	a4,a5,80001668 <vshandler+0x20e>
        goto_priv(ecall_args[1]); 
    } else if(!excpt.testing){
    800014a2:	00050797          	auipc	a5,0x50
    800014a6:	b6e7c783          	lbu	a5,-1170(a5) # 80051010 <excpt>
    800014aa:	1c079363          	bnez	a5,80001670 <vshandler+0x216>
        ERROR("untested exception!");
    800014ae:	0002c517          	auipc	a0,0x2c
    800014b2:	10a50513          	addi	a0,a0,266 # 8002d5b8 <__func__.0+0x598>
    800014b6:	105290ef          	jal	8002adba <printf>
    800014ba:	15500613          	li	a2,341
    excpt.epc = epc;
    excpt.tval = tval;
    excpt.testing = false;
    if(is_inst_fault(cause)){
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
        else ERROR("instruction fault without return address");
    800014be:	0002a597          	auipc	a1,0x2a
    800014c2:	dca58593          	addi	a1,a1,-566 # 8002b288 <__func__.1>
    800014c6:	0002c517          	auipc	a0,0x2c
    800014ca:	fc250513          	addi	a0,a0,-62 # 8002d488 <__func__.0+0x468>
    800014ce:	0ed290ef          	jal	8002adba <printf>
    800014d2:	4501                	li	a0,0
    800014d4:	49c290ef          	jal	8002a970 <exit>
    } else if(!excpt.testing){
    800014d8:	00050697          	auipc	a3,0x50
    800014dc:	b386c683          	lbu	a3,-1224(a3) # 80051010 <excpt>
    800014e0:	00050797          	auipc	a5,0x50
    800014e4:	b2078793          	addi	a5,a5,-1248 # 80051000 <ecall_args>
    800014e8:	d2f9                	beqz	a3,800014ae <vshandler+0x54>
    if(cause & (1ULL << 63)){
    800014ea:	0c045463          	bgez	s0,800015b2 <vshandler+0x158>
        CSRC(sip, 1ULL << (cause &  ~(1ULL << 63)));
    800014ee:	4685                	li	a3,1
    800014f0:	008696b3          	sll	a3,a3,s0
    800014f4:	1446b073          	csrc	sip,a3
    excpt.testing = false;
    800014f8:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    800014fc:	5208a0d7          	vid.v	v1
    80001500:	00050697          	auipc	a3,0x50
    80001504:	b1068693          	addi	a3,a3,-1264 # 80051010 <excpt>
    80001508:	020680a7          	vse8.v	v1,(a3)
    excpt.priv = PRIV_VS;
    8000150c:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    8000150e:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    80001510:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    80001514:	0347b423          	sd	s4,40(a5)
    }
    excpt.fault_inst = 0;

    unsigned temp_priv = real_priv;
    real_priv = curr_priv;
    80001518:	00039797          	auipc	a5,0x39
    8000151c:	3bc7a783          	lw	a5,956(a5) # 8003a8d4 <curr_priv>
    unsigned temp_priv = real_priv;
    80001520:	00039517          	auipc	a0,0x39
    80001524:	3b052503          	lw	a0,944(a0) # 8003a8d0 <real_priv>
    excpt.fault_inst = 0;
    80001528:	00050717          	auipc	a4,0x50
    8000152c:	b2073023          	sd	zero,-1248(a4) # 80051048 <excpt+0x38>
    real_priv = curr_priv;
    80001530:	00f92023          	sw	a5,0(s2)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001534:	478d                	li	a5,3
    80001536:	02f50363          	beq	a0,a5,8000155c <vshandler+0x102>
    8000153a:	4791                	li	a5,4
    8000153c:	0cf50763          	beq	a0,a5,8000160a <vshandler+0x1b0>
    80001540:	4789                	li	a5,2
    80001542:	02f50b63          	beq	a0,a5,80001578 <vshandler+0x11e>
}
    80001546:	70e2                	ld	ra,56(sp)
    80001548:	7442                	ld	s0,48(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000154a:	1502                	slli	a0,a0,0x20
}
    8000154c:	74a2                	ld	s1,40(sp)
    8000154e:	7902                	ld	s2,32(sp)
    80001550:	69e2                	ld	s3,24(sp)
    80001552:	6a42                	ld	s4,16(sp)
    80001554:	6aa2                	ld	s5,8(sp)
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001556:	9101                	srli	a0,a0,0x20
}
    80001558:	6121                	addi	sp,sp,64
    8000155a:	8082                	ret
    return_from_exception(temp_priv, curr_priv, cause, epc);
    8000155c:	600026f3          	csrr	a3,hstatus
    80001560:	00039797          	auipc	a5,0x39
    80001564:	3747a783          	lw	a5,884(a5) # 8003a8d4 <curr_priv>
    80001568:	0806e713          	ori	a4,a3,128
    8000156c:	9bf5                	andi	a5,a5,-3
    8000156e:	c399                	beqz	a5,80001574 <vshandler+0x11a>
    80001570:	f7f6f713          	andi	a4,a3,-129
    80001574:	60071073          	csrw	hstatus,a4
    80001578:	100027f3          	csrr	a5,sstatus
    8000157c:	00039717          	auipc	a4,0x39
    80001580:	35872703          	lw	a4,856(a4) # 8003a8d4 <curr_priv>
    80001584:	4685                	li	a3,1
    80001586:	edf7f793          	andi	a5,a5,-289
    8000158a:	3779                	addiw	a4,a4,-2
    8000158c:	06e6f863          	bgeu	a3,a4,800015fc <vshandler+0x1a2>
    80001590:	10079073          	csrw	sstatus,a5
    80001594:	fa0449e3          	bltz	s0,80001546 <vshandler+0xec>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001598:	0004d783          	lhu	a5,0(s1)
    8000159c:	468d                	li	a3,3
    else return epc + 2;
    8000159e:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    800015a2:	8ff5                	and	a5,a5,a3
    800015a4:	00d79463          	bne	a5,a3,800015ac <vshandler+0x152>
    800015a8:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015ac:	14171073          	csrw	sepc,a4
    800015b0:	bf59                	j	80001546 <vshandler+0xec>
    excpt.testing = false;
    800015b2:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    800015b6:	5208a0d7          	vid.v	v1
    800015ba:	00050697          	auipc	a3,0x50
    800015be:	a5668693          	addi	a3,a3,-1450 # 80051010 <excpt>
    800015c2:	020680a7          	vse8.v	v1,(a3)
    excpt.priv = PRIV_VS;
    800015c6:	cbd8                	sw	a4,20(a5)
    excpt.cause = cause;
    800015c8:	ef80                	sd	s0,24(a5)
    excpt.epc = epc;
    800015ca:	0337b023          	sd	s3,32(a5)
    excpt.tval = tval;
    800015ce:	0347b423          	sd	s4,40(a5)
    if(is_inst_fault(cause)){
    800015d2:	4751                	li	a4,20
    800015d4:	f48762e3          	bltu	a4,s0,80001518 <vshandler+0xbe>
    800015d8:	00101737          	lui	a4,0x101
    800015dc:	070d                	addi	a4,a4,3 # 101003 <STACK_SIZE+0x1003>
    800015de:	00875733          	srl	a4,a4,s0
    800015e2:	8b05                	andi	a4,a4,1
    800015e4:	db15                	beqz	a4,80001518 <vshandler+0xbe>
        if(excpt.fault_inst != 0) epc = excpt.fault_inst;
    800015e6:	67a4                	ld	s1,72(a5)
    800015e8:	f885                	bnez	s1,80001518 <vshandler+0xbe>
        else ERROR("instruction fault without return address");
    800015ea:	0002c517          	auipc	a0,0x2c
    800015ee:	ff650513          	addi	a0,a0,-10 # 8002d5e0 <__func__.0+0x5c0>
    800015f2:	7c8290ef          	jal	8002adba <printf>
    800015f6:	16400613          	li	a2,356
    800015fa:	b5d1                	j	800014be <vshandler+0x64>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    800015fc:	1007e793          	ori	a5,a5,256
    80001600:	10079073          	csrw	sstatus,a5
    80001604:	f8045ae3          	bgez	s0,80001598 <vshandler+0x13e>
    80001608:	bf3d                	j	80001546 <vshandler+0xec>
    8000160a:	30002773          	csrr	a4,mstatus
    8000160e:	fc0007b7          	lui	a5,0xfc000
    80001612:	17fd                	addi	a5,a5,-1 # fffffffffbffffff <__stack_top+0xffffffff7bd00fff>
    80001614:	00039697          	auipc	a3,0x39
    80001618:	2c06a683          	lw	a3,704(a3) # 8003a8d4 <curr_priv>
    8000161c:	07b6                	slli	a5,a5,0xd
    8000161e:	77f78793          	addi	a5,a5,1919
    80001622:	8ff9                	and	a5,a5,a4
    80001624:	06a68a63          	beq	a3,a0,80001698 <vshandler+0x23e>
    80001628:	ffe6871b          	addiw	a4,a3,-2
    8000162c:	4605                	li	a2,1
    8000162e:	06e66a63          	bltu	a2,a4,800016a2 <vshandler+0x248>
    80001632:	6705                	lui	a4,0x1
    80001634:	80070713          	addi	a4,a4,-2048 # 800 <_test_table_size+0x7ff>
    80001638:	4609                	li	a2,2
    8000163a:	8fd9                	or	a5,a5,a4
    8000163c:	00c69563          	bne	a3,a2,80001646 <vshandler+0x1ec>
    80001640:	4705                	li	a4,1
    80001642:	171e                	slli	a4,a4,0x27
    80001644:	8fd9                	or	a5,a5,a4
    80001646:	30079073          	csrw	mstatus,a5
    8000164a:	ee044ee3          	bltz	s0,80001546 <vshandler+0xec>
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    8000164e:	0004d783          	lhu	a5,0(s1)
    80001652:	468d                	li	a3,3
    else return epc + 2;
    80001654:	00248713          	addi	a4,s1,2
    if(((*(uint16_t*)epc) & 0b11) == 0b11) return epc + 4;
    80001658:	8ff5                	and	a5,a5,a3
    8000165a:	00d79463          	bne	a5,a3,80001662 <vshandler+0x208>
    8000165e:	00448713          	addi	a4,s1,4
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001662:	34171073          	csrw	mepc,a4
    80001666:	b5c5                	j	80001546 <vshandler+0xec>
        goto_priv(ecall_args[1]); 
    80001668:	008aa503          	lw	a0,8(s5)
    8000166c:	803ff0ef          	jal	80000e6e <goto_priv>
    excpt.testing = false;
    80001670:	cc517057          	vsetivli	zero,2,e8,mf8,ta,ma
    80001674:	5208a0d7          	vid.v	v1
    80001678:	00050717          	auipc	a4,0x50
    8000167c:	99870713          	addi	a4,a4,-1640 # 80051010 <excpt>
    excpt.priv = PRIV_VS;
    80001680:	4789                	li	a5,2
    excpt.testing = false;
    80001682:	020700a7          	vse8.v	v1,(a4)
    excpt.cause = cause;
    80001686:	008abc23          	sd	s0,24(s5)
    excpt.epc = epc;
    8000168a:	033ab023          	sd	s3,32(s5)
    excpt.tval = tval;
    8000168e:	034ab423          	sd	s4,40(s5)
    excpt.priv = PRIV_VS;
    80001692:	00faaa23          	sw	a5,20(s5)
    if(is_inst_fault(cause)){
    80001696:	b549                	j	80001518 <vshandler+0xbe>
    return_from_exception(temp_priv, curr_priv, cause, epc);
    80001698:	6709                	lui	a4,0x2
    8000169a:	80070713          	addi	a4,a4,-2048 # 1800 <_test_table_size+0x17ff>
    8000169e:	8fd9                	or	a5,a5,a4
    800016a0:	b75d                	j	80001646 <vshandler+0x1ec>
    800016a2:	ded9                	beqz	a3,80001640 <vshandler+0x1e6>
    800016a4:	b74d                	j	80001646 <vshandler+0x1ec>

00000000800016a6 <expand_compressed_instruction>:

uint32_t expand_compressed_instruction(uint16_t ins) {
    800016a6:	1141                	addi	sp,sp,-16
    800016a8:	e406                	sd	ra,8(sp)

    if(!INS_COMPRESSED(ins)) {
    800016aa:	00357713          	andi	a4,a0,3
    800016ae:	478d                	li	a5,3
    800016b0:	04f70763          	beq	a4,a5,800016fe <expand_compressed_instruction+0x58>
        ERROR("trying to expand non-compressed instruction");
    }

    if(INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins) || INS_MATCH_C_SW(ins) || INS_MATCH_C_SD(ins)){
    800016b4:	77f9                	lui	a5,0xffffe
    800016b6:	078d                	addi	a5,a5,3 # ffffffffffffe003 <__stack_top+0xffffffff7fcff003>
    800016b8:	8fe9                	and	a5,a5,a0
    800016ba:	6711                	lui	a4,0x4
    800016bc:	85aa                	mv	a1,a0
    800016be:	08e78963          	beq	a5,a4,80001750 <expand_compressed_instruction+0xaa>
    800016c2:	6719                	lui	a4,0x6
    800016c4:	04e78663          	beq	a5,a4,80001710 <expand_compressed_instruction+0x6a>
    800016c8:	6731                	lui	a4,0xc
    800016ca:	0ae78b63          	beq	a5,a4,80001780 <expand_compressed_instruction+0xda>
    800016ce:	6739                	lui	a4,0xe
    800016d0:	0ae78363          	beq	a5,a4,80001776 <expand_compressed_instruction+0xd0>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) & 0x1 << 6 |
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) >> 1 & 0x1 << 2;
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    } else {
        ERROR("expansion not implemented for target compressed instruction: 0x%x", ins);
    800016d4:	0002c517          	auipc	a0,0x2c
    800016d8:	fac50513          	addi	a0,a0,-84 # 8002d680 <__func__.0+0x660>
    800016dc:	6de290ef          	jal	8002adba <printf>
    800016e0:	18300613          	li	a2,387
    800016e4:	0002a597          	auipc	a1,0x2a
    800016e8:	bb458593          	addi	a1,a1,-1100 # 8002b298 <__func__.0>
    800016ec:	0002c517          	auipc	a0,0x2c
    800016f0:	d9c50513          	addi	a0,a0,-612 # 8002d488 <__func__.0+0x468>
    800016f4:	6c6290ef          	jal	8002adba <printf>
    800016f8:	4501                	li	a0,0
    800016fa:	276290ef          	jal	8002a970 <exit>
        ERROR("trying to expand non-compressed instruction");
    800016fe:	0002c517          	auipc	a0,0x2c
    80001702:	f4250513          	addi	a0,a0,-190 # 8002d640 <__func__.0+0x620>
    80001706:	6b4290ef          	jal	8002adba <printf>
    8000170a:	17000613          	li	a2,368
    8000170e:	bfd9                	j	800016e4 <expand_compressed_instruction+0x3e>
            (is_load ? MATCH_LD : MATCH_SD):
    80001710:	668d                	lui	a3,0x3
    80001712:	068d                	addi	a3,a3,3 # 3003 <_test_table_size+0x3002>
        bool is_load = INS_MATCH_C_LW(ins) || INS_MATCH_C_LD(ins); 
    80001714:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001716:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000171a:	0075d713          	srli	a4,a1,0x7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000171e:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001720:	8b1d                	andi	a4,a4,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001722:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001724:	2721                	addiw	a4,a4,8 # e008 <_test_table_size+0xe007>
            ((ins & INS_C_IMM0_MASK)  >> INS_C_IMM0_OFF) << 6 :
    80001726:	0055d613          	srli	a2,a1,0x5
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000172a:	0606                	slli	a2,a2,0x1
    8000172c:	0196161b          	slliw	a2,a2,0x19
    80001730:	0e0005b7          	lui	a1,0xe000
    80001734:	8e6d                	and	a2,a2,a1
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001736:	45d1                	li	a1,20
    80001738:	c111                	beqz	a0,8000173c <expand_compressed_instruction+0x96>
    8000173a:	459d                	li	a1,7
    }

}
    8000173c:	60a2                	ld	ra,8(sp)
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000173e:	00f7171b          	slliw	a4,a4,0xf
    80001742:	8ed1                	or	a3,a3,a2
    80001744:	8f55                	or	a4,a4,a3
        return opcode_funct3 | rd_rs2 << (is_load ? 7 : 20) | 
    80001746:	00b7953b          	sllw	a0,a5,a1
            rs1 << 15 | (imm & 0x1f) << 7 | (imm >> 5) << 25;
    8000174a:	8d59                	or	a0,a0,a4
}
    8000174c:	0141                	addi	sp,sp,16
    8000174e:	8082                	ret
            (is_load ? MATCH_LD : MATCH_SD):
    80001750:	6689                	lui	a3,0x2
    80001752:	068d                	addi	a3,a3,3 # 2003 <_test_table_size+0x2002>
    80001754:	4505                	li	a0,1
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001756:	0025d793          	srli	a5,a1,0x2
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000175a:	0075d713          	srli	a4,a1,0x7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    8000175e:	00a5d813          	srli	a6,a1,0xa
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    80001762:	8b9d                	andi	a5,a5,7
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    80001764:	8b1d                	andi	a4,a4,7
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    80001766:	00787813          	andi	a6,a6,7
        uint32_t rd_rs2 =  ((ins & INS_C_RDRS2_MASK) >> INS_C_RDRS2_OFF) + 8;
    8000176a:	27a1                	addiw	a5,a5,8
        uint32_t rs1 = ((ins & INS_C_RS1_MASK) >> INS_C_RS1_OFF) + 8;
    8000176c:	2721                	addiw	a4,a4,8
        uint32_t imm = ((ins & INS_C_IMM1_MASK)  >> INS_C_IMM1_OFF) << 3 |
    8000176e:	4601                	li	a2,0
    80001770:	fc0803e3          	beqz	a6,80001736 <expand_compressed_instruction+0x90>
    80001774:	bf4d                	j	80001726 <expand_compressed_instruction+0x80>
            (is_load ? MATCH_LD : MATCH_SD):
    80001776:	668d                	lui	a3,0x3
    80001778:	02368693          	addi	a3,a3,35 # 3023 <_test_table_size+0x3022>
    8000177c:	4501                	li	a0,0
    8000177e:	bf61                	j	80001716 <expand_compressed_instruction+0x70>
    80001780:	6689                	lui	a3,0x2
    80001782:	02368693          	addi	a3,a3,35 # 2023 <_test_table_size+0x2022>
    80001786:	4501                	li	a0,0
    80001788:	b7f9                	j	80001756 <expand_compressed_instruction+0xb0>

000000008000178a <reset_state>:

extern void hshandler_entry();
extern void mhandler_entry();
extern void vshandler_entry();
    
void reset_state(){
    8000178a:	1141                	addi	sp,sp,-16

    goto_priv(PRIV_M);
    8000178c:	4511                	li	a0,4
void reset_state(){
    8000178e:	e406                	sd	ra,8(sp)
    goto_priv(PRIV_M);
    80001790:	edeff0ef          	jal	80000e6e <goto_priv>
    CSRW(mstatus, 0ULL);
    80001794:	30005073          	csrwi	mstatus,0
    //CSRW(mtvec, 0ULL);
    CSRW(medeleg, 0ULL);
    80001798:	30205073          	csrwi	medeleg,0
    CSRW(mideleg, 0ULL);
    8000179c:	30305073          	csrwi	mideleg,0
    CSRW(mip, 0ULL);
    800017a0:	34405073          	csrwi	mip,0
    CSRW(mie, 0ULL);
    800017a4:	30405073          	csrwi	mie,0
    //CSRW(mtime, 0ULL); 
    //CSRW(mtimecmp, 0ULL); 
    CSRW(mscratch, 0ULL);
    800017a8:	34005073          	csrwi	mscratch,0
    CSRW(mepc, 0ULL);
    800017ac:	34105073          	csrwi	mepc,0
    CSRW(mtval, 0ULL);
    800017b0:	34305073          	csrwi	mtval,0
    CSRW(CSR_MTINST, 0ULL);
    800017b4:	34a05073          	csrwi	0x34a,0
    CSRW(CSR_MTVAL2, 0ULL);
    800017b8:	34b05073          	csrwi	0x34b,0
    //what about pmp register?
    CSRW(sstatus, 0ULL);
    800017bc:	10005073          	csrwi	sstatus,0
    //CSRW(stvec, 0ULL);
    CSRW(sip, 0ULL);
    800017c0:	14405073          	csrwi	sip,0
    CSRW(sie, 0ULL);
    800017c4:	10405073          	csrwi	sie,0
    CSRW(sscratch, 0ULL);
    800017c8:	14005073          	csrwi	sscratch,0
    CSRW(sepc, 0ULL);
    800017cc:	14105073          	csrwi	sepc,0
    CSRW(scause, 0ULL);
    800017d0:	14205073          	csrwi	scause,0
    CSRW(stval, 0ULL);
    800017d4:	14305073          	csrwi	stval,0
    CSRW(satp, 0ULL);
    800017d8:	18005073          	csrwi	satp,0
    CSRW(CSR_HSTATUS, 0ULL);
    800017dc:	60005073          	csrwi	hstatus,0
    CSRW(CSR_HIDELEG, 0ULL);
    800017e0:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG, 0ULL);
    800017e4:	60205073          	csrwi	hedeleg,0
    CSRW(CSR_HVIP, 0ULL);
    800017e8:	64505073          	csrwi	hvip,0
    CSRW(CSR_HIP, 0ULL);
    800017ec:	64405073          	csrwi	hip,0
    CSRW(CSR_HIE, 0ULL);  
    800017f0:	60405073          	csrwi	hie,0
    CSRW(CSR_HTVAL, 0ULL);
    800017f4:	64305073          	csrwi	htval,0
    CSRW(CSR_HTINST, 0ULL);
    800017f8:	64a05073          	csrwi	htinst,0
    CSRW(CSR_HGATP, 0ULL);
    800017fc:	68005073          	csrwi	hgatp,0
    CSRW(CSR_VSSTATUS, 0ULL);
    80001800:	20005073          	csrwi	vsstatus,0
    CSRW(CSR_VSIP, 0ULL);
    80001804:	24405073          	csrwi	vsip,0
    CSRW(CSR_VSIE, 0ULL);
    80001808:	20405073          	csrwi	vsie,0
    //CSRW(CSR_VSTVEC, 0ULL);
    CSRW(CSR_VSSCRATCH, 0ULL);
    8000180c:	24005073          	csrwi	vsscratch,0
    CSRW(CSR_VSEPC, 0ULL);
    80001810:	24105073          	csrwi	vsepc,0
    CSRW(CSR_VSCAUSE, 0ULL);
    80001814:	24205073          	csrwi	vscause,0
    CSRW(CSR_VSTVAL, 0ULL);
    80001818:	24305073          	csrwi	vstval,0
    CSRW(CSR_VSATP, 0ULL);  
    8000181c:	28005073          	csrwi	vsatp,0

    CSRW(mtvec, mhandler_entry);
    80001820:	00029797          	auipc	a5,0x29
    80001824:	7d078793          	addi	a5,a5,2000 # 8002aff0 <mhandler_entry>
    80001828:	30579073          	csrw	mtvec,a5
    CSRS(medeleg, (1ULL << 8) | (1ULL << 10));
    8000182c:	50000793          	li	a5,1280
    80001830:	3027a073          	csrs	medeleg,a5
    // full access to physical memory to other modes
    CSRW(pmpcfg0, 0xf);
    80001834:	3a07d073          	csrwi	pmpcfg0,15
    CSRW(pmpaddr0, (uint64_t) -1);
    80001838:	57fd                	li	a5,-1
    8000183a:	3b079073          	csrw	pmpaddr0,a5

    CSRW(stvec, hshandler_entry);
    8000183e:	00029797          	auipc	a5,0x29
    80001842:	7fa78793          	addi	a5,a5,2042 # 8002b038 <hshandler_entry>
    80001846:	10579073          	csrw	stvec,a5
    CSRS(CSR_HEDELEG, (1ULL << 8));
    8000184a:	10000793          	li	a5,256
    8000184e:	6027a073          	csrs	hedeleg,a5

    CSRW(CSR_VSTVEC, vshandler_entry);
    80001852:	0002a797          	auipc	a5,0x2a
    80001856:	82e78793          	addi	a5,a5,-2002 # 8002b080 <vshandler_entry>
    8000185a:	20579073          	csrw	vstvec,a5
// }



static inline void sfence(){
    asm volatile ("sfence.vma \n\t");
    8000185e:	12000073          	sfence.vma
        ".insn r 0x73, 0x0, 0x31, x0, x0, x0\n\t"
        ::: "memory");
}

static inline void hfence_vvma() {
    asm volatile(
    80001862:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80001866:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
}
    8000186a:	60a2                	ld	ra,8(sp)
    8000186c:	0141                	addi	sp,sp,16
    8000186e:	8082                	ret

0000000080001870 <random_m_instruction>:
#include <rvh_test.h>
#include <instructions.h> 
#include <csrs.h>

void random_m_instruction(){
    int rand1=CSRR(time);
    80001870:	c01027f3          	rdtime	a5
    int rand2=CSRR(cycle);
    80001874:	c00026f3          	rdcycle	a3
    int num0=rand1+rand2;
    int num=num0%10;
    80001878:	66666737          	lui	a4,0x66666
    int num0=rand1+rand2;
    8000187c:	9fb5                	addw	a5,a5,a3
    int num=num0%10;
    8000187e:	66770713          	addi	a4,a4,1639 # 66666667 <STACK_SIZE+0x66566667>
    80001882:	02e78733          	mul	a4,a5,a4
    80001886:	41f7d69b          	sraiw	a3,a5,0x1f

    switch (num)
    8000188a:	4625                	li	a2,9
    int num=num0%10;
    8000188c:	9709                	srai	a4,a4,0x22
    8000188e:	9f15                	subw	a4,a4,a3
    80001890:	0027169b          	slliw	a3,a4,0x2
    80001894:	9f35                	addw	a4,a4,a3
    80001896:	0017171b          	slliw	a4,a4,0x1
    8000189a:	9f99                	subw	a5,a5,a4
    switch (num)
    8000189c:	08f66a63          	bltu	a2,a5,80001930 <random_m_instruction+0xc0>
    800018a0:	02079713          	slli	a4,a5,0x20
    800018a4:	01e75793          	srli	a5,a4,0x1e
    800018a8:	0002a717          	auipc	a4,0x2a
    800018ac:	a1070713          	addi	a4,a4,-1520 # 8002b2b8 <__func__.0+0x20>
    800018b0:	97ba                	add	a5,a5,a4
    800018b2:	439c                	lw	a5,0(a5)
    800018b4:	97ba                	add	a5,a5,a4
    800018b6:	8782                	jr	a5
        break;
    case 7:
        printf("这是7号指令\n");
        break;
    case 8:
        printf("这是8号指令\n");
    800018b8:	0002c517          	auipc	a0,0x2c
    800018bc:	ee050513          	addi	a0,a0,-288 # 8002d798 <__func__.0+0x778>
    800018c0:	1362906f          	j	8002a9f6 <puts>
        break;
    case 9:
        printf("这是9号指令\n");
    800018c4:	0002c517          	auipc	a0,0x2c
    800018c8:	eec50513          	addi	a0,a0,-276 # 8002d7b0 <__func__.0+0x790>
    800018cc:	12a2906f          	j	8002a9f6 <puts>
        printf("这是0号指令\n");
    800018d0:	0002c517          	auipc	a0,0x2c
    800018d4:	e0850513          	addi	a0,a0,-504 # 8002d6d8 <__func__.0+0x6b8>
    800018d8:	11e2906f          	j	8002a9f6 <puts>
        printf("这是1号指令\n");
    800018dc:	0002c517          	auipc	a0,0x2c
    800018e0:	e1450513          	addi	a0,a0,-492 # 8002d6f0 <__func__.0+0x6d0>
    800018e4:	1122906f          	j	8002a9f6 <puts>
        printf("这是2号指令\n");
    800018e8:	0002c517          	auipc	a0,0x2c
    800018ec:	e2050513          	addi	a0,a0,-480 # 8002d708 <__func__.0+0x6e8>
    800018f0:	1062906f          	j	8002a9f6 <puts>
        printf("这是3号指令\n");
    800018f4:	0002c517          	auipc	a0,0x2c
    800018f8:	e2c50513          	addi	a0,a0,-468 # 8002d720 <__func__.0+0x700>
    800018fc:	0fa2906f          	j	8002a9f6 <puts>
        printf("这是4号指令\n");
    80001900:	0002c517          	auipc	a0,0x2c
    80001904:	e3850513          	addi	a0,a0,-456 # 8002d738 <__func__.0+0x718>
    80001908:	0ee2906f          	j	8002a9f6 <puts>
        printf("这是5号指令\n");
    8000190c:	0002c517          	auipc	a0,0x2c
    80001910:	e4450513          	addi	a0,a0,-444 # 8002d750 <__func__.0+0x730>
    80001914:	0e22906f          	j	8002a9f6 <puts>
        printf("这是6号指令\n");
    80001918:	0002c517          	auipc	a0,0x2c
    8000191c:	e5050513          	addi	a0,a0,-432 # 8002d768 <__func__.0+0x748>
    80001920:	0d62906f          	j	8002a9f6 <puts>
        printf("这是7号指令\n");
    80001924:	0002c517          	auipc	a0,0x2c
    80001928:	e5c50513          	addi	a0,a0,-420 # 8002d780 <__func__.0+0x760>
    8000192c:	0ca2906f          	j	8002a9f6 <puts>
    
    
    default:
        break;
    }
    80001930:	8082                	ret

0000000080001932 <check_xip_regs_1>:
#include <rvh_test.h>

bool check_xip_regs_1(){
    80001932:	7179                	addi	sp,sp,-48

    TEST_START();
    80001934:	0002a597          	auipc	a1,0x2a
    80001938:	9ac58593          	addi	a1,a1,-1620 # 8002b2e0 <__func__.3>
    8000193c:	0002c517          	auipc	a0,0x2c
    80001940:	9c450513          	addi	a0,a0,-1596 # 8002d300 <__func__.0+0x2e0>
bool check_xip_regs_1(){
    80001944:	f406                	sd	ra,40(sp)
    80001946:	f022                	sd	s0,32(sp)
    80001948:	ec26                	sd	s1,24(sp)
    8000194a:	e84a                	sd	s2,16(sp)
    8000194c:	e44e                	sd	s3,8(sp)
    8000194e:	e052                	sd	s4,0(sp)
    TEST_START();
    80001950:	46a290ef          	jal	8002adba <printf>
    80001954:	4529                	li	a0,10
    80001956:	152280ef          	jal	80029aa8 <putchar>

    CSRW(mideleg, 0);
    8000195a:	30305073          	csrwi	mideleg,0

    int64_t mtime_mask = ~((int64_t)0x80);

    CSRW(mideleg, (uint64_t)-1);
    8000195e:	547d                	li	s0,-1
    80001960:	30341073          	csrw	mideleg,s0
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001964:	60341073          	csrw	hideleg,s0
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    80001968:	244029f3          	csrr	s3,vsip
    8000196c:	24441073          	csrw	vsip,s0
    80001970:	244024f3          	csrr	s1,vsip
    80001974:	0002c617          	auipc	a2,0x2c
    80001978:	e5460613          	addi	a2,a2,-428 # 8002d7c8 <__func__.0+0x7a8>
    8000197c:	08200593          	li	a1,130
    80001980:	0002c517          	auipc	a0,0x2c
    80001984:	99850513          	addi	a0,a0,-1640 # 8002d318 <__func__.0+0x2f8>
    80001988:	4909                	li	s2,2
    8000198a:	430290ef          	jal	8002adba <printf>
    8000198e:	11248f63          	beq	s1,s2,80001aac <check_xip_regs_1+0x17a>
    80001992:	0002c597          	auipc	a1,0x2c
    80001996:	95e58593          	addi	a1,a1,-1698 # 8002d2f0 <__func__.0+0x2d0>
    8000199a:	0002c517          	auipc	a0,0x2c
    8000199e:	99650513          	addi	a0,a0,-1642 # 8002d330 <__func__.0+0x310>
    800019a2:	418290ef          	jal	8002adba <printf>
    800019a6:	0002c517          	auipc	a0,0x2c
    800019aa:	99250513          	addi	a0,a0,-1646 # 8002d338 <__func__.0+0x318>
    800019ae:	40c290ef          	jal	8002adba <printf>
    800019b2:	86ca                	mv	a3,s2
    800019b4:	8626                	mv	a2,s1
    800019b6:	85a2                	mv	a1,s0
    800019b8:	0002c517          	auipc	a0,0x2c
    800019bc:	98850513          	addi	a0,a0,-1656 # 8002d340 <__func__.0+0x320>
    800019c0:	3fa290ef          	jal	8002adba <printf>
    800019c4:	02900513          	li	a0,41
    800019c8:	0e0280ef          	jal	80029aa8 <putchar>
    800019cc:	4529                	li	a0,10
    800019ce:	0da280ef          	jal	80029aa8 <putchar>
    800019d2:	4a01                	li	s4,0
    800019d4:	24499073          	csrw	vsip,s3
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    800019d8:	204029f3          	csrr	s3,vsie
    800019dc:	54fd                	li	s1,-1
    800019de:	20449073          	csrw	vsie,s1
    800019e2:	20402973          	csrr	s2,vsie
    800019e6:	6409                	lui	s0,0x2
    800019e8:	0002c617          	auipc	a2,0x2c
    800019ec:	de860613          	addi	a2,a2,-536 # 8002d7d0 <__func__.0+0x7b0>
    800019f0:	08200593          	li	a1,130
    800019f4:	0002c517          	auipc	a0,0x2c
    800019f8:	92450513          	addi	a0,a0,-1756 # 8002d318 <__func__.0+0x2f8>
    800019fc:	22240413          	addi	s0,s0,546 # 2222 <_test_table_size+0x2221>
    80001a00:	3ba290ef          	jal	8002adba <printf>
    80001a04:	06890d63          	beq	s2,s0,80001a7e <check_xip_regs_1+0x14c>
    80001a08:	0002c597          	auipc	a1,0x2c
    80001a0c:	8e858593          	addi	a1,a1,-1816 # 8002d2f0 <__func__.0+0x2d0>
    80001a10:	0002c517          	auipc	a0,0x2c
    80001a14:	92050513          	addi	a0,a0,-1760 # 8002d330 <__func__.0+0x310>
    80001a18:	3a2290ef          	jal	8002adba <printf>
    80001a1c:	0002c517          	auipc	a0,0x2c
    80001a20:	91c50513          	addi	a0,a0,-1764 # 8002d338 <__func__.0+0x318>
    80001a24:	396290ef          	jal	8002adba <printf>
    80001a28:	86a2                	mv	a3,s0
    80001a2a:	864a                	mv	a2,s2
    80001a2c:	85a6                	mv	a1,s1
    80001a2e:	0002c517          	auipc	a0,0x2c
    80001a32:	91250513          	addi	a0,a0,-1774 # 8002d340 <__func__.0+0x320>
    80001a36:	384290ef          	jal	8002adba <printf>
    80001a3a:	02900513          	li	a0,41
    80001a3e:	06a280ef          	jal	80029aa8 <putchar>
    80001a42:	4529                	li	a0,10
    80001a44:	064280ef          	jal	80029aa8 <putchar>
    80001a48:	20499073          	csrw	vsie,s3
    80001a4c:	4401                	li	s0,0
    
    TEST_END();
    80001a4e:	0002c597          	auipc	a1,0x2c
    80001a52:	8a258593          	addi	a1,a1,-1886 # 8002d2f0 <__func__.0+0x2d0>
    80001a56:	0002c517          	auipc	a0,0x2c
    80001a5a:	94250513          	addi	a0,a0,-1726 # 8002d398 <__func__.0+0x378>
    80001a5e:	35c290ef          	jal	8002adba <printf>
    80001a62:	4511                	li	a0,4
    80001a64:	c0aff0ef          	jal	80000e6e <goto_priv>
    80001a68:	d23ff0ef          	jal	8000178a <reset_state>
}
    80001a6c:	70a2                	ld	ra,40(sp)
    80001a6e:	8522                	mv	a0,s0
    80001a70:	7402                	ld	s0,32(sp)
    80001a72:	64e2                	ld	s1,24(sp)
    80001a74:	6942                	ld	s2,16(sp)
    80001a76:	69a2                	ld	s3,8(sp)
    80001a78:	6a02                	ld	s4,0(sp)
    80001a7a:	6145                	addi	sp,sp,48
    80001a7c:	8082                	ret
    check_csr_wrrd("vsie", CSR_VSIE, (uint64_t) -1, 0x2222);        //开启Shlcofideleg 扩展则为2222，否则为222
    80001a7e:	0002c597          	auipc	a1,0x2c
    80001a82:	86258593          	addi	a1,a1,-1950 # 8002d2e0 <__func__.0+0x2c0>
    80001a86:	0002c517          	auipc	a0,0x2c
    80001a8a:	8aa50513          	addi	a0,a0,-1878 # 8002d330 <__func__.0+0x310>
    80001a8e:	32c290ef          	jal	8002adba <printf>
    80001a92:	4529                	li	a0,10
    80001a94:	014280ef          	jal	80029aa8 <putchar>
    80001a98:	fa0a08e3          	beqz	s4,80001a48 <check_xip_regs_1+0x116>
    80001a9c:	20499073          	csrw	vsie,s3
    80001aa0:	4405                	li	s0,1
    TEST_END();
    80001aa2:	0002c597          	auipc	a1,0x2c
    80001aa6:	83e58593          	addi	a1,a1,-1986 # 8002d2e0 <__func__.0+0x2c0>
    80001aaa:	b775                	j	80001a56 <check_xip_regs_1+0x124>
    check_csr_wrrd("vsip", CSR_VSIP, (uint64_t) -1, 0x2);
    80001aac:	0002c597          	auipc	a1,0x2c
    80001ab0:	83458593          	addi	a1,a1,-1996 # 8002d2e0 <__func__.0+0x2c0>
    80001ab4:	0002c517          	auipc	a0,0x2c
    80001ab8:	87c50513          	addi	a0,a0,-1924 # 8002d330 <__func__.0+0x310>
    80001abc:	2fe290ef          	jal	8002adba <printf>
    80001ac0:	4529                	li	a0,10
    80001ac2:	7e7270ef          	jal	80029aa8 <putchar>
    80001ac6:	4a05                	li	s4,1
    80001ac8:	b731                	j	800019d4 <check_xip_regs_1+0xa2>

0000000080001aca <check_xip_regs_2>:

bool check_xip_regs_2(){
    80001aca:	1101                	addi	sp,sp,-32

    TEST_START();
    80001acc:	0002a597          	auipc	a1,0x2a
    80001ad0:	82c58593          	addi	a1,a1,-2004 # 8002b2f8 <__func__.2>
    80001ad4:	0002c517          	auipc	a0,0x2c
    80001ad8:	82c50513          	addi	a0,a0,-2004 # 8002d300 <__func__.0+0x2e0>
bool check_xip_regs_2(){
    80001adc:	ec06                	sd	ra,24(sp)
    80001ade:	e822                	sd	s0,16(sp)
    80001ae0:	e426                	sd	s1,8(sp)
    80001ae2:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001ae4:	2d6290ef          	jal	8002adba <printf>
    80001ae8:	4529                	li	a0,10
    80001aea:	7bf270ef          	jal	80029aa8 <putchar>

    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80001aee:	57fd                	li	a5,-1
    80001af0:	03f79713          	slli	a4,a5,0x3f
    80001af4:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80001af8:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001afc:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80001b00:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001b04:	64402473          	csrr	s0,hip
    80001b08:	0002c617          	auipc	a2,0x2c
    80001b0c:	cd060613          	addi	a2,a2,-816 # 8002d7d8 <__func__.0+0x7b8>
    80001b10:	08200593          	li	a1,130
    80001b14:	0002c517          	auipc	a0,0x2c
    80001b18:	80450513          	addi	a0,a0,-2044 # 8002d318 <__func__.0+0x2f8>
    80001b1c:	4491                	li	s1,4
    80001b1e:	29c290ef          	jal	8002adba <printf>
    80001b22:	46940463          	beq	s0,s1,80001f8a <check_xip_regs_2+0x4c0>
    80001b26:	0002b597          	auipc	a1,0x2b
    80001b2a:	7ca58593          	addi	a1,a1,1994 # 8002d2f0 <__func__.0+0x2d0>
    80001b2e:	0002c517          	auipc	a0,0x2c
    80001b32:	80250513          	addi	a0,a0,-2046 # 8002d330 <__func__.0+0x310>
    80001b36:	284290ef          	jal	8002adba <printf>
    80001b3a:	0002b517          	auipc	a0,0x2b
    80001b3e:	7fe50513          	addi	a0,a0,2046 # 8002d338 <__func__.0+0x318>
    80001b42:	278290ef          	jal	8002adba <printf>
    80001b46:	8622                	mv	a2,s0
    80001b48:	86a6                	mv	a3,s1
    80001b4a:	02d00593          	li	a1,45
    80001b4e:	0002c517          	auipc	a0,0x2c
    80001b52:	c9250513          	addi	a0,a0,-878 # 8002d7e0 <__func__.0+0x7c0>
    80001b56:	264290ef          	jal	8002adba <printf>
    80001b5a:	02900513          	li	a0,41
    80001b5e:	74b270ef          	jal	80029aa8 <putchar>
    80001b62:	4529                	li	a0,10
    80001b64:	745270ef          	jal	80029aa8 <putchar>
    80001b68:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    80001b6a:	144024f3          	csrr	s1,sip
    80001b6e:	0002c617          	auipc	a2,0x2c
    80001b72:	c8a60613          	addi	a2,a2,-886 # 8002d7f8 <__func__.0+0x7d8>
    80001b76:	08200593          	li	a1,130
    80001b7a:	0002b517          	auipc	a0,0x2b
    80001b7e:	79e50513          	addi	a0,a0,1950 # 8002d318 <__func__.0+0x2f8>
    80001b82:	22200913          	li	s2,546
    80001b86:	234290ef          	jal	8002adba <printf>
    80001b8a:	3b248663          	beq	s1,s2,80001f36 <check_xip_regs_2+0x46c>
    80001b8e:	0002b597          	auipc	a1,0x2b
    80001b92:	76258593          	addi	a1,a1,1890 # 8002d2f0 <__func__.0+0x2d0>
    80001b96:	0002b517          	auipc	a0,0x2b
    80001b9a:	79a50513          	addi	a0,a0,1946 # 8002d330 <__func__.0+0x310>
    80001b9e:	21c290ef          	jal	8002adba <printf>
    80001ba2:	0002b517          	auipc	a0,0x2b
    80001ba6:	79650513          	addi	a0,a0,1942 # 8002d338 <__func__.0+0x318>
    80001baa:	210290ef          	jal	8002adba <printf>
    80001bae:	86ca                	mv	a3,s2
    80001bb0:	8626                	mv	a2,s1
    80001bb2:	02d00593          	li	a1,45
    80001bb6:	0002c517          	auipc	a0,0x2c
    80001bba:	c2a50513          	addi	a0,a0,-982 # 8002d7e0 <__func__.0+0x7c0>
    80001bbe:	1fc290ef          	jal	8002adba <printf>
    80001bc2:	02900513          	li	a0,41
    80001bc6:	6e3270ef          	jal	80029aa8 <putchar>
    80001bca:	4529                	li	a0,10
    80001bcc:	6dd270ef          	jal	80029aa8 <putchar>
    80001bd0:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80001bd2:	244024f3          	csrr	s1,vsip
    80001bd6:	0002c617          	auipc	a2,0x2c
    80001bda:	bf260613          	addi	a2,a2,-1038 # 8002d7c8 <__func__.0+0x7a8>
    80001bde:	08200593          	li	a1,130
    80001be2:	0002b517          	auipc	a0,0x2b
    80001be6:	73650513          	addi	a0,a0,1846 # 8002d318 <__func__.0+0x2f8>
    80001bea:	4909                	li	s2,2
    80001bec:	1ce290ef          	jal	8002adba <printf>
    80001bf0:	37248f63          	beq	s1,s2,80001f6e <check_xip_regs_2+0x4a4>
    80001bf4:	0002b597          	auipc	a1,0x2b
    80001bf8:	6fc58593          	addi	a1,a1,1788 # 8002d2f0 <__func__.0+0x2d0>
    80001bfc:	0002b517          	auipc	a0,0x2b
    80001c00:	73450513          	addi	a0,a0,1844 # 8002d330 <__func__.0+0x310>
    80001c04:	1b6290ef          	jal	8002adba <printf>
    80001c08:	0002b517          	auipc	a0,0x2b
    80001c0c:	73050513          	addi	a0,a0,1840 # 8002d338 <__func__.0+0x318>
    80001c10:	1aa290ef          	jal	8002adba <printf>
    80001c14:	86ca                	mv	a3,s2
    80001c16:	8626                	mv	a2,s1
    80001c18:	02d00593          	li	a1,45
    80001c1c:	0002c517          	auipc	a0,0x2c
    80001c20:	bc450513          	addi	a0,a0,-1084 # 8002d7e0 <__func__.0+0x7c0>
    80001c24:	196290ef          	jal	8002adba <printf>
    80001c28:	02900513          	li	a0,41
    80001c2c:	67d270ef          	jal	80029aa8 <putchar>
    80001c30:	4529                	li	a0,10
    80001c32:	677270ef          	jal	80029aa8 <putchar>
    80001c36:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001c38:	4509                	li	a0,2
    80001c3a:	a34ff0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001c3e:	144024f3          	csrr	s1,sip
    80001c42:	0002c617          	auipc	a2,0x2c
    80001c46:	bbe60613          	addi	a2,a2,-1090 # 8002d800 <__func__.0+0x7e0>
    80001c4a:	08200593          	li	a1,130
    80001c4e:	0002b517          	auipc	a0,0x2b
    80001c52:	6ca50513          	addi	a0,a0,1738 # 8002d318 <__func__.0+0x2f8>
    80001c56:	4909                	li	s2,2
    80001c58:	162290ef          	jal	8002adba <printf>
    80001c5c:	2f248b63          	beq	s1,s2,80001f52 <check_xip_regs_2+0x488>
    80001c60:	0002b597          	auipc	a1,0x2b
    80001c64:	69058593          	addi	a1,a1,1680 # 8002d2f0 <__func__.0+0x2d0>
    80001c68:	0002b517          	auipc	a0,0x2b
    80001c6c:	6c850513          	addi	a0,a0,1736 # 8002d330 <__func__.0+0x310>
    80001c70:	14a290ef          	jal	8002adba <printf>
    80001c74:	0002b517          	auipc	a0,0x2b
    80001c78:	6c450513          	addi	a0,a0,1732 # 8002d338 <__func__.0+0x318>
    80001c7c:	13e290ef          	jal	8002adba <printf>
    80001c80:	86ca                	mv	a3,s2
    80001c82:	8626                	mv	a2,s1
    80001c84:	02d00593          	li	a1,45
    80001c88:	0002c517          	auipc	a0,0x2c
    80001c8c:	b5850513          	addi	a0,a0,-1192 # 8002d7e0 <__func__.0+0x7c0>
    80001c90:	12a290ef          	jal	8002adba <printf>
    80001c94:	02900513          	li	a0,41
    80001c98:	611270ef          	jal	80029aa8 <putchar>
    80001c9c:	4529                	li	a0,10
    80001c9e:	60b270ef          	jal	80029aa8 <putchar>
    80001ca2:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80001ca4:	4511                	li	a0,4
    80001ca6:	9c8ff0ef          	jal	80000e6e <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80001caa:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001cae:	644024f3          	csrr	s1,hip
    80001cb2:	0002c617          	auipc	a2,0x2c
    80001cb6:	b2660613          	addi	a2,a2,-1242 # 8002d7d8 <__func__.0+0x7b8>
    80001cba:	08200593          	li	a1,130
    80001cbe:	0002b517          	auipc	a0,0x2b
    80001cc2:	65a50513          	addi	a0,a0,1626 # 8002d318 <__func__.0+0x2f8>
    80001cc6:	0f4290ef          	jal	8002adba <printf>
    80001cca:	1a048663          	beqz	s1,80001e76 <check_xip_regs_2+0x3ac>
    80001cce:	0002b597          	auipc	a1,0x2b
    80001cd2:	62258593          	addi	a1,a1,1570 # 8002d2f0 <__func__.0+0x2d0>
    80001cd6:	0002b517          	auipc	a0,0x2b
    80001cda:	65a50513          	addi	a0,a0,1626 # 8002d330 <__func__.0+0x310>
    80001cde:	0dc290ef          	jal	8002adba <printf>
    80001ce2:	0002b517          	auipc	a0,0x2b
    80001ce6:	65650513          	addi	a0,a0,1622 # 8002d338 <__func__.0+0x318>
    80001cea:	0d0290ef          	jal	8002adba <printf>
    80001cee:	8626                	mv	a2,s1
    80001cf0:	4681                	li	a3,0
    80001cf2:	02d00593          	li	a1,45
    80001cf6:	0002c517          	auipc	a0,0x2c
    80001cfa:	aea50513          	addi	a0,a0,-1302 # 8002d7e0 <__func__.0+0x7c0>
    80001cfe:	0bc290ef          	jal	8002adba <printf>
    80001d02:	02900513          	li	a0,41
    80001d06:	5a3270ef          	jal	80029aa8 <putchar>
    80001d0a:	4529                	li	a0,10
    80001d0c:	59d270ef          	jal	80029aa8 <putchar>
    80001d10:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80001d12:	144024f3          	csrr	s1,sip
    80001d16:	0002c617          	auipc	a2,0x2c
    80001d1a:	ae260613          	addi	a2,a2,-1310 # 8002d7f8 <__func__.0+0x7d8>
    80001d1e:	08200593          	li	a1,130
    80001d22:	0002b517          	auipc	a0,0x2b
    80001d26:	5f650513          	addi	a0,a0,1526 # 8002d318 <__func__.0+0x2f8>
    80001d2a:	090290ef          	jal	8002adba <printf>
    80001d2e:	18048163          	beqz	s1,80001eb0 <check_xip_regs_2+0x3e6>
    80001d32:	0002b597          	auipc	a1,0x2b
    80001d36:	5be58593          	addi	a1,a1,1470 # 8002d2f0 <__func__.0+0x2d0>
    80001d3a:	0002b517          	auipc	a0,0x2b
    80001d3e:	5f650513          	addi	a0,a0,1526 # 8002d330 <__func__.0+0x310>
    80001d42:	078290ef          	jal	8002adba <printf>
    80001d46:	0002b517          	auipc	a0,0x2b
    80001d4a:	5f250513          	addi	a0,a0,1522 # 8002d338 <__func__.0+0x318>
    80001d4e:	06c290ef          	jal	8002adba <printf>
    80001d52:	8626                	mv	a2,s1
    80001d54:	4681                	li	a3,0
    80001d56:	02d00593          	li	a1,45
    80001d5a:	0002c517          	auipc	a0,0x2c
    80001d5e:	a8650513          	addi	a0,a0,-1402 # 8002d7e0 <__func__.0+0x7c0>
    80001d62:	058290ef          	jal	8002adba <printf>
    80001d66:	02900513          	li	a0,41
    80001d6a:	53f270ef          	jal	80029aa8 <putchar>
    80001d6e:	4529                	li	a0,10
    80001d70:	539270ef          	jal	80029aa8 <putchar>
    80001d74:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001d76:	244024f3          	csrr	s1,vsip
    80001d7a:	0002c617          	auipc	a2,0x2c
    80001d7e:	a4e60613          	addi	a2,a2,-1458 # 8002d7c8 <__func__.0+0x7a8>
    80001d82:	08200593          	li	a1,130
    80001d86:	0002b517          	auipc	a0,0x2b
    80001d8a:	59250513          	addi	a0,a0,1426 # 8002d318 <__func__.0+0x2f8>
    80001d8e:	02c290ef          	jal	8002adba <printf>
    80001d92:	14048c63          	beqz	s1,80001eea <check_xip_regs_2+0x420>
    80001d96:	0002b597          	auipc	a1,0x2b
    80001d9a:	55a58593          	addi	a1,a1,1370 # 8002d2f0 <__func__.0+0x2d0>
    80001d9e:	0002b517          	auipc	a0,0x2b
    80001da2:	59250513          	addi	a0,a0,1426 # 8002d330 <__func__.0+0x310>
    80001da6:	014290ef          	jal	8002adba <printf>
    80001daa:	0002b517          	auipc	a0,0x2b
    80001dae:	58e50513          	addi	a0,a0,1422 # 8002d338 <__func__.0+0x318>
    80001db2:	008290ef          	jal	8002adba <printf>
    80001db6:	8626                	mv	a2,s1
    80001db8:	4681                	li	a3,0
    80001dba:	02d00593          	li	a1,45
    80001dbe:	0002c517          	auipc	a0,0x2c
    80001dc2:	a2250513          	addi	a0,a0,-1502 # 8002d7e0 <__func__.0+0x7c0>
    80001dc6:	7f5280ef          	jal	8002adba <printf>
    80001dca:	02900513          	li	a0,41
    80001dce:	4db270ef          	jal	80029aa8 <putchar>
    80001dd2:	4529                	li	a0,10
    80001dd4:	4d5270ef          	jal	80029aa8 <putchar>
    80001dd8:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80001dda:	4509                	li	a0,2
    80001ddc:	892ff0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001de0:	144024f3          	csrr	s1,sip
    80001de4:	0002c617          	auipc	a2,0x2c
    80001de8:	a1c60613          	addi	a2,a2,-1508 # 8002d800 <__func__.0+0x7e0>
    80001dec:	08200593          	li	a1,130
    80001df0:	0002b517          	auipc	a0,0x2b
    80001df4:	52850513          	addi	a0,a0,1320 # 8002d318 <__func__.0+0x2f8>
    80001df8:	7c3280ef          	jal	8002adba <printf>
    80001dfc:	10048563          	beqz	s1,80001f06 <check_xip_regs_2+0x43c>
    80001e00:	0002b597          	auipc	a1,0x2b
    80001e04:	4f058593          	addi	a1,a1,1264 # 8002d2f0 <__func__.0+0x2d0>
    80001e08:	0002b517          	auipc	a0,0x2b
    80001e0c:	52850513          	addi	a0,a0,1320 # 8002d330 <__func__.0+0x310>
    80001e10:	7ab280ef          	jal	8002adba <printf>
    80001e14:	0002b517          	auipc	a0,0x2b
    80001e18:	52450513          	addi	a0,a0,1316 # 8002d338 <__func__.0+0x318>
    80001e1c:	79f280ef          	jal	8002adba <printf>
    80001e20:	8626                	mv	a2,s1
    80001e22:	4681                	li	a3,0
    80001e24:	02d00593          	li	a1,45
    80001e28:	0002c517          	auipc	a0,0x2c
    80001e2c:	9b850513          	addi	a0,a0,-1608 # 8002d7e0 <__func__.0+0x7c0>
    80001e30:	78b280ef          	jal	8002adba <printf>
    80001e34:	02900513          	li	a0,41
    80001e38:	471270ef          	jal	80029aa8 <putchar>
    80001e3c:	4529                	li	a0,10
    80001e3e:	46b270ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);   
    80001e42:	4511                	li	a0,4
    80001e44:	82aff0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001e48:	4401                	li	s0,0

    TEST_END();
    80001e4a:	0002b597          	auipc	a1,0x2b
    80001e4e:	4a658593          	addi	a1,a1,1190 # 8002d2f0 <__func__.0+0x2d0>
    80001e52:	0002b517          	auipc	a0,0x2b
    80001e56:	54650513          	addi	a0,a0,1350 # 8002d398 <__func__.0+0x378>
    80001e5a:	761280ef          	jal	8002adba <printf>
    80001e5e:	4511                	li	a0,4
    80001e60:	80eff0ef          	jal	80000e6e <goto_priv>
    80001e64:	927ff0ef          	jal	8000178a <reset_state>
}
    80001e68:	60e2                	ld	ra,24(sp)
    80001e6a:	8522                	mv	a0,s0
    80001e6c:	6442                	ld	s0,16(sp)
    80001e6e:	64a2                	ld	s1,8(sp)
    80001e70:	6902                	ld	s2,0(sp)
    80001e72:	6105                	addi	sp,sp,32
    80001e74:	8082                	ret
    check_csr_rd("hip", CSR_HIP, 0x0);
    80001e76:	0002b597          	auipc	a1,0x2b
    80001e7a:	46a58593          	addi	a1,a1,1130 # 8002d2e0 <__func__.0+0x2c0>
    80001e7e:	0002b517          	auipc	a0,0x2b
    80001e82:	4b250513          	addi	a0,a0,1202 # 8002d330 <__func__.0+0x310>
    80001e86:	735280ef          	jal	8002adba <printf>
    80001e8a:	4529                	li	a0,10
    80001e8c:	41d270ef          	jal	80029aa8 <putchar>
    check_csr_rd("sip", sip, 0x0);
    80001e90:	144024f3          	csrr	s1,sip
    80001e94:	0002c617          	auipc	a2,0x2c
    80001e98:	96460613          	addi	a2,a2,-1692 # 8002d7f8 <__func__.0+0x7d8>
    80001e9c:	08200593          	li	a1,130
    80001ea0:	0002b517          	auipc	a0,0x2b
    80001ea4:	47850513          	addi	a0,a0,1144 # 8002d318 <__func__.0+0x2f8>
    80001ea8:	713280ef          	jal	8002adba <printf>
    80001eac:	e80493e3          	bnez	s1,80001d32 <check_xip_regs_2+0x268>
    80001eb0:	0002b597          	auipc	a1,0x2b
    80001eb4:	43058593          	addi	a1,a1,1072 # 8002d2e0 <__func__.0+0x2c0>
    80001eb8:	0002b517          	auipc	a0,0x2b
    80001ebc:	47850513          	addi	a0,a0,1144 # 8002d330 <__func__.0+0x310>
    80001ec0:	6fb280ef          	jal	8002adba <printf>
    80001ec4:	4529                	li	a0,10
    80001ec6:	3e3270ef          	jal	80029aa8 <putchar>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80001eca:	244024f3          	csrr	s1,vsip
    80001ece:	0002c617          	auipc	a2,0x2c
    80001ed2:	8fa60613          	addi	a2,a2,-1798 # 8002d7c8 <__func__.0+0x7a8>
    80001ed6:	08200593          	li	a1,130
    80001eda:	0002b517          	auipc	a0,0x2b
    80001ede:	43e50513          	addi	a0,a0,1086 # 8002d318 <__func__.0+0x2f8>
    80001ee2:	6d9280ef          	jal	8002adba <printf>
    80001ee6:	ea0498e3          	bnez	s1,80001d96 <check_xip_regs_2+0x2cc>
    80001eea:	0002b597          	auipc	a1,0x2b
    80001eee:	3f658593          	addi	a1,a1,1014 # 8002d2e0 <__func__.0+0x2c0>
    80001ef2:	0002b517          	auipc	a0,0x2b
    80001ef6:	43e50513          	addi	a0,a0,1086 # 8002d330 <__func__.0+0x310>
    80001efa:	6c1280ef          	jal	8002adba <printf>
    80001efe:	4529                	li	a0,10
    80001f00:	3a9270ef          	jal	80029aa8 <putchar>
    80001f04:	bdd9                	j	80001dda <check_xip_regs_2+0x310>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001f06:	0002b597          	auipc	a1,0x2b
    80001f0a:	3da58593          	addi	a1,a1,986 # 8002d2e0 <__func__.0+0x2c0>
    80001f0e:	0002b517          	auipc	a0,0x2b
    80001f12:	42250513          	addi	a0,a0,1058 # 8002d330 <__func__.0+0x310>
    80001f16:	6a5280ef          	jal	8002adba <printf>
    80001f1a:	4529                	li	a0,10
    80001f1c:	38d270ef          	jal	80029aa8 <putchar>
    80001f20:	f20401e3          	beqz	s0,80001e42 <check_xip_regs_2+0x378>
    goto_priv(PRIV_M);   
    80001f24:	4511                	li	a0,4
    80001f26:	f49fe0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80001f2a:	4405                	li	s0,1
    TEST_END();
    80001f2c:	0002b597          	auipc	a1,0x2b
    80001f30:	3b458593          	addi	a1,a1,948 # 8002d2e0 <__func__.0+0x2c0>
    80001f34:	bf39                	j	80001e52 <check_xip_regs_2+0x388>
    check_csr_rd("sip", sip, 0x222);    
    80001f36:	0002b597          	auipc	a1,0x2b
    80001f3a:	3aa58593          	addi	a1,a1,938 # 8002d2e0 <__func__.0+0x2c0>
    80001f3e:	0002b517          	auipc	a0,0x2b
    80001f42:	3f250513          	addi	a0,a0,1010 # 8002d330 <__func__.0+0x310>
    80001f46:	675280ef          	jal	8002adba <printf>
    80001f4a:	4529                	li	a0,10
    80001f4c:	35d270ef          	jal	80029aa8 <putchar>
    80001f50:	b149                	j	80001bd2 <check_xip_regs_2+0x108>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80001f52:	0002b597          	auipc	a1,0x2b
    80001f56:	38e58593          	addi	a1,a1,910 # 8002d2e0 <__func__.0+0x2c0>
    80001f5a:	0002b517          	auipc	a0,0x2b
    80001f5e:	3d650513          	addi	a0,a0,982 # 8002d330 <__func__.0+0x310>
    80001f62:	659280ef          	jal	8002adba <printf>
    80001f66:	4529                	li	a0,10
    80001f68:	341270ef          	jal	80029aa8 <putchar>
    80001f6c:	bb25                	j	80001ca4 <check_xip_regs_2+0x1da>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80001f6e:	0002b597          	auipc	a1,0x2b
    80001f72:	37258593          	addi	a1,a1,882 # 8002d2e0 <__func__.0+0x2c0>
    80001f76:	0002b517          	auipc	a0,0x2b
    80001f7a:	3ba50513          	addi	a0,a0,954 # 8002d330 <__func__.0+0x310>
    80001f7e:	63d280ef          	jal	8002adba <printf>
    80001f82:	4529                	li	a0,10
    80001f84:	325270ef          	jal	80029aa8 <putchar>
    80001f88:	b945                	j	80001c38 <check_xip_regs_2+0x16e>
    check_csr_rd("hip", CSR_HIP, 0x4);
    80001f8a:	0002b597          	auipc	a1,0x2b
    80001f8e:	35658593          	addi	a1,a1,854 # 8002d2e0 <__func__.0+0x2c0>
    80001f92:	0002b517          	auipc	a0,0x2b
    80001f96:	39e50513          	addi	a0,a0,926 # 8002d330 <__func__.0+0x310>
    80001f9a:	621280ef          	jal	8002adba <printf>
    80001f9e:	4529                	li	a0,10
    80001fa0:	309270ef          	jal	80029aa8 <putchar>
    80001fa4:	4405                	li	s0,1
    80001fa6:	b6d1                	j	80001b6a <check_xip_regs_2+0xa0>

0000000080001fa8 <check_xip_regs_3>:

bool check_xip_regs_3(){
    80001fa8:	1101                	addi	sp,sp,-32

    TEST_START();
    80001faa:	00029597          	auipc	a1,0x29
    80001fae:	36658593          	addi	a1,a1,870 # 8002b310 <__func__.1>
    80001fb2:	0002b517          	auipc	a0,0x2b
    80001fb6:	34e50513          	addi	a0,a0,846 # 8002d300 <__func__.0+0x2e0>
bool check_xip_regs_3(){
    80001fba:	ec06                	sd	ra,24(sp)
    80001fbc:	e822                	sd	s0,16(sp)
    80001fbe:	e426                	sd	s1,8(sp)
    80001fc0:	e04a                	sd	s2,0(sp)
    TEST_START();
    80001fc2:	5f9280ef          	jal	8002adba <printf>
    80001fc6:	4529                	li	a0,10
    80001fc8:	2e1270ef          	jal	80029aa8 <putchar>

    CSRW(mideleg, (uint64_t)-1);
    80001fcc:	57fd                	li	a5,-1
    80001fce:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80001fd2:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)-1);
    80001fd6:	64579073          	csrw	hvip,a5
    printf("hvip=%llx\n",CSRR(CSR_HVIP));
    80001fda:	645025f3          	csrr	a1,hvip
    80001fde:	0002c517          	auipc	a0,0x2c
    80001fe2:	83a50513          	addi	a0,a0,-1990 # 8002d818 <__func__.0+0x7f8>
    80001fe6:	5d5280ef          	jal	8002adba <printf>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    80001fea:	645024f3          	csrr	s1,hvip
    80001fee:	7479                	lui	s0,0xffffe
    80001ff0:	0002c617          	auipc	a2,0x2c
    80001ff4:	83860613          	addi	a2,a2,-1992 # 8002d828 <__func__.0+0x808>
    80001ff8:	08200593          	li	a1,130
    80001ffc:	0002b517          	auipc	a0,0x2b
    80002000:	31c50513          	addi	a0,a0,796 # 8002d318 <__func__.0+0x2f8>
    80002004:	44440413          	addi	s0,s0,1092 # ffffffffffffe444 <__stack_top+0xffffffff7fcff444>
    80002008:	5b3280ef          	jal	8002adba <printf>
    8000200c:	4a848663          	beq	s1,s0,800024b8 <check_xip_regs_3+0x510>
    80002010:	0002b597          	auipc	a1,0x2b
    80002014:	2e058593          	addi	a1,a1,736 # 8002d2f0 <__func__.0+0x2d0>
    80002018:	0002b517          	auipc	a0,0x2b
    8000201c:	31850513          	addi	a0,a0,792 # 8002d330 <__func__.0+0x310>
    80002020:	59b280ef          	jal	8002adba <printf>
    80002024:	0002b517          	auipc	a0,0x2b
    80002028:	31450513          	addi	a0,a0,788 # 8002d338 <__func__.0+0x318>
    8000202c:	58f280ef          	jal	8002adba <printf>
    80002030:	86a2                	mv	a3,s0
    80002032:	8626                	mv	a2,s1
    80002034:	02d00593          	li	a1,45
    80002038:	0002b517          	auipc	a0,0x2b
    8000203c:	7a850513          	addi	a0,a0,1960 # 8002d7e0 <__func__.0+0x7c0>
    80002040:	57b280ef          	jal	8002adba <printf>
    80002044:	02900513          	li	a0,41
    80002048:	261270ef          	jal	80029aa8 <putchar>
    8000204c:	4529                	li	a0,10
    8000204e:	25b270ef          	jal	80029aa8 <putchar>
    80002052:	4401                	li	s0,0
    check_csr_rd("hip", CSR_HIP, 0x444);
    80002054:	644024f3          	csrr	s1,hip
    80002058:	0002b617          	auipc	a2,0x2b
    8000205c:	78060613          	addi	a2,a2,1920 # 8002d7d8 <__func__.0+0x7b8>
    80002060:	08200593          	li	a1,130
    80002064:	0002b517          	auipc	a0,0x2b
    80002068:	2b450513          	addi	a0,a0,692 # 8002d318 <__func__.0+0x2f8>
    8000206c:	44400913          	li	s2,1092
    80002070:	54b280ef          	jal	8002adba <printf>
    80002074:	3f248863          	beq	s1,s2,80002464 <check_xip_regs_3+0x4bc>
    80002078:	0002b597          	auipc	a1,0x2b
    8000207c:	27858593          	addi	a1,a1,632 # 8002d2f0 <__func__.0+0x2d0>
    80002080:	0002b517          	auipc	a0,0x2b
    80002084:	2b050513          	addi	a0,a0,688 # 8002d330 <__func__.0+0x310>
    80002088:	533280ef          	jal	8002adba <printf>
    8000208c:	0002b517          	auipc	a0,0x2b
    80002090:	2ac50513          	addi	a0,a0,684 # 8002d338 <__func__.0+0x318>
    80002094:	527280ef          	jal	8002adba <printf>
    80002098:	86ca                	mv	a3,s2
    8000209a:	8626                	mv	a2,s1
    8000209c:	02d00593          	li	a1,45
    800020a0:	0002b517          	auipc	a0,0x2b
    800020a4:	74050513          	addi	a0,a0,1856 # 8002d7e0 <__func__.0+0x7c0>
    800020a8:	513280ef          	jal	8002adba <printf>
    800020ac:	02900513          	li	a0,41
    800020b0:	1f9270ef          	jal	80029aa8 <putchar>
    800020b4:	4529                	li	a0,10
    800020b6:	1f3270ef          	jal	80029aa8 <putchar>
    800020ba:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    800020bc:	144024f3          	csrr	s1,sip
    800020c0:	0002b617          	auipc	a2,0x2b
    800020c4:	73860613          	addi	a2,a2,1848 # 8002d7f8 <__func__.0+0x7d8>
    800020c8:	08200593          	li	a1,130
    800020cc:	0002b517          	auipc	a0,0x2b
    800020d0:	24c50513          	addi	a0,a0,588 # 8002d318 <__func__.0+0x2f8>
    800020d4:	4e7280ef          	jal	8002adba <printf>
    800020d8:	2e048763          	beqz	s1,800023c6 <check_xip_regs_3+0x41e>
    800020dc:	0002b597          	auipc	a1,0x2b
    800020e0:	21458593          	addi	a1,a1,532 # 8002d2f0 <__func__.0+0x2d0>
    800020e4:	0002b517          	auipc	a0,0x2b
    800020e8:	24c50513          	addi	a0,a0,588 # 8002d330 <__func__.0+0x310>
    800020ec:	4cf280ef          	jal	8002adba <printf>
    800020f0:	0002b517          	auipc	a0,0x2b
    800020f4:	24850513          	addi	a0,a0,584 # 8002d338 <__func__.0+0x318>
    800020f8:	4c3280ef          	jal	8002adba <printf>
    800020fc:	8626                	mv	a2,s1
    800020fe:	4681                	li	a3,0
    80002100:	02d00593          	li	a1,45
    80002104:	0002b517          	auipc	a0,0x2b
    80002108:	6dc50513          	addi	a0,a0,1756 # 8002d7e0 <__func__.0+0x7c0>
    8000210c:	4af280ef          	jal	8002adba <printf>
    80002110:	02900513          	li	a0,41
    80002114:	195270ef          	jal	80029aa8 <putchar>
    80002118:	4529                	li	a0,10
    8000211a:	18f270ef          	jal	80029aa8 <putchar>
    8000211e:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x444, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    80002120:	244024f3          	csrr	s1,vsip
    80002124:	0002b617          	auipc	a2,0x2b
    80002128:	6a460613          	addi	a2,a2,1700 # 8002d7c8 <__func__.0+0x7a8>
    8000212c:	08200593          	li	a1,130
    80002130:	0002b517          	auipc	a0,0x2b
    80002134:	1e850513          	addi	a0,a0,488 # 8002d318 <__func__.0+0x2f8>
    80002138:	22200913          	li	s2,546
    8000213c:	47f280ef          	jal	8002adba <printf>
    80002140:	35248e63          	beq	s1,s2,8000249c <check_xip_regs_3+0x4f4>
    80002144:	0002b597          	auipc	a1,0x2b
    80002148:	1ac58593          	addi	a1,a1,428 # 8002d2f0 <__func__.0+0x2d0>
    8000214c:	0002b517          	auipc	a0,0x2b
    80002150:	1e450513          	addi	a0,a0,484 # 8002d330 <__func__.0+0x310>
    80002154:	467280ef          	jal	8002adba <printf>
    80002158:	0002b517          	auipc	a0,0x2b
    8000215c:	1e050513          	addi	a0,a0,480 # 8002d338 <__func__.0+0x318>
    80002160:	45b280ef          	jal	8002adba <printf>
    80002164:	86ca                	mv	a3,s2
    80002166:	8626                	mv	a2,s1
    80002168:	02d00593          	li	a1,45
    8000216c:	0002b517          	auipc	a0,0x2b
    80002170:	67450513          	addi	a0,a0,1652 # 8002d7e0 <__func__.0+0x7c0>
    80002174:	447280ef          	jal	8002adba <printf>
    80002178:	02900513          	li	a0,41
    8000217c:	12d270ef          	jal	80029aa8 <putchar>
    80002180:	4529                	li	a0,10
    80002182:	127270ef          	jal	80029aa8 <putchar>
    80002186:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80002188:	4509                	li	a0,2
    8000218a:	ce5fe0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    8000218e:	144024f3          	csrr	s1,sip
    80002192:	0002b617          	auipc	a2,0x2b
    80002196:	66e60613          	addi	a2,a2,1646 # 8002d800 <__func__.0+0x7e0>
    8000219a:	08200593          	li	a1,130
    8000219e:	0002b517          	auipc	a0,0x2b
    800021a2:	17a50513          	addi	a0,a0,378 # 8002d318 <__func__.0+0x2f8>
    800021a6:	22200913          	li	s2,546
    800021aa:	411280ef          	jal	8002adba <printf>
    800021ae:	2d248963          	beq	s1,s2,80002480 <check_xip_regs_3+0x4d8>
    800021b2:	0002b597          	auipc	a1,0x2b
    800021b6:	13e58593          	addi	a1,a1,318 # 8002d2f0 <__func__.0+0x2d0>
    800021ba:	0002b517          	auipc	a0,0x2b
    800021be:	17650513          	addi	a0,a0,374 # 8002d330 <__func__.0+0x310>
    800021c2:	3f9280ef          	jal	8002adba <printf>
    800021c6:	0002b517          	auipc	a0,0x2b
    800021ca:	17250513          	addi	a0,a0,370 # 8002d338 <__func__.0+0x318>
    800021ce:	3ed280ef          	jal	8002adba <printf>
    800021d2:	86ca                	mv	a3,s2
    800021d4:	8626                	mv	a2,s1
    800021d6:	02d00593          	li	a1,45
    800021da:	0002b517          	auipc	a0,0x2b
    800021de:	60650513          	addi	a0,a0,1542 # 8002d7e0 <__func__.0+0x7c0>
    800021e2:	3d9280ef          	jal	8002adba <printf>
    800021e6:	02900513          	li	a0,41
    800021ea:	0bf270ef          	jal	80029aa8 <putchar>
    800021ee:	4529                	li	a0,10
    800021f0:	0b9270ef          	jal	80029aa8 <putchar>
    800021f4:	4401                	li	s0,0
    goto_priv(PRIV_M);
    800021f6:	4511                	li	a0,4
    800021f8:	c77fe0ef          	jal	80000e6e <goto_priv>

    VERBOSE("clearing all in hvip\n");
    CSRW(CSR_HVIP, (uint64_t)0);
    800021fc:	64505073          	csrwi	hvip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80002200:	644024f3          	csrr	s1,hip
    80002204:	0002b617          	auipc	a2,0x2b
    80002208:	5d460613          	addi	a2,a2,1492 # 8002d7d8 <__func__.0+0x7b8>
    8000220c:	08200593          	li	a1,130
    80002210:	0002b517          	auipc	a0,0x2b
    80002214:	10850513          	addi	a0,a0,264 # 8002d318 <__func__.0+0x2f8>
    80002218:	3a3280ef          	jal	8002adba <printf>
    8000221c:	22048663          	beqz	s1,80002448 <check_xip_regs_3+0x4a0>
    80002220:	0002b597          	auipc	a1,0x2b
    80002224:	0d058593          	addi	a1,a1,208 # 8002d2f0 <__func__.0+0x2d0>
    80002228:	0002b517          	auipc	a0,0x2b
    8000222c:	10850513          	addi	a0,a0,264 # 8002d330 <__func__.0+0x310>
    80002230:	38b280ef          	jal	8002adba <printf>
    80002234:	0002b517          	auipc	a0,0x2b
    80002238:	10450513          	addi	a0,a0,260 # 8002d338 <__func__.0+0x318>
    8000223c:	37f280ef          	jal	8002adba <printf>
    80002240:	8626                	mv	a2,s1
    80002242:	4681                	li	a3,0
    80002244:	02d00593          	li	a1,45
    80002248:	0002b517          	auipc	a0,0x2b
    8000224c:	59850513          	addi	a0,a0,1432 # 8002d7e0 <__func__.0+0x7c0>
    80002250:	36b280ef          	jal	8002adba <printf>
    80002254:	02900513          	li	a0,41
    80002258:	051270ef          	jal	80029aa8 <putchar>
    8000225c:	4529                	li	a0,10
    8000225e:	04b270ef          	jal	80029aa8 <putchar>
    80002262:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    80002264:	144024f3          	csrr	s1,sip
    80002268:	0002b617          	auipc	a2,0x2b
    8000226c:	59060613          	addi	a2,a2,1424 # 8002d7f8 <__func__.0+0x7d8>
    80002270:	08200593          	li	a1,130
    80002274:	0002b517          	auipc	a0,0x2b
    80002278:	0a450513          	addi	a0,a0,164 # 8002d318 <__func__.0+0x2f8>
    8000227c:	33f280ef          	jal	8002adba <printf>
    80002280:	1a048663          	beqz	s1,8000242c <check_xip_regs_3+0x484>
    80002284:	0002b597          	auipc	a1,0x2b
    80002288:	06c58593          	addi	a1,a1,108 # 8002d2f0 <__func__.0+0x2d0>
    8000228c:	0002b517          	auipc	a0,0x2b
    80002290:	0a450513          	addi	a0,a0,164 # 8002d330 <__func__.0+0x310>
    80002294:	327280ef          	jal	8002adba <printf>
    80002298:	0002b517          	auipc	a0,0x2b
    8000229c:	0a050513          	addi	a0,a0,160 # 8002d338 <__func__.0+0x318>
    800022a0:	31b280ef          	jal	8002adba <printf>
    800022a4:	8626                	mv	a2,s1
    800022a6:	4681                	li	a3,0
    800022a8:	02d00593          	li	a1,45
    800022ac:	0002b517          	auipc	a0,0x2b
    800022b0:	53450513          	addi	a0,a0,1332 # 8002d7e0 <__func__.0+0x7c0>
    800022b4:	307280ef          	jal	8002adba <printf>
    800022b8:	02900513          	li	a0,41
    800022bc:	7ec270ef          	jal	80029aa8 <putchar>
    800022c0:	4529                	li	a0,10
    800022c2:	7e6270ef          	jal	80029aa8 <putchar>
    800022c6:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800022c8:	244024f3          	csrr	s1,vsip
    800022cc:	0002b617          	auipc	a2,0x2b
    800022d0:	4fc60613          	addi	a2,a2,1276 # 8002d7c8 <__func__.0+0x7a8>
    800022d4:	08200593          	li	a1,130
    800022d8:	0002b517          	auipc	a0,0x2b
    800022dc:	04050513          	addi	a0,a0,64 # 8002d318 <__func__.0+0x2f8>
    800022e0:	2db280ef          	jal	8002adba <printf>
    800022e4:	12048663          	beqz	s1,80002410 <check_xip_regs_3+0x468>
    800022e8:	0002b597          	auipc	a1,0x2b
    800022ec:	00858593          	addi	a1,a1,8 # 8002d2f0 <__func__.0+0x2d0>
    800022f0:	0002b517          	auipc	a0,0x2b
    800022f4:	04050513          	addi	a0,a0,64 # 8002d330 <__func__.0+0x310>
    800022f8:	2c3280ef          	jal	8002adba <printf>
    800022fc:	0002b517          	auipc	a0,0x2b
    80002300:	03c50513          	addi	a0,a0,60 # 8002d338 <__func__.0+0x318>
    80002304:	2b7280ef          	jal	8002adba <printf>
    80002308:	8626                	mv	a2,s1
    8000230a:	4681                	li	a3,0
    8000230c:	02d00593          	li	a1,45
    80002310:	0002b517          	auipc	a0,0x2b
    80002314:	4d050513          	addi	a0,a0,1232 # 8002d7e0 <__func__.0+0x7c0>
    80002318:	2a3280ef          	jal	8002adba <printf>
    8000231c:	02900513          	li	a0,41
    80002320:	788270ef          	jal	80029aa8 <putchar>
    80002324:	4529                	li	a0,10
    80002326:	782270ef          	jal	80029aa8 <putchar>
    8000232a:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    8000232c:	4509                	li	a0,2
    8000232e:	b41fe0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002332:	144024f3          	csrr	s1,sip
    80002336:	0002b617          	auipc	a2,0x2b
    8000233a:	4ca60613          	addi	a2,a2,1226 # 8002d800 <__func__.0+0x7e0>
    8000233e:	08200593          	li	a1,130
    80002342:	0002b517          	auipc	a0,0x2b
    80002346:	fd650513          	addi	a0,a0,-42 # 8002d318 <__func__.0+0x2f8>
    8000234a:	271280ef          	jal	8002adba <printf>
    8000234e:	c8d1                	beqz	s1,800023e2 <check_xip_regs_3+0x43a>
    80002350:	0002b597          	auipc	a1,0x2b
    80002354:	fa058593          	addi	a1,a1,-96 # 8002d2f0 <__func__.0+0x2d0>
    80002358:	0002b517          	auipc	a0,0x2b
    8000235c:	fd850513          	addi	a0,a0,-40 # 8002d330 <__func__.0+0x310>
    80002360:	25b280ef          	jal	8002adba <printf>
    80002364:	0002b517          	auipc	a0,0x2b
    80002368:	fd450513          	addi	a0,a0,-44 # 8002d338 <__func__.0+0x318>
    8000236c:	24f280ef          	jal	8002adba <printf>
    80002370:	8626                	mv	a2,s1
    80002372:	4681                	li	a3,0
    80002374:	02d00593          	li	a1,45
    80002378:	0002b517          	auipc	a0,0x2b
    8000237c:	46850513          	addi	a0,a0,1128 # 8002d7e0 <__func__.0+0x7c0>
    80002380:	23b280ef          	jal	8002adba <printf>
    80002384:	02900513          	li	a0,41
    80002388:	720270ef          	jal	80029aa8 <putchar>
    8000238c:	4529                	li	a0,10
    8000238e:	71a270ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    80002392:	4511                	li	a0,4
    80002394:	adbfe0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002398:	4401                	li	s0,0

    TEST_END();
    8000239a:	0002b597          	auipc	a1,0x2b
    8000239e:	f5658593          	addi	a1,a1,-170 # 8002d2f0 <__func__.0+0x2d0>
    800023a2:	0002b517          	auipc	a0,0x2b
    800023a6:	ff650513          	addi	a0,a0,-10 # 8002d398 <__func__.0+0x378>
    800023aa:	211280ef          	jal	8002adba <printf>
    800023ae:	4511                	li	a0,4
    800023b0:	abffe0ef          	jal	80000e6e <goto_priv>
    800023b4:	bd6ff0ef          	jal	8000178a <reset_state>
}
    800023b8:	60e2                	ld	ra,24(sp)
    800023ba:	8522                	mv	a0,s0
    800023bc:	6442                	ld	s0,16(sp)
    800023be:	64a2                	ld	s1,8(sp)
    800023c0:	6902                	ld	s2,0(sp)
    800023c2:	6105                	addi	sp,sp,32
    800023c4:	8082                	ret
    check_csr_rd("sip", sip, 0x0);
    800023c6:	0002b597          	auipc	a1,0x2b
    800023ca:	f1a58593          	addi	a1,a1,-230 # 8002d2e0 <__func__.0+0x2c0>
    800023ce:	0002b517          	auipc	a0,0x2b
    800023d2:	f6250513          	addi	a0,a0,-158 # 8002d330 <__func__.0+0x310>
    800023d6:	1e5280ef          	jal	8002adba <printf>
    800023da:	4529                	li	a0,10
    800023dc:	6cc270ef          	jal	80029aa8 <putchar>
    800023e0:	b381                	j	80002120 <check_xip_regs_3+0x178>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800023e2:	0002b597          	auipc	a1,0x2b
    800023e6:	efe58593          	addi	a1,a1,-258 # 8002d2e0 <__func__.0+0x2c0>
    800023ea:	0002b517          	auipc	a0,0x2b
    800023ee:	f4650513          	addi	a0,a0,-186 # 8002d330 <__func__.0+0x310>
    800023f2:	1c9280ef          	jal	8002adba <printf>
    800023f6:	4529                	li	a0,10
    800023f8:	6b0270ef          	jal	80029aa8 <putchar>
    800023fc:	d859                	beqz	s0,80002392 <check_xip_regs_3+0x3ea>
    goto_priv(PRIV_M);
    800023fe:	4511                	li	a0,4
    80002400:	a6ffe0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80002404:	4405                	li	s0,1
    TEST_END();
    80002406:	0002b597          	auipc	a1,0x2b
    8000240a:	eda58593          	addi	a1,a1,-294 # 8002d2e0 <__func__.0+0x2c0>
    8000240e:	bf51                	j	800023a2 <check_xip_regs_3+0x3fa>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    80002410:	0002b597          	auipc	a1,0x2b
    80002414:	ed058593          	addi	a1,a1,-304 # 8002d2e0 <__func__.0+0x2c0>
    80002418:	0002b517          	auipc	a0,0x2b
    8000241c:	f1850513          	addi	a0,a0,-232 # 8002d330 <__func__.0+0x310>
    80002420:	19b280ef          	jal	8002adba <printf>
    80002424:	4529                	li	a0,10
    80002426:	682270ef          	jal	80029aa8 <putchar>
    8000242a:	b709                	j	8000232c <check_xip_regs_3+0x384>
    check_csr_rd("sip", sip, 0x0);
    8000242c:	0002b597          	auipc	a1,0x2b
    80002430:	eb458593          	addi	a1,a1,-332 # 8002d2e0 <__func__.0+0x2c0>
    80002434:	0002b517          	auipc	a0,0x2b
    80002438:	efc50513          	addi	a0,a0,-260 # 8002d330 <__func__.0+0x310>
    8000243c:	17f280ef          	jal	8002adba <printf>
    80002440:	4529                	li	a0,10
    80002442:	666270ef          	jal	80029aa8 <putchar>
    80002446:	b549                	j	800022c8 <check_xip_regs_3+0x320>
    check_csr_rd("hip", CSR_HIP, 0x0);
    80002448:	0002b597          	auipc	a1,0x2b
    8000244c:	e9858593          	addi	a1,a1,-360 # 8002d2e0 <__func__.0+0x2c0>
    80002450:	0002b517          	auipc	a0,0x2b
    80002454:	ee050513          	addi	a0,a0,-288 # 8002d330 <__func__.0+0x310>
    80002458:	163280ef          	jal	8002adba <printf>
    8000245c:	4529                	li	a0,10
    8000245e:	64a270ef          	jal	80029aa8 <putchar>
    80002462:	b509                	j	80002264 <check_xip_regs_3+0x2bc>
    check_csr_rd("hip", CSR_HIP, 0x444);
    80002464:	0002b597          	auipc	a1,0x2b
    80002468:	e7c58593          	addi	a1,a1,-388 # 8002d2e0 <__func__.0+0x2c0>
    8000246c:	0002b517          	auipc	a0,0x2b
    80002470:	ec450513          	addi	a0,a0,-316 # 8002d330 <__func__.0+0x310>
    80002474:	147280ef          	jal	8002adba <printf>
    80002478:	4529                	li	a0,10
    8000247a:	62e270ef          	jal	80029aa8 <putchar>
    8000247e:	b93d                	j	800020bc <check_xip_regs_3+0x114>
    check_csr_rd("sip (vs perspective)", sip, 0x222);
    80002480:	0002b597          	auipc	a1,0x2b
    80002484:	e6058593          	addi	a1,a1,-416 # 8002d2e0 <__func__.0+0x2c0>
    80002488:	0002b517          	auipc	a0,0x2b
    8000248c:	ea850513          	addi	a0,a0,-344 # 8002d330 <__func__.0+0x310>
    80002490:	12b280ef          	jal	8002adba <printf>
    80002494:	4529                	li	a0,10
    80002496:	612270ef          	jal	80029aa8 <putchar>
    8000249a:	bbb1                	j	800021f6 <check_xip_regs_3+0x24e>
    check_csr_rd("vsip", CSR_VSIP, 0x222);
    8000249c:	0002b597          	auipc	a1,0x2b
    800024a0:	e4458593          	addi	a1,a1,-444 # 8002d2e0 <__func__.0+0x2c0>
    800024a4:	0002b517          	auipc	a0,0x2b
    800024a8:	e8c50513          	addi	a0,a0,-372 # 8002d330 <__func__.0+0x310>
    800024ac:	10f280ef          	jal	8002adba <printf>
    800024b0:	4529                	li	a0,10
    800024b2:	5f6270ef          	jal	80029aa8 <putchar>
    800024b6:	b9c9                	j	80002188 <check_xip_regs_3+0x1e0>
    check_csr_rd("hvip", CSR_HVIP, 0xffffffffffffe444);
    800024b8:	0002b597          	auipc	a1,0x2b
    800024bc:	e2858593          	addi	a1,a1,-472 # 8002d2e0 <__func__.0+0x2c0>
    800024c0:	0002b517          	auipc	a0,0x2b
    800024c4:	e7050513          	addi	a0,a0,-400 # 8002d330 <__func__.0+0x310>
    800024c8:	0f3280ef          	jal	8002adba <printf>
    800024cc:	4529                	li	a0,10
    800024ce:	5da270ef          	jal	80029aa8 <putchar>
    800024d2:	4405                	li	s0,1
    800024d4:	b641                	j	80002054 <check_xip_regs_3+0xac>

00000000800024d6 <interrupt_tests>:

bool interrupt_tests(){
    800024d6:	1101                	addi	sp,sp,-32

    TEST_START();
    800024d8:	00029597          	auipc	a1,0x29
    800024dc:	e5058593          	addi	a1,a1,-432 # 8002b328 <__func__.0>
    800024e0:	0002b517          	auipc	a0,0x2b
    800024e4:	e2050513          	addi	a0,a0,-480 # 8002d300 <__func__.0+0x2e0>
bool interrupt_tests(){
    800024e8:	ec06                	sd	ra,24(sp)
    800024ea:	e822                	sd	s0,16(sp)
    800024ec:	e426                	sd	s1,8(sp)
    TEST_START();
    800024ee:	0cd280ef          	jal	8002adba <printf>
    800024f2:	4529                	li	a0,10
    800024f4:	5b4270ef          	jal	80029aa8 <putchar>
    /**
     * Test trigerring VSSI without delegating it. 
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    
    goto_priv(PRIV_HS);
    800024f8:	450d                	li	a0,3
    800024fa:	975fe0ef          	jal	80000e6e <goto_priv>
    CSRC(sstatus, SSTATUS_SPIE_BIT | SSTATUS_SIE_BIT); 
    800024fe:	02200793          	li	a5,34
    80002502:	1007b073          	csrc	sstatus,a5
    CSRS(CSR_HIE, 0x4);
    80002506:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0x4);
    8000250a:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    8000250e:	865fe0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_VS);
    80002512:	4509                	li	a0,2
    80002514:	95bfe0ef          	jal	80000e6e <goto_priv>
    //CSRS(sstatus, SSTATUS_SIE_BIT);
    TEST_ASSERT("vs sw irq with no delegation", 
    80002518:	08200593          	li	a1,130
    8000251c:	0002b617          	auipc	a2,0x2b
    80002520:	31460613          	addi	a2,a2,788 # 8002d830 <__func__.0+0x810>
    80002524:	0002b517          	auipc	a0,0x2b
    80002528:	df450513          	addi	a0,a0,-524 # 8002d318 <__func__.0+0x2f8>
    8000252c:	08f280ef          	jal	8002adba <printf>
    80002530:	0004f797          	auipc	a5,0x4f
    80002534:	ae17c783          	lbu	a5,-1311(a5) # 80051011 <excpt+0x1>
    80002538:	0004f417          	auipc	s0,0x4f
    8000253c:	ad840413          	addi	s0,s0,-1320 # 80051010 <excpt>
    80002540:	0002b597          	auipc	a1,0x2b
    80002544:	db058593          	addi	a1,a1,-592 # 8002d2f0 <__func__.0+0x2d0>
    80002548:	c799                	beqz	a5,80002556 <interrupt_tests+0x80>
    8000254a:	57fd                	li	a5,-1
    8000254c:	6418                	ld	a4,8(s0)
    8000254e:	17fe                	slli	a5,a5,0x3f
    80002550:	0789                	addi	a5,a5,2
    80002552:	16f70863          	beq	a4,a5,800026c2 <interrupt_tests+0x1ec>
    80002556:	0002b517          	auipc	a0,0x2b
    8000255a:	dda50513          	addi	a0,a0,-550 # 8002d330 <__func__.0+0x310>
    8000255e:	05d280ef          	jal	8002adba <printf>
    80002562:	0004f797          	auipc	a5,0x4f
    80002566:	aaf7c783          	lbu	a5,-1361(a5) # 80051011 <excpt+0x1>
    8000256a:	c799                	beqz	a5,80002578 <interrupt_tests+0xa2>
    8000256c:	57fd                	li	a5,-1
    8000256e:	6418                	ld	a4,8(s0)
    80002570:	17fe                	slli	a5,a5,0x3f
    80002572:	0789                	addi	a5,a5,2
    80002574:	12f70f63          	beq	a4,a5,800026b2 <interrupt_tests+0x1dc>
    80002578:	0002b517          	auipc	a0,0x2b
    8000257c:	dc050513          	addi	a0,a0,-576 # 8002d338 <__func__.0+0x318>
    80002580:	03b280ef          	jal	8002adba <printf>
    80002584:	02900513          	li	a0,41
    80002588:	520270ef          	jal	80029aa8 <putchar>
    8000258c:	4529                	li	a0,10
    8000258e:	51a270ef          	jal	80029aa8 <putchar>
    80002592:	0004f797          	auipc	a5,0x4f
    80002596:	a7f7c783          	lbu	a5,-1409(a5) # 80051011 <excpt+0x1>
    8000259a:	4481                	li	s1,0
    8000259c:	c799                	beqz	a5,800025aa <interrupt_tests+0xd4>
    8000259e:	57fd                	li	a5,-1
    800025a0:	6418                	ld	a4,8(s0)
    800025a2:	17fe                	slli	a5,a5,0x3f
    800025a4:	0789                	addi	a5,a5,2
    800025a6:	12f70e63          	beq	a4,a5,800026e2 <interrupt_tests+0x20c>
   
    /**
     * Test trigerring VSSI and delegating it. Should trap to VS with cause SSI.
     * It assumes it is already delegated in miedeleg (it should be hardwired)
     */
    goto_priv(PRIV_HS);
    800025aa:	450d                	li	a0,3
    800025ac:	8c3fe0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HIDELEG, 0x4);
    800025b0:	60326073          	csrsi	hideleg,4
    CSRS(CSR_HIP, 0x4);
    800025b4:	64426073          	csrsi	hip,4
    TEST_SETUP_EXCEPT();
    800025b8:	fbafe0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_VS);
    800025bc:	4509                	li	a0,2
    800025be:	8b1fe0ef          	jal	80000e6e <goto_priv>
    CSRS(sie, 0x2);
    800025c2:	10416073          	csrsi	sie,2
    CSRS(sstatus, 0x2);
    800025c6:	10016073          	csrsi	sstatus,2
    TEST_ASSERT("vs sw irq with delegation", 
    800025ca:	08200593          	li	a1,130
    800025ce:	0002b617          	auipc	a2,0x2b
    800025d2:	28260613          	addi	a2,a2,642 # 8002d850 <__func__.0+0x830>
    800025d6:	0002b517          	auipc	a0,0x2b
    800025da:	d4250513          	addi	a0,a0,-702 # 8002d318 <__func__.0+0x2f8>
    800025de:	7dc280ef          	jal	8002adba <printf>
    800025e2:	0004f797          	auipc	a5,0x4f
    800025e6:	a2f7c783          	lbu	a5,-1489(a5) # 80051011 <excpt+0x1>
    800025ea:	0002b597          	auipc	a1,0x2b
    800025ee:	d0658593          	addi	a1,a1,-762 # 8002d2f0 <__func__.0+0x2d0>
    800025f2:	c799                	beqz	a5,80002600 <interrupt_tests+0x12a>
    800025f4:	57fd                	li	a5,-1
    800025f6:	6418                	ld	a4,8(s0)
    800025f8:	17fe                	slli	a5,a5,0x3f
    800025fa:	0785                	addi	a5,a5,1
    800025fc:	0ef70b63          	beq	a4,a5,800026f2 <interrupt_tests+0x21c>
    80002600:	0002b517          	auipc	a0,0x2b
    80002604:	d3050513          	addi	a0,a0,-720 # 8002d330 <__func__.0+0x310>
    80002608:	7b2280ef          	jal	8002adba <printf>
    8000260c:	0004f797          	auipc	a5,0x4f
    80002610:	a057c783          	lbu	a5,-1531(a5) # 80051011 <excpt+0x1>
    80002614:	c799                	beqz	a5,80002622 <interrupt_tests+0x14c>
    80002616:	57fd                	li	a5,-1
    80002618:	6418                	ld	a4,8(s0)
    8000261a:	17fe                	slli	a5,a5,0x3f
    8000261c:	0785                	addi	a5,a5,1
    8000261e:	08f70263          	beq	a4,a5,800026a2 <interrupt_tests+0x1cc>
    80002622:	0002b517          	auipc	a0,0x2b
    80002626:	d1650513          	addi	a0,a0,-746 # 8002d338 <__func__.0+0x318>
    8000262a:	790280ef          	jal	8002adba <printf>
    8000262e:	02900513          	li	a0,41
    80002632:	476270ef          	jal	80029aa8 <putchar>
    80002636:	4529                	li	a0,10
    80002638:	470270ef          	jal	80029aa8 <putchar>
    8000263c:	cca9                	beqz	s1,80002696 <interrupt_tests+0x1c0>
    8000263e:	0004f497          	auipc	s1,0x4f
    80002642:	9d34c483          	lbu	s1,-1581(s1) # 80051011 <excpt+0x1>


    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    

    TEST_END();
    80002646:	0002b597          	auipc	a1,0x2b
    8000264a:	caa58593          	addi	a1,a1,-854 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs sw irq with delegation", 
    8000264e:	c881                	beqz	s1,8000265e <interrupt_tests+0x188>
    80002650:	57fd                	li	a5,-1
    80002652:	6418                	ld	a4,8(s0)
    80002654:	17fe                	slli	a5,a5,0x3f
    80002656:	0785                	addi	a5,a5,1
    80002658:	02f70463          	beq	a4,a5,80002680 <interrupt_tests+0x1aa>
    8000265c:	4481                	li	s1,0
    TEST_END();
    8000265e:	0002b517          	auipc	a0,0x2b
    80002662:	d3a50513          	addi	a0,a0,-710 # 8002d398 <__func__.0+0x378>
    80002666:	754280ef          	jal	8002adba <printf>
    8000266a:	4511                	li	a0,4
    8000266c:	803fe0ef          	jal	80000e6e <goto_priv>
    80002670:	91aff0ef          	jal	8000178a <reset_state>
}
    80002674:	60e2                	ld	ra,24(sp)
    80002676:	6442                	ld	s0,16(sp)
    80002678:	8526                	mv	a0,s1
    8000267a:	64a2                	ld	s1,8(sp)
    8000267c:	6105                	addi	sp,sp,32
    8000267e:	8082                	ret
    TEST_ASSERT("vs sw irq with delegation", 
    80002680:	0004f717          	auipc	a4,0x4f
    80002684:	99472703          	lw	a4,-1644(a4) # 80051014 <excpt+0x4>
    80002688:	4789                	li	a5,2
    TEST_END();
    8000268a:	0002b597          	auipc	a1,0x2b
    8000268e:	c5658593          	addi	a1,a1,-938 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs sw irq with delegation", 
    80002692:	fcf706e3          	beq	a4,a5,8000265e <interrupt_tests+0x188>
    80002696:	4481                	li	s1,0
    TEST_END();
    80002698:	0002b597          	auipc	a1,0x2b
    8000269c:	c5858593          	addi	a1,a1,-936 # 8002d2f0 <__func__.0+0x2d0>
    800026a0:	bf7d                	j	8000265e <interrupt_tests+0x188>
    TEST_ASSERT("vs sw irq with delegation", 
    800026a2:	0004f717          	auipc	a4,0x4f
    800026a6:	97272703          	lw	a4,-1678(a4) # 80051014 <excpt+0x4>
    800026aa:	4789                	li	a5,2
    800026ac:	f6f71be3          	bne	a4,a5,80002622 <interrupt_tests+0x14c>
    800026b0:	b759                	j	80002636 <interrupt_tests+0x160>
    TEST_ASSERT("vs sw irq with no delegation", 
    800026b2:	0004f717          	auipc	a4,0x4f
    800026b6:	96272703          	lw	a4,-1694(a4) # 80051014 <excpt+0x4>
    800026ba:	478d                	li	a5,3
    800026bc:	eaf71ee3          	bne	a4,a5,80002578 <interrupt_tests+0xa2>
    800026c0:	b5f1                	j	8000258c <interrupt_tests+0xb6>
    800026c2:	0004f717          	auipc	a4,0x4f
    800026c6:	95272703          	lw	a4,-1710(a4) # 80051014 <excpt+0x4>
    800026ca:	478d                	li	a5,3
    800026cc:	0002b597          	auipc	a1,0x2b
    800026d0:	c1458593          	addi	a1,a1,-1004 # 8002d2e0 <__func__.0+0x2c0>
    800026d4:	e8f701e3          	beq	a4,a5,80002556 <interrupt_tests+0x80>
    800026d8:	0002b597          	auipc	a1,0x2b
    800026dc:	c1858593          	addi	a1,a1,-1000 # 8002d2f0 <__func__.0+0x2d0>
    800026e0:	bd9d                	j	80002556 <interrupt_tests+0x80>
    800026e2:	0004f497          	auipc	s1,0x4f
    800026e6:	9324a483          	lw	s1,-1742(s1) # 80051014 <excpt+0x4>
    800026ea:	14f5                	addi	s1,s1,-3
    800026ec:	0014b493          	seqz	s1,s1
    800026f0:	bd6d                	j	800025aa <interrupt_tests+0xd4>
    TEST_ASSERT("vs sw irq with delegation", 
    800026f2:	0004f717          	auipc	a4,0x4f
    800026f6:	92272703          	lw	a4,-1758(a4) # 80051014 <excpt+0x4>
    800026fa:	4789                	li	a5,2
    800026fc:	0002b597          	auipc	a1,0x2b
    80002700:	be458593          	addi	a1,a1,-1052 # 8002d2e0 <__func__.0+0x2c0>
    80002704:	eef70ee3          	beq	a4,a5,80002600 <interrupt_tests+0x12a>
    80002708:	0002b597          	auipc	a1,0x2b
    8000270c:	be858593          	addi	a1,a1,-1048 # 8002d2f0 <__func__.0+0x2d0>
    80002710:	bdc5                	j	80002600 <interrupt_tests+0x12a>

0000000080002712 <two_stage_translation_1>:

static inline void touch(uintptr_t addr){
    touchwrite(addr);
}

bool two_stage_translation_1(){
    80002712:	7139                	addi	sp,sp,-64
    
    TEST_START();
    80002714:	00029597          	auipc	a1,0x29
    80002718:	c2458593          	addi	a1,a1,-988 # 8002b338 <__func__.20>
    8000271c:	0002b517          	auipc	a0,0x2b
    80002720:	be450513          	addi	a0,a0,-1052 # 8002d300 <__func__.0+0x2e0>
bool two_stage_translation_1(){
    80002724:	fc06                	sd	ra,56(sp)
    80002726:	f822                	sd	s0,48(sp)
    80002728:	f426                	sd	s1,40(sp)
    8000272a:	f04a                	sd	s2,32(sp)
    8000272c:	ec4e                	sd	s3,24(sp)
    TEST_START();
    8000272e:	68c280ef          	jal	8002adba <printf>
    80002732:	4529                	li	a0,10
    80002734:	374270ef          	jal	80029aa8 <putchar>
static inline uint8_t read8(uintptr_t addr){
    return *((volatile uint8_t*) addr);    
}

static inline void write64(uintptr_t addr, uint64_t val){
    *((volatile uint64_t*) addr) = val;
    80002738:	2201b737          	lui	a4,0x2201b
    8000273c:	000887b7          	lui	a5,0x88
    80002740:	070a                	slli	a4,a4,0x2
    80002742:	44c5                	li	s1,17
    80002744:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002748:	e304                	sd	s1,0(a4)
    8000274a:	07b2                	slli	a5,a5,0xc
    8000274c:	02200913          	li	s2,34
    80002750:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002754:	450d                	li	a0,3
    80002756:	f18fe0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8000275a:	e87fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000275e:	a1efe0ef          	jal	8000097c <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002762:	fc1fd0ef          	jal	80000722 <vspt_init>
    return *((volatile uint64_t*) addr);
    80002766:	4001b737          	lui	a4,0x4001b
    8000276a:	070a                	slli	a4,a4,0x2
    8000276c:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002770:	001007b7          	lui	a5,0x100
    80002774:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002778:	07b2                	slli	a5,a5,0xc

    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    8000277a:	0002b617          	auipc	a2,0x2b
    8000277e:	0f660613          	addi	a2,a2,246 # 8002d870 <__func__.0+0x850>
    80002782:	08200593          	li	a1,130
    80002786:	0002b517          	auipc	a0,0x2b
    8000278a:	b9250513          	addi	a0,a0,-1134 # 8002d318 <__func__.0+0x2f8>
    8000278e:	6380                	ld	s0,0(a5)
    80002790:	62a280ef          	jal	8002adba <printf>
    80002794:	3a998963          	beq	s3,s1,80002b46 <two_stage_translation_1+0x434>
    80002798:	0002b597          	auipc	a1,0x2b
    8000279c:	b5858593          	addi	a1,a1,-1192 # 8002d2f0 <__func__.0+0x2d0>
    800027a0:	0002b517          	auipc	a0,0x2b
    800027a4:	b9050513          	addi	a0,a0,-1136 # 8002d330 <__func__.0+0x310>
    800027a8:	612280ef          	jal	8002adba <printf>
    800027ac:	0002b517          	auipc	a0,0x2b
    800027b0:	b8c50513          	addi	a0,a0,-1140 # 8002d338 <__func__.0+0x318>
    800027b4:	606280ef          	jal	8002adba <printf>
    800027b8:	02900513          	li	a0,41
    800027bc:	2ec270ef          	jal	80029aa8 <putchar>
    800027c0:	4529                	li	a0,10
    800027c2:	2e6270ef          	jal	80029aa8 <putchar>
    800027c6:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    800027c8:	450d                	li	a0,3
    800027ca:	ea4fe0ef          	jal	80000e6e <goto_priv>
    hpt_switch();
    800027ce:	d6efe0ef          	jal	80000d3c <hpt_switch>
    asm volatile(
    800027d2:	22000073          	.insn	4, 0x22000073
    asm volatile(
    800027d6:	62000073          	.insn	4, 0x62000073
    hfence();
    goto_priv(PRIV_VS);
    800027da:	4509                	li	a0,2
    800027dc:	e92fe0ef          	jal	80000e6e <goto_priv>
    800027e0:	001007b7          	lui	a5,0x100
    800027e4:	4001b737          	lui	a4,0x4001b
    800027e8:	070a                	slli	a4,a4,0x2
    800027ea:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800027ee:	07b2                	slli	a5,a5,0xc
    800027f0:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    800027f4:	0002b617          	auipc	a2,0x2b
    800027f8:	09460613          	addi	a2,a2,148 # 8002d888 <__func__.0+0x868>
    800027fc:	08200593          	li	a1,130
    80002800:	0002b517          	auipc	a0,0x2b
    80002804:	b1850513          	addi	a0,a0,-1256 # 8002d318 <__func__.0+0x2f8>
    80002808:	6384                	ld	s1,0(a5)
    8000280a:	5b0280ef          	jal	8002adba <printf>
    8000280e:	02200793          	li	a5,34
    80002812:	2ef90a63          	beq	s2,a5,80002b06 <two_stage_translation_1+0x3f4>
    80002816:	0002b597          	auipc	a1,0x2b
    8000281a:	ada58593          	addi	a1,a1,-1318 # 8002d2f0 <__func__.0+0x2d0>
    8000281e:	0002b517          	auipc	a0,0x2b
    80002822:	b1250513          	addi	a0,a0,-1262 # 8002d330 <__func__.0+0x310>
    80002826:	594280ef          	jal	8002adba <printf>
    8000282a:	0002b517          	auipc	a0,0x2b
    8000282e:	b0e50513          	addi	a0,a0,-1266 # 8002d338 <__func__.0+0x318>
    80002832:	588280ef          	jal	8002adba <printf>
    80002836:	02900513          	li	a0,41
    8000283a:	26e270ef          	jal	80029aa8 <putchar>
    8000283e:	4529                	li	a0,10
    80002840:	268270ef          	jal	80029aa8 <putchar>
    80002844:	4401                	li	s0,0

    vspt_switch();
    80002846:	cd4fe0ef          	jal	80000d1a <vspt_switch>
    asm volatile ("sfence.vma \n\t");
    8000284a:	12000073          	sfence.vma
    8000284e:	001007b7          	lui	a5,0x100
    80002852:	4001b737          	lui	a4,0x4001b
    80002856:	070a                	slli	a4,a4,0x2
    80002858:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000285c:	07b2                	slli	a5,a5,0xc
    8000285e:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    sfence();
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002862:	0002b617          	auipc	a2,0x2b
    80002866:	05e60613          	addi	a2,a2,94 # 8002d8c0 <__func__.0+0x8a0>
    8000286a:	08200593          	li	a1,130
    8000286e:	0002b517          	auipc	a0,0x2b
    80002872:	aaa50513          	addi	a0,a0,-1366 # 8002d318 <__func__.0+0x2f8>
    80002876:	6384                	ld	s1,0(a5)
    80002878:	542280ef          	jal	8002adba <printf>
    8000287c:	47c5                	li	a5,17
    8000287e:	32f90063          	beq	s2,a5,80002b9e <two_stage_translation_1+0x48c>
    80002882:	0002b597          	auipc	a1,0x2b
    80002886:	a6e58593          	addi	a1,a1,-1426 # 8002d2f0 <__func__.0+0x2d0>
    8000288a:	0002b517          	auipc	a0,0x2b
    8000288e:	aa650513          	addi	a0,a0,-1370 # 8002d330 <__func__.0+0x310>
    80002892:	528280ef          	jal	8002adba <printf>
    80002896:	0002b517          	auipc	a0,0x2b
    8000289a:	aa250513          	addi	a0,a0,-1374 # 8002d338 <__func__.0+0x318>
    8000289e:	51c280ef          	jal	8002adba <printf>
    800028a2:	02900513          	li	a0,41
    800028a6:	202270ef          	jal	80029aa8 <putchar>
    800028aa:	4529                	li	a0,10
    800028ac:	1fc270ef          	jal	80029aa8 <putchar>
    800028b0:	4481                	li	s1,0

    goto_priv(PRIV_M); 
    800028b2:	4511                	li	a0,4
    800028b4:	dbafe0ef          	jal	80000e6e <goto_priv>
    CSRS(medeleg, 1ull << CAUSE_LGPF);
    800028b8:	002007b7          	lui	a5,0x200
    800028bc:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_VS);
    800028c0:	4509                	li	a0,2
    800028c2:	dacfe0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800028c6:	cacfe0ef          	jal	80000d72 <test_setup_except_function>
    800028ca:	001007b7          	lui	a5,0x100
    800028ce:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800028d2:	07b2                	slli	a5,a5,0xc
    800028d4:	639c                	ld	a5,0(a5)
    read64(vs_page_base(VSRWX_GI));    
    TEST_ASSERT(
    800028d6:	08200593          	li	a1,130
    800028da:	0002b617          	auipc	a2,0x2b
    800028de:	01e60613          	addi	a2,a2,30 # 8002d8f8 <__func__.0+0x8d8>
    800028e2:	0002b517          	auipc	a0,0x2b
    800028e6:	a3650513          	addi	a0,a0,-1482 # 8002d318 <__func__.0+0x2f8>
    800028ea:	4d0280ef          	jal	8002adba <printf>
    800028ee:	0004e797          	auipc	a5,0x4e
    800028f2:	7237c783          	lbu	a5,1827(a5) # 80051011 <excpt+0x1>
    800028f6:	0004e417          	auipc	s0,0x4e
    800028fa:	71a40413          	addi	s0,s0,1818 # 80051010 <excpt>
    800028fe:	0002b597          	auipc	a1,0x2b
    80002902:	9f258593          	addi	a1,a1,-1550 # 8002d2f0 <__func__.0+0x2d0>
    80002906:	c789                	beqz	a5,80002910 <two_stage_translation_1+0x1fe>
    80002908:	6418                	ld	a4,8(s0)
    8000290a:	47d5                	li	a5,21
    8000290c:	3ef70963          	beq	a4,a5,80002cfe <two_stage_translation_1+0x5ec>
    80002910:	0002b517          	auipc	a0,0x2b
    80002914:	a2050513          	addi	a0,a0,-1504 # 8002d330 <__func__.0+0x310>
    80002918:	4a2280ef          	jal	8002adba <printf>
    8000291c:	0004e797          	auipc	a5,0x4e
    80002920:	6f57c783          	lbu	a5,1781(a5) # 80051011 <excpt+0x1>
    80002924:	c789                	beqz	a5,8000292e <two_stage_translation_1+0x21c>
    80002926:	6418                	ld	a4,8(s0)
    80002928:	47d5                	li	a5,21
    8000292a:	2af70c63          	beq	a4,a5,80002be2 <two_stage_translation_1+0x4d0>
    8000292e:	0002b517          	auipc	a0,0x2b
    80002932:	a0a50513          	addi	a0,a0,-1526 # 8002d338 <__func__.0+0x318>
    80002936:	484280ef          	jal	8002adba <printf>
    8000293a:	02900513          	li	a0,41
    8000293e:	16a270ef          	jal	80029aa8 <putchar>
    80002942:	4529                	li	a0,10
    80002944:	164270ef          	jal	80029aa8 <putchar>
    80002948:	c899                	beqz	s1,8000295e <two_stage_translation_1+0x24c>
    8000294a:	0004e797          	auipc	a5,0x4e
    8000294e:	6c77c783          	lbu	a5,1735(a5) # 80051011 <excpt+0x1>
    80002952:	4481                	li	s1,0
    80002954:	c789                	beqz	a5,8000295e <two_stage_translation_1+0x24c>
    80002956:	6418                	ld	a4,8(s0)
    80002958:	47d5                	li	a5,21
    8000295a:	32f70d63          	beq	a4,a5,80002c94 <two_stage_translation_1+0x582>
        excpt.priv == PRIV_HS &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    TEST_SETUP_EXCEPT();
    8000295e:	c14fe0ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vs_page_base(VSRWX_GI)); 
    80002962:	001007b7          	lui	a5,0x100
    80002966:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000296a:	07b2                	slli	a5,a5,0xc
    8000296c:	00000297          	auipc	t0,0x0
    80002970:	00c28293          	addi	t0,t0,12 # 80002978 <two_stage_translation_1+0x266>
    80002974:	02543c23          	sd	t0,56(s0)
    80002978:	8782                	jr	a5
    TEST_ASSERT(
    8000297a:	08200593          	li	a1,130
    8000297e:	0002b617          	auipc	a2,0x2b
    80002982:	faa60613          	addi	a2,a2,-86 # 8002d928 <__func__.0+0x908>
    80002986:	0002b517          	auipc	a0,0x2b
    8000298a:	99250513          	addi	a0,a0,-1646 # 8002d318 <__func__.0+0x2f8>
    8000298e:	42c280ef          	jal	8002adba <printf>
    80002992:	0004e797          	auipc	a5,0x4e
    80002996:	67f7c783          	lbu	a5,1663(a5) # 80051011 <excpt+0x1>
    8000299a:	0002b597          	auipc	a1,0x2b
    8000299e:	95658593          	addi	a1,a1,-1706 # 8002d2f0 <__func__.0+0x2d0>
    800029a2:	c789                	beqz	a5,800029ac <two_stage_translation_1+0x29a>
    800029a4:	6418                	ld	a4,8(s0)
    800029a6:	47d1                	li	a5,20
    800029a8:	3af70e63          	beq	a4,a5,80002d64 <two_stage_translation_1+0x652>
    800029ac:	0002b517          	auipc	a0,0x2b
    800029b0:	98450513          	addi	a0,a0,-1660 # 8002d330 <__func__.0+0x310>
    800029b4:	406280ef          	jal	8002adba <printf>
    800029b8:	0004e797          	auipc	a5,0x4e
    800029bc:	6597c783          	lbu	a5,1625(a5) # 80051011 <excpt+0x1>
    800029c0:	c789                	beqz	a5,800029ca <two_stage_translation_1+0x2b8>
    800029c2:	6418                	ld	a4,8(s0)
    800029c4:	47d1                	li	a5,20
    800029c6:	24f70963          	beq	a4,a5,80002c18 <two_stage_translation_1+0x506>
    800029ca:	0002b517          	auipc	a0,0x2b
    800029ce:	96e50513          	addi	a0,a0,-1682 # 8002d338 <__func__.0+0x318>
    800029d2:	3e8280ef          	jal	8002adba <printf>
    800029d6:	02900513          	li	a0,41
    800029da:	0ce270ef          	jal	80029aa8 <putchar>
    800029de:	4529                	li	a0,10
    800029e0:	0c8270ef          	jal	80029aa8 <putchar>
    800029e4:	c899                	beqz	s1,800029fa <two_stage_translation_1+0x2e8>
    800029e6:	0004e797          	auipc	a5,0x4e
    800029ea:	62b7c783          	lbu	a5,1579(a5) # 80051011 <excpt+0x1>
    800029ee:	4481                	li	s1,0
    800029f0:	c789                	beqz	a5,800029fa <two_stage_translation_1+0x2e8>
    800029f2:	6418                	ld	a4,8(s0)
    800029f4:	47d1                	li	a5,20
    800029f6:	26f70a63          	beq	a4,a5,80002c6a <two_stage_translation_1+0x558>
        excpt.priv == PRIV_M  &&
        excpt.gva == true &&
        excpt.xpv == true
    );

    goto_priv(PRIV_M);
    800029fa:	4511                	li	a0,4
    800029fc:	c72fe0ef          	jal	80000e6e <goto_priv>
    CSRS(medeleg, 1 << CAUSE_LPF | 1 << CAUSE_LGPF);
    80002a00:	002027b7          	lui	a5,0x202
    80002a04:	3027a073          	csrs	medeleg,a5
    goto_priv(PRIV_HS); 
    80002a08:	450d                	li	a0,3
    80002a0a:	c64fe0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HEDELEG, 1 << CAUSE_LPF);
    80002a0e:	6789                	lui	a5,0x2
    80002a10:	6027a073          	csrs	hedeleg,a5
    goto_priv(PRIV_VS);
    80002a14:	4509                	li	a0,2
    80002a16:	c58fe0ef          	jal	80000e6e <goto_priv>
    80002a1a:	12000073          	sfence.vma
    sfence();
    TEST_SETUP_EXCEPT();
    80002a1e:	b54fe0ef          	jal	80000d72 <test_setup_except_function>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002a22:	400197b7          	lui	a5,0x40019
    80002a26:	078a                	slli	a5,a5,0x2
    80002a28:	639c                	ld	a5,0(a5)
    touchread(vs_page_base(VSI_GI));    
    TEST_ASSERT(
    80002a2a:	08200593          	li	a1,130
    80002a2e:	0002b617          	auipc	a2,0x2b
    80002a32:	f3a60613          	addi	a2,a2,-198 # 8002d968 <__func__.0+0x948>
    80002a36:	0002b517          	auipc	a0,0x2b
    80002a3a:	8e250513          	addi	a0,a0,-1822 # 8002d318 <__func__.0+0x2f8>
    volatile uint64_t x = *(volatile uint64_t *)addr;
    80002a3e:	e43e                	sd	a5,8(sp)
    TEST_ASSERT(
    80002a40:	37a280ef          	jal	8002adba <printf>
    80002a44:	0004e797          	auipc	a5,0x4e
    80002a48:	5cd7c783          	lbu	a5,1485(a5) # 80051011 <excpt+0x1>
    80002a4c:	0002b597          	auipc	a1,0x2b
    80002a50:	8a458593          	addi	a1,a1,-1884 # 8002d2f0 <__func__.0+0x2d0>
    80002a54:	c789                	beqz	a5,80002a5e <two_stage_translation_1+0x34c>
    80002a56:	6418                	ld	a4,8(s0)
    80002a58:	47b5                	li	a5,13
    80002a5a:	2cf70f63          	beq	a4,a5,80002d38 <two_stage_translation_1+0x626>
    80002a5e:	0002b517          	auipc	a0,0x2b
    80002a62:	8d250513          	addi	a0,a0,-1838 # 8002d330 <__func__.0+0x310>
    80002a66:	354280ef          	jal	8002adba <printf>
    80002a6a:	0004e797          	auipc	a5,0x4e
    80002a6e:	5a77c783          	lbu	a5,1447(a5) # 80051011 <excpt+0x1>
    80002a72:	c789                	beqz	a5,80002a7c <two_stage_translation_1+0x36a>
    80002a74:	6418                	ld	a4,8(s0)
    80002a76:	47b5                	li	a5,13
    80002a78:	1cf70b63          	beq	a4,a5,80002c4e <two_stage_translation_1+0x53c>
    80002a7c:	0002b517          	auipc	a0,0x2b
    80002a80:	8bc50513          	addi	a0,a0,-1860 # 8002d338 <__func__.0+0x318>
    80002a84:	336280ef          	jal	8002adba <printf>
    80002a88:	02900513          	li	a0,41
    80002a8c:	01c270ef          	jal	80029aa8 <putchar>
    80002a90:	4529                	li	a0,10
    80002a92:	016270ef          	jal	80029aa8 <putchar>
    80002a96:	c0b5                	beqz	s1,80002afa <two_stage_translation_1+0x3e8>
    80002a98:	0004e497          	auipc	s1,0x4e
    80002a9c:	5794c483          	lbu	s1,1401(s1) # 80051011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_VS && 
        excpt.gva == false
    );

    TEST_END();
    80002aa0:	0002b597          	auipc	a1,0x2b
    80002aa4:	85058593          	addi	a1,a1,-1968 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT(
    80002aa8:	c491                	beqz	s1,80002ab4 <two_stage_translation_1+0x3a2>
    80002aaa:	6418                	ld	a4,8(s0)
    80002aac:	47b5                	li	a5,13
    80002aae:	02f70663          	beq	a4,a5,80002ada <two_stage_translation_1+0x3c8>
    80002ab2:	4481                	li	s1,0
    TEST_END();
    80002ab4:	0002b517          	auipc	a0,0x2b
    80002ab8:	8e450513          	addi	a0,a0,-1820 # 8002d398 <__func__.0+0x378>
    80002abc:	2fe280ef          	jal	8002adba <printf>
    80002ac0:	4511                	li	a0,4
    80002ac2:	bacfe0ef          	jal	80000e6e <goto_priv>
    80002ac6:	cc5fe0ef          	jal	8000178a <reset_state>
}
    80002aca:	70e2                	ld	ra,56(sp)
    80002acc:	7442                	ld	s0,48(sp)
    80002ace:	7902                	ld	s2,32(sp)
    80002ad0:	69e2                	ld	s3,24(sp)
    80002ad2:	8526                	mv	a0,s1
    80002ad4:	74a2                	ld	s1,40(sp)
    80002ad6:	6121                	addi	sp,sp,64
    80002ad8:	8082                	ret
    TEST_ASSERT(
    80002ada:	0004e717          	auipc	a4,0x4e
    80002ade:	53a72703          	lw	a4,1338(a4) # 80051014 <excpt+0x4>
    80002ae2:	4789                	li	a5,2
    80002ae4:	fcf717e3          	bne	a4,a5,80002ab2 <two_stage_translation_1+0x3a0>
    80002ae8:	0004e797          	auipc	a5,0x4e
    80002aec:	5587c783          	lbu	a5,1368(a5) # 80051040 <excpt+0x30>
    TEST_END();
    80002af0:	0002a597          	auipc	a1,0x2a
    80002af4:	7f058593          	addi	a1,a1,2032 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT(
    80002af8:	dfd5                	beqz	a5,80002ab4 <two_stage_translation_1+0x3a2>
    80002afa:	4481                	li	s1,0
    TEST_END();
    80002afc:	0002a597          	auipc	a1,0x2a
    80002b00:	7f458593          	addi	a1,a1,2036 # 8002d2f0 <__func__.0+0x2d0>
    80002b04:	bf45                	j	80002ab4 <two_stage_translation_1+0x3a2>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002b06:	47c5                	li	a5,17
    80002b08:	1cf48b63          	beq	s1,a5,80002cde <two_stage_translation_1+0x5cc>
    80002b0c:	0002a597          	auipc	a1,0x2a
    80002b10:	7e458593          	addi	a1,a1,2020 # 8002d2f0 <__func__.0+0x2d0>
    80002b14:	0002b517          	auipc	a0,0x2b
    80002b18:	81c50513          	addi	a0,a0,-2020 # 8002d330 <__func__.0+0x310>
    80002b1c:	29e280ef          	jal	8002adba <printf>
    80002b20:	0002b517          	auipc	a0,0x2b
    80002b24:	81850513          	addi	a0,a0,-2024 # 8002d338 <__func__.0+0x318>
    80002b28:	292280ef          	jal	8002adba <printf>
    80002b2c:	02900513          	li	a0,41
    80002b30:	779260ef          	jal	80029aa8 <putchar>
    80002b34:	4529                	li	a0,10
    80002b36:	773260ef          	jal	80029aa8 <putchar>
    80002b3a:	d00405e3          	beqz	s0,80002844 <two_stage_translation_1+0x132>
    80002b3e:	14bd                	addi	s1,s1,-17
    80002b40:	0014b413          	seqz	s0,s1
    80002b44:	b309                	j	80002846 <two_stage_translation_1+0x134>
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002b46:	03240e63          	beq	s0,s2,80002b82 <two_stage_translation_1+0x470>
    80002b4a:	0002a597          	auipc	a1,0x2a
    80002b4e:	7a658593          	addi	a1,a1,1958 # 8002d2f0 <__func__.0+0x2d0>
    80002b52:	0002a517          	auipc	a0,0x2a
    80002b56:	7de50513          	addi	a0,a0,2014 # 8002d330 <__func__.0+0x310>
    80002b5a:	260280ef          	jal	8002adba <printf>
    80002b5e:	0002a517          	auipc	a0,0x2a
    80002b62:	7da50513          	addi	a0,a0,2010 # 8002d338 <__func__.0+0x318>
    80002b66:	254280ef          	jal	8002adba <printf>
    80002b6a:	02900513          	li	a0,41
    80002b6e:	73b260ef          	jal	80029aa8 <putchar>
    80002b72:	4529                	li	a0,10
    80002b74:	735260ef          	jal	80029aa8 <putchar>
    80002b78:	fde40413          	addi	s0,s0,-34
    80002b7c:	00143413          	seqz	s0,s0
    80002b80:	b1a1                	j	800027c8 <two_stage_translation_1+0xb6>
    80002b82:	0002a597          	auipc	a1,0x2a
    80002b86:	75e58593          	addi	a1,a1,1886 # 8002d2e0 <__func__.0+0x2c0>
    80002b8a:	0002a517          	auipc	a0,0x2a
    80002b8e:	7a650513          	addi	a0,a0,1958 # 8002d330 <__func__.0+0x310>
    80002b92:	228280ef          	jal	8002adba <printf>
    80002b96:	4529                	li	a0,10
    80002b98:	711260ef          	jal	80029aa8 <putchar>
    80002b9c:	bff1                	j	80002b78 <two_stage_translation_1+0x466>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002b9e:	02200793          	li	a5,34
    80002ba2:	10f48e63          	beq	s1,a5,80002cbe <two_stage_translation_1+0x5ac>
    80002ba6:	0002a597          	auipc	a1,0x2a
    80002baa:	74a58593          	addi	a1,a1,1866 # 8002d2f0 <__func__.0+0x2d0>
    80002bae:	0002a517          	auipc	a0,0x2a
    80002bb2:	78250513          	addi	a0,a0,1922 # 8002d330 <__func__.0+0x310>
    80002bb6:	204280ef          	jal	8002adba <printf>
    80002bba:	0002a517          	auipc	a0,0x2a
    80002bbe:	77e50513          	addi	a0,a0,1918 # 8002d338 <__func__.0+0x318>
    80002bc2:	1f8280ef          	jal	8002adba <printf>
    80002bc6:	02900513          	li	a0,41
    80002bca:	6df260ef          	jal	80029aa8 <putchar>
    80002bce:	4529                	li	a0,10
    80002bd0:	6d9260ef          	jal	80029aa8 <putchar>
    80002bd4:	cc040ee3          	beqz	s0,800028b0 <two_stage_translation_1+0x19e>
    80002bd8:	fde48493          	addi	s1,s1,-34
    80002bdc:	0014b493          	seqz	s1,s1
    80002be0:	b9c9                	j	800028b2 <two_stage_translation_1+0x1a0>
    TEST_ASSERT(
    80002be2:	7418                	ld	a4,40(s0)
    80002be4:	400197b7          	lui	a5,0x40019
    80002be8:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002bec:	d4f711e3          	bne	a4,a5,8000292e <two_stage_translation_1+0x21c>
    80002bf0:	0004e717          	auipc	a4,0x4e
    80002bf4:	42472703          	lw	a4,1060(a4) # 80051014 <excpt+0x4>
    80002bf8:	478d                	li	a5,3
    80002bfa:	d2f71ae3          	bne	a4,a5,8000292e <two_stage_translation_1+0x21c>
    80002bfe:	0004e797          	auipc	a5,0x4e
    80002c02:	4427c783          	lbu	a5,1090(a5) # 80051040 <excpt+0x30>
    80002c06:	d20784e3          	beqz	a5,8000292e <two_stage_translation_1+0x21c>
    80002c0a:	0004e797          	auipc	a5,0x4e
    80002c0e:	4377c783          	lbu	a5,1079(a5) # 80051041 <excpt+0x31>
    80002c12:	d20798e3          	bnez	a5,80002942 <two_stage_translation_1+0x230>
    80002c16:	bb21                	j	8000292e <two_stage_translation_1+0x21c>
    TEST_ASSERT(
    80002c18:	7418                	ld	a4,40(s0)
    80002c1a:	400197b7          	lui	a5,0x40019
    80002c1e:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002c22:	daf714e3          	bne	a4,a5,800029ca <two_stage_translation_1+0x2b8>
    80002c26:	0004e717          	auipc	a4,0x4e
    80002c2a:	3ee72703          	lw	a4,1006(a4) # 80051014 <excpt+0x4>
    80002c2e:	4791                	li	a5,4
    80002c30:	d8f71de3          	bne	a4,a5,800029ca <two_stage_translation_1+0x2b8>
    80002c34:	0004e797          	auipc	a5,0x4e
    80002c38:	40c7c783          	lbu	a5,1036(a5) # 80051040 <excpt+0x30>
    80002c3c:	d80787e3          	beqz	a5,800029ca <two_stage_translation_1+0x2b8>
    80002c40:	0004e797          	auipc	a5,0x4e
    80002c44:	4017c783          	lbu	a5,1025(a5) # 80051041 <excpt+0x31>
    80002c48:	d8079be3          	bnez	a5,800029de <two_stage_translation_1+0x2cc>
    80002c4c:	bbbd                	j	800029ca <two_stage_translation_1+0x2b8>
    TEST_ASSERT(
    80002c4e:	0004e717          	auipc	a4,0x4e
    80002c52:	3c672703          	lw	a4,966(a4) # 80051014 <excpt+0x4>
    80002c56:	4789                	li	a5,2
    80002c58:	e2f712e3          	bne	a4,a5,80002a7c <two_stage_translation_1+0x36a>
    80002c5c:	0004e797          	auipc	a5,0x4e
    80002c60:	3e47c783          	lbu	a5,996(a5) # 80051040 <excpt+0x30>
    80002c64:	e20786e3          	beqz	a5,80002a90 <two_stage_translation_1+0x37e>
    80002c68:	bd11                	j	80002a7c <two_stage_translation_1+0x36a>
    TEST_ASSERT(
    80002c6a:	7418                	ld	a4,40(s0)
    80002c6c:	400197b7          	lui	a5,0x40019
    80002c70:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002c74:	d8f713e3          	bne	a4,a5,800029fa <two_stage_translation_1+0x2e8>
    80002c78:	0004e717          	auipc	a4,0x4e
    80002c7c:	39c72703          	lw	a4,924(a4) # 80051014 <excpt+0x4>
    80002c80:	4791                	li	a5,4
    80002c82:	d6f71ce3          	bne	a4,a5,800029fa <two_stage_translation_1+0x2e8>
    80002c86:	03045483          	lhu	s1,48(s0)
    80002c8a:	eff48493          	addi	s1,s1,-257
    80002c8e:	0014b493          	seqz	s1,s1
    80002c92:	b3a5                	j	800029fa <two_stage_translation_1+0x2e8>
    TEST_ASSERT(
    80002c94:	7418                	ld	a4,40(s0)
    80002c96:	400197b7          	lui	a5,0x40019
    80002c9a:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002c9e:	ccf710e3          	bne	a4,a5,8000295e <two_stage_translation_1+0x24c>
    80002ca2:	0004e717          	auipc	a4,0x4e
    80002ca6:	37272703          	lw	a4,882(a4) # 80051014 <excpt+0x4>
    80002caa:	478d                	li	a5,3
    80002cac:	caf719e3          	bne	a4,a5,8000295e <two_stage_translation_1+0x24c>
    80002cb0:	03045483          	lhu	s1,48(s0)
    80002cb4:	eff48493          	addi	s1,s1,-257
    80002cb8:	0014b493          	seqz	s1,s1
    80002cbc:	b14d                	j	8000295e <two_stage_translation_1+0x24c>
    TEST_ASSERT("vs gets right values after changing 1st stage pt", check1 && check2);
    80002cbe:	0002a597          	auipc	a1,0x2a
    80002cc2:	62258593          	addi	a1,a1,1570 # 8002d2e0 <__func__.0+0x2c0>
    80002cc6:	0002a517          	auipc	a0,0x2a
    80002cca:	66a50513          	addi	a0,a0,1642 # 8002d330 <__func__.0+0x310>
    80002cce:	0ec280ef          	jal	8002adba <printf>
    80002cd2:	4529                	li	a0,10
    80002cd4:	5d5260ef          	jal	80029aa8 <putchar>
    80002cd8:	bc040ce3          	beqz	s0,800028b0 <two_stage_translation_1+0x19e>
    80002cdc:	bdf5                	j	80002bd8 <two_stage_translation_1+0x4c6>
    TEST_ASSERT("vs gets right values after changing 2nd stage pt", check1 && check2);
    80002cde:	0002a597          	auipc	a1,0x2a
    80002ce2:	60258593          	addi	a1,a1,1538 # 8002d2e0 <__func__.0+0x2c0>
    80002ce6:	0002a517          	auipc	a0,0x2a
    80002cea:	64a50513          	addi	a0,a0,1610 # 8002d330 <__func__.0+0x310>
    80002cee:	0cc280ef          	jal	8002adba <printf>
    80002cf2:	4529                	li	a0,10
    80002cf4:	5b5260ef          	jal	80029aa8 <putchar>
    80002cf8:	b40406e3          	beqz	s0,80002844 <two_stage_translation_1+0x132>
    80002cfc:	b589                	j	80002b3e <two_stage_translation_1+0x42c>
    TEST_ASSERT(
    80002cfe:	7418                	ld	a4,40(s0)
    80002d00:	400197b7          	lui	a5,0x40019
    80002d04:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d08:	c0f714e3          	bne	a4,a5,80002910 <two_stage_translation_1+0x1fe>
    80002d0c:	0004e717          	auipc	a4,0x4e
    80002d10:	30872703          	lw	a4,776(a4) # 80051014 <excpt+0x4>
    80002d14:	478d                	li	a5,3
    80002d16:	bef71de3          	bne	a4,a5,80002910 <two_stage_translation_1+0x1fe>
    80002d1a:	03045703          	lhu	a4,48(s0)
    80002d1e:	10100793          	li	a5,257
    80002d22:	0002a597          	auipc	a1,0x2a
    80002d26:	5be58593          	addi	a1,a1,1470 # 8002d2e0 <__func__.0+0x2c0>
    80002d2a:	bef703e3          	beq	a4,a5,80002910 <two_stage_translation_1+0x1fe>
    80002d2e:	0002a597          	auipc	a1,0x2a
    80002d32:	5c258593          	addi	a1,a1,1474 # 8002d2f0 <__func__.0+0x2d0>
    80002d36:	bee9                	j	80002910 <two_stage_translation_1+0x1fe>
    TEST_ASSERT(
    80002d38:	0004e717          	auipc	a4,0x4e
    80002d3c:	2dc72703          	lw	a4,732(a4) # 80051014 <excpt+0x4>
    80002d40:	4789                	li	a5,2
    80002d42:	d0f71ee3          	bne	a4,a5,80002a5e <two_stage_translation_1+0x34c>
    80002d46:	0004e797          	auipc	a5,0x4e
    80002d4a:	2fa7c783          	lbu	a5,762(a5) # 80051040 <excpt+0x30>
    80002d4e:	0002a597          	auipc	a1,0x2a
    80002d52:	59258593          	addi	a1,a1,1426 # 8002d2e0 <__func__.0+0x2c0>
    80002d56:	d00784e3          	beqz	a5,80002a5e <two_stage_translation_1+0x34c>
    80002d5a:	0002a597          	auipc	a1,0x2a
    80002d5e:	59658593          	addi	a1,a1,1430 # 8002d2f0 <__func__.0+0x2d0>
    80002d62:	b9f5                	j	80002a5e <two_stage_translation_1+0x34c>
    TEST_ASSERT(
    80002d64:	7418                	ld	a4,40(s0)
    80002d66:	400197b7          	lui	a5,0x40019
    80002d6a:	40078793          	addi	a5,a5,1024 # 40019400 <STACK_SIZE+0x3ff19400>
    80002d6e:	c2f71fe3          	bne	a4,a5,800029ac <two_stage_translation_1+0x29a>
    80002d72:	0004e717          	auipc	a4,0x4e
    80002d76:	2a272703          	lw	a4,674(a4) # 80051014 <excpt+0x4>
    80002d7a:	4791                	li	a5,4
    80002d7c:	c2f718e3          	bne	a4,a5,800029ac <two_stage_translation_1+0x29a>
    80002d80:	03045703          	lhu	a4,48(s0)
    80002d84:	10100793          	li	a5,257
    80002d88:	0002a597          	auipc	a1,0x2a
    80002d8c:	55858593          	addi	a1,a1,1368 # 8002d2e0 <__func__.0+0x2c0>
    80002d90:	c0f70ee3          	beq	a4,a5,800029ac <two_stage_translation_1+0x29a>
    80002d94:	0002a597          	auipc	a1,0x2a
    80002d98:	55c58593          	addi	a1,a1,1372 # 8002d2f0 <__func__.0+0x2d0>
    80002d9c:	b901                	j	800029ac <two_stage_translation_1+0x29a>

0000000080002d9e <two_stage_translation_2>:

bool two_stage_translation_2(){
    80002d9e:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002da0:	00028597          	auipc	a1,0x28
    80002da4:	5b058593          	addi	a1,a1,1456 # 8002b350 <__func__.17>
    80002da8:	0002a517          	auipc	a0,0x2a
    80002dac:	55850513          	addi	a0,a0,1368 # 8002d300 <__func__.0+0x2e0>
bool two_stage_translation_2(){
    80002db0:	f406                	sd	ra,40(sp)
    80002db2:	f022                	sd	s0,32(sp)
    80002db4:	ec26                	sd	s1,24(sp)
    80002db6:	e84a                	sd	s2,16(sp)
    80002db8:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002dba:	000280ef          	jal	8002adba <printf>
    80002dbe:	4529                	li	a0,10
    80002dc0:	4e9260ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    80002dc4:	4511                	li	a0,4
    80002dc6:	8a8fe0ef          	jal	80000e6e <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80002dca:	2201b737          	lui	a4,0x2201b
    80002dce:	000887b7          	lui	a5,0x88
    80002dd2:	070a                	slli	a4,a4,0x2
    80002dd4:	44c5                	li	s1,17
    80002dd6:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002dda:	e304                	sd	s1,0(a4)
    80002ddc:	07b2                	slli	a5,a5,0xc
    80002dde:	02200913          	li	s2,34
    80002de2:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002de6:	450d                	li	a0,3
    80002de8:	886fe0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80002dec:	ff4fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002df0:	b8dfd0ef          	jal	8000097c <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002df4:	92ffd0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_VS);
    80002df8:	4509                	li	a0,2
    80002dfa:	874fe0ef          	jal	80000e6e <goto_priv>
    return *((volatile uint64_t*) addr);
    80002dfe:	4001b737          	lui	a4,0x4001b
    80002e02:	070a                	slli	a4,a4,0x2
    80002e04:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002e08:	001007b7          	lui	a5,0x100
    80002e0c:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002e10:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002e12:	0002b617          	auipc	a2,0x2b
    80002e16:	a5e60613          	addi	a2,a2,-1442 # 8002d870 <__func__.0+0x850>
    80002e1a:	08200593          	li	a1,130
    80002e1e:	0002a517          	auipc	a0,0x2a
    80002e22:	4fa50513          	addi	a0,a0,1274 # 8002d318 <__func__.0+0x2f8>
    80002e26:	6380                	ld	s0,0(a5)
    80002e28:	793270ef          	jal	8002adba <printf>
    80002e2c:	0c998b63          	beq	s3,s1,80002f02 <two_stage_translation_2+0x164>
    80002e30:	0002a597          	auipc	a1,0x2a
    80002e34:	4c058593          	addi	a1,a1,1216 # 8002d2f0 <__func__.0+0x2d0>
    80002e38:	0002a517          	auipc	a0,0x2a
    80002e3c:	4f850513          	addi	a0,a0,1272 # 8002d330 <__func__.0+0x310>
    80002e40:	77b270ef          	jal	8002adba <printf>
    80002e44:	0002a517          	auipc	a0,0x2a
    80002e48:	4f450513          	addi	a0,a0,1268 # 8002d338 <__func__.0+0x318>
    80002e4c:	76f270ef          	jal	8002adba <printf>
    80002e50:	02900513          	li	a0,41
    80002e54:	455260ef          	jal	80029aa8 <putchar>
    80002e58:	4529                	li	a0,10
    80002e5a:	44f260ef          	jal	80029aa8 <putchar>
    80002e5e:	4401                	li	s0,0
    
    goto_priv(PRIV_HS);
    80002e60:	450d                	li	a0,3
    80002e62:	80cfe0ef          	jal	80000e6e <goto_priv>
    hpt_switch();
    80002e66:	ed7fd0ef          	jal	80000d3c <hpt_switch>
    goto_priv(PRIV_VS);
    80002e6a:	4509                	li	a0,2
    80002e6c:	802fe0ef          	jal	80000e6e <goto_priv>
    80002e70:	001007b7          	lui	a5,0x100
    80002e74:	4001b737          	lui	a4,0x4001b
    80002e78:	070a                	slli	a4,a4,0x2
    80002e7a:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002e7e:	07b2                	slli	a5,a5,0xc
    80002e80:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    // INFO("0%lx 0x%lx", read64(vaddr1), read64(vaddr2));
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002e82:	0002b617          	auipc	a2,0x2b
    80002e86:	b1e60613          	addi	a2,a2,-1250 # 8002d9a0 <__func__.0+0x980>
    80002e8a:	08200593          	li	a1,130
    80002e8e:	0002a517          	auipc	a0,0x2a
    80002e92:	48a50513          	addi	a0,a0,1162 # 8002d318 <__func__.0+0x2f8>
    80002e96:	0007b903          	ld	s2,0(a5)
    80002e9a:	721270ef          	jal	8002adba <printf>
    80002e9e:	47c5                	li	a5,17
    80002ea0:	0af48d63          	beq	s1,a5,80002f5a <two_stage_translation_2+0x1bc>
    80002ea4:	0002a597          	auipc	a1,0x2a
    80002ea8:	44c58593          	addi	a1,a1,1100 # 8002d2f0 <__func__.0+0x2d0>
    80002eac:	0002a517          	auipc	a0,0x2a
    80002eb0:	48450513          	addi	a0,a0,1156 # 8002d330 <__func__.0+0x310>
    80002eb4:	707270ef          	jal	8002adba <printf>
    80002eb8:	0002a517          	auipc	a0,0x2a
    80002ebc:	48050513          	addi	a0,a0,1152 # 8002d338 <__func__.0+0x318>
    80002ec0:	6fb270ef          	jal	8002adba <printf>
    80002ec4:	02900513          	li	a0,41
    80002ec8:	3e1260ef          	jal	80029aa8 <putchar>
    80002ecc:	4529                	li	a0,10
    80002ece:	3db260ef          	jal	80029aa8 <putchar>
    80002ed2:	4401                	li	s0,0


    TEST_END();
    80002ed4:	0002a597          	auipc	a1,0x2a
    80002ed8:	41c58593          	addi	a1,a1,1052 # 8002d2f0 <__func__.0+0x2d0>
    80002edc:	0002a517          	auipc	a0,0x2a
    80002ee0:	4bc50513          	addi	a0,a0,1212 # 8002d398 <__func__.0+0x378>
    80002ee4:	6d7270ef          	jal	8002adba <printf>
    80002ee8:	4511                	li	a0,4
    80002eea:	f85fd0ef          	jal	80000e6e <goto_priv>
    80002eee:	89dfe0ef          	jal	8000178a <reset_state>
}
    80002ef2:	70a2                	ld	ra,40(sp)
    80002ef4:	8522                	mv	a0,s0
    80002ef6:	7402                	ld	s0,32(sp)
    80002ef8:	64e2                	ld	s1,24(sp)
    80002efa:	6942                	ld	s2,16(sp)
    80002efc:	69a2                	ld	s3,8(sp)
    80002efe:	6145                	addi	sp,sp,48
    80002f00:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002f02:	03240e63          	beq	s0,s2,80002f3e <two_stage_translation_2+0x1a0>
    80002f06:	0002a597          	auipc	a1,0x2a
    80002f0a:	3ea58593          	addi	a1,a1,1002 # 8002d2f0 <__func__.0+0x2d0>
    80002f0e:	0002a517          	auipc	a0,0x2a
    80002f12:	42250513          	addi	a0,a0,1058 # 8002d330 <__func__.0+0x310>
    80002f16:	6a5270ef          	jal	8002adba <printf>
    80002f1a:	0002a517          	auipc	a0,0x2a
    80002f1e:	41e50513          	addi	a0,a0,1054 # 8002d338 <__func__.0+0x318>
    80002f22:	699270ef          	jal	8002adba <printf>
    80002f26:	02900513          	li	a0,41
    80002f2a:	37f260ef          	jal	80029aa8 <putchar>
    80002f2e:	4529                	li	a0,10
    80002f30:	379260ef          	jal	80029aa8 <putchar>
    80002f34:	fde40413          	addi	s0,s0,-34
    80002f38:	00143413          	seqz	s0,s0
    80002f3c:	b715                	j	80002e60 <two_stage_translation_2+0xc2>
    80002f3e:	0002a597          	auipc	a1,0x2a
    80002f42:	3a258593          	addi	a1,a1,930 # 8002d2e0 <__func__.0+0x2c0>
    80002f46:	0002a517          	auipc	a0,0x2a
    80002f4a:	3ea50513          	addi	a0,a0,1002 # 8002d330 <__func__.0+0x310>
    80002f4e:	66d270ef          	jal	8002adba <printf>
    80002f52:	4529                	li	a0,10
    80002f54:	355260ef          	jal	80029aa8 <putchar>
    80002f58:	bff1                	j	80002f34 <two_stage_translation_2+0x196>
    TEST_ASSERT("vs do not change values after changing 2nd stage pt when not execute hfence", check1 && check2);
    80002f5a:	02200793          	li	a5,34
    80002f5e:	f4f913e3          	bne	s2,a5,80002ea4 <two_stage_translation_2+0x106>
    80002f62:	0002a597          	auipc	a1,0x2a
    80002f66:	37e58593          	addi	a1,a1,894 # 8002d2e0 <__func__.0+0x2c0>
    80002f6a:	0002a517          	auipc	a0,0x2a
    80002f6e:	3c650513          	addi	a0,a0,966 # 8002d330 <__func__.0+0x310>
    80002f72:	649270ef          	jal	8002adba <printf>
    80002f76:	4529                	li	a0,10
    80002f78:	331260ef          	jal	80029aa8 <putchar>
    80002f7c:	d839                	beqz	s0,80002ed2 <two_stage_translation_2+0x134>
    80002f7e:	4405                	li	s0,1
    TEST_END();
    80002f80:	0002a597          	auipc	a1,0x2a
    80002f84:	36058593          	addi	a1,a1,864 # 8002d2e0 <__func__.0+0x2c0>
    80002f88:	bf91                	j	80002edc <two_stage_translation_2+0x13e>

0000000080002f8a <two_stage_translation_3>:

bool two_stage_translation_3(){
    80002f8a:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80002f8c:	00028597          	auipc	a1,0x28
    80002f90:	3dc58593          	addi	a1,a1,988 # 8002b368 <__func__.16>
    80002f94:	0002a517          	auipc	a0,0x2a
    80002f98:	36c50513          	addi	a0,a0,876 # 8002d300 <__func__.0+0x2e0>
bool two_stage_translation_3(){
    80002f9c:	f406                	sd	ra,40(sp)
    80002f9e:	f022                	sd	s0,32(sp)
    80002fa0:	ec26                	sd	s1,24(sp)
    80002fa2:	e84a                	sd	s2,16(sp)
    80002fa4:	e44e                	sd	s3,8(sp)
    TEST_START();
    80002fa6:	615270ef          	jal	8002adba <printf>
    80002faa:	4529                	li	a0,10
    80002fac:	2fd260ef          	jal	80029aa8 <putchar>
    *((volatile uint64_t*) addr) = val;
    80002fb0:	2201b737          	lui	a4,0x2201b
    80002fb4:	000887b7          	lui	a5,0x88
    80002fb8:	070a                	slli	a4,a4,0x2
    80002fba:	44c5                	li	s1,17
    80002fbc:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    80002fc0:	e304                	sd	s1,0(a4)
    80002fc2:	07b2                	slli	a5,a5,0xc
    80002fc4:	02200913          	li	s2,34
    80002fc8:	0127b023          	sd	s2,0(a5)
    write64(addr2, 0x22);

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    80002fcc:	450d                	li	a0,3
    80002fce:	ea1fd0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80002fd2:	e0efd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80002fd6:	9a7fd0ef          	jal	8000097c <hpt_init>

    /**
     * Setup guest page tables.
     */
    vspt_init();
    80002fda:	f48fd0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_VS);
    80002fde:	4509                	li	a0,2
    80002fe0:	e8ffd0ef          	jal	80000e6e <goto_priv>
    return *((volatile uint64_t*) addr);
    80002fe4:	4001b737          	lui	a4,0x4001b
    80002fe8:	070a                	slli	a4,a4,0x2
    80002fea:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    80002fee:	001007b7          	lui	a5,0x100
    80002ff2:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80002ff6:	07b2                	slli	a5,a5,0xc
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", check1 && check2);
    80002ff8:	0002b617          	auipc	a2,0x2b
    80002ffc:	87860613          	addi	a2,a2,-1928 # 8002d870 <__func__.0+0x850>
    80003000:	08200593          	li	a1,130
    80003004:	0002a517          	auipc	a0,0x2a
    80003008:	31450513          	addi	a0,a0,788 # 8002d318 <__func__.0+0x2f8>
    8000300c:	6380                	ld	s0,0(a5)
    8000300e:	5ad270ef          	jal	8002adba <printf>
    80003012:	0c998863          	beq	s3,s1,800030e2 <two_stage_translation_3+0x158>
    80003016:	0002a597          	auipc	a1,0x2a
    8000301a:	2da58593          	addi	a1,a1,730 # 8002d2f0 <__func__.0+0x2d0>
    8000301e:	0002a517          	auipc	a0,0x2a
    80003022:	31250513          	addi	a0,a0,786 # 8002d330 <__func__.0+0x310>
    80003026:	595270ef          	jal	8002adba <printf>
    8000302a:	0002a517          	auipc	a0,0x2a
    8000302e:	30e50513          	addi	a0,a0,782 # 8002d338 <__func__.0+0x318>
    80003032:	589270ef          	jal	8002adba <printf>
    80003036:	02900513          	li	a0,41
    8000303a:	26f260ef          	jal	80029aa8 <putchar>
    8000303e:	4529                	li	a0,10
    80003040:	269260ef          	jal	80029aa8 <putchar>
    80003044:	4401                	li	s0,0
    
    goto_priv(PRIV_VS);
    80003046:	4509                	li	a0,2
    80003048:	e27fd0ef          	jal	80000e6e <goto_priv>

    vspt_switch();
    8000304c:	ccffd0ef          	jal	80000d1a <vspt_switch>
    80003050:	001007b7          	lui	a5,0x100
    80003054:	4001b737          	lui	a4,0x4001b
    80003058:	070a                	slli	a4,a4,0x2
    8000305a:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    8000305e:	07b2                	slli	a5,a5,0xc
    80003060:	6304                	ld	s1,0(a4)
    check1 = read64(vaddr1) == 0x11;
    check2 = read64(vaddr2) == 0x22;   
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    80003062:	0002b617          	auipc	a2,0x2b
    80003066:	98e60613          	addi	a2,a2,-1650 # 8002d9f0 <__func__.0+0x9d0>
    8000306a:	08200593          	li	a1,130
    8000306e:	0002a517          	auipc	a0,0x2a
    80003072:	2aa50513          	addi	a0,a0,682 # 8002d318 <__func__.0+0x2f8>
    80003076:	0007b903          	ld	s2,0(a5)
    8000307a:	541270ef          	jal	8002adba <printf>
    8000307e:	47c5                	li	a5,17
    80003080:	0af48d63          	beq	s1,a5,8000313a <two_stage_translation_3+0x1b0>
    80003084:	0002a597          	auipc	a1,0x2a
    80003088:	26c58593          	addi	a1,a1,620 # 8002d2f0 <__func__.0+0x2d0>
    8000308c:	0002a517          	auipc	a0,0x2a
    80003090:	2a450513          	addi	a0,a0,676 # 8002d330 <__func__.0+0x310>
    80003094:	527270ef          	jal	8002adba <printf>
    80003098:	0002a517          	auipc	a0,0x2a
    8000309c:	2a050513          	addi	a0,a0,672 # 8002d338 <__func__.0+0x318>
    800030a0:	51b270ef          	jal	8002adba <printf>
    800030a4:	02900513          	li	a0,41
    800030a8:	201260ef          	jal	80029aa8 <putchar>
    800030ac:	4529                	li	a0,10
    800030ae:	1fb260ef          	jal	80029aa8 <putchar>
    800030b2:	4401                	li	s0,0

    TEST_END();
    800030b4:	0002a597          	auipc	a1,0x2a
    800030b8:	23c58593          	addi	a1,a1,572 # 8002d2f0 <__func__.0+0x2d0>
    800030bc:	0002a517          	auipc	a0,0x2a
    800030c0:	2dc50513          	addi	a0,a0,732 # 8002d398 <__func__.0+0x378>
    800030c4:	4f7270ef          	jal	8002adba <printf>
    800030c8:	4511                	li	a0,4
    800030ca:	da5fd0ef          	jal	80000e6e <goto_priv>
    800030ce:	ebcfe0ef          	jal	8000178a <reset_state>
}
    800030d2:	70a2                	ld	ra,40(sp)
    800030d4:	8522                	mv	a0,s0
    800030d6:	7402                	ld	s0,32(sp)
    800030d8:	64e2                	ld	s1,24(sp)
    800030da:	6942                	ld	s2,16(sp)
    800030dc:	69a2                	ld	s3,8(sp)
    800030de:	6145                	addi	sp,sp,48
    800030e0:	8082                	ret
    TEST_ASSERT("vs gets right values", check1 && check2);
    800030e2:	03240e63          	beq	s0,s2,8000311e <two_stage_translation_3+0x194>
    800030e6:	0002a597          	auipc	a1,0x2a
    800030ea:	20a58593          	addi	a1,a1,522 # 8002d2f0 <__func__.0+0x2d0>
    800030ee:	0002a517          	auipc	a0,0x2a
    800030f2:	24250513          	addi	a0,a0,578 # 8002d330 <__func__.0+0x310>
    800030f6:	4c5270ef          	jal	8002adba <printf>
    800030fa:	0002a517          	auipc	a0,0x2a
    800030fe:	23e50513          	addi	a0,a0,574 # 8002d338 <__func__.0+0x318>
    80003102:	4b9270ef          	jal	8002adba <printf>
    80003106:	02900513          	li	a0,41
    8000310a:	19f260ef          	jal	80029aa8 <putchar>
    8000310e:	4529                	li	a0,10
    80003110:	199260ef          	jal	80029aa8 <putchar>
    80003114:	fde40413          	addi	s0,s0,-34
    80003118:	00143413          	seqz	s0,s0
    8000311c:	b72d                	j	80003046 <two_stage_translation_3+0xbc>
    8000311e:	0002a597          	auipc	a1,0x2a
    80003122:	1c258593          	addi	a1,a1,450 # 8002d2e0 <__func__.0+0x2c0>
    80003126:	0002a517          	auipc	a0,0x2a
    8000312a:	20a50513          	addi	a0,a0,522 # 8002d330 <__func__.0+0x310>
    8000312e:	48d270ef          	jal	8002adba <printf>
    80003132:	4529                	li	a0,10
    80003134:	175260ef          	jal	80029aa8 <putchar>
    80003138:	bff1                	j	80003114 <two_stage_translation_3+0x18a>
    TEST_ASSERT("vs do not change values after changing 1st stage pt when not execute sfence", check1 && check2);
    8000313a:	02200793          	li	a5,34
    8000313e:	f4f913e3          	bne	s2,a5,80003084 <two_stage_translation_3+0xfa>
    80003142:	0002a597          	auipc	a1,0x2a
    80003146:	19e58593          	addi	a1,a1,414 # 8002d2e0 <__func__.0+0x2c0>
    8000314a:	0002a517          	auipc	a0,0x2a
    8000314e:	1e650513          	addi	a0,a0,486 # 8002d330 <__func__.0+0x310>
    80003152:	469270ef          	jal	8002adba <printf>
    80003156:	4529                	li	a0,10
    80003158:	151260ef          	jal	80029aa8 <putchar>
    8000315c:	d839                	beqz	s0,800030b2 <two_stage_translation_3+0x128>
    8000315e:	4405                	li	s0,1
    TEST_END();
    80003160:	0002a597          	auipc	a1,0x2a
    80003164:	18058593          	addi	a1,a1,384 # 8002d2e0 <__func__.0+0x2c0>
    80003168:	bf91                	j	800030bc <two_stage_translation_3+0x132>

000000008000316a <second_stage_only_translation>:

bool second_stage_only_translation(){
    8000316a:	7179                	addi	sp,sp,-48

    /**
     * Test only 2nd stage translation.
     */
    TEST_START();
    8000316c:	00028597          	auipc	a1,0x28
    80003170:	21458593          	addi	a1,a1,532 # 8002b380 <__func__.15>
    80003174:	0002a517          	auipc	a0,0x2a
    80003178:	18c50513          	addi	a0,a0,396 # 8002d300 <__func__.0+0x2e0>
bool second_stage_only_translation(){
    8000317c:	f406                	sd	ra,40(sp)
    8000317e:	f022                	sd	s0,32(sp)
    80003180:	e84a                	sd	s2,16(sp)
    80003182:	ec26                	sd	s1,24(sp)
    80003184:	e44e                	sd	s3,8(sp)
    80003186:	e052                	sd	s4,0(sp)
    TEST_START();
    80003188:	433270ef          	jal	8002adba <printf>
    8000318c:	4529                	li	a0,10
    8000318e:	11b260ef          	jal	80029aa8 <putchar>
    *((volatile uint64_t*) addr) = val;
    80003192:	2201b737          	lui	a4,0x2201b
    80003196:	000887b7          	lui	a5,0x88
    8000319a:	070a                	slli	a4,a4,0x2
    8000319c:	4445                	li	s0,17
    8000319e:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800031a2:	e300                	sd	s0,0(a4)
    800031a4:	07b2                	slli	a5,a5,0xc
    800031a6:	02200913          	li	s2,34
    800031aa:	0127b023          	sd	s2,0(a5)
    uintptr_t vaddr2 = vs_page_base(SWITCH2);
    write64(addr1, 0x11);
    write64(addr2, 0x22);   


    CSRS(medeleg, (1 << CAUSE_LGPF) | (1 << CAUSE_SGPF));
    800031ae:	00a007b7          	lui	a5,0xa00
    800031b2:	3027a073          	csrs	medeleg,a5

    /**
     * Setup hyp page_tables.
     */
    goto_priv(PRIV_HS);
    800031b6:	450d                	li	a0,3
    800031b8:	cb7fd0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800031bc:	c24fd0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800031c0:	fbcfd0ef          	jal	8000097c <hpt_init>
    
    goto_priv(PRIV_VS);
    800031c4:	4509                	li	a0,2
    800031c6:	ca9fd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800031ca:	ba9fd0ef          	jal	80000d72 <test_setup_except_function>
    return *((volatile uint64_t*) addr);
    800031ce:	001007b7          	lui	a5,0x100
    800031d2:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    800031d6:	4001b737          	lui	a4,0x4001b
    800031da:	07b2                	slli	a5,a5,0xc
    800031dc:	070a                	slli	a4,a4,0x2
    bool check1 = read64(vaddr1) == 0x11;
    bool check2 = read64(vaddr2) == 0x22;
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    800031de:	0002a617          	auipc	a2,0x2a
    800031e2:	69260613          	addi	a2,a2,1682 # 8002d870 <__func__.0+0x850>
    800031e6:	08200593          	li	a1,130
    800031ea:	0002a517          	auipc	a0,0x2a
    800031ee:	12e50513          	addi	a0,a0,302 # 8002d318 <__func__.0+0x2f8>
    800031f2:	00073983          	ld	s3,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800031f6:	0007ba03          	ld	s4,0(a5)
    800031fa:	3c1270ef          	jal	8002adba <printf>
    800031fe:	0004e797          	auipc	a5,0x4e
    80003202:	e137c783          	lbu	a5,-493(a5) # 80051011 <excpt+0x1>
    80003206:	0004e497          	auipc	s1,0x4e
    8000320a:	e0a48493          	addi	s1,s1,-502 # 80051010 <excpt>
    8000320e:	ef91                	bnez	a5,8000322a <second_stage_only_translation+0xc0>
    80003210:	2a898663          	beq	s3,s0,800034bc <second_stage_only_translation+0x352>
    80003214:	0002a597          	auipc	a1,0x2a
    80003218:	0dc58593          	addi	a1,a1,220 # 8002d2f0 <__func__.0+0x2d0>
    8000321c:	0002a517          	auipc	a0,0x2a
    80003220:	11450513          	addi	a0,a0,276 # 8002d330 <__func__.0+0x310>
    80003224:	397270ef          	jal	8002adba <printf>
    80003228:	a01d                	j	8000324e <second_stage_only_translation+0xe4>
    8000322a:	0002a597          	auipc	a1,0x2a
    8000322e:	0c658593          	addi	a1,a1,198 # 8002d2f0 <__func__.0+0x2d0>
    80003232:	0002a517          	auipc	a0,0x2a
    80003236:	0fe50513          	addi	a0,a0,254 # 8002d330 <__func__.0+0x310>
    8000323a:	381270ef          	jal	8002adba <printf>
    8000323e:	0004e797          	auipc	a5,0x4e
    80003242:	dd37c783          	lbu	a5,-557(a5) # 80051011 <excpt+0x1>
    80003246:	2a079f63          	bnez	a5,80003504 <second_stage_only_translation+0x39a>
    8000324a:	32898f63          	beq	s3,s0,80003588 <second_stage_only_translation+0x41e>
    8000324e:	0002a517          	auipc	a0,0x2a
    80003252:	0ea50513          	addi	a0,a0,234 # 8002d338 <__func__.0+0x318>
    80003256:	365270ef          	jal	8002adba <printf>
    8000325a:	02900513          	li	a0,41
    8000325e:	04b260ef          	jal	80029aa8 <putchar>
    80003262:	4529                	li	a0,10
    80003264:	045260ef          	jal	80029aa8 <putchar>
    80003268:	4401                	li	s0,0

    goto_priv(PRIV_HS);
    8000326a:	450d                	li	a0,3
    8000326c:	c03fd0ef          	jal	80000e6e <goto_priv>
    hpt_switch();       //在nemu中，执行read64没有变，执行hlvd变化了
    80003270:	acdfd0ef          	jal	80000d3c <hpt_switch>
    asm volatile(
    80003274:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80003278:	62000073          	.insn	4, 0x62000073
    hfence(); //l2tlb
    goto_priv(PRIV_VS);
    8000327c:	4509                	li	a0,2
    8000327e:	bf1fd0ef          	jal	80000e6e <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80003282:	12000073          	sfence.vma
    sfence(); //l1tlb
    TEST_SETUP_EXCEPT();
    80003286:	aedfd0ef          	jal	80000d72 <test_setup_except_function>
    8000328a:	001007b7          	lui	a5,0x100
    8000328e:	06d78793          	addi	a5,a5,109 # 10006d <STACK_SIZE+0x6d>
    80003292:	4001b737          	lui	a4,0x4001b
    80003296:	07b2                	slli	a5,a5,0xc
    80003298:	070a                	slli	a4,a4,0x2
    check1 = read64(vaddr1) == 0x22;
    check2 = read64(vaddr2) == 0x11;   
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    8000329a:	0002a617          	auipc	a2,0x2a
    8000329e:	7a660613          	addi	a2,a2,1958 # 8002da40 <__func__.0+0xa20>
    800032a2:	08200593          	li	a1,130
    800032a6:	0002a517          	auipc	a0,0x2a
    800032aa:	07250513          	addi	a0,a0,114 # 8002d318 <__func__.0+0x2f8>
    800032ae:	00073903          	ld	s2,0(a4) # 4001b000 <STACK_SIZE+0x3ff1b000>
    800032b2:	0007b983          	ld	s3,0(a5)
    800032b6:	305270ef          	jal	8002adba <printf>
    800032ba:	0004e797          	auipc	a5,0x4e
    800032be:	d577c783          	lbu	a5,-681(a5) # 80051011 <excpt+0x1>
    800032c2:	18079363          	bnez	a5,80003448 <second_stage_only_translation+0x2de>
    800032c6:	02200793          	li	a5,34
    800032ca:	28f90b63          	beq	s2,a5,80003560 <second_stage_only_translation+0x3f6>
    800032ce:	0002a597          	auipc	a1,0x2a
    800032d2:	02258593          	addi	a1,a1,34 # 8002d2f0 <__func__.0+0x2d0>
    800032d6:	0002a517          	auipc	a0,0x2a
    800032da:	05a50513          	addi	a0,a0,90 # 8002d330 <__func__.0+0x310>
    800032de:	2dd270ef          	jal	8002adba <printf>
    800032e2:	0002a517          	auipc	a0,0x2a
    800032e6:	05650513          	addi	a0,a0,86 # 8002d338 <__func__.0+0x318>
    800032ea:	2d1270ef          	jal	8002adba <printf>
    800032ee:	02900513          	li	a0,41
    800032f2:	7b6260ef          	jal	80029aa8 <putchar>
    800032f6:	4529                	li	a0,10
    800032f8:	7b0260ef          	jal	80029aa8 <putchar>
    800032fc:	c811                	beqz	s0,80003310 <second_stage_only_translation+0x1a6>
    800032fe:	0004e797          	auipc	a5,0x4e
    80003302:	d137c783          	lbu	a5,-749(a5) # 80051011 <excpt+0x1>
    80003306:	e789                	bnez	a5,80003310 <second_stage_only_translation+0x1a6>
    80003308:	02200793          	li	a5,34
    8000330c:	18f90063          	beq	s2,a5,8000348c <second_stage_only_translation+0x322>
    80003310:	4401                	li	s0,0

    TEST_SETUP_EXCEPT();
    80003312:	a61fd0ef          	jal	80000d72 <test_setup_except_function>
    80003316:	001007b7          	lui	a5,0x100
    8000331a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000331e:	07b2                	slli	a5,a5,0xc
    80003320:	639c                	ld	a5,0(a5)
    (void) read64(vs_page_base(VSRWX_GI));  
    TEST_ASSERT(
    80003322:	08200593          	li	a1,130
    80003326:	0002a617          	auipc	a2,0x2a
    8000332a:	74260613          	addi	a2,a2,1858 # 8002da68 <__func__.0+0xa48>
    8000332e:	0002a517          	auipc	a0,0x2a
    80003332:	fea50513          	addi	a0,a0,-22 # 8002d318 <__func__.0+0x2f8>
    80003336:	285270ef          	jal	8002adba <printf>
    8000333a:	0004e797          	auipc	a5,0x4e
    8000333e:	cd77c783          	lbu	a5,-809(a5) # 80051011 <excpt+0x1>
    80003342:	0002a597          	auipc	a1,0x2a
    80003346:	fae58593          	addi	a1,a1,-82 # 8002d2f0 <__func__.0+0x2d0>
    8000334a:	c789                	beqz	a5,80003354 <second_stage_only_translation+0x1ea>
    8000334c:	6498                	ld	a4,8(s1)
    8000334e:	47d5                	li	a5,21
    80003350:	1ef70863          	beq	a4,a5,80003540 <second_stage_only_translation+0x3d6>
    80003354:	0002a517          	auipc	a0,0x2a
    80003358:	fdc50513          	addi	a0,a0,-36 # 8002d330 <__func__.0+0x310>
    8000335c:	25f270ef          	jal	8002adba <printf>
    80003360:	0004e797          	auipc	a5,0x4e
    80003364:	cb17c783          	lbu	a5,-847(a5) # 80051011 <excpt+0x1>
    80003368:	c789                	beqz	a5,80003372 <second_stage_only_translation+0x208>
    8000336a:	6498                	ld	a4,8(s1)
    8000336c:	47d5                	li	a5,21
    8000336e:	12f70f63          	beq	a4,a5,800034ac <second_stage_only_translation+0x342>
    80003372:	0002a517          	auipc	a0,0x2a
    80003376:	fc650513          	addi	a0,a0,-58 # 8002d338 <__func__.0+0x318>
    8000337a:	241270ef          	jal	8002adba <printf>
    8000337e:	02900513          	li	a0,41
    80003382:	726260ef          	jal	80029aa8 <putchar>
    80003386:	4529                	li	a0,10
    80003388:	720260ef          	jal	80029aa8 <putchar>
    8000338c:	c819                	beqz	s0,800033a2 <second_stage_only_translation+0x238>
    8000338e:	0004e797          	auipc	a5,0x4e
    80003392:	c837c783          	lbu	a5,-893(a5) # 80051011 <excpt+0x1>
    80003396:	4401                	li	s0,0
    80003398:	c789                	beqz	a5,800033a2 <second_stage_only_translation+0x238>
    8000339a:	6498                	ld	a4,8(s1)
    8000339c:	47d5                	li	a5,21
    8000339e:	18f70963          	beq	a4,a5,80003530 <second_stage_only_translation+0x3c6>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        excpt.priv == PRIV_HS
    );

    TEST_SETUP_EXCEPT();
    800033a2:	9d1fd0ef          	jal	80000d72 <test_setup_except_function>
    800033a6:	200007b7          	lui	a5,0x20000
    800033aa:	17fd                	addi	a5,a5,-1 # 1fffffff <STACK_SIZE+0x1fefffff>
    800033ac:	07b2                	slli	a5,a5,0xc
    800033ae:	639c                	ld	a5,0(a5)
    read64(vs_page_base_limit(TOP));
    TEST_ASSERT(
    800033b0:	08200593          	li	a1,130
    800033b4:	0002a617          	auipc	a2,0x2a
    800033b8:	6dc60613          	addi	a2,a2,1756 # 8002da90 <__func__.0+0xa70>
    800033bc:	0002a517          	auipc	a0,0x2a
    800033c0:	f5c50513          	addi	a0,a0,-164 # 8002d318 <__func__.0+0x2f8>
    800033c4:	1f7270ef          	jal	8002adba <printf>
    800033c8:	0004e797          	auipc	a5,0x4e
    800033cc:	c497c783          	lbu	a5,-951(a5) # 80051011 <excpt+0x1>
    800033d0:	0002a597          	auipc	a1,0x2a
    800033d4:	f2058593          	addi	a1,a1,-224 # 8002d2f0 <__func__.0+0x2d0>
    800033d8:	e789                	bnez	a5,800033e2 <second_stage_only_translation+0x278>
    800033da:	0002a597          	auipc	a1,0x2a
    800033de:	f0658593          	addi	a1,a1,-250 # 8002d2e0 <__func__.0+0x2c0>
    800033e2:	0002a517          	auipc	a0,0x2a
    800033e6:	f4e50513          	addi	a0,a0,-178 # 8002d330 <__func__.0+0x310>
    800033ea:	1d1270ef          	jal	8002adba <printf>
    800033ee:	0004e797          	auipc	a5,0x4e
    800033f2:	c237c783          	lbu	a5,-989(a5) # 80051011 <excpt+0x1>
    800033f6:	e3c5                	bnez	a5,80003496 <second_stage_only_translation+0x32c>
    800033f8:	4529                	li	a0,10
    800033fa:	6ae260ef          	jal	80029aa8 <putchar>
    800033fe:	cc1d                	beqz	s0,8000343c <second_stage_only_translation+0x2d2>
    80003400:	0004e797          	auipc	a5,0x4e
    80003404:	c117c783          	lbu	a5,-1007(a5) # 80051011 <excpt+0x1>
    80003408:	eb95                	bnez	a5,8000343c <second_stage_only_translation+0x2d2>
    8000340a:	4405                	li	s0,1
    //     "access top of guest pa space with high bits =/= 0", 
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_LGPF
    // ); 

    TEST_END();
    8000340c:	0002a597          	auipc	a1,0x2a
    80003410:	ed458593          	addi	a1,a1,-300 # 8002d2e0 <__func__.0+0x2c0>
    80003414:	0002a517          	auipc	a0,0x2a
    80003418:	f8450513          	addi	a0,a0,-124 # 8002d398 <__func__.0+0x378>
    8000341c:	19f270ef          	jal	8002adba <printf>
    80003420:	4511                	li	a0,4
    80003422:	a4dfd0ef          	jal	80000e6e <goto_priv>
    80003426:	b64fe0ef          	jal	8000178a <reset_state>
}
    8000342a:	70a2                	ld	ra,40(sp)
    8000342c:	8522                	mv	a0,s0
    8000342e:	7402                	ld	s0,32(sp)
    80003430:	64e2                	ld	s1,24(sp)
    80003432:	6942                	ld	s2,16(sp)
    80003434:	69a2                	ld	s3,8(sp)
    80003436:	6a02                	ld	s4,0(sp)
    80003438:	6145                	addi	sp,sp,48
    8000343a:	8082                	ret
    TEST_ASSERT(
    8000343c:	4401                	li	s0,0
    TEST_END();
    8000343e:	0002a597          	auipc	a1,0x2a
    80003442:	eb258593          	addi	a1,a1,-334 # 8002d2f0 <__func__.0+0x2d0>
    80003446:	b7f9                	j	80003414 <second_stage_only_translation+0x2aa>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003448:	0002a597          	auipc	a1,0x2a
    8000344c:	ea858593          	addi	a1,a1,-344 # 8002d2f0 <__func__.0+0x2d0>
    80003450:	0002a517          	auipc	a0,0x2a
    80003454:	ee050513          	addi	a0,a0,-288 # 8002d330 <__func__.0+0x310>
    80003458:	163270ef          	jal	8002adba <printf>
    8000345c:	0004e797          	auipc	a5,0x4e
    80003460:	bb57c783          	lbu	a5,-1099(a5) # 80051011 <excpt+0x1>
    80003464:	e6079fe3          	bnez	a5,800032e2 <second_stage_only_translation+0x178>
    80003468:	02200793          	li	a5,34
    8000346c:	e6f91be3          	bne	s2,a5,800032e2 <second_stage_only_translation+0x178>
    80003470:	47c5                	li	a5,17
    80003472:	e6f998e3          	bne	s3,a5,800032e2 <second_stage_only_translation+0x178>
    80003476:	4529                	li	a0,10
    80003478:	630260ef          	jal	80029aa8 <putchar>
    8000347c:	e8040ae3          	beqz	s0,80003310 <second_stage_only_translation+0x1a6>
    80003480:	0004e797          	auipc	a5,0x4e
    80003484:	b917c783          	lbu	a5,-1135(a5) # 80051011 <excpt+0x1>
    80003488:	e80794e3          	bnez	a5,80003310 <second_stage_only_translation+0x1a6>
    8000348c:	fef98413          	addi	s0,s3,-17
    80003490:	00143413          	seqz	s0,s0
    80003494:	bdbd                	j	80003312 <second_stage_only_translation+0x1a8>
    TEST_ASSERT(
    80003496:	0002a517          	auipc	a0,0x2a
    8000349a:	ea250513          	addi	a0,a0,-350 # 8002d338 <__func__.0+0x318>
    8000349e:	11d270ef          	jal	8002adba <printf>
    800034a2:	02900513          	li	a0,41
    800034a6:	602260ef          	jal	80029aa8 <putchar>
    800034aa:	b7b9                	j	800033f8 <second_stage_only_translation+0x28e>
    TEST_ASSERT(
    800034ac:	0004e717          	auipc	a4,0x4e
    800034b0:	b6872703          	lw	a4,-1176(a4) # 80051014 <excpt+0x4>
    800034b4:	478d                	li	a5,3
    800034b6:	eaf71ee3          	bne	a4,a5,80003372 <second_stage_only_translation+0x208>
    800034ba:	b5f1                	j	80003386 <second_stage_only_translation+0x21c>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    800034bc:	0f2a0263          	beq	s4,s2,800035a0 <second_stage_only_translation+0x436>
    800034c0:	0002a597          	auipc	a1,0x2a
    800034c4:	e3058593          	addi	a1,a1,-464 # 8002d2f0 <__func__.0+0x2d0>
    800034c8:	0002a517          	auipc	a0,0x2a
    800034cc:	e6850513          	addi	a0,a0,-408 # 8002d330 <__func__.0+0x310>
    800034d0:	0eb270ef          	jal	8002adba <printf>
    800034d4:	0002a517          	auipc	a0,0x2a
    800034d8:	e6450513          	addi	a0,a0,-412 # 8002d338 <__func__.0+0x318>
    800034dc:	0df270ef          	jal	8002adba <printf>
    800034e0:	02900513          	li	a0,41
    800034e4:	5c4260ef          	jal	80029aa8 <putchar>
    800034e8:	4529                	li	a0,10
    800034ea:	5be260ef          	jal	80029aa8 <putchar>
    800034ee:	0004e797          	auipc	a5,0x4e
    800034f2:	b237c783          	lbu	a5,-1245(a5) # 80051011 <excpt+0x1>
    800034f6:	d60799e3          	bnez	a5,80003268 <second_stage_only_translation+0xfe>
    800034fa:	fdea0413          	addi	s0,s4,-34
    800034fe:	00143413          	seqz	s0,s0
    80003502:	b3a5                	j	8000326a <second_stage_only_translation+0x100>
    80003504:	0002a517          	auipc	a0,0x2a
    80003508:	e3450513          	addi	a0,a0,-460 # 8002d338 <__func__.0+0x318>
    8000350c:	0af270ef          	jal	8002adba <printf>
    80003510:	02900513          	li	a0,41
    80003514:	594260ef          	jal	80029aa8 <putchar>
    80003518:	4529                	li	a0,10
    8000351a:	58e260ef          	jal	80029aa8 <putchar>
    8000351e:	0004e797          	auipc	a5,0x4e
    80003522:	af37c783          	lbu	a5,-1293(a5) # 80051011 <excpt+0x1>
    80003526:	d40791e3          	bnez	a5,80003268 <second_stage_only_translation+0xfe>
    8000352a:	fc8988e3          	beq	s3,s0,800034fa <second_stage_only_translation+0x390>
    8000352e:	bb2d                	j	80003268 <second_stage_only_translation+0xfe>
    TEST_ASSERT(
    80003530:	0004e417          	auipc	s0,0x4e
    80003534:	ae442403          	lw	s0,-1308(s0) # 80051014 <excpt+0x4>
    80003538:	1475                	addi	s0,s0,-3
    8000353a:	00143413          	seqz	s0,s0
    8000353e:	b595                	j	800033a2 <second_stage_only_translation+0x238>
    80003540:	0004e717          	auipc	a4,0x4e
    80003544:	ad472703          	lw	a4,-1324(a4) # 80051014 <excpt+0x4>
    80003548:	478d                	li	a5,3
    8000354a:	0002a597          	auipc	a1,0x2a
    8000354e:	d9658593          	addi	a1,a1,-618 # 8002d2e0 <__func__.0+0x2c0>
    80003552:	e0f701e3          	beq	a4,a5,80003354 <second_stage_only_translation+0x1ea>
    80003556:	0002a597          	auipc	a1,0x2a
    8000355a:	d9a58593          	addi	a1,a1,-614 # 8002d2f0 <__func__.0+0x2d0>
    8000355e:	bbdd                	j	80003354 <second_stage_only_translation+0x1ea>
    TEST_ASSERT("vs gets right values after changing pt", excpt.triggered == false && check1 && check2);
    80003560:	47c5                	li	a5,17
    80003562:	d6f996e3          	bne	s3,a5,800032ce <second_stage_only_translation+0x164>
    80003566:	0002a597          	auipc	a1,0x2a
    8000356a:	d7a58593          	addi	a1,a1,-646 # 8002d2e0 <__func__.0+0x2c0>
    8000356e:	0002a517          	auipc	a0,0x2a
    80003572:	dc250513          	addi	a0,a0,-574 # 8002d330 <__func__.0+0x310>
    80003576:	045270ef          	jal	8002adba <printf>
    8000357a:	0004e797          	auipc	a5,0x4e
    8000357e:	a977c783          	lbu	a5,-1385(a5) # 80051011 <excpt+0x1>
    80003582:	ee078ae3          	beqz	a5,80003476 <second_stage_only_translation+0x30c>
    80003586:	bbb1                	j	800032e2 <second_stage_only_translation+0x178>
    TEST_ASSERT("vs gets right values", excpt.triggered == false && check1 && check2);
    80003588:	f52a16e3          	bne	s4,s2,800034d4 <second_stage_only_translation+0x36a>
    8000358c:	4529                	li	a0,10
    8000358e:	51a260ef          	jal	80029aa8 <putchar>
    80003592:	0004e417          	auipc	s0,0x4e
    80003596:	a7f44403          	lbu	s0,-1409(s0) # 80051011 <excpt+0x1>
    8000359a:	00144413          	xori	s0,s0,1
    8000359e:	b1f1                	j	8000326a <second_stage_only_translation+0x100>
    800035a0:	0002a597          	auipc	a1,0x2a
    800035a4:	d4058593          	addi	a1,a1,-704 # 8002d2e0 <__func__.0+0x2c0>
    800035a8:	0002a517          	auipc	a0,0x2a
    800035ac:	d8850513          	addi	a0,a0,-632 # 8002d330 <__func__.0+0x310>
    800035b0:	00b270ef          	jal	8002adba <printf>
    800035b4:	0004e797          	auipc	a5,0x4e
    800035b8:	a5d7c783          	lbu	a5,-1443(a5) # 80051011 <excpt+0x1>
    800035bc:	dbe1                	beqz	a5,8000358c <second_stage_only_translation+0x422>
    800035be:	bf19                	j	800034d4 <second_stage_only_translation+0x36a>

00000000800035c0 <m_and_hs_using_vs_access_1>:
    );

}


bool m_and_hs_using_vs_access_1(){
    800035c0:	7179                	addi	sp,sp,-48

    uint64_t val, valu;
    uintptr_t vaddr = vs_page_base(SCRATCHPAD);
    uintptr_t addr;

    TEST_START();
    800035c2:	00028597          	auipc	a1,0x28
    800035c6:	dde58593          	addi	a1,a1,-546 # 8002b3a0 <__func__.13>
    800035ca:	0002a517          	auipc	a0,0x2a
    800035ce:	d3650513          	addi	a0,a0,-714 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_1(){
    800035d2:	f406                	sd	ra,40(sp)
    800035d4:	ec26                	sd	s1,24(sp)
    800035d6:	f022                	sd	s0,32(sp)
    800035d8:	e84a                	sd	s2,16(sp)
    800035da:	e44e                	sd	s3,8(sp)
    800035dc:	e052                	sd	s4,0(sp)
    TEST_START();
    800035de:	7dc270ef          	jal	8002adba <printf>
    800035e2:	4529                	li	a0,10
    800035e4:	4c4260ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    800035e8:	ff9fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800035ec:	b90fd0ef          	jal	8000097c <hpt_init>
    vspt_init();
    800035f0:	932fd0ef          	jal	80000722 <vspt_init>

    TEST_SETUP_EXCEPT();
    800035f4:	f7efd0ef          	jal	80000d72 <test_setup_except_function>
    if(curr_priv != PRIV_M){
    800035f8:	00037497          	auipc	s1,0x37
    800035fc:	2dc4a483          	lw	s1,732(s1) # 8003a8d4 <curr_priv>
    80003600:	4791                	li	a5,4
    80003602:	02f48763          	beq	s1,a5,80003630 <m_and_hs_using_vs_access_1+0x70>
        ERROR("trying to write as mprv from low privilege");
    80003606:	0002a517          	auipc	a0,0x2a
    8000360a:	4c250513          	addi	a0,a0,1218 # 8002dac8 <__func__.0+0xaa8>
    8000360e:	7ac270ef          	jal	8002adba <printf>
    80003612:	11100613          	li	a2,273
    80003616:	00028597          	auipc	a1,0x28
    8000361a:	daa58593          	addi	a1,a1,-598 # 8002b3c0 <__func__.12>
    8000361e:	0002a517          	auipc	a0,0x2a
    80003622:	e6a50513          	addi	a0,a0,-406 # 8002d488 <__func__.0+0x468>
    80003626:	794270ef          	jal	8002adba <printf>
    8000362a:	4501                	li	a0,0
    8000362c:	344270ef          	jal	8002a970 <exit>
    asm volatile(
    80003630:	01108437          	lui	s0,0x1108
    80003634:	ec140413          	addi	s0,s0,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    80003638:	00100937          	lui	s2,0x100
    set_prev_priv(priv);
    8000363c:	4509                	li	a0,2
    asm volatile(
    8000363e:	0442                	slli	s0,s0,0x10
    80003640:	06b90913          	addi	s2,s2,107 # 10006b <STACK_SIZE+0x6b>
    set_prev_priv(priv);
    80003644:	f4afd0ef          	jal	80000d8e <set_prev_priv>
    asm volatile(
    80003648:	1439                	addi	s0,s0,-18
    8000364a:	0932                	slli	s2,s2,0xc
    8000364c:	000209b7          	lui	s3,0x20
    80003650:	3009a073          	csrs	mstatus,s3
    80003654:	00893023          	sd	s0,0(s2)
    80003658:	3009b073          	csrc	mstatus,s3
    if(curr_priv != PRIV_M){
    8000365c:	00037797          	auipc	a5,0x37
    80003660:	2787a783          	lw	a5,632(a5) # 8003a8d4 <curr_priv>
    80003664:	02978763          	beq	a5,s1,80003692 <m_and_hs_using_vs_access_1+0xd2>
        ERROR("trying to read as mprv from low privilege");
    80003668:	0002a517          	auipc	a0,0x2a
    8000366c:	4a050513          	addi	a0,a0,1184 # 8002db08 <__func__.0+0xae8>
    80003670:	74a270ef          	jal	8002adba <printf>
    80003674:	0fe00613          	li	a2,254
    80003678:	00028597          	auipc	a1,0x28
    8000367c:	d5858593          	addi	a1,a1,-680 # 8002b3d0 <__func__.11>
    80003680:	0002a517          	auipc	a0,0x2a
    80003684:	e0850513          	addi	a0,a0,-504 # 8002d488 <__func__.0+0x468>
    80003688:	732270ef          	jal	8002adba <printf>
    8000368c:	4501                	li	a0,0
    8000368e:	2e2270ef          	jal	8002a970 <exit>
    set_prev_priv(priv);
    80003692:	4509                	li	a0,2
    80003694:	efafd0ef          	jal	80000d8e <set_prev_priv>
    asm volatile(
    80003698:	3009a073          	csrs	mstatus,s3
    8000369c:	00093483          	ld	s1,0(s2)
    800036a0:	3009b073          	csrc	mstatus,s3
    write64_mprv(PRIV_VS, vaddr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine sets mprv to access vs space",
    800036a4:	0002a617          	auipc	a2,0x2a
    800036a8:	4a460613          	addi	a2,a2,1188 # 8002db48 <__func__.0+0xb28>
    800036ac:	08200593          	li	a1,130
    800036b0:	0002a517          	auipc	a0,0x2a
    800036b4:	c6850513          	addi	a0,a0,-920 # 8002d318 <__func__.0+0x2f8>
    800036b8:	702270ef          	jal	8002adba <printf>
    800036bc:	0004e797          	auipc	a5,0x4e
    800036c0:	9557c783          	lbu	a5,-1707(a5) # 80051011 <excpt+0x1>
    800036c4:	2a079663          	bnez	a5,80003970 <m_and_hs_using_vs_access_1+0x3b0>
    800036c8:	44848763          	beq	s1,s0,80003b16 <m_and_hs_using_vs_access_1+0x556>
    800036cc:	0002a597          	auipc	a1,0x2a
    800036d0:	c2458593          	addi	a1,a1,-988 # 8002d2f0 <__func__.0+0x2d0>
    800036d4:	0002a517          	auipc	a0,0x2a
    800036d8:	c5c50513          	addi	a0,a0,-932 # 8002d330 <__func__.0+0x310>
    800036dc:	6de270ef          	jal	8002adba <printf>
    800036e0:	0002a517          	auipc	a0,0x2a
    800036e4:	c5850513          	addi	a0,a0,-936 # 8002d338 <__func__.0+0x318>
    800036e8:	6d2270ef          	jal	8002adba <printf>
    800036ec:	02900513          	li	a0,41
    800036f0:	3b8260ef          	jal	80029aa8 <putchar>
    800036f4:	4529                	li	a0,10
    800036f6:	3b2260ef          	jal	80029aa8 <putchar>
    800036fa:	0004e797          	auipc	a5,0x4e
    800036fe:	9177c783          	lbu	a5,-1769(a5) # 80051011 <excpt+0x1>
    80003702:	4901                	li	s2,0
    80003704:	eb91                	bnez	a5,80003718 <m_and_hs_using_vs_access_1+0x158>
    80003706:	011087b7          	lui	a5,0x1108
    8000370a:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    8000370e:	07c2                	slli	a5,a5,0x10
    80003710:	17b9                	addi	a5,a5,-18
    80003712:	8c9d                	sub	s1,s1,a5
    80003714:	0014b913          	seqz	s2,s1
        excpt.triggered == false && val == 0x1107ec0ffee
    );

    //TODO: test mprv to access hs space

    goto_priv(PRIV_HS);
    80003718:	450d                	li	a0,3
    8000371a:	f54fd0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8000371e:	4509                	li	a0,2
    80003720:	e6efd0ef          	jal	80000d8e <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003724:	e4efd0ef          	jal	80000d72 <test_setup_except_function>
        :: "r"(value), "r"(addr): "memory");
    return value;
}

static inline uint64_t hsvd(uintptr_t addr, uint64_t value){
    asm volatile(
    80003728:	37ab74b7          	lui	s1,0x37ab7
    8000372c:	001007b7          	lui	a5,0x100
    80003730:	048a                	slli	s1,s1,0x2
    80003732:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003736:	eef48493          	addi	s1,s1,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000373a:	07b2                	slli	a5,a5,0xc
    8000373c:	6e97c073          	.insn	4, 0x6e97c073
    asm volatile(
    80003740:	6c07c473          	.insn	4, 0x6c07c473
    hsvd(vaddr, 0xdeadbeef);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd",
    80003744:	0002a617          	auipc	a2,0x2a
    80003748:	42c60613          	addi	a2,a2,1068 # 8002db70 <__func__.0+0xb50>
    8000374c:	08200593          	li	a1,130
    80003750:	0002a517          	auipc	a0,0x2a
    80003754:	bc850513          	addi	a0,a0,-1080 # 8002d318 <__func__.0+0x2f8>
    80003758:	662270ef          	jal	8002adba <printf>
    8000375c:	0004e797          	auipc	a5,0x4e
    80003760:	8b57c783          	lbu	a5,-1867(a5) # 80051011 <excpt+0x1>
    80003764:	24079263          	bnez	a5,800039a8 <m_and_hs_using_vs_access_1+0x3e8>
    80003768:	3c940863          	beq	s0,s1,80003b38 <m_and_hs_using_vs_access_1+0x578>
    8000376c:	0002a597          	auipc	a1,0x2a
    80003770:	b8458593          	addi	a1,a1,-1148 # 8002d2f0 <__func__.0+0x2d0>
    80003774:	0002a517          	auipc	a0,0x2a
    80003778:	bbc50513          	addi	a0,a0,-1092 # 8002d330 <__func__.0+0x310>
    8000377c:	63e270ef          	jal	8002adba <printf>
    80003780:	0002a517          	auipc	a0,0x2a
    80003784:	bb850513          	addi	a0,a0,-1096 # 8002d338 <__func__.0+0x318>
    80003788:	632270ef          	jal	8002adba <printf>
    8000378c:	02900513          	li	a0,41
    80003790:	318260ef          	jal	80029aa8 <putchar>
    80003794:	4529                	li	a0,10
    80003796:	312260ef          	jal	80029aa8 <putchar>
    8000379a:	32091563          	bnez	s2,80003ac4 <m_and_hs_using_vs_access_1+0x504>
    8000379e:	4401                	li	s0,0
        excpt.triggered == false && val == 0xdeadbeef
    );

    TEST_SETUP_EXCEPT();
    800037a0:	dd2fd0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800037a4:	001007b7          	lui	a5,0x100
    800037a8:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800037ac:	07b2                	slli	a5,a5,0xc
    800037ae:	0ff00913          	li	s2,255
    800037b2:	6327c073          	.insn	4, 0x6327c073
    asm volatile(
    800037b6:	6007c9f3          	.insn	4, 0x6007c9f3
    asm volatile(
    800037ba:	6017c4f3          	.insn	4, 0x6017c4f3
    hsvb(vaddr, ((uint8_t)-1));
    val = hlvb(vaddr);
    valu = hlvbu(vaddr);
    TEST_ASSERT("hs hlvb vs hlvbu",
    800037be:	0002a617          	auipc	a2,0x2a
    800037c2:	3ba60613          	addi	a2,a2,954 # 8002db78 <__func__.0+0xb58>
    800037c6:	08200593          	li	a1,130
    800037ca:	0002a517          	auipc	a0,0x2a
    800037ce:	b4e50513          	addi	a0,a0,-1202 # 8002d318 <__func__.0+0x2f8>
    800037d2:	5e8270ef          	jal	8002adba <printf>
    800037d6:	0004e797          	auipc	a5,0x4e
    800037da:	83b7c783          	lbu	a5,-1989(a5) # 80051011 <excpt+0x1>
    800037de:	28079e63          	bnez	a5,80003a7a <m_and_hs_using_vs_access_1+0x4ba>
    800037e2:	57fd                	li	a5,-1
    800037e4:	30f98763          	beq	s3,a5,80003af2 <m_and_hs_using_vs_access_1+0x532>
    800037e8:	0002a597          	auipc	a1,0x2a
    800037ec:	b0858593          	addi	a1,a1,-1272 # 8002d2f0 <__func__.0+0x2d0>
    800037f0:	0002a517          	auipc	a0,0x2a
    800037f4:	b4050513          	addi	a0,a0,-1216 # 8002d330 <__func__.0+0x310>
    800037f8:	5c2270ef          	jal	8002adba <printf>
    800037fc:	0002a517          	auipc	a0,0x2a
    80003800:	b3c50513          	addi	a0,a0,-1220 # 8002d338 <__func__.0+0x318>
    80003804:	5b6270ef          	jal	8002adba <printf>
    80003808:	02900513          	li	a0,41
    8000380c:	29c260ef          	jal	80029aa8 <putchar>
    80003810:	4529                	li	a0,10
    80003812:	296260ef          	jal	80029aa8 <putchar>
    80003816:	c419                	beqz	s0,80003824 <m_and_hs_using_vs_access_1+0x264>
    80003818:	0004d797          	auipc	a5,0x4d
    8000381c:	7f97c783          	lbu	a5,2041(a5) # 80051011 <excpt+0x1>
    80003820:	2c078563          	beqz	a5,80003aea <m_and_hs_using_vs_access_1+0x52a>
    80003824:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint8_t)-1)
    );

    TEST_SETUP_EXCEPT();
    80003826:	d4cfd0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    8000382a:	001007b7          	lui	a5,0x100
    8000382e:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    80003832:	6941                	lui	s2,0x10
    80003834:	07b2                	slli	a5,a5,0xc
    80003836:	197d                	addi	s2,s2,-1 # ffff <_test_table_size+0xfffe>
    80003838:	6727c073          	.insn	4, 0x6727c073
    asm volatile(
    8000383c:	6407c9f3          	.insn	4, 0x6407c9f3
    asm volatile(
    80003840:	6417c4f3          	.insn	4, 0x6417c4f3
    hsvh(vaddr, ((uint16_t)-1));
    val = hlvh(vaddr);
    valu = hlvhu(vaddr);
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003844:	0002a617          	auipc	a2,0x2a
    80003848:	34c60613          	addi	a2,a2,844 # 8002db90 <__func__.0+0xb70>
    8000384c:	08200593          	li	a1,130
    80003850:	0002a517          	auipc	a0,0x2a
    80003854:	ac850513          	addi	a0,a0,-1336 # 8002d318 <__func__.0+0x2f8>
    80003858:	562270ef          	jal	8002adba <printf>
    8000385c:	0004d797          	auipc	a5,0x4d
    80003860:	7b57c783          	lbu	a5,1973(a5) # 80051011 <excpt+0x1>
    80003864:	1c079563          	bnez	a5,80003a2e <m_and_hs_using_vs_access_1+0x46e>
    80003868:	57fd                	li	a5,-1
    8000386a:	30f98b63          	beq	s3,a5,80003b80 <m_and_hs_using_vs_access_1+0x5c0>
    8000386e:	0002a597          	auipc	a1,0x2a
    80003872:	a8258593          	addi	a1,a1,-1406 # 8002d2f0 <__func__.0+0x2d0>
    80003876:	0002a517          	auipc	a0,0x2a
    8000387a:	aba50513          	addi	a0,a0,-1350 # 8002d330 <__func__.0+0x310>
    8000387e:	53c270ef          	jal	8002adba <printf>
    80003882:	0002a517          	auipc	a0,0x2a
    80003886:	ab650513          	addi	a0,a0,-1354 # 8002d338 <__func__.0+0x318>
    8000388a:	530270ef          	jal	8002adba <printf>
    8000388e:	02900513          	li	a0,41
    80003892:	216260ef          	jal	80029aa8 <putchar>
    80003896:	4529                	li	a0,10
    80003898:	210260ef          	jal	80029aa8 <putchar>
    8000389c:	c419                	beqz	s0,800038aa <m_and_hs_using_vs_access_1+0x2ea>
    8000389e:	0004d797          	auipc	a5,0x4d
    800038a2:	7737c783          	lbu	a5,1907(a5) # 80051011 <excpt+0x1>
    800038a6:	22078e63          	beqz	a5,80003ae2 <m_and_hs_using_vs_access_1+0x522>
    800038aa:	4901                	li	s2,0
        excpt.triggered == false && val == (-1) && valu == ((uint16_t)-1)
    );

    TEST_SETUP_EXCEPT();
    800038ac:	cc6fd0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800038b0:	001007b7          	lui	a5,0x100
    800038b4:	54fd                	li	s1,-1
    800038b6:	06b78793          	addi	a5,a5,107 # 10006b <STACK_SIZE+0x6b>
    800038ba:	07b2                	slli	a5,a5,0xc
    800038bc:	0204d993          	srli	s3,s1,0x20
    800038c0:	6b37c073          	.insn	4, 0x6b37c073
    asm volatile(
    800038c4:	6807ca73          	.insn	4, 0x6807ca73
    asm volatile(
    800038c8:	6817c473          	.insn	4, 0x6817c473
    hsvw(vaddr, ((uint32_t)-1));
    val = hlvw(vaddr);
    valu = hlvwu(vaddr);
    TEST_ASSERT("hs hlvw vs hlvwu",
    800038cc:	0002a617          	auipc	a2,0x2a
    800038d0:	2dc60613          	addi	a2,a2,732 # 8002dba8 <__func__.0+0xb88>
    800038d4:	08200593          	li	a1,130
    800038d8:	0002a517          	auipc	a0,0x2a
    800038dc:	a4050513          	addi	a0,a0,-1472 # 8002d318 <__func__.0+0x2f8>
    800038e0:	4da270ef          	jal	8002adba <printf>
    800038e4:	0004d797          	auipc	a5,0x4d
    800038e8:	72d7c783          	lbu	a5,1837(a5) # 80051011 <excpt+0x1>
    800038ec:	0e079c63          	bnez	a5,800039e4 <m_and_hs_using_vs_access_1+0x424>
    800038f0:	269a0563          	beq	s4,s1,80003b5a <m_and_hs_using_vs_access_1+0x59a>
    800038f4:	0002a597          	auipc	a1,0x2a
    800038f8:	9fc58593          	addi	a1,a1,-1540 # 8002d2f0 <__func__.0+0x2d0>
    800038fc:	0002a517          	auipc	a0,0x2a
    80003900:	a3450513          	addi	a0,a0,-1484 # 8002d330 <__func__.0+0x310>
    80003904:	4b6270ef          	jal	8002adba <printf>
    80003908:	0002a517          	auipc	a0,0x2a
    8000390c:	a3050513          	addi	a0,a0,-1488 # 8002d338 <__func__.0+0x318>
    80003910:	4aa270ef          	jal	8002adba <printf>
    80003914:	02900513          	li	a0,41
    80003918:	190260ef          	jal	80029aa8 <putchar>
    8000391c:	4529                	li	a0,10
    8000391e:	18a260ef          	jal	80029aa8 <putchar>
    80003922:	00090e63          	beqz	s2,8000393e <m_and_hs_using_vs_access_1+0x37e>
    80003926:	0004d797          	auipc	a5,0x4d
    8000392a:	6eb7c783          	lbu	a5,1771(a5) # 80051011 <excpt+0x1>
    8000392e:	eb81                	bnez	a5,8000393e <m_and_hs_using_vs_access_1+0x37e>
    80003930:	57fd                	li	a5,-1
    80003932:	00fa1663          	bne	s4,a5,8000393e <m_and_hs_using_vs_access_1+0x37e>
    80003936:	020a5a13          	srli	s4,s4,0x20
    8000393a:	0f440463          	beq	s0,s4,80003a22 <m_and_hs_using_vs_access_1+0x462>
    8000393e:	4401                	li	s0,0
        excpt.triggered == false && val == (-1) && valu == ((uint32_t)-1)
    );

    TEST_END();
    80003940:	0002a597          	auipc	a1,0x2a
    80003944:	9b058593          	addi	a1,a1,-1616 # 8002d2f0 <__func__.0+0x2d0>
    80003948:	0002a517          	auipc	a0,0x2a
    8000394c:	a5050513          	addi	a0,a0,-1456 # 8002d398 <__func__.0+0x378>
    80003950:	46a270ef          	jal	8002adba <printf>
    80003954:	4511                	li	a0,4
    80003956:	d18fd0ef          	jal	80000e6e <goto_priv>
    8000395a:	e31fd0ef          	jal	8000178a <reset_state>
}
    8000395e:	70a2                	ld	ra,40(sp)
    80003960:	8522                	mv	a0,s0
    80003962:	7402                	ld	s0,32(sp)
    80003964:	64e2                	ld	s1,24(sp)
    80003966:	6942                	ld	s2,16(sp)
    80003968:	69a2                	ld	s3,8(sp)
    8000396a:	6a02                	ld	s4,0(sp)
    8000396c:	6145                	addi	sp,sp,48
    8000396e:	8082                	ret
    TEST_ASSERT("machine sets mprv to access vs space",
    80003970:	0002a597          	auipc	a1,0x2a
    80003974:	98058593          	addi	a1,a1,-1664 # 8002d2f0 <__func__.0+0x2d0>
    80003978:	0002a517          	auipc	a0,0x2a
    8000397c:	9b850513          	addi	a0,a0,-1608 # 8002d330 <__func__.0+0x310>
    80003980:	43a270ef          	jal	8002adba <printf>
    80003984:	0004d797          	auipc	a5,0x4d
    80003988:	68d7c783          	lbu	a5,1677(a5) # 80051011 <excpt+0x1>
    8000398c:	d4079ae3          	bnez	a5,800036e0 <m_and_hs_using_vs_access_1+0x120>
    80003990:	d48498e3          	bne	s1,s0,800036e0 <m_and_hs_using_vs_access_1+0x120>
    80003994:	4529                	li	a0,10
    80003996:	112260ef          	jal	80029aa8 <putchar>
    8000399a:	0004d917          	auipc	s2,0x4d
    8000399e:	67794903          	lbu	s2,1655(s2) # 80051011 <excpt+0x1>
    800039a2:	00194913          	xori	s2,s2,1
    800039a6:	bb8d                	j	80003718 <m_and_hs_using_vs_access_1+0x158>
    TEST_ASSERT("hs hlvd",
    800039a8:	0002a597          	auipc	a1,0x2a
    800039ac:	94858593          	addi	a1,a1,-1720 # 8002d2f0 <__func__.0+0x2d0>
    800039b0:	0002a517          	auipc	a0,0x2a
    800039b4:	98050513          	addi	a0,a0,-1664 # 8002d330 <__func__.0+0x310>
    800039b8:	402270ef          	jal	8002adba <printf>
    800039bc:	0004d797          	auipc	a5,0x4d
    800039c0:	6557c783          	lbu	a5,1621(a5) # 80051011 <excpt+0x1>
    800039c4:	da079ee3          	bnez	a5,80003780 <m_and_hs_using_vs_access_1+0x1c0>
    800039c8:	da941ce3          	bne	s0,s1,80003780 <m_and_hs_using_vs_access_1+0x1c0>
    800039cc:	4529                	li	a0,10
    800039ce:	0da260ef          	jal	80029aa8 <putchar>
    800039d2:	dc0906e3          	beqz	s2,8000379e <m_and_hs_using_vs_access_1+0x1de>
    800039d6:	0004d417          	auipc	s0,0x4d
    800039da:	63b44403          	lbu	s0,1595(s0) # 80051011 <excpt+0x1>
    800039de:	00144413          	xori	s0,s0,1
    800039e2:	bb7d                	j	800037a0 <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    800039e4:	0002a597          	auipc	a1,0x2a
    800039e8:	90c58593          	addi	a1,a1,-1780 # 8002d2f0 <__func__.0+0x2d0>
    800039ec:	0002a517          	auipc	a0,0x2a
    800039f0:	94450513          	addi	a0,a0,-1724 # 8002d330 <__func__.0+0x310>
    800039f4:	3c6270ef          	jal	8002adba <printf>
    800039f8:	0004d797          	auipc	a5,0x4d
    800039fc:	6197c783          	lbu	a5,1561(a5) # 80051011 <excpt+0x1>
    80003a00:	f00794e3          	bnez	a5,80003908 <m_and_hs_using_vs_access_1+0x348>
    80003a04:	f09a12e3          	bne	s4,s1,80003908 <m_and_hs_using_vs_access_1+0x348>
    80003a08:	f13410e3          	bne	s0,s3,80003908 <m_and_hs_using_vs_access_1+0x348>
    80003a0c:	4529                	li	a0,10
    80003a0e:	09a260ef          	jal	80029aa8 <putchar>
    80003a12:	f20906e3          	beqz	s2,8000393e <m_and_hs_using_vs_access_1+0x37e>
    80003a16:	0004d797          	auipc	a5,0x4d
    80003a1a:	5fb7c783          	lbu	a5,1531(a5) # 80051011 <excpt+0x1>
    80003a1e:	f20790e3          	bnez	a5,8000393e <m_and_hs_using_vs_access_1+0x37e>
    80003a22:	4405                	li	s0,1
    TEST_END();
    80003a24:	0002a597          	auipc	a1,0x2a
    80003a28:	8bc58593          	addi	a1,a1,-1860 # 8002d2e0 <__func__.0+0x2c0>
    80003a2c:	bf31                	j	80003948 <m_and_hs_using_vs_access_1+0x388>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003a2e:	0002a597          	auipc	a1,0x2a
    80003a32:	8c258593          	addi	a1,a1,-1854 # 8002d2f0 <__func__.0+0x2d0>
    80003a36:	0002a517          	auipc	a0,0x2a
    80003a3a:	8fa50513          	addi	a0,a0,-1798 # 8002d330 <__func__.0+0x310>
    80003a3e:	37c270ef          	jal	8002adba <printf>
    80003a42:	0004d797          	auipc	a5,0x4d
    80003a46:	5cf7c783          	lbu	a5,1487(a5) # 80051011 <excpt+0x1>
    80003a4a:	e2079ce3          	bnez	a5,80003882 <m_and_hs_using_vs_access_1+0x2c2>
    80003a4e:	57fd                	li	a5,-1
    80003a50:	e2f999e3          	bne	s3,a5,80003882 <m_and_hs_using_vs_access_1+0x2c2>
    80003a54:	e32497e3          	bne	s1,s2,80003882 <m_and_hs_using_vs_access_1+0x2c2>
    80003a58:	4529                	li	a0,10
    80003a5a:	04e260ef          	jal	80029aa8 <putchar>
    80003a5e:	e40406e3          	beqz	s0,800038aa <m_and_hs_using_vs_access_1+0x2ea>
    80003a62:	0004d797          	auipc	a5,0x4d
    80003a66:	5af7c783          	lbu	a5,1455(a5) # 80051011 <excpt+0x1>
    80003a6a:	e40790e3          	bnez	a5,800038aa <m_and_hs_using_vs_access_1+0x2ea>
    80003a6e:	7941                	lui	s2,0xffff0
    80003a70:	0905                	addi	s2,s2,1 # ffffffffffff0001 <__stack_top+0xffffffff7fcf1001>
    80003a72:	9926                	add	s2,s2,s1
    80003a74:	00193913          	seqz	s2,s2
    80003a78:	bd15                	j	800038ac <m_and_hs_using_vs_access_1+0x2ec>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003a7a:	0002a597          	auipc	a1,0x2a
    80003a7e:	87658593          	addi	a1,a1,-1930 # 8002d2f0 <__func__.0+0x2d0>
    80003a82:	0002a517          	auipc	a0,0x2a
    80003a86:	8ae50513          	addi	a0,a0,-1874 # 8002d330 <__func__.0+0x310>
    80003a8a:	330270ef          	jal	8002adba <printf>
    80003a8e:	0004d797          	auipc	a5,0x4d
    80003a92:	5837c783          	lbu	a5,1411(a5) # 80051011 <excpt+0x1>
    80003a96:	d60793e3          	bnez	a5,800037fc <m_and_hs_using_vs_access_1+0x23c>
    80003a9a:	57fd                	li	a5,-1
    80003a9c:	d6f990e3          	bne	s3,a5,800037fc <m_and_hs_using_vs_access_1+0x23c>
    80003aa0:	d5249ee3          	bne	s1,s2,800037fc <m_and_hs_using_vs_access_1+0x23c>
    80003aa4:	4529                	li	a0,10
    80003aa6:	002260ef          	jal	80029aa8 <putchar>
    80003aaa:	d6040de3          	beqz	s0,80003824 <m_and_hs_using_vs_access_1+0x264>
    80003aae:	0004d797          	auipc	a5,0x4d
    80003ab2:	5637c783          	lbu	a5,1379(a5) # 80051011 <excpt+0x1>
    80003ab6:	d60797e3          	bnez	a5,80003824 <m_and_hs_using_vs_access_1+0x264>
    80003aba:	f0148793          	addi	a5,s1,-255
    80003abe:	0017b413          	seqz	s0,a5
    80003ac2:	b395                	j	80003826 <m_and_hs_using_vs_access_1+0x266>
    TEST_ASSERT("hs hlvd",
    80003ac4:	0004d797          	auipc	a5,0x4d
    80003ac8:	54d7c783          	lbu	a5,1357(a5) # 80051011 <excpt+0x1>
    80003acc:	cc0799e3          	bnez	a5,8000379e <m_and_hs_using_vs_access_1+0x1de>
    80003ad0:	c85497b7          	lui	a5,0xc8549
    80003ad4:	078a                	slli	a5,a5,0x2
    80003ad6:	11178793          	addi	a5,a5,273 # ffffffffc8549111 <__stack_top+0xffffffff4824a111>
    80003ada:	943e                	add	s0,s0,a5
    80003adc:	00143413          	seqz	s0,s0
    80003ae0:	b1c1                	j	800037a0 <m_and_hs_using_vs_access_1+0x1e0>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003ae2:	57fd                	li	a5,-1
    80003ae4:	dcf993e3          	bne	s3,a5,800038aa <m_and_hs_using_vs_access_1+0x2ea>
    80003ae8:	b759                	j	80003a6e <m_and_hs_using_vs_access_1+0x4ae>
    TEST_ASSERT("hs hlvb vs hlvbu",
    80003aea:	57fd                	li	a5,-1
    80003aec:	d2f99ce3          	bne	s3,a5,80003824 <m_and_hs_using_vs_access_1+0x264>
    80003af0:	b7e9                	j	80003aba <m_and_hs_using_vs_access_1+0x4fa>
    80003af2:	cf249be3          	bne	s1,s2,800037e8 <m_and_hs_using_vs_access_1+0x228>
    80003af6:	00029597          	auipc	a1,0x29
    80003afa:	7ea58593          	addi	a1,a1,2026 # 8002d2e0 <__func__.0+0x2c0>
    80003afe:	0002a517          	auipc	a0,0x2a
    80003b02:	83250513          	addi	a0,a0,-1998 # 8002d330 <__func__.0+0x310>
    80003b06:	2b4270ef          	jal	8002adba <printf>
    80003b0a:	0004d797          	auipc	a5,0x4d
    80003b0e:	5077c783          	lbu	a5,1287(a5) # 80051011 <excpt+0x1>
    80003b12:	dbc9                	beqz	a5,80003aa4 <m_and_hs_using_vs_access_1+0x4e4>
    80003b14:	b1e5                	j	800037fc <m_and_hs_using_vs_access_1+0x23c>
    TEST_ASSERT("machine sets mprv to access vs space",
    80003b16:	00029597          	auipc	a1,0x29
    80003b1a:	7ca58593          	addi	a1,a1,1994 # 8002d2e0 <__func__.0+0x2c0>
    80003b1e:	0002a517          	auipc	a0,0x2a
    80003b22:	81250513          	addi	a0,a0,-2030 # 8002d330 <__func__.0+0x310>
    80003b26:	294270ef          	jal	8002adba <printf>
    80003b2a:	0004d797          	auipc	a5,0x4d
    80003b2e:	4e77c783          	lbu	a5,1255(a5) # 80051011 <excpt+0x1>
    80003b32:	bc0781e3          	beqz	a5,800036f4 <m_and_hs_using_vs_access_1+0x134>
    80003b36:	b66d                	j	800036e0 <m_and_hs_using_vs_access_1+0x120>
    TEST_ASSERT("hs hlvd",
    80003b38:	00029597          	auipc	a1,0x29
    80003b3c:	7a858593          	addi	a1,a1,1960 # 8002d2e0 <__func__.0+0x2c0>
    80003b40:	00029517          	auipc	a0,0x29
    80003b44:	7f050513          	addi	a0,a0,2032 # 8002d330 <__func__.0+0x310>
    80003b48:	272270ef          	jal	8002adba <printf>
    80003b4c:	0004d797          	auipc	a5,0x4d
    80003b50:	4c57c783          	lbu	a5,1221(a5) # 80051011 <excpt+0x1>
    80003b54:	e6078ce3          	beqz	a5,800039cc <m_and_hs_using_vs_access_1+0x40c>
    80003b58:	b125                	j	80003780 <m_and_hs_using_vs_access_1+0x1c0>
    TEST_ASSERT("hs hlvw vs hlvwu",
    80003b5a:	d9341de3          	bne	s0,s3,800038f4 <m_and_hs_using_vs_access_1+0x334>
    80003b5e:	00029597          	auipc	a1,0x29
    80003b62:	78258593          	addi	a1,a1,1922 # 8002d2e0 <__func__.0+0x2c0>
    80003b66:	00029517          	auipc	a0,0x29
    80003b6a:	7ca50513          	addi	a0,a0,1994 # 8002d330 <__func__.0+0x310>
    80003b6e:	24c270ef          	jal	8002adba <printf>
    80003b72:	0004d797          	auipc	a5,0x4d
    80003b76:	49f7c783          	lbu	a5,1183(a5) # 80051011 <excpt+0x1>
    80003b7a:	e80789e3          	beqz	a5,80003a0c <m_and_hs_using_vs_access_1+0x44c>
    80003b7e:	b369                	j	80003908 <m_and_hs_using_vs_access_1+0x348>
    TEST_ASSERT("hs hlvh vs hlvhu",
    80003b80:	cf2497e3          	bne	s1,s2,8000386e <m_and_hs_using_vs_access_1+0x2ae>
    80003b84:	00029597          	auipc	a1,0x29
    80003b88:	75c58593          	addi	a1,a1,1884 # 8002d2e0 <__func__.0+0x2c0>
    80003b8c:	00029517          	auipc	a0,0x29
    80003b90:	7a450513          	addi	a0,a0,1956 # 8002d330 <__func__.0+0x310>
    80003b94:	226270ef          	jal	8002adba <printf>
    80003b98:	0004d797          	auipc	a5,0x4d
    80003b9c:	4797c783          	lbu	a5,1145(a5) # 80051011 <excpt+0x1>
    80003ba0:	ea078ce3          	beqz	a5,80003a58 <m_and_hs_using_vs_access_1+0x498>
    80003ba4:	b9f9                	j	80003882 <m_and_hs_using_vs_access_1+0x2c2>

0000000080003ba6 <m_and_hs_using_vs_access_2>:
     * hlvx instruction but on a previous lui instruction. 
     * TODO: find out why
     */


bool m_and_hs_using_vs_access_2(){
    80003ba6:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003ba8:	00028597          	auipc	a1,0x28
    80003bac:	83858593          	addi	a1,a1,-1992 # 8002b3e0 <__func__.10>
    80003bb0:	00029517          	auipc	a0,0x29
    80003bb4:	75050513          	addi	a0,a0,1872 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_2(){
    80003bb8:	ec06                	sd	ra,24(sp)
    80003bba:	e822                	sd	s0,16(sp)
    80003bbc:	e426                	sd	s1,8(sp)
    TEST_START();
    80003bbe:	1fc270ef          	jal	8002adba <printf>
    80003bc2:	4529                	li	a0,10
    80003bc4:	6e5250ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    80003bc8:	a19fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003bcc:	db1fc0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80003bd0:	b53fc0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_HS);
    80003bd4:	450d                	li	a0,3
    80003bd6:	a98fd0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80003bda:	4509                	li	a0,2
    80003bdc:	9b2fd0ef          	jal	80000d8e <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80003be0:	992fd0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80003be4:	200037b7          	lui	a5,0x20003
    80003be8:	078e                	slli	a5,a5,0x3
    80003bea:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSX_GUX));
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003bee:	08200593          	li	a1,130
    80003bf2:	0002a617          	auipc	a2,0x2a
    80003bf6:	fce60613          	addi	a2,a2,-50 # 8002dbc0 <__func__.0+0xba0>
    80003bfa:	00029517          	auipc	a0,0x29
    80003bfe:	71e50513          	addi	a0,a0,1822 # 8002d318 <__func__.0+0x2f8>
    80003c02:	1b8270ef          	jal	8002adba <printf>
    80003c06:	0004d797          	auipc	a5,0x4d
    80003c0a:	40b7c783          	lbu	a5,1035(a5) # 80051011 <excpt+0x1>
    80003c0e:	00029597          	auipc	a1,0x29
    80003c12:	6d258593          	addi	a1,a1,1746 # 8002d2e0 <__func__.0+0x2c0>
    80003c16:	c789                	beqz	a5,80003c20 <m_and_hs_using_vs_access_2+0x7a>
    80003c18:	00029597          	auipc	a1,0x29
    80003c1c:	6d858593          	addi	a1,a1,1752 # 8002d2f0 <__func__.0+0x2d0>
    80003c20:	00029517          	auipc	a0,0x29
    80003c24:	71050513          	addi	a0,a0,1808 # 8002d330 <__func__.0+0x310>
    80003c28:	192270ef          	jal	8002adba <printf>
    80003c2c:	0004d797          	auipc	a5,0x4d
    80003c30:	3e57c783          	lbu	a5,997(a5) # 80051011 <excpt+0x1>
    80003c34:	24079d63          	bnez	a5,80003e8e <m_and_hs_using_vs_access_2+0x2e8>
    80003c38:	4529                	li	a0,10
    80003c3a:	66f250ef          	jal	80029aa8 <putchar>
    80003c3e:	0004d497          	auipc	s1,0x4d
    80003c42:	3d34c483          	lbu	s1,979(s1) # 80051011 <excpt+0x1>
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003c46:	92cfd0ef          	jal	80000d72 <test_setup_except_function>
    80003c4a:	4785                	li	a5,1
    80003c4c:	1782                	slli	a5,a5,0x20
    80003c4e:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURWX));
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003c52:	08200593          	li	a1,130
    80003c56:	0002a617          	auipc	a2,0x2a
    80003c5a:	f9260613          	addi	a2,a2,-110 # 8002dbe8 <__func__.0+0xbc8>
    80003c5e:	00029517          	auipc	a0,0x29
    80003c62:	6ba50513          	addi	a0,a0,1722 # 8002d318 <__func__.0+0x2f8>
    80003c66:	154270ef          	jal	8002adba <printf>
    80003c6a:	0004d797          	auipc	a5,0x4d
    80003c6e:	3a77c783          	lbu	a5,935(a5) # 80051011 <excpt+0x1>
    80003c72:	00029597          	auipc	a1,0x29
    80003c76:	67e58593          	addi	a1,a1,1662 # 8002d2f0 <__func__.0+0x2d0>
    80003c7a:	e789                	bnez	a5,80003c84 <m_and_hs_using_vs_access_2+0xde>
    80003c7c:	00029597          	auipc	a1,0x29
    80003c80:	66458593          	addi	a1,a1,1636 # 8002d2e0 <__func__.0+0x2c0>
    80003c84:	00029517          	auipc	a0,0x29
    80003c88:	6ac50513          	addi	a0,a0,1708 # 8002d330 <__func__.0+0x310>
    80003c8c:	12e270ef          	jal	8002adba <printf>
    80003c90:	0004d797          	auipc	a5,0x4d
    80003c94:	3817c783          	lbu	a5,897(a5) # 80051011 <excpt+0x1>
    80003c98:	1e079063          	bnez	a5,80003e78 <m_and_hs_using_vs_access_2+0x2d2>
    80003c9c:	4529                	li	a0,10
    80003c9e:	60b250ef          	jal	80029aa8 <putchar>
    80003ca2:	4401                	li	s0,0
    80003ca4:	e499                	bnez	s1,80003cb2 <m_and_hs_using_vs_access_2+0x10c>
    80003ca6:	0004d417          	auipc	s0,0x4d
    80003caa:	36b44403          	lbu	s0,875(s0) # 80051011 <excpt+0x1>
    80003cae:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    TEST_SETUP_EXCEPT();
    80003cb2:	8c0fd0ef          	jal	80000d72 <test_setup_except_function>
    80003cb6:	001007b7          	lui	a5,0x100
    80003cba:	0785                	addi	a5,a5,1 # 100001 <STACK_SIZE+0x1>
    80003cbc:	07b2                	slli	a5,a5,0xc
    80003cbe:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRWX_GURW));
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003cc2:	08200593          	li	a1,130
    80003cc6:	0002a617          	auipc	a2,0x2a
    80003cca:	f5260613          	addi	a2,a2,-174 # 8002dc18 <__func__.0+0xbf8>
    80003cce:	00029517          	auipc	a0,0x29
    80003cd2:	64a50513          	addi	a0,a0,1610 # 8002d318 <__func__.0+0x2f8>
    80003cd6:	0e4270ef          	jal	8002adba <printf>
    80003cda:	0004d797          	auipc	a5,0x4d
    80003cde:	3377c783          	lbu	a5,823(a5) # 80051011 <excpt+0x1>
    80003ce2:	0004d497          	auipc	s1,0x4d
    80003ce6:	32e48493          	addi	s1,s1,814 # 80051010 <excpt>
    80003cea:	00029597          	auipc	a1,0x29
    80003cee:	60658593          	addi	a1,a1,1542 # 8002d2f0 <__func__.0+0x2d0>
    80003cf2:	c789                	beqz	a5,80003cfc <m_and_hs_using_vs_access_2+0x156>
    80003cf4:	6498                	ld	a4,8(s1)
    80003cf6:	47d5                	li	a5,21
    80003cf8:	1cf70b63          	beq	a4,a5,80003ece <m_and_hs_using_vs_access_2+0x328>
    80003cfc:	00029517          	auipc	a0,0x29
    80003d00:	63450513          	addi	a0,a0,1588 # 8002d330 <__func__.0+0x310>
    80003d04:	0b6270ef          	jal	8002adba <printf>
    80003d08:	0004d797          	auipc	a5,0x4d
    80003d0c:	3097c783          	lbu	a5,777(a5) # 80051011 <excpt+0x1>
    80003d10:	c789                	beqz	a5,80003d1a <m_and_hs_using_vs_access_2+0x174>
    80003d12:	6498                	ld	a4,8(s1)
    80003d14:	47d5                	li	a5,21
    80003d16:	14f70463          	beq	a4,a5,80003e5e <m_and_hs_using_vs_access_2+0x2b8>
    80003d1a:	00029517          	auipc	a0,0x29
    80003d1e:	61e50513          	addi	a0,a0,1566 # 8002d338 <__func__.0+0x318>
    80003d22:	098270ef          	jal	8002adba <printf>
    80003d26:	02900513          	li	a0,41
    80003d2a:	57f250ef          	jal	80029aa8 <putchar>
    80003d2e:	4529                	li	a0,10
    80003d30:	579250ef          	jal	80029aa8 <putchar>
    80003d34:	c801                	beqz	s0,80003d44 <m_and_hs_using_vs_access_2+0x19e>
    80003d36:	0004d797          	auipc	a5,0x4d
    80003d3a:	2db7c783          	lbu	a5,731(a5) # 80051011 <excpt+0x1>
    80003d3e:	4401                	li	s0,0
    80003d40:	0e079363          	bnez	a5,80003e26 <m_and_hs_using_vs_access_2+0x280>
        excpt.cause == CAUSE_LGPF && 
        excpt.gva == true &&
        excpt.xpv == false
    );

    TEST_SETUP_EXCEPT();
    80003d44:	82efd0ef          	jal	80000d72 <test_setup_except_function>
    80003d48:	001007b7          	lui	a5,0x100
    80003d4c:	0795                	addi	a5,a5,5 # 100005 <STACK_SIZE+0x5>
    80003d4e:	07b2                	slli	a5,a5,0xc
    80003d50:	6837c7f3          	.insn	4, 0x6837c7f3
    val = hlvxwu(vs_page_base(VSRW_GURWX));
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003d54:	08200593          	li	a1,130
    80003d58:	0002a617          	auipc	a2,0x2a
    80003d5c:	ef860613          	addi	a2,a2,-264 # 8002dc50 <__func__.0+0xc30>
    80003d60:	00029517          	auipc	a0,0x29
    80003d64:	5b850513          	addi	a0,a0,1464 # 8002d318 <__func__.0+0x2f8>
    80003d68:	052270ef          	jal	8002adba <printf>
    80003d6c:	0004d797          	auipc	a5,0x4d
    80003d70:	2a57c783          	lbu	a5,677(a5) # 80051011 <excpt+0x1>
    80003d74:	00029597          	auipc	a1,0x29
    80003d78:	57c58593          	addi	a1,a1,1404 # 8002d2f0 <__func__.0+0x2d0>
    80003d7c:	c789                	beqz	a5,80003d86 <m_and_hs_using_vs_access_2+0x1e0>
    80003d7e:	6498                	ld	a4,8(s1)
    80003d80:	47b5                	li	a5,13
    80003d82:	12f70163          	beq	a4,a5,80003ea4 <m_and_hs_using_vs_access_2+0x2fe>
    80003d86:	00029517          	auipc	a0,0x29
    80003d8a:	5aa50513          	addi	a0,a0,1450 # 8002d330 <__func__.0+0x310>
    80003d8e:	02c270ef          	jal	8002adba <printf>
    80003d92:	0004d797          	auipc	a5,0x4d
    80003d96:	27f7c783          	lbu	a5,639(a5) # 80051011 <excpt+0x1>
    80003d9a:	c789                	beqz	a5,80003da4 <m_and_hs_using_vs_access_2+0x1fe>
    80003d9c:	6498                	ld	a4,8(s1)
    80003d9e:	47b5                	li	a5,13
    80003da0:	0af70463          	beq	a4,a5,80003e48 <m_and_hs_using_vs_access_2+0x2a2>
    80003da4:	00029517          	auipc	a0,0x29
    80003da8:	59450513          	addi	a0,a0,1428 # 8002d338 <__func__.0+0x318>
    80003dac:	00e270ef          	jal	8002adba <printf>
    80003db0:	02900513          	li	a0,41
    80003db4:	4f5250ef          	jal	80029aa8 <putchar>
    80003db8:	4529                	li	a0,10
    80003dba:	4ef250ef          	jal	80029aa8 <putchar>
    80003dbe:	c411                	beqz	s0,80003dca <m_and_hs_using_vs_access_2+0x224>
    80003dc0:	0004d797          	auipc	a5,0x4d
    80003dc4:	2517c783          	lbu	a5,593(a5) # 80051011 <excpt+0x1>
    80003dc8:	e79d                	bnez	a5,80003df6 <m_and_hs_using_vs_access_2+0x250>
    80003dca:	4401                	li	s0,0
        excpt.gva == true &&
        excpt.xpv == false
    );

    
    TEST_END();
    80003dcc:	00029597          	auipc	a1,0x29
    80003dd0:	52458593          	addi	a1,a1,1316 # 8002d2f0 <__func__.0+0x2d0>
    80003dd4:	00029517          	auipc	a0,0x29
    80003dd8:	5c450513          	addi	a0,a0,1476 # 8002d398 <__func__.0+0x378>
    80003ddc:	7df260ef          	jal	8002adba <printf>
    80003de0:	4511                	li	a0,4
    80003de2:	88cfd0ef          	jal	80000e6e <goto_priv>
    80003de6:	9a5fd0ef          	jal	8000178a <reset_state>
}
    80003dea:	60e2                	ld	ra,24(sp)
    80003dec:	8522                	mv	a0,s0
    80003dee:	6442                	ld	s0,16(sp)
    80003df0:	64a2                	ld	s1,8(sp)
    80003df2:	6105                	addi	sp,sp,32
    80003df4:	8082                	ret
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003df6:	6498                	ld	a4,8(s1)
    80003df8:	47b5                	li	a5,13
    80003dfa:	4401                	li	s0,0
    TEST_END();
    80003dfc:	00029597          	auipc	a1,0x29
    80003e00:	4f458593          	addi	a1,a1,1268 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003e04:	fcf718e3          	bne	a4,a5,80003dd4 <m_and_hs_using_vs_access_2+0x22e>
    80003e08:	0004d417          	auipc	s0,0x4d
    80003e0c:	23844403          	lbu	s0,568(s0) # 80051040 <excpt+0x30>
    80003e10:	d071                	beqz	s0,80003dd4 <m_and_hs_using_vs_access_2+0x22e>
    80003e12:	0004d797          	auipc	a5,0x4d
    80003e16:	22f7c783          	lbu	a5,559(a5) # 80051041 <excpt+0x31>
    TEST_END();
    80003e1a:	00029597          	auipc	a1,0x29
    80003e1e:	4c658593          	addi	a1,a1,1222 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003e22:	dbcd                	beqz	a5,80003dd4 <m_and_hs_using_vs_access_2+0x22e>
    80003e24:	b75d                	j	80003dca <m_and_hs_using_vs_access_2+0x224>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003e26:	6498                	ld	a4,8(s1)
    80003e28:	47d5                	li	a5,21
    80003e2a:	f0f71de3          	bne	a4,a5,80003d44 <m_and_hs_using_vs_access_2+0x19e>
    80003e2e:	0004d797          	auipc	a5,0x4d
    80003e32:	2127c783          	lbu	a5,530(a5) # 80051040 <excpt+0x30>
    80003e36:	f00787e3          	beqz	a5,80003d44 <m_and_hs_using_vs_access_2+0x19e>
    80003e3a:	0004d417          	auipc	s0,0x4d
    80003e3e:	20744403          	lbu	s0,519(s0) # 80051041 <excpt+0x31>
    80003e42:	00144413          	xori	s0,s0,1
    80003e46:	bdfd                	j	80003d44 <m_and_hs_using_vs_access_2+0x19e>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003e48:	0004d797          	auipc	a5,0x4d
    80003e4c:	1f87c783          	lbu	a5,504(a5) # 80051040 <excpt+0x30>
    80003e50:	dbb1                	beqz	a5,80003da4 <m_and_hs_using_vs_access_2+0x1fe>
    80003e52:	0004d797          	auipc	a5,0x4d
    80003e56:	1ef7c783          	lbu	a5,495(a5) # 80051041 <excpt+0x31>
    80003e5a:	dfb9                	beqz	a5,80003db8 <m_and_hs_using_vs_access_2+0x212>
    80003e5c:	b7a1                	j	80003da4 <m_and_hs_using_vs_access_2+0x1fe>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003e5e:	0004d797          	auipc	a5,0x4d
    80003e62:	1e27c783          	lbu	a5,482(a5) # 80051040 <excpt+0x30>
    80003e66:	ea078ae3          	beqz	a5,80003d1a <m_and_hs_using_vs_access_2+0x174>
    80003e6a:	0004d797          	auipc	a5,0x4d
    80003e6e:	1d77c783          	lbu	a5,471(a5) # 80051041 <excpt+0x31>
    80003e72:	ea078ee3          	beqz	a5,80003d2e <m_and_hs_using_vs_access_2+0x188>
    80003e76:	b555                	j	80003d1a <m_and_hs_using_vs_access_2+0x174>
    TEST_ASSERT("hs hlvxwu accesses page with all permissions",
    80003e78:	00029517          	auipc	a0,0x29
    80003e7c:	4c050513          	addi	a0,a0,1216 # 8002d338 <__func__.0+0x318>
    80003e80:	73b260ef          	jal	8002adba <printf>
    80003e84:	02900513          	li	a0,41
    80003e88:	421250ef          	jal	80029aa8 <putchar>
    80003e8c:	bd01                	j	80003c9c <m_and_hs_using_vs_access_2+0xf6>
    TEST_ASSERT("hs hlvxwu accesses on only execute page",
    80003e8e:	00029517          	auipc	a0,0x29
    80003e92:	4aa50513          	addi	a0,a0,1194 # 8002d338 <__func__.0+0x318>
    80003e96:	725260ef          	jal	8002adba <printf>
    80003e9a:	02900513          	li	a0,41
    80003e9e:	40b250ef          	jal	80029aa8 <putchar>
    80003ea2:	bb59                	j	80003c38 <m_and_hs_using_vs_access_2+0x92>
    TEST_ASSERT("hs hlvxwu on vs-level non-exec page leads to lpf",
    80003ea4:	0004d797          	auipc	a5,0x4d
    80003ea8:	19c7c783          	lbu	a5,412(a5) # 80051040 <excpt+0x30>
    80003eac:	ec078de3          	beqz	a5,80003d86 <m_and_hs_using_vs_access_2+0x1e0>
    80003eb0:	0004d797          	auipc	a5,0x4d
    80003eb4:	1917c783          	lbu	a5,401(a5) # 80051041 <excpt+0x31>
    80003eb8:	00029597          	auipc	a1,0x29
    80003ebc:	42858593          	addi	a1,a1,1064 # 8002d2e0 <__func__.0+0x2c0>
    80003ec0:	ec0783e3          	beqz	a5,80003d86 <m_and_hs_using_vs_access_2+0x1e0>
    80003ec4:	00029597          	auipc	a1,0x29
    80003ec8:	42c58593          	addi	a1,a1,1068 # 8002d2f0 <__func__.0+0x2d0>
    80003ecc:	bd6d                	j	80003d86 <m_and_hs_using_vs_access_2+0x1e0>
    TEST_ASSERT("hs hlvxwu on hs-level non-exec page leads to lgpf",
    80003ece:	0004d797          	auipc	a5,0x4d
    80003ed2:	1727c783          	lbu	a5,370(a5) # 80051040 <excpt+0x30>
    80003ed6:	e20783e3          	beqz	a5,80003cfc <m_and_hs_using_vs_access_2+0x156>
    80003eda:	0004d797          	auipc	a5,0x4d
    80003ede:	1677c783          	lbu	a5,359(a5) # 80051041 <excpt+0x31>
    80003ee2:	00029597          	auipc	a1,0x29
    80003ee6:	3fe58593          	addi	a1,a1,1022 # 8002d2e0 <__func__.0+0x2c0>
    80003eea:	e00789e3          	beqz	a5,80003cfc <m_and_hs_using_vs_access_2+0x156>
    80003eee:	00029597          	auipc	a1,0x29
    80003ef2:	40258593          	addi	a1,a1,1026 # 8002d2f0 <__func__.0+0x2d0>
    80003ef6:	b519                	j	80003cfc <m_and_hs_using_vs_access_2+0x156>

0000000080003ef8 <m_and_hs_using_vs_access_3>:

bool m_and_hs_using_vs_access_3(){
    80003ef8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80003efa:	00027597          	auipc	a1,0x27
    80003efe:	50658593          	addi	a1,a1,1286 # 8002b400 <__func__.9>
    80003f02:	00029517          	auipc	a0,0x29
    80003f06:	3fe50513          	addi	a0,a0,1022 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_3(){
    80003f0a:	ec06                	sd	ra,24(sp)
    80003f0c:	e822                	sd	s0,16(sp)
    80003f0e:	e426                	sd	s1,8(sp)
    80003f10:	e04a                	sd	s2,0(sp)
    TEST_START();
    80003f12:	6a9260ef          	jal	8002adba <printf>
    80003f16:	4529                	li	a0,10
    80003f18:	391250ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    80003f1c:	ec4fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80003f20:	a5dfc0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80003f24:	ffefc0ef          	jal	80000722 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_M);
    80003f28:	4511                	li	a0,4
    80003f2a:	f45fc0ef          	jal	80000e6e <goto_priv>
    *((volatile uint64_t*) addr) = val;
    80003f2e:	00035417          	auipc	s0,0x35
    80003f32:	97240413          	addi	s0,s0,-1678 # 800388a0 <__func__.0+0xb880>

    TEST_SETUP_EXCEPT();
    80003f36:	e3dfc0ef          	jal	80000d72 <test_setup_except_function>
    80003f3a:	6018                	ld	a4,0(s0)
    80003f3c:	440197b7          	lui	a5,0x44019
    80003f40:	0786                	slli	a5,a5,0x1
    80003f42:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80003f44:	00037717          	auipc	a4,0x37
    80003f48:	99072703          	lw	a4,-1648(a4) # 8003a8d4 <curr_priv>
    80003f4c:	4791                	li	a5,4
    80003f4e:	02f70763          	beq	a4,a5,80003f7c <m_and_hs_using_vs_access_3+0x84>
        ERROR("trying to read as mprv from low privilege");
    80003f52:	0002a517          	auipc	a0,0x2a
    80003f56:	bb650513          	addi	a0,a0,-1098 # 8002db08 <__func__.0+0xae8>
    80003f5a:	661260ef          	jal	8002adba <printf>
    80003f5e:	0fe00613          	li	a2,254
    80003f62:	00027597          	auipc	a1,0x27
    80003f66:	46e58593          	addi	a1,a1,1134 # 8002b3d0 <__func__.11>
    80003f6a:	00029517          	auipc	a0,0x29
    80003f6e:	51e50513          	addi	a0,a0,1310 # 8002d488 <__func__.0+0x468>
    80003f72:	649260ef          	jal	8002adba <printf>
    80003f76:	4501                	li	a0,0
    80003f78:	1f9260ef          	jal	8002a970 <exit>
    set_prev_priv(priv);
    80003f7c:	4509                	li	a0,2
    80003f7e:	e11fc0ef          	jal	80000d8e <set_prev_priv>
    asm volatile(
    80003f82:	000807b7          	lui	a5,0x80
    80003f86:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80003f88:	07b6                	slli	a5,a5,0xd
    80003f8a:	00020737          	lui	a4,0x20
    80003f8e:	30072073          	csrs	mstatus,a4
    80003f92:	6394                	ld	a3,0(a5)
    80003f94:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv vs access to vu leads to exception",
    80003f98:	08200593          	li	a1,130
    80003f9c:	0002a617          	auipc	a2,0x2a
    80003fa0:	cec60613          	addi	a2,a2,-788 # 8002dc88 <__func__.0+0xc68>
    80003fa4:	00029517          	auipc	a0,0x29
    80003fa8:	37450513          	addi	a0,a0,884 # 8002d318 <__func__.0+0x2f8>
    80003fac:	60f260ef          	jal	8002adba <printf>
    80003fb0:	0004d797          	auipc	a5,0x4d
    80003fb4:	0617c783          	lbu	a5,97(a5) # 80051011 <excpt+0x1>
    80003fb8:	0004d917          	auipc	s2,0x4d
    80003fbc:	05890913          	addi	s2,s2,88 # 80051010 <excpt>
    80003fc0:	00029597          	auipc	a1,0x29
    80003fc4:	33058593          	addi	a1,a1,816 # 8002d2f0 <__func__.0+0x2d0>
    80003fc8:	cf91                	beqz	a5,80003fe4 <m_and_hs_using_vs_access_3+0xec>
    80003fca:	00893703          	ld	a4,8(s2)
    80003fce:	47b5                	li	a5,13
    80003fd0:	00029597          	auipc	a1,0x29
    80003fd4:	31058593          	addi	a1,a1,784 # 8002d2e0 <__func__.0+0x2c0>
    80003fd8:	00f70663          	beq	a4,a5,80003fe4 <m_and_hs_using_vs_access_3+0xec>
    80003fdc:	00029597          	auipc	a1,0x29
    80003fe0:	31458593          	addi	a1,a1,788 # 8002d2f0 <__func__.0+0x2d0>
    80003fe4:	00029517          	auipc	a0,0x29
    80003fe8:	34c50513          	addi	a0,a0,844 # 8002d330 <__func__.0+0x310>
    80003fec:	5cf260ef          	jal	8002adba <printf>
    80003ff0:	0004d797          	auipc	a5,0x4d
    80003ff4:	0217c783          	lbu	a5,33(a5) # 80051011 <excpt+0x1>
    80003ff8:	c791                	beqz	a5,80004004 <m_and_hs_using_vs_access_3+0x10c>
    80003ffa:	00893703          	ld	a4,8(s2)
    80003ffe:	47b5                	li	a5,13
    80004000:	00f70c63          	beq	a4,a5,80004018 <m_and_hs_using_vs_access_3+0x120>
    80004004:	00029517          	auipc	a0,0x29
    80004008:	33450513          	addi	a0,a0,820 # 8002d338 <__func__.0+0x318>
    8000400c:	5af260ef          	jal	8002adba <printf>
    80004010:	02900513          	li	a0,41
    80004014:	295250ef          	jal	80029aa8 <putchar>
    80004018:	4529                	li	a0,10
    8000401a:	28f250ef          	jal	80029aa8 <putchar>
    8000401e:	0004d797          	auipc	a5,0x4d
    80004022:	ff37c783          	lbu	a5,-13(a5) # 80051011 <excpt+0x1>
    80004026:	4481                	li	s1,0
    80004028:	c791                	beqz	a5,80004034 <m_and_hs_using_vs_access_3+0x13c>
    8000402a:	00893483          	ld	s1,8(s2)
    8000402e:	14cd                	addi	s1,s1,-13
    80004030:	0014b493          	seqz	s1,s1
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF 
    );

    TEST_SETUP_EXCEPT();
    80004034:	d3ffc0ef          	jal	80000d72 <test_setup_except_function>
    80004038:	6018                	ld	a4,0(s0)
    8000403a:	440197b7          	lui	a5,0x44019
    8000403e:	0786                	slli	a5,a5,0x1
    80004040:	e398                	sd	a4,0(a5)
    if(curr_priv != PRIV_M){
    80004042:	00037717          	auipc	a4,0x37
    80004046:	89272703          	lw	a4,-1902(a4) # 8003a8d4 <curr_priv>
    8000404a:	4791                	li	a5,4
    8000404c:	f0f713e3          	bne	a4,a5,80003f52 <m_and_hs_using_vs_access_3+0x5a>
    set_prev_priv(priv);
    80004050:	4501                	li	a0,0
    80004052:	d3dfc0ef          	jal	80000d8e <set_prev_priv>
    asm volatile(
    80004056:	000807b7          	lui	a5,0x80
    8000405a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000405c:	07b6                	slli	a5,a5,0xd
    8000405e:	00020737          	lui	a4,0x20
    80004062:	30072073          	csrs	mstatus,a4
    80004066:	6394                	ld	a3,0(a5)
    80004068:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VU, vaddr);
    TEST_ASSERT("machine mprv vu access to vu successful",
    8000406c:	08200593          	li	a1,130
    80004070:	0002a617          	auipc	a2,0x2a
    80004074:	c4860613          	addi	a2,a2,-952 # 8002dcb8 <__func__.0+0xc98>
    80004078:	00029517          	auipc	a0,0x29
    8000407c:	2a050513          	addi	a0,a0,672 # 8002d318 <__func__.0+0x2f8>
    80004080:	53b260ef          	jal	8002adba <printf>
    80004084:	0004d797          	auipc	a5,0x4d
    80004088:	f8d7c783          	lbu	a5,-115(a5) # 80051011 <excpt+0x1>
    8000408c:	00029597          	auipc	a1,0x29
    80004090:	26458593          	addi	a1,a1,612 # 8002d2f0 <__func__.0+0x2d0>
    80004094:	e789                	bnez	a5,8000409e <m_and_hs_using_vs_access_3+0x1a6>
    80004096:	00029597          	auipc	a1,0x29
    8000409a:	24a58593          	addi	a1,a1,586 # 8002d2e0 <__func__.0+0x2c0>
    8000409e:	00029517          	auipc	a0,0x29
    800040a2:	29250513          	addi	a0,a0,658 # 8002d330 <__func__.0+0x310>
    800040a6:	515260ef          	jal	8002adba <printf>
    800040aa:	0004d797          	auipc	a5,0x4d
    800040ae:	f677c783          	lbu	a5,-153(a5) # 80051011 <excpt+0x1>
    800040b2:	e7b9                	bnez	a5,80004100 <m_and_hs_using_vs_access_3+0x208>
    800040b4:	4529                	li	a0,10
    800040b6:	1f3250ef          	jal	80029aa8 <putchar>
    800040ba:	c491                	beqz	s1,800040c6 <m_and_hs_using_vs_access_3+0x1ce>
    800040bc:	0004d797          	auipc	a5,0x4d
    800040c0:	f557c783          	lbu	a5,-171(a5) # 80051011 <excpt+0x1>
    800040c4:	cb85                	beqz	a5,800040f4 <m_and_hs_using_vs_access_3+0x1fc>
    800040c6:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800040c8:	00029597          	auipc	a1,0x29
    800040cc:	22858593          	addi	a1,a1,552 # 8002d2f0 <__func__.0+0x2d0>
    800040d0:	00029517          	auipc	a0,0x29
    800040d4:	2c850513          	addi	a0,a0,712 # 8002d398 <__func__.0+0x378>
    800040d8:	4e3260ef          	jal	8002adba <printf>
    800040dc:	4511                	li	a0,4
    800040de:	d91fc0ef          	jal	80000e6e <goto_priv>
    800040e2:	ea8fd0ef          	jal	8000178a <reset_state>
}
    800040e6:	60e2                	ld	ra,24(sp)
    800040e8:	8522                	mv	a0,s0
    800040ea:	6442                	ld	s0,16(sp)
    800040ec:	64a2                	ld	s1,8(sp)
    800040ee:	6902                	ld	s2,0(sp)
    800040f0:	6105                	addi	sp,sp,32
    800040f2:	8082                	ret
    TEST_ASSERT("machine mprv vu access to vu successful",
    800040f4:	4405                	li	s0,1
    TEST_END();
    800040f6:	00029597          	auipc	a1,0x29
    800040fa:	1ea58593          	addi	a1,a1,490 # 8002d2e0 <__func__.0+0x2c0>
    800040fe:	bfc9                	j	800040d0 <m_and_hs_using_vs_access_3+0x1d8>
    TEST_ASSERT("machine mprv vu access to vu successful",
    80004100:	00029517          	auipc	a0,0x29
    80004104:	23850513          	addi	a0,a0,568 # 8002d338 <__func__.0+0x318>
    80004108:	4b3260ef          	jal	8002adba <printf>
    8000410c:	02900513          	li	a0,41
    80004110:	199250ef          	jal	80029aa8 <putchar>
    80004114:	b745                	j	800040b4 <m_and_hs_using_vs_access_3+0x1bc>

0000000080004116 <m_and_hs_using_vs_access_4>:

bool m_and_hs_using_vs_access_4(){
    80004116:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004118:	00027597          	auipc	a1,0x27
    8000411c:	30858593          	addi	a1,a1,776 # 8002b420 <__func__.8>
    80004120:	00029517          	auipc	a0,0x29
    80004124:	1e050513          	addi	a0,a0,480 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_4(){
    80004128:	ec06                	sd	ra,24(sp)
    8000412a:	e822                	sd	s0,16(sp)
    8000412c:	e426                	sd	s1,8(sp)
    8000412e:	e04a                	sd	s2,0(sp)
    TEST_START();
    80004130:	48b260ef          	jal	8002adba <printf>
    80004134:	4529                	li	a0,10
    80004136:	173250ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    8000413a:	ca6fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000413e:	83ffc0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80004142:	de0fc0ef          	jal	80000722 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80004146:	450d                	li	a0,3
    80004148:	d27fc0ef          	jal	80000e6e <goto_priv>

    set_prev_priv(PRIV_VU);
    8000414c:	4501                	li	a0,0
    8000414e:	c41fc0ef          	jal	80000d8e <set_prev_priv>
    80004152:	00034417          	auipc	s0,0x34
    80004156:	74e40413          	addi	s0,s0,1870 # 800388a0 <__func__.0+0xb880>
    TEST_SETUP_EXCEPT();
    8000415a:	c19fc0ef          	jal	80000d72 <test_setup_except_function>
    8000415e:	6014                	ld	a3,0(s0)
    80004160:	44019737          	lui	a4,0x44019
    asm volatile(
    80004164:	000807b7          	lui	a5,0x80
    80004168:	0706                	slli	a4,a4,0x1
    8000416a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000416c:	e314                	sd	a3,0(a4)
    8000416e:	07b6                	slli	a5,a5,0xd
    80004170:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80004174:	08200593          	li	a1,130
    80004178:	0002a617          	auipc	a2,0x2a
    8000417c:	b6860613          	addi	a2,a2,-1176 # 8002dce0 <__func__.0+0xcc0>
    80004180:	00029517          	auipc	a0,0x29
    80004184:	19850513          	addi	a0,a0,408 # 8002d318 <__func__.0+0x2f8>
    80004188:	433260ef          	jal	8002adba <printf>
    8000418c:	0004d797          	auipc	a5,0x4d
    80004190:	e857c783          	lbu	a5,-379(a5) # 80051011 <excpt+0x1>
    80004194:	00029597          	auipc	a1,0x29
    80004198:	14c58593          	addi	a1,a1,332 # 8002d2e0 <__func__.0+0x2c0>
    8000419c:	c789                	beqz	a5,800041a6 <m_and_hs_using_vs_access_4+0x90>
    8000419e:	00029597          	auipc	a1,0x29
    800041a2:	15258593          	addi	a1,a1,338 # 8002d2f0 <__func__.0+0x2d0>
    800041a6:	00029517          	auipc	a0,0x29
    800041aa:	18a50513          	addi	a0,a0,394 # 8002d330 <__func__.0+0x310>
    800041ae:	40d260ef          	jal	8002adba <printf>
    800041b2:	0004d797          	auipc	a5,0x4d
    800041b6:	e5f7c783          	lbu	a5,-417(a5) # 80051011 <excpt+0x1>
    800041ba:	10079463          	bnez	a5,800042c2 <m_and_hs_using_vs_access_4+0x1ac>
    800041be:	4529                	li	a0,10
    800041c0:	0e9250ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    800041c4:	4509                	li	a0,2
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800041c6:	0004d917          	auipc	s2,0x4d
    800041ca:	e4b94903          	lbu	s2,-437(s2) # 80051011 <excpt+0x1>
    set_prev_priv(PRIV_VS);
    800041ce:	bc1fc0ef          	jal	80000d8e <set_prev_priv>
    TEST_SETUP_EXCEPT();
    800041d2:	ba1fc0ef          	jal	80000d72 <test_setup_except_function>
    800041d6:	6014                	ld	a3,0(s0)
    800041d8:	44019737          	lui	a4,0x44019
    800041dc:	000807b7          	lui	a5,0x80
    800041e0:	0706                	slli	a4,a4,0x1
    800041e2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800041e4:	0004d497          	auipc	s1,0x4d
    800041e8:	e2c48493          	addi	s1,s1,-468 # 80051010 <excpt>
    800041ec:	e314                	sd	a3,0(a4)
    800041ee:	07b6                	slli	a5,a5,0xd
    800041f0:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800041f4:	08200593          	li	a1,130
    800041f8:	0002a617          	auipc	a2,0x2a
    800041fc:	b1860613          	addi	a2,a2,-1256 # 8002dd10 <__func__.0+0xcf0>
    80004200:	00029517          	auipc	a0,0x29
    80004204:	11850513          	addi	a0,a0,280 # 8002d318 <__func__.0+0x2f8>
    80004208:	3b3260ef          	jal	8002adba <printf>
    8000420c:	0004d797          	auipc	a5,0x4d
    80004210:	e057c783          	lbu	a5,-507(a5) # 80051011 <excpt+0x1>
    80004214:	00029597          	auipc	a1,0x29
    80004218:	0dc58593          	addi	a1,a1,220 # 8002d2f0 <__func__.0+0x2d0>
    8000421c:	cf89                	beqz	a5,80004236 <m_and_hs_using_vs_access_4+0x120>
    8000421e:	6498                	ld	a4,8(s1)
    80004220:	47b5                	li	a5,13
    80004222:	00029597          	auipc	a1,0x29
    80004226:	0be58593          	addi	a1,a1,190 # 8002d2e0 <__func__.0+0x2c0>
    8000422a:	00f70663          	beq	a4,a5,80004236 <m_and_hs_using_vs_access_4+0x120>
    8000422e:	00029597          	auipc	a1,0x29
    80004232:	0c258593          	addi	a1,a1,194 # 8002d2f0 <__func__.0+0x2d0>
    80004236:	00029517          	auipc	a0,0x29
    8000423a:	0fa50513          	addi	a0,a0,250 # 8002d330 <__func__.0+0x310>
    8000423e:	37d260ef          	jal	8002adba <printf>
    80004242:	0004d797          	auipc	a5,0x4d
    80004246:	dcf7c783          	lbu	a5,-561(a5) # 80051011 <excpt+0x1>
    8000424a:	c789                	beqz	a5,80004254 <m_and_hs_using_vs_access_4+0x13e>
    8000424c:	6498                	ld	a4,8(s1)
    8000424e:	47b5                	li	a5,13
    80004250:	00f70c63          	beq	a4,a5,80004268 <m_and_hs_using_vs_access_4+0x152>
    80004254:	00029517          	auipc	a0,0x29
    80004258:	0e450513          	addi	a0,a0,228 # 8002d338 <__func__.0+0x318>
    8000425c:	35f260ef          	jal	8002adba <printf>
    80004260:	02900513          	li	a0,41
    80004264:	045250ef          	jal	80029aa8 <putchar>
    80004268:	4529                	li	a0,10
    8000426a:	03f250ef          	jal	80029aa8 <putchar>
    8000426e:	02091363          	bnez	s2,80004294 <m_and_hs_using_vs_access_4+0x17e>
    80004272:	0004d417          	auipc	s0,0x4d
    80004276:	d9f44403          	lbu	s0,-609(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true&& 
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8000427a:	00029597          	auipc	a1,0x29
    8000427e:	07658593          	addi	a1,a1,118 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80004282:	cc11                	beqz	s0,8000429e <m_and_hs_using_vs_access_4+0x188>
    80004284:	6498                	ld	a4,8(s1)
    80004286:	47b5                	li	a5,13
    TEST_END();
    80004288:	00029597          	auipc	a1,0x29
    8000428c:	05858593          	addi	a1,a1,88 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80004290:	00f70763          	beq	a4,a5,8000429e <m_and_hs_using_vs_access_4+0x188>
    80004294:	4401                	li	s0,0
    TEST_END();
    80004296:	00029597          	auipc	a1,0x29
    8000429a:	05a58593          	addi	a1,a1,90 # 8002d2f0 <__func__.0+0x2d0>
    8000429e:	00029517          	auipc	a0,0x29
    800042a2:	0fa50513          	addi	a0,a0,250 # 8002d398 <__func__.0+0x378>
    800042a6:	315260ef          	jal	8002adba <printf>
    800042aa:	4511                	li	a0,4
    800042ac:	bc3fc0ef          	jal	80000e6e <goto_priv>
    800042b0:	cdafd0ef          	jal	8000178a <reset_state>
}
    800042b4:	60e2                	ld	ra,24(sp)
    800042b6:	8522                	mv	a0,s0
    800042b8:	6442                	ld	s0,16(sp)
    800042ba:	64a2                	ld	s1,8(sp)
    800042bc:	6902                	ld	s2,0(sp)
    800042be:	6105                	addi	sp,sp,32
    800042c0:	8082                	ret
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800042c2:	00029517          	auipc	a0,0x29
    800042c6:	07650513          	addi	a0,a0,118 # 8002d338 <__func__.0+0x318>
    800042ca:	2f1260ef          	jal	8002adba <printf>
    800042ce:	02900513          	li	a0,41
    800042d2:	7d6250ef          	jal	80029aa8 <putchar>
    800042d6:	b5e5                	j	800041be <m_and_hs_using_vs_access_4+0xa8>

00000000800042d8 <m_and_hs_using_vs_access_5>:

bool m_and_hs_using_vs_access_5(){
    800042d8:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    800042da:	00027597          	auipc	a1,0x27
    800042de:	16658593          	addi	a1,a1,358 # 8002b440 <__func__.7>
    800042e2:	00029517          	auipc	a0,0x29
    800042e6:	01e50513          	addi	a0,a0,30 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_5(){
    800042ea:	ec06                	sd	ra,24(sp)
    800042ec:	e822                	sd	s0,16(sp)
    800042ee:	e426                	sd	s1,8(sp)
    TEST_START();
    800042f0:	2cb260ef          	jal	8002adba <printf>
    800042f4:	4529                	li	a0,10
    800042f6:	7b2250ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    800042fa:	ae6fc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800042fe:	e7efc0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80004302:	c20fc0ef          	jal	80000722 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);


    goto_priv(PRIV_M);
    80004306:	4511                	li	a0,4
    80004308:	b67fc0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8000430c:	000407b7          	lui	a5,0x40
    80004310:	2007a073          	csrs	vsstatus,a5

    TEST_SETUP_EXCEPT();
    80004314:	a5ffc0ef          	jal	80000d72 <test_setup_except_function>
    80004318:	00034417          	auipc	s0,0x34
    8000431c:	58843403          	ld	s0,1416(s0) # 800388a0 <__func__.0+0xb880>
    80004320:	440197b7          	lui	a5,0x44019
    if(curr_priv != PRIV_M){
    80004324:	00036717          	auipc	a4,0x36
    80004328:	5b072703          	lw	a4,1456(a4) # 8003a8d4 <curr_priv>
    8000432c:	0786                	slli	a5,a5,0x1
    8000432e:	e380                	sd	s0,0(a5)
    80004330:	4791                	li	a5,4
    80004332:	02f70763          	beq	a4,a5,80004360 <m_and_hs_using_vs_access_5+0x88>
        ERROR("trying to read as mprv from low privilege");
    80004336:	00029517          	auipc	a0,0x29
    8000433a:	7d250513          	addi	a0,a0,2002 # 8002db08 <__func__.0+0xae8>
    8000433e:	27d260ef          	jal	8002adba <printf>
    80004342:	0fe00613          	li	a2,254
    80004346:	00027597          	auipc	a1,0x27
    8000434a:	08a58593          	addi	a1,a1,138 # 8002b3d0 <__func__.11>
    8000434e:	00029517          	auipc	a0,0x29
    80004352:	13a50513          	addi	a0,a0,314 # 8002d488 <__func__.0+0x468>
    80004356:	265260ef          	jal	8002adba <printf>
    8000435a:	4501                	li	a0,0
    8000435c:	614260ef          	jal	8002a970 <exit>
    set_prev_priv(priv);
    80004360:	4509                	li	a0,2
    80004362:	a2dfc0ef          	jal	80000d8e <set_prev_priv>
    asm volatile(
    80004366:	000807b7          	lui	a5,0x80
    8000436a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8000436c:	07b6                	slli	a5,a5,0xd
    8000436e:	00020737          	lui	a4,0x20
    80004372:	30072073          	csrs	mstatus,a4
    80004376:	6384                	ld	s1,0(a5)
    80004378:	30073073          	csrc	mstatus,a4
    write64(addr, 0x1107ec0ffee);
    val = read64_mprv(PRIV_VS, vaddr);
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    8000437c:	0002a617          	auipc	a2,0x2a
    80004380:	9cc60613          	addi	a2,a2,-1588 # 8002dd48 <__func__.0+0xd28>
    80004384:	08200593          	li	a1,130
    80004388:	00029517          	auipc	a0,0x29
    8000438c:	f9050513          	addi	a0,a0,-112 # 8002d318 <__func__.0+0x2f8>
    80004390:	22b260ef          	jal	8002adba <printf>
    80004394:	0004d797          	auipc	a5,0x4d
    80004398:	c7d7c783          	lbu	a5,-899(a5) # 80051011 <excpt+0x1>
    8000439c:	c3d1                	beqz	a5,80004420 <m_and_hs_using_vs_access_5+0x148>
    8000439e:	00029597          	auipc	a1,0x29
    800043a2:	f5258593          	addi	a1,a1,-174 # 8002d2f0 <__func__.0+0x2d0>
    800043a6:	00029517          	auipc	a0,0x29
    800043aa:	f8a50513          	addi	a0,a0,-118 # 8002d330 <__func__.0+0x310>
    800043ae:	20d260ef          	jal	8002adba <printf>
    800043b2:	0004d797          	auipc	a5,0x4d
    800043b6:	c5f7c783          	lbu	a5,-929(a5) # 80051011 <excpt+0x1>
    800043ba:	e399                	bnez	a5,800043c0 <m_and_hs_using_vs_access_5+0xe8>
    800043bc:	08848e63          	beq	s1,s0,80004458 <m_and_hs_using_vs_access_5+0x180>
    800043c0:	00029517          	auipc	a0,0x29
    800043c4:	f7850513          	addi	a0,a0,-136 # 8002d338 <__func__.0+0x318>
    800043c8:	1f3260ef          	jal	8002adba <printf>
    800043cc:	02900513          	li	a0,41
    800043d0:	6d8250ef          	jal	80029aa8 <putchar>
    800043d4:	4529                	li	a0,10
    800043d6:	6d2250ef          	jal	80029aa8 <putchar>
    800043da:	0004d797          	auipc	a5,0x4d
    800043de:	c377c783          	lbu	a5,-969(a5) # 80051011 <excpt+0x1>
    800043e2:	eb89                	bnez	a5,800043f4 <m_and_hs_using_vs_access_5+0x11c>
    800043e4:	011087b7          	lui	a5,0x1108
    800043e8:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800043ec:	07c2                	slli	a5,a5,0x10
    800043ee:	17b9                	addi	a5,a5,-18
    800043f0:	06f48c63          	beq	s1,a5,80004468 <m_and_hs_using_vs_access_5+0x190>
    800043f4:	4401                	li	s0,0
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    TEST_END();
    800043f6:	00029597          	auipc	a1,0x29
    800043fa:	efa58593          	addi	a1,a1,-262 # 8002d2f0 <__func__.0+0x2d0>
    800043fe:	00029517          	auipc	a0,0x29
    80004402:	f9a50513          	addi	a0,a0,-102 # 8002d398 <__func__.0+0x378>
    80004406:	1b5260ef          	jal	8002adba <printf>
    8000440a:	4511                	li	a0,4
    8000440c:	a63fc0ef          	jal	80000e6e <goto_priv>
    80004410:	b7afd0ef          	jal	8000178a <reset_state>
}
    80004414:	60e2                	ld	ra,24(sp)
    80004416:	8522                	mv	a0,s0
    80004418:	6442                	ld	s0,16(sp)
    8000441a:	64a2                	ld	s1,8(sp)
    8000441c:	6105                	addi	sp,sp,32
    8000441e:	8082                	ret
    TEST_ASSERT("machine mprv access vs user page successful when vsstatus.sum set",
    80004420:	00848d63          	beq	s1,s0,8000443a <m_and_hs_using_vs_access_5+0x162>
    80004424:	00029597          	auipc	a1,0x29
    80004428:	ecc58593          	addi	a1,a1,-308 # 8002d2f0 <__func__.0+0x2d0>
    8000442c:	00029517          	auipc	a0,0x29
    80004430:	f0450513          	addi	a0,a0,-252 # 8002d330 <__func__.0+0x310>
    80004434:	187260ef          	jal	8002adba <printf>
    80004438:	b761                	j	800043c0 <m_and_hs_using_vs_access_5+0xe8>
    8000443a:	00029597          	auipc	a1,0x29
    8000443e:	ea658593          	addi	a1,a1,-346 # 8002d2e0 <__func__.0+0x2c0>
    80004442:	00029517          	auipc	a0,0x29
    80004446:	eee50513          	addi	a0,a0,-274 # 8002d330 <__func__.0+0x310>
    8000444a:	171260ef          	jal	8002adba <printf>
    8000444e:	0004d797          	auipc	a5,0x4d
    80004452:	bc37c783          	lbu	a5,-1085(a5) # 80051011 <excpt+0x1>
    80004456:	f7ad                	bnez	a5,800043c0 <m_and_hs_using_vs_access_5+0xe8>
    80004458:	4529                	li	a0,10
    8000445a:	64e250ef          	jal	80029aa8 <putchar>
    8000445e:	0004d797          	auipc	a5,0x4d
    80004462:	bb37c783          	lbu	a5,-1101(a5) # 80051011 <excpt+0x1>
    80004466:	f7d9                	bnez	a5,800043f4 <m_and_hs_using_vs_access_5+0x11c>
    80004468:	4405                	li	s0,1
    TEST_END();
    8000446a:	00029597          	auipc	a1,0x29
    8000446e:	e7658593          	addi	a1,a1,-394 # 8002d2e0 <__func__.0+0x2c0>
    80004472:	b771                	j	800043fe <m_and_hs_using_vs_access_5+0x126>

0000000080004474 <m_and_hs_using_vs_access_6>:

bool m_and_hs_using_vs_access_6(){
    80004474:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004476:	00027597          	auipc	a1,0x27
    8000447a:	fea58593          	addi	a1,a1,-22 # 8002b460 <__func__.6>
    8000447e:	00029517          	auipc	a0,0x29
    80004482:	e8250513          	addi	a0,a0,-382 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_6(){
    80004486:	ec06                	sd	ra,24(sp)
    80004488:	e822                	sd	s0,16(sp)
    8000448a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000448c:	12f260ef          	jal	8002adba <printf>
    80004490:	4529                	li	a0,10
    80004492:	616250ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    80004496:	94afc0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000449a:	ce2fc0ef          	jal	8000097c <hpt_init>
    vspt_init();
    8000449e:	a84fc0ef          	jal	80000722 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800044a2:	000407b7          	lui	a5,0x40
    800044a6:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    800044aa:	450d                	li	a0,3
    800044ac:	9c3fc0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    800044b0:	4509                	li	a0,2
    800044b2:	8ddfc0ef          	jal	80000d8e <set_prev_priv>

    TEST_SETUP_EXCEPT();
    800044b6:	8bdfc0ef          	jal	80000d72 <test_setup_except_function>
    800044ba:	00034497          	auipc	s1,0x34
    800044be:	3e64b483          	ld	s1,998(s1) # 800388a0 <__func__.0+0xb880>
    800044c2:	440197b7          	lui	a5,0x44019
    800044c6:	00080437          	lui	s0,0x80
    800044ca:	0786                	slli	a5,a5,0x1
    800044cc:	0465                	addi	s0,s0,25 # 80019 <_test_table_size+0x80018>
    800044ce:	e384                	sd	s1,0(a5)
    800044d0:	0436                	slli	s0,s0,0xd
    800044d2:	6c044473          	.insn	4, 0x6c044473
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800044d6:	0002a617          	auipc	a2,0x2a
    800044da:	8ba60613          	addi	a2,a2,-1862 # 8002dd90 <__func__.0+0xd70>
    800044de:	08200593          	li	a1,130
    800044e2:	00029517          	auipc	a0,0x29
    800044e6:	e3650513          	addi	a0,a0,-458 # 8002d318 <__func__.0+0x2f8>
    800044ea:	0d1260ef          	jal	8002adba <printf>
    800044ee:	0004d797          	auipc	a5,0x4d
    800044f2:	b237c783          	lbu	a5,-1245(a5) # 80051011 <excpt+0x1>
    800044f6:	e7a5                	bnez	a5,8000455e <m_and_hs_using_vs_access_6+0xea>
    800044f8:	0c940863          	beq	s0,s1,800045c8 <m_and_hs_using_vs_access_6+0x154>
    800044fc:	00029597          	auipc	a1,0x29
    80004500:	df458593          	addi	a1,a1,-524 # 8002d2f0 <__func__.0+0x2d0>
    80004504:	00029517          	auipc	a0,0x29
    80004508:	e2c50513          	addi	a0,a0,-468 # 8002d330 <__func__.0+0x310>
    8000450c:	0af260ef          	jal	8002adba <printf>
    80004510:	00029517          	auipc	a0,0x29
    80004514:	e2850513          	addi	a0,a0,-472 # 8002d338 <__func__.0+0x318>
    80004518:	0a3260ef          	jal	8002adba <printf>
    8000451c:	02900513          	li	a0,41
    80004520:	588250ef          	jal	80029aa8 <putchar>
    80004524:	4529                	li	a0,10
    80004526:	582250ef          	jal	80029aa8 <putchar>
        excpt.triggered == false && val == 0x1107ec0ffee
    );
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    8000452a:	000407b7          	lui	a5,0x40
    8000452e:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    80004532:	4401                	li	s0,0

    TEST_END();
    80004534:	00029597          	auipc	a1,0x29
    80004538:	dbc58593          	addi	a1,a1,-580 # 8002d2f0 <__func__.0+0x2d0>
    8000453c:	00029517          	auipc	a0,0x29
    80004540:	e5c50513          	addi	a0,a0,-420 # 8002d398 <__func__.0+0x378>
    80004544:	077260ef          	jal	8002adba <printf>
    80004548:	4511                	li	a0,4
    8000454a:	925fc0ef          	jal	80000e6e <goto_priv>
    8000454e:	a3cfd0ef          	jal	8000178a <reset_state>
}
    80004552:	60e2                	ld	ra,24(sp)
    80004554:	8522                	mv	a0,s0
    80004556:	6442                	ld	s0,16(sp)
    80004558:	64a2                	ld	s1,8(sp)
    8000455a:	6105                	addi	sp,sp,32
    8000455c:	8082                	ret
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    8000455e:	00029597          	auipc	a1,0x29
    80004562:	d9258593          	addi	a1,a1,-622 # 8002d2f0 <__func__.0+0x2d0>
    80004566:	00029517          	auipc	a0,0x29
    8000456a:	dca50513          	addi	a0,a0,-566 # 8002d330 <__func__.0+0x310>
    8000456e:	04d260ef          	jal	8002adba <printf>
    80004572:	0004d797          	auipc	a5,0x4d
    80004576:	a9f7c783          	lbu	a5,-1377(a5) # 80051011 <excpt+0x1>
    8000457a:	e399                	bnez	a5,80004580 <m_and_hs_using_vs_access_6+0x10c>
    8000457c:	06940563          	beq	s0,s1,800045e6 <m_and_hs_using_vs_access_6+0x172>
    80004580:	00029517          	auipc	a0,0x29
    80004584:	db850513          	addi	a0,a0,-584 # 8002d338 <__func__.0+0x318>
    80004588:	033260ef          	jal	8002adba <printf>
    8000458c:	02900513          	li	a0,41
    80004590:	518250ef          	jal	80029aa8 <putchar>
    80004594:	4529                	li	a0,10
    80004596:	512250ef          	jal	80029aa8 <putchar>
    8000459a:	0004d797          	auipc	a5,0x4d
    8000459e:	a777c783          	lbu	a5,-1417(a5) # 80051011 <excpt+0x1>
    800045a2:	f7c1                	bnez	a5,8000452a <m_and_hs_using_vs_access_6+0xb6>
    800045a4:	011087b7          	lui	a5,0x1108
    800045a8:	ec178793          	addi	a5,a5,-319 # 1107ec1 <STACK_SIZE+0x1007ec1>
    800045ac:	07c2                	slli	a5,a5,0x10
    800045ae:	17b9                	addi	a5,a5,-18
    800045b0:	f6f41de3          	bne	s0,a5,8000452a <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800045b4:	000407b7          	lui	a5,0x40
    800045b8:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800045bc:	4405                	li	s0,1
    TEST_END();
    800045be:	00029597          	auipc	a1,0x29
    800045c2:	d2258593          	addi	a1,a1,-734 # 8002d2e0 <__func__.0+0x2c0>
    800045c6:	bf9d                	j	8000453c <m_and_hs_using_vs_access_6+0xc8>
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800045c8:	00029597          	auipc	a1,0x29
    800045cc:	d1858593          	addi	a1,a1,-744 # 8002d2e0 <__func__.0+0x2c0>
    800045d0:	00029517          	auipc	a0,0x29
    800045d4:	d6050513          	addi	a0,a0,-672 # 8002d330 <__func__.0+0x310>
    800045d8:	7e2260ef          	jal	8002adba <printf>
    800045dc:	0004d797          	auipc	a5,0x4d
    800045e0:	a357c783          	lbu	a5,-1483(a5) # 80051011 <excpt+0x1>
    800045e4:	ffd1                	bnez	a5,80004580 <m_and_hs_using_vs_access_6+0x10c>
    800045e6:	4529                	li	a0,10
    800045e8:	4c0250ef          	jal	80029aa8 <putchar>
    800045ec:	0004d797          	auipc	a5,0x4d
    800045f0:	a257c783          	lbu	a5,-1499(a5) # 80051011 <excpt+0x1>
    800045f4:	fb9d                	bnez	a5,8000452a <m_and_hs_using_vs_access_6+0xb6>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800045f6:	000407b7          	lui	a5,0x40
    800045fa:	2007b073          	csrc	vsstatus,a5
    TEST_ASSERT("hs hlvd to user page successful when vsstatus.sum set",
    800045fe:	4405                	li	s0,1
    TEST_END();
    80004600:	00029597          	auipc	a1,0x29
    80004604:	ce058593          	addi	a1,a1,-800 # 8002d2e0 <__func__.0+0x2c0>
    80004608:	bf15                	j	8000453c <m_and_hs_using_vs_access_6+0xc8>

000000008000460a <m_and_hs_using_vs_access_7>:

bool m_and_hs_using_vs_access_7(){
    8000460a:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000460c:	00027597          	auipc	a1,0x27
    80004610:	e7458593          	addi	a1,a1,-396 # 8002b480 <__func__.5>
    80004614:	00029517          	auipc	a0,0x29
    80004618:	cec50513          	addi	a0,a0,-788 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_7(){
    8000461c:	e406                	sd	ra,8(sp)
    8000461e:	e022                	sd	s0,0(sp)
    TEST_START();
    80004620:	79a260ef          	jal	8002adba <printf>
    80004624:	4529                	li	a0,10
    80004626:	482250ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    8000462a:	fb7fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000462e:	b4efc0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80004632:	8f0fc0ef          	jal	80000722 <vspt_init>

    vaddr = vs_page_base(VSX_GUX);
    addr = phys_page_base(VSX_GUX);

    goto_priv(PRIV_HS);
    80004636:	450d                	li	a0,3
    80004638:	837fc0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8000463c:	4509                	li	a0,2
    8000463e:	f50fc0ef          	jal	80000d8e <set_prev_priv>

    TEST_SETUP_EXCEPT();
    80004642:	f30fc0ef          	jal	80000d72 <test_setup_except_function>
    80004646:	200037b7          	lui	a5,0x20003
    8000464a:	078e                	slli	a5,a5,0x3
    8000464c:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80004650:	08200593          	li	a1,130
    80004654:	00029617          	auipc	a2,0x29
    80004658:	77460613          	addi	a2,a2,1908 # 8002ddc8 <__func__.0+0xda8>
    8000465c:	00029517          	auipc	a0,0x29
    80004660:	cbc50513          	addi	a0,a0,-836 # 8002d318 <__func__.0+0x2f8>
    80004664:	756260ef          	jal	8002adba <printf>
    80004668:	0004d797          	auipc	a5,0x4d
    8000466c:	9a97c783          	lbu	a5,-1623(a5) # 80051011 <excpt+0x1>
    80004670:	00029597          	auipc	a1,0x29
    80004674:	c7058593          	addi	a1,a1,-912 # 8002d2e0 <__func__.0+0x2c0>
    80004678:	e789                	bnez	a5,80004682 <m_and_hs_using_vs_access_7+0x78>
    8000467a:	00029597          	auipc	a1,0x29
    8000467e:	c7658593          	addi	a1,a1,-906 # 8002d2f0 <__func__.0+0x2d0>
    80004682:	00029517          	auipc	a0,0x29
    80004686:	cae50513          	addi	a0,a0,-850 # 8002d330 <__func__.0+0x310>
    8000468a:	730260ef          	jal	8002adba <printf>
    8000468e:	0004d797          	auipc	a5,0x4d
    80004692:	9837c783          	lbu	a5,-1661(a5) # 80051011 <excpt+0x1>
    80004696:	0c078e63          	beqz	a5,80004772 <m_and_hs_using_vs_access_7+0x168>
    8000469a:	4529                	li	a0,10
    8000469c:	40c250ef          	jal	80029aa8 <putchar>
    800046a0:	0004d417          	auipc	s0,0x4d
    800046a4:	97144403          	lbu	s0,-1679(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true
    );
    TEST_SETUP_EXCEPT();
    800046a8:	ecafc0ef          	jal	80000d72 <test_setup_except_function>
    CSRS(sstatus, SSTATUS_MXR);
    800046ac:	000807b7          	lui	a5,0x80
    800046b0:	1007a073          	csrs	sstatus,a5
    800046b4:	200037b7          	lui	a5,0x20003
    800046b8:	078e                	slli	a5,a5,0x3
    800046ba:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    800046be:	08200593          	li	a1,130
    800046c2:	00029617          	auipc	a2,0x29
    800046c6:	73660613          	addi	a2,a2,1846 # 8002ddf8 <__func__.0+0xdd8>
    800046ca:	00029517          	auipc	a0,0x29
    800046ce:	c4e50513          	addi	a0,a0,-946 # 8002d318 <__func__.0+0x2f8>
    800046d2:	6e8260ef          	jal	8002adba <printf>
    800046d6:	0004d797          	auipc	a5,0x4d
    800046da:	93b7c783          	lbu	a5,-1733(a5) # 80051011 <excpt+0x1>
    800046de:	00029597          	auipc	a1,0x29
    800046e2:	c1258593          	addi	a1,a1,-1006 # 8002d2f0 <__func__.0+0x2d0>
    800046e6:	e789                	bnez	a5,800046f0 <m_and_hs_using_vs_access_7+0xe6>
    800046e8:	00029597          	auipc	a1,0x29
    800046ec:	bf858593          	addi	a1,a1,-1032 # 8002d2e0 <__func__.0+0x2c0>
    800046f0:	00029517          	auipc	a0,0x29
    800046f4:	c4050513          	addi	a0,a0,-960 # 8002d330 <__func__.0+0x310>
    800046f8:	6c2260ef          	jal	8002adba <printf>
    800046fc:	0004d797          	auipc	a5,0x4d
    80004700:	9157c783          	lbu	a5,-1771(a5) # 80051011 <excpt+0x1>
    80004704:	efa1                	bnez	a5,8000475c <m_and_hs_using_vs_access_7+0x152>
    80004706:	4529                	li	a0,10
    80004708:	3a0250ef          	jal	80029aa8 <putchar>
    8000470c:	c411                	beqz	s0,80004718 <m_and_hs_using_vs_access_7+0x10e>
    8000470e:	0004d797          	auipc	a5,0x4d
    80004712:	9037c783          	lbu	a5,-1789(a5) # 80051011 <excpt+0x1>
    80004716:	cb95                	beqz	a5,8000474a <m_and_hs_using_vs_access_7+0x140>
        excpt.triggered == false
    );
    CSRC(sstatus, SSTATUS_MXR);
    80004718:	000807b7          	lui	a5,0x80
    8000471c:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    80004720:	4401                	li	s0,0

        TEST_END();
    80004722:	00029597          	auipc	a1,0x29
    80004726:	bce58593          	addi	a1,a1,-1074 # 8002d2f0 <__func__.0+0x2d0>
    8000472a:	00029517          	auipc	a0,0x29
    8000472e:	c6e50513          	addi	a0,a0,-914 # 8002d398 <__func__.0+0x378>
    80004732:	688260ef          	jal	8002adba <printf>
    80004736:	4511                	li	a0,4
    80004738:	f36fc0ef          	jal	80000e6e <goto_priv>
    8000473c:	84efd0ef          	jal	8000178a <reset_state>
}
    80004740:	60a2                	ld	ra,8(sp)
    80004742:	8522                	mv	a0,s0
    80004744:	6402                	ld	s0,0(sp)
    80004746:	0141                	addi	sp,sp,16
    80004748:	8082                	ret
    CSRC(sstatus, SSTATUS_MXR);
    8000474a:	000807b7          	lui	a5,0x80
    8000474e:	1007b073          	csrc	sstatus,a5
        TEST_END();
    80004752:	00029597          	auipc	a1,0x29
    80004756:	b8e58593          	addi	a1,a1,-1138 # 8002d2e0 <__func__.0+0x2c0>
    8000475a:	bfc1                	j	8000472a <m_and_hs_using_vs_access_7+0x120>
    TEST_ASSERT("hs hlvd of xo vs page succsseful",
    8000475c:	00029517          	auipc	a0,0x29
    80004760:	bdc50513          	addi	a0,a0,-1060 # 8002d338 <__func__.0+0x318>
    80004764:	656260ef          	jal	8002adba <printf>
    80004768:	02900513          	li	a0,41
    8000476c:	33c250ef          	jal	80029aa8 <putchar>
    80004770:	bf59                	j	80004706 <m_and_hs_using_vs_access_7+0xfc>
    TEST_ASSERT("hs hlvd of xo vs page leads to exception",
    80004772:	00029517          	auipc	a0,0x29
    80004776:	bc650513          	addi	a0,a0,-1082 # 8002d338 <__func__.0+0x318>
    8000477a:	640260ef          	jal	8002adba <printf>
    8000477e:	02900513          	li	a0,41
    80004782:	326250ef          	jal	80029aa8 <putchar>
    80004786:	bf11                	j	8000469a <m_and_hs_using_vs_access_7+0x90>

0000000080004788 <m_and_hs_using_vs_access_8>:

bool m_and_hs_using_vs_access_8(){
    80004788:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    8000478a:	00027597          	auipc	a1,0x27
    8000478e:	d1658593          	addi	a1,a1,-746 # 8002b4a0 <__func__.4>
    80004792:	00029517          	auipc	a0,0x29
    80004796:	b6e50513          	addi	a0,a0,-1170 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_8(){
    8000479a:	ec06                	sd	ra,24(sp)
    8000479c:	e822                	sd	s0,16(sp)
    8000479e:	e426                	sd	s1,8(sp)
    TEST_START();
    800047a0:	61a260ef          	jal	8002adba <printf>
    800047a4:	4529                	li	a0,10
    800047a6:	302250ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    800047aa:	e37fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    800047ae:	9cefc0ef          	jal	8000097c <hpt_init>
    vspt_init();
    800047b2:	f71fb0ef          	jal	80000722 <vspt_init>

    vaddr = vs_page_base(VSX_GUR);
    addr = phys_page_base(VSX_GUR);
    goto_priv(PRIV_HS);
    800047b6:	450d                	li	a0,3
    800047b8:	eb6fc0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    800047bc:	4509                	li	a0,2
    800047be:	dd0fc0ef          	jal	80000d8e <set_prev_priv>
    CSRW(sscratch, 0x1111111);
    800047c2:	011117b7          	lui	a5,0x1111
    800047c6:	1117879b          	addiw	a5,a5,273 # 1111111 <STACK_SIZE+0x1011111>
    800047ca:	14079073          	csrw	sscratch,a5
    TEST_SETUP_EXCEPT();
    800047ce:	da4fc0ef          	jal	80000d72 <test_setup_except_function>
    800047d2:	001007b7          	lui	a5,0x100
    800047d6:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    800047d8:	07b2                	slli	a5,a5,0xc
    800047da:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page leads to load page fault",
    800047de:	08200593          	li	a1,130
    800047e2:	00029617          	auipc	a2,0x29
    800047e6:	63e60613          	addi	a2,a2,1598 # 8002de20 <__func__.0+0xe00>
    800047ea:	00029517          	auipc	a0,0x29
    800047ee:	b2e50513          	addi	a0,a0,-1234 # 8002d318 <__func__.0+0x2f8>
    800047f2:	5c8260ef          	jal	8002adba <printf>
    800047f6:	0004d797          	auipc	a5,0x4d
    800047fa:	81b7c783          	lbu	a5,-2021(a5) # 80051011 <excpt+0x1>
    800047fe:	0004d497          	auipc	s1,0x4d
    80004802:	81248493          	addi	s1,s1,-2030 # 80051010 <excpt>
    80004806:	00029597          	auipc	a1,0x29
    8000480a:	aea58593          	addi	a1,a1,-1302 # 8002d2f0 <__func__.0+0x2d0>
    8000480e:	cf89                	beqz	a5,80004828 <m_and_hs_using_vs_access_8+0xa0>
    80004810:	6498                	ld	a4,8(s1)
    80004812:	47b5                	li	a5,13
    80004814:	00029597          	auipc	a1,0x29
    80004818:	acc58593          	addi	a1,a1,-1332 # 8002d2e0 <__func__.0+0x2c0>
    8000481c:	00f70663          	beq	a4,a5,80004828 <m_and_hs_using_vs_access_8+0xa0>
    80004820:	00029597          	auipc	a1,0x29
    80004824:	ad058593          	addi	a1,a1,-1328 # 8002d2f0 <__func__.0+0x2d0>
    80004828:	00029517          	auipc	a0,0x29
    8000482c:	b0850513          	addi	a0,a0,-1272 # 8002d330 <__func__.0+0x310>
    80004830:	58a260ef          	jal	8002adba <printf>
    80004834:	0004c797          	auipc	a5,0x4c
    80004838:	7dd7c783          	lbu	a5,2013(a5) # 80051011 <excpt+0x1>
    8000483c:	c789                	beqz	a5,80004846 <m_and_hs_using_vs_access_8+0xbe>
    8000483e:	6498                	ld	a4,8(s1)
    80004840:	47b5                	li	a5,13
    80004842:	00f70c63          	beq	a4,a5,8000485a <m_and_hs_using_vs_access_8+0xd2>
    80004846:	00029517          	auipc	a0,0x29
    8000484a:	af250513          	addi	a0,a0,-1294 # 8002d338 <__func__.0+0x318>
    8000484e:	56c260ef          	jal	8002adba <printf>
    80004852:	02900513          	li	a0,41
    80004856:	252250ef          	jal	80029aa8 <putchar>
    8000485a:	4529                	li	a0,10
    8000485c:	24c250ef          	jal	80029aa8 <putchar>
    80004860:	0004c797          	auipc	a5,0x4c
    80004864:	7b17c783          	lbu	a5,1969(a5) # 80051011 <excpt+0x1>
    80004868:	4401                	li	s0,0
    8000486a:	c789                	beqz	a5,80004874 <m_and_hs_using_vs_access_8+0xec>
    8000486c:	6480                	ld	s0,8(s1)
    8000486e:	144d                	addi	s0,s0,-13
    80004870:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    TEST_SETUP_EXCEPT();
    80004874:	cfefc0ef          	jal	80000d72 <test_setup_except_function>
    CSRS(CSR_VSSTATUS, SSTATUS_MXR);
    80004878:	000807b7          	lui	a5,0x80
    8000487c:	2007a073          	csrs	vsstatus,a5
    80004880:	001007b7          	lui	a5,0x100
    80004884:	07dd                	addi	a5,a5,23 # 100017 <STACK_SIZE+0x17>
    80004886:	07b2                	slli	a5,a5,0xc
    80004888:	6c07c7f3          	.insn	4, 0x6c07c7f3
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    8000488c:	08200593          	li	a1,130
    80004890:	00029617          	auipc	a2,0x29
    80004894:	5c060613          	addi	a2,a2,1472 # 8002de50 <__func__.0+0xe30>
    80004898:	00029517          	auipc	a0,0x29
    8000489c:	a8050513          	addi	a0,a0,-1408 # 8002d318 <__func__.0+0x2f8>
    800048a0:	51a260ef          	jal	8002adba <printf>
    800048a4:	0004c797          	auipc	a5,0x4c
    800048a8:	76d7c783          	lbu	a5,1901(a5) # 80051011 <excpt+0x1>
    800048ac:	00029597          	auipc	a1,0x29
    800048b0:	a4458593          	addi	a1,a1,-1468 # 8002d2f0 <__func__.0+0x2d0>
    800048b4:	e789                	bnez	a5,800048be <m_and_hs_using_vs_access_8+0x136>
    800048b6:	00029597          	auipc	a1,0x29
    800048ba:	a2a58593          	addi	a1,a1,-1494 # 8002d2e0 <__func__.0+0x2c0>
    800048be:	00029517          	auipc	a0,0x29
    800048c2:	a7250513          	addi	a0,a0,-1422 # 8002d330 <__func__.0+0x310>
    800048c6:	4f4260ef          	jal	8002adba <printf>
    800048ca:	0004c797          	auipc	a5,0x4c
    800048ce:	7477c783          	lbu	a5,1863(a5) # 80051011 <excpt+0x1>
    800048d2:	e7b1                	bnez	a5,8000491e <m_and_hs_using_vs_access_8+0x196>
    800048d4:	4529                	li	a0,10
    800048d6:	1d2250ef          	jal	80029aa8 <putchar>
    800048da:	c411                	beqz	s0,800048e6 <m_and_hs_using_vs_access_8+0x15e>
    800048dc:	0004c797          	auipc	a5,0x4c
    800048e0:	7357c783          	lbu	a5,1845(a5) # 80051011 <excpt+0x1>
    800048e4:	c79d                	beqz	a5,80004912 <m_and_hs_using_vs_access_8+0x18a>
    800048e6:	4401                	li	s0,0
        excpt.triggered == false
    );


    TEST_END();
    800048e8:	00029597          	auipc	a1,0x29
    800048ec:	a0858593          	addi	a1,a1,-1528 # 8002d2f0 <__func__.0+0x2d0>
    800048f0:	00029517          	auipc	a0,0x29
    800048f4:	aa850513          	addi	a0,a0,-1368 # 8002d398 <__func__.0+0x378>
    800048f8:	4c2260ef          	jal	8002adba <printf>
    800048fc:	4511                	li	a0,4
    800048fe:	d70fc0ef          	jal	80000e6e <goto_priv>
    80004902:	e89fc0ef          	jal	8000178a <reset_state>
}
    80004906:	60e2                	ld	ra,24(sp)
    80004908:	8522                	mv	a0,s0
    8000490a:	6442                	ld	s0,16(sp)
    8000490c:	64a2                	ld	s1,8(sp)
    8000490e:	6105                	addi	sp,sp,32
    80004910:	8082                	ret
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    80004912:	4405                	li	s0,1
    TEST_END();
    80004914:	00029597          	auipc	a1,0x29
    80004918:	9cc58593          	addi	a1,a1,-1588 # 8002d2e0 <__func__.0+0x2c0>
    8000491c:	bfd1                	j	800048f0 <m_and_hs_using_vs_access_8+0x168>
    TEST_ASSERT("hs hlvd of xo vs page succsseful with sstatus.mxr set",
    8000491e:	00029517          	auipc	a0,0x29
    80004922:	a1a50513          	addi	a0,a0,-1510 # 8002d338 <__func__.0+0x318>
    80004926:	494260ef          	jal	8002adba <printf>
    8000492a:	02900513          	li	a0,41
    8000492e:	17a250ef          	jal	80029aa8 <putchar>
    80004932:	b74d                	j	800048d4 <m_and_hs_using_vs_access_8+0x14c>

0000000080004934 <m_and_hs_using_vs_access_9>:

bool m_and_hs_using_vs_access_9(){
    80004934:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004936:	00027597          	auipc	a1,0x27
    8000493a:	b8a58593          	addi	a1,a1,-1142 # 8002b4c0 <__func__.3>
    8000493e:	00029517          	auipc	a0,0x29
    80004942:	9c250513          	addi	a0,a0,-1598 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_9(){
    80004946:	ec06                	sd	ra,24(sp)
    80004948:	e822                	sd	s0,16(sp)
    8000494a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000494c:	46e260ef          	jal	8002adba <printf>
    80004950:	4529                	li	a0,10
    80004952:	156250ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    80004956:	c8bfb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    8000495a:	822fc0ef          	jal	8000097c <hpt_init>
    vspt_init();
    8000495e:	dc5fb0ef          	jal	80000722 <vspt_init>
    
    reset_state();
    80004962:	e29fc0ef          	jal	8000178a <reset_state>
    goto_priv(PRIV_HS);
    80004966:	450d                	li	a0,3
    80004968:	d06fc0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8000496c:	4509                	li	a0,2
    8000496e:	c20fc0ef          	jal	80000d8e <set_prev_priv>
    hpt_init();
    80004972:	80afc0ef          	jal	8000097c <hpt_init>
    
    vaddr = vs_page_base(VSI_GUR) ;
    TEST_SETUP_EXCEPT();
    80004976:	bfcfc0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    8000497a:	37ab77b7          	lui	a5,0x37ab7
    8000497e:	00100737          	lui	a4,0x100
    80004982:	078a                	slli	a5,a5,0x2
    80004984:	06970713          	addi	a4,a4,105 # 100069 <STACK_SIZE+0x69>
    80004988:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000498c:	0732                	slli	a4,a4,0xc
    8000498e:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80004992:	0004c417          	auipc	s0,0x4c
    80004996:	67e40413          	addi	s0,s0,1662 # 80051010 <excpt>
    8000499a:	640c                	ld	a1,8(s0)
    8000499c:	00029517          	auipc	a0,0x29
    800049a0:	4ec50513          	addi	a0,a0,1260 # 8002de88 <__func__.0+0xe68>
    800049a4:	416260ef          	jal	8002adba <printf>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    800049a8:	08200593          	li	a1,130
    800049ac:	00029617          	auipc	a2,0x29
    800049b0:	4e460613          	addi	a2,a2,1252 # 8002de90 <__func__.0+0xe70>
    800049b4:	00029517          	auipc	a0,0x29
    800049b8:	96450513          	addi	a0,a0,-1692 # 8002d318 <__func__.0+0x2f8>
    800049bc:	3fe260ef          	jal	8002adba <printf>
    800049c0:	0004c797          	auipc	a5,0x4c
    800049c4:	6517c783          	lbu	a5,1617(a5) # 80051011 <excpt+0x1>
    800049c8:	00029597          	auipc	a1,0x29
    800049cc:	92858593          	addi	a1,a1,-1752 # 8002d2f0 <__func__.0+0x2d0>
    800049d0:	c789                	beqz	a5,800049da <m_and_hs_using_vs_access_9+0xa6>
    800049d2:	6418                	ld	a4,8(s0)
    800049d4:	47dd                	li	a5,23
    800049d6:	12f70463          	beq	a4,a5,80004afe <m_and_hs_using_vs_access_9+0x1ca>
    800049da:	00029517          	auipc	a0,0x29
    800049de:	95650513          	addi	a0,a0,-1706 # 8002d330 <__func__.0+0x310>
    800049e2:	3d8260ef          	jal	8002adba <printf>
    800049e6:	0004c797          	auipc	a5,0x4c
    800049ea:	62b7c783          	lbu	a5,1579(a5) # 80051011 <excpt+0x1>
    800049ee:	c789                	beqz	a5,800049f8 <m_and_hs_using_vs_access_9+0xc4>
    800049f0:	6418                	ld	a4,8(s0)
    800049f2:	47dd                	li	a5,23
    800049f4:	0ef70263          	beq	a4,a5,80004ad8 <m_and_hs_using_vs_access_9+0x1a4>
    800049f8:	00029517          	auipc	a0,0x29
    800049fc:	94050513          	addi	a0,a0,-1728 # 8002d338 <__func__.0+0x318>
    80004a00:	3ba260ef          	jal	8002adba <printf>
    80004a04:	02900513          	li	a0,41
    80004a08:	0a0250ef          	jal	80029aa8 <putchar>
    80004a0c:	4529                	li	a0,10
    80004a0e:	09a250ef          	jal	80029aa8 <putchar>
    80004a12:	0004c797          	auipc	a5,0x4c
    80004a16:	5ff7c783          	lbu	a5,1535(a5) # 80051011 <excpt+0x1>
    80004a1a:	4481                	li	s1,0
    80004a1c:	c789                	beqz	a5,80004a26 <m_and_hs_using_vs_access_9+0xf2>
    80004a1e:	6418                	ld	a4,8(s0)
    80004a20:	47dd                	li	a5,23
    80004a22:	0ef70e63          	beq	a4,a5,80004b1e <m_and_hs_using_vs_access_9+0x1ea>
        excpt.cause == CAUSE_SGPF &&
        excpt.tval2 == vaddr >> 2
    );

    vaddr = vs_page_base(VSI_GUR);
    TEST_SETUP_EXCEPT();
    80004a26:	b4cfc0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80004a2a:	001007b7          	lui	a5,0x100
    80004a2e:	06978793          	addi	a5,a5,105 # 100069 <STACK_SIZE+0x69>
    80004a32:	07b2                	slli	a5,a5,0xc
    80004a34:	6007c7f3          	.insn	4, 0x6007c7f3
    val = hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80004a38:	640c                	ld	a1,8(s0)
    80004a3a:	00029517          	auipc	a0,0x29
    80004a3e:	44e50513          	addi	a0,a0,1102 # 8002de88 <__func__.0+0xe68>
    80004a42:	378260ef          	jal	8002adba <printf>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004a46:	08200593          	li	a1,130
    80004a4a:	00029617          	auipc	a2,0x29
    80004a4e:	48660613          	addi	a2,a2,1158 # 8002ded0 <__func__.0+0xeb0>
    80004a52:	00029517          	auipc	a0,0x29
    80004a56:	8c650513          	addi	a0,a0,-1850 # 8002d318 <__func__.0+0x2f8>
    80004a5a:	360260ef          	jal	8002adba <printf>
    80004a5e:	0004c797          	auipc	a5,0x4c
    80004a62:	5b37c783          	lbu	a5,1459(a5) # 80051011 <excpt+0x1>
    80004a66:	00029597          	auipc	a1,0x29
    80004a6a:	88a58593          	addi	a1,a1,-1910 # 8002d2f0 <__func__.0+0x2d0>
    80004a6e:	e789                	bnez	a5,80004a78 <m_and_hs_using_vs_access_9+0x144>
    80004a70:	00029597          	auipc	a1,0x29
    80004a74:	87058593          	addi	a1,a1,-1936 # 8002d2e0 <__func__.0+0x2c0>
    80004a78:	00029517          	auipc	a0,0x29
    80004a7c:	8b850513          	addi	a0,a0,-1864 # 8002d330 <__func__.0+0x310>
    80004a80:	33a260ef          	jal	8002adba <printf>
    80004a84:	0004c797          	auipc	a5,0x4c
    80004a88:	58d7c783          	lbu	a5,1421(a5) # 80051011 <excpt+0x1>
    80004a8c:	efb1                	bnez	a5,80004ae8 <m_and_hs_using_vs_access_9+0x1b4>
    80004a8e:	4529                	li	a0,10
    80004a90:	018250ef          	jal	80029aa8 <putchar>
    80004a94:	c491                	beqz	s1,80004aa0 <m_and_hs_using_vs_access_9+0x16c>
    80004a96:	0004c797          	auipc	a5,0x4c
    80004a9a:	57b7c783          	lbu	a5,1403(a5) # 80051011 <excpt+0x1>
    80004a9e:	c79d                	beqz	a5,80004acc <m_and_hs_using_vs_access_9+0x198>
    80004aa0:	4401                	li	s0,0
        excpt.triggered == false
    );
    
    TEST_END();
    80004aa2:	00029597          	auipc	a1,0x29
    80004aa6:	84e58593          	addi	a1,a1,-1970 # 8002d2f0 <__func__.0+0x2d0>
    80004aaa:	00029517          	auipc	a0,0x29
    80004aae:	8ee50513          	addi	a0,a0,-1810 # 8002d398 <__func__.0+0x378>
    80004ab2:	308260ef          	jal	8002adba <printf>
    80004ab6:	4511                	li	a0,4
    80004ab8:	bb6fc0ef          	jal	80000e6e <goto_priv>
    80004abc:	ccffc0ef          	jal	8000178a <reset_state>
}
    80004ac0:	60e2                	ld	ra,24(sp)
    80004ac2:	8522                	mv	a0,s0
    80004ac4:	6442                	ld	s0,16(sp)
    80004ac6:	64a2                	ld	s1,8(sp)
    80004ac8:	6105                	addi	sp,sp,32
    80004aca:	8082                	ret
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004acc:	4405                	li	s0,1
    TEST_END();
    80004ace:	00029597          	auipc	a1,0x29
    80004ad2:	81258593          	addi	a1,a1,-2030 # 8002d2e0 <__func__.0+0x2c0>
    80004ad6:	bfd1                	j	80004aaa <m_and_hs_using_vs_access_9+0x176>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004ad8:	7418                	ld	a4,40(s0)
    80004ada:	4001a7b7          	lui	a5,0x4001a
    80004ade:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004ae2:	f0f71be3          	bne	a4,a5,800049f8 <m_and_hs_using_vs_access_9+0xc4>
    80004ae6:	b71d                	j	80004a0c <m_and_hs_using_vs_access_9+0xd8>
    TEST_ASSERT("hs hlvb on ro 2-stage page successfull",
    80004ae8:	00029517          	auipc	a0,0x29
    80004aec:	85050513          	addi	a0,a0,-1968 # 8002d338 <__func__.0+0x318>
    80004af0:	2ca260ef          	jal	8002adba <printf>
    80004af4:	02900513          	li	a0,41
    80004af8:	7b1240ef          	jal	80029aa8 <putchar>
    80004afc:	bf49                	j	80004a8e <m_and_hs_using_vs_access_9+0x15a>
    TEST_ASSERT("hs hsvb on ro 2-stage page leads to store guest page fault",
    80004afe:	7418                	ld	a4,40(s0)
    80004b00:	4001a7b7          	lui	a5,0x4001a
    80004b04:	40078793          	addi	a5,a5,1024 # 4001a400 <STACK_SIZE+0x3ff1a400>
    80004b08:	00028597          	auipc	a1,0x28
    80004b0c:	7d858593          	addi	a1,a1,2008 # 8002d2e0 <__func__.0+0x2c0>
    80004b10:	ecf705e3          	beq	a4,a5,800049da <m_and_hs_using_vs_access_9+0xa6>
    80004b14:	00028597          	auipc	a1,0x28
    80004b18:	7dc58593          	addi	a1,a1,2012 # 8002d2f0 <__func__.0+0x2d0>
    80004b1c:	bd7d                	j	800049da <m_and_hs_using_vs_access_9+0xa6>
    80004b1e:	7404                	ld	s1,40(s0)
    80004b20:	bffe67b7          	lui	a5,0xbffe6
    80004b24:	c0078793          	addi	a5,a5,-1024 # ffffffffbffe5c00 <__stack_top+0xffffffff3fce6c00>
    80004b28:	94be                	add	s1,s1,a5
    80004b2a:	0014b493          	seqz	s1,s1
    80004b2e:	bde5                	j	80004a26 <m_and_hs_using_vs_access_9+0xf2>

0000000080004b30 <m_and_hs_using_vs_access_10>:

bool m_and_hs_using_vs_access_10(){
    80004b30:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004b32:	00027597          	auipc	a1,0x27
    80004b36:	9ae58593          	addi	a1,a1,-1618 # 8002b4e0 <__func__.2>
    80004b3a:	00028517          	auipc	a0,0x28
    80004b3e:	7c650513          	addi	a0,a0,1990 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_10(){
    80004b42:	ec06                	sd	ra,24(sp)
    80004b44:	e822                	sd	s0,16(sp)
    80004b46:	e426                	sd	s1,8(sp)
    TEST_START();
    80004b48:	272260ef          	jal	8002adba <printf>
    80004b4c:	4529                	li	a0,10
    80004b4e:	75b240ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    80004b52:	a8ffb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004b56:	e27fb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80004b5a:	bc9fb0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_HS);
    80004b5e:	450d                	li	a0,3
    80004b60:	b0efc0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80004b64:	4509                	li	a0,2
    80004b66:	a28fc0ef          	jal	80000d8e <set_prev_priv>

    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004b6a:	a08fc0ef          	jal	80000d72 <test_setup_except_function>
    CSRW(sscratch, 0x911);
    80004b6e:	6785                	lui	a5,0x1
    80004b70:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004b74:	14079073          	csrw	sscratch,a5
    80004b78:	000807b7          	lui	a5,0x80
    80004b7c:	07a5                	addi	a5,a5,9 # 80009 <_test_table_size+0x80008>
    80004b7e:	07b6                	slli	a5,a5,0xd
    80004b80:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004b84:	08200593          	li	a1,130
    80004b88:	00029617          	auipc	a2,0x29
    80004b8c:	37060613          	addi	a2,a2,880 # 8002def8 <__func__.0+0xed8>
    80004b90:	00028517          	auipc	a0,0x28
    80004b94:	78850513          	addi	a0,a0,1928 # 8002d318 <__func__.0+0x2f8>
    80004b98:	222260ef          	jal	8002adba <printf>
    80004b9c:	0004c797          	auipc	a5,0x4c
    80004ba0:	4757c783          	lbu	a5,1141(a5) # 80051011 <excpt+0x1>
    80004ba4:	00028597          	auipc	a1,0x28
    80004ba8:	73c58593          	addi	a1,a1,1852 # 8002d2e0 <__func__.0+0x2c0>
    80004bac:	c789                	beqz	a5,80004bb6 <m_and_hs_using_vs_access_10+0x86>
    80004bae:	00028597          	auipc	a1,0x28
    80004bb2:	74258593          	addi	a1,a1,1858 # 8002d2f0 <__func__.0+0x2d0>
    80004bb6:	00028517          	auipc	a0,0x28
    80004bba:	77a50513          	addi	a0,a0,1914 # 8002d330 <__func__.0+0x310>
    80004bbe:	1fc260ef          	jal	8002adba <printf>
    80004bc2:	0004c797          	auipc	a5,0x4c
    80004bc6:	44f7c783          	lbu	a5,1103(a5) # 80051011 <excpt+0x1>
    80004bca:	10079663          	bnez	a5,80004cd6 <m_and_hs_using_vs_access_10+0x1a6>
    80004bce:	4529                	li	a0,10
    80004bd0:	6d9240ef          	jal	80029aa8 <putchar>
    80004bd4:	0004c417          	auipc	s0,0x4c
    80004bd8:	43d44403          	lbu	s0,1085(s0) # 80051011 <excpt+0x1>
        excpt.triggered == false
    );
    
    vspt_init();
    80004bdc:	b47fb0ef          	jal	80000722 <vspt_init>
    vaddr = vs_page_base(VSR_GUR);
    TEST_SETUP_EXCEPT();
    80004be0:	992fc0ef          	jal	80000d72 <test_setup_except_function>
    CSRW(sscratch, 0x911);      
    80004be4:	6785                	lui	a5,0x1
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004be6:	0004c497          	auipc	s1,0x4c
    80004bea:	42a48493          	addi	s1,s1,1066 # 80051010 <excpt>
    CSRW(sscratch, 0x911);      
    80004bee:	9117879b          	addiw	a5,a5,-1775 # 911 <_test_table_size+0x910>
    80004bf2:	14079073          	csrw	sscratch,a5
    asm volatile(
    80004bf6:	37ab77b7          	lui	a5,0x37ab7
    80004bfa:	00080737          	lui	a4,0x80
    80004bfe:	078a                	slli	a5,a5,0x2
    80004c00:	0725                	addi	a4,a4,9 # 80009 <_test_table_size+0x80008>
    80004c02:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004c06:	0736                	slli	a4,a4,0xd
    80004c08:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004c0c:	08200593          	li	a1,130
    80004c10:	00029617          	auipc	a2,0x29
    80004c14:	31860613          	addi	a2,a2,792 # 8002df28 <__func__.0+0xf08>
    80004c18:	00028517          	auipc	a0,0x28
    80004c1c:	70050513          	addi	a0,a0,1792 # 8002d318 <__func__.0+0x2f8>
    80004c20:	19a260ef          	jal	8002adba <printf>
    80004c24:	0004c797          	auipc	a5,0x4c
    80004c28:	3ed7c783          	lbu	a5,1005(a5) # 80051011 <excpt+0x1>
    80004c2c:	00028597          	auipc	a1,0x28
    80004c30:	6c458593          	addi	a1,a1,1732 # 8002d2f0 <__func__.0+0x2d0>
    80004c34:	cf89                	beqz	a5,80004c4e <m_and_hs_using_vs_access_10+0x11e>
    80004c36:	6498                	ld	a4,8(s1)
    80004c38:	47bd                	li	a5,15
    80004c3a:	00028597          	auipc	a1,0x28
    80004c3e:	6a658593          	addi	a1,a1,1702 # 8002d2e0 <__func__.0+0x2c0>
    80004c42:	00f70663          	beq	a4,a5,80004c4e <m_and_hs_using_vs_access_10+0x11e>
    80004c46:	00028597          	auipc	a1,0x28
    80004c4a:	6aa58593          	addi	a1,a1,1706 # 8002d2f0 <__func__.0+0x2d0>
    80004c4e:	00028517          	auipc	a0,0x28
    80004c52:	6e250513          	addi	a0,a0,1762 # 8002d330 <__func__.0+0x310>
    80004c56:	164260ef          	jal	8002adba <printf>
    80004c5a:	0004c797          	auipc	a5,0x4c
    80004c5e:	3b77c783          	lbu	a5,951(a5) # 80051011 <excpt+0x1>
    80004c62:	c789                	beqz	a5,80004c6c <m_and_hs_using_vs_access_10+0x13c>
    80004c64:	6498                	ld	a4,8(s1)
    80004c66:	47bd                	li	a5,15
    80004c68:	00f70c63          	beq	a4,a5,80004c80 <m_and_hs_using_vs_access_10+0x150>
    80004c6c:	00028517          	auipc	a0,0x28
    80004c70:	6cc50513          	addi	a0,a0,1740 # 8002d338 <__func__.0+0x318>
    80004c74:	146260ef          	jal	8002adba <printf>
    80004c78:	02900513          	li	a0,41
    80004c7c:	62d240ef          	jal	80029aa8 <putchar>
    80004c80:	4529                	li	a0,10
    80004c82:	627240ef          	jal	80029aa8 <putchar>
    80004c86:	e015                	bnez	s0,80004caa <m_and_hs_using_vs_access_10+0x17a>
    80004c88:	0004c417          	auipc	s0,0x4c
    80004c8c:	38944403          	lbu	s0,905(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80004c90:	00028597          	auipc	a1,0x28
    80004c94:	66058593          	addi	a1,a1,1632 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004c98:	cc11                	beqz	s0,80004cb4 <m_and_hs_using_vs_access_10+0x184>
    80004c9a:	6498                	ld	a4,8(s1)
    80004c9c:	47bd                	li	a5,15
    TEST_END();
    80004c9e:	00028597          	auipc	a1,0x28
    80004ca2:	64258593          	addi	a1,a1,1602 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on ro both stage page leads to store page fault",
    80004ca6:	00f70763          	beq	a4,a5,80004cb4 <m_and_hs_using_vs_access_10+0x184>
    80004caa:	4401                	li	s0,0
    TEST_END();
    80004cac:	00028597          	auipc	a1,0x28
    80004cb0:	64458593          	addi	a1,a1,1604 # 8002d2f0 <__func__.0+0x2d0>
    80004cb4:	00028517          	auipc	a0,0x28
    80004cb8:	6e450513          	addi	a0,a0,1764 # 8002d398 <__func__.0+0x378>
    80004cbc:	0fe260ef          	jal	8002adba <printf>
    80004cc0:	4511                	li	a0,4
    80004cc2:	9acfc0ef          	jal	80000e6e <goto_priv>
    80004cc6:	ac5fc0ef          	jal	8000178a <reset_state>
}
    80004cca:	60e2                	ld	ra,24(sp)
    80004ccc:	8522                	mv	a0,s0
    80004cce:	6442                	ld	s0,16(sp)
    80004cd0:	64a2                	ld	s1,8(sp)
    80004cd2:	6105                	addi	sp,sp,32
    80004cd4:	8082                	ret
    TEST_ASSERT("hs hlvb on ro both stage page successfull",
    80004cd6:	00028517          	auipc	a0,0x28
    80004cda:	66250513          	addi	a0,a0,1634 # 8002d338 <__func__.0+0x318>
    80004cde:	0dc260ef          	jal	8002adba <printf>
    80004ce2:	02900513          	li	a0,41
    80004ce6:	5c3240ef          	jal	80029aa8 <putchar>
    80004cea:	b5d5                	j	80004bce <m_and_hs_using_vs_access_10+0x9e>

0000000080004cec <m_and_hs_using_vs_access_11>:

bool m_and_hs_using_vs_access_11(){
    80004cec:	1101                	addi	sp,sp,-32

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004cee:	00027597          	auipc	a1,0x27
    80004cf2:	81258593          	addi	a1,a1,-2030 # 8002b500 <__func__.1>
    80004cf6:	00028517          	auipc	a0,0x28
    80004cfa:	60a50513          	addi	a0,a0,1546 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_11(){
    80004cfe:	ec06                	sd	ra,24(sp)
    80004d00:	e822                	sd	s0,16(sp)
    80004d02:	e426                	sd	s1,8(sp)
    TEST_START();
    80004d04:	0b6260ef          	jal	8002adba <printf>
    80004d08:	4529                	li	a0,10
    80004d0a:	59f240ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    80004d0e:	8d3fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004d12:	c6bfb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80004d16:	a0dfb0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_HS);
    80004d1a:	450d                	li	a0,3
    80004d1c:	952fc0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80004d20:	4509                	li	a0,2
    80004d22:	86cfc0ef          	jal	80000d8e <set_prev_priv>


    vaddr = vs_page_base(VSRW_GI);
    TEST_SETUP_EXCEPT();
    80004d26:	84cfc0ef          	jal	80000d72 <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004d2a:	11200793          	li	a5,274
    80004d2e:	14079073          	csrw	sscratch,a5
    80004d32:	37ab77b7          	lui	a5,0x37ab7
    80004d36:	00080737          	lui	a4,0x80
    80004d3a:	078a                	slli	a5,a5,0x2
    80004d3c:	03370713          	addi	a4,a4,51 # 80033 <_test_table_size+0x80032>
    80004d40:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80004d44:	0736                	slli	a4,a4,0xd
    80004d46:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004d4a:	08200593          	li	a1,130
    80004d4e:	00029617          	auipc	a2,0x29
    80004d52:	21260613          	addi	a2,a2,530 # 8002df60 <__func__.0+0xf40>
    80004d56:	00028517          	auipc	a0,0x28
    80004d5a:	5c250513          	addi	a0,a0,1474 # 8002d318 <__func__.0+0x2f8>
    80004d5e:	05c260ef          	jal	8002adba <printf>
    80004d62:	0004c797          	auipc	a5,0x4c
    80004d66:	2af7c783          	lbu	a5,687(a5) # 80051011 <excpt+0x1>
    80004d6a:	0004c497          	auipc	s1,0x4c
    80004d6e:	2a648493          	addi	s1,s1,678 # 80051010 <excpt>
    80004d72:	00028597          	auipc	a1,0x28
    80004d76:	57e58593          	addi	a1,a1,1406 # 8002d2f0 <__func__.0+0x2d0>
    80004d7a:	cf89                	beqz	a5,80004d94 <m_and_hs_using_vs_access_11+0xa8>
    80004d7c:	6498                	ld	a4,8(s1)
    80004d7e:	47dd                	li	a5,23
    80004d80:	00028597          	auipc	a1,0x28
    80004d84:	56058593          	addi	a1,a1,1376 # 8002d2e0 <__func__.0+0x2c0>
    80004d88:	00f70663          	beq	a4,a5,80004d94 <m_and_hs_using_vs_access_11+0xa8>
    80004d8c:	00028597          	auipc	a1,0x28
    80004d90:	56458593          	addi	a1,a1,1380 # 8002d2f0 <__func__.0+0x2d0>
    80004d94:	00028517          	auipc	a0,0x28
    80004d98:	59c50513          	addi	a0,a0,1436 # 8002d330 <__func__.0+0x310>
    80004d9c:	01e260ef          	jal	8002adba <printf>
    80004da0:	0004c797          	auipc	a5,0x4c
    80004da4:	2717c783          	lbu	a5,625(a5) # 80051011 <excpt+0x1>
    80004da8:	c789                	beqz	a5,80004db2 <m_and_hs_using_vs_access_11+0xc6>
    80004daa:	6498                	ld	a4,8(s1)
    80004dac:	47dd                	li	a5,23
    80004dae:	00f70c63          	beq	a4,a5,80004dc6 <m_and_hs_using_vs_access_11+0xda>
    80004db2:	00028517          	auipc	a0,0x28
    80004db6:	58650513          	addi	a0,a0,1414 # 8002d338 <__func__.0+0x318>
    80004dba:	000260ef          	jal	8002adba <printf>
    80004dbe:	02900513          	li	a0,41
    80004dc2:	4e7240ef          	jal	80029aa8 <putchar>
    80004dc6:	4529                	li	a0,10
    80004dc8:	4e1240ef          	jal	80029aa8 <putchar>
    80004dcc:	0004c417          	auipc	s0,0x4c
    80004dd0:	24544403          	lbu	s0,581(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80004dd4:	00028597          	auipc	a1,0x28
    80004dd8:	51c58593          	addi	a1,a1,1308 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004ddc:	cc11                	beqz	s0,80004df8 <m_and_hs_using_vs_access_11+0x10c>
    80004dde:	6498                	ld	a4,8(s1)
    80004de0:	47dd                	li	a5,23
    TEST_END();
    80004de2:	00028597          	auipc	a1,0x28
    80004de6:	4fe58593          	addi	a1,a1,1278 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs hsvb on invalid 2 stage page leads to store guest page fault",
    80004dea:	00f70763          	beq	a4,a5,80004df8 <m_and_hs_using_vs_access_11+0x10c>
    80004dee:	4401                	li	s0,0
    TEST_END();
    80004df0:	00028597          	auipc	a1,0x28
    80004df4:	50058593          	addi	a1,a1,1280 # 8002d2f0 <__func__.0+0x2d0>
    80004df8:	00028517          	auipc	a0,0x28
    80004dfc:	5a050513          	addi	a0,a0,1440 # 8002d398 <__func__.0+0x378>
    80004e00:	7bb250ef          	jal	8002adba <printf>
    80004e04:	4511                	li	a0,4
    80004e06:	868fc0ef          	jal	80000e6e <goto_priv>
    80004e0a:	981fc0ef          	jal	8000178a <reset_state>
}
    80004e0e:	60e2                	ld	ra,24(sp)
    80004e10:	8522                	mv	a0,s0
    80004e12:	6442                	ld	s0,16(sp)
    80004e14:	64a2                	ld	s1,8(sp)
    80004e16:	6105                	addi	sp,sp,32
    80004e18:	8082                	ret

0000000080004e1a <m_and_hs_using_vs_access_12>:

bool m_and_hs_using_vs_access_12(){
    80004e1a:	1141                	addi	sp,sp,-16

    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    TEST_START();
    80004e1c:	00026597          	auipc	a1,0x26
    80004e20:	70458593          	addi	a1,a1,1796 # 8002b520 <__func__.0>
    80004e24:	00028517          	auipc	a0,0x28
    80004e28:	4dc50513          	addi	a0,a0,1244 # 8002d300 <__func__.0+0x2e0>
bool m_and_hs_using_vs_access_12(){
    80004e2c:	e406                	sd	ra,8(sp)
    80004e2e:	e022                	sd	s0,0(sp)
    TEST_START();
    80004e30:	78b250ef          	jal	8002adba <printf>
    80004e34:	4529                	li	a0,10
    80004e36:	473240ef          	jal	80029aa8 <putchar>
    
    hspt_init();
    80004e3a:	fa6fb0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80004e3e:	b3ffb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80004e42:	8e1fb0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_HS);
    80004e46:	450d                	li	a0,3
    80004e48:	826fc0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80004e4c:	4509                	li	a0,2
    80004e4e:	f41fb0ef          	jal	80000d8e <set_prev_priv>

    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80004e52:	f21fb0ef          	jal	80000d72 <test_setup_except_function>
    CSRW(sscratch, 0x112);
    80004e56:	11200793          	li	a5,274
    80004e5a:	14079073          	csrw	sscratch,a5
    TEST_ASSERT("CSRW successfull int any condition",
    80004e5e:	08200593          	li	a1,130
    80004e62:	00029617          	auipc	a2,0x29
    80004e66:	13e60613          	addi	a2,a2,318 # 8002dfa0 <__func__.0+0xf80>
    80004e6a:	00028517          	auipc	a0,0x28
    80004e6e:	4ae50513          	addi	a0,a0,1198 # 8002d318 <__func__.0+0x2f8>
    80004e72:	749250ef          	jal	8002adba <printf>
    80004e76:	0004c797          	auipc	a5,0x4c
    80004e7a:	19b7c783          	lbu	a5,411(a5) # 80051011 <excpt+0x1>
    80004e7e:	00028597          	auipc	a1,0x28
    80004e82:	46258593          	addi	a1,a1,1122 # 8002d2e0 <__func__.0+0x2c0>
    80004e86:	c789                	beqz	a5,80004e90 <m_and_hs_using_vs_access_12+0x76>
    80004e88:	00028597          	auipc	a1,0x28
    80004e8c:	46858593          	addi	a1,a1,1128 # 8002d2f0 <__func__.0+0x2d0>
    80004e90:	00028517          	auipc	a0,0x28
    80004e94:	4a050513          	addi	a0,a0,1184 # 8002d330 <__func__.0+0x310>
    80004e98:	723250ef          	jal	8002adba <printf>
    80004e9c:	0004c797          	auipc	a5,0x4c
    80004ea0:	1757c783          	lbu	a5,373(a5) # 80051011 <excpt+0x1>
    80004ea4:	e7a1                	bnez	a5,80004eec <m_and_hs_using_vs_access_12+0xd2>
    80004ea6:	4529                	li	a0,10
    80004ea8:	401240ef          	jal	80029aa8 <putchar>
    80004eac:	0004c797          	auipc	a5,0x4c
    80004eb0:	1657c783          	lbu	a5,357(a5) # 80051011 <excpt+0x1>
    80004eb4:	e795                	bnez	a5,80004ee0 <m_and_hs_using_vs_access_12+0xc6>
    80004eb6:	4405                	li	s0,1
        excpt.triggered == false
    );
    


    TEST_END();
    80004eb8:	00028597          	auipc	a1,0x28
    80004ebc:	42858593          	addi	a1,a1,1064 # 8002d2e0 <__func__.0+0x2c0>
    80004ec0:	00028517          	auipc	a0,0x28
    80004ec4:	4d850513          	addi	a0,a0,1240 # 8002d398 <__func__.0+0x378>
    80004ec8:	6f3250ef          	jal	8002adba <printf>
    80004ecc:	4511                	li	a0,4
    80004ece:	fa1fb0ef          	jal	80000e6e <goto_priv>
    80004ed2:	8b9fc0ef          	jal	8000178a <reset_state>

}
    80004ed6:	60a2                	ld	ra,8(sp)
    80004ed8:	8522                	mv	a0,s0
    80004eda:	6402                	ld	s0,0(sp)
    80004edc:	0141                	addi	sp,sp,16
    80004ede:	8082                	ret
    TEST_ASSERT("CSRW successfull int any condition",
    80004ee0:	4401                	li	s0,0
    TEST_END();
    80004ee2:	00028597          	auipc	a1,0x28
    80004ee6:	40e58593          	addi	a1,a1,1038 # 8002d2f0 <__func__.0+0x2d0>
    80004eea:	bfd9                	j	80004ec0 <m_and_hs_using_vs_access_12+0xa6>
    TEST_ASSERT("CSRW successfull int any condition",
    80004eec:	00028517          	auipc	a0,0x28
    80004ef0:	44c50513          	addi	a0,a0,1100 # 8002d338 <__func__.0+0x318>
    80004ef4:	6c7250ef          	jal	8002adba <printf>
    80004ef8:	02900513          	li	a0,41
    80004efc:	3ad240ef          	jal	80029aa8 <putchar>
    80004f00:	b75d                	j	80004ea6 <m_and_hs_using_vs_access_12+0x8c>

0000000080004f02 <virtual_instruction_1>:
#include <rvh_test.h>
#include <page_tables.h> 


bool virtual_instruction_1() {
    80004f02:	1101                	addi	sp,sp,-32

    TEST_START();
    80004f04:	00026597          	auipc	a1,0x26
    80004f08:	63c58593          	addi	a1,a1,1596 # 8002b540 <__func__.11>
    80004f0c:	00028517          	auipc	a0,0x28
    80004f10:	3f450513          	addi	a0,a0,1012 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_1() {
    80004f14:	ec06                	sd	ra,24(sp)
    80004f16:	e822                	sd	s0,16(sp)
    80004f18:	e426                	sd	s1,8(sp)
    TEST_START();
    80004f1a:	6a1250ef          	jal	8002adba <printf>
    80004f1e:	4529                	li	a0,10
    80004f20:	389240ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_VS);
    80004f24:	4509                	li	a0,2
    80004f26:	f49fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80004f2a:	e49fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80004f2e:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vs executing hfence.vvma leads to virtual instruction exception",
    80004f32:	08200593          	li	a1,130
    80004f36:	00029617          	auipc	a2,0x29
    80004f3a:	09260613          	addi	a2,a2,146 # 8002dfc8 <__func__.0+0xfa8>
    80004f3e:	00028517          	auipc	a0,0x28
    80004f42:	3da50513          	addi	a0,a0,986 # 8002d318 <__func__.0+0x2f8>
    80004f46:	675250ef          	jal	8002adba <printf>
    80004f4a:	0004c797          	auipc	a5,0x4c
    80004f4e:	0c77c783          	lbu	a5,199(a5) # 80051011 <excpt+0x1>
    80004f52:	0004c497          	auipc	s1,0x4c
    80004f56:	0be48493          	addi	s1,s1,190 # 80051010 <excpt>
    80004f5a:	00028597          	auipc	a1,0x28
    80004f5e:	39658593          	addi	a1,a1,918 # 8002d2f0 <__func__.0+0x2d0>
    80004f62:	cf89                	beqz	a5,80004f7c <virtual_instruction_1+0x7a>
    80004f64:	6498                	ld	a4,8(s1)
    80004f66:	47d9                	li	a5,22
    80004f68:	00028597          	auipc	a1,0x28
    80004f6c:	37858593          	addi	a1,a1,888 # 8002d2e0 <__func__.0+0x2c0>
    80004f70:	00f70663          	beq	a4,a5,80004f7c <virtual_instruction_1+0x7a>
    80004f74:	00028597          	auipc	a1,0x28
    80004f78:	37c58593          	addi	a1,a1,892 # 8002d2f0 <__func__.0+0x2d0>
    80004f7c:	00028517          	auipc	a0,0x28
    80004f80:	3b450513          	addi	a0,a0,948 # 8002d330 <__func__.0+0x310>
    80004f84:	637250ef          	jal	8002adba <printf>
    80004f88:	0004c797          	auipc	a5,0x4c
    80004f8c:	0897c783          	lbu	a5,137(a5) # 80051011 <excpt+0x1>
    80004f90:	c789                	beqz	a5,80004f9a <virtual_instruction_1+0x98>
    80004f92:	6498                	ld	a4,8(s1)
    80004f94:	47d9                	li	a5,22
    80004f96:	00f70c63          	beq	a4,a5,80004fae <virtual_instruction_1+0xac>
    80004f9a:	00028517          	auipc	a0,0x28
    80004f9e:	39e50513          	addi	a0,a0,926 # 8002d338 <__func__.0+0x318>
    80004fa2:	619250ef          	jal	8002adba <printf>
    80004fa6:	02900513          	li	a0,41
    80004faa:	2ff240ef          	jal	80029aa8 <putchar>
    80004fae:	4529                	li	a0,10
    80004fb0:	2f9240ef          	jal	80029aa8 <putchar>
    80004fb4:	0004c797          	auipc	a5,0x4c
    80004fb8:	05d7c783          	lbu	a5,93(a5) # 80051011 <excpt+0x1>
    80004fbc:	4401                	li	s0,0
    80004fbe:	c789                	beqz	a5,80004fc8 <virtual_instruction_1+0xc6>
    80004fc0:	6480                	ld	s0,8(s1)
    80004fc2:	1429                	addi	s0,s0,-22
    80004fc4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VS);
    80004fc8:	4509                	li	a0,2
    80004fca:	ea5fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80004fce:	da5fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80004fd2:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    80004fd6:	08200593          	li	a1,130
    80004fda:	00029617          	auipc	a2,0x29
    80004fde:	02e60613          	addi	a2,a2,46 # 8002e008 <__func__.0+0xfe8>
    80004fe2:	00028517          	auipc	a0,0x28
    80004fe6:	33650513          	addi	a0,a0,822 # 8002d318 <__func__.0+0x2f8>
    80004fea:	5d1250ef          	jal	8002adba <printf>
    80004fee:	0004c797          	auipc	a5,0x4c
    80004ff2:	0237c783          	lbu	a5,35(a5) # 80051011 <excpt+0x1>
    80004ff6:	00028597          	auipc	a1,0x28
    80004ffa:	2fa58593          	addi	a1,a1,762 # 8002d2f0 <__func__.0+0x2d0>
    80004ffe:	cf89                	beqz	a5,80005018 <virtual_instruction_1+0x116>
    80005000:	6498                	ld	a4,8(s1)
    80005002:	47d9                	li	a5,22
    80005004:	00028597          	auipc	a1,0x28
    80005008:	2dc58593          	addi	a1,a1,732 # 8002d2e0 <__func__.0+0x2c0>
    8000500c:	00f70663          	beq	a4,a5,80005018 <virtual_instruction_1+0x116>
    80005010:	00028597          	auipc	a1,0x28
    80005014:	2e058593          	addi	a1,a1,736 # 8002d2f0 <__func__.0+0x2d0>
    80005018:	00028517          	auipc	a0,0x28
    8000501c:	31850513          	addi	a0,a0,792 # 8002d330 <__func__.0+0x310>
    80005020:	59b250ef          	jal	8002adba <printf>
    80005024:	0004c797          	auipc	a5,0x4c
    80005028:	fed7c783          	lbu	a5,-19(a5) # 80051011 <excpt+0x1>
    8000502c:	c789                	beqz	a5,80005036 <virtual_instruction_1+0x134>
    8000502e:	6498                	ld	a4,8(s1)
    80005030:	47d9                	li	a5,22
    80005032:	00f70c63          	beq	a4,a5,8000504a <virtual_instruction_1+0x148>
    80005036:	00028517          	auipc	a0,0x28
    8000503a:	30250513          	addi	a0,a0,770 # 8002d338 <__func__.0+0x318>
    8000503e:	57d250ef          	jal	8002adba <printf>
    80005042:	02900513          	li	a0,41
    80005046:	263240ef          	jal	80029aa8 <putchar>
    8000504a:	4529                	li	a0,10
    8000504c:	25d240ef          	jal	80029aa8 <putchar>
    80005050:	c801                	beqz	s0,80005060 <virtual_instruction_1+0x15e>
    80005052:	0004c797          	auipc	a5,0x4c
    80005056:	fbf7c783          	lbu	a5,-65(a5) # 80051011 <excpt+0x1>
    8000505a:	4401                	li	s0,0
    8000505c:	18079663          	bnez	a5,800051e8 <virtual_instruction_1+0x2e6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_M);  
    80005060:	4511                	li	a0,4
    80005062:	e0dfb0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    80005066:	001007b7          	lui	a5,0x100
    8000506a:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    8000506e:	4509                	li	a0,2
    80005070:	dfffb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005074:	cfffb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005078:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    8000507c:	08200593          	li	a1,130
    80005080:	00029617          	auipc	a2,0x29
    80005084:	fc860613          	addi	a2,a2,-56 # 8002e048 <__func__.0+0x1028>
    80005088:	00028517          	auipc	a0,0x28
    8000508c:	29050513          	addi	a0,a0,656 # 8002d318 <__func__.0+0x2f8>
    80005090:	52b250ef          	jal	8002adba <printf>
    80005094:	0004c797          	auipc	a5,0x4c
    80005098:	f7d7c783          	lbu	a5,-131(a5) # 80051011 <excpt+0x1>
    8000509c:	00028597          	auipc	a1,0x28
    800050a0:	25458593          	addi	a1,a1,596 # 8002d2f0 <__func__.0+0x2d0>
    800050a4:	cf89                	beqz	a5,800050be <virtual_instruction_1+0x1bc>
    800050a6:	6498                	ld	a4,8(s1)
    800050a8:	47d9                	li	a5,22
    800050aa:	00028597          	auipc	a1,0x28
    800050ae:	23658593          	addi	a1,a1,566 # 8002d2e0 <__func__.0+0x2c0>
    800050b2:	00f70663          	beq	a4,a5,800050be <virtual_instruction_1+0x1bc>
    800050b6:	00028597          	auipc	a1,0x28
    800050ba:	23a58593          	addi	a1,a1,570 # 8002d2f0 <__func__.0+0x2d0>
    800050be:	00028517          	auipc	a0,0x28
    800050c2:	27250513          	addi	a0,a0,626 # 8002d330 <__func__.0+0x310>
    800050c6:	4f5250ef          	jal	8002adba <printf>
    800050ca:	0004c797          	auipc	a5,0x4c
    800050ce:	f477c783          	lbu	a5,-185(a5) # 80051011 <excpt+0x1>
    800050d2:	c789                	beqz	a5,800050dc <virtual_instruction_1+0x1da>
    800050d4:	6498                	ld	a4,8(s1)
    800050d6:	47d9                	li	a5,22
    800050d8:	00f70c63          	beq	a4,a5,800050f0 <virtual_instruction_1+0x1ee>
    800050dc:	00028517          	auipc	a0,0x28
    800050e0:	25c50513          	addi	a0,a0,604 # 8002d338 <__func__.0+0x318>
    800050e4:	4d7250ef          	jal	8002adba <printf>
    800050e8:	02900513          	li	a0,41
    800050ec:	1bd240ef          	jal	80029aa8 <putchar>
    800050f0:	4529                	li	a0,10
    800050f2:	1b7240ef          	jal	80029aa8 <putchar>
    800050f6:	c801                	beqz	s0,80005106 <virtual_instruction_1+0x204>
    800050f8:	0004c797          	auipc	a5,0x4c
    800050fc:	f197c783          	lbu	a5,-231(a5) # 80051011 <excpt+0x1>
    80005100:	4401                	li	s0,0
    80005102:	0c079e63          	bnez	a5,800051de <virtual_instruction_1+0x2dc>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80005106:	4509                	li	a0,2
    80005108:	d67fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8000510c:	c67fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005110:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005114:	08200593          	li	a1,130
    80005118:	00029617          	auipc	a2,0x29
    8000511c:	f8060613          	addi	a2,a2,-128 # 8002e098 <__func__.0+0x1078>
    80005120:	00028517          	auipc	a0,0x28
    80005124:	1f850513          	addi	a0,a0,504 # 8002d318 <__func__.0+0x2f8>
    80005128:	493250ef          	jal	8002adba <printf>
    8000512c:	0004c797          	auipc	a5,0x4c
    80005130:	ee57c783          	lbu	a5,-283(a5) # 80051011 <excpt+0x1>
    80005134:	00028597          	auipc	a1,0x28
    80005138:	1bc58593          	addi	a1,a1,444 # 8002d2f0 <__func__.0+0x2d0>
    8000513c:	cf89                	beqz	a5,80005156 <virtual_instruction_1+0x254>
    8000513e:	6498                	ld	a4,8(s1)
    80005140:	47d9                	li	a5,22
    80005142:	00028597          	auipc	a1,0x28
    80005146:	19e58593          	addi	a1,a1,414 # 8002d2e0 <__func__.0+0x2c0>
    8000514a:	00f70663          	beq	a4,a5,80005156 <virtual_instruction_1+0x254>
    8000514e:	00028597          	auipc	a1,0x28
    80005152:	1a258593          	addi	a1,a1,418 # 8002d2f0 <__func__.0+0x2d0>
    80005156:	00028517          	auipc	a0,0x28
    8000515a:	1da50513          	addi	a0,a0,474 # 8002d330 <__func__.0+0x310>
    8000515e:	45d250ef          	jal	8002adba <printf>
    80005162:	0004c797          	auipc	a5,0x4c
    80005166:	eaf7c783          	lbu	a5,-337(a5) # 80051011 <excpt+0x1>
    8000516a:	c789                	beqz	a5,80005174 <virtual_instruction_1+0x272>
    8000516c:	6498                	ld	a4,8(s1)
    8000516e:	47d9                	li	a5,22
    80005170:	00f70c63          	beq	a4,a5,80005188 <virtual_instruction_1+0x286>
    80005174:	00028517          	auipc	a0,0x28
    80005178:	1c450513          	addi	a0,a0,452 # 8002d338 <__func__.0+0x318>
    8000517c:	43f250ef          	jal	8002adba <printf>
    80005180:	02900513          	li	a0,41
    80005184:	125240ef          	jal	80029aa8 <putchar>
    80005188:	4529                	li	a0,10
    8000518a:	11f240ef          	jal	80029aa8 <putchar>
    8000518e:	c015                	beqz	s0,800051b2 <virtual_instruction_1+0x2b0>
    80005190:	0004c417          	auipc	s0,0x4c
    80005194:	e8144403          	lbu	s0,-383(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80005198:	00028597          	auipc	a1,0x28
    8000519c:	15858593          	addi	a1,a1,344 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800051a0:	cc11                	beqz	s0,800051bc <virtual_instruction_1+0x2ba>
    800051a2:	6498                	ld	a4,8(s1)
    800051a4:	47d9                	li	a5,22
    TEST_END();
    800051a6:	00028597          	auipc	a1,0x28
    800051aa:	13a58593          	addi	a1,a1,314 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800051ae:	00f70763          	beq	a4,a5,800051bc <virtual_instruction_1+0x2ba>
    800051b2:	4401                	li	s0,0
    TEST_END();
    800051b4:	00028597          	auipc	a1,0x28
    800051b8:	13c58593          	addi	a1,a1,316 # 8002d2f0 <__func__.0+0x2d0>
    800051bc:	00028517          	auipc	a0,0x28
    800051c0:	1dc50513          	addi	a0,a0,476 # 8002d398 <__func__.0+0x378>
    800051c4:	3f7250ef          	jal	8002adba <printf>
    800051c8:	4511                	li	a0,4
    800051ca:	ca5fb0ef          	jal	80000e6e <goto_priv>
    800051ce:	dbcfc0ef          	jal	8000178a <reset_state>
}
    800051d2:	60e2                	ld	ra,24(sp)
    800051d4:	8522                	mv	a0,s0
    800051d6:	6442                	ld	s0,16(sp)
    800051d8:	64a2                	ld	s1,8(sp)
    800051da:	6105                	addi	sp,sp,32
    800051dc:	8082                	ret
    TEST_ASSERT("vs executing sfence.vma leads to virtual instruction exception when vtvm=1",
    800051de:	6480                	ld	s0,8(s1)
    800051e0:	1429                	addi	s0,s0,-22
    800051e2:	00143413          	seqz	s0,s0
    800051e6:	b705                	j	80005106 <virtual_instruction_1+0x204>
    TEST_ASSERT("vs executing hfence.gvma leads to virtual instruction exception",
    800051e8:	6480                	ld	s0,8(s1)
    800051ea:	1429                	addi	s0,s0,-22
    800051ec:	00143413          	seqz	s0,s0
    800051f0:	bd85                	j	80005060 <virtual_instruction_1+0x15e>

00000000800051f2 <virtual_instruction_2>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_2() {
    800051f2:	7179                	addi	sp,sp,-48

    TEST_START();
    800051f4:	00026597          	auipc	a1,0x26
    800051f8:	36458593          	addi	a1,a1,868 # 8002b558 <__func__.10>
    800051fc:	00028517          	auipc	a0,0x28
    80005200:	10450513          	addi	a0,a0,260 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_2() {
    80005204:	f406                	sd	ra,40(sp)
    80005206:	f022                	sd	s0,32(sp)
    80005208:	ec26                	sd	s1,24(sp)
    TEST_START();
    8000520a:	3b1250ef          	jal	8002adba <printf>
    8000520e:	4529                	li	a0,10
    80005210:	099240ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_VS);
    80005214:	4509                	li	a0,2
    80005216:	c59fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8000521a:	b59fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    8000521e:	4781                	li	a5,0
    80005220:	6c07c7f3          	.insn	4, 0x6c07c7f3
    volatile uint64_t tmp = hlvd(0);
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    80005224:	08200593          	li	a1,130
    80005228:	00029617          	auipc	a2,0x29
    8000522c:	ec060613          	addi	a2,a2,-320 # 8002e0e8 <__func__.0+0x10c8>
    80005230:	00028517          	auipc	a0,0x28
    80005234:	0e850513          	addi	a0,a0,232 # 8002d318 <__func__.0+0x2f8>
    volatile uint64_t tmp = hlvd(0);
    80005238:	e43e                	sd	a5,8(sp)
    TEST_ASSERT("vs hlvd leads to virtual instruction exception",
    8000523a:	381250ef          	jal	8002adba <printf>
    8000523e:	0004c797          	auipc	a5,0x4c
    80005242:	dd37c783          	lbu	a5,-557(a5) # 80051011 <excpt+0x1>
    80005246:	0004c497          	auipc	s1,0x4c
    8000524a:	dca48493          	addi	s1,s1,-566 # 80051010 <excpt>
    8000524e:	00028597          	auipc	a1,0x28
    80005252:	0a258593          	addi	a1,a1,162 # 8002d2f0 <__func__.0+0x2d0>
    80005256:	cf89                	beqz	a5,80005270 <virtual_instruction_2+0x7e>
    80005258:	6498                	ld	a4,8(s1)
    8000525a:	47d9                	li	a5,22
    8000525c:	00028597          	auipc	a1,0x28
    80005260:	08458593          	addi	a1,a1,132 # 8002d2e0 <__func__.0+0x2c0>
    80005264:	00f70663          	beq	a4,a5,80005270 <virtual_instruction_2+0x7e>
    80005268:	00028597          	auipc	a1,0x28
    8000526c:	08858593          	addi	a1,a1,136 # 8002d2f0 <__func__.0+0x2d0>
    80005270:	00028517          	auipc	a0,0x28
    80005274:	0c050513          	addi	a0,a0,192 # 8002d330 <__func__.0+0x310>
    80005278:	343250ef          	jal	8002adba <printf>
    8000527c:	0004c797          	auipc	a5,0x4c
    80005280:	d957c783          	lbu	a5,-619(a5) # 80051011 <excpt+0x1>
    80005284:	c789                	beqz	a5,8000528e <virtual_instruction_2+0x9c>
    80005286:	6498                	ld	a4,8(s1)
    80005288:	47d9                	li	a5,22
    8000528a:	00f70c63          	beq	a4,a5,800052a2 <virtual_instruction_2+0xb0>
    8000528e:	00028517          	auipc	a0,0x28
    80005292:	0aa50513          	addi	a0,a0,170 # 8002d338 <__func__.0+0x318>
    80005296:	325250ef          	jal	8002adba <printf>
    8000529a:	02900513          	li	a0,41
    8000529e:	00b240ef          	jal	80029aa8 <putchar>
    800052a2:	4529                	li	a0,10
    800052a4:	005240ef          	jal	80029aa8 <putchar>
    800052a8:	0004c797          	auipc	a5,0x4c
    800052ac:	d697c783          	lbu	a5,-663(a5) # 80051011 <excpt+0x1>
    800052b0:	4401                	li	s0,0
    800052b2:	c789                	beqz	a5,800052bc <virtual_instruction_2+0xca>
    800052b4:	6480                	ld	s0,8(s1)
    800052b6:	1429                	addi	s0,s0,-22
    800052b8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800052bc:	4509                	li	a0,2
    800052be:	bb1fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800052c2:	ab1fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800052c6:	37ab77b7          	lui	a5,0x37ab7
    800052ca:	078a                	slli	a5,a5,0x2
    800052cc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800052d0:	4701                	li	a4,0
    800052d2:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    800052d6:	08200593          	li	a1,130
    800052da:	00029617          	auipc	a2,0x29
    800052de:	e3e60613          	addi	a2,a2,-450 # 8002e118 <__func__.0+0x10f8>
    800052e2:	00028517          	auipc	a0,0x28
    800052e6:	03650513          	addi	a0,a0,54 # 8002d318 <__func__.0+0x2f8>
    800052ea:	2d1250ef          	jal	8002adba <printf>
    800052ee:	0004c797          	auipc	a5,0x4c
    800052f2:	d237c783          	lbu	a5,-733(a5) # 80051011 <excpt+0x1>
    800052f6:	00028597          	auipc	a1,0x28
    800052fa:	ffa58593          	addi	a1,a1,-6 # 8002d2f0 <__func__.0+0x2d0>
    800052fe:	cf89                	beqz	a5,80005318 <virtual_instruction_2+0x126>
    80005300:	6498                	ld	a4,8(s1)
    80005302:	47d9                	li	a5,22
    80005304:	00028597          	auipc	a1,0x28
    80005308:	fdc58593          	addi	a1,a1,-36 # 8002d2e0 <__func__.0+0x2c0>
    8000530c:	00f70663          	beq	a4,a5,80005318 <virtual_instruction_2+0x126>
    80005310:	00028597          	auipc	a1,0x28
    80005314:	fe058593          	addi	a1,a1,-32 # 8002d2f0 <__func__.0+0x2d0>
    80005318:	00028517          	auipc	a0,0x28
    8000531c:	01850513          	addi	a0,a0,24 # 8002d330 <__func__.0+0x310>
    80005320:	29b250ef          	jal	8002adba <printf>
    80005324:	0004c797          	auipc	a5,0x4c
    80005328:	ced7c783          	lbu	a5,-787(a5) # 80051011 <excpt+0x1>
    8000532c:	c789                	beqz	a5,80005336 <virtual_instruction_2+0x144>
    8000532e:	6498                	ld	a4,8(s1)
    80005330:	47d9                	li	a5,22
    80005332:	00f70c63          	beq	a4,a5,8000534a <virtual_instruction_2+0x158>
    80005336:	00028517          	auipc	a0,0x28
    8000533a:	00250513          	addi	a0,a0,2 # 8002d338 <__func__.0+0x318>
    8000533e:	27d250ef          	jal	8002adba <printf>
    80005342:	02900513          	li	a0,41
    80005346:	762240ef          	jal	80029aa8 <putchar>
    8000534a:	4529                	li	a0,10
    8000534c:	75c240ef          	jal	80029aa8 <putchar>
    80005350:	c015                	beqz	s0,80005374 <virtual_instruction_2+0x182>
    80005352:	0004c417          	auipc	s0,0x4c
    80005356:	cbf44403          	lbu	s0,-833(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    8000535a:	00028597          	auipc	a1,0x28
    8000535e:	f9658593          	addi	a1,a1,-106 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005362:	cc11                	beqz	s0,8000537e <virtual_instruction_2+0x18c>
    80005364:	6498                	ld	a4,8(s1)
    80005366:	47d9                	li	a5,22
    TEST_END();
    80005368:	00028597          	auipc	a1,0x28
    8000536c:	f7858593          	addi	a1,a1,-136 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs hsvb leads to virtual instruction exception",
    80005370:	00f70763          	beq	a4,a5,8000537e <virtual_instruction_2+0x18c>
    80005374:	4401                	li	s0,0
    TEST_END();
    80005376:	00028597          	auipc	a1,0x28
    8000537a:	f7a58593          	addi	a1,a1,-134 # 8002d2f0 <__func__.0+0x2d0>
    8000537e:	00028517          	auipc	a0,0x28
    80005382:	01a50513          	addi	a0,a0,26 # 8002d398 <__func__.0+0x378>
    80005386:	235250ef          	jal	8002adba <printf>
    8000538a:	4511                	li	a0,4
    8000538c:	ae3fb0ef          	jal	80000e6e <goto_priv>
    80005390:	bfafc0ef          	jal	8000178a <reset_state>

}
    80005394:	70a2                	ld	ra,40(sp)
    80005396:	8522                	mv	a0,s0
    80005398:	7402                	ld	s0,32(sp)
    8000539a:	64e2                	ld	s1,24(sp)
    8000539c:	6145                	addi	sp,sp,48
    8000539e:	8082                	ret

00000000800053a0 <virtual_instruction_3>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_3() {
    800053a0:	1101                	addi	sp,sp,-32

    TEST_START();
    800053a2:	00026597          	auipc	a1,0x26
    800053a6:	1ce58593          	addi	a1,a1,462 # 8002b570 <__func__.9>
    800053aa:	00028517          	auipc	a0,0x28
    800053ae:	f5650513          	addi	a0,a0,-170 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_3() {
    800053b2:	ec06                	sd	ra,24(sp)
    800053b4:	e822                	sd	s0,16(sp)
    800053b6:	e426                	sd	s1,8(sp)
    TEST_START();
    800053b8:	203250ef          	jal	8002adba <printf>
    800053bc:	4529                	li	a0,10
    800053be:	6ea240ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    800053c2:	4511                	li	a0,4
    800053c4:	aabfb0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    800053c8:	004007b7          	lui	a5,0x400
    800053cc:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800053d0:	4509                	li	a0,2
    800053d2:	a9dfb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800053d6:	99dfb0ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_SRET();
    800053da:	00000297          	auipc	t0,0x0
    800053de:	01028293          	addi	t0,t0,16 # 800053ea <virtual_instruction_3+0x4a>
    800053e2:	14129073          	csrw	sepc,t0
    800053e6:	10200073          	sret
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    800053ea:	08200593          	li	a1,130
    800053ee:	00029617          	auipc	a2,0x29
    800053f2:	d5a60613          	addi	a2,a2,-678 # 8002e148 <__func__.0+0x1128>
    800053f6:	00028517          	auipc	a0,0x28
    800053fa:	f2250513          	addi	a0,a0,-222 # 8002d318 <__func__.0+0x2f8>
    800053fe:	1bd250ef          	jal	8002adba <printf>
    80005402:	0004c797          	auipc	a5,0x4c
    80005406:	c0f7c783          	lbu	a5,-1009(a5) # 80051011 <excpt+0x1>
    8000540a:	0004c497          	auipc	s1,0x4c
    8000540e:	c0648493          	addi	s1,s1,-1018 # 80051010 <excpt>
    80005412:	00028597          	auipc	a1,0x28
    80005416:	ede58593          	addi	a1,a1,-290 # 8002d2f0 <__func__.0+0x2d0>
    8000541a:	cf89                	beqz	a5,80005434 <virtual_instruction_3+0x94>
    8000541c:	6498                	ld	a4,8(s1)
    8000541e:	47d9                	li	a5,22
    80005420:	00028597          	auipc	a1,0x28
    80005424:	ec058593          	addi	a1,a1,-320 # 8002d2e0 <__func__.0+0x2c0>
    80005428:	00f70663          	beq	a4,a5,80005434 <virtual_instruction_3+0x94>
    8000542c:	00028597          	auipc	a1,0x28
    80005430:	ec458593          	addi	a1,a1,-316 # 8002d2f0 <__func__.0+0x2d0>
    80005434:	00028517          	auipc	a0,0x28
    80005438:	efc50513          	addi	a0,a0,-260 # 8002d330 <__func__.0+0x310>
    8000543c:	17f250ef          	jal	8002adba <printf>
    80005440:	0004c797          	auipc	a5,0x4c
    80005444:	bd17c783          	lbu	a5,-1071(a5) # 80051011 <excpt+0x1>
    80005448:	c789                	beqz	a5,80005452 <virtual_instruction_3+0xb2>
    8000544a:	6498                	ld	a4,8(s1)
    8000544c:	47d9                	li	a5,22
    8000544e:	00f70c63          	beq	a4,a5,80005466 <virtual_instruction_3+0xc6>
    80005452:	00028517          	auipc	a0,0x28
    80005456:	ee650513          	addi	a0,a0,-282 # 8002d338 <__func__.0+0x318>
    8000545a:	161250ef          	jal	8002adba <printf>
    8000545e:	02900513          	li	a0,41
    80005462:	646240ef          	jal	80029aa8 <putchar>
    80005466:	4529                	li	a0,10
    80005468:	640240ef          	jal	80029aa8 <putchar>
    8000546c:	0004c417          	auipc	s0,0x4c
    80005470:	ba544403          	lbu	s0,-1115(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
    goto_priv(PRIV_M);
    80005474:	4511                	li	a0,4
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    80005476:	c409                	beqz	s0,80005480 <virtual_instruction_3+0xe0>
    80005478:	6498                	ld	a4,8(s1)
    8000547a:	47d9                	li	a5,22
    8000547c:	02f70e63          	beq	a4,a5,800054b8 <virtual_instruction_3+0x118>
    goto_priv(PRIV_M);
    80005480:	9effb0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    80005484:	004007b7          	lui	a5,0x400
    80005488:	6007b073          	csrc	hstatus,a5
    TEST_ASSERT("vs sret leads to virtual instruction exception when vtsr set",
    8000548c:	4401                	li	s0,0

    TEST_END();
    8000548e:	00028597          	auipc	a1,0x28
    80005492:	e6258593          	addi	a1,a1,-414 # 8002d2f0 <__func__.0+0x2d0>
    80005496:	00028517          	auipc	a0,0x28
    8000549a:	f0250513          	addi	a0,a0,-254 # 8002d398 <__func__.0+0x378>
    8000549e:	11d250ef          	jal	8002adba <printf>
    800054a2:	4511                	li	a0,4
    800054a4:	9cbfb0ef          	jal	80000e6e <goto_priv>
    800054a8:	ae2fc0ef          	jal	8000178a <reset_state>
}
    800054ac:	60e2                	ld	ra,24(sp)
    800054ae:	8522                	mv	a0,s0
    800054b0:	6442                	ld	s0,16(sp)
    800054b2:	64a2                	ld	s1,8(sp)
    800054b4:	6105                	addi	sp,sp,32
    800054b6:	8082                	ret
    goto_priv(PRIV_M);
    800054b8:	9b7fb0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTSR);
    800054bc:	004007b7          	lui	a5,0x400
    800054c0:	6007b073          	csrc	hstatus,a5
    TEST_END();
    800054c4:	00028597          	auipc	a1,0x28
    800054c8:	e1c58593          	addi	a1,a1,-484 # 8002d2e0 <__func__.0+0x2c0>
    800054cc:	b7e9                	j	80005496 <virtual_instruction_3+0xf6>

00000000800054ce <virtual_instruction_4>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_4() {
    800054ce:	1101                	addi	sp,sp,-32

    TEST_START();
    800054d0:	00026597          	auipc	a1,0x26
    800054d4:	0b858593          	addi	a1,a1,184 # 8002b588 <__func__.8>
    800054d8:	00028517          	auipc	a0,0x28
    800054dc:	e2850513          	addi	a0,a0,-472 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_4() {
    800054e0:	ec06                	sd	ra,24(sp)
    800054e2:	e822                	sd	s0,16(sp)
    800054e4:	e426                	sd	s1,8(sp)
    TEST_START();
    800054e6:	0d5250ef          	jal	8002adba <printf>
    800054ea:	4529                	li	a0,10
    800054ec:	5bc240ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    800054f0:	4511                	li	a0,4
    800054f2:	97dfb0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTVM);
    800054f6:	001007b7          	lui	a5,0x100
    800054fa:	6007a073          	csrs	hstatus,a5
    goto_priv(PRIV_VS);
    800054fe:	4509                	li	a0,2
    80005500:	96ffb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005504:	86ffb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    80005508:	12000073          	sfence.vma
    sfence();
    TEST_ASSERT("vs sfence leads to virtual instruction exception when vtvm set",
    8000550c:	08200593          	li	a1,130
    80005510:	00029617          	auipc	a2,0x29
    80005514:	c7860613          	addi	a2,a2,-904 # 8002e188 <__func__.0+0x1168>
    80005518:	00028517          	auipc	a0,0x28
    8000551c:	e0050513          	addi	a0,a0,-512 # 8002d318 <__func__.0+0x2f8>
    80005520:	09b250ef          	jal	8002adba <printf>
    80005524:	0004c797          	auipc	a5,0x4c
    80005528:	aed7c783          	lbu	a5,-1299(a5) # 80051011 <excpt+0x1>
    8000552c:	0004c497          	auipc	s1,0x4c
    80005530:	ae448493          	addi	s1,s1,-1308 # 80051010 <excpt>
    80005534:	00028597          	auipc	a1,0x28
    80005538:	dbc58593          	addi	a1,a1,-580 # 8002d2f0 <__func__.0+0x2d0>
    8000553c:	cf89                	beqz	a5,80005556 <virtual_instruction_4+0x88>
    8000553e:	6498                	ld	a4,8(s1)
    80005540:	47d9                	li	a5,22
    80005542:	00028597          	auipc	a1,0x28
    80005546:	d9e58593          	addi	a1,a1,-610 # 8002d2e0 <__func__.0+0x2c0>
    8000554a:	00f70663          	beq	a4,a5,80005556 <virtual_instruction_4+0x88>
    8000554e:	00028597          	auipc	a1,0x28
    80005552:	da258593          	addi	a1,a1,-606 # 8002d2f0 <__func__.0+0x2d0>
    80005556:	00028517          	auipc	a0,0x28
    8000555a:	dda50513          	addi	a0,a0,-550 # 8002d330 <__func__.0+0x310>
    8000555e:	05d250ef          	jal	8002adba <printf>
    80005562:	0004c797          	auipc	a5,0x4c
    80005566:	aaf7c783          	lbu	a5,-1361(a5) # 80051011 <excpt+0x1>
    8000556a:	c789                	beqz	a5,80005574 <virtual_instruction_4+0xa6>
    8000556c:	6498                	ld	a4,8(s1)
    8000556e:	47d9                	li	a5,22
    80005570:	00f70c63          	beq	a4,a5,80005588 <virtual_instruction_4+0xba>
    80005574:	00028517          	auipc	a0,0x28
    80005578:	dc450513          	addi	a0,a0,-572 # 8002d338 <__func__.0+0x318>
    8000557c:	03f250ef          	jal	8002adba <printf>
    80005580:	02900513          	li	a0,41
    80005584:	524240ef          	jal	80029aa8 <putchar>
    80005588:	4529                	li	a0,10
    8000558a:	51e240ef          	jal	80029aa8 <putchar>
    8000558e:	0004c797          	auipc	a5,0x4c
    80005592:	a837c783          	lbu	a5,-1405(a5) # 80051011 <excpt+0x1>
    80005596:	4401                	li	s0,0
    80005598:	c789                	beqz	a5,800055a2 <virtual_instruction_4+0xd4>
    8000559a:	6480                	ld	s0,8(s1)
    8000559c:	1429                	addi	s0,s0,-22
    8000559e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_SETUP_EXCEPT();
    800055a2:	fd0fb0ef          	jal	80000d72 <test_setup_except_function>
    CSRW(satp, 0x0);
    800055a6:	18005073          	csrwi	satp,0
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    800055aa:	08200593          	li	a1,130
    800055ae:	00029617          	auipc	a2,0x29
    800055b2:	c1a60613          	addi	a2,a2,-998 # 8002e1c8 <__func__.0+0x11a8>
    800055b6:	00028517          	auipc	a0,0x28
    800055ba:	d6250513          	addi	a0,a0,-670 # 8002d318 <__func__.0+0x2f8>
    800055be:	7fc250ef          	jal	8002adba <printf>
    800055c2:	0004c797          	auipc	a5,0x4c
    800055c6:	a4f7c783          	lbu	a5,-1457(a5) # 80051011 <excpt+0x1>
    800055ca:	00028597          	auipc	a1,0x28
    800055ce:	d2658593          	addi	a1,a1,-730 # 8002d2f0 <__func__.0+0x2d0>
    800055d2:	cf89                	beqz	a5,800055ec <virtual_instruction_4+0x11e>
    800055d4:	6498                	ld	a4,8(s1)
    800055d6:	47d9                	li	a5,22
    800055d8:	00028597          	auipc	a1,0x28
    800055dc:	d0858593          	addi	a1,a1,-760 # 8002d2e0 <__func__.0+0x2c0>
    800055e0:	00f70663          	beq	a4,a5,800055ec <virtual_instruction_4+0x11e>
    800055e4:	00028597          	auipc	a1,0x28
    800055e8:	d0c58593          	addi	a1,a1,-756 # 8002d2f0 <__func__.0+0x2d0>
    800055ec:	00028517          	auipc	a0,0x28
    800055f0:	d4450513          	addi	a0,a0,-700 # 8002d330 <__func__.0+0x310>
    800055f4:	7c6250ef          	jal	8002adba <printf>
    800055f8:	0004c797          	auipc	a5,0x4c
    800055fc:	a197c783          	lbu	a5,-1511(a5) # 80051011 <excpt+0x1>
    80005600:	c789                	beqz	a5,8000560a <virtual_instruction_4+0x13c>
    80005602:	6498                	ld	a4,8(s1)
    80005604:	47d9                	li	a5,22
    80005606:	00f70c63          	beq	a4,a5,8000561e <virtual_instruction_4+0x150>
    8000560a:	00028517          	auipc	a0,0x28
    8000560e:	d2e50513          	addi	a0,a0,-722 # 8002d338 <__func__.0+0x318>
    80005612:	7a8250ef          	jal	8002adba <printf>
    80005616:	02900513          	li	a0,41
    8000561a:	48e240ef          	jal	80029aa8 <putchar>
    8000561e:	4529                	li	a0,10
    80005620:	488240ef          	jal	80029aa8 <putchar>
    80005624:	c015                	beqz	s0,80005648 <virtual_instruction_4+0x17a>
    80005626:	0004c417          	auipc	s0,0x4c
    8000562a:	9eb44403          	lbu	s0,-1557(s0) # 80051011 <excpt+0x1>
    // TEST_ASSERT("vs mode access h level low part leads to virtual instruction exception when mstatus_TVM=0",
    //     excpt.triggered == true &&
    //     excpt.cause == CAUSE_VRTI
    // );      
    
    TEST_END();
    8000562e:	00028597          	auipc	a1,0x28
    80005632:	cc258593          	addi	a1,a1,-830 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80005636:	cc11                	beqz	s0,80005652 <virtual_instruction_4+0x184>
    80005638:	6498                	ld	a4,8(s1)
    8000563a:	47d9                	li	a5,22
    TEST_END();
    8000563c:	00028597          	auipc	a1,0x28
    80005640:	ca458593          	addi	a1,a1,-860 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs satp acess leads to virtual instruction exception when vtvm set",
    80005644:	00f70763          	beq	a4,a5,80005652 <virtual_instruction_4+0x184>
    80005648:	4401                	li	s0,0
    TEST_END();
    8000564a:	00028597          	auipc	a1,0x28
    8000564e:	ca658593          	addi	a1,a1,-858 # 8002d2f0 <__func__.0+0x2d0>
    80005652:	00028517          	auipc	a0,0x28
    80005656:	d4650513          	addi	a0,a0,-698 # 8002d398 <__func__.0+0x378>
    8000565a:	760250ef          	jal	8002adba <printf>
    8000565e:	4511                	li	a0,4
    80005660:	80ffb0ef          	jal	80000e6e <goto_priv>
    80005664:	926fc0ef          	jal	8000178a <reset_state>
}
    80005668:	60e2                	ld	ra,24(sp)
    8000566a:	8522                	mv	a0,s0
    8000566c:	6442                	ld	s0,16(sp)
    8000566e:	64a2                	ld	s1,8(sp)
    80005670:	6105                	addi	sp,sp,32
    80005672:	8082                	ret

0000000080005674 <virtual_instruction_5>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_5() {
    80005674:	1101                	addi	sp,sp,-32

    TEST_START();
    80005676:	00026597          	auipc	a1,0x26
    8000567a:	f2a58593          	addi	a1,a1,-214 # 8002b5a0 <__func__.7>
    8000567e:	00028517          	auipc	a0,0x28
    80005682:	c8250513          	addi	a0,a0,-894 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_5() {
    80005686:	ec06                	sd	ra,24(sp)
    80005688:	e822                	sd	s0,16(sp)
    8000568a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000568c:	72e250ef          	jal	8002adba <printf>
    80005690:	4529                	li	a0,10
    80005692:	416240ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    80005696:	4511                	li	a0,4
    80005698:	fd6fb0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    8000569c:	002007b7          	lui	a5,0x200
    800056a0:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800056a4:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VS);
    800056a8:	4509                	li	a0,2
    800056aa:	fc4fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800056ae:	ec4fb0ef          	jal	80000d72 <test_setup_except_function>
    asm("wfi");
    800056b2:	10500073          	wfi
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800056b6:	08200593          	li	a1,130
    800056ba:	00029617          	auipc	a2,0x29
    800056be:	b5660613          	addi	a2,a2,-1194 # 8002e210 <__func__.0+0x11f0>
    800056c2:	00028517          	auipc	a0,0x28
    800056c6:	c5650513          	addi	a0,a0,-938 # 8002d318 <__func__.0+0x2f8>
    800056ca:	6f0250ef          	jal	8002adba <printf>
    800056ce:	0004c797          	auipc	a5,0x4c
    800056d2:	9437c783          	lbu	a5,-1725(a5) # 80051011 <excpt+0x1>
    800056d6:	0004c497          	auipc	s1,0x4c
    800056da:	93a48493          	addi	s1,s1,-1734 # 80051010 <excpt>
    800056de:	00028597          	auipc	a1,0x28
    800056e2:	c1258593          	addi	a1,a1,-1006 # 8002d2f0 <__func__.0+0x2d0>
    800056e6:	cf89                	beqz	a5,80005700 <virtual_instruction_5+0x8c>
    800056e8:	6498                	ld	a4,8(s1)
    800056ea:	47d9                	li	a5,22
    800056ec:	00028597          	auipc	a1,0x28
    800056f0:	bf458593          	addi	a1,a1,-1036 # 8002d2e0 <__func__.0+0x2c0>
    800056f4:	00f70663          	beq	a4,a5,80005700 <virtual_instruction_5+0x8c>
    800056f8:	00028597          	auipc	a1,0x28
    800056fc:	bf858593          	addi	a1,a1,-1032 # 8002d2f0 <__func__.0+0x2d0>
    80005700:	00028517          	auipc	a0,0x28
    80005704:	c3050513          	addi	a0,a0,-976 # 8002d330 <__func__.0+0x310>
    80005708:	6b2250ef          	jal	8002adba <printf>
    8000570c:	0004c797          	auipc	a5,0x4c
    80005710:	9057c783          	lbu	a5,-1787(a5) # 80051011 <excpt+0x1>
    80005714:	c789                	beqz	a5,8000571e <virtual_instruction_5+0xaa>
    80005716:	6498                	ld	a4,8(s1)
    80005718:	47d9                	li	a5,22
    8000571a:	00f70c63          	beq	a4,a5,80005732 <virtual_instruction_5+0xbe>
    8000571e:	00028517          	auipc	a0,0x28
    80005722:	c1a50513          	addi	a0,a0,-998 # 8002d338 <__func__.0+0x318>
    80005726:	694250ef          	jal	8002adba <printf>
    8000572a:	02900513          	li	a0,41
    8000572e:	37a240ef          	jal	80029aa8 <putchar>
    80005732:	4529                	li	a0,10
    80005734:	374240ef          	jal	80029aa8 <putchar>
    80005738:	0004c417          	auipc	s0,0x4c
    8000573c:	8d944403          	lbu	s0,-1831(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    goto_priv(PRIV_M);
    80005740:	4511                	li	a0,4
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005742:	c409                	beqz	s0,8000574c <virtual_instruction_5+0xd8>
    80005744:	6498                	ld	a4,8(s1)
    80005746:	47d9                	li	a5,22
    80005748:	04f70263          	beq	a4,a5,8000578c <virtual_instruction_5+0x118>
    goto_priv(PRIV_M);
    8000574c:	f22fb0ef          	jal	80000e6e <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    80005750:	343025f3          	csrr	a1,mtval
    80005754:	00029517          	auipc	a0,0x29
    80005758:	b0450513          	addi	a0,a0,-1276 # 8002e258 <__func__.0+0x1238>
    8000575c:	65e250ef          	jal	8002adba <printf>
    TEST_ASSERT("vs wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80005760:	4401                	li	s0,0

    TEST_END();
    80005762:	00028597          	auipc	a1,0x28
    80005766:	b8e58593          	addi	a1,a1,-1138 # 8002d2f0 <__func__.0+0x2d0>
    8000576a:	00028517          	auipc	a0,0x28
    8000576e:	c2e50513          	addi	a0,a0,-978 # 8002d398 <__func__.0+0x378>
    80005772:	648250ef          	jal	8002adba <printf>
    80005776:	4511                	li	a0,4
    80005778:	ef6fb0ef          	jal	80000e6e <goto_priv>
    8000577c:	80efc0ef          	jal	8000178a <reset_state>
}
    80005780:	60e2                	ld	ra,24(sp)
    80005782:	8522                	mv	a0,s0
    80005784:	6442                	ld	s0,16(sp)
    80005786:	64a2                	ld	s1,8(sp)
    80005788:	6105                	addi	sp,sp,32
    8000578a:	8082                	ret
    goto_priv(PRIV_M);
    8000578c:	ee2fb0ef          	jal	80000e6e <goto_priv>
    printf("%llx",CSRR(CSR_MTVAL));
    80005790:	343025f3          	csrr	a1,mtval
    80005794:	00029517          	auipc	a0,0x29
    80005798:	ac450513          	addi	a0,a0,-1340 # 8002e258 <__func__.0+0x1238>
    8000579c:	61e250ef          	jal	8002adba <printf>
    TEST_END();
    800057a0:	00028597          	auipc	a1,0x28
    800057a4:	b4058593          	addi	a1,a1,-1216 # 8002d2e0 <__func__.0+0x2c0>
    800057a8:	b7c9                	j	8000576a <virtual_instruction_5+0xf6>

00000000800057aa <virtual_instruction_6>:


bool virtual_instruction_6() {
    800057aa:	1101                	addi	sp,sp,-32

    TEST_START();
    800057ac:	00026597          	auipc	a1,0x26
    800057b0:	e0c58593          	addi	a1,a1,-500 # 8002b5b8 <__func__.6>
    800057b4:	00028517          	auipc	a0,0x28
    800057b8:	b4c50513          	addi	a0,a0,-1204 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_6() {
    800057bc:	ec06                	sd	ra,24(sp)
    800057be:	e822                	sd	s0,16(sp)
    800057c0:	e426                	sd	s1,8(sp)
    TEST_START();
    800057c2:	5f8250ef          	jal	8002adba <printf>
    800057c6:	4529                	li	a0,10
    800057c8:	2e0240ef          	jal	80029aa8 <putchar>

//vu-mode
    goto_priv(PRIV_VU);
    800057cc:	4501                	li	a0,0
    800057ce:	ea0fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800057d2:	da0fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800057d6:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("vu executing hfence.vvma leads to virtual instruction exception",
    800057da:	08200593          	li	a1,130
    800057de:	00029617          	auipc	a2,0x29
    800057e2:	a8260613          	addi	a2,a2,-1406 # 8002e260 <__func__.0+0x1240>
    800057e6:	00028517          	auipc	a0,0x28
    800057ea:	b3250513          	addi	a0,a0,-1230 # 8002d318 <__func__.0+0x2f8>
    800057ee:	5cc250ef          	jal	8002adba <printf>
    800057f2:	0004c797          	auipc	a5,0x4c
    800057f6:	81f7c783          	lbu	a5,-2017(a5) # 80051011 <excpt+0x1>
    800057fa:	0004c497          	auipc	s1,0x4c
    800057fe:	81648493          	addi	s1,s1,-2026 # 80051010 <excpt>
    80005802:	00028597          	auipc	a1,0x28
    80005806:	aee58593          	addi	a1,a1,-1298 # 8002d2f0 <__func__.0+0x2d0>
    8000580a:	cf89                	beqz	a5,80005824 <virtual_instruction_6+0x7a>
    8000580c:	6498                	ld	a4,8(s1)
    8000580e:	47d9                	li	a5,22
    80005810:	00028597          	auipc	a1,0x28
    80005814:	ad058593          	addi	a1,a1,-1328 # 8002d2e0 <__func__.0+0x2c0>
    80005818:	00f70663          	beq	a4,a5,80005824 <virtual_instruction_6+0x7a>
    8000581c:	00028597          	auipc	a1,0x28
    80005820:	ad458593          	addi	a1,a1,-1324 # 8002d2f0 <__func__.0+0x2d0>
    80005824:	00028517          	auipc	a0,0x28
    80005828:	b0c50513          	addi	a0,a0,-1268 # 8002d330 <__func__.0+0x310>
    8000582c:	58e250ef          	jal	8002adba <printf>
    80005830:	0004b797          	auipc	a5,0x4b
    80005834:	7e17c783          	lbu	a5,2017(a5) # 80051011 <excpt+0x1>
    80005838:	c789                	beqz	a5,80005842 <virtual_instruction_6+0x98>
    8000583a:	6498                	ld	a4,8(s1)
    8000583c:	47d9                	li	a5,22
    8000583e:	00f70c63          	beq	a4,a5,80005856 <virtual_instruction_6+0xac>
    80005842:	00028517          	auipc	a0,0x28
    80005846:	af650513          	addi	a0,a0,-1290 # 8002d338 <__func__.0+0x318>
    8000584a:	570250ef          	jal	8002adba <printf>
    8000584e:	02900513          	li	a0,41
    80005852:	256240ef          	jal	80029aa8 <putchar>
    80005856:	4529                	li	a0,10
    80005858:	250240ef          	jal	80029aa8 <putchar>
    8000585c:	0004b797          	auipc	a5,0x4b
    80005860:	7b57c783          	lbu	a5,1973(a5) # 80051011 <excpt+0x1>
    80005864:	4401                	li	s0,0
    80005866:	c789                	beqz	a5,80005870 <virtual_instruction_6+0xc6>
    80005868:	6480                	ld	s0,8(s1)
    8000586a:	1429                	addi	s0,s0,-22
    8000586c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    
    goto_priv(PRIV_VU);
    80005870:	4501                	li	a0,0
    80005872:	dfcfb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005876:	cfcfb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    8000587a:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    8000587e:	08200593          	li	a1,130
    80005882:	00029617          	auipc	a2,0x29
    80005886:	a1e60613          	addi	a2,a2,-1506 # 8002e2a0 <__func__.0+0x1280>
    8000588a:	00028517          	auipc	a0,0x28
    8000588e:	a8e50513          	addi	a0,a0,-1394 # 8002d318 <__func__.0+0x2f8>
    80005892:	528250ef          	jal	8002adba <printf>
    80005896:	0004b797          	auipc	a5,0x4b
    8000589a:	77b7c783          	lbu	a5,1915(a5) # 80051011 <excpt+0x1>
    8000589e:	00028597          	auipc	a1,0x28
    800058a2:	a5258593          	addi	a1,a1,-1454 # 8002d2f0 <__func__.0+0x2d0>
    800058a6:	cf89                	beqz	a5,800058c0 <virtual_instruction_6+0x116>
    800058a8:	6498                	ld	a4,8(s1)
    800058aa:	47d9                	li	a5,22
    800058ac:	00028597          	auipc	a1,0x28
    800058b0:	a3458593          	addi	a1,a1,-1484 # 8002d2e0 <__func__.0+0x2c0>
    800058b4:	00f70663          	beq	a4,a5,800058c0 <virtual_instruction_6+0x116>
    800058b8:	00028597          	auipc	a1,0x28
    800058bc:	a3858593          	addi	a1,a1,-1480 # 8002d2f0 <__func__.0+0x2d0>
    800058c0:	00028517          	auipc	a0,0x28
    800058c4:	a7050513          	addi	a0,a0,-1424 # 8002d330 <__func__.0+0x310>
    800058c8:	4f2250ef          	jal	8002adba <printf>
    800058cc:	0004b797          	auipc	a5,0x4b
    800058d0:	7457c783          	lbu	a5,1861(a5) # 80051011 <excpt+0x1>
    800058d4:	c789                	beqz	a5,800058de <virtual_instruction_6+0x134>
    800058d6:	6498                	ld	a4,8(s1)
    800058d8:	47d9                	li	a5,22
    800058da:	00f70c63          	beq	a4,a5,800058f2 <virtual_instruction_6+0x148>
    800058de:	00028517          	auipc	a0,0x28
    800058e2:	a5a50513          	addi	a0,a0,-1446 # 8002d338 <__func__.0+0x318>
    800058e6:	4d4250ef          	jal	8002adba <printf>
    800058ea:	02900513          	li	a0,41
    800058ee:	1ba240ef          	jal	80029aa8 <putchar>
    800058f2:	4529                	li	a0,10
    800058f4:	1b4240ef          	jal	80029aa8 <putchar>
    800058f8:	c801                	beqz	s0,80005908 <virtual_instruction_6+0x15e>
    800058fa:	0004b797          	auipc	a5,0x4b
    800058fe:	7177c783          	lbu	a5,1815(a5) # 80051011 <excpt+0x1>
    80005902:	4401                	li	s0,0
    80005904:	0c079e63          	bnez	a5,800059e0 <virtual_instruction_6+0x236>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    goto_priv(PRIV_VU);
    80005908:	4501                	li	a0,0
    8000590a:	d64fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8000590e:	c64fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005912:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    80005916:	08200593          	li	a1,130
    8000591a:	00029617          	auipc	a2,0x29
    8000591e:	9c660613          	addi	a2,a2,-1594 # 8002e2e0 <__func__.0+0x12c0>
    80005922:	00028517          	auipc	a0,0x28
    80005926:	9f650513          	addi	a0,a0,-1546 # 8002d318 <__func__.0+0x2f8>
    8000592a:	490250ef          	jal	8002adba <printf>
    8000592e:	0004b797          	auipc	a5,0x4b
    80005932:	6e37c783          	lbu	a5,1763(a5) # 80051011 <excpt+0x1>
    80005936:	00028597          	auipc	a1,0x28
    8000593a:	9ba58593          	addi	a1,a1,-1606 # 8002d2f0 <__func__.0+0x2d0>
    8000593e:	cf89                	beqz	a5,80005958 <virtual_instruction_6+0x1ae>
    80005940:	6498                	ld	a4,8(s1)
    80005942:	47d9                	li	a5,22
    80005944:	00028597          	auipc	a1,0x28
    80005948:	99c58593          	addi	a1,a1,-1636 # 8002d2e0 <__func__.0+0x2c0>
    8000594c:	00f70663          	beq	a4,a5,80005958 <virtual_instruction_6+0x1ae>
    80005950:	00028597          	auipc	a1,0x28
    80005954:	9a058593          	addi	a1,a1,-1632 # 8002d2f0 <__func__.0+0x2d0>
    80005958:	00028517          	auipc	a0,0x28
    8000595c:	9d850513          	addi	a0,a0,-1576 # 8002d330 <__func__.0+0x310>
    80005960:	45a250ef          	jal	8002adba <printf>
    80005964:	0004b797          	auipc	a5,0x4b
    80005968:	6ad7c783          	lbu	a5,1709(a5) # 80051011 <excpt+0x1>
    8000596c:	c789                	beqz	a5,80005976 <virtual_instruction_6+0x1cc>
    8000596e:	6498                	ld	a4,8(s1)
    80005970:	47d9                	li	a5,22
    80005972:	00f70c63          	beq	a4,a5,8000598a <virtual_instruction_6+0x1e0>
    80005976:	00028517          	auipc	a0,0x28
    8000597a:	9c250513          	addi	a0,a0,-1598 # 8002d338 <__func__.0+0x318>
    8000597e:	43c250ef          	jal	8002adba <printf>
    80005982:	02900513          	li	a0,41
    80005986:	122240ef          	jal	80029aa8 <putchar>
    8000598a:	4529                	li	a0,10
    8000598c:	11c240ef          	jal	80029aa8 <putchar>
    80005990:	c015                	beqz	s0,800059b4 <virtual_instruction_6+0x20a>
    80005992:	0004b417          	auipc	s0,0x4b
    80005996:	67f44403          	lbu	s0,1663(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    8000599a:	00028597          	auipc	a1,0x28
    8000599e:	95658593          	addi	a1,a1,-1706 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800059a2:	cc11                	beqz	s0,800059be <virtual_instruction_6+0x214>
    800059a4:	6498                	ld	a4,8(s1)
    800059a6:	47d9                	li	a5,22
    TEST_END();
    800059a8:	00028597          	auipc	a1,0x28
    800059ac:	93858593          	addi	a1,a1,-1736 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu executing sinval.vma leads to virtual instruction exception when vtvm=1",
    800059b0:	00f70763          	beq	a4,a5,800059be <virtual_instruction_6+0x214>
    800059b4:	4401                	li	s0,0
    TEST_END();
    800059b6:	00028597          	auipc	a1,0x28
    800059ba:	93a58593          	addi	a1,a1,-1734 # 8002d2f0 <__func__.0+0x2d0>
    800059be:	00028517          	auipc	a0,0x28
    800059c2:	9da50513          	addi	a0,a0,-1574 # 8002d398 <__func__.0+0x378>
    800059c6:	3f4250ef          	jal	8002adba <printf>
    800059ca:	4511                	li	a0,4
    800059cc:	ca2fb0ef          	jal	80000e6e <goto_priv>
    800059d0:	dbbfb0ef          	jal	8000178a <reset_state>
}
    800059d4:	60e2                	ld	ra,24(sp)
    800059d6:	8522                	mv	a0,s0
    800059d8:	6442                	ld	s0,16(sp)
    800059da:	64a2                	ld	s1,8(sp)
    800059dc:	6105                	addi	sp,sp,32
    800059de:	8082                	ret
    TEST_ASSERT("vu executing hfence.gvma leads to virtual instruction exception",
    800059e0:	6480                	ld	s0,8(s1)
    800059e2:	1429                	addi	s0,s0,-22
    800059e4:	00143413          	seqz	s0,s0
    800059e8:	b705                	j	80005908 <virtual_instruction_6+0x15e>

00000000800059ea <virtual_instruction_7>:
    ////////////////////////////////////////////////////////////////////////
bool virtual_instruction_7() {
    800059ea:	1101                	addi	sp,sp,-32

    TEST_START();
    800059ec:	00026597          	auipc	a1,0x26
    800059f0:	be458593          	addi	a1,a1,-1052 # 8002b5d0 <__func__.5>
    800059f4:	00028517          	auipc	a0,0x28
    800059f8:	90c50513          	addi	a0,a0,-1780 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_7() {
    800059fc:	ec06                	sd	ra,24(sp)
    800059fe:	e822                	sd	s0,16(sp)
    80005a00:	e426                	sd	s1,8(sp)
    TEST_START();
    80005a02:	3b8250ef          	jal	8002adba <printf>
    80005a06:	4529                	li	a0,10
    80005a08:	0a0240ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_VU);
    80005a0c:	4501                	li	a0,0
    80005a0e:	c60fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005a12:	b60fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005a16:	4781                	li	a5,0
    80005a18:	6007c7f3          	.insn	4, 0x6007c7f3
    uint64_t tmp = hlvb(0);

    TEST_ASSERT("vu hlvb leads to virtual instruction exception",
    80005a1c:	08200593          	li	a1,130
    80005a20:	00029617          	auipc	a2,0x29
    80005a24:	91060613          	addi	a2,a2,-1776 # 8002e330 <__func__.0+0x1310>
    80005a28:	00028517          	auipc	a0,0x28
    80005a2c:	8f050513          	addi	a0,a0,-1808 # 8002d318 <__func__.0+0x2f8>
    80005a30:	38a250ef          	jal	8002adba <printf>
    80005a34:	0004b797          	auipc	a5,0x4b
    80005a38:	5dd7c783          	lbu	a5,1501(a5) # 80051011 <excpt+0x1>
    80005a3c:	0004b497          	auipc	s1,0x4b
    80005a40:	5d448493          	addi	s1,s1,1492 # 80051010 <excpt>
    80005a44:	00028597          	auipc	a1,0x28
    80005a48:	8ac58593          	addi	a1,a1,-1876 # 8002d2f0 <__func__.0+0x2d0>
    80005a4c:	cf89                	beqz	a5,80005a66 <virtual_instruction_7+0x7c>
    80005a4e:	6498                	ld	a4,8(s1)
    80005a50:	47d9                	li	a5,22
    80005a52:	00028597          	auipc	a1,0x28
    80005a56:	88e58593          	addi	a1,a1,-1906 # 8002d2e0 <__func__.0+0x2c0>
    80005a5a:	00f70663          	beq	a4,a5,80005a66 <virtual_instruction_7+0x7c>
    80005a5e:	00028597          	auipc	a1,0x28
    80005a62:	89258593          	addi	a1,a1,-1902 # 8002d2f0 <__func__.0+0x2d0>
    80005a66:	00028517          	auipc	a0,0x28
    80005a6a:	8ca50513          	addi	a0,a0,-1846 # 8002d330 <__func__.0+0x310>
    80005a6e:	34c250ef          	jal	8002adba <printf>
    80005a72:	0004b797          	auipc	a5,0x4b
    80005a76:	59f7c783          	lbu	a5,1439(a5) # 80051011 <excpt+0x1>
    80005a7a:	c789                	beqz	a5,80005a84 <virtual_instruction_7+0x9a>
    80005a7c:	6498                	ld	a4,8(s1)
    80005a7e:	47d9                	li	a5,22
    80005a80:	00f70c63          	beq	a4,a5,80005a98 <virtual_instruction_7+0xae>
    80005a84:	00028517          	auipc	a0,0x28
    80005a88:	8b450513          	addi	a0,a0,-1868 # 8002d338 <__func__.0+0x318>
    80005a8c:	32e250ef          	jal	8002adba <printf>
    80005a90:	02900513          	li	a0,41
    80005a94:	014240ef          	jal	80029aa8 <putchar>
    80005a98:	4529                	li	a0,10
    80005a9a:	00e240ef          	jal	80029aa8 <putchar>
    80005a9e:	0004b797          	auipc	a5,0x4b
    80005aa2:	5737c783          	lbu	a5,1395(a5) # 80051011 <excpt+0x1>
    80005aa6:	4401                	li	s0,0
    80005aa8:	c789                	beqz	a5,80005ab2 <virtual_instruction_7+0xc8>
    80005aaa:	6480                	ld	s0,8(s1)
    80005aac:	1429                	addi	s0,s0,-22
    80005aae:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005ab2:	4501                	li	a0,0
    80005ab4:	bbafb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005ab8:	abafb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005abc:	4781                	li	a5,0
    80005abe:	6017c7f3          	.insn	4, 0x6017c7f3
     tmp = hlvbu(0);

    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80005ac2:	08200593          	li	a1,130
    80005ac6:	00029617          	auipc	a2,0x29
    80005aca:	89a60613          	addi	a2,a2,-1894 # 8002e360 <__func__.0+0x1340>
    80005ace:	00028517          	auipc	a0,0x28
    80005ad2:	84a50513          	addi	a0,a0,-1974 # 8002d318 <__func__.0+0x2f8>
    80005ad6:	2e4250ef          	jal	8002adba <printf>
    80005ada:	0004b797          	auipc	a5,0x4b
    80005ade:	5377c783          	lbu	a5,1335(a5) # 80051011 <excpt+0x1>
    80005ae2:	00028597          	auipc	a1,0x28
    80005ae6:	80e58593          	addi	a1,a1,-2034 # 8002d2f0 <__func__.0+0x2d0>
    80005aea:	cf89                	beqz	a5,80005b04 <virtual_instruction_7+0x11a>
    80005aec:	6498                	ld	a4,8(s1)
    80005aee:	47d9                	li	a5,22
    80005af0:	00027597          	auipc	a1,0x27
    80005af4:	7f058593          	addi	a1,a1,2032 # 8002d2e0 <__func__.0+0x2c0>
    80005af8:	00f70663          	beq	a4,a5,80005b04 <virtual_instruction_7+0x11a>
    80005afc:	00027597          	auipc	a1,0x27
    80005b00:	7f458593          	addi	a1,a1,2036 # 8002d2f0 <__func__.0+0x2d0>
    80005b04:	00028517          	auipc	a0,0x28
    80005b08:	82c50513          	addi	a0,a0,-2004 # 8002d330 <__func__.0+0x310>
    80005b0c:	2ae250ef          	jal	8002adba <printf>
    80005b10:	0004b797          	auipc	a5,0x4b
    80005b14:	5017c783          	lbu	a5,1281(a5) # 80051011 <excpt+0x1>
    80005b18:	c789                	beqz	a5,80005b22 <virtual_instruction_7+0x138>
    80005b1a:	6498                	ld	a4,8(s1)
    80005b1c:	47d9                	li	a5,22
    80005b1e:	00f70c63          	beq	a4,a5,80005b36 <virtual_instruction_7+0x14c>
    80005b22:	00028517          	auipc	a0,0x28
    80005b26:	81650513          	addi	a0,a0,-2026 # 8002d338 <__func__.0+0x318>
    80005b2a:	290250ef          	jal	8002adba <printf>
    80005b2e:	02900513          	li	a0,41
    80005b32:	777230ef          	jal	80029aa8 <putchar>
    80005b36:	4529                	li	a0,10
    80005b38:	771230ef          	jal	80029aa8 <putchar>
    80005b3c:	c801                	beqz	s0,80005b4c <virtual_instruction_7+0x162>
    80005b3e:	0004b797          	auipc	a5,0x4b
    80005b42:	4d37c783          	lbu	a5,1235(a5) # 80051011 <excpt+0x1>
    80005b46:	4401                	li	s0,0
    80005b48:	4c079d63          	bnez	a5,80006022 <virtual_instruction_7+0x638>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005b4c:	4501                	li	a0,0
    80005b4e:	b20fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005b52:	a20fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005b56:	4781                	li	a5,0
    80005b58:	6407c7f3          	.insn	4, 0x6407c7f3
     tmp = hlvh(0);

    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80005b5c:	08200593          	li	a1,130
    80005b60:	00029617          	auipc	a2,0x29
    80005b64:	83060613          	addi	a2,a2,-2000 # 8002e390 <__func__.0+0x1370>
    80005b68:	00027517          	auipc	a0,0x27
    80005b6c:	7b050513          	addi	a0,a0,1968 # 8002d318 <__func__.0+0x2f8>
    80005b70:	24a250ef          	jal	8002adba <printf>
    80005b74:	0004b797          	auipc	a5,0x4b
    80005b78:	49d7c783          	lbu	a5,1181(a5) # 80051011 <excpt+0x1>
    80005b7c:	00027597          	auipc	a1,0x27
    80005b80:	77458593          	addi	a1,a1,1908 # 8002d2f0 <__func__.0+0x2d0>
    80005b84:	cf89                	beqz	a5,80005b9e <virtual_instruction_7+0x1b4>
    80005b86:	6498                	ld	a4,8(s1)
    80005b88:	47d9                	li	a5,22
    80005b8a:	00027597          	auipc	a1,0x27
    80005b8e:	75658593          	addi	a1,a1,1878 # 8002d2e0 <__func__.0+0x2c0>
    80005b92:	00f70663          	beq	a4,a5,80005b9e <virtual_instruction_7+0x1b4>
    80005b96:	00027597          	auipc	a1,0x27
    80005b9a:	75a58593          	addi	a1,a1,1882 # 8002d2f0 <__func__.0+0x2d0>
    80005b9e:	00027517          	auipc	a0,0x27
    80005ba2:	79250513          	addi	a0,a0,1938 # 8002d330 <__func__.0+0x310>
    80005ba6:	214250ef          	jal	8002adba <printf>
    80005baa:	0004b797          	auipc	a5,0x4b
    80005bae:	4677c783          	lbu	a5,1127(a5) # 80051011 <excpt+0x1>
    80005bb2:	c789                	beqz	a5,80005bbc <virtual_instruction_7+0x1d2>
    80005bb4:	6498                	ld	a4,8(s1)
    80005bb6:	47d9                	li	a5,22
    80005bb8:	00f70c63          	beq	a4,a5,80005bd0 <virtual_instruction_7+0x1e6>
    80005bbc:	00027517          	auipc	a0,0x27
    80005bc0:	77c50513          	addi	a0,a0,1916 # 8002d338 <__func__.0+0x318>
    80005bc4:	1f6250ef          	jal	8002adba <printf>
    80005bc8:	02900513          	li	a0,41
    80005bcc:	6dd230ef          	jal	80029aa8 <putchar>
    80005bd0:	4529                	li	a0,10
    80005bd2:	6d7230ef          	jal	80029aa8 <putchar>
    80005bd6:	c801                	beqz	s0,80005be6 <virtual_instruction_7+0x1fc>
    80005bd8:	0004b797          	auipc	a5,0x4b
    80005bdc:	4397c783          	lbu	a5,1081(a5) # 80051011 <excpt+0x1>
    80005be0:	4401                	li	s0,0
    80005be2:	44079a63          	bnez	a5,80006036 <virtual_instruction_7+0x64c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005be6:	4501                	li	a0,0
    80005be8:	a86fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005bec:	986fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005bf0:	4781                	li	a5,0
    80005bf2:	6807c7f3          	.insn	4, 0x6807c7f3
     tmp = hlvw(0);

    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    80005bf6:	08200593          	li	a1,130
    80005bfa:	00028617          	auipc	a2,0x28
    80005bfe:	7c660613          	addi	a2,a2,1990 # 8002e3c0 <__func__.0+0x13a0>
    80005c02:	00027517          	auipc	a0,0x27
    80005c06:	71650513          	addi	a0,a0,1814 # 8002d318 <__func__.0+0x2f8>
    80005c0a:	1b0250ef          	jal	8002adba <printf>
    80005c0e:	0004b797          	auipc	a5,0x4b
    80005c12:	4037c783          	lbu	a5,1027(a5) # 80051011 <excpt+0x1>
    80005c16:	00027597          	auipc	a1,0x27
    80005c1a:	6da58593          	addi	a1,a1,1754 # 8002d2f0 <__func__.0+0x2d0>
    80005c1e:	cf89                	beqz	a5,80005c38 <virtual_instruction_7+0x24e>
    80005c20:	6498                	ld	a4,8(s1)
    80005c22:	47d9                	li	a5,22
    80005c24:	00027597          	auipc	a1,0x27
    80005c28:	6bc58593          	addi	a1,a1,1724 # 8002d2e0 <__func__.0+0x2c0>
    80005c2c:	00f70663          	beq	a4,a5,80005c38 <virtual_instruction_7+0x24e>
    80005c30:	00027597          	auipc	a1,0x27
    80005c34:	6c058593          	addi	a1,a1,1728 # 8002d2f0 <__func__.0+0x2d0>
    80005c38:	00027517          	auipc	a0,0x27
    80005c3c:	6f850513          	addi	a0,a0,1784 # 8002d330 <__func__.0+0x310>
    80005c40:	17a250ef          	jal	8002adba <printf>
    80005c44:	0004b797          	auipc	a5,0x4b
    80005c48:	3cd7c783          	lbu	a5,973(a5) # 80051011 <excpt+0x1>
    80005c4c:	c789                	beqz	a5,80005c56 <virtual_instruction_7+0x26c>
    80005c4e:	6498                	ld	a4,8(s1)
    80005c50:	47d9                	li	a5,22
    80005c52:	00f70c63          	beq	a4,a5,80005c6a <virtual_instruction_7+0x280>
    80005c56:	00027517          	auipc	a0,0x27
    80005c5a:	6e250513          	addi	a0,a0,1762 # 8002d338 <__func__.0+0x318>
    80005c5e:	15c250ef          	jal	8002adba <printf>
    80005c62:	02900513          	li	a0,41
    80005c66:	643230ef          	jal	80029aa8 <putchar>
    80005c6a:	4529                	li	a0,10
    80005c6c:	63d230ef          	jal	80029aa8 <putchar>
    80005c70:	c801                	beqz	s0,80005c80 <virtual_instruction_7+0x296>
    80005c72:	0004b797          	auipc	a5,0x4b
    80005c76:	39f7c783          	lbu	a5,927(a5) # 80051011 <excpt+0x1>
    80005c7a:	4401                	li	s0,0
    80005c7c:	3a079863          	bnez	a5,8000602c <virtual_instruction_7+0x642>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005c80:	4501                	li	a0,0
    80005c82:	9ecfb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005c86:	8ecfb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005c8a:	4781                	li	a5,0
    80005c8c:	6c07c7f3          	.insn	4, 0x6c07c7f3
     tmp = hlvd(0);

    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    80005c90:	08200593          	li	a1,130
    80005c94:	00028617          	auipc	a2,0x28
    80005c98:	75c60613          	addi	a2,a2,1884 # 8002e3f0 <__func__.0+0x13d0>
    80005c9c:	00027517          	auipc	a0,0x27
    80005ca0:	67c50513          	addi	a0,a0,1660 # 8002d318 <__func__.0+0x2f8>
    80005ca4:	116250ef          	jal	8002adba <printf>
    80005ca8:	0004b797          	auipc	a5,0x4b
    80005cac:	3697c783          	lbu	a5,873(a5) # 80051011 <excpt+0x1>
    80005cb0:	00027597          	auipc	a1,0x27
    80005cb4:	64058593          	addi	a1,a1,1600 # 8002d2f0 <__func__.0+0x2d0>
    80005cb8:	cf89                	beqz	a5,80005cd2 <virtual_instruction_7+0x2e8>
    80005cba:	6498                	ld	a4,8(s1)
    80005cbc:	47d9                	li	a5,22
    80005cbe:	00027597          	auipc	a1,0x27
    80005cc2:	62258593          	addi	a1,a1,1570 # 8002d2e0 <__func__.0+0x2c0>
    80005cc6:	00f70663          	beq	a4,a5,80005cd2 <virtual_instruction_7+0x2e8>
    80005cca:	00027597          	auipc	a1,0x27
    80005cce:	62658593          	addi	a1,a1,1574 # 8002d2f0 <__func__.0+0x2d0>
    80005cd2:	00027517          	auipc	a0,0x27
    80005cd6:	65e50513          	addi	a0,a0,1630 # 8002d330 <__func__.0+0x310>
    80005cda:	0e0250ef          	jal	8002adba <printf>
    80005cde:	0004b797          	auipc	a5,0x4b
    80005ce2:	3337c783          	lbu	a5,819(a5) # 80051011 <excpt+0x1>
    80005ce6:	c789                	beqz	a5,80005cf0 <virtual_instruction_7+0x306>
    80005ce8:	6498                	ld	a4,8(s1)
    80005cea:	47d9                	li	a5,22
    80005cec:	00f70c63          	beq	a4,a5,80005d04 <virtual_instruction_7+0x31a>
    80005cf0:	00027517          	auipc	a0,0x27
    80005cf4:	64850513          	addi	a0,a0,1608 # 8002d338 <__func__.0+0x318>
    80005cf8:	0c2250ef          	jal	8002adba <printf>
    80005cfc:	02900513          	li	a0,41
    80005d00:	5a9230ef          	jal	80029aa8 <putchar>
    80005d04:	4529                	li	a0,10
    80005d06:	5a3230ef          	jal	80029aa8 <putchar>
    80005d0a:	c801                	beqz	s0,80005d1a <virtual_instruction_7+0x330>
    80005d0c:	0004b797          	auipc	a5,0x4b
    80005d10:	3057c783          	lbu	a5,773(a5) # 80051011 <excpt+0x1>
    80005d14:	4401                	li	s0,0
    80005d16:	32079a63          	bnez	a5,8000604a <virtual_instruction_7+0x660>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005d1a:	4501                	li	a0,0
    80005d1c:	952fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005d20:	852fb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005d24:	37ab77b7          	lui	a5,0x37ab7
    80005d28:	078a                	slli	a5,a5,0x2
    80005d2a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005d2e:	4701                	li	a4,0
    80005d30:	62f74073          	.insn	4, 0x62f74073
    hsvb(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005d34:	648c                	ld	a1,8(s1)
    80005d36:	00028517          	auipc	a0,0x28
    80005d3a:	15250513          	addi	a0,a0,338 # 8002de88 <__func__.0+0xe68>
    80005d3e:	07c250ef          	jal	8002adba <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005d42:	08200593          	li	a1,130
    80005d46:	00028617          	auipc	a2,0x28
    80005d4a:	6da60613          	addi	a2,a2,1754 # 8002e420 <__func__.0+0x1400>
    80005d4e:	00027517          	auipc	a0,0x27
    80005d52:	5ca50513          	addi	a0,a0,1482 # 8002d318 <__func__.0+0x2f8>
    80005d56:	064250ef          	jal	8002adba <printf>
    80005d5a:	0004b797          	auipc	a5,0x4b
    80005d5e:	2b77c783          	lbu	a5,695(a5) # 80051011 <excpt+0x1>
    80005d62:	00027597          	auipc	a1,0x27
    80005d66:	58e58593          	addi	a1,a1,1422 # 8002d2f0 <__func__.0+0x2d0>
    80005d6a:	cf89                	beqz	a5,80005d84 <virtual_instruction_7+0x39a>
    80005d6c:	6498                	ld	a4,8(s1)
    80005d6e:	47d9                	li	a5,22
    80005d70:	00027597          	auipc	a1,0x27
    80005d74:	57058593          	addi	a1,a1,1392 # 8002d2e0 <__func__.0+0x2c0>
    80005d78:	00f70663          	beq	a4,a5,80005d84 <virtual_instruction_7+0x39a>
    80005d7c:	00027597          	auipc	a1,0x27
    80005d80:	57458593          	addi	a1,a1,1396 # 8002d2f0 <__func__.0+0x2d0>
    80005d84:	00027517          	auipc	a0,0x27
    80005d88:	5ac50513          	addi	a0,a0,1452 # 8002d330 <__func__.0+0x310>
    80005d8c:	02e250ef          	jal	8002adba <printf>
    80005d90:	0004b797          	auipc	a5,0x4b
    80005d94:	2817c783          	lbu	a5,641(a5) # 80051011 <excpt+0x1>
    80005d98:	c789                	beqz	a5,80005da2 <virtual_instruction_7+0x3b8>
    80005d9a:	6498                	ld	a4,8(s1)
    80005d9c:	47d9                	li	a5,22
    80005d9e:	00f70c63          	beq	a4,a5,80005db6 <virtual_instruction_7+0x3cc>
    80005da2:	00027517          	auipc	a0,0x27
    80005da6:	59650513          	addi	a0,a0,1430 # 8002d338 <__func__.0+0x318>
    80005daa:	010250ef          	jal	8002adba <printf>
    80005dae:	02900513          	li	a0,41
    80005db2:	4f7230ef          	jal	80029aa8 <putchar>
    80005db6:	4529                	li	a0,10
    80005db8:	4f1230ef          	jal	80029aa8 <putchar>
    80005dbc:	c801                	beqz	s0,80005dcc <virtual_instruction_7+0x3e2>
    80005dbe:	0004b797          	auipc	a5,0x4b
    80005dc2:	2537c783          	lbu	a5,595(a5) # 80051011 <excpt+0x1>
    80005dc6:	4401                	li	s0,0
    80005dc8:	26079c63          	bnez	a5,80006040 <virtual_instruction_7+0x656>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005dcc:	4501                	li	a0,0
    80005dce:	8a0fb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005dd2:	fa1fa0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005dd6:	37ab77b7          	lui	a5,0x37ab7
    80005dda:	078a                	slli	a5,a5,0x2
    80005ddc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005de0:	4701                	li	a4,0
    80005de2:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005de6:	648c                	ld	a1,8(s1)
    80005de8:	00028517          	auipc	a0,0x28
    80005dec:	0a050513          	addi	a0,a0,160 # 8002de88 <__func__.0+0xe68>
    80005df0:	7cb240ef          	jal	8002adba <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005df4:	08200593          	li	a1,130
    80005df8:	00028617          	auipc	a2,0x28
    80005dfc:	62860613          	addi	a2,a2,1576 # 8002e420 <__func__.0+0x1400>
    80005e00:	00027517          	auipc	a0,0x27
    80005e04:	51850513          	addi	a0,a0,1304 # 8002d318 <__func__.0+0x2f8>
    80005e08:	7b3240ef          	jal	8002adba <printf>
    80005e0c:	0004b797          	auipc	a5,0x4b
    80005e10:	2057c783          	lbu	a5,517(a5) # 80051011 <excpt+0x1>
    80005e14:	00027597          	auipc	a1,0x27
    80005e18:	4dc58593          	addi	a1,a1,1244 # 8002d2f0 <__func__.0+0x2d0>
    80005e1c:	cf89                	beqz	a5,80005e36 <virtual_instruction_7+0x44c>
    80005e1e:	6498                	ld	a4,8(s1)
    80005e20:	47d9                	li	a5,22
    80005e22:	00027597          	auipc	a1,0x27
    80005e26:	4be58593          	addi	a1,a1,1214 # 8002d2e0 <__func__.0+0x2c0>
    80005e2a:	00f70663          	beq	a4,a5,80005e36 <virtual_instruction_7+0x44c>
    80005e2e:	00027597          	auipc	a1,0x27
    80005e32:	4c258593          	addi	a1,a1,1218 # 8002d2f0 <__func__.0+0x2d0>
    80005e36:	00027517          	auipc	a0,0x27
    80005e3a:	4fa50513          	addi	a0,a0,1274 # 8002d330 <__func__.0+0x310>
    80005e3e:	77d240ef          	jal	8002adba <printf>
    80005e42:	0004b797          	auipc	a5,0x4b
    80005e46:	1cf7c783          	lbu	a5,463(a5) # 80051011 <excpt+0x1>
    80005e4a:	c789                	beqz	a5,80005e54 <virtual_instruction_7+0x46a>
    80005e4c:	6498                	ld	a4,8(s1)
    80005e4e:	47d9                	li	a5,22
    80005e50:	00f70c63          	beq	a4,a5,80005e68 <virtual_instruction_7+0x47e>
    80005e54:	00027517          	auipc	a0,0x27
    80005e58:	4e450513          	addi	a0,a0,1252 # 8002d338 <__func__.0+0x318>
    80005e5c:	75f240ef          	jal	8002adba <printf>
    80005e60:	02900513          	li	a0,41
    80005e64:	445230ef          	jal	80029aa8 <putchar>
    80005e68:	4529                	li	a0,10
    80005e6a:	43f230ef          	jal	80029aa8 <putchar>
    80005e6e:	c801                	beqz	s0,80005e7e <virtual_instruction_7+0x494>
    80005e70:	0004b797          	auipc	a5,0x4b
    80005e74:	1a17c783          	lbu	a5,417(a5) # 80051011 <excpt+0x1>
    80005e78:	4401                	li	s0,0
    80005e7a:	1e079263          	bnez	a5,8000605e <virtual_instruction_7+0x674>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005e7e:	4501                	li	a0,0
    80005e80:	feffa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005e84:	eeffa0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005e88:	37ab77b7          	lui	a5,0x37ab7
    80005e8c:	078a                	slli	a5,a5,0x2
    80005e8e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005e92:	4701                	li	a4,0
    80005e94:	6af74073          	.insn	4, 0x6af74073
    hsvw(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005e98:	648c                	ld	a1,8(s1)
    80005e9a:	00028517          	auipc	a0,0x28
    80005e9e:	fee50513          	addi	a0,a0,-18 # 8002de88 <__func__.0+0xe68>
    80005ea2:	719240ef          	jal	8002adba <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005ea6:	08200593          	li	a1,130
    80005eaa:	00028617          	auipc	a2,0x28
    80005eae:	57660613          	addi	a2,a2,1398 # 8002e420 <__func__.0+0x1400>
    80005eb2:	00027517          	auipc	a0,0x27
    80005eb6:	46650513          	addi	a0,a0,1126 # 8002d318 <__func__.0+0x2f8>
    80005eba:	701240ef          	jal	8002adba <printf>
    80005ebe:	0004b797          	auipc	a5,0x4b
    80005ec2:	1537c783          	lbu	a5,339(a5) # 80051011 <excpt+0x1>
    80005ec6:	00027597          	auipc	a1,0x27
    80005eca:	42a58593          	addi	a1,a1,1066 # 8002d2f0 <__func__.0+0x2d0>
    80005ece:	cf89                	beqz	a5,80005ee8 <virtual_instruction_7+0x4fe>
    80005ed0:	6498                	ld	a4,8(s1)
    80005ed2:	47d9                	li	a5,22
    80005ed4:	00027597          	auipc	a1,0x27
    80005ed8:	40c58593          	addi	a1,a1,1036 # 8002d2e0 <__func__.0+0x2c0>
    80005edc:	00f70663          	beq	a4,a5,80005ee8 <virtual_instruction_7+0x4fe>
    80005ee0:	00027597          	auipc	a1,0x27
    80005ee4:	41058593          	addi	a1,a1,1040 # 8002d2f0 <__func__.0+0x2d0>
    80005ee8:	00027517          	auipc	a0,0x27
    80005eec:	44850513          	addi	a0,a0,1096 # 8002d330 <__func__.0+0x310>
    80005ef0:	6cb240ef          	jal	8002adba <printf>
    80005ef4:	0004b797          	auipc	a5,0x4b
    80005ef8:	11d7c783          	lbu	a5,285(a5) # 80051011 <excpt+0x1>
    80005efc:	c789                	beqz	a5,80005f06 <virtual_instruction_7+0x51c>
    80005efe:	6498                	ld	a4,8(s1)
    80005f00:	47d9                	li	a5,22
    80005f02:	00f70c63          	beq	a4,a5,80005f1a <virtual_instruction_7+0x530>
    80005f06:	00027517          	auipc	a0,0x27
    80005f0a:	43250513          	addi	a0,a0,1074 # 8002d338 <__func__.0+0x318>
    80005f0e:	6ad240ef          	jal	8002adba <printf>
    80005f12:	02900513          	li	a0,41
    80005f16:	393230ef          	jal	80029aa8 <putchar>
    80005f1a:	4529                	li	a0,10
    80005f1c:	38d230ef          	jal	80029aa8 <putchar>
    80005f20:	c801                	beqz	s0,80005f30 <virtual_instruction_7+0x546>
    80005f22:	0004b797          	auipc	a5,0x4b
    80005f26:	0ef7c783          	lbu	a5,239(a5) # 80051011 <excpt+0x1>
    80005f2a:	4401                	li	s0,0
    80005f2c:	12079463          	bnez	a5,80006054 <virtual_instruction_7+0x66a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80005f30:	4501                	li	a0,0
    80005f32:	f3dfa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80005f36:	e3dfa0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80005f3a:	37ab77b7          	lui	a5,0x37ab7
    80005f3e:	078a                	slli	a5,a5,0x2
    80005f40:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80005f44:	4701                	li	a4,0
    80005f46:	66f74073          	.insn	4, 0x66f74073
    hsvh(0, 0xdeadbeef);
    printf("%d\n",excpt.cause);
    80005f4a:	648c                	ld	a1,8(s1)
    80005f4c:	00028517          	auipc	a0,0x28
    80005f50:	f3c50513          	addi	a0,a0,-196 # 8002de88 <__func__.0+0xe68>
    80005f54:	667240ef          	jal	8002adba <printf>

    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005f58:	08200593          	li	a1,130
    80005f5c:	00028617          	auipc	a2,0x28
    80005f60:	4c460613          	addi	a2,a2,1220 # 8002e420 <__func__.0+0x1400>
    80005f64:	00027517          	auipc	a0,0x27
    80005f68:	3b450513          	addi	a0,a0,948 # 8002d318 <__func__.0+0x2f8>
    80005f6c:	64f240ef          	jal	8002adba <printf>
    80005f70:	0004b797          	auipc	a5,0x4b
    80005f74:	0a17c783          	lbu	a5,161(a5) # 80051011 <excpt+0x1>
    80005f78:	00027597          	auipc	a1,0x27
    80005f7c:	37858593          	addi	a1,a1,888 # 8002d2f0 <__func__.0+0x2d0>
    80005f80:	cf89                	beqz	a5,80005f9a <virtual_instruction_7+0x5b0>
    80005f82:	6498                	ld	a4,8(s1)
    80005f84:	47d9                	li	a5,22
    80005f86:	00027597          	auipc	a1,0x27
    80005f8a:	35a58593          	addi	a1,a1,858 # 8002d2e0 <__func__.0+0x2c0>
    80005f8e:	00f70663          	beq	a4,a5,80005f9a <virtual_instruction_7+0x5b0>
    80005f92:	00027597          	auipc	a1,0x27
    80005f96:	35e58593          	addi	a1,a1,862 # 8002d2f0 <__func__.0+0x2d0>
    80005f9a:	00027517          	auipc	a0,0x27
    80005f9e:	39650513          	addi	a0,a0,918 # 8002d330 <__func__.0+0x310>
    80005fa2:	619240ef          	jal	8002adba <printf>
    80005fa6:	0004b797          	auipc	a5,0x4b
    80005faa:	06b7c783          	lbu	a5,107(a5) # 80051011 <excpt+0x1>
    80005fae:	c789                	beqz	a5,80005fb8 <virtual_instruction_7+0x5ce>
    80005fb0:	6498                	ld	a4,8(s1)
    80005fb2:	47d9                	li	a5,22
    80005fb4:	00f70c63          	beq	a4,a5,80005fcc <virtual_instruction_7+0x5e2>
    80005fb8:	00027517          	auipc	a0,0x27
    80005fbc:	38050513          	addi	a0,a0,896 # 8002d338 <__func__.0+0x318>
    80005fc0:	5fb240ef          	jal	8002adba <printf>
    80005fc4:	02900513          	li	a0,41
    80005fc8:	2e1230ef          	jal	80029aa8 <putchar>
    80005fcc:	4529                	li	a0,10
    80005fce:	2db230ef          	jal	80029aa8 <putchar>
    80005fd2:	c015                	beqz	s0,80005ff6 <virtual_instruction_7+0x60c>
    80005fd4:	0004b417          	auipc	s0,0x4b
    80005fd8:	03d44403          	lbu	s0,61(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 
    
    TEST_END();
    80005fdc:	00027597          	auipc	a1,0x27
    80005fe0:	31458593          	addi	a1,a1,788 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005fe4:	cc11                	beqz	s0,80006000 <virtual_instruction_7+0x616>
    80005fe6:	6498                	ld	a4,8(s1)
    80005fe8:	47d9                	li	a5,22
    TEST_END();
    80005fea:	00027597          	auipc	a1,0x27
    80005fee:	2f658593          	addi	a1,a1,758 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80005ff2:	00f70763          	beq	a4,a5,80006000 <virtual_instruction_7+0x616>
    80005ff6:	4401                	li	s0,0
    TEST_END();
    80005ff8:	00027597          	auipc	a1,0x27
    80005ffc:	2f858593          	addi	a1,a1,760 # 8002d2f0 <__func__.0+0x2d0>
    80006000:	00027517          	auipc	a0,0x27
    80006004:	39850513          	addi	a0,a0,920 # 8002d398 <__func__.0+0x378>
    80006008:	5b3240ef          	jal	8002adba <printf>
    8000600c:	4511                	li	a0,4
    8000600e:	e61fa0ef          	jal	80000e6e <goto_priv>
    80006012:	f78fb0ef          	jal	8000178a <reset_state>
}
    80006016:	60e2                	ld	ra,24(sp)
    80006018:	8522                	mv	a0,s0
    8000601a:	6442                	ld	s0,16(sp)
    8000601c:	64a2                	ld	s1,8(sp)
    8000601e:	6105                	addi	sp,sp,32
    80006020:	8082                	ret
    TEST_ASSERT("vu hlvbu leads to virtual instruction exception",
    80006022:	6480                	ld	s0,8(s1)
    80006024:	1429                	addi	s0,s0,-22
    80006026:	00143413          	seqz	s0,s0
    8000602a:	b60d                	j	80005b4c <virtual_instruction_7+0x162>
    TEST_ASSERT("vu hlvw leads to virtual instruction exception",
    8000602c:	6480                	ld	s0,8(s1)
    8000602e:	1429                	addi	s0,s0,-22
    80006030:	00143413          	seqz	s0,s0
    80006034:	b1b1                	j	80005c80 <virtual_instruction_7+0x296>
    TEST_ASSERT("vu hlvh leads to virtual instruction exception",
    80006036:	6480                	ld	s0,8(s1)
    80006038:	1429                	addi	s0,s0,-22
    8000603a:	00143413          	seqz	s0,s0
    8000603e:	b665                	j	80005be6 <virtual_instruction_7+0x1fc>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006040:	6480                	ld	s0,8(s1)
    80006042:	1429                	addi	s0,s0,-22
    80006044:	00143413          	seqz	s0,s0
    80006048:	b351                	j	80005dcc <virtual_instruction_7+0x3e2>
    TEST_ASSERT("vu hlvd leads to virtual instruction exception",
    8000604a:	6480                	ld	s0,8(s1)
    8000604c:	1429                	addi	s0,s0,-22
    8000604e:	00143413          	seqz	s0,s0
    80006052:	b1e1                	j	80005d1a <virtual_instruction_7+0x330>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    80006054:	6480                	ld	s0,8(s1)
    80006056:	1429                	addi	s0,s0,-22
    80006058:	00143413          	seqz	s0,s0
    8000605c:	bdd1                	j	80005f30 <virtual_instruction_7+0x546>
    TEST_ASSERT("vu hsvb leads to virtual instruction exception",
    8000605e:	6480                	ld	s0,8(s1)
    80006060:	1429                	addi	s0,s0,-22
    80006062:	00143413          	seqz	s0,s0
    80006066:	bd21                	j	80005e7e <virtual_instruction_7+0x494>

0000000080006068 <virtual_instruction_8>:

    ////////////////////////////////////////////////////////////////////////
//在mstatus.TW=0  时执行WFI   (即使允许执行WFI指令),或者执行S级监管级指令 (SRET或者SFENCE)   , 引发虚拟异常(在虚拟用户模式下，软件不应该 由执行这些监管模式指令的权限)
bool virtual_instruction_8() {
    80006068:	1101                	addi	sp,sp,-32

    TEST_START();
    8000606a:	00025597          	auipc	a1,0x25
    8000606e:	57e58593          	addi	a1,a1,1406 # 8002b5e8 <__func__.4>
    80006072:	00027517          	auipc	a0,0x27
    80006076:	28e50513          	addi	a0,a0,654 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_8() {
    8000607a:	ec06                	sd	ra,24(sp)
    8000607c:	e822                	sd	s0,16(sp)
    8000607e:	e426                	sd	s1,8(sp)
    TEST_START();
    80006080:	53b240ef          	jal	8002adba <printf>
    80006084:	4529                	li	a0,10
    80006086:	223230ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8000608a:	4511                	li	a0,4
    8000608c:	de3fa0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80006090:	004007b7          	lui	a5,0x400
    80006094:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80006098:	002007b7          	lui	a5,0x200
    8000609c:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    800060a0:	4501                	li	a0,0
    800060a2:	dcdfa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800060a6:	ccdfa0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800060aa:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    800060ae:	08200593          	li	a1,130
    800060b2:	00028617          	auipc	a2,0x28
    800060b6:	39e60613          	addi	a2,a2,926 # 8002e450 <__func__.0+0x1430>
    800060ba:	00027517          	auipc	a0,0x27
    800060be:	25e50513          	addi	a0,a0,606 # 8002d318 <__func__.0+0x2f8>
    800060c2:	4f9240ef          	jal	8002adba <printf>
    800060c6:	0004b797          	auipc	a5,0x4b
    800060ca:	f4b7c783          	lbu	a5,-181(a5) # 80051011 <excpt+0x1>
    800060ce:	0004b497          	auipc	s1,0x4b
    800060d2:	f4248493          	addi	s1,s1,-190 # 80051010 <excpt>
    800060d6:	00027597          	auipc	a1,0x27
    800060da:	21a58593          	addi	a1,a1,538 # 8002d2f0 <__func__.0+0x2d0>
    800060de:	cf89                	beqz	a5,800060f8 <virtual_instruction_8+0x90>
    800060e0:	6498                	ld	a4,8(s1)
    800060e2:	47d9                	li	a5,22
    800060e4:	00027597          	auipc	a1,0x27
    800060e8:	1fc58593          	addi	a1,a1,508 # 8002d2e0 <__func__.0+0x2c0>
    800060ec:	00f70663          	beq	a4,a5,800060f8 <virtual_instruction_8+0x90>
    800060f0:	00027597          	auipc	a1,0x27
    800060f4:	20058593          	addi	a1,a1,512 # 8002d2f0 <__func__.0+0x2d0>
    800060f8:	00027517          	auipc	a0,0x27
    800060fc:	23850513          	addi	a0,a0,568 # 8002d330 <__func__.0+0x310>
    80006100:	4bb240ef          	jal	8002adba <printf>
    80006104:	0004b797          	auipc	a5,0x4b
    80006108:	f0d7c783          	lbu	a5,-243(a5) # 80051011 <excpt+0x1>
    8000610c:	c789                	beqz	a5,80006116 <virtual_instruction_8+0xae>
    8000610e:	6498                	ld	a4,8(s1)
    80006110:	47d9                	li	a5,22
    80006112:	00f70c63          	beq	a4,a5,8000612a <virtual_instruction_8+0xc2>
    80006116:	00027517          	auipc	a0,0x27
    8000611a:	22250513          	addi	a0,a0,546 # 8002d338 <__func__.0+0x318>
    8000611e:	49d240ef          	jal	8002adba <printf>
    80006122:	02900513          	li	a0,41
    80006126:	183230ef          	jal	80029aa8 <putchar>
    8000612a:	4529                	li	a0,10
    8000612c:	17d230ef          	jal	80029aa8 <putchar>
    80006130:	0004b417          	auipc	s0,0x4b
    80006134:	ee144403          	lbu	s0,-287(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
 
    TEST_END();
    80006138:	00027597          	auipc	a1,0x27
    8000613c:	1b858593          	addi	a1,a1,440 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80006140:	cc11                	beqz	s0,8000615c <virtual_instruction_8+0xf4>
    80006142:	6498                	ld	a4,8(s1)
    80006144:	47d9                	li	a5,22
    TEST_END();
    80006146:	00027597          	auipc	a1,0x27
    8000614a:	19a58593          	addi	a1,a1,410 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    8000614e:	00f70763          	beq	a4,a5,8000615c <virtual_instruction_8+0xf4>
    80006152:	4401                	li	s0,0
    TEST_END();
    80006154:	00027597          	auipc	a1,0x27
    80006158:	19c58593          	addi	a1,a1,412 # 8002d2f0 <__func__.0+0x2d0>
    8000615c:	00027517          	auipc	a0,0x27
    80006160:	23c50513          	addi	a0,a0,572 # 8002d398 <__func__.0+0x378>
    80006164:	457240ef          	jal	8002adba <printf>
    80006168:	4511                	li	a0,4
    8000616a:	d05fa0ef          	jal	80000e6e <goto_priv>
    8000616e:	e1cfb0ef          	jal	8000178a <reset_state>
}
    80006172:	60e2                	ld	ra,24(sp)
    80006174:	8522                	mv	a0,s0
    80006176:	6442                	ld	s0,16(sp)
    80006178:	64a2                	ld	s1,8(sp)
    8000617a:	6105                	addi	sp,sp,32
    8000617c:	8082                	ret

000000008000617e <virtual_instruction_9>:
bool virtual_instruction_9() {
    8000617e:	1101                	addi	sp,sp,-32

    TEST_START();
    80006180:	00025597          	auipc	a1,0x25
    80006184:	48058593          	addi	a1,a1,1152 # 8002b600 <__func__.3>
    80006188:	00027517          	auipc	a0,0x27
    8000618c:	17850513          	addi	a0,a0,376 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_9() {
    80006190:	ec06                	sd	ra,24(sp)
    80006192:	e822                	sd	s0,16(sp)
    80006194:	e426                	sd	s1,8(sp)
    TEST_START();
    80006196:	425240ef          	jal	8002adba <printf>
    8000619a:	4529                	li	a0,10
    8000619c:	10d230ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    800061a0:	4511                	li	a0,4
    800061a2:	ccdfa0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800061a6:	002007b7          	lui	a5,0x200
    800061aa:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    800061ae:	4501                	li	a0,0
    800061b0:	cbffa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800061b4:	bbffa0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile ("sfence.vma \n\t");
    800061b8:	12000073          	sfence.vma
    sfence();
    
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    800061bc:	08200593          	li	a1,130
    800061c0:	00028617          	auipc	a2,0x28
    800061c4:	2d860613          	addi	a2,a2,728 # 8002e498 <__func__.0+0x1478>
    800061c8:	00027517          	auipc	a0,0x27
    800061cc:	15050513          	addi	a0,a0,336 # 8002d318 <__func__.0+0x2f8>
    800061d0:	3eb240ef          	jal	8002adba <printf>
    800061d4:	0004b797          	auipc	a5,0x4b
    800061d8:	e3d7c783          	lbu	a5,-451(a5) # 80051011 <excpt+0x1>
    800061dc:	0004b497          	auipc	s1,0x4b
    800061e0:	e3448493          	addi	s1,s1,-460 # 80051010 <excpt>
    800061e4:	00027597          	auipc	a1,0x27
    800061e8:	10c58593          	addi	a1,a1,268 # 8002d2f0 <__func__.0+0x2d0>
    800061ec:	cf89                	beqz	a5,80006206 <virtual_instruction_9+0x88>
    800061ee:	6498                	ld	a4,8(s1)
    800061f0:	47d9                	li	a5,22
    800061f2:	00027597          	auipc	a1,0x27
    800061f6:	0ee58593          	addi	a1,a1,238 # 8002d2e0 <__func__.0+0x2c0>
    800061fa:	00f70663          	beq	a4,a5,80006206 <virtual_instruction_9+0x88>
    800061fe:	00027597          	auipc	a1,0x27
    80006202:	0f258593          	addi	a1,a1,242 # 8002d2f0 <__func__.0+0x2d0>
    80006206:	00027517          	auipc	a0,0x27
    8000620a:	12a50513          	addi	a0,a0,298 # 8002d330 <__func__.0+0x310>
    8000620e:	3ad240ef          	jal	8002adba <printf>
    80006212:	0004b797          	auipc	a5,0x4b
    80006216:	dff7c783          	lbu	a5,-513(a5) # 80051011 <excpt+0x1>
    8000621a:	c789                	beqz	a5,80006224 <virtual_instruction_9+0xa6>
    8000621c:	6498                	ld	a4,8(s1)
    8000621e:	47d9                	li	a5,22
    80006220:	00f70c63          	beq	a4,a5,80006238 <virtual_instruction_9+0xba>
    80006224:	00027517          	auipc	a0,0x27
    80006228:	11450513          	addi	a0,a0,276 # 8002d338 <__func__.0+0x318>
    8000622c:	38f240ef          	jal	8002adba <printf>
    80006230:	02900513          	li	a0,41
    80006234:	075230ef          	jal	80029aa8 <putchar>
    80006238:	4529                	li	a0,10
    8000623a:	06f230ef          	jal	80029aa8 <putchar>
    8000623e:	0004b417          	auipc	s0,0x4b
    80006242:	dd344403          	lbu	s0,-557(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    80006246:	00027597          	auipc	a1,0x27
    8000624a:	0aa58593          	addi	a1,a1,170 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    8000624e:	cc11                	beqz	s0,8000626a <virtual_instruction_9+0xec>
    80006250:	6498                	ld	a4,8(s1)
    80006252:	47d9                	li	a5,22
    TEST_END();
    80006254:	00027597          	auipc	a1,0x27
    80006258:	08c58593          	addi	a1,a1,140 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu sfence leads to virtual instruction exception when mstatus.TW=0",
    8000625c:	00f70763          	beq	a4,a5,8000626a <virtual_instruction_9+0xec>
    80006260:	4401                	li	s0,0
    TEST_END();
    80006262:	00027597          	auipc	a1,0x27
    80006266:	08e58593          	addi	a1,a1,142 # 8002d2f0 <__func__.0+0x2d0>
    8000626a:	00027517          	auipc	a0,0x27
    8000626e:	12e50513          	addi	a0,a0,302 # 8002d398 <__func__.0+0x378>
    80006272:	349240ef          	jal	8002adba <printf>
    80006276:	4511                	li	a0,4
    80006278:	bf7fa0ef          	jal	80000e6e <goto_priv>
    8000627c:	d0efb0ef          	jal	8000178a <reset_state>
}
    80006280:	60e2                	ld	ra,24(sp)
    80006282:	8522                	mv	a0,s0
    80006284:	6442                	ld	s0,16(sp)
    80006286:	64a2                	ld	s1,8(sp)
    80006288:	6105                	addi	sp,sp,32
    8000628a:	8082                	ret

000000008000628c <virtual_instruction_10>:
bool virtual_instruction_10() {
    8000628c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000628e:	00025597          	auipc	a1,0x25
    80006292:	38a58593          	addi	a1,a1,906 # 8002b618 <__func__.2>
    80006296:	00027517          	auipc	a0,0x27
    8000629a:	06a50513          	addi	a0,a0,106 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_10() {
    8000629e:	ec06                	sd	ra,24(sp)
    800062a0:	e822                	sd	s0,16(sp)
    800062a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800062a4:	317240ef          	jal	8002adba <printf>
    800062a8:	4529                	li	a0,10
    800062aa:	7fe230ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_M);
    800062ae:	4511                	li	a0,4
    800062b0:	bbffa0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);
    800062b4:	002007b7          	lui	a5,0x200
    800062b8:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    800062bc:	3007b073          	csrc	mstatus,a5
    
    goto_priv(PRIV_VU);
    800062c0:	4501                	li	a0,0
    800062c2:	badfa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800062c6:	aadfa0ef          	jal	80000d72 <test_setup_except_function>
        :: "r"(value), "r"(addr) : "memory");
    return value;
}

static inline void wfi() {
    asm ("wfi" ::: "memory");
    800062ca:	10500073          	wfi
    wfi();
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    800062ce:	08200593          	li	a1,130
    800062d2:	00028617          	auipc	a2,0x28
    800062d6:	20e60613          	addi	a2,a2,526 # 8002e4e0 <__func__.0+0x14c0>
    800062da:	00027517          	auipc	a0,0x27
    800062de:	03e50513          	addi	a0,a0,62 # 8002d318 <__func__.0+0x2f8>
    800062e2:	2d9240ef          	jal	8002adba <printf>
    800062e6:	0004b797          	auipc	a5,0x4b
    800062ea:	d2b7c783          	lbu	a5,-725(a5) # 80051011 <excpt+0x1>
    800062ee:	0004b497          	auipc	s1,0x4b
    800062f2:	d2248493          	addi	s1,s1,-734 # 80051010 <excpt>
    800062f6:	00027597          	auipc	a1,0x27
    800062fa:	ffa58593          	addi	a1,a1,-6 # 8002d2f0 <__func__.0+0x2d0>
    800062fe:	cf89                	beqz	a5,80006318 <virtual_instruction_10+0x8c>
    80006300:	6498                	ld	a4,8(s1)
    80006302:	47d9                	li	a5,22
    80006304:	00027597          	auipc	a1,0x27
    80006308:	fdc58593          	addi	a1,a1,-36 # 8002d2e0 <__func__.0+0x2c0>
    8000630c:	00f70663          	beq	a4,a5,80006318 <virtual_instruction_10+0x8c>
    80006310:	00027597          	auipc	a1,0x27
    80006314:	fe058593          	addi	a1,a1,-32 # 8002d2f0 <__func__.0+0x2d0>
    80006318:	00027517          	auipc	a0,0x27
    8000631c:	01850513          	addi	a0,a0,24 # 8002d330 <__func__.0+0x310>
    80006320:	29b240ef          	jal	8002adba <printf>
    80006324:	0004b797          	auipc	a5,0x4b
    80006328:	ced7c783          	lbu	a5,-787(a5) # 80051011 <excpt+0x1>
    8000632c:	c789                	beqz	a5,80006336 <virtual_instruction_10+0xaa>
    8000632e:	6498                	ld	a4,8(s1)
    80006330:	47d9                	li	a5,22
    80006332:	00f70c63          	beq	a4,a5,8000634a <virtual_instruction_10+0xbe>
    80006336:	00027517          	auipc	a0,0x27
    8000633a:	00250513          	addi	a0,a0,2 # 8002d338 <__func__.0+0x318>
    8000633e:	27d240ef          	jal	8002adba <printf>
    80006342:	02900513          	li	a0,41
    80006346:	762230ef          	jal	80029aa8 <putchar>
    8000634a:	4529                	li	a0,10
    8000634c:	75c230ef          	jal	80029aa8 <putchar>
    80006350:	0004b417          	auipc	s0,0x4b
    80006354:	cc144403          	lbu	s0,-831(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  

    TEST_END();
    80006358:	00027597          	auipc	a1,0x27
    8000635c:	f9858593          	addi	a1,a1,-104 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    80006360:	cc11                	beqz	s0,8000637c <virtual_instruction_10+0xf0>
    80006362:	6498                	ld	a4,8(s1)
    80006364:	47d9                	li	a5,22
    TEST_END();
    80006366:	00027597          	auipc	a1,0x27
    8000636a:	f7a58593          	addi	a1,a1,-134 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu wfi leads to virtual instruction exception when vtw=1 and tw=0",
    8000636e:	00f70763          	beq	a4,a5,8000637c <virtual_instruction_10+0xf0>
    80006372:	4401                	li	s0,0
    TEST_END();
    80006374:	00027597          	auipc	a1,0x27
    80006378:	f7c58593          	addi	a1,a1,-132 # 8002d2f0 <__func__.0+0x2d0>
    8000637c:	00027517          	auipc	a0,0x27
    80006380:	01c50513          	addi	a0,a0,28 # 8002d398 <__func__.0+0x378>
    80006384:	237240ef          	jal	8002adba <printf>
    80006388:	4511                	li	a0,4
    8000638a:	ae5fa0ef          	jal	80000e6e <goto_priv>
    8000638e:	bfcfb0ef          	jal	8000178a <reset_state>
}
    80006392:	60e2                	ld	ra,24(sp)
    80006394:	8522                	mv	a0,s0
    80006396:	6442                	ld	s0,16(sp)
    80006398:	64a2                	ld	s1,8(sp)
    8000639a:	6105                	addi	sp,sp,32
    8000639c:	8082                	ret

000000008000639e <virtual_instruction_11>:
    ////////////////////////////////////////////////////////////////////////

bool virtual_instruction_11() {
    8000639e:	1101                	addi	sp,sp,-32

    TEST_START();    
    800063a0:	00025597          	auipc	a1,0x25
    800063a4:	29058593          	addi	a1,a1,656 # 8002b630 <__func__.1>
    800063a8:	00027517          	auipc	a0,0x27
    800063ac:	f5850513          	addi	a0,a0,-168 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_11() {
    800063b0:	ec06                	sd	ra,24(sp)
    800063b2:	e822                	sd	s0,16(sp)
    800063b4:	e426                	sd	s1,8(sp)
    TEST_START();    
    800063b6:	205240ef          	jal	8002adba <printf>
    800063ba:	4529                	li	a0,10
    800063bc:	6ec230ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    800063c0:	4511                	li	a0,4
    800063c2:	aadfa0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HSTATUS, HSTATUS_VTVM);
    800063c6:	001007b7          	lui	a5,0x100
    800063ca:	6007b073          	csrc	hstatus,a5
    CSRC(CSR_HSTATUS, MSTATUS_TVM);
    800063ce:	6007b073          	csrc	hstatus,a5
    goto_priv(PRIV_VU);
    800063d2:	4501                	li	a0,0
    800063d4:	a9bfa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800063d8:	99bfa0ef          	jal	80000d72 <test_setup_except_function>
    CSRS(CSR_VSIE,1ULL << 1);
    800063dc:	20416073          	csrsi	vsie,2
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    800063e0:	08200593          	li	a1,130
    800063e4:	00028617          	auipc	a2,0x28
    800063e8:	14460613          	addi	a2,a2,324 # 8002e528 <__func__.0+0x1508>
    800063ec:	00027517          	auipc	a0,0x27
    800063f0:	f2c50513          	addi	a0,a0,-212 # 8002d318 <__func__.0+0x2f8>
    800063f4:	1c7240ef          	jal	8002adba <printf>
    800063f8:	0004b797          	auipc	a5,0x4b
    800063fc:	c197c783          	lbu	a5,-999(a5) # 80051011 <excpt+0x1>
    80006400:	0004b497          	auipc	s1,0x4b
    80006404:	c1048493          	addi	s1,s1,-1008 # 80051010 <excpt>
    80006408:	00027597          	auipc	a1,0x27
    8000640c:	ee858593          	addi	a1,a1,-280 # 8002d2f0 <__func__.0+0x2d0>
    80006410:	cf89                	beqz	a5,8000642a <virtual_instruction_11+0x8c>
    80006412:	6498                	ld	a4,8(s1)
    80006414:	47d9                	li	a5,22
    80006416:	00027597          	auipc	a1,0x27
    8000641a:	eca58593          	addi	a1,a1,-310 # 8002d2e0 <__func__.0+0x2c0>
    8000641e:	00f70663          	beq	a4,a5,8000642a <virtual_instruction_11+0x8c>
    80006422:	00027597          	auipc	a1,0x27
    80006426:	ece58593          	addi	a1,a1,-306 # 8002d2f0 <__func__.0+0x2d0>
    8000642a:	00027517          	auipc	a0,0x27
    8000642e:	f0650513          	addi	a0,a0,-250 # 8002d330 <__func__.0+0x310>
    80006432:	189240ef          	jal	8002adba <printf>
    80006436:	0004b797          	auipc	a5,0x4b
    8000643a:	bdb7c783          	lbu	a5,-1061(a5) # 80051011 <excpt+0x1>
    8000643e:	c789                	beqz	a5,80006448 <virtual_instruction_11+0xaa>
    80006440:	6498                	ld	a4,8(s1)
    80006442:	47d9                	li	a5,22
    80006444:	00f70c63          	beq	a4,a5,8000645c <virtual_instruction_11+0xbe>
    80006448:	00027517          	auipc	a0,0x27
    8000644c:	ef050513          	addi	a0,a0,-272 # 8002d338 <__func__.0+0x318>
    80006450:	16b240ef          	jal	8002adba <printf>
    80006454:	02900513          	li	a0,41
    80006458:	650230ef          	jal	80029aa8 <putchar>
    8000645c:	4529                	li	a0,10
    8000645e:	64a230ef          	jal	80029aa8 <putchar>
    80006462:	0004b417          	auipc	s0,0x4b
    80006466:	baf44403          	lbu	s0,-1105(s0) # 80051011 <excpt+0x1>
    //     excpt.cause == CAUSE_VRTI
    // );      



    TEST_END(); 
    8000646a:	00027597          	auipc	a1,0x27
    8000646e:	e8658593          	addi	a1,a1,-378 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006472:	cc11                	beqz	s0,8000648e <virtual_instruction_11+0xf0>
    80006474:	6498                	ld	a4,8(s1)
    80006476:	47d9                	li	a5,22
    TEST_END(); 
    80006478:	00027597          	auipc	a1,0x27
    8000647c:	e6858593          	addi	a1,a1,-408 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access vs level CSR low part leads to virtual instruction exception when mstatus_TVM=0",
    80006480:	00f70763          	beq	a4,a5,8000648e <virtual_instruction_11+0xf0>
    80006484:	4401                	li	s0,0
    TEST_END(); 
    80006486:	00027597          	auipc	a1,0x27
    8000648a:	e6a58593          	addi	a1,a1,-406 # 8002d2f0 <__func__.0+0x2d0>
    8000648e:	00027517          	auipc	a0,0x27
    80006492:	f0a50513          	addi	a0,a0,-246 # 8002d398 <__func__.0+0x378>
    80006496:	125240ef          	jal	8002adba <printf>
    8000649a:	4511                	li	a0,4
    8000649c:	9d3fa0ef          	jal	80000e6e <goto_priv>
    800064a0:	aeafb0ef          	jal	8000178a <reset_state>
}
    800064a4:	60e2                	ld	ra,24(sp)
    800064a6:	8522                	mv	a0,s0
    800064a8:	6442                	ld	s0,16(sp)
    800064aa:	64a2                	ld	s1,8(sp)
    800064ac:	6105                	addi	sp,sp,32
    800064ae:	8082                	ret

00000000800064b0 <virtual_instruction_12>:

bool virtual_instruction_12() {
    800064b0:	1101                	addi	sp,sp,-32

    TEST_START();
    800064b2:	00025597          	auipc	a1,0x25
    800064b6:	19658593          	addi	a1,a1,406 # 8002b648 <__func__.0>
    800064ba:	00027517          	auipc	a0,0x27
    800064be:	e4650513          	addi	a0,a0,-442 # 8002d300 <__func__.0+0x2e0>
bool virtual_instruction_12() {
    800064c2:	ec06                	sd	ra,24(sp)
    800064c4:	e822                	sd	s0,16(sp)
    800064c6:	e426                	sd	s1,8(sp)
    TEST_START();
    800064c8:	0f3240ef          	jal	8002adba <printf>
    800064cc:	4529                	li	a0,10
    800064ce:	5da230ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_VU);
    800064d2:	4501                	li	a0,0
    800064d4:	99bfa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800064d8:	89bfa0ef          	jal	80000d72 <test_setup_except_function>

    CSRR(CSR_SATP);
    800064dc:	180027f3          	csrr	a5,satp
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    800064e0:	08200593          	li	a1,130
    800064e4:	00028617          	auipc	a2,0x28
    800064e8:	0a460613          	addi	a2,a2,164 # 8002e588 <__func__.0+0x1568>
    800064ec:	00027517          	auipc	a0,0x27
    800064f0:	e2c50513          	addi	a0,a0,-468 # 8002d318 <__func__.0+0x2f8>
    800064f4:	0c7240ef          	jal	8002adba <printf>
    800064f8:	0004b797          	auipc	a5,0x4b
    800064fc:	b197c783          	lbu	a5,-1255(a5) # 80051011 <excpt+0x1>
    80006500:	0004b497          	auipc	s1,0x4b
    80006504:	b1048493          	addi	s1,s1,-1264 # 80051010 <excpt>
    80006508:	00027597          	auipc	a1,0x27
    8000650c:	de858593          	addi	a1,a1,-536 # 8002d2f0 <__func__.0+0x2d0>
    80006510:	cf89                	beqz	a5,8000652a <virtual_instruction_12+0x7a>
    80006512:	6498                	ld	a4,8(s1)
    80006514:	47d9                	li	a5,22
    80006516:	00027597          	auipc	a1,0x27
    8000651a:	dca58593          	addi	a1,a1,-566 # 8002d2e0 <__func__.0+0x2c0>
    8000651e:	00f70663          	beq	a4,a5,8000652a <virtual_instruction_12+0x7a>
    80006522:	00027597          	auipc	a1,0x27
    80006526:	dce58593          	addi	a1,a1,-562 # 8002d2f0 <__func__.0+0x2d0>
    8000652a:	00027517          	auipc	a0,0x27
    8000652e:	e0650513          	addi	a0,a0,-506 # 8002d330 <__func__.0+0x310>
    80006532:	089240ef          	jal	8002adba <printf>
    80006536:	0004b797          	auipc	a5,0x4b
    8000653a:	adb7c783          	lbu	a5,-1317(a5) # 80051011 <excpt+0x1>
    8000653e:	c789                	beqz	a5,80006548 <virtual_instruction_12+0x98>
    80006540:	6498                	ld	a4,8(s1)
    80006542:	47d9                	li	a5,22
    80006544:	00f70c63          	beq	a4,a5,8000655c <virtual_instruction_12+0xac>
    80006548:	00027517          	auipc	a0,0x27
    8000654c:	df050513          	addi	a0,a0,-528 # 8002d338 <__func__.0+0x318>
    80006550:	06b240ef          	jal	8002adba <printf>
    80006554:	02900513          	li	a0,41
    80006558:	550230ef          	jal	80029aa8 <putchar>
    8000655c:	4529                	li	a0,10
    8000655e:	54a230ef          	jal	80029aa8 <putchar>
    80006562:	0004b417          	auipc	s0,0x4b
    80006566:	aaf44403          	lbu	s0,-1361(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    8000656a:	00027597          	auipc	a1,0x27
    8000656e:	d8658593          	addi	a1,a1,-634 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    80006572:	cc11                	beqz	s0,8000658e <virtual_instruction_12+0xde>
    80006574:	6498                	ld	a4,8(s1)
    80006576:	47d9                	li	a5,22
    TEST_END();
    80006578:	00027597          	auipc	a1,0x27
    8000657c:	d6858593          	addi	a1,a1,-664 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode access satp leads to virtual instruction exception",
    80006580:	00f70763          	beq	a4,a5,8000658e <virtual_instruction_12+0xde>
    80006584:	4401                	li	s0,0
    TEST_END();
    80006586:	00027597          	auipc	a1,0x27
    8000658a:	d6a58593          	addi	a1,a1,-662 # 8002d2f0 <__func__.0+0x2d0>
    8000658e:	00027517          	auipc	a0,0x27
    80006592:	e0a50513          	addi	a0,a0,-502 # 8002d398 <__func__.0+0x378>
    80006596:	025240ef          	jal	8002adba <printf>
    8000659a:	4511                	li	a0,4
    8000659c:	8d3fa0ef          	jal	80000e6e <goto_priv>
    800065a0:	9eafb0ef          	jal	8000178a <reset_state>
}
    800065a4:	60e2                	ld	ra,24(sp)
    800065a6:	8522                	mv	a0,s0
    800065a8:	6442                	ld	s0,16(sp)
    800065aa:	64a2                	ld	s1,8(sp)
    800065ac:	6105                	addi	sp,sp,32
    800065ae:	8082                	ret

00000000800065b0 <hfence_test>:
#include <rvh_test.h>
#include <page_tables.h> 

bool hfence_test() {
    800065b0:	7179                	addi	sp,sp,-48

    TEST_START();
    800065b2:	00025597          	auipc	a1,0x25
    800065b6:	0ae58593          	addi	a1,a1,174 # 8002b660 <__func__.2>
    800065ba:	00027517          	auipc	a0,0x27
    800065be:	d4650513          	addi	a0,a0,-698 # 8002d300 <__func__.0+0x2e0>
bool hfence_test() {
    800065c2:	f406                	sd	ra,40(sp)
    800065c4:	ec26                	sd	s1,24(sp)
    800065c6:	f022                	sd	s0,32(sp)
    800065c8:	e84a                	sd	s2,16(sp)
    800065ca:	e44e                	sd	s3,8(sp)
    TEST_START();
    800065cc:	7ee240ef          	jal	8002adba <printf>
    800065d0:	4529                	li	a0,10
    800065d2:	4d6230ef          	jal	80029aa8 <putchar>
    800065d6:	00032617          	auipc	a2,0x32
    800065da:	2d263603          	ld	a2,722(a2) # 800388a8 <__func__.0+0xb888>
    800065de:	00032697          	auipc	a3,0x32
    800065e2:	2d26b683          	ld	a3,722(a3) # 800388b0 <__func__.0+0xb890>
    800065e6:	2201b737          	lui	a4,0x2201b
    800065ea:	000887b7          	lui	a5,0x88
    800065ee:	070a                	slli	a4,a4,0x2
    800065f0:	06d78793          	addi	a5,a5,109 # 8806d <_test_table_size+0x8806c>
    800065f4:	e310                	sd	a2,0(a4)
    800065f6:	07b2                	slli	a5,a5,0xc
    800065f8:	e394                	sd	a3,0(a5)
    write64(phys_page_base(SWITCH1), 0x111111111);
    write64(phys_page_base(SWITCH2), 0x222222222);

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    800065fa:	450d                	li	a0,3
    800065fc:	873fa0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80006600:	4509                	li	a0,2
    asm volatile(
    80006602:	4001b4b7          	lui	s1,0x4001b
    80006606:	f88fa0ef          	jal	80000d8e <set_prev_priv>
    8000660a:	048a                	slli	s1,s1,0x2
    hpt_init();
    8000660c:	b70fa0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80006610:	912fa0ef          	jal	80000722 <vspt_init>
    80006614:	6c04c9f3          	.insn	4, 0x6c04c9f3
    vaddr = vs_page_base(SWITCH1);

    val = hlvd(vaddr);
    cond = true;
    vspt_switch();
    80006618:	f02fa0ef          	jal	80000d1a <vspt_switch>
    8000661c:	6c04c473          	.insn	4, 0x6c04c473
    asm volatile(
    80006620:	22000073          	.insn	4, 0x22000073
    asm volatile(
    80006624:	6c04c7f3          	.insn	4, 0x6c04c7f3
    cond &= hlvd(vaddr) == val;
    80006628:	41340433          	sub	s0,s0,s3
    hfence_vvma();
    cond &= hlvd(vaddr) != val;
    8000662c:	413787b3          	sub	a5,a5,s3
    80006630:	00f037b3          	snez	a5,a5
    80006634:	00143413          	seqz	s0,s0
    80006638:	8c7d                	and	s0,s0,a5
    hpt_switch();
    8000663a:	f02fa0ef          	jal	80000d3c <hpt_switch>
    8000663e:	6c04c973          	.insn	4, 0x6c04c973
    asm volatile(
    80006642:	62000073          	.insn	4, 0x62000073
    asm volatile(
    80006646:	6c04c4f3          	.insn	4, 0x6c04c4f3
    cond &= hlvd(vaddr) != val;
    8000664a:	41390933          	sub	s2,s2,s3
    8000664e:	01203933          	snez	s2,s2
    hfence_gvma();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    80006652:	00028617          	auipc	a2,0x28
    80006656:	f7660613          	addi	a2,a2,-138 # 8002e5c8 <__func__.0+0x15a8>
    8000665a:	08200593          	li	a1,130
    8000665e:	00027517          	auipc	a0,0x27
    80006662:	cba50513          	addi	a0,a0,-838 # 8002d318 <__func__.0+0x2f8>
    80006666:	01247433          	and	s0,s0,s2
    8000666a:	750240ef          	jal	8002adba <printf>
    8000666e:	12040863          	beqz	s0,8000679e <hfence_test+0x1ee>
    80006672:	13349663          	bne	s1,s3,8000679e <hfence_test+0x1ee>
    80006676:	00027597          	auipc	a1,0x27
    8000667a:	c6a58593          	addi	a1,a1,-918 # 8002d2e0 <__func__.0+0x2c0>
    8000667e:	00027517          	auipc	a0,0x27
    80006682:	cb250513          	addi	a0,a0,-846 # 8002d330 <__func__.0+0x310>
    80006686:	734240ef          	jal	8002adba <printf>
    8000668a:	4529                	li	a0,10
    8000668c:	41c230ef          	jal	80029aa8 <putchar>
    80006690:	4485                	li	s1,1

    //////////////////////////////////////////////////////////////////////

    goto_priv(PRIV_HS);
    80006692:	450d                	li	a0,3
    80006694:	4001b437          	lui	s0,0x4001b
    80006698:	fd6fa0ef          	jal	80000e6e <goto_priv>
    8000669c:	040a                	slli	s0,s0,0x2
    8000669e:	6c044973          	.insn	4, 0x6c044973
    val = hlvd(vaddr);
    cond = true;
    hpt_switch();
    800066a2:	e9afa0ef          	jal	80000d3c <hpt_switch>
    asm volatile ("sfence.vma \n\t");
    800066a6:	12000073          	sfence.vma
    asm volatile(
    800066aa:	6c044473          	.insn	4, 0x6c044473
    sfence();
    cond &= hlvd(vaddr) == val;
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    800066ae:	00028617          	auipc	a2,0x28
    800066b2:	f4a60613          	addi	a2,a2,-182 # 8002e5f8 <__func__.0+0x15d8>
    800066b6:	08200593          	li	a1,130
    800066ba:	00027517          	auipc	a0,0x27
    800066be:	c5e50513          	addi	a0,a0,-930 # 8002d318 <__func__.0+0x2f8>
    800066c2:	6f8240ef          	jal	8002adba <printf>
    800066c6:	13240963          	beq	s0,s2,800067f8 <hfence_test+0x248>
    800066ca:	00027597          	auipc	a1,0x27
    800066ce:	c2658593          	addi	a1,a1,-986 # 8002d2f0 <__func__.0+0x2d0>
    800066d2:	00027517          	auipc	a0,0x27
    800066d6:	c5e50513          	addi	a0,a0,-930 # 8002d330 <__func__.0+0x310>
    800066da:	6e0240ef          	jal	8002adba <printf>
    800066de:	00027517          	auipc	a0,0x27
    800066e2:	c5a50513          	addi	a0,a0,-934 # 8002d338 <__func__.0+0x318>
    800066e6:	6d4240ef          	jal	8002adba <printf>
    800066ea:	02900513          	li	a0,41
    800066ee:	3ba230ef          	jal	80029aa8 <putchar>
    800066f2:	4529                	li	a0,10
    800066f4:	3b4230ef          	jal	80029aa8 <putchar>
    800066f8:	4481                	li	s1,0
    return *((volatile uint64_t*) addr);
    800066fa:	4001b437          	lui	s0,0x4001b

    //////////////////////////////////////////////////////////////////////  

    goto_priv(PRIV_HS);
    800066fe:	450d                	li	a0,3
    80006700:	040a                	slli	s0,s0,0x2
    80006702:	f6cfa0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80006706:	edbf90ef          	jal	800005e0 <hspt_init>
    8000670a:	00043903          	ld	s2,0(s0) # 4001b000 <STACK_SIZE+0x3ff1b000>
    vaddr = hs_page_base(SWITCH1);
    val = read64(vaddr);
    cond = true;

    hspt_switch();
    8000670e:	deafa0ef          	jal	80000cf8 <hspt_switch>
    goto_priv(PRIV_VS);
    80006712:	4509                	li	a0,2
    80006714:	f5afa0ef          	jal	80000e6e <goto_priv>
    asm volatile ("sfence.vma \n\t");
    80006718:	12000073          	sfence.vma
    sfence();
    goto_priv(PRIV_HS);
    8000671c:	450d                	li	a0,3
    8000671e:	f50fa0ef          	jal	80000e6e <goto_priv>
    80006722:	6000                	ld	s0,0(s0)
    cond &= read64(vaddr) == val;
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    80006724:	00028617          	auipc	a2,0x28
    80006728:	f0c60613          	addi	a2,a2,-244 # 8002e630 <__func__.0+0x1610>
    8000672c:	08200593          	li	a1,130
    80006730:	00027517          	auipc	a0,0x27
    80006734:	be850513          	addi	a0,a0,-1048 # 8002d318 <__func__.0+0x2f8>
    80006738:	682240ef          	jal	8002adba <printf>
    8000673c:	09240a63          	beq	s0,s2,800067d0 <hfence_test+0x220>
    80006740:	00027597          	auipc	a1,0x27
    80006744:	bb058593          	addi	a1,a1,-1104 # 8002d2f0 <__func__.0+0x2d0>
    80006748:	00027517          	auipc	a0,0x27
    8000674c:	be850513          	addi	a0,a0,-1048 # 8002d330 <__func__.0+0x310>
    80006750:	66a240ef          	jal	8002adba <printf>
    80006754:	00027517          	auipc	a0,0x27
    80006758:	be450513          	addi	a0,a0,-1052 # 8002d338 <__func__.0+0x318>
    8000675c:	65e240ef          	jal	8002adba <printf>
    80006760:	02900513          	li	a0,41
    80006764:	344230ef          	jal	80029aa8 <putchar>
    80006768:	4529                	li	a0,10
    8000676a:	33e230ef          	jal	80029aa8 <putchar>
    8000676e:	4401                	li	s0,0

    //////////////////////////////////////////////////////////////////////


    
    TEST_END();
    80006770:	00027597          	auipc	a1,0x27
    80006774:	b8058593          	addi	a1,a1,-1152 # 8002d2f0 <__func__.0+0x2d0>
    80006778:	00027517          	auipc	a0,0x27
    8000677c:	c2050513          	addi	a0,a0,-992 # 8002d398 <__func__.0+0x378>
    80006780:	63a240ef          	jal	8002adba <printf>
    80006784:	4511                	li	a0,4
    80006786:	ee8fa0ef          	jal	80000e6e <goto_priv>
    8000678a:	800fb0ef          	jal	8000178a <reset_state>
    8000678e:	70a2                	ld	ra,40(sp)
    80006790:	8522                	mv	a0,s0
    80006792:	7402                	ld	s0,32(sp)
    80006794:	64e2                	ld	s1,24(sp)
    80006796:	6942                	ld	s2,16(sp)
    80006798:	69a2                	ld	s3,8(sp)
    8000679a:	6145                	addi	sp,sp,48
    8000679c:	8082                	ret
    TEST_ASSERT("hfences correctly invalidate guest tlb entries", cond);
    8000679e:	00027597          	auipc	a1,0x27
    800067a2:	b5258593          	addi	a1,a1,-1198 # 8002d2f0 <__func__.0+0x2d0>
    800067a6:	00027517          	auipc	a0,0x27
    800067aa:	b8a50513          	addi	a0,a0,-1142 # 8002d330 <__func__.0+0x310>
    800067ae:	60c240ef          	jal	8002adba <printf>
    800067b2:	00027517          	auipc	a0,0x27
    800067b6:	b8650513          	addi	a0,a0,-1146 # 8002d338 <__func__.0+0x318>
    800067ba:	600240ef          	jal	8002adba <printf>
    800067be:	02900513          	li	a0,41
    800067c2:	2e6230ef          	jal	80029aa8 <putchar>
    800067c6:	4529                	li	a0,10
    800067c8:	2e0230ef          	jal	80029aa8 <putchar>
    800067cc:	4481                	li	s1,0
    800067ce:	b5d1                	j	80006692 <hfence_test+0xe2>
    TEST_ASSERT("vs sfence doest not affect hypervisor level tlb entries", cond);
    800067d0:	00027597          	auipc	a1,0x27
    800067d4:	b1058593          	addi	a1,a1,-1264 # 8002d2e0 <__func__.0+0x2c0>
    800067d8:	00027517          	auipc	a0,0x27
    800067dc:	b5850513          	addi	a0,a0,-1192 # 8002d330 <__func__.0+0x310>
    800067e0:	5da240ef          	jal	8002adba <printf>
    800067e4:	4529                	li	a0,10
    800067e6:	2c2230ef          	jal	80029aa8 <putchar>
    800067ea:	d0d1                	beqz	s1,8000676e <hfence_test+0x1be>
    800067ec:	4405                	li	s0,1
    TEST_END();
    800067ee:	00027597          	auipc	a1,0x27
    800067f2:	af258593          	addi	a1,a1,-1294 # 8002d2e0 <__func__.0+0x2c0>
    800067f6:	b749                	j	80006778 <hfence_test+0x1c8>
    TEST_ASSERT("hs sfence doest not affect guest level tlb entries", cond);
    800067f8:	00027597          	auipc	a1,0x27
    800067fc:	ae858593          	addi	a1,a1,-1304 # 8002d2e0 <__func__.0+0x2c0>
    80006800:	00027517          	auipc	a0,0x27
    80006804:	b3050513          	addi	a0,a0,-1232 # 8002d330 <__func__.0+0x310>
    80006808:	5b2240ef          	jal	8002adba <printf>
    8000680c:	4529                	li	a0,10
    8000680e:	29a230ef          	jal	80029aa8 <putchar>
    80006812:	b5e5                	j	800066fa <hfence_test+0x14a>

0000000080006814 <wfi_exception_tests_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <stdio.h>

bool wfi_exception_tests_1() {
    80006814:	1101                	addi	sp,sp,-32

    TEST_START();
    80006816:	00025597          	auipc	a1,0x25
    8000681a:	e5a58593          	addi	a1,a1,-422 # 8002b670 <__func__.22>
    8000681e:	00027517          	auipc	a0,0x27
    80006822:	ae250513          	addi	a0,a0,-1310 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_1() {
    80006826:	ec06                	sd	ra,24(sp)
    80006828:	e822                	sd	s0,16(sp)
    8000682a:	e426                	sd	s1,8(sp)
    TEST_START();
    8000682c:	58e240ef          	jal	8002adba <printf>
    80006830:	4529                	li	a0,10
    80006832:	276230ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    80006836:	d3cfa0ef          	jal	80000d72 <test_setup_except_function>

    //mstatus.TW=0时，在u模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    8000683a:	4511                	li	a0,4
    8000683c:	e32fa0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006840:	002007b7          	lui	a5,0x200
    80006844:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006848:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000684c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006850:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006854:	60205073          	csrwi	hedeleg,0
    CSRS(CSR_UIE, 0b0100);
    80006858:	00426073          	csrsi	uie,4
    asm ("wfi" ::: "memory");
    8000685c:	10500073          	wfi
    wfi();

    goto_priv(PRIV_HU);
    80006860:	4505                	li	a0,1
    80006862:	e0cfa0ef          	jal	80000e6e <goto_priv>

    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006866:	08200593          	li	a1,130
    8000686a:	00028617          	auipc	a2,0x28
    8000686e:	dfe60613          	addi	a2,a2,-514 # 8002e668 <__func__.0+0x1648>
    80006872:	00027517          	auipc	a0,0x27
    80006876:	aa650513          	addi	a0,a0,-1370 # 8002d318 <__func__.0+0x2f8>
    8000687a:	540240ef          	jal	8002adba <printf>
    8000687e:	0004a797          	auipc	a5,0x4a
    80006882:	7937c783          	lbu	a5,1939(a5) # 80051011 <excpt+0x1>
    80006886:	0004a497          	auipc	s1,0x4a
    8000688a:	78a48493          	addi	s1,s1,1930 # 80051010 <excpt>
    8000688e:	00027597          	auipc	a1,0x27
    80006892:	a6258593          	addi	a1,a1,-1438 # 8002d2f0 <__func__.0+0x2d0>
    80006896:	cf89                	beqz	a5,800068b0 <wfi_exception_tests_1+0x9c>
    80006898:	6498                	ld	a4,8(s1)
    8000689a:	4789                	li	a5,2
    8000689c:	00027597          	auipc	a1,0x27
    800068a0:	a4458593          	addi	a1,a1,-1468 # 8002d2e0 <__func__.0+0x2c0>
    800068a4:	00f70663          	beq	a4,a5,800068b0 <wfi_exception_tests_1+0x9c>
    800068a8:	00027597          	auipc	a1,0x27
    800068ac:	a4858593          	addi	a1,a1,-1464 # 8002d2f0 <__func__.0+0x2d0>
    800068b0:	00027517          	auipc	a0,0x27
    800068b4:	a8050513          	addi	a0,a0,-1408 # 8002d330 <__func__.0+0x310>
    800068b8:	502240ef          	jal	8002adba <printf>
    800068bc:	0004a797          	auipc	a5,0x4a
    800068c0:	7557c783          	lbu	a5,1877(a5) # 80051011 <excpt+0x1>
    800068c4:	c789                	beqz	a5,800068ce <wfi_exception_tests_1+0xba>
    800068c6:	6498                	ld	a4,8(s1)
    800068c8:	4789                	li	a5,2
    800068ca:	00f70c63          	beq	a4,a5,800068e2 <wfi_exception_tests_1+0xce>
    800068ce:	00027517          	auipc	a0,0x27
    800068d2:	a6a50513          	addi	a0,a0,-1430 # 8002d338 <__func__.0+0x318>
    800068d6:	4e4240ef          	jal	8002adba <printf>
    800068da:	02900513          	li	a0,41
    800068de:	1ca230ef          	jal	80029aa8 <putchar>
    800068e2:	4529                	li	a0,10
    800068e4:	1c4230ef          	jal	80029aa8 <putchar>
    800068e8:	0004a417          	auipc	s0,0x4a
    800068ec:	72944403          	lbu	s0,1833(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800068f0:	00027597          	auipc	a1,0x27
    800068f4:	a0058593          	addi	a1,a1,-1536 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    800068f8:	cc11                	beqz	s0,80006914 <wfi_exception_tests_1+0x100>
    800068fa:	6498                	ld	a4,8(s1)
    800068fc:	4789                	li	a5,2
    TEST_END();
    800068fe:	00027597          	auipc	a1,0x27
    80006902:	9e258593          	addi	a1,a1,-1566 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("U-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006906:	00f70763          	beq	a4,a5,80006914 <wfi_exception_tests_1+0x100>
    8000690a:	4401                	li	s0,0
    TEST_END();
    8000690c:	00027597          	auipc	a1,0x27
    80006910:	9e458593          	addi	a1,a1,-1564 # 8002d2f0 <__func__.0+0x2d0>
    80006914:	00027517          	auipc	a0,0x27
    80006918:	a8450513          	addi	a0,a0,-1404 # 8002d398 <__func__.0+0x378>
    8000691c:	49e240ef          	jal	8002adba <printf>
    80006920:	4511                	li	a0,4
    80006922:	d4cfa0ef          	jal	80000e6e <goto_priv>
    80006926:	e65fa0ef          	jal	8000178a <reset_state>
}
    8000692a:	60e2                	ld	ra,24(sp)
    8000692c:	8522                	mv	a0,s0
    8000692e:	6442                	ld	s0,16(sp)
    80006930:	64a2                	ld	s1,8(sp)
    80006932:	6105                	addi	sp,sp,32
    80006934:	8082                	ret

0000000080006936 <wfi_exception_tests_2>:

bool wfi_exception_tests_2() {
    80006936:	1101                	addi	sp,sp,-32

    TEST_START();
    80006938:	00025597          	auipc	a1,0x25
    8000693c:	d5058593          	addi	a1,a1,-688 # 8002b688 <__func__.21>
    80006940:	00027517          	auipc	a0,0x27
    80006944:	9c050513          	addi	a0,a0,-1600 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_2() {
    80006948:	ec06                	sd	ra,24(sp)
    8000694a:	e822                	sd	s0,16(sp)
    8000694c:	e426                	sd	s1,8(sp)
    TEST_START();
    8000694e:	46c240ef          	jal	8002adba <printf>
    80006952:	4529                	li	a0,10
    80006954:	154230ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    80006958:	c1afa0ef          	jal	80000d72 <test_setup_except_function>
    //mstatus.TW=0时，在VU模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    8000695c:	4511                	li	a0,4
    8000695e:	d10fa0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006962:	002007b7          	lui	a5,0x200
    80006966:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    8000696a:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000696e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80006972:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    80006976:	60205073          	csrwi	hedeleg,0
    TEST_SETUP_EXCEPT();
    8000697a:	bf8fa0ef          	jal	80000d72 <test_setup_except_function>
    CSRS(CSR_UIE, 0b0100);
    8000697e:	00426073          	csrsi	uie,4
    80006982:	10500073          	wfi
    wfi();

    goto_priv(PRIV_VU);
    80006986:	4501                	li	a0,0
    80006988:	ce6fa0ef          	jal	80000e6e <goto_priv>
    
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    8000698c:	08200593          	li	a1,130
    80006990:	00028617          	auipc	a2,0x28
    80006994:	d4860613          	addi	a2,a2,-696 # 8002e6d8 <__func__.0+0x16b8>
    80006998:	00027517          	auipc	a0,0x27
    8000699c:	98050513          	addi	a0,a0,-1664 # 8002d318 <__func__.0+0x2f8>
    800069a0:	41a240ef          	jal	8002adba <printf>
    800069a4:	0004a797          	auipc	a5,0x4a
    800069a8:	66d7c783          	lbu	a5,1645(a5) # 80051011 <excpt+0x1>
    800069ac:	0004a497          	auipc	s1,0x4a
    800069b0:	66448493          	addi	s1,s1,1636 # 80051010 <excpt>
    800069b4:	00027597          	auipc	a1,0x27
    800069b8:	93c58593          	addi	a1,a1,-1732 # 8002d2f0 <__func__.0+0x2d0>
    800069bc:	cf89                	beqz	a5,800069d6 <wfi_exception_tests_2+0xa0>
    800069be:	6498                	ld	a4,8(s1)
    800069c0:	4789                	li	a5,2
    800069c2:	00027597          	auipc	a1,0x27
    800069c6:	91e58593          	addi	a1,a1,-1762 # 8002d2e0 <__func__.0+0x2c0>
    800069ca:	00f70663          	beq	a4,a5,800069d6 <wfi_exception_tests_2+0xa0>
    800069ce:	00027597          	auipc	a1,0x27
    800069d2:	92258593          	addi	a1,a1,-1758 # 8002d2f0 <__func__.0+0x2d0>
    800069d6:	00027517          	auipc	a0,0x27
    800069da:	95a50513          	addi	a0,a0,-1702 # 8002d330 <__func__.0+0x310>
    800069de:	3dc240ef          	jal	8002adba <printf>
    800069e2:	0004a797          	auipc	a5,0x4a
    800069e6:	62f7c783          	lbu	a5,1583(a5) # 80051011 <excpt+0x1>
    800069ea:	c789                	beqz	a5,800069f4 <wfi_exception_tests_2+0xbe>
    800069ec:	6498                	ld	a4,8(s1)
    800069ee:	4789                	li	a5,2
    800069f0:	00f70c63          	beq	a4,a5,80006a08 <wfi_exception_tests_2+0xd2>
    800069f4:	00027517          	auipc	a0,0x27
    800069f8:	94450513          	addi	a0,a0,-1724 # 8002d338 <__func__.0+0x318>
    800069fc:	3be240ef          	jal	8002adba <printf>
    80006a00:	02900513          	li	a0,41
    80006a04:	0a4230ef          	jal	80029aa8 <putchar>
    80006a08:	4529                	li	a0,10
    80006a0a:	09e230ef          	jal	80029aa8 <putchar>
    80006a0e:	0004a417          	auipc	s0,0x4a
    80006a12:	60344403          	lbu	s0,1539(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    TEST_END();
    80006a16:	00027597          	auipc	a1,0x27
    80006a1a:	8da58593          	addi	a1,a1,-1830 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a1e:	cc11                	beqz	s0,80006a3a <wfi_exception_tests_2+0x104>
    80006a20:	6498                	ld	a4,8(s1)
    80006a22:	4789                	li	a5,2
    TEST_END();
    80006a24:	00027597          	auipc	a1,0x27
    80006a28:	8bc58593          	addi	a1,a1,-1860 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU-mode wfi causes illegal instruction exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006a2c:	00f70763          	beq	a4,a5,80006a3a <wfi_exception_tests_2+0x104>
    80006a30:	4401                	li	s0,0
    TEST_END();
    80006a32:	00027597          	auipc	a1,0x27
    80006a36:	8be58593          	addi	a1,a1,-1858 # 8002d2f0 <__func__.0+0x2d0>
    80006a3a:	00027517          	auipc	a0,0x27
    80006a3e:	95e50513          	addi	a0,a0,-1698 # 8002d398 <__func__.0+0x378>
    80006a42:	378240ef          	jal	8002adba <printf>
    80006a46:	4511                	li	a0,4
    80006a48:	c26fa0ef          	jal	80000e6e <goto_priv>
    80006a4c:	d3ffa0ef          	jal	8000178a <reset_state>
}
    80006a50:	60e2                	ld	ra,24(sp)
    80006a52:	8522                	mv	a0,s0
    80006a54:	6442                	ld	s0,16(sp)
    80006a56:	64a2                	ld	s1,8(sp)
    80006a58:	6105                	addi	sp,sp,32
    80006a5a:	8082                	ret

0000000080006a5c <wfi_exception_tests_3>:

bool wfi_exception_tests_3() {
    80006a5c:	1141                	addi	sp,sp,-16

    TEST_START();
    80006a5e:	00025597          	auipc	a1,0x25
    80006a62:	c4258593          	addi	a1,a1,-958 # 8002b6a0 <__func__.20>
    80006a66:	00027517          	auipc	a0,0x27
    80006a6a:	89a50513          	addi	a0,a0,-1894 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_3() {
    80006a6e:	e406                	sd	ra,8(sp)
    80006a70:	e022                	sd	s0,0(sp)
    TEST_START();
    80006a72:	348240ef          	jal	8002adba <printf>
    80006a76:	4529                	li	a0,10
    80006a78:	030230ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    80006a7c:	af6fa0ef          	jal	80000d72 <test_setup_except_function>
    /* Keep an interrupt pending so we don't get stuck when wfi succeeds */
    //mstatus.TW=0时，在m模式下，中断未被禁用，且代理没打开，执行wfi指令
    goto_priv(PRIV_M);
    80006a80:	4511                	li	a0,4
    80006a82:	becfa0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006a86:	002007b7          	lui	a5,0x200
    80006a8a:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006a8e:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    80006a92:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006a96:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006a9a:	34426073          	csrsi	mip,4

    goto_priv(PRIV_M);
    80006a9e:	4511                	li	a0,4
    80006aa0:	bcefa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80006aa4:	acefa0ef          	jal	80000d72 <test_setup_except_function>
    80006aa8:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006aac:	08200593          	li	a1,130
    80006ab0:	00028617          	auipc	a2,0x28
    80006ab4:	c9860613          	addi	a2,a2,-872 # 8002e748 <__func__.0+0x1728>
    80006ab8:	00027517          	auipc	a0,0x27
    80006abc:	86050513          	addi	a0,a0,-1952 # 8002d318 <__func__.0+0x2f8>
    80006ac0:	2fa240ef          	jal	8002adba <printf>
    80006ac4:	0004a797          	auipc	a5,0x4a
    80006ac8:	54d7c783          	lbu	a5,1357(a5) # 80051011 <excpt+0x1>
    80006acc:	00027597          	auipc	a1,0x27
    80006ad0:	81458593          	addi	a1,a1,-2028 # 8002d2e0 <__func__.0+0x2c0>
    80006ad4:	c789                	beqz	a5,80006ade <wfi_exception_tests_3+0x82>
    80006ad6:	00027597          	auipc	a1,0x27
    80006ada:	81a58593          	addi	a1,a1,-2022 # 8002d2f0 <__func__.0+0x2d0>
    80006ade:	00027517          	auipc	a0,0x27
    80006ae2:	85250513          	addi	a0,a0,-1966 # 8002d330 <__func__.0+0x310>
    80006ae6:	2d4240ef          	jal	8002adba <printf>
    80006aea:	0004a797          	auipc	a5,0x4a
    80006aee:	5277c783          	lbu	a5,1319(a5) # 80051011 <excpt+0x1>
    80006af2:	e7a1                	bnez	a5,80006b3a <wfi_exception_tests_3+0xde>
    80006af4:	4529                	li	a0,10
    80006af6:	7b3220ef          	jal	80029aa8 <putchar>
    80006afa:	0004a797          	auipc	a5,0x4a
    80006afe:	5177c783          	lbu	a5,1303(a5) # 80051011 <excpt+0x1>
    80006b02:	e795                	bnez	a5,80006b2e <wfi_exception_tests_3+0xd2>
    80006b04:	4405                	li	s0,1
        excpt.triggered == false
    );  

   
    TEST_END();
    80006b06:	00026597          	auipc	a1,0x26
    80006b0a:	7da58593          	addi	a1,a1,2010 # 8002d2e0 <__func__.0+0x2c0>
    80006b0e:	00027517          	auipc	a0,0x27
    80006b12:	88a50513          	addi	a0,a0,-1910 # 8002d398 <__func__.0+0x378>
    80006b16:	2a4240ef          	jal	8002adba <printf>
    80006b1a:	4511                	li	a0,4
    80006b1c:	b52fa0ef          	jal	80000e6e <goto_priv>
    80006b20:	c6bfa0ef          	jal	8000178a <reset_state>
}
    80006b24:	60a2                	ld	ra,8(sp)
    80006b26:	8522                	mv	a0,s0
    80006b28:	6402                	ld	s0,0(sp)
    80006b2a:	0141                	addi	sp,sp,16
    80006b2c:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b2e:	4401                	li	s0,0
    TEST_END();
    80006b30:	00026597          	auipc	a1,0x26
    80006b34:	7c058593          	addi	a1,a1,1984 # 8002d2f0 <__func__.0+0x2d0>
    80006b38:	bfd9                	j	80006b0e <wfi_exception_tests_3+0xb2>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b3a:	00026517          	auipc	a0,0x26
    80006b3e:	7fe50513          	addi	a0,a0,2046 # 8002d338 <__func__.0+0x318>
    80006b42:	278240ef          	jal	8002adba <printf>
    80006b46:	02900513          	li	a0,41
    80006b4a:	75f220ef          	jal	80029aa8 <putchar>
    80006b4e:	b75d                	j	80006af4 <wfi_exception_tests_3+0x98>

0000000080006b50 <wfi_exception_tests_4>:

bool wfi_exception_tests_4() {
    80006b50:	1141                	addi	sp,sp,-16

    TEST_START();
    80006b52:	00025597          	auipc	a1,0x25
    80006b56:	b6658593          	addi	a1,a1,-1178 # 8002b6b8 <__func__.19>
    80006b5a:	00026517          	auipc	a0,0x26
    80006b5e:	7a650513          	addi	a0,a0,1958 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_4() {
    80006b62:	e406                	sd	ra,8(sp)
    80006b64:	e022                	sd	s0,0(sp)
    TEST_START();
    80006b66:	254240ef          	jal	8002adba <printf>
    80006b6a:	4529                	li	a0,10
    80006b6c:	73d220ef          	jal	80029aa8 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006b70:	a02fa0ef          	jal	80000d72 <test_setup_except_function>

    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理没打开，执行wfi指令
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006b74:	002007b7          	lui	a5,0x200
    80006b78:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006b7c:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006b80:	30305073          	csrwi	mideleg,0
    CSRS(CSR_HIE, 0b0100);
    80006b84:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80006b88:	64426073          	csrsi	hip,4

    goto_priv(PRIV_HS);
    80006b8c:	450d                	li	a0,3
    80006b8e:	ae0fa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80006b92:	9e0fa0ef          	jal	80000d72 <test_setup_except_function>
    80006b96:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006b9a:	08200593          	li	a1,130
    80006b9e:	00028617          	auipc	a2,0x28
    80006ba2:	c1a60613          	addi	a2,a2,-998 # 8002e7b8 <__func__.0+0x1798>
    80006ba6:	00026517          	auipc	a0,0x26
    80006baa:	77250513          	addi	a0,a0,1906 # 8002d318 <__func__.0+0x2f8>
    80006bae:	20c240ef          	jal	8002adba <printf>
    80006bb2:	0004a797          	auipc	a5,0x4a
    80006bb6:	45f7c783          	lbu	a5,1119(a5) # 80051011 <excpt+0x1>
    80006bba:	00026597          	auipc	a1,0x26
    80006bbe:	72658593          	addi	a1,a1,1830 # 8002d2e0 <__func__.0+0x2c0>
    80006bc2:	c789                	beqz	a5,80006bcc <wfi_exception_tests_4+0x7c>
    80006bc4:	00026597          	auipc	a1,0x26
    80006bc8:	72c58593          	addi	a1,a1,1836 # 8002d2f0 <__func__.0+0x2d0>
    80006bcc:	00026517          	auipc	a0,0x26
    80006bd0:	76450513          	addi	a0,a0,1892 # 8002d330 <__func__.0+0x310>
    80006bd4:	1e6240ef          	jal	8002adba <printf>
    80006bd8:	0004a797          	auipc	a5,0x4a
    80006bdc:	4397c783          	lbu	a5,1081(a5) # 80051011 <excpt+0x1>
    80006be0:	e7a1                	bnez	a5,80006c28 <wfi_exception_tests_4+0xd8>
    80006be2:	4529                	li	a0,10
    80006be4:	6c5220ef          	jal	80029aa8 <putchar>
    80006be8:	0004a797          	auipc	a5,0x4a
    80006bec:	4297c783          	lbu	a5,1065(a5) # 80051011 <excpt+0x1>
    80006bf0:	e795                	bnez	a5,80006c1c <wfi_exception_tests_4+0xcc>
    80006bf2:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80006bf4:	00026597          	auipc	a1,0x26
    80006bf8:	6ec58593          	addi	a1,a1,1772 # 8002d2e0 <__func__.0+0x2c0>
    80006bfc:	00026517          	auipc	a0,0x26
    80006c00:	79c50513          	addi	a0,a0,1948 # 8002d398 <__func__.0+0x378>
    80006c04:	1b6240ef          	jal	8002adba <printf>
    80006c08:	4511                	li	a0,4
    80006c0a:	a64fa0ef          	jal	80000e6e <goto_priv>
    80006c0e:	b7dfa0ef          	jal	8000178a <reset_state>
}
    80006c12:	60a2                	ld	ra,8(sp)
    80006c14:	8522                	mv	a0,s0
    80006c16:	6402                	ld	s0,0(sp)
    80006c18:	0141                	addi	sp,sp,16
    80006c1a:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c1c:	4401                	li	s0,0
    TEST_END();
    80006c1e:	00026597          	auipc	a1,0x26
    80006c22:	6d258593          	addi	a1,a1,1746 # 8002d2f0 <__func__.0+0x2d0>
    80006c26:	bfd9                	j	80006bfc <wfi_exception_tests_4+0xac>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c28:	00026517          	auipc	a0,0x26
    80006c2c:	71050513          	addi	a0,a0,1808 # 8002d338 <__func__.0+0x318>
    80006c30:	18a240ef          	jal	8002adba <printf>
    80006c34:	02900513          	li	a0,41
    80006c38:	671220ef          	jal	80029aa8 <putchar>
    80006c3c:	b75d                	j	80006be2 <wfi_exception_tests_4+0x92>

0000000080006c3e <wfi_exception_tests_5>:

bool wfi_exception_tests_5() {
    80006c3e:	1141                	addi	sp,sp,-16

    TEST_START();
    80006c40:	00025597          	auipc	a1,0x25
    80006c44:	a9058593          	addi	a1,a1,-1392 # 8002b6d0 <__func__.18>
    80006c48:	00026517          	auipc	a0,0x26
    80006c4c:	6b850513          	addi	a0,a0,1720 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_5() {
    80006c50:	e406                	sd	ra,8(sp)
    80006c52:	e022                	sd	s0,0(sp)
    TEST_START();
    80006c54:	166240ef          	jal	8002adba <printf>
    80006c58:	4529                	li	a0,10
    80006c5a:	64f220ef          	jal	80029aa8 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006c5e:	914fa0ef          	jal	80000d72 <test_setup_except_function>

    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006c62:	002007b7          	lui	a5,0x200
    80006c66:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006c6a:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006c6e:	30305073          	csrwi	mideleg,0
    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理没打开，执行wfi指令

    goto_priv(PRIV_VS); //防止进入hs异常后不能直接进入m模式
    80006c72:	4509                	li	a0,2
    80006c74:	9fafa0ef          	jal	80000e6e <goto_priv>
    goto_priv(PRIV_M); 
    80006c78:	4511                	li	a0,4
    80006c7a:	9f4fa0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSIE, 0b0100);
    80006c7e:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006c82:	24426073          	csrsi	vsip,4

    goto_priv(PRIV_VS);
    80006c86:	4509                	li	a0,2
    80006c88:	9e6fa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80006c8c:	8e6fa0ef          	jal	80000d72 <test_setup_except_function>
    80006c90:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006c94:	08200593          	li	a1,130
    80006c98:	00028617          	auipc	a2,0x28
    80006c9c:	b8860613          	addi	a2,a2,-1144 # 8002e820 <__func__.0+0x1800>
    80006ca0:	00026517          	auipc	a0,0x26
    80006ca4:	67850513          	addi	a0,a0,1656 # 8002d318 <__func__.0+0x2f8>
    80006ca8:	112240ef          	jal	8002adba <printf>
    80006cac:	0004a797          	auipc	a5,0x4a
    80006cb0:	3657c783          	lbu	a5,869(a5) # 80051011 <excpt+0x1>
    80006cb4:	00026597          	auipc	a1,0x26
    80006cb8:	62c58593          	addi	a1,a1,1580 # 8002d2e0 <__func__.0+0x2c0>
    80006cbc:	c789                	beqz	a5,80006cc6 <wfi_exception_tests_5+0x88>
    80006cbe:	00026597          	auipc	a1,0x26
    80006cc2:	63258593          	addi	a1,a1,1586 # 8002d2f0 <__func__.0+0x2d0>
    80006cc6:	00026517          	auipc	a0,0x26
    80006cca:	66a50513          	addi	a0,a0,1642 # 8002d330 <__func__.0+0x310>
    80006cce:	0ec240ef          	jal	8002adba <printf>
    80006cd2:	0004a797          	auipc	a5,0x4a
    80006cd6:	33f7c783          	lbu	a5,831(a5) # 80051011 <excpt+0x1>
    80006cda:	e7a1                	bnez	a5,80006d22 <wfi_exception_tests_5+0xe4>
    80006cdc:	4529                	li	a0,10
    80006cde:	5cb220ef          	jal	80029aa8 <putchar>
    80006ce2:	0004a797          	auipc	a5,0x4a
    80006ce6:	32f7c783          	lbu	a5,815(a5) # 80051011 <excpt+0x1>
    80006cea:	e795                	bnez	a5,80006d16 <wfi_exception_tests_5+0xd8>
    80006cec:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006cee:	00026597          	auipc	a1,0x26
    80006cf2:	5f258593          	addi	a1,a1,1522 # 8002d2e0 <__func__.0+0x2c0>
    80006cf6:	00026517          	auipc	a0,0x26
    80006cfa:	6a250513          	addi	a0,a0,1698 # 8002d398 <__func__.0+0x378>
    80006cfe:	0bc240ef          	jal	8002adba <printf>
    80006d02:	4511                	li	a0,4
    80006d04:	96afa0ef          	jal	80000e6e <goto_priv>
    80006d08:	a83fa0ef          	jal	8000178a <reset_state>
}
    80006d0c:	60a2                	ld	ra,8(sp)
    80006d0e:	8522                	mv	a0,s0
    80006d10:	6402                	ld	s0,0(sp)
    80006d12:	0141                	addi	sp,sp,16
    80006d14:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d16:	4401                	li	s0,0
    TEST_END();
    80006d18:	00026597          	auipc	a1,0x26
    80006d1c:	5d858593          	addi	a1,a1,1496 # 8002d2f0 <__func__.0+0x2d0>
    80006d20:	bfd9                	j	80006cf6 <wfi_exception_tests_5+0xb8>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=0",
    80006d22:	00026517          	auipc	a0,0x26
    80006d26:	61650513          	addi	a0,a0,1558 # 8002d338 <__func__.0+0x318>
    80006d2a:	090240ef          	jal	8002adba <printf>
    80006d2e:	02900513          	li	a0,41
    80006d32:	577220ef          	jal	80029aa8 <putchar>
    80006d36:	b75d                	j	80006cdc <wfi_exception_tests_5+0x9e>

0000000080006d38 <wfi_exception_tests_6>:

bool wfi_exception_tests_6() {
    80006d38:	1141                	addi	sp,sp,-16

    TEST_START();
    80006d3a:	00025597          	auipc	a1,0x25
    80006d3e:	9ae58593          	addi	a1,a1,-1618 # 8002b6e8 <__func__.17>
    80006d42:	00026517          	auipc	a0,0x26
    80006d46:	5be50513          	addi	a0,a0,1470 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_6() {
    80006d4a:	e406                	sd	ra,8(sp)
    80006d4c:	e022                	sd	s0,0(sp)
    TEST_START();
    80006d4e:	06c240ef          	jal	8002adba <printf>
    80006d52:	4529                	li	a0,10
    80006d54:	555220ef          	jal	80029aa8 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006d58:	81afa0ef          	jal	80000d72 <test_setup_except_function>
    
    goto_priv(PRIV_M);
    80006d5c:	4511                	li	a0,4
    80006d5e:	910fa0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006d62:	002007b7          	lui	a5,0x200
    80006d66:	3007b073          	csrc	mstatus,a5
    CSRW(medeleg,0);
    80006d6a:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);   
    80006d6e:	30305073          	csrwi	mideleg,0
    CSRS(mie, 0b0100);
    80006d72:	30426073          	csrsi	mie,4
    CSRS(mip, 0b0100);
    80006d76:	34426073          	csrsi	mip,4
    CSRS(mideleg, 0b0100);
    80006d7a:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_M);
    80006d7e:	4511                	li	a0,4
    80006d80:	8eefa0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80006d84:	feff90ef          	jal	80000d72 <test_setup_except_function>
    80006d88:	10500073          	wfi
    wfi();
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006d8c:	08200593          	li	a1,130
    80006d90:	00028617          	auipc	a2,0x28
    80006d94:	af860613          	addi	a2,a2,-1288 # 8002e888 <__func__.0+0x1868>
    80006d98:	00026517          	auipc	a0,0x26
    80006d9c:	58050513          	addi	a0,a0,1408 # 8002d318 <__func__.0+0x2f8>
    80006da0:	01a240ef          	jal	8002adba <printf>
    80006da4:	0004a797          	auipc	a5,0x4a
    80006da8:	26d7c783          	lbu	a5,621(a5) # 80051011 <excpt+0x1>
    80006dac:	00026597          	auipc	a1,0x26
    80006db0:	53458593          	addi	a1,a1,1332 # 8002d2e0 <__func__.0+0x2c0>
    80006db4:	c789                	beqz	a5,80006dbe <wfi_exception_tests_6+0x86>
    80006db6:	00026597          	auipc	a1,0x26
    80006dba:	53a58593          	addi	a1,a1,1338 # 8002d2f0 <__func__.0+0x2d0>
    80006dbe:	00026517          	auipc	a0,0x26
    80006dc2:	57250513          	addi	a0,a0,1394 # 8002d330 <__func__.0+0x310>
    80006dc6:	7f5230ef          	jal	8002adba <printf>
    80006dca:	0004a797          	auipc	a5,0x4a
    80006dce:	2477c783          	lbu	a5,583(a5) # 80051011 <excpt+0x1>
    80006dd2:	e7a1                	bnez	a5,80006e1a <wfi_exception_tests_6+0xe2>
    80006dd4:	4529                	li	a0,10
    80006dd6:	4d3220ef          	jal	80029aa8 <putchar>
    80006dda:	0004a797          	auipc	a5,0x4a
    80006dde:	2377c783          	lbu	a5,567(a5) # 80051011 <excpt+0x1>
    80006de2:	e795                	bnez	a5,80006e0e <wfi_exception_tests_6+0xd6>
    80006de4:	4405                	li	s0,1

    /** 
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to hs.
     */
    TEST_END();
    80006de6:	00026597          	auipc	a1,0x26
    80006dea:	4fa58593          	addi	a1,a1,1274 # 8002d2e0 <__func__.0+0x2c0>
    80006dee:	00026517          	auipc	a0,0x26
    80006df2:	5aa50513          	addi	a0,a0,1450 # 8002d398 <__func__.0+0x378>
    80006df6:	7c5230ef          	jal	8002adba <printf>
    80006dfa:	4511                	li	a0,4
    80006dfc:	872fa0ef          	jal	80000e6e <goto_priv>
    80006e00:	98bfa0ef          	jal	8000178a <reset_state>
}
    80006e04:	60a2                	ld	ra,8(sp)
    80006e06:	8522                	mv	a0,s0
    80006e08:	6402                	ld	s0,0(sp)
    80006e0a:	0141                	addi	sp,sp,16
    80006e0c:	8082                	ret
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e0e:	4401                	li	s0,0
    TEST_END();
    80006e10:	00026597          	auipc	a1,0x26
    80006e14:	4e058593          	addi	a1,a1,1248 # 8002d2f0 <__func__.0+0x2d0>
    80006e18:	bfd9                	j	80006dee <wfi_exception_tests_6+0xb6>
    TEST_ASSERT("machine mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e1a:	00026517          	auipc	a0,0x26
    80006e1e:	51e50513          	addi	a0,a0,1310 # 8002d338 <__func__.0+0x318>
    80006e22:	799230ef          	jal	8002adba <printf>
    80006e26:	02900513          	li	a0,41
    80006e2a:	47f220ef          	jal	80029aa8 <putchar>
    80006e2e:	b75d                	j	80006dd4 <wfi_exception_tests_6+0x9c>

0000000080006e30 <wfi_exception_tests_7>:



bool wfi_exception_tests_7() {
    80006e30:	1141                	addi	sp,sp,-16

    TEST_START();
    80006e32:	00025597          	auipc	a1,0x25
    80006e36:	8ce58593          	addi	a1,a1,-1842 # 8002b700 <__func__.16>
    80006e3a:	00026517          	auipc	a0,0x26
    80006e3e:	4c650513          	addi	a0,a0,1222 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_7() {
    80006e42:	e406                	sd	ra,8(sp)
    80006e44:	e022                	sd	s0,0(sp)
    TEST_START();
    80006e46:	775230ef          	jal	8002adba <printf>
    80006e4a:	4529                	li	a0,10
    80006e4c:	45d220ef          	jal	80029aa8 <putchar>
    
    TEST_SETUP_EXCEPT();
    80006e50:	f23f90ef          	jal	80000d72 <test_setup_except_function>

    //mstatus.TW=0时，在VS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M); 
    80006e54:	4511                	li	a0,4
    80006e56:	818fa0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006e5a:	002007b7          	lui	a5,0x200
    80006e5e:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSIE, 0b0100);
    80006e62:	20426073          	csrsi	vsie,4
    CSRS(CSR_VSIP, 0b0100);
    80006e66:	24426073          	csrsi	vsip,4
    CSRS(mideleg, 0b0100);
    80006e6a:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_VS);
    80006e6e:	4509                	li	a0,2
    80006e70:	ffff90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80006e74:	efff90ef          	jal	80000d72 <test_setup_except_function>
    80006e78:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006e7c:	08200593          	li	a1,130
    80006e80:	00028617          	auipc	a2,0x28
    80006e84:	a7860613          	addi	a2,a2,-1416 # 8002e8f8 <__func__.0+0x18d8>
    80006e88:	00026517          	auipc	a0,0x26
    80006e8c:	49050513          	addi	a0,a0,1168 # 8002d318 <__func__.0+0x2f8>
    80006e90:	72b230ef          	jal	8002adba <printf>
    80006e94:	0004a797          	auipc	a5,0x4a
    80006e98:	17d7c783          	lbu	a5,381(a5) # 80051011 <excpt+0x1>
    80006e9c:	00026597          	auipc	a1,0x26
    80006ea0:	44458593          	addi	a1,a1,1092 # 8002d2e0 <__func__.0+0x2c0>
    80006ea4:	c789                	beqz	a5,80006eae <wfi_exception_tests_7+0x7e>
    80006ea6:	00026597          	auipc	a1,0x26
    80006eaa:	44a58593          	addi	a1,a1,1098 # 8002d2f0 <__func__.0+0x2d0>
    80006eae:	00026517          	auipc	a0,0x26
    80006eb2:	48250513          	addi	a0,a0,1154 # 8002d330 <__func__.0+0x310>
    80006eb6:	705230ef          	jal	8002adba <printf>
    80006eba:	0004a797          	auipc	a5,0x4a
    80006ebe:	1577c783          	lbu	a5,343(a5) # 80051011 <excpt+0x1>
    80006ec2:	e7a1                	bnez	a5,80006f0a <wfi_exception_tests_7+0xda>
    80006ec4:	4529                	li	a0,10
    80006ec6:	3e3220ef          	jal	80029aa8 <putchar>
    80006eca:	0004a797          	auipc	a5,0x4a
    80006ece:	1477c783          	lbu	a5,327(a5) # 80051011 <excpt+0x1>
    80006ed2:	e795                	bnez	a5,80006efe <wfi_exception_tests_7+0xce>
    80006ed4:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80006ed6:	00026597          	auipc	a1,0x26
    80006eda:	40a58593          	addi	a1,a1,1034 # 8002d2e0 <__func__.0+0x2c0>
    80006ede:	00026517          	auipc	a0,0x26
    80006ee2:	4ba50513          	addi	a0,a0,1210 # 8002d398 <__func__.0+0x378>
    80006ee6:	6d5230ef          	jal	8002adba <printf>
    80006eea:	4511                	li	a0,4
    80006eec:	f83f90ef          	jal	80000e6e <goto_priv>
    80006ef0:	89bfa0ef          	jal	8000178a <reset_state>
}
    80006ef4:	60a2                	ld	ra,8(sp)
    80006ef6:	8522                	mv	a0,s0
    80006ef8:	6402                	ld	s0,0(sp)
    80006efa:	0141                	addi	sp,sp,16
    80006efc:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006efe:	4401                	li	s0,0
    TEST_END();
    80006f00:	00026597          	auipc	a1,0x26
    80006f04:	3f058593          	addi	a1,a1,1008 # 8002d2f0 <__func__.0+0x2d0>
    80006f08:	bfd9                	j	80006ede <wfi_exception_tests_7+0xae>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80006f0a:	00026517          	auipc	a0,0x26
    80006f0e:	42e50513          	addi	a0,a0,1070 # 8002d338 <__func__.0+0x318>
    80006f12:	6a9230ef          	jal	8002adba <printf>
    80006f16:	02900513          	li	a0,41
    80006f1a:	38f220ef          	jal	80029aa8 <putchar>
    80006f1e:	b75d                	j	80006ec4 <wfi_exception_tests_7+0x94>

0000000080006f20 <wfi_exception_tests_8>:

bool wfi_exception_tests_8() {
    80006f20:	1141                	addi	sp,sp,-16

    TEST_START();
    80006f22:	00024597          	auipc	a1,0x24
    80006f26:	7f658593          	addi	a1,a1,2038 # 8002b718 <__func__.15>
    80006f2a:	00026517          	auipc	a0,0x26
    80006f2e:	3d650513          	addi	a0,a0,982 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_8() {
    80006f32:	e406                	sd	ra,8(sp)
    80006f34:	e022                	sd	s0,0(sp)
    TEST_START();
    80006f36:	685230ef          	jal	8002adba <printf>
    80006f3a:	4529                	li	a0,10
    80006f3c:	36d220ef          	jal	80029aa8 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断未被代理到低特权模式
    goto_priv(PRIV_M); 
    80006f40:	4511                	li	a0,4
    80006f42:	f2df90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80006f46:	002007b7          	lui	a5,0x200
    80006f4a:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80006f4e:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    80006f52:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_VS);
    80006f56:	4509                	li	a0,2
    80006f58:	f17f90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80006f5c:	e17f90ef          	jal	80000d72 <test_setup_except_function>
    80006f60:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006f64:	08200593          	li	a1,130
    80006f68:	00028617          	auipc	a2,0x28
    80006f6c:	9f860613          	addi	a2,a2,-1544 # 8002e960 <__func__.0+0x1940>
    80006f70:	00026517          	auipc	a0,0x26
    80006f74:	3a850513          	addi	a0,a0,936 # 8002d318 <__func__.0+0x2f8>
    80006f78:	643230ef          	jal	8002adba <printf>
    80006f7c:	0004a797          	auipc	a5,0x4a
    80006f80:	0957c783          	lbu	a5,149(a5) # 80051011 <excpt+0x1>
    80006f84:	00026597          	auipc	a1,0x26
    80006f88:	35c58593          	addi	a1,a1,860 # 8002d2e0 <__func__.0+0x2c0>
    80006f8c:	c789                	beqz	a5,80006f96 <wfi_exception_tests_8+0x76>
    80006f8e:	00026597          	auipc	a1,0x26
    80006f92:	36258593          	addi	a1,a1,866 # 8002d2f0 <__func__.0+0x2d0>
    80006f96:	00026517          	auipc	a0,0x26
    80006f9a:	39a50513          	addi	a0,a0,922 # 8002d330 <__func__.0+0x310>
    80006f9e:	61d230ef          	jal	8002adba <printf>
    80006fa2:	0004a797          	auipc	a5,0x4a
    80006fa6:	06f7c783          	lbu	a5,111(a5) # 80051011 <excpt+0x1>
    80006faa:	e7a1                	bnez	a5,80006ff2 <wfi_exception_tests_8+0xd2>
    80006fac:	4529                	li	a0,10
    80006fae:	2fb220ef          	jal	80029aa8 <putchar>
    80006fb2:	0004a797          	auipc	a5,0x4a
    80006fb6:	05f7c783          	lbu	a5,95(a5) # 80051011 <excpt+0x1>
    80006fba:	e795                	bnez	a5,80006fe6 <wfi_exception_tests_8+0xc6>
    80006fbc:	4405                	li	s0,1
        excpt.triggered == false
    );  

    TEST_END();
    80006fbe:	00026597          	auipc	a1,0x26
    80006fc2:	32258593          	addi	a1,a1,802 # 8002d2e0 <__func__.0+0x2c0>
    80006fc6:	00026517          	auipc	a0,0x26
    80006fca:	3d250513          	addi	a0,a0,978 # 8002d398 <__func__.0+0x378>
    80006fce:	5ed230ef          	jal	8002adba <printf>
    80006fd2:	4511                	li	a0,4
    80006fd4:	e9bf90ef          	jal	80000e6e <goto_priv>
    80006fd8:	fb2fa0ef          	jal	8000178a <reset_state>
}
    80006fdc:	60a2                	ld	ra,8(sp)
    80006fde:	8522                	mv	a0,s0
    80006fe0:	6402                	ld	s0,0(sp)
    80006fe2:	0141                	addi	sp,sp,16
    80006fe4:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006fe6:	4401                	li	s0,0
    TEST_END();
    80006fe8:	00026597          	auipc	a1,0x26
    80006fec:	30858593          	addi	a1,a1,776 # 8002d2f0 <__func__.0+0x2d0>
    80006ff0:	bfd9                	j	80006fc6 <wfi_exception_tests_8+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80006ff2:	00026517          	auipc	a0,0x26
    80006ff6:	34650513          	addi	a0,a0,838 # 8002d338 <__func__.0+0x318>
    80006ffa:	5c1230ef          	jal	8002adba <printf>
    80006ffe:	02900513          	li	a0,41
    80007002:	2a7220ef          	jal	80029aa8 <putchar>
    80007006:	b75d                	j	80006fac <wfi_exception_tests_8+0x8c>

0000000080007008 <wfi_exception_tests_9>:

bool wfi_exception_tests_9() {
    80007008:	1141                	addi	sp,sp,-16

    TEST_START();
    8000700a:	00024597          	auipc	a1,0x24
    8000700e:	72658593          	addi	a1,a1,1830 # 8002b730 <__func__.14>
    80007012:	00026517          	auipc	a0,0x26
    80007016:	2ee50513          	addi	a0,a0,750 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_9() {
    8000701a:	e406                	sd	ra,8(sp)
    8000701c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000701e:	59d230ef          	jal	8002adba <printf>
    80007022:	4529                	li	a0,10
    80007024:	285220ef          	jal	80029aa8 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007028:	4511                	li	a0,4
    8000702a:	e45f90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    8000702e:	002007b7          	lui	a5,0x200
    80007032:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_SIE, 0x0);
    80007036:	10406073          	csrsi	sie,0
    CSRS(mideleg, 0x0);
    8000703a:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_HS);
    8000703e:	450d                	li	a0,3
    80007040:	e2ff90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80007044:	d2ff90ef          	jal	80000d72 <test_setup_except_function>
    80007048:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    8000704c:	08200593          	li	a1,130
    80007050:	00028617          	auipc	a2,0x28
    80007054:	91060613          	addi	a2,a2,-1776 # 8002e960 <__func__.0+0x1940>
    80007058:	00026517          	auipc	a0,0x26
    8000705c:	2c050513          	addi	a0,a0,704 # 8002d318 <__func__.0+0x2f8>
    80007060:	55b230ef          	jal	8002adba <printf>
    80007064:	0004a797          	auipc	a5,0x4a
    80007068:	fad7c783          	lbu	a5,-83(a5) # 80051011 <excpt+0x1>
    8000706c:	00026597          	auipc	a1,0x26
    80007070:	27458593          	addi	a1,a1,628 # 8002d2e0 <__func__.0+0x2c0>
    80007074:	c789                	beqz	a5,8000707e <wfi_exception_tests_9+0x76>
    80007076:	00026597          	auipc	a1,0x26
    8000707a:	27a58593          	addi	a1,a1,634 # 8002d2f0 <__func__.0+0x2d0>
    8000707e:	00026517          	auipc	a0,0x26
    80007082:	2b250513          	addi	a0,a0,690 # 8002d330 <__func__.0+0x310>
    80007086:	535230ef          	jal	8002adba <printf>
    8000708a:	0004a797          	auipc	a5,0x4a
    8000708e:	f877c783          	lbu	a5,-121(a5) # 80051011 <excpt+0x1>
    80007092:	e7a1                	bnez	a5,800070da <wfi_exception_tests_9+0xd2>
    80007094:	4529                	li	a0,10
    80007096:	213220ef          	jal	80029aa8 <putchar>
    8000709a:	0004a797          	auipc	a5,0x4a
    8000709e:	f777c783          	lbu	a5,-137(a5) # 80051011 <excpt+0x1>
    800070a2:	e795                	bnez	a5,800070ce <wfi_exception_tests_9+0xc6>
    800070a4:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    800070a6:	00026597          	auipc	a1,0x26
    800070aa:	23a58593          	addi	a1,a1,570 # 8002d2e0 <__func__.0+0x2c0>
    800070ae:	00026517          	auipc	a0,0x26
    800070b2:	2ea50513          	addi	a0,a0,746 # 8002d398 <__func__.0+0x378>
    800070b6:	505230ef          	jal	8002adba <printf>
    800070ba:	4511                	li	a0,4
    800070bc:	db3f90ef          	jal	80000e6e <goto_priv>
    800070c0:	ecafa0ef          	jal	8000178a <reset_state>
}
    800070c4:	60a2                	ld	ra,8(sp)
    800070c6:	8522                	mv	a0,s0
    800070c8:	6402                	ld	s0,0(sp)
    800070ca:	0141                	addi	sp,sp,16
    800070cc:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070ce:	4401                	li	s0,0
    TEST_END();
    800070d0:	00026597          	auipc	a1,0x26
    800070d4:	22058593          	addi	a1,a1,544 # 8002d2f0 <__func__.0+0x2d0>
    800070d8:	bfd9                	j	800070ae <wfi_exception_tests_9+0xa6>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800070da:	00026517          	auipc	a0,0x26
    800070de:	25e50513          	addi	a0,a0,606 # 8002d338 <__func__.0+0x318>
    800070e2:	4d9230ef          	jal	8002adba <printf>
    800070e6:	02900513          	li	a0,41
    800070ea:	1bf220ef          	jal	80029aa8 <putchar>
    800070ee:	b75d                	j	80007094 <wfi_exception_tests_9+0x8c>

00000000800070f0 <wfi_exception_tests_10>:

bool wfi_exception_tests_10() {
    800070f0:	1141                	addi	sp,sp,-16

    TEST_START();
    800070f2:	00024597          	auipc	a1,0x24
    800070f6:	65658593          	addi	a1,a1,1622 # 8002b748 <__func__.13>
    800070fa:	00026517          	auipc	a0,0x26
    800070fe:	20650513          	addi	a0,a0,518 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_10() {
    80007102:	e406                	sd	ra,8(sp)
    80007104:	e022                	sd	s0,0(sp)
    TEST_START();
    80007106:	4b5230ef          	jal	8002adba <printf>
    8000710a:	4529                	li	a0,10
    8000710c:	19d220ef          	jal	80029aa8 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断未被代理到低特权模式
    
    goto_priv(PRIV_M); 
    80007110:	4511                	li	a0,4
    80007112:	d5df90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007116:	002007b7          	lui	a5,0x200
    8000711a:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_MIE, 0x0);
    8000711e:	30406073          	csrsi	mie,0
    CSRS(mideleg, 0x0);
    80007122:	30306073          	csrsi	mideleg,0

    goto_priv(PRIV_M);
    80007126:	4511                	li	a0,4
    80007128:	d47f90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8000712c:	c47f90ef          	jal	80000d72 <test_setup_except_function>
    80007130:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    80007134:	08200593          	li	a1,130
    80007138:	00028617          	auipc	a2,0x28
    8000713c:	87060613          	addi	a2,a2,-1936 # 8002e9a8 <__func__.0+0x1988>
    80007140:	00026517          	auipc	a0,0x26
    80007144:	1d850513          	addi	a0,a0,472 # 8002d318 <__func__.0+0x2f8>
    80007148:	473230ef          	jal	8002adba <printf>
    8000714c:	0004a797          	auipc	a5,0x4a
    80007150:	ec57c783          	lbu	a5,-315(a5) # 80051011 <excpt+0x1>
    80007154:	00026597          	auipc	a1,0x26
    80007158:	18c58593          	addi	a1,a1,396 # 8002d2e0 <__func__.0+0x2c0>
    8000715c:	c789                	beqz	a5,80007166 <wfi_exception_tests_10+0x76>
    8000715e:	00026597          	auipc	a1,0x26
    80007162:	19258593          	addi	a1,a1,402 # 8002d2f0 <__func__.0+0x2d0>
    80007166:	00026517          	auipc	a0,0x26
    8000716a:	1ca50513          	addi	a0,a0,458 # 8002d330 <__func__.0+0x310>
    8000716e:	44d230ef          	jal	8002adba <printf>
    80007172:	0004a797          	auipc	a5,0x4a
    80007176:	e9f7c783          	lbu	a5,-353(a5) # 80051011 <excpt+0x1>
    8000717a:	e7a1                	bnez	a5,800071c2 <wfi_exception_tests_10+0xd2>
    8000717c:	4529                	li	a0,10
    8000717e:	12b220ef          	jal	80029aa8 <putchar>
    80007182:	0004a797          	auipc	a5,0x4a
    80007186:	e8f7c783          	lbu	a5,-369(a5) # 80051011 <excpt+0x1>
    8000718a:	e795                	bnez	a5,800071b6 <wfi_exception_tests_10+0xc6>
    8000718c:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    8000718e:	00026597          	auipc	a1,0x26
    80007192:	15258593          	addi	a1,a1,338 # 8002d2e0 <__func__.0+0x2c0>
    80007196:	00026517          	auipc	a0,0x26
    8000719a:	20250513          	addi	a0,a0,514 # 8002d398 <__func__.0+0x378>
    8000719e:	41d230ef          	jal	8002adba <printf>
    800071a2:	4511                	li	a0,4
    800071a4:	ccbf90ef          	jal	80000e6e <goto_priv>
    800071a8:	de2fa0ef          	jal	8000178a <reset_state>
}
    800071ac:	60a2                	ld	ra,8(sp)
    800071ae:	8522                	mv	a0,s0
    800071b0:	6402                	ld	s0,0(sp)
    800071b2:	0141                	addi	sp,sp,16
    800071b4:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071b6:	4401                	li	s0,0
    TEST_END();
    800071b8:	00026597          	auipc	a1,0x26
    800071bc:	13858593          	addi	a1,a1,312 # 8002d2f0 <__func__.0+0x2d0>
    800071c0:	bfd9                	j	80007196 <wfi_exception_tests_10+0xa6>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=0 and xie=0",
    800071c2:	00026517          	auipc	a0,0x26
    800071c6:	17650513          	addi	a0,a0,374 # 8002d338 <__func__.0+0x318>
    800071ca:	3f1230ef          	jal	8002adba <printf>
    800071ce:	02900513          	li	a0,41
    800071d2:	0d7220ef          	jal	80029aa8 <putchar>
    800071d6:	b75d                	j	8000717c <wfi_exception_tests_10+0x8c>

00000000800071d8 <wfi_exception_tests_11>:

bool wfi_exception_tests_11() {
    800071d8:	1141                	addi	sp,sp,-16

    TEST_START();
    800071da:	00024597          	auipc	a1,0x24
    800071de:	58658593          	addi	a1,a1,1414 # 8002b760 <__func__.12>
    800071e2:	00026517          	auipc	a0,0x26
    800071e6:	11e50513          	addi	a0,a0,286 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_11() {
    800071ea:	e406                	sd	ra,8(sp)
    800071ec:	e022                	sd	s0,0(sp)
    TEST_START();
    800071ee:	3cd230ef          	jal	8002adba <printf>
    800071f2:	4529                	li	a0,10
    800071f4:	0b5220ef          	jal	80029aa8 <putchar>

    //mstatus.TW=0时，在VS，中断等待拉高，但中断使能未拉高，中断被代理到低特权模式
    goto_priv(PRIV_M); 
    800071f8:	4511                	li	a0,4
    800071fa:	c75f90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800071fe:	002007b7          	lui	a5,0x200
    80007202:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    80007206:	10405073          	csrwi	sie,0

    CSRW(mideleg, (uint64_t)-1);
    8000720a:	57fd                	li	a5,-1
    8000720c:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80007210:	4509                	li	a0,2
    80007212:	c5df90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80007216:	b5df90ef          	jal	80000d72 <test_setup_except_function>
    8000721a:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000721e:	08200593          	li	a1,130
    80007222:	00027617          	auipc	a2,0x27
    80007226:	7ce60613          	addi	a2,a2,1998 # 8002e9f0 <__func__.0+0x19d0>
    8000722a:	00026517          	auipc	a0,0x26
    8000722e:	0ee50513          	addi	a0,a0,238 # 8002d318 <__func__.0+0x2f8>
    80007232:	389230ef          	jal	8002adba <printf>
    80007236:	0004a797          	auipc	a5,0x4a
    8000723a:	ddb7c783          	lbu	a5,-549(a5) # 80051011 <excpt+0x1>
    8000723e:	00026597          	auipc	a1,0x26
    80007242:	0a258593          	addi	a1,a1,162 # 8002d2e0 <__func__.0+0x2c0>
    80007246:	c789                	beqz	a5,80007250 <wfi_exception_tests_11+0x78>
    80007248:	00026597          	auipc	a1,0x26
    8000724c:	0a858593          	addi	a1,a1,168 # 8002d2f0 <__func__.0+0x2d0>
    80007250:	00026517          	auipc	a0,0x26
    80007254:	0e050513          	addi	a0,a0,224 # 8002d330 <__func__.0+0x310>
    80007258:	363230ef          	jal	8002adba <printf>
    8000725c:	0004a797          	auipc	a5,0x4a
    80007260:	db57c783          	lbu	a5,-587(a5) # 80051011 <excpt+0x1>
    80007264:	e7a1                	bnez	a5,800072ac <wfi_exception_tests_11+0xd4>
    80007266:	4529                	li	a0,10
    80007268:	041220ef          	jal	80029aa8 <putchar>
    8000726c:	0004a797          	auipc	a5,0x4a
    80007270:	da57c783          	lbu	a5,-603(a5) # 80051011 <excpt+0x1>
    80007274:	e795                	bnez	a5,800072a0 <wfi_exception_tests_11+0xc8>
    80007276:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007278:	00026597          	auipc	a1,0x26
    8000727c:	06858593          	addi	a1,a1,104 # 8002d2e0 <__func__.0+0x2c0>
    80007280:	00026517          	auipc	a0,0x26
    80007284:	11850513          	addi	a0,a0,280 # 8002d398 <__func__.0+0x378>
    80007288:	333230ef          	jal	8002adba <printf>
    8000728c:	4511                	li	a0,4
    8000728e:	be1f90ef          	jal	80000e6e <goto_priv>
    80007292:	cf8fa0ef          	jal	8000178a <reset_state>
}
    80007296:	60a2                	ld	ra,8(sp)
    80007298:	8522                	mv	a0,s0
    8000729a:	6402                	ld	s0,0(sp)
    8000729c:	0141                	addi	sp,sp,16
    8000729e:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800072a0:	4401                	li	s0,0
    TEST_END();
    800072a2:	00026597          	auipc	a1,0x26
    800072a6:	04e58593          	addi	a1,a1,78 # 8002d2f0 <__func__.0+0x2d0>
    800072aa:	bfd9                	j	80007280 <wfi_exception_tests_11+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800072ac:	00026517          	auipc	a0,0x26
    800072b0:	08c50513          	addi	a0,a0,140 # 8002d338 <__func__.0+0x318>
    800072b4:	307230ef          	jal	8002adba <printf>
    800072b8:	02900513          	li	a0,41
    800072bc:	7ec220ef          	jal	80029aa8 <putchar>
    800072c0:	b75d                	j	80007266 <wfi_exception_tests_11+0x8e>

00000000800072c2 <wfi_exception_tests_12>:

bool wfi_exception_tests_12() {
    800072c2:	1141                	addi	sp,sp,-16

    TEST_START();
    800072c4:	00024597          	auipc	a1,0x24
    800072c8:	4b458593          	addi	a1,a1,1204 # 8002b778 <__func__.11>
    800072cc:	00026517          	auipc	a0,0x26
    800072d0:	03450513          	addi	a0,a0,52 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_12() {
    800072d4:	e406                	sd	ra,8(sp)
    800072d6:	e022                	sd	s0,0(sp)
    TEST_START();
    800072d8:	2e3230ef          	jal	8002adba <printf>
    800072dc:	4529                	li	a0,10
    800072de:	7ca220ef          	jal	80029aa8 <putchar>
    //mstatus.TW=0时，在HS模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800072e2:	4511                	li	a0,4
    800072e4:	b8bf90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800072e8:	002007b7          	lui	a5,0x200
    800072ec:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_SIE, 0x0);
    800072f0:	10405073          	csrwi	sie,0
    CSRW(mideleg, (uint64_t)-1);
    800072f4:	57fd                	li	a5,-1
    800072f6:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_HS);
    800072fa:	450d                	li	a0,3
    800072fc:	b73f90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80007300:	a73f90ef          	jal	80000d72 <test_setup_except_function>
    80007304:	10500073          	wfi
    wfi();

    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007308:	08200593          	li	a1,130
    8000730c:	00027617          	auipc	a2,0x27
    80007310:	6e460613          	addi	a2,a2,1764 # 8002e9f0 <__func__.0+0x19d0>
    80007314:	00026517          	auipc	a0,0x26
    80007318:	00450513          	addi	a0,a0,4 # 8002d318 <__func__.0+0x2f8>
    8000731c:	29f230ef          	jal	8002adba <printf>
    80007320:	0004a797          	auipc	a5,0x4a
    80007324:	cf17c783          	lbu	a5,-783(a5) # 80051011 <excpt+0x1>
    80007328:	00026597          	auipc	a1,0x26
    8000732c:	fb858593          	addi	a1,a1,-72 # 8002d2e0 <__func__.0+0x2c0>
    80007330:	c789                	beqz	a5,8000733a <wfi_exception_tests_12+0x78>
    80007332:	00026597          	auipc	a1,0x26
    80007336:	fbe58593          	addi	a1,a1,-66 # 8002d2f0 <__func__.0+0x2d0>
    8000733a:	00026517          	auipc	a0,0x26
    8000733e:	ff650513          	addi	a0,a0,-10 # 8002d330 <__func__.0+0x310>
    80007342:	279230ef          	jal	8002adba <printf>
    80007346:	0004a797          	auipc	a5,0x4a
    8000734a:	ccb7c783          	lbu	a5,-821(a5) # 80051011 <excpt+0x1>
    8000734e:	e7a1                	bnez	a5,80007396 <wfi_exception_tests_12+0xd4>
    80007350:	4529                	li	a0,10
    80007352:	756220ef          	jal	80029aa8 <putchar>
    80007356:	0004a797          	auipc	a5,0x4a
    8000735a:	cbb7c783          	lbu	a5,-837(a5) # 80051011 <excpt+0x1>
    8000735e:	e795                	bnez	a5,8000738a <wfi_exception_tests_12+0xc8>
    80007360:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007362:	00026597          	auipc	a1,0x26
    80007366:	f7e58593          	addi	a1,a1,-130 # 8002d2e0 <__func__.0+0x2c0>
    8000736a:	00026517          	auipc	a0,0x26
    8000736e:	02e50513          	addi	a0,a0,46 # 8002d398 <__func__.0+0x378>
    80007372:	249230ef          	jal	8002adba <printf>
    80007376:	4511                	li	a0,4
    80007378:	af7f90ef          	jal	80000e6e <goto_priv>
    8000737c:	c0efa0ef          	jal	8000178a <reset_state>
}
    80007380:	60a2                	ld	ra,8(sp)
    80007382:	8522                	mv	a0,s0
    80007384:	6402                	ld	s0,0(sp)
    80007386:	0141                	addi	sp,sp,16
    80007388:	8082                	ret
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    8000738a:	4401                	li	s0,0
    TEST_END();
    8000738c:	00026597          	auipc	a1,0x26
    80007390:	f6458593          	addi	a1,a1,-156 # 8002d2f0 <__func__.0+0x2d0>
    80007394:	bfd9                	j	8000736a <wfi_exception_tests_12+0xa8>
    TEST_ASSERT("VS-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007396:	00026517          	auipc	a0,0x26
    8000739a:	fa250513          	addi	a0,a0,-94 # 8002d338 <__func__.0+0x318>
    8000739e:	21d230ef          	jal	8002adba <printf>
    800073a2:	02900513          	li	a0,41
    800073a6:	702220ef          	jal	80029aa8 <putchar>
    800073aa:	b75d                	j	80007350 <wfi_exception_tests_12+0x8e>

00000000800073ac <wfi_exception_tests_13>:

bool wfi_exception_tests_13() {
    800073ac:	1141                	addi	sp,sp,-16

    TEST_START();
    800073ae:	00024597          	auipc	a1,0x24
    800073b2:	3e258593          	addi	a1,a1,994 # 8002b790 <__func__.10>
    800073b6:	00026517          	auipc	a0,0x26
    800073ba:	f4a50513          	addi	a0,a0,-182 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_13() {
    800073be:	e406                	sd	ra,8(sp)
    800073c0:	e022                	sd	s0,0(sp)
    TEST_START();
    800073c2:	1f9230ef          	jal	8002adba <printf>
    800073c6:	4529                	li	a0,10
    800073c8:	6e0220ef          	jal	80029aa8 <putchar>
    //mstatus.TW=0时，在M模式下，发生中断，中断使能未拉高，中断被代理到低特权模式
    
    goto_priv(PRIV_M); 
    800073cc:	4511                	li	a0,4
    800073ce:	aa1f90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800073d2:	002007b7          	lui	a5,0x200
    800073d6:	3007b073          	csrc	mstatus,a5
    CSRW(CSR_MIE, 0x0);
    800073da:	30405073          	csrwi	mie,0
    CSRW(mideleg, (uint64_t)-1);
    800073de:	57fd                	li	a5,-1
    800073e0:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_M);
    800073e4:	4511                	li	a0,4
    800073e6:	a89f90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800073ea:	989f90ef          	jal	80000d72 <test_setup_except_function>
    800073ee:	10500073          	wfi
    wfi();

    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    800073f2:	08200593          	li	a1,130
    800073f6:	00027617          	auipc	a2,0x27
    800073fa:	64260613          	addi	a2,a2,1602 # 8002ea38 <__func__.0+0x1a18>
    800073fe:	00026517          	auipc	a0,0x26
    80007402:	f1a50513          	addi	a0,a0,-230 # 8002d318 <__func__.0+0x2f8>
    80007406:	1b5230ef          	jal	8002adba <printf>
    8000740a:	0004a797          	auipc	a5,0x4a
    8000740e:	c077c783          	lbu	a5,-1017(a5) # 80051011 <excpt+0x1>
    80007412:	00026597          	auipc	a1,0x26
    80007416:	ece58593          	addi	a1,a1,-306 # 8002d2e0 <__func__.0+0x2c0>
    8000741a:	c789                	beqz	a5,80007424 <wfi_exception_tests_13+0x78>
    8000741c:	00026597          	auipc	a1,0x26
    80007420:	ed458593          	addi	a1,a1,-300 # 8002d2f0 <__func__.0+0x2d0>
    80007424:	00026517          	auipc	a0,0x26
    80007428:	f0c50513          	addi	a0,a0,-244 # 8002d330 <__func__.0+0x310>
    8000742c:	18f230ef          	jal	8002adba <printf>
    80007430:	0004a797          	auipc	a5,0x4a
    80007434:	be17c783          	lbu	a5,-1055(a5) # 80051011 <excpt+0x1>
    80007438:	e7a1                	bnez	a5,80007480 <wfi_exception_tests_13+0xd4>
    8000743a:	4529                	li	a0,10
    8000743c:	66c220ef          	jal	80029aa8 <putchar>
    80007440:	0004a797          	auipc	a5,0x4a
    80007444:	bd17c783          	lbu	a5,-1071(a5) # 80051011 <excpt+0x1>
    80007448:	e795                	bnez	a5,80007474 <wfi_exception_tests_13+0xc8>
    8000744a:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    8000744c:	00026597          	auipc	a1,0x26
    80007450:	e9458593          	addi	a1,a1,-364 # 8002d2e0 <__func__.0+0x2c0>
    80007454:	00026517          	auipc	a0,0x26
    80007458:	f4450513          	addi	a0,a0,-188 # 8002d398 <__func__.0+0x378>
    8000745c:	15f230ef          	jal	8002adba <printf>
    80007460:	4511                	li	a0,4
    80007462:	a0df90ef          	jal	80000e6e <goto_priv>
    80007466:	b24fa0ef          	jal	8000178a <reset_state>
}
    8000746a:	60a2                	ld	ra,8(sp)
    8000746c:	8522                	mv	a0,s0
    8000746e:	6402                	ld	s0,0(sp)
    80007470:	0141                	addi	sp,sp,16
    80007472:	8082                	ret
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007474:	4401                	li	s0,0
    TEST_END();
    80007476:	00026597          	auipc	a1,0x26
    8000747a:	e7a58593          	addi	a1,a1,-390 # 8002d2f0 <__func__.0+0x2d0>
    8000747e:	bfd9                	j	80007454 <wfi_exception_tests_13+0xa8>
    TEST_ASSERT("M-mode wfi is not awakened when mstatus.TW=0 and mideleg=1 and xie=0",
    80007480:	00026517          	auipc	a0,0x26
    80007484:	eb850513          	addi	a0,a0,-328 # 8002d338 <__func__.0+0x318>
    80007488:	133230ef          	jal	8002adba <printf>
    8000748c:	02900513          	li	a0,41
    80007490:	618220ef          	jal	80029aa8 <putchar>
    80007494:	b75d                	j	8000743a <wfi_exception_tests_13+0x8e>

0000000080007496 <wfi_exception_tests_14>:

bool wfi_exception_tests_14() {
    80007496:	1141                	addi	sp,sp,-16

    TEST_START();
    80007498:	00024597          	auipc	a1,0x24
    8000749c:	31058593          	addi	a1,a1,784 # 8002b7a8 <__func__.9>
    800074a0:	00026517          	auipc	a0,0x26
    800074a4:	e6050513          	addi	a0,a0,-416 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_14() {
    800074a8:	e406                	sd	ra,8(sp)
    800074aa:	e022                	sd	s0,0(sp)
    TEST_START();
    800074ac:	10f230ef          	jal	8002adba <printf>
    800074b0:	4529                	li	a0,10
    800074b2:	5f6220ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    800074b6:	4511                	li	a0,4
    800074b8:	9b7f90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800074bc:	002007b7          	lui	a5,0x200
    800074c0:	3007b073          	csrc	mstatus,a5
    CSRS(mideleg, 0b0100); 
    800074c4:	30326073          	csrsi	mideleg,4
    CSRS(CSR_HIE, 0b0100);
    800074c8:	60426073          	csrsi	hie,4

    goto_priv(PRIV_VS);
    800074cc:	4509                	li	a0,2
    800074ce:	9a1f90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800074d2:	8a1f90ef          	jal	80000d72 <test_setup_except_function>
    800074d6:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    800074da:	08200593          	li	a1,130
    800074de:	00027617          	auipc	a2,0x27
    800074e2:	41a60613          	addi	a2,a2,1050 # 8002e8f8 <__func__.0+0x18d8>
    800074e6:	00026517          	auipc	a0,0x26
    800074ea:	e3250513          	addi	a0,a0,-462 # 8002d318 <__func__.0+0x2f8>
    800074ee:	0cd230ef          	jal	8002adba <printf>
    800074f2:	0004a797          	auipc	a5,0x4a
    800074f6:	b1f7c783          	lbu	a5,-1249(a5) # 80051011 <excpt+0x1>
    800074fa:	00026597          	auipc	a1,0x26
    800074fe:	de658593          	addi	a1,a1,-538 # 8002d2e0 <__func__.0+0x2c0>
    80007502:	c789                	beqz	a5,8000750c <wfi_exception_tests_14+0x76>
    80007504:	00026597          	auipc	a1,0x26
    80007508:	dec58593          	addi	a1,a1,-532 # 8002d2f0 <__func__.0+0x2d0>
    8000750c:	00026517          	auipc	a0,0x26
    80007510:	e2450513          	addi	a0,a0,-476 # 8002d330 <__func__.0+0x310>
    80007514:	0a7230ef          	jal	8002adba <printf>
    80007518:	0004a797          	auipc	a5,0x4a
    8000751c:	af97c783          	lbu	a5,-1287(a5) # 80051011 <excpt+0x1>
    80007520:	e7a1                	bnez	a5,80007568 <wfi_exception_tests_14+0xd2>
    80007522:	4529                	li	a0,10
    80007524:	584220ef          	jal	80029aa8 <putchar>
    80007528:	0004a797          	auipc	a5,0x4a
    8000752c:	ae97c783          	lbu	a5,-1303(a5) # 80051011 <excpt+0x1>
    80007530:	e795                	bnez	a5,8000755c <wfi_exception_tests_14+0xc6>
    80007532:	4405                	li	s0,1
        excpt.triggered == false
    ); 
    
    TEST_END();
    80007534:	00026597          	auipc	a1,0x26
    80007538:	dac58593          	addi	a1,a1,-596 # 8002d2e0 <__func__.0+0x2c0>
    8000753c:	00026517          	auipc	a0,0x26
    80007540:	e5c50513          	addi	a0,a0,-420 # 8002d398 <__func__.0+0x378>
    80007544:	077230ef          	jal	8002adba <printf>
    80007548:	4511                	li	a0,4
    8000754a:	925f90ef          	jal	80000e6e <goto_priv>
    8000754e:	a3cfa0ef          	jal	8000178a <reset_state>
}
    80007552:	60a2                	ld	ra,8(sp)
    80007554:	8522                	mv	a0,s0
    80007556:	6402                	ld	s0,0(sp)
    80007558:	0141                	addi	sp,sp,16
    8000755a:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    8000755c:	4401                	li	s0,0
    TEST_END();
    8000755e:	00026597          	auipc	a1,0x26
    80007562:	d9258593          	addi	a1,a1,-622 # 8002d2f0 <__func__.0+0x2d0>
    80007566:	bfd9                	j	8000753c <wfi_exception_tests_14+0xa6>
    TEST_ASSERT("VS-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007568:	00026517          	auipc	a0,0x26
    8000756c:	dd050513          	addi	a0,a0,-560 # 8002d338 <__func__.0+0x318>
    80007570:	04b230ef          	jal	8002adba <printf>
    80007574:	02900513          	li	a0,41
    80007578:	530220ef          	jal	80029aa8 <putchar>
    8000757c:	b75d                	j	80007522 <wfi_exception_tests_14+0x8c>

000000008000757e <wfi_exception_tests_15>:



bool wfi_exception_tests_15() {
    8000757e:	1101                	addi	sp,sp,-32

    TEST_START();
    80007580:	00024597          	auipc	a1,0x24
    80007584:	24058593          	addi	a1,a1,576 # 8002b7c0 <__func__.8>
    80007588:	00026517          	auipc	a0,0x26
    8000758c:	d7850513          	addi	a0,a0,-648 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_15() {
    80007590:	ec06                	sd	ra,24(sp)
    80007592:	e822                	sd	s0,16(sp)
    80007594:	e426                	sd	s1,8(sp)
    TEST_START();
    80007596:	025230ef          	jal	8002adba <printf>
    8000759a:	4529                	li	a0,10
    8000759c:	50c220ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    800075a0:	4511                	li	a0,4
    800075a2:	8cdf90ef          	jal	80000e6e <goto_priv>
    CSRS(mstatus, MSTATUS_TW);
    800075a6:	002007b7          	lui	a5,0x200
    800075aa:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800075ae:	450d                	li	a0,3
    800075b0:	8bff90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800075b4:	fbef90ef          	jal	80000d72 <test_setup_except_function>
    800075b8:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    800075bc:	08200593          	li	a1,130
    800075c0:	00027617          	auipc	a2,0x27
    800075c4:	4c060613          	addi	a2,a2,1216 # 8002ea80 <__func__.0+0x1a60>
    800075c8:	00026517          	auipc	a0,0x26
    800075cc:	d5050513          	addi	a0,a0,-688 # 8002d318 <__func__.0+0x2f8>
    800075d0:	7ea230ef          	jal	8002adba <printf>
    800075d4:	0004a797          	auipc	a5,0x4a
    800075d8:	a3d7c783          	lbu	a5,-1475(a5) # 80051011 <excpt+0x1>
    800075dc:	0004a497          	auipc	s1,0x4a
    800075e0:	a3448493          	addi	s1,s1,-1484 # 80051010 <excpt>
    800075e4:	00026597          	auipc	a1,0x26
    800075e8:	d0c58593          	addi	a1,a1,-756 # 8002d2f0 <__func__.0+0x2d0>
    800075ec:	cf89                	beqz	a5,80007606 <wfi_exception_tests_15+0x88>
    800075ee:	6498                	ld	a4,8(s1)
    800075f0:	4789                	li	a5,2
    800075f2:	00026597          	auipc	a1,0x26
    800075f6:	cee58593          	addi	a1,a1,-786 # 8002d2e0 <__func__.0+0x2c0>
    800075fa:	00f70663          	beq	a4,a5,80007606 <wfi_exception_tests_15+0x88>
    800075fe:	00026597          	auipc	a1,0x26
    80007602:	cf258593          	addi	a1,a1,-782 # 8002d2f0 <__func__.0+0x2d0>
    80007606:	00026517          	auipc	a0,0x26
    8000760a:	d2a50513          	addi	a0,a0,-726 # 8002d330 <__func__.0+0x310>
    8000760e:	7ac230ef          	jal	8002adba <printf>
    80007612:	0004a797          	auipc	a5,0x4a
    80007616:	9ff7c783          	lbu	a5,-1537(a5) # 80051011 <excpt+0x1>
    8000761a:	c789                	beqz	a5,80007624 <wfi_exception_tests_15+0xa6>
    8000761c:	6498                	ld	a4,8(s1)
    8000761e:	4789                	li	a5,2
    80007620:	00f70c63          	beq	a4,a5,80007638 <wfi_exception_tests_15+0xba>
    80007624:	00026517          	auipc	a0,0x26
    80007628:	d1450513          	addi	a0,a0,-748 # 8002d338 <__func__.0+0x318>
    8000762c:	78e230ef          	jal	8002adba <printf>
    80007630:	02900513          	li	a0,41
    80007634:	474220ef          	jal	80029aa8 <putchar>
    80007638:	4529                	li	a0,10
    8000763a:	46e220ef          	jal	80029aa8 <putchar>
    8000763e:	0004a417          	auipc	s0,0x4a
    80007642:	9d344403          	lbu	s0,-1581(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80007646:	00026597          	auipc	a1,0x26
    8000764a:	caa58593          	addi	a1,a1,-854 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    8000764e:	cc11                	beqz	s0,8000766a <wfi_exception_tests_15+0xec>
    80007650:	6498                	ld	a4,8(s1)
    80007652:	4789                	li	a5,2
    TEST_END();
    80007654:	00026597          	auipc	a1,0x26
    80007658:	c8c58593          	addi	a1,a1,-884 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("S-mode wfi triggers illegal instructions exception when mstatus.tw = 1",
    8000765c:	00f70763          	beq	a4,a5,8000766a <wfi_exception_tests_15+0xec>
    80007660:	4401                	li	s0,0
    TEST_END();
    80007662:	00026597          	auipc	a1,0x26
    80007666:	c8e58593          	addi	a1,a1,-882 # 8002d2f0 <__func__.0+0x2d0>
    8000766a:	00026517          	auipc	a0,0x26
    8000766e:	d2e50513          	addi	a0,a0,-722 # 8002d398 <__func__.0+0x378>
    80007672:	748230ef          	jal	8002adba <printf>
    80007676:	4511                	li	a0,4
    80007678:	ff6f90ef          	jal	80000e6e <goto_priv>
    8000767c:	90efa0ef          	jal	8000178a <reset_state>
}
    80007680:	60e2                	ld	ra,24(sp)
    80007682:	8522                	mv	a0,s0
    80007684:	6442                	ld	s0,16(sp)
    80007686:	64a2                	ld	s1,8(sp)
    80007688:	6105                	addi	sp,sp,32
    8000768a:	8082                	ret

000000008000768c <wfi_exception_tests_16>:
     * Delegate the pending interrupt to hs mode so it doesnt immediately 
     * trigger a trap to machine when we jump to vs.
     */


bool wfi_exception_tests_16() {
    8000768c:	1101                	addi	sp,sp,-32

    TEST_START();
    8000768e:	00024597          	auipc	a1,0x24
    80007692:	14a58593          	addi	a1,a1,330 # 8002b7d8 <__func__.7>
    80007696:	00026517          	auipc	a0,0x26
    8000769a:	c6a50513          	addi	a0,a0,-918 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_16() {
    8000769e:	ec06                	sd	ra,24(sp)
    800076a0:	e822                	sd	s0,16(sp)
    800076a2:	e426                	sd	s1,8(sp)
    TEST_START();
    800076a4:	716230ef          	jal	8002adba <printf>
    800076a8:	4529                	li	a0,10
    800076aa:	3fe220ef          	jal	80029aa8 <putchar>
    CSRS(mstatus, MSTATUS_TW);
    800076ae:	002007b7          	lui	a5,0x200
    800076b2:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HIDELEG, 0b0100);      
    800076b6:	60326073          	csrsi	hideleg,4
    CSRS(CSR_VSIE, 0b0010);           
    800076ba:	20416073          	csrsi	vsie,2
    
    goto_priv(PRIV_VS);
    800076be:	4509                	li	a0,2
    800076c0:	faef90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800076c4:	eaef90ef          	jal	80000d72 <test_setup_except_function>
    800076c8:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    800076cc:	08200593          	li	a1,130
    800076d0:	00027617          	auipc	a2,0x27
    800076d4:	3f860613          	addi	a2,a2,1016 # 8002eac8 <__func__.0+0x1aa8>
    800076d8:	00026517          	auipc	a0,0x26
    800076dc:	c4050513          	addi	a0,a0,-960 # 8002d318 <__func__.0+0x2f8>
    800076e0:	6da230ef          	jal	8002adba <printf>
    800076e4:	0004a797          	auipc	a5,0x4a
    800076e8:	92d7c783          	lbu	a5,-1747(a5) # 80051011 <excpt+0x1>
    800076ec:	0004a497          	auipc	s1,0x4a
    800076f0:	92448493          	addi	s1,s1,-1756 # 80051010 <excpt>
    800076f4:	00026597          	auipc	a1,0x26
    800076f8:	bfc58593          	addi	a1,a1,-1028 # 8002d2f0 <__func__.0+0x2d0>
    800076fc:	cf89                	beqz	a5,80007716 <wfi_exception_tests_16+0x8a>
    800076fe:	6498                	ld	a4,8(s1)
    80007700:	4789                	li	a5,2
    80007702:	00026597          	auipc	a1,0x26
    80007706:	bde58593          	addi	a1,a1,-1058 # 8002d2e0 <__func__.0+0x2c0>
    8000770a:	00f70663          	beq	a4,a5,80007716 <wfi_exception_tests_16+0x8a>
    8000770e:	00026597          	auipc	a1,0x26
    80007712:	be258593          	addi	a1,a1,-1054 # 8002d2f0 <__func__.0+0x2d0>
    80007716:	00026517          	auipc	a0,0x26
    8000771a:	c1a50513          	addi	a0,a0,-998 # 8002d330 <__func__.0+0x310>
    8000771e:	69c230ef          	jal	8002adba <printf>
    80007722:	0004a797          	auipc	a5,0x4a
    80007726:	8ef7c783          	lbu	a5,-1809(a5) # 80051011 <excpt+0x1>
    8000772a:	c789                	beqz	a5,80007734 <wfi_exception_tests_16+0xa8>
    8000772c:	6498                	ld	a4,8(s1)
    8000772e:	4789                	li	a5,2
    80007730:	00f70c63          	beq	a4,a5,80007748 <wfi_exception_tests_16+0xbc>
    80007734:	00026517          	auipc	a0,0x26
    80007738:	c0450513          	addi	a0,a0,-1020 # 8002d338 <__func__.0+0x318>
    8000773c:	67e230ef          	jal	8002adba <printf>
    80007740:	02900513          	li	a0,41
    80007744:	364220ef          	jal	80029aa8 <putchar>
    80007748:	4529                	li	a0,10
    8000774a:	35e220ef          	jal	80029aa8 <putchar>
    8000774e:	0004a417          	auipc	s0,0x4a
    80007752:	8c344403          	lbu	s0,-1853(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    goto_priv(PRIV_M);
    80007756:	4511                	li	a0,4
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    80007758:	c409                	beqz	s0,80007762 <wfi_exception_tests_16+0xd6>
    8000775a:	6498                	ld	a4,8(s1)
    8000775c:	4789                	li	a5,2
    8000775e:	02f70e63          	beq	a4,a5,8000779a <wfi_exception_tests_16+0x10e>
    goto_priv(PRIV_M);
    80007762:	f0cf90ef          	jal	80000e6e <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    80007766:	002007b7          	lui	a5,0x200
    8000776a:	3007b073          	csrc	mstatus,a5
    TEST_ASSERT("VS-mode wfi causes illegal instruction exception when mstatus.tw = 1",
    8000776e:	4401                	li	s0,0
    TEST_END();
    80007770:	00026597          	auipc	a1,0x26
    80007774:	b8058593          	addi	a1,a1,-1152 # 8002d2f0 <__func__.0+0x2d0>
    80007778:	00026517          	auipc	a0,0x26
    8000777c:	c2050513          	addi	a0,a0,-992 # 8002d398 <__func__.0+0x378>
    80007780:	63a230ef          	jal	8002adba <printf>
    80007784:	4511                	li	a0,4
    80007786:	ee8f90ef          	jal	80000e6e <goto_priv>
    8000778a:	800fa0ef          	jal	8000178a <reset_state>
}
    8000778e:	60e2                	ld	ra,24(sp)
    80007790:	8522                	mv	a0,s0
    80007792:	6442                	ld	s0,16(sp)
    80007794:	64a2                	ld	s1,8(sp)
    80007796:	6105                	addi	sp,sp,32
    80007798:	8082                	ret
    goto_priv(PRIV_M);
    8000779a:	ed4f90ef          	jal	80000e6e <goto_priv>
    CSRC(mstatus, MSTATUS_TW);
    8000779e:	002007b7          	lui	a5,0x200
    800077a2:	3007b073          	csrc	mstatus,a5
    TEST_END();
    800077a6:	00026597          	auipc	a1,0x26
    800077aa:	b3a58593          	addi	a1,a1,-1222 # 8002d2e0 <__func__.0+0x2c0>
    800077ae:	b7e9                	j	80007778 <wfi_exception_tests_16+0xec>

00000000800077b0 <wfi_exception_tests_17>:

bool wfi_exception_tests_17() {
    800077b0:	1141                	addi	sp,sp,-16

    TEST_START();
    800077b2:	00024597          	auipc	a1,0x24
    800077b6:	03e58593          	addi	a1,a1,62 # 8002b7f0 <__func__.6>
    800077ba:	00026517          	auipc	a0,0x26
    800077be:	b4650513          	addi	a0,a0,-1210 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_17() {
    800077c2:	e406                	sd	ra,8(sp)
    800077c4:	e022                	sd	s0,0(sp)
    TEST_START();
    800077c6:	5f4230ef          	jal	8002adba <printf>
    800077ca:	4529                	li	a0,10
    800077cc:	2dc220ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    800077d0:	4511                	li	a0,4
    800077d2:	e9cf90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    800077d6:	002007b7          	lui	a5,0x200
    800077da:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_HSTATUS,HSTATUS_VTW);
    800077de:	6007b073          	csrc	hstatus,a5

    goto_priv(PRIV_VS);
    800077e2:	4509                	li	a0,2
    800077e4:	e8af90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800077e8:	d8af90ef          	jal	80000d72 <test_setup_except_function>
    800077ec:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    800077f0:	08200593          	li	a1,130
    800077f4:	00027617          	auipc	a2,0x27
    800077f8:	31c60613          	addi	a2,a2,796 # 8002eb10 <__func__.0+0x1af0>
    800077fc:	00026517          	auipc	a0,0x26
    80007800:	b1c50513          	addi	a0,a0,-1252 # 8002d318 <__func__.0+0x2f8>
    80007804:	5b6230ef          	jal	8002adba <printf>
    80007808:	0004a797          	auipc	a5,0x4a
    8000780c:	8097c783          	lbu	a5,-2039(a5) # 80051011 <excpt+0x1>
    80007810:	00026597          	auipc	a1,0x26
    80007814:	ad058593          	addi	a1,a1,-1328 # 8002d2e0 <__func__.0+0x2c0>
    80007818:	c789                	beqz	a5,80007822 <wfi_exception_tests_17+0x72>
    8000781a:	00026597          	auipc	a1,0x26
    8000781e:	ad658593          	addi	a1,a1,-1322 # 8002d2f0 <__func__.0+0x2d0>
    80007822:	00026517          	auipc	a0,0x26
    80007826:	b0e50513          	addi	a0,a0,-1266 # 8002d330 <__func__.0+0x310>
    8000782a:	590230ef          	jal	8002adba <printf>
    8000782e:	00049797          	auipc	a5,0x49
    80007832:	7e37c783          	lbu	a5,2019(a5) # 80051011 <excpt+0x1>
    80007836:	e7a1                	bnez	a5,8000787e <wfi_exception_tests_17+0xce>
    80007838:	4529                	li	a0,10
    8000783a:	26e220ef          	jal	80029aa8 <putchar>
    8000783e:	00049797          	auipc	a5,0x49
    80007842:	7d37c783          	lbu	a5,2003(a5) # 80051011 <excpt+0x1>
    80007846:	e795                	bnez	a5,80007872 <wfi_exception_tests_17+0xc2>
    80007848:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    8000784a:	00026597          	auipc	a1,0x26
    8000784e:	a9658593          	addi	a1,a1,-1386 # 8002d2e0 <__func__.0+0x2c0>
    80007852:	00026517          	auipc	a0,0x26
    80007856:	b4650513          	addi	a0,a0,-1210 # 8002d398 <__func__.0+0x378>
    8000785a:	560230ef          	jal	8002adba <printf>
    8000785e:	4511                	li	a0,4
    80007860:	e0ef90ef          	jal	80000e6e <goto_priv>
    80007864:	f27f90ef          	jal	8000178a <reset_state>
}
    80007868:	60a2                	ld	ra,8(sp)
    8000786a:	8522                	mv	a0,s0
    8000786c:	6402                	ld	s0,0(sp)
    8000786e:	0141                	addi	sp,sp,16
    80007870:	8082                	ret
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    80007872:	4401                	li	s0,0
    TEST_END();
    80007874:	00026597          	auipc	a1,0x26
    80007878:	a7c58593          	addi	a1,a1,-1412 # 8002d2f0 <__func__.0+0x2d0>
    8000787c:	bfd9                	j	80007852 <wfi_exception_tests_17+0xa2>
    TEST_ASSERT("VS-mode wfi does not trap when mstatus.tw = 0 and hstatus.vtw = 0",
    8000787e:	00026517          	auipc	a0,0x26
    80007882:	aba50513          	addi	a0,a0,-1350 # 8002d338 <__func__.0+0x318>
    80007886:	534230ef          	jal	8002adba <printf>
    8000788a:	02900513          	li	a0,41
    8000788e:	21a220ef          	jal	80029aa8 <putchar>
    80007892:	b75d                	j	80007838 <wfi_exception_tests_17+0x88>

0000000080007894 <wfi_exception_tests_18>:


bool wfi_exception_tests_18() {
    80007894:	1101                	addi	sp,sp,-32

    TEST_START();
    80007896:	00024597          	auipc	a1,0x24
    8000789a:	f7258593          	addi	a1,a1,-142 # 8002b808 <__func__.5>
    8000789e:	00026517          	auipc	a0,0x26
    800078a2:	a6250513          	addi	a0,a0,-1438 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_18() {
    800078a6:	ec06                	sd	ra,24(sp)
    800078a8:	e822                	sd	s0,16(sp)
    800078aa:	e426                	sd	s1,8(sp)
    TEST_START();
    800078ac:	50e230ef          	jal	8002adba <printf>
    800078b0:	4529                	li	a0,10
    800078b2:	1f6220ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    800078b6:	4511                	li	a0,4
    800078b8:	db6f90ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTW);  
    800078bc:	002007b7          	lui	a5,0x200
    800078c0:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_VS);
    800078c4:	4509                	li	a0,2
    800078c6:	da8f90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800078ca:	ca8f90ef          	jal	80000d72 <test_setup_except_function>
    800078ce:	10500073          	wfi
    wfi();
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    800078d2:	08200593          	li	a1,130
    800078d6:	00027617          	auipc	a2,0x27
    800078da:	28260613          	addi	a2,a2,642 # 8002eb58 <__func__.0+0x1b38>
    800078de:	00026517          	auipc	a0,0x26
    800078e2:	a3a50513          	addi	a0,a0,-1478 # 8002d318 <__func__.0+0x2f8>
    800078e6:	4d4230ef          	jal	8002adba <printf>
    800078ea:	00049797          	auipc	a5,0x49
    800078ee:	7277c783          	lbu	a5,1831(a5) # 80051011 <excpt+0x1>
    800078f2:	00049497          	auipc	s1,0x49
    800078f6:	71e48493          	addi	s1,s1,1822 # 80051010 <excpt>
    800078fa:	00026597          	auipc	a1,0x26
    800078fe:	9f658593          	addi	a1,a1,-1546 # 8002d2f0 <__func__.0+0x2d0>
    80007902:	cf89                	beqz	a5,8000791c <wfi_exception_tests_18+0x88>
    80007904:	6498                	ld	a4,8(s1)
    80007906:	47d9                	li	a5,22
    80007908:	00026597          	auipc	a1,0x26
    8000790c:	9d858593          	addi	a1,a1,-1576 # 8002d2e0 <__func__.0+0x2c0>
    80007910:	00f70663          	beq	a4,a5,8000791c <wfi_exception_tests_18+0x88>
    80007914:	00026597          	auipc	a1,0x26
    80007918:	9dc58593          	addi	a1,a1,-1572 # 8002d2f0 <__func__.0+0x2d0>
    8000791c:	00026517          	auipc	a0,0x26
    80007920:	a1450513          	addi	a0,a0,-1516 # 8002d330 <__func__.0+0x310>
    80007924:	496230ef          	jal	8002adba <printf>
    80007928:	00049797          	auipc	a5,0x49
    8000792c:	6e97c783          	lbu	a5,1769(a5) # 80051011 <excpt+0x1>
    80007930:	c789                	beqz	a5,8000793a <wfi_exception_tests_18+0xa6>
    80007932:	6498                	ld	a4,8(s1)
    80007934:	47d9                	li	a5,22
    80007936:	00f70c63          	beq	a4,a5,8000794e <wfi_exception_tests_18+0xba>
    8000793a:	00026517          	auipc	a0,0x26
    8000793e:	9fe50513          	addi	a0,a0,-1538 # 8002d338 <__func__.0+0x318>
    80007942:	478230ef          	jal	8002adba <printf>
    80007946:	02900513          	li	a0,41
    8000794a:	15e220ef          	jal	80029aa8 <putchar>
    8000794e:	4529                	li	a0,10
    80007950:	158220ef          	jal	80029aa8 <putchar>
    80007954:	00049417          	auipc	s0,0x49
    80007958:	6bd44403          	lbu	s0,1725(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    8000795c:	00026597          	auipc	a1,0x26
    80007960:	99458593          	addi	a1,a1,-1644 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007964:	cc11                	beqz	s0,80007980 <wfi_exception_tests_18+0xec>
    80007966:	6498                	ld	a4,8(s1)
    80007968:	47d9                	li	a5,22
    TEST_END();
    8000796a:	00026597          	auipc	a1,0x26
    8000796e:	97658593          	addi	a1,a1,-1674 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi triggers virtual inst. exception  when hstatus.vtw = 1",
    80007972:	00f70763          	beq	a4,a5,80007980 <wfi_exception_tests_18+0xec>
    80007976:	4401                	li	s0,0
    TEST_END();
    80007978:	00026597          	auipc	a1,0x26
    8000797c:	97858593          	addi	a1,a1,-1672 # 8002d2f0 <__func__.0+0x2d0>
    80007980:	00026517          	auipc	a0,0x26
    80007984:	a1850513          	addi	a0,a0,-1512 # 8002d398 <__func__.0+0x378>
    80007988:	432230ef          	jal	8002adba <printf>
    8000798c:	4511                	li	a0,4
    8000798e:	ce0f90ef          	jal	80000e6e <goto_priv>
    80007992:	df9f90ef          	jal	8000178a <reset_state>
}
    80007996:	60e2                	ld	ra,24(sp)
    80007998:	8522                	mv	a0,s0
    8000799a:	6442                	ld	s0,16(sp)
    8000799c:	64a2                	ld	s1,8(sp)
    8000799e:	6105                	addi	sp,sp,32
    800079a0:	8082                	ret

00000000800079a2 <wfi_exception_tests_19>:

bool wfi_exception_tests_19() {
    800079a2:	1101                	addi	sp,sp,-32

    TEST_START();
    800079a4:	00024597          	auipc	a1,0x24
    800079a8:	e7c58593          	addi	a1,a1,-388 # 8002b820 <__func__.4>
    800079ac:	00026517          	auipc	a0,0x26
    800079b0:	95450513          	addi	a0,a0,-1708 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_19() {
    800079b4:	ec06                	sd	ra,24(sp)
    800079b6:	e822                	sd	s0,16(sp)
    800079b8:	e426                	sd	s1,8(sp)
    TEST_START();
    800079ba:	400230ef          	jal	8002adba <printf>
    800079be:	4529                	li	a0,10
    800079c0:	0e8220ef          	jal	80029aa8 <putchar>
    //V=1&mstatus.TW=0 , hstatus.vtw=1时，在VS模式下执行WFI指令，并未在一个约定时间内产生中断
    goto_priv(PRIV_M);
    800079c4:	4511                	li	a0,4
    800079c6:	ca8f90ef          	jal	80000e6e <goto_priv>

    CSRW(CSR_SIE, 0x0);
    800079ca:	10405073          	csrwi	sie,0
    CSRS(CSR_HSTATUS,HSTATUS_VTW);
    800079ce:	002007b7          	lui	a5,0x200
    800079d2:	6007a073          	csrs	hstatus,a5
    CSRC(mstatus, MSTATUS_TW);
    800079d6:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_VS);
    800079da:	4509                	li	a0,2
    800079dc:	c92f90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800079e0:	b92f90ef          	jal	80000d72 <test_setup_except_function>
    800079e4:	10500073          	wfi
    wfi();
        printf("%d\n",excpt.cause);
    800079e8:	00049417          	auipc	s0,0x49
    800079ec:	62840413          	addi	s0,s0,1576 # 80051010 <excpt>
    800079f0:	640c                	ld	a1,8(s0)
    800079f2:	00026517          	auipc	a0,0x26
    800079f6:	49650513          	addi	a0,a0,1174 # 8002de88 <__func__.0+0xe68>
    800079fa:	3c0230ef          	jal	8002adba <printf>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    800079fe:	08200593          	li	a1,130
    80007a02:	00027617          	auipc	a2,0x27
    80007a06:	19e60613          	addi	a2,a2,414 # 8002eba0 <__func__.0+0x1b80>
    80007a0a:	00026517          	auipc	a0,0x26
    80007a0e:	90e50513          	addi	a0,a0,-1778 # 8002d318 <__func__.0+0x2f8>
    80007a12:	3a8230ef          	jal	8002adba <printf>
    80007a16:	00049797          	auipc	a5,0x49
    80007a1a:	5fb7c783          	lbu	a5,1531(a5) # 80051011 <excpt+0x1>
    80007a1e:	00026597          	auipc	a1,0x26
    80007a22:	8d258593          	addi	a1,a1,-1838 # 8002d2f0 <__func__.0+0x2d0>
    80007a26:	cf89                	beqz	a5,80007a40 <wfi_exception_tests_19+0x9e>
    80007a28:	6418                	ld	a4,8(s0)
    80007a2a:	47d9                	li	a5,22
    80007a2c:	00026597          	auipc	a1,0x26
    80007a30:	8b458593          	addi	a1,a1,-1868 # 8002d2e0 <__func__.0+0x2c0>
    80007a34:	00f70663          	beq	a4,a5,80007a40 <wfi_exception_tests_19+0x9e>
    80007a38:	00026597          	auipc	a1,0x26
    80007a3c:	8b858593          	addi	a1,a1,-1864 # 8002d2f0 <__func__.0+0x2d0>
    80007a40:	00026517          	auipc	a0,0x26
    80007a44:	8f050513          	addi	a0,a0,-1808 # 8002d330 <__func__.0+0x310>
    80007a48:	372230ef          	jal	8002adba <printf>
    80007a4c:	00049797          	auipc	a5,0x49
    80007a50:	5c57c783          	lbu	a5,1477(a5) # 80051011 <excpt+0x1>
    80007a54:	c789                	beqz	a5,80007a5e <wfi_exception_tests_19+0xbc>
    80007a56:	6418                	ld	a4,8(s0)
    80007a58:	47d9                	li	a5,22
    80007a5a:	00f70c63          	beq	a4,a5,80007a72 <wfi_exception_tests_19+0xd0>
    80007a5e:	00026517          	auipc	a0,0x26
    80007a62:	8da50513          	addi	a0,a0,-1830 # 8002d338 <__func__.0+0x318>
    80007a66:	354230ef          	jal	8002adba <printf>
    80007a6a:	02900513          	li	a0,41
    80007a6e:	03a220ef          	jal	80029aa8 <putchar>
    80007a72:	4529                	li	a0,10
    80007a74:	034220ef          	jal	80029aa8 <putchar>
    80007a78:	00049497          	auipc	s1,0x49
    80007a7c:	5994c483          	lbu	s1,1433(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80007a80:	00026597          	auipc	a1,0x26
    80007a84:	87058593          	addi	a1,a1,-1936 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007a88:	cc91                	beqz	s1,80007aa4 <wfi_exception_tests_19+0x102>
    80007a8a:	6418                	ld	a4,8(s0)
    80007a8c:	47d9                	li	a5,22
    TEST_END();
    80007a8e:	00026597          	auipc	a1,0x26
    80007a92:	85258593          	addi	a1,a1,-1966 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VS-mode wfi causes virtual instruction exception when mstatus.tw=0",
    80007a96:	00f70763          	beq	a4,a5,80007aa4 <wfi_exception_tests_19+0x102>
    80007a9a:	4481                	li	s1,0
    TEST_END();
    80007a9c:	00026597          	auipc	a1,0x26
    80007aa0:	85458593          	addi	a1,a1,-1964 # 8002d2f0 <__func__.0+0x2d0>
    80007aa4:	00026517          	auipc	a0,0x26
    80007aa8:	8f450513          	addi	a0,a0,-1804 # 8002d398 <__func__.0+0x378>
    80007aac:	30e230ef          	jal	8002adba <printf>
    80007ab0:	4511                	li	a0,4
    80007ab2:	bbcf90ef          	jal	80000e6e <goto_priv>
    80007ab6:	cd5f90ef          	jal	8000178a <reset_state>
}
    80007aba:	60e2                	ld	ra,24(sp)
    80007abc:	6442                	ld	s0,16(sp)
    80007abe:	8526                	mv	a0,s1
    80007ac0:	64a2                	ld	s1,8(sp)
    80007ac2:	6105                	addi	sp,sp,32
    80007ac4:	8082                	ret

0000000080007ac6 <wfi_exception_tests_20>:





bool wfi_exception_tests_20() {
    80007ac6:	1141                	addi	sp,sp,-16

    TEST_START();
    80007ac8:	00024597          	auipc	a1,0x24
    80007acc:	d7058593          	addi	a1,a1,-656 # 8002b838 <__func__.3>
    80007ad0:	00026517          	auipc	a0,0x26
    80007ad4:	83050513          	addi	a0,a0,-2000 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_20() {
    80007ad8:	e406                	sd	ra,8(sp)
    80007ada:	e022                	sd	s0,0(sp)
    TEST_START();
    80007adc:	2de230ef          	jal	8002adba <printf>
    80007ae0:	4529                	li	a0,10
    80007ae2:	7c7210ef          	jal	80029aa8 <putchar>
    
    TEST_SETUP_EXCEPT();
    80007ae6:	a8cf90ef          	jal	80000d72 <test_setup_except_function>
    //mstatus.TW=0时，在HS模式下，中断未被禁用，且代理打开，执行wfi指令
    goto_priv(PRIV_M);
    80007aea:	4511                	li	a0,4
    80007aec:	b82f90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TW);
    80007af0:	002007b7          	lui	a5,0x200
    80007af4:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_HIE, 0b0100);
    80007af8:	60426073          	csrsi	hie,4
    CSRS(CSR_HIP, 0b0100);
    80007afc:	64426073          	csrsi	hip,4
    CSRS(mideleg, 0b0100);
    80007b00:	30326073          	csrsi	mideleg,4

    goto_priv(PRIV_HS);
    80007b04:	450d                	li	a0,3
    80007b06:	b68f90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80007b0a:	a68f90ef          	jal	80000d72 <test_setup_except_function>
    80007b0e:	10500073          	wfi
    wfi();
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007b12:	08200593          	li	a1,130
    80007b16:	00027617          	auipc	a2,0x27
    80007b1a:	0d260613          	addi	a2,a2,210 # 8002ebe8 <__func__.0+0x1bc8>
    80007b1e:	00025517          	auipc	a0,0x25
    80007b22:	7fa50513          	addi	a0,a0,2042 # 8002d318 <__func__.0+0x2f8>
    80007b26:	294230ef          	jal	8002adba <printf>
    80007b2a:	00049797          	auipc	a5,0x49
    80007b2e:	4e77c783          	lbu	a5,1255(a5) # 80051011 <excpt+0x1>
    80007b32:	00025597          	auipc	a1,0x25
    80007b36:	7ae58593          	addi	a1,a1,1966 # 8002d2e0 <__func__.0+0x2c0>
    80007b3a:	c789                	beqz	a5,80007b44 <wfi_exception_tests_20+0x7e>
    80007b3c:	00025597          	auipc	a1,0x25
    80007b40:	7b458593          	addi	a1,a1,1972 # 8002d2f0 <__func__.0+0x2d0>
    80007b44:	00025517          	auipc	a0,0x25
    80007b48:	7ec50513          	addi	a0,a0,2028 # 8002d330 <__func__.0+0x310>
    80007b4c:	26e230ef          	jal	8002adba <printf>
    80007b50:	00049797          	auipc	a5,0x49
    80007b54:	4c17c783          	lbu	a5,1217(a5) # 80051011 <excpt+0x1>
    80007b58:	e7a1                	bnez	a5,80007ba0 <wfi_exception_tests_20+0xda>
    80007b5a:	4529                	li	a0,10
    80007b5c:	74d210ef          	jal	80029aa8 <putchar>
    80007b60:	00049797          	auipc	a5,0x49
    80007b64:	4b17c783          	lbu	a5,1201(a5) # 80051011 <excpt+0x1>
    80007b68:	e795                	bnez	a5,80007b94 <wfi_exception_tests_20+0xce>
    80007b6a:	4405                	li	s0,1
        excpt.triggered == false
    );   

    TEST_END();
    80007b6c:	00025597          	auipc	a1,0x25
    80007b70:	77458593          	addi	a1,a1,1908 # 8002d2e0 <__func__.0+0x2c0>
    80007b74:	00026517          	auipc	a0,0x26
    80007b78:	82450513          	addi	a0,a0,-2012 # 8002d398 <__func__.0+0x378>
    80007b7c:	23e230ef          	jal	8002adba <printf>
    80007b80:	4511                	li	a0,4
    80007b82:	aecf90ef          	jal	80000e6e <goto_priv>
    80007b86:	c05f90ef          	jal	8000178a <reset_state>
}
    80007b8a:	60a2                	ld	ra,8(sp)
    80007b8c:	8522                	mv	a0,s0
    80007b8e:	6402                	ld	s0,0(sp)
    80007b90:	0141                	addi	sp,sp,16
    80007b92:	8082                	ret
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007b94:	4401                	li	s0,0
    TEST_END();
    80007b96:	00025597          	auipc	a1,0x25
    80007b9a:	75a58593          	addi	a1,a1,1882 # 8002d2f0 <__func__.0+0x2d0>
    80007b9e:	bfd9                	j	80007b74 <wfi_exception_tests_20+0xae>
    TEST_ASSERT("S-mode wfi does not trigger exception when Interrupt is not disabled and mstatus.TW=0 and mideleg=1",
    80007ba0:	00025517          	auipc	a0,0x25
    80007ba4:	79850513          	addi	a0,a0,1944 # 8002d338 <__func__.0+0x318>
    80007ba8:	212230ef          	jal	8002adba <printf>
    80007bac:	02900513          	li	a0,41
    80007bb0:	6f9210ef          	jal	80029aa8 <putchar>
    80007bb4:	b75d                	j	80007b5a <wfi_exception_tests_20+0x94>

0000000080007bb6 <wfi_exception_tests_21>:



bool wfi_exception_tests_21() {
    80007bb6:	1101                	addi	sp,sp,-32

    TEST_START();
    80007bb8:	00024597          	auipc	a1,0x24
    80007bbc:	c9858593          	addi	a1,a1,-872 # 8002b850 <__func__.2>
    80007bc0:	00025517          	auipc	a0,0x25
    80007bc4:	74050513          	addi	a0,a0,1856 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_21() {
    80007bc8:	ec06                	sd	ra,24(sp)
    80007bca:	e822                	sd	s0,16(sp)
    80007bcc:	e426                	sd	s1,8(sp)
    TEST_START();
    80007bce:	1ec230ef          	jal	8002adba <printf>
    80007bd2:	4529                	li	a0,10
    80007bd4:	6d5210ef          	jal	80029aa8 <putchar>

    //V=0&mstatus.TW=1时，且实现了S/HS模式，在U模式下执行WFI指令，并在一个约定时间内产生中断,wfi指令被唤醒，且中断会发生在下一条指令上，xepc=pc+4
    TEST_SETUP_EXCEPT();
    80007bd8:	99af90ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80007bdc:	4511                	li	a0,4
    80007bde:	a90f90ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_HIE, 0x2);
    80007be2:	60415073          	csrwi	hie,2
    
    CSRS(mstatus, MSTATUS_TW);
    80007be6:	002007b7          	lui	a5,0x200
    80007bea:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007bee:	4505                	li	a0,1
    80007bf0:	a7ef90ef          	jal	80000e6e <goto_priv>
    80007bf4:	10500073          	wfi
    wfi();
    // CSRW(CSR_HIP,0x2);

    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007bf8:	08200593          	li	a1,130
    80007bfc:	00027617          	auipc	a2,0x27
    80007c00:	05460613          	addi	a2,a2,84 # 8002ec50 <__func__.0+0x1c30>
    80007c04:	00025517          	auipc	a0,0x25
    80007c08:	71450513          	addi	a0,a0,1812 # 8002d318 <__func__.0+0x2f8>
    80007c0c:	1ae230ef          	jal	8002adba <printf>
    80007c10:	00049797          	auipc	a5,0x49
    80007c14:	4017c783          	lbu	a5,1025(a5) # 80051011 <excpt+0x1>
    80007c18:	00049497          	auipc	s1,0x49
    80007c1c:	3f848493          	addi	s1,s1,1016 # 80051010 <excpt>
    80007c20:	00025597          	auipc	a1,0x25
    80007c24:	6d058593          	addi	a1,a1,1744 # 8002d2f0 <__func__.0+0x2d0>
    80007c28:	cf89                	beqz	a5,80007c42 <wfi_exception_tests_21+0x8c>
    80007c2a:	6498                	ld	a4,8(s1)
    80007c2c:	4789                	li	a5,2
    80007c2e:	00025597          	auipc	a1,0x25
    80007c32:	6b258593          	addi	a1,a1,1714 # 8002d2e0 <__func__.0+0x2c0>
    80007c36:	00f70663          	beq	a4,a5,80007c42 <wfi_exception_tests_21+0x8c>
    80007c3a:	00025597          	auipc	a1,0x25
    80007c3e:	6b658593          	addi	a1,a1,1718 # 8002d2f0 <__func__.0+0x2d0>
    80007c42:	00025517          	auipc	a0,0x25
    80007c46:	6ee50513          	addi	a0,a0,1774 # 8002d330 <__func__.0+0x310>
    80007c4a:	170230ef          	jal	8002adba <printf>
    80007c4e:	00049797          	auipc	a5,0x49
    80007c52:	3c37c783          	lbu	a5,963(a5) # 80051011 <excpt+0x1>
    80007c56:	c789                	beqz	a5,80007c60 <wfi_exception_tests_21+0xaa>
    80007c58:	6498                	ld	a4,8(s1)
    80007c5a:	4789                	li	a5,2
    80007c5c:	00f70c63          	beq	a4,a5,80007c74 <wfi_exception_tests_21+0xbe>
    80007c60:	00025517          	auipc	a0,0x25
    80007c64:	6d850513          	addi	a0,a0,1752 # 8002d338 <__func__.0+0x318>
    80007c68:	152230ef          	jal	8002adba <printf>
    80007c6c:	02900513          	li	a0,41
    80007c70:	639210ef          	jal	80029aa8 <putchar>
    80007c74:	4529                	li	a0,10
    80007c76:	633210ef          	jal	80029aa8 <putchar>
    80007c7a:	00049417          	auipc	s0,0x49
    80007c7e:	39744403          	lbu	s0,919(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007c82:	00025597          	auipc	a1,0x25
    80007c86:	66e58593          	addi	a1,a1,1646 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007c8a:	cc11                	beqz	s0,80007ca6 <wfi_exception_tests_21+0xf0>
    80007c8c:	6498                	ld	a4,8(s1)
    80007c8e:	4789                	li	a5,2
    TEST_END();
    80007c90:	00025597          	auipc	a1,0x25
    80007c94:	65058593          	addi	a1,a1,1616 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007c98:	00f70763          	beq	a4,a5,80007ca6 <wfi_exception_tests_21+0xf0>
    80007c9c:	4401                	li	s0,0
    TEST_END();
    80007c9e:	00025597          	auipc	a1,0x25
    80007ca2:	65258593          	addi	a1,a1,1618 # 8002d2f0 <__func__.0+0x2d0>
    80007ca6:	00025517          	auipc	a0,0x25
    80007caa:	6f250513          	addi	a0,a0,1778 # 8002d398 <__func__.0+0x378>
    80007cae:	10c230ef          	jal	8002adba <printf>
    80007cb2:	4511                	li	a0,4
    80007cb4:	9baf90ef          	jal	80000e6e <goto_priv>
    80007cb8:	ad3f90ef          	jal	8000178a <reset_state>
}
    80007cbc:	60e2                	ld	ra,24(sp)
    80007cbe:	8522                	mv	a0,s0
    80007cc0:	6442                	ld	s0,16(sp)
    80007cc2:	64a2                	ld	s1,8(sp)
    80007cc4:	6105                	addi	sp,sp,32
    80007cc6:	8082                	ret

0000000080007cc8 <wfi_exception_tests_22>:


bool wfi_exception_tests_22() {
    80007cc8:	1101                	addi	sp,sp,-32

    TEST_START();
    80007cca:	00024597          	auipc	a1,0x24
    80007cce:	b9e58593          	addi	a1,a1,-1122 # 8002b868 <__func__.1>
    80007cd2:	00025517          	auipc	a0,0x25
    80007cd6:	62e50513          	addi	a0,a0,1582 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_22() {
    80007cda:	ec06                	sd	ra,24(sp)
    80007cdc:	e822                	sd	s0,16(sp)
    80007cde:	e426                	sd	s1,8(sp)
    TEST_START();
    80007ce0:	0da230ef          	jal	8002adba <printf>
    80007ce4:	4529                	li	a0,10
    80007ce6:	5c3210ef          	jal	80029aa8 <putchar>

    //V=0&mstatus.TW=1时，如果实现了S/HS模式，在U模式下执行WFI指令，没有在一个约定时间内产生中断
    TEST_SETUP_EXCEPT();
    80007cea:	888f90ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80007cee:	4511                	li	a0,4
    80007cf0:	97ef90ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_HIE, 0);
    80007cf4:	60405073          	csrwi	hie,0
    CSRW(CSR_HIP,0);
    80007cf8:	64405073          	csrwi	hip,0
    CSRS(mstatus, MSTATUS_TW);
    80007cfc:	002007b7          	lui	a5,0x200
    80007d00:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HU);
    80007d04:	4505                	li	a0,1
    80007d06:	968f90ef          	jal	80000e6e <goto_priv>
    80007d0a:	10500073          	wfi
    wfi();
    
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007d0e:	08200593          	li	a1,130
    80007d12:	00027617          	auipc	a2,0x27
    80007d16:	f3e60613          	addi	a2,a2,-194 # 8002ec50 <__func__.0+0x1c30>
    80007d1a:	00025517          	auipc	a0,0x25
    80007d1e:	5fe50513          	addi	a0,a0,1534 # 8002d318 <__func__.0+0x2f8>
    80007d22:	098230ef          	jal	8002adba <printf>
    80007d26:	00049797          	auipc	a5,0x49
    80007d2a:	2eb7c783          	lbu	a5,747(a5) # 80051011 <excpt+0x1>
    80007d2e:	00049497          	auipc	s1,0x49
    80007d32:	2e248493          	addi	s1,s1,738 # 80051010 <excpt>
    80007d36:	00025597          	auipc	a1,0x25
    80007d3a:	5ba58593          	addi	a1,a1,1466 # 8002d2f0 <__func__.0+0x2d0>
    80007d3e:	cf89                	beqz	a5,80007d58 <wfi_exception_tests_22+0x90>
    80007d40:	6498                	ld	a4,8(s1)
    80007d42:	4789                	li	a5,2
    80007d44:	00025597          	auipc	a1,0x25
    80007d48:	59c58593          	addi	a1,a1,1436 # 8002d2e0 <__func__.0+0x2c0>
    80007d4c:	00f70663          	beq	a4,a5,80007d58 <wfi_exception_tests_22+0x90>
    80007d50:	00025597          	auipc	a1,0x25
    80007d54:	5a058593          	addi	a1,a1,1440 # 8002d2f0 <__func__.0+0x2d0>
    80007d58:	00025517          	auipc	a0,0x25
    80007d5c:	5d850513          	addi	a0,a0,1496 # 8002d330 <__func__.0+0x310>
    80007d60:	05a230ef          	jal	8002adba <printf>
    80007d64:	00049797          	auipc	a5,0x49
    80007d68:	2ad7c783          	lbu	a5,685(a5) # 80051011 <excpt+0x1>
    80007d6c:	c789                	beqz	a5,80007d76 <wfi_exception_tests_22+0xae>
    80007d6e:	6498                	ld	a4,8(s1)
    80007d70:	4789                	li	a5,2
    80007d72:	00f70c63          	beq	a4,a5,80007d8a <wfi_exception_tests_22+0xc2>
    80007d76:	00025517          	auipc	a0,0x25
    80007d7a:	5c250513          	addi	a0,a0,1474 # 8002d338 <__func__.0+0x318>
    80007d7e:	03c230ef          	jal	8002adba <printf>
    80007d82:	02900513          	li	a0,41
    80007d86:	523210ef          	jal	80029aa8 <putchar>
    80007d8a:	4529                	li	a0,10
    80007d8c:	51d210ef          	jal	80029aa8 <putchar>
    80007d90:	00049417          	auipc	s0,0x49
    80007d94:	28144403          	lbu	s0,641(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    ); 
    

    TEST_END();
    80007d98:	00025597          	auipc	a1,0x25
    80007d9c:	55858593          	addi	a1,a1,1368 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007da0:	cc11                	beqz	s0,80007dbc <wfi_exception_tests_22+0xf4>
    80007da2:	6498                	ld	a4,8(s1)
    80007da4:	4789                	li	a5,2
    TEST_END();
    80007da6:	00025597          	auipc	a1,0x25
    80007daa:	53a58593          	addi	a1,a1,1338 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU-mode wfi causes illegal instruction exception when mstatus.tw=1",
    80007dae:	00f70763          	beq	a4,a5,80007dbc <wfi_exception_tests_22+0xf4>
    80007db2:	4401                	li	s0,0
    TEST_END();
    80007db4:	00025597          	auipc	a1,0x25
    80007db8:	53c58593          	addi	a1,a1,1340 # 8002d2f0 <__func__.0+0x2d0>
    80007dbc:	00025517          	auipc	a0,0x25
    80007dc0:	5dc50513          	addi	a0,a0,1500 # 8002d398 <__func__.0+0x378>
    80007dc4:	7f7220ef          	jal	8002adba <printf>
    80007dc8:	4511                	li	a0,4
    80007dca:	8a4f90ef          	jal	80000e6e <goto_priv>
    80007dce:	9bdf90ef          	jal	8000178a <reset_state>
}
    80007dd2:	60e2                	ld	ra,24(sp)
    80007dd4:	8522                	mv	a0,s0
    80007dd6:	6442                	ld	s0,16(sp)
    80007dd8:	64a2                	ld	s1,8(sp)
    80007dda:	6105                	addi	sp,sp,32
    80007ddc:	8082                	ret

0000000080007dde <wfi_exception_tests_23>:


bool wfi_exception_tests_23() {
    80007dde:	1141                	addi	sp,sp,-16

    TEST_START();
    80007de0:	00024597          	auipc	a1,0x24
    80007de4:	aa058593          	addi	a1,a1,-1376 # 8002b880 <__func__.0>
    80007de8:	00025517          	auipc	a0,0x25
    80007dec:	51850513          	addi	a0,a0,1304 # 8002d300 <__func__.0+0x2e0>
bool wfi_exception_tests_23() {
    80007df0:	e406                	sd	ra,8(sp)
    TEST_START();
    80007df2:	7c9220ef          	jal	8002adba <printf>
    80007df6:	4529                	li	a0,10
    80007df8:	4b1210ef          	jal	80029aa8 <putchar>



    TEST_END();
    80007dfc:	00025597          	auipc	a1,0x25
    80007e00:	4e458593          	addi	a1,a1,1252 # 8002d2e0 <__func__.0+0x2c0>
    80007e04:	00025517          	auipc	a0,0x25
    80007e08:	59450513          	addi	a0,a0,1428 # 8002d398 <__func__.0+0x378>
    80007e0c:	7af220ef          	jal	8002adba <printf>
    80007e10:	4511                	li	a0,4
    80007e12:	85cf90ef          	jal	80000e6e <goto_priv>
    80007e16:	975f90ef          	jal	8000178a <reset_state>
}
    80007e1a:	60a2                	ld	ra,8(sp)
    80007e1c:	4505                	li	a0,1
    80007e1e:	0141                	addi	sp,sp,16
    80007e20:	8082                	ret

0000000080007e22 <tinst_tests_pf>:
#define TINST_CHECK_COMPRESSED(CHECK) (excpt.tinst == 0 ||\
    excpt.tinst == CHECK(expand_compressed_instruction(read_instruction(excpt.epc)) & ~0b10ULL))



bool tinst_tests_pf(){
    80007e22:	7179                	addi	sp,sp,-48
    
    TEST_START();
    80007e24:	00024597          	auipc	a1,0x24
    80007e28:	a7458593          	addi	a1,a1,-1420 # 8002b898 <__func__.3>
    80007e2c:	00025517          	auipc	a0,0x25
    80007e30:	4d450513          	addi	a0,a0,1236 # 8002d300 <__func__.0+0x2e0>
bool tinst_tests_pf(){
    80007e34:	f406                	sd	ra,40(sp)
    80007e36:	f022                	sd	s0,32(sp)
    80007e38:	ec26                	sd	s1,24(sp)
    80007e3a:	e84a                	sd	s2,16(sp)
    80007e3c:	e44e                	sd	s3,8(sp)
    TEST_START();
    80007e3e:	77d220ef          	jal	8002adba <printf>
    80007e42:	4529                	li	a0,10
    80007e44:	465210ef          	jal	80029aa8 <putchar>

    hspt_init();        
    80007e48:	f98f80ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    80007e4c:	450d                	li	a0,3
    80007e4e:	820f90ef          	jal	80000e6e <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    80007e52:	f21f80ef          	jal	80000d72 <test_setup_except_function>
            ".option pop\n\t" \
            : "=r"(value) : "r"(addr) : "memory"); \
        return value; \
    }

LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80007e56:	400197b7          	lui	a5,0x40019
    80007e5a:	078a                	slli	a5,a5,0x2
    80007e5c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80007e60:	00027617          	auipc	a2,0x27
    80007e64:	e3860613          	addi	a2,a2,-456 # 8002ec98 <__func__.0+0x1c78>
    80007e68:	08200593          	li	a1,130
    80007e6c:	00025517          	auipc	a0,0x25
    80007e70:	4ac50513          	addi	a0,a0,1196 # 8002d318 <__func__.0+0x2f8>
    80007e74:	747220ef          	jal	8002adba <printf>
    80007e78:	00049797          	auipc	a5,0x49
    80007e7c:	1997c783          	lbu	a5,409(a5) # 80051011 <excpt+0x1>
    80007e80:	00049417          	auipc	s0,0x49
    80007e84:	19040413          	addi	s0,s0,400 # 80051010 <excpt>
    80007e88:	e399                	bnez	a5,80007e8e <tinst_tests_pf+0x6c>
    80007e8a:	6000106f          	j	8000948a <tinst_tests_pf+0x1668>
    80007e8e:	6418                	ld	a4,8(s0)
    80007e90:	47b5                	li	a5,13
    80007e92:	00025597          	auipc	a1,0x25
    80007e96:	45e58593          	addi	a1,a1,1118 # 8002d2f0 <__func__.0+0x2d0>
    80007e9a:	00f71463          	bne	a4,a5,80007ea2 <tinst_tests_pf+0x80>
    80007e9e:	5a40106f          	j	80009442 <tinst_tests_pf+0x1620>
    80007ea2:	00025517          	auipc	a0,0x25
    80007ea6:	48e50513          	addi	a0,a0,1166 # 8002d330 <__func__.0+0x310>
    80007eaa:	711220ef          	jal	8002adba <printf>
    80007eae:	00049797          	auipc	a5,0x49
    80007eb2:	1637c783          	lbu	a5,355(a5) # 80051011 <excpt+0x1>
    80007eb6:	c799                	beqz	a5,80007ec4 <tinst_tests_pf+0xa2>
    80007eb8:	6418                	ld	a4,8(s0)
    80007eba:	47b5                	li	a5,13
    80007ebc:	00f71463          	bne	a4,a5,80007ec4 <tinst_tests_pf+0xa2>
    80007ec0:	6260106f          	j	800094e6 <tinst_tests_pf+0x16c4>
    80007ec4:	00025517          	auipc	a0,0x25
    80007ec8:	47450513          	addi	a0,a0,1140 # 8002d338 <__func__.0+0x318>
    80007ecc:	6ef220ef          	jal	8002adba <printf>
    80007ed0:	02900513          	li	a0,41
    80007ed4:	3d5210ef          	jal	80029aa8 <putchar>
    80007ed8:	4529                	li	a0,10
    80007eda:	3cf210ef          	jal	80029aa8 <putchar>
    80007ede:	00049797          	auipc	a5,0x49
    80007ee2:	1337c783          	lbu	a5,307(a5) # 80051011 <excpt+0x1>
    80007ee6:	c399                	beqz	a5,80007eec <tinst_tests_pf+0xca>
    80007ee8:	5ae0106f          	j	80009496 <tinst_tests_pf+0x1674>
    80007eec:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007eee:	e85f80ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80007ef2:	400197b7          	lui	a5,0x40019
    80007ef6:	078a                	slli	a5,a5,0x2
    80007ef8:	0007c783          	lbu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80007efc:	00027617          	auipc	a2,0x27
    80007f00:	e1c60613          	addi	a2,a2,-484 # 8002ed18 <__func__.0+0x1cf8>
    80007f04:	08200593          	li	a1,130
    80007f08:	00025517          	auipc	a0,0x25
    80007f0c:	41050513          	addi	a0,a0,1040 # 8002d318 <__func__.0+0x2f8>
    80007f10:	6ab220ef          	jal	8002adba <printf>
    80007f14:	00049797          	auipc	a5,0x49
    80007f18:	0fd7c783          	lbu	a5,253(a5) # 80051011 <excpt+0x1>
    80007f1c:	e399                	bnez	a5,80007f22 <tinst_tests_pf+0x100>
    80007f1e:	64c0106f          	j	8000956a <tinst_tests_pf+0x1748>
    80007f22:	6418                	ld	a4,8(s0)
    80007f24:	47b5                	li	a5,13
    80007f26:	00025597          	auipc	a1,0x25
    80007f2a:	3ca58593          	addi	a1,a1,970 # 8002d2f0 <__func__.0+0x2d0>
    80007f2e:	00f71463          	bne	a4,a5,80007f36 <tinst_tests_pf+0x114>
    80007f32:	5f00106f          	j	80009522 <tinst_tests_pf+0x1700>
    80007f36:	00025517          	auipc	a0,0x25
    80007f3a:	3fa50513          	addi	a0,a0,1018 # 8002d330 <__func__.0+0x310>
    80007f3e:	67d220ef          	jal	8002adba <printf>
    80007f42:	00049797          	auipc	a5,0x49
    80007f46:	0cf7c783          	lbu	a5,207(a5) # 80051011 <excpt+0x1>
    80007f4a:	c799                	beqz	a5,80007f58 <tinst_tests_pf+0x136>
    80007f4c:	6418                	ld	a4,8(s0)
    80007f4e:	47b5                	li	a5,13
    80007f50:	00f71463          	bne	a4,a5,80007f58 <tinst_tests_pf+0x136>
    80007f54:	23d0106f          	j	80009990 <tinst_tests_pf+0x1b6e>
    80007f58:	00025517          	auipc	a0,0x25
    80007f5c:	3e050513          	addi	a0,a0,992 # 8002d338 <__func__.0+0x318>
    80007f60:	65b220ef          	jal	8002adba <printf>
    80007f64:	02900513          	li	a0,41
    80007f68:	341210ef          	jal	80029aa8 <putchar>
    80007f6c:	4529                	li	a0,10
    80007f6e:	33b210ef          	jal	80029aa8 <putchar>
    80007f72:	00090e63          	beqz	s2,80007f8e <tinst_tests_pf+0x16c>
    80007f76:	00049797          	auipc	a5,0x49
    80007f7a:	09b7c783          	lbu	a5,155(a5) # 80051011 <excpt+0x1>
    80007f7e:	c799                	beqz	a5,80007f8c <tinst_tests_pf+0x16a>
    80007f80:	6418                	ld	a4,8(s0)
    80007f82:	47b5                	li	a5,13
    80007f84:	00f71463          	bne	a4,a5,80007f8c <tinst_tests_pf+0x16a>
    80007f88:	64d0106f          	j	80009dd4 <tinst_tests_pf+0x1fb2>
    80007f8c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80007f8e:	de5f80ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    80007f92:	400197b7          	lui	a5,0x40019
    80007f96:	078a                	slli	a5,a5,0x2
    80007f98:	00079783          	lh	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80007f9c:	00027617          	auipc	a2,0x27
    80007fa0:	dbc60613          	addi	a2,a2,-580 # 8002ed58 <__func__.0+0x1d38>
    80007fa4:	08200593          	li	a1,130
    80007fa8:	00025517          	auipc	a0,0x25
    80007fac:	37050513          	addi	a0,a0,880 # 8002d318 <__func__.0+0x2f8>
    80007fb0:	60b220ef          	jal	8002adba <printf>
    80007fb4:	00049797          	auipc	a5,0x49
    80007fb8:	05d7c783          	lbu	a5,93(a5) # 80051011 <excpt+0x1>
    80007fbc:	e399                	bnez	a5,80007fc2 <tinst_tests_pf+0x1a0>
    80007fbe:	6000106f          	j	800095be <tinst_tests_pf+0x179c>
    80007fc2:	6418                	ld	a4,8(s0)
    80007fc4:	47b5                	li	a5,13
    80007fc6:	00025597          	auipc	a1,0x25
    80007fca:	32a58593          	addi	a1,a1,810 # 8002d2f0 <__func__.0+0x2d0>
    80007fce:	00f71463          	bne	a4,a5,80007fd6 <tinst_tests_pf+0x1b4>
    80007fd2:	5a40106f          	j	80009576 <tinst_tests_pf+0x1754>
    80007fd6:	00025517          	auipc	a0,0x25
    80007fda:	35a50513          	addi	a0,a0,858 # 8002d330 <__func__.0+0x310>
    80007fde:	5dd220ef          	jal	8002adba <printf>
    80007fe2:	00049797          	auipc	a5,0x49
    80007fe6:	02f7c783          	lbu	a5,47(a5) # 80051011 <excpt+0x1>
    80007fea:	c799                	beqz	a5,80007ff8 <tinst_tests_pf+0x1d6>
    80007fec:	6418                	ld	a4,8(s0)
    80007fee:	47b5                	li	a5,13
    80007ff0:	00f71463          	bne	a4,a5,80007ff8 <tinst_tests_pf+0x1d6>
    80007ff4:	6990106f          	j	80009e8c <tinst_tests_pf+0x206a>
    80007ff8:	00025517          	auipc	a0,0x25
    80007ffc:	34050513          	addi	a0,a0,832 # 8002d338 <__func__.0+0x318>
    80008000:	5bb220ef          	jal	8002adba <printf>
    80008004:	02900513          	li	a0,41
    80008008:	2a1210ef          	jal	80029aa8 <putchar>
    8000800c:	4529                	li	a0,10
    8000800e:	29b210ef          	jal	80029aa8 <putchar>
    80008012:	00090e63          	beqz	s2,8000802e <tinst_tests_pf+0x20c>
    80008016:	00049797          	auipc	a5,0x49
    8000801a:	ffb7c783          	lbu	a5,-5(a5) # 80051011 <excpt+0x1>
    8000801e:	c799                	beqz	a5,8000802c <tinst_tests_pf+0x20a>
    80008020:	6418                	ld	a4,8(s0)
    80008022:	47b5                	li	a5,13
    80008024:	00f71463          	bne	a4,a5,8000802c <tinst_tests_pf+0x20a>
    80008028:	5eb0106f          	j	80009e12 <tinst_tests_pf+0x1ff0>
    8000802c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000802e:	d45f80ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    80008032:	400197b7          	lui	a5,0x40019
    80008036:	078a                	slli	a5,a5,0x2
    80008038:	0007d783          	lhu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    8000803c:	00027617          	auipc	a2,0x27
    80008040:	d5c60613          	addi	a2,a2,-676 # 8002ed98 <__func__.0+0x1d78>
    80008044:	08200593          	li	a1,130
    80008048:	00025517          	auipc	a0,0x25
    8000804c:	2d050513          	addi	a0,a0,720 # 8002d318 <__func__.0+0x2f8>
    80008050:	56b220ef          	jal	8002adba <printf>
    80008054:	00049797          	auipc	a5,0x49
    80008058:	fbd7c783          	lbu	a5,-67(a5) # 80051011 <excpt+0x1>
    8000805c:	e399                	bnez	a5,80008062 <tinst_tests_pf+0x240>
    8000805e:	5b40106f          	j	80009612 <tinst_tests_pf+0x17f0>
    80008062:	6418                	ld	a4,8(s0)
    80008064:	47b5                	li	a5,13
    80008066:	00025597          	auipc	a1,0x25
    8000806a:	28a58593          	addi	a1,a1,650 # 8002d2f0 <__func__.0+0x2d0>
    8000806e:	00f71463          	bne	a4,a5,80008076 <tinst_tests_pf+0x254>
    80008072:	5580106f          	j	800095ca <tinst_tests_pf+0x17a8>
    80008076:	00025517          	auipc	a0,0x25
    8000807a:	2ba50513          	addi	a0,a0,698 # 8002d330 <__func__.0+0x310>
    8000807e:	53d220ef          	jal	8002adba <printf>
    80008082:	00049797          	auipc	a5,0x49
    80008086:	f8f7c783          	lbu	a5,-113(a5) # 80051011 <excpt+0x1>
    8000808a:	c799                	beqz	a5,80008098 <tinst_tests_pf+0x276>
    8000808c:	6418                	ld	a4,8(s0)
    8000808e:	47b5                	li	a5,13
    80008090:	00f71463          	bne	a4,a5,80008098 <tinst_tests_pf+0x276>
    80008094:	6990106f          	j	80009f2c <tinst_tests_pf+0x210a>
    80008098:	00025517          	auipc	a0,0x25
    8000809c:	2a050513          	addi	a0,a0,672 # 8002d338 <__func__.0+0x318>
    800080a0:	51b220ef          	jal	8002adba <printf>
    800080a4:	02900513          	li	a0,41
    800080a8:	201210ef          	jal	80029aa8 <putchar>
    800080ac:	4529                	li	a0,10
    800080ae:	1fb210ef          	jal	80029aa8 <putchar>
    800080b2:	00090e63          	beqz	s2,800080ce <tinst_tests_pf+0x2ac>
    800080b6:	00049797          	auipc	a5,0x49
    800080ba:	f5b7c783          	lbu	a5,-165(a5) # 80051011 <excpt+0x1>
    800080be:	c799                	beqz	a5,800080cc <tinst_tests_pf+0x2aa>
    800080c0:	6418                	ld	a4,8(s0)
    800080c2:	47b5                	li	a5,13
    800080c4:	00f71463          	bne	a4,a5,800080cc <tinst_tests_pf+0x2aa>
    800080c8:	5890106f          	j	80009e50 <tinst_tests_pf+0x202e>
    800080cc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800080ce:	ca5f80ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    800080d2:	400197b7          	lui	a5,0x40019
    800080d6:	078a                	slli	a5,a5,0x2
    800080d8:	0007a783          	lw	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800080dc:	00027617          	auipc	a2,0x27
    800080e0:	cfc60613          	addi	a2,a2,-772 # 8002edd8 <__func__.0+0x1db8>
    800080e4:	08200593          	li	a1,130
    800080e8:	00025517          	auipc	a0,0x25
    800080ec:	23050513          	addi	a0,a0,560 # 8002d318 <__func__.0+0x2f8>
    800080f0:	4cb220ef          	jal	8002adba <printf>
    800080f4:	00049797          	auipc	a5,0x49
    800080f8:	f1d7c783          	lbu	a5,-227(a5) # 80051011 <excpt+0x1>
    800080fc:	e399                	bnez	a5,80008102 <tinst_tests_pf+0x2e0>
    800080fe:	5680106f          	j	80009666 <tinst_tests_pf+0x1844>
    80008102:	6418                	ld	a4,8(s0)
    80008104:	47b5                	li	a5,13
    80008106:	00025597          	auipc	a1,0x25
    8000810a:	1ea58593          	addi	a1,a1,490 # 8002d2f0 <__func__.0+0x2d0>
    8000810e:	00f71463          	bne	a4,a5,80008116 <tinst_tests_pf+0x2f4>
    80008112:	50c0106f          	j	8000961e <tinst_tests_pf+0x17fc>
    80008116:	00025517          	auipc	a0,0x25
    8000811a:	21a50513          	addi	a0,a0,538 # 8002d330 <__func__.0+0x310>
    8000811e:	49d220ef          	jal	8002adba <printf>
    80008122:	00049797          	auipc	a5,0x49
    80008126:	eef7c783          	lbu	a5,-273(a5) # 80051011 <excpt+0x1>
    8000812a:	c799                	beqz	a5,80008138 <tinst_tests_pf+0x316>
    8000812c:	6418                	ld	a4,8(s0)
    8000812e:	47b5                	li	a5,13
    80008130:	00f71463          	bne	a4,a5,80008138 <tinst_tests_pf+0x316>
    80008134:	68b0106f          	j	80009fbe <tinst_tests_pf+0x219c>
    80008138:	00025517          	auipc	a0,0x25
    8000813c:	20050513          	addi	a0,a0,512 # 8002d338 <__func__.0+0x318>
    80008140:	47b220ef          	jal	8002adba <printf>
    80008144:	02900513          	li	a0,41
    80008148:	161210ef          	jal	80029aa8 <putchar>
    8000814c:	4529                	li	a0,10
    8000814e:	15b210ef          	jal	80029aa8 <putchar>
    80008152:	00090a63          	beqz	s2,80008166 <tinst_tests_pf+0x344>
    80008156:	00049797          	auipc	a5,0x49
    8000815a:	ebb7c783          	lbu	a5,-325(a5) # 80051011 <excpt+0x1>
    8000815e:	c399                	beqz	a5,80008164 <tinst_tests_pf+0x342>
    80008160:	06d0106f          	j	800099cc <tinst_tests_pf+0x1baa>
    80008164:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008166:	c0df80ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000816a:	400197b7          	lui	a5,0x40019
    8000816e:	078a                	slli	a5,a5,0x2
    80008170:	0007e783          	lwu	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80008174:	00027617          	auipc	a2,0x27
    80008178:	ca460613          	addi	a2,a2,-860 # 8002ee18 <__func__.0+0x1df8>
    8000817c:	08200593          	li	a1,130
    80008180:	00025517          	auipc	a0,0x25
    80008184:	19850513          	addi	a0,a0,408 # 8002d318 <__func__.0+0x2f8>
    80008188:	433220ef          	jal	8002adba <printf>
    8000818c:	00049797          	auipc	a5,0x49
    80008190:	e857c783          	lbu	a5,-379(a5) # 80051011 <excpt+0x1>
    80008194:	e399                	bnez	a5,8000819a <tinst_tests_pf+0x378>
    80008196:	5240106f          	j	800096ba <tinst_tests_pf+0x1898>
    8000819a:	6418                	ld	a4,8(s0)
    8000819c:	47b5                	li	a5,13
    8000819e:	00025597          	auipc	a1,0x25
    800081a2:	15258593          	addi	a1,a1,338 # 8002d2f0 <__func__.0+0x2d0>
    800081a6:	00f71463          	bne	a4,a5,800081ae <tinst_tests_pf+0x38c>
    800081aa:	4c80106f          	j	80009672 <tinst_tests_pf+0x1850>
    800081ae:	00025517          	auipc	a0,0x25
    800081b2:	18250513          	addi	a0,a0,386 # 8002d330 <__func__.0+0x310>
    800081b6:	405220ef          	jal	8002adba <printf>
    800081ba:	00049797          	auipc	a5,0x49
    800081be:	e577c783          	lbu	a5,-425(a5) # 80051011 <excpt+0x1>
    800081c2:	c799                	beqz	a5,800081d0 <tinst_tests_pf+0x3ae>
    800081c4:	6418                	ld	a4,8(s0)
    800081c6:	47b5                	li	a5,13
    800081c8:	00f71463          	bne	a4,a5,800081d0 <tinst_tests_pf+0x3ae>
    800081cc:	6890106f          	j	8000a054 <tinst_tests_pf+0x2232>
    800081d0:	00025517          	auipc	a0,0x25
    800081d4:	16850513          	addi	a0,a0,360 # 8002d338 <__func__.0+0x318>
    800081d8:	3e3220ef          	jal	8002adba <printf>
    800081dc:	02900513          	li	a0,41
    800081e0:	0c9210ef          	jal	80029aa8 <putchar>
    800081e4:	4529                	li	a0,10
    800081e6:	0c3210ef          	jal	80029aa8 <putchar>
    800081ea:	00090a63          	beqz	s2,800081fe <tinst_tests_pf+0x3dc>
    800081ee:	00049797          	auipc	a5,0x49
    800081f2:	e237c783          	lbu	a5,-477(a5) # 80051011 <excpt+0x1>
    800081f6:	c399                	beqz	a5,800081fc <tinst_tests_pf+0x3da>
    800081f8:	0850106f          	j	80009a7c <tinst_tests_pf+0x1c5a>
    800081fc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800081fe:	b75f80ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80008202:	400197b7          	lui	a5,0x40019
    80008206:	078a                	slli	a5,a5,0x2
    80008208:	0007b783          	ld	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000820c:	00027617          	auipc	a2,0x27
    80008210:	c4c60613          	addi	a2,a2,-948 # 8002ee58 <__func__.0+0x1e38>
    80008214:	08200593          	li	a1,130
    80008218:	00025517          	auipc	a0,0x25
    8000821c:	10050513          	addi	a0,a0,256 # 8002d318 <__func__.0+0x2f8>
    80008220:	39b220ef          	jal	8002adba <printf>
    80008224:	00049797          	auipc	a5,0x49
    80008228:	ded7c783          	lbu	a5,-531(a5) # 80051011 <excpt+0x1>
    8000822c:	e399                	bnez	a5,80008232 <tinst_tests_pf+0x410>
    8000822e:	4e00106f          	j	8000970e <tinst_tests_pf+0x18ec>
    80008232:	6418                	ld	a4,8(s0)
    80008234:	47b5                	li	a5,13
    80008236:	00025597          	auipc	a1,0x25
    8000823a:	0ba58593          	addi	a1,a1,186 # 8002d2f0 <__func__.0+0x2d0>
    8000823e:	00f71463          	bne	a4,a5,80008246 <tinst_tests_pf+0x424>
    80008242:	4840106f          	j	800096c6 <tinst_tests_pf+0x18a4>
    80008246:	00025517          	auipc	a0,0x25
    8000824a:	0ea50513          	addi	a0,a0,234 # 8002d330 <__func__.0+0x310>
    8000824e:	36d220ef          	jal	8002adba <printf>
    80008252:	00049797          	auipc	a5,0x49
    80008256:	dbf7c783          	lbu	a5,-577(a5) # 80051011 <excpt+0x1>
    8000825a:	c799                	beqz	a5,80008268 <tinst_tests_pf+0x446>
    8000825c:	6418                	ld	a4,8(s0)
    8000825e:	47b5                	li	a5,13
    80008260:	00f71463          	bne	a4,a5,80008268 <tinst_tests_pf+0x446>
    80008264:	6870106f          	j	8000a0ea <tinst_tests_pf+0x22c8>
    80008268:	00025517          	auipc	a0,0x25
    8000826c:	0d050513          	addi	a0,a0,208 # 8002d338 <__func__.0+0x318>
    80008270:	34b220ef          	jal	8002adba <printf>
    80008274:	02900513          	li	a0,41
    80008278:	031210ef          	jal	80029aa8 <putchar>
    8000827c:	4529                	li	a0,10
    8000827e:	02b210ef          	jal	80029aa8 <putchar>
    80008282:	00090a63          	beqz	s2,80008296 <tinst_tests_pf+0x474>
    80008286:	00049797          	auipc	a5,0x49
    8000828a:	d8b7c783          	lbu	a5,-629(a5) # 80051011 <excpt+0x1>
    8000828e:	c399                	beqz	a5,80008294 <tinst_tests_pf+0x472>
    80008290:	0370106f          	j	80009ac6 <tinst_tests_pf+0x1ca4>
    80008294:	4901                	li	s2,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    80008296:	addf80ef          	jal	80000d72 <test_setup_except_function>
            ".option pop\n\t" \
            :: "r"(value), "r"(addr):  "memory" \
        ); \
    }

STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000829a:	400197b7          	lui	a5,0x40019
    8000829e:	078a                	slli	a5,a5,0x2
    800082a0:	573d                	li	a4,-17
    800082a2:	00e78023          	sb	a4,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    800082a6:	00027617          	auipc	a2,0x27
    800082aa:	bf260613          	addi	a2,a2,-1038 # 8002ee98 <__func__.0+0x1e78>
    800082ae:	08200593          	li	a1,130
    800082b2:	00025517          	auipc	a0,0x25
    800082b6:	06650513          	addi	a0,a0,102 # 8002d318 <__func__.0+0x2f8>
    800082ba:	301220ef          	jal	8002adba <printf>
    800082be:	00049797          	auipc	a5,0x49
    800082c2:	d537c783          	lbu	a5,-685(a5) # 80051011 <excpt+0x1>
    800082c6:	e399                	bnez	a5,800082cc <tinst_tests_pf+0x4aa>
    800082c8:	4a00106f          	j	80009768 <tinst_tests_pf+0x1946>
    800082cc:	6418                	ld	a4,8(s0)
    800082ce:	47bd                	li	a5,15
    800082d0:	00025597          	auipc	a1,0x25
    800082d4:	02058593          	addi	a1,a1,32 # 8002d2f0 <__func__.0+0x2d0>
    800082d8:	00f71463          	bne	a4,a5,800082e0 <tinst_tests_pf+0x4be>
    800082dc:	43e0106f          	j	8000971a <tinst_tests_pf+0x18f8>
    800082e0:	00025517          	auipc	a0,0x25
    800082e4:	05050513          	addi	a0,a0,80 # 8002d330 <__func__.0+0x310>
    800082e8:	2d3220ef          	jal	8002adba <printf>
    800082ec:	00049797          	auipc	a5,0x49
    800082f0:	d257c783          	lbu	a5,-731(a5) # 80051011 <excpt+0x1>
    800082f4:	c799                	beqz	a5,80008302 <tinst_tests_pf+0x4e0>
    800082f6:	6418                	ld	a4,8(s0)
    800082f8:	47bd                	li	a5,15
    800082fa:	00f71463          	bne	a4,a5,80008302 <tinst_tests_pf+0x4e0>
    800082fe:	6830106f          	j	8000a180 <tinst_tests_pf+0x235e>
    80008302:	00025517          	auipc	a0,0x25
    80008306:	03650513          	addi	a0,a0,54 # 8002d338 <__func__.0+0x318>
    8000830a:	2b1220ef          	jal	8002adba <printf>
    8000830e:	02900513          	li	a0,41
    80008312:	796210ef          	jal	80029aa8 <putchar>
    80008316:	4529                	li	a0,10
    80008318:	790210ef          	jal	80029aa8 <putchar>
    8000831c:	00090a63          	beqz	s2,80008330 <tinst_tests_pf+0x50e>
    80008320:	00049797          	auipc	a5,0x49
    80008324:	cf17c783          	lbu	a5,-783(a5) # 80051011 <excpt+0x1>
    80008328:	c399                	beqz	a5,8000832e <tinst_tests_pf+0x50c>
    8000832a:	7e60106f          	j	80009b10 <tinst_tests_pf+0x1cee>
    8000832e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008330:	a43f80ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80008334:	77f1                	lui	a5,0xffffc
    80008336:	40019737          	lui	a4,0x40019
    8000833a:	eef7879b          	addiw	a5,a5,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000833e:	070a                	slli	a4,a4,0x2
    80008340:	00f71023          	sh	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80008344:	00027617          	auipc	a2,0x27
    80008348:	b9460613          	addi	a2,a2,-1132 # 8002eed8 <__func__.0+0x1eb8>
    8000834c:	08200593          	li	a1,130
    80008350:	00025517          	auipc	a0,0x25
    80008354:	fc850513          	addi	a0,a0,-56 # 8002d318 <__func__.0+0x2f8>
    80008358:	263220ef          	jal	8002adba <printf>
    8000835c:	00049797          	auipc	a5,0x49
    80008360:	cb57c783          	lbu	a5,-843(a5) # 80051011 <excpt+0x1>
    80008364:	e399                	bnez	a5,8000836a <tinst_tests_pf+0x548>
    80008366:	45c0106f          	j	800097c2 <tinst_tests_pf+0x19a0>
    8000836a:	6418                	ld	a4,8(s0)
    8000836c:	47bd                	li	a5,15
    8000836e:	00025597          	auipc	a1,0x25
    80008372:	f8258593          	addi	a1,a1,-126 # 8002d2f0 <__func__.0+0x2d0>
    80008376:	00f71463          	bne	a4,a5,8000837e <tinst_tests_pf+0x55c>
    8000837a:	3fa0106f          	j	80009774 <tinst_tests_pf+0x1952>
    8000837e:	00025517          	auipc	a0,0x25
    80008382:	fb250513          	addi	a0,a0,-78 # 8002d330 <__func__.0+0x310>
    80008386:	235220ef          	jal	8002adba <printf>
    8000838a:	00049797          	auipc	a5,0x49
    8000838e:	c877c783          	lbu	a5,-889(a5) # 80051011 <excpt+0x1>
    80008392:	c799                	beqz	a5,800083a0 <tinst_tests_pf+0x57e>
    80008394:	6418                	ld	a4,8(s0)
    80008396:	47bd                	li	a5,15
    80008398:	00f71463          	bne	a4,a5,800083a0 <tinst_tests_pf+0x57e>
    8000839c:	6810106f          	j	8000a21c <tinst_tests_pf+0x23fa>
    800083a0:	00025517          	auipc	a0,0x25
    800083a4:	f9850513          	addi	a0,a0,-104 # 8002d338 <__func__.0+0x318>
    800083a8:	213220ef          	jal	8002adba <printf>
    800083ac:	02900513          	li	a0,41
    800083b0:	6f8210ef          	jal	80029aa8 <putchar>
    800083b4:	4529                	li	a0,10
    800083b6:	6f2210ef          	jal	80029aa8 <putchar>
    800083ba:	00090a63          	beqz	s2,800083ce <tinst_tests_pf+0x5ac>
    800083be:	00049797          	auipc	a5,0x49
    800083c2:	c537c783          	lbu	a5,-941(a5) # 80051011 <excpt+0x1>
    800083c6:	c399                	beqz	a5,800083cc <tinst_tests_pf+0x5aa>
    800083c8:	7960106f          	j	80009b5e <tinst_tests_pf+0x1d3c>
    800083cc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800083ce:	9a5f80ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    800083d2:	deadc7b7          	lui	a5,0xdeadc
    800083d6:	40019737          	lui	a4,0x40019
    800083da:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    800083de:	070a                	slli	a4,a4,0x2
    800083e0:	00f72023          	sw	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    800083e4:	00027617          	auipc	a2,0x27
    800083e8:	b3460613          	addi	a2,a2,-1228 # 8002ef18 <__func__.0+0x1ef8>
    800083ec:	08200593          	li	a1,130
    800083f0:	00025517          	auipc	a0,0x25
    800083f4:	f2850513          	addi	a0,a0,-216 # 8002d318 <__func__.0+0x2f8>
    800083f8:	1c3220ef          	jal	8002adba <printf>
    800083fc:	00049797          	auipc	a5,0x49
    80008400:	c157c783          	lbu	a5,-1003(a5) # 80051011 <excpt+0x1>
    80008404:	e399                	bnez	a5,8000840a <tinst_tests_pf+0x5e8>
    80008406:	4160106f          	j	8000981c <tinst_tests_pf+0x19fa>
    8000840a:	6418                	ld	a4,8(s0)
    8000840c:	47bd                	li	a5,15
    8000840e:	00025597          	auipc	a1,0x25
    80008412:	ee258593          	addi	a1,a1,-286 # 8002d2f0 <__func__.0+0x2d0>
    80008416:	00f71463          	bne	a4,a5,8000841e <tinst_tests_pf+0x5fc>
    8000841a:	3b40106f          	j	800097ce <tinst_tests_pf+0x19ac>
    8000841e:	00025517          	auipc	a0,0x25
    80008422:	f1250513          	addi	a0,a0,-238 # 8002d330 <__func__.0+0x310>
    80008426:	195220ef          	jal	8002adba <printf>
    8000842a:	00049797          	auipc	a5,0x49
    8000842e:	be77c783          	lbu	a5,-1049(a5) # 80051011 <excpt+0x1>
    80008432:	c799                	beqz	a5,80008440 <tinst_tests_pf+0x61e>
    80008434:	6418                	ld	a4,8(s0)
    80008436:	47bd                	li	a5,15
    80008438:	00f71463          	bne	a4,a5,80008440 <tinst_tests_pf+0x61e>
    8000843c:	67d0106f          	j	8000a2b8 <tinst_tests_pf+0x2496>
    80008440:	00025517          	auipc	a0,0x25
    80008444:	ef850513          	addi	a0,a0,-264 # 8002d338 <__func__.0+0x318>
    80008448:	173220ef          	jal	8002adba <printf>
    8000844c:	02900513          	li	a0,41
    80008450:	658210ef          	jal	80029aa8 <putchar>
    80008454:	4529                	li	a0,10
    80008456:	652210ef          	jal	80029aa8 <putchar>
    8000845a:	00090a63          	beqz	s2,8000846e <tinst_tests_pf+0x64c>
    8000845e:	00049797          	auipc	a5,0x49
    80008462:	bb37c783          	lbu	a5,-1101(a5) # 80051011 <excpt+0x1>
    80008466:	c399                	beqz	a5,8000846c <tinst_tests_pf+0x64a>
    80008468:	7440106f          	j	80009bac <tinst_tests_pf+0x1d8a>
    8000846c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000846e:	905f80ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80008472:	37ab77b7          	lui	a5,0x37ab7
    80008476:	078a                	slli	a5,a5,0x2
    80008478:	40019737          	lui	a4,0x40019
    8000847c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80008480:	070a                	slli	a4,a4,0x2
    80008482:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80008486:	00027617          	auipc	a2,0x27
    8000848a:	ad260613          	addi	a2,a2,-1326 # 8002ef58 <__func__.0+0x1f38>
    8000848e:	08200593          	li	a1,130
    80008492:	00025517          	auipc	a0,0x25
    80008496:	e8650513          	addi	a0,a0,-378 # 8002d318 <__func__.0+0x2f8>
    8000849a:	121220ef          	jal	8002adba <printf>
    8000849e:	00049797          	auipc	a5,0x49
    800084a2:	b737c783          	lbu	a5,-1165(a5) # 80051011 <excpt+0x1>
    800084a6:	e399                	bnez	a5,800084ac <tinst_tests_pf+0x68a>
    800084a8:	3ce0106f          	j	80009876 <tinst_tests_pf+0x1a54>
    800084ac:	6418                	ld	a4,8(s0)
    800084ae:	47bd                	li	a5,15
    800084b0:	00025597          	auipc	a1,0x25
    800084b4:	e4058593          	addi	a1,a1,-448 # 8002d2f0 <__func__.0+0x2d0>
    800084b8:	00f71463          	bne	a4,a5,800084c0 <tinst_tests_pf+0x69e>
    800084bc:	36c0106f          	j	80009828 <tinst_tests_pf+0x1a06>
    800084c0:	00025517          	auipc	a0,0x25
    800084c4:	e7050513          	addi	a0,a0,-400 # 8002d330 <__func__.0+0x310>
    800084c8:	0f3220ef          	jal	8002adba <printf>
    800084cc:	00049797          	auipc	a5,0x49
    800084d0:	b457c783          	lbu	a5,-1211(a5) # 80051011 <excpt+0x1>
    800084d4:	c799                	beqz	a5,800084e2 <tinst_tests_pf+0x6c0>
    800084d6:	6418                	ld	a4,8(s0)
    800084d8:	47bd                	li	a5,15
    800084da:	00f71463          	bne	a4,a5,800084e2 <tinst_tests_pf+0x6c0>
    800084de:	6770106f          	j	8000a354 <tinst_tests_pf+0x2532>
    800084e2:	00025517          	auipc	a0,0x25
    800084e6:	e5650513          	addi	a0,a0,-426 # 8002d338 <__func__.0+0x318>
    800084ea:	0d1220ef          	jal	8002adba <printf>
    800084ee:	02900513          	li	a0,41
    800084f2:	5b6210ef          	jal	80029aa8 <putchar>
    800084f6:	4529                	li	a0,10
    800084f8:	5b0210ef          	jal	80029aa8 <putchar>
    800084fc:	00090a63          	beqz	s2,80008510 <tinst_tests_pf+0x6ee>
    80008500:	00049797          	auipc	a5,0x49
    80008504:	b117c783          	lbu	a5,-1263(a5) # 80051011 <excpt+0x1>
    80008508:	c399                	beqz	a5,8000850e <tinst_tests_pf+0x6ec>
    8000850a:	6f00106f          	j	80009bfa <tinst_tests_pf+0x1dd8>
    8000850e:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    80008510:	863f80ef          	jal	80000d72 <test_setup_except_function>
 * the asm extended chosen registers are part of the subset allowed
 * so we have to make sure.
 */

static inline uint64_t c_lw(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    80008514:	40019537          	lui	a0,0x40019
    80008518:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    8000851a:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000851c:	00027617          	auipc	a2,0x27
    80008520:	a7c60613          	addi	a2,a2,-1412 # 8002ef98 <__func__.0+0x1f78>
    80008524:	08200593          	li	a1,130
    80008528:	00025517          	auipc	a0,0x25
    8000852c:	df050513          	addi	a0,a0,-528 # 8002d318 <__func__.0+0x2f8>
    80008530:	08b220ef          	jal	8002adba <printf>
    80008534:	00049797          	auipc	a5,0x49
    80008538:	add7c783          	lbu	a5,-1315(a5) # 80051011 <excpt+0x1>
    8000853c:	c799                	beqz	a5,8000854a <tinst_tests_pf+0x728>
    8000853e:	6418                	ld	a4,8(s0)
    80008540:	47b5                	li	a5,13
    80008542:	00f71463          	bne	a4,a5,8000854a <tinst_tests_pf+0x728>
    80008546:	7fe0106f          	j	80009d44 <tinst_tests_pf+0x1f22>
    8000854a:	00025597          	auipc	a1,0x25
    8000854e:	da658593          	addi	a1,a1,-602 # 8002d2f0 <__func__.0+0x2d0>
    80008552:	00025517          	auipc	a0,0x25
    80008556:	dde50513          	addi	a0,a0,-546 # 8002d330 <__func__.0+0x310>
    8000855a:	061220ef          	jal	8002adba <printf>
    8000855e:	00049797          	auipc	a5,0x49
    80008562:	ab37c783          	lbu	a5,-1357(a5) # 80051011 <excpt+0x1>
    80008566:	c799                	beqz	a5,80008574 <tinst_tests_pf+0x752>
    80008568:	6418                	ld	a4,8(s0)
    8000856a:	47b5                	li	a5,13
    8000856c:	00f71463          	bne	a4,a5,80008574 <tinst_tests_pf+0x752>
    80008570:	6810106f          	j	8000a3f0 <tinst_tests_pf+0x25ce>
    80008574:	00025517          	auipc	a0,0x25
    80008578:	dc450513          	addi	a0,a0,-572 # 8002d338 <__func__.0+0x318>
    8000857c:	03f220ef          	jal	8002adba <printf>
    80008580:	02900513          	li	a0,41
    80008584:	524210ef          	jal	80029aa8 <putchar>
    80008588:	4529                	li	a0,10
    8000858a:	51e210ef          	jal	80029aa8 <putchar>
    8000858e:	00090a63          	beqz	s2,800085a2 <tinst_tests_pf+0x780>
    80008592:	00049797          	auipc	a5,0x49
    80008596:	a7f7c783          	lbu	a5,-1409(a5) # 80051011 <excpt+0x1>
    8000859a:	c399                	beqz	a5,800085a0 <tinst_tests_pf+0x77e>
    8000859c:	6ac0106f          	j	80009c48 <tinst_tests_pf+0x1e26>
    800085a0:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    800085a2:	fd0f80ef          	jal	80000d72 <test_setup_except_function>
    );
    return value;
}

static inline uint64_t c_ld(uintptr_t addr){
    register uint64_t _addr asm("a0") = addr;
    800085a6:	40019537          	lui	a0,0x40019
    800085aa:	050a                	slli	a0,a0,0x2
    register uint64_t value asm("a1");
    asm volatile(
    800085ac:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    800085ae:	00027617          	auipc	a2,0x27
    800085b2:	a2a60613          	addi	a2,a2,-1494 # 8002efd8 <__func__.0+0x1fb8>
        "c.ld    %0, 0(%1)\n\t"
        :"=r"(value): "r"(_addr) : "memory"
    );
    return value;
    800085b6:	84ae                	mv	s1,a1
    800085b8:	00025517          	auipc	a0,0x25
    800085bc:	d6050513          	addi	a0,a0,-672 # 8002d318 <__func__.0+0x2f8>
    800085c0:	08200593          	li	a1,130
    800085c4:	7f6220ef          	jal	8002adba <printf>
    800085c8:	00049797          	auipc	a5,0x49
    800085cc:	a497c783          	lbu	a5,-1463(a5) # 80051011 <excpt+0x1>
    800085d0:	c799                	beqz	a5,800085de <tinst_tests_pf+0x7bc>
    800085d2:	6418                	ld	a4,8(s0)
    800085d4:	47b5                	li	a5,13
    800085d6:	00f71463          	bne	a4,a5,800085de <tinst_tests_pf+0x7bc>
    800085da:	7be0106f          	j	80009d98 <tinst_tests_pf+0x1f76>
    800085de:	00025597          	auipc	a1,0x25
    800085e2:	d1258593          	addi	a1,a1,-750 # 8002d2f0 <__func__.0+0x2d0>
    800085e6:	00025517          	auipc	a0,0x25
    800085ea:	d4a50513          	addi	a0,a0,-694 # 8002d330 <__func__.0+0x310>
    800085ee:	7cc220ef          	jal	8002adba <printf>
    800085f2:	00049797          	auipc	a5,0x49
    800085f6:	a1f7c783          	lbu	a5,-1505(a5) # 80051011 <excpt+0x1>
    800085fa:	c799                	beqz	a5,80008608 <tinst_tests_pf+0x7e6>
    800085fc:	6418                	ld	a4,8(s0)
    800085fe:	47b5                	li	a5,13
    80008600:	00f71463          	bne	a4,a5,80008608 <tinst_tests_pf+0x7e6>
    80008604:	6730106f          	j	8000a476 <tinst_tests_pf+0x2654>
    80008608:	00025517          	auipc	a0,0x25
    8000860c:	d3050513          	addi	a0,a0,-720 # 8002d338 <__func__.0+0x318>
    80008610:	7aa220ef          	jal	8002adba <printf>
    80008614:	02900513          	li	a0,41
    80008618:	490210ef          	jal	80029aa8 <putchar>
    8000861c:	4529                	li	a0,10
    8000861e:	48a210ef          	jal	80029aa8 <putchar>
    80008622:	00090a63          	beqz	s2,80008636 <tinst_tests_pf+0x814>
    80008626:	00049797          	auipc	a5,0x49
    8000862a:	9eb7c783          	lbu	a5,-1557(a5) # 80051011 <excpt+0x1>
    8000862e:	c399                	beqz	a5,80008634 <tinst_tests_pf+0x812>
    80008630:	6520106f          	j	80009c82 <tinst_tests_pf+0x1e60>
    80008634:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    80008636:	f3cf80ef          	jal	80000d72 <test_setup_except_function>
}

static inline void c_sw(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    8000863a:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    8000863e:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    80008640:	050a                	slli	a0,a0,0x2
    asm volatile(
    80008642:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80008644:	00027617          	auipc	a2,0x27
    80008648:	95460613          	addi	a2,a2,-1708 # 8002ef98 <__func__.0+0x1f78>
    8000864c:	08200593          	li	a1,130
    80008650:	00025517          	auipc	a0,0x25
    80008654:	cc850513          	addi	a0,a0,-824 # 8002d318 <__func__.0+0x2f8>
    80008658:	762220ef          	jal	8002adba <printf>
    8000865c:	00049797          	auipc	a5,0x49
    80008660:	9b57c783          	lbu	a5,-1611(a5) # 80051011 <excpt+0x1>
    80008664:	c799                	beqz	a5,80008672 <tinst_tests_pf+0x850>
    80008666:	6418                	ld	a4,8(s0)
    80008668:	47bd                	li	a5,15
    8000866a:	00f71463          	bne	a4,a5,80008672 <tinst_tests_pf+0x850>
    8000866e:	73e0106f          	j	80009dac <tinst_tests_pf+0x1f8a>
    80008672:	00025597          	auipc	a1,0x25
    80008676:	c7e58593          	addi	a1,a1,-898 # 8002d2f0 <__func__.0+0x2d0>
    8000867a:	00025517          	auipc	a0,0x25
    8000867e:	cb650513          	addi	a0,a0,-842 # 8002d330 <__func__.0+0x310>
    80008682:	738220ef          	jal	8002adba <printf>
    80008686:	00049797          	auipc	a5,0x49
    8000868a:	98b7c783          	lbu	a5,-1653(a5) # 80051011 <excpt+0x1>
    8000868e:	c799                	beqz	a5,8000869c <tinst_tests_pf+0x87a>
    80008690:	6418                	ld	a4,8(s0)
    80008692:	47bd                	li	a5,15
    80008694:	00f71463          	bne	a4,a5,8000869c <tinst_tests_pf+0x87a>
    80008698:	6690106f          	j	8000a500 <tinst_tests_pf+0x26de>
    8000869c:	00025517          	auipc	a0,0x25
    800086a0:	c9c50513          	addi	a0,a0,-868 # 8002d338 <__func__.0+0x318>
    800086a4:	716220ef          	jal	8002adba <printf>
    800086a8:	02900513          	li	a0,41
    800086ac:	3fc210ef          	jal	80029aa8 <putchar>
    800086b0:	4529                	li	a0,10
    800086b2:	3f6210ef          	jal	80029aa8 <putchar>
    800086b6:	00090e63          	beqz	s2,800086d2 <tinst_tests_pf+0x8b0>
    800086ba:	00049797          	auipc	a5,0x49
    800086be:	9577c783          	lbu	a5,-1705(a5) # 80051011 <excpt+0x1>
    800086c2:	c799                	beqz	a5,800086d0 <tinst_tests_pf+0x8ae>
    800086c4:	6418                	ld	a4,8(s0)
    800086c6:	47bd                	li	a5,15
    800086c8:	00f71463          	bne	a4,a5,800086d0 <tinst_tests_pf+0x8ae>
    800086cc:	4920206f          	j	8000ab5e <tinst_tests_pf+0x2d3c>
    800086d0:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    800086d2:	ea0f80ef          	jal	80000d72 <test_setup_except_function>
        :: "r"(_value), "r"(_addr): "memory"
    );
}

static inline void c_sd(uintptr_t addr, uint64_t value){
    register uint64_t _addr asm("a0") = addr;
    800086d6:	40019537          	lui	a0,0x40019
    register uint64_t _value asm("a1") = value;
    800086da:	85a6                	mv	a1,s1
    register uint64_t _addr asm("a0") = addr;
    800086dc:	050a                	slli	a0,a0,0x2
    asm volatile(
    800086de:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    800086e0:	00027617          	auipc	a2,0x27
    800086e4:	93860613          	addi	a2,a2,-1736 # 8002f018 <__func__.0+0x1ff8>
    800086e8:	08200593          	li	a1,130
    800086ec:	00025517          	auipc	a0,0x25
    800086f0:	c2c50513          	addi	a0,a0,-980 # 8002d318 <__func__.0+0x2f8>
    800086f4:	6c6220ef          	jal	8002adba <printf>
    800086f8:	00049797          	auipc	a5,0x49
    800086fc:	9197c783          	lbu	a5,-1767(a5) # 80051011 <excpt+0x1>
    80008700:	c799                	beqz	a5,8000870e <tinst_tests_pf+0x8ec>
    80008702:	6418                	ld	a4,8(s0)
    80008704:	47bd                	li	a5,15
    80008706:	00f71463          	bne	a4,a5,8000870e <tinst_tests_pf+0x8ec>
    8000870a:	6b60106f          	j	80009dc0 <tinst_tests_pf+0x1f9e>
    8000870e:	00025597          	auipc	a1,0x25
    80008712:	be258593          	addi	a1,a1,-1054 # 8002d2f0 <__func__.0+0x2d0>
    80008716:	00025517          	auipc	a0,0x25
    8000871a:	c1a50513          	addi	a0,a0,-998 # 8002d330 <__func__.0+0x310>
    8000871e:	69c220ef          	jal	8002adba <printf>
    80008722:	00049797          	auipc	a5,0x49
    80008726:	8ef7c783          	lbu	a5,-1809(a5) # 80051011 <excpt+0x1>
    8000872a:	c799                	beqz	a5,80008738 <tinst_tests_pf+0x916>
    8000872c:	6418                	ld	a4,8(s0)
    8000872e:	47bd                	li	a5,15
    80008730:	00f71463          	bne	a4,a5,80008738 <tinst_tests_pf+0x916>
    80008734:	65b0106f          	j	8000a58e <tinst_tests_pf+0x276c>
    80008738:	00025517          	auipc	a0,0x25
    8000873c:	c0050513          	addi	a0,a0,-1024 # 8002d338 <__func__.0+0x318>
    80008740:	67a220ef          	jal	8002adba <printf>
    80008744:	02900513          	li	a0,41
    80008748:	360210ef          	jal	80029aa8 <putchar>
    8000874c:	4529                	li	a0,10
    8000874e:	35a210ef          	jal	80029aa8 <putchar>
    80008752:	00090e63          	beqz	s2,8000876e <tinst_tests_pf+0x94c>
    80008756:	00049797          	auipc	a5,0x49
    8000875a:	8bb7c783          	lbu	a5,-1861(a5) # 80051011 <excpt+0x1>
    8000875e:	c799                	beqz	a5,8000876c <tinst_tests_pf+0x94a>
    80008760:	6418                	ld	a4,8(s0)
    80008762:	47bd                	li	a5,15
    80008764:	00f71463          	bne	a4,a5,8000876c <tinst_tests_pf+0x94a>
    80008768:	42c0206f          	j	8000ab94 <tinst_tests_pf+0x2d72>
    8000876c:	4901                	li	s2,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000876e:	e04f80ef          	jal	80000d72 <test_setup_except_function>
    );
}

static inline uint32_t lr_w(uintptr_t addr){
    uint32_t value;
    asm volatile(
    80008772:	400197b7          	lui	a5,0x40019
    80008776:	078a                	slli	a5,a5,0x2
    80008778:	1007a7af          	lr.w	a5,(a5)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000877c:	00027617          	auipc	a2,0x27
    80008780:	8dc60613          	addi	a2,a2,-1828 # 8002f058 <__func__.0+0x2038>
    80008784:	08200593          	li	a1,130
    80008788:	00025517          	auipc	a0,0x25
    8000878c:	b9050513          	addi	a0,a0,-1136 # 8002d318 <__func__.0+0x2f8>
    value = lr_w(vaddr_f);
    80008790:	02079493          	slli	s1,a5,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80008794:	626220ef          	jal	8002adba <printf>
    80008798:	00049797          	auipc	a5,0x49
    8000879c:	8797c783          	lbu	a5,-1927(a5) # 80051011 <excpt+0x1>
    value = lr_w(vaddr_f);
    800087a0:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    800087a2:	e399                	bnez	a5,800087a8 <tinst_tests_pf+0x986>
    800087a4:	12c0106f          	j	800098d0 <tinst_tests_pf+0x1aae>
    800087a8:	6418                	ld	a4,8(s0)
    800087aa:	47b5                	li	a5,13
    800087ac:	00025597          	auipc	a1,0x25
    800087b0:	b4458593          	addi	a1,a1,-1212 # 8002d2f0 <__func__.0+0x2d0>
    800087b4:	00f71463          	bne	a4,a5,800087bc <tinst_tests_pf+0x99a>
    800087b8:	0ca0106f          	j	80009882 <tinst_tests_pf+0x1a60>
    800087bc:	00025517          	auipc	a0,0x25
    800087c0:	b7450513          	addi	a0,a0,-1164 # 8002d330 <__func__.0+0x310>
    800087c4:	5f6220ef          	jal	8002adba <printf>
    800087c8:	00049797          	auipc	a5,0x49
    800087cc:	8497c783          	lbu	a5,-1975(a5) # 80051011 <excpt+0x1>
    800087d0:	c799                	beqz	a5,800087de <tinst_tests_pf+0x9bc>
    800087d2:	6418                	ld	a4,8(s0)
    800087d4:	47b5                	li	a5,13
    800087d6:	00f71463          	bne	a4,a5,800087de <tinst_tests_pf+0x9bc>
    800087da:	4e60106f          	j	80009cc0 <tinst_tests_pf+0x1e9e>
    800087de:	00025517          	auipc	a0,0x25
    800087e2:	b5a50513          	addi	a0,a0,-1190 # 8002d338 <__func__.0+0x318>
    800087e6:	5d4220ef          	jal	8002adba <printf>
    800087ea:	02900513          	li	a0,41
    800087ee:	2ba210ef          	jal	80029aa8 <putchar>
    800087f2:	4529                	li	a0,10
    800087f4:	2b4210ef          	jal	80029aa8 <putchar>
    800087f8:	00090e63          	beqz	s2,80008814 <tinst_tests_pf+0x9f2>
    800087fc:	00049797          	auipc	a5,0x49
    80008800:	8157c783          	lbu	a5,-2027(a5) # 80051011 <excpt+0x1>
    80008804:	c799                	beqz	a5,80008812 <tinst_tests_pf+0x9f0>
    80008806:	6418                	ld	a4,8(s0)
    80008808:	47b5                	li	a5,13
    8000880a:	00f71463          	bne	a4,a5,80008812 <tinst_tests_pf+0x9f0>
    8000880e:	3b80206f          	j	8000abc6 <tinst_tests_pf+0x2da4>
    80008812:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008814:	d5ef80ef          	jal	80000d72 <test_setup_except_function>
    );
    return value;
}

static inline uint32_t sc_w(uintptr_t addr, uint64_t value){
    asm volatile(
    80008818:	40019737          	lui	a4,0x40019
    8000881c:	87a6                	mv	a5,s1
    8000881e:	070a                	slli	a4,a4,0x2
    80008820:	18f727af          	sc.w	a5,a5,(a4)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80008824:	00027617          	auipc	a2,0x27
    80008828:	87460613          	addi	a2,a2,-1932 # 8002f098 <__func__.0+0x2078>
    8000882c:	08200593          	li	a1,130
    80008830:	00025517          	auipc	a0,0x25
    80008834:	ae850513          	addi	a0,a0,-1304 # 8002d318 <__func__.0+0x2f8>
        "sc.w    %0, %0, 0(%1)\n\t"
        : "+r"(value) : "r"(addr): "memory"
    );
    return value;
    80008838:	0007849b          	sext.w	s1,a5
    8000883c:	57e220ef          	jal	8002adba <printf>
    80008840:	00048797          	auipc	a5,0x48
    80008844:	7d17c783          	lbu	a5,2001(a5) # 80051011 <excpt+0x1>
    80008848:	e399                	bnez	a5,8000884e <tinst_tests_pf+0xa2c>
    8000884a:	0e00106f          	j	8000992a <tinst_tests_pf+0x1b08>
    8000884e:	6418                	ld	a4,8(s0)
    80008850:	47bd                	li	a5,15
    80008852:	00025597          	auipc	a1,0x25
    80008856:	a9e58593          	addi	a1,a1,-1378 # 8002d2f0 <__func__.0+0x2d0>
    8000885a:	00f71463          	bne	a4,a5,80008862 <tinst_tests_pf+0xa40>
    8000885e:	07e0106f          	j	800098dc <tinst_tests_pf+0x1aba>
    80008862:	00025517          	auipc	a0,0x25
    80008866:	ace50513          	addi	a0,a0,-1330 # 8002d330 <__func__.0+0x310>
    8000886a:	550220ef          	jal	8002adba <printf>
    8000886e:	00048797          	auipc	a5,0x48
    80008872:	7a37c783          	lbu	a5,1955(a5) # 80051011 <excpt+0x1>
    80008876:	c799                	beqz	a5,80008884 <tinst_tests_pf+0xa62>
    80008878:	6418                	ld	a4,8(s0)
    8000887a:	47bd                	li	a5,15
    8000887c:	00f71463          	bne	a4,a5,80008884 <tinst_tests_pf+0xa62>
    80008880:	4820106f          	j	80009d02 <tinst_tests_pf+0x1ee0>
    80008884:	00025517          	auipc	a0,0x25
    80008888:	ab450513          	addi	a0,a0,-1356 # 8002d338 <__func__.0+0x318>
    8000888c:	52e220ef          	jal	8002adba <printf>
    80008890:	02900513          	li	a0,41
    80008894:	214210ef          	jal	80029aa8 <putchar>
    80008898:	4529                	li	a0,10
    8000889a:	20e210ef          	jal	80029aa8 <putchar>
    8000889e:	00090e63          	beqz	s2,800088ba <tinst_tests_pf+0xa98>
    800088a2:	00048797          	auipc	a5,0x48
    800088a6:	76f7c783          	lbu	a5,1903(a5) # 80051011 <excpt+0x1>
    800088aa:	c799                	beqz	a5,800088b8 <tinst_tests_pf+0xa96>
    800088ac:	6418                	ld	a4,8(s0)
    800088ae:	47bd                	li	a5,15
    800088b0:	00f71463          	bne	a4,a5,800088b8 <tinst_tests_pf+0xa96>
    800088b4:	3540206f          	j	8000ac08 <tinst_tests_pf+0x2de6>
    800088b8:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800088ba:	cb8f80ef          	jal	80000d72 <test_setup_except_function>
            : "+r"(value) : "r"(addr): "memory" \
        ); \
        return value; \
    }

AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    800088be:	400197b7          	lui	a5,0x40019
    800088c2:	078a                	slli	a5,a5,0x2
    800088c4:	0897a4af          	amoswap.w	s1,s1,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    800088c8:	00027617          	auipc	a2,0x27
    800088cc:	81060613          	addi	a2,a2,-2032 # 8002f0d8 <__func__.0+0x20b8>
    800088d0:	08200593          	li	a1,130
    800088d4:	00025517          	auipc	a0,0x25
    800088d8:	a4450513          	addi	a0,a0,-1468 # 8002d318 <__func__.0+0x2f8>
    800088dc:	4de220ef          	jal	8002adba <printf>
    800088e0:	00048797          	auipc	a5,0x48
    800088e4:	7317c783          	lbu	a5,1841(a5) # 80051011 <excpt+0x1>
    800088e8:	e399                	bnez	a5,800088ee <tinst_tests_pf+0xacc>
    800088ea:	09a0106f          	j	80009984 <tinst_tests_pf+0x1b62>
    800088ee:	6418                	ld	a4,8(s0)
    800088f0:	47bd                	li	a5,15
    800088f2:	00025597          	auipc	a1,0x25
    800088f6:	9fe58593          	addi	a1,a1,-1538 # 8002d2f0 <__func__.0+0x2d0>
    800088fa:	00f71463          	bne	a4,a5,80008902 <tinst_tests_pf+0xae0>
    800088fe:	0380106f          	j	80009936 <tinst_tests_pf+0x1b14>
    80008902:	00025517          	auipc	a0,0x25
    80008906:	a2e50513          	addi	a0,a0,-1490 # 8002d330 <__func__.0+0x310>
    8000890a:	4b0220ef          	jal	8002adba <printf>
    8000890e:	00048797          	auipc	a5,0x48
    80008912:	7037c783          	lbu	a5,1795(a5) # 80051011 <excpt+0x1>
    80008916:	c799                	beqz	a5,80008924 <tinst_tests_pf+0xb02>
    80008918:	6418                	ld	a4,8(s0)
    8000891a:	47bd                	li	a5,15
    8000891c:	00f71463          	bne	a4,a5,80008924 <tinst_tests_pf+0xb02>
    80008920:	4360106f          	j	80009d56 <tinst_tests_pf+0x1f34>
    80008924:	00025517          	auipc	a0,0x25
    80008928:	a1450513          	addi	a0,a0,-1516 # 8002d338 <__func__.0+0x318>
    8000892c:	48e220ef          	jal	8002adba <printf>
    80008930:	02900513          	li	a0,41
    80008934:	174210ef          	jal	80029aa8 <putchar>
    80008938:	4529                	li	a0,10
    8000893a:	16e210ef          	jal	80029aa8 <putchar>
    8000893e:	00090e63          	beqz	s2,8000895a <tinst_tests_pf+0xb38>
    80008942:	00048797          	auipc	a5,0x48
    80008946:	6cf7c783          	lbu	a5,1743(a5) # 80051011 <excpt+0x1>
    8000894a:	c799                	beqz	a5,80008958 <tinst_tests_pf+0xb36>
    8000894c:	6418                	ld	a4,8(s0)
    8000894e:	47bd                	li	a5,15
    80008950:	00f71463          	bne	a4,a5,80008958 <tinst_tests_pf+0xb36>
    80008954:	2f60206f          	j	8000ac4a <tinst_tests_pf+0x2e28>
    80008958:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000895a:	c18f80ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000895e:	400197b7          	lui	a5,0x40019
    80008962:	078a                	slli	a5,a5,0x2
    80008964:	0097a4af          	amoadd.w	s1,s1,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80008968:	00026617          	auipc	a2,0x26
    8000896c:	7b060613          	addi	a2,a2,1968 # 8002f118 <__func__.0+0x20f8>
    80008970:	08200593          	li	a1,130
    80008974:	00025517          	auipc	a0,0x25
    80008978:	9a450513          	addi	a0,a0,-1628 # 8002d318 <__func__.0+0x2f8>
    8000897c:	43e220ef          	jal	8002adba <printf>
    80008980:	00048797          	auipc	a5,0x48
    80008984:	6917c783          	lbu	a5,1681(a5) # 80051011 <excpt+0x1>
    80008988:	c399                	beqz	a5,8000898e <tinst_tests_pf+0xb6c>
    8000898a:	08c0106f          	j	80009a16 <tinst_tests_pf+0x1bf4>
    8000898e:	00025597          	auipc	a1,0x25
    80008992:	96258593          	addi	a1,a1,-1694 # 8002d2f0 <__func__.0+0x2d0>
    80008996:	00025517          	auipc	a0,0x25
    8000899a:	99a50513          	addi	a0,a0,-1638 # 8002d330 <__func__.0+0x310>
    8000899e:	41c220ef          	jal	8002adba <printf>
    800089a2:	00048797          	auipc	a5,0x48
    800089a6:	66f7c783          	lbu	a5,1647(a5) # 80051011 <excpt+0x1>
    800089aa:	c799                	beqz	a5,800089b8 <tinst_tests_pf+0xb96>
    800089ac:	6418                	ld	a4,8(s0)
    800089ae:	47bd                	li	a5,15
    800089b0:	00f71463          	bne	a4,a5,800089b8 <tinst_tests_pf+0xb96>
    800089b4:	5730106f          	j	8000a726 <tinst_tests_pf+0x2904>
    800089b8:	00025517          	auipc	a0,0x25
    800089bc:	98050513          	addi	a0,a0,-1664 # 8002d338 <__func__.0+0x318>
    800089c0:	3fa220ef          	jal	8002adba <printf>
    800089c4:	02900513          	li	a0,41
    800089c8:	0e0210ef          	jal	80029aa8 <putchar>
    800089cc:	4529                	li	a0,10
    800089ce:	0da210ef          	jal	80029aa8 <putchar>
    800089d2:	00090e63          	beqz	s2,800089ee <tinst_tests_pf+0xbcc>
    800089d6:	00048797          	auipc	a5,0x48
    800089da:	63b7c783          	lbu	a5,1595(a5) # 80051011 <excpt+0x1>
    800089de:	c799                	beqz	a5,800089ec <tinst_tests_pf+0xbca>
    800089e0:	6418                	ld	a4,8(s0)
    800089e2:	47bd                	li	a5,15
    800089e4:	00f71463          	bne	a4,a5,800089ec <tinst_tests_pf+0xbca>
    800089e8:	2a40206f          	j	8000ac8c <tinst_tests_pf+0x2e6a>
    800089ec:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800089ee:	b84f80ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    800089f2:	400197b7          	lui	a5,0x40019
    800089f6:	078a                	slli	a5,a5,0x2
    800089f8:	2097a4af          	amoxor.w	s1,s1,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    800089fc:	00026617          	auipc	a2,0x26
    80008a00:	75c60613          	addi	a2,a2,1884 # 8002f158 <__func__.0+0x2138>
    80008a04:	08200593          	li	a1,130
    80008a08:	00025517          	auipc	a0,0x25
    80008a0c:	91050513          	addi	a0,a0,-1776 # 8002d318 <__func__.0+0x2f8>
    80008a10:	3aa220ef          	jal	8002adba <printf>
    80008a14:	00048797          	auipc	a5,0x48
    80008a18:	5fd7c783          	lbu	a5,1533(a5) # 80051011 <excpt+0x1>
    80008a1c:	e399                	bnez	a5,80008a22 <tinst_tests_pf+0xc00>
    80008a1e:	5020106f          	j	80009f20 <tinst_tests_pf+0x20fe>
    80008a22:	6418                	ld	a4,8(s0)
    80008a24:	47bd                	li	a5,15
    80008a26:	00025597          	auipc	a1,0x25
    80008a2a:	8ca58593          	addi	a1,a1,-1846 # 8002d2f0 <__func__.0+0x2d0>
    80008a2e:	00f71463          	bne	a4,a5,80008a36 <tinst_tests_pf+0xc14>
    80008a32:	4a20106f          	j	80009ed4 <tinst_tests_pf+0x20b2>
    80008a36:	00025517          	auipc	a0,0x25
    80008a3a:	8fa50513          	addi	a0,a0,-1798 # 8002d330 <__func__.0+0x310>
    80008a3e:	37c220ef          	jal	8002adba <printf>
    80008a42:	00048797          	auipc	a5,0x48
    80008a46:	5cf7c783          	lbu	a5,1487(a5) # 80051011 <excpt+0x1>
    80008a4a:	c799                	beqz	a5,80008a58 <tinst_tests_pf+0xc36>
    80008a4c:	6418                	ld	a4,8(s0)
    80008a4e:	47bd                	li	a5,15
    80008a50:	00f71463          	bne	a4,a5,80008a58 <tinst_tests_pf+0xc36>
    80008a54:	5150106f          	j	8000a768 <tinst_tests_pf+0x2946>
    80008a58:	00025517          	auipc	a0,0x25
    80008a5c:	8e050513          	addi	a0,a0,-1824 # 8002d338 <__func__.0+0x318>
    80008a60:	35a220ef          	jal	8002adba <printf>
    80008a64:	02900513          	li	a0,41
    80008a68:	040210ef          	jal	80029aa8 <putchar>
    80008a6c:	4529                	li	a0,10
    80008a6e:	03a210ef          	jal	80029aa8 <putchar>
    80008a72:	00090e63          	beqz	s2,80008a8e <tinst_tests_pf+0xc6c>
    80008a76:	00048797          	auipc	a5,0x48
    80008a7a:	59b7c783          	lbu	a5,1435(a5) # 80051011 <excpt+0x1>
    80008a7e:	c799                	beqz	a5,80008a8c <tinst_tests_pf+0xc6a>
    80008a80:	6418                	ld	a4,8(s0)
    80008a82:	47bd                	li	a5,15
    80008a84:	00f71463          	bne	a4,a5,80008a8c <tinst_tests_pf+0xc6a>
    80008a88:	29e0206f          	j	8000ad26 <tinst_tests_pf+0x2f04>
    80008a8c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008a8e:	ae4f80ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    80008a92:	400197b7          	lui	a5,0x40019
    80008a96:	078a                	slli	a5,a5,0x2
    80008a98:	6097a4af          	amoand.w	s1,s1,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80008a9c:	00026617          	auipc	a2,0x26
    80008aa0:	6fc60613          	addi	a2,a2,1788 # 8002f198 <__func__.0+0x2178>
    80008aa4:	08200593          	li	a1,130
    80008aa8:	00025517          	auipc	a0,0x25
    80008aac:	87050513          	addi	a0,a0,-1936 # 8002d318 <__func__.0+0x2f8>
    80008ab0:	30a220ef          	jal	8002adba <printf>
    80008ab4:	00048797          	auipc	a5,0x48
    80008ab8:	55d7c783          	lbu	a5,1373(a5) # 80051011 <excpt+0x1>
    80008abc:	e399                	bnez	a5,80008ac2 <tinst_tests_pf+0xca0>
    80008abe:	4f40106f          	j	80009fb2 <tinst_tests_pf+0x2190>
    80008ac2:	6418                	ld	a4,8(s0)
    80008ac4:	47bd                	li	a5,15
    80008ac6:	00025597          	auipc	a1,0x25
    80008aca:	82a58593          	addi	a1,a1,-2006 # 8002d2f0 <__func__.0+0x2d0>
    80008ace:	00f71463          	bne	a4,a5,80008ad6 <tinst_tests_pf+0xcb4>
    80008ad2:	4940106f          	j	80009f66 <tinst_tests_pf+0x2144>
    80008ad6:	00025517          	auipc	a0,0x25
    80008ada:	85a50513          	addi	a0,a0,-1958 # 8002d330 <__func__.0+0x310>
    80008ade:	2dc220ef          	jal	8002adba <printf>
    80008ae2:	00048797          	auipc	a5,0x48
    80008ae6:	52f7c783          	lbu	a5,1327(a5) # 80051011 <excpt+0x1>
    80008aea:	c799                	beqz	a5,80008af8 <tinst_tests_pf+0xcd6>
    80008aec:	6418                	ld	a4,8(s0)
    80008aee:	47bd                	li	a5,15
    80008af0:	00f71463          	bne	a4,a5,80008af8 <tinst_tests_pf+0xcd6>
    80008af4:	4b70106f          	j	8000a7aa <tinst_tests_pf+0x2988>
    80008af8:	00025517          	auipc	a0,0x25
    80008afc:	84050513          	addi	a0,a0,-1984 # 8002d338 <__func__.0+0x318>
    80008b00:	2ba220ef          	jal	8002adba <printf>
    80008b04:	02900513          	li	a0,41
    80008b08:	7a1200ef          	jal	80029aa8 <putchar>
    80008b0c:	4529                	li	a0,10
    80008b0e:	79b200ef          	jal	80029aa8 <putchar>
    80008b12:	00090e63          	beqz	s2,80008b2e <tinst_tests_pf+0xd0c>
    80008b16:	00048797          	auipc	a5,0x48
    80008b1a:	4fb7c783          	lbu	a5,1275(a5) # 80051011 <excpt+0x1>
    80008b1e:	c799                	beqz	a5,80008b2c <tinst_tests_pf+0xd0a>
    80008b20:	6418                	ld	a4,8(s0)
    80008b22:	47bd                	li	a5,15
    80008b24:	00f71463          	bne	a4,a5,80008b2c <tinst_tests_pf+0xd0a>
    80008b28:	2700206f          	j	8000ad98 <tinst_tests_pf+0x2f76>
    80008b2c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008b2e:	a44f80ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    80008b32:	400197b7          	lui	a5,0x40019
    80008b36:	078a                	slli	a5,a5,0x2
    80008b38:	4097a4af          	amoor.w	s1,s1,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80008b3c:	00026617          	auipc	a2,0x26
    80008b40:	69c60613          	addi	a2,a2,1692 # 8002f1d8 <__func__.0+0x21b8>
    80008b44:	08200593          	li	a1,130
    80008b48:	00024517          	auipc	a0,0x24
    80008b4c:	7d050513          	addi	a0,a0,2000 # 8002d318 <__func__.0+0x2f8>
    80008b50:	26a220ef          	jal	8002adba <printf>
    80008b54:	00048797          	auipc	a5,0x48
    80008b58:	4bd7c783          	lbu	a5,1213(a5) # 80051011 <excpt+0x1>
    80008b5c:	e399                	bnez	a5,80008b62 <tinst_tests_pf+0xd40>
    80008b5e:	4ea0106f          	j	8000a048 <tinst_tests_pf+0x2226>
    80008b62:	6418                	ld	a4,8(s0)
    80008b64:	47bd                	li	a5,15
    80008b66:	00024597          	auipc	a1,0x24
    80008b6a:	78a58593          	addi	a1,a1,1930 # 8002d2f0 <__func__.0+0x2d0>
    80008b6e:	00f71463          	bne	a4,a5,80008b76 <tinst_tests_pf+0xd54>
    80008b72:	4880106f          	j	80009ffa <tinst_tests_pf+0x21d8>
    80008b76:	00024517          	auipc	a0,0x24
    80008b7a:	7ba50513          	addi	a0,a0,1978 # 8002d330 <__func__.0+0x310>
    80008b7e:	23c220ef          	jal	8002adba <printf>
    80008b82:	00048797          	auipc	a5,0x48
    80008b86:	48f7c783          	lbu	a5,1167(a5) # 80051011 <excpt+0x1>
    80008b8a:	c799                	beqz	a5,80008b98 <tinst_tests_pf+0xd76>
    80008b8c:	6418                	ld	a4,8(s0)
    80008b8e:	47bd                	li	a5,15
    80008b90:	00f71463          	bne	a4,a5,80008b98 <tinst_tests_pf+0xd76>
    80008b94:	4590106f          	j	8000a7ec <tinst_tests_pf+0x29ca>
    80008b98:	00024517          	auipc	a0,0x24
    80008b9c:	7a050513          	addi	a0,a0,1952 # 8002d338 <__func__.0+0x318>
    80008ba0:	21a220ef          	jal	8002adba <printf>
    80008ba4:	02900513          	li	a0,41
    80008ba8:	701200ef          	jal	80029aa8 <putchar>
    80008bac:	4529                	li	a0,10
    80008bae:	6fb200ef          	jal	80029aa8 <putchar>
    80008bb2:	00090e63          	beqz	s2,80008bce <tinst_tests_pf+0xdac>
    80008bb6:	00048797          	auipc	a5,0x48
    80008bba:	45b7c783          	lbu	a5,1115(a5) # 80051011 <excpt+0x1>
    80008bbe:	c799                	beqz	a5,80008bcc <tinst_tests_pf+0xdaa>
    80008bc0:	6418                	ld	a4,8(s0)
    80008bc2:	47bd                	li	a5,15
    80008bc4:	00f71463          	bne	a4,a5,80008bcc <tinst_tests_pf+0xdaa>
    80008bc8:	2420206f          	j	8000ae0a <tinst_tests_pf+0x2fe8>
    80008bcc:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008bce:	9a4f80ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    80008bd2:	400197b7          	lui	a5,0x40019
    80008bd6:	078a                	slli	a5,a5,0x2
    80008bd8:	8097a4af          	amomin.w	s1,s1,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    80008bdc:	00026617          	auipc	a2,0x26
    80008be0:	63c60613          	addi	a2,a2,1596 # 8002f218 <__func__.0+0x21f8>
    80008be4:	08200593          	li	a1,130
    80008be8:	00024517          	auipc	a0,0x24
    80008bec:	73050513          	addi	a0,a0,1840 # 8002d318 <__func__.0+0x2f8>
    80008bf0:	1ca220ef          	jal	8002adba <printf>
    80008bf4:	00048797          	auipc	a5,0x48
    80008bf8:	41d7c783          	lbu	a5,1053(a5) # 80051011 <excpt+0x1>
    80008bfc:	e399                	bnez	a5,80008c02 <tinst_tests_pf+0xde0>
    80008bfe:	4e00106f          	j	8000a0de <tinst_tests_pf+0x22bc>
    80008c02:	6418                	ld	a4,8(s0)
    80008c04:	47bd                	li	a5,15
    80008c06:	00024597          	auipc	a1,0x24
    80008c0a:	6ea58593          	addi	a1,a1,1770 # 8002d2f0 <__func__.0+0x2d0>
    80008c0e:	00f71463          	bne	a4,a5,80008c16 <tinst_tests_pf+0xdf4>
    80008c12:	47e0106f          	j	8000a090 <tinst_tests_pf+0x226e>
    80008c16:	00024517          	auipc	a0,0x24
    80008c1a:	71a50513          	addi	a0,a0,1818 # 8002d330 <__func__.0+0x310>
    80008c1e:	19c220ef          	jal	8002adba <printf>
    80008c22:	00048797          	auipc	a5,0x48
    80008c26:	3ef7c783          	lbu	a5,1007(a5) # 80051011 <excpt+0x1>
    80008c2a:	c799                	beqz	a5,80008c38 <tinst_tests_pf+0xe16>
    80008c2c:	6418                	ld	a4,8(s0)
    80008c2e:	47bd                	li	a5,15
    80008c30:	00f71463          	bne	a4,a5,80008c38 <tinst_tests_pf+0xe16>
    80008c34:	3fb0106f          	j	8000a82e <tinst_tests_pf+0x2a0c>
    80008c38:	00024517          	auipc	a0,0x24
    80008c3c:	70050513          	addi	a0,a0,1792 # 8002d338 <__func__.0+0x318>
    80008c40:	17a220ef          	jal	8002adba <printf>
    80008c44:	02900513          	li	a0,41
    80008c48:	661200ef          	jal	80029aa8 <putchar>
    80008c4c:	4529                	li	a0,10
    80008c4e:	65b200ef          	jal	80029aa8 <putchar>
    80008c52:	00090e63          	beqz	s2,80008c6e <tinst_tests_pf+0xe4c>
    80008c56:	00048797          	auipc	a5,0x48
    80008c5a:	3bb7c783          	lbu	a5,955(a5) # 80051011 <excpt+0x1>
    80008c5e:	c799                	beqz	a5,80008c6c <tinst_tests_pf+0xe4a>
    80008c60:	6418                	ld	a4,8(s0)
    80008c62:	47bd                	li	a5,15
    80008c64:	00f71463          	bne	a4,a5,80008c6c <tinst_tests_pf+0xe4a>
    80008c68:	1e40206f          	j	8000ae4c <tinst_tests_pf+0x302a>
    80008c6c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008c6e:	904f80ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    80008c72:	400197b7          	lui	a5,0x40019
    80008c76:	078a                	slli	a5,a5,0x2
    80008c78:	a097a4af          	amomax.w	s1,s1,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    80008c7c:	00026617          	auipc	a2,0x26
    80008c80:	5dc60613          	addi	a2,a2,1500 # 8002f258 <__func__.0+0x2238>
    80008c84:	08200593          	li	a1,130
    80008c88:	00024517          	auipc	a0,0x24
    80008c8c:	69050513          	addi	a0,a0,1680 # 8002d318 <__func__.0+0x2f8>
    80008c90:	12a220ef          	jal	8002adba <printf>
    80008c94:	00048797          	auipc	a5,0x48
    80008c98:	37d7c783          	lbu	a5,893(a5) # 80051011 <excpt+0x1>
    80008c9c:	e399                	bnez	a5,80008ca2 <tinst_tests_pf+0xe80>
    80008c9e:	4d60106f          	j	8000a174 <tinst_tests_pf+0x2352>
    80008ca2:	6418                	ld	a4,8(s0)
    80008ca4:	47bd                	li	a5,15
    80008ca6:	00024597          	auipc	a1,0x24
    80008caa:	64a58593          	addi	a1,a1,1610 # 8002d2f0 <__func__.0+0x2d0>
    80008cae:	00f71463          	bne	a4,a5,80008cb6 <tinst_tests_pf+0xe94>
    80008cb2:	4740106f          	j	8000a126 <tinst_tests_pf+0x2304>
    80008cb6:	00024517          	auipc	a0,0x24
    80008cba:	67a50513          	addi	a0,a0,1658 # 8002d330 <__func__.0+0x310>
    80008cbe:	0fc220ef          	jal	8002adba <printf>
    80008cc2:	00048797          	auipc	a5,0x48
    80008cc6:	34f7c783          	lbu	a5,847(a5) # 80051011 <excpt+0x1>
    80008cca:	c799                	beqz	a5,80008cd8 <tinst_tests_pf+0xeb6>
    80008ccc:	6418                	ld	a4,8(s0)
    80008cce:	47bd                	li	a5,15
    80008cd0:	00f71463          	bne	a4,a5,80008cd8 <tinst_tests_pf+0xeb6>
    80008cd4:	39d0106f          	j	8000a870 <tinst_tests_pf+0x2a4e>
    80008cd8:	00024517          	auipc	a0,0x24
    80008cdc:	66050513          	addi	a0,a0,1632 # 8002d338 <__func__.0+0x318>
    80008ce0:	0da220ef          	jal	8002adba <printf>
    80008ce4:	02900513          	li	a0,41
    80008ce8:	5c1200ef          	jal	80029aa8 <putchar>
    80008cec:	4529                	li	a0,10
    80008cee:	5bb200ef          	jal	80029aa8 <putchar>
    80008cf2:	00090e63          	beqz	s2,80008d0e <tinst_tests_pf+0xeec>
    80008cf6:	00048797          	auipc	a5,0x48
    80008cfa:	31b7c783          	lbu	a5,795(a5) # 80051011 <excpt+0x1>
    80008cfe:	c799                	beqz	a5,80008d0c <tinst_tests_pf+0xeea>
    80008d00:	6418                	ld	a4,8(s0)
    80008d02:	47bd                	li	a5,15
    80008d04:	00f71463          	bne	a4,a5,80008d0c <tinst_tests_pf+0xeea>
    80008d08:	1860206f          	j	8000ae8e <tinst_tests_pf+0x306c>
    80008d0c:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008d0e:	864f80ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    80008d12:	400197b7          	lui	a5,0x40019
    80008d16:	078a                	slli	a5,a5,0x2
    80008d18:	c097a4af          	amominu.w	s1,s1,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    80008d1c:	00026617          	auipc	a2,0x26
    80008d20:	57c60613          	addi	a2,a2,1404 # 8002f298 <__func__.0+0x2278>
    80008d24:	08200593          	li	a1,130
    80008d28:	00024517          	auipc	a0,0x24
    80008d2c:	5f050513          	addi	a0,a0,1520 # 8002d318 <__func__.0+0x2f8>
    80008d30:	08a220ef          	jal	8002adba <printf>
    80008d34:	00048797          	auipc	a5,0x48
    80008d38:	2dd7c783          	lbu	a5,733(a5) # 80051011 <excpt+0x1>
    80008d3c:	e399                	bnez	a5,80008d42 <tinst_tests_pf+0xf20>
    80008d3e:	4d20106f          	j	8000a210 <tinst_tests_pf+0x23ee>
    80008d42:	6418                	ld	a4,8(s0)
    80008d44:	47bd                	li	a5,15
    80008d46:	00024597          	auipc	a1,0x24
    80008d4a:	5aa58593          	addi	a1,a1,1450 # 8002d2f0 <__func__.0+0x2d0>
    80008d4e:	00f71463          	bne	a4,a5,80008d56 <tinst_tests_pf+0xf34>
    80008d52:	4700106f          	j	8000a1c2 <tinst_tests_pf+0x23a0>
    80008d56:	00024517          	auipc	a0,0x24
    80008d5a:	5da50513          	addi	a0,a0,1498 # 8002d330 <__func__.0+0x310>
    80008d5e:	05c220ef          	jal	8002adba <printf>
    80008d62:	00048797          	auipc	a5,0x48
    80008d66:	2af7c783          	lbu	a5,687(a5) # 80051011 <excpt+0x1>
    80008d6a:	c799                	beqz	a5,80008d78 <tinst_tests_pf+0xf56>
    80008d6c:	6418                	ld	a4,8(s0)
    80008d6e:	47bd                	li	a5,15
    80008d70:	00f71463          	bne	a4,a5,80008d78 <tinst_tests_pf+0xf56>
    80008d74:	33f0106f          	j	8000a8b2 <tinst_tests_pf+0x2a90>
    80008d78:	00024517          	auipc	a0,0x24
    80008d7c:	5c050513          	addi	a0,a0,1472 # 8002d338 <__func__.0+0x318>
    80008d80:	03a220ef          	jal	8002adba <printf>
    80008d84:	02900513          	li	a0,41
    80008d88:	521200ef          	jal	80029aa8 <putchar>
    80008d8c:	4529                	li	a0,10
    80008d8e:	51b200ef          	jal	80029aa8 <putchar>
    80008d92:	00090e63          	beqz	s2,80008dae <tinst_tests_pf+0xf8c>
    80008d96:	00048797          	auipc	a5,0x48
    80008d9a:	27b7c783          	lbu	a5,635(a5) # 80051011 <excpt+0x1>
    80008d9e:	c799                	beqz	a5,80008dac <tinst_tests_pf+0xf8a>
    80008da0:	6418                	ld	a4,8(s0)
    80008da2:	47bd                	li	a5,15
    80008da4:	00f71463          	bne	a4,a5,80008dac <tinst_tests_pf+0xf8a>
    80008da8:	12a0206f          	j	8000aed2 <tinst_tests_pf+0x30b0>
    80008dac:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008dae:	fc5f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    80008db2:	400197b7          	lui	a5,0x40019
    80008db6:	078a                	slli	a5,a5,0x2
    80008db8:	e097a4af          	amomaxu.w	s1,s1,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008dbc:	00026617          	auipc	a2,0x26
    80008dc0:	51c60613          	addi	a2,a2,1308 # 8002f2d8 <__func__.0+0x22b8>
    80008dc4:	08200593          	li	a1,130
    80008dc8:	00024517          	auipc	a0,0x24
    80008dcc:	55050513          	addi	a0,a0,1360 # 8002d318 <__func__.0+0x2f8>
    80008dd0:	7eb210ef          	jal	8002adba <printf>
    80008dd4:	00048797          	auipc	a5,0x48
    80008dd8:	23d7c783          	lbu	a5,573(a5) # 80051011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    80008ddc:	1482                	slli	s1,s1,0x20
    80008dde:	9081                	srli	s1,s1,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    80008de0:	e399                	bnez	a5,80008de6 <tinst_tests_pf+0xfc4>
    80008de2:	4ca0106f          	j	8000a2ac <tinst_tests_pf+0x248a>
    80008de6:	6418                	ld	a4,8(s0)
    80008de8:	47bd                	li	a5,15
    80008dea:	00024597          	auipc	a1,0x24
    80008dee:	50658593          	addi	a1,a1,1286 # 8002d2f0 <__func__.0+0x2d0>
    80008df2:	00f71463          	bne	a4,a5,80008dfa <tinst_tests_pf+0xfd8>
    80008df6:	4680106f          	j	8000a25e <tinst_tests_pf+0x243c>
    80008dfa:	00024517          	auipc	a0,0x24
    80008dfe:	53650513          	addi	a0,a0,1334 # 8002d330 <__func__.0+0x310>
    80008e02:	7b9210ef          	jal	8002adba <printf>
    80008e06:	00048797          	auipc	a5,0x48
    80008e0a:	20b7c783          	lbu	a5,523(a5) # 80051011 <excpt+0x1>
    80008e0e:	c799                	beqz	a5,80008e1c <tinst_tests_pf+0xffa>
    80008e10:	6418                	ld	a4,8(s0)
    80008e12:	47bd                	li	a5,15
    80008e14:	00f71463          	bne	a4,a5,80008e1c <tinst_tests_pf+0xffa>
    80008e18:	2dd0106f          	j	8000a8f4 <tinst_tests_pf+0x2ad2>
    80008e1c:	00024517          	auipc	a0,0x24
    80008e20:	51c50513          	addi	a0,a0,1308 # 8002d338 <__func__.0+0x318>
    80008e24:	797210ef          	jal	8002adba <printf>
    80008e28:	02900513          	li	a0,41
    80008e2c:	47d200ef          	jal	80029aa8 <putchar>
    80008e30:	4529                	li	a0,10
    80008e32:	477200ef          	jal	80029aa8 <putchar>
    80008e36:	00090e63          	beqz	s2,80008e52 <tinst_tests_pf+0x1030>
    80008e3a:	00048797          	auipc	a5,0x48
    80008e3e:	1d77c783          	lbu	a5,471(a5) # 80051011 <excpt+0x1>
    80008e42:	c799                	beqz	a5,80008e50 <tinst_tests_pf+0x102e>
    80008e44:	6418                	ld	a4,8(s0)
    80008e46:	47bd                	li	a5,15
    80008e48:	00f71463          	bne	a4,a5,80008e50 <tinst_tests_pf+0x102e>
    80008e4c:	0ca0206f          	j	8000af16 <tinst_tests_pf+0x30f4>
    80008e50:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008e52:	f21f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    80008e56:	400197b7          	lui	a5,0x40019
    80008e5a:	078a                	slli	a5,a5,0x2
    80008e5c:	0897b4af          	amoswap.d	s1,s1,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    80008e60:	00026617          	auipc	a2,0x26
    80008e64:	4b860613          	addi	a2,a2,1208 # 8002f318 <__func__.0+0x22f8>
    80008e68:	08200593          	li	a1,130
    80008e6c:	00024517          	auipc	a0,0x24
    80008e70:	4ac50513          	addi	a0,a0,1196 # 8002d318 <__func__.0+0x2f8>
    80008e74:	747210ef          	jal	8002adba <printf>
    80008e78:	00048797          	auipc	a5,0x48
    80008e7c:	1997c783          	lbu	a5,409(a5) # 80051011 <excpt+0x1>
    80008e80:	e399                	bnez	a5,80008e86 <tinst_tests_pf+0x1064>
    80008e82:	4c60106f          	j	8000a348 <tinst_tests_pf+0x2526>
    80008e86:	6418                	ld	a4,8(s0)
    80008e88:	47bd                	li	a5,15
    80008e8a:	00024597          	auipc	a1,0x24
    80008e8e:	46658593          	addi	a1,a1,1126 # 8002d2f0 <__func__.0+0x2d0>
    80008e92:	00f71463          	bne	a4,a5,80008e9a <tinst_tests_pf+0x1078>
    80008e96:	4640106f          	j	8000a2fa <tinst_tests_pf+0x24d8>
    80008e9a:	00024517          	auipc	a0,0x24
    80008e9e:	49650513          	addi	a0,a0,1174 # 8002d330 <__func__.0+0x310>
    80008ea2:	719210ef          	jal	8002adba <printf>
    80008ea6:	00048797          	auipc	a5,0x48
    80008eaa:	16b7c783          	lbu	a5,363(a5) # 80051011 <excpt+0x1>
    80008eae:	c799                	beqz	a5,80008ebc <tinst_tests_pf+0x109a>
    80008eb0:	6418                	ld	a4,8(s0)
    80008eb2:	47bd                	li	a5,15
    80008eb4:	00f71463          	bne	a4,a5,80008ebc <tinst_tests_pf+0x109a>
    80008eb8:	27f0106f          	j	8000a936 <tinst_tests_pf+0x2b14>
    80008ebc:	00024517          	auipc	a0,0x24
    80008ec0:	47c50513          	addi	a0,a0,1148 # 8002d338 <__func__.0+0x318>
    80008ec4:	6f7210ef          	jal	8002adba <printf>
    80008ec8:	02900513          	li	a0,41
    80008ecc:	3dd200ef          	jal	80029aa8 <putchar>
    80008ed0:	4529                	li	a0,10
    80008ed2:	3d7200ef          	jal	80029aa8 <putchar>
    80008ed6:	00090e63          	beqz	s2,80008ef2 <tinst_tests_pf+0x10d0>
    80008eda:	00048797          	auipc	a5,0x48
    80008ede:	1377c783          	lbu	a5,311(a5) # 80051011 <excpt+0x1>
    80008ee2:	c799                	beqz	a5,80008ef0 <tinst_tests_pf+0x10ce>
    80008ee4:	6418                	ld	a4,8(s0)
    80008ee6:	47bd                	li	a5,15
    80008ee8:	00f71463          	bne	a4,a5,80008ef0 <tinst_tests_pf+0x10ce>
    80008eec:	06e0206f          	j	8000af5a <tinst_tests_pf+0x3138>
    80008ef0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008ef2:	e81f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    80008ef6:	400197b7          	lui	a5,0x40019
    80008efa:	078a                	slli	a5,a5,0x2
    80008efc:	0097b4af          	amoadd.d	s1,s1,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    80008f00:	00026617          	auipc	a2,0x26
    80008f04:	45860613          	addi	a2,a2,1112 # 8002f358 <__func__.0+0x2338>
    80008f08:	08200593          	li	a1,130
    80008f0c:	00024517          	auipc	a0,0x24
    80008f10:	40c50513          	addi	a0,a0,1036 # 8002d318 <__func__.0+0x2f8>
    80008f14:	6a7210ef          	jal	8002adba <printf>
    80008f18:	00048797          	auipc	a5,0x48
    80008f1c:	0f97c783          	lbu	a5,249(a5) # 80051011 <excpt+0x1>
    80008f20:	e399                	bnez	a5,80008f26 <tinst_tests_pf+0x1104>
    80008f22:	4c20106f          	j	8000a3e4 <tinst_tests_pf+0x25c2>
    80008f26:	6418                	ld	a4,8(s0)
    80008f28:	47bd                	li	a5,15
    80008f2a:	00024597          	auipc	a1,0x24
    80008f2e:	3c658593          	addi	a1,a1,966 # 8002d2f0 <__func__.0+0x2d0>
    80008f32:	00f71463          	bne	a4,a5,80008f3a <tinst_tests_pf+0x1118>
    80008f36:	4600106f          	j	8000a396 <tinst_tests_pf+0x2574>
    80008f3a:	00024517          	auipc	a0,0x24
    80008f3e:	3f650513          	addi	a0,a0,1014 # 8002d330 <__func__.0+0x310>
    80008f42:	679210ef          	jal	8002adba <printf>
    80008f46:	00048797          	auipc	a5,0x48
    80008f4a:	0cb7c783          	lbu	a5,203(a5) # 80051011 <excpt+0x1>
    80008f4e:	c799                	beqz	a5,80008f5c <tinst_tests_pf+0x113a>
    80008f50:	6418                	ld	a4,8(s0)
    80008f52:	47bd                	li	a5,15
    80008f54:	00f71463          	bne	a4,a5,80008f5c <tinst_tests_pf+0x113a>
    80008f58:	2210106f          	j	8000a978 <tinst_tests_pf+0x2b56>
    80008f5c:	00024517          	auipc	a0,0x24
    80008f60:	3dc50513          	addi	a0,a0,988 # 8002d338 <__func__.0+0x318>
    80008f64:	657210ef          	jal	8002adba <printf>
    80008f68:	02900513          	li	a0,41
    80008f6c:	33d200ef          	jal	80029aa8 <putchar>
    80008f70:	4529                	li	a0,10
    80008f72:	337200ef          	jal	80029aa8 <putchar>
    80008f76:	00090e63          	beqz	s2,80008f92 <tinst_tests_pf+0x1170>
    80008f7a:	00048797          	auipc	a5,0x48
    80008f7e:	0977c783          	lbu	a5,151(a5) # 80051011 <excpt+0x1>
    80008f82:	c799                	beqz	a5,80008f90 <tinst_tests_pf+0x116e>
    80008f84:	6418                	ld	a4,8(s0)
    80008f86:	47bd                	li	a5,15
    80008f88:	00f71463          	bne	a4,a5,80008f90 <tinst_tests_pf+0x116e>
    80008f8c:	0120206f          	j	8000af9e <tinst_tests_pf+0x317c>
    80008f90:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80008f92:	de1f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    80008f96:	400197b7          	lui	a5,0x40019
    80008f9a:	078a                	slli	a5,a5,0x2
    80008f9c:	2097b4af          	amoxor.d	s1,s1,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    80008fa0:	00026617          	auipc	a2,0x26
    80008fa4:	3f860613          	addi	a2,a2,1016 # 8002f398 <__func__.0+0x2378>
    80008fa8:	08200593          	li	a1,130
    80008fac:	00024517          	auipc	a0,0x24
    80008fb0:	36c50513          	addi	a0,a0,876 # 8002d318 <__func__.0+0x2f8>
    80008fb4:	607210ef          	jal	8002adba <printf>
    80008fb8:	00048797          	auipc	a5,0x48
    80008fbc:	0597c783          	lbu	a5,89(a5) # 80051011 <excpt+0x1>
    80008fc0:	e399                	bnez	a5,80008fc6 <tinst_tests_pf+0x11a4>
    80008fc2:	4a80106f          	j	8000a46a <tinst_tests_pf+0x2648>
    80008fc6:	6418                	ld	a4,8(s0)
    80008fc8:	47bd                	li	a5,15
    80008fca:	00024597          	auipc	a1,0x24
    80008fce:	32658593          	addi	a1,a1,806 # 8002d2f0 <__func__.0+0x2d0>
    80008fd2:	00f71463          	bne	a4,a5,80008fda <tinst_tests_pf+0x11b8>
    80008fd6:	4460106f          	j	8000a41c <tinst_tests_pf+0x25fa>
    80008fda:	00024517          	auipc	a0,0x24
    80008fde:	35650513          	addi	a0,a0,854 # 8002d330 <__func__.0+0x310>
    80008fe2:	5d9210ef          	jal	8002adba <printf>
    80008fe6:	00048797          	auipc	a5,0x48
    80008fea:	02b7c783          	lbu	a5,43(a5) # 80051011 <excpt+0x1>
    80008fee:	c799                	beqz	a5,80008ffc <tinst_tests_pf+0x11da>
    80008ff0:	6418                	ld	a4,8(s0)
    80008ff2:	47bd                	li	a5,15
    80008ff4:	00f71463          	bne	a4,a5,80008ffc <tinst_tests_pf+0x11da>
    80008ff8:	1c30106f          	j	8000a9ba <tinst_tests_pf+0x2b98>
    80008ffc:	00024517          	auipc	a0,0x24
    80009000:	33c50513          	addi	a0,a0,828 # 8002d338 <__func__.0+0x318>
    80009004:	5b7210ef          	jal	8002adba <printf>
    80009008:	02900513          	li	a0,41
    8000900c:	29d200ef          	jal	80029aa8 <putchar>
    80009010:	4529                	li	a0,10
    80009012:	297200ef          	jal	80029aa8 <putchar>
    80009016:	00090e63          	beqz	s2,80009032 <tinst_tests_pf+0x1210>
    8000901a:	00048797          	auipc	a5,0x48
    8000901e:	ff77c783          	lbu	a5,-9(a5) # 80051011 <excpt+0x1>
    80009022:	c799                	beqz	a5,80009030 <tinst_tests_pf+0x120e>
    80009024:	6418                	ld	a4,8(s0)
    80009026:	47bd                	li	a5,15
    80009028:	00f71463          	bne	a4,a5,80009030 <tinst_tests_pf+0x120e>
    8000902c:	7b70106f          	j	8000afe2 <tinst_tests_pf+0x31c0>
    80009030:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009032:	d41f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80009036:	400197b7          	lui	a5,0x40019
    8000903a:	078a                	slli	a5,a5,0x2
    8000903c:	6097b4af          	amoand.d	s1,s1,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    80009040:	00026617          	auipc	a2,0x26
    80009044:	39860613          	addi	a2,a2,920 # 8002f3d8 <__func__.0+0x23b8>
    80009048:	08200593          	li	a1,130
    8000904c:	00024517          	auipc	a0,0x24
    80009050:	2cc50513          	addi	a0,a0,716 # 8002d318 <__func__.0+0x2f8>
    80009054:	567210ef          	jal	8002adba <printf>
    80009058:	00048797          	auipc	a5,0x48
    8000905c:	fb97c783          	lbu	a5,-71(a5) # 80051011 <excpt+0x1>
    80009060:	e399                	bnez	a5,80009066 <tinst_tests_pf+0x1244>
    80009062:	4920106f          	j	8000a4f4 <tinst_tests_pf+0x26d2>
    80009066:	6418                	ld	a4,8(s0)
    80009068:	47bd                	li	a5,15
    8000906a:	00024597          	auipc	a1,0x24
    8000906e:	28658593          	addi	a1,a1,646 # 8002d2f0 <__func__.0+0x2d0>
    80009072:	00f71463          	bne	a4,a5,8000907a <tinst_tests_pf+0x1258>
    80009076:	4300106f          	j	8000a4a6 <tinst_tests_pf+0x2684>
    8000907a:	00024517          	auipc	a0,0x24
    8000907e:	2b650513          	addi	a0,a0,694 # 8002d330 <__func__.0+0x310>
    80009082:	539210ef          	jal	8002adba <printf>
    80009086:	00048797          	auipc	a5,0x48
    8000908a:	f8b7c783          	lbu	a5,-117(a5) # 80051011 <excpt+0x1>
    8000908e:	c799                	beqz	a5,8000909c <tinst_tests_pf+0x127a>
    80009090:	6418                	ld	a4,8(s0)
    80009092:	47bd                	li	a5,15
    80009094:	00f71463          	bne	a4,a5,8000909c <tinst_tests_pf+0x127a>
    80009098:	7d30106f          	j	8000b06a <tinst_tests_pf+0x3248>
    8000909c:	00024517          	auipc	a0,0x24
    800090a0:	29c50513          	addi	a0,a0,668 # 8002d338 <__func__.0+0x318>
    800090a4:	517210ef          	jal	8002adba <printf>
    800090a8:	02900513          	li	a0,41
    800090ac:	1fd200ef          	jal	80029aa8 <putchar>
    800090b0:	4529                	li	a0,10
    800090b2:	1f7200ef          	jal	80029aa8 <putchar>
    800090b6:	00090e63          	beqz	s2,800090d2 <tinst_tests_pf+0x12b0>
    800090ba:	00048797          	auipc	a5,0x48
    800090be:	f577c783          	lbu	a5,-169(a5) # 80051011 <excpt+0x1>
    800090c2:	c799                	beqz	a5,800090d0 <tinst_tests_pf+0x12ae>
    800090c4:	6418                	ld	a4,8(s0)
    800090c6:	47bd                	li	a5,15
    800090c8:	00f71463          	bne	a4,a5,800090d0 <tinst_tests_pf+0x12ae>
    800090cc:	75b0106f          	j	8000b026 <tinst_tests_pf+0x3204>
    800090d0:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    800090d2:	ca1f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    800090d6:	400197b7          	lui	a5,0x40019
    800090da:	078a                	slli	a5,a5,0x2
    800090dc:	4097b4af          	amoor.d	s1,s1,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    800090e0:	00026617          	auipc	a2,0x26
    800090e4:	33860613          	addi	a2,a2,824 # 8002f418 <__func__.0+0x23f8>
    800090e8:	08200593          	li	a1,130
    800090ec:	00024517          	auipc	a0,0x24
    800090f0:	22c50513          	addi	a0,a0,556 # 8002d318 <__func__.0+0x2f8>
    800090f4:	4c7210ef          	jal	8002adba <printf>
    800090f8:	00048797          	auipc	a5,0x48
    800090fc:	f197c783          	lbu	a5,-231(a5) # 80051011 <excpt+0x1>
    80009100:	e399                	bnez	a5,80009106 <tinst_tests_pf+0x12e4>
    80009102:	4800106f          	j	8000a582 <tinst_tests_pf+0x2760>
    80009106:	6418                	ld	a4,8(s0)
    80009108:	47bd                	li	a5,15
    8000910a:	00024597          	auipc	a1,0x24
    8000910e:	1e658593          	addi	a1,a1,486 # 8002d2f0 <__func__.0+0x2d0>
    80009112:	00f71463          	bne	a4,a5,8000911a <tinst_tests_pf+0x12f8>
    80009116:	41e0106f          	j	8000a534 <tinst_tests_pf+0x2712>
    8000911a:	00024517          	auipc	a0,0x24
    8000911e:	21650513          	addi	a0,a0,534 # 8002d330 <__func__.0+0x310>
    80009122:	499210ef          	jal	8002adba <printf>
    80009126:	00048797          	auipc	a5,0x48
    8000912a:	eeb7c783          	lbu	a5,-277(a5) # 80051011 <excpt+0x1>
    8000912e:	c799                	beqz	a5,8000913c <tinst_tests_pf+0x131a>
    80009130:	6418                	ld	a4,8(s0)
    80009132:	47bd                	li	a5,15
    80009134:	00f71463          	bne	a4,a5,8000913c <tinst_tests_pf+0x131a>
    80009138:	7770106f          	j	8000b0ae <tinst_tests_pf+0x328c>
    8000913c:	00024517          	auipc	a0,0x24
    80009140:	1fc50513          	addi	a0,a0,508 # 8002d338 <__func__.0+0x318>
    80009144:	477210ef          	jal	8002adba <printf>
    80009148:	02900513          	li	a0,41
    8000914c:	15d200ef          	jal	80029aa8 <putchar>
    80009150:	4529                	li	a0,10
    80009152:	157200ef          	jal	80029aa8 <putchar>
    80009156:	00090a63          	beqz	s2,8000916a <tinst_tests_pf+0x1348>
    8000915a:	00048797          	auipc	a5,0x48
    8000915e:	eb77c783          	lbu	a5,-329(a5) # 80051011 <excpt+0x1>
    80009162:	c399                	beqz	a5,80009168 <tinst_tests_pf+0x1346>
    80009164:	0990106f          	j	8000a9fc <tinst_tests_pf+0x2bda>
    80009168:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000916a:	c09f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000916e:	400197b7          	lui	a5,0x40019
    80009172:	078a                	slli	a5,a5,0x2
    80009174:	8097b4af          	amomin.d	s1,s1,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    80009178:	00026617          	auipc	a2,0x26
    8000917c:	2e060613          	addi	a2,a2,736 # 8002f458 <__func__.0+0x2438>
    80009180:	08200593          	li	a1,130
    80009184:	00024517          	auipc	a0,0x24
    80009188:	19450513          	addi	a0,a0,404 # 8002d318 <__func__.0+0x2f8>
    8000918c:	42f210ef          	jal	8002adba <printf>
    80009190:	00048797          	auipc	a5,0x48
    80009194:	e817c783          	lbu	a5,-383(a5) # 80051011 <excpt+0x1>
    80009198:	e399                	bnez	a5,8000919e <tinst_tests_pf+0x137c>
    8000919a:	4720106f          	j	8000a60c <tinst_tests_pf+0x27ea>
    8000919e:	6418                	ld	a4,8(s0)
    800091a0:	47bd                	li	a5,15
    800091a2:	00024597          	auipc	a1,0x24
    800091a6:	14e58593          	addi	a1,a1,334 # 8002d2f0 <__func__.0+0x2d0>
    800091aa:	00f71463          	bne	a4,a5,800091b2 <tinst_tests_pf+0x1390>
    800091ae:	4100106f          	j	8000a5be <tinst_tests_pf+0x279c>
    800091b2:	00024517          	auipc	a0,0x24
    800091b6:	17e50513          	addi	a0,a0,382 # 8002d330 <__func__.0+0x310>
    800091ba:	401210ef          	jal	8002adba <printf>
    800091be:	00048797          	auipc	a5,0x48
    800091c2:	e537c783          	lbu	a5,-429(a5) # 80051011 <excpt+0x1>
    800091c6:	c799                	beqz	a5,800091d4 <tinst_tests_pf+0x13b2>
    800091c8:	6418                	ld	a4,8(s0)
    800091ca:	47bd                	li	a5,15
    800091cc:	00f71463          	bne	a4,a5,800091d4 <tinst_tests_pf+0x13b2>
    800091d0:	7230106f          	j	8000b0f2 <tinst_tests_pf+0x32d0>
    800091d4:	00024517          	auipc	a0,0x24
    800091d8:	16450513          	addi	a0,a0,356 # 8002d338 <__func__.0+0x318>
    800091dc:	3df210ef          	jal	8002adba <printf>
    800091e0:	02900513          	li	a0,41
    800091e4:	0c5200ef          	jal	80029aa8 <putchar>
    800091e8:	4529                	li	a0,10
    800091ea:	0bf200ef          	jal	80029aa8 <putchar>
    800091ee:	00090a63          	beqz	s2,80009202 <tinst_tests_pf+0x13e0>
    800091f2:	00048797          	auipc	a5,0x48
    800091f6:	e1f7c783          	lbu	a5,-481(a5) # 80051011 <excpt+0x1>
    800091fa:	c399                	beqz	a5,80009200 <tinst_tests_pf+0x13de>
    800091fc:	04f0106f          	j	8000aa4a <tinst_tests_pf+0x2c28>
    80009200:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009202:	b71f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80009206:	400197b7          	lui	a5,0x40019
    8000920a:	078a                	slli	a5,a5,0x2
    8000920c:	a097b4af          	amomax.d	s1,s1,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    80009210:	00026617          	auipc	a2,0x26
    80009214:	28860613          	addi	a2,a2,648 # 8002f498 <__func__.0+0x2478>
    80009218:	08200593          	li	a1,130
    8000921c:	00024517          	auipc	a0,0x24
    80009220:	0fc50513          	addi	a0,a0,252 # 8002d318 <__func__.0+0x2f8>
    80009224:	397210ef          	jal	8002adba <printf>
    80009228:	00048797          	auipc	a5,0x48
    8000922c:	de97c783          	lbu	a5,-535(a5) # 80051011 <excpt+0x1>
    80009230:	e399                	bnez	a5,80009236 <tinst_tests_pf+0x1414>
    80009232:	4340106f          	j	8000a666 <tinst_tests_pf+0x2844>
    80009236:	6418                	ld	a4,8(s0)
    80009238:	47bd                	li	a5,15
    8000923a:	00024597          	auipc	a1,0x24
    8000923e:	0b658593          	addi	a1,a1,182 # 8002d2f0 <__func__.0+0x2d0>
    80009242:	00f71463          	bne	a4,a5,8000924a <tinst_tests_pf+0x1428>
    80009246:	3d20106f          	j	8000a618 <tinst_tests_pf+0x27f6>
    8000924a:	00024517          	auipc	a0,0x24
    8000924e:	0e650513          	addi	a0,a0,230 # 8002d330 <__func__.0+0x310>
    80009252:	369210ef          	jal	8002adba <printf>
    80009256:	00048797          	auipc	a5,0x48
    8000925a:	dbb7c783          	lbu	a5,-581(a5) # 80051011 <excpt+0x1>
    8000925e:	c799                	beqz	a5,8000926c <tinst_tests_pf+0x144a>
    80009260:	6418                	ld	a4,8(s0)
    80009262:	47bd                	li	a5,15
    80009264:	00f71463          	bne	a4,a5,8000926c <tinst_tests_pf+0x144a>
    80009268:	6cf0106f          	j	8000b136 <tinst_tests_pf+0x3314>
    8000926c:	00024517          	auipc	a0,0x24
    80009270:	0cc50513          	addi	a0,a0,204 # 8002d338 <__func__.0+0x318>
    80009274:	347210ef          	jal	8002adba <printf>
    80009278:	02900513          	li	a0,41
    8000927c:	02d200ef          	jal	80029aa8 <putchar>
    80009280:	4529                	li	a0,10
    80009282:	027200ef          	jal	80029aa8 <putchar>
    80009286:	00090a63          	beqz	s2,8000929a <tinst_tests_pf+0x1478>
    8000928a:	00048797          	auipc	a5,0x48
    8000928e:	d877c783          	lbu	a5,-633(a5) # 80051011 <excpt+0x1>
    80009292:	c399                	beqz	a5,80009298 <tinst_tests_pf+0x1476>
    80009294:	02f0106f          	j	8000aac2 <tinst_tests_pf+0x2ca0>
    80009298:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000929a:	ad9f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000929e:	400197b7          	lui	a5,0x40019
    800092a2:	078a                	slli	a5,a5,0x2
    800092a4:	c097b4af          	amominu.d	s1,s1,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    800092a8:	00026617          	auipc	a2,0x26
    800092ac:	23060613          	addi	a2,a2,560 # 8002f4d8 <__func__.0+0x24b8>
    800092b0:	08200593          	li	a1,130
    800092b4:	00024517          	auipc	a0,0x24
    800092b8:	06450513          	addi	a0,a0,100 # 8002d318 <__func__.0+0x2f8>
    800092bc:	2ff210ef          	jal	8002adba <printf>
    800092c0:	00048797          	auipc	a5,0x48
    800092c4:	d517c783          	lbu	a5,-687(a5) # 80051011 <excpt+0x1>
    800092c8:	e399                	bnez	a5,800092ce <tinst_tests_pf+0x14ac>
    800092ca:	3f60106f          	j	8000a6c0 <tinst_tests_pf+0x289e>
    800092ce:	6418                	ld	a4,8(s0)
    800092d0:	47bd                	li	a5,15
    800092d2:	00024597          	auipc	a1,0x24
    800092d6:	01e58593          	addi	a1,a1,30 # 8002d2f0 <__func__.0+0x2d0>
    800092da:	00f71463          	bne	a4,a5,800092e2 <tinst_tests_pf+0x14c0>
    800092de:	3940106f          	j	8000a672 <tinst_tests_pf+0x2850>
    800092e2:	00024517          	auipc	a0,0x24
    800092e6:	04e50513          	addi	a0,a0,78 # 8002d330 <__func__.0+0x310>
    800092ea:	2d1210ef          	jal	8002adba <printf>
    800092ee:	00048797          	auipc	a5,0x48
    800092f2:	d237c783          	lbu	a5,-733(a5) # 80051011 <excpt+0x1>
    800092f6:	c799                	beqz	a5,80009304 <tinst_tests_pf+0x14e2>
    800092f8:	6418                	ld	a4,8(s0)
    800092fa:	47bd                	li	a5,15
    800092fc:	00f71463          	bne	a4,a5,80009304 <tinst_tests_pf+0x14e2>
    80009300:	67b0106f          	j	8000b17a <tinst_tests_pf+0x3358>
    80009304:	00024517          	auipc	a0,0x24
    80009308:	03450513          	addi	a0,a0,52 # 8002d338 <__func__.0+0x318>
    8000930c:	2af210ef          	jal	8002adba <printf>
    80009310:	02900513          	li	a0,41
    80009314:	794200ef          	jal	80029aa8 <putchar>
    80009318:	4529                	li	a0,10
    8000931a:	78e200ef          	jal	80029aa8 <putchar>
    8000931e:	00090a63          	beqz	s2,80009332 <tinst_tests_pf+0x1510>
    80009322:	00048797          	auipc	a5,0x48
    80009326:	cef7c783          	lbu	a5,-785(a5) # 80051011 <excpt+0x1>
    8000932a:	c399                	beqz	a5,80009330 <tinst_tests_pf+0x150e>
    8000932c:	7e40106f          	j	8000ab10 <tinst_tests_pf+0x2cee>
    80009330:	4901                	li	s2,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    80009332:	a41f70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    80009336:	400197b7          	lui	a5,0x40019
    8000933a:	078a                	slli	a5,a5,0x2
    8000933c:	e097b4af          	amomaxu.d	s1,s1,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    80009340:	00026617          	auipc	a2,0x26
    80009344:	1d860613          	addi	a2,a2,472 # 8002f518 <__func__.0+0x24f8>
    80009348:	08200593          	li	a1,130
    8000934c:	00024517          	auipc	a0,0x24
    80009350:	fcc50513          	addi	a0,a0,-52 # 8002d318 <__func__.0+0x2f8>
    80009354:	267210ef          	jal	8002adba <printf>
    80009358:	00048797          	auipc	a5,0x48
    8000935c:	cb97c783          	lbu	a5,-839(a5) # 80051011 <excpt+0x1>
    80009360:	e399                	bnez	a5,80009366 <tinst_tests_pf+0x1544>
    80009362:	3b80106f          	j	8000a71a <tinst_tests_pf+0x28f8>
    80009366:	6418                	ld	a4,8(s0)
    80009368:	47bd                	li	a5,15
    8000936a:	00024597          	auipc	a1,0x24
    8000936e:	f8658593          	addi	a1,a1,-122 # 8002d2f0 <__func__.0+0x2d0>
    80009372:	00f71463          	bne	a4,a5,8000937a <tinst_tests_pf+0x1558>
    80009376:	3560106f          	j	8000a6cc <tinst_tests_pf+0x28aa>
    8000937a:	00024517          	auipc	a0,0x24
    8000937e:	fb650513          	addi	a0,a0,-74 # 8002d330 <__func__.0+0x310>
    80009382:	239210ef          	jal	8002adba <printf>
    80009386:	00048797          	auipc	a5,0x48
    8000938a:	c8b7c783          	lbu	a5,-885(a5) # 80051011 <excpt+0x1>
    8000938e:	c799                	beqz	a5,8000939c <tinst_tests_pf+0x157a>
    80009390:	6418                	ld	a4,8(s0)
    80009392:	47bd                	li	a5,15
    80009394:	00f71463          	bne	a4,a5,8000939c <tinst_tests_pf+0x157a>
    80009398:	6270106f          	j	8000b1be <tinst_tests_pf+0x339c>
    8000939c:	00024517          	auipc	a0,0x24
    800093a0:	f9c50513          	addi	a0,a0,-100 # 8002d338 <__func__.0+0x318>
    800093a4:	217210ef          	jal	8002adba <printf>
    800093a8:	02900513          	li	a0,41
    800093ac:	6fc200ef          	jal	80029aa8 <putchar>
    800093b0:	4529                	li	a0,10
    800093b2:	6f6200ef          	jal	80029aa8 <putchar>
    800093b6:	04090e63          	beqz	s2,80009412 <tinst_tests_pf+0x15f0>
    800093ba:	00048497          	auipc	s1,0x48
    800093be:	c574c483          	lbu	s1,-937(s1) # 80051011 <excpt+0x1>
    800093c2:	c8a9                	beqz	s1,80009414 <tinst_tests_pf+0x15f2>
    800093c4:	6418                	ld	a4,8(s0)
    800093c6:	47bd                	li	a5,15
    800093c8:	04f71563          	bne	a4,a5,80009412 <tinst_tests_pf+0x15f0>
    800093cc:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    800093ce:	00024597          	auipc	a1,0x24
    800093d2:	f1258593          	addi	a1,a1,-238 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    800093d6:	c3b9                	beqz	a5,8000941c <tinst_tests_pf+0x15fa>
    800093d8:	6814                	ld	a3,16(s0)

static inline uint32_t read_instruction(uintptr_t addr) {

    uint32_t instruction = 0;

    if((addr & 0b1) != 0) {
    800093da:	0016f713          	andi	a4,a3,1
    800093de:	2c0710e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    }

    instruction = *((uint16_t*)addr);
    800093e2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800093e6:	460d                	li	a2,3
    800093e8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800093ec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800093ee:	00c59763          	bne	a1,a2,800093fc <tinst_tests_pf+0x15da>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800093f2:	0026d683          	lhu	a3,2(a3)
    800093f6:	0106969b          	slliw	a3,a3,0x10
    800093fa:	8f55                	or	a4,a4,a3
    800093fc:	1ffe16b7          	lui	a3,0x1ffe1
    80009400:	068e                	slli	a3,a3,0x3
    80009402:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009404:	8f75                	and	a4,a4,a3
    TEST_END();
    80009406:	00024597          	auipc	a1,0x24
    8000940a:	eda58593          	addi	a1,a1,-294 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000940e:	00e78763          	beq	a5,a4,8000941c <tinst_tests_pf+0x15fa>
    80009412:	4481                	li	s1,0
    TEST_END();
    80009414:	00024597          	auipc	a1,0x24
    80009418:	edc58593          	addi	a1,a1,-292 # 8002d2f0 <__func__.0+0x2d0>
    8000941c:	00024517          	auipc	a0,0x24
    80009420:	f7c50513          	addi	a0,a0,-132 # 8002d398 <__func__.0+0x378>
    80009424:	197210ef          	jal	8002adba <printf>
    80009428:	4511                	li	a0,4
    8000942a:	a45f70ef          	jal	80000e6e <goto_priv>
    8000942e:	b5cf80ef          	jal	8000178a <reset_state>
}
    80009432:	70a2                	ld	ra,40(sp)
    80009434:	7402                	ld	s0,32(sp)
    80009436:	6942                	ld	s2,16(sp)
    80009438:	69a2                	ld	s3,8(sp)
    8000943a:	8526                	mv	a0,s1
    8000943c:	64e2                	ld	s1,24(sp)
    8000943e:	6145                	addi	sp,sp,48
    80009440:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lb which results in a lpf",         
    80009442:	701c                	ld	a5,32(s0)
    80009444:	00024597          	auipc	a1,0x24
    80009448:	e9c58593          	addi	a1,a1,-356 # 8002d2e0 <__func__.0+0x2c0>
    8000944c:	e399                	bnez	a5,80009452 <tinst_tests_pf+0x1630>
    8000944e:	a55fe06f          	j	80007ea2 <tinst_tests_pf+0x80>
    80009452:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009454:	0016f713          	andi	a4,a3,1
    80009458:	240713e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000945c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009460:	460d                	li	a2,3
    80009462:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009466:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009468:	00c59763          	bne	a1,a2,80009476 <tinst_tests_pf+0x1654>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000946c:	0026d683          	lhu	a3,2(a3)
    80009470:	0106969b          	slliw	a3,a3,0x10
    80009474:	8f55                	or	a4,a4,a3
    80009476:	1746                	slli	a4,a4,0x31
    80009478:	9345                	srli	a4,a4,0x31
    8000947a:	00024597          	auipc	a1,0x24
    8000947e:	e6658593          	addi	a1,a1,-410 # 8002d2e0 <__func__.0+0x2c0>
    80009482:	00e79463          	bne	a5,a4,8000948a <tinst_tests_pf+0x1668>
    80009486:	a1dfe06f          	j	80007ea2 <tinst_tests_pf+0x80>
    8000948a:	00024597          	auipc	a1,0x24
    8000948e:	e6658593          	addi	a1,a1,-410 # 8002d2f0 <__func__.0+0x2d0>
    80009492:	a11fe06f          	j	80007ea2 <tinst_tests_pf+0x80>
    80009496:	6418                	ld	a4,8(s0)
    80009498:	47b5                	li	a5,13
    8000949a:	4901                	li	s2,0
    8000949c:	00f70463          	beq	a4,a5,800094a4 <tinst_tests_pf+0x1682>
    800094a0:	a4ffe06f          	j	80007eee <tinst_tests_pf+0xcc>
    800094a4:	7018                	ld	a4,32(s0)
    800094a6:	4905                	li	s2,1
    800094a8:	e319                	bnez	a4,800094ae <tinst_tests_pf+0x168c>
    800094aa:	a45fe06f          	j	80007eee <tinst_tests_pf+0xcc>
    800094ae:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800094b0:	0126f7b3          	and	a5,a3,s2
    800094b4:	1e0795e3          	bnez	a5,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800094b8:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800094bc:	460d                	li	a2,3
    800094be:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    800094c2:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800094c4:	00c59763          	bne	a1,a2,800094d2 <tinst_tests_pf+0x16b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800094c8:	0026d683          	lhu	a3,2(a3)
    800094cc:	0106969b          	slliw	a3,a3,0x10
    800094d0:	8fd5                	or	a5,a5,a3
    800094d2:	03179913          	slli	s2,a5,0x31
    800094d6:	03195913          	srli	s2,s2,0x31
    800094da:	40e90933          	sub	s2,s2,a4
    800094de:	00193913          	seqz	s2,s2
    800094e2:	a0dfe06f          	j	80007eee <tinst_tests_pf+0xcc>
    800094e6:	701c                	ld	a5,32(s0)
    800094e8:	e399                	bnez	a5,800094ee <tinst_tests_pf+0x16cc>
    800094ea:	9effe06f          	j	80007ed8 <tinst_tests_pf+0xb6>
    800094ee:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800094f0:	0016f713          	andi	a4,a3,1
    800094f4:	1a0715e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800094f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800094fc:	460d                	li	a2,3
    800094fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009502:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009504:	00c59763          	bne	a1,a2,80009512 <tinst_tests_pf+0x16f0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009508:	0026d683          	lhu	a3,2(a3)
    8000950c:	0106969b          	slliw	a3,a3,0x10
    80009510:	8f55                	or	a4,a4,a3
    80009512:	1746                	slli	a4,a4,0x31
    80009514:	9345                	srli	a4,a4,0x31
    80009516:	00e78463          	beq	a5,a4,8000951e <tinst_tests_pf+0x16fc>
    8000951a:	9abfe06f          	j	80007ec4 <tinst_tests_pf+0xa2>
    8000951e:	9bbfe06f          	j	80007ed8 <tinst_tests_pf+0xb6>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009522:	701c                	ld	a5,32(s0)
    80009524:	00024597          	auipc	a1,0x24
    80009528:	dbc58593          	addi	a1,a1,-580 # 8002d2e0 <__func__.0+0x2c0>
    8000952c:	e399                	bnez	a5,80009532 <tinst_tests_pf+0x1710>
    8000952e:	a09fe06f          	j	80007f36 <tinst_tests_pf+0x114>
    80009532:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009534:	0016f713          	andi	a4,a3,1
    80009538:	160713e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000953c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009540:	460d                	li	a2,3
    80009542:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009546:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009548:	00c59763          	bne	a1,a2,80009556 <tinst_tests_pf+0x1734>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000954c:	0026d683          	lhu	a3,2(a3)
    80009550:	0106969b          	slliw	a3,a3,0x10
    80009554:	8f55                	or	a4,a4,a3
    80009556:	1746                	slli	a4,a4,0x31
    80009558:	9345                	srli	a4,a4,0x31
    8000955a:	00024597          	auipc	a1,0x24
    8000955e:	d8658593          	addi	a1,a1,-634 # 8002d2e0 <__func__.0+0x2c0>
    80009562:	00e79463          	bne	a5,a4,8000956a <tinst_tests_pf+0x1748>
    80009566:	9d1fe06f          	j	80007f36 <tinst_tests_pf+0x114>
    8000956a:	00024597          	auipc	a1,0x24
    8000956e:	d8658593          	addi	a1,a1,-634 # 8002d2f0 <__func__.0+0x2d0>
    80009572:	9c5fe06f          	j	80007f36 <tinst_tests_pf+0x114>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009576:	701c                	ld	a5,32(s0)
    80009578:	00024597          	auipc	a1,0x24
    8000957c:	d6858593          	addi	a1,a1,-664 # 8002d2e0 <__func__.0+0x2c0>
    80009580:	e399                	bnez	a5,80009586 <tinst_tests_pf+0x1764>
    80009582:	a55fe06f          	j	80007fd6 <tinst_tests_pf+0x1b4>
    80009586:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009588:	0016f713          	andi	a4,a3,1
    8000958c:	100719e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009590:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009594:	460d                	li	a2,3
    80009596:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000959a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000959c:	00c59763          	bne	a1,a2,800095aa <tinst_tests_pf+0x1788>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095a0:	0026d683          	lhu	a3,2(a3)
    800095a4:	0106969b          	slliw	a3,a3,0x10
    800095a8:	8f55                	or	a4,a4,a3
    800095aa:	1746                	slli	a4,a4,0x31
    800095ac:	9345                	srli	a4,a4,0x31
    800095ae:	00024597          	auipc	a1,0x24
    800095b2:	d3258593          	addi	a1,a1,-718 # 8002d2e0 <__func__.0+0x2c0>
    800095b6:	00e79463          	bne	a5,a4,800095be <tinst_tests_pf+0x179c>
    800095ba:	a1dfe06f          	j	80007fd6 <tinst_tests_pf+0x1b4>
    800095be:	00024597          	auipc	a1,0x24
    800095c2:	d3258593          	addi	a1,a1,-718 # 8002d2f0 <__func__.0+0x2d0>
    800095c6:	a11fe06f          	j	80007fd6 <tinst_tests_pf+0x1b4>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    800095ca:	701c                	ld	a5,32(s0)
    800095cc:	00024597          	auipc	a1,0x24
    800095d0:	d1458593          	addi	a1,a1,-748 # 8002d2e0 <__func__.0+0x2c0>
    800095d4:	e399                	bnez	a5,800095da <tinst_tests_pf+0x17b8>
    800095d6:	aa1fe06f          	j	80008076 <tinst_tests_pf+0x254>
    800095da:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800095dc:	0016f713          	andi	a4,a3,1
    800095e0:	0a071fe3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800095e4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800095e8:	460d                	li	a2,3
    800095ea:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800095ee:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800095f0:	00c59763          	bne	a1,a2,800095fe <tinst_tests_pf+0x17dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800095f4:	0026d683          	lhu	a3,2(a3)
    800095f8:	0106969b          	slliw	a3,a3,0x10
    800095fc:	8f55                	or	a4,a4,a3
    800095fe:	1746                	slli	a4,a4,0x31
    80009600:	9345                	srli	a4,a4,0x31
    80009602:	00024597          	auipc	a1,0x24
    80009606:	cde58593          	addi	a1,a1,-802 # 8002d2e0 <__func__.0+0x2c0>
    8000960a:	00e79463          	bne	a5,a4,80009612 <tinst_tests_pf+0x17f0>
    8000960e:	a69fe06f          	j	80008076 <tinst_tests_pf+0x254>
    80009612:	00024597          	auipc	a1,0x24
    80009616:	cde58593          	addi	a1,a1,-802 # 8002d2f0 <__func__.0+0x2d0>
    8000961a:	a5dfe06f          	j	80008076 <tinst_tests_pf+0x254>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    8000961e:	701c                	ld	a5,32(s0)
    80009620:	00024597          	auipc	a1,0x24
    80009624:	cc058593          	addi	a1,a1,-832 # 8002d2e0 <__func__.0+0x2c0>
    80009628:	e399                	bnez	a5,8000962e <tinst_tests_pf+0x180c>
    8000962a:	aedfe06f          	j	80008116 <tinst_tests_pf+0x2f4>
    8000962e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009630:	0016f713          	andi	a4,a3,1
    80009634:	060715e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009638:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000963c:	460d                	li	a2,3
    8000963e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009642:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009644:	00c59763          	bne	a1,a2,80009652 <tinst_tests_pf+0x1830>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009648:	0026d683          	lhu	a3,2(a3)
    8000964c:	0106969b          	slliw	a3,a3,0x10
    80009650:	8f55                	or	a4,a4,a3
    80009652:	1746                	slli	a4,a4,0x31
    80009654:	9345                	srli	a4,a4,0x31
    80009656:	00024597          	auipc	a1,0x24
    8000965a:	c8a58593          	addi	a1,a1,-886 # 8002d2e0 <__func__.0+0x2c0>
    8000965e:	00e79463          	bne	a5,a4,80009666 <tinst_tests_pf+0x1844>
    80009662:	ab5fe06f          	j	80008116 <tinst_tests_pf+0x2f4>
    80009666:	00024597          	auipc	a1,0x24
    8000966a:	c8a58593          	addi	a1,a1,-886 # 8002d2f0 <__func__.0+0x2d0>
    8000966e:	aa9fe06f          	j	80008116 <tinst_tests_pf+0x2f4>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009672:	701c                	ld	a5,32(s0)
    80009674:	00024597          	auipc	a1,0x24
    80009678:	c6c58593          	addi	a1,a1,-916 # 8002d2e0 <__func__.0+0x2c0>
    8000967c:	e399                	bnez	a5,80009682 <tinst_tests_pf+0x1860>
    8000967e:	b31fe06f          	j	800081ae <tinst_tests_pf+0x38c>
    80009682:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009684:	0016f713          	andi	a4,a3,1
    80009688:	00071be3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000968c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009690:	460d                	li	a2,3
    80009692:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009696:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009698:	00c59763          	bne	a1,a2,800096a6 <tinst_tests_pf+0x1884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000969c:	0026d683          	lhu	a3,2(a3)
    800096a0:	0106969b          	slliw	a3,a3,0x10
    800096a4:	8f55                	or	a4,a4,a3
    800096a6:	1746                	slli	a4,a4,0x31
    800096a8:	9345                	srli	a4,a4,0x31
    800096aa:	00024597          	auipc	a1,0x24
    800096ae:	c3658593          	addi	a1,a1,-970 # 8002d2e0 <__func__.0+0x2c0>
    800096b2:	00e79463          	bne	a5,a4,800096ba <tinst_tests_pf+0x1898>
    800096b6:	af9fe06f          	j	800081ae <tinst_tests_pf+0x38c>
    800096ba:	00024597          	auipc	a1,0x24
    800096be:	c3658593          	addi	a1,a1,-970 # 8002d2f0 <__func__.0+0x2d0>
    800096c2:	aedfe06f          	j	800081ae <tinst_tests_pf+0x38c>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    800096c6:	701c                	ld	a5,32(s0)
    800096c8:	00024597          	auipc	a1,0x24
    800096cc:	c1858593          	addi	a1,a1,-1000 # 8002d2e0 <__func__.0+0x2c0>
    800096d0:	e399                	bnez	a5,800096d6 <tinst_tests_pf+0x18b4>
    800096d2:	b75fe06f          	j	80008246 <tinst_tests_pf+0x424>
    800096d6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800096d8:	0016f713          	andi	a4,a3,1
    800096dc:	7c071163          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800096e0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800096e4:	460d                	li	a2,3
    800096e6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800096ea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800096ec:	00c59763          	bne	a1,a2,800096fa <tinst_tests_pf+0x18d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800096f0:	0026d683          	lhu	a3,2(a3)
    800096f4:	0106969b          	slliw	a3,a3,0x10
    800096f8:	8f55                	or	a4,a4,a3
    800096fa:	1746                	slli	a4,a4,0x31
    800096fc:	9345                	srli	a4,a4,0x31
    800096fe:	00024597          	auipc	a1,0x24
    80009702:	be258593          	addi	a1,a1,-1054 # 8002d2e0 <__func__.0+0x2c0>
    80009706:	00e79463          	bne	a5,a4,8000970e <tinst_tests_pf+0x18ec>
    8000970a:	b3dfe06f          	j	80008246 <tinst_tests_pf+0x424>
    8000970e:	00024597          	auipc	a1,0x24
    80009712:	be258593          	addi	a1,a1,-1054 # 8002d2f0 <__func__.0+0x2d0>
    80009716:	b31fe06f          	j	80008246 <tinst_tests_pf+0x424>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000971a:	701c                	ld	a5,32(s0)
    8000971c:	00024597          	auipc	a1,0x24
    80009720:	bc458593          	addi	a1,a1,-1084 # 8002d2e0 <__func__.0+0x2c0>
    80009724:	e399                	bnez	a5,8000972a <tinst_tests_pf+0x1908>
    80009726:	bbbfe06f          	j	800082e0 <tinst_tests_pf+0x4be>
    8000972a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000972c:	0016f713          	andi	a4,a3,1
    80009730:	76071763          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009734:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009738:	460d                	li	a2,3
    8000973a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000973e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009740:	00c59763          	bne	a1,a2,8000974e <tinst_tests_pf+0x192c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009744:	0026d683          	lhu	a3,2(a3)
    80009748:	0106969b          	slliw	a3,a3,0x10
    8000974c:	8f55                	or	a4,a4,a3
    8000974e:	01f076b7          	lui	a3,0x1f07
    80009752:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009756:	8f75                	and	a4,a4,a3
    80009758:	00024597          	auipc	a1,0x24
    8000975c:	b8858593          	addi	a1,a1,-1144 # 8002d2e0 <__func__.0+0x2c0>
    80009760:	00e79463          	bne	a5,a4,80009768 <tinst_tests_pf+0x1946>
    80009764:	b7dfe06f          	j	800082e0 <tinst_tests_pf+0x4be>
    80009768:	00024597          	auipc	a1,0x24
    8000976c:	b8858593          	addi	a1,a1,-1144 # 8002d2f0 <__func__.0+0x2d0>
    80009770:	b71fe06f          	j	800082e0 <tinst_tests_pf+0x4be>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009774:	701c                	ld	a5,32(s0)
    80009776:	00024597          	auipc	a1,0x24
    8000977a:	b6a58593          	addi	a1,a1,-1174 # 8002d2e0 <__func__.0+0x2c0>
    8000977e:	e399                	bnez	a5,80009784 <tinst_tests_pf+0x1962>
    80009780:	bfffe06f          	j	8000837e <tinst_tests_pf+0x55c>
    80009784:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009786:	0016f713          	andi	a4,a3,1
    8000978a:	70071a63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000978e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009792:	460d                	li	a2,3
    80009794:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009798:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000979a:	00c59763          	bne	a1,a2,800097a8 <tinst_tests_pf+0x1986>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000979e:	0026d683          	lhu	a3,2(a3)
    800097a2:	0106969b          	slliw	a3,a3,0x10
    800097a6:	8f55                	or	a4,a4,a3
    800097a8:	01f076b7          	lui	a3,0x1f07
    800097ac:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    800097b0:	8f75                	and	a4,a4,a3
    800097b2:	00024597          	auipc	a1,0x24
    800097b6:	b2e58593          	addi	a1,a1,-1234 # 8002d2e0 <__func__.0+0x2c0>
    800097ba:	00e79463          	bne	a5,a4,800097c2 <tinst_tests_pf+0x19a0>
    800097be:	bc1fe06f          	j	8000837e <tinst_tests_pf+0x55c>
    800097c2:	00024597          	auipc	a1,0x24
    800097c6:	b2e58593          	addi	a1,a1,-1234 # 8002d2f0 <__func__.0+0x2d0>
    800097ca:	bb5fe06f          	j	8000837e <tinst_tests_pf+0x55c>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    800097ce:	701c                	ld	a5,32(s0)
    800097d0:	00024597          	auipc	a1,0x24
    800097d4:	b1058593          	addi	a1,a1,-1264 # 8002d2e0 <__func__.0+0x2c0>
    800097d8:	e399                	bnez	a5,800097de <tinst_tests_pf+0x19bc>
    800097da:	c45fe06f          	j	8000841e <tinst_tests_pf+0x5fc>
    800097de:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800097e0:	0016f713          	andi	a4,a3,1
    800097e4:	6a071d63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800097e8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800097ec:	460d                	li	a2,3
    800097ee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800097f2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800097f4:	00c59763          	bne	a1,a2,80009802 <tinst_tests_pf+0x19e0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800097f8:	0026d683          	lhu	a3,2(a3)
    800097fc:	0106969b          	slliw	a3,a3,0x10
    80009800:	8f55                	or	a4,a4,a3
    80009802:	01f076b7          	lui	a3,0x1f07
    80009806:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000980a:	8f75                	and	a4,a4,a3
    8000980c:	00024597          	auipc	a1,0x24
    80009810:	ad458593          	addi	a1,a1,-1324 # 8002d2e0 <__func__.0+0x2c0>
    80009814:	00e79463          	bne	a5,a4,8000981c <tinst_tests_pf+0x19fa>
    80009818:	c07fe06f          	j	8000841e <tinst_tests_pf+0x5fc>
    8000981c:	00024597          	auipc	a1,0x24
    80009820:	ad458593          	addi	a1,a1,-1324 # 8002d2f0 <__func__.0+0x2d0>
    80009824:	bfbfe06f          	j	8000841e <tinst_tests_pf+0x5fc>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009828:	701c                	ld	a5,32(s0)
    8000982a:	00024597          	auipc	a1,0x24
    8000982e:	ab658593          	addi	a1,a1,-1354 # 8002d2e0 <__func__.0+0x2c0>
    80009832:	e399                	bnez	a5,80009838 <tinst_tests_pf+0x1a16>
    80009834:	c8dfe06f          	j	800084c0 <tinst_tests_pf+0x69e>
    80009838:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000983a:	0016f713          	andi	a4,a3,1
    8000983e:	66071063          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009842:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009846:	460d                	li	a2,3
    80009848:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000984c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000984e:	00c59763          	bne	a1,a2,8000985c <tinst_tests_pf+0x1a3a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009852:	0026d683          	lhu	a3,2(a3)
    80009856:	0106969b          	slliw	a3,a3,0x10
    8000985a:	8f55                	or	a4,a4,a3
    8000985c:	01f076b7          	lui	a3,0x1f07
    80009860:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009864:	8f75                	and	a4,a4,a3
    80009866:	00024597          	auipc	a1,0x24
    8000986a:	a7a58593          	addi	a1,a1,-1414 # 8002d2e0 <__func__.0+0x2c0>
    8000986e:	00e79463          	bne	a5,a4,80009876 <tinst_tests_pf+0x1a54>
    80009872:	c4ffe06f          	j	800084c0 <tinst_tests_pf+0x69e>
    80009876:	00024597          	auipc	a1,0x24
    8000987a:	a7a58593          	addi	a1,a1,-1414 # 8002d2f0 <__func__.0+0x2d0>
    8000987e:	c43fe06f          	j	800084c0 <tinst_tests_pf+0x69e>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009882:	701c                	ld	a5,32(s0)
    80009884:	00024597          	auipc	a1,0x24
    80009888:	a5c58593          	addi	a1,a1,-1444 # 8002d2e0 <__func__.0+0x2c0>
    8000988c:	e399                	bnez	a5,80009892 <tinst_tests_pf+0x1a70>
    8000988e:	f2ffe06f          	j	800087bc <tinst_tests_pf+0x99a>
    80009892:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009894:	0016f713          	andi	a4,a3,1
    80009898:	60071363          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000989c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098a0:	460d                	li	a2,3
    800098a2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800098a6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800098a8:	00c59763          	bne	a1,a2,800098b6 <tinst_tests_pf+0x1a94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800098ac:	0026d683          	lhu	a3,2(a3)
    800098b0:	0106969b          	slliw	a3,a3,0x10
    800098b4:	8f55                	or	a4,a4,a3
    800098b6:	1ffe16b7          	lui	a3,0x1ffe1
    800098ba:	068e                	slli	a3,a3,0x3
    800098bc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    800098be:	8f75                	and	a4,a4,a3
    800098c0:	00024597          	auipc	a1,0x24
    800098c4:	a2058593          	addi	a1,a1,-1504 # 8002d2e0 <__func__.0+0x2c0>
    800098c8:	00e79463          	bne	a5,a4,800098d0 <tinst_tests_pf+0x1aae>
    800098cc:	ef1fe06f          	j	800087bc <tinst_tests_pf+0x99a>
    800098d0:	00024597          	auipc	a1,0x24
    800098d4:	a2058593          	addi	a1,a1,-1504 # 8002d2f0 <__func__.0+0x2d0>
    800098d8:	ee5fe06f          	j	800087bc <tinst_tests_pf+0x99a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    800098dc:	701c                	ld	a5,32(s0)
    800098de:	00024597          	auipc	a1,0x24
    800098e2:	a0258593          	addi	a1,a1,-1534 # 8002d2e0 <__func__.0+0x2c0>
    800098e6:	e399                	bnez	a5,800098ec <tinst_tests_pf+0x1aca>
    800098e8:	f7bfe06f          	j	80008862 <tinst_tests_pf+0xa40>
    800098ec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800098ee:	0016f713          	andi	a4,a3,1
    800098f2:	5a071663          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800098f6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800098fa:	460d                	li	a2,3
    800098fc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009900:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009902:	00c59763          	bne	a1,a2,80009910 <tinst_tests_pf+0x1aee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009906:	0026d683          	lhu	a3,2(a3)
    8000990a:	0106969b          	slliw	a3,a3,0x10
    8000990e:	8f55                	or	a4,a4,a3
    80009910:	1ffe16b7          	lui	a3,0x1ffe1
    80009914:	068e                	slli	a3,a3,0x3
    80009916:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009918:	8f75                	and	a4,a4,a3
    8000991a:	00024597          	auipc	a1,0x24
    8000991e:	9c658593          	addi	a1,a1,-1594 # 8002d2e0 <__func__.0+0x2c0>
    80009922:	00e79463          	bne	a5,a4,8000992a <tinst_tests_pf+0x1b08>
    80009926:	f3dfe06f          	j	80008862 <tinst_tests_pf+0xa40>
    8000992a:	00024597          	auipc	a1,0x24
    8000992e:	9c658593          	addi	a1,a1,-1594 # 8002d2f0 <__func__.0+0x2d0>
    80009932:	f31fe06f          	j	80008862 <tinst_tests_pf+0xa40>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009936:	701c                	ld	a5,32(s0)
    80009938:	00024597          	auipc	a1,0x24
    8000993c:	9a858593          	addi	a1,a1,-1624 # 8002d2e0 <__func__.0+0x2c0>
    80009940:	e399                	bnez	a5,80009946 <tinst_tests_pf+0x1b24>
    80009942:	fc1fe06f          	j	80008902 <tinst_tests_pf+0xae0>
    80009946:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009948:	0016f713          	andi	a4,a3,1
    8000994c:	54071963          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009950:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009954:	460d                	li	a2,3
    80009956:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000995a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000995c:	00c59763          	bne	a1,a2,8000996a <tinst_tests_pf+0x1b48>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009960:	0026d683          	lhu	a3,2(a3)
    80009964:	0106969b          	slliw	a3,a3,0x10
    80009968:	8f55                	or	a4,a4,a3
    8000996a:	1ffe16b7          	lui	a3,0x1ffe1
    8000996e:	068e                	slli	a3,a3,0x3
    80009970:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009972:	8f75                	and	a4,a4,a3
    80009974:	00024597          	auipc	a1,0x24
    80009978:	96c58593          	addi	a1,a1,-1684 # 8002d2e0 <__func__.0+0x2c0>
    8000997c:	00e79463          	bne	a5,a4,80009984 <tinst_tests_pf+0x1b62>
    80009980:	f83fe06f          	j	80008902 <tinst_tests_pf+0xae0>
    80009984:	00024597          	auipc	a1,0x24
    80009988:	96c58593          	addi	a1,a1,-1684 # 8002d2f0 <__func__.0+0x2d0>
    8000998c:	f77fe06f          	j	80008902 <tinst_tests_pf+0xae0>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009990:	701c                	ld	a5,32(s0)
    80009992:	e399                	bnez	a5,80009998 <tinst_tests_pf+0x1b76>
    80009994:	dd8fe06f          	j	80007f6c <tinst_tests_pf+0x14a>
    80009998:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000999a:	0016f713          	andi	a4,a3,1
    8000999e:	50071063          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800099a2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099a6:	460d                	li	a2,3
    800099a8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    800099ac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    800099ae:	00c59763          	bne	a1,a2,800099bc <tinst_tests_pf+0x1b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099b2:	0026d683          	lhu	a3,2(a3)
    800099b6:	0106969b          	slliw	a3,a3,0x10
    800099ba:	8f55                	or	a4,a4,a3
    800099bc:	1746                	slli	a4,a4,0x31
    800099be:	9345                	srli	a4,a4,0x31
    800099c0:	00e78463          	beq	a5,a4,800099c8 <tinst_tests_pf+0x1ba6>
    800099c4:	d94fe06f          	j	80007f58 <tinst_tests_pf+0x136>
    800099c8:	da4fe06f          	j	80007f6c <tinst_tests_pf+0x14a>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    800099cc:	6418                	ld	a4,8(s0)
    800099ce:	47b5                	li	a5,13
    800099d0:	00f70463          	beq	a4,a5,800099d8 <tinst_tests_pf+0x1bb6>
    800099d4:	f90fe06f          	j	80008164 <tinst_tests_pf+0x342>
    800099d8:	7018                	ld	a4,32(s0)
    800099da:	e319                	bnez	a4,800099e0 <tinst_tests_pf+0x1bbe>
    800099dc:	f8afe06f          	j	80008166 <tinst_tests_pf+0x344>
    800099e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    800099e2:	0016f793          	andi	a5,a3,1
    800099e6:	4a079c63          	bnez	a5,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    800099ea:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    800099ee:	460d                	li	a2,3
    800099f0:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    800099f4:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    800099f6:	00c59763          	bne	a1,a2,80009a04 <tinst_tests_pf+0x1be2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    800099fa:	0026d683          	lhu	a3,2(a3)
    800099fe:	0106969b          	slliw	a3,a3,0x10
    80009a02:	8fd5                	or	a5,a5,a3
    80009a04:	17c6                	slli	a5,a5,0x31
    80009a06:	0317d913          	srli	s2,a5,0x31
    80009a0a:	40e90933          	sub	s2,s2,a4
    80009a0e:	00193913          	seqz	s2,s2
    80009a12:	f54fe06f          	j	80008166 <tinst_tests_pf+0x344>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    80009a16:	6418                	ld	a4,8(s0)
    80009a18:	47bd                	li	a5,15
    80009a1a:	00024597          	auipc	a1,0x24
    80009a1e:	8d658593          	addi	a1,a1,-1834 # 8002d2f0 <__func__.0+0x2d0>
    80009a22:	00f70463          	beq	a4,a5,80009a2a <tinst_tests_pf+0x1c08>
    80009a26:	f71fe06f          	j	80008996 <tinst_tests_pf+0xb74>
    80009a2a:	701c                	ld	a5,32(s0)
    80009a2c:	00024597          	auipc	a1,0x24
    80009a30:	8b458593          	addi	a1,a1,-1868 # 8002d2e0 <__func__.0+0x2c0>
    80009a34:	e399                	bnez	a5,80009a3a <tinst_tests_pf+0x1c18>
    80009a36:	f61fe06f          	j	80008996 <tinst_tests_pf+0xb74>
    80009a3a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a3c:	0016f713          	andi	a4,a3,1
    80009a40:	44071f63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a44:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a48:	460d                	li	a2,3
    80009a4a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009a4e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009a50:	00c59763          	bne	a1,a2,80009a5e <tinst_tests_pf+0x1c3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009a54:	0026d683          	lhu	a3,2(a3)
    80009a58:	0106969b          	slliw	a3,a3,0x10
    80009a5c:	8f55                	or	a4,a4,a3
    80009a5e:	1ffe16b7          	lui	a3,0x1ffe1
    80009a62:	068e                	slli	a3,a3,0x3
    80009a64:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009a66:	8f75                	and	a4,a4,a3
    80009a68:	00024597          	auipc	a1,0x24
    80009a6c:	87858593          	addi	a1,a1,-1928 # 8002d2e0 <__func__.0+0x2c0>
    80009a70:	00e78463          	beq	a5,a4,80009a78 <tinst_tests_pf+0x1c56>
    80009a74:	f1bfe06f          	j	8000898e <tinst_tests_pf+0xb6c>
    80009a78:	f1ffe06f          	j	80008996 <tinst_tests_pf+0xb74>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    80009a7c:	6418                	ld	a4,8(s0)
    80009a7e:	47b5                	li	a5,13
    80009a80:	00f70463          	beq	a4,a5,80009a88 <tinst_tests_pf+0x1c66>
    80009a84:	f78fe06f          	j	800081fc <tinst_tests_pf+0x3da>
    80009a88:	7018                	ld	a4,32(s0)
    80009a8a:	e319                	bnez	a4,80009a90 <tinst_tests_pf+0x1c6e>
    80009a8c:	f72fe06f          	j	800081fe <tinst_tests_pf+0x3dc>
    80009a90:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009a92:	0016f793          	andi	a5,a3,1
    80009a96:	40079463          	bnez	a5,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009a9a:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009a9e:	460d                	li	a2,3
    80009aa0:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009aa4:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009aa6:	00c59763          	bne	a1,a2,80009ab4 <tinst_tests_pf+0x1c92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009aaa:	0026d683          	lhu	a3,2(a3)
    80009aae:	0106969b          	slliw	a3,a3,0x10
    80009ab2:	8fd5                	or	a5,a5,a3
    80009ab4:	17c6                	slli	a5,a5,0x31
    80009ab6:	0317d913          	srli	s2,a5,0x31
    80009aba:	40e90933          	sub	s2,s2,a4
    80009abe:	00193913          	seqz	s2,s2
    80009ac2:	f3cfe06f          	j	800081fe <tinst_tests_pf+0x3dc>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    80009ac6:	6418                	ld	a4,8(s0)
    80009ac8:	47b5                	li	a5,13
    80009aca:	00f70463          	beq	a4,a5,80009ad2 <tinst_tests_pf+0x1cb0>
    80009ace:	fc6fe06f          	j	80008294 <tinst_tests_pf+0x472>
    80009ad2:	7018                	ld	a4,32(s0)
    80009ad4:	e319                	bnez	a4,80009ada <tinst_tests_pf+0x1cb8>
    80009ad6:	fc0fe06f          	j	80008296 <tinst_tests_pf+0x474>
    80009ada:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009adc:	0016f793          	andi	a5,a3,1
    80009ae0:	3a079f63          	bnez	a5,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009ae4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ae8:	460d                	li	a2,3
    80009aea:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009aee:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009af0:	00c59763          	bne	a1,a2,80009afe <tinst_tests_pf+0x1cdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009af4:	0026d683          	lhu	a3,2(a3)
    80009af8:	0106969b          	slliw	a3,a3,0x10
    80009afc:	8fd5                	or	a5,a5,a3
    80009afe:	17c6                	slli	a5,a5,0x31
    80009b00:	0317d913          	srli	s2,a5,0x31
    80009b04:	40e90933          	sub	s2,s2,a4
    80009b08:	00193913          	seqz	s2,s2
    80009b0c:	f8afe06f          	j	80008296 <tinst_tests_pf+0x474>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    80009b10:	6418                	ld	a4,8(s0)
    80009b12:	47bd                	li	a5,15
    80009b14:	00f70463          	beq	a4,a5,80009b1c <tinst_tests_pf+0x1cfa>
    80009b18:	817fe06f          	j	8000832e <tinst_tests_pf+0x50c>
    80009b1c:	701c                	ld	a5,32(s0)
    80009b1e:	e399                	bnez	a5,80009b24 <tinst_tests_pf+0x1d02>
    80009b20:	811fe06f          	j	80008330 <tinst_tests_pf+0x50e>
    80009b24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b26:	0016f713          	andi	a4,a3,1
    80009b2a:	36071a63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b32:	460d                	li	a2,3
    80009b34:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b3a:	00c59763          	bne	a1,a2,80009b48 <tinst_tests_pf+0x1d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b3e:	0026d683          	lhu	a3,2(a3)
    80009b42:	0106969b          	slliw	a3,a3,0x10
    80009b46:	8f55                	or	a4,a4,a3
    80009b48:	01f076b7          	lui	a3,0x1f07
    80009b4c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009b50:	8f75                	and	a4,a4,a3
    80009b52:	40f70933          	sub	s2,a4,a5
    80009b56:	00193913          	seqz	s2,s2
    80009b5a:	fd6fe06f          	j	80008330 <tinst_tests_pf+0x50e>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    80009b5e:	6418                	ld	a4,8(s0)
    80009b60:	47bd                	li	a5,15
    80009b62:	00f70463          	beq	a4,a5,80009b6a <tinst_tests_pf+0x1d48>
    80009b66:	867fe06f          	j	800083cc <tinst_tests_pf+0x5aa>
    80009b6a:	701c                	ld	a5,32(s0)
    80009b6c:	e399                	bnez	a5,80009b72 <tinst_tests_pf+0x1d50>
    80009b6e:	861fe06f          	j	800083ce <tinst_tests_pf+0x5ac>
    80009b72:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009b74:	0016f713          	andi	a4,a3,1
    80009b78:	32071363          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009b7c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009b80:	460d                	li	a2,3
    80009b82:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009b86:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009b88:	00c59763          	bne	a1,a2,80009b96 <tinst_tests_pf+0x1d74>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009b8c:	0026d683          	lhu	a3,2(a3)
    80009b90:	0106969b          	slliw	a3,a3,0x10
    80009b94:	8f55                	or	a4,a4,a3
    80009b96:	01f076b7          	lui	a3,0x1f07
    80009b9a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009b9e:	8f75                	and	a4,a4,a3
    80009ba0:	40f70933          	sub	s2,a4,a5
    80009ba4:	00193913          	seqz	s2,s2
    80009ba8:	827fe06f          	j	800083ce <tinst_tests_pf+0x5ac>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    80009bac:	6418                	ld	a4,8(s0)
    80009bae:	47bd                	li	a5,15
    80009bb0:	00f70463          	beq	a4,a5,80009bb8 <tinst_tests_pf+0x1d96>
    80009bb4:	8b9fe06f          	j	8000846c <tinst_tests_pf+0x64a>
    80009bb8:	701c                	ld	a5,32(s0)
    80009bba:	e399                	bnez	a5,80009bc0 <tinst_tests_pf+0x1d9e>
    80009bbc:	8b3fe06f          	j	8000846e <tinst_tests_pf+0x64c>
    80009bc0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009bc2:	0016f713          	andi	a4,a3,1
    80009bc6:	2c071c63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009bca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009bce:	460d                	li	a2,3
    80009bd0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009bd4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009bd6:	00c59763          	bne	a1,a2,80009be4 <tinst_tests_pf+0x1dc2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009bda:	0026d683          	lhu	a3,2(a3)
    80009bde:	0106969b          	slliw	a3,a3,0x10
    80009be2:	8f55                	or	a4,a4,a3
    80009be4:	01f076b7          	lui	a3,0x1f07
    80009be8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009bec:	8f75                	and	a4,a4,a3
    80009bee:	40f70933          	sub	s2,a4,a5
    80009bf2:	00193913          	seqz	s2,s2
    80009bf6:	879fe06f          	j	8000846e <tinst_tests_pf+0x64c>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    80009bfa:	6418                	ld	a4,8(s0)
    80009bfc:	47bd                	li	a5,15
    80009bfe:	00f70463          	beq	a4,a5,80009c06 <tinst_tests_pf+0x1de4>
    80009c02:	90dfe06f          	j	8000850e <tinst_tests_pf+0x6ec>
    80009c06:	701c                	ld	a5,32(s0)
    80009c08:	e399                	bnez	a5,80009c0e <tinst_tests_pf+0x1dec>
    80009c0a:	907fe06f          	j	80008510 <tinst_tests_pf+0x6ee>
    80009c0e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009c10:	0016f713          	andi	a4,a3,1
    80009c14:	28071563          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c18:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009c1c:	460d                	li	a2,3
    80009c1e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009c22:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009c24:	00c59763          	bne	a1,a2,80009c32 <tinst_tests_pf+0x1e10>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009c28:	0026d683          	lhu	a3,2(a3)
    80009c2c:	0106969b          	slliw	a3,a3,0x10
    80009c30:	8f55                	or	a4,a4,a3
    80009c32:	01f076b7          	lui	a3,0x1f07
    80009c36:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    80009c3a:	8f75                	and	a4,a4,a3
    80009c3c:	40f70933          	sub	s2,a4,a5
    80009c40:	00193913          	seqz	s2,s2
    80009c44:	8cdfe06f          	j	80008510 <tinst_tests_pf+0x6ee>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009c48:	6418                	ld	a4,8(s0)
    80009c4a:	47b5                	li	a5,13
    80009c4c:	00f70463          	beq	a4,a5,80009c54 <tinst_tests_pf+0x1e32>
    80009c50:	951fe06f          	j	800085a0 <tinst_tests_pf+0x77e>
    80009c54:	7004                	ld	s1,32(s0)
    80009c56:	e099                	bnez	s1,80009c5c <tinst_tests_pf+0x1e3a>
    80009c58:	94bfe06f          	j	800085a2 <tinst_tests_pf+0x780>
    80009c5c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009c5e:	0017f713          	andi	a4,a5,1
    80009c62:	22071e63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009c66:	0007d503          	lhu	a0,0(a5)
    80009c6a:	a3df70ef          	jal	800016a6 <expand_compressed_instruction>
    80009c6e:	67a1                	lui	a5,0x8
    80009c70:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009c72:	00f57933          	and	s2,a0,a5
    80009c76:	40990933          	sub	s2,s2,s1
    80009c7a:	00193913          	seqz	s2,s2
    80009c7e:	925fe06f          	j	800085a2 <tinst_tests_pf+0x780>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009c82:	6418                	ld	a4,8(s0)
    80009c84:	47b5                	li	a5,13
    80009c86:	00f70463          	beq	a4,a5,80009c8e <tinst_tests_pf+0x1e6c>
    80009c8a:	9abfe06f          	j	80008634 <tinst_tests_pf+0x812>
    80009c8e:	02043983          	ld	s3,32(s0)
    80009c92:	00099463          	bnez	s3,80009c9a <tinst_tests_pf+0x1e78>
    80009c96:	9a1fe06f          	j	80008636 <tinst_tests_pf+0x814>
    80009c9a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    80009c9c:	0017f713          	andi	a4,a5,1
    80009ca0:	1e071f63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009ca4:	0007d503          	lhu	a0,0(a5)
    80009ca8:	9fff70ef          	jal	800016a6 <expand_compressed_instruction>
    80009cac:	67a1                	lui	a5,0x8
    80009cae:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    80009cb0:	00f57933          	and	s2,a0,a5
    80009cb4:	41390933          	sub	s2,s2,s3
    80009cb8:	00193913          	seqz	s2,s2
    80009cbc:	97bfe06f          	j	80008636 <tinst_tests_pf+0x814>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    80009cc0:	701c                	ld	a5,32(s0)
    80009cc2:	e399                	bnez	a5,80009cc8 <tinst_tests_pf+0x1ea6>
    80009cc4:	b2ffe06f          	j	800087f2 <tinst_tests_pf+0x9d0>
    80009cc8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009cca:	0016f713          	andi	a4,a3,1
    80009cce:	1c071863          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009cd2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009cd6:	460d                	li	a2,3
    80009cd8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009cdc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009cde:	00c59763          	bne	a1,a2,80009cec <tinst_tests_pf+0x1eca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009ce2:	0026d683          	lhu	a3,2(a3)
    80009ce6:	0106969b          	slliw	a3,a3,0x10
    80009cea:	8f55                	or	a4,a4,a3
    80009cec:	1ffe16b7          	lui	a3,0x1ffe1
    80009cf0:	068e                	slli	a3,a3,0x3
    80009cf2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009cf4:	8f75                	and	a4,a4,a3
    80009cf6:	00e78463          	beq	a5,a4,80009cfe <tinst_tests_pf+0x1edc>
    80009cfa:	ae5fe06f          	j	800087de <tinst_tests_pf+0x9bc>
    80009cfe:	af5fe06f          	j	800087f2 <tinst_tests_pf+0x9d0>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    80009d02:	701c                	ld	a5,32(s0)
    80009d04:	e399                	bnez	a5,80009d0a <tinst_tests_pf+0x1ee8>
    80009d06:	b93fe06f          	j	80008898 <tinst_tests_pf+0xa76>
    80009d0a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d0c:	0016f713          	andi	a4,a3,1
    80009d10:	18071763          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d14:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d18:	460d                	li	a2,3
    80009d1a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d1e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d20:	00c59763          	bne	a1,a2,80009d2e <tinst_tests_pf+0x1f0c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d24:	0026d683          	lhu	a3,2(a3)
    80009d28:	0106969b          	slliw	a3,a3,0x10
    80009d2c:	8f55                	or	a4,a4,a3
    80009d2e:	1ffe16b7          	lui	a3,0x1ffe1
    80009d32:	068e                	slli	a3,a3,0x3
    80009d34:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009d36:	8f75                	and	a4,a4,a3
    80009d38:	00e78463          	beq	a5,a4,80009d40 <tinst_tests_pf+0x1f1e>
    80009d3c:	b49fe06f          	j	80008884 <tinst_tests_pf+0xa62>
    80009d40:	b59fe06f          	j	80008898 <tinst_tests_pf+0xa76>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009d44:	7004                	ld	s1,32(s0)
    80009d46:	780494e3          	bnez	s1,8000acce <tinst_tests_pf+0x2eac>
    80009d4a:	00023597          	auipc	a1,0x23
    80009d4e:	59658593          	addi	a1,a1,1430 # 8002d2e0 <__func__.0+0x2c0>
    80009d52:	801fe06f          	j	80008552 <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    80009d56:	701c                	ld	a5,32(s0)
    80009d58:	e399                	bnez	a5,80009d5e <tinst_tests_pf+0x1f3c>
    80009d5a:	bdffe06f          	j	80008938 <tinst_tests_pf+0xb16>
    80009d5e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009d60:	0016f713          	andi	a4,a3,1
    80009d64:	12071d63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009d68:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009d6c:	460d                	li	a2,3
    80009d6e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009d72:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009d74:	00c59763          	bne	a1,a2,80009d82 <tinst_tests_pf+0x1f60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009d78:	0026d683          	lhu	a3,2(a3)
    80009d7c:	0106969b          	slliw	a3,a3,0x10
    80009d80:	8f55                	or	a4,a4,a3
    80009d82:	1ffe16b7          	lui	a3,0x1ffe1
    80009d86:	068e                	slli	a3,a3,0x3
    80009d88:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009d8a:	8f75                	and	a4,a4,a3
    80009d8c:	00e78463          	beq	a5,a4,80009d94 <tinst_tests_pf+0x1f72>
    80009d90:	b95fe06f          	j	80008924 <tinst_tests_pf+0xb02>
    80009d94:	ba5fe06f          	j	80008938 <tinst_tests_pf+0xb16>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    80009d98:	02043983          	ld	s3,32(s0)
    80009d9c:	74099fe3          	bnez	s3,8000acfa <tinst_tests_pf+0x2ed8>
    80009da0:	00023597          	auipc	a1,0x23
    80009da4:	54058593          	addi	a1,a1,1344 # 8002d2e0 <__func__.0+0x2c0>
    80009da8:	83ffe06f          	j	800085e6 <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    80009dac:	02043983          	ld	s3,32(s0)
    80009db0:	7a099ce3          	bnez	s3,8000ad68 <tinst_tests_pf+0x2f46>
    80009db4:	00023597          	auipc	a1,0x23
    80009db8:	52c58593          	addi	a1,a1,1324 # 8002d2e0 <__func__.0+0x2c0>
    80009dbc:	8bffe06f          	j	8000867a <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    80009dc0:	7004                	ld	s1,32(s0)
    80009dc2:	c099                	beqz	s1,80009dc8 <tinst_tests_pf+0x1fa6>
    80009dc4:	0160106f          	j	8000adda <tinst_tests_pf+0x2fb8>
    80009dc8:	00023597          	auipc	a1,0x23
    80009dcc:	51858593          	addi	a1,a1,1304 # 8002d2e0 <__func__.0+0x2c0>
    80009dd0:	947fe06f          	j	80008716 <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lpf",
    80009dd4:	7018                	ld	a4,32(s0)
    80009dd6:	e319                	bnez	a4,80009ddc <tinst_tests_pf+0x1fba>
    80009dd8:	9b6fe06f          	j	80007f8e <tinst_tests_pf+0x16c>
    80009ddc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009dde:	0016f793          	andi	a5,a3,1
    80009de2:	efd5                	bnez	a5,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009de4:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009de8:	460d                	li	a2,3
    80009dea:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009dee:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009df0:	00c59763          	bne	a1,a2,80009dfe <tinst_tests_pf+0x1fdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009df4:	0026d683          	lhu	a3,2(a3)
    80009df8:	0106969b          	slliw	a3,a3,0x10
    80009dfc:	8fd5                	or	a5,a5,a3
    80009dfe:	03179913          	slli	s2,a5,0x31
    80009e02:	03195913          	srli	s2,s2,0x31
    80009e06:	40e90933          	sub	s2,s2,a4
    80009e0a:	00193913          	seqz	s2,s2
    80009e0e:	980fe06f          	j	80007f8e <tinst_tests_pf+0x16c>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009e12:	7018                	ld	a4,32(s0)
    80009e14:	e319                	bnez	a4,80009e1a <tinst_tests_pf+0x1ff8>
    80009e16:	a18fe06f          	j	8000802e <tinst_tests_pf+0x20c>
    80009e1a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e1c:	0016f793          	andi	a5,a3,1
    80009e20:	efbd                	bnez	a5,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e22:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e26:	460d                	li	a2,3
    80009e28:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009e2c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009e2e:	00c59763          	bne	a1,a2,80009e3c <tinst_tests_pf+0x201a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e32:	0026d683          	lhu	a3,2(a3)
    80009e36:	0106969b          	slliw	a3,a3,0x10
    80009e3a:	8fd5                	or	a5,a5,a3
    80009e3c:	03179913          	slli	s2,a5,0x31
    80009e40:	03195913          	srli	s2,s2,0x31
    80009e44:	40e90933          	sub	s2,s2,a4
    80009e48:	00193913          	seqz	s2,s2
    80009e4c:	9e2fe06f          	j	8000802e <tinst_tests_pf+0x20c>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009e50:	7018                	ld	a4,32(s0)
    80009e52:	e319                	bnez	a4,80009e58 <tinst_tests_pf+0x2036>
    80009e54:	a7afe06f          	j	800080ce <tinst_tests_pf+0x2ac>
    80009e58:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e5a:	0016f793          	andi	a5,a3,1
    80009e5e:	e3a1                	bnez	a5,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009e60:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009e64:	460d                	li	a2,3
    80009e66:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    80009e6a:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    80009e6c:	00c59763          	bne	a1,a2,80009e7a <tinst_tests_pf+0x2058>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009e70:	0026d683          	lhu	a3,2(a3)
    80009e74:	0106969b          	slliw	a3,a3,0x10
    80009e78:	8fd5                	or	a5,a5,a3
    80009e7a:	17c6                	slli	a5,a5,0x31
    80009e7c:	0317d913          	srli	s2,a5,0x31
    80009e80:	40e90933          	sub	s2,s2,a4
    80009e84:	00193913          	seqz	s2,s2
    80009e88:	a46fe06f          	j	800080ce <tinst_tests_pf+0x2ac>
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    80009e8c:	701c                	ld	a5,32(s0)
    80009e8e:	e399                	bnez	a5,80009e94 <tinst_tests_pf+0x2072>
    80009e90:	97cfe06f          	j	8000800c <tinst_tests_pf+0x1ea>
    80009e94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009e96:	0016f713          	andi	a4,a3,1
    80009e9a:	3e070fe3          	beqz	a4,8000aa98 <tinst_tests_pf+0x2c76>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    80009e9e:	12300613          	li	a2,291
    80009ea2:	00022597          	auipc	a1,0x22
    80009ea6:	a0658593          	addi	a1,a1,-1530 # 8002b8a8 <__func__.1>
    80009eaa:	00025517          	auipc	a0,0x25
    80009eae:	e2e50513          	addi	a0,a0,-466 # 8002ecd8 <__func__.0+0x1cb8>
    80009eb2:	709200ef          	jal	8002adba <printf>
    80009eb6:	12300613          	li	a2,291
    80009eba:	00022597          	auipc	a1,0x22
    80009ebe:	9ee58593          	addi	a1,a1,-1554 # 8002b8a8 <__func__.1>
    80009ec2:	00023517          	auipc	a0,0x23
    80009ec6:	5c650513          	addi	a0,a0,1478 # 8002d488 <__func__.0+0x468>
    80009eca:	6f1200ef          	jal	8002adba <printf>
    80009ece:	4501                	li	a0,0
    80009ed0:	2a1200ef          	jal	8002a970 <exit>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    80009ed4:	701c                	ld	a5,32(s0)
    80009ed6:	00023597          	auipc	a1,0x23
    80009eda:	40a58593          	addi	a1,a1,1034 # 8002d2e0 <__func__.0+0x2c0>
    80009ede:	e399                	bnez	a5,80009ee4 <tinst_tests_pf+0x20c2>
    80009ee0:	b57fe06f          	j	80008a36 <tinst_tests_pf+0xc14>
    80009ee4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009ee6:	0016f713          	andi	a4,a3,1
    80009eea:	fb55                	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009eec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009ef0:	460d                	li	a2,3
    80009ef2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009ef6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009ef8:	00c59763          	bne	a1,a2,80009f06 <tinst_tests_pf+0x20e4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009efc:	0026d683          	lhu	a3,2(a3)
    80009f00:	0106969b          	slliw	a3,a3,0x10
    80009f04:	8f55                	or	a4,a4,a3
    80009f06:	1ffe16b7          	lui	a3,0x1ffe1
    80009f0a:	068e                	slli	a3,a3,0x3
    80009f0c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009f0e:	8f75                	and	a4,a4,a3
    80009f10:	00023597          	auipc	a1,0x23
    80009f14:	3d058593          	addi	a1,a1,976 # 8002d2e0 <__func__.0+0x2c0>
    80009f18:	00e79463          	bne	a5,a4,80009f20 <tinst_tests_pf+0x20fe>
    80009f1c:	b1bfe06f          	j	80008a36 <tinst_tests_pf+0xc14>
    80009f20:	00023597          	auipc	a1,0x23
    80009f24:	3d058593          	addi	a1,a1,976 # 8002d2f0 <__func__.0+0x2d0>
    80009f28:	b0ffe06f          	j	80008a36 <tinst_tests_pf+0xc14>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lpf",
    80009f2c:	701c                	ld	a5,32(s0)
    80009f2e:	e399                	bnez	a5,80009f34 <tinst_tests_pf+0x2112>
    80009f30:	97cfe06f          	j	800080ac <tinst_tests_pf+0x28a>
    80009f34:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f36:	0016f713          	andi	a4,a3,1
    80009f3a:	f335                	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f3c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f40:	460d                	li	a2,3
    80009f42:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f46:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f48:	00c59763          	bne	a1,a2,80009f56 <tinst_tests_pf+0x2134>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f4c:	0026d683          	lhu	a3,2(a3)
    80009f50:	0106969b          	slliw	a3,a3,0x10
    80009f54:	8f55                	or	a4,a4,a3
    80009f56:	1746                	slli	a4,a4,0x31
    80009f58:	9345                	srli	a4,a4,0x31
    80009f5a:	00e78463          	beq	a5,a4,80009f62 <tinst_tests_pf+0x2140>
    80009f5e:	93afe06f          	j	80008098 <tinst_tests_pf+0x276>
    80009f62:	94afe06f          	j	800080ac <tinst_tests_pf+0x28a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    80009f66:	701c                	ld	a5,32(s0)
    80009f68:	00023597          	auipc	a1,0x23
    80009f6c:	37858593          	addi	a1,a1,888 # 8002d2e0 <__func__.0+0x2c0>
    80009f70:	e399                	bnez	a5,80009f76 <tinst_tests_pf+0x2154>
    80009f72:	b65fe06f          	j	80008ad6 <tinst_tests_pf+0xcb4>
    80009f76:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009f78:	0016f713          	andi	a4,a3,1
    80009f7c:	f30d                	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009f7e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009f82:	460d                	li	a2,3
    80009f84:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009f88:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009f8a:	00c59763          	bne	a1,a2,80009f98 <tinst_tests_pf+0x2176>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009f8e:	0026d683          	lhu	a3,2(a3)
    80009f92:	0106969b          	slliw	a3,a3,0x10
    80009f96:	8f55                	or	a4,a4,a3
    80009f98:	1ffe16b7          	lui	a3,0x1ffe1
    80009f9c:	068e                	slli	a3,a3,0x3
    80009f9e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    80009fa0:	8f75                	and	a4,a4,a3
    80009fa2:	00023597          	auipc	a1,0x23
    80009fa6:	33e58593          	addi	a1,a1,830 # 8002d2e0 <__func__.0+0x2c0>
    80009faa:	00e79463          	bne	a5,a4,80009fb2 <tinst_tests_pf+0x2190>
    80009fae:	b29fe06f          	j	80008ad6 <tinst_tests_pf+0xcb4>
    80009fb2:	00023597          	auipc	a1,0x23
    80009fb6:	33e58593          	addi	a1,a1,830 # 8002d2f0 <__func__.0+0x2d0>
    80009fba:	b1dfe06f          	j	80008ad6 <tinst_tests_pf+0xcb4>
    TEST_ASSERT("correct tinst when executing a lw which results in a lpf",
    80009fbe:	701c                	ld	a5,32(s0)
    80009fc0:	e399                	bnez	a5,80009fc6 <tinst_tests_pf+0x21a4>
    80009fc2:	98afe06f          	j	8000814c <tinst_tests_pf+0x32a>
    80009fc6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    80009fc8:	0016f713          	andi	a4,a3,1
    80009fcc:	ec0719e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    80009fd0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    80009fd4:	460d                	li	a2,3
    80009fd6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    80009fda:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    80009fdc:	00c59763          	bne	a1,a2,80009fea <tinst_tests_pf+0x21c8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    80009fe0:	0026d683          	lhu	a3,2(a3)
    80009fe4:	0106969b          	slliw	a3,a3,0x10
    80009fe8:	8f55                	or	a4,a4,a3
    80009fea:	1746                	slli	a4,a4,0x31
    80009fec:	9345                	srli	a4,a4,0x31
    80009fee:	00e78463          	beq	a5,a4,80009ff6 <tinst_tests_pf+0x21d4>
    80009ff2:	946fe06f          	j	80008138 <tinst_tests_pf+0x316>
    80009ff6:	956fe06f          	j	8000814c <tinst_tests_pf+0x32a>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    80009ffa:	701c                	ld	a5,32(s0)
    80009ffc:	00023597          	auipc	a1,0x23
    8000a000:	2e458593          	addi	a1,a1,740 # 8002d2e0 <__func__.0+0x2c0>
    8000a004:	e399                	bnez	a5,8000a00a <tinst_tests_pf+0x21e8>
    8000a006:	b71fe06f          	j	80008b76 <tinst_tests_pf+0xd54>
    8000a00a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a00c:	0016f713          	andi	a4,a3,1
    8000a010:	e80717e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a014:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a018:	460d                	li	a2,3
    8000a01a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a01e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a020:	00c59763          	bne	a1,a2,8000a02e <tinst_tests_pf+0x220c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a024:	0026d683          	lhu	a3,2(a3)
    8000a028:	0106969b          	slliw	a3,a3,0x10
    8000a02c:	8f55                	or	a4,a4,a3
    8000a02e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a032:	068e                	slli	a3,a3,0x3
    8000a034:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a036:	8f75                	and	a4,a4,a3
    8000a038:	00023597          	auipc	a1,0x23
    8000a03c:	2a858593          	addi	a1,a1,680 # 8002d2e0 <__func__.0+0x2c0>
    8000a040:	00e79463          	bne	a5,a4,8000a048 <tinst_tests_pf+0x2226>
    8000a044:	b33fe06f          	j	80008b76 <tinst_tests_pf+0xd54>
    8000a048:	00023597          	auipc	a1,0x23
    8000a04c:	2a858593          	addi	a1,a1,680 # 8002d2f0 <__func__.0+0x2d0>
    8000a050:	b27fe06f          	j	80008b76 <tinst_tests_pf+0xd54>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lpf",
    8000a054:	701c                	ld	a5,32(s0)
    8000a056:	e399                	bnez	a5,8000a05c <tinst_tests_pf+0x223a>
    8000a058:	98cfe06f          	j	800081e4 <tinst_tests_pf+0x3c2>
    8000a05c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a05e:	0016f713          	andi	a4,a3,1
    8000a062:	e2071ee3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a066:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a06a:	460d                	li	a2,3
    8000a06c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a070:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a072:	00c59763          	bne	a1,a2,8000a080 <tinst_tests_pf+0x225e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a076:	0026d683          	lhu	a3,2(a3)
    8000a07a:	0106969b          	slliw	a3,a3,0x10
    8000a07e:	8f55                	or	a4,a4,a3
    8000a080:	1746                	slli	a4,a4,0x31
    8000a082:	9345                	srli	a4,a4,0x31
    8000a084:	00e78463          	beq	a5,a4,8000a08c <tinst_tests_pf+0x226a>
    8000a088:	948fe06f          	j	800081d0 <tinst_tests_pf+0x3ae>
    8000a08c:	958fe06f          	j	800081e4 <tinst_tests_pf+0x3c2>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a090:	701c                	ld	a5,32(s0)
    8000a092:	00023597          	auipc	a1,0x23
    8000a096:	24e58593          	addi	a1,a1,590 # 8002d2e0 <__func__.0+0x2c0>
    8000a09a:	e399                	bnez	a5,8000a0a0 <tinst_tests_pf+0x227e>
    8000a09c:	b7bfe06f          	j	80008c16 <tinst_tests_pf+0xdf4>
    8000a0a0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0a2:	0016f713          	andi	a4,a3,1
    8000a0a6:	de071ce3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a0aa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a0ae:	460d                	li	a2,3
    8000a0b0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a0b4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a0b6:	00c59763          	bne	a1,a2,8000a0c4 <tinst_tests_pf+0x22a2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a0ba:	0026d683          	lhu	a3,2(a3)
    8000a0be:	0106969b          	slliw	a3,a3,0x10
    8000a0c2:	8f55                	or	a4,a4,a3
    8000a0c4:	1ffe16b7          	lui	a3,0x1ffe1
    8000a0c8:	068e                	slli	a3,a3,0x3
    8000a0ca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a0cc:	8f75                	and	a4,a4,a3
    8000a0ce:	00023597          	auipc	a1,0x23
    8000a0d2:	21258593          	addi	a1,a1,530 # 8002d2e0 <__func__.0+0x2c0>
    8000a0d6:	00e79463          	bne	a5,a4,8000a0de <tinst_tests_pf+0x22bc>
    8000a0da:	b3dfe06f          	j	80008c16 <tinst_tests_pf+0xdf4>
    8000a0de:	00023597          	auipc	a1,0x23
    8000a0e2:	21258593          	addi	a1,a1,530 # 8002d2f0 <__func__.0+0x2d0>
    8000a0e6:	b31fe06f          	j	80008c16 <tinst_tests_pf+0xdf4>
    TEST_ASSERT("correct tinst when executing a ld which results in a lpf",
    8000a0ea:	701c                	ld	a5,32(s0)
    8000a0ec:	e399                	bnez	a5,8000a0f2 <tinst_tests_pf+0x22d0>
    8000a0ee:	98efe06f          	j	8000827c <tinst_tests_pf+0x45a>
    8000a0f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a0f4:	0016f713          	andi	a4,a3,1
    8000a0f8:	da0713e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a0fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a100:	460d                	li	a2,3
    8000a102:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a106:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a108:	00c59763          	bne	a1,a2,8000a116 <tinst_tests_pf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a10c:	0026d683          	lhu	a3,2(a3)
    8000a110:	0106969b          	slliw	a3,a3,0x10
    8000a114:	8f55                	or	a4,a4,a3
    8000a116:	1746                	slli	a4,a4,0x31
    8000a118:	9345                	srli	a4,a4,0x31
    8000a11a:	00e78463          	beq	a5,a4,8000a122 <tinst_tests_pf+0x2300>
    8000a11e:	94afe06f          	j	80008268 <tinst_tests_pf+0x446>
    8000a122:	95afe06f          	j	8000827c <tinst_tests_pf+0x45a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a126:	701c                	ld	a5,32(s0)
    8000a128:	00023597          	auipc	a1,0x23
    8000a12c:	1b858593          	addi	a1,a1,440 # 8002d2e0 <__func__.0+0x2c0>
    8000a130:	e399                	bnez	a5,8000a136 <tinst_tests_pf+0x2314>
    8000a132:	b85fe06f          	j	80008cb6 <tinst_tests_pf+0xe94>
    8000a136:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a138:	0016f713          	andi	a4,a3,1
    8000a13c:	d60711e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a140:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a144:	460d                	li	a2,3
    8000a146:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a14a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a14c:	00c59763          	bne	a1,a2,8000a15a <tinst_tests_pf+0x2338>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a150:	0026d683          	lhu	a3,2(a3)
    8000a154:	0106969b          	slliw	a3,a3,0x10
    8000a158:	8f55                	or	a4,a4,a3
    8000a15a:	1ffe16b7          	lui	a3,0x1ffe1
    8000a15e:	068e                	slli	a3,a3,0x3
    8000a160:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a162:	8f75                	and	a4,a4,a3
    8000a164:	00023597          	auipc	a1,0x23
    8000a168:	17c58593          	addi	a1,a1,380 # 8002d2e0 <__func__.0+0x2c0>
    8000a16c:	00e79463          	bne	a5,a4,8000a174 <tinst_tests_pf+0x2352>
    8000a170:	b47fe06f          	j	80008cb6 <tinst_tests_pf+0xe94>
    8000a174:	00023597          	auipc	a1,0x23
    8000a178:	17c58593          	addi	a1,a1,380 # 8002d2f0 <__func__.0+0x2d0>
    8000a17c:	b3bfe06f          	j	80008cb6 <tinst_tests_pf+0xe94>
    TEST_ASSERT("correct tinst when executing a sb which results in a spf",
    8000a180:	701c                	ld	a5,32(s0)
    8000a182:	e399                	bnez	a5,8000a188 <tinst_tests_pf+0x2366>
    8000a184:	992fe06f          	j	80008316 <tinst_tests_pf+0x4f4>
    8000a188:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a18a:	0016f713          	andi	a4,a3,1
    8000a18e:	d00718e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a192:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a196:	460d                	li	a2,3
    8000a198:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a19c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a19e:	00c59763          	bne	a1,a2,8000a1ac <tinst_tests_pf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1a2:	0026d683          	lhu	a3,2(a3)
    8000a1a6:	0106969b          	slliw	a3,a3,0x10
    8000a1aa:	8f55                	or	a4,a4,a3
    8000a1ac:	01f076b7          	lui	a3,0x1f07
    8000a1b0:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a1b4:	8f75                	and	a4,a4,a3
    8000a1b6:	00e78463          	beq	a5,a4,8000a1be <tinst_tests_pf+0x239c>
    8000a1ba:	948fe06f          	j	80008302 <tinst_tests_pf+0x4e0>
    8000a1be:	958fe06f          	j	80008316 <tinst_tests_pf+0x4f4>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a1c2:	701c                	ld	a5,32(s0)
    8000a1c4:	00023597          	auipc	a1,0x23
    8000a1c8:	11c58593          	addi	a1,a1,284 # 8002d2e0 <__func__.0+0x2c0>
    8000a1cc:	e399                	bnez	a5,8000a1d2 <tinst_tests_pf+0x23b0>
    8000a1ce:	b89fe06f          	j	80008d56 <tinst_tests_pf+0xf34>
    8000a1d2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a1d4:	0016f713          	andi	a4,a3,1
    8000a1d8:	cc0713e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a1dc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a1e0:	460d                	li	a2,3
    8000a1e2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a1e6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a1e8:	00c59763          	bne	a1,a2,8000a1f6 <tinst_tests_pf+0x23d4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a1ec:	0026d683          	lhu	a3,2(a3)
    8000a1f0:	0106969b          	slliw	a3,a3,0x10
    8000a1f4:	8f55                	or	a4,a4,a3
    8000a1f6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a1fa:	068e                	slli	a3,a3,0x3
    8000a1fc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a1fe:	8f75                	and	a4,a4,a3
    8000a200:	00023597          	auipc	a1,0x23
    8000a204:	0e058593          	addi	a1,a1,224 # 8002d2e0 <__func__.0+0x2c0>
    8000a208:	00e79463          	bne	a5,a4,8000a210 <tinst_tests_pf+0x23ee>
    8000a20c:	b4bfe06f          	j	80008d56 <tinst_tests_pf+0xf34>
    8000a210:	00023597          	auipc	a1,0x23
    8000a214:	0e058593          	addi	a1,a1,224 # 8002d2f0 <__func__.0+0x2d0>
    8000a218:	b3ffe06f          	j	80008d56 <tinst_tests_pf+0xf34>
    TEST_ASSERT("correct tinst when executing a sh which results in a spf",
    8000a21c:	701c                	ld	a5,32(s0)
    8000a21e:	e399                	bnez	a5,8000a224 <tinst_tests_pf+0x2402>
    8000a220:	994fe06f          	j	800083b4 <tinst_tests_pf+0x592>
    8000a224:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a226:	0016f713          	andi	a4,a3,1
    8000a22a:	c6071ae3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a22e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a232:	460d                	li	a2,3
    8000a234:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a238:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a23a:	00c59763          	bne	a1,a2,8000a248 <tinst_tests_pf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a23e:	0026d683          	lhu	a3,2(a3)
    8000a242:	0106969b          	slliw	a3,a3,0x10
    8000a246:	8f55                	or	a4,a4,a3
    8000a248:	01f076b7          	lui	a3,0x1f07
    8000a24c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a250:	8f75                	and	a4,a4,a3
    8000a252:	00e78463          	beq	a5,a4,8000a25a <tinst_tests_pf+0x2438>
    8000a256:	94afe06f          	j	800083a0 <tinst_tests_pf+0x57e>
    8000a25a:	95afe06f          	j	800083b4 <tinst_tests_pf+0x592>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a25e:	701c                	ld	a5,32(s0)
    8000a260:	00023597          	auipc	a1,0x23
    8000a264:	08058593          	addi	a1,a1,128 # 8002d2e0 <__func__.0+0x2c0>
    8000a268:	e399                	bnez	a5,8000a26e <tinst_tests_pf+0x244c>
    8000a26a:	b91fe06f          	j	80008dfa <tinst_tests_pf+0xfd8>
    8000a26e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a270:	0016f713          	andi	a4,a3,1
    8000a274:	c20715e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a278:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a27c:	460d                	li	a2,3
    8000a27e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a282:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a284:	00c59763          	bne	a1,a2,8000a292 <tinst_tests_pf+0x2470>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a288:	0026d683          	lhu	a3,2(a3)
    8000a28c:	0106969b          	slliw	a3,a3,0x10
    8000a290:	8f55                	or	a4,a4,a3
    8000a292:	1ffe16b7          	lui	a3,0x1ffe1
    8000a296:	068e                	slli	a3,a3,0x3
    8000a298:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a29a:	8f75                	and	a4,a4,a3
    8000a29c:	00023597          	auipc	a1,0x23
    8000a2a0:	04458593          	addi	a1,a1,68 # 8002d2e0 <__func__.0+0x2c0>
    8000a2a4:	00e79463          	bne	a5,a4,8000a2ac <tinst_tests_pf+0x248a>
    8000a2a8:	b53fe06f          	j	80008dfa <tinst_tests_pf+0xfd8>
    8000a2ac:	00023597          	auipc	a1,0x23
    8000a2b0:	04458593          	addi	a1,a1,68 # 8002d2f0 <__func__.0+0x2d0>
    8000a2b4:	b47fe06f          	j	80008dfa <tinst_tests_pf+0xfd8>
    TEST_ASSERT("correct tinst when executing a sw which results in a spf",
    8000a2b8:	701c                	ld	a5,32(s0)
    8000a2ba:	e399                	bnez	a5,8000a2c0 <tinst_tests_pf+0x249e>
    8000a2bc:	998fe06f          	j	80008454 <tinst_tests_pf+0x632>
    8000a2c0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a2c2:	0016f713          	andi	a4,a3,1
    8000a2c6:	bc071ce3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a2ca:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a2ce:	460d                	li	a2,3
    8000a2d0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a2d4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a2d6:	00c59763          	bne	a1,a2,8000a2e4 <tinst_tests_pf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a2da:	0026d683          	lhu	a3,2(a3)
    8000a2de:	0106969b          	slliw	a3,a3,0x10
    8000a2e2:	8f55                	or	a4,a4,a3
    8000a2e4:	01f076b7          	lui	a3,0x1f07
    8000a2e8:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a2ec:	8f75                	and	a4,a4,a3
    8000a2ee:	00e78463          	beq	a5,a4,8000a2f6 <tinst_tests_pf+0x24d4>
    8000a2f2:	94efe06f          	j	80008440 <tinst_tests_pf+0x61e>
    8000a2f6:	95efe06f          	j	80008454 <tinst_tests_pf+0x632>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a2fa:	701c                	ld	a5,32(s0)
    8000a2fc:	00023597          	auipc	a1,0x23
    8000a300:	fe458593          	addi	a1,a1,-28 # 8002d2e0 <__func__.0+0x2c0>
    8000a304:	e399                	bnez	a5,8000a30a <tinst_tests_pf+0x24e8>
    8000a306:	b95fe06f          	j	80008e9a <tinst_tests_pf+0x1078>
    8000a30a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a30c:	0016f713          	andi	a4,a3,1
    8000a310:	b80717e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a314:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a318:	460d                	li	a2,3
    8000a31a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a31e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a320:	00c59763          	bne	a1,a2,8000a32e <tinst_tests_pf+0x250c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a324:	0026d683          	lhu	a3,2(a3)
    8000a328:	0106969b          	slliw	a3,a3,0x10
    8000a32c:	8f55                	or	a4,a4,a3
    8000a32e:	1ffe16b7          	lui	a3,0x1ffe1
    8000a332:	068e                	slli	a3,a3,0x3
    8000a334:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a336:	8f75                	and	a4,a4,a3
    8000a338:	00023597          	auipc	a1,0x23
    8000a33c:	fa858593          	addi	a1,a1,-88 # 8002d2e0 <__func__.0+0x2c0>
    8000a340:	00e79463          	bne	a5,a4,8000a348 <tinst_tests_pf+0x2526>
    8000a344:	b57fe06f          	j	80008e9a <tinst_tests_pf+0x1078>
    8000a348:	00023597          	auipc	a1,0x23
    8000a34c:	fa858593          	addi	a1,a1,-88 # 8002d2f0 <__func__.0+0x2d0>
    8000a350:	b4bfe06f          	j	80008e9a <tinst_tests_pf+0x1078>
    TEST_ASSERT("correct tinst when executing a sd which results in a spf",
    8000a354:	701c                	ld	a5,32(s0)
    8000a356:	e399                	bnez	a5,8000a35c <tinst_tests_pf+0x253a>
    8000a358:	99efe06f          	j	800084f6 <tinst_tests_pf+0x6d4>
    8000a35c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a35e:	0016f713          	andi	a4,a3,1
    8000a362:	b2071ee3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a366:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a36a:	460d                	li	a2,3
    8000a36c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a370:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a372:	00c59763          	bne	a1,a2,8000a380 <tinst_tests_pf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a376:	0026d683          	lhu	a3,2(a3)
    8000a37a:	0106969b          	slliw	a3,a3,0x10
    8000a37e:	8f55                	or	a4,a4,a3
    8000a380:	01f076b7          	lui	a3,0x1f07
    8000a384:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000a388:	8f75                	and	a4,a4,a3
    8000a38a:	00e78463          	beq	a5,a4,8000a392 <tinst_tests_pf+0x2570>
    8000a38e:	954fe06f          	j	800084e2 <tinst_tests_pf+0x6c0>
    8000a392:	964fe06f          	j	800084f6 <tinst_tests_pf+0x6d4>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a396:	701c                	ld	a5,32(s0)
    8000a398:	00023597          	auipc	a1,0x23
    8000a39c:	f4858593          	addi	a1,a1,-184 # 8002d2e0 <__func__.0+0x2c0>
    8000a3a0:	e399                	bnez	a5,8000a3a6 <tinst_tests_pf+0x2584>
    8000a3a2:	b99fe06f          	j	80008f3a <tinst_tests_pf+0x1118>
    8000a3a6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a3a8:	0016f713          	andi	a4,a3,1
    8000a3ac:	ae0719e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a3b0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a3b4:	460d                	li	a2,3
    8000a3b6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a3ba:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a3bc:	00c59763          	bne	a1,a2,8000a3ca <tinst_tests_pf+0x25a8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a3c0:	0026d683          	lhu	a3,2(a3)
    8000a3c4:	0106969b          	slliw	a3,a3,0x10
    8000a3c8:	8f55                	or	a4,a4,a3
    8000a3ca:	1ffe16b7          	lui	a3,0x1ffe1
    8000a3ce:	068e                	slli	a3,a3,0x3
    8000a3d0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a3d2:	8f75                	and	a4,a4,a3
    8000a3d4:	00023597          	auipc	a1,0x23
    8000a3d8:	f0c58593          	addi	a1,a1,-244 # 8002d2e0 <__func__.0+0x2c0>
    8000a3dc:	00e79463          	bne	a5,a4,8000a3e4 <tinst_tests_pf+0x25c2>
    8000a3e0:	b5bfe06f          	j	80008f3a <tinst_tests_pf+0x1118>
    8000a3e4:	00023597          	auipc	a1,0x23
    8000a3e8:	f0c58593          	addi	a1,a1,-244 # 8002d2f0 <__func__.0+0x2d0>
    8000a3ec:	b4ffe06f          	j	80008f3a <tinst_tests_pf+0x1118>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a3f0:	7004                	ld	s1,32(s0)
    8000a3f2:	e099                	bnez	s1,8000a3f8 <tinst_tests_pf+0x25d6>
    8000a3f4:	994fe06f          	j	80008588 <tinst_tests_pf+0x766>
    8000a3f8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a3fa:	0017f713          	andi	a4,a5,1
    8000a3fe:	aa0710e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a402:	0007d503          	lhu	a0,0(a5)
    8000a406:	aa0f70ef          	jal	800016a6 <expand_compressed_instruction>
    8000a40a:	67a1                	lui	a5,0x8
    8000a40c:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a40e:	8d7d                	and	a0,a0,a5
    8000a410:	00a48463          	beq	s1,a0,8000a418 <tinst_tests_pf+0x25f6>
    8000a414:	960fe06f          	j	80008574 <tinst_tests_pf+0x752>
    8000a418:	970fe06f          	j	80008588 <tinst_tests_pf+0x766>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a41c:	701c                	ld	a5,32(s0)
    8000a41e:	00023597          	auipc	a1,0x23
    8000a422:	ec258593          	addi	a1,a1,-318 # 8002d2e0 <__func__.0+0x2c0>
    8000a426:	e399                	bnez	a5,8000a42c <tinst_tests_pf+0x260a>
    8000a428:	bb3fe06f          	j	80008fda <tinst_tests_pf+0x11b8>
    8000a42c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a42e:	0016f713          	andi	a4,a3,1
    8000a432:	a60716e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a436:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a43a:	460d                	li	a2,3
    8000a43c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a440:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a442:	00c59763          	bne	a1,a2,8000a450 <tinst_tests_pf+0x262e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a446:	0026d683          	lhu	a3,2(a3)
    8000a44a:	0106969b          	slliw	a3,a3,0x10
    8000a44e:	8f55                	or	a4,a4,a3
    8000a450:	1ffe16b7          	lui	a3,0x1ffe1
    8000a454:	068e                	slli	a3,a3,0x3
    8000a456:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a458:	8f75                	and	a4,a4,a3
    8000a45a:	00023597          	auipc	a1,0x23
    8000a45e:	e8658593          	addi	a1,a1,-378 # 8002d2e0 <__func__.0+0x2c0>
    8000a462:	00e79463          	bne	a5,a4,8000a46a <tinst_tests_pf+0x2648>
    8000a466:	b75fe06f          	j	80008fda <tinst_tests_pf+0x11b8>
    8000a46a:	00023597          	auipc	a1,0x23
    8000a46e:	e8658593          	addi	a1,a1,-378 # 8002d2f0 <__func__.0+0x2d0>
    8000a472:	b69fe06f          	j	80008fda <tinst_tests_pf+0x11b8>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000a476:	02043983          	ld	s3,32(s0)
    8000a47a:	00099463          	bnez	s3,8000a482 <tinst_tests_pf+0x2660>
    8000a47e:	99efe06f          	j	8000861c <tinst_tests_pf+0x7fa>
    8000a482:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a484:	0017f713          	andi	a4,a5,1
    8000a488:	a0071be3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a48c:	0007d503          	lhu	a0,0(a5)
    8000a490:	a16f70ef          	jal	800016a6 <expand_compressed_instruction>
    8000a494:	67a1                	lui	a5,0x8
    8000a496:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000a498:	8d7d                	and	a0,a0,a5
    8000a49a:	00a98463          	beq	s3,a0,8000a4a2 <tinst_tests_pf+0x2680>
    8000a49e:	96afe06f          	j	80008608 <tinst_tests_pf+0x7e6>
    8000a4a2:	97afe06f          	j	8000861c <tinst_tests_pf+0x7fa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000a4a6:	701c                	ld	a5,32(s0)
    8000a4a8:	00023597          	auipc	a1,0x23
    8000a4ac:	e3858593          	addi	a1,a1,-456 # 8002d2e0 <__func__.0+0x2c0>
    8000a4b0:	e399                	bnez	a5,8000a4b6 <tinst_tests_pf+0x2694>
    8000a4b2:	bc9fe06f          	j	8000907a <tinst_tests_pf+0x1258>
    8000a4b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a4b8:	0016f713          	andi	a4,a3,1
    8000a4bc:	9e0711e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a4c0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a4c4:	460d                	li	a2,3
    8000a4c6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a4ca:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a4cc:	00c59763          	bne	a1,a2,8000a4da <tinst_tests_pf+0x26b8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a4d0:	0026d683          	lhu	a3,2(a3)
    8000a4d4:	0106969b          	slliw	a3,a3,0x10
    8000a4d8:	8f55                	or	a4,a4,a3
    8000a4da:	1ffe16b7          	lui	a3,0x1ffe1
    8000a4de:	068e                	slli	a3,a3,0x3
    8000a4e0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a4e2:	8f75                	and	a4,a4,a3
    8000a4e4:	00023597          	auipc	a1,0x23
    8000a4e8:	dfc58593          	addi	a1,a1,-516 # 8002d2e0 <__func__.0+0x2c0>
    8000a4ec:	00e79463          	bne	a5,a4,8000a4f4 <tinst_tests_pf+0x26d2>
    8000a4f0:	b8bfe06f          	j	8000907a <tinst_tests_pf+0x1258>
    8000a4f4:	00023597          	auipc	a1,0x23
    8000a4f8:	dfc58593          	addi	a1,a1,-516 # 8002d2f0 <__func__.0+0x2d0>
    8000a4fc:	b7ffe06f          	j	8000907a <tinst_tests_pf+0x1258>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000a500:	02043983          	ld	s3,32(s0)
    8000a504:	00099463          	bnez	s3,8000a50c <tinst_tests_pf+0x26ea>
    8000a508:	9a8fe06f          	j	800086b0 <tinst_tests_pf+0x88e>
    8000a50c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a50e:	0017f713          	andi	a4,a5,1
    8000a512:	980716e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a516:	0007d503          	lhu	a0,0(a5)
    8000a51a:	98cf70ef          	jal	800016a6 <expand_compressed_instruction>
    8000a51e:	01f077b7          	lui	a5,0x1f07
    8000a522:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a526:	8d7d                	and	a0,a0,a5
    8000a528:	00a98463          	beq	s3,a0,8000a530 <tinst_tests_pf+0x270e>
    8000a52c:	970fe06f          	j	8000869c <tinst_tests_pf+0x87a>
    8000a530:	980fe06f          	j	800086b0 <tinst_tests_pf+0x88e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a534:	701c                	ld	a5,32(s0)
    8000a536:	00023597          	auipc	a1,0x23
    8000a53a:	daa58593          	addi	a1,a1,-598 # 8002d2e0 <__func__.0+0x2c0>
    8000a53e:	e399                	bnez	a5,8000a544 <tinst_tests_pf+0x2722>
    8000a540:	bdbfe06f          	j	8000911a <tinst_tests_pf+0x12f8>
    8000a544:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a546:	0016f713          	andi	a4,a3,1
    8000a54a:	94071ae3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a54e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a552:	460d                	li	a2,3
    8000a554:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a558:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a55a:	00c59763          	bne	a1,a2,8000a568 <tinst_tests_pf+0x2746>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a55e:	0026d683          	lhu	a3,2(a3)
    8000a562:	0106969b          	slliw	a3,a3,0x10
    8000a566:	8f55                	or	a4,a4,a3
    8000a568:	1ffe16b7          	lui	a3,0x1ffe1
    8000a56c:	068e                	slli	a3,a3,0x3
    8000a56e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a570:	8f75                	and	a4,a4,a3
    8000a572:	00023597          	auipc	a1,0x23
    8000a576:	d6e58593          	addi	a1,a1,-658 # 8002d2e0 <__func__.0+0x2c0>
    8000a57a:	00e79463          	bne	a5,a4,8000a582 <tinst_tests_pf+0x2760>
    8000a57e:	b9dfe06f          	j	8000911a <tinst_tests_pf+0x12f8>
    8000a582:	00023597          	auipc	a1,0x23
    8000a586:	d6e58593          	addi	a1,a1,-658 # 8002d2f0 <__func__.0+0x2d0>
    8000a58a:	b91fe06f          	j	8000911a <tinst_tests_pf+0x12f8>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000a58e:	7004                	ld	s1,32(s0)
    8000a590:	e099                	bnez	s1,8000a596 <tinst_tests_pf+0x2774>
    8000a592:	9bafe06f          	j	8000874c <tinst_tests_pf+0x92a>
    8000a596:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000a598:	0017f713          	andi	a4,a5,1
    8000a59c:	900711e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a5a0:	0007d503          	lhu	a0,0(a5)
    8000a5a4:	902f70ef          	jal	800016a6 <expand_compressed_instruction>
    8000a5a8:	01f077b7          	lui	a5,0x1f07
    8000a5ac:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000a5b0:	8d7d                	and	a0,a0,a5
    8000a5b2:	00a48463          	beq	s1,a0,8000a5ba <tinst_tests_pf+0x2798>
    8000a5b6:	982fe06f          	j	80008738 <tinst_tests_pf+0x916>
    8000a5ba:	992fe06f          	j	8000874c <tinst_tests_pf+0x92a>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000a5be:	701c                	ld	a5,32(s0)
    8000a5c0:	00023597          	auipc	a1,0x23
    8000a5c4:	d2058593          	addi	a1,a1,-736 # 8002d2e0 <__func__.0+0x2c0>
    8000a5c8:	e399                	bnez	a5,8000a5ce <tinst_tests_pf+0x27ac>
    8000a5ca:	be9fe06f          	j	800091b2 <tinst_tests_pf+0x1390>
    8000a5ce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a5d0:	0016f713          	andi	a4,a3,1
    8000a5d4:	8c0715e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a5d8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a5dc:	460d                	li	a2,3
    8000a5de:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a5e2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a5e4:	00c59763          	bne	a1,a2,8000a5f2 <tinst_tests_pf+0x27d0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a5e8:	0026d683          	lhu	a3,2(a3)
    8000a5ec:	0106969b          	slliw	a3,a3,0x10
    8000a5f0:	8f55                	or	a4,a4,a3
    8000a5f2:	1ffe16b7          	lui	a3,0x1ffe1
    8000a5f6:	068e                	slli	a3,a3,0x3
    8000a5f8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a5fa:	8f75                	and	a4,a4,a3
    8000a5fc:	00023597          	auipc	a1,0x23
    8000a600:	ce458593          	addi	a1,a1,-796 # 8002d2e0 <__func__.0+0x2c0>
    8000a604:	00e79463          	bne	a5,a4,8000a60c <tinst_tests_pf+0x27ea>
    8000a608:	babfe06f          	j	800091b2 <tinst_tests_pf+0x1390>
    8000a60c:	00023597          	auipc	a1,0x23
    8000a610:	ce458593          	addi	a1,a1,-796 # 8002d2f0 <__func__.0+0x2d0>
    8000a614:	b9ffe06f          	j	800091b2 <tinst_tests_pf+0x1390>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000a618:	701c                	ld	a5,32(s0)
    8000a61a:	00023597          	auipc	a1,0x23
    8000a61e:	cc658593          	addi	a1,a1,-826 # 8002d2e0 <__func__.0+0x2c0>
    8000a622:	e399                	bnez	a5,8000a628 <tinst_tests_pf+0x2806>
    8000a624:	c27fe06f          	j	8000924a <tinst_tests_pf+0x1428>
    8000a628:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a62a:	0016f713          	andi	a4,a3,1
    8000a62e:	860718e3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a632:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a636:	460d                	li	a2,3
    8000a638:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a63c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a63e:	00c59763          	bne	a1,a2,8000a64c <tinst_tests_pf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a642:	0026d683          	lhu	a3,2(a3)
    8000a646:	0106969b          	slliw	a3,a3,0x10
    8000a64a:	8f55                	or	a4,a4,a3
    8000a64c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a650:	068e                	slli	a3,a3,0x3
    8000a652:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a654:	8f75                	and	a4,a4,a3
    8000a656:	00023597          	auipc	a1,0x23
    8000a65a:	c8a58593          	addi	a1,a1,-886 # 8002d2e0 <__func__.0+0x2c0>
    8000a65e:	00e79463          	bne	a5,a4,8000a666 <tinst_tests_pf+0x2844>
    8000a662:	be9fe06f          	j	8000924a <tinst_tests_pf+0x1428>
    8000a666:	00023597          	auipc	a1,0x23
    8000a66a:	c8a58593          	addi	a1,a1,-886 # 8002d2f0 <__func__.0+0x2d0>
    8000a66e:	bddfe06f          	j	8000924a <tinst_tests_pf+0x1428>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000a672:	701c                	ld	a5,32(s0)
    8000a674:	00023597          	auipc	a1,0x23
    8000a678:	c6c58593          	addi	a1,a1,-916 # 8002d2e0 <__func__.0+0x2c0>
    8000a67c:	e399                	bnez	a5,8000a682 <tinst_tests_pf+0x2860>
    8000a67e:	c65fe06f          	j	800092e2 <tinst_tests_pf+0x14c0>
    8000a682:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a684:	0016f713          	andi	a4,a3,1
    8000a688:	80071be3          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a68c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a690:	460d                	li	a2,3
    8000a692:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a696:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a698:	00c59763          	bne	a1,a2,8000a6a6 <tinst_tests_pf+0x2884>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a69c:	0026d683          	lhu	a3,2(a3)
    8000a6a0:	0106969b          	slliw	a3,a3,0x10
    8000a6a4:	8f55                	or	a4,a4,a3
    8000a6a6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a6aa:	068e                	slli	a3,a3,0x3
    8000a6ac:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a6ae:	8f75                	and	a4,a4,a3
    8000a6b0:	00023597          	auipc	a1,0x23
    8000a6b4:	c3058593          	addi	a1,a1,-976 # 8002d2e0 <__func__.0+0x2c0>
    8000a6b8:	00e79463          	bne	a5,a4,8000a6c0 <tinst_tests_pf+0x289e>
    8000a6bc:	c27fe06f          	j	800092e2 <tinst_tests_pf+0x14c0>
    8000a6c0:	00023597          	auipc	a1,0x23
    8000a6c4:	c3058593          	addi	a1,a1,-976 # 8002d2f0 <__func__.0+0x2d0>
    8000a6c8:	c1bfe06f          	j	800092e2 <tinst_tests_pf+0x14c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000a6cc:	701c                	ld	a5,32(s0)
    8000a6ce:	00023597          	auipc	a1,0x23
    8000a6d2:	c1258593          	addi	a1,a1,-1006 # 8002d2e0 <__func__.0+0x2c0>
    8000a6d6:	e399                	bnez	a5,8000a6dc <tinst_tests_pf+0x28ba>
    8000a6d8:	ca3fe06f          	j	8000937a <tinst_tests_pf+0x1558>
    8000a6dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a6de:	0016f713          	andi	a4,a3,1
    8000a6e2:	fa071e63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a6e6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a6ea:	460d                	li	a2,3
    8000a6ec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a6f0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a6f2:	00c59763          	bne	a1,a2,8000a700 <tinst_tests_pf+0x28de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a6f6:	0026d683          	lhu	a3,2(a3)
    8000a6fa:	0106969b          	slliw	a3,a3,0x10
    8000a6fe:	8f55                	or	a4,a4,a3
    8000a700:	1ffe16b7          	lui	a3,0x1ffe1
    8000a704:	068e                	slli	a3,a3,0x3
    8000a706:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a708:	8f75                	and	a4,a4,a3
    8000a70a:	00023597          	auipc	a1,0x23
    8000a70e:	bd658593          	addi	a1,a1,-1066 # 8002d2e0 <__func__.0+0x2c0>
    8000a712:	00e79463          	bne	a5,a4,8000a71a <tinst_tests_pf+0x28f8>
    8000a716:	c65fe06f          	j	8000937a <tinst_tests_pf+0x1558>
    8000a71a:	00023597          	auipc	a1,0x23
    8000a71e:	bd658593          	addi	a1,a1,-1066 # 8002d2f0 <__func__.0+0x2d0>
    8000a722:	c59fe06f          	j	8000937a <tinst_tests_pf+0x1558>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000a726:	701c                	ld	a5,32(s0)
    8000a728:	e399                	bnez	a5,8000a72e <tinst_tests_pf+0x290c>
    8000a72a:	aa2fe06f          	j	800089cc <tinst_tests_pf+0xbaa>
    8000a72e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a730:	0016f713          	andi	a4,a3,1
    8000a734:	f6071563          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a738:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a73c:	460d                	li	a2,3
    8000a73e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a742:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a744:	00c59763          	bne	a1,a2,8000a752 <tinst_tests_pf+0x2930>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a748:	0026d683          	lhu	a3,2(a3)
    8000a74c:	0106969b          	slliw	a3,a3,0x10
    8000a750:	8f55                	or	a4,a4,a3
    8000a752:	1ffe16b7          	lui	a3,0x1ffe1
    8000a756:	068e                	slli	a3,a3,0x3
    8000a758:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a75a:	8f75                	and	a4,a4,a3
    8000a75c:	00e78463          	beq	a5,a4,8000a764 <tinst_tests_pf+0x2942>
    8000a760:	a58fe06f          	j	800089b8 <tinst_tests_pf+0xb96>
    8000a764:	a68fe06f          	j	800089cc <tinst_tests_pf+0xbaa>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000a768:	701c                	ld	a5,32(s0)
    8000a76a:	e399                	bnez	a5,8000a770 <tinst_tests_pf+0x294e>
    8000a76c:	b00fe06f          	j	80008a6c <tinst_tests_pf+0xc4a>
    8000a770:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a772:	0016f713          	andi	a4,a3,1
    8000a776:	f2071463          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a77a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a77e:	460d                	li	a2,3
    8000a780:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a784:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a786:	00c59763          	bne	a1,a2,8000a794 <tinst_tests_pf+0x2972>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a78a:	0026d683          	lhu	a3,2(a3)
    8000a78e:	0106969b          	slliw	a3,a3,0x10
    8000a792:	8f55                	or	a4,a4,a3
    8000a794:	1ffe16b7          	lui	a3,0x1ffe1
    8000a798:	068e                	slli	a3,a3,0x3
    8000a79a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a79c:	8f75                	and	a4,a4,a3
    8000a79e:	00e78463          	beq	a5,a4,8000a7a6 <tinst_tests_pf+0x2984>
    8000a7a2:	ab6fe06f          	j	80008a58 <tinst_tests_pf+0xc36>
    8000a7a6:	ac6fe06f          	j	80008a6c <tinst_tests_pf+0xc4a>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000a7aa:	701c                	ld	a5,32(s0)
    8000a7ac:	e399                	bnez	a5,8000a7b2 <tinst_tests_pf+0x2990>
    8000a7ae:	b5efe06f          	j	80008b0c <tinst_tests_pf+0xcea>
    8000a7b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7b4:	0016f713          	andi	a4,a3,1
    8000a7b8:	ee071363          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a7bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a7c0:	460d                	li	a2,3
    8000a7c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a7c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a7c8:	00c59763          	bne	a1,a2,8000a7d6 <tinst_tests_pf+0x29b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a7cc:	0026d683          	lhu	a3,2(a3)
    8000a7d0:	0106969b          	slliw	a3,a3,0x10
    8000a7d4:	8f55                	or	a4,a4,a3
    8000a7d6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a7da:	068e                	slli	a3,a3,0x3
    8000a7dc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a7de:	8f75                	and	a4,a4,a3
    8000a7e0:	00e78463          	beq	a5,a4,8000a7e8 <tinst_tests_pf+0x29c6>
    8000a7e4:	b14fe06f          	j	80008af8 <tinst_tests_pf+0xcd6>
    8000a7e8:	b24fe06f          	j	80008b0c <tinst_tests_pf+0xcea>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000a7ec:	701c                	ld	a5,32(s0)
    8000a7ee:	e399                	bnez	a5,8000a7f4 <tinst_tests_pf+0x29d2>
    8000a7f0:	bbcfe06f          	j	80008bac <tinst_tests_pf+0xd8a>
    8000a7f4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a7f6:	0016f713          	andi	a4,a3,1
    8000a7fa:	ea071263          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a7fe:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a802:	460d                	li	a2,3
    8000a804:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a808:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a80a:	00c59763          	bne	a1,a2,8000a818 <tinst_tests_pf+0x29f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a80e:	0026d683          	lhu	a3,2(a3)
    8000a812:	0106969b          	slliw	a3,a3,0x10
    8000a816:	8f55                	or	a4,a4,a3
    8000a818:	1ffe16b7          	lui	a3,0x1ffe1
    8000a81c:	068e                	slli	a3,a3,0x3
    8000a81e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a820:	8f75                	and	a4,a4,a3
    8000a822:	00e78463          	beq	a5,a4,8000a82a <tinst_tests_pf+0x2a08>
    8000a826:	b72fe06f          	j	80008b98 <tinst_tests_pf+0xd76>
    8000a82a:	b82fe06f          	j	80008bac <tinst_tests_pf+0xd8a>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000a82e:	701c                	ld	a5,32(s0)
    8000a830:	e399                	bnez	a5,8000a836 <tinst_tests_pf+0x2a14>
    8000a832:	c1afe06f          	j	80008c4c <tinst_tests_pf+0xe2a>
    8000a836:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a838:	0016f713          	andi	a4,a3,1
    8000a83c:	e6071163          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a840:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a844:	460d                	li	a2,3
    8000a846:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a84a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a84c:	00c59763          	bne	a1,a2,8000a85a <tinst_tests_pf+0x2a38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a850:	0026d683          	lhu	a3,2(a3)
    8000a854:	0106969b          	slliw	a3,a3,0x10
    8000a858:	8f55                	or	a4,a4,a3
    8000a85a:	1ffe16b7          	lui	a3,0x1ffe1
    8000a85e:	068e                	slli	a3,a3,0x3
    8000a860:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a862:	8f75                	and	a4,a4,a3
    8000a864:	00e78463          	beq	a5,a4,8000a86c <tinst_tests_pf+0x2a4a>
    8000a868:	bd0fe06f          	j	80008c38 <tinst_tests_pf+0xe16>
    8000a86c:	be0fe06f          	j	80008c4c <tinst_tests_pf+0xe2a>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000a870:	701c                	ld	a5,32(s0)
    8000a872:	e399                	bnez	a5,8000a878 <tinst_tests_pf+0x2a56>
    8000a874:	c78fe06f          	j	80008cec <tinst_tests_pf+0xeca>
    8000a878:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a87a:	0016f713          	andi	a4,a3,1
    8000a87e:	e2071063          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a882:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a886:	460d                	li	a2,3
    8000a888:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a88c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a88e:	00c59763          	bne	a1,a2,8000a89c <tinst_tests_pf+0x2a7a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a892:	0026d683          	lhu	a3,2(a3)
    8000a896:	0106969b          	slliw	a3,a3,0x10
    8000a89a:	8f55                	or	a4,a4,a3
    8000a89c:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8a0:	068e                	slli	a3,a3,0x3
    8000a8a2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8a4:	8f75                	and	a4,a4,a3
    8000a8a6:	00e78463          	beq	a5,a4,8000a8ae <tinst_tests_pf+0x2a8c>
    8000a8aa:	c2efe06f          	j	80008cd8 <tinst_tests_pf+0xeb6>
    8000a8ae:	c3efe06f          	j	80008cec <tinst_tests_pf+0xeca>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000a8b2:	701c                	ld	a5,32(s0)
    8000a8b4:	e399                	bnez	a5,8000a8ba <tinst_tests_pf+0x2a98>
    8000a8b6:	cd6fe06f          	j	80008d8c <tinst_tests_pf+0xf6a>
    8000a8ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8bc:	0016f713          	andi	a4,a3,1
    8000a8c0:	dc071f63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a8c4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a8c8:	460d                	li	a2,3
    8000a8ca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a8ce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a8d0:	00c59763          	bne	a1,a2,8000a8de <tinst_tests_pf+0x2abc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a8d4:	0026d683          	lhu	a3,2(a3)
    8000a8d8:	0106969b          	slliw	a3,a3,0x10
    8000a8dc:	8f55                	or	a4,a4,a3
    8000a8de:	1ffe16b7          	lui	a3,0x1ffe1
    8000a8e2:	068e                	slli	a3,a3,0x3
    8000a8e4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a8e6:	8f75                	and	a4,a4,a3
    8000a8e8:	00e78463          	beq	a5,a4,8000a8f0 <tinst_tests_pf+0x2ace>
    8000a8ec:	c8cfe06f          	j	80008d78 <tinst_tests_pf+0xf56>
    8000a8f0:	c9cfe06f          	j	80008d8c <tinst_tests_pf+0xf6a>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000a8f4:	701c                	ld	a5,32(s0)
    8000a8f6:	e399                	bnez	a5,8000a8fc <tinst_tests_pf+0x2ada>
    8000a8f8:	d38fe06f          	j	80008e30 <tinst_tests_pf+0x100e>
    8000a8fc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a8fe:	0016f713          	andi	a4,a3,1
    8000a902:	d8071e63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a906:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a90a:	460d                	li	a2,3
    8000a90c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a910:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a912:	00c59763          	bne	a1,a2,8000a920 <tinst_tests_pf+0x2afe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a916:	0026d683          	lhu	a3,2(a3)
    8000a91a:	0106969b          	slliw	a3,a3,0x10
    8000a91e:	8f55                	or	a4,a4,a3
    8000a920:	1ffe16b7          	lui	a3,0x1ffe1
    8000a924:	068e                	slli	a3,a3,0x3
    8000a926:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a928:	8f75                	and	a4,a4,a3
    8000a92a:	00e78463          	beq	a5,a4,8000a932 <tinst_tests_pf+0x2b10>
    8000a92e:	ceefe06f          	j	80008e1c <tinst_tests_pf+0xffa>
    8000a932:	cfefe06f          	j	80008e30 <tinst_tests_pf+0x100e>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000a936:	701c                	ld	a5,32(s0)
    8000a938:	e399                	bnez	a5,8000a93e <tinst_tests_pf+0x2b1c>
    8000a93a:	d96fe06f          	j	80008ed0 <tinst_tests_pf+0x10ae>
    8000a93e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a940:	0016f713          	andi	a4,a3,1
    8000a944:	d4071d63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a948:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a94c:	460d                	li	a2,3
    8000a94e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a952:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a954:	00c59763          	bne	a1,a2,8000a962 <tinst_tests_pf+0x2b40>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a958:	0026d683          	lhu	a3,2(a3)
    8000a95c:	0106969b          	slliw	a3,a3,0x10
    8000a960:	8f55                	or	a4,a4,a3
    8000a962:	1ffe16b7          	lui	a3,0x1ffe1
    8000a966:	068e                	slli	a3,a3,0x3
    8000a968:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a96a:	8f75                	and	a4,a4,a3
    8000a96c:	00e78463          	beq	a5,a4,8000a974 <tinst_tests_pf+0x2b52>
    8000a970:	d4cfe06f          	j	80008ebc <tinst_tests_pf+0x109a>
    8000a974:	d5cfe06f          	j	80008ed0 <tinst_tests_pf+0x10ae>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000a978:	701c                	ld	a5,32(s0)
    8000a97a:	e399                	bnez	a5,8000a980 <tinst_tests_pf+0x2b5e>
    8000a97c:	df4fe06f          	j	80008f70 <tinst_tests_pf+0x114e>
    8000a980:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a982:	0016f713          	andi	a4,a3,1
    8000a986:	d0071c63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a98a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a98e:	460d                	li	a2,3
    8000a990:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a994:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a996:	00c59763          	bne	a1,a2,8000a9a4 <tinst_tests_pf+0x2b82>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a99a:	0026d683          	lhu	a3,2(a3)
    8000a99e:	0106969b          	slliw	a3,a3,0x10
    8000a9a2:	8f55                	or	a4,a4,a3
    8000a9a4:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9a8:	068e                	slli	a3,a3,0x3
    8000a9aa:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9ac:	8f75                	and	a4,a4,a3
    8000a9ae:	00e78463          	beq	a5,a4,8000a9b6 <tinst_tests_pf+0x2b94>
    8000a9b2:	daafe06f          	j	80008f5c <tinst_tests_pf+0x113a>
    8000a9b6:	dbafe06f          	j	80008f70 <tinst_tests_pf+0x114e>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000a9ba:	701c                	ld	a5,32(s0)
    8000a9bc:	e399                	bnez	a5,8000a9c2 <tinst_tests_pf+0x2ba0>
    8000a9be:	e52fe06f          	j	80009010 <tinst_tests_pf+0x11ee>
    8000a9c2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000a9c4:	0016f713          	andi	a4,a3,1
    8000a9c8:	cc071b63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000a9cc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000a9d0:	460d                	li	a2,3
    8000a9d2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000a9d6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000a9d8:	00c59763          	bne	a1,a2,8000a9e6 <tinst_tests_pf+0x2bc4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000a9dc:	0026d683          	lhu	a3,2(a3)
    8000a9e0:	0106969b          	slliw	a3,a3,0x10
    8000a9e4:	8f55                	or	a4,a4,a3
    8000a9e6:	1ffe16b7          	lui	a3,0x1ffe1
    8000a9ea:	068e                	slli	a3,a3,0x3
    8000a9ec:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000a9ee:	8f75                	and	a4,a4,a3
    8000a9f0:	00e78463          	beq	a5,a4,8000a9f8 <tinst_tests_pf+0x2bd6>
    8000a9f4:	e08fe06f          	j	80008ffc <tinst_tests_pf+0x11da>
    8000a9f8:	e18fe06f          	j	80009010 <tinst_tests_pf+0x11ee>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000a9fc:	6418                	ld	a4,8(s0)
    8000a9fe:	47bd                	li	a5,15
    8000aa00:	00f70463          	beq	a4,a5,8000aa08 <tinst_tests_pf+0x2be6>
    8000aa04:	f64fe06f          	j	80009168 <tinst_tests_pf+0x1346>
    8000aa08:	701c                	ld	a5,32(s0)
    8000aa0a:	e399                	bnez	a5,8000aa10 <tinst_tests_pf+0x2bee>
    8000aa0c:	f5efe06f          	j	8000916a <tinst_tests_pf+0x1348>
    8000aa10:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa12:	0016f713          	andi	a4,a3,1
    8000aa16:	c8071463          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa1a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa1e:	460d                	li	a2,3
    8000aa20:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa24:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa26:	00c59763          	bne	a1,a2,8000aa34 <tinst_tests_pf+0x2c12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa2a:	0026d683          	lhu	a3,2(a3)
    8000aa2e:	0106969b          	slliw	a3,a3,0x10
    8000aa32:	8f55                	or	a4,a4,a3
    8000aa34:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa38:	068e                	slli	a3,a3,0x3
    8000aa3a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa3c:	8f75                	and	a4,a4,a3
    8000aa3e:	40f70933          	sub	s2,a4,a5
    8000aa42:	00193913          	seqz	s2,s2
    8000aa46:	f24fe06f          	j	8000916a <tinst_tests_pf+0x1348>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000aa4a:	6418                	ld	a4,8(s0)
    8000aa4c:	47bd                	li	a5,15
    8000aa4e:	00f70463          	beq	a4,a5,8000aa56 <tinst_tests_pf+0x2c34>
    8000aa52:	faefe06f          	j	80009200 <tinst_tests_pf+0x13de>
    8000aa56:	701c                	ld	a5,32(s0)
    8000aa58:	e399                	bnez	a5,8000aa5e <tinst_tests_pf+0x2c3c>
    8000aa5a:	fa8fe06f          	j	80009202 <tinst_tests_pf+0x13e0>
    8000aa5e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aa60:	0016f713          	andi	a4,a3,1
    8000aa64:	c2071d63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aa68:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa6c:	460d                	li	a2,3
    8000aa6e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aa72:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aa74:	00c59763          	bne	a1,a2,8000aa82 <tinst_tests_pf+0x2c60>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aa78:	0026d683          	lhu	a3,2(a3)
    8000aa7c:	0106969b          	slliw	a3,a3,0x10
    8000aa80:	8f55                	or	a4,a4,a3
    8000aa82:	1ffe16b7          	lui	a3,0x1ffe1
    8000aa86:	068e                	slli	a3,a3,0x3
    8000aa88:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aa8a:	8f75                	and	a4,a4,a3
    8000aa8c:	40f70933          	sub	s2,a4,a5
    8000aa90:	00193913          	seqz	s2,s2
    8000aa94:	f6efe06f          	j	80009202 <tinst_tests_pf+0x13e0>
    instruction = *((uint16_t*)addr);
    8000aa98:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aa9c:	460d                	li	a2,3
    8000aa9e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aaa2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aaa4:	00c59763          	bne	a1,a2,8000aab2 <tinst_tests_pf+0x2c90>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaa8:	0026d683          	lhu	a3,2(a3)
    8000aaac:	0106969b          	slliw	a3,a3,0x10
    8000aab0:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lh which results in a lpf",
    8000aab2:	1746                	slli	a4,a4,0x31
    8000aab4:	9345                	srli	a4,a4,0x31
    8000aab6:	00e78463          	beq	a5,a4,8000aabe <tinst_tests_pf+0x2c9c>
    8000aaba:	d3efd06f          	j	80007ff8 <tinst_tests_pf+0x1d6>
    8000aabe:	d4efd06f          	j	8000800c <tinst_tests_pf+0x1ea>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000aac2:	6418                	ld	a4,8(s0)
    8000aac4:	47bd                	li	a5,15
    8000aac6:	00f70463          	beq	a4,a5,8000aace <tinst_tests_pf+0x2cac>
    8000aaca:	fcefe06f          	j	80009298 <tinst_tests_pf+0x1476>
    8000aace:	701c                	ld	a5,32(s0)
    8000aad0:	e399                	bnez	a5,8000aad6 <tinst_tests_pf+0x2cb4>
    8000aad2:	fc8fe06f          	j	8000929a <tinst_tests_pf+0x1478>
    8000aad6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aad8:	0016f713          	andi	a4,a3,1
    8000aadc:	bc071163          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aae0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aae4:	460d                	li	a2,3
    8000aae6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aaea:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aaec:	00c59763          	bne	a1,a2,8000aafa <tinst_tests_pf+0x2cd8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aaf0:	0026d683          	lhu	a3,2(a3)
    8000aaf4:	0106969b          	slliw	a3,a3,0x10
    8000aaf8:	8f55                	or	a4,a4,a3
    8000aafa:	1ffe16b7          	lui	a3,0x1ffe1
    8000aafe:	068e                	slli	a3,a3,0x3
    8000ab00:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab02:	8f75                	and	a4,a4,a3
    8000ab04:	40f70933          	sub	s2,a4,a5
    8000ab08:	00193913          	seqz	s2,s2
    8000ab0c:	f8efe06f          	j	8000929a <tinst_tests_pf+0x1478>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000ab10:	6418                	ld	a4,8(s0)
    8000ab12:	47bd                	li	a5,15
    8000ab14:	00f70463          	beq	a4,a5,8000ab1c <tinst_tests_pf+0x2cfa>
    8000ab18:	819fe06f          	j	80009330 <tinst_tests_pf+0x150e>
    8000ab1c:	701c                	ld	a5,32(s0)
    8000ab1e:	e399                	bnez	a5,8000ab24 <tinst_tests_pf+0x2d02>
    8000ab20:	813fe06f          	j	80009332 <tinst_tests_pf+0x1510>
    8000ab24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ab26:	0016f713          	andi	a4,a3,1
    8000ab2a:	b6071a63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ab32:	460d                	li	a2,3
    8000ab34:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ab38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ab3a:	00c59763          	bne	a1,a2,8000ab48 <tinst_tests_pf+0x2d26>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ab3e:	0026d683          	lhu	a3,2(a3)
    8000ab42:	0106969b          	slliw	a3,a3,0x10
    8000ab46:	8f55                	or	a4,a4,a3
    8000ab48:	1ffe16b7          	lui	a3,0x1ffe1
    8000ab4c:	068e                	slli	a3,a3,0x3
    8000ab4e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ab50:	8f75                	and	a4,a4,a3
    8000ab52:	40f70933          	sub	s2,a4,a5
    8000ab56:	00193913          	seqz	s2,s2
    8000ab5a:	fd8fe06f          	j	80009332 <tinst_tests_pf+0x1510>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ab5e:	02043983          	ld	s3,32(s0)
    8000ab62:	00099463          	bnez	s3,8000ab6a <tinst_tests_pf+0x2d48>
    8000ab66:	b6dfd06f          	j	800086d2 <tinst_tests_pf+0x8b0>
    8000ab6a:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ab6c:	0017f713          	andi	a4,a5,1
    8000ab70:	b2071763          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ab74:	0007d503          	lhu	a0,0(a5)
    8000ab78:	b2ff60ef          	jal	800016a6 <expand_compressed_instruction>
    8000ab7c:	01f077b7          	lui	a5,0x1f07
    8000ab80:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ab84:	00f57933          	and	s2,a0,a5
    8000ab88:	41390933          	sub	s2,s2,s3
    8000ab8c:	00193913          	seqz	s2,s2
    8000ab90:	b43fd06f          	j	800086d2 <tinst_tests_pf+0x8b0>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000ab94:	7004                	ld	s1,32(s0)
    8000ab96:	e099                	bnez	s1,8000ab9c <tinst_tests_pf+0x2d7a>
    8000ab98:	bd7fd06f          	j	8000876e <tinst_tests_pf+0x94c>
    8000ab9c:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ab9e:	0017f713          	andi	a4,a5,1
    8000aba2:	ae071e63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aba6:	0007d503          	lhu	a0,0(a5)
    8000abaa:	afdf60ef          	jal	800016a6 <expand_compressed_instruction>
    8000abae:	01f077b7          	lui	a5,0x1f07
    8000abb2:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000abb6:	00f57933          	and	s2,a0,a5
    8000abba:	40990933          	sub	s2,s2,s1
    8000abbe:	00193913          	seqz	s2,s2
    8000abc2:	badfd06f          	j	8000876e <tinst_tests_pf+0x94c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lpf",
    8000abc6:	701c                	ld	a5,32(s0)
    8000abc8:	e399                	bnez	a5,8000abce <tinst_tests_pf+0x2dac>
    8000abca:	c4bfd06f          	j	80008814 <tinst_tests_pf+0x9f2>
    8000abce:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000abd0:	0016f713          	andi	a4,a3,1
    8000abd4:	ac071563          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000abd8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000abdc:	460d                	li	a2,3
    8000abde:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000abe2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000abe4:	00c59763          	bne	a1,a2,8000abf2 <tinst_tests_pf+0x2dd0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000abe8:	0026d683          	lhu	a3,2(a3)
    8000abec:	0106969b          	slliw	a3,a3,0x10
    8000abf0:	8f55                	or	a4,a4,a3
    8000abf2:	1ffe16b7          	lui	a3,0x1ffe1
    8000abf6:	068e                	slli	a3,a3,0x3
    8000abf8:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000abfa:	8f75                	and	a4,a4,a3
    8000abfc:	40f70933          	sub	s2,a4,a5
    8000ac00:	00193913          	seqz	s2,s2
    8000ac04:	c11fd06f          	j	80008814 <tinst_tests_pf+0x9f2>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a spf",
    8000ac08:	701c                	ld	a5,32(s0)
    8000ac0a:	e399                	bnez	a5,8000ac10 <tinst_tests_pf+0x2dee>
    8000ac0c:	caffd06f          	j	800088ba <tinst_tests_pf+0xa98>
    8000ac10:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac12:	0016f713          	andi	a4,a3,1
    8000ac16:	a8071463          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac1a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac1e:	460d                	li	a2,3
    8000ac20:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac24:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac26:	00c59763          	bne	a1,a2,8000ac34 <tinst_tests_pf+0x2e12>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac2a:	0026d683          	lhu	a3,2(a3)
    8000ac2e:	0106969b          	slliw	a3,a3,0x10
    8000ac32:	8f55                	or	a4,a4,a3
    8000ac34:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac38:	068e                	slli	a3,a3,0x3
    8000ac3a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac3c:	8f75                	and	a4,a4,a3
    8000ac3e:	40f70933          	sub	s2,a4,a5
    8000ac42:	00193913          	seqz	s2,s2
    8000ac46:	c75fd06f          	j	800088ba <tinst_tests_pf+0xa98>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a spf",
    8000ac4a:	701c                	ld	a5,32(s0)
    8000ac4c:	e399                	bnez	a5,8000ac52 <tinst_tests_pf+0x2e30>
    8000ac4e:	d0dfd06f          	j	8000895a <tinst_tests_pf+0xb38>
    8000ac52:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac54:	0016f713          	andi	a4,a3,1
    8000ac58:	a4071363          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac5c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ac60:	460d                	li	a2,3
    8000ac62:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ac66:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ac68:	00c59763          	bne	a1,a2,8000ac76 <tinst_tests_pf+0x2e54>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ac6c:	0026d683          	lhu	a3,2(a3)
    8000ac70:	0106969b          	slliw	a3,a3,0x10
    8000ac74:	8f55                	or	a4,a4,a3
    8000ac76:	1ffe16b7          	lui	a3,0x1ffe1
    8000ac7a:	068e                	slli	a3,a3,0x3
    8000ac7c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ac7e:	8f75                	and	a4,a4,a3
    8000ac80:	40f70933          	sub	s2,a4,a5
    8000ac84:	00193913          	seqz	s2,s2
    8000ac88:	cd3fd06f          	j	8000895a <tinst_tests_pf+0xb38>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a spf",
    8000ac8c:	701c                	ld	a5,32(s0)
    8000ac8e:	e399                	bnez	a5,8000ac94 <tinst_tests_pf+0x2e72>
    8000ac90:	d5ffd06f          	j	800089ee <tinst_tests_pf+0xbcc>
    8000ac94:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ac96:	0016f713          	andi	a4,a3,1
    8000ac9a:	a0071263          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ac9e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aca2:	460d                	li	a2,3
    8000aca4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aca8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000acaa:	00c59763          	bne	a1,a2,8000acb8 <tinst_tests_pf+0x2e96>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000acae:	0026d683          	lhu	a3,2(a3)
    8000acb2:	0106969b          	slliw	a3,a3,0x10
    8000acb6:	8f55                	or	a4,a4,a3
    8000acb8:	1ffe16b7          	lui	a3,0x1ffe1
    8000acbc:	068e                	slli	a3,a3,0x3
    8000acbe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000acc0:	8f75                	and	a4,a4,a3
    8000acc2:	40f70933          	sub	s2,a4,a5
    8000acc6:	00193913          	seqz	s2,s2
    8000acca:	d25fd06f          	j	800089ee <tinst_tests_pf+0xbcc>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000acce:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000acd0:	0017f713          	andi	a4,a5,1
    8000acd4:	9c071563          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000acd8:	0007d503          	lhu	a0,0(a5)
    8000acdc:	9cbf60ef          	jal	800016a6 <expand_compressed_instruction>
    8000ace0:	67a1                	lui	a5,0x8
    8000ace2:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ace4:	8d7d                	and	a0,a0,a5
    8000ace6:	00a48463          	beq	s1,a0,8000acee <tinst_tests_pf+0x2ecc>
    8000acea:	861fd06f          	j	8000854a <tinst_tests_pf+0x728>
    8000acee:	00022597          	auipc	a1,0x22
    8000acf2:	5f258593          	addi	a1,a1,1522 # 8002d2e0 <__func__.0+0x2c0>
    8000acf6:	85dfd06f          	j	80008552 <tinst_tests_pf+0x730>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lpf",
    8000acfa:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000acfc:	0017f713          	andi	a4,a5,1
    8000ad00:	98071f63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad04:	0007d503          	lhu	a0,0(a5)
    8000ad08:	99ff60ef          	jal	800016a6 <expand_compressed_instruction>
    8000ad0c:	67a1                	lui	a5,0x8
    8000ad0e:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000ad10:	8d7d                	and	a0,a0,a5
    8000ad12:	00a98463          	beq	s3,a0,8000ad1a <tinst_tests_pf+0x2ef8>
    8000ad16:	8c9fd06f          	j	800085de <tinst_tests_pf+0x7bc>
    8000ad1a:	00022597          	auipc	a1,0x22
    8000ad1e:	5c658593          	addi	a1,a1,1478 # 8002d2e0 <__func__.0+0x2c0>
    8000ad22:	8c5fd06f          	j	800085e6 <tinst_tests_pf+0x7c4>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a spf",
    8000ad26:	701c                	ld	a5,32(s0)
    8000ad28:	e399                	bnez	a5,8000ad2e <tinst_tests_pf+0x2f0c>
    8000ad2a:	d65fd06f          	j	80008a8e <tinst_tests_pf+0xc6c>
    8000ad2e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ad30:	0016f713          	andi	a4,a3,1
    8000ad34:	96071563          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad38:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ad3c:	460d                	li	a2,3
    8000ad3e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ad42:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ad44:	00c59763          	bne	a1,a2,8000ad52 <tinst_tests_pf+0x2f30>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ad48:	0026d683          	lhu	a3,2(a3)
    8000ad4c:	0106969b          	slliw	a3,a3,0x10
    8000ad50:	8f55                	or	a4,a4,a3
    8000ad52:	1ffe16b7          	lui	a3,0x1ffe1
    8000ad56:	068e                	slli	a3,a3,0x3
    8000ad58:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ad5a:	8f75                	and	a4,a4,a3
    8000ad5c:	40f70933          	sub	s2,a4,a5
    8000ad60:	00193913          	seqz	s2,s2
    8000ad64:	d2bfd06f          	j	80008a8e <tinst_tests_pf+0xc6c>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lpf",
    8000ad68:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000ad6a:	0017f713          	andi	a4,a5,1
    8000ad6e:	92071863          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ad72:	0007d503          	lhu	a0,0(a5)
    8000ad76:	931f60ef          	jal	800016a6 <expand_compressed_instruction>
    8000ad7a:	01f077b7          	lui	a5,0x1f07
    8000ad7e:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000ad82:	8d7d                	and	a0,a0,a5
    8000ad84:	00a98463          	beq	s3,a0,8000ad8c <tinst_tests_pf+0x2f6a>
    8000ad88:	8ebfd06f          	j	80008672 <tinst_tests_pf+0x850>
    8000ad8c:	00022597          	auipc	a1,0x22
    8000ad90:	55458593          	addi	a1,a1,1364 # 8002d2e0 <__func__.0+0x2c0>
    8000ad94:	8e7fd06f          	j	8000867a <tinst_tests_pf+0x858>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a spf",
    8000ad98:	701c                	ld	a5,32(s0)
    8000ad9a:	e399                	bnez	a5,8000ada0 <tinst_tests_pf+0x2f7e>
    8000ad9c:	d93fd06f          	j	80008b2e <tinst_tests_pf+0xd0c>
    8000ada0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ada2:	0016f713          	andi	a4,a3,1
    8000ada6:	8e071c63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000adaa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000adae:	460d                	li	a2,3
    8000adb0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000adb4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000adb6:	00c59763          	bne	a1,a2,8000adc4 <tinst_tests_pf+0x2fa2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000adba:	0026d683          	lhu	a3,2(a3)
    8000adbe:	0106969b          	slliw	a3,a3,0x10
    8000adc2:	8f55                	or	a4,a4,a3
    8000adc4:	1ffe16b7          	lui	a3,0x1ffe1
    8000adc8:	068e                	slli	a3,a3,0x3
    8000adca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000adcc:	8f75                	and	a4,a4,a3
    8000adce:	40f70933          	sub	s2,a4,a5
    8000add2:	00193913          	seqz	s2,s2
    8000add6:	d59fd06f          	j	80008b2e <tinst_tests_pf+0xd0c>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lpf",
    8000adda:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000addc:	0017f713          	andi	a4,a5,1
    8000ade0:	8a071f63          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ade4:	0007d503          	lhu	a0,0(a5)
    8000ade8:	8bff60ef          	jal	800016a6 <expand_compressed_instruction>
    8000adec:	01f077b7          	lui	a5,0x1f07
    8000adf0:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000adf4:	8d7d                	and	a0,a0,a5
    8000adf6:	00a48463          	beq	s1,a0,8000adfe <tinst_tests_pf+0x2fdc>
    8000adfa:	915fd06f          	j	8000870e <tinst_tests_pf+0x8ec>
    8000adfe:	00022597          	auipc	a1,0x22
    8000ae02:	4e258593          	addi	a1,a1,1250 # 8002d2e0 <__func__.0+0x2c0>
    8000ae06:	911fd06f          	j	80008716 <tinst_tests_pf+0x8f4>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a spf",
    8000ae0a:	701c                	ld	a5,32(s0)
    8000ae0c:	e399                	bnez	a5,8000ae12 <tinst_tests_pf+0x2ff0>
    8000ae0e:	dc1fd06f          	j	80008bce <tinst_tests_pf+0xdac>
    8000ae12:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae14:	0016f713          	andi	a4,a3,1
    8000ae18:	88071363          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae1c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae20:	460d                	li	a2,3
    8000ae22:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae26:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae28:	00c59763          	bne	a1,a2,8000ae36 <tinst_tests_pf+0x3014>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae2c:	0026d683          	lhu	a3,2(a3)
    8000ae30:	0106969b          	slliw	a3,a3,0x10
    8000ae34:	8f55                	or	a4,a4,a3
    8000ae36:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae3a:	068e                	slli	a3,a3,0x3
    8000ae3c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae3e:	8f75                	and	a4,a4,a3
    8000ae40:	40f70933          	sub	s2,a4,a5
    8000ae44:	00193913          	seqz	s2,s2
    8000ae48:	d87fd06f          	j	80008bce <tinst_tests_pf+0xdac>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a spf",
    8000ae4c:	701c                	ld	a5,32(s0)
    8000ae4e:	e399                	bnez	a5,8000ae54 <tinst_tests_pf+0x3032>
    8000ae50:	e1ffd06f          	j	80008c6e <tinst_tests_pf+0xe4c>
    8000ae54:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae56:	0016f713          	andi	a4,a3,1
    8000ae5a:	84071263          	bnez	a4,80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000ae5e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ae62:	460d                	li	a2,3
    8000ae64:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ae68:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ae6a:	00c59763          	bne	a1,a2,8000ae78 <tinst_tests_pf+0x3056>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ae6e:	0026d683          	lhu	a3,2(a3)
    8000ae72:	0106969b          	slliw	a3,a3,0x10
    8000ae76:	8f55                	or	a4,a4,a3
    8000ae78:	1ffe16b7          	lui	a3,0x1ffe1
    8000ae7c:	068e                	slli	a3,a3,0x3
    8000ae7e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ae80:	8f75                	and	a4,a4,a3
    8000ae82:	40f70933          	sub	s2,a4,a5
    8000ae86:	00193913          	seqz	s2,s2
    8000ae8a:	de5fd06f          	j	80008c6e <tinst_tests_pf+0xe4c>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a spf",
    8000ae8e:	701c                	ld	a5,32(s0)
    8000ae90:	e399                	bnez	a5,8000ae96 <tinst_tests_pf+0x3074>
    8000ae92:	e7dfd06f          	j	80008d0e <tinst_tests_pf+0xeec>
    8000ae96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ae98:	0016f713          	andi	a4,a3,1
    8000ae9c:	c319                	beqz	a4,8000aea2 <tinst_tests_pf+0x3080>
    8000ae9e:	800ff06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aea2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aea6:	460d                	li	a2,3
    8000aea8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aeac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aeae:	00c59763          	bne	a1,a2,8000aebc <tinst_tests_pf+0x309a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aeb2:	0026d683          	lhu	a3,2(a3)
    8000aeb6:	0106969b          	slliw	a3,a3,0x10
    8000aeba:	8f55                	or	a4,a4,a3
    8000aebc:	1ffe16b7          	lui	a3,0x1ffe1
    8000aec0:	068e                	slli	a3,a3,0x3
    8000aec2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000aec4:	8f75                	and	a4,a4,a3
    8000aec6:	40f70933          	sub	s2,a4,a5
    8000aeca:	00193913          	seqz	s2,s2
    8000aece:	e41fd06f          	j	80008d0e <tinst_tests_pf+0xeec>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a spf",
    8000aed2:	701c                	ld	a5,32(s0)
    8000aed4:	e399                	bnez	a5,8000aeda <tinst_tests_pf+0x30b8>
    8000aed6:	ed9fd06f          	j	80008dae <tinst_tests_pf+0xf8c>
    8000aeda:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000aedc:	0016f713          	andi	a4,a3,1
    8000aee0:	c319                	beqz	a4,8000aee6 <tinst_tests_pf+0x30c4>
    8000aee2:	fbdfe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aee6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000aeea:	460d                	li	a2,3
    8000aeec:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000aef0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000aef2:	00c59763          	bne	a1,a2,8000af00 <tinst_tests_pf+0x30de>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000aef6:	0026d683          	lhu	a3,2(a3)
    8000aefa:	0106969b          	slliw	a3,a3,0x10
    8000aefe:	8f55                	or	a4,a4,a3
    8000af00:	1ffe16b7          	lui	a3,0x1ffe1
    8000af04:	068e                	slli	a3,a3,0x3
    8000af06:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af08:	8f75                	and	a4,a4,a3
    8000af0a:	40f70933          	sub	s2,a4,a5
    8000af0e:	00193913          	seqz	s2,s2
    8000af12:	e9dfd06f          	j	80008dae <tinst_tests_pf+0xf8c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a spf",
    8000af16:	701c                	ld	a5,32(s0)
    8000af18:	e399                	bnez	a5,8000af1e <tinst_tests_pf+0x30fc>
    8000af1a:	f39fd06f          	j	80008e52 <tinst_tests_pf+0x1030>
    8000af1e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af20:	0016f713          	andi	a4,a3,1
    8000af24:	c319                	beqz	a4,8000af2a <tinst_tests_pf+0x3108>
    8000af26:	f79fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af2a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af2e:	460d                	li	a2,3
    8000af30:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af34:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af36:	00c59763          	bne	a1,a2,8000af44 <tinst_tests_pf+0x3122>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af3a:	0026d683          	lhu	a3,2(a3)
    8000af3e:	0106969b          	slliw	a3,a3,0x10
    8000af42:	8f55                	or	a4,a4,a3
    8000af44:	1ffe16b7          	lui	a3,0x1ffe1
    8000af48:	068e                	slli	a3,a3,0x3
    8000af4a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af4c:	8f75                	and	a4,a4,a3
    8000af4e:	40f70933          	sub	s2,a4,a5
    8000af52:	00193913          	seqz	s2,s2
    8000af56:	efdfd06f          	j	80008e52 <tinst_tests_pf+0x1030>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a spf",
    8000af5a:	701c                	ld	a5,32(s0)
    8000af5c:	e399                	bnez	a5,8000af62 <tinst_tests_pf+0x3140>
    8000af5e:	f95fd06f          	j	80008ef2 <tinst_tests_pf+0x10d0>
    8000af62:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000af64:	0016f713          	andi	a4,a3,1
    8000af68:	c319                	beqz	a4,8000af6e <tinst_tests_pf+0x314c>
    8000af6a:	f35fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000af6e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000af72:	460d                	li	a2,3
    8000af74:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000af78:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000af7a:	00c59763          	bne	a1,a2,8000af88 <tinst_tests_pf+0x3166>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000af7e:	0026d683          	lhu	a3,2(a3)
    8000af82:	0106969b          	slliw	a3,a3,0x10
    8000af86:	8f55                	or	a4,a4,a3
    8000af88:	1ffe16b7          	lui	a3,0x1ffe1
    8000af8c:	068e                	slli	a3,a3,0x3
    8000af8e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000af90:	8f75                	and	a4,a4,a3
    8000af92:	40f70933          	sub	s2,a4,a5
    8000af96:	00193913          	seqz	s2,s2
    8000af9a:	f59fd06f          	j	80008ef2 <tinst_tests_pf+0x10d0>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a spf",
    8000af9e:	701c                	ld	a5,32(s0)
    8000afa0:	e399                	bnez	a5,8000afa6 <tinst_tests_pf+0x3184>
    8000afa2:	ff1fd06f          	j	80008f92 <tinst_tests_pf+0x1170>
    8000afa6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afa8:	0016f713          	andi	a4,a3,1
    8000afac:	c319                	beqz	a4,8000afb2 <tinst_tests_pf+0x3190>
    8000afae:	ef1fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000afb2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000afb6:	460d                	li	a2,3
    8000afb8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000afbc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000afbe:	00c59763          	bne	a1,a2,8000afcc <tinst_tests_pf+0x31aa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000afc2:	0026d683          	lhu	a3,2(a3)
    8000afc6:	0106969b          	slliw	a3,a3,0x10
    8000afca:	8f55                	or	a4,a4,a3
    8000afcc:	1ffe16b7          	lui	a3,0x1ffe1
    8000afd0:	068e                	slli	a3,a3,0x3
    8000afd2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000afd4:	8f75                	and	a4,a4,a3
    8000afd6:	40f70933          	sub	s2,a4,a5
    8000afda:	00193913          	seqz	s2,s2
    8000afde:	fb5fd06f          	j	80008f92 <tinst_tests_pf+0x1170>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a spf",
    8000afe2:	701c                	ld	a5,32(s0)
    8000afe4:	e399                	bnez	a5,8000afea <tinst_tests_pf+0x31c8>
    8000afe6:	84cfe06f          	j	80009032 <tinst_tests_pf+0x1210>
    8000afea:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000afec:	0016f713          	andi	a4,a3,1
    8000aff0:	c319                	beqz	a4,8000aff6 <tinst_tests_pf+0x31d4>
    8000aff2:	eadfe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000aff6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000affa:	460d                	li	a2,3
    8000affc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b000:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b002:	00c59763          	bne	a1,a2,8000b010 <tinst_tests_pf+0x31ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b006:	0026d683          	lhu	a3,2(a3)
    8000b00a:	0106969b          	slliw	a3,a3,0x10
    8000b00e:	8f55                	or	a4,a4,a3
    8000b010:	1ffe16b7          	lui	a3,0x1ffe1
    8000b014:	068e                	slli	a3,a3,0x3
    8000b016:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b018:	8f75                	and	a4,a4,a3
    8000b01a:	40f70933          	sub	s2,a4,a5
    8000b01e:	00193913          	seqz	s2,s2
    8000b022:	810fe06f          	j	80009032 <tinst_tests_pf+0x1210>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a spf",
    8000b026:	701c                	ld	a5,32(s0)
    8000b028:	e399                	bnez	a5,8000b02e <tinst_tests_pf+0x320c>
    8000b02a:	8a8fe06f          	j	800090d2 <tinst_tests_pf+0x12b0>
    8000b02e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b030:	0016f713          	andi	a4,a3,1
    8000b034:	c319                	beqz	a4,8000b03a <tinst_tests_pf+0x3218>
    8000b036:	e69fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b03a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b03e:	460d                	li	a2,3
    8000b040:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b044:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b046:	00c59763          	bne	a1,a2,8000b054 <tinst_tests_pf+0x3232>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b04a:	0026d683          	lhu	a3,2(a3)
    8000b04e:	0106969b          	slliw	a3,a3,0x10
    8000b052:	8f55                	or	a4,a4,a3
    8000b054:	1ffe16b7          	lui	a3,0x1ffe1
    8000b058:	068e                	slli	a3,a3,0x3
    8000b05a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b05c:	8f75                	and	a4,a4,a3
    8000b05e:	40f70933          	sub	s2,a4,a5
    8000b062:	00193913          	seqz	s2,s2
    8000b066:	86cfe06f          	j	800090d2 <tinst_tests_pf+0x12b0>
    8000b06a:	701c                	ld	a5,32(s0)
    8000b06c:	e399                	bnez	a5,8000b072 <tinst_tests_pf+0x3250>
    8000b06e:	842fe06f          	j	800090b0 <tinst_tests_pf+0x128e>
    8000b072:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b074:	0016f713          	andi	a4,a3,1
    8000b078:	c319                	beqz	a4,8000b07e <tinst_tests_pf+0x325c>
    8000b07a:	e25fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b07e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b082:	460d                	li	a2,3
    8000b084:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b088:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b08a:	00c59763          	bne	a1,a2,8000b098 <tinst_tests_pf+0x3276>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b08e:	0026d683          	lhu	a3,2(a3)
    8000b092:	0106969b          	slliw	a3,a3,0x10
    8000b096:	8f55                	or	a4,a4,a3
    8000b098:	1ffe16b7          	lui	a3,0x1ffe1
    8000b09c:	068e                	slli	a3,a3,0x3
    8000b09e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0a0:	8f75                	and	a4,a4,a3
    8000b0a2:	00e78463          	beq	a5,a4,8000b0aa <tinst_tests_pf+0x3288>
    8000b0a6:	ff7fd06f          	j	8000909c <tinst_tests_pf+0x127a>
    8000b0aa:	806fe06f          	j	800090b0 <tinst_tests_pf+0x128e>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a spf",
    8000b0ae:	701c                	ld	a5,32(s0)
    8000b0b0:	e399                	bnez	a5,8000b0b6 <tinst_tests_pf+0x3294>
    8000b0b2:	89efe06f          	j	80009150 <tinst_tests_pf+0x132e>
    8000b0b6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0b8:	0016f713          	andi	a4,a3,1
    8000b0bc:	c319                	beqz	a4,8000b0c2 <tinst_tests_pf+0x32a0>
    8000b0be:	de1fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b0c2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b0c6:	460d                	li	a2,3
    8000b0c8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b0cc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b0ce:	00c59763          	bne	a1,a2,8000b0dc <tinst_tests_pf+0x32ba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b0d2:	0026d683          	lhu	a3,2(a3)
    8000b0d6:	0106969b          	slliw	a3,a3,0x10
    8000b0da:	8f55                	or	a4,a4,a3
    8000b0dc:	1ffe16b7          	lui	a3,0x1ffe1
    8000b0e0:	068e                	slli	a3,a3,0x3
    8000b0e2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b0e4:	8f75                	and	a4,a4,a3
    8000b0e6:	00e78463          	beq	a5,a4,8000b0ee <tinst_tests_pf+0x32cc>
    8000b0ea:	852fe06f          	j	8000913c <tinst_tests_pf+0x131a>
    8000b0ee:	862fe06f          	j	80009150 <tinst_tests_pf+0x132e>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a spf",
    8000b0f2:	701c                	ld	a5,32(s0)
    8000b0f4:	e399                	bnez	a5,8000b0fa <tinst_tests_pf+0x32d8>
    8000b0f6:	8f2fe06f          	j	800091e8 <tinst_tests_pf+0x13c6>
    8000b0fa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b0fc:	0016f713          	andi	a4,a3,1
    8000b100:	c319                	beqz	a4,8000b106 <tinst_tests_pf+0x32e4>
    8000b102:	d9dfe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b106:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b10a:	460d                	li	a2,3
    8000b10c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b110:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b112:	00c59763          	bne	a1,a2,8000b120 <tinst_tests_pf+0x32fe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b116:	0026d683          	lhu	a3,2(a3)
    8000b11a:	0106969b          	slliw	a3,a3,0x10
    8000b11e:	8f55                	or	a4,a4,a3
    8000b120:	1ffe16b7          	lui	a3,0x1ffe1
    8000b124:	068e                	slli	a3,a3,0x3
    8000b126:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b128:	8f75                	and	a4,a4,a3
    8000b12a:	00e78463          	beq	a5,a4,8000b132 <tinst_tests_pf+0x3310>
    8000b12e:	8a6fe06f          	j	800091d4 <tinst_tests_pf+0x13b2>
    8000b132:	8b6fe06f          	j	800091e8 <tinst_tests_pf+0x13c6>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a spf",
    8000b136:	701c                	ld	a5,32(s0)
    8000b138:	e399                	bnez	a5,8000b13e <tinst_tests_pf+0x331c>
    8000b13a:	946fe06f          	j	80009280 <tinst_tests_pf+0x145e>
    8000b13e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b140:	0016f713          	andi	a4,a3,1
    8000b144:	c319                	beqz	a4,8000b14a <tinst_tests_pf+0x3328>
    8000b146:	d59fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b14a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b14e:	460d                	li	a2,3
    8000b150:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b154:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b156:	00c59763          	bne	a1,a2,8000b164 <tinst_tests_pf+0x3342>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b15a:	0026d683          	lhu	a3,2(a3)
    8000b15e:	0106969b          	slliw	a3,a3,0x10
    8000b162:	8f55                	or	a4,a4,a3
    8000b164:	1ffe16b7          	lui	a3,0x1ffe1
    8000b168:	068e                	slli	a3,a3,0x3
    8000b16a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b16c:	8f75                	and	a4,a4,a3
    8000b16e:	00e78463          	beq	a5,a4,8000b176 <tinst_tests_pf+0x3354>
    8000b172:	8fafe06f          	j	8000926c <tinst_tests_pf+0x144a>
    8000b176:	90afe06f          	j	80009280 <tinst_tests_pf+0x145e>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a spf",
    8000b17a:	701c                	ld	a5,32(s0)
    8000b17c:	e399                	bnez	a5,8000b182 <tinst_tests_pf+0x3360>
    8000b17e:	99afe06f          	j	80009318 <tinst_tests_pf+0x14f6>
    8000b182:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b184:	0016f713          	andi	a4,a3,1
    8000b188:	c319                	beqz	a4,8000b18e <tinst_tests_pf+0x336c>
    8000b18a:	d15fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b18e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b192:	460d                	li	a2,3
    8000b194:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b198:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b19a:	00c59763          	bne	a1,a2,8000b1a8 <tinst_tests_pf+0x3386>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b19e:	0026d683          	lhu	a3,2(a3)
    8000b1a2:	0106969b          	slliw	a3,a3,0x10
    8000b1a6:	8f55                	or	a4,a4,a3
    8000b1a8:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1ac:	068e                	slli	a3,a3,0x3
    8000b1ae:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1b0:	8f75                	and	a4,a4,a3
    8000b1b2:	00e78463          	beq	a5,a4,8000b1ba <tinst_tests_pf+0x3398>
    8000b1b6:	94efe06f          	j	80009304 <tinst_tests_pf+0x14e2>
    8000b1ba:	95efe06f          	j	80009318 <tinst_tests_pf+0x14f6>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a spf",
    8000b1be:	701c                	ld	a5,32(s0)
    8000b1c0:	e399                	bnez	a5,8000b1c6 <tinst_tests_pf+0x33a4>
    8000b1c2:	9eefe06f          	j	800093b0 <tinst_tests_pf+0x158e>
    8000b1c6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000b1c8:	0016f713          	andi	a4,a3,1
    8000b1cc:	c319                	beqz	a4,8000b1d2 <tinst_tests_pf+0x33b0>
    8000b1ce:	cd1fe06f          	j	80009e9e <tinst_tests_pf+0x207c>
    instruction = *((uint16_t*)addr);
    8000b1d2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000b1d6:	460d                	li	a2,3
    8000b1d8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000b1dc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000b1de:	00c59763          	bne	a1,a2,8000b1ec <tinst_tests_pf+0x33ca>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000b1e2:	0026d683          	lhu	a3,2(a3)
    8000b1e6:	0106969b          	slliw	a3,a3,0x10
    8000b1ea:	8f55                	or	a4,a4,a3
    8000b1ec:	1ffe16b7          	lui	a3,0x1ffe1
    8000b1f0:	068e                	slli	a3,a3,0x3
    8000b1f2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000b1f4:	8f75                	and	a4,a4,a3
    8000b1f6:	00e78463          	beq	a5,a4,8000b1fe <tinst_tests_pf+0x33dc>
    8000b1fa:	9a2fe06f          	j	8000939c <tinst_tests_pf+0x157a>
    8000b1fe:	9b2fe06f          	j	800093b0 <tinst_tests_pf+0x158e>

000000008000b202 <tinst_tests_gpf>:

bool tinst_tests_gpf(){
    8000b202:	7179                	addi	sp,sp,-48
    
    TEST_START();
    8000b204:	00020597          	auipc	a1,0x20
    8000b208:	6bc58593          	addi	a1,a1,1724 # 8002b8c0 <__func__.0>
    8000b20c:	00022517          	auipc	a0,0x22
    8000b210:	0f450513          	addi	a0,a0,244 # 8002d300 <__func__.0+0x2e0>
bool tinst_tests_gpf(){
    8000b214:	f406                	sd	ra,40(sp)
    8000b216:	f022                	sd	s0,32(sp)
    8000b218:	ec26                	sd	s1,24(sp)
    8000b21a:	e84a                	sd	s2,16(sp)
    8000b21c:	e44e                	sd	s3,8(sp)
    TEST_START();
    8000b21e:	39d1f0ef          	jal	8002adba <printf>
    8000b222:	4529                	li	a0,10
    8000b224:	0851e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8000b228:	450d                	li	a0,3
    8000b22a:	c45f50ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8000b22e:	bb2f50ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000b232:	f4af50ef          	jal	8000097c <hpt_init>
    vspt_init();
    8000b236:	cecf50ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_VS);   
    8000b23a:	4509                	li	a0,2
    8000b23c:	c33f50ef          	jal	80000e6e <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GI);      
    printf("%llx\n",vaddr_f);
    8000b240:	001005b7          	lui	a1,0x100
    8000b244:	06558593          	addi	a1,a1,101 # 100065 <STACK_SIZE+0x65>
    8000b248:	05b2                	slli	a1,a1,0xc
    8000b24a:	00028517          	auipc	a0,0x28
    8000b24e:	6de50513          	addi	a0,a0,1758 # 80033928 <__func__.0+0x6908>
    8000b252:	3691f0ef          	jal	8002adba <printf>
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000b256:	b1df50ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000b25a:	001007b7          	lui	a5,0x100
    8000b25e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b262:	07b2                	slli	a5,a5,0xc
    8000b264:	00078783          	lb	a5,0(a5)
    // uint8_t dest8[4];
    // vle8_v(dest8, (uintptr_t)src8);


    value = lb(vaddr_f);    
    printf("%llx\n",excpt.tinst);
    8000b268:	00046417          	auipc	s0,0x46
    8000b26c:	da840413          	addi	s0,s0,-600 # 80051010 <excpt>
    8000b270:	700c                	ld	a1,32(s0)
    8000b272:	00028517          	auipc	a0,0x28
    8000b276:	6b650513          	addi	a0,a0,1718 # 80033928 <__func__.0+0x6908>
    8000b27a:	3411f0ef          	jal	8002adba <printf>
    printf("%llx\n",excpt.triggered);
    8000b27e:	00046597          	auipc	a1,0x46
    8000b282:	d935c583          	lbu	a1,-621(a1) # 80051011 <excpt+0x1>
    8000b286:	00028517          	auipc	a0,0x28
    8000b28a:	6a250513          	addi	a0,a0,1698 # 80033928 <__func__.0+0x6908>
    8000b28e:	32d1f0ef          	jal	8002adba <printf>
    printf("%llx\n",excpt.cause);
    8000b292:	640c                	ld	a1,8(s0)
    8000b294:	00028517          	auipc	a0,0x28
    8000b298:	69450513          	addi	a0,a0,1684 # 80033928 <__func__.0+0x6908>
    8000b29c:	31f1f0ef          	jal	8002adba <printf>
    printf("%llx\n",excpt.tval2);
    8000b2a0:	740c                	ld	a1,40(s0)
    8000b2a2:	00028517          	auipc	a0,0x28
    8000b2a6:	68650513          	addi	a0,a0,1670 # 80033928 <__func__.0+0x6908>
    8000b2aa:	3111f0ef          	jal	8002adba <printf>
    printf("%llx\n",excpt.tval);
    8000b2ae:	6c0c                	ld	a1,24(s0)
    8000b2b0:	00028517          	auipc	a0,0x28
    8000b2b4:	67850513          	addi	a0,a0,1656 # 80033928 <__func__.0+0x6908>
    8000b2b8:	3031f0ef          	jal	8002adba <printf>

    TEST_ASSERT("correct tinst when executing a lb which results in a lgpf",         
    8000b2bc:	08200593          	li	a1,130
    8000b2c0:	00024617          	auipc	a2,0x24
    8000b2c4:	29860613          	addi	a2,a2,664 # 8002f558 <__func__.0+0x2538>
    8000b2c8:	00022517          	auipc	a0,0x22
    8000b2cc:	05050513          	addi	a0,a0,80 # 8002d318 <__func__.0+0x2f8>
    8000b2d0:	2eb1f0ef          	jal	8002adba <printf>
    8000b2d4:	00046797          	auipc	a5,0x46
    8000b2d8:	d3d7c783          	lbu	a5,-707(a5) # 80051011 <excpt+0x1>
    8000b2dc:	00022597          	auipc	a1,0x22
    8000b2e0:	01458593          	addi	a1,a1,20 # 8002d2f0 <__func__.0+0x2d0>
    8000b2e4:	cf89                	beqz	a5,8000b2fe <tinst_tests_gpf+0xfc>
    8000b2e6:	6418                	ld	a4,8(s0)
    8000b2e8:	47d5                	li	a5,21
    8000b2ea:	00022597          	auipc	a1,0x22
    8000b2ee:	ff658593          	addi	a1,a1,-10 # 8002d2e0 <__func__.0+0x2c0>
    8000b2f2:	00f70663          	beq	a4,a5,8000b2fe <tinst_tests_gpf+0xfc>
    8000b2f6:	00022597          	auipc	a1,0x22
    8000b2fa:	ffa58593          	addi	a1,a1,-6 # 8002d2f0 <__func__.0+0x2d0>
    8000b2fe:	00022517          	auipc	a0,0x22
    8000b302:	03250513          	addi	a0,a0,50 # 8002d330 <__func__.0+0x310>
    8000b306:	2b51f0ef          	jal	8002adba <printf>
    8000b30a:	00046797          	auipc	a5,0x46
    8000b30e:	d077c783          	lbu	a5,-761(a5) # 80051011 <excpt+0x1>
    8000b312:	c789                	beqz	a5,8000b31c <tinst_tests_gpf+0x11a>
    8000b314:	6418                	ld	a4,8(s0)
    8000b316:	47d5                	li	a5,21
    8000b318:	00f70c63          	beq	a4,a5,8000b330 <tinst_tests_gpf+0x12e>
    8000b31c:	00022517          	auipc	a0,0x22
    8000b320:	01c50513          	addi	a0,a0,28 # 8002d338 <__func__.0+0x318>
    8000b324:	2971f0ef          	jal	8002adba <printf>
    8000b328:	02900513          	li	a0,41
    8000b32c:	77c1e0ef          	jal	80029aa8 <putchar>
    8000b330:	4529                	li	a0,10
    8000b332:	7761e0ef          	jal	80029aa8 <putchar>
    8000b336:	00046797          	auipc	a5,0x46
    8000b33a:	cdb7c783          	lbu	a5,-805(a5) # 80051011 <excpt+0x1>
    8000b33e:	4481                	li	s1,0
    8000b340:	c789                	beqz	a5,8000b34a <tinst_tests_gpf+0x148>
    8000b342:	6404                	ld	s1,8(s0)
    8000b344:	14ad                	addi	s1,s1,-21
    8000b346:	0014b493          	seqz	s1,s1
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF 
    );

    TEST_SETUP_EXCEPT();
    8000b34a:	a29f50ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    8000b34e:	001007b7          	lui	a5,0x100
    8000b352:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b356:	07b2                	slli	a5,a5,0xc
    8000b358:	0007c783          	lbu	a5,0(a5)
    value = lbu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000b35c:	00024617          	auipc	a2,0x24
    8000b360:	23c60613          	addi	a2,a2,572 # 8002f598 <__func__.0+0x2578>
    8000b364:	08200593          	li	a1,130
    8000b368:	00022517          	auipc	a0,0x22
    8000b36c:	fb050513          	addi	a0,a0,-80 # 8002d318 <__func__.0+0x2f8>
    8000b370:	24b1f0ef          	jal	8002adba <printf>
    8000b374:	00046797          	auipc	a5,0x46
    8000b378:	c9d7c783          	lbu	a5,-867(a5) # 80051011 <excpt+0x1>
    8000b37c:	e399                	bnez	a5,8000b382 <tinst_tests_gpf+0x180>
    8000b37e:	59a0106f          	j	8000c918 <tinst_tests_gpf+0x1716>
    8000b382:	6418                	ld	a4,8(s0)
    8000b384:	47d5                	li	a5,21
    8000b386:	00022597          	auipc	a1,0x22
    8000b38a:	f6a58593          	addi	a1,a1,-150 # 8002d2f0 <__func__.0+0x2d0>
    8000b38e:	00f71463          	bne	a4,a5,8000b396 <tinst_tests_gpf+0x194>
    8000b392:	53e0106f          	j	8000c8d0 <tinst_tests_gpf+0x16ce>
    8000b396:	00022517          	auipc	a0,0x22
    8000b39a:	f9a50513          	addi	a0,a0,-102 # 8002d330 <__func__.0+0x310>
    8000b39e:	21d1f0ef          	jal	8002adba <printf>
    8000b3a2:	00046797          	auipc	a5,0x46
    8000b3a6:	c6f7c783          	lbu	a5,-913(a5) # 80051011 <excpt+0x1>
    8000b3aa:	c799                	beqz	a5,8000b3b8 <tinst_tests_gpf+0x1b6>
    8000b3ac:	6418                	ld	a4,8(s0)
    8000b3ae:	47d5                	li	a5,21
    8000b3b0:	00f71463          	bne	a4,a5,8000b3b8 <tinst_tests_gpf+0x1b6>
    8000b3b4:	5d00106f          	j	8000c984 <tinst_tests_gpf+0x1782>
    8000b3b8:	00022517          	auipc	a0,0x22
    8000b3bc:	f8050513          	addi	a0,a0,-128 # 8002d338 <__func__.0+0x318>
    8000b3c0:	1fb1f0ef          	jal	8002adba <printf>
    8000b3c4:	02900513          	li	a0,41
    8000b3c8:	6e01e0ef          	jal	80029aa8 <putchar>
    8000b3cc:	4529                	li	a0,10
    8000b3ce:	6da1e0ef          	jal	80029aa8 <putchar>
    8000b3d2:	cc89                	beqz	s1,8000b3ec <tinst_tests_gpf+0x1ea>
    8000b3d4:	00046797          	auipc	a5,0x46
    8000b3d8:	c3d7c783          	lbu	a5,-963(a5) # 80051011 <excpt+0x1>
    8000b3dc:	c799                	beqz	a5,8000b3ea <tinst_tests_gpf+0x1e8>
    8000b3de:	6418                	ld	a4,8(s0)
    8000b3e0:	47d5                	li	a5,21
    8000b3e2:	00f71463          	bne	a4,a5,8000b3ea <tinst_tests_gpf+0x1e8>
    8000b3e6:	71d0106f          	j	8000d302 <tinst_tests_gpf+0x2100>
    8000b3ea:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b3ec:	987f50ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000b3f0:	001007b7          	lui	a5,0x100
    8000b3f4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b3f8:	07b2                	slli	a5,a5,0xc
    8000b3fa:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000b3fe:	00024617          	auipc	a2,0x24
    8000b402:	1da60613          	addi	a2,a2,474 # 8002f5d8 <__func__.0+0x25b8>
    8000b406:	08200593          	li	a1,130
    8000b40a:	00022517          	auipc	a0,0x22
    8000b40e:	f0e50513          	addi	a0,a0,-242 # 8002d318 <__func__.0+0x2f8>
    8000b412:	1a91f0ef          	jal	8002adba <printf>
    8000b416:	00046797          	auipc	a5,0x46
    8000b41a:	bfb7c783          	lbu	a5,-1029(a5) # 80051011 <excpt+0x1>
    8000b41e:	c399                	beqz	a5,8000b424 <tinst_tests_gpf+0x222>
    8000b420:	5040106f          	j	8000c924 <tinst_tests_gpf+0x1722>
    8000b424:	00022597          	auipc	a1,0x22
    8000b428:	ecc58593          	addi	a1,a1,-308 # 8002d2f0 <__func__.0+0x2d0>
    8000b42c:	00022517          	auipc	a0,0x22
    8000b430:	f0450513          	addi	a0,a0,-252 # 8002d330 <__func__.0+0x310>
    8000b434:	1871f0ef          	jal	8002adba <printf>
    8000b438:	00046797          	auipc	a5,0x46
    8000b43c:	bd97c783          	lbu	a5,-1063(a5) # 80051011 <excpt+0x1>
    8000b440:	c799                	beqz	a5,8000b44e <tinst_tests_gpf+0x24c>
    8000b442:	6418                	ld	a4,8(s0)
    8000b444:	47d5                	li	a5,21
    8000b446:	00f71463          	bne	a4,a5,8000b44e <tinst_tests_gpf+0x24c>
    8000b44a:	1970106f          	j	8000cde0 <tinst_tests_gpf+0x1bde>
    8000b44e:	00022517          	auipc	a0,0x22
    8000b452:	eea50513          	addi	a0,a0,-278 # 8002d338 <__func__.0+0x318>
    8000b456:	1651f0ef          	jal	8002adba <printf>
    8000b45a:	02900513          	li	a0,41
    8000b45e:	64a1e0ef          	jal	80029aa8 <putchar>
    8000b462:	4529                	li	a0,10
    8000b464:	6441e0ef          	jal	80029aa8 <putchar>
    8000b468:	cc89                	beqz	s1,8000b482 <tinst_tests_gpf+0x280>
    8000b46a:	00046797          	auipc	a5,0x46
    8000b46e:	ba77c783          	lbu	a5,-1113(a5) # 80051011 <excpt+0x1>
    8000b472:	c799                	beqz	a5,8000b480 <tinst_tests_gpf+0x27e>
    8000b474:	6418                	ld	a4,8(s0)
    8000b476:	47d5                	li	a5,21
    8000b478:	00f71463          	bne	a4,a5,8000b480 <tinst_tests_gpf+0x27e>
    8000b47c:	6c10106f          	j	8000d33c <tinst_tests_gpf+0x213a>
    8000b480:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b482:	8f1f50ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lhu, "lhu", uint16_t); 
    8000b486:	001007b7          	lui	a5,0x100
    8000b48a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b48e:	07b2                	slli	a5,a5,0xc
    8000b490:	0007d783          	lhu	a5,0(a5)
    value = lhu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000b494:	00024617          	auipc	a2,0x24
    8000b498:	18460613          	addi	a2,a2,388 # 8002f618 <__func__.0+0x25f8>
    8000b49c:	08200593          	li	a1,130
    8000b4a0:	00022517          	auipc	a0,0x22
    8000b4a4:	e7850513          	addi	a0,a0,-392 # 8002d318 <__func__.0+0x2f8>
    8000b4a8:	1131f0ef          	jal	8002adba <printf>
    8000b4ac:	00046797          	auipc	a5,0x46
    8000b4b0:	b657c783          	lbu	a5,-1179(a5) # 80051011 <excpt+0x1>
    8000b4b4:	e399                	bnez	a5,8000b4ba <tinst_tests_gpf+0x2b8>
    8000b4b6:	5520106f          	j	8000ca08 <tinst_tests_gpf+0x1806>
    8000b4ba:	6418                	ld	a4,8(s0)
    8000b4bc:	47d5                	li	a5,21
    8000b4be:	00022597          	auipc	a1,0x22
    8000b4c2:	e3258593          	addi	a1,a1,-462 # 8002d2f0 <__func__.0+0x2d0>
    8000b4c6:	00f71463          	bne	a4,a5,8000b4ce <tinst_tests_gpf+0x2cc>
    8000b4ca:	4f60106f          	j	8000c9c0 <tinst_tests_gpf+0x17be>
    8000b4ce:	00022517          	auipc	a0,0x22
    8000b4d2:	e6250513          	addi	a0,a0,-414 # 8002d330 <__func__.0+0x310>
    8000b4d6:	0e51f0ef          	jal	8002adba <printf>
    8000b4da:	00046797          	auipc	a5,0x46
    8000b4de:	b377c783          	lbu	a5,-1225(a5) # 80051011 <excpt+0x1>
    8000b4e2:	c799                	beqz	a5,8000b4f0 <tinst_tests_gpf+0x2ee>
    8000b4e4:	6418                	ld	a4,8(s0)
    8000b4e6:	47d5                	li	a5,21
    8000b4e8:	00f71463          	bne	a4,a5,8000b4f0 <tinst_tests_gpf+0x2ee>
    8000b4ec:	1310106f          	j	8000ce1c <tinst_tests_gpf+0x1c1a>
    8000b4f0:	00022517          	auipc	a0,0x22
    8000b4f4:	e4850513          	addi	a0,a0,-440 # 8002d338 <__func__.0+0x318>
    8000b4f8:	0c31f0ef          	jal	8002adba <printf>
    8000b4fc:	02900513          	li	a0,41
    8000b500:	5a81e0ef          	jal	80029aa8 <putchar>
    8000b504:	4529                	li	a0,10
    8000b506:	5a21e0ef          	jal	80029aa8 <putchar>
    8000b50a:	cc89                	beqz	s1,8000b524 <tinst_tests_gpf+0x322>
    8000b50c:	00046797          	auipc	a5,0x46
    8000b510:	b057c783          	lbu	a5,-1275(a5) # 80051011 <excpt+0x1>
    8000b514:	c799                	beqz	a5,8000b522 <tinst_tests_gpf+0x320>
    8000b516:	6418                	ld	a4,8(s0)
    8000b518:	47d5                	li	a5,21
    8000b51a:	00f71463          	bne	a4,a5,8000b522 <tinst_tests_gpf+0x320>
    8000b51e:	6590106f          	j	8000d376 <tinst_tests_gpf+0x2174>
    8000b522:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b524:	84ff50ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000b528:	001007b7          	lui	a5,0x100
    8000b52c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b530:	07b2                	slli	a5,a5,0xc
    8000b532:	0007a783          	lw	a5,0(a5)
    lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000b536:	00024617          	auipc	a2,0x24
    8000b53a:	12260613          	addi	a2,a2,290 # 8002f658 <__func__.0+0x2638>
    8000b53e:	08200593          	li	a1,130
    8000b542:	00022517          	auipc	a0,0x22
    8000b546:	dd650513          	addi	a0,a0,-554 # 8002d318 <__func__.0+0x2f8>
    8000b54a:	0711f0ef          	jal	8002adba <printf>
    8000b54e:	00046797          	auipc	a5,0x46
    8000b552:	ac37c783          	lbu	a5,-1341(a5) # 80051011 <excpt+0x1>
    8000b556:	e399                	bnez	a5,8000b55c <tinst_tests_gpf+0x35a>
    8000b558:	5040106f          	j	8000ca5c <tinst_tests_gpf+0x185a>
    8000b55c:	6418                	ld	a4,8(s0)
    8000b55e:	47d5                	li	a5,21
    8000b560:	00022597          	auipc	a1,0x22
    8000b564:	d9058593          	addi	a1,a1,-624 # 8002d2f0 <__func__.0+0x2d0>
    8000b568:	00f71463          	bne	a4,a5,8000b570 <tinst_tests_gpf+0x36e>
    8000b56c:	4a80106f          	j	8000ca14 <tinst_tests_gpf+0x1812>
    8000b570:	00022517          	auipc	a0,0x22
    8000b574:	dc050513          	addi	a0,a0,-576 # 8002d330 <__func__.0+0x310>
    8000b578:	0431f0ef          	jal	8002adba <printf>
    8000b57c:	00046797          	auipc	a5,0x46
    8000b580:	a957c783          	lbu	a5,-1387(a5) # 80051011 <excpt+0x1>
    8000b584:	c799                	beqz	a5,8000b592 <tinst_tests_gpf+0x390>
    8000b586:	6418                	ld	a4,8(s0)
    8000b588:	47d5                	li	a5,21
    8000b58a:	00f71463          	bne	a4,a5,8000b592 <tinst_tests_gpf+0x390>
    8000b58e:	65d0106f          	j	8000d3ea <tinst_tests_gpf+0x21e8>
    8000b592:	00022517          	auipc	a0,0x22
    8000b596:	da650513          	addi	a0,a0,-602 # 8002d338 <__func__.0+0x318>
    8000b59a:	0211f0ef          	jal	8002adba <printf>
    8000b59e:	02900513          	li	a0,41
    8000b5a2:	5061e0ef          	jal	80029aa8 <putchar>
    8000b5a6:	4529                	li	a0,10
    8000b5a8:	5001e0ef          	jal	80029aa8 <putchar>
    8000b5ac:	cc89                	beqz	s1,8000b5c6 <tinst_tests_gpf+0x3c4>
    8000b5ae:	00046797          	auipc	a5,0x46
    8000b5b2:	a637c783          	lbu	a5,-1437(a5) # 80051011 <excpt+0x1>
    8000b5b6:	c799                	beqz	a5,8000b5c4 <tinst_tests_gpf+0x3c2>
    8000b5b8:	6418                	ld	a4,8(s0)
    8000b5ba:	47d5                	li	a5,21
    8000b5bc:	00f71463          	bne	a4,a5,8000b5c4 <tinst_tests_gpf+0x3c2>
    8000b5c0:	5f10106f          	j	8000d3b0 <tinst_tests_gpf+0x21ae>
    8000b5c4:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b5c6:	facf50ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lwu, "lwu", uint32_t);
    8000b5ca:	001007b7          	lui	a5,0x100
    8000b5ce:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b5d2:	07b2                	slli	a5,a5,0xc
    8000b5d4:	0007e783          	lwu	a5,0(a5)
    value = lwu(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000b5d8:	00024617          	auipc	a2,0x24
    8000b5dc:	0c060613          	addi	a2,a2,192 # 8002f698 <__func__.0+0x2678>
    8000b5e0:	08200593          	li	a1,130
    8000b5e4:	00022517          	auipc	a0,0x22
    8000b5e8:	d3450513          	addi	a0,a0,-716 # 8002d318 <__func__.0+0x2f8>
    8000b5ec:	7ce1f0ef          	jal	8002adba <printf>
    8000b5f0:	00046797          	auipc	a5,0x46
    8000b5f4:	a217c783          	lbu	a5,-1503(a5) # 80051011 <excpt+0x1>
    8000b5f8:	e399                	bnez	a5,8000b5fe <tinst_tests_gpf+0x3fc>
    8000b5fa:	4b60106f          	j	8000cab0 <tinst_tests_gpf+0x18ae>
    8000b5fe:	6418                	ld	a4,8(s0)
    8000b600:	47d5                	li	a5,21
    8000b602:	00022597          	auipc	a1,0x22
    8000b606:	cee58593          	addi	a1,a1,-786 # 8002d2f0 <__func__.0+0x2d0>
    8000b60a:	00f71463          	bne	a4,a5,8000b612 <tinst_tests_gpf+0x410>
    8000b60e:	45a0106f          	j	8000ca68 <tinst_tests_gpf+0x1866>
    8000b612:	00022517          	auipc	a0,0x22
    8000b616:	d1e50513          	addi	a0,a0,-738 # 8002d330 <__func__.0+0x310>
    8000b61a:	7a01f0ef          	jal	8002adba <printf>
    8000b61e:	00046797          	auipc	a5,0x46
    8000b622:	9f37c783          	lbu	a5,-1549(a5) # 80051011 <excpt+0x1>
    8000b626:	c799                	beqz	a5,8000b634 <tinst_tests_gpf+0x432>
    8000b628:	6418                	ld	a4,8(s0)
    8000b62a:	47d5                	li	a5,21
    8000b62c:	00f71463          	bne	a4,a5,8000b634 <tinst_tests_gpf+0x432>
    8000b630:	65b0106f          	j	8000d48a <tinst_tests_gpf+0x2288>
    8000b634:	00022517          	auipc	a0,0x22
    8000b638:	d0450513          	addi	a0,a0,-764 # 8002d338 <__func__.0+0x318>
    8000b63c:	77e1f0ef          	jal	8002adba <printf>
    8000b640:	02900513          	li	a0,41
    8000b644:	4641e0ef          	jal	80029aa8 <putchar>
    8000b648:	4529                	li	a0,10
    8000b64a:	45e1e0ef          	jal	80029aa8 <putchar>
    8000b64e:	c889                	beqz	s1,8000b660 <tinst_tests_gpf+0x45e>
    8000b650:	00046797          	auipc	a5,0x46
    8000b654:	9c17c783          	lbu	a5,-1599(a5) # 80051011 <excpt+0x1>
    8000b658:	c399                	beqz	a5,8000b65e <tinst_tests_gpf+0x45c>
    8000b65a:	7fe0106f          	j	8000ce58 <tinst_tests_gpf+0x1c56>
    8000b65e:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000b660:	f12f50ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000b664:	001007b7          	lui	a5,0x100
    8000b668:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b66c:	07b2                	slli	a5,a5,0xc
    8000b66e:	0007b783          	ld	a5,0(a5)
    value = ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000b672:	00024617          	auipc	a2,0x24
    8000b676:	06660613          	addi	a2,a2,102 # 8002f6d8 <__func__.0+0x26b8>
    8000b67a:	08200593          	li	a1,130
    8000b67e:	00022517          	auipc	a0,0x22
    8000b682:	c9a50513          	addi	a0,a0,-870 # 8002d318 <__func__.0+0x2f8>
    8000b686:	7341f0ef          	jal	8002adba <printf>
    8000b68a:	00046797          	auipc	a5,0x46
    8000b68e:	9877c783          	lbu	a5,-1657(a5) # 80051011 <excpt+0x1>
    8000b692:	e399                	bnez	a5,8000b698 <tinst_tests_gpf+0x496>
    8000b694:	4700106f          	j	8000cb04 <tinst_tests_gpf+0x1902>
    8000b698:	6418                	ld	a4,8(s0)
    8000b69a:	47d5                	li	a5,21
    8000b69c:	00022597          	auipc	a1,0x22
    8000b6a0:	c5458593          	addi	a1,a1,-940 # 8002d2f0 <__func__.0+0x2d0>
    8000b6a4:	00f71463          	bne	a4,a5,8000b6ac <tinst_tests_gpf+0x4aa>
    8000b6a8:	4140106f          	j	8000cabc <tinst_tests_gpf+0x18ba>
    8000b6ac:	00022517          	auipc	a0,0x22
    8000b6b0:	c8450513          	addi	a0,a0,-892 # 8002d330 <__func__.0+0x310>
    8000b6b4:	7061f0ef          	jal	8002adba <printf>
    8000b6b8:	00046797          	auipc	a5,0x46
    8000b6bc:	9597c783          	lbu	a5,-1703(a5) # 80051011 <excpt+0x1>
    8000b6c0:	c799                	beqz	a5,8000b6ce <tinst_tests_gpf+0x4cc>
    8000b6c2:	6418                	ld	a4,8(s0)
    8000b6c4:	47d5                	li	a5,21
    8000b6c6:	00f71463          	bne	a4,a5,8000b6ce <tinst_tests_gpf+0x4cc>
    8000b6ca:	6530106f          	j	8000d51c <tinst_tests_gpf+0x231a>
    8000b6ce:	00022517          	auipc	a0,0x22
    8000b6d2:	c6a50513          	addi	a0,a0,-918 # 8002d338 <__func__.0+0x318>
    8000b6d6:	6e41f0ef          	jal	8002adba <printf>
    8000b6da:	02900513          	li	a0,41
    8000b6de:	3ca1e0ef          	jal	80029aa8 <putchar>
    8000b6e2:	4529                	li	a0,10
    8000b6e4:	3c41e0ef          	jal	80029aa8 <putchar>
    8000b6e8:	c889                	beqz	s1,8000b6fa <tinst_tests_gpf+0x4f8>
    8000b6ea:	00046797          	auipc	a5,0x46
    8000b6ee:	9277c783          	lbu	a5,-1753(a5) # 80051011 <excpt+0x1>
    8000b6f2:	c399                	beqz	a5,8000b6f8 <tinst_tests_gpf+0x4f6>
    8000b6f4:	0130106f          	j	8000cf06 <tinst_tests_gpf+0x1d04>
    8000b6f8:	4481                	li	s1,0
        TINST_CHECK(TINST_LOAD)
    );

    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();
    8000b6fa:	e78f50ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000b6fe:	001007b7          	lui	a5,0x100
    8000b702:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b706:	07b2                	slli	a5,a5,0xc
    8000b708:	573d                	li	a4,-17
    8000b70a:	00e78023          	sb	a4,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000b70e:	00024617          	auipc	a2,0x24
    8000b712:	00a60613          	addi	a2,a2,10 # 8002f718 <__func__.0+0x26f8>
    8000b716:	08200593          	li	a1,130
    8000b71a:	00022517          	auipc	a0,0x22
    8000b71e:	bfe50513          	addi	a0,a0,-1026 # 8002d318 <__func__.0+0x2f8>
    8000b722:	6981f0ef          	jal	8002adba <printf>
    8000b726:	00046797          	auipc	a5,0x46
    8000b72a:	8eb7c783          	lbu	a5,-1813(a5) # 80051011 <excpt+0x1>
    8000b72e:	e399                	bnez	a5,8000b734 <tinst_tests_gpf+0x532>
    8000b730:	42e0106f          	j	8000cb5e <tinst_tests_gpf+0x195c>
    8000b734:	6418                	ld	a4,8(s0)
    8000b736:	47dd                	li	a5,23
    8000b738:	00022597          	auipc	a1,0x22
    8000b73c:	bb858593          	addi	a1,a1,-1096 # 8002d2f0 <__func__.0+0x2d0>
    8000b740:	00f71463          	bne	a4,a5,8000b748 <tinst_tests_gpf+0x546>
    8000b744:	3cc0106f          	j	8000cb10 <tinst_tests_gpf+0x190e>
    8000b748:	00022517          	auipc	a0,0x22
    8000b74c:	be850513          	addi	a0,a0,-1048 # 8002d330 <__func__.0+0x310>
    8000b750:	66a1f0ef          	jal	8002adba <printf>
    8000b754:	00046797          	auipc	a5,0x46
    8000b758:	8bd7c783          	lbu	a5,-1859(a5) # 80051011 <excpt+0x1>
    8000b75c:	c799                	beqz	a5,8000b76a <tinst_tests_gpf+0x568>
    8000b75e:	6418                	ld	a4,8(s0)
    8000b760:	47dd                	li	a5,23
    8000b762:	00f71463          	bne	a4,a5,8000b76a <tinst_tests_gpf+0x568>
    8000b766:	64d0106f          	j	8000d5b2 <tinst_tests_gpf+0x23b0>
    8000b76a:	00022517          	auipc	a0,0x22
    8000b76e:	bce50513          	addi	a0,a0,-1074 # 8002d338 <__func__.0+0x318>
    8000b772:	6481f0ef          	jal	8002adba <printf>
    8000b776:	02900513          	li	a0,41
    8000b77a:	32e1e0ef          	jal	80029aa8 <putchar>
    8000b77e:	4529                	li	a0,10
    8000b780:	3281e0ef          	jal	80029aa8 <putchar>
    8000b784:	c889                	beqz	s1,8000b796 <tinst_tests_gpf+0x594>
    8000b786:	00046797          	auipc	a5,0x46
    8000b78a:	88b7c783          	lbu	a5,-1909(a5) # 80051011 <excpt+0x1>
    8000b78e:	c399                	beqz	a5,8000b794 <tinst_tests_gpf+0x592>
    8000b790:	0250106f          	j	8000cfb4 <tinst_tests_gpf+0x1db2>
    8000b794:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b796:	ddcf50ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000b79a:	001007b7          	lui	a5,0x100
    8000b79e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b7a2:	7771                	lui	a4,0xffffc
    8000b7a4:	07b2                	slli	a5,a5,0xc
    8000b7a6:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8000b7aa:	00e79023          	sh	a4,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000b7ae:	00024617          	auipc	a2,0x24
    8000b7b2:	faa60613          	addi	a2,a2,-86 # 8002f758 <__func__.0+0x2738>
    8000b7b6:	08200593          	li	a1,130
    8000b7ba:	00022517          	auipc	a0,0x22
    8000b7be:	b5e50513          	addi	a0,a0,-1186 # 8002d318 <__func__.0+0x2f8>
    8000b7c2:	5f81f0ef          	jal	8002adba <printf>
    8000b7c6:	00046797          	auipc	a5,0x46
    8000b7ca:	84b7c783          	lbu	a5,-1973(a5) # 80051011 <excpt+0x1>
    8000b7ce:	e399                	bnez	a5,8000b7d4 <tinst_tests_gpf+0x5d2>
    8000b7d0:	3e80106f          	j	8000cbb8 <tinst_tests_gpf+0x19b6>
    8000b7d4:	6418                	ld	a4,8(s0)
    8000b7d6:	47dd                	li	a5,23
    8000b7d8:	00022597          	auipc	a1,0x22
    8000b7dc:	b1858593          	addi	a1,a1,-1256 # 8002d2f0 <__func__.0+0x2d0>
    8000b7e0:	00f71463          	bne	a4,a5,8000b7e8 <tinst_tests_gpf+0x5e6>
    8000b7e4:	3860106f          	j	8000cb6a <tinst_tests_gpf+0x1968>
    8000b7e8:	00022517          	auipc	a0,0x22
    8000b7ec:	b4850513          	addi	a0,a0,-1208 # 8002d330 <__func__.0+0x310>
    8000b7f0:	5ca1f0ef          	jal	8002adba <printf>
    8000b7f4:	00046797          	auipc	a5,0x46
    8000b7f8:	81d7c783          	lbu	a5,-2019(a5) # 80051011 <excpt+0x1>
    8000b7fc:	c799                	beqz	a5,8000b80a <tinst_tests_gpf+0x608>
    8000b7fe:	6418                	ld	a4,8(s0)
    8000b800:	47dd                	li	a5,23
    8000b802:	00f71463          	bne	a4,a5,8000b80a <tinst_tests_gpf+0x608>
    8000b806:	6490106f          	j	8000d64e <tinst_tests_gpf+0x244c>
    8000b80a:	00022517          	auipc	a0,0x22
    8000b80e:	b2e50513          	addi	a0,a0,-1234 # 8002d338 <__func__.0+0x318>
    8000b812:	5a81f0ef          	jal	8002adba <printf>
    8000b816:	02900513          	li	a0,41
    8000b81a:	28e1e0ef          	jal	80029aa8 <putchar>
    8000b81e:	4529                	li	a0,10
    8000b820:	2881e0ef          	jal	80029aa8 <putchar>
    8000b824:	c889                	beqz	s1,8000b836 <tinst_tests_gpf+0x634>
    8000b826:	00045797          	auipc	a5,0x45
    8000b82a:	7eb7c783          	lbu	a5,2027(a5) # 80051011 <excpt+0x1>
    8000b82e:	c399                	beqz	a5,8000b834 <tinst_tests_gpf+0x632>
    8000b830:	7d20106f          	j	8000d002 <tinst_tests_gpf+0x1e00>
    8000b834:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b836:	d3cf50ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000b83a:	001007b7          	lui	a5,0x100
    8000b83e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000b842:	deadc737          	lui	a4,0xdeadc
    8000b846:	07b2                	slli	a5,a5,0xc
    8000b848:	eef7071b          	addiw	a4,a4,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    8000b84c:	00e7a023          	sw	a4,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000b850:	00024617          	auipc	a2,0x24
    8000b854:	f4860613          	addi	a2,a2,-184 # 8002f798 <__func__.0+0x2778>
    8000b858:	08200593          	li	a1,130
    8000b85c:	00022517          	auipc	a0,0x22
    8000b860:	abc50513          	addi	a0,a0,-1348 # 8002d318 <__func__.0+0x2f8>
    8000b864:	5561f0ef          	jal	8002adba <printf>
    8000b868:	00045797          	auipc	a5,0x45
    8000b86c:	7a97c783          	lbu	a5,1961(a5) # 80051011 <excpt+0x1>
    8000b870:	e399                	bnez	a5,8000b876 <tinst_tests_gpf+0x674>
    8000b872:	3a00106f          	j	8000cc12 <tinst_tests_gpf+0x1a10>
    8000b876:	6418                	ld	a4,8(s0)
    8000b878:	47dd                	li	a5,23
    8000b87a:	00022597          	auipc	a1,0x22
    8000b87e:	a7658593          	addi	a1,a1,-1418 # 8002d2f0 <__func__.0+0x2d0>
    8000b882:	00f71463          	bne	a4,a5,8000b88a <tinst_tests_gpf+0x688>
    8000b886:	33e0106f          	j	8000cbc4 <tinst_tests_gpf+0x19c2>
    8000b88a:	00022517          	auipc	a0,0x22
    8000b88e:	aa650513          	addi	a0,a0,-1370 # 8002d330 <__func__.0+0x310>
    8000b892:	5281f0ef          	jal	8002adba <printf>
    8000b896:	00045797          	auipc	a5,0x45
    8000b89a:	77b7c783          	lbu	a5,1915(a5) # 80051011 <excpt+0x1>
    8000b89e:	c799                	beqz	a5,8000b8ac <tinst_tests_gpf+0x6aa>
    8000b8a0:	6418                	ld	a4,8(s0)
    8000b8a2:	47dd                	li	a5,23
    8000b8a4:	00f71463          	bne	a4,a5,8000b8ac <tinst_tests_gpf+0x6aa>
    8000b8a8:	6430106f          	j	8000d6ea <tinst_tests_gpf+0x24e8>
    8000b8ac:	00022517          	auipc	a0,0x22
    8000b8b0:	a8c50513          	addi	a0,a0,-1396 # 8002d338 <__func__.0+0x318>
    8000b8b4:	5061f0ef          	jal	8002adba <printf>
    8000b8b8:	02900513          	li	a0,41
    8000b8bc:	1ec1e0ef          	jal	80029aa8 <putchar>
    8000b8c0:	4529                	li	a0,10
    8000b8c2:	1e61e0ef          	jal	80029aa8 <putchar>
    8000b8c6:	c889                	beqz	s1,8000b8d8 <tinst_tests_gpf+0x6d6>
    8000b8c8:	00045797          	auipc	a5,0x45
    8000b8cc:	7497c783          	lbu	a5,1865(a5) # 80051011 <excpt+0x1>
    8000b8d0:	c399                	beqz	a5,8000b8d6 <tinst_tests_gpf+0x6d4>
    8000b8d2:	77e0106f          	j	8000d050 <tinst_tests_gpf+0x1e4e>
    8000b8d6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b8d8:	c9af50ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000b8dc:	37ab77b7          	lui	a5,0x37ab7
    8000b8e0:	00100737          	lui	a4,0x100
    8000b8e4:	078a                	slli	a5,a5,0x2
    8000b8e6:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8000b8ea:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8000b8ee:	0732                	slli	a4,a4,0xc
    8000b8f0:	00f73023          	sd	a5,0(a4)
    sd(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000b8f4:	00024617          	auipc	a2,0x24
    8000b8f8:	ee460613          	addi	a2,a2,-284 # 8002f7d8 <__func__.0+0x27b8>
    8000b8fc:	08200593          	li	a1,130
    8000b900:	00022517          	auipc	a0,0x22
    8000b904:	a1850513          	addi	a0,a0,-1512 # 8002d318 <__func__.0+0x2f8>
    8000b908:	4b21f0ef          	jal	8002adba <printf>
    8000b90c:	00045797          	auipc	a5,0x45
    8000b910:	7057c783          	lbu	a5,1797(a5) # 80051011 <excpt+0x1>
    8000b914:	e399                	bnez	a5,8000b91a <tinst_tests_gpf+0x718>
    8000b916:	3560106f          	j	8000cc6c <tinst_tests_gpf+0x1a6a>
    8000b91a:	6418                	ld	a4,8(s0)
    8000b91c:	47dd                	li	a5,23
    8000b91e:	00022597          	auipc	a1,0x22
    8000b922:	9d258593          	addi	a1,a1,-1582 # 8002d2f0 <__func__.0+0x2d0>
    8000b926:	00f71463          	bne	a4,a5,8000b92e <tinst_tests_gpf+0x72c>
    8000b92a:	2f40106f          	j	8000cc1e <tinst_tests_gpf+0x1a1c>
    8000b92e:	00022517          	auipc	a0,0x22
    8000b932:	a0250513          	addi	a0,a0,-1534 # 8002d330 <__func__.0+0x310>
    8000b936:	4841f0ef          	jal	8002adba <printf>
    8000b93a:	00045797          	auipc	a5,0x45
    8000b93e:	6d77c783          	lbu	a5,1751(a5) # 80051011 <excpt+0x1>
    8000b942:	c799                	beqz	a5,8000b950 <tinst_tests_gpf+0x74e>
    8000b944:	6418                	ld	a4,8(s0)
    8000b946:	47dd                	li	a5,23
    8000b948:	00f71463          	bne	a4,a5,8000b950 <tinst_tests_gpf+0x74e>
    8000b94c:	63b0106f          	j	8000d786 <tinst_tests_gpf+0x2584>
    8000b950:	00022517          	auipc	a0,0x22
    8000b954:	9e850513          	addi	a0,a0,-1560 # 8002d338 <__func__.0+0x318>
    8000b958:	4621f0ef          	jal	8002adba <printf>
    8000b95c:	02900513          	li	a0,41
    8000b960:	1481e0ef          	jal	80029aa8 <putchar>
    8000b964:	4529                	li	a0,10
    8000b966:	1421e0ef          	jal	80029aa8 <putchar>
    8000b96a:	c889                	beqz	s1,8000b97c <tinst_tests_gpf+0x77a>
    8000b96c:	00045797          	auipc	a5,0x45
    8000b970:	6a57c783          	lbu	a5,1701(a5) # 80051011 <excpt+0x1>
    8000b974:	c399                	beqz	a5,8000b97a <tinst_tests_gpf+0x778>
    8000b976:	7280106f          	j	8000d09e <tinst_tests_gpf+0x1e9c>
    8000b97a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000b97c:	bf6f50ef          	jal	80000d72 <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000b980:	00100537          	lui	a0,0x100
    8000b984:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000b988:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000b98a:	410c                	lw	a1,0(a0)
    value = c_lw(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000b98c:	00024617          	auipc	a2,0x24
    8000b990:	e8c60613          	addi	a2,a2,-372 # 8002f818 <__func__.0+0x27f8>
    8000b994:	08200593          	li	a1,130
    8000b998:	00022517          	auipc	a0,0x22
    8000b99c:	98050513          	addi	a0,a0,-1664 # 8002d318 <__func__.0+0x2f8>
    8000b9a0:	41a1f0ef          	jal	8002adba <printf>
    8000b9a4:	00045797          	auipc	a5,0x45
    8000b9a8:	66d7c783          	lbu	a5,1645(a5) # 80051011 <excpt+0x1>
    8000b9ac:	c799                	beqz	a5,8000b9ba <tinst_tests_gpf+0x7b8>
    8000b9ae:	6418                	ld	a4,8(s0)
    8000b9b0:	47d5                	li	a5,21
    8000b9b2:	00f71463          	bne	a4,a5,8000b9ba <tinst_tests_gpf+0x7b8>
    8000b9b6:	0370106f          	j	8000d1ec <tinst_tests_gpf+0x1fea>
    8000b9ba:	00022597          	auipc	a1,0x22
    8000b9be:	93658593          	addi	a1,a1,-1738 # 8002d2f0 <__func__.0+0x2d0>
    8000b9c2:	00022517          	auipc	a0,0x22
    8000b9c6:	96e50513          	addi	a0,a0,-1682 # 8002d330 <__func__.0+0x310>
    8000b9ca:	3f01f0ef          	jal	8002adba <printf>
    8000b9ce:	00045797          	auipc	a5,0x45
    8000b9d2:	6437c783          	lbu	a5,1603(a5) # 80051011 <excpt+0x1>
    8000b9d6:	c799                	beqz	a5,8000b9e4 <tinst_tests_gpf+0x7e2>
    8000b9d8:	6418                	ld	a4,8(s0)
    8000b9da:	47d5                	li	a5,21
    8000b9dc:	00f71463          	bne	a4,a5,8000b9e4 <tinst_tests_gpf+0x7e2>
    8000b9e0:	6430106f          	j	8000d822 <tinst_tests_gpf+0x2620>
    8000b9e4:	00022517          	auipc	a0,0x22
    8000b9e8:	95450513          	addi	a0,a0,-1708 # 8002d338 <__func__.0+0x318>
    8000b9ec:	3ce1f0ef          	jal	8002adba <printf>
    8000b9f0:	02900513          	li	a0,41
    8000b9f4:	0b41e0ef          	jal	80029aa8 <putchar>
    8000b9f8:	4529                	li	a0,10
    8000b9fa:	0ae1e0ef          	jal	80029aa8 <putchar>
    8000b9fe:	c889                	beqz	s1,8000ba10 <tinst_tests_gpf+0x80e>
    8000ba00:	00045797          	auipc	a5,0x45
    8000ba04:	6117c783          	lbu	a5,1553(a5) # 80051011 <excpt+0x1>
    8000ba08:	c399                	beqz	a5,8000ba0e <tinst_tests_gpf+0x80c>
    8000ba0a:	6e20106f          	j	8000d0ec <tinst_tests_gpf+0x1eea>
    8000ba0e:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000ba10:	b62f50ef          	jal	80000d72 <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000ba14:	00100537          	lui	a0,0x100
    8000ba18:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000ba1c:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000ba1e:	610c                	ld	a1,0(a0)
    value = c_ld(vaddr_f);
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000ba20:	00024617          	auipc	a2,0x24
    8000ba24:	e3860613          	addi	a2,a2,-456 # 8002f858 <__func__.0+0x2838>
    return value;
    8000ba28:	892e                	mv	s2,a1
    8000ba2a:	00022517          	auipc	a0,0x22
    8000ba2e:	8ee50513          	addi	a0,a0,-1810 # 8002d318 <__func__.0+0x2f8>
    8000ba32:	08200593          	li	a1,130
    8000ba36:	3841f0ef          	jal	8002adba <printf>
    8000ba3a:	00045797          	auipc	a5,0x45
    8000ba3e:	5d77c783          	lbu	a5,1495(a5) # 80051011 <excpt+0x1>
    8000ba42:	c799                	beqz	a5,8000ba50 <tinst_tests_gpf+0x84e>
    8000ba44:	6418                	ld	a4,8(s0)
    8000ba46:	47d5                	li	a5,21
    8000ba48:	00f71463          	bne	a4,a5,8000ba50 <tinst_tests_gpf+0x84e>
    8000ba4c:	7f60106f          	j	8000d242 <tinst_tests_gpf+0x2040>
    8000ba50:	00022597          	auipc	a1,0x22
    8000ba54:	8a058593          	addi	a1,a1,-1888 # 8002d2f0 <__func__.0+0x2d0>
    8000ba58:	00022517          	auipc	a0,0x22
    8000ba5c:	8d850513          	addi	a0,a0,-1832 # 8002d330 <__func__.0+0x310>
    8000ba60:	35a1f0ef          	jal	8002adba <printf>
    8000ba64:	00045797          	auipc	a5,0x45
    8000ba68:	5ad7c783          	lbu	a5,1453(a5) # 80051011 <excpt+0x1>
    8000ba6c:	c799                	beqz	a5,8000ba7a <tinst_tests_gpf+0x878>
    8000ba6e:	6418                	ld	a4,8(s0)
    8000ba70:	47d5                	li	a5,21
    8000ba72:	00f71463          	bne	a4,a5,8000ba7a <tinst_tests_gpf+0x878>
    8000ba76:	6370106f          	j	8000d8ac <tinst_tests_gpf+0x26aa>
    8000ba7a:	00022517          	auipc	a0,0x22
    8000ba7e:	8be50513          	addi	a0,a0,-1858 # 8002d338 <__func__.0+0x318>
    8000ba82:	3381f0ef          	jal	8002adba <printf>
    8000ba86:	02900513          	li	a0,41
    8000ba8a:	01e1e0ef          	jal	80029aa8 <putchar>
    8000ba8e:	4529                	li	a0,10
    8000ba90:	0181e0ef          	jal	80029aa8 <putchar>
    8000ba94:	c889                	beqz	s1,8000baa6 <tinst_tests_gpf+0x8a4>
    8000ba96:	00045797          	auipc	a5,0x45
    8000ba9a:	57b7c783          	lbu	a5,1403(a5) # 80051011 <excpt+0x1>
    8000ba9e:	c399                	beqz	a5,8000baa4 <tinst_tests_gpf+0x8a2>
    8000baa0:	68a0106f          	j	8000d12a <tinst_tests_gpf+0x1f28>
    8000baa4:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK_COMPRESSED(TINST_LOAD)
    );

    TEST_SETUP_EXCEPT();
    8000baa6:	accf50ef          	jal	80000d72 <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000baaa:	00100537          	lui	a0,0x100
    8000baae:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    8000bab2:	0532                	slli	a0,a0,0xc
    register uint64_t _value asm("a1") = value;
    8000bab4:	85ca                	mv	a1,s2
    asm volatile(
    8000bab6:	c10c                	sw	a1,0(a0)
    c_sw(vaddr_f, value);       
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000bab8:	00024617          	auipc	a2,0x24
    8000babc:	d6060613          	addi	a2,a2,-672 # 8002f818 <__func__.0+0x27f8>
    8000bac0:	08200593          	li	a1,130
    8000bac4:	00022517          	auipc	a0,0x22
    8000bac8:	85450513          	addi	a0,a0,-1964 # 8002d318 <__func__.0+0x2f8>
    8000bacc:	2ee1f0ef          	jal	8002adba <printf>
    8000bad0:	00045797          	auipc	a5,0x45
    8000bad4:	5417c783          	lbu	a5,1345(a5) # 80051011 <excpt+0x1>
    8000bad8:	c799                	beqz	a5,8000bae6 <tinst_tests_gpf+0x8e4>
    8000bada:	6418                	ld	a4,8(s0)
    8000badc:	47dd                	li	a5,23
    8000bade:	00f71463          	bne	a4,a5,8000bae6 <tinst_tests_gpf+0x8e4>
    8000bae2:	7b60106f          	j	8000d298 <tinst_tests_gpf+0x2096>
    8000bae6:	00022597          	auipc	a1,0x22
    8000baea:	80a58593          	addi	a1,a1,-2038 # 8002d2f0 <__func__.0+0x2d0>
    8000baee:	00022517          	auipc	a0,0x22
    8000baf2:	84250513          	addi	a0,a0,-1982 # 8002d330 <__func__.0+0x310>
    8000baf6:	2c41f0ef          	jal	8002adba <printf>
    8000bafa:	00045797          	auipc	a5,0x45
    8000bafe:	5177c783          	lbu	a5,1303(a5) # 80051011 <excpt+0x1>
    8000bb02:	c799                	beqz	a5,8000bb10 <tinst_tests_gpf+0x90e>
    8000bb04:	6418                	ld	a4,8(s0)
    8000bb06:	47dd                	li	a5,23
    8000bb08:	00f71463          	bne	a4,a5,8000bb10 <tinst_tests_gpf+0x90e>
    8000bb0c:	62b0106f          	j	8000d936 <tinst_tests_gpf+0x2734>
    8000bb10:	00022517          	auipc	a0,0x22
    8000bb14:	82850513          	addi	a0,a0,-2008 # 8002d338 <__func__.0+0x318>
    8000bb18:	2a21f0ef          	jal	8002adba <printf>
    8000bb1c:	02900513          	li	a0,41
    8000bb20:	7891d0ef          	jal	80029aa8 <putchar>
    8000bb24:	4529                	li	a0,10
    8000bb26:	7831d0ef          	jal	80029aa8 <putchar>
    8000bb2a:	c889                	beqz	s1,8000bb3c <tinst_tests_gpf+0x93a>
    8000bb2c:	00045797          	auipc	a5,0x45
    8000bb30:	4e57c783          	lbu	a5,1253(a5) # 80051011 <excpt+0x1>
    8000bb34:	c399                	beqz	a5,8000bb3a <tinst_tests_gpf+0x938>
    8000bb36:	6320106f          	j	8000d168 <tinst_tests_gpf+0x1f66>
    8000bb3a:	4481                	li	s1,0
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bb3c:	a36f50ef          	jal	80000d72 <test_setup_except_function>
    register uint64_t _addr asm("a0") = addr;
    8000bb40:	00100537          	lui	a0,0x100
    8000bb44:	06550513          	addi	a0,a0,101 # 100065 <STACK_SIZE+0x65>
    register uint64_t _value asm("a1") = value;
    8000bb48:	85ca                	mv	a1,s2
    register uint64_t _addr asm("a0") = addr;
    8000bb4a:	0532                	slli	a0,a0,0xc
    asm volatile(
    8000bb4c:	e10c                	sd	a1,0(a0)
    c_sd(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000bb4e:	00024617          	auipc	a2,0x24
    8000bb52:	d4a60613          	addi	a2,a2,-694 # 8002f898 <__func__.0+0x2878>
    8000bb56:	08200593          	li	a1,130
    8000bb5a:	00021517          	auipc	a0,0x21
    8000bb5e:	7be50513          	addi	a0,a0,1982 # 8002d318 <__func__.0+0x2f8>
    8000bb62:	2581f0ef          	jal	8002adba <printf>
    8000bb66:	00045797          	auipc	a5,0x45
    8000bb6a:	4ab7c783          	lbu	a5,1195(a5) # 80051011 <excpt+0x1>
    8000bb6e:	c799                	beqz	a5,8000bb7c <tinst_tests_gpf+0x97a>
    8000bb70:	6418                	ld	a4,8(s0)
    8000bb72:	47dd                	li	a5,23
    8000bb74:	00f71463          	bne	a4,a5,8000bb7c <tinst_tests_gpf+0x97a>
    8000bb78:	7760106f          	j	8000d2ee <tinst_tests_gpf+0x20ec>
    8000bb7c:	00021597          	auipc	a1,0x21
    8000bb80:	77458593          	addi	a1,a1,1908 # 8002d2f0 <__func__.0+0x2d0>
    8000bb84:	00021517          	auipc	a0,0x21
    8000bb88:	7ac50513          	addi	a0,a0,1964 # 8002d330 <__func__.0+0x310>
    8000bb8c:	22e1f0ef          	jal	8002adba <printf>
    8000bb90:	00045797          	auipc	a5,0x45
    8000bb94:	4817c783          	lbu	a5,1153(a5) # 80051011 <excpt+0x1>
    8000bb98:	c799                	beqz	a5,8000bba6 <tinst_tests_gpf+0x9a4>
    8000bb9a:	6418                	ld	a4,8(s0)
    8000bb9c:	47dd                	li	a5,23
    8000bb9e:	00f71463          	bne	a4,a5,8000bba6 <tinst_tests_gpf+0x9a4>
    8000bba2:	6230106f          	j	8000d9c4 <tinst_tests_gpf+0x27c2>
    8000bba6:	00021517          	auipc	a0,0x21
    8000bbaa:	79250513          	addi	a0,a0,1938 # 8002d338 <__func__.0+0x318>
    8000bbae:	20c1f0ef          	jal	8002adba <printf>
    8000bbb2:	02900513          	li	a0,41
    8000bbb6:	6f31d0ef          	jal	80029aa8 <putchar>
    8000bbba:	4529                	li	a0,10
    8000bbbc:	6ed1d0ef          	jal	80029aa8 <putchar>
    8000bbc0:	cc89                	beqz	s1,8000bbda <tinst_tests_gpf+0x9d8>
    8000bbc2:	00045797          	auipc	a5,0x45
    8000bbc6:	44f7c783          	lbu	a5,1103(a5) # 80051011 <excpt+0x1>
    8000bbca:	c799                	beqz	a5,8000bbd8 <tinst_tests_gpf+0x9d6>
    8000bbcc:	6418                	ld	a4,8(s0)
    8000bbce:	47dd                	li	a5,23
    8000bbd0:	00f71463          	bne	a4,a5,8000bbd8 <tinst_tests_gpf+0x9d6>
    8000bbd4:	3760206f          	j	8000df4a <tinst_tests_gpf+0x2d48>
    8000bbd8:	4481                	li	s1,0
    asm volatile(
    8000bbda:	00100937          	lui	s2,0x100
    8000bbde:	06590913          	addi	s2,s2,101 # 100065 <STACK_SIZE+0x65>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK_COMPRESSED(TINST_STORE)
    );

    TEST_SETUP_EXCEPT();
    8000bbe2:	990f50ef          	jal	80000d72 <test_setup_except_function>
    8000bbe6:	0932                	slli	s2,s2,0xc
    8000bbe8:	1009292f          	lr.w	s2,(s2)
    value = lr_w(vaddr_f);
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bbec:	00024617          	auipc	a2,0x24
    8000bbf0:	cec60613          	addi	a2,a2,-788 # 8002f8d8 <__func__.0+0x28b8>
    8000bbf4:	08200593          	li	a1,130
    8000bbf8:	00021517          	auipc	a0,0x21
    8000bbfc:	72050513          	addi	a0,a0,1824 # 8002d318 <__func__.0+0x2f8>
    8000bc00:	1ba1f0ef          	jal	8002adba <printf>
    8000bc04:	00045797          	auipc	a5,0x45
    8000bc08:	40d7c783          	lbu	a5,1037(a5) # 80051011 <excpt+0x1>
    value = lr_w(vaddr_f);
    8000bc0c:	1902                	slli	s2,s2,0x20
    8000bc0e:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000bc12:	e399                	bnez	a5,8000bc18 <tinst_tests_gpf+0xa16>
    8000bc14:	0b20106f          	j	8000ccc6 <tinst_tests_gpf+0x1ac4>
    8000bc18:	6418                	ld	a4,8(s0)
    8000bc1a:	47d5                	li	a5,21
    8000bc1c:	00021597          	auipc	a1,0x21
    8000bc20:	6d458593          	addi	a1,a1,1748 # 8002d2f0 <__func__.0+0x2d0>
    8000bc24:	00f71463          	bne	a4,a5,8000bc2c <tinst_tests_gpf+0xa2a>
    8000bc28:	0500106f          	j	8000cc78 <tinst_tests_gpf+0x1a76>
    8000bc2c:	00021517          	auipc	a0,0x21
    8000bc30:	70450513          	addi	a0,a0,1796 # 8002d330 <__func__.0+0x310>
    8000bc34:	1861f0ef          	jal	8002adba <printf>
    8000bc38:	00045797          	auipc	a5,0x45
    8000bc3c:	3d97c783          	lbu	a5,985(a5) # 80051011 <excpt+0x1>
    8000bc40:	c799                	beqz	a5,8000bc4e <tinst_tests_gpf+0xa4c>
    8000bc42:	6418                	ld	a4,8(s0)
    8000bc44:	47d5                	li	a5,21
    8000bc46:	00f71463          	bne	a4,a5,8000bc4e <tinst_tests_gpf+0xa4c>
    8000bc4a:	6090106f          	j	8000da52 <tinst_tests_gpf+0x2850>
    8000bc4e:	00021517          	auipc	a0,0x21
    8000bc52:	6ea50513          	addi	a0,a0,1770 # 8002d338 <__func__.0+0x318>
    8000bc56:	1641f0ef          	jal	8002adba <printf>
    8000bc5a:	02900513          	li	a0,41
    8000bc5e:	64b1d0ef          	jal	80029aa8 <putchar>
    8000bc62:	4529                	li	a0,10
    8000bc64:	6451d0ef          	jal	80029aa8 <putchar>
    8000bc68:	cc89                	beqz	s1,8000bc82 <tinst_tests_gpf+0xa80>
    8000bc6a:	00045797          	auipc	a5,0x45
    8000bc6e:	3a77c783          	lbu	a5,935(a5) # 80051011 <excpt+0x1>
    8000bc72:	c799                	beqz	a5,8000bc80 <tinst_tests_gpf+0xa7e>
    8000bc74:	6418                	ld	a4,8(s0)
    8000bc76:	47d5                	li	a5,21
    8000bc78:	00f71463          	bne	a4,a5,8000bc80 <tinst_tests_gpf+0xa7e>
    8000bc7c:	3040206f          	j	8000df80 <tinst_tests_gpf+0x2d7e>
    8000bc80:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_LGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bc82:	8f0f50ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    8000bc86:	001007b7          	lui	a5,0x100
    8000bc8a:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bc8e:	07b2                	slli	a5,a5,0xc
    8000bc90:	1927a92f          	sc.w	s2,s2,(a5)
    value = sc_w(vaddr_f, value);
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000bc94:	00024617          	auipc	a2,0x24
    8000bc98:	c8460613          	addi	a2,a2,-892 # 8002f918 <__func__.0+0x28f8>
    8000bc9c:	08200593          	li	a1,130
    8000bca0:	00021517          	auipc	a0,0x21
    8000bca4:	67850513          	addi	a0,a0,1656 # 8002d318 <__func__.0+0x2f8>
    8000bca8:	1121f0ef          	jal	8002adba <printf>
    8000bcac:	00045797          	auipc	a5,0x45
    8000bcb0:	3657c783          	lbu	a5,869(a5) # 80051011 <excpt+0x1>
    return value;
    8000bcb4:	2901                	sext.w	s2,s2
    8000bcb6:	e399                	bnez	a5,8000bcbc <tinst_tests_gpf+0xaba>
    8000bcb8:	0680106f          	j	8000cd20 <tinst_tests_gpf+0x1b1e>
    8000bcbc:	6418                	ld	a4,8(s0)
    8000bcbe:	47dd                	li	a5,23
    8000bcc0:	00021597          	auipc	a1,0x21
    8000bcc4:	63058593          	addi	a1,a1,1584 # 8002d2f0 <__func__.0+0x2d0>
    8000bcc8:	00f71463          	bne	a4,a5,8000bcd0 <tinst_tests_gpf+0xace>
    8000bccc:	0060106f          	j	8000ccd2 <tinst_tests_gpf+0x1ad0>
    8000bcd0:	00021517          	auipc	a0,0x21
    8000bcd4:	66050513          	addi	a0,a0,1632 # 8002d330 <__func__.0+0x310>
    8000bcd8:	0e21f0ef          	jal	8002adba <printf>
    8000bcdc:	00045797          	auipc	a5,0x45
    8000bce0:	3357c783          	lbu	a5,821(a5) # 80051011 <excpt+0x1>
    8000bce4:	c799                	beqz	a5,8000bcf2 <tinst_tests_gpf+0xaf0>
    8000bce6:	6418                	ld	a4,8(s0)
    8000bce8:	47dd                	li	a5,23
    8000bcea:	00f71463          	bne	a4,a5,8000bcf2 <tinst_tests_gpf+0xaf0>
    8000bcee:	4bc0106f          	j	8000d1aa <tinst_tests_gpf+0x1fa8>
    8000bcf2:	00021517          	auipc	a0,0x21
    8000bcf6:	64650513          	addi	a0,a0,1606 # 8002d338 <__func__.0+0x318>
    8000bcfa:	0c01f0ef          	jal	8002adba <printf>
    8000bcfe:	02900513          	li	a0,41
    8000bd02:	5a71d0ef          	jal	80029aa8 <putchar>
    8000bd06:	4529                	li	a0,10
    8000bd08:	5a11d0ef          	jal	80029aa8 <putchar>
    8000bd0c:	cc89                	beqz	s1,8000bd26 <tinst_tests_gpf+0xb24>
    8000bd0e:	00045797          	auipc	a5,0x45
    8000bd12:	3037c783          	lbu	a5,771(a5) # 80051011 <excpt+0x1>
    8000bd16:	c799                	beqz	a5,8000bd24 <tinst_tests_gpf+0xb22>
    8000bd18:	6418                	ld	a4,8(s0)
    8000bd1a:	47dd                	li	a5,23
    8000bd1c:	00f71463          	bne	a4,a5,8000bd24 <tinst_tests_gpf+0xb22>
    8000bd20:	2a20206f          	j	8000dfc2 <tinst_tests_gpf+0x2dc0>
    8000bd24:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bd26:	84cf50ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoswap_w, "amoswap.w", uint32_t);
    8000bd2a:	001007b7          	lui	a5,0x100
    8000bd2e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bd32:	07b2                	slli	a5,a5,0xc
    8000bd34:	0927a92f          	amoswap.w	s2,s2,(a5)
    value = amoswap_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000bd38:	00024617          	auipc	a2,0x24
    8000bd3c:	c2060613          	addi	a2,a2,-992 # 8002f958 <__func__.0+0x2938>
    8000bd40:	08200593          	li	a1,130
    8000bd44:	00021517          	auipc	a0,0x21
    8000bd48:	5d450513          	addi	a0,a0,1492 # 8002d318 <__func__.0+0x2f8>
    8000bd4c:	06e1f0ef          	jal	8002adba <printf>
    8000bd50:	00045797          	auipc	a5,0x45
    8000bd54:	2c17c783          	lbu	a5,705(a5) # 80051011 <excpt+0x1>
    8000bd58:	e399                	bnez	a5,8000bd5e <tinst_tests_gpf+0xb5c>
    8000bd5a:	0200106f          	j	8000cd7a <tinst_tests_gpf+0x1b78>
    8000bd5e:	6418                	ld	a4,8(s0)
    8000bd60:	47dd                	li	a5,23
    8000bd62:	00021597          	auipc	a1,0x21
    8000bd66:	58e58593          	addi	a1,a1,1422 # 8002d2f0 <__func__.0+0x2d0>
    8000bd6a:	00f71463          	bne	a4,a5,8000bd72 <tinst_tests_gpf+0xb70>
    8000bd6e:	7bf0006f          	j	8000cd2c <tinst_tests_gpf+0x1b2a>
    8000bd72:	00021517          	auipc	a0,0x21
    8000bd76:	5be50513          	addi	a0,a0,1470 # 8002d330 <__func__.0+0x310>
    8000bd7a:	0401f0ef          	jal	8002adba <printf>
    8000bd7e:	00045797          	auipc	a5,0x45
    8000bd82:	2937c783          	lbu	a5,659(a5) # 80051011 <excpt+0x1>
    8000bd86:	c799                	beqz	a5,8000bd94 <tinst_tests_gpf+0xb92>
    8000bd88:	6418                	ld	a4,8(s0)
    8000bd8a:	47dd                	li	a5,23
    8000bd8c:	00f71463          	bne	a4,a5,8000bd94 <tinst_tests_gpf+0xb92>
    8000bd90:	4700106f          	j	8000d200 <tinst_tests_gpf+0x1ffe>
    8000bd94:	00021517          	auipc	a0,0x21
    8000bd98:	5a450513          	addi	a0,a0,1444 # 8002d338 <__func__.0+0x318>
    8000bd9c:	01e1f0ef          	jal	8002adba <printf>
    8000bda0:	02900513          	li	a0,41
    8000bda4:	5051d0ef          	jal	80029aa8 <putchar>
    8000bda8:	4529                	li	a0,10
    8000bdaa:	4ff1d0ef          	jal	80029aa8 <putchar>
    8000bdae:	cc89                	beqz	s1,8000bdc8 <tinst_tests_gpf+0xbc6>
    8000bdb0:	00045797          	auipc	a5,0x45
    8000bdb4:	2617c783          	lbu	a5,609(a5) # 80051011 <excpt+0x1>
    8000bdb8:	c799                	beqz	a5,8000bdc6 <tinst_tests_gpf+0xbc4>
    8000bdba:	6418                	ld	a4,8(s0)
    8000bdbc:	47dd                	li	a5,23
    8000bdbe:	00f71463          	bne	a4,a5,8000bdc6 <tinst_tests_gpf+0xbc4>
    8000bdc2:	2420206f          	j	8000e004 <tinst_tests_gpf+0x2e02>
    8000bdc6:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bdc8:	fabf40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    8000bdcc:	001007b7          	lui	a5,0x100
    8000bdd0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bdd4:	07b2                	slli	a5,a5,0xc
    8000bdd6:	0127a92f          	amoadd.w	s2,s2,(a5)
    value = amoadd_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000bdda:	00024617          	auipc	a2,0x24
    8000bdde:	bc660613          	addi	a2,a2,-1082 # 8002f9a0 <__func__.0+0x2980>
    8000bde2:	08200593          	li	a1,130
    8000bde6:	00021517          	auipc	a0,0x21
    8000bdea:	53250513          	addi	a0,a0,1330 # 8002d318 <__func__.0+0x2f8>
    8000bdee:	7cd1e0ef          	jal	8002adba <printf>
    8000bdf2:	00045797          	auipc	a5,0x45
    8000bdf6:	21f7c783          	lbu	a5,543(a5) # 80051011 <excpt+0x1>
    8000bdfa:	e399                	bnez	a5,8000be00 <tinst_tests_gpf+0xbfe>
    8000bdfc:	7d90006f          	j	8000cdd4 <tinst_tests_gpf+0x1bd2>
    8000be00:	6418                	ld	a4,8(s0)
    8000be02:	47dd                	li	a5,23
    8000be04:	00021597          	auipc	a1,0x21
    8000be08:	4ec58593          	addi	a1,a1,1260 # 8002d2f0 <__func__.0+0x2d0>
    8000be0c:	00f71463          	bne	a4,a5,8000be14 <tinst_tests_gpf+0xc12>
    8000be10:	7770006f          	j	8000cd86 <tinst_tests_gpf+0x1b84>
    8000be14:	00021517          	auipc	a0,0x21
    8000be18:	51c50513          	addi	a0,a0,1308 # 8002d330 <__func__.0+0x310>
    8000be1c:	79f1e0ef          	jal	8002adba <printf>
    8000be20:	00045797          	auipc	a5,0x45
    8000be24:	1f17c783          	lbu	a5,497(a5) # 80051011 <excpt+0x1>
    8000be28:	c799                	beqz	a5,8000be36 <tinst_tests_gpf+0xc34>
    8000be2a:	6418                	ld	a4,8(s0)
    8000be2c:	47dd                	li	a5,23
    8000be2e:	00f71463          	bne	a4,a5,8000be36 <tinst_tests_gpf+0xc34>
    8000be32:	4240106f          	j	8000d256 <tinst_tests_gpf+0x2054>
    8000be36:	00021517          	auipc	a0,0x21
    8000be3a:	50250513          	addi	a0,a0,1282 # 8002d338 <__func__.0+0x318>
    8000be3e:	77d1e0ef          	jal	8002adba <printf>
    8000be42:	02900513          	li	a0,41
    8000be46:	4631d0ef          	jal	80029aa8 <putchar>
    8000be4a:	4529                	li	a0,10
    8000be4c:	45d1d0ef          	jal	80029aa8 <putchar>
    8000be50:	cc89                	beqz	s1,8000be6a <tinst_tests_gpf+0xc68>
    8000be52:	00045797          	auipc	a5,0x45
    8000be56:	1bf7c783          	lbu	a5,447(a5) # 80051011 <excpt+0x1>
    8000be5a:	c799                	beqz	a5,8000be68 <tinst_tests_gpf+0xc66>
    8000be5c:	6418                	ld	a4,8(s0)
    8000be5e:	47dd                	li	a5,23
    8000be60:	00f71463          	bne	a4,a5,8000be68 <tinst_tests_gpf+0xc66>
    8000be64:	20e0206f          	j	8000e072 <tinst_tests_gpf+0x2e70>
    8000be68:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000be6a:	f09f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoxor_w, "amoxor.w", uint32_t);
    8000be6e:	001007b7          	lui	a5,0x100
    8000be72:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000be76:	07b2                	slli	a5,a5,0xc
    8000be78:	2127a92f          	amoxor.w	s2,s2,(a5)
    value = amoxor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000be7c:	00024617          	auipc	a2,0x24
    8000be80:	b6460613          	addi	a2,a2,-1180 # 8002f9e0 <__func__.0+0x29c0>
    8000be84:	08200593          	li	a1,130
    8000be88:	00021517          	auipc	a0,0x21
    8000be8c:	49050513          	addi	a0,a0,1168 # 8002d318 <__func__.0+0x2f8>
    8000be90:	72b1e0ef          	jal	8002adba <printf>
    8000be94:	00045797          	auipc	a5,0x45
    8000be98:	17d7c783          	lbu	a5,381(a5) # 80051011 <excpt+0x1>
    8000be9c:	c399                	beqz	a5,8000bea2 <tinst_tests_gpf+0xca0>
    8000be9e:	0020106f          	j	8000cea0 <tinst_tests_gpf+0x1c9e>
    8000bea2:	00021597          	auipc	a1,0x21
    8000bea6:	44e58593          	addi	a1,a1,1102 # 8002d2f0 <__func__.0+0x2d0>
    8000beaa:	00021517          	auipc	a0,0x21
    8000beae:	48650513          	addi	a0,a0,1158 # 8002d330 <__func__.0+0x310>
    8000beb2:	7091e0ef          	jal	8002adba <printf>
    8000beb6:	00045797          	auipc	a5,0x45
    8000beba:	15b7c783          	lbu	a5,347(a5) # 80051011 <excpt+0x1>
    8000bebe:	c799                	beqz	a5,8000becc <tinst_tests_gpf+0xcca>
    8000bec0:	6418                	ld	a4,8(s0)
    8000bec2:	47dd                	li	a5,23
    8000bec4:	00f71463          	bne	a4,a5,8000becc <tinst_tests_gpf+0xcca>
    8000bec8:	3e40106f          	j	8000d2ac <tinst_tests_gpf+0x20aa>
    8000becc:	00021517          	auipc	a0,0x21
    8000bed0:	46c50513          	addi	a0,a0,1132 # 8002d338 <__func__.0+0x318>
    8000bed4:	6e71e0ef          	jal	8002adba <printf>
    8000bed8:	02900513          	li	a0,41
    8000bedc:	3cd1d0ef          	jal	80029aa8 <putchar>
    8000bee0:	4529                	li	a0,10
    8000bee2:	3c71d0ef          	jal	80029aa8 <putchar>
    8000bee6:	cc89                	beqz	s1,8000bf00 <tinst_tests_gpf+0xcfe>
    8000bee8:	00045797          	auipc	a5,0x45
    8000beec:	1297c783          	lbu	a5,297(a5) # 80051011 <excpt+0x1>
    8000bef0:	c799                	beqz	a5,8000befe <tinst_tests_gpf+0xcfc>
    8000bef2:	6418                	ld	a4,8(s0)
    8000bef4:	47dd                	li	a5,23
    8000bef6:	00f71463          	bne	a4,a5,8000befe <tinst_tests_gpf+0xcfc>
    8000befa:	1e60206f          	j	8000e0e0 <tinst_tests_gpf+0x2ede>
    8000befe:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
       TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bf00:	e73f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoand_w, "amoand.w", uint32_t);
    8000bf04:	001007b7          	lui	a5,0x100
    8000bf08:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bf0c:	07b2                	slli	a5,a5,0xc
    8000bf0e:	6127a92f          	amoand.w	s2,s2,(a5)
    value = amoand_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000bf12:	00024617          	auipc	a2,0x24
    8000bf16:	b0e60613          	addi	a2,a2,-1266 # 8002fa20 <__func__.0+0x2a00>
    8000bf1a:	08200593          	li	a1,130
    8000bf1e:	00021517          	auipc	a0,0x21
    8000bf22:	3fa50513          	addi	a0,a0,1018 # 8002d318 <__func__.0+0x2f8>
    8000bf26:	6951e0ef          	jal	8002adba <printf>
    8000bf2a:	00045797          	auipc	a5,0x45
    8000bf2e:	0e77c783          	lbu	a5,231(a5) # 80051011 <excpt+0x1>
    8000bf32:	c399                	beqz	a5,8000bf38 <tinst_tests_gpf+0xd36>
    8000bf34:	01a0106f          	j	8000cf4e <tinst_tests_gpf+0x1d4c>
    8000bf38:	00021597          	auipc	a1,0x21
    8000bf3c:	3b858593          	addi	a1,a1,952 # 8002d2f0 <__func__.0+0x2d0>
    8000bf40:	00021517          	auipc	a0,0x21
    8000bf44:	3f050513          	addi	a0,a0,1008 # 8002d330 <__func__.0+0x310>
    8000bf48:	6731e0ef          	jal	8002adba <printf>
    8000bf4c:	00045797          	auipc	a5,0x45
    8000bf50:	0c57c783          	lbu	a5,197(a5) # 80051011 <excpt+0x1>
    8000bf54:	c799                	beqz	a5,8000bf62 <tinst_tests_gpf+0xd60>
    8000bf56:	6418                	ld	a4,8(s0)
    8000bf58:	47dd                	li	a5,23
    8000bf5a:	00f71463          	bne	a4,a5,8000bf62 <tinst_tests_gpf+0xd60>
    8000bf5e:	4450106f          	j	8000dba2 <tinst_tests_gpf+0x29a0>
    8000bf62:	00021517          	auipc	a0,0x21
    8000bf66:	3d650513          	addi	a0,a0,982 # 8002d338 <__func__.0+0x318>
    8000bf6a:	6511e0ef          	jal	8002adba <printf>
    8000bf6e:	02900513          	li	a0,41
    8000bf72:	3371d0ef          	jal	80029aa8 <putchar>
    8000bf76:	4529                	li	a0,10
    8000bf78:	3311d0ef          	jal	80029aa8 <putchar>
    8000bf7c:	cc89                	beqz	s1,8000bf96 <tinst_tests_gpf+0xd94>
    8000bf7e:	00045797          	auipc	a5,0x45
    8000bf82:	0937c783          	lbu	a5,147(a5) # 80051011 <excpt+0x1>
    8000bf86:	c799                	beqz	a5,8000bf94 <tinst_tests_gpf+0xd92>
    8000bf88:	6418                	ld	a4,8(s0)
    8000bf8a:	47dd                	li	a5,23
    8000bf8c:	00f71463          	bne	a4,a5,8000bf94 <tinst_tests_gpf+0xd92>
    8000bf90:	1920206f          	j	8000e122 <tinst_tests_gpf+0x2f20>
    8000bf94:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000bf96:	dddf40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoor_w, "amoor.w", uint32_t);
    8000bf9a:	001007b7          	lui	a5,0x100
    8000bf9e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000bfa2:	07b2                	slli	a5,a5,0xc
    8000bfa4:	4127a92f          	amoor.w	s2,s2,(a5)
    value = amoor_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000bfa8:	00024617          	auipc	a2,0x24
    8000bfac:	ab860613          	addi	a2,a2,-1352 # 8002fa60 <__func__.0+0x2a40>
    8000bfb0:	08200593          	li	a1,130
    8000bfb4:	00021517          	auipc	a0,0x21
    8000bfb8:	36450513          	addi	a0,a0,868 # 8002d318 <__func__.0+0x2f8>
    8000bfbc:	5ff1e0ef          	jal	8002adba <printf>
    8000bfc0:	00045797          	auipc	a5,0x45
    8000bfc4:	0517c783          	lbu	a5,81(a5) # 80051011 <excpt+0x1>
    8000bfc8:	e399                	bnez	a5,8000bfce <tinst_tests_gpf+0xdcc>
    8000bfca:	4b40106f          	j	8000d47e <tinst_tests_gpf+0x227c>
    8000bfce:	6418                	ld	a4,8(s0)
    8000bfd0:	47dd                	li	a5,23
    8000bfd2:	00021597          	auipc	a1,0x21
    8000bfd6:	31e58593          	addi	a1,a1,798 # 8002d2f0 <__func__.0+0x2d0>
    8000bfda:	00f71463          	bne	a4,a5,8000bfe2 <tinst_tests_gpf+0xde0>
    8000bfde:	4540106f          	j	8000d432 <tinst_tests_gpf+0x2230>
    8000bfe2:	00021517          	auipc	a0,0x21
    8000bfe6:	34e50513          	addi	a0,a0,846 # 8002d330 <__func__.0+0x310>
    8000bfea:	5d11e0ef          	jal	8002adba <printf>
    8000bfee:	00045797          	auipc	a5,0x45
    8000bff2:	0237c783          	lbu	a5,35(a5) # 80051011 <excpt+0x1>
    8000bff6:	c799                	beqz	a5,8000c004 <tinst_tests_gpf+0xe02>
    8000bff8:	6418                	ld	a4,8(s0)
    8000bffa:	47dd                	li	a5,23
    8000bffc:	00f71463          	bne	a4,a5,8000c004 <tinst_tests_gpf+0xe02>
    8000c000:	3e50106f          	j	8000dbe4 <tinst_tests_gpf+0x29e2>
    8000c004:	00021517          	auipc	a0,0x21
    8000c008:	33450513          	addi	a0,a0,820 # 8002d338 <__func__.0+0x318>
    8000c00c:	5af1e0ef          	jal	8002adba <printf>
    8000c010:	02900513          	li	a0,41
    8000c014:	2951d0ef          	jal	80029aa8 <putchar>
    8000c018:	4529                	li	a0,10
    8000c01a:	28f1d0ef          	jal	80029aa8 <putchar>
    8000c01e:	cc89                	beqz	s1,8000c038 <tinst_tests_gpf+0xe36>
    8000c020:	00045797          	auipc	a5,0x45
    8000c024:	ff17c783          	lbu	a5,-15(a5) # 80051011 <excpt+0x1>
    8000c028:	c799                	beqz	a5,8000c036 <tinst_tests_gpf+0xe34>
    8000c02a:	6418                	ld	a4,8(s0)
    8000c02c:	47dd                	li	a5,23
    8000c02e:	00f71463          	bne	a4,a5,8000c036 <tinst_tests_gpf+0xe34>
    8000c032:	1620206f          	j	8000e194 <tinst_tests_gpf+0x2f92>
    8000c036:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c038:	d3bf40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomin_w, "amomin.w", uint32_t);
    8000c03c:	001007b7          	lui	a5,0x100
    8000c040:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c044:	07b2                	slli	a5,a5,0xc
    8000c046:	8127a92f          	amomin.w	s2,s2,(a5)
    value = amomin_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000c04a:	00024617          	auipc	a2,0x24
    8000c04e:	a5660613          	addi	a2,a2,-1450 # 8002faa0 <__func__.0+0x2a80>
    8000c052:	08200593          	li	a1,130
    8000c056:	00021517          	auipc	a0,0x21
    8000c05a:	2c250513          	addi	a0,a0,706 # 8002d318 <__func__.0+0x2f8>
    8000c05e:	55d1e0ef          	jal	8002adba <printf>
    8000c062:	00045797          	auipc	a5,0x45
    8000c066:	faf7c783          	lbu	a5,-81(a5) # 80051011 <excpt+0x1>
    8000c06a:	e399                	bnez	a5,8000c070 <tinst_tests_gpf+0xe6e>
    8000c06c:	4a40106f          	j	8000d510 <tinst_tests_gpf+0x230e>
    8000c070:	6418                	ld	a4,8(s0)
    8000c072:	47dd                	li	a5,23
    8000c074:	00021597          	auipc	a1,0x21
    8000c078:	27c58593          	addi	a1,a1,636 # 8002d2f0 <__func__.0+0x2d0>
    8000c07c:	00f71463          	bne	a4,a5,8000c084 <tinst_tests_gpf+0xe82>
    8000c080:	4440106f          	j	8000d4c4 <tinst_tests_gpf+0x22c2>
    8000c084:	00021517          	auipc	a0,0x21
    8000c088:	2ac50513          	addi	a0,a0,684 # 8002d330 <__func__.0+0x310>
    8000c08c:	52f1e0ef          	jal	8002adba <printf>
    8000c090:	00045797          	auipc	a5,0x45
    8000c094:	f817c783          	lbu	a5,-127(a5) # 80051011 <excpt+0x1>
    8000c098:	c799                	beqz	a5,8000c0a6 <tinst_tests_gpf+0xea4>
    8000c09a:	6418                	ld	a4,8(s0)
    8000c09c:	47dd                	li	a5,23
    8000c09e:	00f71463          	bne	a4,a5,8000c0a6 <tinst_tests_gpf+0xea4>
    8000c0a2:	3850106f          	j	8000dc26 <tinst_tests_gpf+0x2a24>
    8000c0a6:	00021517          	auipc	a0,0x21
    8000c0aa:	29250513          	addi	a0,a0,658 # 8002d338 <__func__.0+0x318>
    8000c0ae:	50d1e0ef          	jal	8002adba <printf>
    8000c0b2:	02900513          	li	a0,41
    8000c0b6:	1f31d0ef          	jal	80029aa8 <putchar>
    8000c0ba:	4529                	li	a0,10
    8000c0bc:	1ed1d0ef          	jal	80029aa8 <putchar>
    8000c0c0:	cc89                	beqz	s1,8000c0da <tinst_tests_gpf+0xed8>
    8000c0c2:	00045797          	auipc	a5,0x45
    8000c0c6:	f4f7c783          	lbu	a5,-177(a5) # 80051011 <excpt+0x1>
    8000c0ca:	c799                	beqz	a5,8000c0d8 <tinst_tests_gpf+0xed6>
    8000c0cc:	6418                	ld	a4,8(s0)
    8000c0ce:	47dd                	li	a5,23
    8000c0d0:	00f71463          	bne	a4,a5,8000c0d8 <tinst_tests_gpf+0xed6>
    8000c0d4:	1320206f          	j	8000e206 <tinst_tests_gpf+0x3004>
    8000c0d8:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c0da:	c99f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomax_w, "amomax.w", uint32_t);
    8000c0de:	001007b7          	lui	a5,0x100
    8000c0e2:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c0e6:	07b2                	slli	a5,a5,0xc
    8000c0e8:	a127a92f          	amomax.w	s2,s2,(a5)
    value = amomax_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000c0ec:	00024617          	auipc	a2,0x24
    8000c0f0:	9f460613          	addi	a2,a2,-1548 # 8002fae0 <__func__.0+0x2ac0>
    8000c0f4:	08200593          	li	a1,130
    8000c0f8:	00021517          	auipc	a0,0x21
    8000c0fc:	22050513          	addi	a0,a0,544 # 8002d318 <__func__.0+0x2f8>
    8000c100:	4bb1e0ef          	jal	8002adba <printf>
    8000c104:	00045797          	auipc	a5,0x45
    8000c108:	f0d7c783          	lbu	a5,-243(a5) # 80051011 <excpt+0x1>
    8000c10c:	e399                	bnez	a5,8000c112 <tinst_tests_gpf+0xf10>
    8000c10e:	4980106f          	j	8000d5a6 <tinst_tests_gpf+0x23a4>
    8000c112:	6418                	ld	a4,8(s0)
    8000c114:	47dd                	li	a5,23
    8000c116:	00021597          	auipc	a1,0x21
    8000c11a:	1da58593          	addi	a1,a1,474 # 8002d2f0 <__func__.0+0x2d0>
    8000c11e:	00f71463          	bne	a4,a5,8000c126 <tinst_tests_gpf+0xf24>
    8000c122:	4360106f          	j	8000d558 <tinst_tests_gpf+0x2356>
    8000c126:	00021517          	auipc	a0,0x21
    8000c12a:	20a50513          	addi	a0,a0,522 # 8002d330 <__func__.0+0x310>
    8000c12e:	48d1e0ef          	jal	8002adba <printf>
    8000c132:	00045797          	auipc	a5,0x45
    8000c136:	edf7c783          	lbu	a5,-289(a5) # 80051011 <excpt+0x1>
    8000c13a:	c799                	beqz	a5,8000c148 <tinst_tests_gpf+0xf46>
    8000c13c:	6418                	ld	a4,8(s0)
    8000c13e:	47dd                	li	a5,23
    8000c140:	00f71463          	bne	a4,a5,8000c148 <tinst_tests_gpf+0xf46>
    8000c144:	3250106f          	j	8000dc68 <tinst_tests_gpf+0x2a66>
    8000c148:	00021517          	auipc	a0,0x21
    8000c14c:	1f050513          	addi	a0,a0,496 # 8002d338 <__func__.0+0x318>
    8000c150:	46b1e0ef          	jal	8002adba <printf>
    8000c154:	02900513          	li	a0,41
    8000c158:	1511d0ef          	jal	80029aa8 <putchar>
    8000c15c:	4529                	li	a0,10
    8000c15e:	14b1d0ef          	jal	80029aa8 <putchar>
    8000c162:	cc89                	beqz	s1,8000c17c <tinst_tests_gpf+0xf7a>
    8000c164:	00045797          	auipc	a5,0x45
    8000c168:	ead7c783          	lbu	a5,-339(a5) # 80051011 <excpt+0x1>
    8000c16c:	c799                	beqz	a5,8000c17a <tinst_tests_gpf+0xf78>
    8000c16e:	6418                	ld	a4,8(s0)
    8000c170:	47dd                	li	a5,23
    8000c172:	00f71463          	bne	a4,a5,8000c17a <tinst_tests_gpf+0xf78>
    8000c176:	0d20206f          	j	8000e248 <tinst_tests_gpf+0x3046>
    8000c17a:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c17c:	bf7f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amominu_w, "amominu.w", uint32_t);
    8000c180:	001007b7          	lui	a5,0x100
    8000c184:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c188:	07b2                	slli	a5,a5,0xc
    8000c18a:	c127a92f          	amominu.w	s2,s2,(a5)
    value = amominu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000c18e:	00024617          	auipc	a2,0x24
    8000c192:	99260613          	addi	a2,a2,-1646 # 8002fb20 <__func__.0+0x2b00>
    8000c196:	08200593          	li	a1,130
    8000c19a:	00021517          	auipc	a0,0x21
    8000c19e:	17e50513          	addi	a0,a0,382 # 8002d318 <__func__.0+0x2f8>
    8000c1a2:	4191e0ef          	jal	8002adba <printf>
    8000c1a6:	00045797          	auipc	a5,0x45
    8000c1aa:	e6b7c783          	lbu	a5,-405(a5) # 80051011 <excpt+0x1>
    8000c1ae:	e399                	bnez	a5,8000c1b4 <tinst_tests_gpf+0xfb2>
    8000c1b0:	4920106f          	j	8000d642 <tinst_tests_gpf+0x2440>
    8000c1b4:	6418                	ld	a4,8(s0)
    8000c1b6:	47dd                	li	a5,23
    8000c1b8:	00021597          	auipc	a1,0x21
    8000c1bc:	13858593          	addi	a1,a1,312 # 8002d2f0 <__func__.0+0x2d0>
    8000c1c0:	00f71463          	bne	a4,a5,8000c1c8 <tinst_tests_gpf+0xfc6>
    8000c1c4:	4300106f          	j	8000d5f4 <tinst_tests_gpf+0x23f2>
    8000c1c8:	00021517          	auipc	a0,0x21
    8000c1cc:	16850513          	addi	a0,a0,360 # 8002d330 <__func__.0+0x310>
    8000c1d0:	3eb1e0ef          	jal	8002adba <printf>
    8000c1d4:	00045797          	auipc	a5,0x45
    8000c1d8:	e3d7c783          	lbu	a5,-451(a5) # 80051011 <excpt+0x1>
    8000c1dc:	c799                	beqz	a5,8000c1ea <tinst_tests_gpf+0xfe8>
    8000c1de:	6418                	ld	a4,8(s0)
    8000c1e0:	47dd                	li	a5,23
    8000c1e2:	00f71463          	bne	a4,a5,8000c1ea <tinst_tests_gpf+0xfe8>
    8000c1e6:	2c50106f          	j	8000dcaa <tinst_tests_gpf+0x2aa8>
    8000c1ea:	00021517          	auipc	a0,0x21
    8000c1ee:	14e50513          	addi	a0,a0,334 # 8002d338 <__func__.0+0x318>
    8000c1f2:	3c91e0ef          	jal	8002adba <printf>
    8000c1f6:	02900513          	li	a0,41
    8000c1fa:	0af1d0ef          	jal	80029aa8 <putchar>
    8000c1fe:	4529                	li	a0,10
    8000c200:	0a91d0ef          	jal	80029aa8 <putchar>
    8000c204:	cc89                	beqz	s1,8000c21e <tinst_tests_gpf+0x101c>
    8000c206:	00045797          	auipc	a5,0x45
    8000c20a:	e0b7c783          	lbu	a5,-501(a5) # 80051011 <excpt+0x1>
    8000c20e:	c799                	beqz	a5,8000c21c <tinst_tests_gpf+0x101a>
    8000c210:	6418                	ld	a4,8(s0)
    8000c212:	47dd                	li	a5,23
    8000c214:	00f71463          	bne	a4,a5,8000c21c <tinst_tests_gpf+0x101a>
    8000c218:	0720206f          	j	8000e28a <tinst_tests_gpf+0x3088>
    8000c21c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c21e:	b55f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_w, "amomaxu.w", uint32_t);
    8000c222:	001007b7          	lui	a5,0x100
    8000c226:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c22a:	07b2                	slli	a5,a5,0xc
    8000c22c:	e127a92f          	amomaxu.w	s2,s2,(a5)
    value = amomaxu_w(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c230:	00024617          	auipc	a2,0x24
    8000c234:	93860613          	addi	a2,a2,-1736 # 8002fb68 <__func__.0+0x2b48>
    8000c238:	08200593          	li	a1,130
    8000c23c:	00021517          	auipc	a0,0x21
    8000c240:	0dc50513          	addi	a0,a0,220 # 8002d318 <__func__.0+0x2f8>
    8000c244:	3771e0ef          	jal	8002adba <printf>
    8000c248:	00045797          	auipc	a5,0x45
    8000c24c:	dc97c783          	lbu	a5,-567(a5) # 80051011 <excpt+0x1>
    value = amomaxu_w(vaddr_f,value);
    8000c250:	1902                	slli	s2,s2,0x20
    8000c252:	02095913          	srli	s2,s2,0x20
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000c256:	e399                	bnez	a5,8000c25c <tinst_tests_gpf+0x105a>
    8000c258:	4860106f          	j	8000d6de <tinst_tests_gpf+0x24dc>
    8000c25c:	6418                	ld	a4,8(s0)
    8000c25e:	47dd                	li	a5,23
    8000c260:	00021597          	auipc	a1,0x21
    8000c264:	09058593          	addi	a1,a1,144 # 8002d2f0 <__func__.0+0x2d0>
    8000c268:	00f71463          	bne	a4,a5,8000c270 <tinst_tests_gpf+0x106e>
    8000c26c:	4240106f          	j	8000d690 <tinst_tests_gpf+0x248e>
    8000c270:	00021517          	auipc	a0,0x21
    8000c274:	0c050513          	addi	a0,a0,192 # 8002d330 <__func__.0+0x310>
    8000c278:	3431e0ef          	jal	8002adba <printf>
    8000c27c:	00045797          	auipc	a5,0x45
    8000c280:	d957c783          	lbu	a5,-619(a5) # 80051011 <excpt+0x1>
    8000c284:	c799                	beqz	a5,8000c292 <tinst_tests_gpf+0x1090>
    8000c286:	6418                	ld	a4,8(s0)
    8000c288:	47dd                	li	a5,23
    8000c28a:	00f71463          	bne	a4,a5,8000c292 <tinst_tests_gpf+0x1090>
    8000c28e:	25f0106f          	j	8000dcec <tinst_tests_gpf+0x2aea>
    8000c292:	00021517          	auipc	a0,0x21
    8000c296:	0a650513          	addi	a0,a0,166 # 8002d338 <__func__.0+0x318>
    8000c29a:	3211e0ef          	jal	8002adba <printf>
    8000c29e:	02900513          	li	a0,41
    8000c2a2:	0071d0ef          	jal	80029aa8 <putchar>
    8000c2a6:	4529                	li	a0,10
    8000c2a8:	0011d0ef          	jal	80029aa8 <putchar>
    8000c2ac:	cc89                	beqz	s1,8000c2c6 <tinst_tests_gpf+0x10c4>
    8000c2ae:	00045797          	auipc	a5,0x45
    8000c2b2:	d637c783          	lbu	a5,-669(a5) # 80051011 <excpt+0x1>
    8000c2b6:	c799                	beqz	a5,8000c2c4 <tinst_tests_gpf+0x10c2>
    8000c2b8:	6418                	ld	a4,8(s0)
    8000c2ba:	47dd                	li	a5,23
    8000c2bc:	00f71463          	bne	a4,a5,8000c2c4 <tinst_tests_gpf+0x10c2>
    8000c2c0:	00c0206f          	j	8000e2cc <tinst_tests_gpf+0x30ca>
    8000c2c4:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c2c6:	aadf40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    8000c2ca:	001007b7          	lui	a5,0x100
    8000c2ce:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c2d2:	07b2                	slli	a5,a5,0xc
    8000c2d4:	0927b92f          	amoswap.d	s2,s2,(a5)
    value = amoswap_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000c2d8:	00024617          	auipc	a2,0x24
    8000c2dc:	8d860613          	addi	a2,a2,-1832 # 8002fbb0 <__func__.0+0x2b90>
    8000c2e0:	08200593          	li	a1,130
    8000c2e4:	00021517          	auipc	a0,0x21
    8000c2e8:	03450513          	addi	a0,a0,52 # 8002d318 <__func__.0+0x2f8>
    8000c2ec:	2cf1e0ef          	jal	8002adba <printf>
    8000c2f0:	00045797          	auipc	a5,0x45
    8000c2f4:	d217c783          	lbu	a5,-735(a5) # 80051011 <excpt+0x1>
    8000c2f8:	e399                	bnez	a5,8000c2fe <tinst_tests_gpf+0x10fc>
    8000c2fa:	4800106f          	j	8000d77a <tinst_tests_gpf+0x2578>
    8000c2fe:	6418                	ld	a4,8(s0)
    8000c300:	47dd                	li	a5,23
    8000c302:	00021597          	auipc	a1,0x21
    8000c306:	fee58593          	addi	a1,a1,-18 # 8002d2f0 <__func__.0+0x2d0>
    8000c30a:	00f71463          	bne	a4,a5,8000c312 <tinst_tests_gpf+0x1110>
    8000c30e:	41e0106f          	j	8000d72c <tinst_tests_gpf+0x252a>
    8000c312:	00021517          	auipc	a0,0x21
    8000c316:	01e50513          	addi	a0,a0,30 # 8002d330 <__func__.0+0x310>
    8000c31a:	2a11e0ef          	jal	8002adba <printf>
    8000c31e:	00045797          	auipc	a5,0x45
    8000c322:	cf37c783          	lbu	a5,-781(a5) # 80051011 <excpt+0x1>
    8000c326:	c799                	beqz	a5,8000c334 <tinst_tests_gpf+0x1132>
    8000c328:	6418                	ld	a4,8(s0)
    8000c32a:	47dd                	li	a5,23
    8000c32c:	00f71463          	bne	a4,a5,8000c334 <tinst_tests_gpf+0x1132>
    8000c330:	1ff0106f          	j	8000dd2e <tinst_tests_gpf+0x2b2c>
    8000c334:	00021517          	auipc	a0,0x21
    8000c338:	00450513          	addi	a0,a0,4 # 8002d338 <__func__.0+0x318>
    8000c33c:	27f1e0ef          	jal	8002adba <printf>
    8000c340:	02900513          	li	a0,41
    8000c344:	7641d0ef          	jal	80029aa8 <putchar>
    8000c348:	4529                	li	a0,10
    8000c34a:	75e1d0ef          	jal	80029aa8 <putchar>
    8000c34e:	cc89                	beqz	s1,8000c368 <tinst_tests_gpf+0x1166>
    8000c350:	00045797          	auipc	a5,0x45
    8000c354:	cc17c783          	lbu	a5,-831(a5) # 80051011 <excpt+0x1>
    8000c358:	c799                	beqz	a5,8000c366 <tinst_tests_gpf+0x1164>
    8000c35a:	6418                	ld	a4,8(s0)
    8000c35c:	47dd                	li	a5,23
    8000c35e:	00f71463          	bne	a4,a5,8000c366 <tinst_tests_gpf+0x1164>
    8000c362:	7ad0106f          	j	8000e30e <tinst_tests_gpf+0x310c>
    8000c366:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c368:	a0bf40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8000c36c:	001007b7          	lui	a5,0x100
    8000c370:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c374:	07b2                	slli	a5,a5,0xc
    8000c376:	0127b92f          	amoadd.d	s2,s2,(a5)
    value = amoadd_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000c37a:	00024617          	auipc	a2,0x24
    8000c37e:	87e60613          	addi	a2,a2,-1922 # 8002fbf8 <__func__.0+0x2bd8>
    8000c382:	08200593          	li	a1,130
    8000c386:	00021517          	auipc	a0,0x21
    8000c38a:	f9250513          	addi	a0,a0,-110 # 8002d318 <__func__.0+0x2f8>
    8000c38e:	22d1e0ef          	jal	8002adba <printf>
    8000c392:	00045797          	auipc	a5,0x45
    8000c396:	c7f7c783          	lbu	a5,-897(a5) # 80051011 <excpt+0x1>
    8000c39a:	e399                	bnez	a5,8000c3a0 <tinst_tests_gpf+0x119e>
    8000c39c:	47a0106f          	j	8000d816 <tinst_tests_gpf+0x2614>
    8000c3a0:	6418                	ld	a4,8(s0)
    8000c3a2:	47dd                	li	a5,23
    8000c3a4:	00021597          	auipc	a1,0x21
    8000c3a8:	f4c58593          	addi	a1,a1,-180 # 8002d2f0 <__func__.0+0x2d0>
    8000c3ac:	00f71463          	bne	a4,a5,8000c3b4 <tinst_tests_gpf+0x11b2>
    8000c3b0:	4180106f          	j	8000d7c8 <tinst_tests_gpf+0x25c6>
    8000c3b4:	00021517          	auipc	a0,0x21
    8000c3b8:	f7c50513          	addi	a0,a0,-132 # 8002d330 <__func__.0+0x310>
    8000c3bc:	1ff1e0ef          	jal	8002adba <printf>
    8000c3c0:	00045797          	auipc	a5,0x45
    8000c3c4:	c517c783          	lbu	a5,-943(a5) # 80051011 <excpt+0x1>
    8000c3c8:	c799                	beqz	a5,8000c3d6 <tinst_tests_gpf+0x11d4>
    8000c3ca:	6418                	ld	a4,8(s0)
    8000c3cc:	47dd                	li	a5,23
    8000c3ce:	00f71463          	bne	a4,a5,8000c3d6 <tinst_tests_gpf+0x11d4>
    8000c3d2:	19f0106f          	j	8000dd70 <tinst_tests_gpf+0x2b6e>
    8000c3d6:	00021517          	auipc	a0,0x21
    8000c3da:	f6250513          	addi	a0,a0,-158 # 8002d338 <__func__.0+0x318>
    8000c3de:	1dd1e0ef          	jal	8002adba <printf>
    8000c3e2:	02900513          	li	a0,41
    8000c3e6:	6c21d0ef          	jal	80029aa8 <putchar>
    8000c3ea:	4529                	li	a0,10
    8000c3ec:	6bc1d0ef          	jal	80029aa8 <putchar>
    8000c3f0:	cc89                	beqz	s1,8000c40a <tinst_tests_gpf+0x1208>
    8000c3f2:	00045797          	auipc	a5,0x45
    8000c3f6:	c1f7c783          	lbu	a5,-993(a5) # 80051011 <excpt+0x1>
    8000c3fa:	c799                	beqz	a5,8000c408 <tinst_tests_gpf+0x1206>
    8000c3fc:	6418                	ld	a4,8(s0)
    8000c3fe:	47dd                	li	a5,23
    8000c400:	00f71463          	bne	a4,a5,8000c408 <tinst_tests_gpf+0x1206>
    8000c404:	74d0106f          	j	8000e350 <tinst_tests_gpf+0x314e>
    8000c408:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c40a:	969f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoxor_d, "amoxor.d", uint64_t);
    8000c40e:	001007b7          	lui	a5,0x100
    8000c412:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c416:	07b2                	slli	a5,a5,0xc
    8000c418:	2127b92f          	amoxor.d	s2,s2,(a5)
    value = amoxor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000c41c:	00024617          	auipc	a2,0x24
    8000c420:	81c60613          	addi	a2,a2,-2020 # 8002fc38 <__func__.0+0x2c18>
    8000c424:	08200593          	li	a1,130
    8000c428:	00021517          	auipc	a0,0x21
    8000c42c:	ef050513          	addi	a0,a0,-272 # 8002d318 <__func__.0+0x2f8>
    8000c430:	18b1e0ef          	jal	8002adba <printf>
    8000c434:	00045797          	auipc	a5,0x45
    8000c438:	bdd7c783          	lbu	a5,-1059(a5) # 80051011 <excpt+0x1>
    8000c43c:	e399                	bnez	a5,8000c442 <tinst_tests_gpf+0x1240>
    8000c43e:	4620106f          	j	8000d8a0 <tinst_tests_gpf+0x269e>
    8000c442:	6418                	ld	a4,8(s0)
    8000c444:	47dd                	li	a5,23
    8000c446:	00021597          	auipc	a1,0x21
    8000c44a:	eaa58593          	addi	a1,a1,-342 # 8002d2f0 <__func__.0+0x2d0>
    8000c44e:	00f71463          	bne	a4,a5,8000c456 <tinst_tests_gpf+0x1254>
    8000c452:	4000106f          	j	8000d852 <tinst_tests_gpf+0x2650>
    8000c456:	00021517          	auipc	a0,0x21
    8000c45a:	eda50513          	addi	a0,a0,-294 # 8002d330 <__func__.0+0x310>
    8000c45e:	15d1e0ef          	jal	8002adba <printf>
    8000c462:	00045797          	auipc	a5,0x45
    8000c466:	baf7c783          	lbu	a5,-1105(a5) # 80051011 <excpt+0x1>
    8000c46a:	c799                	beqz	a5,8000c478 <tinst_tests_gpf+0x1276>
    8000c46c:	6418                	ld	a4,8(s0)
    8000c46e:	47dd                	li	a5,23
    8000c470:	00f71463          	bne	a4,a5,8000c478 <tinst_tests_gpf+0x1276>
    8000c474:	13f0106f          	j	8000ddb2 <tinst_tests_gpf+0x2bb0>
    8000c478:	00021517          	auipc	a0,0x21
    8000c47c:	ec050513          	addi	a0,a0,-320 # 8002d338 <__func__.0+0x318>
    8000c480:	13b1e0ef          	jal	8002adba <printf>
    8000c484:	02900513          	li	a0,41
    8000c488:	6201d0ef          	jal	80029aa8 <putchar>
    8000c48c:	4529                	li	a0,10
    8000c48e:	61a1d0ef          	jal	80029aa8 <putchar>
    8000c492:	cc89                	beqz	s1,8000c4ac <tinst_tests_gpf+0x12aa>
    8000c494:	00045797          	auipc	a5,0x45
    8000c498:	b7d7c783          	lbu	a5,-1155(a5) # 80051011 <excpt+0x1>
    8000c49c:	c799                	beqz	a5,8000c4aa <tinst_tests_gpf+0x12a8>
    8000c49e:	6418                	ld	a4,8(s0)
    8000c4a0:	47dd                	li	a5,23
    8000c4a2:	00f71463          	bne	a4,a5,8000c4aa <tinst_tests_gpf+0x12a8>
    8000c4a6:	6ed0106f          	j	8000e392 <tinst_tests_gpf+0x3190>
    8000c4aa:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c4ac:	8c7f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8000c4b0:	001007b7          	lui	a5,0x100
    8000c4b4:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c4b8:	07b2                	slli	a5,a5,0xc
    8000c4ba:	6127b92f          	amoand.d	s2,s2,(a5)
    value = amoand_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000c4be:	00023617          	auipc	a2,0x23
    8000c4c2:	7ba60613          	addi	a2,a2,1978 # 8002fc78 <__func__.0+0x2c58>
    8000c4c6:	08200593          	li	a1,130
    8000c4ca:	00021517          	auipc	a0,0x21
    8000c4ce:	e4e50513          	addi	a0,a0,-434 # 8002d318 <__func__.0+0x2f8>
    8000c4d2:	0e91e0ef          	jal	8002adba <printf>
    8000c4d6:	00045797          	auipc	a5,0x45
    8000c4da:	b3b7c783          	lbu	a5,-1221(a5) # 80051011 <excpt+0x1>
    8000c4de:	e399                	bnez	a5,8000c4e4 <tinst_tests_gpf+0x12e2>
    8000c4e0:	44a0106f          	j	8000d92a <tinst_tests_gpf+0x2728>
    8000c4e4:	6418                	ld	a4,8(s0)
    8000c4e6:	47dd                	li	a5,23
    8000c4e8:	00021597          	auipc	a1,0x21
    8000c4ec:	e0858593          	addi	a1,a1,-504 # 8002d2f0 <__func__.0+0x2d0>
    8000c4f0:	00f71463          	bne	a4,a5,8000c4f8 <tinst_tests_gpf+0x12f6>
    8000c4f4:	3e80106f          	j	8000d8dc <tinst_tests_gpf+0x26da>
    8000c4f8:	00021517          	auipc	a0,0x21
    8000c4fc:	e3850513          	addi	a0,a0,-456 # 8002d330 <__func__.0+0x310>
    8000c500:	0bb1e0ef          	jal	8002adba <printf>
    8000c504:	00045797          	auipc	a5,0x45
    8000c508:	b0d7c783          	lbu	a5,-1267(a5) # 80051011 <excpt+0x1>
    8000c50c:	c799                	beqz	a5,8000c51a <tinst_tests_gpf+0x1318>
    8000c50e:	6418                	ld	a4,8(s0)
    8000c510:	47dd                	li	a5,23
    8000c512:	00f71463          	bne	a4,a5,8000c51a <tinst_tests_gpf+0x1318>
    8000c516:	0df0106f          	j	8000ddf4 <tinst_tests_gpf+0x2bf2>
    8000c51a:	00021517          	auipc	a0,0x21
    8000c51e:	e1e50513          	addi	a0,a0,-482 # 8002d338 <__func__.0+0x318>
    8000c522:	0991e0ef          	jal	8002adba <printf>
    8000c526:	02900513          	li	a0,41
    8000c52a:	57e1d0ef          	jal	80029aa8 <putchar>
    8000c52e:	4529                	li	a0,10
    8000c530:	5781d0ef          	jal	80029aa8 <putchar>
    8000c534:	cc89                	beqz	s1,8000c54e <tinst_tests_gpf+0x134c>
    8000c536:	00045797          	auipc	a5,0x45
    8000c53a:	adb7c783          	lbu	a5,-1317(a5) # 80051011 <excpt+0x1>
    8000c53e:	c799                	beqz	a5,8000c54c <tinst_tests_gpf+0x134a>
    8000c540:	6418                	ld	a4,8(s0)
    8000c542:	47dd                	li	a5,23
    8000c544:	00f71463          	bne	a4,a5,8000c54c <tinst_tests_gpf+0x134a>
    8000c548:	68d0106f          	j	8000e3d4 <tinst_tests_gpf+0x31d2>
    8000c54c:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c54e:	825f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8000c552:	001007b7          	lui	a5,0x100
    8000c556:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c55a:	07b2                	slli	a5,a5,0xc
    8000c55c:	4127b92f          	amoor.d	s2,s2,(a5)
    value = amoor_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000c560:	00023617          	auipc	a2,0x23
    8000c564:	75860613          	addi	a2,a2,1880 # 8002fcb8 <__func__.0+0x2c98>
    8000c568:	08200593          	li	a1,130
    8000c56c:	00021517          	auipc	a0,0x21
    8000c570:	dac50513          	addi	a0,a0,-596 # 8002d318 <__func__.0+0x2f8>
    8000c574:	0471e0ef          	jal	8002adba <printf>
    8000c578:	00045797          	auipc	a5,0x45
    8000c57c:	a997c783          	lbu	a5,-1383(a5) # 80051011 <excpt+0x1>
    8000c580:	e399                	bnez	a5,8000c586 <tinst_tests_gpf+0x1384>
    8000c582:	4360106f          	j	8000d9b8 <tinst_tests_gpf+0x27b6>
    8000c586:	6418                	ld	a4,8(s0)
    8000c588:	47dd                	li	a5,23
    8000c58a:	00021597          	auipc	a1,0x21
    8000c58e:	d6658593          	addi	a1,a1,-666 # 8002d2f0 <__func__.0+0x2d0>
    8000c592:	00f71463          	bne	a4,a5,8000c59a <tinst_tests_gpf+0x1398>
    8000c596:	3d40106f          	j	8000d96a <tinst_tests_gpf+0x2768>
    8000c59a:	00021517          	auipc	a0,0x21
    8000c59e:	d9650513          	addi	a0,a0,-618 # 8002d330 <__func__.0+0x310>
    8000c5a2:	0191e0ef          	jal	8002adba <printf>
    8000c5a6:	00045797          	auipc	a5,0x45
    8000c5aa:	a6b7c783          	lbu	a5,-1429(a5) # 80051011 <excpt+0x1>
    8000c5ae:	c799                	beqz	a5,8000c5bc <tinst_tests_gpf+0x13ba>
    8000c5b0:	6418                	ld	a4,8(s0)
    8000c5b2:	47dd                	li	a5,23
    8000c5b4:	00f71463          	bne	a4,a5,8000c5bc <tinst_tests_gpf+0x13ba>
    8000c5b8:	6a50106f          	j	8000e45c <tinst_tests_gpf+0x325a>
    8000c5bc:	00021517          	auipc	a0,0x21
    8000c5c0:	d7c50513          	addi	a0,a0,-644 # 8002d338 <__func__.0+0x318>
    8000c5c4:	7f61e0ef          	jal	8002adba <printf>
    8000c5c8:	02900513          	li	a0,41
    8000c5cc:	4dc1d0ef          	jal	80029aa8 <putchar>
    8000c5d0:	4529                	li	a0,10
    8000c5d2:	4d61d0ef          	jal	80029aa8 <putchar>
    8000c5d6:	cc89                	beqz	s1,8000c5f0 <tinst_tests_gpf+0x13ee>
    8000c5d8:	00045797          	auipc	a5,0x45
    8000c5dc:	a397c783          	lbu	a5,-1479(a5) # 80051011 <excpt+0x1>
    8000c5e0:	c799                	beqz	a5,8000c5ee <tinst_tests_gpf+0x13ec>
    8000c5e2:	6418                	ld	a4,8(s0)
    8000c5e4:	47dd                	li	a5,23
    8000c5e6:	00f71463          	bne	a4,a5,8000c5ee <tinst_tests_gpf+0x13ec>
    8000c5ea:	62f0106f          	j	8000e418 <tinst_tests_gpf+0x3216>
    8000c5ee:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c5f0:	f82f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8000c5f4:	001007b7          	lui	a5,0x100
    8000c5f8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c5fc:	07b2                	slli	a5,a5,0xc
    8000c5fe:	8127b92f          	amomin.d	s2,s2,(a5)
    value = amomin_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000c602:	00023617          	auipc	a2,0x23
    8000c606:	6f660613          	addi	a2,a2,1782 # 8002fcf8 <__func__.0+0x2cd8>
    8000c60a:	08200593          	li	a1,130
    8000c60e:	00021517          	auipc	a0,0x21
    8000c612:	d0a50513          	addi	a0,a0,-758 # 8002d318 <__func__.0+0x2f8>
    8000c616:	7a41e0ef          	jal	8002adba <printf>
    8000c61a:	00045797          	auipc	a5,0x45
    8000c61e:	9f77c783          	lbu	a5,-1545(a5) # 80051011 <excpt+0x1>
    8000c622:	e399                	bnez	a5,8000c628 <tinst_tests_gpf+0x1426>
    8000c624:	4220106f          	j	8000da46 <tinst_tests_gpf+0x2844>
    8000c628:	6418                	ld	a4,8(s0)
    8000c62a:	47dd                	li	a5,23
    8000c62c:	00021597          	auipc	a1,0x21
    8000c630:	cc458593          	addi	a1,a1,-828 # 8002d2f0 <__func__.0+0x2d0>
    8000c634:	00f71463          	bne	a4,a5,8000c63c <tinst_tests_gpf+0x143a>
    8000c638:	3c00106f          	j	8000d9f8 <tinst_tests_gpf+0x27f6>
    8000c63c:	00021517          	auipc	a0,0x21
    8000c640:	cf450513          	addi	a0,a0,-780 # 8002d330 <__func__.0+0x310>
    8000c644:	7761e0ef          	jal	8002adba <printf>
    8000c648:	00045797          	auipc	a5,0x45
    8000c64c:	9c97c783          	lbu	a5,-1591(a5) # 80051011 <excpt+0x1>
    8000c650:	c799                	beqz	a5,8000c65e <tinst_tests_gpf+0x145c>
    8000c652:	6418                	ld	a4,8(s0)
    8000c654:	47dd                	li	a5,23
    8000c656:	00f71463          	bne	a4,a5,8000c65e <tinst_tests_gpf+0x145c>
    8000c65a:	6470106f          	j	8000e4a0 <tinst_tests_gpf+0x329e>
    8000c65e:	00021517          	auipc	a0,0x21
    8000c662:	cda50513          	addi	a0,a0,-806 # 8002d338 <__func__.0+0x318>
    8000c666:	7541e0ef          	jal	8002adba <printf>
    8000c66a:	02900513          	li	a0,41
    8000c66e:	43a1d0ef          	jal	80029aa8 <putchar>
    8000c672:	4529                	li	a0,10
    8000c674:	4341d0ef          	jal	80029aa8 <putchar>
    8000c678:	c889                	beqz	s1,8000c68a <tinst_tests_gpf+0x1488>
    8000c67a:	00045797          	auipc	a5,0x45
    8000c67e:	9977c783          	lbu	a5,-1641(a5) # 80051011 <excpt+0x1>
    8000c682:	c399                	beqz	a5,8000c688 <tinst_tests_gpf+0x1486>
    8000c684:	7b20106f          	j	8000de36 <tinst_tests_gpf+0x2c34>
    8000c688:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c68a:	ee8f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    8000c68e:	001007b7          	lui	a5,0x100
    8000c692:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c696:	07b2                	slli	a5,a5,0xc
    8000c698:	a127b92f          	amomax.d	s2,s2,(a5)
    value = amomax_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000c69c:	00023617          	auipc	a2,0x23
    8000c6a0:	69c60613          	addi	a2,a2,1692 # 8002fd38 <__func__.0+0x2d18>
    8000c6a4:	08200593          	li	a1,130
    8000c6a8:	00021517          	auipc	a0,0x21
    8000c6ac:	c7050513          	addi	a0,a0,-912 # 8002d318 <__func__.0+0x2f8>
    8000c6b0:	70a1e0ef          	jal	8002adba <printf>
    8000c6b4:	00045797          	auipc	a5,0x45
    8000c6b8:	95d7c783          	lbu	a5,-1699(a5) # 80051011 <excpt+0x1>
    8000c6bc:	e399                	bnez	a5,8000c6c2 <tinst_tests_gpf+0x14c0>
    8000c6be:	4240106f          	j	8000dae2 <tinst_tests_gpf+0x28e0>
    8000c6c2:	6418                	ld	a4,8(s0)
    8000c6c4:	47dd                	li	a5,23
    8000c6c6:	00021597          	auipc	a1,0x21
    8000c6ca:	c2a58593          	addi	a1,a1,-982 # 8002d2f0 <__func__.0+0x2d0>
    8000c6ce:	00f71463          	bne	a4,a5,8000c6d6 <tinst_tests_gpf+0x14d4>
    8000c6d2:	3c20106f          	j	8000da94 <tinst_tests_gpf+0x2892>
    8000c6d6:	00021517          	auipc	a0,0x21
    8000c6da:	c5a50513          	addi	a0,a0,-934 # 8002d330 <__func__.0+0x310>
    8000c6de:	6dc1e0ef          	jal	8002adba <printf>
    8000c6e2:	00045797          	auipc	a5,0x45
    8000c6e6:	92f7c783          	lbu	a5,-1745(a5) # 80051011 <excpt+0x1>
    8000c6ea:	c799                	beqz	a5,8000c6f8 <tinst_tests_gpf+0x14f6>
    8000c6ec:	6418                	ld	a4,8(s0)
    8000c6ee:	47dd                	li	a5,23
    8000c6f0:	00f71463          	bne	a4,a5,8000c6f8 <tinst_tests_gpf+0x14f6>
    8000c6f4:	5f10106f          	j	8000e4e4 <tinst_tests_gpf+0x32e2>
    8000c6f8:	00021517          	auipc	a0,0x21
    8000c6fc:	c4050513          	addi	a0,a0,-960 # 8002d338 <__func__.0+0x318>
    8000c700:	6ba1e0ef          	jal	8002adba <printf>
    8000c704:	02900513          	li	a0,41
    8000c708:	3a01d0ef          	jal	80029aa8 <putchar>
    8000c70c:	4529                	li	a0,10
    8000c70e:	39a1d0ef          	jal	80029aa8 <putchar>
    8000c712:	c889                	beqz	s1,8000c724 <tinst_tests_gpf+0x1522>
    8000c714:	00045797          	auipc	a5,0x45
    8000c718:	8fd7c783          	lbu	a5,-1795(a5) # 80051011 <excpt+0x1>
    8000c71c:	c399                	beqz	a5,8000c722 <tinst_tests_gpf+0x1520>
    8000c71e:	7660106f          	j	8000de84 <tinst_tests_gpf+0x2c82>
    8000c722:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c724:	e4ef40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8000c728:	001007b7          	lui	a5,0x100
    8000c72c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c730:	07b2                	slli	a5,a5,0xc
    8000c732:	c127b92f          	amominu.d	s2,s2,(a5)
    value = amominu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000c736:	00023617          	auipc	a2,0x23
    8000c73a:	64260613          	addi	a2,a2,1602 # 8002fd78 <__func__.0+0x2d58>
    8000c73e:	08200593          	li	a1,130
    8000c742:	00021517          	auipc	a0,0x21
    8000c746:	bd650513          	addi	a0,a0,-1066 # 8002d318 <__func__.0+0x2f8>
    8000c74a:	6701e0ef          	jal	8002adba <printf>
    8000c74e:	00045797          	auipc	a5,0x45
    8000c752:	8c37c783          	lbu	a5,-1853(a5) # 80051011 <excpt+0x1>
    8000c756:	e399                	bnez	a5,8000c75c <tinst_tests_gpf+0x155a>
    8000c758:	3e40106f          	j	8000db3c <tinst_tests_gpf+0x293a>
    8000c75c:	6418                	ld	a4,8(s0)
    8000c75e:	47dd                	li	a5,23
    8000c760:	00021597          	auipc	a1,0x21
    8000c764:	b9058593          	addi	a1,a1,-1136 # 8002d2f0 <__func__.0+0x2d0>
    8000c768:	00f71463          	bne	a4,a5,8000c770 <tinst_tests_gpf+0x156e>
    8000c76c:	3820106f          	j	8000daee <tinst_tests_gpf+0x28ec>
    8000c770:	00021517          	auipc	a0,0x21
    8000c774:	bc050513          	addi	a0,a0,-1088 # 8002d330 <__func__.0+0x310>
    8000c778:	6421e0ef          	jal	8002adba <printf>
    8000c77c:	00045797          	auipc	a5,0x45
    8000c780:	8957c783          	lbu	a5,-1899(a5) # 80051011 <excpt+0x1>
    8000c784:	c799                	beqz	a5,8000c792 <tinst_tests_gpf+0x1590>
    8000c786:	6418                	ld	a4,8(s0)
    8000c788:	47dd                	li	a5,23
    8000c78a:	00f71463          	bne	a4,a5,8000c792 <tinst_tests_gpf+0x1590>
    8000c78e:	59b0106f          	j	8000e528 <tinst_tests_gpf+0x3326>
    8000c792:	00021517          	auipc	a0,0x21
    8000c796:	ba650513          	addi	a0,a0,-1114 # 8002d338 <__func__.0+0x318>
    8000c79a:	6201e0ef          	jal	8002adba <printf>
    8000c79e:	02900513          	li	a0,41
    8000c7a2:	3061d0ef          	jal	80029aa8 <putchar>
    8000c7a6:	4529                	li	a0,10
    8000c7a8:	3001d0ef          	jal	80029aa8 <putchar>
    8000c7ac:	c889                	beqz	s1,8000c7be <tinst_tests_gpf+0x15bc>
    8000c7ae:	00045797          	auipc	a5,0x45
    8000c7b2:	8637c783          	lbu	a5,-1949(a5) # 80051011 <excpt+0x1>
    8000c7b6:	c399                	beqz	a5,8000c7bc <tinst_tests_gpf+0x15ba>
    8000c7b8:	71a0106f          	j	8000ded2 <tinst_tests_gpf+0x2cd0>
    8000c7bc:	4481                	li	s1,0
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_SETUP_EXCEPT();
    8000c7be:	db4f40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomaxu_d, "amomaxu.d", uint64_t);
    8000c7c2:	001007b7          	lui	a5,0x100
    8000c7c6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8000c7ca:	07b2                	slli	a5,a5,0xc
    8000c7cc:	e127b92f          	amomaxu.d	s2,s2,(a5)
    value = amomaxu_d(vaddr_f,value);
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c7d0:	00023617          	auipc	a2,0x23
    8000c7d4:	5f060613          	addi	a2,a2,1520 # 8002fdc0 <__func__.0+0x2da0>
    8000c7d8:	08200593          	li	a1,130
    8000c7dc:	00021517          	auipc	a0,0x21
    8000c7e0:	b3c50513          	addi	a0,a0,-1220 # 8002d318 <__func__.0+0x2f8>
    8000c7e4:	5d61e0ef          	jal	8002adba <printf>
    8000c7e8:	00045797          	auipc	a5,0x45
    8000c7ec:	8297c783          	lbu	a5,-2007(a5) # 80051011 <excpt+0x1>
    8000c7f0:	e399                	bnez	a5,8000c7f6 <tinst_tests_gpf+0x15f4>
    8000c7f2:	3a40106f          	j	8000db96 <tinst_tests_gpf+0x2994>
    8000c7f6:	6418                	ld	a4,8(s0)
    8000c7f8:	47dd                	li	a5,23
    8000c7fa:	00021597          	auipc	a1,0x21
    8000c7fe:	af658593          	addi	a1,a1,-1290 # 8002d2f0 <__func__.0+0x2d0>
    8000c802:	00f71463          	bne	a4,a5,8000c80a <tinst_tests_gpf+0x1608>
    8000c806:	3420106f          	j	8000db48 <tinst_tests_gpf+0x2946>
    8000c80a:	00021517          	auipc	a0,0x21
    8000c80e:	b2650513          	addi	a0,a0,-1242 # 8002d330 <__func__.0+0x310>
    8000c812:	5a81e0ef          	jal	8002adba <printf>
    8000c816:	00044797          	auipc	a5,0x44
    8000c81a:	7fb7c783          	lbu	a5,2043(a5) # 80051011 <excpt+0x1>
    8000c81e:	c799                	beqz	a5,8000c82c <tinst_tests_gpf+0x162a>
    8000c820:	6418                	ld	a4,8(s0)
    8000c822:	47dd                	li	a5,23
    8000c824:	00f71463          	bne	a4,a5,8000c82c <tinst_tests_gpf+0x162a>
    8000c828:	5450106f          	j	8000e56c <tinst_tests_gpf+0x336a>
    8000c82c:	00021517          	auipc	a0,0x21
    8000c830:	b0c50513          	addi	a0,a0,-1268 # 8002d338 <__func__.0+0x318>
    8000c834:	5861e0ef          	jal	8002adba <printf>
    8000c838:	02900513          	li	a0,41
    8000c83c:	26c1d0ef          	jal	80029aa8 <putchar>
    8000c840:	4529                	li	a0,10
    8000c842:	2661d0ef          	jal	80029aa8 <putchar>
    8000c846:	cca9                	beqz	s1,8000c8a0 <tinst_tests_gpf+0x169e>
    8000c848:	00044497          	auipc	s1,0x44
    8000c84c:	7c94c483          	lbu	s1,1993(s1) # 80051011 <excpt+0x1>
    8000c850:	c8a9                	beqz	s1,8000c8a2 <tinst_tests_gpf+0x16a0>
    8000c852:	6418                	ld	a4,8(s0)
    8000c854:	47dd                	li	a5,23
    8000c856:	04f71563          	bne	a4,a5,8000c8a0 <tinst_tests_gpf+0x169e>
    8000c85a:	701c                	ld	a5,32(s0)
        excpt.triggered == true && 
        excpt.cause == CAUSE_SGPF &&
        TINST_CHECK(TINST_AMO)
    );

    TEST_END();
    8000c85c:	00021597          	auipc	a1,0x21
    8000c860:	a8458593          	addi	a1,a1,-1404 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c864:	c3b9                	beqz	a5,8000c8aa <tinst_tests_gpf+0x16a8>
    8000c866:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c868:	0016f713          	andi	a4,a3,1
    8000c86c:	380718e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c870:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c874:	460d                	li	a2,3
    8000c876:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c87a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c87c:	00c59763          	bne	a1,a2,8000c88a <tinst_tests_gpf+0x1688>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c880:	0026d683          	lhu	a3,2(a3)
    8000c884:	0106969b          	slliw	a3,a3,0x10
    8000c888:	8f55                	or	a4,a4,a3
    8000c88a:	1ffe16b7          	lui	a3,0x1ffe1
    8000c88e:	068e                	slli	a3,a3,0x3
    8000c890:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000c892:	8f75                	and	a4,a4,a3
    TEST_END();
    8000c894:	00021597          	auipc	a1,0x21
    8000c898:	a4c58593          	addi	a1,a1,-1460 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000c89c:	00e78763          	beq	a5,a4,8000c8aa <tinst_tests_gpf+0x16a8>
    8000c8a0:	4481                	li	s1,0
    TEST_END();
    8000c8a2:	00021597          	auipc	a1,0x21
    8000c8a6:	a4e58593          	addi	a1,a1,-1458 # 8002d2f0 <__func__.0+0x2d0>
    8000c8aa:	00021517          	auipc	a0,0x21
    8000c8ae:	aee50513          	addi	a0,a0,-1298 # 8002d398 <__func__.0+0x378>
    8000c8b2:	5081e0ef          	jal	8002adba <printf>
    8000c8b6:	4511                	li	a0,4
    8000c8b8:	db6f40ef          	jal	80000e6e <goto_priv>
    8000c8bc:	ecff40ef          	jal	8000178a <reset_state>
}
    8000c8c0:	70a2                	ld	ra,40(sp)
    8000c8c2:	7402                	ld	s0,32(sp)
    8000c8c4:	6942                	ld	s2,16(sp)
    8000c8c6:	69a2                	ld	s3,8(sp)
    8000c8c8:	8526                	mv	a0,s1
    8000c8ca:	64e2                	ld	s1,24(sp)
    8000c8cc:	6145                	addi	sp,sp,48
    8000c8ce:	8082                	ret
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000c8d0:	701c                	ld	a5,32(s0)
    8000c8d2:	00021597          	auipc	a1,0x21
    8000c8d6:	a0e58593          	addi	a1,a1,-1522 # 8002d2e0 <__func__.0+0x2c0>
    8000c8da:	e399                	bnez	a5,8000c8e0 <tinst_tests_gpf+0x16de>
    8000c8dc:	abbfe06f          	j	8000b396 <tinst_tests_gpf+0x194>
    8000c8e0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c8e2:	0016f713          	andi	a4,a3,1
    8000c8e6:	30071be3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c8ea:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c8ee:	460d                	li	a2,3
    8000c8f0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c8f4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c8f6:	00c59763          	bne	a1,a2,8000c904 <tinst_tests_gpf+0x1702>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c8fa:	0026d683          	lhu	a3,2(a3)
    8000c8fe:	0106969b          	slliw	a3,a3,0x10
    8000c902:	8f55                	or	a4,a4,a3
    8000c904:	1746                	slli	a4,a4,0x31
    8000c906:	9345                	srli	a4,a4,0x31
    8000c908:	00021597          	auipc	a1,0x21
    8000c90c:	9d858593          	addi	a1,a1,-1576 # 8002d2e0 <__func__.0+0x2c0>
    8000c910:	00e79463          	bne	a5,a4,8000c918 <tinst_tests_gpf+0x1716>
    8000c914:	a83fe06f          	j	8000b396 <tinst_tests_gpf+0x194>
    8000c918:	00021597          	auipc	a1,0x21
    8000c91c:	9d858593          	addi	a1,a1,-1576 # 8002d2f0 <__func__.0+0x2d0>
    8000c920:	a77fe06f          	j	8000b396 <tinst_tests_gpf+0x194>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000c924:	6418                	ld	a4,8(s0)
    8000c926:	47d5                	li	a5,21
    8000c928:	00021597          	auipc	a1,0x21
    8000c92c:	9c858593          	addi	a1,a1,-1592 # 8002d2f0 <__func__.0+0x2d0>
    8000c930:	00f70463          	beq	a4,a5,8000c938 <tinst_tests_gpf+0x1736>
    8000c934:	af9fe06f          	j	8000b42c <tinst_tests_gpf+0x22a>
    8000c938:	701c                	ld	a5,32(s0)
    8000c93a:	00021597          	auipc	a1,0x21
    8000c93e:	9a658593          	addi	a1,a1,-1626 # 8002d2e0 <__func__.0+0x2c0>
    8000c942:	e399                	bnez	a5,8000c948 <tinst_tests_gpf+0x1746>
    8000c944:	ae9fe06f          	j	8000b42c <tinst_tests_gpf+0x22a>
    8000c948:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c94a:	0016f713          	andi	a4,a3,1
    8000c94e:	2a0717e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c952:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c956:	460d                	li	a2,3
    8000c958:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c95c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c95e:	00c59763          	bne	a1,a2,8000c96c <tinst_tests_gpf+0x176a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c962:	0026d683          	lhu	a3,2(a3)
    8000c966:	0106969b          	slliw	a3,a3,0x10
    8000c96a:	8f55                	or	a4,a4,a3
    8000c96c:	1746                	slli	a4,a4,0x31
    8000c96e:	9345                	srli	a4,a4,0x31
    8000c970:	00021597          	auipc	a1,0x21
    8000c974:	97058593          	addi	a1,a1,-1680 # 8002d2e0 <__func__.0+0x2c0>
    8000c978:	00e78463          	beq	a5,a4,8000c980 <tinst_tests_gpf+0x177e>
    8000c97c:	aa9fe06f          	j	8000b424 <tinst_tests_gpf+0x222>
    8000c980:	aadfe06f          	j	8000b42c <tinst_tests_gpf+0x22a>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000c984:	701c                	ld	a5,32(s0)
    8000c986:	e399                	bnez	a5,8000c98c <tinst_tests_gpf+0x178a>
    8000c988:	a45fe06f          	j	8000b3cc <tinst_tests_gpf+0x1ca>
    8000c98c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c98e:	0016f713          	andi	a4,a3,1
    8000c992:	260715e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c996:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c99a:	460d                	li	a2,3
    8000c99c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c9a0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c9a2:	00c59763          	bne	a1,a2,8000c9b0 <tinst_tests_gpf+0x17ae>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c9a6:	0026d683          	lhu	a3,2(a3)
    8000c9aa:	0106969b          	slliw	a3,a3,0x10
    8000c9ae:	8f55                	or	a4,a4,a3
    8000c9b0:	1746                	slli	a4,a4,0x31
    8000c9b2:	9345                	srli	a4,a4,0x31
    8000c9b4:	00e78463          	beq	a5,a4,8000c9bc <tinst_tests_gpf+0x17ba>
    8000c9b8:	a01fe06f          	j	8000b3b8 <tinst_tests_gpf+0x1b6>
    8000c9bc:	a11fe06f          	j	8000b3cc <tinst_tests_gpf+0x1ca>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000c9c0:	701c                	ld	a5,32(s0)
    8000c9c2:	00021597          	auipc	a1,0x21
    8000c9c6:	91e58593          	addi	a1,a1,-1762 # 8002d2e0 <__func__.0+0x2c0>
    8000c9ca:	e399                	bnez	a5,8000c9d0 <tinst_tests_gpf+0x17ce>
    8000c9cc:	b03fe06f          	j	8000b4ce <tinst_tests_gpf+0x2cc>
    8000c9d0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000c9d2:	0016f713          	andi	a4,a3,1
    8000c9d6:	220713e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000c9da:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000c9de:	460d                	li	a2,3
    8000c9e0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000c9e4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000c9e6:	00c59763          	bne	a1,a2,8000c9f4 <tinst_tests_gpf+0x17f2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000c9ea:	0026d683          	lhu	a3,2(a3)
    8000c9ee:	0106969b          	slliw	a3,a3,0x10
    8000c9f2:	8f55                	or	a4,a4,a3
    8000c9f4:	1746                	slli	a4,a4,0x31
    8000c9f6:	9345                	srli	a4,a4,0x31
    8000c9f8:	00021597          	auipc	a1,0x21
    8000c9fc:	8e858593          	addi	a1,a1,-1816 # 8002d2e0 <__func__.0+0x2c0>
    8000ca00:	00e79463          	bne	a5,a4,8000ca08 <tinst_tests_gpf+0x1806>
    8000ca04:	acbfe06f          	j	8000b4ce <tinst_tests_gpf+0x2cc>
    8000ca08:	00021597          	auipc	a1,0x21
    8000ca0c:	8e858593          	addi	a1,a1,-1816 # 8002d2f0 <__func__.0+0x2d0>
    8000ca10:	abffe06f          	j	8000b4ce <tinst_tests_gpf+0x2cc>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000ca14:	701c                	ld	a5,32(s0)
    8000ca16:	00021597          	auipc	a1,0x21
    8000ca1a:	8ca58593          	addi	a1,a1,-1846 # 8002d2e0 <__func__.0+0x2c0>
    8000ca1e:	e399                	bnez	a5,8000ca24 <tinst_tests_gpf+0x1822>
    8000ca20:	b51fe06f          	j	8000b570 <tinst_tests_gpf+0x36e>
    8000ca24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca26:	0016f713          	andi	a4,a3,1
    8000ca2a:	1c0719e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca32:	460d                	li	a2,3
    8000ca34:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca3a:	00c59763          	bne	a1,a2,8000ca48 <tinst_tests_gpf+0x1846>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca3e:	0026d683          	lhu	a3,2(a3)
    8000ca42:	0106969b          	slliw	a3,a3,0x10
    8000ca46:	8f55                	or	a4,a4,a3
    8000ca48:	1746                	slli	a4,a4,0x31
    8000ca4a:	9345                	srli	a4,a4,0x31
    8000ca4c:	00021597          	auipc	a1,0x21
    8000ca50:	89458593          	addi	a1,a1,-1900 # 8002d2e0 <__func__.0+0x2c0>
    8000ca54:	00e79463          	bne	a5,a4,8000ca5c <tinst_tests_gpf+0x185a>
    8000ca58:	b19fe06f          	j	8000b570 <tinst_tests_gpf+0x36e>
    8000ca5c:	00021597          	auipc	a1,0x21
    8000ca60:	89458593          	addi	a1,a1,-1900 # 8002d2f0 <__func__.0+0x2d0>
    8000ca64:	b0dfe06f          	j	8000b570 <tinst_tests_gpf+0x36e>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000ca68:	701c                	ld	a5,32(s0)
    8000ca6a:	00021597          	auipc	a1,0x21
    8000ca6e:	87658593          	addi	a1,a1,-1930 # 8002d2e0 <__func__.0+0x2c0>
    8000ca72:	e399                	bnez	a5,8000ca78 <tinst_tests_gpf+0x1876>
    8000ca74:	b9ffe06f          	j	8000b612 <tinst_tests_gpf+0x410>
    8000ca78:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ca7a:	0016f713          	andi	a4,a3,1
    8000ca7e:	16071fe3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ca82:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ca86:	460d                	li	a2,3
    8000ca88:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ca8c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ca8e:	00c59763          	bne	a1,a2,8000ca9c <tinst_tests_gpf+0x189a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ca92:	0026d683          	lhu	a3,2(a3)
    8000ca96:	0106969b          	slliw	a3,a3,0x10
    8000ca9a:	8f55                	or	a4,a4,a3
    8000ca9c:	1746                	slli	a4,a4,0x31
    8000ca9e:	9345                	srli	a4,a4,0x31
    8000caa0:	00021597          	auipc	a1,0x21
    8000caa4:	84058593          	addi	a1,a1,-1984 # 8002d2e0 <__func__.0+0x2c0>
    8000caa8:	00e79463          	bne	a5,a4,8000cab0 <tinst_tests_gpf+0x18ae>
    8000caac:	b67fe06f          	j	8000b612 <tinst_tests_gpf+0x410>
    8000cab0:	00021597          	auipc	a1,0x21
    8000cab4:	84058593          	addi	a1,a1,-1984 # 8002d2f0 <__func__.0+0x2d0>
    8000cab8:	b5bfe06f          	j	8000b612 <tinst_tests_gpf+0x410>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cabc:	701c                	ld	a5,32(s0)
    8000cabe:	00021597          	auipc	a1,0x21
    8000cac2:	82258593          	addi	a1,a1,-2014 # 8002d2e0 <__func__.0+0x2c0>
    8000cac6:	e399                	bnez	a5,8000cacc <tinst_tests_gpf+0x18ca>
    8000cac8:	be5fe06f          	j	8000b6ac <tinst_tests_gpf+0x4aa>
    8000cacc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cace:	0016f713          	andi	a4,a3,1
    8000cad2:	120715e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cad6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cada:	460d                	li	a2,3
    8000cadc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cae0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cae2:	00c59763          	bne	a1,a2,8000caf0 <tinst_tests_gpf+0x18ee>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cae6:	0026d683          	lhu	a3,2(a3)
    8000caea:	0106969b          	slliw	a3,a3,0x10
    8000caee:	8f55                	or	a4,a4,a3
    8000caf0:	1746                	slli	a4,a4,0x31
    8000caf2:	9345                	srli	a4,a4,0x31
    8000caf4:	00020597          	auipc	a1,0x20
    8000caf8:	7ec58593          	addi	a1,a1,2028 # 8002d2e0 <__func__.0+0x2c0>
    8000cafc:	00e79463          	bne	a5,a4,8000cb04 <tinst_tests_gpf+0x1902>
    8000cb00:	badfe06f          	j	8000b6ac <tinst_tests_gpf+0x4aa>
    8000cb04:	00020597          	auipc	a1,0x20
    8000cb08:	7ec58593          	addi	a1,a1,2028 # 8002d2f0 <__func__.0+0x2d0>
    8000cb0c:	ba1fe06f          	j	8000b6ac <tinst_tests_gpf+0x4aa>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000cb10:	701c                	ld	a5,32(s0)
    8000cb12:	00020597          	auipc	a1,0x20
    8000cb16:	7ce58593          	addi	a1,a1,1998 # 8002d2e0 <__func__.0+0x2c0>
    8000cb1a:	e399                	bnez	a5,8000cb20 <tinst_tests_gpf+0x191e>
    8000cb1c:	c2dfe06f          	j	8000b748 <tinst_tests_gpf+0x546>
    8000cb20:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb22:	0016f713          	andi	a4,a3,1
    8000cb26:	0c071be3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb2a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb2e:	460d                	li	a2,3
    8000cb30:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb34:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb36:	00c59763          	bne	a1,a2,8000cb44 <tinst_tests_gpf+0x1942>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb3a:	0026d683          	lhu	a3,2(a3)
    8000cb3e:	0106969b          	slliw	a3,a3,0x10
    8000cb42:	8f55                	or	a4,a4,a3
    8000cb44:	01f076b7          	lui	a3,0x1f07
    8000cb48:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cb4c:	8f75                	and	a4,a4,a3
    8000cb4e:	00020597          	auipc	a1,0x20
    8000cb52:	79258593          	addi	a1,a1,1938 # 8002d2e0 <__func__.0+0x2c0>
    8000cb56:	00e79463          	bne	a5,a4,8000cb5e <tinst_tests_gpf+0x195c>
    8000cb5a:	beffe06f          	j	8000b748 <tinst_tests_gpf+0x546>
    8000cb5e:	00020597          	auipc	a1,0x20
    8000cb62:	79258593          	addi	a1,a1,1938 # 8002d2f0 <__func__.0+0x2d0>
    8000cb66:	be3fe06f          	j	8000b748 <tinst_tests_gpf+0x546>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000cb6a:	701c                	ld	a5,32(s0)
    8000cb6c:	00020597          	auipc	a1,0x20
    8000cb70:	77458593          	addi	a1,a1,1908 # 8002d2e0 <__func__.0+0x2c0>
    8000cb74:	e399                	bnez	a5,8000cb7a <tinst_tests_gpf+0x1978>
    8000cb76:	c73fe06f          	j	8000b7e8 <tinst_tests_gpf+0x5e6>
    8000cb7a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cb7c:	0016f713          	andi	a4,a3,1
    8000cb80:	06071ee3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cb84:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cb88:	460d                	li	a2,3
    8000cb8a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cb8e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cb90:	00c59763          	bne	a1,a2,8000cb9e <tinst_tests_gpf+0x199c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cb94:	0026d683          	lhu	a3,2(a3)
    8000cb98:	0106969b          	slliw	a3,a3,0x10
    8000cb9c:	8f55                	or	a4,a4,a3
    8000cb9e:	01f076b7          	lui	a3,0x1f07
    8000cba2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cba6:	8f75                	and	a4,a4,a3
    8000cba8:	00020597          	auipc	a1,0x20
    8000cbac:	73858593          	addi	a1,a1,1848 # 8002d2e0 <__func__.0+0x2c0>
    8000cbb0:	00e79463          	bne	a5,a4,8000cbb8 <tinst_tests_gpf+0x19b6>
    8000cbb4:	c35fe06f          	j	8000b7e8 <tinst_tests_gpf+0x5e6>
    8000cbb8:	00020597          	auipc	a1,0x20
    8000cbbc:	73858593          	addi	a1,a1,1848 # 8002d2f0 <__func__.0+0x2d0>
    8000cbc0:	c29fe06f          	j	8000b7e8 <tinst_tests_gpf+0x5e6>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000cbc4:	701c                	ld	a5,32(s0)
    8000cbc6:	00020597          	auipc	a1,0x20
    8000cbca:	71a58593          	addi	a1,a1,1818 # 8002d2e0 <__func__.0+0x2c0>
    8000cbce:	e399                	bnez	a5,8000cbd4 <tinst_tests_gpf+0x19d2>
    8000cbd0:	cbbfe06f          	j	8000b88a <tinst_tests_gpf+0x688>
    8000cbd4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cbd6:	0016f713          	andi	a4,a3,1
    8000cbda:	020711e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cbde:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cbe2:	460d                	li	a2,3
    8000cbe4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cbe8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cbea:	00c59763          	bne	a1,a2,8000cbf8 <tinst_tests_gpf+0x19f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cbee:	0026d683          	lhu	a3,2(a3)
    8000cbf2:	0106969b          	slliw	a3,a3,0x10
    8000cbf6:	8f55                	or	a4,a4,a3
    8000cbf8:	01f076b7          	lui	a3,0x1f07
    8000cbfc:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cc00:	8f75                	and	a4,a4,a3
    8000cc02:	00020597          	auipc	a1,0x20
    8000cc06:	6de58593          	addi	a1,a1,1758 # 8002d2e0 <__func__.0+0x2c0>
    8000cc0a:	00e79463          	bne	a5,a4,8000cc12 <tinst_tests_gpf+0x1a10>
    8000cc0e:	c7dfe06f          	j	8000b88a <tinst_tests_gpf+0x688>
    8000cc12:	00020597          	auipc	a1,0x20
    8000cc16:	6de58593          	addi	a1,a1,1758 # 8002d2f0 <__func__.0+0x2d0>
    8000cc1a:	c71fe06f          	j	8000b88a <tinst_tests_gpf+0x688>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000cc1e:	701c                	ld	a5,32(s0)
    8000cc20:	00020597          	auipc	a1,0x20
    8000cc24:	6c058593          	addi	a1,a1,1728 # 8002d2e0 <__func__.0+0x2c0>
    8000cc28:	e399                	bnez	a5,8000cc2e <tinst_tests_gpf+0x1a2c>
    8000cc2a:	d05fe06f          	j	8000b92e <tinst_tests_gpf+0x72c>
    8000cc2e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc30:	0016f713          	andi	a4,a3,1
    8000cc34:	7c071463          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc38:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc3c:	460d                	li	a2,3
    8000cc3e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc42:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc44:	00c59763          	bne	a1,a2,8000cc52 <tinst_tests_gpf+0x1a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cc48:	0026d683          	lhu	a3,2(a3)
    8000cc4c:	0106969b          	slliw	a3,a3,0x10
    8000cc50:	8f55                	or	a4,a4,a3
    8000cc52:	01f076b7          	lui	a3,0x1f07
    8000cc56:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cc5a:	8f75                	and	a4,a4,a3
    8000cc5c:	00020597          	auipc	a1,0x20
    8000cc60:	68458593          	addi	a1,a1,1668 # 8002d2e0 <__func__.0+0x2c0>
    8000cc64:	00e79463          	bne	a5,a4,8000cc6c <tinst_tests_gpf+0x1a6a>
    8000cc68:	cc7fe06f          	j	8000b92e <tinst_tests_gpf+0x72c>
    8000cc6c:	00020597          	auipc	a1,0x20
    8000cc70:	68458593          	addi	a1,a1,1668 # 8002d2f0 <__func__.0+0x2d0>
    8000cc74:	cbbfe06f          	j	8000b92e <tinst_tests_gpf+0x72c>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000cc78:	701c                	ld	a5,32(s0)
    8000cc7a:	00020597          	auipc	a1,0x20
    8000cc7e:	66658593          	addi	a1,a1,1638 # 8002d2e0 <__func__.0+0x2c0>
    8000cc82:	e399                	bnez	a5,8000cc88 <tinst_tests_gpf+0x1a86>
    8000cc84:	fa9fe06f          	j	8000bc2c <tinst_tests_gpf+0xa2a>
    8000cc88:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cc8a:	0016f713          	andi	a4,a3,1
    8000cc8e:	76071763          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cc92:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cc96:	460d                	li	a2,3
    8000cc98:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cc9c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cc9e:	00c59763          	bne	a1,a2,8000ccac <tinst_tests_gpf+0x1aaa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cca2:	0026d683          	lhu	a3,2(a3)
    8000cca6:	0106969b          	slliw	a3,a3,0x10
    8000ccaa:	8f55                	or	a4,a4,a3
    8000ccac:	1ffe16b7          	lui	a3,0x1ffe1
    8000ccb0:	068e                	slli	a3,a3,0x3
    8000ccb2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000ccb4:	8f75                	and	a4,a4,a3
    8000ccb6:	00020597          	auipc	a1,0x20
    8000ccba:	62a58593          	addi	a1,a1,1578 # 8002d2e0 <__func__.0+0x2c0>
    8000ccbe:	00e79463          	bne	a5,a4,8000ccc6 <tinst_tests_gpf+0x1ac4>
    8000ccc2:	f6bfe06f          	j	8000bc2c <tinst_tests_gpf+0xa2a>
    8000ccc6:	00020597          	auipc	a1,0x20
    8000ccca:	62a58593          	addi	a1,a1,1578 # 8002d2f0 <__func__.0+0x2d0>
    8000ccce:	f5ffe06f          	j	8000bc2c <tinst_tests_gpf+0xa2a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000ccd2:	701c                	ld	a5,32(s0)
    8000ccd4:	00020597          	auipc	a1,0x20
    8000ccd8:	60c58593          	addi	a1,a1,1548 # 8002d2e0 <__func__.0+0x2c0>
    8000ccdc:	e399                	bnez	a5,8000cce2 <tinst_tests_gpf+0x1ae0>
    8000ccde:	ff3fe06f          	j	8000bcd0 <tinst_tests_gpf+0xace>
    8000cce2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cce4:	0016f713          	andi	a4,a3,1
    8000cce8:	70071a63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ccec:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ccf0:	460d                	li	a2,3
    8000ccf2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ccf6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ccf8:	00c59763          	bne	a1,a2,8000cd06 <tinst_tests_gpf+0x1b04>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ccfc:	0026d683          	lhu	a3,2(a3)
    8000cd00:	0106969b          	slliw	a3,a3,0x10
    8000cd04:	8f55                	or	a4,a4,a3
    8000cd06:	1ffe16b7          	lui	a3,0x1ffe1
    8000cd0a:	068e                	slli	a3,a3,0x3
    8000cd0c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cd0e:	8f75                	and	a4,a4,a3
    8000cd10:	00020597          	auipc	a1,0x20
    8000cd14:	5d058593          	addi	a1,a1,1488 # 8002d2e0 <__func__.0+0x2c0>
    8000cd18:	00e79463          	bne	a5,a4,8000cd20 <tinst_tests_gpf+0x1b1e>
    8000cd1c:	fb5fe06f          	j	8000bcd0 <tinst_tests_gpf+0xace>
    8000cd20:	00020597          	auipc	a1,0x20
    8000cd24:	5d058593          	addi	a1,a1,1488 # 8002d2f0 <__func__.0+0x2d0>
    8000cd28:	fa9fe06f          	j	8000bcd0 <tinst_tests_gpf+0xace>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000cd2c:	701c                	ld	a5,32(s0)
    8000cd2e:	00020597          	auipc	a1,0x20
    8000cd32:	5b258593          	addi	a1,a1,1458 # 8002d2e0 <__func__.0+0x2c0>
    8000cd36:	e399                	bnez	a5,8000cd3c <tinst_tests_gpf+0x1b3a>
    8000cd38:	83aff06f          	j	8000bd72 <tinst_tests_gpf+0xb70>
    8000cd3c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd3e:	0016f713          	andi	a4,a3,1
    8000cd42:	6a071d63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cd46:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cd4a:	460d                	li	a2,3
    8000cd4c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cd50:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cd52:	00c59763          	bne	a1,a2,8000cd60 <tinst_tests_gpf+0x1b5e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cd56:	0026d683          	lhu	a3,2(a3)
    8000cd5a:	0106969b          	slliw	a3,a3,0x10
    8000cd5e:	8f55                	or	a4,a4,a3
    8000cd60:	1ffe16b7          	lui	a3,0x1ffe1
    8000cd64:	068e                	slli	a3,a3,0x3
    8000cd66:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cd68:	8f75                	and	a4,a4,a3
    8000cd6a:	00020597          	auipc	a1,0x20
    8000cd6e:	57658593          	addi	a1,a1,1398 # 8002d2e0 <__func__.0+0x2c0>
    8000cd72:	00e79463          	bne	a5,a4,8000cd7a <tinst_tests_gpf+0x1b78>
    8000cd76:	ffdfe06f          	j	8000bd72 <tinst_tests_gpf+0xb70>
    8000cd7a:	00020597          	auipc	a1,0x20
    8000cd7e:	57658593          	addi	a1,a1,1398 # 8002d2f0 <__func__.0+0x2d0>
    8000cd82:	ff1fe06f          	j	8000bd72 <tinst_tests_gpf+0xb70>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000cd86:	701c                	ld	a5,32(s0)
    8000cd88:	00020597          	auipc	a1,0x20
    8000cd8c:	55858593          	addi	a1,a1,1368 # 8002d2e0 <__func__.0+0x2c0>
    8000cd90:	e399                	bnez	a5,8000cd96 <tinst_tests_gpf+0x1b94>
    8000cd92:	882ff06f          	j	8000be14 <tinst_tests_gpf+0xc12>
    8000cd96:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cd98:	0016f713          	andi	a4,a3,1
    8000cd9c:	66071063          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cda0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cda4:	460d                	li	a2,3
    8000cda6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cdaa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cdac:	00c59763          	bne	a1,a2,8000cdba <tinst_tests_gpf+0x1bb8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cdb0:	0026d683          	lhu	a3,2(a3)
    8000cdb4:	0106969b          	slliw	a3,a3,0x10
    8000cdb8:	8f55                	or	a4,a4,a3
    8000cdba:	1ffe16b7          	lui	a3,0x1ffe1
    8000cdbe:	068e                	slli	a3,a3,0x3
    8000cdc0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cdc2:	8f75                	and	a4,a4,a3
    8000cdc4:	00020597          	auipc	a1,0x20
    8000cdc8:	51c58593          	addi	a1,a1,1308 # 8002d2e0 <__func__.0+0x2c0>
    8000cdcc:	00e79463          	bne	a5,a4,8000cdd4 <tinst_tests_gpf+0x1bd2>
    8000cdd0:	844ff06f          	j	8000be14 <tinst_tests_gpf+0xc12>
    8000cdd4:	00020597          	auipc	a1,0x20
    8000cdd8:	51c58593          	addi	a1,a1,1308 # 8002d2f0 <__func__.0+0x2d0>
    8000cddc:	838ff06f          	j	8000be14 <tinst_tests_gpf+0xc12>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000cde0:	701c                	ld	a5,32(s0)
    8000cde2:	e399                	bnez	a5,8000cde8 <tinst_tests_gpf+0x1be6>
    8000cde4:	e7efe06f          	j	8000b462 <tinst_tests_gpf+0x260>
    8000cde8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cdea:	0016f713          	andi	a4,a3,1
    8000cdee:	60071763          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cdf2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cdf6:	460d                	li	a2,3
    8000cdf8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cdfc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cdfe:	00c59763          	bne	a1,a2,8000ce0c <tinst_tests_gpf+0x1c0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce02:	0026d683          	lhu	a3,2(a3)
    8000ce06:	0106969b          	slliw	a3,a3,0x10
    8000ce0a:	8f55                	or	a4,a4,a3
    8000ce0c:	1746                	slli	a4,a4,0x31
    8000ce0e:	9345                	srli	a4,a4,0x31
    8000ce10:	00e78463          	beq	a5,a4,8000ce18 <tinst_tests_gpf+0x1c16>
    8000ce14:	e3afe06f          	j	8000b44e <tinst_tests_gpf+0x24c>
    8000ce18:	e4afe06f          	j	8000b462 <tinst_tests_gpf+0x260>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000ce1c:	701c                	ld	a5,32(s0)
    8000ce1e:	e399                	bnez	a5,8000ce24 <tinst_tests_gpf+0x1c22>
    8000ce20:	ee4fe06f          	j	8000b504 <tinst_tests_gpf+0x302>
    8000ce24:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce26:	0016f713          	andi	a4,a3,1
    8000ce2a:	5c071963          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce2e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ce32:	460d                	li	a2,3
    8000ce34:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ce38:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ce3a:	00c59763          	bne	a1,a2,8000ce48 <tinst_tests_gpf+0x1c46>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce3e:	0026d683          	lhu	a3,2(a3)
    8000ce42:	0106969b          	slliw	a3,a3,0x10
    8000ce46:	8f55                	or	a4,a4,a3
    8000ce48:	1746                	slli	a4,a4,0x31
    8000ce4a:	9345                	srli	a4,a4,0x31
    8000ce4c:	00e78463          	beq	a5,a4,8000ce54 <tinst_tests_gpf+0x1c52>
    8000ce50:	ea0fe06f          	j	8000b4f0 <tinst_tests_gpf+0x2ee>
    8000ce54:	eb0fe06f          	j	8000b504 <tinst_tests_gpf+0x302>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000ce58:	6418                	ld	a4,8(s0)
    8000ce5a:	47d5                	li	a5,21
    8000ce5c:	00f70463          	beq	a4,a5,8000ce64 <tinst_tests_gpf+0x1c62>
    8000ce60:	ffefe06f          	j	8000b65e <tinst_tests_gpf+0x45c>
    8000ce64:	7018                	ld	a4,32(s0)
    8000ce66:	e319                	bnez	a4,8000ce6c <tinst_tests_gpf+0x1c6a>
    8000ce68:	ff8fe06f          	j	8000b660 <tinst_tests_gpf+0x45e>
    8000ce6c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ce6e:	0016f793          	andi	a5,a3,1
    8000ce72:	58079563          	bnez	a5,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ce76:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ce7a:	460d                	li	a2,3
    8000ce7c:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000ce80:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000ce82:	00c59763          	bne	a1,a2,8000ce90 <tinst_tests_gpf+0x1c8e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ce86:	0026d683          	lhu	a3,2(a3)
    8000ce8a:	0106969b          	slliw	a3,a3,0x10
    8000ce8e:	8fd5                	or	a5,a5,a3
    8000ce90:	17c6                	slli	a5,a5,0x31
    8000ce92:	0317d493          	srli	s1,a5,0x31
    8000ce96:	8c99                	sub	s1,s1,a4
    8000ce98:	0014b493          	seqz	s1,s1
    8000ce9c:	fc4fe06f          	j	8000b660 <tinst_tests_gpf+0x45e>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000cea0:	6418                	ld	a4,8(s0)
    8000cea2:	47dd                	li	a5,23
    8000cea4:	00020597          	auipc	a1,0x20
    8000cea8:	44c58593          	addi	a1,a1,1100 # 8002d2f0 <__func__.0+0x2d0>
    8000ceac:	00f70463          	beq	a4,a5,8000ceb4 <tinst_tests_gpf+0x1cb2>
    8000ceb0:	ffbfe06f          	j	8000beaa <tinst_tests_gpf+0xca8>
    8000ceb4:	701c                	ld	a5,32(s0)
    8000ceb6:	00020597          	auipc	a1,0x20
    8000ceba:	42a58593          	addi	a1,a1,1066 # 8002d2e0 <__func__.0+0x2c0>
    8000cebe:	e399                	bnez	a5,8000cec4 <tinst_tests_gpf+0x1cc2>
    8000cec0:	febfe06f          	j	8000beaa <tinst_tests_gpf+0xca8>
    8000cec4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cec6:	0016f713          	andi	a4,a3,1
    8000ceca:	52071963          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cece:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ced2:	460d                	li	a2,3
    8000ced4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ced8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ceda:	00c59763          	bne	a1,a2,8000cee8 <tinst_tests_gpf+0x1ce6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cede:	0026d683          	lhu	a3,2(a3)
    8000cee2:	0106969b          	slliw	a3,a3,0x10
    8000cee6:	8f55                	or	a4,a4,a3
    8000cee8:	1ffe16b7          	lui	a3,0x1ffe1
    8000ceec:	068e                	slli	a3,a3,0x3
    8000ceee:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cef0:	8f75                	and	a4,a4,a3
    8000cef2:	00020597          	auipc	a1,0x20
    8000cef6:	3ee58593          	addi	a1,a1,1006 # 8002d2e0 <__func__.0+0x2c0>
    8000cefa:	00e78463          	beq	a5,a4,8000cf02 <tinst_tests_gpf+0x1d00>
    8000cefe:	fa5fe06f          	j	8000bea2 <tinst_tests_gpf+0xca0>
    8000cf02:	fa9fe06f          	j	8000beaa <tinst_tests_gpf+0xca8>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000cf06:	6418                	ld	a4,8(s0)
    8000cf08:	47d5                	li	a5,21
    8000cf0a:	00f70463          	beq	a4,a5,8000cf12 <tinst_tests_gpf+0x1d10>
    8000cf0e:	feafe06f          	j	8000b6f8 <tinst_tests_gpf+0x4f6>
    8000cf12:	7018                	ld	a4,32(s0)
    8000cf14:	e319                	bnez	a4,8000cf1a <tinst_tests_gpf+0x1d18>
    8000cf16:	fe4fe06f          	j	8000b6fa <tinst_tests_gpf+0x4f8>
    8000cf1a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf1c:	0016f793          	andi	a5,a3,1
    8000cf20:	4c079e63          	bnez	a5,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf24:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf28:	460d                	li	a2,3
    8000cf2a:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000cf2e:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000cf30:	00c59763          	bne	a1,a2,8000cf3e <tinst_tests_gpf+0x1d3c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf34:	0026d683          	lhu	a3,2(a3)
    8000cf38:	0106969b          	slliw	a3,a3,0x10
    8000cf3c:	8fd5                	or	a5,a5,a3
    8000cf3e:	17c6                	slli	a5,a5,0x31
    8000cf40:	0317d493          	srli	s1,a5,0x31
    8000cf44:	8c99                	sub	s1,s1,a4
    8000cf46:	0014b493          	seqz	s1,s1
    8000cf4a:	fb0fe06f          	j	8000b6fa <tinst_tests_gpf+0x4f8>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000cf4e:	6418                	ld	a4,8(s0)
    8000cf50:	47dd                	li	a5,23
    8000cf52:	00020597          	auipc	a1,0x20
    8000cf56:	39e58593          	addi	a1,a1,926 # 8002d2f0 <__func__.0+0x2d0>
    8000cf5a:	00f70463          	beq	a4,a5,8000cf62 <tinst_tests_gpf+0x1d60>
    8000cf5e:	fe3fe06f          	j	8000bf40 <tinst_tests_gpf+0xd3e>
    8000cf62:	701c                	ld	a5,32(s0)
    8000cf64:	00020597          	auipc	a1,0x20
    8000cf68:	37c58593          	addi	a1,a1,892 # 8002d2e0 <__func__.0+0x2c0>
    8000cf6c:	e399                	bnez	a5,8000cf72 <tinst_tests_gpf+0x1d70>
    8000cf6e:	fd3fe06f          	j	8000bf40 <tinst_tests_gpf+0xd3e>
    8000cf72:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cf74:	0016f713          	andi	a4,a3,1
    8000cf78:	48071263          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cf7c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cf80:	460d                	li	a2,3
    8000cf82:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cf86:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cf88:	00c59763          	bne	a1,a2,8000cf96 <tinst_tests_gpf+0x1d94>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cf8c:	0026d683          	lhu	a3,2(a3)
    8000cf90:	0106969b          	slliw	a3,a3,0x10
    8000cf94:	8f55                	or	a4,a4,a3
    8000cf96:	1ffe16b7          	lui	a3,0x1ffe1
    8000cf9a:	068e                	slli	a3,a3,0x3
    8000cf9c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000cf9e:	8f75                	and	a4,a4,a3
    8000cfa0:	00020597          	auipc	a1,0x20
    8000cfa4:	34058593          	addi	a1,a1,832 # 8002d2e0 <__func__.0+0x2c0>
    8000cfa8:	00e78463          	beq	a5,a4,8000cfb0 <tinst_tests_gpf+0x1dae>
    8000cfac:	f8dfe06f          	j	8000bf38 <tinst_tests_gpf+0xd36>
    8000cfb0:	f91fe06f          	j	8000bf40 <tinst_tests_gpf+0xd3e>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000cfb4:	6418                	ld	a4,8(s0)
    8000cfb6:	47dd                	li	a5,23
    8000cfb8:	00f70463          	beq	a4,a5,8000cfc0 <tinst_tests_gpf+0x1dbe>
    8000cfbc:	fd8fe06f          	j	8000b794 <tinst_tests_gpf+0x592>
    8000cfc0:	701c                	ld	a5,32(s0)
    8000cfc2:	e399                	bnez	a5,8000cfc8 <tinst_tests_gpf+0x1dc6>
    8000cfc4:	fd2fe06f          	j	8000b796 <tinst_tests_gpf+0x594>
    8000cfc8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000cfca:	0016f713          	andi	a4,a3,1
    8000cfce:	42071763          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000cfd2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000cfd6:	460d                	li	a2,3
    8000cfd8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000cfdc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000cfde:	00c59763          	bne	a1,a2,8000cfec <tinst_tests_gpf+0x1dea>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000cfe2:	0026d683          	lhu	a3,2(a3)
    8000cfe6:	0106969b          	slliw	a3,a3,0x10
    8000cfea:	8f55                	or	a4,a4,a3
    8000cfec:	01f076b7          	lui	a3,0x1f07
    8000cff0:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000cff4:	8f75                	and	a4,a4,a3
    8000cff6:	40f704b3          	sub	s1,a4,a5
    8000cffa:	0014b493          	seqz	s1,s1
    8000cffe:	f98fe06f          	j	8000b796 <tinst_tests_gpf+0x594>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d002:	6418                	ld	a4,8(s0)
    8000d004:	47dd                	li	a5,23
    8000d006:	00f70463          	beq	a4,a5,8000d00e <tinst_tests_gpf+0x1e0c>
    8000d00a:	82bfe06f          	j	8000b834 <tinst_tests_gpf+0x632>
    8000d00e:	701c                	ld	a5,32(s0)
    8000d010:	e399                	bnez	a5,8000d016 <tinst_tests_gpf+0x1e14>
    8000d012:	825fe06f          	j	8000b836 <tinst_tests_gpf+0x634>
    8000d016:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d018:	0016f713          	andi	a4,a3,1
    8000d01c:	3e071063          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d020:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d024:	460d                	li	a2,3
    8000d026:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d02a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d02c:	00c59763          	bne	a1,a2,8000d03a <tinst_tests_gpf+0x1e38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d030:	0026d683          	lhu	a3,2(a3)
    8000d034:	0106969b          	slliw	a3,a3,0x10
    8000d038:	8f55                	or	a4,a4,a3
    8000d03a:	01f076b7          	lui	a3,0x1f07
    8000d03e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d042:	8f75                	and	a4,a4,a3
    8000d044:	40f704b3          	sub	s1,a4,a5
    8000d048:	0014b493          	seqz	s1,s1
    8000d04c:	feafe06f          	j	8000b836 <tinst_tests_gpf+0x634>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d050:	6418                	ld	a4,8(s0)
    8000d052:	47dd                	li	a5,23
    8000d054:	00f70463          	beq	a4,a5,8000d05c <tinst_tests_gpf+0x1e5a>
    8000d058:	87ffe06f          	j	8000b8d6 <tinst_tests_gpf+0x6d4>
    8000d05c:	701c                	ld	a5,32(s0)
    8000d05e:	e399                	bnez	a5,8000d064 <tinst_tests_gpf+0x1e62>
    8000d060:	879fe06f          	j	8000b8d8 <tinst_tests_gpf+0x6d6>
    8000d064:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d066:	0016f713          	andi	a4,a3,1
    8000d06a:	38071963          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d06e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d072:	460d                	li	a2,3
    8000d074:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d078:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d07a:	00c59763          	bne	a1,a2,8000d088 <tinst_tests_gpf+0x1e86>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d07e:	0026d683          	lhu	a3,2(a3)
    8000d082:	0106969b          	slliw	a3,a3,0x10
    8000d086:	8f55                	or	a4,a4,a3
    8000d088:	01f076b7          	lui	a3,0x1f07
    8000d08c:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d090:	8f75                	and	a4,a4,a3
    8000d092:	40f704b3          	sub	s1,a4,a5
    8000d096:	0014b493          	seqz	s1,s1
    8000d09a:	83ffe06f          	j	8000b8d8 <tinst_tests_gpf+0x6d6>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d09e:	6418                	ld	a4,8(s0)
    8000d0a0:	47dd                	li	a5,23
    8000d0a2:	00f70463          	beq	a4,a5,8000d0aa <tinst_tests_gpf+0x1ea8>
    8000d0a6:	8d5fe06f          	j	8000b97a <tinst_tests_gpf+0x778>
    8000d0aa:	701c                	ld	a5,32(s0)
    8000d0ac:	e399                	bnez	a5,8000d0b2 <tinst_tests_gpf+0x1eb0>
    8000d0ae:	8cffe06f          	j	8000b97c <tinst_tests_gpf+0x77a>
    8000d0b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d0b4:	0016f713          	andi	a4,a3,1
    8000d0b8:	34071263          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d0bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d0c0:	460d                	li	a2,3
    8000d0c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d0c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d0c8:	00c59763          	bne	a1,a2,8000d0d6 <tinst_tests_gpf+0x1ed4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d0cc:	0026d683          	lhu	a3,2(a3)
    8000d0d0:	0106969b          	slliw	a3,a3,0x10
    8000d0d4:	8f55                	or	a4,a4,a3
    8000d0d6:	01f076b7          	lui	a3,0x1f07
    8000d0da:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d0de:	8f75                	and	a4,a4,a3
    8000d0e0:	40f704b3          	sub	s1,a4,a5
    8000d0e4:	0014b493          	seqz	s1,s1
    8000d0e8:	895fe06f          	j	8000b97c <tinst_tests_gpf+0x77a>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d0ec:	6418                	ld	a4,8(s0)
    8000d0ee:	47d5                	li	a5,21
    8000d0f0:	00f70463          	beq	a4,a5,8000d0f8 <tinst_tests_gpf+0x1ef6>
    8000d0f4:	91bfe06f          	j	8000ba0e <tinst_tests_gpf+0x80c>
    8000d0f8:	02043903          	ld	s2,32(s0)
    8000d0fc:	00091463          	bnez	s2,8000d104 <tinst_tests_gpf+0x1f02>
    8000d100:	911fe06f          	j	8000ba10 <tinst_tests_gpf+0x80e>
    8000d104:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d106:	0017f713          	andi	a4,a5,1
    8000d10a:	2e071963          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d10e:	0007d503          	lhu	a0,0(a5)
    8000d112:	d94f40ef          	jal	800016a6 <expand_compressed_instruction>
    8000d116:	67a1                	lui	a5,0x8
    8000d118:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d11a:	00f574b3          	and	s1,a0,a5
    8000d11e:	412484b3          	sub	s1,s1,s2
    8000d122:	0014b493          	seqz	s1,s1
    8000d126:	8ebfe06f          	j	8000ba10 <tinst_tests_gpf+0x80e>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d12a:	6418                	ld	a4,8(s0)
    8000d12c:	47d5                	li	a5,21
    8000d12e:	00f70463          	beq	a4,a5,8000d136 <tinst_tests_gpf+0x1f34>
    8000d132:	973fe06f          	j	8000baa4 <tinst_tests_gpf+0x8a2>
    8000d136:	02043983          	ld	s3,32(s0)
    8000d13a:	00099463          	bnez	s3,8000d142 <tinst_tests_gpf+0x1f40>
    8000d13e:	969fe06f          	j	8000baa6 <tinst_tests_gpf+0x8a4>
    8000d142:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d144:	0017f713          	andi	a4,a5,1
    8000d148:	2a071a63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d14c:	0007d503          	lhu	a0,0(a5)
    8000d150:	d56f40ef          	jal	800016a6 <expand_compressed_instruction>
    8000d154:	67a1                	lui	a5,0x8
    8000d156:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d158:	00f574b3          	and	s1,a0,a5
    8000d15c:	413484b3          	sub	s1,s1,s3
    8000d160:	0014b493          	seqz	s1,s1
    8000d164:	943fe06f          	j	8000baa6 <tinst_tests_gpf+0x8a4>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d168:	6418                	ld	a4,8(s0)
    8000d16a:	47dd                	li	a5,23
    8000d16c:	00f70463          	beq	a4,a5,8000d174 <tinst_tests_gpf+0x1f72>
    8000d170:	9cbfe06f          	j	8000bb3a <tinst_tests_gpf+0x938>
    8000d174:	02043983          	ld	s3,32(s0)
    8000d178:	00099463          	bnez	s3,8000d180 <tinst_tests_gpf+0x1f7e>
    8000d17c:	9c1fe06f          	j	8000bb3c <tinst_tests_gpf+0x93a>
    8000d180:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d182:	0017f713          	andi	a4,a5,1
    8000d186:	26071b63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d18a:	0007d503          	lhu	a0,0(a5)
    8000d18e:	d18f40ef          	jal	800016a6 <expand_compressed_instruction>
    8000d192:	01f077b7          	lui	a5,0x1f07
    8000d196:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d19a:	00f574b3          	and	s1,a0,a5
    8000d19e:	413484b3          	sub	s1,s1,s3
    8000d1a2:	0014b493          	seqz	s1,s1
    8000d1a6:	997fe06f          	j	8000bb3c <tinst_tests_gpf+0x93a>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000d1aa:	701c                	ld	a5,32(s0)
    8000d1ac:	e399                	bnez	a5,8000d1b2 <tinst_tests_gpf+0x1fb0>
    8000d1ae:	b59fe06f          	j	8000bd06 <tinst_tests_gpf+0xb04>
    8000d1b2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d1b4:	0016f713          	andi	a4,a3,1
    8000d1b8:	24071263          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d1bc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d1c0:	460d                	li	a2,3
    8000d1c2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d1c6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d1c8:	00c59763          	bne	a1,a2,8000d1d6 <tinst_tests_gpf+0x1fd4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d1cc:	0026d683          	lhu	a3,2(a3)
    8000d1d0:	0106969b          	slliw	a3,a3,0x10
    8000d1d4:	8f55                	or	a4,a4,a3
    8000d1d6:	1ffe16b7          	lui	a3,0x1ffe1
    8000d1da:	068e                	slli	a3,a3,0x3
    8000d1dc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d1de:	8f75                	and	a4,a4,a3
    8000d1e0:	00e78463          	beq	a5,a4,8000d1e8 <tinst_tests_gpf+0x1fe6>
    8000d1e4:	b0ffe06f          	j	8000bcf2 <tinst_tests_gpf+0xaf0>
    8000d1e8:	b1ffe06f          	j	8000bd06 <tinst_tests_gpf+0xb04>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d1ec:	02043903          	ld	s2,32(s0)
    8000d1f0:	64091be3          	bnez	s2,8000e046 <tinst_tests_gpf+0x2e44>
    8000d1f4:	00020597          	auipc	a1,0x20
    8000d1f8:	0ec58593          	addi	a1,a1,236 # 8002d2e0 <__func__.0+0x2c0>
    8000d1fc:	fc6fe06f          	j	8000b9c2 <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000d200:	701c                	ld	a5,32(s0)
    8000d202:	e399                	bnez	a5,8000d208 <tinst_tests_gpf+0x2006>
    8000d204:	ba5fe06f          	j	8000bda8 <tinst_tests_gpf+0xba6>
    8000d208:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d20a:	0016f713          	andi	a4,a3,1
    8000d20e:	1e071763          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d212:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d216:	460d                	li	a2,3
    8000d218:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d21c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d21e:	00c59763          	bne	a1,a2,8000d22c <tinst_tests_gpf+0x202a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d222:	0026d683          	lhu	a3,2(a3)
    8000d226:	0106969b          	slliw	a3,a3,0x10
    8000d22a:	8f55                	or	a4,a4,a3
    8000d22c:	1ffe16b7          	lui	a3,0x1ffe1
    8000d230:	068e                	slli	a3,a3,0x3
    8000d232:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d234:	8f75                	and	a4,a4,a3
    8000d236:	00e78463          	beq	a5,a4,8000d23e <tinst_tests_gpf+0x203c>
    8000d23a:	b5bfe06f          	j	8000bd94 <tinst_tests_gpf+0xb92>
    8000d23e:	b6bfe06f          	j	8000bda8 <tinst_tests_gpf+0xba6>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d242:	02043983          	ld	s3,32(s0)
    8000d246:	660997e3          	bnez	s3,8000e0b4 <tinst_tests_gpf+0x2eb2>
    8000d24a:	00020597          	auipc	a1,0x20
    8000d24e:	09658593          	addi	a1,a1,150 # 8002d2e0 <__func__.0+0x2c0>
    8000d252:	807fe06f          	j	8000ba58 <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000d256:	701c                	ld	a5,32(s0)
    8000d258:	e399                	bnez	a5,8000d25e <tinst_tests_gpf+0x205c>
    8000d25a:	bf1fe06f          	j	8000be4a <tinst_tests_gpf+0xc48>
    8000d25e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d260:	0016f713          	andi	a4,a3,1
    8000d264:	18071c63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d268:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d26c:	460d                	li	a2,3
    8000d26e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d272:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d274:	00c59763          	bne	a1,a2,8000d282 <tinst_tests_gpf+0x2080>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d278:	0026d683          	lhu	a3,2(a3)
    8000d27c:	0106969b          	slliw	a3,a3,0x10
    8000d280:	8f55                	or	a4,a4,a3
    8000d282:	1ffe16b7          	lui	a3,0x1ffe1
    8000d286:	068e                	slli	a3,a3,0x3
    8000d288:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d28a:	8f75                	and	a4,a4,a3
    8000d28c:	00e78463          	beq	a5,a4,8000d294 <tinst_tests_gpf+0x2092>
    8000d290:	ba7fe06f          	j	8000be36 <tinst_tests_gpf+0xc34>
    8000d294:	bb7fe06f          	j	8000be4a <tinst_tests_gpf+0xc48>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d298:	02043983          	ld	s3,32(s0)
    8000d29c:	6c0994e3          	bnez	s3,8000e164 <tinst_tests_gpf+0x2f62>
    8000d2a0:	00020597          	auipc	a1,0x20
    8000d2a4:	04058593          	addi	a1,a1,64 # 8002d2e0 <__func__.0+0x2c0>
    8000d2a8:	847fe06f          	j	8000baee <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000d2ac:	701c                	ld	a5,32(s0)
    8000d2ae:	e399                	bnez	a5,8000d2b4 <tinst_tests_gpf+0x20b2>
    8000d2b0:	c31fe06f          	j	8000bee0 <tinst_tests_gpf+0xcde>
    8000d2b4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d2b6:	0016f713          	andi	a4,a3,1
    8000d2ba:	14071163          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d2be:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d2c2:	460d                	li	a2,3
    8000d2c4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d2c8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d2ca:	00c59763          	bne	a1,a2,8000d2d8 <tinst_tests_gpf+0x20d6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d2ce:	0026d683          	lhu	a3,2(a3)
    8000d2d2:	0106969b          	slliw	a3,a3,0x10
    8000d2d6:	8f55                	or	a4,a4,a3
    8000d2d8:	1ffe16b7          	lui	a3,0x1ffe1
    8000d2dc:	068e                	slli	a3,a3,0x3
    8000d2de:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d2e0:	8f75                	and	a4,a4,a3
    8000d2e2:	00e78463          	beq	a5,a4,8000d2ea <tinst_tests_gpf+0x20e8>
    8000d2e6:	be7fe06f          	j	8000becc <tinst_tests_gpf+0xcca>
    8000d2ea:	bf7fe06f          	j	8000bee0 <tinst_tests_gpf+0xcde>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000d2ee:	02043903          	ld	s2,32(s0)
    8000d2f2:	6e0912e3          	bnez	s2,8000e1d6 <tinst_tests_gpf+0x2fd4>
    8000d2f6:	00020597          	auipc	a1,0x20
    8000d2fa:	fea58593          	addi	a1,a1,-22 # 8002d2e0 <__func__.0+0x2c0>
    8000d2fe:	887fe06f          	j	8000bb84 <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a lbu which results in a lgpf",
    8000d302:	7018                	ld	a4,32(s0)
    8000d304:	e319                	bnez	a4,8000d30a <tinst_tests_gpf+0x2108>
    8000d306:	8e6fe06f          	j	8000b3ec <tinst_tests_gpf+0x1ea>
    8000d30a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d30c:	0016f793          	andi	a5,a3,1
    8000d310:	e7f5                	bnez	a5,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d312:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d316:	460d                	li	a2,3
    8000d318:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d31c:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d31e:	00c59763          	bne	a1,a2,8000d32c <tinst_tests_gpf+0x212a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d322:	0026d683          	lhu	a3,2(a3)
    8000d326:	0106969b          	slliw	a3,a3,0x10
    8000d32a:	8fd5                	or	a5,a5,a3
    8000d32c:	03179493          	slli	s1,a5,0x31
    8000d330:	90c5                	srli	s1,s1,0x31
    8000d332:	8c99                	sub	s1,s1,a4
    8000d334:	0014b493          	seqz	s1,s1
    8000d338:	8b4fe06f          	j	8000b3ec <tinst_tests_gpf+0x1ea>
    TEST_ASSERT("correct tinst when executing a lh which results in a lgpf",
    8000d33c:	7018                	ld	a4,32(s0)
    8000d33e:	e319                	bnez	a4,8000d344 <tinst_tests_gpf+0x2142>
    8000d340:	942fe06f          	j	8000b482 <tinst_tests_gpf+0x280>
    8000d344:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d346:	0016f793          	andi	a5,a3,1
    8000d34a:	ebcd                	bnez	a5,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d34c:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d350:	460d                	li	a2,3
    8000d352:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d356:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d358:	00c59763          	bne	a1,a2,8000d366 <tinst_tests_gpf+0x2164>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d35c:	0026d683          	lhu	a3,2(a3)
    8000d360:	0106969b          	slliw	a3,a3,0x10
    8000d364:	8fd5                	or	a5,a5,a3
    8000d366:	03179493          	slli	s1,a5,0x31
    8000d36a:	90c5                	srli	s1,s1,0x31
    8000d36c:	8c99                	sub	s1,s1,a4
    8000d36e:	0014b493          	seqz	s1,s1
    8000d372:	910fe06f          	j	8000b482 <tinst_tests_gpf+0x280>
    TEST_ASSERT("correct tinst when executing a lhu which results in a lgpf",
    8000d376:	7018                	ld	a4,32(s0)
    8000d378:	e319                	bnez	a4,8000d37e <tinst_tests_gpf+0x217c>
    8000d37a:	9aafe06f          	j	8000b524 <tinst_tests_gpf+0x322>
    8000d37e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d380:	0016f793          	andi	a5,a3,1
    8000d384:	efa5                	bnez	a5,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d386:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d38a:	460d                	li	a2,3
    8000d38c:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d390:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d392:	00c59763          	bne	a1,a2,8000d3a0 <tinst_tests_gpf+0x219e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d396:	0026d683          	lhu	a3,2(a3)
    8000d39a:	0106969b          	slliw	a3,a3,0x10
    8000d39e:	8fd5                	or	a5,a5,a3
    8000d3a0:	03179493          	slli	s1,a5,0x31
    8000d3a4:	90c5                	srli	s1,s1,0x31
    8000d3a6:	8c99                	sub	s1,s1,a4
    8000d3a8:	0014b493          	seqz	s1,s1
    8000d3ac:	978fe06f          	j	8000b524 <tinst_tests_gpf+0x322>
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000d3b0:	7018                	ld	a4,32(s0)
    8000d3b2:	e319                	bnez	a4,8000d3b8 <tinst_tests_gpf+0x21b6>
    8000d3b4:	a12fe06f          	j	8000b5c6 <tinst_tests_gpf+0x3c4>
    8000d3b8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3ba:	0016f793          	andi	a5,a3,1
    8000d3be:	ef9d                	bnez	a5,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d3c0:	0006d783          	lhu	a5,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d3c4:	460d                	li	a2,3
    8000d3c6:	00c7f5b3          	and	a1,a5,a2
    instruction = *((uint16_t*)addr);
    8000d3ca:	2781                	sext.w	a5,a5
    if(!INS_COMPRESSED(instruction)) {
    8000d3cc:	00c59763          	bne	a1,a2,8000d3da <tinst_tests_gpf+0x21d8>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d3d0:	0026d683          	lhu	a3,2(a3)
    8000d3d4:	0106969b          	slliw	a3,a3,0x10
    8000d3d8:	8fd5                	or	a5,a5,a3
    8000d3da:	17c6                	slli	a5,a5,0x31
    8000d3dc:	0317d493          	srli	s1,a5,0x31
    8000d3e0:	8c99                	sub	s1,s1,a4
    8000d3e2:	0014b493          	seqz	s1,s1
    8000d3e6:	9e0fe06f          	j	8000b5c6 <tinst_tests_gpf+0x3c4>
    8000d3ea:	701c                	ld	a5,32(s0)
    8000d3ec:	e399                	bnez	a5,8000d3f2 <tinst_tests_gpf+0x21f0>
    8000d3ee:	9b8fe06f          	j	8000b5a6 <tinst_tests_gpf+0x3a4>
    8000d3f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d3f4:	0016f713          	andi	a4,a3,1
    8000d3f8:	320704e3          	beqz	a4,8000df20 <tinst_tests_gpf+0x2d1e>
        ERROR("trying to read unaligned instruction (%s, %d)", __func__, __LINE__);
    8000d3fc:	12300613          	li	a2,291
    8000d400:	0001e597          	auipc	a1,0x1e
    8000d404:	4a858593          	addi	a1,a1,1192 # 8002b8a8 <__func__.1>
    8000d408:	00022517          	auipc	a0,0x22
    8000d40c:	8d050513          	addi	a0,a0,-1840 # 8002ecd8 <__func__.0+0x1cb8>
    8000d410:	1ab1d0ef          	jal	8002adba <printf>
    8000d414:	12300613          	li	a2,291
    8000d418:	0001e597          	auipc	a1,0x1e
    8000d41c:	49058593          	addi	a1,a1,1168 # 8002b8a8 <__func__.1>
    8000d420:	00020517          	auipc	a0,0x20
    8000d424:	06850513          	addi	a0,a0,104 # 8002d488 <__func__.0+0x468>
    8000d428:	1931d0ef          	jal	8002adba <printf>
    8000d42c:	4501                	li	a0,0
    8000d42e:	5421d0ef          	jal	8002a970 <exit>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000d432:	701c                	ld	a5,32(s0)
    8000d434:	00020597          	auipc	a1,0x20
    8000d438:	eac58593          	addi	a1,a1,-340 # 8002d2e0 <__func__.0+0x2c0>
    8000d43c:	e399                	bnez	a5,8000d442 <tinst_tests_gpf+0x2240>
    8000d43e:	ba5fe06f          	j	8000bfe2 <tinst_tests_gpf+0xde0>
    8000d442:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d444:	0016f713          	andi	a4,a3,1
    8000d448:	fb55                	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d44a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d44e:	460d                	li	a2,3
    8000d450:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d454:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d456:	00c59763          	bne	a1,a2,8000d464 <tinst_tests_gpf+0x2262>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d45a:	0026d683          	lhu	a3,2(a3)
    8000d45e:	0106969b          	slliw	a3,a3,0x10
    8000d462:	8f55                	or	a4,a4,a3
    8000d464:	1ffe16b7          	lui	a3,0x1ffe1
    8000d468:	068e                	slli	a3,a3,0x3
    8000d46a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d46c:	8f75                	and	a4,a4,a3
    8000d46e:	00020597          	auipc	a1,0x20
    8000d472:	e7258593          	addi	a1,a1,-398 # 8002d2e0 <__func__.0+0x2c0>
    8000d476:	00e79463          	bne	a5,a4,8000d47e <tinst_tests_gpf+0x227c>
    8000d47a:	b69fe06f          	j	8000bfe2 <tinst_tests_gpf+0xde0>
    8000d47e:	00020597          	auipc	a1,0x20
    8000d482:	e7258593          	addi	a1,a1,-398 # 8002d2f0 <__func__.0+0x2d0>
    8000d486:	b5dfe06f          	j	8000bfe2 <tinst_tests_gpf+0xde0>
    TEST_ASSERT("correct tinst when executing a lwu which results in a lgpf",
    8000d48a:	701c                	ld	a5,32(s0)
    8000d48c:	e399                	bnez	a5,8000d492 <tinst_tests_gpf+0x2290>
    8000d48e:	9bafe06f          	j	8000b648 <tinst_tests_gpf+0x446>
    8000d492:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d494:	0016f713          	andi	a4,a3,1
    8000d498:	f335                	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d49a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d49e:	460d                	li	a2,3
    8000d4a0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d4a4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d4a6:	00c59763          	bne	a1,a2,8000d4b4 <tinst_tests_gpf+0x22b2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d4aa:	0026d683          	lhu	a3,2(a3)
    8000d4ae:	0106969b          	slliw	a3,a3,0x10
    8000d4b2:	8f55                	or	a4,a4,a3
    8000d4b4:	1746                	slli	a4,a4,0x31
    8000d4b6:	9345                	srli	a4,a4,0x31
    8000d4b8:	00e78463          	beq	a5,a4,8000d4c0 <tinst_tests_gpf+0x22be>
    8000d4bc:	978fe06f          	j	8000b634 <tinst_tests_gpf+0x432>
    8000d4c0:	988fe06f          	j	8000b648 <tinst_tests_gpf+0x446>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000d4c4:	701c                	ld	a5,32(s0)
    8000d4c6:	00020597          	auipc	a1,0x20
    8000d4ca:	e1a58593          	addi	a1,a1,-486 # 8002d2e0 <__func__.0+0x2c0>
    8000d4ce:	e399                	bnez	a5,8000d4d4 <tinst_tests_gpf+0x22d2>
    8000d4d0:	bb5fe06f          	j	8000c084 <tinst_tests_gpf+0xe82>
    8000d4d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d4d6:	0016f713          	andi	a4,a3,1
    8000d4da:	f30d                	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d4dc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d4e0:	460d                	li	a2,3
    8000d4e2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d4e6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d4e8:	00c59763          	bne	a1,a2,8000d4f6 <tinst_tests_gpf+0x22f4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d4ec:	0026d683          	lhu	a3,2(a3)
    8000d4f0:	0106969b          	slliw	a3,a3,0x10
    8000d4f4:	8f55                	or	a4,a4,a3
    8000d4f6:	1ffe16b7          	lui	a3,0x1ffe1
    8000d4fa:	068e                	slli	a3,a3,0x3
    8000d4fc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d4fe:	8f75                	and	a4,a4,a3
    8000d500:	00020597          	auipc	a1,0x20
    8000d504:	de058593          	addi	a1,a1,-544 # 8002d2e0 <__func__.0+0x2c0>
    8000d508:	00e79463          	bne	a5,a4,8000d510 <tinst_tests_gpf+0x230e>
    8000d50c:	b79fe06f          	j	8000c084 <tinst_tests_gpf+0xe82>
    8000d510:	00020597          	auipc	a1,0x20
    8000d514:	de058593          	addi	a1,a1,-544 # 8002d2f0 <__func__.0+0x2d0>
    8000d518:	b6dfe06f          	j	8000c084 <tinst_tests_gpf+0xe82>
    TEST_ASSERT("correct tinst when executing a ld which results in a lgpf",
    8000d51c:	701c                	ld	a5,32(s0)
    8000d51e:	e399                	bnez	a5,8000d524 <tinst_tests_gpf+0x2322>
    8000d520:	9c2fe06f          	j	8000b6e2 <tinst_tests_gpf+0x4e0>
    8000d524:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d526:	0016f713          	andi	a4,a3,1
    8000d52a:	ec0719e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d52e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d532:	460d                	li	a2,3
    8000d534:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d538:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d53a:	00c59763          	bne	a1,a2,8000d548 <tinst_tests_gpf+0x2346>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d53e:	0026d683          	lhu	a3,2(a3)
    8000d542:	0106969b          	slliw	a3,a3,0x10
    8000d546:	8f55                	or	a4,a4,a3
    8000d548:	1746                	slli	a4,a4,0x31
    8000d54a:	9345                	srli	a4,a4,0x31
    8000d54c:	00e78463          	beq	a5,a4,8000d554 <tinst_tests_gpf+0x2352>
    8000d550:	97efe06f          	j	8000b6ce <tinst_tests_gpf+0x4cc>
    8000d554:	98efe06f          	j	8000b6e2 <tinst_tests_gpf+0x4e0>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000d558:	701c                	ld	a5,32(s0)
    8000d55a:	00020597          	auipc	a1,0x20
    8000d55e:	d8658593          	addi	a1,a1,-634 # 8002d2e0 <__func__.0+0x2c0>
    8000d562:	e399                	bnez	a5,8000d568 <tinst_tests_gpf+0x2366>
    8000d564:	bc3fe06f          	j	8000c126 <tinst_tests_gpf+0xf24>
    8000d568:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d56a:	0016f713          	andi	a4,a3,1
    8000d56e:	e80717e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d572:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d576:	460d                	li	a2,3
    8000d578:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d57c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d57e:	00c59763          	bne	a1,a2,8000d58c <tinst_tests_gpf+0x238a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d582:	0026d683          	lhu	a3,2(a3)
    8000d586:	0106969b          	slliw	a3,a3,0x10
    8000d58a:	8f55                	or	a4,a4,a3
    8000d58c:	1ffe16b7          	lui	a3,0x1ffe1
    8000d590:	068e                	slli	a3,a3,0x3
    8000d592:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d594:	8f75                	and	a4,a4,a3
    8000d596:	00020597          	auipc	a1,0x20
    8000d59a:	d4a58593          	addi	a1,a1,-694 # 8002d2e0 <__func__.0+0x2c0>
    8000d59e:	00e79463          	bne	a5,a4,8000d5a6 <tinst_tests_gpf+0x23a4>
    8000d5a2:	b85fe06f          	j	8000c126 <tinst_tests_gpf+0xf24>
    8000d5a6:	00020597          	auipc	a1,0x20
    8000d5aa:	d4a58593          	addi	a1,a1,-694 # 8002d2f0 <__func__.0+0x2d0>
    8000d5ae:	b79fe06f          	j	8000c126 <tinst_tests_gpf+0xf24>
    TEST_ASSERT("correct tinst when executing a sb which results in a sgpf",
    8000d5b2:	701c                	ld	a5,32(s0)
    8000d5b4:	e399                	bnez	a5,8000d5ba <tinst_tests_gpf+0x23b8>
    8000d5b6:	9c8fe06f          	j	8000b77e <tinst_tests_gpf+0x57c>
    8000d5ba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d5bc:	0016f713          	andi	a4,a3,1
    8000d5c0:	e2071ee3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d5c4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d5c8:	460d                	li	a2,3
    8000d5ca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d5ce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d5d0:	00c59763          	bne	a1,a2,8000d5de <tinst_tests_gpf+0x23dc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d5d4:	0026d683          	lhu	a3,2(a3)
    8000d5d8:	0106969b          	slliw	a3,a3,0x10
    8000d5dc:	8f55                	or	a4,a4,a3
    8000d5de:	01f076b7          	lui	a3,0x1f07
    8000d5e2:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d5e6:	8f75                	and	a4,a4,a3
    8000d5e8:	00e78463          	beq	a5,a4,8000d5f0 <tinst_tests_gpf+0x23ee>
    8000d5ec:	97efe06f          	j	8000b76a <tinst_tests_gpf+0x568>
    8000d5f0:	98efe06f          	j	8000b77e <tinst_tests_gpf+0x57c>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000d5f4:	701c                	ld	a5,32(s0)
    8000d5f6:	00020597          	auipc	a1,0x20
    8000d5fa:	cea58593          	addi	a1,a1,-790 # 8002d2e0 <__func__.0+0x2c0>
    8000d5fe:	e399                	bnez	a5,8000d604 <tinst_tests_gpf+0x2402>
    8000d600:	bc9fe06f          	j	8000c1c8 <tinst_tests_gpf+0xfc6>
    8000d604:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d606:	0016f713          	andi	a4,a3,1
    8000d60a:	de0719e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d60e:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d612:	460d                	li	a2,3
    8000d614:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d618:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d61a:	00c59763          	bne	a1,a2,8000d628 <tinst_tests_gpf+0x2426>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d61e:	0026d683          	lhu	a3,2(a3)
    8000d622:	0106969b          	slliw	a3,a3,0x10
    8000d626:	8f55                	or	a4,a4,a3
    8000d628:	1ffe16b7          	lui	a3,0x1ffe1
    8000d62c:	068e                	slli	a3,a3,0x3
    8000d62e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d630:	8f75                	and	a4,a4,a3
    8000d632:	00020597          	auipc	a1,0x20
    8000d636:	cae58593          	addi	a1,a1,-850 # 8002d2e0 <__func__.0+0x2c0>
    8000d63a:	00e79463          	bne	a5,a4,8000d642 <tinst_tests_gpf+0x2440>
    8000d63e:	b8bfe06f          	j	8000c1c8 <tinst_tests_gpf+0xfc6>
    8000d642:	00020597          	auipc	a1,0x20
    8000d646:	cae58593          	addi	a1,a1,-850 # 8002d2f0 <__func__.0+0x2d0>
    8000d64a:	b7ffe06f          	j	8000c1c8 <tinst_tests_gpf+0xfc6>
    TEST_ASSERT("correct tinst when executing a sh which results in a sgpf",
    8000d64e:	701c                	ld	a5,32(s0)
    8000d650:	e399                	bnez	a5,8000d656 <tinst_tests_gpf+0x2454>
    8000d652:	9ccfe06f          	j	8000b81e <tinst_tests_gpf+0x61c>
    8000d656:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d658:	0016f713          	andi	a4,a3,1
    8000d65c:	da0710e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d660:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d664:	460d                	li	a2,3
    8000d666:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d66a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d66c:	00c59763          	bne	a1,a2,8000d67a <tinst_tests_gpf+0x2478>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d670:	0026d683          	lhu	a3,2(a3)
    8000d674:	0106969b          	slliw	a3,a3,0x10
    8000d678:	8f55                	or	a4,a4,a3
    8000d67a:	01f076b7          	lui	a3,0x1f07
    8000d67e:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d682:	8f75                	and	a4,a4,a3
    8000d684:	00e78463          	beq	a5,a4,8000d68c <tinst_tests_gpf+0x248a>
    8000d688:	982fe06f          	j	8000b80a <tinst_tests_gpf+0x608>
    8000d68c:	992fe06f          	j	8000b81e <tinst_tests_gpf+0x61c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000d690:	701c                	ld	a5,32(s0)
    8000d692:	00020597          	auipc	a1,0x20
    8000d696:	c4e58593          	addi	a1,a1,-946 # 8002d2e0 <__func__.0+0x2c0>
    8000d69a:	e399                	bnez	a5,8000d6a0 <tinst_tests_gpf+0x249e>
    8000d69c:	bd5fe06f          	j	8000c270 <tinst_tests_gpf+0x106e>
    8000d6a0:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6a2:	0016f713          	andi	a4,a3,1
    8000d6a6:	d4071be3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d6aa:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d6ae:	460d                	li	a2,3
    8000d6b0:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d6b4:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d6b6:	00c59763          	bne	a1,a2,8000d6c4 <tinst_tests_gpf+0x24c2>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d6ba:	0026d683          	lhu	a3,2(a3)
    8000d6be:	0106969b          	slliw	a3,a3,0x10
    8000d6c2:	8f55                	or	a4,a4,a3
    8000d6c4:	1ffe16b7          	lui	a3,0x1ffe1
    8000d6c8:	068e                	slli	a3,a3,0x3
    8000d6ca:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d6cc:	8f75                	and	a4,a4,a3
    8000d6ce:	00020597          	auipc	a1,0x20
    8000d6d2:	c1258593          	addi	a1,a1,-1006 # 8002d2e0 <__func__.0+0x2c0>
    8000d6d6:	00e79463          	bne	a5,a4,8000d6de <tinst_tests_gpf+0x24dc>
    8000d6da:	b97fe06f          	j	8000c270 <tinst_tests_gpf+0x106e>
    8000d6de:	00020597          	auipc	a1,0x20
    8000d6e2:	c1258593          	addi	a1,a1,-1006 # 8002d2f0 <__func__.0+0x2d0>
    8000d6e6:	b8bfe06f          	j	8000c270 <tinst_tests_gpf+0x106e>
    TEST_ASSERT("correct tinst when executing a sw which results in a sgpf",
    8000d6ea:	701c                	ld	a5,32(s0)
    8000d6ec:	e399                	bnez	a5,8000d6f2 <tinst_tests_gpf+0x24f0>
    8000d6ee:	9d2fe06f          	j	8000b8c0 <tinst_tests_gpf+0x6be>
    8000d6f2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d6f4:	0016f713          	andi	a4,a3,1
    8000d6f8:	d00712e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d6fc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d700:	460d                	li	a2,3
    8000d702:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d706:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d708:	00c59763          	bne	a1,a2,8000d716 <tinst_tests_gpf+0x2514>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d70c:	0026d683          	lhu	a3,2(a3)
    8000d710:	0106969b          	slliw	a3,a3,0x10
    8000d714:	8f55                	or	a4,a4,a3
    8000d716:	01f076b7          	lui	a3,0x1f07
    8000d71a:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d71e:	8f75                	and	a4,a4,a3
    8000d720:	00e78463          	beq	a5,a4,8000d728 <tinst_tests_gpf+0x2526>
    8000d724:	988fe06f          	j	8000b8ac <tinst_tests_gpf+0x6aa>
    8000d728:	998fe06f          	j	8000b8c0 <tinst_tests_gpf+0x6be>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000d72c:	701c                	ld	a5,32(s0)
    8000d72e:	00020597          	auipc	a1,0x20
    8000d732:	bb258593          	addi	a1,a1,-1102 # 8002d2e0 <__func__.0+0x2c0>
    8000d736:	e399                	bnez	a5,8000d73c <tinst_tests_gpf+0x253a>
    8000d738:	bdbfe06f          	j	8000c312 <tinst_tests_gpf+0x1110>
    8000d73c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d73e:	0016f713          	andi	a4,a3,1
    8000d742:	ca071de3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d746:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d74a:	460d                	li	a2,3
    8000d74c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d750:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d752:	00c59763          	bne	a1,a2,8000d760 <tinst_tests_gpf+0x255e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d756:	0026d683          	lhu	a3,2(a3)
    8000d75a:	0106969b          	slliw	a3,a3,0x10
    8000d75e:	8f55                	or	a4,a4,a3
    8000d760:	1ffe16b7          	lui	a3,0x1ffe1
    8000d764:	068e                	slli	a3,a3,0x3
    8000d766:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d768:	8f75                	and	a4,a4,a3
    8000d76a:	00020597          	auipc	a1,0x20
    8000d76e:	b7658593          	addi	a1,a1,-1162 # 8002d2e0 <__func__.0+0x2c0>
    8000d772:	00e79463          	bne	a5,a4,8000d77a <tinst_tests_gpf+0x2578>
    8000d776:	b9dfe06f          	j	8000c312 <tinst_tests_gpf+0x1110>
    8000d77a:	00020597          	auipc	a1,0x20
    8000d77e:	b7658593          	addi	a1,a1,-1162 # 8002d2f0 <__func__.0+0x2d0>
    8000d782:	b91fe06f          	j	8000c312 <tinst_tests_gpf+0x1110>
    TEST_ASSERT("correct tinst when executing a sd which results in a sgpf",
    8000d786:	701c                	ld	a5,32(s0)
    8000d788:	e399                	bnez	a5,8000d78e <tinst_tests_gpf+0x258c>
    8000d78a:	9dafe06f          	j	8000b964 <tinst_tests_gpf+0x762>
    8000d78e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d790:	0016f713          	andi	a4,a3,1
    8000d794:	c60714e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d798:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d79c:	460d                	li	a2,3
    8000d79e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d7a2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7a4:	00c59763          	bne	a1,a2,8000d7b2 <tinst_tests_gpf+0x25b0>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7a8:	0026d683          	lhu	a3,2(a3)
    8000d7ac:	0106969b          	slliw	a3,a3,0x10
    8000d7b0:	8f55                	or	a4,a4,a3
    8000d7b2:	01f076b7          	lui	a3,0x1f07
    8000d7b6:	07f68693          	addi	a3,a3,127 # 1f0707f <STACK_SIZE+0x1e0707f>
    8000d7ba:	8f75                	and	a4,a4,a3
    8000d7bc:	00e78463          	beq	a5,a4,8000d7c4 <tinst_tests_gpf+0x25c2>
    8000d7c0:	990fe06f          	j	8000b950 <tinst_tests_gpf+0x74e>
    8000d7c4:	9a0fe06f          	j	8000b964 <tinst_tests_gpf+0x762>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000d7c8:	701c                	ld	a5,32(s0)
    8000d7ca:	00020597          	auipc	a1,0x20
    8000d7ce:	b1658593          	addi	a1,a1,-1258 # 8002d2e0 <__func__.0+0x2c0>
    8000d7d2:	e399                	bnez	a5,8000d7d8 <tinst_tests_gpf+0x25d6>
    8000d7d4:	be1fe06f          	j	8000c3b4 <tinst_tests_gpf+0x11b2>
    8000d7d8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d7da:	0016f713          	andi	a4,a3,1
    8000d7de:	c0071fe3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d7e2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d7e6:	460d                	li	a2,3
    8000d7e8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d7ec:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d7ee:	00c59763          	bne	a1,a2,8000d7fc <tinst_tests_gpf+0x25fa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d7f2:	0026d683          	lhu	a3,2(a3)
    8000d7f6:	0106969b          	slliw	a3,a3,0x10
    8000d7fa:	8f55                	or	a4,a4,a3
    8000d7fc:	1ffe16b7          	lui	a3,0x1ffe1
    8000d800:	068e                	slli	a3,a3,0x3
    8000d802:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d804:	8f75                	and	a4,a4,a3
    8000d806:	00020597          	auipc	a1,0x20
    8000d80a:	ada58593          	addi	a1,a1,-1318 # 8002d2e0 <__func__.0+0x2c0>
    8000d80e:	00e79463          	bne	a5,a4,8000d816 <tinst_tests_gpf+0x2614>
    8000d812:	ba3fe06f          	j	8000c3b4 <tinst_tests_gpf+0x11b2>
    8000d816:	00020597          	auipc	a1,0x20
    8000d81a:	ada58593          	addi	a1,a1,-1318 # 8002d2f0 <__func__.0+0x2d0>
    8000d81e:	b97fe06f          	j	8000c3b4 <tinst_tests_gpf+0x11b2>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d822:	02043903          	ld	s2,32(s0)
    8000d826:	00091463          	bnez	s2,8000d82e <tinst_tests_gpf+0x262c>
    8000d82a:	9cefe06f          	j	8000b9f8 <tinst_tests_gpf+0x7f6>
    8000d82e:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d830:	0017f713          	andi	a4,a5,1
    8000d834:	bc0714e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d838:	0007d503          	lhu	a0,0(a5)
    8000d83c:	e6bf30ef          	jal	800016a6 <expand_compressed_instruction>
    8000d840:	67a1                	lui	a5,0x8
    8000d842:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d844:	8d7d                	and	a0,a0,a5
    8000d846:	00a90463          	beq	s2,a0,8000d84e <tinst_tests_gpf+0x264c>
    8000d84a:	99afe06f          	j	8000b9e4 <tinst_tests_gpf+0x7e2>
    8000d84e:	9aafe06f          	j	8000b9f8 <tinst_tests_gpf+0x7f6>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000d852:	701c                	ld	a5,32(s0)
    8000d854:	00020597          	auipc	a1,0x20
    8000d858:	a8c58593          	addi	a1,a1,-1396 # 8002d2e0 <__func__.0+0x2c0>
    8000d85c:	e399                	bnez	a5,8000d862 <tinst_tests_gpf+0x2660>
    8000d85e:	bf9fe06f          	j	8000c456 <tinst_tests_gpf+0x1254>
    8000d862:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d864:	0016f713          	andi	a4,a3,1
    8000d868:	b8071ae3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d86c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d870:	460d                	li	a2,3
    8000d872:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d876:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d878:	00c59763          	bne	a1,a2,8000d886 <tinst_tests_gpf+0x2684>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d87c:	0026d683          	lhu	a3,2(a3)
    8000d880:	0106969b          	slliw	a3,a3,0x10
    8000d884:	8f55                	or	a4,a4,a3
    8000d886:	1ffe16b7          	lui	a3,0x1ffe1
    8000d88a:	068e                	slli	a3,a3,0x3
    8000d88c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d88e:	8f75                	and	a4,a4,a3
    8000d890:	00020597          	auipc	a1,0x20
    8000d894:	a5058593          	addi	a1,a1,-1456 # 8002d2e0 <__func__.0+0x2c0>
    8000d898:	00e79463          	bne	a5,a4,8000d8a0 <tinst_tests_gpf+0x269e>
    8000d89c:	bbbfe06f          	j	8000c456 <tinst_tests_gpf+0x1254>
    8000d8a0:	00020597          	auipc	a1,0x20
    8000d8a4:	a5058593          	addi	a1,a1,-1456 # 8002d2f0 <__func__.0+0x2d0>
    8000d8a8:	baffe06f          	j	8000c456 <tinst_tests_gpf+0x1254>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000d8ac:	02043983          	ld	s3,32(s0)
    8000d8b0:	00099463          	bnez	s3,8000d8b8 <tinst_tests_gpf+0x26b6>
    8000d8b4:	9dafe06f          	j	8000ba8e <tinst_tests_gpf+0x88c>
    8000d8b8:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d8ba:	0017f713          	andi	a4,a5,1
    8000d8be:	b2071fe3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d8c2:	0007d503          	lhu	a0,0(a5)
    8000d8c6:	de1f30ef          	jal	800016a6 <expand_compressed_instruction>
    8000d8ca:	67a1                	lui	a5,0x8
    8000d8cc:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000d8ce:	8d7d                	and	a0,a0,a5
    8000d8d0:	00a98463          	beq	s3,a0,8000d8d8 <tinst_tests_gpf+0x26d6>
    8000d8d4:	9a6fe06f          	j	8000ba7a <tinst_tests_gpf+0x878>
    8000d8d8:	9b6fe06f          	j	8000ba8e <tinst_tests_gpf+0x88c>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000d8dc:	701c                	ld	a5,32(s0)
    8000d8de:	00020597          	auipc	a1,0x20
    8000d8e2:	a0258593          	addi	a1,a1,-1534 # 8002d2e0 <__func__.0+0x2c0>
    8000d8e6:	e399                	bnez	a5,8000d8ec <tinst_tests_gpf+0x26ea>
    8000d8e8:	c11fe06f          	j	8000c4f8 <tinst_tests_gpf+0x12f6>
    8000d8ec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d8ee:	0016f713          	andi	a4,a3,1
    8000d8f2:	b00715e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d8f6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d8fa:	460d                	li	a2,3
    8000d8fc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d900:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d902:	00c59763          	bne	a1,a2,8000d910 <tinst_tests_gpf+0x270e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d906:	0026d683          	lhu	a3,2(a3)
    8000d90a:	0106969b          	slliw	a3,a3,0x10
    8000d90e:	8f55                	or	a4,a4,a3
    8000d910:	1ffe16b7          	lui	a3,0x1ffe1
    8000d914:	068e                	slli	a3,a3,0x3
    8000d916:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d918:	8f75                	and	a4,a4,a3
    8000d91a:	00020597          	auipc	a1,0x20
    8000d91e:	9c658593          	addi	a1,a1,-1594 # 8002d2e0 <__func__.0+0x2c0>
    8000d922:	00e79463          	bne	a5,a4,8000d92a <tinst_tests_gpf+0x2728>
    8000d926:	bd3fe06f          	j	8000c4f8 <tinst_tests_gpf+0x12f6>
    8000d92a:	00020597          	auipc	a1,0x20
    8000d92e:	9c658593          	addi	a1,a1,-1594 # 8002d2f0 <__func__.0+0x2d0>
    8000d932:	bc7fe06f          	j	8000c4f8 <tinst_tests_gpf+0x12f6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000d936:	02043983          	ld	s3,32(s0)
    8000d93a:	00099463          	bnez	s3,8000d942 <tinst_tests_gpf+0x2740>
    8000d93e:	9e6fe06f          	j	8000bb24 <tinst_tests_gpf+0x922>
    8000d942:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d944:	0017f713          	andi	a4,a5,1
    8000d948:	aa071ae3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d94c:	0007d503          	lhu	a0,0(a5)
    8000d950:	d57f30ef          	jal	800016a6 <expand_compressed_instruction>
    8000d954:	01f077b7          	lui	a5,0x1f07
    8000d958:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d95c:	8d7d                	and	a0,a0,a5
    8000d95e:	00a98463          	beq	s3,a0,8000d966 <tinst_tests_gpf+0x2764>
    8000d962:	9aefe06f          	j	8000bb10 <tinst_tests_gpf+0x90e>
    8000d966:	9befe06f          	j	8000bb24 <tinst_tests_gpf+0x922>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000d96a:	701c                	ld	a5,32(s0)
    8000d96c:	00020597          	auipc	a1,0x20
    8000d970:	97458593          	addi	a1,a1,-1676 # 8002d2e0 <__func__.0+0x2c0>
    8000d974:	e399                	bnez	a5,8000d97a <tinst_tests_gpf+0x2778>
    8000d976:	c25fe06f          	j	8000c59a <tinst_tests_gpf+0x1398>
    8000d97a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000d97c:	0016f713          	andi	a4,a3,1
    8000d980:	a6071ee3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d984:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000d988:	460d                	li	a2,3
    8000d98a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000d98e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000d990:	00c59763          	bne	a1,a2,8000d99e <tinst_tests_gpf+0x279c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000d994:	0026d683          	lhu	a3,2(a3)
    8000d998:	0106969b          	slliw	a3,a3,0x10
    8000d99c:	8f55                	or	a4,a4,a3
    8000d99e:	1ffe16b7          	lui	a3,0x1ffe1
    8000d9a2:	068e                	slli	a3,a3,0x3
    8000d9a4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000d9a6:	8f75                	and	a4,a4,a3
    8000d9a8:	00020597          	auipc	a1,0x20
    8000d9ac:	93858593          	addi	a1,a1,-1736 # 8002d2e0 <__func__.0+0x2c0>
    8000d9b0:	00e79463          	bne	a5,a4,8000d9b8 <tinst_tests_gpf+0x27b6>
    8000d9b4:	be7fe06f          	j	8000c59a <tinst_tests_gpf+0x1398>
    8000d9b8:	00020597          	auipc	a1,0x20
    8000d9bc:	93858593          	addi	a1,a1,-1736 # 8002d2f0 <__func__.0+0x2d0>
    8000d9c0:	bdbfe06f          	j	8000c59a <tinst_tests_gpf+0x1398>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000d9c4:	02043903          	ld	s2,32(s0)
    8000d9c8:	00091463          	bnez	s2,8000d9d0 <tinst_tests_gpf+0x27ce>
    8000d9cc:	9eefe06f          	j	8000bbba <tinst_tests_gpf+0x9b8>
    8000d9d0:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000d9d2:	0017f713          	andi	a4,a5,1
    8000d9d6:	a20713e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000d9da:	0007d503          	lhu	a0,0(a5)
    8000d9de:	cc9f30ef          	jal	800016a6 <expand_compressed_instruction>
    8000d9e2:	01f077b7          	lui	a5,0x1f07
    8000d9e6:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000d9ea:	8d7d                	and	a0,a0,a5
    8000d9ec:	00a90463          	beq	s2,a0,8000d9f4 <tinst_tests_gpf+0x27f2>
    8000d9f0:	9b6fe06f          	j	8000bba6 <tinst_tests_gpf+0x9a4>
    8000d9f4:	9c6fe06f          	j	8000bbba <tinst_tests_gpf+0x9b8>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000d9f8:	701c                	ld	a5,32(s0)
    8000d9fa:	00020597          	auipc	a1,0x20
    8000d9fe:	8e658593          	addi	a1,a1,-1818 # 8002d2e0 <__func__.0+0x2c0>
    8000da02:	e399                	bnez	a5,8000da08 <tinst_tests_gpf+0x2806>
    8000da04:	c39fe06f          	j	8000c63c <tinst_tests_gpf+0x143a>
    8000da08:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000da0a:	0016f713          	andi	a4,a3,1
    8000da0e:	9e0717e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da12:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000da16:	460d                	li	a2,3
    8000da18:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000da1c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000da1e:	00c59763          	bne	a1,a2,8000da2c <tinst_tests_gpf+0x282a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000da22:	0026d683          	lhu	a3,2(a3)
    8000da26:	0106969b          	slliw	a3,a3,0x10
    8000da2a:	8f55                	or	a4,a4,a3
    8000da2c:	1ffe16b7          	lui	a3,0x1ffe1
    8000da30:	068e                	slli	a3,a3,0x3
    8000da32:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000da34:	8f75                	and	a4,a4,a3
    8000da36:	00020597          	auipc	a1,0x20
    8000da3a:	8aa58593          	addi	a1,a1,-1878 # 8002d2e0 <__func__.0+0x2c0>
    8000da3e:	00e79463          	bne	a5,a4,8000da46 <tinst_tests_gpf+0x2844>
    8000da42:	bfbfe06f          	j	8000c63c <tinst_tests_gpf+0x143a>
    8000da46:	00020597          	auipc	a1,0x20
    8000da4a:	8aa58593          	addi	a1,a1,-1878 # 8002d2f0 <__func__.0+0x2d0>
    8000da4e:	beffe06f          	j	8000c63c <tinst_tests_gpf+0x143a>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000da52:	701c                	ld	a5,32(s0)
    8000da54:	e399                	bnez	a5,8000da5a <tinst_tests_gpf+0x2858>
    8000da56:	a0cfe06f          	j	8000bc62 <tinst_tests_gpf+0xa60>
    8000da5a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000da5c:	0016f713          	andi	a4,a3,1
    8000da60:	98071ee3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000da64:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000da68:	460d                	li	a2,3
    8000da6a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000da6e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000da70:	00c59763          	bne	a1,a2,8000da7e <tinst_tests_gpf+0x287c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000da74:	0026d683          	lhu	a3,2(a3)
    8000da78:	0106969b          	slliw	a3,a3,0x10
    8000da7c:	8f55                	or	a4,a4,a3
    8000da7e:	1ffe16b7          	lui	a3,0x1ffe1
    8000da82:	068e                	slli	a3,a3,0x3
    8000da84:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000da86:	8f75                	and	a4,a4,a3
    8000da88:	00e78463          	beq	a5,a4,8000da90 <tinst_tests_gpf+0x288e>
    8000da8c:	9c2fe06f          	j	8000bc4e <tinst_tests_gpf+0xa4c>
    8000da90:	9d2fe06f          	j	8000bc62 <tinst_tests_gpf+0xa60>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000da94:	701c                	ld	a5,32(s0)
    8000da96:	00020597          	auipc	a1,0x20
    8000da9a:	84a58593          	addi	a1,a1,-1974 # 8002d2e0 <__func__.0+0x2c0>
    8000da9e:	e399                	bnez	a5,8000daa4 <tinst_tests_gpf+0x28a2>
    8000daa0:	c37fe06f          	j	8000c6d6 <tinst_tests_gpf+0x14d4>
    8000daa4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000daa6:	0016f713          	andi	a4,a3,1
    8000daaa:	940719e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000daae:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dab2:	460d                	li	a2,3
    8000dab4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dab8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000daba:	00c59763          	bne	a1,a2,8000dac8 <tinst_tests_gpf+0x28c6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dabe:	0026d683          	lhu	a3,2(a3)
    8000dac2:	0106969b          	slliw	a3,a3,0x10
    8000dac6:	8f55                	or	a4,a4,a3
    8000dac8:	1ffe16b7          	lui	a3,0x1ffe1
    8000dacc:	068e                	slli	a3,a3,0x3
    8000dace:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dad0:	8f75                	and	a4,a4,a3
    8000dad2:	00020597          	auipc	a1,0x20
    8000dad6:	80e58593          	addi	a1,a1,-2034 # 8002d2e0 <__func__.0+0x2c0>
    8000dada:	00e79463          	bne	a5,a4,8000dae2 <tinst_tests_gpf+0x28e0>
    8000dade:	bf9fe06f          	j	8000c6d6 <tinst_tests_gpf+0x14d4>
    8000dae2:	00020597          	auipc	a1,0x20
    8000dae6:	80e58593          	addi	a1,a1,-2034 # 8002d2f0 <__func__.0+0x2d0>
    8000daea:	bedfe06f          	j	8000c6d6 <tinst_tests_gpf+0x14d4>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000daee:	701c                	ld	a5,32(s0)
    8000daf0:	0001f597          	auipc	a1,0x1f
    8000daf4:	7f058593          	addi	a1,a1,2032 # 8002d2e0 <__func__.0+0x2c0>
    8000daf8:	e399                	bnez	a5,8000dafe <tinst_tests_gpf+0x28fc>
    8000dafa:	c77fe06f          	j	8000c770 <tinst_tests_gpf+0x156e>
    8000dafe:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db00:	0016f713          	andi	a4,a3,1
    8000db04:	8e071ce3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db08:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db0c:	460d                	li	a2,3
    8000db0e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db12:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db14:	00c59763          	bne	a1,a2,8000db22 <tinst_tests_gpf+0x2920>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db18:	0026d683          	lhu	a3,2(a3)
    8000db1c:	0106969b          	slliw	a3,a3,0x10
    8000db20:	8f55                	or	a4,a4,a3
    8000db22:	1ffe16b7          	lui	a3,0x1ffe1
    8000db26:	068e                	slli	a3,a3,0x3
    8000db28:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db2a:	8f75                	and	a4,a4,a3
    8000db2c:	0001f597          	auipc	a1,0x1f
    8000db30:	7b458593          	addi	a1,a1,1972 # 8002d2e0 <__func__.0+0x2c0>
    8000db34:	00e79463          	bne	a5,a4,8000db3c <tinst_tests_gpf+0x293a>
    8000db38:	c39fe06f          	j	8000c770 <tinst_tests_gpf+0x156e>
    8000db3c:	0001f597          	auipc	a1,0x1f
    8000db40:	7b458593          	addi	a1,a1,1972 # 8002d2f0 <__func__.0+0x2d0>
    8000db44:	c2dfe06f          	j	8000c770 <tinst_tests_gpf+0x156e>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000db48:	701c                	ld	a5,32(s0)
    8000db4a:	0001f597          	auipc	a1,0x1f
    8000db4e:	79658593          	addi	a1,a1,1942 # 8002d2e0 <__func__.0+0x2c0>
    8000db52:	e399                	bnez	a5,8000db58 <tinst_tests_gpf+0x2956>
    8000db54:	cb7fe06f          	j	8000c80a <tinst_tests_gpf+0x1608>
    8000db58:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000db5a:	0016f713          	andi	a4,a3,1
    8000db5e:	88071fe3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000db62:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000db66:	460d                	li	a2,3
    8000db68:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000db6c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000db6e:	00c59763          	bne	a1,a2,8000db7c <tinst_tests_gpf+0x297a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000db72:	0026d683          	lhu	a3,2(a3)
    8000db76:	0106969b          	slliw	a3,a3,0x10
    8000db7a:	8f55                	or	a4,a4,a3
    8000db7c:	1ffe16b7          	lui	a3,0x1ffe1
    8000db80:	068e                	slli	a3,a3,0x3
    8000db82:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000db84:	8f75                	and	a4,a4,a3
    8000db86:	0001f597          	auipc	a1,0x1f
    8000db8a:	75a58593          	addi	a1,a1,1882 # 8002d2e0 <__func__.0+0x2c0>
    8000db8e:	00e79463          	bne	a5,a4,8000db96 <tinst_tests_gpf+0x2994>
    8000db92:	c79fe06f          	j	8000c80a <tinst_tests_gpf+0x1608>
    8000db96:	0001f597          	auipc	a1,0x1f
    8000db9a:	75a58593          	addi	a1,a1,1882 # 8002d2f0 <__func__.0+0x2d0>
    8000db9e:	c6dfe06f          	j	8000c80a <tinst_tests_gpf+0x1608>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000dba2:	701c                	ld	a5,32(s0)
    8000dba4:	e399                	bnez	a5,8000dbaa <tinst_tests_gpf+0x29a8>
    8000dba6:	bd0fe06f          	j	8000bf76 <tinst_tests_gpf+0xd74>
    8000dbaa:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbac:	0016f713          	andi	a4,a3,1
    8000dbb0:	840716e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dbb4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbb8:	460d                	li	a2,3
    8000dbba:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dbbe:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dbc0:	00c59763          	bne	a1,a2,8000dbce <tinst_tests_gpf+0x29cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dbc4:	0026d683          	lhu	a3,2(a3)
    8000dbc8:	0106969b          	slliw	a3,a3,0x10
    8000dbcc:	8f55                	or	a4,a4,a3
    8000dbce:	1ffe16b7          	lui	a3,0x1ffe1
    8000dbd2:	068e                	slli	a3,a3,0x3
    8000dbd4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dbd6:	8f75                	and	a4,a4,a3
    8000dbd8:	00e78463          	beq	a5,a4,8000dbe0 <tinst_tests_gpf+0x29de>
    8000dbdc:	b86fe06f          	j	8000bf62 <tinst_tests_gpf+0xd60>
    8000dbe0:	b96fe06f          	j	8000bf76 <tinst_tests_gpf+0xd74>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000dbe4:	701c                	ld	a5,32(s0)
    8000dbe6:	e399                	bnez	a5,8000dbec <tinst_tests_gpf+0x29ea>
    8000dbe8:	c30fe06f          	j	8000c018 <tinst_tests_gpf+0xe16>
    8000dbec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dbee:	0016f713          	andi	a4,a3,1
    8000dbf2:	800715e3          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dbf6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dbfa:	460d                	li	a2,3
    8000dbfc:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc00:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc02:	00c59763          	bne	a1,a2,8000dc10 <tinst_tests_gpf+0x2a0e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc06:	0026d683          	lhu	a3,2(a3)
    8000dc0a:	0106969b          	slliw	a3,a3,0x10
    8000dc0e:	8f55                	or	a4,a4,a3
    8000dc10:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc14:	068e                	slli	a3,a3,0x3
    8000dc16:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc18:	8f75                	and	a4,a4,a3
    8000dc1a:	00e78463          	beq	a5,a4,8000dc22 <tinst_tests_gpf+0x2a20>
    8000dc1e:	be6fe06f          	j	8000c004 <tinst_tests_gpf+0xe02>
    8000dc22:	bf6fe06f          	j	8000c018 <tinst_tests_gpf+0xe16>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000dc26:	701c                	ld	a5,32(s0)
    8000dc28:	e399                	bnez	a5,8000dc2e <tinst_tests_gpf+0x2a2c>
    8000dc2a:	c90fe06f          	j	8000c0ba <tinst_tests_gpf+0xeb8>
    8000dc2e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc30:	0016f713          	andi	a4,a3,1
    8000dc34:	fc071463          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc38:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc3c:	460d                	li	a2,3
    8000dc3e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc42:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc44:	00c59763          	bne	a1,a2,8000dc52 <tinst_tests_gpf+0x2a50>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc48:	0026d683          	lhu	a3,2(a3)
    8000dc4c:	0106969b          	slliw	a3,a3,0x10
    8000dc50:	8f55                	or	a4,a4,a3
    8000dc52:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc56:	068e                	slli	a3,a3,0x3
    8000dc58:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc5a:	8f75                	and	a4,a4,a3
    8000dc5c:	00e78463          	beq	a5,a4,8000dc64 <tinst_tests_gpf+0x2a62>
    8000dc60:	c46fe06f          	j	8000c0a6 <tinst_tests_gpf+0xea4>
    8000dc64:	c56fe06f          	j	8000c0ba <tinst_tests_gpf+0xeb8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000dc68:	701c                	ld	a5,32(s0)
    8000dc6a:	e399                	bnez	a5,8000dc70 <tinst_tests_gpf+0x2a6e>
    8000dc6c:	cf0fe06f          	j	8000c15c <tinst_tests_gpf+0xf5a>
    8000dc70:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dc72:	0016f713          	andi	a4,a3,1
    8000dc76:	f8071363          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dc7a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dc7e:	460d                	li	a2,3
    8000dc80:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dc84:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dc86:	00c59763          	bne	a1,a2,8000dc94 <tinst_tests_gpf+0x2a92>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dc8a:	0026d683          	lhu	a3,2(a3)
    8000dc8e:	0106969b          	slliw	a3,a3,0x10
    8000dc92:	8f55                	or	a4,a4,a3
    8000dc94:	1ffe16b7          	lui	a3,0x1ffe1
    8000dc98:	068e                	slli	a3,a3,0x3
    8000dc9a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dc9c:	8f75                	and	a4,a4,a3
    8000dc9e:	00e78463          	beq	a5,a4,8000dca6 <tinst_tests_gpf+0x2aa4>
    8000dca2:	ca6fe06f          	j	8000c148 <tinst_tests_gpf+0xf46>
    8000dca6:	cb6fe06f          	j	8000c15c <tinst_tests_gpf+0xf5a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000dcaa:	701c                	ld	a5,32(s0)
    8000dcac:	e399                	bnez	a5,8000dcb2 <tinst_tests_gpf+0x2ab0>
    8000dcae:	d50fe06f          	j	8000c1fe <tinst_tests_gpf+0xffc>
    8000dcb2:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dcb4:	0016f713          	andi	a4,a3,1
    8000dcb8:	f4071263          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dcbc:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dcc0:	460d                	li	a2,3
    8000dcc2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dcc6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dcc8:	00c59763          	bne	a1,a2,8000dcd6 <tinst_tests_gpf+0x2ad4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dccc:	0026d683          	lhu	a3,2(a3)
    8000dcd0:	0106969b          	slliw	a3,a3,0x10
    8000dcd4:	8f55                	or	a4,a4,a3
    8000dcd6:	1ffe16b7          	lui	a3,0x1ffe1
    8000dcda:	068e                	slli	a3,a3,0x3
    8000dcdc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dcde:	8f75                	and	a4,a4,a3
    8000dce0:	00e78463          	beq	a5,a4,8000dce8 <tinst_tests_gpf+0x2ae6>
    8000dce4:	d06fe06f          	j	8000c1ea <tinst_tests_gpf+0xfe8>
    8000dce8:	d16fe06f          	j	8000c1fe <tinst_tests_gpf+0xffc>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000dcec:	701c                	ld	a5,32(s0)
    8000dcee:	e399                	bnez	a5,8000dcf4 <tinst_tests_gpf+0x2af2>
    8000dcf0:	db6fe06f          	j	8000c2a6 <tinst_tests_gpf+0x10a4>
    8000dcf4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dcf6:	0016f713          	andi	a4,a3,1
    8000dcfa:	f0071163          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dcfe:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd02:	460d                	li	a2,3
    8000dd04:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd08:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd0a:	00c59763          	bne	a1,a2,8000dd18 <tinst_tests_gpf+0x2b16>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd0e:	0026d683          	lhu	a3,2(a3)
    8000dd12:	0106969b          	slliw	a3,a3,0x10
    8000dd16:	8f55                	or	a4,a4,a3
    8000dd18:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd1c:	068e                	slli	a3,a3,0x3
    8000dd1e:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd20:	8f75                	and	a4,a4,a3
    8000dd22:	00e78463          	beq	a5,a4,8000dd2a <tinst_tests_gpf+0x2b28>
    8000dd26:	d6cfe06f          	j	8000c292 <tinst_tests_gpf+0x1090>
    8000dd2a:	d7cfe06f          	j	8000c2a6 <tinst_tests_gpf+0x10a4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000dd2e:	701c                	ld	a5,32(s0)
    8000dd30:	e399                	bnez	a5,8000dd36 <tinst_tests_gpf+0x2b34>
    8000dd32:	e16fe06f          	j	8000c348 <tinst_tests_gpf+0x1146>
    8000dd36:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd38:	0016f713          	andi	a4,a3,1
    8000dd3c:	ec071063          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd40:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd44:	460d                	li	a2,3
    8000dd46:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd4a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd4c:	00c59763          	bne	a1,a2,8000dd5a <tinst_tests_gpf+0x2b58>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd50:	0026d683          	lhu	a3,2(a3)
    8000dd54:	0106969b          	slliw	a3,a3,0x10
    8000dd58:	8f55                	or	a4,a4,a3
    8000dd5a:	1ffe16b7          	lui	a3,0x1ffe1
    8000dd5e:	068e                	slli	a3,a3,0x3
    8000dd60:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dd62:	8f75                	and	a4,a4,a3
    8000dd64:	00e78463          	beq	a5,a4,8000dd6c <tinst_tests_gpf+0x2b6a>
    8000dd68:	dccfe06f          	j	8000c334 <tinst_tests_gpf+0x1132>
    8000dd6c:	ddcfe06f          	j	8000c348 <tinst_tests_gpf+0x1146>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000dd70:	701c                	ld	a5,32(s0)
    8000dd72:	e399                	bnez	a5,8000dd78 <tinst_tests_gpf+0x2b76>
    8000dd74:	e76fe06f          	j	8000c3ea <tinst_tests_gpf+0x11e8>
    8000dd78:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dd7a:	0016f713          	andi	a4,a3,1
    8000dd7e:	e6071f63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dd82:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dd86:	460d                	li	a2,3
    8000dd88:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dd8c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dd8e:	00c59763          	bne	a1,a2,8000dd9c <tinst_tests_gpf+0x2b9a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dd92:	0026d683          	lhu	a3,2(a3)
    8000dd96:	0106969b          	slliw	a3,a3,0x10
    8000dd9a:	8f55                	or	a4,a4,a3
    8000dd9c:	1ffe16b7          	lui	a3,0x1ffe1
    8000dda0:	068e                	slli	a3,a3,0x3
    8000dda2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dda4:	8f75                	and	a4,a4,a3
    8000dda6:	00e78463          	beq	a5,a4,8000ddae <tinst_tests_gpf+0x2bac>
    8000ddaa:	e2cfe06f          	j	8000c3d6 <tinst_tests_gpf+0x11d4>
    8000ddae:	e3cfe06f          	j	8000c3ea <tinst_tests_gpf+0x11e8>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000ddb2:	701c                	ld	a5,32(s0)
    8000ddb4:	e399                	bnez	a5,8000ddba <tinst_tests_gpf+0x2bb8>
    8000ddb6:	ed6fe06f          	j	8000c48c <tinst_tests_gpf+0x128a>
    8000ddba:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ddbc:	0016f713          	andi	a4,a3,1
    8000ddc0:	e2071e63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000ddc4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000ddc8:	460d                	li	a2,3
    8000ddca:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000ddce:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000ddd0:	00c59763          	bne	a1,a2,8000ddde <tinst_tests_gpf+0x2bdc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000ddd4:	0026d683          	lhu	a3,2(a3)
    8000ddd8:	0106969b          	slliw	a3,a3,0x10
    8000dddc:	8f55                	or	a4,a4,a3
    8000ddde:	1ffe16b7          	lui	a3,0x1ffe1
    8000dde2:	068e                	slli	a3,a3,0x3
    8000dde4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dde6:	8f75                	and	a4,a4,a3
    8000dde8:	00e78463          	beq	a5,a4,8000ddf0 <tinst_tests_gpf+0x2bee>
    8000ddec:	e8cfe06f          	j	8000c478 <tinst_tests_gpf+0x1276>
    8000ddf0:	e9cfe06f          	j	8000c48c <tinst_tests_gpf+0x128a>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000ddf4:	701c                	ld	a5,32(s0)
    8000ddf6:	e399                	bnez	a5,8000ddfc <tinst_tests_gpf+0x2bfa>
    8000ddf8:	f36fe06f          	j	8000c52e <tinst_tests_gpf+0x132c>
    8000ddfc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000ddfe:	0016f713          	andi	a4,a3,1
    8000de02:	de071d63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de06:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de0a:	460d                	li	a2,3
    8000de0c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de10:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de12:	00c59763          	bne	a1,a2,8000de20 <tinst_tests_gpf+0x2c1e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de16:	0026d683          	lhu	a3,2(a3)
    8000de1a:	0106969b          	slliw	a3,a3,0x10
    8000de1e:	8f55                	or	a4,a4,a3
    8000de20:	1ffe16b7          	lui	a3,0x1ffe1
    8000de24:	068e                	slli	a3,a3,0x3
    8000de26:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de28:	8f75                	and	a4,a4,a3
    8000de2a:	00e78463          	beq	a5,a4,8000de32 <tinst_tests_gpf+0x2c30>
    8000de2e:	eecfe06f          	j	8000c51a <tinst_tests_gpf+0x1318>
    8000de32:	efcfe06f          	j	8000c52e <tinst_tests_gpf+0x132c>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000de36:	6418                	ld	a4,8(s0)
    8000de38:	47dd                	li	a5,23
    8000de3a:	00f70463          	beq	a4,a5,8000de42 <tinst_tests_gpf+0x2c40>
    8000de3e:	84bfe06f          	j	8000c688 <tinst_tests_gpf+0x1486>
    8000de42:	701c                	ld	a5,32(s0)
    8000de44:	e399                	bnez	a5,8000de4a <tinst_tests_gpf+0x2c48>
    8000de46:	845fe06f          	j	8000c68a <tinst_tests_gpf+0x1488>
    8000de4a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de4c:	0016f713          	andi	a4,a3,1
    8000de50:	da071663          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000de54:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000de58:	460d                	li	a2,3
    8000de5a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000de5e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000de60:	00c59763          	bne	a1,a2,8000de6e <tinst_tests_gpf+0x2c6c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000de64:	0026d683          	lhu	a3,2(a3)
    8000de68:	0106969b          	slliw	a3,a3,0x10
    8000de6c:	8f55                	or	a4,a4,a3
    8000de6e:	1ffe16b7          	lui	a3,0x1ffe1
    8000de72:	068e                	slli	a3,a3,0x3
    8000de74:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000de76:	8f75                	and	a4,a4,a3
    8000de78:	40f704b3          	sub	s1,a4,a5
    8000de7c:	0014b493          	seqz	s1,s1
    8000de80:	80bfe06f          	j	8000c68a <tinst_tests_gpf+0x1488>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000de84:	6418                	ld	a4,8(s0)
    8000de86:	47dd                	li	a5,23
    8000de88:	00f70463          	beq	a4,a5,8000de90 <tinst_tests_gpf+0x2c8e>
    8000de8c:	897fe06f          	j	8000c722 <tinst_tests_gpf+0x1520>
    8000de90:	701c                	ld	a5,32(s0)
    8000de92:	e399                	bnez	a5,8000de98 <tinst_tests_gpf+0x2c96>
    8000de94:	891fe06f          	j	8000c724 <tinst_tests_gpf+0x1522>
    8000de98:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000de9a:	0016f713          	andi	a4,a3,1
    8000de9e:	d4071f63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dea2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dea6:	460d                	li	a2,3
    8000dea8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000deac:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000deae:	00c59763          	bne	a1,a2,8000debc <tinst_tests_gpf+0x2cba>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000deb2:	0026d683          	lhu	a3,2(a3)
    8000deb6:	0106969b          	slliw	a3,a3,0x10
    8000deba:	8f55                	or	a4,a4,a3
    8000debc:	1ffe16b7          	lui	a3,0x1ffe1
    8000dec0:	068e                	slli	a3,a3,0x3
    8000dec2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dec4:	8f75                	and	a4,a4,a3
    8000dec6:	40f704b3          	sub	s1,a4,a5
    8000deca:	0014b493          	seqz	s1,s1
    8000dece:	857fe06f          	j	8000c724 <tinst_tests_gpf+0x1522>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000ded2:	6418                	ld	a4,8(s0)
    8000ded4:	47dd                	li	a5,23
    8000ded6:	00f70463          	beq	a4,a5,8000dede <tinst_tests_gpf+0x2cdc>
    8000deda:	8e3fe06f          	j	8000c7bc <tinst_tests_gpf+0x15ba>
    8000dede:	701c                	ld	a5,32(s0)
    8000dee0:	e399                	bnez	a5,8000dee6 <tinst_tests_gpf+0x2ce4>
    8000dee2:	8ddfe06f          	j	8000c7be <tinst_tests_gpf+0x15bc>
    8000dee6:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dee8:	0016f713          	andi	a4,a3,1
    8000deec:	d0071863          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000def0:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000def4:	460d                	li	a2,3
    8000def6:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000defa:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000defc:	00c59763          	bne	a1,a2,8000df0a <tinst_tests_gpf+0x2d08>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df00:	0026d683          	lhu	a3,2(a3)
    8000df04:	0106969b          	slliw	a3,a3,0x10
    8000df08:	8f55                	or	a4,a4,a3
    8000df0a:	1ffe16b7          	lui	a3,0x1ffe1
    8000df0e:	068e                	slli	a3,a3,0x3
    8000df10:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000df12:	8f75                	and	a4,a4,a3
    8000df14:	40f704b3          	sub	s1,a4,a5
    8000df18:	0014b493          	seqz	s1,s1
    8000df1c:	8a3fe06f          	j	8000c7be <tinst_tests_gpf+0x15bc>
    instruction = *((uint16_t*)addr);
    8000df20:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df24:	460d                	li	a2,3
    8000df26:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df2a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df2c:	00c59763          	bne	a1,a2,8000df3a <tinst_tests_gpf+0x2d38>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000df30:	0026d683          	lhu	a3,2(a3)
    8000df34:	0106969b          	slliw	a3,a3,0x10
    8000df38:	8f55                	or	a4,a4,a3
    TEST_ASSERT("correct tinst when executing a lw which results in a lgpf",
    8000df3a:	1746                	slli	a4,a4,0x31
    8000df3c:	9345                	srli	a4,a4,0x31
    8000df3e:	00e78463          	beq	a5,a4,8000df46 <tinst_tests_gpf+0x2d44>
    8000df42:	e50fd06f          	j	8000b592 <tinst_tests_gpf+0x390>
    8000df46:	e60fd06f          	j	8000b5a6 <tinst_tests_gpf+0x3a4>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000df4a:	02043903          	ld	s2,32(s0)
    8000df4e:	00091463          	bnez	s2,8000df56 <tinst_tests_gpf+0x2d54>
    8000df52:	c89fd06f          	j	8000bbda <tinst_tests_gpf+0x9d8>
    8000df56:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000df58:	0017f713          	andi	a4,a5,1
    8000df5c:	ca071063          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df60:	0007d503          	lhu	a0,0(a5)
    8000df64:	f42f30ef          	jal	800016a6 <expand_compressed_instruction>
    8000df68:	01f077b7          	lui	a5,0x1f07
    8000df6c:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000df70:	00f574b3          	and	s1,a0,a5
    8000df74:	412484b3          	sub	s1,s1,s2
    8000df78:	0014b493          	seqz	s1,s1
    8000df7c:	c5ffd06f          	j	8000bbda <tinst_tests_gpf+0x9d8>
    TEST_ASSERT("correct tinst when executing a lr.w which results in a lgpf",
    8000df80:	701c                	ld	a5,32(s0)
    8000df82:	e399                	bnez	a5,8000df88 <tinst_tests_gpf+0x2d86>
    8000df84:	cfffd06f          	j	8000bc82 <tinst_tests_gpf+0xa80>
    8000df88:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000df8a:	0016f713          	andi	a4,a3,1
    8000df8e:	c6071763          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000df92:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000df96:	460d                	li	a2,3
    8000df98:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000df9c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000df9e:	00c59763          	bne	a1,a2,8000dfac <tinst_tests_gpf+0x2daa>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfa2:	0026d683          	lhu	a3,2(a3)
    8000dfa6:	0106969b          	slliw	a3,a3,0x10
    8000dfaa:	8f55                	or	a4,a4,a3
    8000dfac:	1ffe16b7          	lui	a3,0x1ffe1
    8000dfb0:	068e                	slli	a3,a3,0x3
    8000dfb2:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dfb4:	8f75                	and	a4,a4,a3
    8000dfb6:	40f704b3          	sub	s1,a4,a5
    8000dfba:	0014b493          	seqz	s1,s1
    8000dfbe:	cc5fd06f          	j	8000bc82 <tinst_tests_gpf+0xa80>
    TEST_ASSERT("correct tinst when executing a sc.w which results in a sgpf",
    8000dfc2:	701c                	ld	a5,32(s0)
    8000dfc4:	e399                	bnez	a5,8000dfca <tinst_tests_gpf+0x2dc8>
    8000dfc6:	d61fd06f          	j	8000bd26 <tinst_tests_gpf+0xb24>
    8000dfca:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000dfcc:	0016f713          	andi	a4,a3,1
    8000dfd0:	c2071663          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000dfd4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000dfd8:	460d                	li	a2,3
    8000dfda:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000dfde:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000dfe0:	00c59763          	bne	a1,a2,8000dfee <tinst_tests_gpf+0x2dec>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000dfe4:	0026d683          	lhu	a3,2(a3)
    8000dfe8:	0106969b          	slliw	a3,a3,0x10
    8000dfec:	8f55                	or	a4,a4,a3
    8000dfee:	1ffe16b7          	lui	a3,0x1ffe1
    8000dff2:	068e                	slli	a3,a3,0x3
    8000dff4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000dff6:	8f75                	and	a4,a4,a3
    8000dff8:	40f704b3          	sub	s1,a4,a5
    8000dffc:	0014b493          	seqz	s1,s1
    8000e000:	d27fd06f          	j	8000bd26 <tinst_tests_gpf+0xb24>
    TEST_ASSERT("correct tinst when executing a amoswap.w which results in a sgpf",
    8000e004:	701c                	ld	a5,32(s0)
    8000e006:	e399                	bnez	a5,8000e00c <tinst_tests_gpf+0x2e0a>
    8000e008:	dc1fd06f          	j	8000bdc8 <tinst_tests_gpf+0xbc6>
    8000e00c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e00e:	0016f713          	andi	a4,a3,1
    8000e012:	be071563          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e016:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e01a:	460d                	li	a2,3
    8000e01c:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e020:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e022:	00c59763          	bne	a1,a2,8000e030 <tinst_tests_gpf+0x2e2e>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e026:	0026d683          	lhu	a3,2(a3)
    8000e02a:	0106969b          	slliw	a3,a3,0x10
    8000e02e:	8f55                	or	a4,a4,a3
    8000e030:	1ffe16b7          	lui	a3,0x1ffe1
    8000e034:	068e                	slli	a3,a3,0x3
    8000e036:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e038:	8f75                	and	a4,a4,a3
    8000e03a:	40f704b3          	sub	s1,a4,a5
    8000e03e:	0014b493          	seqz	s1,s1
    8000e042:	d87fd06f          	j	8000bdc8 <tinst_tests_gpf+0xbc6>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e046:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e048:	0017f713          	andi	a4,a5,1
    8000e04c:	ba071863          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e050:	0007d503          	lhu	a0,0(a5)
    8000e054:	e52f30ef          	jal	800016a6 <expand_compressed_instruction>
    8000e058:	67a1                	lui	a5,0x8
    8000e05a:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e05c:	8d7d                	and	a0,a0,a5
    8000e05e:	00a90463          	beq	s2,a0,8000e066 <tinst_tests_gpf+0x2e64>
    8000e062:	959fd06f          	j	8000b9ba <tinst_tests_gpf+0x7b8>
    8000e066:	0001f597          	auipc	a1,0x1f
    8000e06a:	27a58593          	addi	a1,a1,634 # 8002d2e0 <__func__.0+0x2c0>
    8000e06e:	955fd06f          	j	8000b9c2 <tinst_tests_gpf+0x7c0>
    TEST_ASSERT("correct tinst when executing a amoadd.w which results in a sgpf",
    8000e072:	701c                	ld	a5,32(s0)
    8000e074:	e399                	bnez	a5,8000e07a <tinst_tests_gpf+0x2e78>
    8000e076:	df5fd06f          	j	8000be6a <tinst_tests_gpf+0xc68>
    8000e07a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e07c:	0016f713          	andi	a4,a3,1
    8000e080:	b6071e63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e084:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e088:	460d                	li	a2,3
    8000e08a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e08e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e090:	00c59763          	bne	a1,a2,8000e09e <tinst_tests_gpf+0x2e9c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e094:	0026d683          	lhu	a3,2(a3)
    8000e098:	0106969b          	slliw	a3,a3,0x10
    8000e09c:	8f55                	or	a4,a4,a3
    8000e09e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e0a2:	068e                	slli	a3,a3,0x3
    8000e0a4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e0a6:	8f75                	and	a4,a4,a3
    8000e0a8:	40f704b3          	sub	s1,a4,a5
    8000e0ac:	0014b493          	seqz	s1,s1
    8000e0b0:	dbbfd06f          	j	8000be6a <tinst_tests_gpf+0xc68>
    TEST_ASSERT("correct tinst when executing a c.ld which results in a lgpf",
    8000e0b4:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e0b6:	0017f713          	andi	a4,a5,1
    8000e0ba:	b4071163          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0be:	0007d503          	lhu	a0,0(a5)
    8000e0c2:	de4f30ef          	jal	800016a6 <expand_compressed_instruction>
    8000e0c6:	67a1                	lui	a5,0x8
    8000e0c8:	17f5                	addi	a5,a5,-3 # 7ffd <_test_table_size+0x7ffc>
    8000e0ca:	8d7d                	and	a0,a0,a5
    8000e0cc:	00a98463          	beq	s3,a0,8000e0d4 <tinst_tests_gpf+0x2ed2>
    8000e0d0:	981fd06f          	j	8000ba50 <tinst_tests_gpf+0x84e>
    8000e0d4:	0001f597          	auipc	a1,0x1f
    8000e0d8:	20c58593          	addi	a1,a1,524 # 8002d2e0 <__func__.0+0x2c0>
    8000e0dc:	97dfd06f          	j	8000ba58 <tinst_tests_gpf+0x856>
    TEST_ASSERT("correct tinst when executing a amoxor.w which results in a sgpf",
    8000e0e0:	701c                	ld	a5,32(s0)
    8000e0e2:	e399                	bnez	a5,8000e0e8 <tinst_tests_gpf+0x2ee6>
    8000e0e4:	e1dfd06f          	j	8000bf00 <tinst_tests_gpf+0xcfe>
    8000e0e8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e0ea:	0016f713          	andi	a4,a3,1
    8000e0ee:	b0071763          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e0f2:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e0f6:	460d                	li	a2,3
    8000e0f8:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e0fc:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e0fe:	00c59763          	bne	a1,a2,8000e10c <tinst_tests_gpf+0x2f0a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e102:	0026d683          	lhu	a3,2(a3)
    8000e106:	0106969b          	slliw	a3,a3,0x10
    8000e10a:	8f55                	or	a4,a4,a3
    8000e10c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e110:	068e                	slli	a3,a3,0x3
    8000e112:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e114:	8f75                	and	a4,a4,a3
    8000e116:	40f704b3          	sub	s1,a4,a5
    8000e11a:	0014b493          	seqz	s1,s1
    8000e11e:	de3fd06f          	j	8000bf00 <tinst_tests_gpf+0xcfe>
    TEST_ASSERT("correct tinst when executing a amoand.w which results in a sgpf",
    8000e122:	701c                	ld	a5,32(s0)
    8000e124:	e399                	bnez	a5,8000e12a <tinst_tests_gpf+0x2f28>
    8000e126:	e71fd06f          	j	8000bf96 <tinst_tests_gpf+0xd94>
    8000e12a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e12c:	0016f713          	andi	a4,a3,1
    8000e130:	ac071663          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e134:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e138:	460d                	li	a2,3
    8000e13a:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e13e:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e140:	00c59763          	bne	a1,a2,8000e14e <tinst_tests_gpf+0x2f4c>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e144:	0026d683          	lhu	a3,2(a3)
    8000e148:	0106969b          	slliw	a3,a3,0x10
    8000e14c:	8f55                	or	a4,a4,a3
    8000e14e:	1ffe16b7          	lui	a3,0x1ffe1
    8000e152:	068e                	slli	a3,a3,0x3
    8000e154:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e156:	8f75                	and	a4,a4,a3
    8000e158:	40f704b3          	sub	s1,a4,a5
    8000e15c:	0014b493          	seqz	s1,s1
    8000e160:	e37fd06f          	j	8000bf96 <tinst_tests_gpf+0xd94>
    TEST_ASSERT("correct tinst when executing a c.lw which results in a lgpf",
    8000e164:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e166:	0017f713          	andi	a4,a5,1
    8000e16a:	a8071963          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e16e:	0007d503          	lhu	a0,0(a5)
    8000e172:	d34f30ef          	jal	800016a6 <expand_compressed_instruction>
    8000e176:	01f077b7          	lui	a5,0x1f07
    8000e17a:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e17e:	8d7d                	and	a0,a0,a5
    8000e180:	00a98463          	beq	s3,a0,8000e188 <tinst_tests_gpf+0x2f86>
    8000e184:	963fd06f          	j	8000bae6 <tinst_tests_gpf+0x8e4>
    8000e188:	0001f597          	auipc	a1,0x1f
    8000e18c:	15858593          	addi	a1,a1,344 # 8002d2e0 <__func__.0+0x2c0>
    8000e190:	95ffd06f          	j	8000baee <tinst_tests_gpf+0x8ec>
    TEST_ASSERT("correct tinst when executing a amoor.w which results in a sgpf",
    8000e194:	701c                	ld	a5,32(s0)
    8000e196:	e399                	bnez	a5,8000e19c <tinst_tests_gpf+0x2f9a>
    8000e198:	ea1fd06f          	j	8000c038 <tinst_tests_gpf+0xe36>
    8000e19c:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e19e:	0016f713          	andi	a4,a3,1
    8000e1a2:	a4071d63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1a6:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e1aa:	460d                	li	a2,3
    8000e1ac:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e1b0:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e1b2:	00c59763          	bne	a1,a2,8000e1c0 <tinst_tests_gpf+0x2fbe>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e1b6:	0026d683          	lhu	a3,2(a3)
    8000e1ba:	0106969b          	slliw	a3,a3,0x10
    8000e1be:	8f55                	or	a4,a4,a3
    8000e1c0:	1ffe16b7          	lui	a3,0x1ffe1
    8000e1c4:	068e                	slli	a3,a3,0x3
    8000e1c6:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e1c8:	8f75                	and	a4,a4,a3
    8000e1ca:	40f704b3          	sub	s1,a4,a5
    8000e1ce:	0014b493          	seqz	s1,s1
    8000e1d2:	e67fd06f          	j	8000c038 <tinst_tests_gpf+0xe36>
    TEST_ASSERT("correct tinst when executing a c.sd which results in a lgpf",
    8000e1d6:	681c                	ld	a5,16(s0)
    if((addr & 0b1) != 0) {
    8000e1d8:	0017f713          	andi	a4,a5,1
    8000e1dc:	a2071063          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e1e0:	0007d503          	lhu	a0,0(a5)
    8000e1e4:	cc2f30ef          	jal	800016a6 <expand_compressed_instruction>
    8000e1e8:	01f077b7          	lui	a5,0x1f07
    8000e1ec:	07d78793          	addi	a5,a5,125 # 1f0707d <STACK_SIZE+0x1e0707d>
    8000e1f0:	8d7d                	and	a0,a0,a5
    8000e1f2:	00a90463          	beq	s2,a0,8000e1fa <tinst_tests_gpf+0x2ff8>
    8000e1f6:	987fd06f          	j	8000bb7c <tinst_tests_gpf+0x97a>
    8000e1fa:	0001f597          	auipc	a1,0x1f
    8000e1fe:	0e658593          	addi	a1,a1,230 # 8002d2e0 <__func__.0+0x2c0>
    8000e202:	983fd06f          	j	8000bb84 <tinst_tests_gpf+0x982>
    TEST_ASSERT("correct tinst when executing a amomin.w which results in a sgpf",
    8000e206:	701c                	ld	a5,32(s0)
    8000e208:	e399                	bnez	a5,8000e20e <tinst_tests_gpf+0x300c>
    8000e20a:	ed1fd06f          	j	8000c0da <tinst_tests_gpf+0xed8>
    8000e20e:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e210:	0016f713          	andi	a4,a3,1
    8000e214:	9e071463          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e218:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e21c:	460d                	li	a2,3
    8000e21e:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e222:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e224:	00c59763          	bne	a1,a2,8000e232 <tinst_tests_gpf+0x3030>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e228:	0026d683          	lhu	a3,2(a3)
    8000e22c:	0106969b          	slliw	a3,a3,0x10
    8000e230:	8f55                	or	a4,a4,a3
    8000e232:	1ffe16b7          	lui	a3,0x1ffe1
    8000e236:	068e                	slli	a3,a3,0x3
    8000e238:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e23a:	8f75                	and	a4,a4,a3
    8000e23c:	40f704b3          	sub	s1,a4,a5
    8000e240:	0014b493          	seqz	s1,s1
    8000e244:	e97fd06f          	j	8000c0da <tinst_tests_gpf+0xed8>
    TEST_ASSERT("correct tinst when executing a amomax.w which results in a sgpf",
    8000e248:	701c                	ld	a5,32(s0)
    8000e24a:	e399                	bnez	a5,8000e250 <tinst_tests_gpf+0x304e>
    8000e24c:	f31fd06f          	j	8000c17c <tinst_tests_gpf+0xf7a>
    8000e250:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e252:	0016f713          	andi	a4,a3,1
    8000e256:	9a071363          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e25a:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e25e:	460d                	li	a2,3
    8000e260:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e264:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e266:	00c59763          	bne	a1,a2,8000e274 <tinst_tests_gpf+0x3072>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e26a:	0026d683          	lhu	a3,2(a3)
    8000e26e:	0106969b          	slliw	a3,a3,0x10
    8000e272:	8f55                	or	a4,a4,a3
    8000e274:	1ffe16b7          	lui	a3,0x1ffe1
    8000e278:	068e                	slli	a3,a3,0x3
    8000e27a:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e27c:	8f75                	and	a4,a4,a3
    8000e27e:	40f704b3          	sub	s1,a4,a5
    8000e282:	0014b493          	seqz	s1,s1
    8000e286:	ef7fd06f          	j	8000c17c <tinst_tests_gpf+0xf7a>
    TEST_ASSERT("correct tinst when executing a amominu.w which results in a sgpf",
    8000e28a:	701c                	ld	a5,32(s0)
    8000e28c:	e399                	bnez	a5,8000e292 <tinst_tests_gpf+0x3090>
    8000e28e:	f91fd06f          	j	8000c21e <tinst_tests_gpf+0x101c>
    8000e292:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e294:	0016f713          	andi	a4,a3,1
    8000e298:	96071263          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e29c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e2a0:	460d                	li	a2,3
    8000e2a2:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e2a6:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e2a8:	00c59763          	bne	a1,a2,8000e2b6 <tinst_tests_gpf+0x30b4>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e2ac:	0026d683          	lhu	a3,2(a3)
    8000e2b0:	0106969b          	slliw	a3,a3,0x10
    8000e2b4:	8f55                	or	a4,a4,a3
    8000e2b6:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2ba:	068e                	slli	a3,a3,0x3
    8000e2bc:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e2be:	8f75                	and	a4,a4,a3
    8000e2c0:	40f704b3          	sub	s1,a4,a5
    8000e2c4:	0014b493          	seqz	s1,s1
    8000e2c8:	f57fd06f          	j	8000c21e <tinst_tests_gpf+0x101c>
    TEST_ASSERT("correct tinst when executing a amomaxu.w which results in a sgpf",
    8000e2cc:	701c                	ld	a5,32(s0)
    8000e2ce:	e399                	bnez	a5,8000e2d4 <tinst_tests_gpf+0x30d2>
    8000e2d0:	ff7fd06f          	j	8000c2c6 <tinst_tests_gpf+0x10c4>
    8000e2d4:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e2d6:	0016f713          	andi	a4,a3,1
    8000e2da:	92071163          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e2de:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e2e2:	460d                	li	a2,3
    8000e2e4:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e2e8:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e2ea:	00c59763          	bne	a1,a2,8000e2f8 <tinst_tests_gpf+0x30f6>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e2ee:	0026d683          	lhu	a3,2(a3)
    8000e2f2:	0106969b          	slliw	a3,a3,0x10
    8000e2f6:	8f55                	or	a4,a4,a3
    8000e2f8:	1ffe16b7          	lui	a3,0x1ffe1
    8000e2fc:	068e                	slli	a3,a3,0x3
    8000e2fe:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e300:	8f75                	and	a4,a4,a3
    8000e302:	40f704b3          	sub	s1,a4,a5
    8000e306:	0014b493          	seqz	s1,s1
    8000e30a:	fbdfd06f          	j	8000c2c6 <tinst_tests_gpf+0x10c4>
    TEST_ASSERT("correct tinst when executing a amoswap.d which results in a sgpf",
    8000e30e:	701c                	ld	a5,32(s0)
    8000e310:	e399                	bnez	a5,8000e316 <tinst_tests_gpf+0x3114>
    8000e312:	856fe06f          	j	8000c368 <tinst_tests_gpf+0x1166>
    8000e316:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e318:	0016f713          	andi	a4,a3,1
    8000e31c:	8e071063          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e320:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e324:	460d                	li	a2,3
    8000e326:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e32a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e32c:	00c59763          	bne	a1,a2,8000e33a <tinst_tests_gpf+0x3138>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e330:	0026d683          	lhu	a3,2(a3)
    8000e334:	0106969b          	slliw	a3,a3,0x10
    8000e338:	8f55                	or	a4,a4,a3
    8000e33a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e33e:	068e                	slli	a3,a3,0x3
    8000e340:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e342:	8f75                	and	a4,a4,a3
    8000e344:	40f704b3          	sub	s1,a4,a5
    8000e348:	0014b493          	seqz	s1,s1
    8000e34c:	81cfe06f          	j	8000c368 <tinst_tests_gpf+0x1166>
    TEST_ASSERT("correct tinst when executing a amoadd.d which results in a sgpf",
    8000e350:	701c                	ld	a5,32(s0)
    8000e352:	e399                	bnez	a5,8000e358 <tinst_tests_gpf+0x3156>
    8000e354:	8b6fe06f          	j	8000c40a <tinst_tests_gpf+0x1208>
    8000e358:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e35a:	0016f713          	andi	a4,a3,1
    8000e35e:	88071f63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e362:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e366:	460d                	li	a2,3
    8000e368:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e36c:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e36e:	00c59763          	bne	a1,a2,8000e37c <tinst_tests_gpf+0x317a>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e372:	0026d683          	lhu	a3,2(a3)
    8000e376:	0106969b          	slliw	a3,a3,0x10
    8000e37a:	8f55                	or	a4,a4,a3
    8000e37c:	1ffe16b7          	lui	a3,0x1ffe1
    8000e380:	068e                	slli	a3,a3,0x3
    8000e382:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e384:	8f75                	and	a4,a4,a3
    8000e386:	40f704b3          	sub	s1,a4,a5
    8000e38a:	0014b493          	seqz	s1,s1
    8000e38e:	87cfe06f          	j	8000c40a <tinst_tests_gpf+0x1208>
    TEST_ASSERT("correct tinst when executing a amoxor.d which results in a sgpf",
    8000e392:	701c                	ld	a5,32(s0)
    8000e394:	e399                	bnez	a5,8000e39a <tinst_tests_gpf+0x3198>
    8000e396:	916fe06f          	j	8000c4ac <tinst_tests_gpf+0x12aa>
    8000e39a:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e39c:	0016f713          	andi	a4,a3,1
    8000e3a0:	84071e63          	bnez	a4,8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e3a4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3a8:	460d                	li	a2,3
    8000e3aa:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3ae:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3b0:	00c59763          	bne	a1,a2,8000e3be <tinst_tests_gpf+0x31bc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3b4:	0026d683          	lhu	a3,2(a3)
    8000e3b8:	0106969b          	slliw	a3,a3,0x10
    8000e3bc:	8f55                	or	a4,a4,a3
    8000e3be:	1ffe16b7          	lui	a3,0x1ffe1
    8000e3c2:	068e                	slli	a3,a3,0x3
    8000e3c4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e3c6:	8f75                	and	a4,a4,a3
    8000e3c8:	40f704b3          	sub	s1,a4,a5
    8000e3cc:	0014b493          	seqz	s1,s1
    8000e3d0:	8dcfe06f          	j	8000c4ac <tinst_tests_gpf+0x12aa>
    TEST_ASSERT("correct tinst when executing a amoand.d which results in a sgpf",
    8000e3d4:	701c                	ld	a5,32(s0)
    8000e3d6:	e399                	bnez	a5,8000e3dc <tinst_tests_gpf+0x31da>
    8000e3d8:	976fe06f          	j	8000c54e <tinst_tests_gpf+0x134c>
    8000e3dc:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e3de:	0016f713          	andi	a4,a3,1
    8000e3e2:	c319                	beqz	a4,8000e3e8 <tinst_tests_gpf+0x31e6>
    8000e3e4:	818ff06f          	j	8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e3e8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e3ec:	460d                	li	a2,3
    8000e3ee:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e3f2:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e3f4:	00c59763          	bne	a1,a2,8000e402 <tinst_tests_gpf+0x3200>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e3f8:	0026d683          	lhu	a3,2(a3)
    8000e3fc:	0106969b          	slliw	a3,a3,0x10
    8000e400:	8f55                	or	a4,a4,a3
    8000e402:	1ffe16b7          	lui	a3,0x1ffe1
    8000e406:	068e                	slli	a3,a3,0x3
    8000e408:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e40a:	8f75                	and	a4,a4,a3
    8000e40c:	40f704b3          	sub	s1,a4,a5
    8000e410:	0014b493          	seqz	s1,s1
    8000e414:	93afe06f          	j	8000c54e <tinst_tests_gpf+0x134c>
    TEST_ASSERT("correct tinst when executing a amoor.d which results in a sgpf",
    8000e418:	701c                	ld	a5,32(s0)
    8000e41a:	e399                	bnez	a5,8000e420 <tinst_tests_gpf+0x321e>
    8000e41c:	9d4fe06f          	j	8000c5f0 <tinst_tests_gpf+0x13ee>
    8000e420:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e422:	0016f713          	andi	a4,a3,1
    8000e426:	c319                	beqz	a4,8000e42c <tinst_tests_gpf+0x322a>
    8000e428:	fd5fe06f          	j	8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e42c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e430:	460d                	li	a2,3
    8000e432:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e436:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e438:	00c59763          	bne	a1,a2,8000e446 <tinst_tests_gpf+0x3244>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e43c:	0026d683          	lhu	a3,2(a3)
    8000e440:	0106969b          	slliw	a3,a3,0x10
    8000e444:	8f55                	or	a4,a4,a3
    8000e446:	1ffe16b7          	lui	a3,0x1ffe1
    8000e44a:	068e                	slli	a3,a3,0x3
    8000e44c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e44e:	8f75                	and	a4,a4,a3
    8000e450:	40f704b3          	sub	s1,a4,a5
    8000e454:	0014b493          	seqz	s1,s1
    8000e458:	998fe06f          	j	8000c5f0 <tinst_tests_gpf+0x13ee>
    8000e45c:	701c                	ld	a5,32(s0)
    8000e45e:	e399                	bnez	a5,8000e464 <tinst_tests_gpf+0x3262>
    8000e460:	970fe06f          	j	8000c5d0 <tinst_tests_gpf+0x13ce>
    8000e464:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e466:	0016f713          	andi	a4,a3,1
    8000e46a:	c319                	beqz	a4,8000e470 <tinst_tests_gpf+0x326e>
    8000e46c:	f91fe06f          	j	8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e470:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e474:	460d                	li	a2,3
    8000e476:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e47a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e47c:	00c59763          	bne	a1,a2,8000e48a <tinst_tests_gpf+0x3288>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e480:	0026d683          	lhu	a3,2(a3)
    8000e484:	0106969b          	slliw	a3,a3,0x10
    8000e488:	8f55                	or	a4,a4,a3
    8000e48a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e48e:	068e                	slli	a3,a3,0x3
    8000e490:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e492:	8f75                	and	a4,a4,a3
    8000e494:	00e78463          	beq	a5,a4,8000e49c <tinst_tests_gpf+0x329a>
    8000e498:	924fe06f          	j	8000c5bc <tinst_tests_gpf+0x13ba>
    8000e49c:	934fe06f          	j	8000c5d0 <tinst_tests_gpf+0x13ce>
    TEST_ASSERT("correct tinst when executing a amomin.d which results in a sgpf",
    8000e4a0:	701c                	ld	a5,32(s0)
    8000e4a2:	e399                	bnez	a5,8000e4a8 <tinst_tests_gpf+0x32a6>
    8000e4a4:	9cefe06f          	j	8000c672 <tinst_tests_gpf+0x1470>
    8000e4a8:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4aa:	0016f713          	andi	a4,a3,1
    8000e4ae:	c319                	beqz	a4,8000e4b4 <tinst_tests_gpf+0x32b2>
    8000e4b0:	f4dfe06f          	j	8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e4b4:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4b8:	460d                	li	a2,3
    8000e4ba:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e4be:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e4c0:	00c59763          	bne	a1,a2,8000e4ce <tinst_tests_gpf+0x32cc>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e4c4:	0026d683          	lhu	a3,2(a3)
    8000e4c8:	0106969b          	slliw	a3,a3,0x10
    8000e4cc:	8f55                	or	a4,a4,a3
    8000e4ce:	1ffe16b7          	lui	a3,0x1ffe1
    8000e4d2:	068e                	slli	a3,a3,0x3
    8000e4d4:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e4d6:	8f75                	and	a4,a4,a3
    8000e4d8:	00e78463          	beq	a5,a4,8000e4e0 <tinst_tests_gpf+0x32de>
    8000e4dc:	982fe06f          	j	8000c65e <tinst_tests_gpf+0x145c>
    8000e4e0:	992fe06f          	j	8000c672 <tinst_tests_gpf+0x1470>
    TEST_ASSERT("correct tinst when executing a amomax.d which results in a sgpf",
    8000e4e4:	701c                	ld	a5,32(s0)
    8000e4e6:	e399                	bnez	a5,8000e4ec <tinst_tests_gpf+0x32ea>
    8000e4e8:	a24fe06f          	j	8000c70c <tinst_tests_gpf+0x150a>
    8000e4ec:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e4ee:	0016f713          	andi	a4,a3,1
    8000e4f2:	c319                	beqz	a4,8000e4f8 <tinst_tests_gpf+0x32f6>
    8000e4f4:	f09fe06f          	j	8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e4f8:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e4fc:	460d                	li	a2,3
    8000e4fe:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e502:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e504:	00c59763          	bne	a1,a2,8000e512 <tinst_tests_gpf+0x3310>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e508:	0026d683          	lhu	a3,2(a3)
    8000e50c:	0106969b          	slliw	a3,a3,0x10
    8000e510:	8f55                	or	a4,a4,a3
    8000e512:	1ffe16b7          	lui	a3,0x1ffe1
    8000e516:	068e                	slli	a3,a3,0x3
    8000e518:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e51a:	8f75                	and	a4,a4,a3
    8000e51c:	00e78463          	beq	a5,a4,8000e524 <tinst_tests_gpf+0x3322>
    8000e520:	9d8fe06f          	j	8000c6f8 <tinst_tests_gpf+0x14f6>
    8000e524:	9e8fe06f          	j	8000c70c <tinst_tests_gpf+0x150a>
    TEST_ASSERT("correct tinst when executing a amominu.d which results in a sgpf",
    8000e528:	701c                	ld	a5,32(s0)
    8000e52a:	e399                	bnez	a5,8000e530 <tinst_tests_gpf+0x332e>
    8000e52c:	a7afe06f          	j	8000c7a6 <tinst_tests_gpf+0x15a4>
    8000e530:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e532:	0016f713          	andi	a4,a3,1
    8000e536:	c319                	beqz	a4,8000e53c <tinst_tests_gpf+0x333a>
    8000e538:	ec5fe06f          	j	8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e53c:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e540:	460d                	li	a2,3
    8000e542:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e546:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e548:	00c59763          	bne	a1,a2,8000e556 <tinst_tests_gpf+0x3354>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e54c:	0026d683          	lhu	a3,2(a3)
    8000e550:	0106969b          	slliw	a3,a3,0x10
    8000e554:	8f55                	or	a4,a4,a3
    8000e556:	1ffe16b7          	lui	a3,0x1ffe1
    8000e55a:	068e                	slli	a3,a3,0x3
    8000e55c:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e55e:	8f75                	and	a4,a4,a3
    8000e560:	00e78463          	beq	a5,a4,8000e568 <tinst_tests_gpf+0x3366>
    8000e564:	a2efe06f          	j	8000c792 <tinst_tests_gpf+0x1590>
    8000e568:	a3efe06f          	j	8000c7a6 <tinst_tests_gpf+0x15a4>
    TEST_ASSERT("correct tinst when executing a amomaxu.d which results in a sgpf",
    8000e56c:	701c                	ld	a5,32(s0)
    8000e56e:	e399                	bnez	a5,8000e574 <tinst_tests_gpf+0x3372>
    8000e570:	ad0fe06f          	j	8000c840 <tinst_tests_gpf+0x163e>
    8000e574:	6814                	ld	a3,16(s0)
    if((addr & 0b1) != 0) {
    8000e576:	0016f713          	andi	a4,a3,1
    8000e57a:	c319                	beqz	a4,8000e580 <tinst_tests_gpf+0x337e>
    8000e57c:	e81fe06f          	j	8000d3fc <tinst_tests_gpf+0x21fa>
    instruction = *((uint16_t*)addr);
    8000e580:	0006d703          	lhu	a4,0(a3)
    if(!INS_COMPRESSED(instruction)) {
    8000e584:	460d                	li	a2,3
    8000e586:	00c775b3          	and	a1,a4,a2
    instruction = *((uint16_t*)addr);
    8000e58a:	2701                	sext.w	a4,a4
    if(!INS_COMPRESSED(instruction)) {
    8000e58c:	00c59763          	bne	a1,a2,8000e59a <tinst_tests_gpf+0x3398>
        instruction |= (*((uint16_t*)(addr + 2)) << 16);
    8000e590:	0026d683          	lhu	a3,2(a3)
    8000e594:	0106969b          	slliw	a3,a3,0x10
    8000e598:	8f55                	or	a4,a4,a3
    8000e59a:	1ffe16b7          	lui	a3,0x1ffe1
    8000e59e:	068e                	slli	a3,a3,0x3
    8000e5a0:	16fd                	addi	a3,a3,-1 # 1ffe0fff <STACK_SIZE+0x1fee0fff>
    8000e5a2:	8f75                	and	a4,a4,a3
    8000e5a4:	00e78463          	beq	a5,a4,8000e5ac <tinst_tests_gpf+0x33aa>
    8000e5a8:	a84fe06f          	j	8000c82c <tinst_tests_gpf+0x162a>
    8000e5ac:	a94fe06f          	j	8000c840 <tinst_tests_gpf+0x163e>

000000008000e5b0 <priv_change_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h> 
bool priv_change_1(){
    8000e5b0:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e5b2:	0001d597          	auipc	a1,0x1d
    8000e5b6:	31e58593          	addi	a1,a1,798 # 8002b8d0 <__func__.16>
    8000e5ba:	0001f517          	auipc	a0,0x1f
    8000e5be:	d4650513          	addi	a0,a0,-698 # 8002d300 <__func__.0+0x2e0>
bool priv_change_1(){
    8000e5c2:	ec06                	sd	ra,24(sp)
    8000e5c4:	e822                	sd	s0,16(sp)
    8000e5c6:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e5c8:	7f21c0ef          	jal	8002adba <printf>
    8000e5cc:	4529                	li	a0,10
    8000e5ce:	4da1b0ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_HS);
    8000e5d2:	450d                	li	a0,3
    8000e5d4:	89bf20ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8000e5d8:	808f20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e5dc:	ba0f20ef          	jal	8000097c <hpt_init>
    vspt_init(); 
    8000e5e0:	942f20ef          	jal	80000722 <vspt_init>

    //V=1，VS模式下发生异常，关闭代理，切换到M态处理异常，异常结束恢复到VS态
    goto_priv(PRIV_M);
    8000e5e4:	4511                	li	a0,4
    8000e5e6:	889f20ef          	jal	80000e6e <goto_priv>
    CSRW(medeleg,0);
    8000e5ea:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000e5ee:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000e5f2:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000e5f6:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VS);     
    8000e5fa:	4509                	li	a0,2
    8000e5fc:	873f20ef          	jal	80000e6e <goto_priv>
    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e600:	f72f20ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000e604:	400197b7          	lui	a5,0x40019
    8000e608:	078a                	slli	a5,a5,0x2
    8000e60a:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e60e:	08200593          	li	a1,130
    8000e612:	00021617          	auipc	a2,0x21
    8000e616:	7f660613          	addi	a2,a2,2038 # 8002fe08 <__func__.0+0x2de8>
    8000e61a:	0001f517          	auipc	a0,0x1f
    8000e61e:	cfe50513          	addi	a0,a0,-770 # 8002d318 <__func__.0+0x2f8>
    8000e622:	7981c0ef          	jal	8002adba <printf>
    8000e626:	00043797          	auipc	a5,0x43
    8000e62a:	9eb7c783          	lbu	a5,-1557(a5) # 80051011 <excpt+0x1>
    8000e62e:	00043497          	auipc	s1,0x43
    8000e632:	9e248493          	addi	s1,s1,-1566 # 80051010 <excpt>
    8000e636:	0001f597          	auipc	a1,0x1f
    8000e63a:	cba58593          	addi	a1,a1,-838 # 8002d2f0 <__func__.0+0x2d0>
    8000e63e:	c789                	beqz	a5,8000e648 <priv_change_1+0x98>
    8000e640:	6498                	ld	a4,8(s1)
    8000e642:	47b5                	li	a5,13
    8000e644:	0cf70463          	beq	a4,a5,8000e70c <priv_change_1+0x15c>
    8000e648:	0001f517          	auipc	a0,0x1f
    8000e64c:	ce850513          	addi	a0,a0,-792 # 8002d330 <__func__.0+0x310>
    8000e650:	76a1c0ef          	jal	8002adba <printf>
    8000e654:	00043797          	auipc	a5,0x43
    8000e658:	9bd7c783          	lbu	a5,-1603(a5) # 80051011 <excpt+0x1>
    8000e65c:	c789                	beqz	a5,8000e666 <priv_change_1+0xb6>
    8000e65e:	6498                	ld	a4,8(s1)
    8000e660:	47b5                	li	a5,13
    8000e662:	04f70e63          	beq	a4,a5,8000e6be <priv_change_1+0x10e>
    8000e666:	0001f517          	auipc	a0,0x1f
    8000e66a:	cd250513          	addi	a0,a0,-814 # 8002d338 <__func__.0+0x318>
    8000e66e:	74c1c0ef          	jal	8002adba <printf>
    8000e672:	02900513          	li	a0,41
    8000e676:	4321b0ef          	jal	80029aa8 <putchar>
    8000e67a:	4529                	li	a0,10
    8000e67c:	42c1b0ef          	jal	80029aa8 <putchar>
    8000e680:	00043417          	auipc	s0,0x43
    8000e684:	99144403          	lbu	s0,-1647(s0) # 80051011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );

    TEST_END();
    8000e688:	0001f597          	auipc	a1,0x1f
    8000e68c:	c6858593          	addi	a1,a1,-920 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e690:	c411                	beqz	s0,8000e69c <priv_change_1+0xec>
    8000e692:	6498                	ld	a4,8(s1)
    8000e694:	47b5                	li	a5,13
    8000e696:	04f70363          	beq	a4,a5,8000e6dc <priv_change_1+0x12c>
    8000e69a:	4401                	li	s0,0
    TEST_END();
    8000e69c:	0001f517          	auipc	a0,0x1f
    8000e6a0:	cfc50513          	addi	a0,a0,-772 # 8002d398 <__func__.0+0x378>
    8000e6a4:	7161c0ef          	jal	8002adba <printf>
    8000e6a8:	4511                	li	a0,4
    8000e6aa:	fc4f20ef          	jal	80000e6e <goto_priv>
    8000e6ae:	8dcf30ef          	jal	8000178a <reset_state>
}
    8000e6b2:	60e2                	ld	ra,24(sp)
    8000e6b4:	8522                	mv	a0,s0
    8000e6b6:	6442                	ld	s0,16(sp)
    8000e6b8:	64a2                	ld	s1,8(sp)
    8000e6ba:	6105                	addi	sp,sp,32
    8000e6bc:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e6be:	00043717          	auipc	a4,0x43
    8000e6c2:	95672703          	lw	a4,-1706(a4) # 80051014 <excpt+0x4>
    8000e6c6:	4791                	li	a5,4
    8000e6c8:	f8f71fe3          	bne	a4,a5,8000e666 <priv_change_1+0xb6>
    8000e6cc:	0002c717          	auipc	a4,0x2c
    8000e6d0:	20872703          	lw	a4,520(a4) # 8003a8d4 <curr_priv>
    8000e6d4:	4789                	li	a5,2
    8000e6d6:	f8f718e3          	bne	a4,a5,8000e666 <priv_change_1+0xb6>
    8000e6da:	b745                	j	8000e67a <priv_change_1+0xca>
    8000e6dc:	00043717          	auipc	a4,0x43
    8000e6e0:	93872703          	lw	a4,-1736(a4) # 80051014 <excpt+0x4>
    8000e6e4:	4791                	li	a5,4
    8000e6e6:	faf71ae3          	bne	a4,a5,8000e69a <priv_change_1+0xea>
    8000e6ea:	0002c717          	auipc	a4,0x2c
    8000e6ee:	1ea72703          	lw	a4,490(a4) # 8003a8d4 <curr_priv>
    8000e6f2:	4789                	li	a5,2
    TEST_END();
    8000e6f4:	0001f597          	auipc	a1,0x1f
    8000e6f8:	bec58593          	addi	a1,a1,-1044 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e6fc:	faf700e3          	beq	a4,a5,8000e69c <priv_change_1+0xec>
    8000e700:	4401                	li	s0,0
    TEST_END();
    8000e702:	0001f597          	auipc	a1,0x1f
    8000e706:	bee58593          	addi	a1,a1,-1042 # 8002d2f0 <__func__.0+0x2d0>
    8000e70a:	bf49                	j	8000e69c <priv_change_1+0xec>
    TEST_ASSERT("vs trigger except that priv change to m mod and sret to vs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e70c:	00043717          	auipc	a4,0x43
    8000e710:	90872703          	lw	a4,-1784(a4) # 80051014 <excpt+0x4>
    8000e714:	4791                	li	a5,4
    8000e716:	f2f719e3          	bne	a4,a5,8000e648 <priv_change_1+0x98>
    8000e71a:	0002c717          	auipc	a4,0x2c
    8000e71e:	1ba72703          	lw	a4,442(a4) # 8003a8d4 <curr_priv>
    8000e722:	4789                	li	a5,2
    8000e724:	0001f597          	auipc	a1,0x1f
    8000e728:	bbc58593          	addi	a1,a1,-1092 # 8002d2e0 <__func__.0+0x2c0>
    8000e72c:	f0f70ee3          	beq	a4,a5,8000e648 <priv_change_1+0x98>
    8000e730:	0001f597          	auipc	a1,0x1f
    8000e734:	bc058593          	addi	a1,a1,-1088 # 8002d2f0 <__func__.0+0x2d0>
    8000e738:	bf01                	j	8000e648 <priv_change_1+0x98>

000000008000e73a <priv_change_2>:

bool priv_change_2(){
    8000e73a:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000e73c:	0001d597          	auipc	a1,0x1d
    8000e740:	1a458593          	addi	a1,a1,420 # 8002b8e0 <__func__.14>
    8000e744:	0001f517          	auipc	a0,0x1f
    8000e748:	bbc50513          	addi	a0,a0,-1092 # 8002d300 <__func__.0+0x2e0>
bool priv_change_2(){
    8000e74c:	ec06                	sd	ra,24(sp)
    8000e74e:	e822                	sd	s0,16(sp)
    8000e750:	e426                	sd	s1,8(sp)
    TEST_START();
    8000e752:	6681c0ef          	jal	8002adba <printf>
    8000e756:	4529                	li	a0,10
    8000e758:	3501b0ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_HS);
    8000e75c:	450d                	li	a0,3
    8000e75e:	f10f20ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8000e762:	e7ff10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e766:	a16f20ef          	jal	8000097c <hpt_init>
    vspt_init(); 
    8000e76a:	fb9f10ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;
    //V=1，VS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000e76e:	4511                	li	a0,4
    8000e770:	efef20ef          	jal	80000e6e <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000e774:	6789                	lui	a5,0x2
    8000e776:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_VS);     
    8000e77a:	4509                	li	a0,2
    8000e77c:	ef2f20ef          	jal	80000e6e <goto_priv>

    vaddr_f = vs_page_base(VSI_GI);      
    value = 0xdeadbeef;
    
    TEST_SETUP_EXCEPT();        
    8000e780:	df2f20ef          	jal	80000d72 <test_setup_except_function>
    8000e784:	400197b7          	lui	a5,0x40019
    8000e788:	078a                	slli	a5,a5,0x2
    8000e78a:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e78e:	08200593          	li	a1,130
    8000e792:	00021617          	auipc	a2,0x21
    8000e796:	6e660613          	addi	a2,a2,1766 # 8002fe78 <__func__.0+0x2e58>
    8000e79a:	0001f517          	auipc	a0,0x1f
    8000e79e:	b7e50513          	addi	a0,a0,-1154 # 8002d318 <__func__.0+0x2f8>
    8000e7a2:	6181c0ef          	jal	8002adba <printf>
    8000e7a6:	00043797          	auipc	a5,0x43
    8000e7aa:	86b7c783          	lbu	a5,-1941(a5) # 80051011 <excpt+0x1>
    8000e7ae:	00043497          	auipc	s1,0x43
    8000e7b2:	86248493          	addi	s1,s1,-1950 # 80051010 <excpt>
    8000e7b6:	0001f597          	auipc	a1,0x1f
    8000e7ba:	b3a58593          	addi	a1,a1,-1222 # 8002d2f0 <__func__.0+0x2d0>
    8000e7be:	c789                	beqz	a5,8000e7c8 <priv_change_2+0x8e>
    8000e7c0:	6498                	ld	a4,8(s1)
    8000e7c2:	47b5                	li	a5,13
    8000e7c4:	0cf70463          	beq	a4,a5,8000e88c <priv_change_2+0x152>
    8000e7c8:	0001f517          	auipc	a0,0x1f
    8000e7cc:	b6850513          	addi	a0,a0,-1176 # 8002d330 <__func__.0+0x310>
    8000e7d0:	5ea1c0ef          	jal	8002adba <printf>
    8000e7d4:	00043797          	auipc	a5,0x43
    8000e7d8:	83d7c783          	lbu	a5,-1987(a5) # 80051011 <excpt+0x1>
    8000e7dc:	c789                	beqz	a5,8000e7e6 <priv_change_2+0xac>
    8000e7de:	6498                	ld	a4,8(s1)
    8000e7e0:	47b5                	li	a5,13
    8000e7e2:	04f70e63          	beq	a4,a5,8000e83e <priv_change_2+0x104>
    8000e7e6:	0001f517          	auipc	a0,0x1f
    8000e7ea:	b5250513          	addi	a0,a0,-1198 # 8002d338 <__func__.0+0x318>
    8000e7ee:	5cc1c0ef          	jal	8002adba <printf>
    8000e7f2:	02900513          	li	a0,41
    8000e7f6:	2b21b0ef          	jal	80029aa8 <putchar>
    8000e7fa:	4529                	li	a0,10
    8000e7fc:	2ac1b0ef          	jal	80029aa8 <putchar>
    8000e800:	00043417          	auipc	s0,0x43
    8000e804:	81144403          	lbu	s0,-2031(s0) # 80051011 <excpt+0x1>
        excpt.cause == CAUSE_LPF &&
        excpt.priv == PRIV_M &&
        curr_priv == PRIV_VS
    );    

    TEST_END();
    8000e808:	0001f597          	auipc	a1,0x1f
    8000e80c:	ae858593          	addi	a1,a1,-1304 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e810:	c411                	beqz	s0,8000e81c <priv_change_2+0xe2>
    8000e812:	6498                	ld	a4,8(s1)
    8000e814:	47b5                	li	a5,13
    8000e816:	04f70363          	beq	a4,a5,8000e85c <priv_change_2+0x122>
    8000e81a:	4401                	li	s0,0
    TEST_END();
    8000e81c:	0001f517          	auipc	a0,0x1f
    8000e820:	b7c50513          	addi	a0,a0,-1156 # 8002d398 <__func__.0+0x378>
    8000e824:	5961c0ef          	jal	8002adba <printf>
    8000e828:	4511                	li	a0,4
    8000e82a:	e44f20ef          	jal	80000e6e <goto_priv>
    8000e82e:	f5df20ef          	jal	8000178a <reset_state>
}
    8000e832:	60e2                	ld	ra,24(sp)
    8000e834:	8522                	mv	a0,s0
    8000e836:	6442                	ld	s0,16(sp)
    8000e838:	64a2                	ld	s1,8(sp)
    8000e83a:	6105                	addi	sp,sp,32
    8000e83c:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e83e:	00042717          	auipc	a4,0x42
    8000e842:	7d672703          	lw	a4,2006(a4) # 80051014 <excpt+0x4>
    8000e846:	4791                	li	a5,4
    8000e848:	f8f71fe3          	bne	a4,a5,8000e7e6 <priv_change_2+0xac>
    8000e84c:	0002c717          	auipc	a4,0x2c
    8000e850:	08872703          	lw	a4,136(a4) # 8003a8d4 <curr_priv>
    8000e854:	4789                	li	a5,2
    8000e856:	f8f718e3          	bne	a4,a5,8000e7e6 <priv_change_2+0xac>
    8000e85a:	b745                	j	8000e7fa <priv_change_2+0xc0>
    8000e85c:	00042717          	auipc	a4,0x42
    8000e860:	7b872703          	lw	a4,1976(a4) # 80051014 <excpt+0x4>
    8000e864:	4791                	li	a5,4
    8000e866:	faf71ae3          	bne	a4,a5,8000e81a <priv_change_2+0xe0>
    8000e86a:	0002c717          	auipc	a4,0x2c
    8000e86e:	06a72703          	lw	a4,106(a4) # 8003a8d4 <curr_priv>
    8000e872:	4789                	li	a5,2
    TEST_END();
    8000e874:	0001f597          	auipc	a1,0x1f
    8000e878:	a6c58593          	addi	a1,a1,-1428 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e87c:	faf700e3          	beq	a4,a5,8000e81c <priv_change_2+0xe2>
    8000e880:	4401                	li	s0,0
    TEST_END();
    8000e882:	0001f597          	auipc	a1,0x1f
    8000e886:	a6e58593          	addi	a1,a1,-1426 # 8002d2f0 <__func__.0+0x2d0>
    8000e88a:	bf49                	j	8000e81c <priv_change_2+0xe2>
    TEST_ASSERT("vs trigger except that priv change to m mode when medeleg==0",         
    8000e88c:	00042717          	auipc	a4,0x42
    8000e890:	78872703          	lw	a4,1928(a4) # 80051014 <excpt+0x4>
    8000e894:	4791                	li	a5,4
    8000e896:	f2f719e3          	bne	a4,a5,8000e7c8 <priv_change_2+0x8e>
    8000e89a:	0002c717          	auipc	a4,0x2c
    8000e89e:	03a72703          	lw	a4,58(a4) # 8003a8d4 <curr_priv>
    8000e8a2:	4789                	li	a5,2
    8000e8a4:	0001f597          	auipc	a1,0x1f
    8000e8a8:	a3c58593          	addi	a1,a1,-1476 # 8002d2e0 <__func__.0+0x2c0>
    8000e8ac:	f0f70ee3          	beq	a4,a5,8000e7c8 <priv_change_2+0x8e>
    8000e8b0:	0001f597          	auipc	a1,0x1f
    8000e8b4:	a4058593          	addi	a1,a1,-1472 # 8002d2f0 <__func__.0+0x2d0>
    8000e8b8:	bf01                	j	8000e7c8 <priv_change_2+0x8e>

000000008000e8ba <priv_change_3>:


bool priv_change_3(){
    8000e8ba:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000e8bc:	0001d597          	auipc	a1,0x1d
    8000e8c0:	03458593          	addi	a1,a1,52 # 8002b8f0 <__func__.13>
    8000e8c4:	0001f517          	auipc	a0,0x1f
    8000e8c8:	a3c50513          	addi	a0,a0,-1476 # 8002d300 <__func__.0+0x2e0>
bool priv_change_3(){
    8000e8cc:	e406                	sd	ra,8(sp)
    8000e8ce:	e022                	sd	s0,0(sp)
    TEST_START();
    8000e8d0:	4ea1c0ef          	jal	8002adba <printf>
    8000e8d4:	4529                	li	a0,10
    8000e8d6:	1d21b0ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_HS);
    8000e8da:	450d                	li	a0,3
    8000e8dc:	d92f20ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8000e8e0:	d01f10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000e8e4:	898f20ef          	jal	8000097c <hpt_init>
    vspt_init(); 
    8000e8e8:	e3bf10ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭代理，切换到M态处理异常，处理结束执行mret返回HS态
    TEST_SETUP_EXCEPT();  
    8000e8ec:	c86f20ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8000e8f0:	4511                	li	a0,4
    8000e8f2:	d7cf20ef          	jal	80000e6e <goto_priv>
    CSRW(medeleg,0);
    8000e8f6:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);
    8000e8fa:	30305073          	csrwi	mideleg,0
    goto_priv(PRIV_HS);     
    8000e8fe:	450d                	li	a0,3
    8000e900:	d6ef20ef          	jal	80000e6e <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000e904:	c6ef20ef          	jal	80000d72 <test_setup_except_function>
    8000e908:	400197b7          	lui	a5,0x40019
    8000e90c:	078a                	slli	a5,a5,0x2
    8000e90e:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    //mret();
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e912:	08200593          	li	a1,130
    8000e916:	00021617          	auipc	a2,0x21
    8000e91a:	5a260613          	addi	a2,a2,1442 # 8002feb8 <__func__.0+0x2e98>
    8000e91e:	0001f517          	auipc	a0,0x1f
    8000e922:	9fa50513          	addi	a0,a0,-1542 # 8002d318 <__func__.0+0x2f8>
    8000e926:	4941c0ef          	jal	8002adba <printf>
    8000e92a:	00042797          	auipc	a5,0x42
    8000e92e:	6e77c783          	lbu	a5,1767(a5) # 80051011 <excpt+0x1>
    8000e932:	0001f597          	auipc	a1,0x1f
    8000e936:	9be58593          	addi	a1,a1,-1602 # 8002d2f0 <__func__.0+0x2d0>
    8000e93a:	cb81                	beqz	a5,8000e94a <priv_change_3+0x90>
    8000e93c:	0002c717          	auipc	a4,0x2c
    8000e940:	f9872703          	lw	a4,-104(a4) # 8003a8d4 <curr_priv>
    8000e944:	478d                	li	a5,3
    8000e946:	0af70b63          	beq	a4,a5,8000e9fc <priv_change_3+0x142>
    8000e94a:	0001f517          	auipc	a0,0x1f
    8000e94e:	9e650513          	addi	a0,a0,-1562 # 8002d330 <__func__.0+0x310>
    8000e952:	4681c0ef          	jal	8002adba <printf>
    8000e956:	00042797          	auipc	a5,0x42
    8000e95a:	6bb7c783          	lbu	a5,1723(a5) # 80051011 <excpt+0x1>
    8000e95e:	cb81                	beqz	a5,8000e96e <priv_change_3+0xb4>
    8000e960:	0002c717          	auipc	a4,0x2c
    8000e964:	f7472703          	lw	a4,-140(a4) # 8003a8d4 <curr_priv>
    8000e968:	478d                	li	a5,3
    8000e96a:	06f70063          	beq	a4,a5,8000e9ca <priv_change_3+0x110>
    8000e96e:	0001f517          	auipc	a0,0x1f
    8000e972:	9ca50513          	addi	a0,a0,-1590 # 8002d338 <__func__.0+0x318>
    8000e976:	4441c0ef          	jal	8002adba <printf>
    8000e97a:	02900513          	li	a0,41
    8000e97e:	12a1b0ef          	jal	80029aa8 <putchar>
    8000e982:	4529                	li	a0,10
    8000e984:	1241b0ef          	jal	80029aa8 <putchar>
    8000e988:	00042417          	auipc	s0,0x42
    8000e98c:	68944403          	lbu	s0,1673(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        curr_priv == PRIV_HS &&
        excpt.priv == PRIV_M
    ); 

    TEST_END();
    8000e990:	0001f597          	auipc	a1,0x1f
    8000e994:	96058593          	addi	a1,a1,-1696 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e998:	c809                	beqz	s0,8000e9aa <priv_change_3+0xf0>
    8000e99a:	0002c717          	auipc	a4,0x2c
    8000e99e:	f3a72703          	lw	a4,-198(a4) # 8003a8d4 <curr_priv>
    8000e9a2:	478d                	li	a5,3
    8000e9a4:	02f70b63          	beq	a4,a5,8000e9da <priv_change_3+0x120>
    8000e9a8:	4401                	li	s0,0
    TEST_END();
    8000e9aa:	0001f517          	auipc	a0,0x1f
    8000e9ae:	9ee50513          	addi	a0,a0,-1554 # 8002d398 <__func__.0+0x378>
    8000e9b2:	4081c0ef          	jal	8002adba <printf>
    8000e9b6:	4511                	li	a0,4
    8000e9b8:	cb6f20ef          	jal	80000e6e <goto_priv>
    8000e9bc:	dcff20ef          	jal	8000178a <reset_state>
}
    8000e9c0:	60a2                	ld	ra,8(sp)
    8000e9c2:	8522                	mv	a0,s0
    8000e9c4:	6402                	ld	s0,0(sp)
    8000e9c6:	0141                	addi	sp,sp,16
    8000e9c8:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e9ca:	00042717          	auipc	a4,0x42
    8000e9ce:	64a72703          	lw	a4,1610(a4) # 80051014 <excpt+0x4>
    8000e9d2:	4791                	li	a5,4
    8000e9d4:	f8f71de3          	bne	a4,a5,8000e96e <priv_change_3+0xb4>
    8000e9d8:	b76d                	j	8000e982 <priv_change_3+0xc8>
    8000e9da:	00042717          	auipc	a4,0x42
    8000e9de:	63a72703          	lw	a4,1594(a4) # 80051014 <excpt+0x4>
    8000e9e2:	4791                	li	a5,4
    TEST_END();
    8000e9e4:	0001f597          	auipc	a1,0x1f
    8000e9e8:	8fc58593          	addi	a1,a1,-1796 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e9ec:	faf70fe3          	beq	a4,a5,8000e9aa <priv_change_3+0xf0>
    8000e9f0:	4401                	li	s0,0
    TEST_END();
    8000e9f2:	0001f597          	auipc	a1,0x1f
    8000e9f6:	8fe58593          	addi	a1,a1,-1794 # 8002d2f0 <__func__.0+0x2d0>
    8000e9fa:	bf45                	j	8000e9aa <priv_change_3+0xf0>
    TEST_ASSERT("hs trigger except that priv change to m mod and mret to hs mode when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000e9fc:	00042717          	auipc	a4,0x42
    8000ea00:	61872703          	lw	a4,1560(a4) # 80051014 <excpt+0x4>
    8000ea04:	4791                	li	a5,4
    8000ea06:	0001f597          	auipc	a1,0x1f
    8000ea0a:	8da58593          	addi	a1,a1,-1830 # 8002d2e0 <__func__.0+0x2c0>
    8000ea0e:	f2f70ee3          	beq	a4,a5,8000e94a <priv_change_3+0x90>
    8000ea12:	0001f597          	auipc	a1,0x1f
    8000ea16:	8de58593          	addi	a1,a1,-1826 # 8002d2f0 <__func__.0+0x2d0>
    8000ea1a:	bf05                	j	8000e94a <priv_change_3+0x90>

000000008000ea1c <priv_change_4>:

bool priv_change_4(){
    8000ea1c:	1101                	addi	sp,sp,-32
    
    TEST_START();
    8000ea1e:	0001d597          	auipc	a1,0x1d
    8000ea22:	ee258593          	addi	a1,a1,-286 # 8002b900 <__func__.12>
    8000ea26:	0001f517          	auipc	a0,0x1f
    8000ea2a:	8da50513          	addi	a0,a0,-1830 # 8002d300 <__func__.0+0x2e0>
bool priv_change_4(){
    8000ea2e:	ec06                	sd	ra,24(sp)
    8000ea30:	e822                	sd	s0,16(sp)
    8000ea32:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ea34:	3861c0ef          	jal	8002adba <printf>
    8000ea38:	4529                	li	a0,10
    8000ea3a:	06e1b0ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_HS);
    8000ea3e:	450d                	li	a0,3
    8000ea40:	c2ef20ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8000ea44:	b9df10ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8000ea48:	f35f10ef          	jal	8000097c <hpt_init>
    vspt_init(); 
    8000ea4c:	cd7f10ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr_f = vs_page_base(VSI_GI);      
    uint64_t value = 0xdeadbeef;

    //V=0，HS模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ea50:	4511                	li	a0,4
    8000ea52:	c1cf20ef          	jal	80000e6e <goto_priv>
    CSRC(medeleg, 1 << CAUSE_LPF);         
    8000ea56:	6789                	lui	a5,0x2
    8000ea58:	3027b073          	csrc	medeleg,a5
    goto_priv(PRIV_HS);     
    8000ea5c:	450d                	li	a0,3
    8000ea5e:	c10f20ef          	jal	80000e6e <goto_priv>
    vaddr_f = hs_page_base(VSI_GI);      
    value = 0xdeadbeef;

    TEST_SETUP_EXCEPT();        
    8000ea62:	b10f20ef          	jal	80000d72 <test_setup_except_function>
    8000ea66:	400197b7          	lui	a5,0x40019
    8000ea6a:	078a                	slli	a5,a5,0x2
    8000ea6c:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>
    value = lb(vaddr_f);
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000ea70:	08200593          	li	a1,130
    8000ea74:	00021617          	auipc	a2,0x21
    8000ea78:	4b460613          	addi	a2,a2,1204 # 8002ff28 <__func__.0+0x2f08>
    8000ea7c:	0001f517          	auipc	a0,0x1f
    8000ea80:	89c50513          	addi	a0,a0,-1892 # 8002d318 <__func__.0+0x2f8>
    8000ea84:	3361c0ef          	jal	8002adba <printf>
    8000ea88:	00042797          	auipc	a5,0x42
    8000ea8c:	5897c783          	lbu	a5,1417(a5) # 80051011 <excpt+0x1>
    8000ea90:	00042497          	auipc	s1,0x42
    8000ea94:	58048493          	addi	s1,s1,1408 # 80051010 <excpt>
    8000ea98:	0001f597          	auipc	a1,0x1f
    8000ea9c:	85858593          	addi	a1,a1,-1960 # 8002d2f0 <__func__.0+0x2d0>
    8000eaa0:	c789                	beqz	a5,8000eaaa <priv_change_4+0x8e>
    8000eaa2:	6498                	ld	a4,8(s1)
    8000eaa4:	47b5                	li	a5,13
    8000eaa6:	0af70663          	beq	a4,a5,8000eb52 <priv_change_4+0x136>
    8000eaaa:	0001f517          	auipc	a0,0x1f
    8000eaae:	88650513          	addi	a0,a0,-1914 # 8002d330 <__func__.0+0x310>
    8000eab2:	3081c0ef          	jal	8002adba <printf>
    8000eab6:	00042797          	auipc	a5,0x42
    8000eaba:	55b7c783          	lbu	a5,1371(a5) # 80051011 <excpt+0x1>
    8000eabe:	c789                	beqz	a5,8000eac8 <priv_change_4+0xac>
    8000eac0:	6498                	ld	a4,8(s1)
    8000eac2:	47b5                	li	a5,13
    8000eac4:	04f70e63          	beq	a4,a5,8000eb20 <priv_change_4+0x104>
    8000eac8:	0001f517          	auipc	a0,0x1f
    8000eacc:	87050513          	addi	a0,a0,-1936 # 8002d338 <__func__.0+0x318>
    8000ead0:	2ea1c0ef          	jal	8002adba <printf>
    8000ead4:	02900513          	li	a0,41
    8000ead8:	7d11a0ef          	jal	80029aa8 <putchar>
    8000eadc:	4529                	li	a0,10
    8000eade:	7cb1a0ef          	jal	80029aa8 <putchar>
    8000eae2:	00042417          	auipc	s0,0x42
    8000eae6:	52f44403          	lbu	s0,1327(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true && 
        excpt.cause == CAUSE_LPF &&
        excpt.priv==PRIV_M
    );  
    
    TEST_END();
    8000eaea:	0001f597          	auipc	a1,0x1f
    8000eaee:	80658593          	addi	a1,a1,-2042 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eaf2:	c411                	beqz	s0,8000eafe <priv_change_4+0xe2>
    8000eaf4:	6498                	ld	a4,8(s1)
    8000eaf6:	47b5                	li	a5,13
    8000eaf8:	02f70c63          	beq	a4,a5,8000eb30 <priv_change_4+0x114>
    8000eafc:	4401                	li	s0,0
    TEST_END();
    8000eafe:	0001f517          	auipc	a0,0x1f
    8000eb02:	89a50513          	addi	a0,a0,-1894 # 8002d398 <__func__.0+0x378>
    8000eb06:	2b41c0ef          	jal	8002adba <printf>
    8000eb0a:	4511                	li	a0,4
    8000eb0c:	b62f20ef          	jal	80000e6e <goto_priv>
    8000eb10:	c7bf20ef          	jal	8000178a <reset_state>
}
    8000eb14:	60e2                	ld	ra,24(sp)
    8000eb16:	8522                	mv	a0,s0
    8000eb18:	6442                	ld	s0,16(sp)
    8000eb1a:	64a2                	ld	s1,8(sp)
    8000eb1c:	6105                	addi	sp,sp,32
    8000eb1e:	8082                	ret
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb20:	00042717          	auipc	a4,0x42
    8000eb24:	4f472703          	lw	a4,1268(a4) # 80051014 <excpt+0x4>
    8000eb28:	4791                	li	a5,4
    8000eb2a:	f8f71fe3          	bne	a4,a5,8000eac8 <priv_change_4+0xac>
    8000eb2e:	b77d                	j	8000eadc <priv_change_4+0xc0>
    8000eb30:	00042717          	auipc	a4,0x42
    8000eb34:	4e472703          	lw	a4,1252(a4) # 80051014 <excpt+0x4>
    8000eb38:	4791                	li	a5,4
    TEST_END();
    8000eb3a:	0001e597          	auipc	a1,0x1e
    8000eb3e:	7a658593          	addi	a1,a1,1958 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb42:	faf70ee3          	beq	a4,a5,8000eafe <priv_change_4+0xe2>
    8000eb46:	4401                	li	s0,0
    TEST_END();
    8000eb48:	0001e597          	auipc	a1,0x1e
    8000eb4c:	7a858593          	addi	a1,a1,1960 # 8002d2f0 <__func__.0+0x2d0>
    8000eb50:	b77d                	j	8000eafe <priv_change_4+0xe2>
    TEST_ASSERT("hs trigger except that priv change to m mode when medeleg==0",         
    8000eb52:	00042717          	auipc	a4,0x42
    8000eb56:	4c272703          	lw	a4,1218(a4) # 80051014 <excpt+0x4>
    8000eb5a:	4791                	li	a5,4
    8000eb5c:	0001e597          	auipc	a1,0x1e
    8000eb60:	78458593          	addi	a1,a1,1924 # 8002d2e0 <__func__.0+0x2c0>
    8000eb64:	f4f703e3          	beq	a4,a5,8000eaaa <priv_change_4+0x8e>
    8000eb68:	0001e597          	auipc	a1,0x1e
    8000eb6c:	78858593          	addi	a1,a1,1928 # 8002d2f0 <__func__.0+0x2d0>
    8000eb70:	bf2d                	j	8000eaaa <priv_change_4+0x8e>

000000008000eb72 <priv_change_5>:

bool priv_change_5(){
    8000eb72:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000eb74:	0001d597          	auipc	a1,0x1d
    8000eb78:	d9c58593          	addi	a1,a1,-612 # 8002b910 <__func__.11>
    8000eb7c:	0001e517          	auipc	a0,0x1e
    8000eb80:	78450513          	addi	a0,a0,1924 # 8002d300 <__func__.0+0x2e0>
bool priv_change_5(){
    8000eb84:	e406                	sd	ra,8(sp)
    8000eb86:	e022                	sd	s0,0(sp)
    TEST_START();
    8000eb88:	2321c0ef          	jal	8002adba <printf>
    8000eb8c:	4529                	li	a0,10
    8000eb8e:	71b1a0ef          	jal	80029aa8 <putchar>


    //V=0，M模式下发生异常，M态处理异常
    goto_priv(PRIV_M);
    8000eb92:	4511                	li	a0,4
    8000eb94:	adaf20ef          	jal	80000e6e <goto_priv>
    reset_state();
    8000eb98:	bf3f20ef          	jal	8000178a <reset_state>
    CSRW(medeleg, 0); 
    8000eb9c:	30205073          	csrwi	medeleg,0

    TEST_SETUP_EXCEPT();       
    8000eba0:	9d2f20ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    8000eba4:	00000073          	ecall
    ecall_1(); 
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000eba8:	08200593          	li	a1,130
    8000ebac:	00021617          	auipc	a2,0x21
    8000ebb0:	3bc60613          	addi	a2,a2,956 # 8002ff68 <__func__.0+0x2f48>
    8000ebb4:	0001e517          	auipc	a0,0x1e
    8000ebb8:	76450513          	addi	a0,a0,1892 # 8002d318 <__func__.0+0x2f8>
    8000ebbc:	1fe1c0ef          	jal	8002adba <printf>
    8000ebc0:	00042417          	auipc	s0,0x42
    8000ebc4:	45040413          	addi	s0,s0,1104 # 80051010 <excpt>
    8000ebc8:	6014                	ld	a3,0(s0)
    8000ebca:	f0001737          	lui	a4,0xf0001
    8000ebce:	0712                	slli	a4,a4,0x4
    8000ebd0:	4785                	li	a5,1
    8000ebd2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ebd6:	178a                	slli	a5,a5,0x22
    8000ebd8:	8f75                	and	a4,a4,a3
    8000ebda:	10078793          	addi	a5,a5,256
    8000ebde:	0001e597          	auipc	a1,0x1e
    8000ebe2:	70258593          	addi	a1,a1,1794 # 8002d2e0 <__func__.0+0x2c0>
    8000ebe6:	00f70663          	beq	a4,a5,8000ebf2 <priv_change_5+0x80>
    8000ebea:	0001e597          	auipc	a1,0x1e
    8000ebee:	70658593          	addi	a1,a1,1798 # 8002d2f0 <__func__.0+0x2d0>
    8000ebf2:	0001e517          	auipc	a0,0x1e
    8000ebf6:	73e50513          	addi	a0,a0,1854 # 8002d330 <__func__.0+0x310>
    8000ebfa:	1c01c0ef          	jal	8002adba <printf>
    8000ebfe:	00042797          	auipc	a5,0x42
    8000ec02:	4137c783          	lbu	a5,1043(a5) # 80051011 <excpt+0x1>
    8000ec06:	cb81                	beqz	a5,8000ec16 <priv_change_5+0xa4>
    8000ec08:	00042717          	auipc	a4,0x42
    8000ec0c:	40c72703          	lw	a4,1036(a4) # 80051014 <excpt+0x4>
    8000ec10:	4791                	li	a5,4
    8000ec12:	00f70c63          	beq	a4,a5,8000ec2a <priv_change_5+0xb8>
    8000ec16:	0001e517          	auipc	a0,0x1e
    8000ec1a:	72250513          	addi	a0,a0,1826 # 8002d338 <__func__.0+0x318>
    8000ec1e:	19c1c0ef          	jal	8002adba <printf>
    8000ec22:	02900513          	li	a0,41
    8000ec26:	6831a0ef          	jal	80029aa8 <putchar>
    8000ec2a:	4529                	li	a0,10
    8000ec2c:	67d1a0ef          	jal	80029aa8 <putchar>
    8000ec30:	6014                	ld	a3,0(s0)
    8000ec32:	f0001737          	lui	a4,0xf0001
    8000ec36:	0712                	slli	a4,a4,0x4
    8000ec38:	4785                	li	a5,1
    8000ec3a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ec3e:	178a                	slli	a5,a5,0x22
    8000ec40:	8f75                	and	a4,a4,a3
    8000ec42:	10078793          	addi	a5,a5,256
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    ); 
    
    printf("niuh");
    8000ec46:	00021517          	auipc	a0,0x21
    8000ec4a:	35a50513          	addi	a0,a0,858 # 8002ffa0 <__func__.0+0x2f80>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ec4e:	02f70963          	beq	a4,a5,8000ec80 <priv_change_5+0x10e>
    printf("niuh");
    8000ec52:	1681c0ef          	jal	8002adba <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ec56:	4401                	li	s0,0

    TEST_END();
    8000ec58:	0001e597          	auipc	a1,0x1e
    8000ec5c:	69858593          	addi	a1,a1,1688 # 8002d2f0 <__func__.0+0x2d0>
    8000ec60:	0001e517          	auipc	a0,0x1e
    8000ec64:	73850513          	addi	a0,a0,1848 # 8002d398 <__func__.0+0x378>
    8000ec68:	1521c0ef          	jal	8002adba <printf>
    8000ec6c:	4511                	li	a0,4
    8000ec6e:	a00f20ef          	jal	80000e6e <goto_priv>
    8000ec72:	b19f20ef          	jal	8000178a <reset_state>
}
    8000ec76:	60a2                	ld	ra,8(sp)
    8000ec78:	8522                	mv	a0,s0
    8000ec7a:	6402                	ld	s0,0(sp)
    8000ec7c:	0141                	addi	sp,sp,16
    8000ec7e:	8082                	ret
    printf("niuh");
    8000ec80:	13a1c0ef          	jal	8002adba <printf>
    TEST_ASSERT("m trigger except that priv no change when medeleg==0",         
    8000ec84:	4405                	li	s0,1
    TEST_END();
    8000ec86:	0001e597          	auipc	a1,0x1e
    8000ec8a:	65a58593          	addi	a1,a1,1626 # 8002d2e0 <__func__.0+0x2c0>
    8000ec8e:	bfc9                	j	8000ec60 <priv_change_5+0xee>

000000008000ec90 <priv_change_6>:

bool priv_change_6(){
    8000ec90:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000ec92:	0001d597          	auipc	a1,0x1d
    8000ec96:	c8e58593          	addi	a1,a1,-882 # 8002b920 <__func__.10>
    8000ec9a:	0001e517          	auipc	a0,0x1e
    8000ec9e:	66650513          	addi	a0,a0,1638 # 8002d300 <__func__.0+0x2e0>
bool priv_change_6(){
    8000eca2:	e406                	sd	ra,8(sp)
    8000eca4:	e022                	sd	s0,0(sp)
    TEST_START();
    8000eca6:	1141c0ef          	jal	8002adba <printf>
    8000ecaa:	4529                	li	a0,10
    8000ecac:	5fd1a0ef          	jal	80029aa8 <putchar>


    //V=0，U模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000ecb0:	4511                	li	a0,4
    8000ecb2:	9bcf20ef          	jal	80000e6e <goto_priv>
    CSRW(medeleg,0);         
    8000ecb6:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_HU); 
    8000ecba:	4505                	li	a0,1
    8000ecbc:	9b2f20ef          	jal	80000e6e <goto_priv>
    
    TEST_SETUP_EXCEPT();      
    8000ecc0:	8b2f20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000ecc4:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ecc8:	08200593          	li	a1,130
    8000eccc:	00021617          	auipc	a2,0x21
    8000ecd0:	2dc60613          	addi	a2,a2,732 # 8002ffa8 <__func__.0+0x2f88>
    8000ecd4:	0001e517          	auipc	a0,0x1e
    8000ecd8:	64450513          	addi	a0,a0,1604 # 8002d318 <__func__.0+0x2f8>
    8000ecdc:	0de1c0ef          	jal	8002adba <printf>
    8000ece0:	00042417          	auipc	s0,0x42
    8000ece4:	33040413          	addi	s0,s0,816 # 80051010 <excpt>
    8000ece8:	6014                	ld	a3,0(s0)
    8000ecea:	f0001737          	lui	a4,0xf0001
    8000ecee:	0712                	slli	a4,a4,0x4
    8000ecf0:	4785                	li	a5,1
    8000ecf2:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ecf6:	178a                	slli	a5,a5,0x22
    8000ecf8:	8f75                	and	a4,a4,a3
    8000ecfa:	10078793          	addi	a5,a5,256
    8000ecfe:	0001e597          	auipc	a1,0x1e
    8000ed02:	5e258593          	addi	a1,a1,1506 # 8002d2e0 <__func__.0+0x2c0>
    8000ed06:	00f70663          	beq	a4,a5,8000ed12 <priv_change_6+0x82>
    8000ed0a:	0001e597          	auipc	a1,0x1e
    8000ed0e:	5e658593          	addi	a1,a1,1510 # 8002d2f0 <__func__.0+0x2d0>
    8000ed12:	0001e517          	auipc	a0,0x1e
    8000ed16:	61e50513          	addi	a0,a0,1566 # 8002d330 <__func__.0+0x310>
    8000ed1a:	0a01c0ef          	jal	8002adba <printf>
    8000ed1e:	00042797          	auipc	a5,0x42
    8000ed22:	2f37c783          	lbu	a5,755(a5) # 80051011 <excpt+0x1>
    8000ed26:	cb81                	beqz	a5,8000ed36 <priv_change_6+0xa6>
    8000ed28:	00042717          	auipc	a4,0x42
    8000ed2c:	2ec72703          	lw	a4,748(a4) # 80051014 <excpt+0x4>
    8000ed30:	4791                	li	a5,4
    8000ed32:	00f70c63          	beq	a4,a5,8000ed4a <priv_change_6+0xba>
    8000ed36:	0001e517          	auipc	a0,0x1e
    8000ed3a:	60250513          	addi	a0,a0,1538 # 8002d338 <__func__.0+0x318>
    8000ed3e:	07c1c0ef          	jal	8002adba <printf>
    8000ed42:	02900513          	li	a0,41
    8000ed46:	5631a0ef          	jal	80029aa8 <putchar>
    8000ed4a:	4529                	li	a0,10
    8000ed4c:	55d1a0ef          	jal	80029aa8 <putchar>
    8000ed50:	6014                	ld	a3,0(s0)
    8000ed52:	f0001737          	lui	a4,0xf0001
    8000ed56:	0712                	slli	a4,a4,0x4
    8000ed58:	4785                	li	a5,1
    8000ed5a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ed5e:	178a                	slli	a5,a5,0x22
    8000ed60:	8f75                	and	a4,a4,a3
    8000ed62:	10078793          	addi	a5,a5,256
    8000ed66:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );

    TEST_END();
    8000ed68:	0001e597          	auipc	a1,0x1e
    8000ed6c:	58858593          	addi	a1,a1,1416 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mode when medeleg=0",         
    8000ed70:	00f71763          	bne	a4,a5,8000ed7e <priv_change_6+0xee>
    8000ed74:	4405                	li	s0,1
    TEST_END();
    8000ed76:	0001e597          	auipc	a1,0x1e
    8000ed7a:	56a58593          	addi	a1,a1,1386 # 8002d2e0 <__func__.0+0x2c0>
    8000ed7e:	0001e517          	auipc	a0,0x1e
    8000ed82:	61a50513          	addi	a0,a0,1562 # 8002d398 <__func__.0+0x378>
    8000ed86:	0341c0ef          	jal	8002adba <printf>
    8000ed8a:	4511                	li	a0,4
    8000ed8c:	8e2f20ef          	jal	80000e6e <goto_priv>
    8000ed90:	9fbf20ef          	jal	8000178a <reset_state>
}
    8000ed94:	60a2                	ld	ra,8(sp)
    8000ed96:	8522                	mv	a0,s0
    8000ed98:	6402                	ld	s0,0(sp)
    8000ed9a:	0141                	addi	sp,sp,16
    8000ed9c:	8082                	ret

000000008000ed9e <priv_change_7>:

bool priv_change_7(){
    8000ed9e:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000eda0:	0001d597          	auipc	a1,0x1d
    8000eda4:	b9058593          	addi	a1,a1,-1136 # 8002b930 <__func__.9>
    8000eda8:	0001e517          	auipc	a0,0x1e
    8000edac:	55850513          	addi	a0,a0,1368 # 8002d300 <__func__.0+0x2e0>
bool priv_change_7(){
    8000edb0:	e406                	sd	ra,8(sp)
    8000edb2:	e022                	sd	s0,0(sp)
    TEST_START();
    8000edb4:	0061c0ef          	jal	8002adba <printf>
    8000edb8:	4529                	li	a0,10
    8000edba:	4ef1a0ef          	jal	80029aa8 <putchar>


    //V=1，VU模式下发生异常，关闭所有代理，切换到M态处理异常
    goto_priv(PRIV_M);
    8000edbe:	4511                	li	a0,4
    8000edc0:	8aef20ef          	jal	80000e6e <goto_priv>
    CSRW(medeleg,0);      
    8000edc4:	30205073          	csrwi	medeleg,0

    goto_priv(PRIV_VU);     
    8000edc8:	4501                	li	a0,0
    8000edca:	8a4f20ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000edce:	fa5f10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000edd2:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000edd6:	08200593          	li	a1,130
    8000edda:	00021617          	auipc	a2,0x21
    8000edde:	20e60613          	addi	a2,a2,526 # 8002ffe8 <__func__.0+0x2fc8>
    8000ede2:	0001e517          	auipc	a0,0x1e
    8000ede6:	53650513          	addi	a0,a0,1334 # 8002d318 <__func__.0+0x2f8>
    8000edea:	7d11b0ef          	jal	8002adba <printf>
    8000edee:	00042417          	auipc	s0,0x42
    8000edf2:	22240413          	addi	s0,s0,546 # 80051010 <excpt>
    8000edf6:	6014                	ld	a3,0(s0)
    8000edf8:	f0001737          	lui	a4,0xf0001
    8000edfc:	0712                	slli	a4,a4,0x4
    8000edfe:	4785                	li	a5,1
    8000ee00:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ee04:	178a                	slli	a5,a5,0x22
    8000ee06:	8f75                	and	a4,a4,a3
    8000ee08:	10078793          	addi	a5,a5,256
    8000ee0c:	0001e597          	auipc	a1,0x1e
    8000ee10:	4d458593          	addi	a1,a1,1236 # 8002d2e0 <__func__.0+0x2c0>
    8000ee14:	00f70663          	beq	a4,a5,8000ee20 <priv_change_7+0x82>
    8000ee18:	0001e597          	auipc	a1,0x1e
    8000ee1c:	4d858593          	addi	a1,a1,1240 # 8002d2f0 <__func__.0+0x2d0>
    8000ee20:	0001e517          	auipc	a0,0x1e
    8000ee24:	51050513          	addi	a0,a0,1296 # 8002d330 <__func__.0+0x310>
    8000ee28:	7931b0ef          	jal	8002adba <printf>
    8000ee2c:	00042797          	auipc	a5,0x42
    8000ee30:	1e57c783          	lbu	a5,485(a5) # 80051011 <excpt+0x1>
    8000ee34:	cb81                	beqz	a5,8000ee44 <priv_change_7+0xa6>
    8000ee36:	00042717          	auipc	a4,0x42
    8000ee3a:	1de72703          	lw	a4,478(a4) # 80051014 <excpt+0x4>
    8000ee3e:	4791                	li	a5,4
    8000ee40:	00f70c63          	beq	a4,a5,8000ee58 <priv_change_7+0xba>
    8000ee44:	0001e517          	auipc	a0,0x1e
    8000ee48:	4f450513          	addi	a0,a0,1268 # 8002d338 <__func__.0+0x318>
    8000ee4c:	76f1b0ef          	jal	8002adba <printf>
    8000ee50:	02900513          	li	a0,41
    8000ee54:	4551a0ef          	jal	80029aa8 <putchar>
    8000ee58:	4529                	li	a0,10
    8000ee5a:	44f1a0ef          	jal	80029aa8 <putchar>
    8000ee5e:	6014                	ld	a3,0(s0)
    8000ee60:	f0001737          	lui	a4,0xf0001
    8000ee64:	0712                	slli	a4,a4,0x4
    8000ee66:	4785                	li	a5,1
    8000ee68:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ee6c:	178a                	slli	a5,a5,0x22
    8000ee6e:	8f75                	and	a4,a4,a3
    8000ee70:	10078793          	addi	a5,a5,256
    8000ee74:	4401                	li	s0,0
        excpt.triggered == true && 
        excpt.priv==PRIV_M
    );   


    TEST_END();
    8000ee76:	0001e597          	auipc	a1,0x1e
    8000ee7a:	47a58593          	addi	a1,a1,1146 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mode when medeleg=0",         
    8000ee7e:	00f71763          	bne	a4,a5,8000ee8c <priv_change_7+0xee>
    8000ee82:	4405                	li	s0,1
    TEST_END();
    8000ee84:	0001e597          	auipc	a1,0x1e
    8000ee88:	45c58593          	addi	a1,a1,1116 # 8002d2e0 <__func__.0+0x2c0>
    8000ee8c:	0001e517          	auipc	a0,0x1e
    8000ee90:	50c50513          	addi	a0,a0,1292 # 8002d398 <__func__.0+0x378>
    8000ee94:	7271b0ef          	jal	8002adba <printf>
    8000ee98:	4511                	li	a0,4
    8000ee9a:	fd5f10ef          	jal	80000e6e <goto_priv>
    8000ee9e:	8edf20ef          	jal	8000178a <reset_state>
}
    8000eea2:	60a2                	ld	ra,8(sp)
    8000eea4:	8522                	mv	a0,s0
    8000eea6:	6402                	ld	s0,0(sp)
    8000eea8:	0141                	addi	sp,sp,16
    8000eeaa:	8082                	ret

000000008000eeac <priv_change_8>:

bool priv_change_8(){
    8000eeac:	1141                	addi	sp,sp,-16
    
    TEST_START();
    8000eeae:	0001d597          	auipc	a1,0x1d
    8000eeb2:	a9258593          	addi	a1,a1,-1390 # 8002b940 <__func__.8>
    8000eeb6:	0001e517          	auipc	a0,0x1e
    8000eeba:	44a50513          	addi	a0,a0,1098 # 8002d300 <__func__.0+0x2e0>
bool priv_change_8(){
    8000eebe:	e406                	sd	ra,8(sp)
    8000eec0:	e022                	sd	s0,0(sp)
    TEST_START();
    8000eec2:	6f91b0ef          	jal	8002adba <printf>
    8000eec6:	4529                	li	a0,10
    8000eec8:	3e11a0ef          	jal	80029aa8 <putchar>


    //V=1，VU模式下发生异常，关闭代理，切换到M态处理异常，异常结束执行mret恢复到VU态
    goto_priv(PRIV_M);
    8000eecc:	4511                	li	a0,4
    8000eece:	fa1f10ef          	jal	80000e6e <goto_priv>
    reset_state();
    8000eed2:	8b9f20ef          	jal	8000178a <reset_state>
    CSRW(medeleg,0);
    8000eed6:	30205073          	csrwi	medeleg,0
    CSRW(mideleg,0);     
    8000eeda:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8000eede:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000eee2:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_VU);     
    8000eee6:	4501                	li	a0,0
    8000eee8:	f87f10ef          	jal	80000e6e <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000eeec:	e87f10ef          	jal	80000d72 <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000eef0:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000eef4:	08200593          	li	a1,130
    8000eef8:	00021617          	auipc	a2,0x21
    8000eefc:	13060613          	addi	a2,a2,304 # 80030028 <__func__.0+0x3008>
    8000ef00:	0001e517          	auipc	a0,0x1e
    8000ef04:	41850513          	addi	a0,a0,1048 # 8002d318 <__func__.0+0x2f8>
    8000ef08:	6b31b0ef          	jal	8002adba <printf>
    8000ef0c:	00042417          	auipc	s0,0x42
    8000ef10:	10440413          	addi	s0,s0,260 # 80051010 <excpt>
    8000ef14:	6014                	ld	a3,0(s0)
    8000ef16:	f0001737          	lui	a4,0xf0001
    8000ef1a:	0712                	slli	a4,a4,0x4
    8000ef1c:	4785                	li	a5,1
    8000ef1e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef22:	178a                	slli	a5,a5,0x22
    8000ef24:	8f75                	and	a4,a4,a3
    8000ef26:	10078793          	addi	a5,a5,256
    8000ef2a:	0001e597          	auipc	a1,0x1e
    8000ef2e:	3c658593          	addi	a1,a1,966 # 8002d2f0 <__func__.0+0x2d0>
    8000ef32:	08f70963          	beq	a4,a5,8000efc4 <priv_change_8+0x118>
    8000ef36:	0001e517          	auipc	a0,0x1e
    8000ef3a:	3fa50513          	addi	a0,a0,1018 # 8002d330 <__func__.0+0x310>
    8000ef3e:	67d1b0ef          	jal	8002adba <printf>
    8000ef42:	00042797          	auipc	a5,0x42
    8000ef46:	0cf7c783          	lbu	a5,207(a5) # 80051011 <excpt+0x1>
    8000ef4a:	cb81                	beqz	a5,8000ef5a <priv_change_8+0xae>
    8000ef4c:	00042717          	auipc	a4,0x42
    8000ef50:	0c872703          	lw	a4,200(a4) # 80051014 <excpt+0x4>
    8000ef54:	4791                	li	a5,4
    8000ef56:	06f70163          	beq	a4,a5,8000efb8 <priv_change_8+0x10c>
    8000ef5a:	0001e517          	auipc	a0,0x1e
    8000ef5e:	3de50513          	addi	a0,a0,990 # 8002d338 <__func__.0+0x318>
    8000ef62:	6591b0ef          	jal	8002adba <printf>
    8000ef66:	02900513          	li	a0,41
    8000ef6a:	33f1a0ef          	jal	80029aa8 <putchar>
    8000ef6e:	4529                	li	a0,10
    8000ef70:	3391a0ef          	jal	80029aa8 <putchar>
    8000ef74:	6014                	ld	a3,0(s0)
    8000ef76:	f0001737          	lui	a4,0xf0001
    8000ef7a:	0712                	slli	a4,a4,0x4
    8000ef7c:	4785                	li	a5,1
    8000ef7e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000ef82:	178a                	slli	a5,a5,0x22
    8000ef84:	8f75                	and	a4,a4,a3
    8000ef86:	10078793          	addi	a5,a5,256
    8000ef8a:	4401                	li	s0,0
        curr_priv == PRIV_VU
    );



    TEST_END();
    8000ef8c:	0001e597          	auipc	a1,0x1e
    8000ef90:	36458593          	addi	a1,a1,868 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000ef94:	04f70663          	beq	a4,a5,8000efe0 <priv_change_8+0x134>
    TEST_END();
    8000ef98:	0001e517          	auipc	a0,0x1e
    8000ef9c:	40050513          	addi	a0,a0,1024 # 8002d398 <__func__.0+0x378>
    8000efa0:	61b1b0ef          	jal	8002adba <printf>
    8000efa4:	4511                	li	a0,4
    8000efa6:	ec9f10ef          	jal	80000e6e <goto_priv>
    8000efaa:	fe0f20ef          	jal	8000178a <reset_state>
}
    8000efae:	60a2                	ld	ra,8(sp)
    8000efb0:	8522                	mv	a0,s0
    8000efb2:	6402                	ld	s0,0(sp)
    8000efb4:	0141                	addi	sp,sp,16
    8000efb6:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to m mod and sret to vu mod when medeleg/mideleg==0 and hedeleg/hideleg==0",         
    8000efb8:	0002c797          	auipc	a5,0x2c
    8000efbc:	91c7a783          	lw	a5,-1764(a5) # 8003a8d4 <curr_priv>
    8000efc0:	d7dd                	beqz	a5,8000ef6e <priv_change_8+0xc2>
    8000efc2:	bf61                	j	8000ef5a <priv_change_8+0xae>
    8000efc4:	0002c797          	auipc	a5,0x2c
    8000efc8:	9107a783          	lw	a5,-1776(a5) # 8003a8d4 <curr_priv>
    8000efcc:	0001e597          	auipc	a1,0x1e
    8000efd0:	31458593          	addi	a1,a1,788 # 8002d2e0 <__func__.0+0x2c0>
    8000efd4:	d3ad                	beqz	a5,8000ef36 <priv_change_8+0x8a>
    8000efd6:	0001e597          	auipc	a1,0x1e
    8000efda:	31a58593          	addi	a1,a1,794 # 8002d2f0 <__func__.0+0x2d0>
    8000efde:	bfa1                	j	8000ef36 <priv_change_8+0x8a>
    8000efe0:	0002c797          	auipc	a5,0x2c
    8000efe4:	8f47a783          	lw	a5,-1804(a5) # 8003a8d4 <curr_priv>
    8000efe8:	fbc5                	bnez	a5,8000ef98 <priv_change_8+0xec>
    8000efea:	4405                	li	s0,1
    TEST_END();
    8000efec:	0001e597          	auipc	a1,0x1e
    8000eff0:	2f458593          	addi	a1,a1,756 # 8002d2e0 <__func__.0+0x2c0>
    8000eff4:	b755                	j	8000ef98 <priv_change_8+0xec>

000000008000eff6 <priv_change_9>:
    /*
    当异常代理到了hs模式，那么处理的时候就会用hshandler处理。
    当想去m模式，会ecall，进入异常，但是去m模式需要mhandler才能过去，在hs模式下去处理这类异常是不行的，可是由于开启了异常代理，然后就一直循环执行hshandler出错。
    因此在开启异常代理后，不能在后面执行goto_priv(PRIV_M);否则会无限循环出错
    */
bool priv_change_9(){
    8000eff6:	1141                	addi	sp,sp,-16
    TEST_START();
    8000eff8:	0001d597          	auipc	a1,0x1d
    8000effc:	95858593          	addi	a1,a1,-1704 # 8002b950 <__func__.7>
    8000f000:	0001e517          	auipc	a0,0x1e
    8000f004:	30050513          	addi	a0,a0,768 # 8002d300 <__func__.0+0x2e0>
bool priv_change_9(){
    8000f008:	e406                	sd	ra,8(sp)
    8000f00a:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f00c:	5af1b0ef          	jal	8002adba <printf>
    8000f010:	4529                	li	a0,10
    8000f012:	2971a0ef          	jal	80029aa8 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f016:	4511                	li	a0,4
    8000f018:	e57f10ef          	jal	80000e6e <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f01c:	57fd                	li	a5,-1
    8000f01e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f022:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f026:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f02a:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VU);     
    8000f02e:	4501                	li	a0,0
    8000f030:	e3ff10ef          	jal	80000e6e <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f034:	d3ff10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f038:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f03c:	08200593          	li	a1,130
    8000f040:	00021617          	auipc	a2,0x21
    8000f044:	05860613          	addi	a2,a2,88 # 80030098 <__func__.0+0x3078>
    8000f048:	0001e517          	auipc	a0,0x1e
    8000f04c:	2d050513          	addi	a0,a0,720 # 8002d318 <__func__.0+0x2f8>
    8000f050:	56b1b0ef          	jal	8002adba <printf>
    8000f054:	00042417          	auipc	s0,0x42
    8000f058:	fbc40413          	addi	s0,s0,-68 # 80051010 <excpt>
    8000f05c:	6014                	ld	a3,0(s0)
    8000f05e:	f0001737          	lui	a4,0xf0001
    8000f062:	0712                	slli	a4,a4,0x4
    8000f064:	4785                	li	a5,1
    8000f066:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f06a:	1786                	slli	a5,a5,0x21
    8000f06c:	8f75                	and	a4,a4,a3
    8000f06e:	10078793          	addi	a5,a5,256
    8000f072:	0001e597          	auipc	a1,0x1e
    8000f076:	27e58593          	addi	a1,a1,638 # 8002d2f0 <__func__.0+0x2d0>
    8000f07a:	08f70263          	beq	a4,a5,8000f0fe <priv_change_9+0x108>
    8000f07e:	0001e517          	auipc	a0,0x1e
    8000f082:	2b250513          	addi	a0,a0,690 # 8002d330 <__func__.0+0x310>
    8000f086:	5351b0ef          	jal	8002adba <printf>
    8000f08a:	00042797          	auipc	a5,0x42
    8000f08e:	f877c783          	lbu	a5,-121(a5) # 80051011 <excpt+0x1>
    8000f092:	cb81                	beqz	a5,8000f0a2 <priv_change_9+0xac>
    8000f094:	00042717          	auipc	a4,0x42
    8000f098:	f8072703          	lw	a4,-128(a4) # 80051014 <excpt+0x4>
    8000f09c:	4789                	li	a5,2
    8000f09e:	04f70a63          	beq	a4,a5,8000f0f2 <priv_change_9+0xfc>
    8000f0a2:	0001e517          	auipc	a0,0x1e
    8000f0a6:	29650513          	addi	a0,a0,662 # 8002d338 <__func__.0+0x318>
    8000f0aa:	5111b0ef          	jal	8002adba <printf>
    8000f0ae:	02900513          	li	a0,41
    8000f0b2:	1f71a0ef          	jal	80029aa8 <putchar>
    8000f0b6:	4529                	li	a0,10
    8000f0b8:	1f11a0ef          	jal	80029aa8 <putchar>
    8000f0bc:	6014                	ld	a3,0(s0)
    8000f0be:	f0001737          	lui	a4,0xf0001
    8000f0c2:	0712                	slli	a4,a4,0x4
    8000f0c4:	4785                	li	a5,1
    8000f0c6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f0ca:	1786                	slli	a5,a5,0x21
    8000f0cc:	8f75                	and	a4,a4,a3
    8000f0ce:	10078793          	addi	a5,a5,256
        curr_priv == PRIV_VU
    );


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f0d2:	0001e597          	auipc	a1,0x1e
    8000f0d6:	21e58593          	addi	a1,a1,542 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f0da:	04f70063          	beq	a4,a5,8000f11a <priv_change_9+0x124>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f0de:	0001e517          	auipc	a0,0x1e
    8000f0e2:	2ba50513          	addi	a0,a0,698 # 8002d398 <__func__.0+0x378>
    8000f0e6:	4d51b0ef          	jal	8002adba <printf>
    }
}
    8000f0ea:	60a2                	ld	ra,8(sp)
    8000f0ec:	6402                	ld	s0,0(sp)
    8000f0ee:	0141                	addi	sp,sp,16
    8000f0f0:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f0f2:	0002b797          	auipc	a5,0x2b
    8000f0f6:	7e27a783          	lw	a5,2018(a5) # 8003a8d4 <curr_priv>
    8000f0fa:	dfd5                	beqz	a5,8000f0b6 <priv_change_9+0xc0>
    8000f0fc:	b75d                	j	8000f0a2 <priv_change_9+0xac>
    8000f0fe:	0002b797          	auipc	a5,0x2b
    8000f102:	7d67a783          	lw	a5,2006(a5) # 8003a8d4 <curr_priv>
    8000f106:	0001e597          	auipc	a1,0x1e
    8000f10a:	1da58593          	addi	a1,a1,474 # 8002d2e0 <__func__.0+0x2c0>
    8000f10e:	dba5                	beqz	a5,8000f07e <priv_change_9+0x88>
    8000f110:	0001e597          	auipc	a1,0x1e
    8000f114:	1e058593          	addi	a1,a1,480 # 8002d2f0 <__func__.0+0x2d0>
    8000f118:	b79d                	j	8000f07e <priv_change_9+0x88>
    8000f11a:	0002b797          	auipc	a5,0x2b
    8000f11e:	7ba7a783          	lw	a5,1978(a5) # 8003a8d4 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f122:	0001e597          	auipc	a1,0x1e
    8000f126:	1be58593          	addi	a1,a1,446 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to vs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f12a:	dbd5                	beqz	a5,8000f0de <priv_change_9+0xe8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f12c:	0001e597          	auipc	a1,0x1e
    8000f130:	1c458593          	addi	a1,a1,452 # 8002d2f0 <__func__.0+0x2d0>
    8000f134:	0001e517          	auipc	a0,0x1e
    8000f138:	26450513          	addi	a0,a0,612 # 8002d398 <__func__.0+0x378>
    8000f13c:	47f1b0ef          	jal	8002adba <printf>
}
    8000f140:	60a2                	ld	ra,8(sp)
    8000f142:	6402                	ld	s0,0(sp)
    8000f144:	0141                	addi	sp,sp,16
    8000f146:	8082                	ret

000000008000f148 <priv_change_10>:


bool priv_change_10(){
    8000f148:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f14a:	0001d597          	auipc	a1,0x1d
    8000f14e:	81658593          	addi	a1,a1,-2026 # 8002b960 <__func__.6>
    8000f152:	0001e517          	auipc	a0,0x1e
    8000f156:	1ae50513          	addi	a0,a0,430 # 8002d300 <__func__.0+0x2e0>
bool priv_change_10(){
    8000f15a:	e406                	sd	ra,8(sp)
    8000f15c:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f15e:	45d1b0ef          	jal	8002adba <printf>
    8000f162:	4529                	li	a0,10
    8000f164:	1451a0ef          	jal	80029aa8 <putchar>


    //V=0，U模式下发生异常，打开代理medeleg/mideleg，切换到HS态处理异常，异常处理结束执行sret恢复到U态
    goto_priv(PRIV_M);
    8000f168:	4511                	li	a0,4
    8000f16a:	d05f10ef          	jal	80000e6e <goto_priv>
    reset_state();
    8000f16e:	e1cf20ef          	jal	8000178a <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f172:	57fd                	li	a5,-1
    8000f174:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f178:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f17c:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f180:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HU);     
    8000f184:	4505                	li	a0,1
    8000f186:	ce9f10ef          	jal	80000e6e <goto_priv>
    
    TEST_SETUP_EXCEPT();        
    8000f18a:	be9f10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f18e:	300027f3          	csrr	a5,mstatus

    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f192:	08200593          	li	a1,130
    8000f196:	00021617          	auipc	a2,0x21
    8000f19a:	f7260613          	addi	a2,a2,-142 # 80030108 <__func__.0+0x30e8>
    8000f19e:	0001e517          	auipc	a0,0x1e
    8000f1a2:	17a50513          	addi	a0,a0,378 # 8002d318 <__func__.0+0x2f8>
    8000f1a6:	4151b0ef          	jal	8002adba <printf>
    8000f1aa:	00042417          	auipc	s0,0x42
    8000f1ae:	e6640413          	addi	s0,s0,-410 # 80051010 <excpt>
    8000f1b2:	6014                	ld	a3,0(s0)
    8000f1b4:	f0001737          	lui	a4,0xf0001
    8000f1b8:	0712                	slli	a4,a4,0x4
    8000f1ba:	478d                	li	a5,3
    8000f1bc:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f1c0:	1782                	slli	a5,a5,0x20
    8000f1c2:	8f75                	and	a4,a4,a3
    8000f1c4:	10078793          	addi	a5,a5,256
    8000f1c8:	0001e597          	auipc	a1,0x1e
    8000f1cc:	12858593          	addi	a1,a1,296 # 8002d2f0 <__func__.0+0x2d0>
    8000f1d0:	08f70463          	beq	a4,a5,8000f258 <priv_change_10+0x110>
    8000f1d4:	0001e517          	auipc	a0,0x1e
    8000f1d8:	15c50513          	addi	a0,a0,348 # 8002d330 <__func__.0+0x310>
    8000f1dc:	3df1b0ef          	jal	8002adba <printf>
    8000f1e0:	00042797          	auipc	a5,0x42
    8000f1e4:	e317c783          	lbu	a5,-463(a5) # 80051011 <excpt+0x1>
    8000f1e8:	cb81                	beqz	a5,8000f1f8 <priv_change_10+0xb0>
    8000f1ea:	00042717          	auipc	a4,0x42
    8000f1ee:	e2a72703          	lw	a4,-470(a4) # 80051014 <excpt+0x4>
    8000f1f2:	478d                	li	a5,3
    8000f1f4:	04f70a63          	beq	a4,a5,8000f248 <priv_change_10+0x100>
    8000f1f8:	0001e517          	auipc	a0,0x1e
    8000f1fc:	14050513          	addi	a0,a0,320 # 8002d338 <__func__.0+0x318>
    8000f200:	3bb1b0ef          	jal	8002adba <printf>
    8000f204:	02900513          	li	a0,41
    8000f208:	0a11a0ef          	jal	80029aa8 <putchar>
    8000f20c:	4529                	li	a0,10
    8000f20e:	09b1a0ef          	jal	80029aa8 <putchar>
    8000f212:	6014                	ld	a3,0(s0)
    8000f214:	f0001737          	lui	a4,0xf0001
    8000f218:	0712                	slli	a4,a4,0x4
    8000f21a:	478d                	li	a5,3
    8000f21c:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f220:	1782                	slli	a5,a5,0x20
    8000f222:	8f75                	and	a4,a4,a3
    8000f224:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_HU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f228:	0001e597          	auipc	a1,0x1e
    8000f22c:	0c858593          	addi	a1,a1,200 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f230:	04f70463          	beq	a4,a5,8000f278 <priv_change_10+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f234:	0001e517          	auipc	a0,0x1e
    8000f238:	16450513          	addi	a0,a0,356 # 8002d398 <__func__.0+0x378>
    8000f23c:	37f1b0ef          	jal	8002adba <printf>
    }
}
    8000f240:	60a2                	ld	ra,8(sp)
    8000f242:	6402                	ld	s0,0(sp)
    8000f244:	0141                	addi	sp,sp,16
    8000f246:	8082                	ret
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f248:	0002b717          	auipc	a4,0x2b
    8000f24c:	68c72703          	lw	a4,1676(a4) # 8003a8d4 <curr_priv>
    8000f250:	4785                	li	a5,1
    8000f252:	faf713e3          	bne	a4,a5,8000f1f8 <priv_change_10+0xb0>
    8000f256:	bf5d                	j	8000f20c <priv_change_10+0xc4>
    8000f258:	0002b717          	auipc	a4,0x2b
    8000f25c:	67c72703          	lw	a4,1660(a4) # 8003a8d4 <curr_priv>
    8000f260:	4785                	li	a5,1
    8000f262:	0001e597          	auipc	a1,0x1e
    8000f266:	07e58593          	addi	a1,a1,126 # 8002d2e0 <__func__.0+0x2c0>
    8000f26a:	f6f705e3          	beq	a4,a5,8000f1d4 <priv_change_10+0x8c>
    8000f26e:	0001e597          	auipc	a1,0x1e
    8000f272:	08258593          	addi	a1,a1,130 # 8002d2f0 <__func__.0+0x2d0>
    8000f276:	bfb9                	j	8000f1d4 <priv_change_10+0x8c>
    8000f278:	0002b717          	auipc	a4,0x2b
    8000f27c:	65c72703          	lw	a4,1628(a4) # 8003a8d4 <curr_priv>
    8000f280:	4785                	li	a5,1
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f282:	0001e597          	auipc	a1,0x1e
    8000f286:	05e58593          	addi	a1,a1,94 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu trigger except that priv change to m mod and mret to hu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f28a:	faf705e3          	beq	a4,a5,8000f234 <priv_change_10+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f28e:	0001e597          	auipc	a1,0x1e
    8000f292:	06258593          	addi	a1,a1,98 # 8002d2f0 <__func__.0+0x2d0>
    8000f296:	0001e517          	auipc	a0,0x1e
    8000f29a:	10250513          	addi	a0,a0,258 # 8002d398 <__func__.0+0x378>
    8000f29e:	31d1b0ef          	jal	8002adba <printf>
}
    8000f2a2:	60a2                	ld	ra,8(sp)
    8000f2a4:	6402                	ld	s0,0(sp)
    8000f2a6:	0141                	addi	sp,sp,16
    8000f2a8:	8082                	ret

000000008000f2aa <priv_change_11>:


bool priv_change_11(){
    8000f2aa:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f2ac:	0001c597          	auipc	a1,0x1c
    8000f2b0:	6c458593          	addi	a1,a1,1732 # 8002b970 <__func__.5>
    8000f2b4:	0001e517          	auipc	a0,0x1e
    8000f2b8:	04c50513          	addi	a0,a0,76 # 8002d300 <__func__.0+0x2e0>
bool priv_change_11(){
    8000f2bc:	e406                	sd	ra,8(sp)
    8000f2be:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f2c0:	2fb1b0ef          	jal	8002adba <printf>
    8000f2c4:	4529                	li	a0,10
    8000f2c6:	7e21a0ef          	jal	80029aa8 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到VS态处理异常
    goto_priv(PRIV_M);
    8000f2ca:	4511                	li	a0,4
    8000f2cc:	ba3f10ef          	jal	80000e6e <goto_priv>
    reset_state();
    8000f2d0:	cbaf20ef          	jal	8000178a <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f2d4:	57fd                	li	a5,-1
    8000f2d6:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f2da:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f2de:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f2e2:	60279073          	csrw	hedeleg,a5

    goto_priv(PRIV_VS);    
    8000f2e6:	4509                	li	a0,2
    8000f2e8:	b87f10ef          	jal	80000e6e <goto_priv>
    

    TEST_SETUP_EXCEPT();        
    8000f2ec:	a87f10ef          	jal	80000d72 <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f2f0:	30205073          	csrwi	medeleg,0
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f2f4:	08200593          	li	a1,130
    8000f2f8:	00021617          	auipc	a2,0x21
    8000f2fc:	e8060613          	addi	a2,a2,-384 # 80030178 <__func__.0+0x3158>
    8000f300:	0001e517          	auipc	a0,0x1e
    8000f304:	01850513          	addi	a0,a0,24 # 8002d318 <__func__.0+0x2f8>
    8000f308:	2b31b0ef          	jal	8002adba <printf>
    8000f30c:	00042417          	auipc	s0,0x42
    8000f310:	d0440413          	addi	s0,s0,-764 # 80051010 <excpt>
    8000f314:	6014                	ld	a3,0(s0)
    8000f316:	f0001737          	lui	a4,0xf0001
    8000f31a:	0712                	slli	a4,a4,0x4
    8000f31c:	4785                	li	a5,1
    8000f31e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f322:	1786                	slli	a5,a5,0x21
    8000f324:	8f75                	and	a4,a4,a3
    8000f326:	10078793          	addi	a5,a5,256
    8000f32a:	0001e597          	auipc	a1,0x1e
    8000f32e:	fb658593          	addi	a1,a1,-74 # 8002d2e0 <__func__.0+0x2c0>
    8000f332:	00f70663          	beq	a4,a5,8000f33e <priv_change_11+0x94>
    8000f336:	0001e597          	auipc	a1,0x1e
    8000f33a:	fba58593          	addi	a1,a1,-70 # 8002d2f0 <__func__.0+0x2d0>
    8000f33e:	0001e517          	auipc	a0,0x1e
    8000f342:	ff250513          	addi	a0,a0,-14 # 8002d330 <__func__.0+0x310>
    8000f346:	2751b0ef          	jal	8002adba <printf>
    8000f34a:	00042797          	auipc	a5,0x42
    8000f34e:	cc77c783          	lbu	a5,-825(a5) # 80051011 <excpt+0x1>
    8000f352:	cb81                	beqz	a5,8000f362 <priv_change_11+0xb8>
    8000f354:	00042717          	auipc	a4,0x42
    8000f358:	cc072703          	lw	a4,-832(a4) # 80051014 <excpt+0x4>
    8000f35c:	4789                	li	a5,2
    8000f35e:	00f70c63          	beq	a4,a5,8000f376 <priv_change_11+0xcc>
    8000f362:	0001e517          	auipc	a0,0x1e
    8000f366:	fd650513          	addi	a0,a0,-42 # 8002d338 <__func__.0+0x318>
    8000f36a:	2511b0ef          	jal	8002adba <printf>
    8000f36e:	02900513          	li	a0,41
    8000f372:	7361a0ef          	jal	80029aa8 <putchar>
    8000f376:	4529                	li	a0,10
    8000f378:	7301a0ef          	jal	80029aa8 <putchar>
    8000f37c:	6014                	ld	a3,0(s0)
    8000f37e:	f0001737          	lui	a4,0xf0001
    8000f382:	0712                	slli	a4,a4,0x4
    8000f384:	4785                	li	a5,1
    8000f386:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f38a:	1786                	slli	a5,a5,0x21
    8000f38c:	8f75                	and	a4,a4,a3
    8000f38e:	10078793          	addi	a5,a5,256
        excpt.priv==PRIV_VS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f392:	0001e597          	auipc	a1,0x1e
    8000f396:	f5e58593          	addi	a1,a1,-162 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv no change  when medeleg/mideleg==1 and hedeleg/hideleg==1",         
    8000f39a:	00f71663          	bne	a4,a5,8000f3a6 <priv_change_11+0xfc>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f39e:	0001e597          	auipc	a1,0x1e
    8000f3a2:	f4258593          	addi	a1,a1,-190 # 8002d2e0 <__func__.0+0x2c0>
    8000f3a6:	0001e517          	auipc	a0,0x1e
    8000f3aa:	ff250513          	addi	a0,a0,-14 # 8002d398 <__func__.0+0x378>
    8000f3ae:	20d1b0ef          	jal	8002adba <printf>
    }
}
    8000f3b2:	60a2                	ld	ra,8(sp)
    8000f3b4:	6402                	ld	s0,0(sp)
    8000f3b6:	0141                	addi	sp,sp,16
    8000f3b8:	8082                	ret

000000008000f3ba <priv_change_12>:



bool priv_change_12(){
    8000f3ba:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f3bc:	0001c597          	auipc	a1,0x1c
    8000f3c0:	5c458593          	addi	a1,a1,1476 # 8002b980 <__func__.4>
    8000f3c4:	0001e517          	auipc	a0,0x1e
    8000f3c8:	f3c50513          	addi	a0,a0,-196 # 8002d300 <__func__.0+0x2e0>
bool priv_change_12(){
    8000f3cc:	e406                	sd	ra,8(sp)
    8000f3ce:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f3d0:	1eb1b0ef          	jal	8002adba <printf>
    8000f3d4:	4529                	li	a0,10
    8000f3d6:	6d21a0ef          	jal	80029aa8 <putchar>



    //V=0，HS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常

    goto_priv(PRIV_M);     
    8000f3da:	4511                	li	a0,4
    8000f3dc:	a93f10ef          	jal	80000e6e <goto_priv>
    CSRW(medeleg,(uint64_t)-1);
    8000f3e0:	57fd                	li	a5,-1
    8000f3e2:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f3e6:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f3ea:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f3ee:	60205073          	csrwi	hedeleg,0

    goto_priv(PRIV_HS);
    8000f3f2:	450d                	li	a0,3
    8000f3f4:	a7bf10ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();        
    8000f3f8:	97bf10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MSTATUS);
    8000f3fc:	300027f3          	csrr	a5,mstatus
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f400:	08200593          	li	a1,130
    8000f404:	00021617          	auipc	a2,0x21
    8000f408:	dcc60613          	addi	a2,a2,-564 # 800301d0 <__func__.0+0x31b0>
    8000f40c:	0001e517          	auipc	a0,0x1e
    8000f410:	f0c50513          	addi	a0,a0,-244 # 8002d318 <__func__.0+0x2f8>
    8000f414:	1a71b0ef          	jal	8002adba <printf>
    8000f418:	00042417          	auipc	s0,0x42
    8000f41c:	bf840413          	addi	s0,s0,-1032 # 80051010 <excpt>
    8000f420:	6014                	ld	a3,0(s0)
    8000f422:	f0001737          	lui	a4,0xf0001
    8000f426:	0712                	slli	a4,a4,0x4
    8000f428:	478d                	li	a5,3
    8000f42a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f42e:	1782                	slli	a5,a5,0x20
    8000f430:	8f75                	and	a4,a4,a3
    8000f432:	10078793          	addi	a5,a5,256
    8000f436:	0001e597          	auipc	a1,0x1e
    8000f43a:	eaa58593          	addi	a1,a1,-342 # 8002d2e0 <__func__.0+0x2c0>
    8000f43e:	00f70663          	beq	a4,a5,8000f44a <priv_change_12+0x90>
    8000f442:	0001e597          	auipc	a1,0x1e
    8000f446:	eae58593          	addi	a1,a1,-338 # 8002d2f0 <__func__.0+0x2d0>
    8000f44a:	0001e517          	auipc	a0,0x1e
    8000f44e:	ee650513          	addi	a0,a0,-282 # 8002d330 <__func__.0+0x310>
    8000f452:	1691b0ef          	jal	8002adba <printf>
    8000f456:	00042797          	auipc	a5,0x42
    8000f45a:	bbb7c783          	lbu	a5,-1093(a5) # 80051011 <excpt+0x1>
    8000f45e:	cb81                	beqz	a5,8000f46e <priv_change_12+0xb4>
    8000f460:	00042717          	auipc	a4,0x42
    8000f464:	bb472703          	lw	a4,-1100(a4) # 80051014 <excpt+0x4>
    8000f468:	478d                	li	a5,3
    8000f46a:	00f70c63          	beq	a4,a5,8000f482 <priv_change_12+0xc8>
    8000f46e:	0001e517          	auipc	a0,0x1e
    8000f472:	eca50513          	addi	a0,a0,-310 # 8002d338 <__func__.0+0x318>
    8000f476:	1451b0ef          	jal	8002adba <printf>
    8000f47a:	02900513          	li	a0,41
    8000f47e:	62a1a0ef          	jal	80029aa8 <putchar>
    8000f482:	4529                	li	a0,10
    8000f484:	6241a0ef          	jal	80029aa8 <putchar>
    8000f488:	6014                	ld	a3,0(s0)
    8000f48a:	f0001737          	lui	a4,0xf0001
    8000f48e:	0712                	slli	a4,a4,0x4
    8000f490:	478d                	li	a5,3
    8000f492:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f496:	1782                	slli	a5,a5,0x20
    8000f498:	8f75                	and	a4,a4,a3
    8000f49a:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS
    ); 


    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f49e:	0001e597          	auipc	a1,0x1e
    8000f4a2:	e5258593          	addi	a1,a1,-430 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs trigger except that priv no change when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f4a6:	00f71663          	bne	a4,a5,8000f4b2 <priv_change_12+0xf8>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f4aa:	0001e597          	auipc	a1,0x1e
    8000f4ae:	e3658593          	addi	a1,a1,-458 # 8002d2e0 <__func__.0+0x2c0>
    8000f4b2:	0001e517          	auipc	a0,0x1e
    8000f4b6:	ee650513          	addi	a0,a0,-282 # 8002d398 <__func__.0+0x378>
    8000f4ba:	1011b0ef          	jal	8002adba <printf>
    }

}
    8000f4be:	60a2                	ld	ra,8(sp)
    8000f4c0:	6402                	ld	s0,0(sp)
    8000f4c2:	0141                	addi	sp,sp,16
    8000f4c4:	8082                	ret

000000008000f4c6 <priv_change_13>:

bool priv_change_13(){
    8000f4c6:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f4c8:	0001c597          	auipc	a1,0x1c
    8000f4cc:	4c858593          	addi	a1,a1,1224 # 8002b990 <__func__.3>
    8000f4d0:	0001e517          	auipc	a0,0x1e
    8000f4d4:	e3050513          	addi	a0,a0,-464 # 8002d300 <__func__.0+0x2e0>
bool priv_change_13(){
    8000f4d8:	e406                	sd	ra,8(sp)
    8000f4da:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f4dc:	0df1b0ef          	jal	8002adba <printf>
    8000f4e0:	4529                	li	a0,10
    8000f4e2:	5c61a0ef          	jal	80029aa8 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f4e6:	4511                	li	a0,4
    8000f4e8:	987f10ef          	jal	80000e6e <goto_priv>
    reset_state();
    8000f4ec:	a9ef20ef          	jal	8000178a <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f4f0:	57fd                	li	a5,-1
    8000f4f2:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f4f6:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f4fa:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f4fe:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();  
    8000f502:	871f10ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_VU);      
    8000f506:	4501                	li	a0,0
    8000f508:	967f10ef          	jal	80000e6e <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f50c:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f510:	08200593          	li	a1,130
    8000f514:	00021617          	auipc	a2,0x21
    8000f518:	d1460613          	addi	a2,a2,-748 # 80030228 <__func__.0+0x3208>
    8000f51c:	0001e517          	auipc	a0,0x1e
    8000f520:	dfc50513          	addi	a0,a0,-516 # 8002d318 <__func__.0+0x2f8>
    8000f524:	0971b0ef          	jal	8002adba <printf>
    8000f528:	00042417          	auipc	s0,0x42
    8000f52c:	ae840413          	addi	s0,s0,-1304 # 80051010 <excpt>
    8000f530:	6014                	ld	a3,0(s0)
    8000f532:	f0001737          	lui	a4,0xf0001
    8000f536:	0712                	slli	a4,a4,0x4
    8000f538:	478d                	li	a5,3
    8000f53a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f53e:	1782                	slli	a5,a5,0x20
    8000f540:	8f75                	and	a4,a4,a3
    8000f542:	10078793          	addi	a5,a5,256
    8000f546:	0001e597          	auipc	a1,0x1e
    8000f54a:	daa58593          	addi	a1,a1,-598 # 8002d2f0 <__func__.0+0x2d0>
    8000f54e:	08f70263          	beq	a4,a5,8000f5d2 <priv_change_13+0x10c>
    8000f552:	0001e517          	auipc	a0,0x1e
    8000f556:	dde50513          	addi	a0,a0,-546 # 8002d330 <__func__.0+0x310>
    8000f55a:	0611b0ef          	jal	8002adba <printf>
    8000f55e:	00042797          	auipc	a5,0x42
    8000f562:	ab37c783          	lbu	a5,-1357(a5) # 80051011 <excpt+0x1>
    8000f566:	cb81                	beqz	a5,8000f576 <priv_change_13+0xb0>
    8000f568:	00042717          	auipc	a4,0x42
    8000f56c:	aac72703          	lw	a4,-1364(a4) # 80051014 <excpt+0x4>
    8000f570:	478d                	li	a5,3
    8000f572:	04f70a63          	beq	a4,a5,8000f5c6 <priv_change_13+0x100>
    8000f576:	0001e517          	auipc	a0,0x1e
    8000f57a:	dc250513          	addi	a0,a0,-574 # 8002d338 <__func__.0+0x318>
    8000f57e:	03d1b0ef          	jal	8002adba <printf>
    8000f582:	02900513          	li	a0,41
    8000f586:	5221a0ef          	jal	80029aa8 <putchar>
    8000f58a:	4529                	li	a0,10
    8000f58c:	51c1a0ef          	jal	80029aa8 <putchar>
    8000f590:	6014                	ld	a3,0(s0)
    8000f592:	f0001737          	lui	a4,0xf0001
    8000f596:	0712                	slli	a4,a4,0x4
    8000f598:	478d                	li	a5,3
    8000f59a:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f59e:	1782                	slli	a5,a5,0x20
    8000f5a0:	8f75                	and	a4,a4,a3
    8000f5a2:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f5a6:	0001e597          	auipc	a1,0x1e
    8000f5aa:	d4a58593          	addi	a1,a1,-694 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f5ae:	04f70063          	beq	a4,a5,8000f5ee <priv_change_13+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f5b2:	0001e517          	auipc	a0,0x1e
    8000f5b6:	de650513          	addi	a0,a0,-538 # 8002d398 <__func__.0+0x378>
    8000f5ba:	0011b0ef          	jal	8002adba <printf>
    }
}
    8000f5be:	60a2                	ld	ra,8(sp)
    8000f5c0:	6402                	ld	s0,0(sp)
    8000f5c2:	0141                	addi	sp,sp,16
    8000f5c4:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f5c6:	0002b797          	auipc	a5,0x2b
    8000f5ca:	30e7a783          	lw	a5,782(a5) # 8003a8d4 <curr_priv>
    8000f5ce:	dfd5                	beqz	a5,8000f58a <priv_change_13+0xc4>
    8000f5d0:	b75d                	j	8000f576 <priv_change_13+0xb0>
    8000f5d2:	0002b797          	auipc	a5,0x2b
    8000f5d6:	3027a783          	lw	a5,770(a5) # 8003a8d4 <curr_priv>
    8000f5da:	0001e597          	auipc	a1,0x1e
    8000f5de:	d0658593          	addi	a1,a1,-762 # 8002d2e0 <__func__.0+0x2c0>
    8000f5e2:	dba5                	beqz	a5,8000f552 <priv_change_13+0x8c>
    8000f5e4:	0001e597          	auipc	a1,0x1e
    8000f5e8:	d0c58593          	addi	a1,a1,-756 # 8002d2f0 <__func__.0+0x2d0>
    8000f5ec:	b79d                	j	8000f552 <priv_change_13+0x8c>
    8000f5ee:	0002b797          	auipc	a5,0x2b
    8000f5f2:	2e67a783          	lw	a5,742(a5) # 8003a8d4 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f5f6:	0001e597          	auipc	a1,0x1e
    8000f5fa:	cea58593          	addi	a1,a1,-790 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to hs mod and sret to vu mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f5fe:	dbd5                	beqz	a5,8000f5b2 <priv_change_13+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f600:	0001e597          	auipc	a1,0x1e
    8000f604:	cf058593          	addi	a1,a1,-784 # 8002d2f0 <__func__.0+0x2d0>
    8000f608:	0001e517          	auipc	a0,0x1e
    8000f60c:	d9050513          	addi	a0,a0,-624 # 8002d398 <__func__.0+0x378>
    8000f610:	7aa1b0ef          	jal	8002adba <printf>
}
    8000f614:	60a2                	ld	ra,8(sp)
    8000f616:	6402                	ld	s0,0(sp)
    8000f618:	0141                	addi	sp,sp,16
    8000f61a:	8082                	ret

000000008000f61c <priv_change_14>:

bool priv_change_14(){
    8000f61c:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f61e:	0001c597          	auipc	a1,0x1c
    8000f622:	38258593          	addi	a1,a1,898 # 8002b9a0 <__func__.2>
    8000f626:	0001e517          	auipc	a0,0x1e
    8000f62a:	cda50513          	addi	a0,a0,-806 # 8002d300 <__func__.0+0x2e0>
bool priv_change_14(){
    8000f62e:	e406                	sd	ra,8(sp)
    8000f630:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f632:	7881b0ef          	jal	8002adba <printf>
    8000f636:	4529                	li	a0,10
    8000f638:	4701a0ef          	jal	80029aa8 <putchar>

    //V=1，VU模式下发生异常，打开代理medeleg/mideleg，关闭理hedeleg/hideleg，切换到HS态处理异常，异常处理结束恢复执行sret到VU态
    goto_priv(PRIV_M);
    8000f63c:	4511                	li	a0,4
    8000f63e:	831f10ef          	jal	80000e6e <goto_priv>
    reset_state();
    8000f642:	948f20ef          	jal	8000178a <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f646:	57fd                	li	a5,-1
    8000f648:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f64c:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f650:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f654:	60205073          	csrwi	hedeleg,0
    
    goto_priv(PRIV_VU);     
    8000f658:	4501                	li	a0,0
    8000f65a:	815f10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();        
    8000f65e:	f14f10ef          	jal	80000d72 <test_setup_except_function>
    CSRW(medeleg, 0); 
    8000f662:	30205073          	csrwi	medeleg,0

    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f666:	08200593          	li	a1,130
    8000f66a:	00021617          	auipc	a2,0x21
    8000f66e:	c2e60613          	addi	a2,a2,-978 # 80030298 <__func__.0+0x3278>
    8000f672:	0001e517          	auipc	a0,0x1e
    8000f676:	ca650513          	addi	a0,a0,-858 # 8002d318 <__func__.0+0x2f8>
    8000f67a:	7401b0ef          	jal	8002adba <printf>
    8000f67e:	00042417          	auipc	s0,0x42
    8000f682:	99240413          	addi	s0,s0,-1646 # 80051010 <excpt>
    8000f686:	6014                	ld	a3,0(s0)
    8000f688:	f0001737          	lui	a4,0xf0001
    8000f68c:	0712                	slli	a4,a4,0x4
    8000f68e:	478d                	li	a5,3
    8000f690:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f694:	1782                	slli	a5,a5,0x20
    8000f696:	8f75                	and	a4,a4,a3
    8000f698:	10078793          	addi	a5,a5,256
    8000f69c:	0001e597          	auipc	a1,0x1e
    8000f6a0:	c5458593          	addi	a1,a1,-940 # 8002d2f0 <__func__.0+0x2d0>
    8000f6a4:	08f70263          	beq	a4,a5,8000f728 <priv_change_14+0x10c>
    8000f6a8:	0001e517          	auipc	a0,0x1e
    8000f6ac:	c8850513          	addi	a0,a0,-888 # 8002d330 <__func__.0+0x310>
    8000f6b0:	70a1b0ef          	jal	8002adba <printf>
    8000f6b4:	00042797          	auipc	a5,0x42
    8000f6b8:	95d7c783          	lbu	a5,-1699(a5) # 80051011 <excpt+0x1>
    8000f6bc:	cb81                	beqz	a5,8000f6cc <priv_change_14+0xb0>
    8000f6be:	00042717          	auipc	a4,0x42
    8000f6c2:	95672703          	lw	a4,-1706(a4) # 80051014 <excpt+0x4>
    8000f6c6:	478d                	li	a5,3
    8000f6c8:	04f70a63          	beq	a4,a5,8000f71c <priv_change_14+0x100>
    8000f6cc:	0001e517          	auipc	a0,0x1e
    8000f6d0:	c6c50513          	addi	a0,a0,-916 # 8002d338 <__func__.0+0x318>
    8000f6d4:	6e61b0ef          	jal	8002adba <printf>
    8000f6d8:	02900513          	li	a0,41
    8000f6dc:	3cc1a0ef          	jal	80029aa8 <putchar>
    8000f6e0:	4529                	li	a0,10
    8000f6e2:	3c61a0ef          	jal	80029aa8 <putchar>
    8000f6e6:	6014                	ld	a3,0(s0)
    8000f6e8:	f0001737          	lui	a4,0xf0001
    8000f6ec:	0712                	slli	a4,a4,0x4
    8000f6ee:	478d                	li	a5,3
    8000f6f0:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f6f4:	1782                	slli	a5,a5,0x20
    8000f6f6:	8f75                	and	a4,a4,a3
    8000f6f8:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VU
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f6fc:	0001e597          	auipc	a1,0x1e
    8000f700:	bf458593          	addi	a1,a1,-1036 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f704:	04f70063          	beq	a4,a5,8000f744 <priv_change_14+0x128>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f708:	0001e517          	auipc	a0,0x1e
    8000f70c:	c9050513          	addi	a0,a0,-880 # 8002d398 <__func__.0+0x378>
    8000f710:	6aa1b0ef          	jal	8002adba <printf>
    }

}
    8000f714:	60a2                	ld	ra,8(sp)
    8000f716:	6402                	ld	s0,0(sp)
    8000f718:	0141                	addi	sp,sp,16
    8000f71a:	8082                	ret
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f71c:	0002b797          	auipc	a5,0x2b
    8000f720:	1b87a783          	lw	a5,440(a5) # 8003a8d4 <curr_priv>
    8000f724:	dfd5                	beqz	a5,8000f6e0 <priv_change_14+0xc4>
    8000f726:	b75d                	j	8000f6cc <priv_change_14+0xb0>
    8000f728:	0002b797          	auipc	a5,0x2b
    8000f72c:	1ac7a783          	lw	a5,428(a5) # 8003a8d4 <curr_priv>
    8000f730:	0001e597          	auipc	a1,0x1e
    8000f734:	bb058593          	addi	a1,a1,-1104 # 8002d2e0 <__func__.0+0x2c0>
    8000f738:	dba5                	beqz	a5,8000f6a8 <priv_change_14+0x8c>
    8000f73a:	0001e597          	auipc	a1,0x1e
    8000f73e:	bb658593          	addi	a1,a1,-1098 # 8002d2f0 <__func__.0+0x2d0>
    8000f742:	b79d                	j	8000f6a8 <priv_change_14+0x8c>
    8000f744:	0002b797          	auipc	a5,0x2b
    8000f748:	1907a783          	lw	a5,400(a5) # 8003a8d4 <curr_priv>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f74c:	0001e597          	auipc	a1,0x1e
    8000f750:	b9458593          	addi	a1,a1,-1132 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu trigger except that priv change to HS mod and sret to vu mode when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f754:	dbd5                	beqz	a5,8000f708 <priv_change_14+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f756:	0001e597          	auipc	a1,0x1e
    8000f75a:	b9a58593          	addi	a1,a1,-1126 # 8002d2f0 <__func__.0+0x2d0>
    8000f75e:	0001e517          	auipc	a0,0x1e
    8000f762:	c3a50513          	addi	a0,a0,-966 # 8002d398 <__func__.0+0x378>
    8000f766:	6541b0ef          	jal	8002adba <printf>
}
    8000f76a:	60a2                	ld	ra,8(sp)
    8000f76c:	6402                	ld	s0,0(sp)
    8000f76e:	0141                	addi	sp,sp,16
    8000f770:	8082                	ret

000000008000f772 <priv_change_15>:

bool priv_change_15(){
    8000f772:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f774:	0001c597          	auipc	a1,0x1c
    8000f778:	23c58593          	addi	a1,a1,572 # 8002b9b0 <__func__.1>
    8000f77c:	0001e517          	auipc	a0,0x1e
    8000f780:	b8450513          	addi	a0,a0,-1148 # 8002d300 <__func__.0+0x2e0>
bool priv_change_15(){
    8000f784:	e406                	sd	ra,8(sp)
    8000f786:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f788:	6321b0ef          	jal	8002adba <printf>
    8000f78c:	4529                	li	a0,10
    8000f78e:	31a1a0ef          	jal	80029aa8 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，关闭代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f792:	4511                	li	a0,4
    8000f794:	edaf10ef          	jal	80000e6e <goto_priv>
    reset_state();
    8000f798:	ff3f10ef          	jal	8000178a <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f79c:	57fd                	li	a5,-1
    8000f79e:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f7a2:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    8000f7a6:	60305073          	csrwi	hideleg,0
    CSRW(CSR_HEDELEG,0);   
    8000f7aa:	60205073          	csrwi	hedeleg,0

    TEST_SETUP_EXCEPT();    
    8000f7ae:	dc4f10ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f7b2:	4509                	li	a0,2
    8000f7b4:	ebaf10ef          	jal	80000e6e <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f7b8:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f7bc:	08200593          	li	a1,130
    8000f7c0:	00021617          	auipc	a2,0x21
    8000f7c4:	b4860613          	addi	a2,a2,-1208 # 80030308 <__func__.0+0x32e8>
    8000f7c8:	0001e517          	auipc	a0,0x1e
    8000f7cc:	b5050513          	addi	a0,a0,-1200 # 8002d318 <__func__.0+0x2f8>
    8000f7d0:	5ea1b0ef          	jal	8002adba <printf>
    8000f7d4:	00042417          	auipc	s0,0x42
    8000f7d8:	83c40413          	addi	s0,s0,-1988 # 80051010 <excpt>
    8000f7dc:	6014                	ld	a3,0(s0)
    8000f7de:	f0001737          	lui	a4,0xf0001
    8000f7e2:	0712                	slli	a4,a4,0x4
    8000f7e4:	478d                	li	a5,3
    8000f7e6:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f7ea:	1782                	slli	a5,a5,0x20
    8000f7ec:	8f75                	and	a4,a4,a3
    8000f7ee:	10078793          	addi	a5,a5,256
    8000f7f2:	0001e597          	auipc	a1,0x1e
    8000f7f6:	afe58593          	addi	a1,a1,-1282 # 8002d2f0 <__func__.0+0x2d0>
    8000f7fa:	08f70463          	beq	a4,a5,8000f882 <priv_change_15+0x110>
    8000f7fe:	0001e517          	auipc	a0,0x1e
    8000f802:	b3250513          	addi	a0,a0,-1230 # 8002d330 <__func__.0+0x310>
    8000f806:	5b41b0ef          	jal	8002adba <printf>
    8000f80a:	00042797          	auipc	a5,0x42
    8000f80e:	8077c783          	lbu	a5,-2041(a5) # 80051011 <excpt+0x1>
    8000f812:	cb81                	beqz	a5,8000f822 <priv_change_15+0xb0>
    8000f814:	00042717          	auipc	a4,0x42
    8000f818:	80072703          	lw	a4,-2048(a4) # 80051014 <excpt+0x4>
    8000f81c:	478d                	li	a5,3
    8000f81e:	04f70a63          	beq	a4,a5,8000f872 <priv_change_15+0x100>
    8000f822:	0001e517          	auipc	a0,0x1e
    8000f826:	b1650513          	addi	a0,a0,-1258 # 8002d338 <__func__.0+0x318>
    8000f82a:	5901b0ef          	jal	8002adba <printf>
    8000f82e:	02900513          	li	a0,41
    8000f832:	2761a0ef          	jal	80029aa8 <putchar>
    8000f836:	4529                	li	a0,10
    8000f838:	2701a0ef          	jal	80029aa8 <putchar>
    8000f83c:	6014                	ld	a3,0(s0)
    8000f83e:	f0001737          	lui	a4,0xf0001
    8000f842:	0712                	slli	a4,a4,0x4
    8000f844:	478d                	li	a5,3
    8000f846:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f84a:	1782                	slli	a5,a5,0x20
    8000f84c:	8f75                	and	a4,a4,a3
    8000f84e:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_HS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f852:	0001e597          	auipc	a1,0x1e
    8000f856:	a9e58593          	addi	a1,a1,-1378 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f85a:	04f70463          	beq	a4,a5,8000f8a2 <priv_change_15+0x130>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f85e:	0001e517          	auipc	a0,0x1e
    8000f862:	b3a50513          	addi	a0,a0,-1222 # 8002d398 <__func__.0+0x378>
    8000f866:	5541b0ef          	jal	8002adba <printf>
    }

}
    8000f86a:	60a2                	ld	ra,8(sp)
    8000f86c:	6402                	ld	s0,0(sp)
    8000f86e:	0141                	addi	sp,sp,16
    8000f870:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f872:	0002b717          	auipc	a4,0x2b
    8000f876:	06272703          	lw	a4,98(a4) # 8003a8d4 <curr_priv>
    8000f87a:	4789                	li	a5,2
    8000f87c:	faf713e3          	bne	a4,a5,8000f822 <priv_change_15+0xb0>
    8000f880:	bf5d                	j	8000f836 <priv_change_15+0xc4>
    8000f882:	0002b717          	auipc	a4,0x2b
    8000f886:	05272703          	lw	a4,82(a4) # 8003a8d4 <curr_priv>
    8000f88a:	4789                	li	a5,2
    8000f88c:	0001e597          	auipc	a1,0x1e
    8000f890:	a5458593          	addi	a1,a1,-1452 # 8002d2e0 <__func__.0+0x2c0>
    8000f894:	f6f705e3          	beq	a4,a5,8000f7fe <priv_change_15+0x8c>
    8000f898:	0001e597          	auipc	a1,0x1e
    8000f89c:	a5858593          	addi	a1,a1,-1448 # 8002d2f0 <__func__.0+0x2d0>
    8000f8a0:	bfb9                	j	8000f7fe <priv_change_15+0x8c>
    8000f8a2:	0002b717          	auipc	a4,0x2b
    8000f8a6:	03272703          	lw	a4,50(a4) # 8003a8d4 <curr_priv>
    8000f8aa:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f8ac:	0001e597          	auipc	a1,0x1e
    8000f8b0:	a3458593          	addi	a1,a1,-1484 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to hs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f8b4:	faf705e3          	beq	a4,a5,8000f85e <priv_change_15+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f8b8:	0001e597          	auipc	a1,0x1e
    8000f8bc:	a3858593          	addi	a1,a1,-1480 # 8002d2f0 <__func__.0+0x2d0>
    8000f8c0:	0001e517          	auipc	a0,0x1e
    8000f8c4:	ad850513          	addi	a0,a0,-1320 # 8002d398 <__func__.0+0x378>
    8000f8c8:	4f21b0ef          	jal	8002adba <printf>
}
    8000f8cc:	60a2                	ld	ra,8(sp)
    8000f8ce:	6402                	ld	s0,0(sp)
    8000f8d0:	0141                	addi	sp,sp,16
    8000f8d2:	8082                	ret

000000008000f8d4 <priv_change_16>:

bool priv_change_16(){
    8000f8d4:	1141                	addi	sp,sp,-16
    TEST_START();
    8000f8d6:	0001c597          	auipc	a1,0x1c
    8000f8da:	0ea58593          	addi	a1,a1,234 # 8002b9c0 <__func__.0>
    8000f8de:	0001e517          	auipc	a0,0x1e
    8000f8e2:	a2250513          	addi	a0,a0,-1502 # 8002d300 <__func__.0+0x2e0>
bool priv_change_16(){
    8000f8e6:	e406                	sd	ra,8(sp)
    8000f8e8:	e022                	sd	s0,0(sp)
    TEST_START();
    8000f8ea:	4d01b0ef          	jal	8002adba <printf>
    8000f8ee:	4529                	li	a0,10
    8000f8f0:	1b81a0ef          	jal	80029aa8 <putchar>

    //V=1，VS模式下发生异常，打开代理medeleg/mideleg，打开代理hedeleg/hideleg，切换到HS态处理异常，异常结束执行sret恢复到VU态
    goto_priv(PRIV_M);
    8000f8f4:	4511                	li	a0,4
    8000f8f6:	d78f10ef          	jal	80000e6e <goto_priv>
    reset_state();
    8000f8fa:	e91f10ef          	jal	8000178a <reset_state>
    CSRW(medeleg,(uint64_t)-1);
    8000f8fe:	57fd                	li	a5,-1
    8000f900:	30279073          	csrw	medeleg,a5
    CSRW(mideleg,(uint64_t)-1);     
    8000f904:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8000f908:	60379073          	csrw	hideleg,a5
    CSRW(CSR_HEDELEG,(uint64_t)-1);   
    8000f90c:	60279073          	csrw	hedeleg,a5

    TEST_SETUP_EXCEPT();    
    8000f910:	c62f10ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_VS);     
    8000f914:	4509                	li	a0,2
    8000f916:	d58f10ef          	jal	80000e6e <goto_priv>
    CSRR(CSR_MSTATUS);
    8000f91a:	300027f3          	csrr	a5,mstatus
    
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f91e:	08200593          	li	a1,130
    8000f922:	00021617          	auipc	a2,0x21
    8000f926:	a5660613          	addi	a2,a2,-1450 # 80030378 <__func__.0+0x3358>
    8000f92a:	0001e517          	auipc	a0,0x1e
    8000f92e:	9ee50513          	addi	a0,a0,-1554 # 8002d318 <__func__.0+0x2f8>
    8000f932:	4881b0ef          	jal	8002adba <printf>
    8000f936:	00041417          	auipc	s0,0x41
    8000f93a:	6da40413          	addi	s0,s0,1754 # 80051010 <excpt>
    8000f93e:	6014                	ld	a3,0(s0)
    8000f940:	f0001737          	lui	a4,0xf0001
    8000f944:	0712                	slli	a4,a4,0x4
    8000f946:	4785                	li	a5,1
    8000f948:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f94c:	1786                	slli	a5,a5,0x21
    8000f94e:	8f75                	and	a4,a4,a3
    8000f950:	10078793          	addi	a5,a5,256
    8000f954:	0001e597          	auipc	a1,0x1e
    8000f958:	99c58593          	addi	a1,a1,-1636 # 8002d2f0 <__func__.0+0x2d0>
    8000f95c:	08f70363          	beq	a4,a5,8000f9e2 <priv_change_16+0x10e>
    8000f960:	0001e517          	auipc	a0,0x1e
    8000f964:	9d050513          	addi	a0,a0,-1584 # 8002d330 <__func__.0+0x310>
    8000f968:	4521b0ef          	jal	8002adba <printf>
    8000f96c:	00041797          	auipc	a5,0x41
    8000f970:	6a57c783          	lbu	a5,1701(a5) # 80051011 <excpt+0x1>
    8000f974:	cb81                	beqz	a5,8000f984 <priv_change_16+0xb0>
    8000f976:	00041797          	auipc	a5,0x41
    8000f97a:	69e7a783          	lw	a5,1694(a5) # 80051014 <excpt+0x4>
    8000f97e:	4709                	li	a4,2
    8000f980:	04e78a63          	beq	a5,a4,8000f9d4 <priv_change_16+0x100>
    8000f984:	0001e517          	auipc	a0,0x1e
    8000f988:	9b450513          	addi	a0,a0,-1612 # 8002d338 <__func__.0+0x318>
    8000f98c:	42e1b0ef          	jal	8002adba <printf>
    8000f990:	02900513          	li	a0,41
    8000f994:	1141a0ef          	jal	80029aa8 <putchar>
    8000f998:	4529                	li	a0,10
    8000f99a:	10e1a0ef          	jal	80029aa8 <putchar>
    8000f99e:	6014                	ld	a3,0(s0)
    8000f9a0:	f0001737          	lui	a4,0xf0001
    8000f9a4:	0712                	slli	a4,a4,0x4
    8000f9a6:	4785                	li	a5,1
    8000f9a8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    8000f9ac:	1786                	slli	a5,a5,0x21
    8000f9ae:	8f75                	and	a4,a4,a3
    8000f9b0:	10078793          	addi	a5,a5,256
        excpt.priv == PRIV_VS &&
        curr_priv == PRIV_VS
    );

    if(LOG_LEVEL >= LOG_INFO && LOG_LEVEL < LOG_VERBOSE){\
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f9b4:	0001e597          	auipc	a1,0x1e
    8000f9b8:	93c58593          	addi	a1,a1,-1732 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f9bc:	04f70363          	beq	a4,a5,8000fa02 <priv_change_16+0x12e>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000f9c0:	0001e517          	auipc	a0,0x1e
    8000f9c4:	9d850513          	addi	a0,a0,-1576 # 8002d398 <__func__.0+0x378>
    8000f9c8:	3f21b0ef          	jal	8002adba <printf>
    }

}
    8000f9cc:	60a2                	ld	ra,8(sp)
    8000f9ce:	6402                	ld	s0,0(sp)
    8000f9d0:	0141                	addi	sp,sp,16
    8000f9d2:	8082                	ret
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000f9d4:	0002b717          	auipc	a4,0x2b
    8000f9d8:	f0072703          	lw	a4,-256(a4) # 8003a8d4 <curr_priv>
    8000f9dc:	faf714e3          	bne	a4,a5,8000f984 <priv_change_16+0xb0>
    8000f9e0:	bf65                	j	8000f998 <priv_change_16+0xc4>
    8000f9e2:	0002b717          	auipc	a4,0x2b
    8000f9e6:	ef272703          	lw	a4,-270(a4) # 8003a8d4 <curr_priv>
    8000f9ea:	4789                	li	a5,2
    8000f9ec:	0001e597          	auipc	a1,0x1e
    8000f9f0:	8f458593          	addi	a1,a1,-1804 # 8002d2e0 <__func__.0+0x2c0>
    8000f9f4:	f6f706e3          	beq	a4,a5,8000f960 <priv_change_16+0x8c>
    8000f9f8:	0001e597          	auipc	a1,0x1e
    8000f9fc:	8f858593          	addi	a1,a1,-1800 # 8002d2f0 <__func__.0+0x2d0>
    8000fa00:	b785                	j	8000f960 <priv_change_16+0x8c>
    8000fa02:	0002b717          	auipc	a4,0x2b
    8000fa06:	ed272703          	lw	a4,-302(a4) # 8003a8d4 <curr_priv>
    8000fa0a:	4789                	li	a5,2
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa0c:	0001e597          	auipc	a1,0x1e
    8000fa10:	8d458593          	addi	a1,a1,-1836 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs trigger except that priv change to vs mode and sret to vs mod when medeleg/mideleg==1 and hedeleg/hideleg==0",         
    8000fa14:	faf706e3          	beq	a4,a5,8000f9c0 <priv_change_16+0xec>
         printf("%s\n" CDFLT, (test_status) ? CGRN "PASSED" : CRED "FAILED");
    8000fa18:	0001e597          	auipc	a1,0x1e
    8000fa1c:	8d858593          	addi	a1,a1,-1832 # 8002d2f0 <__func__.0+0x2d0>
    8000fa20:	0001e517          	auipc	a0,0x1e
    8000fa24:	97850513          	addi	a0,a0,-1672 # 8002d398 <__func__.0+0x378>
    8000fa28:	3921b0ef          	jal	8002adba <printf>
}
    8000fa2c:	60a2                	ld	ra,8(sp)
    8000fa2e:	6402                	ld	s0,0(sp)
    8000fa30:	0141                	addi	sp,sp,16
    8000fa32:	8082                	ret

000000008000fa34 <addr_unaligned>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool addr_unaligned() {
    8000fa34:	1101                	addi	sp,sp,-32

    TEST_START();
    8000fa36:	0001c597          	auipc	a1,0x1c
    8000fa3a:	f9a58593          	addi	a1,a1,-102 # 8002b9d0 <__func__.1>
    8000fa3e:	0001e517          	auipc	a0,0x1e
    8000fa42:	8c250513          	addi	a0,a0,-1854 # 8002d300 <__func__.0+0x2e0>
bool addr_unaligned() {
    8000fa46:	ec06                	sd	ra,24(sp)
    8000fa48:	e822                	sd	s0,16(sp)
    8000fa4a:	e426                	sd	s1,8(sp)
    8000fa4c:	e04a                	sd	s2,0(sp)
    TEST_START();
    8000fa4e:	36c1b0ef          	jal	8002adba <printf>
    8000fa52:	4529                	li	a0,10
    8000fa54:	0541a0ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    8000fa58:	b1af10ef          	jal	80000d72 <test_setup_except_function>
    
    
    hspt_init();        
    8000fa5c:	b85f00ef          	jal	800005e0 <hspt_init>
    goto_priv(PRIV_HS);     
    8000fa60:	450d                	li	a0,3
    8000fa62:	c0cf10ef          	jal	80000e6e <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fa66:	b0cf10ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    8000fa6a:	001007b7          	lui	a5,0x100
    8000fa6e:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fa72:	07b2                	slli	a5,a5,0xc
    8000fa74:	0785                	addi	a5,a5,1
    8000fa76:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fa7a:	08200593          	li	a1,130
    8000fa7e:	00021617          	auipc	a2,0x21
    8000fa82:	96a60613          	addi	a2,a2,-1686 # 800303e8 <__func__.0+0x33c8>
    8000fa86:	0001e517          	auipc	a0,0x1e
    8000fa8a:	89250513          	addi	a0,a0,-1902 # 8002d318 <__func__.0+0x2f8>
    8000fa8e:	32c1b0ef          	jal	8002adba <printf>
    8000fa92:	00041797          	auipc	a5,0x41
    8000fa96:	57f7c783          	lbu	a5,1407(a5) # 80051011 <excpt+0x1>
    8000fa9a:	0001e597          	auipc	a1,0x1e
    8000fa9e:	84658593          	addi	a1,a1,-1978 # 8002d2e0 <__func__.0+0x2c0>
    8000faa2:	c789                	beqz	a5,8000faac <addr_unaligned+0x78>
    8000faa4:	0001e597          	auipc	a1,0x1e
    8000faa8:	84c58593          	addi	a1,a1,-1972 # 8002d2f0 <__func__.0+0x2d0>
    8000faac:	0001e517          	auipc	a0,0x1e
    8000fab0:	88450513          	addi	a0,a0,-1916 # 8002d330 <__func__.0+0x310>
    8000fab4:	3061b0ef          	jal	8002adba <printf>
    8000fab8:	00041797          	auipc	a5,0x41
    8000fabc:	5597c783          	lbu	a5,1369(a5) # 80051011 <excpt+0x1>
    8000fac0:	4c079c63          	bnez	a5,8000ff98 <addr_unaligned+0x564>
    8000fac4:	4529                	li	a0,10
    8000fac6:	7e3190ef          	jal	80029aa8 <putchar>
    8000faca:	00041497          	auipc	s1,0x41
    8000face:	5474c483          	lbu	s1,1351(s1) # 80051011 <excpt+0x1>
        excpt.triggered == false
    );

    //load half地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fad2:	aa0f10ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    8000fad6:	001007b7          	lui	a5,0x100
    8000fada:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fade:	07b2                	slli	a5,a5,0xc
    TEST_ASSERT("load byte address is not aligned successful",         
    8000fae0:	00041917          	auipc	s2,0x41
    8000fae4:	53090913          	addi	s2,s2,1328 # 80051010 <excpt>
    8000fae8:	0785                	addi	a5,a5,1
    8000faea:	00079783          	lh	a5,0(a5)
    value = lh(vaddr_f);
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000faee:	08200593          	li	a1,130
    8000faf2:	00021617          	auipc	a2,0x21
    8000faf6:	92660613          	addi	a2,a2,-1754 # 80030418 <__func__.0+0x33f8>
    8000fafa:	0001e517          	auipc	a0,0x1e
    8000fafe:	81e50513          	addi	a0,a0,-2018 # 8002d318 <__func__.0+0x2f8>
    8000fb02:	2b81b0ef          	jal	8002adba <printf>
    8000fb06:	00041797          	auipc	a5,0x41
    8000fb0a:	50b7c783          	lbu	a5,1291(a5) # 80051011 <excpt+0x1>
    8000fb0e:	0001d597          	auipc	a1,0x1d
    8000fb12:	7e258593          	addi	a1,a1,2018 # 8002d2f0 <__func__.0+0x2d0>
    8000fb16:	cf91                	beqz	a5,8000fb32 <addr_unaligned+0xfe>
    8000fb18:	00893703          	ld	a4,8(s2)
    8000fb1c:	4791                	li	a5,4
    8000fb1e:	0001d597          	auipc	a1,0x1d
    8000fb22:	7c258593          	addi	a1,a1,1986 # 8002d2e0 <__func__.0+0x2c0>
    8000fb26:	00f70663          	beq	a4,a5,8000fb32 <addr_unaligned+0xfe>
    8000fb2a:	0001d597          	auipc	a1,0x1d
    8000fb2e:	7c658593          	addi	a1,a1,1990 # 8002d2f0 <__func__.0+0x2d0>
    8000fb32:	0001d517          	auipc	a0,0x1d
    8000fb36:	7fe50513          	addi	a0,a0,2046 # 8002d330 <__func__.0+0x310>
    8000fb3a:	2801b0ef          	jal	8002adba <printf>
    8000fb3e:	00041797          	auipc	a5,0x41
    8000fb42:	4d37c783          	lbu	a5,1235(a5) # 80051011 <excpt+0x1>
    8000fb46:	c791                	beqz	a5,8000fb52 <addr_unaligned+0x11e>
    8000fb48:	00893703          	ld	a4,8(s2)
    8000fb4c:	4791                	li	a5,4
    8000fb4e:	00f70c63          	beq	a4,a5,8000fb66 <addr_unaligned+0x132>
    8000fb52:	0001d517          	auipc	a0,0x1d
    8000fb56:	7e650513          	addi	a0,a0,2022 # 8002d338 <__func__.0+0x318>
    8000fb5a:	2601b0ef          	jal	8002adba <printf>
    8000fb5e:	02900513          	li	a0,41
    8000fb62:	747190ef          	jal	80029aa8 <putchar>
    8000fb66:	4529                	li	a0,10
    8000fb68:	741190ef          	jal	80029aa8 <putchar>
    8000fb6c:	4401                	li	s0,0
    8000fb6e:	e499                	bnez	s1,8000fb7c <addr_unaligned+0x148>
    8000fb70:	00041797          	auipc	a5,0x41
    8000fb74:	4a17c783          	lbu	a5,1185(a5) # 80051011 <excpt+0x1>
    8000fb78:	3e079863          	bnez	a5,8000ff68 <addr_unaligned+0x534>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );
    
    //load word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fb7c:	9f6f10ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lw, "lw", uint32_t); 
    8000fb80:	001007b7          	lui	a5,0x100
    8000fb84:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fb88:	07b2                	slli	a5,a5,0xc
    8000fb8a:	0785                	addi	a5,a5,1
    8000fb8c:	0007a783          	lw	a5,0(a5)
    value = lw(vaddr_f);
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000fb90:	08200593          	li	a1,130
    8000fb94:	00021617          	auipc	a2,0x21
    8000fb98:	8bc60613          	addi	a2,a2,-1860 # 80030450 <__func__.0+0x3430>
    8000fb9c:	0001d517          	auipc	a0,0x1d
    8000fba0:	77c50513          	addi	a0,a0,1916 # 8002d318 <__func__.0+0x2f8>
    8000fba4:	2161b0ef          	jal	8002adba <printf>
    8000fba8:	00041797          	auipc	a5,0x41
    8000fbac:	4697c783          	lbu	a5,1129(a5) # 80051011 <excpt+0x1>
    8000fbb0:	0001d597          	auipc	a1,0x1d
    8000fbb4:	74058593          	addi	a1,a1,1856 # 8002d2f0 <__func__.0+0x2d0>
    8000fbb8:	cf91                	beqz	a5,8000fbd4 <addr_unaligned+0x1a0>
    8000fbba:	00893703          	ld	a4,8(s2)
    8000fbbe:	4791                	li	a5,4
    8000fbc0:	0001d597          	auipc	a1,0x1d
    8000fbc4:	72058593          	addi	a1,a1,1824 # 8002d2e0 <__func__.0+0x2c0>
    8000fbc8:	00f70663          	beq	a4,a5,8000fbd4 <addr_unaligned+0x1a0>
    8000fbcc:	0001d597          	auipc	a1,0x1d
    8000fbd0:	72458593          	addi	a1,a1,1828 # 8002d2f0 <__func__.0+0x2d0>
    8000fbd4:	0001d517          	auipc	a0,0x1d
    8000fbd8:	75c50513          	addi	a0,a0,1884 # 8002d330 <__func__.0+0x310>
    8000fbdc:	1de1b0ef          	jal	8002adba <printf>
    8000fbe0:	00041797          	auipc	a5,0x41
    8000fbe4:	4317c783          	lbu	a5,1073(a5) # 80051011 <excpt+0x1>
    8000fbe8:	c791                	beqz	a5,8000fbf4 <addr_unaligned+0x1c0>
    8000fbea:	00893703          	ld	a4,8(s2)
    8000fbee:	4791                	li	a5,4
    8000fbf0:	00f70c63          	beq	a4,a5,8000fc08 <addr_unaligned+0x1d4>
    8000fbf4:	0001d517          	auipc	a0,0x1d
    8000fbf8:	74450513          	addi	a0,a0,1860 # 8002d338 <__func__.0+0x318>
    8000fbfc:	1be1b0ef          	jal	8002adba <printf>
    8000fc00:	02900513          	li	a0,41
    8000fc04:	6a5190ef          	jal	80029aa8 <putchar>
    8000fc08:	4529                	li	a0,10
    8000fc0a:	69f190ef          	jal	80029aa8 <putchar>
    8000fc0e:	c801                	beqz	s0,8000fc1e <addr_unaligned+0x1ea>
    8000fc10:	00041797          	auipc	a5,0x41
    8000fc14:	4017c783          	lbu	a5,1025(a5) # 80051011 <excpt+0x1>
    8000fc18:	4401                	li	s0,0
    8000fc1a:	34079163          	bnez	a5,8000ff5c <addr_unaligned+0x528>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8000fc1e:	001004b7          	lui	s1,0x100
    8000fc22:	04b48493          	addi	s1,s1,75 # 10004b <STACK_SIZE+0x4b>
    8000fc26:	04b2                	slli	s1,s1,0xc
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //load double word地址未对齐引发lam
    TEST_SETUP_EXCEPT();        
    8000fc28:	94af10ef          	jal	80000d72 <test_setup_except_function>
    8000fc2c:	0485                	addi	s1,s1,1
    8000fc2e:	0004b483          	ld	s1,0(s1)
    value = ld(vaddr_f);
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000fc32:	08200593          	li	a1,130
    8000fc36:	00021617          	auipc	a2,0x21
    8000fc3a:	85260613          	addi	a2,a2,-1966 # 80030488 <__func__.0+0x3468>
    8000fc3e:	0001d517          	auipc	a0,0x1d
    8000fc42:	6da50513          	addi	a0,a0,1754 # 8002d318 <__func__.0+0x2f8>
    8000fc46:	1741b0ef          	jal	8002adba <printf>
    8000fc4a:	00041797          	auipc	a5,0x41
    8000fc4e:	3c77c783          	lbu	a5,967(a5) # 80051011 <excpt+0x1>
    8000fc52:	0001d597          	auipc	a1,0x1d
    8000fc56:	69e58593          	addi	a1,a1,1694 # 8002d2f0 <__func__.0+0x2d0>
    8000fc5a:	cf91                	beqz	a5,8000fc76 <addr_unaligned+0x242>
    8000fc5c:	00893703          	ld	a4,8(s2)
    8000fc60:	4791                	li	a5,4
    8000fc62:	0001d597          	auipc	a1,0x1d
    8000fc66:	67e58593          	addi	a1,a1,1662 # 8002d2e0 <__func__.0+0x2c0>
    8000fc6a:	00f70663          	beq	a4,a5,8000fc76 <addr_unaligned+0x242>
    8000fc6e:	0001d597          	auipc	a1,0x1d
    8000fc72:	68258593          	addi	a1,a1,1666 # 8002d2f0 <__func__.0+0x2d0>
    8000fc76:	0001d517          	auipc	a0,0x1d
    8000fc7a:	6ba50513          	addi	a0,a0,1722 # 8002d330 <__func__.0+0x310>
    8000fc7e:	13c1b0ef          	jal	8002adba <printf>
    8000fc82:	00041797          	auipc	a5,0x41
    8000fc86:	38f7c783          	lbu	a5,911(a5) # 80051011 <excpt+0x1>
    8000fc8a:	c791                	beqz	a5,8000fc96 <addr_unaligned+0x262>
    8000fc8c:	00893703          	ld	a4,8(s2)
    8000fc90:	4791                	li	a5,4
    8000fc92:	00f70c63          	beq	a4,a5,8000fcaa <addr_unaligned+0x276>
    8000fc96:	0001d517          	auipc	a0,0x1d
    8000fc9a:	6a250513          	addi	a0,a0,1698 # 8002d338 <__func__.0+0x318>
    8000fc9e:	11c1b0ef          	jal	8002adba <printf>
    8000fca2:	02900513          	li	a0,41
    8000fca6:	603190ef          	jal	80029aa8 <putchar>
    8000fcaa:	4529                	li	a0,10
    8000fcac:	5fd190ef          	jal	80029aa8 <putchar>
    8000fcb0:	c801                	beqz	s0,8000fcc0 <addr_unaligned+0x28c>
    8000fcb2:	00041797          	auipc	a5,0x41
    8000fcb6:	35f7c783          	lbu	a5,863(a5) # 80051011 <excpt+0x1>
    8000fcba:	4401                	li	s0,0
    8000fcbc:	2c079863          	bnez	a5,8000ff8c <addr_unaligned+0x558>
        excpt.triggered == true&&
        excpt.cause == CAUSE_LAM
    );

    //store byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    8000fcc0:	8b2f10ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8000fcc4:	001007b7          	lui	a5,0x100
    8000fcc8:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fccc:	07b2                	slli	a5,a5,0xc
    8000fcce:	0785                	addi	a5,a5,1
    8000fcd0:	00978023          	sb	s1,0(a5)
    sb(vaddr_f,value);
    TEST_ASSERT("store byte address is not aligned successful",         
    8000fcd4:	08200593          	li	a1,130
    8000fcd8:	00020617          	auipc	a2,0x20
    8000fcdc:	7e860613          	addi	a2,a2,2024 # 800304c0 <__func__.0+0x34a0>
    8000fce0:	0001d517          	auipc	a0,0x1d
    8000fce4:	63850513          	addi	a0,a0,1592 # 8002d318 <__func__.0+0x2f8>
    8000fce8:	0d21b0ef          	jal	8002adba <printf>
    8000fcec:	00041797          	auipc	a5,0x41
    8000fcf0:	3257c783          	lbu	a5,805(a5) # 80051011 <excpt+0x1>
    8000fcf4:	0001d597          	auipc	a1,0x1d
    8000fcf8:	5fc58593          	addi	a1,a1,1532 # 8002d2f0 <__func__.0+0x2d0>
    8000fcfc:	e789                	bnez	a5,8000fd06 <addr_unaligned+0x2d2>
    8000fcfe:	0001d597          	auipc	a1,0x1d
    8000fd02:	5e258593          	addi	a1,a1,1506 # 8002d2e0 <__func__.0+0x2c0>
    8000fd06:	0001d517          	auipc	a0,0x1d
    8000fd0a:	62a50513          	addi	a0,a0,1578 # 8002d330 <__func__.0+0x310>
    8000fd0e:	0ac1b0ef          	jal	8002adba <printf>
    8000fd12:	00041797          	auipc	a5,0x41
    8000fd16:	2ff7c783          	lbu	a5,767(a5) # 80051011 <excpt+0x1>
    8000fd1a:	28079a63          	bnez	a5,8000ffae <addr_unaligned+0x57a>
    8000fd1e:	4529                	li	a0,10
    8000fd20:	589190ef          	jal	80029aa8 <putchar>
    8000fd24:	c419                	beqz	s0,8000fd32 <addr_unaligned+0x2fe>
    8000fd26:	00041417          	auipc	s0,0x41
    8000fd2a:	2eb44403          	lbu	s0,747(s0) # 80051011 <excpt+0x1>
    8000fd2e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //store half地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fd32:	840f10ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8000fd36:	001007b7          	lui	a5,0x100
    8000fd3a:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fd3e:	07b2                	slli	a5,a5,0xc
    8000fd40:	0785                	addi	a5,a5,1
    8000fd42:	00979023          	sh	s1,0(a5)
    sh(vaddr_f,value);
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000fd46:	08200593          	li	a1,130
    8000fd4a:	00020617          	auipc	a2,0x20
    8000fd4e:	7a660613          	addi	a2,a2,1958 # 800304f0 <__func__.0+0x34d0>
    8000fd52:	0001d517          	auipc	a0,0x1d
    8000fd56:	5c650513          	addi	a0,a0,1478 # 8002d318 <__func__.0+0x2f8>
    8000fd5a:	0601b0ef          	jal	8002adba <printf>
    8000fd5e:	00041797          	auipc	a5,0x41
    8000fd62:	2b37c783          	lbu	a5,691(a5) # 80051011 <excpt+0x1>
    8000fd66:	0001d597          	auipc	a1,0x1d
    8000fd6a:	58a58593          	addi	a1,a1,1418 # 8002d2f0 <__func__.0+0x2d0>
    8000fd6e:	cf91                	beqz	a5,8000fd8a <addr_unaligned+0x356>
    8000fd70:	00893703          	ld	a4,8(s2)
    8000fd74:	4799                	li	a5,6
    8000fd76:	0001d597          	auipc	a1,0x1d
    8000fd7a:	56a58593          	addi	a1,a1,1386 # 8002d2e0 <__func__.0+0x2c0>
    8000fd7e:	00f70663          	beq	a4,a5,8000fd8a <addr_unaligned+0x356>
    8000fd82:	0001d597          	auipc	a1,0x1d
    8000fd86:	56e58593          	addi	a1,a1,1390 # 8002d2f0 <__func__.0+0x2d0>
    8000fd8a:	0001d517          	auipc	a0,0x1d
    8000fd8e:	5a650513          	addi	a0,a0,1446 # 8002d330 <__func__.0+0x310>
    8000fd92:	0281b0ef          	jal	8002adba <printf>
    8000fd96:	00041797          	auipc	a5,0x41
    8000fd9a:	27b7c783          	lbu	a5,635(a5) # 80051011 <excpt+0x1>
    8000fd9e:	c791                	beqz	a5,8000fdaa <addr_unaligned+0x376>
    8000fda0:	00893703          	ld	a4,8(s2)
    8000fda4:	4799                	li	a5,6
    8000fda6:	00f70c63          	beq	a4,a5,8000fdbe <addr_unaligned+0x38a>
    8000fdaa:	0001d517          	auipc	a0,0x1d
    8000fdae:	58e50513          	addi	a0,a0,1422 # 8002d338 <__func__.0+0x318>
    8000fdb2:	0081b0ef          	jal	8002adba <printf>
    8000fdb6:	02900513          	li	a0,41
    8000fdba:	4ef190ef          	jal	80029aa8 <putchar>
    8000fdbe:	4529                	li	a0,10
    8000fdc0:	4e9190ef          	jal	80029aa8 <putchar>
    8000fdc4:	c801                	beqz	s0,8000fdd4 <addr_unaligned+0x3a0>
    8000fdc6:	00041797          	auipc	a5,0x41
    8000fdca:	24b7c783          	lbu	a5,587(a5) # 80051011 <excpt+0x1>
    8000fdce:	4401                	li	s0,0
    8000fdd0:	1a079863          	bnez	a5,8000ff80 <addr_unaligned+0x54c>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );
    
    //store word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fdd4:	f9ff00ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sw, "sw", uint32_t);
    8000fdd8:	001007b7          	lui	a5,0x100
    8000fddc:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fde0:	07b2                	slli	a5,a5,0xc
    8000fde2:	0785                	addi	a5,a5,1
    8000fde4:	0097a023          	sw	s1,0(a5)
    sw(vaddr_f,value);
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000fde8:	08200593          	li	a1,130
    8000fdec:	00020617          	auipc	a2,0x20
    8000fdf0:	73c60613          	addi	a2,a2,1852 # 80030528 <__func__.0+0x3508>
    8000fdf4:	0001d517          	auipc	a0,0x1d
    8000fdf8:	52450513          	addi	a0,a0,1316 # 8002d318 <__func__.0+0x2f8>
    8000fdfc:	7bf1a0ef          	jal	8002adba <printf>
    8000fe00:	00041797          	auipc	a5,0x41
    8000fe04:	2117c783          	lbu	a5,529(a5) # 80051011 <excpt+0x1>
    8000fe08:	0001d597          	auipc	a1,0x1d
    8000fe0c:	4e858593          	addi	a1,a1,1256 # 8002d2f0 <__func__.0+0x2d0>
    8000fe10:	cf91                	beqz	a5,8000fe2c <addr_unaligned+0x3f8>
    8000fe12:	00893703          	ld	a4,8(s2)
    8000fe16:	4799                	li	a5,6
    8000fe18:	0001d597          	auipc	a1,0x1d
    8000fe1c:	4c858593          	addi	a1,a1,1224 # 8002d2e0 <__func__.0+0x2c0>
    8000fe20:	00f70663          	beq	a4,a5,8000fe2c <addr_unaligned+0x3f8>
    8000fe24:	0001d597          	auipc	a1,0x1d
    8000fe28:	4cc58593          	addi	a1,a1,1228 # 8002d2f0 <__func__.0+0x2d0>
    8000fe2c:	0001d517          	auipc	a0,0x1d
    8000fe30:	50450513          	addi	a0,a0,1284 # 8002d330 <__func__.0+0x310>
    8000fe34:	7871a0ef          	jal	8002adba <printf>
    8000fe38:	00041797          	auipc	a5,0x41
    8000fe3c:	1d97c783          	lbu	a5,473(a5) # 80051011 <excpt+0x1>
    8000fe40:	c791                	beqz	a5,8000fe4c <addr_unaligned+0x418>
    8000fe42:	00893703          	ld	a4,8(s2)
    8000fe46:	4799                	li	a5,6
    8000fe48:	00f70c63          	beq	a4,a5,8000fe60 <addr_unaligned+0x42c>
    8000fe4c:	0001d517          	auipc	a0,0x1d
    8000fe50:	4ec50513          	addi	a0,a0,1260 # 8002d338 <__func__.0+0x318>
    8000fe54:	7671a0ef          	jal	8002adba <printf>
    8000fe58:	02900513          	li	a0,41
    8000fe5c:	44d190ef          	jal	80029aa8 <putchar>
    8000fe60:	4529                	li	a0,10
    8000fe62:	447190ef          	jal	80029aa8 <putchar>
    8000fe66:	c801                	beqz	s0,8000fe76 <addr_unaligned+0x442>
    8000fe68:	00041797          	auipc	a5,0x41
    8000fe6c:	1a97c783          	lbu	a5,425(a5) # 80051011 <excpt+0x1>
    8000fe70:	4401                	li	s0,0
    8000fe72:	10079163          	bnez	a5,8000ff74 <addr_unaligned+0x540>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    //store double word地址未对齐引发sam
    TEST_SETUP_EXCEPT();        
    8000fe76:	efdf00ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8000fe7a:	001007b7          	lui	a5,0x100
    8000fe7e:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    8000fe82:	07b2                	slli	a5,a5,0xc
    8000fe84:	0785                	addi	a5,a5,1
    8000fe86:	0097b023          	sd	s1,0(a5)
    sd(vaddr_f,value);
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000fe8a:	08200593          	li	a1,130
    8000fe8e:	00020617          	auipc	a2,0x20
    8000fe92:	6d260613          	addi	a2,a2,1746 # 80030560 <__func__.0+0x3540>
    8000fe96:	0001d517          	auipc	a0,0x1d
    8000fe9a:	48250513          	addi	a0,a0,1154 # 8002d318 <__func__.0+0x2f8>
    8000fe9e:	71d1a0ef          	jal	8002adba <printf>
    8000fea2:	00041797          	auipc	a5,0x41
    8000fea6:	16f7c783          	lbu	a5,367(a5) # 80051011 <excpt+0x1>
    8000feaa:	0001d597          	auipc	a1,0x1d
    8000feae:	44658593          	addi	a1,a1,1094 # 8002d2f0 <__func__.0+0x2d0>
    8000feb2:	cf91                	beqz	a5,8000fece <addr_unaligned+0x49a>
    8000feb4:	00893703          	ld	a4,8(s2)
    8000feb8:	4799                	li	a5,6
    8000feba:	0001d597          	auipc	a1,0x1d
    8000febe:	42658593          	addi	a1,a1,1062 # 8002d2e0 <__func__.0+0x2c0>
    8000fec2:	00f70663          	beq	a4,a5,8000fece <addr_unaligned+0x49a>
    8000fec6:	0001d597          	auipc	a1,0x1d
    8000feca:	42a58593          	addi	a1,a1,1066 # 8002d2f0 <__func__.0+0x2d0>
    8000fece:	0001d517          	auipc	a0,0x1d
    8000fed2:	46250513          	addi	a0,a0,1122 # 8002d330 <__func__.0+0x310>
    8000fed6:	6e51a0ef          	jal	8002adba <printf>
    8000feda:	00041797          	auipc	a5,0x41
    8000fede:	1377c783          	lbu	a5,311(a5) # 80051011 <excpt+0x1>
    8000fee2:	c791                	beqz	a5,8000feee <addr_unaligned+0x4ba>
    8000fee4:	00893703          	ld	a4,8(s2)
    8000fee8:	4799                	li	a5,6
    8000feea:	00f70c63          	beq	a4,a5,8000ff02 <addr_unaligned+0x4ce>
    8000feee:	0001d517          	auipc	a0,0x1d
    8000fef2:	44a50513          	addi	a0,a0,1098 # 8002d338 <__func__.0+0x318>
    8000fef6:	6c51a0ef          	jal	8002adba <printf>
    8000fefa:	02900513          	li	a0,41
    8000fefe:	3ab190ef          	jal	80029aa8 <putchar>
    8000ff02:	4529                	li	a0,10
    8000ff04:	3a5190ef          	jal	80029aa8 <putchar>
    8000ff08:	c01d                	beqz	s0,8000ff2e <addr_unaligned+0x4fa>
    8000ff0a:	00041417          	auipc	s0,0x41
    8000ff0e:	10744403          	lbu	s0,263(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true&&
        excpt.cause == CAUSE_SAM
    );

    TEST_END();
    8000ff12:	0001d597          	auipc	a1,0x1d
    8000ff16:	3de58593          	addi	a1,a1,990 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ff1a:	cc19                	beqz	s0,8000ff38 <addr_unaligned+0x504>
    8000ff1c:	00893703          	ld	a4,8(s2)
    8000ff20:	4799                	li	a5,6
    TEST_END();
    8000ff22:	0001d597          	auipc	a1,0x1d
    8000ff26:	3be58593          	addi	a1,a1,958 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("store double word address is not aligned result in a sam",         
    8000ff2a:	00f70763          	beq	a4,a5,8000ff38 <addr_unaligned+0x504>
    8000ff2e:	4401                	li	s0,0
    TEST_END();
    8000ff30:	0001d597          	auipc	a1,0x1d
    8000ff34:	3c058593          	addi	a1,a1,960 # 8002d2f0 <__func__.0+0x2d0>
    8000ff38:	0001d517          	auipc	a0,0x1d
    8000ff3c:	46050513          	addi	a0,a0,1120 # 8002d398 <__func__.0+0x378>
    8000ff40:	67b1a0ef          	jal	8002adba <printf>
    8000ff44:	4511                	li	a0,4
    8000ff46:	f29f00ef          	jal	80000e6e <goto_priv>
    8000ff4a:	841f10ef          	jal	8000178a <reset_state>

    8000ff4e:	60e2                	ld	ra,24(sp)
    8000ff50:	8522                	mv	a0,s0
    8000ff52:	6442                	ld	s0,16(sp)
    8000ff54:	64a2                	ld	s1,8(sp)
    8000ff56:	6902                	ld	s2,0(sp)
    8000ff58:	6105                	addi	sp,sp,32
    8000ff5a:	8082                	ret
    TEST_ASSERT("load word address is not aligned result in a lam",         
    8000ff5c:	00893403          	ld	s0,8(s2)
    8000ff60:	1471                	addi	s0,s0,-4
    8000ff62:	00143413          	seqz	s0,s0
    8000ff66:	b965                	j	8000fc1e <addr_unaligned+0x1ea>
    TEST_ASSERT(" load half address is not aligned result in a lam",         
    8000ff68:	00893403          	ld	s0,8(s2)
    8000ff6c:	1471                	addi	s0,s0,-4
    8000ff6e:	00143413          	seqz	s0,s0
    8000ff72:	b129                	j	8000fb7c <addr_unaligned+0x148>
    TEST_ASSERT("store word address is not aligned result in a sam",         
    8000ff74:	00893403          	ld	s0,8(s2)
    8000ff78:	1469                	addi	s0,s0,-6
    8000ff7a:	00143413          	seqz	s0,s0
    8000ff7e:	bde5                	j	8000fe76 <addr_unaligned+0x442>
    TEST_ASSERT("store half address is not aligned result in a sam",         
    8000ff80:	00893403          	ld	s0,8(s2)
    8000ff84:	1469                	addi	s0,s0,-6
    8000ff86:	00143413          	seqz	s0,s0
    8000ff8a:	b5a9                	j	8000fdd4 <addr_unaligned+0x3a0>
    TEST_ASSERT("load double word address is not aligned result in a lam",         
    8000ff8c:	00893403          	ld	s0,8(s2)
    8000ff90:	1471                	addi	s0,s0,-4
    8000ff92:	00143413          	seqz	s0,s0
    8000ff96:	b32d                	j	8000fcc0 <addr_unaligned+0x28c>
    TEST_ASSERT("load byte address is not aligned successful",         
    8000ff98:	0001d517          	auipc	a0,0x1d
    8000ff9c:	3a050513          	addi	a0,a0,928 # 8002d338 <__func__.0+0x318>
    8000ffa0:	61b1a0ef          	jal	8002adba <printf>
    8000ffa4:	02900513          	li	a0,41
    8000ffa8:	301190ef          	jal	80029aa8 <putchar>
    8000ffac:	be21                	j	8000fac4 <addr_unaligned+0x90>
    TEST_ASSERT("store byte address is not aligned successful",         
    8000ffae:	0001d517          	auipc	a0,0x1d
    8000ffb2:	38a50513          	addi	a0,a0,906 # 8002d338 <__func__.0+0x318>
    8000ffb6:	6051a0ef          	jal	8002adba <printf>
    8000ffba:	02900513          	li	a0,41
    8000ffbe:	2eb190ef          	jal	80029aa8 <putchar>
    8000ffc2:	bbb1                	j	8000fd1e <addr_unaligned+0x2ea>

000000008000ffc4 <illegal_except_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool illegal_except_1() {
    8000ffc4:	1101                	addi	sp,sp,-32

    TEST_START();
    8000ffc6:	0001c597          	auipc	a1,0x1c
    8000ffca:	a1a58593          	addi	a1,a1,-1510 # 8002b9e0 <__func__.14>
    8000ffce:	0001d517          	auipc	a0,0x1d
    8000ffd2:	33250513          	addi	a0,a0,818 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_1() {
    8000ffd6:	ec06                	sd	ra,24(sp)
    8000ffd8:	e822                	sd	s0,16(sp)
    8000ffda:	e426                	sd	s1,8(sp)
    TEST_START();
    8000ffdc:	5df1a0ef          	jal	8002adba <printf>
    8000ffe0:	4529                	li	a0,10
    8000ffe2:	2c7190ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    8000ffe6:	d8df00ef          	jal	80000d72 <test_setup_except_function>
    // ); 
    // printf("%d",excpt.triggered);
    // printf("%d",excpt.cause);

    //当前权限满足最低CSR访问权限，CSR写行为，但访问的CSR只读
    goto_priv(PRIV_M);
    8000ffea:	4511                	li	a0,4
    8000ffec:	e83f00ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_MCONFIGPTR,0xfff);
    8000fff0:	6785                	lui	a5,0x1
    8000fff2:	37fd                	addiw	a5,a5,-1 # fff <_test_table_size+0xffe>
    8000fff4:	f1579073          	csrw	0xf15,a5
    TEST_ASSERT("write csr which is read-only leads to illegal instruction interrupt",
    8000fff8:	08200593          	li	a1,130
    8000fffc:	00020617          	auipc	a2,0x20
    80010000:	5a460613          	addi	a2,a2,1444 # 800305a0 <__func__.0+0x3580>
    80010004:	0001d517          	auipc	a0,0x1d
    80010008:	31450513          	addi	a0,a0,788 # 8002d318 <__func__.0+0x2f8>
    8001000c:	5af1a0ef          	jal	8002adba <printf>
    80010010:	00041797          	auipc	a5,0x41
    80010014:	0017c783          	lbu	a5,1(a5) # 80051011 <excpt+0x1>
    80010018:	00041497          	auipc	s1,0x41
    8001001c:	ff848493          	addi	s1,s1,-8 # 80051010 <excpt>
    80010020:	0001d597          	auipc	a1,0x1d
    80010024:	2d058593          	addi	a1,a1,720 # 8002d2f0 <__func__.0+0x2d0>
    80010028:	cf89                	beqz	a5,80010042 <illegal_except_1+0x7e>
    8001002a:	6498                	ld	a4,8(s1)
    8001002c:	4789                	li	a5,2
    8001002e:	0001d597          	auipc	a1,0x1d
    80010032:	2b258593          	addi	a1,a1,690 # 8002d2e0 <__func__.0+0x2c0>
    80010036:	00f70663          	beq	a4,a5,80010042 <illegal_except_1+0x7e>
    8001003a:	0001d597          	auipc	a1,0x1d
    8001003e:	2b658593          	addi	a1,a1,694 # 8002d2f0 <__func__.0+0x2d0>
    80010042:	0001d517          	auipc	a0,0x1d
    80010046:	2ee50513          	addi	a0,a0,750 # 8002d330 <__func__.0+0x310>
    8001004a:	5711a0ef          	jal	8002adba <printf>
    8001004e:	00041797          	auipc	a5,0x41
    80010052:	fc37c783          	lbu	a5,-61(a5) # 80051011 <excpt+0x1>
    80010056:	c789                	beqz	a5,80010060 <illegal_except_1+0x9c>
    80010058:	6498                	ld	a4,8(s1)
    8001005a:	4789                	li	a5,2
    8001005c:	00f70c63          	beq	a4,a5,80010074 <illegal_except_1+0xb0>
    80010060:	0001d517          	auipc	a0,0x1d
    80010064:	2d850513          	addi	a0,a0,728 # 8002d338 <__func__.0+0x318>
    80010068:	5531a0ef          	jal	8002adba <printf>
    8001006c:	02900513          	li	a0,41
    80010070:	239190ef          	jal	80029aa8 <putchar>
    80010074:	4529                	li	a0,10
    80010076:	233190ef          	jal	80029aa8 <putchar>
    8001007a:	00041797          	auipc	a5,0x41
    8001007e:	f977c783          	lbu	a5,-105(a5) # 80051011 <excpt+0x1>
    80010082:	4401                	li	s0,0
    80010084:	c789                	beqz	a5,8001008e <illegal_except_1+0xca>
    80010086:	6480                	ld	s0,8(s1)
    80010088:	1479                	addi	s0,s0,-2
    8001008a:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_ILI 
    ); 


    //当前权限不满足最低CSR访问权限
    goto_priv(PRIV_HS);
    8001008e:	450d                	li	a0,3
    80010090:	ddff00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010094:	cdff00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MIE);
    80010098:	304027f3          	csrr	a5,mie
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    8001009c:	08200593          	li	a1,130
    800100a0:	00020617          	auipc	a2,0x20
    800100a4:	54860613          	addi	a2,a2,1352 # 800305e8 <__func__.0+0x35c8>
    800100a8:	0001d517          	auipc	a0,0x1d
    800100ac:	27050513          	addi	a0,a0,624 # 8002d318 <__func__.0+0x2f8>
    800100b0:	50b1a0ef          	jal	8002adba <printf>
    800100b4:	00041797          	auipc	a5,0x41
    800100b8:	f5d7c783          	lbu	a5,-163(a5) # 80051011 <excpt+0x1>
    800100bc:	0001d597          	auipc	a1,0x1d
    800100c0:	23458593          	addi	a1,a1,564 # 8002d2f0 <__func__.0+0x2d0>
    800100c4:	cf89                	beqz	a5,800100de <illegal_except_1+0x11a>
    800100c6:	6498                	ld	a4,8(s1)
    800100c8:	4789                	li	a5,2
    800100ca:	0001d597          	auipc	a1,0x1d
    800100ce:	21658593          	addi	a1,a1,534 # 8002d2e0 <__func__.0+0x2c0>
    800100d2:	00f70663          	beq	a4,a5,800100de <illegal_except_1+0x11a>
    800100d6:	0001d597          	auipc	a1,0x1d
    800100da:	21a58593          	addi	a1,a1,538 # 8002d2f0 <__func__.0+0x2d0>
    800100de:	0001d517          	auipc	a0,0x1d
    800100e2:	25250513          	addi	a0,a0,594 # 8002d330 <__func__.0+0x310>
    800100e6:	4d51a0ef          	jal	8002adba <printf>
    800100ea:	00041797          	auipc	a5,0x41
    800100ee:	f277c783          	lbu	a5,-217(a5) # 80051011 <excpt+0x1>
    800100f2:	c789                	beqz	a5,800100fc <illegal_except_1+0x138>
    800100f4:	6498                	ld	a4,8(s1)
    800100f6:	4789                	li	a5,2
    800100f8:	00f70c63          	beq	a4,a5,80010110 <illegal_except_1+0x14c>
    800100fc:	0001d517          	auipc	a0,0x1d
    80010100:	23c50513          	addi	a0,a0,572 # 8002d338 <__func__.0+0x318>
    80010104:	4b71a0ef          	jal	8002adba <printf>
    80010108:	02900513          	li	a0,41
    8001010c:	19d190ef          	jal	80029aa8 <putchar>
    80010110:	4529                	li	a0,10
    80010112:	197190ef          	jal	80029aa8 <putchar>
    80010116:	c015                	beqz	s0,8001013a <illegal_except_1+0x176>
    80010118:	00041417          	auipc	s0,0x41
    8001011c:	ef944403          	lbu	s0,-263(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010120:	0001d597          	auipc	a1,0x1d
    80010124:	1d058593          	addi	a1,a1,464 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010128:	cc11                	beqz	s0,80010144 <illegal_except_1+0x180>
    8001012a:	6498                	ld	a4,8(s1)
    8001012c:	4789                	li	a5,2
    TEST_END();
    8001012e:	0001d597          	auipc	a1,0x1d
    80010132:	1b258593          	addi	a1,a1,434 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("low priviliege mode access high priviliege csr leads to illegal instruction interrupt",
    80010136:	00f70763          	beq	a4,a5,80010144 <illegal_except_1+0x180>
    8001013a:	4401                	li	s0,0
    TEST_END();
    8001013c:	0001d597          	auipc	a1,0x1d
    80010140:	1b458593          	addi	a1,a1,436 # 8002d2f0 <__func__.0+0x2d0>
    80010144:	0001d517          	auipc	a0,0x1d
    80010148:	25450513          	addi	a0,a0,596 # 8002d398 <__func__.0+0x378>
    8001014c:	46f1a0ef          	jal	8002adba <printf>
    80010150:	4511                	li	a0,4
    80010152:	d1df00ef          	jal	80000e6e <goto_priv>
    80010156:	e34f10ef          	jal	8000178a <reset_state>

}
    8001015a:	60e2                	ld	ra,24(sp)
    8001015c:	8522                	mv	a0,s0
    8001015e:	6442                	ld	s0,16(sp)
    80010160:	64a2                	ld	s1,8(sp)
    80010162:	6105                	addi	sp,sp,32
    80010164:	8082                	ret

0000000080010166 <illegal_except_2>:

bool illegal_except_2() {
    80010166:	1101                	addi	sp,sp,-32

    TEST_START();
    80010168:	0001c597          	auipc	a1,0x1c
    8001016c:	89058593          	addi	a1,a1,-1904 # 8002b9f8 <__func__.13>
    80010170:	0001d517          	auipc	a0,0x1d
    80010174:	19050513          	addi	a0,a0,400 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_2() {
    80010178:	ec06                	sd	ra,24(sp)
    8001017a:	e822                	sd	s0,16(sp)
    8001017c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001017e:	43d1a0ef          	jal	8002adba <printf>
    80010182:	4529                	li	a0,10
    80010184:	125190ef          	jal	80029aa8 <putchar>


    //特殊情况，没有开启虚存，在S模式下访问Satp寄存器，但被sstatus.TVM拦截
    goto_priv(PRIV_M);
    80010188:	4511                	li	a0,4
    8001018a:	ce5f00ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    8001018e:	001007b7          	lui	a5,0x100
    80010192:	3007a073          	csrs	mstatus,a5
    CSRW(satp, 0x0);    //关闭虚存
    80010196:	18005073          	csrwi	satp,0
    goto_priv(PRIV_HS);
    8001019a:	450d                	li	a0,3
    8001019c:	cd3f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800101a0:	bd3f00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(satp);
    800101a4:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800101a8:	08200593          	li	a1,130
    800101ac:	00020617          	auipc	a2,0x20
    800101b0:	49460613          	addi	a2,a2,1172 # 80030640 <__func__.0+0x3620>
    800101b4:	0001d517          	auipc	a0,0x1d
    800101b8:	16450513          	addi	a0,a0,356 # 8002d318 <__func__.0+0x2f8>
    800101bc:	3ff1a0ef          	jal	8002adba <printf>
    800101c0:	00041797          	auipc	a5,0x41
    800101c4:	e517c783          	lbu	a5,-431(a5) # 80051011 <excpt+0x1>
    800101c8:	00041497          	auipc	s1,0x41
    800101cc:	e4848493          	addi	s1,s1,-440 # 80051010 <excpt>
    800101d0:	0001d597          	auipc	a1,0x1d
    800101d4:	12058593          	addi	a1,a1,288 # 8002d2f0 <__func__.0+0x2d0>
    800101d8:	cf89                	beqz	a5,800101f2 <illegal_except_2+0x8c>
    800101da:	6498                	ld	a4,8(s1)
    800101dc:	4789                	li	a5,2
    800101de:	0001d597          	auipc	a1,0x1d
    800101e2:	10258593          	addi	a1,a1,258 # 8002d2e0 <__func__.0+0x2c0>
    800101e6:	00f70663          	beq	a4,a5,800101f2 <illegal_except_2+0x8c>
    800101ea:	0001d597          	auipc	a1,0x1d
    800101ee:	10658593          	addi	a1,a1,262 # 8002d2f0 <__func__.0+0x2d0>
    800101f2:	0001d517          	auipc	a0,0x1d
    800101f6:	13e50513          	addi	a0,a0,318 # 8002d330 <__func__.0+0x310>
    800101fa:	3c11a0ef          	jal	8002adba <printf>
    800101fe:	00041797          	auipc	a5,0x41
    80010202:	e137c783          	lbu	a5,-493(a5) # 80051011 <excpt+0x1>
    80010206:	c789                	beqz	a5,80010210 <illegal_except_2+0xaa>
    80010208:	6498                	ld	a4,8(s1)
    8001020a:	4789                	li	a5,2
    8001020c:	00f70c63          	beq	a4,a5,80010224 <illegal_except_2+0xbe>
    80010210:	0001d517          	auipc	a0,0x1d
    80010214:	12850513          	addi	a0,a0,296 # 8002d338 <__func__.0+0x318>
    80010218:	3a31a0ef          	jal	8002adba <printf>
    8001021c:	02900513          	li	a0,41
    80010220:	089190ef          	jal	80029aa8 <putchar>
    80010224:	4529                	li	a0,10
    80010226:	083190ef          	jal	80029aa8 <putchar>
    8001022a:	00041417          	auipc	s0,0x41
    8001022e:	de744403          	lbu	s0,-537(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010232:	0001d597          	auipc	a1,0x1d
    80010236:	0be58593          	addi	a1,a1,190 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8001023a:	cc11                	beqz	s0,80010256 <illegal_except_2+0xf0>
    8001023c:	6498                	ld	a4,8(s1)
    8001023e:	4789                	li	a5,2
    TEST_END();
    80010240:	0001d597          	auipc	a1,0x1d
    80010244:	0a058593          	addi	a1,a1,160 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    80010248:	00f70763          	beq	a4,a5,80010256 <illegal_except_2+0xf0>
    8001024c:	4401                	li	s0,0
    TEST_END();
    8001024e:	0001d597          	auipc	a1,0x1d
    80010252:	0a258593          	addi	a1,a1,162 # 8002d2f0 <__func__.0+0x2d0>
    80010256:	0001d517          	auipc	a0,0x1d
    8001025a:	14250513          	addi	a0,a0,322 # 8002d398 <__func__.0+0x378>
    8001025e:	35d1a0ef          	jal	8002adba <printf>
    80010262:	4511                	li	a0,4
    80010264:	c0bf00ef          	jal	80000e6e <goto_priv>
    80010268:	d22f10ef          	jal	8000178a <reset_state>

}
    8001026c:	60e2                	ld	ra,24(sp)
    8001026e:	8522                	mv	a0,s0
    80010270:	6442                	ld	s0,16(sp)
    80010272:	64a2                	ld	s1,8(sp)
    80010274:	6105                	addi	sp,sp,32
    80010276:	8082                	ret

0000000080010278 <illegal_except_3>:

bool illegal_except_3() {
    80010278:	1101                	addi	sp,sp,-32

    TEST_START();
    8001027a:	0001b597          	auipc	a1,0x1b
    8001027e:	79658593          	addi	a1,a1,1942 # 8002ba10 <__func__.12>
    80010282:	0001d517          	auipc	a0,0x1d
    80010286:	07e50513          	addi	a0,a0,126 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_3() {
    8001028a:	ec06                	sd	ra,24(sp)
    8001028c:	e822                	sd	s0,16(sp)
    8001028e:	e426                	sd	s1,8(sp)
    TEST_START();
    80010290:	32b1a0ef          	jal	8002adba <printf>
    80010294:	4529                	li	a0,10
    80010296:	013190ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    8001029a:	ad9f00ef          	jal	80000d72 <test_setup_except_function>

    //执行CSR写指令尝试将非支持值写入WLRL字段时
    printf("%llx\n",CSRR(CSR_MCAUSE));
    8001029e:	342025f3          	csrr	a1,mcause
    800102a2:	00023517          	auipc	a0,0x23
    800102a6:	68650513          	addi	a0,a0,1670 # 80033928 <__func__.0+0x6908>
    800102aa:	3111a0ef          	jal	8002adba <printf>
    CSRW(CSR_MCAUSE,0xfffffffff);     //不支持的值写入将不会写入，没报错
    800102ae:	57fd                	li	a5,-1
    800102b0:	83f1                	srli	a5,a5,0x1c
    800102b2:	34279073          	csrw	mcause,a5
    printf("%llx\n",CSRR(CSR_MCAUSE));
    800102b6:	342025f3          	csrr	a1,mcause
    800102ba:	00023517          	auipc	a0,0x23
    800102be:	66e50513          	addi	a0,a0,1646 # 80033928 <__func__.0+0x6908>
    800102c2:	2f91a0ef          	jal	8002adba <printf>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    800102c6:	08200593          	li	a1,130
    800102ca:	00020617          	auipc	a2,0x20
    800102ce:	3d660613          	addi	a2,a2,982 # 800306a0 <__func__.0+0x3680>
    800102d2:	0001d517          	auipc	a0,0x1d
    800102d6:	04650513          	addi	a0,a0,70 # 8002d318 <__func__.0+0x2f8>
    800102da:	2e11a0ef          	jal	8002adba <printf>
    800102de:	00041797          	auipc	a5,0x41
    800102e2:	d337c783          	lbu	a5,-717(a5) # 80051011 <excpt+0x1>
    800102e6:	00041497          	auipc	s1,0x41
    800102ea:	d2a48493          	addi	s1,s1,-726 # 80051010 <excpt>
    800102ee:	0001d597          	auipc	a1,0x1d
    800102f2:	00258593          	addi	a1,a1,2 # 8002d2f0 <__func__.0+0x2d0>
    800102f6:	cf89                	beqz	a5,80010310 <illegal_except_3+0x98>
    800102f8:	6498                	ld	a4,8(s1)
    800102fa:	4789                	li	a5,2
    800102fc:	0001d597          	auipc	a1,0x1d
    80010300:	fe458593          	addi	a1,a1,-28 # 8002d2e0 <__func__.0+0x2c0>
    80010304:	00f70663          	beq	a4,a5,80010310 <illegal_except_3+0x98>
    80010308:	0001d597          	auipc	a1,0x1d
    8001030c:	fe858593          	addi	a1,a1,-24 # 8002d2f0 <__func__.0+0x2d0>
    80010310:	0001d517          	auipc	a0,0x1d
    80010314:	02050513          	addi	a0,a0,32 # 8002d330 <__func__.0+0x310>
    80010318:	2a31a0ef          	jal	8002adba <printf>
    8001031c:	00041797          	auipc	a5,0x41
    80010320:	cf57c783          	lbu	a5,-779(a5) # 80051011 <excpt+0x1>
    80010324:	c789                	beqz	a5,8001032e <illegal_except_3+0xb6>
    80010326:	6498                	ld	a4,8(s1)
    80010328:	4789                	li	a5,2
    8001032a:	00f70c63          	beq	a4,a5,80010342 <illegal_except_3+0xca>
    8001032e:	0001d517          	auipc	a0,0x1d
    80010332:	00a50513          	addi	a0,a0,10 # 8002d338 <__func__.0+0x318>
    80010336:	2851a0ef          	jal	8002adba <printf>
    8001033a:	02900513          	li	a0,41
    8001033e:	76a190ef          	jal	80029aa8 <putchar>
    80010342:	4529                	li	a0,10
    80010344:	764190ef          	jal	80029aa8 <putchar>
    80010348:	00041417          	auipc	s0,0x41
    8001034c:	cc944403          	lbu	s0,-823(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80010350:	0001d597          	auipc	a1,0x1d
    80010354:	fa058593          	addi	a1,a1,-96 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010358:	cc11                	beqz	s0,80010374 <illegal_except_3+0xfc>
    8001035a:	6498                	ld	a4,8(s1)
    8001035c:	4789                	li	a5,2
    TEST_END();
    8001035e:	0001d597          	auipc	a1,0x1d
    80010362:	f8258593          	addi	a1,a1,-126 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("write wlrl part of csr leads to illegal instruction interrupt",
    80010366:	00f70763          	beq	a4,a5,80010374 <illegal_except_3+0xfc>
    8001036a:	4401                	li	s0,0
    TEST_END();
    8001036c:	0001d597          	auipc	a1,0x1d
    80010370:	f8458593          	addi	a1,a1,-124 # 8002d2f0 <__func__.0+0x2d0>
    80010374:	0001d517          	auipc	a0,0x1d
    80010378:	02450513          	addi	a0,a0,36 # 8002d398 <__func__.0+0x378>
    8001037c:	23f1a0ef          	jal	8002adba <printf>
    80010380:	4511                	li	a0,4
    80010382:	aedf00ef          	jal	80000e6e <goto_priv>
    80010386:	c04f10ef          	jal	8000178a <reset_state>
}
    8001038a:	60e2                	ld	ra,24(sp)
    8001038c:	8522                	mv	a0,s0
    8001038e:	6442                	ld	s0,16(sp)
    80010390:	64a2                	ld	s1,8(sp)
    80010392:	6105                	addi	sp,sp,32
    80010394:	8082                	ret

0000000080010396 <illegal_except_4>:



bool illegal_except_4() {
    80010396:	1101                	addi	sp,sp,-32

    TEST_START();
    80010398:	0001b597          	auipc	a1,0x1b
    8001039c:	69058593          	addi	a1,a1,1680 # 8002ba28 <__func__.11>
    800103a0:	0001d517          	auipc	a0,0x1d
    800103a4:	f6050513          	addi	a0,a0,-160 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_4() {
    800103a8:	ec06                	sd	ra,24(sp)
    800103aa:	e822                	sd	s0,16(sp)
    800103ac:	e426                	sd	s1,8(sp)
    800103ae:	e04a                	sd	s2,0(sp)
    TEST_START();
    800103b0:	20b1a0ef          	jal	8002adba <printf>
    800103b4:	4529                	li	a0,10
    800103b6:	6f2190ef          	jal	80029aa8 <putchar>

    //M模式下可以访问任何CSR
    goto_priv(PRIV_M);
    800103ba:	4511                	li	a0,4
    800103bc:	ab3f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800103c0:	9b3f00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    800103c4:	342027f3          	csrr	a5,mcause
    CSRR(CSR_SCAUSE);
    800103c8:	142027f3          	csrr	a5,scause
    CSRR(CSR_VSCAUSE);
    800103cc:	242027f3          	csrr	a5,vscause
    TEST_ASSERT("m mode access any csr successful",
    800103d0:	08200593          	li	a1,130
    800103d4:	00020617          	auipc	a2,0x20
    800103d8:	30c60613          	addi	a2,a2,780 # 800306e0 <__func__.0+0x36c0>
    800103dc:	0001d517          	auipc	a0,0x1d
    800103e0:	f3c50513          	addi	a0,a0,-196 # 8002d318 <__func__.0+0x2f8>
    800103e4:	1d71a0ef          	jal	8002adba <printf>
    800103e8:	00041797          	auipc	a5,0x41
    800103ec:	c297c783          	lbu	a5,-983(a5) # 80051011 <excpt+0x1>
    800103f0:	0001d597          	auipc	a1,0x1d
    800103f4:	ef058593          	addi	a1,a1,-272 # 8002d2e0 <__func__.0+0x2c0>
    800103f8:	c789                	beqz	a5,80010402 <illegal_except_4+0x6c>
    800103fa:	0001d597          	auipc	a1,0x1d
    800103fe:	ef658593          	addi	a1,a1,-266 # 8002d2f0 <__func__.0+0x2d0>
    80010402:	0001d517          	auipc	a0,0x1d
    80010406:	f2e50513          	addi	a0,a0,-210 # 8002d330 <__func__.0+0x310>
    8001040a:	1b11a0ef          	jal	8002adba <printf>
    8001040e:	00041797          	auipc	a5,0x41
    80010412:	c037c783          	lbu	a5,-1021(a5) # 80051011 <excpt+0x1>
    80010416:	18079e63          	bnez	a5,800105b2 <illegal_except_4+0x21c>
    8001041a:	4529                	li	a0,10
    8001041c:	68c190ef          	jal	80029aa8 <putchar>
    80010420:	00041917          	auipc	s2,0x41
    80010424:	bf194903          	lbu	s2,-1039(s2) # 80051011 <excpt+0x1>
        excpt.triggered == false
    ); 

    reset_state();
    80010428:	b62f10ef          	jal	8000178a <reset_state>

    //尝试访问高特权级别的任何CSR
    goto_priv(PRIV_HS);
    8001042c:	450d                	li	a0,3
    8001042e:	a41f00ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode access any csr successful",
    80010432:	00041417          	auipc	s0,0x41
    80010436:	bde40413          	addi	s0,s0,-1058 # 80051010 <excpt>
    TEST_SETUP_EXCEPT();
    8001043a:	939f00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MCAUSE);
    8001043e:	342027f3          	csrr	a5,mcause
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    80010442:	08200593          	li	a1,130
    80010446:	00020617          	auipc	a2,0x20
    8001044a:	2c260613          	addi	a2,a2,706 # 80030708 <__func__.0+0x36e8>
    8001044e:	0001d517          	auipc	a0,0x1d
    80010452:	eca50513          	addi	a0,a0,-310 # 8002d318 <__func__.0+0x2f8>
    80010456:	1651a0ef          	jal	8002adba <printf>
    8001045a:	00041797          	auipc	a5,0x41
    8001045e:	bb77c783          	lbu	a5,-1097(a5) # 80051011 <excpt+0x1>
    80010462:	0001d597          	auipc	a1,0x1d
    80010466:	e8e58593          	addi	a1,a1,-370 # 8002d2f0 <__func__.0+0x2d0>
    8001046a:	cf89                	beqz	a5,80010484 <illegal_except_4+0xee>
    8001046c:	6418                	ld	a4,8(s0)
    8001046e:	4789                	li	a5,2
    80010470:	0001d597          	auipc	a1,0x1d
    80010474:	e7058593          	addi	a1,a1,-400 # 8002d2e0 <__func__.0+0x2c0>
    80010478:	00f70663          	beq	a4,a5,80010484 <illegal_except_4+0xee>
    8001047c:	0001d597          	auipc	a1,0x1d
    80010480:	e7458593          	addi	a1,a1,-396 # 8002d2f0 <__func__.0+0x2d0>
    80010484:	0001d517          	auipc	a0,0x1d
    80010488:	eac50513          	addi	a0,a0,-340 # 8002d330 <__func__.0+0x310>
    8001048c:	12f1a0ef          	jal	8002adba <printf>
    80010490:	00041797          	auipc	a5,0x41
    80010494:	b817c783          	lbu	a5,-1151(a5) # 80051011 <excpt+0x1>
    80010498:	c789                	beqz	a5,800104a2 <illegal_except_4+0x10c>
    8001049a:	6418                	ld	a4,8(s0)
    8001049c:	4789                	li	a5,2
    8001049e:	00f70c63          	beq	a4,a5,800104b6 <illegal_except_4+0x120>
    800104a2:	0001d517          	auipc	a0,0x1d
    800104a6:	e9650513          	addi	a0,a0,-362 # 8002d338 <__func__.0+0x318>
    800104aa:	1111a0ef          	jal	8002adba <printf>
    800104ae:	02900513          	li	a0,41
    800104b2:	5f6190ef          	jal	80029aa8 <putchar>
    800104b6:	4529                	li	a0,10
    800104b8:	5f0190ef          	jal	80029aa8 <putchar>
    800104bc:	4481                	li	s1,0
    800104be:	00091863          	bnez	s2,800104ce <illegal_except_4+0x138>
    800104c2:	00041797          	auipc	a5,0x41
    800104c6:	b4f7c783          	lbu	a5,-1201(a5) # 80051011 <excpt+0x1>
    800104ca:	0c079f63          	bnez	a5,800105a8 <illegal_except_4+0x212>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    ); 

    goto_priv(PRIV_VS);
    800104ce:	4509                	li	a0,2
    800104d0:	99ff00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800104d4:	89ff00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_MIDELEG);
    800104d8:	303027f3          	csrr	a5,mideleg
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    800104dc:	08200593          	li	a1,130
    800104e0:	00020617          	auipc	a2,0x20
    800104e4:	26060613          	addi	a2,a2,608 # 80030740 <__func__.0+0x3720>
    800104e8:	0001d517          	auipc	a0,0x1d
    800104ec:	e3050513          	addi	a0,a0,-464 # 8002d318 <__func__.0+0x2f8>
    800104f0:	0cb1a0ef          	jal	8002adba <printf>
    800104f4:	00041797          	auipc	a5,0x41
    800104f8:	b1d7c783          	lbu	a5,-1251(a5) # 80051011 <excpt+0x1>
    800104fc:	0001d597          	auipc	a1,0x1d
    80010500:	df458593          	addi	a1,a1,-524 # 8002d2f0 <__func__.0+0x2d0>
    80010504:	cf89                	beqz	a5,8001051e <illegal_except_4+0x188>
    80010506:	6418                	ld	a4,8(s0)
    80010508:	4789                	li	a5,2
    8001050a:	0001d597          	auipc	a1,0x1d
    8001050e:	dd658593          	addi	a1,a1,-554 # 8002d2e0 <__func__.0+0x2c0>
    80010512:	00f70663          	beq	a4,a5,8001051e <illegal_except_4+0x188>
    80010516:	0001d597          	auipc	a1,0x1d
    8001051a:	dda58593          	addi	a1,a1,-550 # 8002d2f0 <__func__.0+0x2d0>
    8001051e:	0001d517          	auipc	a0,0x1d
    80010522:	e1250513          	addi	a0,a0,-494 # 8002d330 <__func__.0+0x310>
    80010526:	0951a0ef          	jal	8002adba <printf>
    8001052a:	00041797          	auipc	a5,0x41
    8001052e:	ae77c783          	lbu	a5,-1305(a5) # 80051011 <excpt+0x1>
    80010532:	c789                	beqz	a5,8001053c <illegal_except_4+0x1a6>
    80010534:	6418                	ld	a4,8(s0)
    80010536:	4789                	li	a5,2
    80010538:	00f70c63          	beq	a4,a5,80010550 <illegal_except_4+0x1ba>
    8001053c:	0001d517          	auipc	a0,0x1d
    80010540:	dfc50513          	addi	a0,a0,-516 # 8002d338 <__func__.0+0x318>
    80010544:	0771a0ef          	jal	8002adba <printf>
    80010548:	02900513          	li	a0,41
    8001054c:	55c190ef          	jal	80029aa8 <putchar>
    80010550:	4529                	li	a0,10
    80010552:	556190ef          	jal	80029aa8 <putchar>
    80010556:	c095                	beqz	s1,8001057a <illegal_except_4+0x1e4>
    80010558:	00041497          	auipc	s1,0x41
    8001055c:	ab94c483          	lbu	s1,-1351(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause==CAUSE_ILI
    );

    TEST_END();
    80010560:	0001d597          	auipc	a1,0x1d
    80010564:	d9058593          	addi	a1,a1,-624 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010568:	cc91                	beqz	s1,80010584 <illegal_except_4+0x1ee>
    8001056a:	6418                	ld	a4,8(s0)
    8001056c:	4789                	li	a5,2
    TEST_END();
    8001056e:	0001d597          	auipc	a1,0x1d
    80010572:	d7258593          	addi	a1,a1,-654 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode access higher privilege csr leads to ili",
    80010576:	00f70763          	beq	a4,a5,80010584 <illegal_except_4+0x1ee>
    8001057a:	4481                	li	s1,0
    TEST_END();
    8001057c:	0001d597          	auipc	a1,0x1d
    80010580:	d7458593          	addi	a1,a1,-652 # 8002d2f0 <__func__.0+0x2d0>
    80010584:	0001d517          	auipc	a0,0x1d
    80010588:	e1450513          	addi	a0,a0,-492 # 8002d398 <__func__.0+0x378>
    8001058c:	02f1a0ef          	jal	8002adba <printf>
    80010590:	4511                	li	a0,4
    80010592:	8ddf00ef          	jal	80000e6e <goto_priv>
    80010596:	9f4f10ef          	jal	8000178a <reset_state>
}
    8001059a:	60e2                	ld	ra,24(sp)
    8001059c:	6442                	ld	s0,16(sp)
    8001059e:	6902                	ld	s2,0(sp)
    800105a0:	8526                	mv	a0,s1
    800105a2:	64a2                	ld	s1,8(sp)
    800105a4:	6105                	addi	sp,sp,32
    800105a6:	8082                	ret
    TEST_ASSERT("hs mode access higher privilege csr leads to ili",
    800105a8:	6404                	ld	s1,8(s0)
    800105aa:	14f9                	addi	s1,s1,-2
    800105ac:	0014b493          	seqz	s1,s1
    800105b0:	bf39                	j	800104ce <illegal_except_4+0x138>
    TEST_ASSERT("m mode access any csr successful",
    800105b2:	0001d517          	auipc	a0,0x1d
    800105b6:	d8650513          	addi	a0,a0,-634 # 8002d338 <__func__.0+0x318>
    800105ba:	0011a0ef          	jal	8002adba <printf>
    800105be:	02900513          	li	a0,41
    800105c2:	4e6190ef          	jal	80029aa8 <putchar>
    800105c6:	bd91                	j	8001041a <illegal_except_4+0x84>

00000000800105c8 <illegal_except_5>:
        excpt.cause==CAUSE_ILI
    );
*/


bool illegal_except_5() {
    800105c8:	1101                	addi	sp,sp,-32

    TEST_START();
    800105ca:	0001b597          	auipc	a1,0x1b
    800105ce:	47658593          	addi	a1,a1,1142 # 8002ba40 <__func__.10>
    800105d2:	0001d517          	auipc	a0,0x1d
    800105d6:	d2e50513          	addi	a0,a0,-722 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_5() {
    800105da:	ec06                	sd	ra,24(sp)
    800105dc:	e822                	sd	s0,16(sp)
    800105de:	e426                	sd	s1,8(sp)
    TEST_START();
    800105e0:	7da1a0ef          	jal	8002adba <printf>
    800105e4:	4529                	li	a0,10
    800105e6:	4c2190ef          	jal	80029aa8 <putchar>
    //TVM=1，在S模式下，读写satp 寄存器
    goto_priv(PRIV_M);
    800105ea:	4511                	li	a0,4
    800105ec:	883f00ef          	jal	80000e6e <goto_priv>
    CSRW(satp, 0x0);
    800105f0:	18005073          	csrwi	satp,0
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    800105f4:	001007b7          	lui	a5,0x100
    800105f8:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    800105fc:	450d                	li	a0,3
    800105fe:	871f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010602:	f70f00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(satp);
    80010606:	180027f3          	csrr	a5,satp
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8001060a:	08200593          	li	a1,130
    8001060e:	00020617          	auipc	a2,0x20
    80010612:	03260613          	addi	a2,a2,50 # 80030640 <__func__.0+0x3620>
    80010616:	0001d517          	auipc	a0,0x1d
    8001061a:	d0250513          	addi	a0,a0,-766 # 8002d318 <__func__.0+0x2f8>
    8001061e:	79c1a0ef          	jal	8002adba <printf>
    80010622:	00041797          	auipc	a5,0x41
    80010626:	9ef7c783          	lbu	a5,-1553(a5) # 80051011 <excpt+0x1>
    8001062a:	00041497          	auipc	s1,0x41
    8001062e:	9e648493          	addi	s1,s1,-1562 # 80051010 <excpt>
    80010632:	0001d597          	auipc	a1,0x1d
    80010636:	cbe58593          	addi	a1,a1,-834 # 8002d2f0 <__func__.0+0x2d0>
    8001063a:	cf89                	beqz	a5,80010654 <illegal_except_5+0x8c>
    8001063c:	6498                	ld	a4,8(s1)
    8001063e:	4789                	li	a5,2
    80010640:	0001d597          	auipc	a1,0x1d
    80010644:	ca058593          	addi	a1,a1,-864 # 8002d2e0 <__func__.0+0x2c0>
    80010648:	00f70663          	beq	a4,a5,80010654 <illegal_except_5+0x8c>
    8001064c:	0001d597          	auipc	a1,0x1d
    80010650:	ca458593          	addi	a1,a1,-860 # 8002d2f0 <__func__.0+0x2d0>
    80010654:	0001d517          	auipc	a0,0x1d
    80010658:	cdc50513          	addi	a0,a0,-804 # 8002d330 <__func__.0+0x310>
    8001065c:	75e1a0ef          	jal	8002adba <printf>
    80010660:	00041797          	auipc	a5,0x41
    80010664:	9b17c783          	lbu	a5,-1615(a5) # 80051011 <excpt+0x1>
    80010668:	c789                	beqz	a5,80010672 <illegal_except_5+0xaa>
    8001066a:	6498                	ld	a4,8(s1)
    8001066c:	4789                	li	a5,2
    8001066e:	00f70c63          	beq	a4,a5,80010686 <illegal_except_5+0xbe>
    80010672:	0001d517          	auipc	a0,0x1d
    80010676:	cc650513          	addi	a0,a0,-826 # 8002d338 <__func__.0+0x318>
    8001067a:	7401a0ef          	jal	8002adba <printf>
    8001067e:	02900513          	li	a0,41
    80010682:	426190ef          	jal	80029aa8 <putchar>
    80010686:	4529                	li	a0,10
    80010688:	420190ef          	jal	80029aa8 <putchar>
    8001068c:	00041417          	auipc	s0,0x41
    80010690:	98544403          	lbu	s0,-1659(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010694:	0001d597          	auipc	a1,0x1d
    80010698:	c5c58593          	addi	a1,a1,-932 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    8001069c:	cc11                	beqz	s0,800106b8 <illegal_except_5+0xf0>
    8001069e:	6498                	ld	a4,8(s1)
    800106a0:	4789                	li	a5,2
    TEST_END();
    800106a2:	0001d597          	auipc	a1,0x1d
    800106a6:	c3e58593          	addi	a1,a1,-962 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("The Satp register was accessed in S mode without virtual memory enabled leads to ili when tvm=1",
    800106aa:	00f70763          	beq	a4,a5,800106b8 <illegal_except_5+0xf0>
    800106ae:	4401                	li	s0,0
    TEST_END();
    800106b0:	0001d597          	auipc	a1,0x1d
    800106b4:	c4058593          	addi	a1,a1,-960 # 8002d2f0 <__func__.0+0x2d0>
    800106b8:	0001d517          	auipc	a0,0x1d
    800106bc:	ce050513          	addi	a0,a0,-800 # 8002d398 <__func__.0+0x378>
    800106c0:	6fa1a0ef          	jal	8002adba <printf>
    800106c4:	4511                	li	a0,4
    800106c6:	fa8f00ef          	jal	80000e6e <goto_priv>
    800106ca:	8c0f10ef          	jal	8000178a <reset_state>
}
    800106ce:	60e2                	ld	ra,24(sp)
    800106d0:	8522                	mv	a0,s0
    800106d2:	6442                	ld	s0,16(sp)
    800106d4:	64a2                	ld	s1,8(sp)
    800106d6:	6105                	addi	sp,sp,32
    800106d8:	8082                	ret

00000000800106da <illegal_except_6>:

bool illegal_except_6() {
    800106da:	1101                	addi	sp,sp,-32

    TEST_START();
    800106dc:	0001b597          	auipc	a1,0x1b
    800106e0:	37c58593          	addi	a1,a1,892 # 8002ba58 <__func__.9>
    800106e4:	0001d517          	auipc	a0,0x1d
    800106e8:	c1c50513          	addi	a0,a0,-996 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_6() {
    800106ec:	ec06                	sd	ra,24(sp)
    800106ee:	e822                	sd	s0,16(sp)
    800106f0:	e426                	sd	s1,8(sp)
    TEST_START();
    800106f2:	6c81a0ef          	jal	8002adba <printf>
    800106f6:	4529                	li	a0,10
    800106f8:	3b0190ef          	jal	80029aa8 <putchar>
    //当mstatus.TVM=1时，在HS模式下执行时尝试读取或写入hgatp
    goto_priv(PRIV_M);
    800106fc:	4511                	li	a0,4
    800106fe:	f70f00ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_TVM);
    80010702:	001007b7          	lui	a5,0x100
    80010706:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001070a:	450d                	li	a0,3
    8001070c:	f62f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010710:	e62f00ef          	jal	80000d72 <test_setup_except_function>
    CSRW(CSR_HGATP,(uint64_t)-1);         //没报错
    80010714:	57fd                	li	a5,-1
    80010716:	68079073          	csrw	hgatp,a5
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    8001071a:	08200593          	li	a1,130
    8001071e:	00020617          	auipc	a2,0x20
    80010722:	05a60613          	addi	a2,a2,90 # 80030778 <__func__.0+0x3758>
    80010726:	0001d517          	auipc	a0,0x1d
    8001072a:	bf250513          	addi	a0,a0,-1038 # 8002d318 <__func__.0+0x2f8>
    8001072e:	68c1a0ef          	jal	8002adba <printf>
    80010732:	00041797          	auipc	a5,0x41
    80010736:	8df7c783          	lbu	a5,-1825(a5) # 80051011 <excpt+0x1>
    8001073a:	00041497          	auipc	s1,0x41
    8001073e:	8d648493          	addi	s1,s1,-1834 # 80051010 <excpt>
    80010742:	0001d597          	auipc	a1,0x1d
    80010746:	bae58593          	addi	a1,a1,-1106 # 8002d2f0 <__func__.0+0x2d0>
    8001074a:	cf89                	beqz	a5,80010764 <illegal_except_6+0x8a>
    8001074c:	6498                	ld	a4,8(s1)
    8001074e:	4789                	li	a5,2
    80010750:	0001d597          	auipc	a1,0x1d
    80010754:	b9058593          	addi	a1,a1,-1136 # 8002d2e0 <__func__.0+0x2c0>
    80010758:	00f70663          	beq	a4,a5,80010764 <illegal_except_6+0x8a>
    8001075c:	0001d597          	auipc	a1,0x1d
    80010760:	b9458593          	addi	a1,a1,-1132 # 8002d2f0 <__func__.0+0x2d0>
    80010764:	0001d517          	auipc	a0,0x1d
    80010768:	bcc50513          	addi	a0,a0,-1076 # 8002d330 <__func__.0+0x310>
    8001076c:	64e1a0ef          	jal	8002adba <printf>
    80010770:	00041797          	auipc	a5,0x41
    80010774:	8a17c783          	lbu	a5,-1887(a5) # 80051011 <excpt+0x1>
    80010778:	c789                	beqz	a5,80010782 <illegal_except_6+0xa8>
    8001077a:	6498                	ld	a4,8(s1)
    8001077c:	4789                	li	a5,2
    8001077e:	00f70c63          	beq	a4,a5,80010796 <illegal_except_6+0xbc>
    80010782:	0001d517          	auipc	a0,0x1d
    80010786:	bb650513          	addi	a0,a0,-1098 # 8002d338 <__func__.0+0x318>
    8001078a:	6301a0ef          	jal	8002adba <printf>
    8001078e:	02900513          	li	a0,41
    80010792:	316190ef          	jal	80029aa8 <putchar>
    80010796:	4529                	li	a0,10
    80010798:	310190ef          	jal	80029aa8 <putchar>
    8001079c:	00041417          	auipc	s0,0x41
    800107a0:	87544403          	lbu	s0,-1931(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800107a4:	0001d597          	auipc	a1,0x1d
    800107a8:	b4c58593          	addi	a1,a1,-1204 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    800107ac:	cc11                	beqz	s0,800107c8 <illegal_except_6+0xee>
    800107ae:	6498                	ld	a4,8(s1)
    800107b0:	4789                	li	a5,2
    TEST_END();
    800107b2:	0001d597          	auipc	a1,0x1d
    800107b6:	b2e58593          	addi	a1,a1,-1234 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("The hgatp register was accessed in hS mode without virtual memory enabled leads to ili when tvm=1",
    800107ba:	00f70763          	beq	a4,a5,800107c8 <illegal_except_6+0xee>
    800107be:	4401                	li	s0,0
    TEST_END();
    800107c0:	0001d597          	auipc	a1,0x1d
    800107c4:	b3058593          	addi	a1,a1,-1232 # 8002d2f0 <__func__.0+0x2d0>
    800107c8:	0001d517          	auipc	a0,0x1d
    800107cc:	bd050513          	addi	a0,a0,-1072 # 8002d398 <__func__.0+0x378>
    800107d0:	5ea1a0ef          	jal	8002adba <printf>
    800107d4:	4511                	li	a0,4
    800107d6:	e98f00ef          	jal	80000e6e <goto_priv>
    800107da:	fb1f00ef          	jal	8000178a <reset_state>
}
    800107de:	60e2                	ld	ra,24(sp)
    800107e0:	8522                	mv	a0,s0
    800107e2:	6442                	ld	s0,16(sp)
    800107e4:	64a2                	ld	s1,8(sp)
    800107e6:	6105                	addi	sp,sp,32
    800107e8:	8082                	ret

00000000800107ea <illegal_except_7>:

bool illegal_except_7() {
    800107ea:	1101                	addi	sp,sp,-32

    TEST_START();
    800107ec:	0001b597          	auipc	a1,0x1b
    800107f0:	28458593          	addi	a1,a1,644 # 8002ba70 <__func__.8>
    800107f4:	0001d517          	auipc	a0,0x1d
    800107f8:	b0c50513          	addi	a0,a0,-1268 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_7() {
    800107fc:	ec06                	sd	ra,24(sp)
    800107fe:	e822                	sd	s0,16(sp)
    80010800:	e426                	sd	s1,8(sp)
    TEST_START();
    80010802:	5b81a0ef          	jal	8002adba <printf>
    80010806:	4529                	li	a0,10
    80010808:	2a0190ef          	jal	80029aa8 <putchar>

    //TVM=1，在S模式下，执行SFENCE.VMA或SINVAL.VMA指令
    goto_priv(PRIV_M);
    8001080c:	4511                	li	a0,4
    8001080e:	e60f00ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010812:	001007b7          	lui	a5,0x100
    80010816:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_HSTATUS,HSTATUS_VTVM);
    8001081a:	6007a073          	csrs	hstatus,a5

    goto_priv(PRIV_HS); 
    8001081e:	450d                	li	a0,3
    80010820:	e4ef00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010824:	d4ef00ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80010828:	12000073          	sfence.vma
    sfence_vma();
    TEST_ASSERT("s mode sfence.vma leads to ili when tvm=1",
    8001082c:	08200593          	li	a1,130
    80010830:	00020617          	auipc	a2,0x20
    80010834:	fb060613          	addi	a2,a2,-80 # 800307e0 <__func__.0+0x37c0>
    80010838:	0001d517          	auipc	a0,0x1d
    8001083c:	ae050513          	addi	a0,a0,-1312 # 8002d318 <__func__.0+0x2f8>
    80010840:	57a1a0ef          	jal	8002adba <printf>
    80010844:	00040797          	auipc	a5,0x40
    80010848:	7cd7c783          	lbu	a5,1997(a5) # 80051011 <excpt+0x1>
    8001084c:	00040497          	auipc	s1,0x40
    80010850:	7c448493          	addi	s1,s1,1988 # 80051010 <excpt>
    80010854:	0001d597          	auipc	a1,0x1d
    80010858:	a9c58593          	addi	a1,a1,-1380 # 8002d2f0 <__func__.0+0x2d0>
    8001085c:	cf89                	beqz	a5,80010876 <illegal_except_7+0x8c>
    8001085e:	6498                	ld	a4,8(s1)
    80010860:	4789                	li	a5,2
    80010862:	0001d597          	auipc	a1,0x1d
    80010866:	a7e58593          	addi	a1,a1,-1410 # 8002d2e0 <__func__.0+0x2c0>
    8001086a:	00f70663          	beq	a4,a5,80010876 <illegal_except_7+0x8c>
    8001086e:	0001d597          	auipc	a1,0x1d
    80010872:	a8258593          	addi	a1,a1,-1406 # 8002d2f0 <__func__.0+0x2d0>
    80010876:	0001d517          	auipc	a0,0x1d
    8001087a:	aba50513          	addi	a0,a0,-1350 # 8002d330 <__func__.0+0x310>
    8001087e:	53c1a0ef          	jal	8002adba <printf>
    80010882:	00040797          	auipc	a5,0x40
    80010886:	78f7c783          	lbu	a5,1935(a5) # 80051011 <excpt+0x1>
    8001088a:	c789                	beqz	a5,80010894 <illegal_except_7+0xaa>
    8001088c:	6498                	ld	a4,8(s1)
    8001088e:	4789                	li	a5,2
    80010890:	00f70c63          	beq	a4,a5,800108a8 <illegal_except_7+0xbe>
    80010894:	0001d517          	auipc	a0,0x1d
    80010898:	aa450513          	addi	a0,a0,-1372 # 8002d338 <__func__.0+0x318>
    8001089c:	51e1a0ef          	jal	8002adba <printf>
    800108a0:	02900513          	li	a0,41
    800108a4:	204190ef          	jal	80029aa8 <putchar>
    800108a8:	4529                	li	a0,10
    800108aa:	1fe190ef          	jal	80029aa8 <putchar>
    800108ae:	00040797          	auipc	a5,0x40
    800108b2:	7637c783          	lbu	a5,1891(a5) # 80051011 <excpt+0x1>
    800108b6:	4401                	li	s0,0
    800108b8:	c789                	beqz	a5,800108c2 <illegal_except_7+0xd8>
    800108ba:	6480                	ld	s0,8(s1)
    800108bc:	1479                	addi	s0,s0,-2
    800108be:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    800108c2:	450d                	li	a0,3
    800108c4:	daaf00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800108c8:	caaf00ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800108cc:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    800108d0:	08200593          	li	a1,130
    800108d4:	00020617          	auipc	a2,0x20
    800108d8:	f3c60613          	addi	a2,a2,-196 # 80030810 <__func__.0+0x37f0>
    800108dc:	0001d517          	auipc	a0,0x1d
    800108e0:	a3c50513          	addi	a0,a0,-1476 # 8002d318 <__func__.0+0x2f8>
    800108e4:	4d61a0ef          	jal	8002adba <printf>
    800108e8:	00040797          	auipc	a5,0x40
    800108ec:	7297c783          	lbu	a5,1833(a5) # 80051011 <excpt+0x1>
    800108f0:	0001d597          	auipc	a1,0x1d
    800108f4:	a0058593          	addi	a1,a1,-1536 # 8002d2f0 <__func__.0+0x2d0>
    800108f8:	cf89                	beqz	a5,80010912 <illegal_except_7+0x128>
    800108fa:	6498                	ld	a4,8(s1)
    800108fc:	4789                	li	a5,2
    800108fe:	0001d597          	auipc	a1,0x1d
    80010902:	9e258593          	addi	a1,a1,-1566 # 8002d2e0 <__func__.0+0x2c0>
    80010906:	00f70663          	beq	a4,a5,80010912 <illegal_except_7+0x128>
    8001090a:	0001d597          	auipc	a1,0x1d
    8001090e:	9e658593          	addi	a1,a1,-1562 # 8002d2f0 <__func__.0+0x2d0>
    80010912:	0001d517          	auipc	a0,0x1d
    80010916:	a1e50513          	addi	a0,a0,-1506 # 8002d330 <__func__.0+0x310>
    8001091a:	4a01a0ef          	jal	8002adba <printf>
    8001091e:	00040797          	auipc	a5,0x40
    80010922:	6f37c783          	lbu	a5,1779(a5) # 80051011 <excpt+0x1>
    80010926:	c789                	beqz	a5,80010930 <illegal_except_7+0x146>
    80010928:	6498                	ld	a4,8(s1)
    8001092a:	4789                	li	a5,2
    8001092c:	00f70c63          	beq	a4,a5,80010944 <illegal_except_7+0x15a>
    80010930:	0001d517          	auipc	a0,0x1d
    80010934:	a0850513          	addi	a0,a0,-1528 # 8002d338 <__func__.0+0x318>
    80010938:	4821a0ef          	jal	8002adba <printf>
    8001093c:	02900513          	li	a0,41
    80010940:	168190ef          	jal	80029aa8 <putchar>
    80010944:	4529                	li	a0,10
    80010946:	162190ef          	jal	80029aa8 <putchar>
    8001094a:	c015                	beqz	s0,8001096e <illegal_except_7+0x184>
    8001094c:	00040417          	auipc	s0,0x40
    80010950:	6c544403          	lbu	s0,1733(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010954:	0001d597          	auipc	a1,0x1d
    80010958:	99c58593          	addi	a1,a1,-1636 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8001095c:	cc11                	beqz	s0,80010978 <illegal_except_7+0x18e>
    8001095e:	6498                	ld	a4,8(s1)
    80010960:	4789                	li	a5,2
    TEST_END();
    80010962:	0001d597          	auipc	a1,0x1d
    80010966:	97e58593          	addi	a1,a1,-1666 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("s mode sinval.vma leads to ili when tvm=1",
    8001096a:	00f70763          	beq	a4,a5,80010978 <illegal_except_7+0x18e>
    8001096e:	4401                	li	s0,0
    TEST_END();
    80010970:	0001d597          	auipc	a1,0x1d
    80010974:	98058593          	addi	a1,a1,-1664 # 8002d2f0 <__func__.0+0x2d0>
    80010978:	0001d517          	auipc	a0,0x1d
    8001097c:	a2050513          	addi	a0,a0,-1504 # 8002d398 <__func__.0+0x378>
    80010980:	43a1a0ef          	jal	8002adba <printf>
    80010984:	4511                	li	a0,4
    80010986:	ce8f00ef          	jal	80000e6e <goto_priv>
    8001098a:	e01f00ef          	jal	8000178a <reset_state>
}
    8001098e:	60e2                	ld	ra,24(sp)
    80010990:	8522                	mv	a0,s0
    80010992:	6442                	ld	s0,16(sp)
    80010994:	64a2                	ld	s1,8(sp)
    80010996:	6105                	addi	sp,sp,32
    80010998:	8082                	ret

000000008001099a <illegal_except_8>:


bool illegal_except_8() {
    8001099a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001099c:	0001b597          	auipc	a1,0x1b
    800109a0:	0ec58593          	addi	a1,a1,236 # 8002ba88 <__func__.7>
    800109a4:	0001d517          	auipc	a0,0x1d
    800109a8:	95c50513          	addi	a0,a0,-1700 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_8() {
    800109ac:	e406                	sd	ra,8(sp)
    800109ae:	e022                	sd	s0,0(sp)
    TEST_START();
    800109b0:	40a1a0ef          	jal	8002adba <printf>
    800109b4:	4529                	li	a0,10
    800109b6:	0f2190ef          	jal	80029aa8 <putchar>
    //M模式下（无论mstatus.TVM的值如何）执行HFENCE.GVMA
    goto_priv(PRIV_M);
    800109ba:	4511                	li	a0,4
    800109bc:	cb2f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800109c0:	bb2f00ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800109c4:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("m mode hfence.gvma successful",
    800109c8:	08200593          	li	a1,130
    800109cc:	00020617          	auipc	a2,0x20
    800109d0:	e7460613          	addi	a2,a2,-396 # 80030840 <__func__.0+0x3820>
    800109d4:	0001d517          	auipc	a0,0x1d
    800109d8:	94450513          	addi	a0,a0,-1724 # 8002d318 <__func__.0+0x2f8>
    800109dc:	3de1a0ef          	jal	8002adba <printf>
    800109e0:	00040797          	auipc	a5,0x40
    800109e4:	6317c783          	lbu	a5,1585(a5) # 80051011 <excpt+0x1>
    800109e8:	0001d597          	auipc	a1,0x1d
    800109ec:	8f858593          	addi	a1,a1,-1800 # 8002d2e0 <__func__.0+0x2c0>
    800109f0:	c789                	beqz	a5,800109fa <illegal_except_8+0x60>
    800109f2:	0001d597          	auipc	a1,0x1d
    800109f6:	8fe58593          	addi	a1,a1,-1794 # 8002d2f0 <__func__.0+0x2d0>
    800109fa:	0001d517          	auipc	a0,0x1d
    800109fe:	93650513          	addi	a0,a0,-1738 # 8002d330 <__func__.0+0x310>
    80010a02:	3b81a0ef          	jal	8002adba <printf>
    80010a06:	00040797          	auipc	a5,0x40
    80010a0a:	60b7c783          	lbu	a5,1547(a5) # 80051011 <excpt+0x1>
    80010a0e:	e7a1                	bnez	a5,80010a56 <illegal_except_8+0xbc>
    80010a10:	4529                	li	a0,10
    80010a12:	096190ef          	jal	80029aa8 <putchar>
    80010a16:	00040797          	auipc	a5,0x40
    80010a1a:	5fb7c783          	lbu	a5,1531(a5) # 80051011 <excpt+0x1>
    80010a1e:	e795                	bnez	a5,80010a4a <illegal_except_8+0xb0>
    80010a20:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80010a22:	0001d597          	auipc	a1,0x1d
    80010a26:	8be58593          	addi	a1,a1,-1858 # 8002d2e0 <__func__.0+0x2c0>
    80010a2a:	0001d517          	auipc	a0,0x1d
    80010a2e:	96e50513          	addi	a0,a0,-1682 # 8002d398 <__func__.0+0x378>
    80010a32:	3881a0ef          	jal	8002adba <printf>
    80010a36:	4511                	li	a0,4
    80010a38:	c36f00ef          	jal	80000e6e <goto_priv>
    80010a3c:	d4ff00ef          	jal	8000178a <reset_state>
}
    80010a40:	60a2                	ld	ra,8(sp)
    80010a42:	8522                	mv	a0,s0
    80010a44:	6402                	ld	s0,0(sp)
    80010a46:	0141                	addi	sp,sp,16
    80010a48:	8082                	ret
    TEST_ASSERT("m mode hfence.gvma successful",
    80010a4a:	4401                	li	s0,0
    TEST_END();
    80010a4c:	0001d597          	auipc	a1,0x1d
    80010a50:	8a458593          	addi	a1,a1,-1884 # 8002d2f0 <__func__.0+0x2d0>
    80010a54:	bfd9                	j	80010a2a <illegal_except_8+0x90>
    TEST_ASSERT("m mode hfence.gvma successful",
    80010a56:	0001d517          	auipc	a0,0x1d
    80010a5a:	8e250513          	addi	a0,a0,-1822 # 8002d338 <__func__.0+0x318>
    80010a5e:	35c1a0ef          	jal	8002adba <printf>
    80010a62:	02900513          	li	a0,41
    80010a66:	042190ef          	jal	80029aa8 <putchar>
    80010a6a:	b75d                	j	80010a10 <illegal_except_8+0x76>

0000000080010a6c <illegal_except_9>:

bool illegal_except_9() {
    80010a6c:	1101                	addi	sp,sp,-32

    TEST_START();
    80010a6e:	0001b597          	auipc	a1,0x1b
    80010a72:	03258593          	addi	a1,a1,50 # 8002baa0 <__func__.6>
    80010a76:	0001d517          	auipc	a0,0x1d
    80010a7a:	88a50513          	addi	a0,a0,-1910 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_9() {
    80010a7e:	ec06                	sd	ra,24(sp)
    80010a80:	e822                	sd	s0,16(sp)
    80010a82:	e426                	sd	s1,8(sp)
    TEST_START();
    80010a84:	3361a0ef          	jal	8002adba <printf>
    80010a88:	4529                	li	a0,10
    80010a8a:	01e190ef          	jal	80029aa8 <putchar>
    //HS模式下mstatus.TVM=0时执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010a8e:	4511                	li	a0,4
    80010a90:	bdef00ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,MSTATUS_TVM);
    80010a94:	001007b7          	lui	a5,0x100
    80010a98:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    80010a9c:	450d                	li	a0,3
    80010a9e:	bd0f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010aa2:	ad0f00ef          	jal	80000d72 <test_setup_except_function>
    80010aa6:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010aaa:	08200593          	li	a1,130
    80010aae:	00020617          	auipc	a2,0x20
    80010ab2:	db260613          	addi	a2,a2,-590 # 80030860 <__func__.0+0x3840>
    80010ab6:	0001d517          	auipc	a0,0x1d
    80010aba:	86250513          	addi	a0,a0,-1950 # 8002d318 <__func__.0+0x2f8>
    80010abe:	2fc1a0ef          	jal	8002adba <printf>
    80010ac2:	00040797          	auipc	a5,0x40
    80010ac6:	54f7c783          	lbu	a5,1359(a5) # 80051011 <excpt+0x1>
    80010aca:	0001d597          	auipc	a1,0x1d
    80010ace:	81658593          	addi	a1,a1,-2026 # 8002d2e0 <__func__.0+0x2c0>
    80010ad2:	c789                	beqz	a5,80010adc <illegal_except_9+0x70>
    80010ad4:	0001d597          	auipc	a1,0x1d
    80010ad8:	81c58593          	addi	a1,a1,-2020 # 8002d2f0 <__func__.0+0x2d0>
    80010adc:	0001d517          	auipc	a0,0x1d
    80010ae0:	85450513          	addi	a0,a0,-1964 # 8002d330 <__func__.0+0x310>
    80010ae4:	2d61a0ef          	jal	8002adba <printf>
    80010ae8:	00040797          	auipc	a5,0x40
    80010aec:	5297c783          	lbu	a5,1321(a5) # 80051011 <excpt+0x1>
    80010af0:	10079063          	bnez	a5,80010bf0 <illegal_except_9+0x184>
    80010af4:	4529                	li	a0,10
    80010af6:	7b3180ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    //mstatus.TVM=1时，在HS模式下执行HFENCE.GVMA
    goto_priv(PRIV_M);
    80010afa:	4511                	li	a0,4
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010afc:	00040417          	auipc	s0,0x40
    80010b00:	51544403          	lbu	s0,1301(s0) # 80051011 <excpt+0x1>
    goto_priv(PRIV_M);
    80010b04:	b6af00ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010b08:	00040497          	auipc	s1,0x40
    80010b0c:	50848493          	addi	s1,s1,1288 # 80051010 <excpt>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010b10:	001007b7          	lui	a5,0x100
    80010b14:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010b18:	450d                	li	a0,3
    80010b1a:	b54f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010b1e:	a54f00ef          	jal	80000d72 <test_setup_except_function>
    80010b22:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010b26:	08200593          	li	a1,130
    80010b2a:	00020617          	auipc	a2,0x20
    80010b2e:	d6e60613          	addi	a2,a2,-658 # 80030898 <__func__.0+0x3878>
    80010b32:	0001c517          	auipc	a0,0x1c
    80010b36:	7e650513          	addi	a0,a0,2022 # 8002d318 <__func__.0+0x2f8>
    80010b3a:	2801a0ef          	jal	8002adba <printf>
    80010b3e:	00040797          	auipc	a5,0x40
    80010b42:	4d37c783          	lbu	a5,1235(a5) # 80051011 <excpt+0x1>
    80010b46:	0001c597          	auipc	a1,0x1c
    80010b4a:	7aa58593          	addi	a1,a1,1962 # 8002d2f0 <__func__.0+0x2d0>
    80010b4e:	cf89                	beqz	a5,80010b68 <illegal_except_9+0xfc>
    80010b50:	6498                	ld	a4,8(s1)
    80010b52:	4789                	li	a5,2
    80010b54:	0001c597          	auipc	a1,0x1c
    80010b58:	78c58593          	addi	a1,a1,1932 # 8002d2e0 <__func__.0+0x2c0>
    80010b5c:	00f70663          	beq	a4,a5,80010b68 <illegal_except_9+0xfc>
    80010b60:	0001c597          	auipc	a1,0x1c
    80010b64:	79058593          	addi	a1,a1,1936 # 8002d2f0 <__func__.0+0x2d0>
    80010b68:	0001c517          	auipc	a0,0x1c
    80010b6c:	7c850513          	addi	a0,a0,1992 # 8002d330 <__func__.0+0x310>
    80010b70:	24a1a0ef          	jal	8002adba <printf>
    80010b74:	00040797          	auipc	a5,0x40
    80010b78:	49d7c783          	lbu	a5,1181(a5) # 80051011 <excpt+0x1>
    80010b7c:	c789                	beqz	a5,80010b86 <illegal_except_9+0x11a>
    80010b7e:	6498                	ld	a4,8(s1)
    80010b80:	4789                	li	a5,2
    80010b82:	00f70c63          	beq	a4,a5,80010b9a <illegal_except_9+0x12e>
    80010b86:	0001c517          	auipc	a0,0x1c
    80010b8a:	7b250513          	addi	a0,a0,1970 # 8002d338 <__func__.0+0x318>
    80010b8e:	22c1a0ef          	jal	8002adba <printf>
    80010b92:	02900513          	li	a0,41
    80010b96:	713180ef          	jal	80029aa8 <putchar>
    80010b9a:	4529                	li	a0,10
    80010b9c:	70d180ef          	jal	80029aa8 <putchar>
    80010ba0:	e015                	bnez	s0,80010bc4 <illegal_except_9+0x158>
    80010ba2:	00040417          	auipc	s0,0x40
    80010ba6:	46f44403          	lbu	s0,1135(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010baa:	0001c597          	auipc	a1,0x1c
    80010bae:	74658593          	addi	a1,a1,1862 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010bb2:	cc11                	beqz	s0,80010bce <illegal_except_9+0x162>
    80010bb4:	6498                	ld	a4,8(s1)
    80010bb6:	4789                	li	a5,2
    TEST_END();
    80010bb8:	0001c597          	auipc	a1,0x1c
    80010bbc:	72858593          	addi	a1,a1,1832 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hfence.gvma successful when mstatus.tvm=1",
    80010bc0:	00f70763          	beq	a4,a5,80010bce <illegal_except_9+0x162>
    80010bc4:	4401                	li	s0,0
    TEST_END();
    80010bc6:	0001c597          	auipc	a1,0x1c
    80010bca:	72a58593          	addi	a1,a1,1834 # 8002d2f0 <__func__.0+0x2d0>
    80010bce:	0001c517          	auipc	a0,0x1c
    80010bd2:	7ca50513          	addi	a0,a0,1994 # 8002d398 <__func__.0+0x378>
    80010bd6:	1e41a0ef          	jal	8002adba <printf>
    80010bda:	4511                	li	a0,4
    80010bdc:	a92f00ef          	jal	80000e6e <goto_priv>
    80010be0:	babf00ef          	jal	8000178a <reset_state>
}
    80010be4:	60e2                	ld	ra,24(sp)
    80010be6:	8522                	mv	a0,s0
    80010be8:	6442                	ld	s0,16(sp)
    80010bea:	64a2                	ld	s1,8(sp)
    80010bec:	6105                	addi	sp,sp,32
    80010bee:	8082                	ret
    TEST_ASSERT("hs mode hfence.gvma leads to ili when mstatus.tvm=0",
    80010bf0:	0001c517          	auipc	a0,0x1c
    80010bf4:	74850513          	addi	a0,a0,1864 # 8002d338 <__func__.0+0x318>
    80010bf8:	1c21a0ef          	jal	8002adba <printf>
    80010bfc:	02900513          	li	a0,41
    80010c00:	6a9180ef          	jal	80029aa8 <putchar>
    80010c04:	bdc5                	j	80010af4 <illegal_except_9+0x88>

0000000080010c06 <illegal_except_10>:

bool illegal_except_10() {
    80010c06:	1101                	addi	sp,sp,-32

    TEST_START();
    80010c08:	0001b597          	auipc	a1,0x1b
    80010c0c:	eb058593          	addi	a1,a1,-336 # 8002bab8 <__func__.5>
    80010c10:	0001c517          	auipc	a0,0x1c
    80010c14:	6f050513          	addi	a0,a0,1776 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_10() {
    80010c18:	ec06                	sd	ra,24(sp)
    80010c1a:	e822                	sd	s0,16(sp)
    80010c1c:	e426                	sd	s1,8(sp)
    TEST_START();
    80010c1e:	19c1a0ef          	jal	8002adba <printf>
    80010c22:	4529                	li	a0,10
    80010c24:	685180ef          	jal	80029aa8 <putchar>
    
    //mstatus.TVM=1，尝试在S模式或HS模式下执行SINVAL.VMA或HINVAL.GVMA
    goto_priv(PRIV_M);
    80010c28:	4511                	li	a0,4
    80010c2a:	a44f00ef          	jal	80000e6e <goto_priv>
    reset_state();
    80010c2e:	b5df00ef          	jal	8000178a <reset_state>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010c32:	001007b7          	lui	a5,0x100
    80010c36:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010c3a:	450d                	li	a0,3
    80010c3c:	a32f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010c40:	932f00ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80010c44:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hs mode sinval.vma successful when mstatus.tvm=1",
    80010c48:	08200593          	li	a1,130
    80010c4c:	00020617          	auipc	a2,0x20
    80010c50:	c8460613          	addi	a2,a2,-892 # 800308d0 <__func__.0+0x38b0>
    80010c54:	0001c517          	auipc	a0,0x1c
    80010c58:	6c450513          	addi	a0,a0,1732 # 8002d318 <__func__.0+0x2f8>
    80010c5c:	15e1a0ef          	jal	8002adba <printf>
    80010c60:	00040797          	auipc	a5,0x40
    80010c64:	3b17c783          	lbu	a5,945(a5) # 80051011 <excpt+0x1>
    80010c68:	00040497          	auipc	s1,0x40
    80010c6c:	3a848493          	addi	s1,s1,936 # 80051010 <excpt>
    80010c70:	0001c597          	auipc	a1,0x1c
    80010c74:	68058593          	addi	a1,a1,1664 # 8002d2f0 <__func__.0+0x2d0>
    80010c78:	cf89                	beqz	a5,80010c92 <illegal_except_10+0x8c>
    80010c7a:	6498                	ld	a4,8(s1)
    80010c7c:	4789                	li	a5,2
    80010c7e:	0001c597          	auipc	a1,0x1c
    80010c82:	66258593          	addi	a1,a1,1634 # 8002d2e0 <__func__.0+0x2c0>
    80010c86:	00f70663          	beq	a4,a5,80010c92 <illegal_except_10+0x8c>
    80010c8a:	0001c597          	auipc	a1,0x1c
    80010c8e:	66658593          	addi	a1,a1,1638 # 8002d2f0 <__func__.0+0x2d0>
    80010c92:	0001c517          	auipc	a0,0x1c
    80010c96:	69e50513          	addi	a0,a0,1694 # 8002d330 <__func__.0+0x310>
    80010c9a:	1201a0ef          	jal	8002adba <printf>
    80010c9e:	00040797          	auipc	a5,0x40
    80010ca2:	3737c783          	lbu	a5,883(a5) # 80051011 <excpt+0x1>
    80010ca6:	c789                	beqz	a5,80010cb0 <illegal_except_10+0xaa>
    80010ca8:	6498                	ld	a4,8(s1)
    80010caa:	4789                	li	a5,2
    80010cac:	00f70c63          	beq	a4,a5,80010cc4 <illegal_except_10+0xbe>
    80010cb0:	0001c517          	auipc	a0,0x1c
    80010cb4:	68850513          	addi	a0,a0,1672 # 8002d338 <__func__.0+0x318>
    80010cb8:	1021a0ef          	jal	8002adba <printf>
    80010cbc:	02900513          	li	a0,41
    80010cc0:	5e9180ef          	jal	80029aa8 <putchar>
    80010cc4:	4529                	li	a0,10
    80010cc6:	5e3180ef          	jal	80029aa8 <putchar>
    80010cca:	00040797          	auipc	a5,0x40
    80010cce:	3477c783          	lbu	a5,839(a5) # 80051011 <excpt+0x1>
    80010cd2:	4401                	li	s0,0
    80010cd4:	c789                	beqz	a5,80010cde <illegal_except_10+0xd8>
    80010cd6:	6480                	ld	s0,8(s1)
    80010cd8:	1479                	addi	s0,s0,-2
    80010cda:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_M);
    80010cde:	4511                	li	a0,4
    80010ce0:	98ef00ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,MSTATUS_TVM);
    80010ce4:	001007b7          	lui	a5,0x100
    80010ce8:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    80010cec:	450d                	li	a0,3
    80010cee:	980f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010cf2:	880f00ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80010cf6:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010cfa:	08200593          	li	a1,130
    80010cfe:	00020617          	auipc	a2,0x20
    80010d02:	c0a60613          	addi	a2,a2,-1014 # 80030908 <__func__.0+0x38e8>
    80010d06:	0001c517          	auipc	a0,0x1c
    80010d0a:	61250513          	addi	a0,a0,1554 # 8002d318 <__func__.0+0x2f8>
    80010d0e:	0ac1a0ef          	jal	8002adba <printf>
    80010d12:	00040797          	auipc	a5,0x40
    80010d16:	2ff7c783          	lbu	a5,767(a5) # 80051011 <excpt+0x1>
    80010d1a:	0001c597          	auipc	a1,0x1c
    80010d1e:	5d658593          	addi	a1,a1,1494 # 8002d2f0 <__func__.0+0x2d0>
    80010d22:	cf89                	beqz	a5,80010d3c <illegal_except_10+0x136>
    80010d24:	6498                	ld	a4,8(s1)
    80010d26:	4789                	li	a5,2
    80010d28:	0001c597          	auipc	a1,0x1c
    80010d2c:	5b858593          	addi	a1,a1,1464 # 8002d2e0 <__func__.0+0x2c0>
    80010d30:	00f70663          	beq	a4,a5,80010d3c <illegal_except_10+0x136>
    80010d34:	0001c597          	auipc	a1,0x1c
    80010d38:	5bc58593          	addi	a1,a1,1468 # 8002d2f0 <__func__.0+0x2d0>
    80010d3c:	0001c517          	auipc	a0,0x1c
    80010d40:	5f450513          	addi	a0,a0,1524 # 8002d330 <__func__.0+0x310>
    80010d44:	0761a0ef          	jal	8002adba <printf>
    80010d48:	00040797          	auipc	a5,0x40
    80010d4c:	2c97c783          	lbu	a5,713(a5) # 80051011 <excpt+0x1>
    80010d50:	c789                	beqz	a5,80010d5a <illegal_except_10+0x154>
    80010d52:	6498                	ld	a4,8(s1)
    80010d54:	4789                	li	a5,2
    80010d56:	00f70c63          	beq	a4,a5,80010d6e <illegal_except_10+0x168>
    80010d5a:	0001c517          	auipc	a0,0x1c
    80010d5e:	5de50513          	addi	a0,a0,1502 # 8002d338 <__func__.0+0x318>
    80010d62:	0581a0ef          	jal	8002adba <printf>
    80010d66:	02900513          	li	a0,41
    80010d6a:	53f180ef          	jal	80029aa8 <putchar>
    80010d6e:	4529                	li	a0,10
    80010d70:	539180ef          	jal	80029aa8 <putchar>
    80010d74:	c015                	beqz	s0,80010d98 <illegal_except_10+0x192>
    80010d76:	00040417          	auipc	s0,0x40
    80010d7a:	29b44403          	lbu	s0,667(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010d7e:	0001c597          	auipc	a1,0x1c
    80010d82:	57258593          	addi	a1,a1,1394 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010d86:	cc11                	beqz	s0,80010da2 <illegal_except_10+0x19c>
    80010d88:	6498                	ld	a4,8(s1)
    80010d8a:	4789                	li	a5,2
    TEST_END();
    80010d8c:	0001c597          	auipc	a1,0x1c
    80010d90:	55458593          	addi	a1,a1,1364 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hinval.gvma successful when mstatus.tvm=1",
    80010d94:	00f70763          	beq	a4,a5,80010da2 <illegal_except_10+0x19c>
    80010d98:	4401                	li	s0,0
    TEST_END();
    80010d9a:	0001c597          	auipc	a1,0x1c
    80010d9e:	55658593          	addi	a1,a1,1366 # 8002d2f0 <__func__.0+0x2d0>
    80010da2:	0001c517          	auipc	a0,0x1c
    80010da6:	5f650513          	addi	a0,a0,1526 # 8002d398 <__func__.0+0x378>
    80010daa:	0101a0ef          	jal	8002adba <printf>
    80010dae:	4511                	li	a0,4
    80010db0:	8bef00ef          	jal	80000e6e <goto_priv>
    80010db4:	9d7f00ef          	jal	8000178a <reset_state>
}
    80010db8:	60e2                	ld	ra,24(sp)
    80010dba:	8522                	mv	a0,s0
    80010dbc:	6442                	ld	s0,16(sp)
    80010dbe:	64a2                	ld	s1,8(sp)
    80010dc0:	6105                	addi	sp,sp,32
    80010dc2:	8082                	ret

0000000080010dc4 <illegal_except_11>:

bool illegal_except_11() {
    80010dc4:	1101                	addi	sp,sp,-32

    TEST_START();
    80010dc6:	0001b597          	auipc	a1,0x1b
    80010dca:	d0a58593          	addi	a1,a1,-758 # 8002bad0 <__func__.4>
    80010dce:	0001c517          	auipc	a0,0x1c
    80010dd2:	53250513          	addi	a0,a0,1330 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_11() {
    80010dd6:	ec06                	sd	ra,24(sp)
    80010dd8:	e822                	sd	s0,16(sp)
    80010dda:	e426                	sd	s1,8(sp)
    TEST_START();
    80010ddc:	7df190ef          	jal	8002adba <printf>
    80010de0:	4529                	li	a0,10
    80010de2:	4c7180ef          	jal	80029aa8 <putchar>

    //U模式下，执行HFENCE.VVMA或HFENCE.GVMA
    TEST_SETUP_EXCEPT();
    80010de6:	f8def0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80010dea:	4511                	li	a0,4
    80010dec:	882f00ef          	jal	80000e6e <goto_priv>
    reset_state();
    80010df0:	99bf00ef          	jal	8000178a <reset_state>
    goto_priv(PRIV_HU);
    80010df4:	4505                	li	a0,1
    80010df6:	878f00ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010dfa:	f79ef0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80010dfe:	22000073          	.insn	4, 0x22000073
    hfence_vvma();
    TEST_ASSERT("hu mode hfence.vvma cause to illegal instruction interrupt",
    80010e02:	08200593          	li	a1,130
    80010e06:	00020617          	auipc	a2,0x20
    80010e0a:	b3a60613          	addi	a2,a2,-1222 # 80030940 <__func__.0+0x3920>
    80010e0e:	0001c517          	auipc	a0,0x1c
    80010e12:	50a50513          	addi	a0,a0,1290 # 8002d318 <__func__.0+0x2f8>
    80010e16:	7a5190ef          	jal	8002adba <printf>
    80010e1a:	00040797          	auipc	a5,0x40
    80010e1e:	1f77c783          	lbu	a5,503(a5) # 80051011 <excpt+0x1>
    80010e22:	00040497          	auipc	s1,0x40
    80010e26:	1ee48493          	addi	s1,s1,494 # 80051010 <excpt>
    80010e2a:	0001c597          	auipc	a1,0x1c
    80010e2e:	4c658593          	addi	a1,a1,1222 # 8002d2f0 <__func__.0+0x2d0>
    80010e32:	cf89                	beqz	a5,80010e4c <illegal_except_11+0x88>
    80010e34:	6498                	ld	a4,8(s1)
    80010e36:	4789                	li	a5,2
    80010e38:	0001c597          	auipc	a1,0x1c
    80010e3c:	4a858593          	addi	a1,a1,1192 # 8002d2e0 <__func__.0+0x2c0>
    80010e40:	00f70663          	beq	a4,a5,80010e4c <illegal_except_11+0x88>
    80010e44:	0001c597          	auipc	a1,0x1c
    80010e48:	4ac58593          	addi	a1,a1,1196 # 8002d2f0 <__func__.0+0x2d0>
    80010e4c:	0001c517          	auipc	a0,0x1c
    80010e50:	4e450513          	addi	a0,a0,1252 # 8002d330 <__func__.0+0x310>
    80010e54:	767190ef          	jal	8002adba <printf>
    80010e58:	00040797          	auipc	a5,0x40
    80010e5c:	1b97c783          	lbu	a5,441(a5) # 80051011 <excpt+0x1>
    80010e60:	c789                	beqz	a5,80010e6a <illegal_except_11+0xa6>
    80010e62:	6498                	ld	a4,8(s1)
    80010e64:	4789                	li	a5,2
    80010e66:	00f70c63          	beq	a4,a5,80010e7e <illegal_except_11+0xba>
    80010e6a:	0001c517          	auipc	a0,0x1c
    80010e6e:	4ce50513          	addi	a0,a0,1230 # 8002d338 <__func__.0+0x318>
    80010e72:	749190ef          	jal	8002adba <printf>
    80010e76:	02900513          	li	a0,41
    80010e7a:	42f180ef          	jal	80029aa8 <putchar>
    80010e7e:	4529                	li	a0,10
    80010e80:	429180ef          	jal	80029aa8 <putchar>
    80010e84:	00040797          	auipc	a5,0x40
    80010e88:	18d7c783          	lbu	a5,397(a5) # 80051011 <excpt+0x1>
    80010e8c:	4401                	li	s0,0
    80010e8e:	c789                	beqz	a5,80010e98 <illegal_except_11+0xd4>
    80010e90:	6480                	ld	s0,8(s1)
    80010e92:	1479                	addi	s0,s0,-2
    80010e94:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80010e98:	edbef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80010e9c:	4511                	li	a0,4
    80010e9e:	fd1ef0ef          	jal	80000e6e <goto_priv>
    reset_state();
    80010ea2:	8e9f00ef          	jal	8000178a <reset_state>
    goto_priv(PRIV_HU);
    80010ea6:	4505                	li	a0,1
    80010ea8:	fc7ef0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010eac:	ec7ef0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80010eb0:	62000073          	.insn	4, 0x62000073
    hfence_gvma();
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010eb4:	08200593          	li	a1,130
    80010eb8:	00020617          	auipc	a2,0x20
    80010ebc:	ac860613          	addi	a2,a2,-1336 # 80030980 <__func__.0+0x3960>
    80010ec0:	0001c517          	auipc	a0,0x1c
    80010ec4:	45850513          	addi	a0,a0,1112 # 8002d318 <__func__.0+0x2f8>
    80010ec8:	6f3190ef          	jal	8002adba <printf>
    80010ecc:	00040797          	auipc	a5,0x40
    80010ed0:	1457c783          	lbu	a5,325(a5) # 80051011 <excpt+0x1>
    80010ed4:	0001c597          	auipc	a1,0x1c
    80010ed8:	41c58593          	addi	a1,a1,1052 # 8002d2f0 <__func__.0+0x2d0>
    80010edc:	cf89                	beqz	a5,80010ef6 <illegal_except_11+0x132>
    80010ede:	6498                	ld	a4,8(s1)
    80010ee0:	4789                	li	a5,2
    80010ee2:	0001c597          	auipc	a1,0x1c
    80010ee6:	3fe58593          	addi	a1,a1,1022 # 8002d2e0 <__func__.0+0x2c0>
    80010eea:	00f70663          	beq	a4,a5,80010ef6 <illegal_except_11+0x132>
    80010eee:	0001c597          	auipc	a1,0x1c
    80010ef2:	40258593          	addi	a1,a1,1026 # 8002d2f0 <__func__.0+0x2d0>
    80010ef6:	0001c517          	auipc	a0,0x1c
    80010efa:	43a50513          	addi	a0,a0,1082 # 8002d330 <__func__.0+0x310>
    80010efe:	6bd190ef          	jal	8002adba <printf>
    80010f02:	00040797          	auipc	a5,0x40
    80010f06:	10f7c783          	lbu	a5,271(a5) # 80051011 <excpt+0x1>
    80010f0a:	c789                	beqz	a5,80010f14 <illegal_except_11+0x150>
    80010f0c:	6498                	ld	a4,8(s1)
    80010f0e:	4789                	li	a5,2
    80010f10:	00f70c63          	beq	a4,a5,80010f28 <illegal_except_11+0x164>
    80010f14:	0001c517          	auipc	a0,0x1c
    80010f18:	42450513          	addi	a0,a0,1060 # 8002d338 <__func__.0+0x318>
    80010f1c:	69f190ef          	jal	8002adba <printf>
    80010f20:	02900513          	li	a0,41
    80010f24:	385180ef          	jal	80029aa8 <putchar>
    80010f28:	4529                	li	a0,10
    80010f2a:	37f180ef          	jal	80029aa8 <putchar>
    80010f2e:	c015                	beqz	s0,80010f52 <illegal_except_11+0x18e>
    80010f30:	00040417          	auipc	s0,0x40
    80010f34:	0e144403          	lbu	s0,225(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80010f38:	0001c597          	auipc	a1,0x1c
    80010f3c:	3b858593          	addi	a1,a1,952 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010f40:	cc11                	beqz	s0,80010f5c <illegal_except_11+0x198>
    80010f42:	6498                	ld	a4,8(s1)
    80010f44:	4789                	li	a5,2
    TEST_END();
    80010f46:	0001c597          	auipc	a1,0x1c
    80010f4a:	39a58593          	addi	a1,a1,922 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hfence.gvma cause to illegal instruction interrupt",
    80010f4e:	00f70763          	beq	a4,a5,80010f5c <illegal_except_11+0x198>
    80010f52:	4401                	li	s0,0
    TEST_END();
    80010f54:	0001c597          	auipc	a1,0x1c
    80010f58:	39c58593          	addi	a1,a1,924 # 8002d2f0 <__func__.0+0x2d0>
    80010f5c:	0001c517          	auipc	a0,0x1c
    80010f60:	43c50513          	addi	a0,a0,1084 # 8002d398 <__func__.0+0x378>
    80010f64:	657190ef          	jal	8002adba <printf>
    80010f68:	4511                	li	a0,4
    80010f6a:	f05ef0ef          	jal	80000e6e <goto_priv>
    80010f6e:	81df00ef          	jal	8000178a <reset_state>
}
    80010f72:	60e2                	ld	ra,24(sp)
    80010f74:	8522                	mv	a0,s0
    80010f76:	6442                	ld	s0,16(sp)
    80010f78:	64a2                	ld	s1,8(sp)
    80010f7a:	6105                	addi	sp,sp,32
    80010f7c:	8082                	ret

0000000080010f7e <illegal_except_12>:

bool illegal_except_12() {
    80010f7e:	1101                	addi	sp,sp,-32

    TEST_START();
    80010f80:	0001b597          	auipc	a1,0x1b
    80010f84:	b6858593          	addi	a1,a1,-1176 # 8002bae8 <__func__.3>
    80010f88:	0001c517          	auipc	a0,0x1c
    80010f8c:	37850513          	addi	a0,a0,888 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_12() {
    80010f90:	ec06                	sd	ra,24(sp)
    80010f92:	e822                	sd	s0,16(sp)
    80010f94:	e426                	sd	s1,8(sp)
    TEST_START();
    80010f96:	625190ef          	jal	8002adba <printf>
    80010f9a:	4529                	li	a0,10
    80010f9c:	30d180ef          	jal	80029aa8 <putchar>

    //在U模式下执行SINVAL.VMA、HINVAL.VVMA和HINVAL.GVMA中的任何一条
    TEST_SETUP_EXCEPT();
    80010fa0:	dd3ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80010fa4:	4511                	li	a0,4
    80010fa6:	ec9ef0ef          	jal	80000e6e <goto_priv>
    reset_state();
    80010faa:	fe0f00ef          	jal	8000178a <reset_state>
    goto_priv(PRIV_HU);
    80010fae:	4505                	li	a0,1
    80010fb0:	ebfef0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80010fb4:	dbfef0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80010fb8:	16000073          	.insn	4, 0x16000073
    Sinval_vma();
    TEST_ASSERT("hu mode sinval.vma cause to illegal instruction interrupt",
    80010fbc:	08200593          	li	a1,130
    80010fc0:	00020617          	auipc	a2,0x20
    80010fc4:	a0060613          	addi	a2,a2,-1536 # 800309c0 <__func__.0+0x39a0>
    80010fc8:	0001c517          	auipc	a0,0x1c
    80010fcc:	35050513          	addi	a0,a0,848 # 8002d318 <__func__.0+0x2f8>
    80010fd0:	5eb190ef          	jal	8002adba <printf>
    80010fd4:	00040797          	auipc	a5,0x40
    80010fd8:	03d7c783          	lbu	a5,61(a5) # 80051011 <excpt+0x1>
    80010fdc:	00040497          	auipc	s1,0x40
    80010fe0:	03448493          	addi	s1,s1,52 # 80051010 <excpt>
    80010fe4:	0001c597          	auipc	a1,0x1c
    80010fe8:	30c58593          	addi	a1,a1,780 # 8002d2f0 <__func__.0+0x2d0>
    80010fec:	cf89                	beqz	a5,80011006 <illegal_except_12+0x88>
    80010fee:	6498                	ld	a4,8(s1)
    80010ff0:	4789                	li	a5,2
    80010ff2:	0001c597          	auipc	a1,0x1c
    80010ff6:	2ee58593          	addi	a1,a1,750 # 8002d2e0 <__func__.0+0x2c0>
    80010ffa:	00f70663          	beq	a4,a5,80011006 <illegal_except_12+0x88>
    80010ffe:	0001c597          	auipc	a1,0x1c
    80011002:	2f258593          	addi	a1,a1,754 # 8002d2f0 <__func__.0+0x2d0>
    80011006:	0001c517          	auipc	a0,0x1c
    8001100a:	32a50513          	addi	a0,a0,810 # 8002d330 <__func__.0+0x310>
    8001100e:	5ad190ef          	jal	8002adba <printf>
    80011012:	00040797          	auipc	a5,0x40
    80011016:	fff7c783          	lbu	a5,-1(a5) # 80051011 <excpt+0x1>
    8001101a:	c789                	beqz	a5,80011024 <illegal_except_12+0xa6>
    8001101c:	6498                	ld	a4,8(s1)
    8001101e:	4789                	li	a5,2
    80011020:	00f70c63          	beq	a4,a5,80011038 <illegal_except_12+0xba>
    80011024:	0001c517          	auipc	a0,0x1c
    80011028:	31450513          	addi	a0,a0,788 # 8002d338 <__func__.0+0x318>
    8001102c:	58f190ef          	jal	8002adba <printf>
    80011030:	02900513          	li	a0,41
    80011034:	275180ef          	jal	80029aa8 <putchar>
    80011038:	4529                	li	a0,10
    8001103a:	26f180ef          	jal	80029aa8 <putchar>
    8001103e:	00040797          	auipc	a5,0x40
    80011042:	fd37c783          	lbu	a5,-45(a5) # 80051011 <excpt+0x1>
    80011046:	4401                	li	s0,0
    80011048:	c789                	beqz	a5,80011052 <illegal_except_12+0xd4>
    8001104a:	6480                	ld	s0,8(s1)
    8001104c:	1479                	addi	s0,s0,-2
    8001104e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    80011052:	d21ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011056:	4511                	li	a0,4
    80011058:	e17ef0ef          	jal	80000e6e <goto_priv>
    reset_state();
    8001105c:	f2ef00ef          	jal	8000178a <reset_state>
    goto_priv(PRIV_HU);
    80011060:	4505                	li	a0,1
    80011062:	e0def0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80011066:	d0def0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    8001106a:	66000073          	.insn	4, 0x66000073
    hinval_gvma();
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    8001106e:	08200593          	li	a1,130
    80011072:	00020617          	auipc	a2,0x20
    80011076:	98e60613          	addi	a2,a2,-1650 # 80030a00 <__func__.0+0x39e0>
    8001107a:	0001c517          	auipc	a0,0x1c
    8001107e:	29e50513          	addi	a0,a0,670 # 8002d318 <__func__.0+0x2f8>
    80011082:	539190ef          	jal	8002adba <printf>
    80011086:	00040797          	auipc	a5,0x40
    8001108a:	f8b7c783          	lbu	a5,-117(a5) # 80051011 <excpt+0x1>
    8001108e:	0001c597          	auipc	a1,0x1c
    80011092:	26258593          	addi	a1,a1,610 # 8002d2f0 <__func__.0+0x2d0>
    80011096:	cf89                	beqz	a5,800110b0 <illegal_except_12+0x132>
    80011098:	6498                	ld	a4,8(s1)
    8001109a:	4789                	li	a5,2
    8001109c:	0001c597          	auipc	a1,0x1c
    800110a0:	24458593          	addi	a1,a1,580 # 8002d2e0 <__func__.0+0x2c0>
    800110a4:	00f70663          	beq	a4,a5,800110b0 <illegal_except_12+0x132>
    800110a8:	0001c597          	auipc	a1,0x1c
    800110ac:	24858593          	addi	a1,a1,584 # 8002d2f0 <__func__.0+0x2d0>
    800110b0:	0001c517          	auipc	a0,0x1c
    800110b4:	28050513          	addi	a0,a0,640 # 8002d330 <__func__.0+0x310>
    800110b8:	503190ef          	jal	8002adba <printf>
    800110bc:	00040797          	auipc	a5,0x40
    800110c0:	f557c783          	lbu	a5,-171(a5) # 80051011 <excpt+0x1>
    800110c4:	c789                	beqz	a5,800110ce <illegal_except_12+0x150>
    800110c6:	6498                	ld	a4,8(s1)
    800110c8:	4789                	li	a5,2
    800110ca:	00f70c63          	beq	a4,a5,800110e2 <illegal_except_12+0x164>
    800110ce:	0001c517          	auipc	a0,0x1c
    800110d2:	26a50513          	addi	a0,a0,618 # 8002d338 <__func__.0+0x318>
    800110d6:	4e5190ef          	jal	8002adba <printf>
    800110da:	02900513          	li	a0,41
    800110de:	1cb180ef          	jal	80029aa8 <putchar>
    800110e2:	4529                	li	a0,10
    800110e4:	1c5180ef          	jal	80029aa8 <putchar>
    800110e8:	c801                	beqz	s0,800110f8 <illegal_except_12+0x17a>
    800110ea:	00040797          	auipc	a5,0x40
    800110ee:	f277c783          	lbu	a5,-217(a5) # 80051011 <excpt+0x1>
    800110f2:	4401                	li	s0,0
    800110f4:	0e079563          	bnez	a5,800111de <illegal_except_12+0x260>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_SETUP_EXCEPT();
    800110f8:	c7bef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800110fc:	4511                	li	a0,4
    800110fe:	d71ef0ef          	jal	80000e6e <goto_priv>
    reset_state();
    80011102:	e88f00ef          	jal	8000178a <reset_state>
    goto_priv(PRIV_HU);
    80011106:	4505                	li	a0,1
    80011108:	d67ef0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8001110c:	c67ef0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80011110:	26000073          	.insn	4, 0x26000073
    hinval_vvma();
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    80011114:	08200593          	li	a1,130
    80011118:	00020617          	auipc	a2,0x20
    8001111c:	92860613          	addi	a2,a2,-1752 # 80030a40 <__func__.0+0x3a20>
    80011120:	0001c517          	auipc	a0,0x1c
    80011124:	1f850513          	addi	a0,a0,504 # 8002d318 <__func__.0+0x2f8>
    80011128:	493190ef          	jal	8002adba <printf>
    8001112c:	00040797          	auipc	a5,0x40
    80011130:	ee57c783          	lbu	a5,-283(a5) # 80051011 <excpt+0x1>
    80011134:	0001c597          	auipc	a1,0x1c
    80011138:	1bc58593          	addi	a1,a1,444 # 8002d2f0 <__func__.0+0x2d0>
    8001113c:	cf89                	beqz	a5,80011156 <illegal_except_12+0x1d8>
    8001113e:	6498                	ld	a4,8(s1)
    80011140:	4789                	li	a5,2
    80011142:	0001c597          	auipc	a1,0x1c
    80011146:	19e58593          	addi	a1,a1,414 # 8002d2e0 <__func__.0+0x2c0>
    8001114a:	00f70663          	beq	a4,a5,80011156 <illegal_except_12+0x1d8>
    8001114e:	0001c597          	auipc	a1,0x1c
    80011152:	1a258593          	addi	a1,a1,418 # 8002d2f0 <__func__.0+0x2d0>
    80011156:	0001c517          	auipc	a0,0x1c
    8001115a:	1da50513          	addi	a0,a0,474 # 8002d330 <__func__.0+0x310>
    8001115e:	45d190ef          	jal	8002adba <printf>
    80011162:	00040797          	auipc	a5,0x40
    80011166:	eaf7c783          	lbu	a5,-337(a5) # 80051011 <excpt+0x1>
    8001116a:	c789                	beqz	a5,80011174 <illegal_except_12+0x1f6>
    8001116c:	6498                	ld	a4,8(s1)
    8001116e:	4789                	li	a5,2
    80011170:	00f70c63          	beq	a4,a5,80011188 <illegal_except_12+0x20a>
    80011174:	0001c517          	auipc	a0,0x1c
    80011178:	1c450513          	addi	a0,a0,452 # 8002d338 <__func__.0+0x318>
    8001117c:	43f190ef          	jal	8002adba <printf>
    80011180:	02900513          	li	a0,41
    80011184:	125180ef          	jal	80029aa8 <putchar>
    80011188:	4529                	li	a0,10
    8001118a:	11f180ef          	jal	80029aa8 <putchar>
    8001118e:	c015                	beqz	s0,800111b2 <illegal_except_12+0x234>
    80011190:	00040417          	auipc	s0,0x40
    80011194:	e8144403          	lbu	s0,-383(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80011198:	0001c597          	auipc	a1,0x1c
    8001119c:	15858593          	addi	a1,a1,344 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    800111a0:	cc11                	beqz	s0,800111bc <illegal_except_12+0x23e>
    800111a2:	6498                	ld	a4,8(s1)
    800111a4:	4789                	li	a5,2
    TEST_END();
    800111a6:	0001c597          	auipc	a1,0x1c
    800111aa:	13a58593          	addi	a1,a1,314 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode hinval.vvma cause to illegal instruction interrupt",
    800111ae:	00f70763          	beq	a4,a5,800111bc <illegal_except_12+0x23e>
    800111b2:	4401                	li	s0,0
    TEST_END();
    800111b4:	0001c597          	auipc	a1,0x1c
    800111b8:	13c58593          	addi	a1,a1,316 # 8002d2f0 <__func__.0+0x2d0>
    800111bc:	0001c517          	auipc	a0,0x1c
    800111c0:	1dc50513          	addi	a0,a0,476 # 8002d398 <__func__.0+0x378>
    800111c4:	3f7190ef          	jal	8002adba <printf>
    800111c8:	4511                	li	a0,4
    800111ca:	ca5ef0ef          	jal	80000e6e <goto_priv>
    800111ce:	dbcf00ef          	jal	8000178a <reset_state>
}
    800111d2:	60e2                	ld	ra,24(sp)
    800111d4:	8522                	mv	a0,s0
    800111d6:	6442                	ld	s0,16(sp)
    800111d8:	64a2                	ld	s1,8(sp)
    800111da:	6105                	addi	sp,sp,32
    800111dc:	8082                	ret
    TEST_ASSERT("hu mode hinval.gvma cause to illegal instruction interrupt",
    800111de:	6480                	ld	s0,8(s1)
    800111e0:	1479                	addi	s0,s0,-2
    800111e2:	00143413          	seqz	s0,s0
    800111e6:	bf09                	j	800110f8 <illegal_except_12+0x17a>

00000000800111e8 <illegal_except_13>:


bool illegal_except_13() {
    800111e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800111ea:	0001b597          	auipc	a1,0x1b
    800111ee:	91658593          	addi	a1,a1,-1770 # 8002bb00 <__func__.2>
    800111f2:	0001c517          	auipc	a0,0x1c
    800111f6:	10e50513          	addi	a0,a0,270 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_13() {
    800111fa:	ec06                	sd	ra,24(sp)
    800111fc:	e822                	sd	s0,16(sp)
    800111fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80011200:	3bb190ef          	jal	8002adba <printf>
    80011204:	4529                	li	a0,10
    80011206:	0a3180ef          	jal	80029aa8 <putchar>
    //satp.MODE只读0，执行sfence.vma
    TEST_SETUP_EXCEPT();
    8001120a:	b69ef0ef          	jal	80000d72 <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001120e:	450d                	li	a0,3
    80011210:	c5fef0ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_SATP,0ULL);
    80011214:	18005073          	csrwi	satp,0
    asm volatile(
    80011218:	12000073          	sfence.vma
    sfence_vma();
    printf("%d",excpt.triggered);
    8001121c:	00040597          	auipc	a1,0x40
    80011220:	df55c583          	lbu	a1,-523(a1) # 80051011 <excpt+0x1>
    80011224:	00020517          	auipc	a0,0x20
    80011228:	85c50513          	addi	a0,a0,-1956 # 80030a80 <__func__.0+0x3a60>
    8001122c:	00040497          	auipc	s1,0x40
    80011230:	de448493          	addi	s1,s1,-540 # 80051010 <excpt>
    80011234:	387190ef          	jal	8002adba <printf>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    80011238:	08200593          	li	a1,130
    8001123c:	00020617          	auipc	a2,0x20
    80011240:	84c60613          	addi	a2,a2,-1972 # 80030a88 <__func__.0+0x3a68>
    80011244:	0001c517          	auipc	a0,0x1c
    80011248:	0d450513          	addi	a0,a0,212 # 8002d318 <__func__.0+0x2f8>
    8001124c:	36f190ef          	jal	8002adba <printf>
    80011250:	00040797          	auipc	a5,0x40
    80011254:	dc17c783          	lbu	a5,-575(a5) # 80051011 <excpt+0x1>
    80011258:	0001c597          	auipc	a1,0x1c
    8001125c:	09858593          	addi	a1,a1,152 # 8002d2f0 <__func__.0+0x2d0>
    80011260:	cf89                	beqz	a5,8001127a <illegal_except_13+0x92>
    80011262:	6498                	ld	a4,8(s1)
    80011264:	4789                	li	a5,2
    80011266:	0001c597          	auipc	a1,0x1c
    8001126a:	07a58593          	addi	a1,a1,122 # 8002d2e0 <__func__.0+0x2c0>
    8001126e:	00f70663          	beq	a4,a5,8001127a <illegal_except_13+0x92>
    80011272:	0001c597          	auipc	a1,0x1c
    80011276:	07e58593          	addi	a1,a1,126 # 8002d2f0 <__func__.0+0x2d0>
    8001127a:	0001c517          	auipc	a0,0x1c
    8001127e:	0b650513          	addi	a0,a0,182 # 8002d330 <__func__.0+0x310>
    80011282:	339190ef          	jal	8002adba <printf>
    80011286:	00040797          	auipc	a5,0x40
    8001128a:	d8b7c783          	lbu	a5,-629(a5) # 80051011 <excpt+0x1>
    8001128e:	c789                	beqz	a5,80011298 <illegal_except_13+0xb0>
    80011290:	6498                	ld	a4,8(s1)
    80011292:	4789                	li	a5,2
    80011294:	00f70c63          	beq	a4,a5,800112ac <illegal_except_13+0xc4>
    80011298:	0001c517          	auipc	a0,0x1c
    8001129c:	0a050513          	addi	a0,a0,160 # 8002d338 <__func__.0+0x318>
    800112a0:	31b190ef          	jal	8002adba <printf>
    800112a4:	02900513          	li	a0,41
    800112a8:	001180ef          	jal	80029aa8 <putchar>
    800112ac:	4529                	li	a0,10
    800112ae:	7fa180ef          	jal	80029aa8 <putchar>
    800112b2:	00040417          	auipc	s0,0x40
    800112b6:	d5f44403          	lbu	s0,-673(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800112ba:	0001c597          	auipc	a1,0x1c
    800112be:	03658593          	addi	a1,a1,54 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    800112c2:	cc11                	beqz	s0,800112de <illegal_except_13+0xf6>
    800112c4:	6498                	ld	a4,8(s1)
    800112c6:	4789                	li	a5,2
    TEST_END();
    800112c8:	0001c597          	auipc	a1,0x1c
    800112cc:	01858593          	addi	a1,a1,24 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sfence.vma when satp.mode=0 cause to illegal instruction interrupt",
    800112d0:	00f70763          	beq	a4,a5,800112de <illegal_except_13+0xf6>
    800112d4:	4401                	li	s0,0
    TEST_END();
    800112d6:	0001c597          	auipc	a1,0x1c
    800112da:	01a58593          	addi	a1,a1,26 # 8002d2f0 <__func__.0+0x2d0>
    800112de:	0001c517          	auipc	a0,0x1c
    800112e2:	0ba50513          	addi	a0,a0,186 # 8002d398 <__func__.0+0x378>
    800112e6:	2d5190ef          	jal	8002adba <printf>
    800112ea:	4511                	li	a0,4
    800112ec:	b83ef0ef          	jal	80000e6e <goto_priv>
    800112f0:	c9af00ef          	jal	8000178a <reset_state>
}
    800112f4:	60e2                	ld	ra,24(sp)
    800112f6:	8522                	mv	a0,s0
    800112f8:	6442                	ld	s0,16(sp)
    800112fa:	64a2                	ld	s1,8(sp)
    800112fc:	6105                	addi	sp,sp,32
    800112fe:	8082                	ret

0000000080011300 <illegal_except_14>:
    //扩展FS的状态设置为0时，尝试读取或者写入浮点对应的状态指令
    //扩展VS的状态设置为0时，尝试读取或者写入向量对应的状态指令
    //扩展XS的状态设置为0时，尝试读取或者写入其他扩展对应的状态指令
    //设置HU=0时，在U模式执行超级虚拟机指令

bool illegal_except_14() {
    80011300:	1101                	addi	sp,sp,-32

    TEST_START();
    80011302:	0001b597          	auipc	a1,0x1b
    80011306:	81658593          	addi	a1,a1,-2026 # 8002bb18 <__func__.1>
    8001130a:	0001c517          	auipc	a0,0x1c
    8001130e:	ff650513          	addi	a0,a0,-10 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_14() {
    80011312:	ec06                	sd	ra,24(sp)
    80011314:	e822                	sd	s0,16(sp)
    80011316:	e426                	sd	s1,8(sp)
    TEST_START();
    80011318:	2a3190ef          	jal	8002adba <printf>
    8001131c:	4529                	li	a0,10
    8001131e:	78a180ef          	jal	80029aa8 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    80011322:	a51ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011326:	4511                	li	a0,4
    80011328:	b47ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001132c:	004007b7          	lui	a5,0x400
    80011330:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80011334:	450d                	li	a0,3
    80011336:	b39ef0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VU);
    8001133a:	4501                	li	a0,0
    8001133c:	a53ef0ef          	jal	80000d8e <set_prev_priv>
    asm volatile(
    80011340:	10200073          	sret

    //TEST_EXEC_SRET();
    sret();

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    80011344:	08200593          	li	a1,130
    80011348:	0001f617          	auipc	a2,0x1f
    8001134c:	79060613          	addi	a2,a2,1936 # 80030ad8 <__func__.0+0x3ab8>
    80011350:	0001c517          	auipc	a0,0x1c
    80011354:	fc850513          	addi	a0,a0,-56 # 8002d318 <__func__.0+0x2f8>
    80011358:	263190ef          	jal	8002adba <printf>
    8001135c:	00040797          	auipc	a5,0x40
    80011360:	cb57c783          	lbu	a5,-843(a5) # 80051011 <excpt+0x1>
    80011364:	00040497          	auipc	s1,0x40
    80011368:	cac48493          	addi	s1,s1,-852 # 80051010 <excpt>
    8001136c:	0001c597          	auipc	a1,0x1c
    80011370:	f8458593          	addi	a1,a1,-124 # 8002d2f0 <__func__.0+0x2d0>
    80011374:	cf89                	beqz	a5,8001138e <illegal_except_14+0x8e>
    80011376:	6498                	ld	a4,8(s1)
    80011378:	4789                	li	a5,2
    8001137a:	0001c597          	auipc	a1,0x1c
    8001137e:	f6658593          	addi	a1,a1,-154 # 8002d2e0 <__func__.0+0x2c0>
    80011382:	00f70663          	beq	a4,a5,8001138e <illegal_except_14+0x8e>
    80011386:	0001c597          	auipc	a1,0x1c
    8001138a:	f6a58593          	addi	a1,a1,-150 # 8002d2f0 <__func__.0+0x2d0>
    8001138e:	0001c517          	auipc	a0,0x1c
    80011392:	fa250513          	addi	a0,a0,-94 # 8002d330 <__func__.0+0x310>
    80011396:	225190ef          	jal	8002adba <printf>
    8001139a:	00040797          	auipc	a5,0x40
    8001139e:	c777c783          	lbu	a5,-905(a5) # 80051011 <excpt+0x1>
    800113a2:	c789                	beqz	a5,800113ac <illegal_except_14+0xac>
    800113a4:	6498                	ld	a4,8(s1)
    800113a6:	4789                	li	a5,2
    800113a8:	00f70c63          	beq	a4,a5,800113c0 <illegal_except_14+0xc0>
    800113ac:	0001c517          	auipc	a0,0x1c
    800113b0:	f8c50513          	addi	a0,a0,-116 # 8002d338 <__func__.0+0x318>
    800113b4:	207190ef          	jal	8002adba <printf>
    800113b8:	02900513          	li	a0,41
    800113bc:	6ec180ef          	jal	80029aa8 <putchar>
    800113c0:	4529                	li	a0,10
    800113c2:	6e6180ef          	jal	80029aa8 <putchar>
    800113c6:	00040417          	auipc	s0,0x40
    800113ca:	c4b44403          	lbu	s0,-949(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800113ce:	0001c597          	auipc	a1,0x1c
    800113d2:	f2258593          	addi	a1,a1,-222 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    800113d6:	cc11                	beqz	s0,800113f2 <illegal_except_14+0xf2>
    800113d8:	6498                	ld	a4,8(s1)
    800113da:	4789                	li	a5,2
    TEST_END();
    800113dc:	0001c597          	auipc	a1,0x1c
    800113e0:	f0458593          	addi	a1,a1,-252 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    800113e4:	00f70763          	beq	a4,a5,800113f2 <illegal_except_14+0xf2>
    800113e8:	4401                	li	s0,0
    TEST_END();
    800113ea:	0001c597          	auipc	a1,0x1c
    800113ee:	f0658593          	addi	a1,a1,-250 # 8002d2f0 <__func__.0+0x2d0>
    800113f2:	0001c517          	auipc	a0,0x1c
    800113f6:	fa650513          	addi	a0,a0,-90 # 8002d398 <__func__.0+0x378>
    800113fa:	1c1190ef          	jal	8002adba <printf>
    800113fe:	4511                	li	a0,4
    80011400:	a6fef0ef          	jal	80000e6e <goto_priv>
    80011404:	b86f00ef          	jal	8000178a <reset_state>

}
    80011408:	60e2                	ld	ra,24(sp)
    8001140a:	8522                	mv	a0,s0
    8001140c:	6442                	ld	s0,16(sp)
    8001140e:	64a2                	ld	s1,8(sp)
    80011410:	6105                	addi	sp,sp,32
    80011412:	8082                	ret

0000000080011414 <illegal_except_15>:

bool illegal_except_15() {
    80011414:	1141                	addi	sp,sp,-16

    TEST_START();
    80011416:	0001a597          	auipc	a1,0x1a
    8001141a:	71a58593          	addi	a1,a1,1818 # 8002bb30 <__func__.0>
    8001141e:	0001c517          	auipc	a0,0x1c
    80011422:	ee250513          	addi	a0,a0,-286 # 8002d300 <__func__.0+0x2e0>
bool illegal_except_15() {
    80011426:	e406                	sd	ra,8(sp)
    80011428:	e022                	sd	s0,0(sp)
    TEST_START();
    8001142a:	191190ef          	jal	8002adba <printf>
    8001142e:	4529                	li	a0,10
    80011430:	678180ef          	jal	80029aa8 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    80011434:	93fef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011438:	4511                	li	a0,4
    8001143a:	a35ef0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001143e:	004007b7          	lui	a5,0x400
    80011442:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80011446:	450d                	li	a0,3
    80011448:	a27ef0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8001144c:	4509                	li	a0,2
    8001144e:	941ef0ef          	jal	80000d8e <set_prev_priv>

    TEST_EXEC_SRET();
    80011452:	00000297          	auipc	t0,0x0
    80011456:	01028293          	addi	t0,t0,16 # 80011462 <illegal_except_15+0x4e>
    8001145a:	14129073          	csrw	sepc,t0
    8001145e:	10200073          	sret


    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    80011462:	08200593          	li	a1,130
    80011466:	0001f617          	auipc	a2,0x1f
    8001146a:	6a260613          	addi	a2,a2,1698 # 80030b08 <__func__.0+0x3ae8>
    8001146e:	0001c517          	auipc	a0,0x1c
    80011472:	eaa50513          	addi	a0,a0,-342 # 8002d318 <__func__.0+0x2f8>
    80011476:	145190ef          	jal	8002adba <printf>
    8001147a:	00040797          	auipc	a5,0x40
    8001147e:	b977c783          	lbu	a5,-1129(a5) # 80051011 <excpt+0x1>
    80011482:	0001c597          	auipc	a1,0x1c
    80011486:	e5e58593          	addi	a1,a1,-418 # 8002d2e0 <__func__.0+0x2c0>
    8001148a:	c789                	beqz	a5,80011494 <illegal_except_15+0x80>
    8001148c:	0001c597          	auipc	a1,0x1c
    80011490:	e6458593          	addi	a1,a1,-412 # 8002d2f0 <__func__.0+0x2d0>
    80011494:	0001c517          	auipc	a0,0x1c
    80011498:	e9c50513          	addi	a0,a0,-356 # 8002d330 <__func__.0+0x310>
    8001149c:	11f190ef          	jal	8002adba <printf>
    800114a0:	00040797          	auipc	a5,0x40
    800114a4:	b717c783          	lbu	a5,-1167(a5) # 80051011 <excpt+0x1>
    800114a8:	e7a1                	bnez	a5,800114f0 <illegal_except_15+0xdc>
    800114aa:	4529                	li	a0,10
    800114ac:	5fc180ef          	jal	80029aa8 <putchar>
    800114b0:	00040797          	auipc	a5,0x40
    800114b4:	b617c783          	lbu	a5,-1183(a5) # 80051011 <excpt+0x1>
    800114b8:	e795                	bnez	a5,800114e4 <illegal_except_15+0xd0>
    800114ba:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    800114bc:	0001c597          	auipc	a1,0x1c
    800114c0:	e2458593          	addi	a1,a1,-476 # 8002d2e0 <__func__.0+0x2c0>
    800114c4:	0001c517          	auipc	a0,0x1c
    800114c8:	ed450513          	addi	a0,a0,-300 # 8002d398 <__func__.0+0x378>
    800114cc:	0ef190ef          	jal	8002adba <printf>
    800114d0:	4511                	li	a0,4
    800114d2:	99def0ef          	jal	80000e6e <goto_priv>
    800114d6:	ab4f00ef          	jal	8000178a <reset_state>

}
    800114da:	60a2                	ld	ra,8(sp)
    800114dc:	8522                	mv	a0,s0
    800114de:	6402                	ld	s0,0(sp)
    800114e0:	0141                	addi	sp,sp,16
    800114e2:	8082                	ret
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    800114e4:	4401                	li	s0,0
    TEST_END();
    800114e6:	0001c597          	auipc	a1,0x1c
    800114ea:	e0a58593          	addi	a1,a1,-502 # 8002d2f0 <__func__.0+0x2d0>
    800114ee:	bfd9                	j	800114c4 <illegal_except_15+0xb0>
    TEST_ASSERT("hs mode sret successful when mstatus.TSR=0",
    800114f0:	0001c517          	auipc	a0,0x1c
    800114f4:	e4850513          	addi	a0,a0,-440 # 8002d338 <__func__.0+0x318>
    800114f8:	0c3190ef          	jal	8002adba <printf>
    800114fc:	02900513          	li	a0,41
    80011500:	5a8180ef          	jal	80029aa8 <putchar>
    80011504:	b75d                	j	800114aa <illegal_except_15+0x96>

0000000080011506 <external_interrupt_MEI>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool external_interrupt_MEI() {
    80011506:	1101                	addi	sp,sp,-32

    TEST_START();
    80011508:	0001a597          	auipc	a1,0x1a
    8001150c:	64058593          	addi	a1,a1,1600 # 8002bb48 <__func__.2>
    80011510:	0001c517          	auipc	a0,0x1c
    80011514:	df050513          	addi	a0,a0,-528 # 8002d300 <__func__.0+0x2e0>
bool external_interrupt_MEI() {
    80011518:	ec06                	sd	ra,24(sp)
    8001151a:	e822                	sd	s0,16(sp)
    8001151c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001151e:	09d190ef          	jal	8002adba <printf>
    80011522:	4529                	li	a0,10
    80011524:	584180ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    80011528:	84bef0ef          	jal	80000d72 <test_setup_except_function>

   
    //M模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    goto_priv(PRIV_M);
    8001152c:	4511                	li	a0,4
    8001152e:	941ef0ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_MIDELEG,0);
    80011532:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80011536:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);         
    8001153a:	6785                	lui	a5,0x1
    8001153c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011540:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);     //p33 read-only  is set and cleared by a platform-specific interrupt controller
    80011544:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80011548:	4511                	li	a0,4
    8001154a:	925ef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    8001154e:	08200593          	li	a1,130
    80011552:	0001f617          	auipc	a2,0x1f
    80011556:	5e660613          	addi	a2,a2,1510 # 80030b38 <__func__.0+0x3b18>
    8001155a:	0001c517          	auipc	a0,0x1c
    8001155e:	dbe50513          	addi	a0,a0,-578 # 8002d318 <__func__.0+0x2f8>
    80011562:	059190ef          	jal	8002adba <printf>
    80011566:	00040797          	auipc	a5,0x40
    8001156a:	aab7c783          	lbu	a5,-1365(a5) # 80051011 <excpt+0x1>
    8001156e:	00040497          	auipc	s1,0x40
    80011572:	aa248493          	addi	s1,s1,-1374 # 80051010 <excpt>
    80011576:	0001c597          	auipc	a1,0x1c
    8001157a:	d7a58593          	addi	a1,a1,-646 # 8002d2f0 <__func__.0+0x2d0>
    8001157e:	cf99                	beqz	a5,8001159c <external_interrupt_MEI+0x96>
    80011580:	57fd                	li	a5,-1
    80011582:	6498                	ld	a4,8(s1)
    80011584:	17fe                	slli	a5,a5,0x3f
    80011586:	07ad                	addi	a5,a5,11
    80011588:	0001c597          	auipc	a1,0x1c
    8001158c:	d5858593          	addi	a1,a1,-680 # 8002d2e0 <__func__.0+0x2c0>
    80011590:	00f70663          	beq	a4,a5,8001159c <external_interrupt_MEI+0x96>
    80011594:	0001c597          	auipc	a1,0x1c
    80011598:	d5c58593          	addi	a1,a1,-676 # 8002d2f0 <__func__.0+0x2d0>
    8001159c:	0001c517          	auipc	a0,0x1c
    800115a0:	d9450513          	addi	a0,a0,-620 # 8002d330 <__func__.0+0x310>
    800115a4:	017190ef          	jal	8002adba <printf>
    800115a8:	00040797          	auipc	a5,0x40
    800115ac:	a697c783          	lbu	a5,-1431(a5) # 80051011 <excpt+0x1>
    800115b0:	c799                	beqz	a5,800115be <external_interrupt_MEI+0xb8>
    800115b2:	57fd                	li	a5,-1
    800115b4:	6498                	ld	a4,8(s1)
    800115b6:	17fe                	slli	a5,a5,0x3f
    800115b8:	07ad                	addi	a5,a5,11
    800115ba:	00f70c63          	beq	a4,a5,800115d2 <external_interrupt_MEI+0xcc>
    800115be:	0001c517          	auipc	a0,0x1c
    800115c2:	d7a50513          	addi	a0,a0,-646 # 8002d338 <__func__.0+0x318>
    800115c6:	7f4190ef          	jal	8002adba <printf>
    800115ca:	02900513          	li	a0,41
    800115ce:	4da180ef          	jal	80029aa8 <putchar>
    800115d2:	4529                	li	a0,10
    800115d4:	4d4180ef          	jal	80029aa8 <putchar>
    800115d8:	00040797          	auipc	a5,0x40
    800115dc:	a397c783          	lbu	a5,-1479(a5) # 80051011 <excpt+0x1>
    800115e0:	4401                	li	s0,0
    800115e2:	c799                	beqz	a5,800115f0 <external_interrupt_MEI+0xea>
    800115e4:	6480                	ld	s0,8(s1)
    800115e6:	57ad                	li	a5,-21
    800115e8:	8385                	srli	a5,a5,0x1
    800115ea:	943e                	add	s0,s0,a5
    800115ec:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0
    TEST_SETUP_EXCEPT();
    800115f0:	f82ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800115f4:	4511                	li	a0,4
    800115f6:	879ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800115fa:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    800115fe:	6785                	lui	a5,0x1
    80011600:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011604:	3047b073          	csrc	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011608:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    8001160c:	4511                	li	a0,4
    8001160e:	861ef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    80011612:	08200593          	li	a1,130
    80011616:	0001f617          	auipc	a2,0x1f
    8001161a:	58260613          	addi	a2,a2,1410 # 80030b98 <__func__.0+0x3b78>
    8001161e:	0001c517          	auipc	a0,0x1c
    80011622:	cfa50513          	addi	a0,a0,-774 # 8002d318 <__func__.0+0x2f8>
    80011626:	794190ef          	jal	8002adba <printf>
    8001162a:	00040797          	auipc	a5,0x40
    8001162e:	9e77c783          	lbu	a5,-1561(a5) # 80051011 <excpt+0x1>
    80011632:	0001c597          	auipc	a1,0x1c
    80011636:	cbe58593          	addi	a1,a1,-834 # 8002d2f0 <__func__.0+0x2d0>
    8001163a:	e789                	bnez	a5,80011644 <external_interrupt_MEI+0x13e>
    8001163c:	0001c597          	auipc	a1,0x1c
    80011640:	ca458593          	addi	a1,a1,-860 # 8002d2e0 <__func__.0+0x2c0>
    80011644:	0001c517          	auipc	a0,0x1c
    80011648:	cec50513          	addi	a0,a0,-788 # 8002d330 <__func__.0+0x310>
    8001164c:	76e190ef          	jal	8002adba <printf>
    80011650:	00040797          	auipc	a5,0x40
    80011654:	9c17c783          	lbu	a5,-1599(a5) # 80051011 <excpt+0x1>
    80011658:	180796e3          	bnez	a5,80011fe4 <external_interrupt_MEI+0xade>
    8001165c:	4529                	li	a0,10
    8001165e:	44a180ef          	jal	80029aa8 <putchar>
    80011662:	c419                	beqz	s0,80011670 <external_interrupt_MEI+0x16a>
    80011664:	00040417          	auipc	s0,0x40
    80011668:	9ad44403          	lbu	s0,-1619(s0) # 80051011 <excpt+0x1>
    8001166c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1
    TEST_SETUP_EXCEPT();
    80011670:	f02ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011674:	4511                	li	a0,4
    80011676:	ff8ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8001167a:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    8001167e:	6785                	lui	a5,0x1
    80011680:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011684:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011688:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    8001168c:	4511                	li	a0,4
    8001168e:	fe0ef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    80011692:	08200593          	li	a1,130
    80011696:	0001f617          	auipc	a2,0x1f
    8001169a:	55a60613          	addi	a2,a2,1370 # 80030bf0 <__func__.0+0x3bd0>
    8001169e:	0001c517          	auipc	a0,0x1c
    800116a2:	c7a50513          	addi	a0,a0,-902 # 8002d318 <__func__.0+0x2f8>
    800116a6:	714190ef          	jal	8002adba <printf>
    800116aa:	00040797          	auipc	a5,0x40
    800116ae:	9677c783          	lbu	a5,-1689(a5) # 80051011 <excpt+0x1>
    800116b2:	0001c597          	auipc	a1,0x1c
    800116b6:	c3e58593          	addi	a1,a1,-962 # 8002d2f0 <__func__.0+0x2d0>
    800116ba:	cf99                	beqz	a5,800116d8 <external_interrupt_MEI+0x1d2>
    800116bc:	57fd                	li	a5,-1
    800116be:	6498                	ld	a4,8(s1)
    800116c0:	17fe                	slli	a5,a5,0x3f
    800116c2:	07ad                	addi	a5,a5,11
    800116c4:	0001c597          	auipc	a1,0x1c
    800116c8:	c1c58593          	addi	a1,a1,-996 # 8002d2e0 <__func__.0+0x2c0>
    800116cc:	00f70663          	beq	a4,a5,800116d8 <external_interrupt_MEI+0x1d2>
    800116d0:	0001c597          	auipc	a1,0x1c
    800116d4:	c2058593          	addi	a1,a1,-992 # 8002d2f0 <__func__.0+0x2d0>
    800116d8:	0001c517          	auipc	a0,0x1c
    800116dc:	c5850513          	addi	a0,a0,-936 # 8002d330 <__func__.0+0x310>
    800116e0:	6da190ef          	jal	8002adba <printf>
    800116e4:	00040797          	auipc	a5,0x40
    800116e8:	92d7c783          	lbu	a5,-1747(a5) # 80051011 <excpt+0x1>
    800116ec:	c799                	beqz	a5,800116fa <external_interrupt_MEI+0x1f4>
    800116ee:	57fd                	li	a5,-1
    800116f0:	6498                	ld	a4,8(s1)
    800116f2:	17fe                	slli	a5,a5,0x3f
    800116f4:	07ad                	addi	a5,a5,11
    800116f6:	00f70c63          	beq	a4,a5,8001170e <external_interrupt_MEI+0x208>
    800116fa:	0001c517          	auipc	a0,0x1c
    800116fe:	c3e50513          	addi	a0,a0,-962 # 8002d338 <__func__.0+0x318>
    80011702:	6b8190ef          	jal	8002adba <printf>
    80011706:	02900513          	li	a0,41
    8001170a:	39e180ef          	jal	80029aa8 <putchar>
    8001170e:	4529                	li	a0,10
    80011710:	398180ef          	jal	80029aa8 <putchar>
    80011714:	c801                	beqz	s0,80011724 <external_interrupt_MEI+0x21e>
    80011716:	00040797          	auipc	a5,0x40
    8001171a:	8fb7c783          	lbu	a5,-1797(a5) # 80051011 <excpt+0x1>
    8001171e:	4401                	li	s0,0
    80011720:	020792e3          	bnez	a5,80011f44 <external_interrupt_MEI+0xa3e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MEI
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=1
    TEST_SETUP_EXCEPT();
    80011724:	e4eef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011728:	4511                	li	a0,4
    8001172a:	f44ef0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001172e:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011732:	6785                	lui	a5,0x1
    80011734:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011738:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    8001173c:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_M);
    80011740:	4511                	li	a0,4
    80011742:	f2cef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    80011746:	08200593          	li	a1,130
    8001174a:	0001f617          	auipc	a2,0x1f
    8001174e:	50660613          	addi	a2,a2,1286 # 80030c50 <__func__.0+0x3c30>
    80011752:	0001c517          	auipc	a0,0x1c
    80011756:	bc650513          	addi	a0,a0,-1082 # 8002d318 <__func__.0+0x2f8>
    8001175a:	660190ef          	jal	8002adba <printf>
    8001175e:	00040797          	auipc	a5,0x40
    80011762:	8b37c783          	lbu	a5,-1869(a5) # 80051011 <excpt+0x1>
    80011766:	0001c597          	auipc	a1,0x1c
    8001176a:	b8a58593          	addi	a1,a1,-1142 # 8002d2f0 <__func__.0+0x2d0>
    8001176e:	e789                	bnez	a5,80011778 <external_interrupt_MEI+0x272>
    80011770:	0001c597          	auipc	a1,0x1c
    80011774:	b7058593          	addi	a1,a1,-1168 # 8002d2e0 <__func__.0+0x2c0>
    80011778:	0001c517          	auipc	a0,0x1c
    8001177c:	bb850513          	addi	a0,a0,-1096 # 8002d330 <__func__.0+0x310>
    80011780:	63a190ef          	jal	8002adba <printf>
    80011784:	00040797          	auipc	a5,0x40
    80011788:	88d7c783          	lbu	a5,-1907(a5) # 80051011 <excpt+0x1>
    8001178c:	0c0796e3          	bnez	a5,80012058 <external_interrupt_MEI+0xb52>
    80011790:	4529                	li	a0,10
    80011792:	316180ef          	jal	80029aa8 <putchar>
    80011796:	c419                	beqz	s0,800117a4 <external_interrupt_MEI+0x29e>
    80011798:	00040417          	auipc	s0,0x40
    8001179c:	87944403          	lbu	s0,-1927(s0) # 80051011 <excpt+0x1>
    800117a0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=1，mie.MIE=0
    TEST_SETUP_EXCEPT();
    800117a4:	dceef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800117a8:	4511                	li	a0,4
    800117aa:	ec4ef0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    800117ae:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800117b2:	6785                	lui	a5,0x1
    800117b4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800117b8:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    800117bc:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    800117c0:	4511                	li	a0,4
    800117c2:	eacef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    800117c6:	08200593          	li	a1,130
    800117ca:	0001f617          	auipc	a2,0x1f
    800117ce:	4de60613          	addi	a2,a2,1246 # 80030ca8 <__func__.0+0x3c88>
    800117d2:	0001c517          	auipc	a0,0x1c
    800117d6:	b4650513          	addi	a0,a0,-1210 # 8002d318 <__func__.0+0x2f8>
    800117da:	5e0190ef          	jal	8002adba <printf>
    800117de:	00040797          	auipc	a5,0x40
    800117e2:	8337c783          	lbu	a5,-1997(a5) # 80051011 <excpt+0x1>
    800117e6:	0001c597          	auipc	a1,0x1c
    800117ea:	b0a58593          	addi	a1,a1,-1270 # 8002d2f0 <__func__.0+0x2d0>
    800117ee:	e789                	bnez	a5,800117f8 <external_interrupt_MEI+0x2f2>
    800117f0:	0001c597          	auipc	a1,0x1c
    800117f4:	af058593          	addi	a1,a1,-1296 # 8002d2e0 <__func__.0+0x2c0>
    800117f8:	0001c517          	auipc	a0,0x1c
    800117fc:	b3850513          	addi	a0,a0,-1224 # 8002d330 <__func__.0+0x310>
    80011800:	5ba190ef          	jal	8002adba <printf>
    80011804:	00040797          	auipc	a5,0x40
    80011808:	80d7c783          	lbu	a5,-2035(a5) # 80051011 <excpt+0x1>
    8001180c:	02079ae3          	bnez	a5,80012040 <external_interrupt_MEI+0xb3a>
    80011810:	4529                	li	a0,10
    80011812:	296180ef          	jal	80029aa8 <putchar>
    80011816:	c419                	beqz	s0,80011824 <external_interrupt_MEI+0x31e>
    80011818:	0003f417          	auipc	s0,0x3f
    8001181c:	7f944403          	lbu	s0,2041(s0) # 80051011 <excpt+0x1>
    80011820:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //M模式下产生单bit外部中断，mstatus.mie=0，且mip.MEIP=0，mie.MIE=0
    TEST_SETUP_EXCEPT();
    80011824:	d4eef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011828:	4511                	li	a0,4
    8001182a:	e44ef0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3)     
    8001182e:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011832:	6785                	lui	a5,0x1
    80011834:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011838:	3047b073          	csrc	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    8001183c:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_M);
    80011840:	4511                	li	a0,4
    80011842:	e2cef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    80011846:	08200593          	li	a1,130
    8001184a:	0001f617          	auipc	a2,0x1f
    8001184e:	4b660613          	addi	a2,a2,1206 # 80030d00 <__func__.0+0x3ce0>
    80011852:	0001c517          	auipc	a0,0x1c
    80011856:	ac650513          	addi	a0,a0,-1338 # 8002d318 <__func__.0+0x2f8>
    8001185a:	560190ef          	jal	8002adba <printf>
    8001185e:	0003f797          	auipc	a5,0x3f
    80011862:	7b37c783          	lbu	a5,1971(a5) # 80051011 <excpt+0x1>
    80011866:	0001c597          	auipc	a1,0x1c
    8001186a:	a8a58593          	addi	a1,a1,-1398 # 8002d2f0 <__func__.0+0x2d0>
    8001186e:	e789                	bnez	a5,80011878 <external_interrupt_MEI+0x372>
    80011870:	0001c597          	auipc	a1,0x1c
    80011874:	a7058593          	addi	a1,a1,-1424 # 8002d2e0 <__func__.0+0x2c0>
    80011878:	0001c517          	auipc	a0,0x1c
    8001187c:	ab850513          	addi	a0,a0,-1352 # 8002d330 <__func__.0+0x310>
    80011880:	53a190ef          	jal	8002adba <printf>
    80011884:	0003f797          	auipc	a5,0x3f
    80011888:	78d7c783          	lbu	a5,1933(a5) # 80051011 <excpt+0x1>
    8001188c:	78079e63          	bnez	a5,80012028 <external_interrupt_MEI+0xb22>
    80011890:	4529                	li	a0,10
    80011892:	216180ef          	jal	80029aa8 <putchar>
    80011896:	c419                	beqz	s0,800118a4 <external_interrupt_MEI+0x39e>
    80011898:	0003f417          	auipc	s0,0x3f
    8001189c:	77944403          	lbu	s0,1913(s0) # 80051011 <excpt+0x1>
    800118a0:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    800118a4:	cceef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800118a8:	4511                	li	a0,4
    800118aa:	dc4ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    800118ae:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    800118b2:	6785                	lui	a5,0x1
    800118b4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    800118b8:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    800118bc:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_HS);
    800118c0:	450d                	li	a0,3
    800118c2:	dacef0ef          	jal	80000e6e <goto_priv>

    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    800118c6:	08200593          	li	a1,130
    800118ca:	0001f617          	auipc	a2,0x1f
    800118ce:	48e60613          	addi	a2,a2,1166 # 80030d58 <__func__.0+0x3d38>
    800118d2:	0001c517          	auipc	a0,0x1c
    800118d6:	a4650513          	addi	a0,a0,-1466 # 8002d318 <__func__.0+0x2f8>
    800118da:	4e0190ef          	jal	8002adba <printf>
    800118de:	6094                	ld	a3,0(s1)
    800118e0:	f0001737          	lui	a4,0xf0001
    800118e4:	0712                	slli	a4,a4,0x4
    800118e6:	4785                	li	a5,1
    800118e8:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800118ec:	178a                	slli	a5,a5,0x22
    800118ee:	8f75                	and	a4,a4,a3
    800118f0:	10078793          	addi	a5,a5,256
    800118f4:	0001c597          	auipc	a1,0x1c
    800118f8:	9fc58593          	addi	a1,a1,-1540 # 8002d2f0 <__func__.0+0x2d0>
    800118fc:	00f71663          	bne	a4,a5,80011908 <external_interrupt_MEI+0x402>
    80011900:	0001c597          	auipc	a1,0x1c
    80011904:	9e058593          	addi	a1,a1,-1568 # 8002d2e0 <__func__.0+0x2c0>
    80011908:	0001c517          	auipc	a0,0x1c
    8001190c:	a2850513          	addi	a0,a0,-1496 # 8002d330 <__func__.0+0x310>
    80011910:	4aa190ef          	jal	8002adba <printf>
    80011914:	0003f797          	auipc	a5,0x3f
    80011918:	6fd7c783          	lbu	a5,1789(a5) # 80051011 <excpt+0x1>
    8001191c:	cb81                	beqz	a5,8001192c <external_interrupt_MEI+0x426>
    8001191e:	0003f717          	auipc	a4,0x3f
    80011922:	6f672703          	lw	a4,1782(a4) # 80051014 <excpt+0x4>
    80011926:	4791                	li	a5,4
    80011928:	00f70c63          	beq	a4,a5,80011940 <external_interrupt_MEI+0x43a>
    8001192c:	0001c517          	auipc	a0,0x1c
    80011930:	a0c50513          	addi	a0,a0,-1524 # 8002d338 <__func__.0+0x318>
    80011934:	486190ef          	jal	8002adba <printf>
    80011938:	02900513          	li	a0,41
    8001193c:	16c180ef          	jal	80029aa8 <putchar>
    80011940:	4529                	li	a0,10
    80011942:	166180ef          	jal	80029aa8 <putchar>
    80011946:	cc19                	beqz	s0,80011964 <external_interrupt_MEI+0x45e>
    80011948:	6080                	ld	s0,0(s1)
    8001194a:	f0001737          	lui	a4,0xf0001
    8001194e:	0712                	slli	a4,a4,0x4
    80011950:	57fd                	li	a5,-1
    80011952:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011956:	178a                	slli	a5,a5,0x22
    80011958:	8c79                	and	s0,s0,a4
    8001195a:	f0078793          	addi	a5,a5,-256
    8001195e:	943e                	add	s0,s0,a5
    80011960:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011964:	c0eef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011968:	4511                	li	a0,4
    8001196a:	d04ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8001196e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011972:	6785                	lui	a5,0x1
    80011974:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011978:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    8001197c:	577d                	li	a4,-1
    8001197e:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011982:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011986:	450d                	li	a0,3
    80011988:	ce6ef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    8001198c:	08200593          	li	a1,130
    80011990:	0001f617          	auipc	a2,0x1f
    80011994:	42060613          	addi	a2,a2,1056 # 80030db0 <__func__.0+0x3d90>
    80011998:	0001c517          	auipc	a0,0x1c
    8001199c:	98050513          	addi	a0,a0,-1664 # 8002d318 <__func__.0+0x2f8>
    800119a0:	41a190ef          	jal	8002adba <printf>
    800119a4:	6094                	ld	a3,0(s1)
    800119a6:	f0001737          	lui	a4,0xf0001
    800119aa:	0712                	slli	a4,a4,0x4
    800119ac:	478d                	li	a5,3
    800119ae:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    800119b2:	1782                	slli	a5,a5,0x20
    800119b4:	8f75                	and	a4,a4,a3
    800119b6:	10078793          	addi	a5,a5,256
    800119ba:	0001c597          	auipc	a1,0x1c
    800119be:	93658593          	addi	a1,a1,-1738 # 8002d2f0 <__func__.0+0x2d0>
    800119c2:	00f71663          	bne	a4,a5,800119ce <external_interrupt_MEI+0x4c8>
    800119c6:	0001c597          	auipc	a1,0x1c
    800119ca:	91a58593          	addi	a1,a1,-1766 # 8002d2e0 <__func__.0+0x2c0>
    800119ce:	0001c517          	auipc	a0,0x1c
    800119d2:	96250513          	addi	a0,a0,-1694 # 8002d330 <__func__.0+0x310>
    800119d6:	3e4190ef          	jal	8002adba <printf>
    800119da:	0003f797          	auipc	a5,0x3f
    800119de:	6377c783          	lbu	a5,1591(a5) # 80051011 <excpt+0x1>
    800119e2:	cb81                	beqz	a5,800119f2 <external_interrupt_MEI+0x4ec>
    800119e4:	0003f717          	auipc	a4,0x3f
    800119e8:	63072703          	lw	a4,1584(a4) # 80051014 <excpt+0x4>
    800119ec:	478d                	li	a5,3
    800119ee:	00f70c63          	beq	a4,a5,80011a06 <external_interrupt_MEI+0x500>
    800119f2:	0001c517          	auipc	a0,0x1c
    800119f6:	94650513          	addi	a0,a0,-1722 # 8002d338 <__func__.0+0x318>
    800119fa:	3c0190ef          	jal	8002adba <printf>
    800119fe:	02900513          	li	a0,41
    80011a02:	0a6180ef          	jal	80029aa8 <putchar>
    80011a06:	4529                	li	a0,10
    80011a08:	0a0180ef          	jal	80029aa8 <putchar>
    80011a0c:	cc19                	beqz	s0,80011a2a <external_interrupt_MEI+0x524>
    80011a0e:	6080                	ld	s0,0(s1)
    80011a10:	f0001737          	lui	a4,0xf0001
    80011a14:	0712                	slli	a4,a4,0x4
    80011a16:	57f5                	li	a5,-3
    80011a18:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011a1c:	1782                	slli	a5,a5,0x20
    80011a1e:	8c79                	and	s0,s0,a4
    80011a20:	f0078793          	addi	a5,a5,-256
    80011a24:	943e                	add	s0,s0,a5
    80011a26:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011a2a:	b48ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011a2e:	4511                	li	a0,4
    80011a30:	c3eef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011a34:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011a38:	6785                	lui	a5,0x1
    80011a3a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011a3e:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011a42:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011a46:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011a4a:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_HS);
    80011a4e:	450d                	li	a0,3
    80011a50:	c1eef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011a54:	08200593          	li	a1,130
    80011a58:	0001f617          	auipc	a2,0x1f
    80011a5c:	3b060613          	addi	a2,a2,944 # 80030e08 <__func__.0+0x3de8>
    80011a60:	0001c517          	auipc	a0,0x1c
    80011a64:	8b850513          	addi	a0,a0,-1864 # 8002d318 <__func__.0+0x2f8>
    80011a68:	352190ef          	jal	8002adba <printf>
    80011a6c:	0003f797          	auipc	a5,0x3f
    80011a70:	5a57c783          	lbu	a5,1445(a5) # 80051011 <excpt+0x1>
    80011a74:	0001c597          	auipc	a1,0x1c
    80011a78:	87c58593          	addi	a1,a1,-1924 # 8002d2f0 <__func__.0+0x2d0>
    80011a7c:	e789                	bnez	a5,80011a86 <external_interrupt_MEI+0x580>
    80011a7e:	0001c597          	auipc	a1,0x1c
    80011a82:	86258593          	addi	a1,a1,-1950 # 8002d2e0 <__func__.0+0x2c0>
    80011a86:	0001c517          	auipc	a0,0x1c
    80011a8a:	8aa50513          	addi	a0,a0,-1878 # 8002d330 <__func__.0+0x310>
    80011a8e:	32c190ef          	jal	8002adba <printf>
    80011a92:	0003f797          	auipc	a5,0x3f
    80011a96:	57f7c783          	lbu	a5,1407(a5) # 80051011 <excpt+0x1>
    80011a9a:	56079c63          	bnez	a5,80012012 <external_interrupt_MEI+0xb0c>
    80011a9e:	4529                	li	a0,10
    80011aa0:	008180ef          	jal	80029aa8 <putchar>
    80011aa4:	c419                	beqz	s0,80011ab2 <external_interrupt_MEI+0x5ac>
    80011aa6:	0003f417          	auipc	s0,0x3f
    80011aaa:	56b44403          	lbu	s0,1387(s0) # 80051011 <excpt+0x1>
    80011aae:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011ab2:	ac0ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ab6:	4511                	li	a0,4
    80011ab8:	bb6ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011abc:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011ac0:	6785                	lui	a5,0x1
    80011ac2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011ac6:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011aca:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011ace:	450d                	li	a0,3
    80011ad0:	b9eef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011ad4:	08200593          	li	a1,130
    80011ad8:	0001f617          	auipc	a2,0x1f
    80011adc:	38860613          	addi	a2,a2,904 # 80030e60 <__func__.0+0x3e40>
    80011ae0:	0001c517          	auipc	a0,0x1c
    80011ae4:	83850513          	addi	a0,a0,-1992 # 8002d318 <__func__.0+0x2f8>
    80011ae8:	2d2190ef          	jal	8002adba <printf>
    80011aec:	0003f797          	auipc	a5,0x3f
    80011af0:	5257c783          	lbu	a5,1317(a5) # 80051011 <excpt+0x1>
    80011af4:	0001b597          	auipc	a1,0x1b
    80011af8:	7fc58593          	addi	a1,a1,2044 # 8002d2f0 <__func__.0+0x2d0>
    80011afc:	c799                	beqz	a5,80011b0a <external_interrupt_MEI+0x604>
    80011afe:	57fd                	li	a5,-1
    80011b00:	6498                	ld	a4,8(s1)
    80011b02:	17fe                	slli	a5,a5,0x3f
    80011b04:	07ad                	addi	a5,a5,11
    80011b06:	56f70563          	beq	a4,a5,80012070 <external_interrupt_MEI+0xb6a>
    80011b0a:	0001c517          	auipc	a0,0x1c
    80011b0e:	82650513          	addi	a0,a0,-2010 # 8002d330 <__func__.0+0x310>
    80011b12:	2a8190ef          	jal	8002adba <printf>
    80011b16:	0003f797          	auipc	a5,0x3f
    80011b1a:	4fb7c783          	lbu	a5,1275(a5) # 80051011 <excpt+0x1>
    80011b1e:	c799                	beqz	a5,80011b2c <external_interrupt_MEI+0x626>
    80011b20:	57fd                	li	a5,-1
    80011b22:	6498                	ld	a4,8(s1)
    80011b24:	17fe                	slli	a5,a5,0x3f
    80011b26:	07ad                	addi	a5,a5,11
    80011b28:	48f70063          	beq	a4,a5,80011fa8 <external_interrupt_MEI+0xaa2>
    80011b2c:	0001c517          	auipc	a0,0x1c
    80011b30:	80c50513          	addi	a0,a0,-2036 # 8002d338 <__func__.0+0x318>
    80011b34:	286190ef          	jal	8002adba <printf>
    80011b38:	02900513          	li	a0,41
    80011b3c:	76d170ef          	jal	80029aa8 <putchar>
    80011b40:	4529                	li	a0,10
    80011b42:	767170ef          	jal	80029aa8 <putchar>
    80011b46:	c801                	beqz	s0,80011b56 <external_interrupt_MEI+0x650>
    80011b48:	0003f797          	auipc	a5,0x3f
    80011b4c:	4c97c783          	lbu	a5,1225(a5) # 80051011 <excpt+0x1>
    80011b50:	4401                	li	s0,0
    80011b52:	42079563          	bnez	a5,80011f7c <external_interrupt_MEI+0xa76>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011b56:	a1cef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011b5a:	4511                	li	a0,4
    80011b5c:	b12ef0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011b60:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011b64:	6785                	lui	a5,0x1
    80011b66:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011b6a:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011b6e:	577d                	li	a4,-1
    80011b70:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1
    80011b74:	30273073          	csrc	medeleg,a4
    );
    CSRC(CSR_MIP,MIP_MEIP);
    80011b78:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_HS);
    80011b7c:	450d                	li	a0,3
    80011b7e:	af0ef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011b82:	08200593          	li	a1,130
    80011b86:	0001f617          	auipc	a2,0x1f
    80011b8a:	33260613          	addi	a2,a2,818 # 80030eb8 <__func__.0+0x3e98>
    80011b8e:	0001b517          	auipc	a0,0x1b
    80011b92:	78a50513          	addi	a0,a0,1930 # 8002d318 <__func__.0+0x2f8>
    80011b96:	224190ef          	jal	8002adba <printf>
    80011b9a:	0003f797          	auipc	a5,0x3f
    80011b9e:	4777c783          	lbu	a5,1143(a5) # 80051011 <excpt+0x1>
    80011ba2:	0001b597          	auipc	a1,0x1b
    80011ba6:	74e58593          	addi	a1,a1,1870 # 8002d2f0 <__func__.0+0x2d0>
    80011baa:	e789                	bnez	a5,80011bb4 <external_interrupt_MEI+0x6ae>
    80011bac:	0001b597          	auipc	a1,0x1b
    80011bb0:	73458593          	addi	a1,a1,1844 # 8002d2e0 <__func__.0+0x2c0>
    80011bb4:	0001b517          	auipc	a0,0x1b
    80011bb8:	77c50513          	addi	a0,a0,1916 # 8002d330 <__func__.0+0x310>
    80011bbc:	1fe190ef          	jal	8002adba <printf>
    80011bc0:	0003f797          	auipc	a5,0x3f
    80011bc4:	4517c783          	lbu	a5,1105(a5) # 80051011 <excpt+0x1>
    80011bc8:	3e079863          	bnez	a5,80011fb8 <external_interrupt_MEI+0xab2>
    80011bcc:	4529                	li	a0,10
    80011bce:	6db170ef          	jal	80029aa8 <putchar>
    80011bd2:	c419                	beqz	s0,80011be0 <external_interrupt_MEI+0x6da>
    80011bd4:	0003f417          	auipc	s0,0x3f
    80011bd8:	43d44403          	lbu	s0,1085(s0) # 80051011 <excpt+0x1>
    80011bdc:	00144413          	xori	s0,s0,1



//vs-mode下
    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高
    TEST_SETUP_EXCEPT();
    80011be0:	992ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011be4:	4511                	li	a0,4
    80011be6:	a88ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011bea:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011bee:	6785                	lui	a5,0x1
    80011bf0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011bf4:	3047a073          	csrs	mie,a5
    CSRS(CSR_MIP,MIP_MEIP);
    80011bf8:	3447a073          	csrs	mip,a5

    
    goto_priv(PRIV_VS);
    80011bfc:	4509                	li	a0,2
    80011bfe:	a70ef0ef          	jal	80000e6e <goto_priv>

    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1",
    80011c02:	08200593          	li	a1,130
    80011c06:	0001f617          	auipc	a2,0x1f
    80011c0a:	30260613          	addi	a2,a2,770 # 80030f08 <__func__.0+0x3ee8>
    80011c0e:	0001b517          	auipc	a0,0x1b
    80011c12:	70a50513          	addi	a0,a0,1802 # 8002d318 <__func__.0+0x2f8>
    80011c16:	1a4190ef          	jal	8002adba <printf>
    80011c1a:	6094                	ld	a3,0(s1)
    80011c1c:	f0001737          	lui	a4,0xf0001
    80011c20:	0712                	slli	a4,a4,0x4
    80011c22:	4785                	li	a5,1
    80011c24:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011c28:	178a                	slli	a5,a5,0x22
    80011c2a:	8f75                	and	a4,a4,a3
    80011c2c:	10078793          	addi	a5,a5,256
    80011c30:	0001b597          	auipc	a1,0x1b
    80011c34:	6c058593          	addi	a1,a1,1728 # 8002d2f0 <__func__.0+0x2d0>
    80011c38:	00f71663          	bne	a4,a5,80011c44 <external_interrupt_MEI+0x73e>
    80011c3c:	0001b597          	auipc	a1,0x1b
    80011c40:	6a458593          	addi	a1,a1,1700 # 8002d2e0 <__func__.0+0x2c0>
    80011c44:	0001b517          	auipc	a0,0x1b
    80011c48:	6ec50513          	addi	a0,a0,1772 # 8002d330 <__func__.0+0x310>
    80011c4c:	16e190ef          	jal	8002adba <printf>
    80011c50:	0003f797          	auipc	a5,0x3f
    80011c54:	3c17c783          	lbu	a5,961(a5) # 80051011 <excpt+0x1>
    80011c58:	cb81                	beqz	a5,80011c68 <external_interrupt_MEI+0x762>
    80011c5a:	0003f717          	auipc	a4,0x3f
    80011c5e:	3ba72703          	lw	a4,954(a4) # 80051014 <excpt+0x4>
    80011c62:	4791                	li	a5,4
    80011c64:	00f70c63          	beq	a4,a5,80011c7c <external_interrupt_MEI+0x776>
    80011c68:	0001b517          	auipc	a0,0x1b
    80011c6c:	6d050513          	addi	a0,a0,1744 # 8002d338 <__func__.0+0x318>
    80011c70:	14a190ef          	jal	8002adba <printf>
    80011c74:	02900513          	li	a0,41
    80011c78:	631170ef          	jal	80029aa8 <putchar>
    80011c7c:	4529                	li	a0,10
    80011c7e:	62b170ef          	jal	80029aa8 <putchar>
    80011c82:	cc19                	beqz	s0,80011ca0 <external_interrupt_MEI+0x79a>
    80011c84:	6080                	ld	s0,0(s1)
    80011c86:	f0001737          	lui	a4,0xf0001
    80011c8a:	0712                	slli	a4,a4,0x4
    80011c8c:	57fd                	li	a5,-1
    80011c8e:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011c92:	178a                	slli	a5,a5,0x22
    80011c94:	8c79                	and	s0,s0,a4
    80011c96:	f0078793          	addi	a5,a5,-256
    80011c9a:	943e                	add	s0,s0,a5
    80011c9c:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，mstatus.mie=1，且mip，mie对应的MEIP、MEIE拉高,有hideleg代理
    TEST_SETUP_EXCEPT();
    80011ca0:	8d2ef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011ca4:	4511                	li	a0,4
    80011ca6:	9c8ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011caa:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011cae:	6785                	lui	a5,0x1
    80011cb0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011cb4:	3047a073          	csrs	mie,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80011cb8:	577d                	li	a4,-1
    80011cba:	60371073          	csrw	hideleg,a4
    CSRS(CSR_MIP,MIP_MEIP);
    80011cbe:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011cc2:	4509                	li	a0,2
    80011cc4:	9aaef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=1 ",
    80011cc8:	08200593          	li	a1,130
    80011ccc:	0001f617          	auipc	a2,0x1f
    80011cd0:	29c60613          	addi	a2,a2,668 # 80030f68 <__func__.0+0x3f48>
    80011cd4:	0001b517          	auipc	a0,0x1b
    80011cd8:	64450513          	addi	a0,a0,1604 # 8002d318 <__func__.0+0x2f8>
    80011cdc:	0de190ef          	jal	8002adba <printf>
    80011ce0:	6094                	ld	a3,0(s1)
    80011ce2:	f0001737          	lui	a4,0xf0001
    80011ce6:	0712                	slli	a4,a4,0x4
    80011ce8:	4785                	li	a5,1
    80011cea:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011cee:	1786                	slli	a5,a5,0x21
    80011cf0:	8f75                	and	a4,a4,a3
    80011cf2:	10078793          	addi	a5,a5,256
    80011cf6:	0001b597          	auipc	a1,0x1b
    80011cfa:	5fa58593          	addi	a1,a1,1530 # 8002d2f0 <__func__.0+0x2d0>
    80011cfe:	00f71663          	bne	a4,a5,80011d0a <external_interrupt_MEI+0x804>
    80011d02:	0001b597          	auipc	a1,0x1b
    80011d06:	5de58593          	addi	a1,a1,1502 # 8002d2e0 <__func__.0+0x2c0>
    80011d0a:	0001b517          	auipc	a0,0x1b
    80011d0e:	62650513          	addi	a0,a0,1574 # 8002d330 <__func__.0+0x310>
    80011d12:	0a8190ef          	jal	8002adba <printf>
    80011d16:	0003f797          	auipc	a5,0x3f
    80011d1a:	2fb7c783          	lbu	a5,763(a5) # 80051011 <excpt+0x1>
    80011d1e:	cb81                	beqz	a5,80011d2e <external_interrupt_MEI+0x828>
    80011d20:	0003f717          	auipc	a4,0x3f
    80011d24:	2f472703          	lw	a4,756(a4) # 80051014 <excpt+0x4>
    80011d28:	4789                	li	a5,2
    80011d2a:	00f70c63          	beq	a4,a5,80011d42 <external_interrupt_MEI+0x83c>
    80011d2e:	0001b517          	auipc	a0,0x1b
    80011d32:	60a50513          	addi	a0,a0,1546 # 8002d338 <__func__.0+0x318>
    80011d36:	084190ef          	jal	8002adba <printf>
    80011d3a:	02900513          	li	a0,41
    80011d3e:	56b170ef          	jal	80029aa8 <putchar>
    80011d42:	4529                	li	a0,10
    80011d44:	565170ef          	jal	80029aa8 <putchar>
    80011d48:	cc19                	beqz	s0,80011d66 <external_interrupt_MEI+0x860>
    80011d4a:	6080                	ld	s0,0(s1)
    80011d4c:	f0001737          	lui	a4,0xf0001
    80011d50:	0712                	slli	a4,a4,0x4
    80011d52:	57fd                	li	a5,-1
    80011d54:	f0070713          	addi	a4,a4,-256 # fffffffff0000f00 <__stack_top+0xffffffff6fd01f00>
    80011d58:	1786                	slli	a5,a5,0x21
    80011d5a:	8c79                	and	s0,s0,a4
    80011d5c:	f0078793          	addi	a5,a5,-256
    80011d60:	943e                	add	s0,s0,a5
    80011d62:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=1，mie.MEIE=0，无代理
    TEST_SETUP_EXCEPT();
    80011d66:	80cef0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011d6a:	4511                	li	a0,4
    80011d6c:	902ef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011d70:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MEIE);
    80011d74:	6785                	lui	a5,0x1
    80011d76:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011d7a:	3047b073          	csrc	mie,a5
    CSRW(CSR_MIDELEG,0);
    80011d7e:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80011d82:	60305073          	csrwi	hideleg,0
    CSRS(CSR_MIP,MIP_MEIP);
    80011d86:	3447a073          	csrs	mip,a5

    goto_priv(PRIV_VS);
    80011d8a:	4509                	li	a0,2
    80011d8c:	8e2ef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011d90:	08200593          	li	a1,130
    80011d94:	0001f617          	auipc	a2,0x1f
    80011d98:	23460613          	addi	a2,a2,564 # 80030fc8 <__func__.0+0x3fa8>
    80011d9c:	0001b517          	auipc	a0,0x1b
    80011da0:	57c50513          	addi	a0,a0,1404 # 8002d318 <__func__.0+0x2f8>
    80011da4:	016190ef          	jal	8002adba <printf>
    80011da8:	0003f797          	auipc	a5,0x3f
    80011dac:	2697c783          	lbu	a5,617(a5) # 80051011 <excpt+0x1>
    80011db0:	0001b597          	auipc	a1,0x1b
    80011db4:	54058593          	addi	a1,a1,1344 # 8002d2f0 <__func__.0+0x2d0>
    80011db8:	e789                	bnez	a5,80011dc2 <external_interrupt_MEI+0x8bc>
    80011dba:	0001b597          	auipc	a1,0x1b
    80011dbe:	52658593          	addi	a1,a1,1318 # 8002d2e0 <__func__.0+0x2c0>
    80011dc2:	0001b517          	auipc	a0,0x1b
    80011dc6:	56e50513          	addi	a0,a0,1390 # 8002d330 <__func__.0+0x310>
    80011dca:	7f1180ef          	jal	8002adba <printf>
    80011dce:	0003f797          	auipc	a5,0x3f
    80011dd2:	2437c783          	lbu	a5,579(a5) # 80051011 <excpt+0x1>
    80011dd6:	1e079c63          	bnez	a5,80011fce <external_interrupt_MEI+0xac8>
    80011dda:	4529                	li	a0,10
    80011ddc:	4cd170ef          	jal	80029aa8 <putchar>
    80011de0:	c419                	beqz	s0,80011dee <external_interrupt_MEI+0x8e8>
    80011de2:	0003f417          	auipc	s0,0x3f
    80011de6:	22f44403          	lbu	s0,559(s0) # 80051011 <excpt+0x1>
    80011dea:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=1，且mip.MEIP=0，mie.MEIE=1，无代理
    TEST_SETUP_EXCEPT();
    80011dee:	f85ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011df2:	4511                	li	a0,4
    80011df4:	87aef0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    80011df8:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011dfc:	6785                	lui	a5,0x1
    80011dfe:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011e02:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIP,MIP_MEIP);
    80011e06:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011e0a:	4509                	li	a0,2
    80011e0c:	862ef0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011e10:	08200593          	li	a1,130
    80011e14:	0001f617          	auipc	a2,0x1f
    80011e18:	21460613          	addi	a2,a2,532 # 80031028 <__func__.0+0x4008>
    80011e1c:	0001b517          	auipc	a0,0x1b
    80011e20:	4fc50513          	addi	a0,a0,1276 # 8002d318 <__func__.0+0x2f8>
    80011e24:	797180ef          	jal	8002adba <printf>
    80011e28:	0003f797          	auipc	a5,0x3f
    80011e2c:	1e97c783          	lbu	a5,489(a5) # 80051011 <excpt+0x1>
    80011e30:	0001b597          	auipc	a1,0x1b
    80011e34:	4c058593          	addi	a1,a1,1216 # 8002d2f0 <__func__.0+0x2d0>
    80011e38:	c799                	beqz	a5,80011e46 <external_interrupt_MEI+0x940>
    80011e3a:	57fd                	li	a5,-1
    80011e3c:	6498                	ld	a4,8(s1)
    80011e3e:	17fe                	slli	a5,a5,0x3f
    80011e40:	07ad                	addi	a5,a5,11
    80011e42:	24f70763          	beq	a4,a5,80012090 <external_interrupt_MEI+0xb8a>
    80011e46:	0001b517          	auipc	a0,0x1b
    80011e4a:	4ea50513          	addi	a0,a0,1258 # 8002d330 <__func__.0+0x310>
    80011e4e:	76d180ef          	jal	8002adba <printf>
    80011e52:	0003f797          	auipc	a5,0x3f
    80011e56:	1bf7c783          	lbu	a5,447(a5) # 80051011 <excpt+0x1>
    80011e5a:	c799                	beqz	a5,80011e68 <external_interrupt_MEI+0x962>
    80011e5c:	57fd                	li	a5,-1
    80011e5e:	6498                	ld	a4,8(s1)
    80011e60:	17fe                	slli	a5,a5,0x3f
    80011e62:	07ad                	addi	a5,a5,11
    80011e64:	12f70a63          	beq	a4,a5,80011f98 <external_interrupt_MEI+0xa92>
    80011e68:	0001b517          	auipc	a0,0x1b
    80011e6c:	4d050513          	addi	a0,a0,1232 # 8002d338 <__func__.0+0x318>
    80011e70:	74b180ef          	jal	8002adba <printf>
    80011e74:	02900513          	li	a0,41
    80011e78:	431170ef          	jal	80029aa8 <putchar>
    80011e7c:	4529                	li	a0,10
    80011e7e:	42b170ef          	jal	80029aa8 <putchar>
    80011e82:	c419                	beqz	s0,80011e90 <external_interrupt_MEI+0x98a>
    80011e84:	0003f797          	auipc	a5,0x3f
    80011e88:	18d7c783          	lbu	a5,397(a5) # 80051011 <excpt+0x1>
    80011e8c:	4401                	li	s0,0
    80011e8e:	ebe9                	bnez	a5,80011f60 <external_interrupt_MEI+0xa5a>
        excpt.cause == CAUSE_MEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生高特权级别单bit外部中断，mstatus.mie=0，且mip.MEIP，mie.MIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80011e90:	ee3ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80011e94:	4511                	li	a0,4
    80011e96:	fd9ee0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    80011e9a:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MEIE);
    80011e9e:	6785                	lui	a5,0x1
    80011ea0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80011ea4:	3047a073          	csrs	mie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80011ea8:	577d                	li	a4,-1
    80011eaa:	30373073          	csrc	mideleg,a4
    CSRC(CSR_MEDELEG,(uint64_t)-1);
    80011eae:	30273073          	csrc	medeleg,a4
    CSRC(CSR_MIP,MIP_MEIP);
    80011eb2:	3447b073          	csrc	mip,a5

    goto_priv(PRIV_VS);
    80011eb6:	4509                	li	a0,2
    80011eb8:	fb7ee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011ebc:	08200593          	li	a1,130
    80011ec0:	0001f617          	auipc	a2,0x1f
    80011ec4:	1c860613          	addi	a2,a2,456 # 80031088 <__func__.0+0x4068>
    80011ec8:	0001b517          	auipc	a0,0x1b
    80011ecc:	45050513          	addi	a0,a0,1104 # 8002d318 <__func__.0+0x2f8>
    80011ed0:	6eb180ef          	jal	8002adba <printf>
    80011ed4:	0003f797          	auipc	a5,0x3f
    80011ed8:	13d7c783          	lbu	a5,317(a5) # 80051011 <excpt+0x1>
    80011edc:	0001b597          	auipc	a1,0x1b
    80011ee0:	41458593          	addi	a1,a1,1044 # 8002d2f0 <__func__.0+0x2d0>
    80011ee4:	e789                	bnez	a5,80011eee <external_interrupt_MEI+0x9e8>
    80011ee6:	0001b597          	auipc	a1,0x1b
    80011eea:	3fa58593          	addi	a1,a1,1018 # 8002d2e0 <__func__.0+0x2c0>
    80011eee:	0001b517          	auipc	a0,0x1b
    80011ef2:	44250513          	addi	a0,a0,1090 # 8002d330 <__func__.0+0x310>
    80011ef6:	6c5180ef          	jal	8002adba <printf>
    80011efa:	0003f797          	auipc	a5,0x3f
    80011efe:	1177c783          	lbu	a5,279(a5) # 80051011 <excpt+0x1>
    80011f02:	0e079d63          	bnez	a5,80011ffc <external_interrupt_MEI+0xaf6>
    80011f06:	4529                	li	a0,10
    80011f08:	3a1170ef          	jal	80029aa8 <putchar>
    80011f0c:	c411                	beqz	s0,80011f18 <external_interrupt_MEI+0xa12>
    80011f0e:	0003f797          	auipc	a5,0x3f
    80011f12:	1037c783          	lbu	a5,259(a5) # 80051011 <excpt+0x1>
    80011f16:	cf9d                	beqz	a5,80011f54 <external_interrupt_MEI+0xa4e>
    80011f18:	4401                	li	s0,0
    //     excpt.cause == CAUSE_MEI &&
    //     excpt.priv == PRIV_HS
    // ); 


    TEST_END();
    80011f1a:	0001b597          	auipc	a1,0x1b
    80011f1e:	3d658593          	addi	a1,a1,982 # 8002d2f0 <__func__.0+0x2d0>
    80011f22:	0001b517          	auipc	a0,0x1b
    80011f26:	47650513          	addi	a0,a0,1142 # 8002d398 <__func__.0+0x378>
    80011f2a:	691180ef          	jal	8002adba <printf>
    80011f2e:	4511                	li	a0,4
    80011f30:	f3fee0ef          	jal	80000e6e <goto_priv>
    80011f34:	857ef0ef          	jal	8000178a <reset_state>
}
    80011f38:	60e2                	ld	ra,24(sp)
    80011f3a:	8522                	mv	a0,s0
    80011f3c:	6442                	ld	s0,16(sp)
    80011f3e:	64a2                	ld	s1,8(sp)
    80011f40:	6105                	addi	sp,sp,32
    80011f42:	8082                	ret
    TEST_ASSERT("m mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1",
    80011f44:	6480                	ld	s0,8(s1)
    80011f46:	57ad                	li	a5,-21
    80011f48:	8385                	srli	a5,a5,0x1
    80011f4a:	943e                	add	s0,s0,a5
    80011f4c:	00143413          	seqz	s0,s0
    80011f50:	fd4ff06f          	j	80011724 <external_interrupt_MEI+0x21e>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011f54:	4405                	li	s0,1
    TEST_END();
    80011f56:	0001b597          	auipc	a1,0x1b
    80011f5a:	38a58593          	addi	a1,a1,906 # 8002d2e0 <__func__.0+0x2c0>
    80011f5e:	b7d1                	j	80011f22 <external_interrupt_MEI+0xa1c>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011f60:	57fd                	li	a5,-1
    80011f62:	6498                	ld	a4,8(s1)
    80011f64:	17fe                	slli	a5,a5,0x3f
    80011f66:	07ad                	addi	a5,a5,11
    80011f68:	f2f714e3          	bne	a4,a5,80011e90 <external_interrupt_MEI+0x98a>
    80011f6c:	0003f417          	auipc	s0,0x3f
    80011f70:	0a842403          	lw	s0,168(s0) # 80051014 <excpt+0x4>
    80011f74:	1479                	addi	s0,s0,-2
    80011f76:	00143413          	seqz	s0,s0
    80011f7a:	bf19                	j	80011e90 <external_interrupt_MEI+0x98a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011f7c:	57fd                	li	a5,-1
    80011f7e:	6498                	ld	a4,8(s1)
    80011f80:	17fe                	slli	a5,a5,0x3f
    80011f82:	07ad                	addi	a5,a5,11
    80011f84:	bcf719e3          	bne	a4,a5,80011b56 <external_interrupt_MEI+0x650>
    80011f88:	0003f417          	auipc	s0,0x3f
    80011f8c:	08c42403          	lw	s0,140(s0) # 80051014 <excpt+0x4>
    80011f90:	1475                	addi	s0,s0,-3
    80011f92:	00143413          	seqz	s0,s0
    80011f96:	b6c1                	j	80011b56 <external_interrupt_MEI+0x650>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011f98:	0003f717          	auipc	a4,0x3f
    80011f9c:	07c72703          	lw	a4,124(a4) # 80051014 <excpt+0x4>
    80011fa0:	4789                	li	a5,2
    80011fa2:	ecf713e3          	bne	a4,a5,80011e68 <external_interrupt_MEI+0x962>
    80011fa6:	bdd9                	j	80011e7c <external_interrupt_MEI+0x976>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80011fa8:	0003f717          	auipc	a4,0x3f
    80011fac:	06c72703          	lw	a4,108(a4) # 80051014 <excpt+0x4>
    80011fb0:	478d                	li	a5,3
    80011fb2:	b6f71de3          	bne	a4,a5,80011b2c <external_interrupt_MEI+0x626>
    80011fb6:	b669                	j	80011b40 <external_interrupt_MEI+0x63a>
    TEST_ASSERT("HS mode leads to no interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011fb8:	0001b517          	auipc	a0,0x1b
    80011fbc:	38050513          	addi	a0,a0,896 # 8002d338 <__func__.0+0x318>
    80011fc0:	5fb180ef          	jal	8002adba <printf>
    80011fc4:	02900513          	li	a0,41
    80011fc8:	2e1170ef          	jal	80029aa8 <putchar>
    80011fcc:	b101                	j	80011bcc <external_interrupt_MEI+0x6c6>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80011fce:	0001b517          	auipc	a0,0x1b
    80011fd2:	36a50513          	addi	a0,a0,874 # 8002d338 <__func__.0+0x318>
    80011fd6:	5e5180ef          	jal	8002adba <printf>
    80011fda:	02900513          	li	a0,41
    80011fde:	2cb170ef          	jal	80029aa8 <putchar>
    80011fe2:	bbe5                	j	80011dda <external_interrupt_MEI+0x8d4>
    TEST_ASSERT("m mode leads to no interrupt pending when mstatus.mie=1 and mip.meip=1 and mie.meie=0",
    80011fe4:	0001b517          	auipc	a0,0x1b
    80011fe8:	35450513          	addi	a0,a0,852 # 8002d338 <__func__.0+0x318>
    80011fec:	5cf180ef          	jal	8002adba <printf>
    80011ff0:	02900513          	li	a0,41
    80011ff4:	2b5170ef          	jal	80029aa8 <putchar>
    80011ff8:	e64ff06f          	j	8001165c <external_interrupt_MEI+0x156>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=1 ",
    80011ffc:	0001b517          	auipc	a0,0x1b
    80012000:	33c50513          	addi	a0,a0,828 # 8002d338 <__func__.0+0x318>
    80012004:	5b7180ef          	jal	8002adba <printf>
    80012008:	02900513          	li	a0,41
    8001200c:	29d170ef          	jal	80029aa8 <putchar>
    80012010:	bddd                	j	80011f06 <external_interrupt_MEI+0xa00>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=1 and mie.meie=0 ",
    80012012:	0001b517          	auipc	a0,0x1b
    80012016:	32650513          	addi	a0,a0,806 # 8002d338 <__func__.0+0x318>
    8001201a:	5a1180ef          	jal	8002adba <printf>
    8001201e:	02900513          	li	a0,41
    80012022:	287170ef          	jal	80029aa8 <putchar>
    80012026:	bca5                	j	80011a9e <external_interrupt_MEI+0x598>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=0 and mie.meie=0",
    80012028:	0001b517          	auipc	a0,0x1b
    8001202c:	31050513          	addi	a0,a0,784 # 8002d338 <__func__.0+0x318>
    80012030:	58b180ef          	jal	8002adba <printf>
    80012034:	02900513          	li	a0,41
    80012038:	271170ef          	jal	80029aa8 <putchar>
    8001203c:	855ff06f          	j	80011890 <external_interrupt_MEI+0x38a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=0",
    80012040:	0001b517          	auipc	a0,0x1b
    80012044:	2f850513          	addi	a0,a0,760 # 8002d338 <__func__.0+0x318>
    80012048:	573180ef          	jal	8002adba <printf>
    8001204c:	02900513          	li	a0,41
    80012050:	259170ef          	jal	80029aa8 <putchar>
    80012054:	fbcff06f          	j	80011810 <external_interrupt_MEI+0x30a>
    TEST_ASSERT("m mode leads to a external interrupt when mstatus.mie=0 and mip.meip=1 and mie.meie=1",
    80012058:	0001b517          	auipc	a0,0x1b
    8001205c:	2e050513          	addi	a0,a0,736 # 8002d338 <__func__.0+0x318>
    80012060:	55b180ef          	jal	8002adba <printf>
    80012064:	02900513          	li	a0,41
    80012068:	241170ef          	jal	80029aa8 <putchar>
    8001206c:	f24ff06f          	j	80011790 <external_interrupt_MEI+0x28a>
    TEST_ASSERT("HS mode leads to external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012070:	0003f717          	auipc	a4,0x3f
    80012074:	fa472703          	lw	a4,-92(a4) # 80051014 <excpt+0x4>
    80012078:	478d                	li	a5,3
    8001207a:	0001b597          	auipc	a1,0x1b
    8001207e:	26658593          	addi	a1,a1,614 # 8002d2e0 <__func__.0+0x2c0>
    80012082:	a8f704e3          	beq	a4,a5,80011b0a <external_interrupt_MEI+0x604>
    80012086:	0001b597          	auipc	a1,0x1b
    8001208a:	26a58593          	addi	a1,a1,618 # 8002d2f0 <__func__.0+0x2d0>
    8001208e:	bcb5                	j	80011b0a <external_interrupt_MEI+0x604>
    TEST_ASSERT("VS mode leads to M level external interrupt when mstatus.mie=1 and mip.meip=0 and mie.meie=1 ",
    80012090:	0003f717          	auipc	a4,0x3f
    80012094:	f8472703          	lw	a4,-124(a4) # 80051014 <excpt+0x4>
    80012098:	4789                	li	a5,2
    8001209a:	0001b597          	auipc	a1,0x1b
    8001209e:	24658593          	addi	a1,a1,582 # 8002d2e0 <__func__.0+0x2c0>
    800120a2:	daf702e3          	beq	a4,a5,80011e46 <external_interrupt_MEI+0x940>
    800120a6:	0001b597          	auipc	a1,0x1b
    800120aa:	24a58593          	addi	a1,a1,586 # 8002d2f0 <__func__.0+0x2d0>
    800120ae:	bb61                	j	80011e46 <external_interrupt_MEI+0x940>

00000000800120b0 <external_interrupt_SEI>:


bool external_interrupt_SEI() {
    800120b0:	1101                	addi	sp,sp,-32

    TEST_START();
    800120b2:	0001a597          	auipc	a1,0x1a
    800120b6:	aae58593          	addi	a1,a1,-1362 # 8002bb60 <__func__.1>
    800120ba:	0001b517          	auipc	a0,0x1b
    800120be:	24650513          	addi	a0,a0,582 # 8002d300 <__func__.0+0x2e0>
bool external_interrupt_SEI() {
    800120c2:	ec06                	sd	ra,24(sp)
    800120c4:	e822                	sd	s0,16(sp)
    800120c6:	e426                	sd	s1,8(sp)
    TEST_START();
    800120c8:	4f3180ef          	jal	8002adba <printf>
    800120cc:	4529                	li	a0,10
    800120ce:	1db170ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    800120d2:	ca1ee0ef          	jal	80000d72 <test_setup_except_function>

   
    //HS模式下产生单bit外部中断，sstatus.sie=1，且mip，sie对应的SEIP、SEIE拉高
    goto_priv(PRIV_HS);
    800120d6:	450d                	li	a0,3
    800120d8:	d97ee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     //sie位
    800120dc:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800120e0:	20000793          	li	a5,512
    800120e4:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    800120e8:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    800120ec:	450d                	li	a0,3
    800120ee:	d81ee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800120f2:	08200593          	li	a1,130
    800120f6:	0001f617          	auipc	a2,0x1f
    800120fa:	ff260613          	addi	a2,a2,-14 # 800310e8 <__func__.0+0x40c8>
    800120fe:	0001b517          	auipc	a0,0x1b
    80012102:	21a50513          	addi	a0,a0,538 # 8002d318 <__func__.0+0x2f8>
    80012106:	4b5180ef          	jal	8002adba <printf>
    8001210a:	0003f797          	auipc	a5,0x3f
    8001210e:	f077c783          	lbu	a5,-249(a5) # 80051011 <excpt+0x1>
    80012112:	0003f497          	auipc	s1,0x3f
    80012116:	efe48493          	addi	s1,s1,-258 # 80051010 <excpt>
    8001211a:	0001b597          	auipc	a1,0x1b
    8001211e:	1d658593          	addi	a1,a1,470 # 8002d2f0 <__func__.0+0x2d0>
    80012122:	c799                	beqz	a5,80012130 <external_interrupt_SEI+0x80>
    80012124:	57fd                	li	a5,-1
    80012126:	6498                	ld	a4,8(s1)
    80012128:	17fe                	slli	a5,a5,0x3f
    8001212a:	07a5                	addi	a5,a5,9
    8001212c:	74f70763          	beq	a4,a5,8001287a <external_interrupt_SEI+0x7ca>
    80012130:	0001b517          	auipc	a0,0x1b
    80012134:	20050513          	addi	a0,a0,512 # 8002d330 <__func__.0+0x310>
    80012138:	483180ef          	jal	8002adba <printf>
    8001213c:	0003f797          	auipc	a5,0x3f
    80012140:	ed57c783          	lbu	a5,-299(a5) # 80051011 <excpt+0x1>
    80012144:	c799                	beqz	a5,80012152 <external_interrupt_SEI+0xa2>
    80012146:	57fd                	li	a5,-1
    80012148:	6498                	ld	a4,8(s1)
    8001214a:	17fe                	slli	a5,a5,0x3f
    8001214c:	07a5                	addi	a5,a5,9
    8001214e:	5ef70f63          	beq	a4,a5,8001274c <external_interrupt_SEI+0x69c>
    80012152:	0001b517          	auipc	a0,0x1b
    80012156:	1e650513          	addi	a0,a0,486 # 8002d338 <__func__.0+0x318>
    8001215a:	461180ef          	jal	8002adba <printf>
    8001215e:	02900513          	li	a0,41
    80012162:	147170ef          	jal	80029aa8 <putchar>
    80012166:	4529                	li	a0,10
    80012168:	141170ef          	jal	80029aa8 <putchar>
    8001216c:	0003f797          	auipc	a5,0x3f
    80012170:	ea57c783          	lbu	a5,-347(a5) # 80051011 <excpt+0x1>
    80012174:	4401                	li	s0,0
    80012176:	c799                	beqz	a5,80012184 <external_interrupt_SEI+0xd4>
    80012178:	57fd                	li	a5,-1
    8001217a:	6498                	ld	a4,8(s1)
    8001217c:	17fe                	slli	a5,a5,0x3f
    8001217e:	07a5                	addi	a5,a5,9
    80012180:	6af70563          	beq	a4,a5,8001282a <external_interrupt_SEI+0x77a>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=1，sie.SEIE=0
    TEST_SETUP_EXCEPT();
    80012184:	befee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_HS);
    80012188:	450d                	li	a0,3
    8001218a:	ce5ee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    8001218e:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012192:	20000793          	li	a5,512
    80012196:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8001219a:	1447a073          	csrs	sip,a5

    goto_priv(PRIV_HS);
    8001219e:	450d                	li	a0,3
    800121a0:	ccfee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800121a4:	08200593          	li	a1,130
    800121a8:	0001f617          	auipc	a2,0x1f
    800121ac:	fa060613          	addi	a2,a2,-96 # 80031148 <__func__.0+0x4128>
    800121b0:	0001b517          	auipc	a0,0x1b
    800121b4:	16850513          	addi	a0,a0,360 # 8002d318 <__func__.0+0x2f8>
    800121b8:	403180ef          	jal	8002adba <printf>
    800121bc:	0003f797          	auipc	a5,0x3f
    800121c0:	e557c783          	lbu	a5,-427(a5) # 80051011 <excpt+0x1>
    800121c4:	0001b597          	auipc	a1,0x1b
    800121c8:	12c58593          	addi	a1,a1,300 # 8002d2f0 <__func__.0+0x2d0>
    800121cc:	e789                	bnez	a5,800121d6 <external_interrupt_SEI+0x126>
    800121ce:	0001b597          	auipc	a1,0x1b
    800121d2:	11258593          	addi	a1,a1,274 # 8002d2e0 <__func__.0+0x2c0>
    800121d6:	0001b517          	auipc	a0,0x1b
    800121da:	15a50513          	addi	a0,a0,346 # 8002d330 <__func__.0+0x310>
    800121de:	3dd180ef          	jal	8002adba <printf>
    800121e2:	0003f797          	auipc	a5,0x3f
    800121e6:	e2f7c783          	lbu	a5,-465(a5) # 80051011 <excpt+0x1>
    800121ea:	5a079f63          	bnez	a5,800127a8 <external_interrupt_SEI+0x6f8>
    800121ee:	4529                	li	a0,10
    800121f0:	0b9170ef          	jal	80029aa8 <putchar>
    800121f4:	c419                	beqz	s0,80012202 <external_interrupt_SEI+0x152>
    800121f6:	0003f417          	auipc	s0,0x3f
    800121fa:	e1b44403          	lbu	s0,-485(s0) # 80051011 <excpt+0x1>
    800121fe:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生单bit外部中断，sstatus.sie=1，且sip.SEIP=0，sie.SEIE=1
    TEST_SETUP_EXCEPT();
    80012202:	b71ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012206:	4511                	li	a0,4
    80012208:	c67ee0ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_MIDELEG,0);
    8001220c:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012210:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    80012214:	20000793          	li	a5,512
    80012218:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8001221c:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012220:	450d                	li	a0,3
    80012222:	c4dee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012226:	08200593          	li	a1,130
    8001222a:	0001f617          	auipc	a2,0x1f
    8001222e:	f6e60613          	addi	a2,a2,-146 # 80031198 <__func__.0+0x4178>
    80012232:	0001b517          	auipc	a0,0x1b
    80012236:	0e650513          	addi	a0,a0,230 # 8002d318 <__func__.0+0x2f8>
    8001223a:	381180ef          	jal	8002adba <printf>
    8001223e:	0003f797          	auipc	a5,0x3f
    80012242:	dd37c783          	lbu	a5,-557(a5) # 80051011 <excpt+0x1>
    80012246:	0001b597          	auipc	a1,0x1b
    8001224a:	0aa58593          	addi	a1,a1,170 # 8002d2f0 <__func__.0+0x2d0>
    8001224e:	c799                	beqz	a5,8001225c <external_interrupt_SEI+0x1ac>
    80012250:	57fd                	li	a5,-1
    80012252:	6498                	ld	a4,8(s1)
    80012254:	17fe                	slli	a5,a5,0x3f
    80012256:	07a5                	addi	a5,a5,9
    80012258:	5ef70163          	beq	a4,a5,8001283a <external_interrupt_SEI+0x78a>
    8001225c:	0001b517          	auipc	a0,0x1b
    80012260:	0d450513          	addi	a0,a0,212 # 8002d330 <__func__.0+0x310>
    80012264:	357180ef          	jal	8002adba <printf>
    80012268:	0003f797          	auipc	a5,0x3f
    8001226c:	da97c783          	lbu	a5,-599(a5) # 80051011 <excpt+0x1>
    80012270:	c799                	beqz	a5,8001227e <external_interrupt_SEI+0x1ce>
    80012272:	57fd                	li	a5,-1
    80012274:	6498                	ld	a4,8(s1)
    80012276:	17fe                	slli	a5,a5,0x3f
    80012278:	07a5                	addi	a5,a5,9
    8001227a:	4cf70163          	beq	a4,a5,8001273c <external_interrupt_SEI+0x68c>
    8001227e:	0001b517          	auipc	a0,0x1b
    80012282:	0ba50513          	addi	a0,a0,186 # 8002d338 <__func__.0+0x318>
    80012286:	335180ef          	jal	8002adba <printf>
    8001228a:	02900513          	li	a0,41
    8001228e:	01b170ef          	jal	80029aa8 <putchar>
    80012292:	4529                	li	a0,10
    80012294:	015170ef          	jal	80029aa8 <putchar>
    80012298:	c801                	beqz	s0,800122a8 <external_interrupt_SEI+0x1f8>
    8001229a:	0003f797          	auipc	a5,0x3f
    8001229e:	d777c783          	lbu	a5,-649(a5) # 80051011 <excpt+0x1>
    800122a2:	4401                	li	s0,0
    800122a4:	46079663          	bnez	a5,80012710 <external_interrupt_SEI+0x660>
    //     excpt.priv == PRIV_HS
    // ); 
    

    //HS模式下产生单bit外部中断，sstatus.mie=1，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    800122a8:	acbee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800122ac:	4511                	li	a0,4
    800122ae:	bc1ee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1)     
    800122b2:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    800122b6:	20000793          	li	a5,512
    800122ba:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800122be:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    800122c2:	450d                	li	a0,3
    800122c4:	babee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    800122c8:	08200593          	li	a1,130
    800122cc:	0001f617          	auipc	a2,0x1f
    800122d0:	f2c60613          	addi	a2,a2,-212 # 800311f8 <__func__.0+0x41d8>
    800122d4:	0001b517          	auipc	a0,0x1b
    800122d8:	04450513          	addi	a0,a0,68 # 8002d318 <__func__.0+0x2f8>
    800122dc:	2df180ef          	jal	8002adba <printf>
    800122e0:	0003f797          	auipc	a5,0x3f
    800122e4:	d317c783          	lbu	a5,-719(a5) # 80051011 <excpt+0x1>
    800122e8:	0001b597          	auipc	a1,0x1b
    800122ec:	00858593          	addi	a1,a1,8 # 8002d2f0 <__func__.0+0x2d0>
    800122f0:	e789                	bnez	a5,800122fa <external_interrupt_SEI+0x24a>
    800122f2:	0001b597          	auipc	a1,0x1b
    800122f6:	fee58593          	addi	a1,a1,-18 # 8002d2e0 <__func__.0+0x2c0>
    800122fa:	0001b517          	auipc	a0,0x1b
    800122fe:	03650513          	addi	a0,a0,54 # 8002d330 <__func__.0+0x310>
    80012302:	2b9180ef          	jal	8002adba <printf>
    80012306:	0003f797          	auipc	a5,0x3f
    8001230a:	d0b7c783          	lbu	a5,-757(a5) # 80051011 <excpt+0x1>
    8001230e:	48079263          	bnez	a5,80012792 <external_interrupt_SEI+0x6e2>
    80012312:	4529                	li	a0,10
    80012314:	794170ef          	jal	80029aa8 <putchar>
    80012318:	c419                	beqz	s0,80012326 <external_interrupt_SEI+0x276>
    8001231a:	0003f417          	auipc	s0,0x3f
    8001231e:	cf744403          	lbu	s0,-777(s0) # 80051011 <excpt+0x1>
    80012322:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 
    
    //HS模式下产生单bit外部中断，sstatus.sie=0，且sip.SEIP=0，sie.SIE=0
    TEST_SETUP_EXCEPT();
    80012326:	a4dee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001232a:	4511                	li	a0,4
    8001232c:	b43ee0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1)     
    80012330:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012334:	20000793          	li	a5,512
    80012338:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8001233c:	1447b073          	csrc	sip,a5

    goto_priv(PRIV_HS);
    80012340:	450d                	li	a0,3
    80012342:	b2dee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    80012346:	08200593          	li	a1,130
    8001234a:	0001f617          	auipc	a2,0x1f
    8001234e:	efe60613          	addi	a2,a2,-258 # 80031248 <__func__.0+0x4228>
    80012352:	0001b517          	auipc	a0,0x1b
    80012356:	fc650513          	addi	a0,a0,-58 # 8002d318 <__func__.0+0x2f8>
    8001235a:	261180ef          	jal	8002adba <printf>
    8001235e:	0003f797          	auipc	a5,0x3f
    80012362:	cb37c783          	lbu	a5,-845(a5) # 80051011 <excpt+0x1>
    80012366:	0001b597          	auipc	a1,0x1b
    8001236a:	f8a58593          	addi	a1,a1,-118 # 8002d2f0 <__func__.0+0x2d0>
    8001236e:	e789                	bnez	a5,80012378 <external_interrupt_SEI+0x2c8>
    80012370:	0001b597          	auipc	a1,0x1b
    80012374:	f7058593          	addi	a1,a1,-144 # 8002d2e0 <__func__.0+0x2c0>
    80012378:	0001b517          	auipc	a0,0x1b
    8001237c:	fb850513          	addi	a0,a0,-72 # 8002d330 <__func__.0+0x310>
    80012380:	23b180ef          	jal	8002adba <printf>
    80012384:	0003f797          	auipc	a5,0x3f
    80012388:	c8d7c783          	lbu	a5,-883(a5) # 80051011 <excpt+0x1>
    8001238c:	3e079863          	bnez	a5,8001277c <external_interrupt_SEI+0x6cc>
    80012390:	4529                	li	a0,10
    80012392:	716170ef          	jal	80029aa8 <putchar>
    80012396:	c419                	beqz	s0,800123a4 <external_interrupt_SEI+0x2f4>
    80012398:	0003f417          	auipc	s0,0x3f
    8001239c:	c7944403          	lbu	s0,-903(s0) # 80051011 <excpt+0x1>
    800123a0:	00144413          	xori	s0,s0,1

//---------------------------------------------------------
    

    //VS模式下产生单bit外部中断，sstatus.sie=1，且sip，sie对应的SEIP、SEIE拉高
    TEST_SETUP_EXCEPT();
    800123a4:	9cfee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800123a8:	4511                	li	a0,4
    800123aa:	ac5ee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800123ae:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800123b2:	20000793          	li	a5,512
    800123b6:	1047a073          	csrs	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    800123ba:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    800123be:	4509                	li	a0,2
    800123c0:	aafee0ef          	jal	80000e6e <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800123c4:	08200593          	li	a1,130
    800123c8:	0001f617          	auipc	a2,0x1f
    800123cc:	ed060613          	addi	a2,a2,-304 # 80031298 <__func__.0+0x4278>
    800123d0:	0001b517          	auipc	a0,0x1b
    800123d4:	f4850513          	addi	a0,a0,-184 # 8002d318 <__func__.0+0x2f8>
    800123d8:	1e3180ef          	jal	8002adba <printf>
    800123dc:	0003f797          	auipc	a5,0x3f
    800123e0:	c357c783          	lbu	a5,-971(a5) # 80051011 <excpt+0x1>
    800123e4:	0001b597          	auipc	a1,0x1b
    800123e8:	f0c58593          	addi	a1,a1,-244 # 8002d2f0 <__func__.0+0x2d0>
    800123ec:	c799                	beqz	a5,800123fa <external_interrupt_SEI+0x34a>
    800123ee:	57fd                	li	a5,-1
    800123f0:	6498                	ld	a4,8(s1)
    800123f2:	17fe                	slli	a5,a5,0x3f
    800123f4:	07a5                	addi	a5,a5,9
    800123f6:	40f70a63          	beq	a4,a5,8001280a <external_interrupt_SEI+0x75a>
    800123fa:	0001b517          	auipc	a0,0x1b
    800123fe:	f3650513          	addi	a0,a0,-202 # 8002d330 <__func__.0+0x310>
    80012402:	1b9180ef          	jal	8002adba <printf>
    80012406:	0003f797          	auipc	a5,0x3f
    8001240a:	c0b7c783          	lbu	a5,-1013(a5) # 80051011 <excpt+0x1>
    8001240e:	c799                	beqz	a5,8001241c <external_interrupt_SEI+0x36c>
    80012410:	57fd                	li	a5,-1
    80012412:	6498                	ld	a4,8(s1)
    80012414:	17fe                	slli	a5,a5,0x3f
    80012416:	07a5                	addi	a5,a5,9
    80012418:	30f70a63          	beq	a4,a5,8001272c <external_interrupt_SEI+0x67c>
    8001241c:	0001b517          	auipc	a0,0x1b
    80012420:	f1c50513          	addi	a0,a0,-228 # 8002d338 <__func__.0+0x318>
    80012424:	197180ef          	jal	8002adba <printf>
    80012428:	02900513          	li	a0,41
    8001242c:	67c170ef          	jal	80029aa8 <putchar>
    80012430:	4529                	li	a0,10
    80012432:	676170ef          	jal	80029aa8 <putchar>
    80012436:	c801                	beqz	s0,80012446 <external_interrupt_SEI+0x396>
    80012438:	0003f797          	auipc	a5,0x3f
    8001243c:	bd97c783          	lbu	a5,-1063(a5) # 80051011 <excpt+0x1>
    80012440:	4401                	li	s0,0
    80012442:	2a079963          	bnez	a5,800126f4 <external_interrupt_SEI+0x644>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=1，sie=0
    TEST_SETUP_EXCEPT();
    80012446:	92dee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001244a:	4511                	li	a0,4
    8001244c:	a23ee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012450:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012454:	20000793          	li	a5,512
    80012458:	1047b073          	csrc	sie,a5
    CSRS(CSR_SIP,SIP_SEIP);
    8001245c:	1447a073          	csrs	sip,a5

    
    goto_priv(PRIV_VS);
    80012460:	4509                	li	a0,2
    80012462:	a0dee0ef          	jal	80000e6e <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    80012466:	08200593          	li	a1,130
    8001246a:	0001f617          	auipc	a2,0x1f
    8001246e:	e8660613          	addi	a2,a2,-378 # 800312f0 <__func__.0+0x42d0>
    80012472:	0001b517          	auipc	a0,0x1b
    80012476:	ea650513          	addi	a0,a0,-346 # 8002d318 <__func__.0+0x2f8>
    8001247a:	141180ef          	jal	8002adba <printf>
    8001247e:	0003f797          	auipc	a5,0x3f
    80012482:	b937c783          	lbu	a5,-1133(a5) # 80051011 <excpt+0x1>
    80012486:	0001b597          	auipc	a1,0x1b
    8001248a:	e6a58593          	addi	a1,a1,-406 # 8002d2f0 <__func__.0+0x2d0>
    8001248e:	c799                	beqz	a5,8001249c <external_interrupt_SEI+0x3ec>
    80012490:	57fd                	li	a5,-1
    80012492:	6498                	ld	a4,8(s1)
    80012494:	17fe                	slli	a5,a5,0x3f
    80012496:	07a5                	addi	a5,a5,9
    80012498:	34f70963          	beq	a4,a5,800127ea <external_interrupt_SEI+0x73a>
    8001249c:	0001b517          	auipc	a0,0x1b
    800124a0:	e9450513          	addi	a0,a0,-364 # 8002d330 <__func__.0+0x310>
    800124a4:	117180ef          	jal	8002adba <printf>
    800124a8:	0003f797          	auipc	a5,0x3f
    800124ac:	b697c783          	lbu	a5,-1175(a5) # 80051011 <excpt+0x1>
    800124b0:	c799                	beqz	a5,800124be <external_interrupt_SEI+0x40e>
    800124b2:	57fd                	li	a5,-1
    800124b4:	6498                	ld	a4,8(s1)
    800124b6:	17fe                	slli	a5,a5,0x3f
    800124b8:	07a5                	addi	a5,a5,9
    800124ba:	2af70963          	beq	a4,a5,8001276c <external_interrupt_SEI+0x6bc>
    800124be:	0001b517          	auipc	a0,0x1b
    800124c2:	e7a50513          	addi	a0,a0,-390 # 8002d338 <__func__.0+0x318>
    800124c6:	0f5180ef          	jal	8002adba <printf>
    800124ca:	02900513          	li	a0,41
    800124ce:	5da170ef          	jal	80029aa8 <putchar>
    800124d2:	4529                	li	a0,10
    800124d4:	5d4170ef          	jal	80029aa8 <putchar>
    800124d8:	c801                	beqz	s0,800124e8 <external_interrupt_SEI+0x438>
    800124da:	0003f797          	auipc	a5,0x3f
    800124de:	b377c783          	lbu	a5,-1225(a5) # 80051011 <excpt+0x1>
    800124e2:	4401                	li	s0,0
    800124e4:	1e079a63          	bnez	a5,800126d8 <external_interrupt_SEI+0x628>
        excpt.cause == CAUSE_SEI &&
        excpt.priv == PRIV_M
    ); 

    //vs模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=1
    TEST_SETUP_EXCEPT();
    800124e8:	88bee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800124ec:	4511                	li	a0,4
    800124ee:	981ee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    800124f2:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SEIE);
    800124f6:	20000793          	li	a5,512
    800124fa:	1047a073          	csrs	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800124fe:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    80012502:	4509                	li	a0,2
    80012504:	96bee0ef          	jal	80000e6e <goto_priv>

    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012508:	08200593          	li	a1,130
    8001250c:	0001f617          	auipc	a2,0x1f
    80012510:	e3c60613          	addi	a2,a2,-452 # 80031348 <__func__.0+0x4328>
    80012514:	0001b517          	auipc	a0,0x1b
    80012518:	e0450513          	addi	a0,a0,-508 # 8002d318 <__func__.0+0x2f8>
    8001251c:	09f180ef          	jal	8002adba <printf>
    80012520:	0003f797          	auipc	a5,0x3f
    80012524:	af17c783          	lbu	a5,-1295(a5) # 80051011 <excpt+0x1>
    80012528:	0001b597          	auipc	a1,0x1b
    8001252c:	dc858593          	addi	a1,a1,-568 # 8002d2f0 <__func__.0+0x2d0>
    80012530:	c799                	beqz	a5,8001253e <external_interrupt_SEI+0x48e>
    80012532:	57fd                	li	a5,-1
    80012534:	6498                	ld	a4,8(s1)
    80012536:	17fe                	slli	a5,a5,0x3f
    80012538:	07a5                	addi	a5,a5,9
    8001253a:	32f70063          	beq	a4,a5,8001285a <external_interrupt_SEI+0x7aa>
    8001253e:	0001b517          	auipc	a0,0x1b
    80012542:	df250513          	addi	a0,a0,-526 # 8002d330 <__func__.0+0x310>
    80012546:	075180ef          	jal	8002adba <printf>
    8001254a:	0003f797          	auipc	a5,0x3f
    8001254e:	ac77c783          	lbu	a5,-1337(a5) # 80051011 <excpt+0x1>
    80012552:	c799                	beqz	a5,80012560 <external_interrupt_SEI+0x4b0>
    80012554:	57fd                	li	a5,-1
    80012556:	6498                	ld	a4,8(s1)
    80012558:	17fe                	slli	a5,a5,0x3f
    8001255a:	07a5                	addi	a5,a5,9
    8001255c:	20f70063          	beq	a4,a5,8001275c <external_interrupt_SEI+0x6ac>
    80012560:	0001b517          	auipc	a0,0x1b
    80012564:	dd850513          	addi	a0,a0,-552 # 8002d338 <__func__.0+0x318>
    80012568:	053180ef          	jal	8002adba <printf>
    8001256c:	02900513          	li	a0,41
    80012570:	538170ef          	jal	80029aa8 <putchar>
    80012574:	4529                	li	a0,10
    80012576:	532170ef          	jal	80029aa8 <putchar>
    8001257a:	c801                	beqz	s0,8001258a <external_interrupt_SEI+0x4da>
    8001257c:	0003f797          	auipc	a5,0x3f
    80012580:	a957c783          	lbu	a5,-1387(a5) # 80051011 <excpt+0x1>
    80012584:	4401                	li	s0,0
    80012586:	12079b63          	bnez	a5,800126bc <external_interrupt_SEI+0x60c>
    //     excpt.cause == CAUSE_SEI &&
    //     excpt.priv == PRIV_HS
    // ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=1，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    8001258a:	fe8ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001258e:	4511                	li	a0,4
    80012590:	8dfee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,1ULL << 1);     
    80012594:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012598:	20000793          	li	a5,512
    8001259c:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    800125a0:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    800125a4:	4509                	li	a0,2
    800125a6:	8c9ee0ef          	jal	80000e6e <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800125aa:	08200593          	li	a1,130
    800125ae:	0001f617          	auipc	a2,0x1f
    800125b2:	df260613          	addi	a2,a2,-526 # 800313a0 <__func__.0+0x4380>
    800125b6:	0001b517          	auipc	a0,0x1b
    800125ba:	d6250513          	addi	a0,a0,-670 # 8002d318 <__func__.0+0x2f8>
    800125be:	7fc180ef          	jal	8002adba <printf>
    800125c2:	0003f797          	auipc	a5,0x3f
    800125c6:	a4f7c783          	lbu	a5,-1457(a5) # 80051011 <excpt+0x1>
    800125ca:	0001b597          	auipc	a1,0x1b
    800125ce:	d2658593          	addi	a1,a1,-730 # 8002d2f0 <__func__.0+0x2d0>
    800125d2:	e789                	bnez	a5,800125dc <external_interrupt_SEI+0x52c>
    800125d4:	0001b597          	auipc	a1,0x1b
    800125d8:	d0c58593          	addi	a1,a1,-756 # 8002d2e0 <__func__.0+0x2c0>
    800125dc:	0001b517          	auipc	a0,0x1b
    800125e0:	d5450513          	addi	a0,a0,-684 # 8002d330 <__func__.0+0x310>
    800125e4:	7d6180ef          	jal	8002adba <printf>
    800125e8:	0003f797          	auipc	a5,0x3f
    800125ec:	a297c783          	lbu	a5,-1495(a5) # 80051011 <excpt+0x1>
    800125f0:	1e079263          	bnez	a5,800127d4 <external_interrupt_SEI+0x724>
    800125f4:	4529                	li	a0,10
    800125f6:	4b2170ef          	jal	80029aa8 <putchar>
    800125fa:	c419                	beqz	s0,80012608 <external_interrupt_SEI+0x558>
    800125fc:	0003f417          	auipc	s0,0x3f
    80012600:	a1544403          	lbu	s0,-1515(s0) # 80051011 <excpt+0x1>
    80012604:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //低特权模式下产生HS级单bit外部中断，sstatus.sie=0，且sip=0，sie=0
    TEST_SETUP_EXCEPT();
    80012608:	f6aee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001260c:	4511                	li	a0,4
    8001260e:	861ee0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_SSTATUS,1ULL << 1);     
    80012612:	10017073          	csrci	sstatus,2
    CSRC(CSR_SIE,SIE_SEIE);
    80012616:	20000793          	li	a5,512
    8001261a:	1047b073          	csrc	sie,a5
    CSRC(CSR_SIP,SIP_SEIP);
    8001261e:	1447b073          	csrc	sip,a5

    
    goto_priv(PRIV_VS);
    80012622:	4509                	li	a0,2
    80012624:	84bee0ef          	jal	80000e6e <goto_priv>

    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    80012628:	08200593          	li	a1,130
    8001262c:	0001f617          	auipc	a2,0x1f
    80012630:	d7460613          	addi	a2,a2,-652 # 800313a0 <__func__.0+0x4380>
    80012634:	0001b517          	auipc	a0,0x1b
    80012638:	ce450513          	addi	a0,a0,-796 # 8002d318 <__func__.0+0x2f8>
    8001263c:	77e180ef          	jal	8002adba <printf>
    80012640:	0003f797          	auipc	a5,0x3f
    80012644:	9d17c783          	lbu	a5,-1583(a5) # 80051011 <excpt+0x1>
    80012648:	0001b597          	auipc	a1,0x1b
    8001264c:	ca858593          	addi	a1,a1,-856 # 8002d2f0 <__func__.0+0x2d0>
    80012650:	e789                	bnez	a5,8001265a <external_interrupt_SEI+0x5aa>
    80012652:	0001b597          	auipc	a1,0x1b
    80012656:	c8e58593          	addi	a1,a1,-882 # 8002d2e0 <__func__.0+0x2c0>
    8001265a:	0001b517          	auipc	a0,0x1b
    8001265e:	cd650513          	addi	a0,a0,-810 # 8002d330 <__func__.0+0x310>
    80012662:	758180ef          	jal	8002adba <printf>
    80012666:	0003f797          	auipc	a5,0x3f
    8001266a:	9ab7c783          	lbu	a5,-1621(a5) # 80051011 <excpt+0x1>
    8001266e:	14079863          	bnez	a5,800127be <external_interrupt_SEI+0x70e>
    80012672:	4529                	li	a0,10
    80012674:	434170ef          	jal	80029aa8 <putchar>
    80012678:	c411                	beqz	s0,80012684 <external_interrupt_SEI+0x5d4>
    8001267a:	0003f797          	auipc	a5,0x3f
    8001267e:	9977c783          	lbu	a5,-1641(a5) # 80051011 <excpt+0x1>
    80012682:	c79d                	beqz	a5,800126b0 <external_interrupt_SEI+0x600>
    80012684:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80012686:	0001b597          	auipc	a1,0x1b
    8001268a:	c6a58593          	addi	a1,a1,-918 # 8002d2f0 <__func__.0+0x2d0>
    8001268e:	0001b517          	auipc	a0,0x1b
    80012692:	d0a50513          	addi	a0,a0,-758 # 8002d398 <__func__.0+0x378>
    80012696:	724180ef          	jal	8002adba <printf>
    8001269a:	4511                	li	a0,4
    8001269c:	fd2ee0ef          	jal	80000e6e <goto_priv>
    800126a0:	8eaef0ef          	jal	8000178a <reset_state>
}
    800126a4:	60e2                	ld	ra,24(sp)
    800126a6:	8522                	mv	a0,s0
    800126a8:	6442                	ld	s0,16(sp)
    800126aa:	64a2                	ld	s1,8(sp)
    800126ac:	6105                	addi	sp,sp,32
    800126ae:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800126b0:	4405                	li	s0,1
    TEST_END();
    800126b2:	0001b597          	auipc	a1,0x1b
    800126b6:	c2e58593          	addi	a1,a1,-978 # 8002d2e0 <__func__.0+0x2c0>
    800126ba:	bfd1                	j	8001268e <external_interrupt_SEI+0x5de>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    800126bc:	57fd                	li	a5,-1
    800126be:	6498                	ld	a4,8(s1)
    800126c0:	17fe                	slli	a5,a5,0x3f
    800126c2:	07a5                	addi	a5,a5,9
    800126c4:	ecf713e3          	bne	a4,a5,8001258a <external_interrupt_SEI+0x4da>
    800126c8:	0003f417          	auipc	s0,0x3f
    800126cc:	94c42403          	lw	s0,-1716(s0) # 80051014 <excpt+0x4>
    800126d0:	1471                	addi	s0,s0,-4
    800126d2:	00143413          	seqz	s0,s0
    800126d6:	bd55                	j	8001258a <external_interrupt_SEI+0x4da>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800126d8:	57fd                	li	a5,-1
    800126da:	6498                	ld	a4,8(s1)
    800126dc:	17fe                	slli	a5,a5,0x3f
    800126de:	07a5                	addi	a5,a5,9
    800126e0:	e0f714e3          	bne	a4,a5,800124e8 <external_interrupt_SEI+0x438>
    800126e4:	0003f417          	auipc	s0,0x3f
    800126e8:	93042403          	lw	s0,-1744(s0) # 80051014 <excpt+0x4>
    800126ec:	1471                	addi	s0,s0,-4
    800126ee:	00143413          	seqz	s0,s0
    800126f2:	bbdd                	j	800124e8 <external_interrupt_SEI+0x438>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    800126f4:	57fd                	li	a5,-1
    800126f6:	6498                	ld	a4,8(s1)
    800126f8:	17fe                	slli	a5,a5,0x3f
    800126fa:	07a5                	addi	a5,a5,9
    800126fc:	d4f715e3          	bne	a4,a5,80012446 <external_interrupt_SEI+0x396>
    80012700:	0003f417          	auipc	s0,0x3f
    80012704:	91442403          	lw	s0,-1772(s0) # 80051014 <excpt+0x4>
    80012708:	1471                	addi	s0,s0,-4
    8001270a:	00143413          	seqz	s0,s0
    8001270e:	bb25                	j	80012446 <external_interrupt_SEI+0x396>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    80012710:	57fd                	li	a5,-1
    80012712:	6498                	ld	a4,8(s1)
    80012714:	17fe                	slli	a5,a5,0x3f
    80012716:	07a5                	addi	a5,a5,9
    80012718:	b8f718e3          	bne	a4,a5,800122a8 <external_interrupt_SEI+0x1f8>
    8001271c:	0003f417          	auipc	s0,0x3f
    80012720:	8f842403          	lw	s0,-1800(s0) # 80051014 <excpt+0x4>
    80012724:	1471                	addi	s0,s0,-4
    80012726:	00143413          	seqz	s0,s0
    8001272a:	bebd                	j	800122a8 <external_interrupt_SEI+0x1f8>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001272c:	0003f717          	auipc	a4,0x3f
    80012730:	8e872703          	lw	a4,-1816(a4) # 80051014 <excpt+0x4>
    80012734:	4791                	li	a5,4
    80012736:	cef713e3          	bne	a4,a5,8001241c <external_interrupt_SEI+0x36c>
    8001273a:	b9dd                	j	80012430 <external_interrupt_SEI+0x380>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001273c:	0003f717          	auipc	a4,0x3f
    80012740:	8d872703          	lw	a4,-1832(a4) # 80051014 <excpt+0x4>
    80012744:	4791                	li	a5,4
    80012746:	b2f71ce3          	bne	a4,a5,8001227e <external_interrupt_SEI+0x1ce>
    8001274a:	b6a1                	j	80012292 <external_interrupt_SEI+0x1e2>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001274c:	0003f717          	auipc	a4,0x3f
    80012750:	8c872703          	lw	a4,-1848(a4) # 80051014 <excpt+0x4>
    80012754:	4791                	li	a5,4
    80012756:	9ef71ee3          	bne	a4,a5,80012152 <external_interrupt_SEI+0xa2>
    8001275a:	b431                	j	80012166 <external_interrupt_SEI+0xb6>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001275c:	0003f717          	auipc	a4,0x3f
    80012760:	8b872703          	lw	a4,-1864(a4) # 80051014 <excpt+0x4>
    80012764:	4791                	li	a5,4
    80012766:	def71de3          	bne	a4,a5,80012560 <external_interrupt_SEI+0x4b0>
    8001276a:	b529                	j	80012574 <external_interrupt_SEI+0x4c4>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    8001276c:	0003f717          	auipc	a4,0x3f
    80012770:	8a872703          	lw	a4,-1880(a4) # 80051014 <excpt+0x4>
    80012774:	4791                	li	a5,4
    80012776:	d4f714e3          	bne	a4,a5,800124be <external_interrupt_SEI+0x40e>
    8001277a:	bba1                	j	800124d2 <external_interrupt_SEI+0x422>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=0 and sie.seie=0",
    8001277c:	0001b517          	auipc	a0,0x1b
    80012780:	bbc50513          	addi	a0,a0,-1092 # 8002d338 <__func__.0+0x318>
    80012784:	636180ef          	jal	8002adba <printf>
    80012788:	02900513          	li	a0,41
    8001278c:	31c170ef          	jal	80029aa8 <putchar>
    80012790:	b101                	j	80012390 <external_interrupt_SEI+0x2e0>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.seip=1 and sie.seie=0",
    80012792:	0001b517          	auipc	a0,0x1b
    80012796:	ba650513          	addi	a0,a0,-1114 # 8002d338 <__func__.0+0x318>
    8001279a:	620180ef          	jal	8002adba <printf>
    8001279e:	02900513          	li	a0,41
    800127a2:	306170ef          	jal	80029aa8 <putchar>
    800127a6:	b6b5                	j	80012312 <external_interrupt_SEI+0x262>
    TEST_ASSERT("hs mode leads to no interrupt  when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800127a8:	0001b517          	auipc	a0,0x1b
    800127ac:	b9050513          	addi	a0,a0,-1136 # 8002d338 <__func__.0+0x318>
    800127b0:	60a180ef          	jal	8002adba <printf>
    800127b4:	02900513          	li	a0,41
    800127b8:	2f0170ef          	jal	80029aa8 <putchar>
    800127bc:	bc0d                	j	800121ee <external_interrupt_SEI+0x13e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800127be:	0001b517          	auipc	a0,0x1b
    800127c2:	b7a50513          	addi	a0,a0,-1158 # 8002d338 <__func__.0+0x318>
    800127c6:	5f4180ef          	jal	8002adba <printf>
    800127ca:	02900513          	li	a0,41
    800127ce:	2da170ef          	jal	80029aa8 <putchar>
    800127d2:	b545                	j	80012672 <external_interrupt_SEI+0x5c2>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=0",
    800127d4:	0001b517          	auipc	a0,0x1b
    800127d8:	b6450513          	addi	a0,a0,-1180 # 8002d338 <__func__.0+0x318>
    800127dc:	5de180ef          	jal	8002adba <printf>
    800127e0:	02900513          	li	a0,41
    800127e4:	2c4170ef          	jal	80029aa8 <putchar>
    800127e8:	b531                	j	800125f4 <external_interrupt_SEI+0x544>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=0",
    800127ea:	0003f717          	auipc	a4,0x3f
    800127ee:	82a72703          	lw	a4,-2006(a4) # 80051014 <excpt+0x4>
    800127f2:	4791                	li	a5,4
    800127f4:	0001b597          	auipc	a1,0x1b
    800127f8:	aec58593          	addi	a1,a1,-1300 # 8002d2e0 <__func__.0+0x2c0>
    800127fc:	caf700e3          	beq	a4,a5,8001249c <external_interrupt_SEI+0x3ec>
    80012800:	0001b597          	auipc	a1,0x1b
    80012804:	af058593          	addi	a1,a1,-1296 # 8002d2f0 <__func__.0+0x2d0>
    80012808:	b951                	j	8001249c <external_interrupt_SEI+0x3ec>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001280a:	0003f717          	auipc	a4,0x3f
    8001280e:	80a72703          	lw	a4,-2038(a4) # 80051014 <excpt+0x4>
    80012812:	4791                	li	a5,4
    80012814:	0001b597          	auipc	a1,0x1b
    80012818:	acc58593          	addi	a1,a1,-1332 # 8002d2e0 <__func__.0+0x2c0>
    8001281c:	bcf70fe3          	beq	a4,a5,800123fa <external_interrupt_SEI+0x34a>
    80012820:	0001b597          	auipc	a1,0x1b
    80012824:	ad058593          	addi	a1,a1,-1328 # 8002d2f0 <__func__.0+0x2d0>
    80012828:	bec9                	j	800123fa <external_interrupt_SEI+0x34a>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001282a:	0003e417          	auipc	s0,0x3e
    8001282e:	7ea42403          	lw	s0,2026(s0) # 80051014 <excpt+0x4>
    80012832:	1471                	addi	s0,s0,-4
    80012834:	00143413          	seqz	s0,s0
    80012838:	b2b1                	j	80012184 <external_interrupt_SEI+0xd4>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001283a:	0003e717          	auipc	a4,0x3e
    8001283e:	7da72703          	lw	a4,2010(a4) # 80051014 <excpt+0x4>
    80012842:	4791                	li	a5,4
    80012844:	0001b597          	auipc	a1,0x1b
    80012848:	a9c58593          	addi	a1,a1,-1380 # 8002d2e0 <__func__.0+0x2c0>
    8001284c:	a0f708e3          	beq	a4,a5,8001225c <external_interrupt_SEI+0x1ac>
    80012850:	0001b597          	auipc	a1,0x1b
    80012854:	aa058593          	addi	a1,a1,-1376 # 8002d2f0 <__func__.0+0x2d0>
    80012858:	b411                	j	8001225c <external_interrupt_SEI+0x1ac>
    TEST_ASSERT("VS mode leads to external interrupt when sstatus.sie=1 and sip.seip=0 and sie.seie=1",
    8001285a:	0003e717          	auipc	a4,0x3e
    8001285e:	7ba72703          	lw	a4,1978(a4) # 80051014 <excpt+0x4>
    80012862:	4791                	li	a5,4
    80012864:	0001b597          	auipc	a1,0x1b
    80012868:	a7c58593          	addi	a1,a1,-1412 # 8002d2e0 <__func__.0+0x2c0>
    8001286c:	ccf709e3          	beq	a4,a5,8001253e <external_interrupt_SEI+0x48e>
    80012870:	0001b597          	auipc	a1,0x1b
    80012874:	a8058593          	addi	a1,a1,-1408 # 8002d2f0 <__func__.0+0x2d0>
    80012878:	b1d9                	j	8001253e <external_interrupt_SEI+0x48e>
    TEST_ASSERT("hs mode leads to hs level external interrupt when sstatus.sie=1 and sip.seip=1 and sie.seie=1",
    8001287a:	0003e717          	auipc	a4,0x3e
    8001287e:	79a72703          	lw	a4,1946(a4) # 80051014 <excpt+0x4>
    80012882:	4791                	li	a5,4
    80012884:	0001b597          	auipc	a1,0x1b
    80012888:	a5c58593          	addi	a1,a1,-1444 # 8002d2e0 <__func__.0+0x2c0>
    8001288c:	8af702e3          	beq	a4,a5,80012130 <external_interrupt_SEI+0x80>
    80012890:	0001b597          	auipc	a1,0x1b
    80012894:	a6058593          	addi	a1,a1,-1440 # 8002d2f0 <__func__.0+0x2d0>
    80012898:	899ff06f          	j	80012130 <external_interrupt_SEI+0x80>

000000008001289c <external_interrupt_VSEI>:

bool external_interrupt_VSEI() {
    8001289c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001289e:	00019597          	auipc	a1,0x19
    800128a2:	2da58593          	addi	a1,a1,730 # 8002bb78 <__func__.0>
    800128a6:	0001b517          	auipc	a0,0x1b
    800128aa:	a5a50513          	addi	a0,a0,-1446 # 8002d300 <__func__.0+0x2e0>
bool external_interrupt_VSEI() {
    800128ae:	ec06                	sd	ra,24(sp)
    800128b0:	e822                	sd	s0,16(sp)
    800128b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800128b4:	506180ef          	jal	8002adba <printf>
    800128b8:	4529                	li	a0,10
    800128ba:	1ee170ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    800128be:	cb4ee0ef          	jal	80000d72 <test_setup_except_function>

   
    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高
    goto_priv(PRIV_M);
    800128c2:	4511                	li	a0,4
    800128c4:	daaee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    800128c8:	40000793          	li	a5,1024
    800128cc:	6047a073          	csrs	hie,a5
    CSRS(CSR_HIP,HIP_VSEIP);
    800128d0:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    800128d4:	4509                	li	a0,2
    800128d6:	d98ee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    800128da:	08200593          	li	a1,130
    800128de:	0001f617          	auipc	a2,0x1f
    800128e2:	b1260613          	addi	a2,a2,-1262 # 800313f0 <__func__.0+0x43d0>
    800128e6:	0001b517          	auipc	a0,0x1b
    800128ea:	a3250513          	addi	a0,a0,-1486 # 8002d318 <__func__.0+0x2f8>
    800128ee:	4cc180ef          	jal	8002adba <printf>
    800128f2:	0003e797          	auipc	a5,0x3e
    800128f6:	71f7c783          	lbu	a5,1823(a5) # 80051011 <excpt+0x1>
    800128fa:	0003e497          	auipc	s1,0x3e
    800128fe:	71648493          	addi	s1,s1,1814 # 80051010 <excpt>
    80012902:	0001b597          	auipc	a1,0x1b
    80012906:	9ee58593          	addi	a1,a1,-1554 # 8002d2f0 <__func__.0+0x2d0>
    8001290a:	c799                	beqz	a5,80012918 <external_interrupt_VSEI+0x7c>
    8001290c:	57fd                	li	a5,-1
    8001290e:	6498                	ld	a4,8(s1)
    80012910:	17fe                	slli	a5,a5,0x3f
    80012912:	07a9                	addi	a5,a5,10
    80012914:	62f70463          	beq	a4,a5,80012f3c <external_interrupt_VSEI+0x6a0>
    80012918:	0001b517          	auipc	a0,0x1b
    8001291c:	a1850513          	addi	a0,a0,-1512 # 8002d330 <__func__.0+0x310>
    80012920:	49a180ef          	jal	8002adba <printf>
    80012924:	0003e797          	auipc	a5,0x3e
    80012928:	6ed7c783          	lbu	a5,1773(a5) # 80051011 <excpt+0x1>
    8001292c:	c799                	beqz	a5,8001293a <external_interrupt_VSEI+0x9e>
    8001292e:	57fd                	li	a5,-1
    80012930:	6498                	ld	a4,8(s1)
    80012932:	17fe                	slli	a5,a5,0x3f
    80012934:	07a9                	addi	a5,a5,10
    80012936:	54f70563          	beq	a4,a5,80012e80 <external_interrupt_VSEI+0x5e4>
    8001293a:	0001b517          	auipc	a0,0x1b
    8001293e:	9fe50513          	addi	a0,a0,-1538 # 8002d338 <__func__.0+0x318>
    80012942:	478180ef          	jal	8002adba <printf>
    80012946:	02900513          	li	a0,41
    8001294a:	15e170ef          	jal	80029aa8 <putchar>
    8001294e:	4529                	li	a0,10
    80012950:	158170ef          	jal	80029aa8 <putchar>
    80012954:	0003e797          	auipc	a5,0x3e
    80012958:	6bd7c783          	lbu	a5,1725(a5) # 80051011 <excpt+0x1>
    8001295c:	4401                	li	s0,0
    8001295e:	c799                	beqz	a5,8001296c <external_interrupt_VSEI+0xd0>
    80012960:	57fd                	li	a5,-1
    80012962:	6498                	ld	a4,8(s1)
    80012964:	17fe                	slli	a5,a5,0x3f
    80012966:	07a9                	addi	a5,a5,10
    80012968:	5af70263          	beq	a4,a5,80012f0c <external_interrupt_VSEI+0x670>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg
    TEST_SETUP_EXCEPT();
    8001296c:	c06ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012970:	4511                	li	a0,4
    80012972:	cfcee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012976:	40000793          	li	a5,1024
    8001297a:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    8001297e:	577d                	li	a4,-1
    80012980:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012984:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012988:	4509                	li	a0,2
    8001298a:	ce4ee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    8001298e:	08200593          	li	a1,130
    80012992:	0001f617          	auipc	a2,0x1f
    80012996:	aae60613          	addi	a2,a2,-1362 # 80031440 <__func__.0+0x4420>
    8001299a:	0001b517          	auipc	a0,0x1b
    8001299e:	97e50513          	addi	a0,a0,-1666 # 8002d318 <__func__.0+0x2f8>
    800129a2:	418180ef          	jal	8002adba <printf>
    800129a6:	0003e797          	auipc	a5,0x3e
    800129aa:	66b7c783          	lbu	a5,1643(a5) # 80051011 <excpt+0x1>
    800129ae:	0001b597          	auipc	a1,0x1b
    800129b2:	94258593          	addi	a1,a1,-1726 # 8002d2f0 <__func__.0+0x2d0>
    800129b6:	c799                	beqz	a5,800129c4 <external_interrupt_VSEI+0x128>
    800129b8:	57fd                	li	a5,-1
    800129ba:	6498                	ld	a4,8(s1)
    800129bc:	17fe                	slli	a5,a5,0x3f
    800129be:	07a9                	addi	a5,a5,10
    800129c0:	54f70e63          	beq	a4,a5,80012f1c <external_interrupt_VSEI+0x680>
    800129c4:	0001b517          	auipc	a0,0x1b
    800129c8:	96c50513          	addi	a0,a0,-1684 # 8002d330 <__func__.0+0x310>
    800129cc:	3ee180ef          	jal	8002adba <printf>
    800129d0:	0003e797          	auipc	a5,0x3e
    800129d4:	6417c783          	lbu	a5,1601(a5) # 80051011 <excpt+0x1>
    800129d8:	c799                	beqz	a5,800129e6 <external_interrupt_VSEI+0x14a>
    800129da:	57fd                	li	a5,-1
    800129dc:	6498                	ld	a4,8(s1)
    800129de:	17fe                	slli	a5,a5,0x3f
    800129e0:	07a9                	addi	a5,a5,10
    800129e2:	46f70f63          	beq	a4,a5,80012e60 <external_interrupt_VSEI+0x5c4>
    800129e6:	0001b517          	auipc	a0,0x1b
    800129ea:	95250513          	addi	a0,a0,-1710 # 8002d338 <__func__.0+0x318>
    800129ee:	3cc180ef          	jal	8002adba <printf>
    800129f2:	02900513          	li	a0,41
    800129f6:	0b2170ef          	jal	80029aa8 <putchar>
    800129fa:	4529                	li	a0,10
    800129fc:	0ac170ef          	jal	80029aa8 <putchar>
    80012a00:	c801                	beqz	s0,80012a10 <external_interrupt_VSEI+0x174>
    80012a02:	0003e797          	auipc	a5,0x3e
    80012a06:	60f7c783          	lbu	a5,1551(a5) # 80051011 <excpt+0x1>
    80012a0a:	4401                	li	s0,0
    80012a0c:	42079c63          	bnez	a5,80012e44 <external_interrupt_VSEI+0x5a8>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生单bit外部中断，hip，hie对应的SSEIP、SSEIE拉高 ,开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012a10:	b62ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012a14:	4511                	li	a0,4
    80012a16:	c58ee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012a1a:	40000793          	li	a5,1024
    80012a1e:	6047a073          	csrs	hie,a5
    CSRS(CSR_MIDELEG,(uint64_t)-1);
    80012a22:	577d                	li	a4,-1
    80012a24:	30372073          	csrs	mideleg,a4
    CSRS(CSR_HIDELEG,(uint64_t)-1);
    80012a28:	60372073          	csrs	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012a2c:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012a30:	4509                	li	a0,2
    80012a32:	c3cee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012a36:	08200593          	li	a1,130
    80012a3a:	0001f617          	auipc	a2,0x1f
    80012a3e:	a6660613          	addi	a2,a2,-1434 # 800314a0 <__func__.0+0x4480>
    80012a42:	0001b517          	auipc	a0,0x1b
    80012a46:	8d650513          	addi	a0,a0,-1834 # 8002d318 <__func__.0+0x2f8>
    80012a4a:	370180ef          	jal	8002adba <printf>
    80012a4e:	0003e797          	auipc	a5,0x3e
    80012a52:	5c37c783          	lbu	a5,1475(a5) # 80051011 <excpt+0x1>
    80012a56:	0001b597          	auipc	a1,0x1b
    80012a5a:	89a58593          	addi	a1,a1,-1894 # 8002d2f0 <__func__.0+0x2d0>
    80012a5e:	c799                	beqz	a5,80012a6c <external_interrupt_VSEI+0x1d0>
    80012a60:	57fd                	li	a5,-1
    80012a62:	6498                	ld	a4,8(s1)
    80012a64:	17fe                	slli	a5,a5,0x3f
    80012a66:	07a9                	addi	a5,a5,10
    80012a68:	4ef70a63          	beq	a4,a5,80012f5c <external_interrupt_VSEI+0x6c0>
    80012a6c:	0001b517          	auipc	a0,0x1b
    80012a70:	8c450513          	addi	a0,a0,-1852 # 8002d330 <__func__.0+0x310>
    80012a74:	346180ef          	jal	8002adba <printf>
    80012a78:	0003e797          	auipc	a5,0x3e
    80012a7c:	5997c783          	lbu	a5,1433(a5) # 80051011 <excpt+0x1>
    80012a80:	c799                	beqz	a5,80012a8e <external_interrupt_VSEI+0x1f2>
    80012a82:	57fd                	li	a5,-1
    80012a84:	6498                	ld	a4,8(s1)
    80012a86:	17fe                	slli	a5,a5,0x3f
    80012a88:	07a9                	addi	a5,a5,10
    80012a8a:	3ef70363          	beq	a4,a5,80012e70 <external_interrupt_VSEI+0x5d4>
    80012a8e:	0001b517          	auipc	a0,0x1b
    80012a92:	8aa50513          	addi	a0,a0,-1878 # 8002d338 <__func__.0+0x318>
    80012a96:	324180ef          	jal	8002adba <printf>
    80012a9a:	02900513          	li	a0,41
    80012a9e:	00a170ef          	jal	80029aa8 <putchar>
    80012aa2:	4529                	li	a0,10
    80012aa4:	004170ef          	jal	80029aa8 <putchar>
    80012aa8:	c801                	beqz	s0,80012ab8 <external_interrupt_VSEI+0x21c>
    80012aaa:	0003e797          	auipc	a5,0x3e
    80012aae:	5677c783          	lbu	a5,1383(a5) # 80051011 <excpt+0x1>
    80012ab2:	4401                	li	s0,0
    80012ab4:	36079a63          	bnez	a5,80012e28 <external_interrupt_VSEI+0x58c>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=1，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012ab8:	abaee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012abc:	4511                	li	a0,4
    80012abe:	bb0ee0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012ac2:	40000793          	li	a5,1024
    80012ac6:	6047b073          	csrc	hie,a5
    CSRC(CSR_MIDELEG,(uint64_t)-1);
    80012aca:	577d                	li	a4,-1
    80012acc:	30373073          	csrc	mideleg,a4
    CSRC(CSR_HIDELEG,(uint64_t)-1);
    80012ad0:	60373073          	csrc	hideleg,a4
    CSRS(CSR_HIP,HIP_VSEIP);
    80012ad4:	6447a073          	csrs	hip,a5

    goto_priv(PRIV_VS);
    80012ad8:	4509                	li	a0,2
    80012ada:	b94ee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012ade:	08200593          	li	a1,130
    80012ae2:	0001f617          	auipc	a2,0x1f
    80012ae6:	a2e60613          	addi	a2,a2,-1490 # 80031510 <__func__.0+0x44f0>
    80012aea:	0001b517          	auipc	a0,0x1b
    80012aee:	82e50513          	addi	a0,a0,-2002 # 8002d318 <__func__.0+0x2f8>
    80012af2:	2c8180ef          	jal	8002adba <printf>
    80012af6:	0003e797          	auipc	a5,0x3e
    80012afa:	51b7c783          	lbu	a5,1307(a5) # 80051011 <excpt+0x1>
    80012afe:	0001a597          	auipc	a1,0x1a
    80012b02:	7f258593          	addi	a1,a1,2034 # 8002d2f0 <__func__.0+0x2d0>
    80012b06:	e789                	bnez	a5,80012b10 <external_interrupt_VSEI+0x274>
    80012b08:	0001a597          	auipc	a1,0x1a
    80012b0c:	7d858593          	addi	a1,a1,2008 # 8002d2e0 <__func__.0+0x2c0>
    80012b10:	0001b517          	auipc	a0,0x1b
    80012b14:	82050513          	addi	a0,a0,-2016 # 8002d330 <__func__.0+0x310>
    80012b18:	2a2180ef          	jal	8002adba <printf>
    80012b1c:	0003e797          	auipc	a5,0x3e
    80012b20:	4f57c783          	lbu	a5,1269(a5) # 80051011 <excpt+0x1>
    80012b24:	3a079963          	bnez	a5,80012ed6 <external_interrupt_VSEI+0x63a>
    80012b28:	4529                	li	a0,10
    80012b2a:	77f160ef          	jal	80029aa8 <putchar>
    80012b2e:	c419                	beqz	s0,80012b3c <external_interrupt_VSEI+0x2a0>
    80012b30:	0003e417          	auipc	s0,0x3e
    80012b34:	4e144403          	lbu	s0,1249(s0) # 80051011 <excpt+0x1>
    80012b38:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1
    TEST_SETUP_EXCEPT();
    80012b3c:	a36ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012b40:	4511                	li	a0,4
    80012b42:	b2cee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012b46:	40000793          	li	a5,1024
    80012b4a:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012b4e:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012b52:	4509                	li	a0,2
    80012b54:	b1aee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012b58:	08200593          	li	a1,130
    80012b5c:	0001f617          	auipc	a2,0x1f
    80012b60:	9f460613          	addi	a2,a2,-1548 # 80031550 <__func__.0+0x4530>
    80012b64:	0001a517          	auipc	a0,0x1a
    80012b68:	7b450513          	addi	a0,a0,1972 # 8002d318 <__func__.0+0x2f8>
    80012b6c:	24e180ef          	jal	8002adba <printf>
    80012b70:	0003e797          	auipc	a5,0x3e
    80012b74:	4a17c783          	lbu	a5,1185(a5) # 80051011 <excpt+0x1>
    80012b78:	0001a597          	auipc	a1,0x1a
    80012b7c:	77858593          	addi	a1,a1,1912 # 8002d2f0 <__func__.0+0x2d0>
    80012b80:	e799                	bnez	a5,80012b8e <external_interrupt_VSEI+0x2f2>
    80012b82:	57fd                	li	a5,-1
    80012b84:	6498                	ld	a4,8(s1)
    80012b86:	17fe                	slli	a5,a5,0x3f
    80012b88:	07a9                	addi	a5,a5,10
    80012b8a:	40f70963          	beq	a4,a5,80012f9c <external_interrupt_VSEI+0x700>
    80012b8e:	0001a517          	auipc	a0,0x1a
    80012b92:	7a250513          	addi	a0,a0,1954 # 8002d330 <__func__.0+0x310>
    80012b96:	224180ef          	jal	8002adba <printf>
    80012b9a:	0003e797          	auipc	a5,0x3e
    80012b9e:	4777c783          	lbu	a5,1143(a5) # 80051011 <excpt+0x1>
    80012ba2:	e799                	bnez	a5,80012bb0 <external_interrupt_VSEI+0x314>
    80012ba4:	57fd                	li	a5,-1
    80012ba6:	6498                	ld	a4,8(s1)
    80012ba8:	17fe                	slli	a5,a5,0x3f
    80012baa:	07a9                	addi	a5,a5,10
    80012bac:	2ef70263          	beq	a4,a5,80012e90 <external_interrupt_VSEI+0x5f4>
    80012bb0:	0001a517          	auipc	a0,0x1a
    80012bb4:	78850513          	addi	a0,a0,1928 # 8002d338 <__func__.0+0x318>
    80012bb8:	202180ef          	jal	8002adba <printf>
    80012bbc:	02900513          	li	a0,41
    80012bc0:	6e9160ef          	jal	80029aa8 <putchar>
    80012bc4:	4529                	li	a0,10
    80012bc6:	6e3160ef          	jal	80029aa8 <putchar>
    80012bca:	c801                	beqz	s0,80012bda <external_interrupt_VSEI+0x33e>
    80012bcc:	0003e797          	auipc	a5,0x3e
    80012bd0:	4457c783          	lbu	a5,1093(a5) # 80051011 <excpt+0x1>
    80012bd4:	4401                	li	s0,0
    80012bd6:	22078b63          	beqz	a5,80012e0c <external_interrupt_VSEI+0x570>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg
    TEST_SETUP_EXCEPT();
    80012bda:	998ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012bde:	4511                	li	a0,4
    80012be0:	a8eee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012be4:	40000793          	li	a5,1024
    80012be8:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012bec:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012bf0:	57fd                	li	a5,-1
    80012bf2:	30379073          	csrw	mideleg,a5

    goto_priv(PRIV_VS);
    80012bf6:	4509                	li	a0,2
    80012bf8:	a76ee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012bfc:	08200593          	li	a1,130
    80012c00:	0001f617          	auipc	a2,0x1f
    80012c04:	9a060613          	addi	a2,a2,-1632 # 800315a0 <__func__.0+0x4580>
    80012c08:	0001a517          	auipc	a0,0x1a
    80012c0c:	71050513          	addi	a0,a0,1808 # 8002d318 <__func__.0+0x2f8>
    80012c10:	1aa180ef          	jal	8002adba <printf>
    80012c14:	0003e797          	auipc	a5,0x3e
    80012c18:	3fd7c783          	lbu	a5,1021(a5) # 80051011 <excpt+0x1>
    80012c1c:	0001a597          	auipc	a1,0x1a
    80012c20:	6d458593          	addi	a1,a1,1748 # 8002d2f0 <__func__.0+0x2d0>
    80012c24:	e799                	bnez	a5,80012c32 <external_interrupt_VSEI+0x396>
    80012c26:	57fd                	li	a5,-1
    80012c28:	6498                	ld	a4,8(s1)
    80012c2a:	17fe                	slli	a5,a5,0x3f
    80012c2c:	07a9                	addi	a5,a5,10
    80012c2e:	2af70f63          	beq	a4,a5,80012eec <external_interrupt_VSEI+0x650>
    80012c32:	0001a517          	auipc	a0,0x1a
    80012c36:	6fe50513          	addi	a0,a0,1790 # 8002d330 <__func__.0+0x310>
    80012c3a:	180180ef          	jal	8002adba <printf>
    80012c3e:	0003e797          	auipc	a5,0x3e
    80012c42:	3d37c783          	lbu	a5,979(a5) # 80051011 <excpt+0x1>
    80012c46:	e799                	bnez	a5,80012c54 <external_interrupt_VSEI+0x3b8>
    80012c48:	57fd                	li	a5,-1
    80012c4a:	6498                	ld	a4,8(s1)
    80012c4c:	17fe                	slli	a5,a5,0x3f
    80012c4e:	07a9                	addi	a5,a5,10
    80012c50:	26f70063          	beq	a4,a5,80012eb0 <external_interrupt_VSEI+0x614>
    80012c54:	0001a517          	auipc	a0,0x1a
    80012c58:	6e450513          	addi	a0,a0,1764 # 8002d338 <__func__.0+0x318>
    80012c5c:	15e180ef          	jal	8002adba <printf>
    80012c60:	02900513          	li	a0,41
    80012c64:	645160ef          	jal	80029aa8 <putchar>
    80012c68:	4529                	li	a0,10
    80012c6a:	63f160ef          	jal	80029aa8 <putchar>
    80012c6e:	c801                	beqz	s0,80012c7e <external_interrupt_VSEI+0x3e2>
    80012c70:	0003e797          	auipc	a5,0x3e
    80012c74:	3a17c783          	lbu	a5,929(a5) # 80051011 <excpt+0x1>
    80012c78:	4401                	li	s0,0
    80012c7a:	16078b63          	beqz	a5,80012df0 <external_interrupt_VSEI+0x554>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=1，开mideleg,hideleg
    TEST_SETUP_EXCEPT();
    80012c7e:	8f4ee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012c82:	4511                	li	a0,4
    80012c84:	9eaee0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HIE,HIE_VSEIE);
    80012c88:	40000793          	li	a5,1024
    80012c8c:	6047a073          	csrs	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012c90:	6447b073          	csrc	hip,a5
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80012c94:	57fd                	li	a5,-1
    80012c96:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,(uint64_t)-1);
    80012c9a:	60379073          	csrw	hideleg,a5

    goto_priv(PRIV_VS);
    80012c9e:	4509                	li	a0,2
    80012ca0:	9ceee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012ca4:	08200593          	li	a1,130
    80012ca8:	0001f617          	auipc	a2,0x1f
    80012cac:	95860613          	addi	a2,a2,-1704 # 80031600 <__func__.0+0x45e0>
    80012cb0:	0001a517          	auipc	a0,0x1a
    80012cb4:	66850513          	addi	a0,a0,1640 # 8002d318 <__func__.0+0x2f8>
    80012cb8:	102180ef          	jal	8002adba <printf>
    80012cbc:	0003e797          	auipc	a5,0x3e
    80012cc0:	3557c783          	lbu	a5,853(a5) # 80051011 <excpt+0x1>
    80012cc4:	0001a597          	auipc	a1,0x1a
    80012cc8:	62c58593          	addi	a1,a1,1580 # 8002d2f0 <__func__.0+0x2d0>
    80012ccc:	e799                	bnez	a5,80012cda <external_interrupt_VSEI+0x43e>
    80012cce:	57fd                	li	a5,-1
    80012cd0:	6498                	ld	a4,8(s1)
    80012cd2:	17fe                	slli	a5,a5,0x3f
    80012cd4:	07a9                	addi	a5,a5,10
    80012cd6:	2af70363          	beq	a4,a5,80012f7c <external_interrupt_VSEI+0x6e0>
    80012cda:	0001a517          	auipc	a0,0x1a
    80012cde:	65650513          	addi	a0,a0,1622 # 8002d330 <__func__.0+0x310>
    80012ce2:	0d8180ef          	jal	8002adba <printf>
    80012ce6:	0003e797          	auipc	a5,0x3e
    80012cea:	32b7c783          	lbu	a5,811(a5) # 80051011 <excpt+0x1>
    80012cee:	e799                	bnez	a5,80012cfc <external_interrupt_VSEI+0x460>
    80012cf0:	57fd                	li	a5,-1
    80012cf2:	6498                	ld	a4,8(s1)
    80012cf4:	17fe                	slli	a5,a5,0x3f
    80012cf6:	07a9                	addi	a5,a5,10
    80012cf8:	1af70463          	beq	a4,a5,80012ea0 <external_interrupt_VSEI+0x604>
    80012cfc:	0001a517          	auipc	a0,0x1a
    80012d00:	63c50513          	addi	a0,a0,1596 # 8002d338 <__func__.0+0x318>
    80012d04:	0b6180ef          	jal	8002adba <printf>
    80012d08:	02900513          	li	a0,41
    80012d0c:	59d160ef          	jal	80029aa8 <putchar>
    80012d10:	4529                	li	a0,10
    80012d12:	597160ef          	jal	80029aa8 <putchar>
    80012d16:	c419                	beqz	s0,80012d24 <external_interrupt_VSEI+0x488>
    80012d18:	0003e797          	auipc	a5,0x3e
    80012d1c:	2f97c783          	lbu	a5,761(a5) # 80051011 <excpt+0x1>
    80012d20:	4401                	li	s0,0
    80012d22:	cbcd                	beqz	a5,80012dd4 <external_interrupt_VSEI+0x538>
        excpt.cause == CAUSE_VSEI &&
        excpt.priv == PRIV_VS
    ); 

    //VS模式下产生单bit外部中断，hip.SSEIP=0，hie.SSEIE=0
    TEST_SETUP_EXCEPT();
    80012d24:	84eee0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80012d28:	4511                	li	a0,4
    80012d2a:	944ee0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HIE,HIE_VSEIE);
    80012d2e:	40000793          	li	a5,1024
    80012d32:	6047b073          	csrc	hie,a5
    CSRC(CSR_HIP,HIP_VSEIP);
    80012d36:	6447b073          	csrc	hip,a5

    goto_priv(PRIV_VS);
    80012d3a:	4509                	li	a0,2
    80012d3c:	932ee0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012d40:	08200593          	li	a1,130
    80012d44:	0001f617          	auipc	a2,0x1f
    80012d48:	92c60613          	addi	a2,a2,-1748 # 80031670 <__func__.0+0x4650>
    80012d4c:	0001a517          	auipc	a0,0x1a
    80012d50:	5cc50513          	addi	a0,a0,1484 # 8002d318 <__func__.0+0x2f8>
    80012d54:	066180ef          	jal	8002adba <printf>
    80012d58:	0003e797          	auipc	a5,0x3e
    80012d5c:	2b97c783          	lbu	a5,697(a5) # 80051011 <excpt+0x1>
    80012d60:	0001a597          	auipc	a1,0x1a
    80012d64:	59058593          	addi	a1,a1,1424 # 8002d2f0 <__func__.0+0x2d0>
    80012d68:	e789                	bnez	a5,80012d72 <external_interrupt_VSEI+0x4d6>
    80012d6a:	0001a597          	auipc	a1,0x1a
    80012d6e:	57658593          	addi	a1,a1,1398 # 8002d2e0 <__func__.0+0x2c0>
    80012d72:	0001a517          	auipc	a0,0x1a
    80012d76:	5be50513          	addi	a0,a0,1470 # 8002d330 <__func__.0+0x310>
    80012d7a:	040180ef          	jal	8002adba <printf>
    80012d7e:	0003e797          	auipc	a5,0x3e
    80012d82:	2937c783          	lbu	a5,659(a5) # 80051011 <excpt+0x1>
    80012d86:	12079d63          	bnez	a5,80012ec0 <external_interrupt_VSEI+0x624>
    80012d8a:	4529                	li	a0,10
    80012d8c:	51d160ef          	jal	80029aa8 <putchar>
    80012d90:	c411                	beqz	s0,80012d9c <external_interrupt_VSEI+0x500>
    80012d92:	0003e797          	auipc	a5,0x3e
    80012d96:	27f7c783          	lbu	a5,639(a5) # 80051011 <excpt+0x1>
    80012d9a:	c79d                	beqz	a5,80012dc8 <external_interrupt_VSEI+0x52c>
    80012d9c:	4401                	li	s0,0





    TEST_END();
    80012d9e:	0001a597          	auipc	a1,0x1a
    80012da2:	55258593          	addi	a1,a1,1362 # 8002d2f0 <__func__.0+0x2d0>
    80012da6:	0001a517          	auipc	a0,0x1a
    80012daa:	5f250513          	addi	a0,a0,1522 # 8002d398 <__func__.0+0x378>
    80012dae:	00c180ef          	jal	8002adba <printf>
    80012db2:	4511                	li	a0,4
    80012db4:	8baee0ef          	jal	80000e6e <goto_priv>
    80012db8:	9d3ee0ef          	jal	8000178a <reset_state>
}
    80012dbc:	60e2                	ld	ra,24(sp)
    80012dbe:	8522                	mv	a0,s0
    80012dc0:	6442                	ld	s0,16(sp)
    80012dc2:	64a2                	ld	s1,8(sp)
    80012dc4:	6105                	addi	sp,sp,32
    80012dc6:	8082                	ret
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012dc8:	4405                	li	s0,1
    TEST_END();
    80012dca:	0001a597          	auipc	a1,0x1a
    80012dce:	51658593          	addi	a1,a1,1302 # 8002d2e0 <__func__.0+0x2c0>
    80012dd2:	bfd1                	j	80012da6 <external_interrupt_VSEI+0x50a>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012dd4:	57fd                	li	a5,-1
    80012dd6:	6498                	ld	a4,8(s1)
    80012dd8:	17fe                	slli	a5,a5,0x3f
    80012dda:	07a9                	addi	a5,a5,10
    80012ddc:	f4f714e3          	bne	a4,a5,80012d24 <external_interrupt_VSEI+0x488>
    80012de0:	0003e417          	auipc	s0,0x3e
    80012de4:	23442403          	lw	s0,564(s0) # 80051014 <excpt+0x4>
    80012de8:	1479                	addi	s0,s0,-2
    80012dea:	00143413          	seqz	s0,s0
    80012dee:	bf1d                	j	80012d24 <external_interrupt_VSEI+0x488>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012df0:	57fd                	li	a5,-1
    80012df2:	6498                	ld	a4,8(s1)
    80012df4:	17fe                	slli	a5,a5,0x3f
    80012df6:	07a9                	addi	a5,a5,10
    80012df8:	e8f713e3          	bne	a4,a5,80012c7e <external_interrupt_VSEI+0x3e2>
    80012dfc:	0003e417          	auipc	s0,0x3e
    80012e00:	21842403          	lw	s0,536(s0) # 80051014 <excpt+0x4>
    80012e04:	1475                	addi	s0,s0,-3
    80012e06:	00143413          	seqz	s0,s0
    80012e0a:	bd95                	j	80012c7e <external_interrupt_VSEI+0x3e2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012e0c:	57fd                	li	a5,-1
    80012e0e:	6498                	ld	a4,8(s1)
    80012e10:	17fe                	slli	a5,a5,0x3f
    80012e12:	07a9                	addi	a5,a5,10
    80012e14:	dcf713e3          	bne	a4,a5,80012bda <external_interrupt_VSEI+0x33e>
    80012e18:	0003e417          	auipc	s0,0x3e
    80012e1c:	1fc42403          	lw	s0,508(s0) # 80051014 <excpt+0x4>
    80012e20:	1471                	addi	s0,s0,-4
    80012e22:	00143413          	seqz	s0,s0
    80012e26:	bb55                	j	80012bda <external_interrupt_VSEI+0x33e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012e28:	57fd                	li	a5,-1
    80012e2a:	6498                	ld	a4,8(s1)
    80012e2c:	17fe                	slli	a5,a5,0x3f
    80012e2e:	07a9                	addi	a5,a5,10
    80012e30:	c8f714e3          	bne	a4,a5,80012ab8 <external_interrupt_VSEI+0x21c>
    80012e34:	0003e417          	auipc	s0,0x3e
    80012e38:	1e042403          	lw	s0,480(s0) # 80051014 <excpt+0x4>
    80012e3c:	1479                	addi	s0,s0,-2
    80012e3e:	00143413          	seqz	s0,s0
    80012e42:	b99d                	j	80012ab8 <external_interrupt_VSEI+0x21c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012e44:	57fd                	li	a5,-1
    80012e46:	6498                	ld	a4,8(s1)
    80012e48:	17fe                	slli	a5,a5,0x3f
    80012e4a:	07a9                	addi	a5,a5,10
    80012e4c:	bcf712e3          	bne	a4,a5,80012a10 <external_interrupt_VSEI+0x174>
    80012e50:	0003e417          	auipc	s0,0x3e
    80012e54:	1c442403          	lw	s0,452(s0) # 80051014 <excpt+0x4>
    80012e58:	1475                	addi	s0,s0,-3
    80012e5a:	00143413          	seqz	s0,s0
    80012e5e:	be4d                	j	80012a10 <external_interrupt_VSEI+0x174>
    80012e60:	0003e717          	auipc	a4,0x3e
    80012e64:	1b472703          	lw	a4,436(a4) # 80051014 <excpt+0x4>
    80012e68:	478d                	li	a5,3
    80012e6a:	b6f71ee3          	bne	a4,a5,800129e6 <external_interrupt_VSEI+0x14a>
    80012e6e:	b671                	j	800129fa <external_interrupt_VSEI+0x15e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012e70:	0003e717          	auipc	a4,0x3e
    80012e74:	1a472703          	lw	a4,420(a4) # 80051014 <excpt+0x4>
    80012e78:	4789                	li	a5,2
    80012e7a:	c0f71ae3          	bne	a4,a5,80012a8e <external_interrupt_VSEI+0x1f2>
    80012e7e:	b115                	j	80012aa2 <external_interrupt_VSEI+0x206>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012e80:	0003e717          	auipc	a4,0x3e
    80012e84:	19472703          	lw	a4,404(a4) # 80051014 <excpt+0x4>
    80012e88:	4791                	li	a5,4
    80012e8a:	aaf718e3          	bne	a4,a5,8001293a <external_interrupt_VSEI+0x9e>
    80012e8e:	b4c1                	j	8001294e <external_interrupt_VSEI+0xb2>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012e90:	0003e717          	auipc	a4,0x3e
    80012e94:	18472703          	lw	a4,388(a4) # 80051014 <excpt+0x4>
    80012e98:	4791                	li	a5,4
    80012e9a:	d0f71be3          	bne	a4,a5,80012bb0 <external_interrupt_VSEI+0x314>
    80012e9e:	b31d                	j	80012bc4 <external_interrupt_VSEI+0x328>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012ea0:	0003e717          	auipc	a4,0x3e
    80012ea4:	17472703          	lw	a4,372(a4) # 80051014 <excpt+0x4>
    80012ea8:	4789                	li	a5,2
    80012eaa:	e4f719e3          	bne	a4,a5,80012cfc <external_interrupt_VSEI+0x460>
    80012eae:	b58d                	j	80012d10 <external_interrupt_VSEI+0x474>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012eb0:	0003e717          	auipc	a4,0x3e
    80012eb4:	16472703          	lw	a4,356(a4) # 80051014 <excpt+0x4>
    80012eb8:	478d                	li	a5,3
    80012eba:	d8f71de3          	bne	a4,a5,80012c54 <external_interrupt_VSEI+0x3b8>
    80012ebe:	b36d                	j	80012c68 <external_interrupt_VSEI+0x3cc>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=0 and hie.vseie=0",
    80012ec0:	0001a517          	auipc	a0,0x1a
    80012ec4:	47850513          	addi	a0,a0,1144 # 8002d338 <__func__.0+0x318>
    80012ec8:	6f3170ef          	jal	8002adba <printf>
    80012ecc:	02900513          	li	a0,41
    80012ed0:	3d9160ef          	jal	80029aa8 <putchar>
    80012ed4:	bd5d                	j	80012d8a <external_interrupt_VSEI+0x4ee>
    TEST_ASSERT("vs mode leads to no interrupt when hip.vseip=1 and hie.vseie=0",
    80012ed6:	0001a517          	auipc	a0,0x1a
    80012eda:	46250513          	addi	a0,a0,1122 # 8002d338 <__func__.0+0x318>
    80012ede:	6dd170ef          	jal	8002adba <printf>
    80012ee2:	02900513          	li	a0,41
    80012ee6:	3c3160ef          	jal	80029aa8 <putchar>
    80012eea:	b93d                	j	80012b28 <external_interrupt_VSEI+0x28c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1",
    80012eec:	0003e717          	auipc	a4,0x3e
    80012ef0:	12872703          	lw	a4,296(a4) # 80051014 <excpt+0x4>
    80012ef4:	478d                	li	a5,3
    80012ef6:	0001a597          	auipc	a1,0x1a
    80012efa:	3ea58593          	addi	a1,a1,1002 # 8002d2e0 <__func__.0+0x2c0>
    80012efe:	d2f70ae3          	beq	a4,a5,80012c32 <external_interrupt_VSEI+0x396>
    80012f02:	0001a597          	auipc	a1,0x1a
    80012f06:	3ee58593          	addi	a1,a1,1006 # 8002d2f0 <__func__.0+0x2d0>
    80012f0a:	b325                	j	80012c32 <external_interrupt_VSEI+0x396>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012f0c:	0003e417          	auipc	s0,0x3e
    80012f10:	10842403          	lw	s0,264(s0) # 80051014 <excpt+0x4>
    80012f14:	1471                	addi	s0,s0,-4
    80012f16:	00143413          	seqz	s0,s0
    80012f1a:	bc89                	j	8001296c <external_interrupt_VSEI+0xd0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1",
    80012f1c:	0003e717          	auipc	a4,0x3e
    80012f20:	0f872703          	lw	a4,248(a4) # 80051014 <excpt+0x4>
    80012f24:	478d                	li	a5,3
    80012f26:	0001a597          	auipc	a1,0x1a
    80012f2a:	3ba58593          	addi	a1,a1,954 # 8002d2e0 <__func__.0+0x2c0>
    80012f2e:	a8f70be3          	beq	a4,a5,800129c4 <external_interrupt_VSEI+0x128>
    80012f32:	0001a597          	auipc	a1,0x1a
    80012f36:	3be58593          	addi	a1,a1,958 # 8002d2f0 <__func__.0+0x2d0>
    80012f3a:	b469                	j	800129c4 <external_interrupt_VSEI+0x128>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1",
    80012f3c:	0003e717          	auipc	a4,0x3e
    80012f40:	0d872703          	lw	a4,216(a4) # 80051014 <excpt+0x4>
    80012f44:	4791                	li	a5,4
    80012f46:	0001a597          	auipc	a1,0x1a
    80012f4a:	39a58593          	addi	a1,a1,922 # 8002d2e0 <__func__.0+0x2c0>
    80012f4e:	9cf705e3          	beq	a4,a5,80012918 <external_interrupt_VSEI+0x7c>
    80012f52:	0001a597          	auipc	a1,0x1a
    80012f56:	39e58593          	addi	a1,a1,926 # 8002d2f0 <__func__.0+0x2d0>
    80012f5a:	ba7d                	j	80012918 <external_interrupt_VSEI+0x7c>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=1 and mideleg=1 and hideleg=1",
    80012f5c:	0003e717          	auipc	a4,0x3e
    80012f60:	0b872703          	lw	a4,184(a4) # 80051014 <excpt+0x4>
    80012f64:	4789                	li	a5,2
    80012f66:	0001a597          	auipc	a1,0x1a
    80012f6a:	37a58593          	addi	a1,a1,890 # 8002d2e0 <__func__.0+0x2c0>
    80012f6e:	aef70fe3          	beq	a4,a5,80012a6c <external_interrupt_VSEI+0x1d0>
    80012f72:	0001a597          	auipc	a1,0x1a
    80012f76:	37e58593          	addi	a1,a1,894 # 8002d2f0 <__func__.0+0x2d0>
    80012f7a:	bccd                	j	80012a6c <external_interrupt_VSEI+0x1d0>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0 and mideleg=1 and hideleg=1",
    80012f7c:	0003e717          	auipc	a4,0x3e
    80012f80:	09872703          	lw	a4,152(a4) # 80051014 <excpt+0x4>
    80012f84:	4789                	li	a5,2
    80012f86:	0001a597          	auipc	a1,0x1a
    80012f8a:	35a58593          	addi	a1,a1,858 # 8002d2e0 <__func__.0+0x2c0>
    80012f8e:	d4f706e3          	beq	a4,a5,80012cda <external_interrupt_VSEI+0x43e>
    80012f92:	0001a597          	auipc	a1,0x1a
    80012f96:	35e58593          	addi	a1,a1,862 # 8002d2f0 <__func__.0+0x2d0>
    80012f9a:	b381                	j	80012cda <external_interrupt_VSEI+0x43e>
    TEST_ASSERT("vs mode leads to vs level external interrupt when hip.vseip=1 and hie.vseie=0",
    80012f9c:	0003e717          	auipc	a4,0x3e
    80012fa0:	07872703          	lw	a4,120(a4) # 80051014 <excpt+0x4>
    80012fa4:	4791                	li	a5,4
    80012fa6:	0001a597          	auipc	a1,0x1a
    80012faa:	33a58593          	addi	a1,a1,826 # 8002d2e0 <__func__.0+0x2c0>
    80012fae:	bef700e3          	beq	a4,a5,80012b8e <external_interrupt_VSEI+0x2f2>
    80012fb2:	0001a597          	auipc	a1,0x1a
    80012fb6:	33e58593          	addi	a1,a1,830 # 8002d2f0 <__func__.0+0x2d0>
    80012fba:	bed1                	j	80012b8e <external_interrupt_VSEI+0x2f2>

0000000080012fbc <software_interrupt_msi>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool software_interrupt_msi() {
    80012fbc:	1101                	addi	sp,sp,-32

    TEST_START();
    80012fbe:	00019597          	auipc	a1,0x19
    80012fc2:	bd258593          	addi	a1,a1,-1070 # 8002bb90 <__func__.2>
    80012fc6:	0001a517          	auipc	a0,0x1a
    80012fca:	33a50513          	addi	a0,a0,826 # 8002d300 <__func__.0+0x2e0>
bool software_interrupt_msi() {
    80012fce:	ec06                	sd	ra,24(sp)
    80012fd0:	e822                	sd	s0,16(sp)
    80012fd2:	e426                	sd	s1,8(sp)
    TEST_START();
    80012fd4:	5e7170ef          	jal	8002adba <printf>
    80012fd8:	4529                	li	a0,10
    80012fda:	2cf160ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    80012fde:	d95ed0ef          	jal	80000d72 <test_setup_except_function>

   
    //M模式下产生软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高
    goto_priv(PRIV_M);
    80012fe2:	4511                	li	a0,4
    80012fe4:	e8bed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80012fe8:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80012fec:	30446073          	csrsi	mie,8
    CSRW(CSR_MIDELEG,0);
    80012ff0:	30305073          	csrwi	mideleg,0
    CSRS(CSR_MIP,MIP_MSIP);     //read-only
    80012ff4:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80012ff8:	4511                	li	a0,4
    80012ffa:	e75ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80012ffe:	08200593          	li	a1,130
    80013002:	0001e617          	auipc	a2,0x1e
    80013006:	6be60613          	addi	a2,a2,1726 # 800316c0 <__func__.0+0x46a0>
    8001300a:	0001a517          	auipc	a0,0x1a
    8001300e:	30e50513          	addi	a0,a0,782 # 8002d318 <__func__.0+0x2f8>
    80013012:	5a9170ef          	jal	8002adba <printf>
    80013016:	0003e797          	auipc	a5,0x3e
    8001301a:	ffb7c783          	lbu	a5,-5(a5) # 80051011 <excpt+0x1>
    8001301e:	0003e497          	auipc	s1,0x3e
    80013022:	ff248493          	addi	s1,s1,-14 # 80051010 <excpt>
    80013026:	0001a597          	auipc	a1,0x1a
    8001302a:	2ca58593          	addi	a1,a1,714 # 8002d2f0 <__func__.0+0x2d0>
    8001302e:	c799                	beqz	a5,8001303c <software_interrupt_msi+0x80>
    80013030:	57fd                	li	a5,-1
    80013032:	6498                	ld	a4,8(s1)
    80013034:	17fe                	slli	a5,a5,0x3f
    80013036:	0789                	addi	a5,a5,2
    80013038:	4ef702e3          	beq	a4,a5,80013d1c <software_interrupt_msi+0xd60>
    8001303c:	0001a517          	auipc	a0,0x1a
    80013040:	2f450513          	addi	a0,a0,756 # 8002d330 <__func__.0+0x310>
    80013044:	577170ef          	jal	8002adba <printf>
    80013048:	0003e797          	auipc	a5,0x3e
    8001304c:	fc97c783          	lbu	a5,-55(a5) # 80051011 <excpt+0x1>
    80013050:	c799                	beqz	a5,8001305e <software_interrupt_msi+0xa2>
    80013052:	57fd                	li	a5,-1
    80013054:	6498                	ld	a4,8(s1)
    80013056:	17fe                	slli	a5,a5,0x3f
    80013058:	0789                	addi	a5,a5,2
    8001305a:	34f700e3          	beq	a4,a5,80013b9a <software_interrupt_msi+0xbde>
    8001305e:	0001a517          	auipc	a0,0x1a
    80013062:	2da50513          	addi	a0,a0,730 # 8002d338 <__func__.0+0x318>
    80013066:	555170ef          	jal	8002adba <printf>
    8001306a:	02900513          	li	a0,41
    8001306e:	23b160ef          	jal	80029aa8 <putchar>
    80013072:	4529                	li	a0,10
    80013074:	235160ef          	jal	80029aa8 <putchar>
    80013078:	0003e797          	auipc	a5,0x3e
    8001307c:	f997c783          	lbu	a5,-103(a5) # 80051011 <excpt+0x1>
    80013080:	4401                	li	s0,0
    80013082:	c799                	beqz	a5,80013090 <software_interrupt_msi+0xd4>
    80013084:	57fd                	li	a5,-1
    80013086:	6498                	ld	a4,8(s1)
    80013088:	17fe                	slli	a5,a5,0x3f
    8001308a:	0789                	addi	a5,a5,2
    8001308c:	56f70ce3          	beq	a4,a5,80013e04 <software_interrupt_msi+0xe48>
        excpt.priv == PRIV_M
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80013090:	ce3ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013094:	4511                	li	a0,4
    80013096:	dd9ed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     
    8001309a:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    8001309e:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800130a2:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800130a6:	4511                	li	a0,4
    800130a8:	dc7ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    800130ac:	08200593          	li	a1,130
    800130b0:	0001e617          	auipc	a2,0x1e
    800130b4:	67060613          	addi	a2,a2,1648 # 80031720 <__func__.0+0x4700>
    800130b8:	0001a517          	auipc	a0,0x1a
    800130bc:	26050513          	addi	a0,a0,608 # 8002d318 <__func__.0+0x2f8>
    800130c0:	4fb170ef          	jal	8002adba <printf>
    800130c4:	0003e797          	auipc	a5,0x3e
    800130c8:	f4d7c783          	lbu	a5,-179(a5) # 80051011 <excpt+0x1>
    800130cc:	0001a597          	auipc	a1,0x1a
    800130d0:	22458593          	addi	a1,a1,548 # 8002d2f0 <__func__.0+0x2d0>
    800130d4:	e789                	bnez	a5,800130de <software_interrupt_msi+0x122>
    800130d6:	0001a597          	auipc	a1,0x1a
    800130da:	20a58593          	addi	a1,a1,522 # 8002d2e0 <__func__.0+0x2c0>
    800130de:	0001a517          	auipc	a0,0x1a
    800130e2:	25250513          	addi	a0,a0,594 # 8002d330 <__func__.0+0x310>
    800130e6:	4d5170ef          	jal	8002adba <printf>
    800130ea:	0003e797          	auipc	a5,0x3e
    800130ee:	f277c783          	lbu	a5,-217(a5) # 80051011 <excpt+0x1>
    800130f2:	320797e3          	bnez	a5,80013c20 <software_interrupt_msi+0xc64>
    800130f6:	4529                	li	a0,10
    800130f8:	1b1160ef          	jal	80029aa8 <putchar>
    800130fc:	c419                	beqz	s0,8001310a <software_interrupt_msi+0x14e>
    800130fe:	0003e417          	auipc	s0,0x3e
    80013102:	f1344403          	lbu	s0,-237(s0) # 80051011 <excpt+0x1>
    80013106:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    //M模式下产生软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    8001310a:	c69ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001310e:	4511                	li	a0,4
    80013110:	d5fed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013114:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013118:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8001311c:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    80013120:	4511                	li	a0,4
    80013122:	d4ded0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80013126:	08200593          	li	a1,130
    8001312a:	0001e617          	auipc	a2,0x1e
    8001312e:	64e60613          	addi	a2,a2,1614 # 80031778 <__func__.0+0x4758>
    80013132:	0001a517          	auipc	a0,0x1a
    80013136:	1e650513          	addi	a0,a0,486 # 8002d318 <__func__.0+0x2f8>
    8001313a:	481170ef          	jal	8002adba <printf>
    8001313e:	0003e797          	auipc	a5,0x3e
    80013142:	ed37c783          	lbu	a5,-301(a5) # 80051011 <excpt+0x1>
    80013146:	0001a597          	auipc	a1,0x1a
    8001314a:	1aa58593          	addi	a1,a1,426 # 8002d2f0 <__func__.0+0x2d0>
    8001314e:	cf99                	beqz	a5,8001316c <software_interrupt_msi+0x1b0>
    80013150:	57fd                	li	a5,-1
    80013152:	6498                	ld	a4,8(s1)
    80013154:	17fe                	slli	a5,a5,0x3f
    80013156:	0789                	addi	a5,a5,2
    80013158:	0001a597          	auipc	a1,0x1a
    8001315c:	18858593          	addi	a1,a1,392 # 8002d2e0 <__func__.0+0x2c0>
    80013160:	00f70663          	beq	a4,a5,8001316c <software_interrupt_msi+0x1b0>
    80013164:	0001a597          	auipc	a1,0x1a
    80013168:	18c58593          	addi	a1,a1,396 # 8002d2f0 <__func__.0+0x2d0>
    8001316c:	0001a517          	auipc	a0,0x1a
    80013170:	1c450513          	addi	a0,a0,452 # 8002d330 <__func__.0+0x310>
    80013174:	447170ef          	jal	8002adba <printf>
    80013178:	0003e797          	auipc	a5,0x3e
    8001317c:	e997c783          	lbu	a5,-359(a5) # 80051011 <excpt+0x1>
    80013180:	c799                	beqz	a5,8001318e <software_interrupt_msi+0x1d2>
    80013182:	57fd                	li	a5,-1
    80013184:	6498                	ld	a4,8(s1)
    80013186:	17fe                	slli	a5,a5,0x3f
    80013188:	0789                	addi	a5,a5,2
    8001318a:	00f70c63          	beq	a4,a5,800131a2 <software_interrupt_msi+0x1e6>
    8001318e:	0001a517          	auipc	a0,0x1a
    80013192:	1aa50513          	addi	a0,a0,426 # 8002d338 <__func__.0+0x318>
    80013196:	425170ef          	jal	8002adba <printf>
    8001319a:	02900513          	li	a0,41
    8001319e:	10b160ef          	jal	80029aa8 <putchar>
    800131a2:	4529                	li	a0,10
    800131a4:	105160ef          	jal	80029aa8 <putchar>
    800131a8:	c801                	beqz	s0,800131b8 <software_interrupt_msi+0x1fc>
    800131aa:	0003e797          	auipc	a5,0x3e
    800131ae:	e677c783          	lbu	a5,-409(a5) # 80051011 <excpt+0x1>
    800131b2:	4401                	li	s0,0
    800131b4:	1c0793e3          	bnez	a5,80013b7a <software_interrupt_msi+0xbbe>
        excpt.triggered == true &&
        excpt.cause == CAUSE_MSI
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=1
    TEST_SETUP_EXCEPT();
    800131b8:	bbbed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800131bc:	4511                	li	a0,4
    800131be:	cb1ed0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800131c2:	30047073          	csrci	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800131c6:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800131ca:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    800131ce:	4511                	li	a0,4
    800131d0:	c9fed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    800131d4:	08200593          	li	a1,130
    800131d8:	0001e617          	auipc	a2,0x1e
    800131dc:	60060613          	addi	a2,a2,1536 # 800317d8 <__func__.0+0x47b8>
    800131e0:	0001a517          	auipc	a0,0x1a
    800131e4:	13850513          	addi	a0,a0,312 # 8002d318 <__func__.0+0x2f8>
    800131e8:	3d3170ef          	jal	8002adba <printf>
    800131ec:	0003e797          	auipc	a5,0x3e
    800131f0:	e257c783          	lbu	a5,-475(a5) # 80051011 <excpt+0x1>
    800131f4:	0001a597          	auipc	a1,0x1a
    800131f8:	0fc58593          	addi	a1,a1,252 # 8002d2f0 <__func__.0+0x2d0>
    800131fc:	e789                	bnez	a5,80013206 <software_interrupt_msi+0x24a>
    800131fe:	0001a597          	auipc	a1,0x1a
    80013202:	0e258593          	addi	a1,a1,226 # 8002d2e0 <__func__.0+0x2c0>
    80013206:	0001a517          	auipc	a0,0x1a
    8001320a:	12a50513          	addi	a0,a0,298 # 8002d330 <__func__.0+0x310>
    8001320e:	3ad170ef          	jal	8002adba <printf>
    80013212:	0003e797          	auipc	a5,0x3e
    80013216:	dff7c783          	lbu	a5,-513(a5) # 80051011 <excpt+0x1>
    8001321a:	22079ae3          	bnez	a5,80013c4e <software_interrupt_msi+0xc92>
    8001321e:	4529                	li	a0,10
    80013220:	089160ef          	jal	80029aa8 <putchar>
    80013224:	c419                	beqz	s0,80013232 <software_interrupt_msi+0x276>
    80013226:	0003e417          	auipc	s0,0x3e
    8001322a:	deb44403          	lbu	s0,-533(s0) # 80051011 <excpt+0x1>
    8001322e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=1，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    80013232:	b41ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013236:	4511                	li	a0,4
    80013238:	c37ed0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    8001323c:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013240:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013244:	34446073          	csrsi	mip,8

    goto_priv(PRIV_M);
    80013248:	4511                	li	a0,4
    8001324a:	c25ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    8001324e:	08200593          	li	a1,130
    80013252:	0001e617          	auipc	a2,0x1e
    80013256:	5d660613          	addi	a2,a2,1494 # 80031828 <__func__.0+0x4808>
    8001325a:	0001a517          	auipc	a0,0x1a
    8001325e:	0be50513          	addi	a0,a0,190 # 8002d318 <__func__.0+0x2f8>
    80013262:	359170ef          	jal	8002adba <printf>
    80013266:	0003e797          	auipc	a5,0x3e
    8001326a:	dab7c783          	lbu	a5,-597(a5) # 80051011 <excpt+0x1>
    8001326e:	0001a597          	auipc	a1,0x1a
    80013272:	08258593          	addi	a1,a1,130 # 8002d2f0 <__func__.0+0x2d0>
    80013276:	e789                	bnez	a5,80013280 <software_interrupt_msi+0x2c4>
    80013278:	0001a597          	auipc	a1,0x1a
    8001327c:	06858593          	addi	a1,a1,104 # 8002d2e0 <__func__.0+0x2c0>
    80013280:	0001a517          	auipc	a0,0x1a
    80013284:	0b050513          	addi	a0,a0,176 # 8002d330 <__func__.0+0x310>
    80013288:	333170ef          	jal	8002adba <printf>
    8001328c:	0003e797          	auipc	a5,0x3e
    80013290:	d857c783          	lbu	a5,-635(a5) # 80051011 <excpt+0x1>
    80013294:	220797e3          	bnez	a5,80013cc2 <software_interrupt_msi+0xd06>
    80013298:	4529                	li	a0,10
    8001329a:	00f160ef          	jal	80029aa8 <putchar>
    8001329e:	c419                	beqz	s0,800132ac <software_interrupt_msi+0x2f0>
    800132a0:	0003e417          	auipc	s0,0x3e
    800132a4:	d7144403          	lbu	s0,-655(s0) # 80051011 <excpt+0x1>
    800132a8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //M模式下产生软件中断，mstatus.mie=0，且mip.MSIP=0，mie.MSIE=0
    TEST_SETUP_EXCEPT();
    800132ac:	ac7ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800132b0:	4511                	li	a0,4
    800132b2:	bbded0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);     
    800132b6:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800132ba:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800132be:	34447073          	csrci	mip,8

    goto_priv(PRIV_M);
    800132c2:	4511                	li	a0,4
    800132c4:	babed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    800132c8:	08200593          	li	a1,130
    800132cc:	0001e617          	auipc	a2,0x1e
    800132d0:	5ac60613          	addi	a2,a2,1452 # 80031878 <__func__.0+0x4858>
    800132d4:	0001a517          	auipc	a0,0x1a
    800132d8:	04450513          	addi	a0,a0,68 # 8002d318 <__func__.0+0x2f8>
    800132dc:	2df170ef          	jal	8002adba <printf>
    800132e0:	0003e797          	auipc	a5,0x3e
    800132e4:	d317c783          	lbu	a5,-719(a5) # 80051011 <excpt+0x1>
    800132e8:	0001a597          	auipc	a1,0x1a
    800132ec:	00858593          	addi	a1,a1,8 # 8002d2f0 <__func__.0+0x2d0>
    800132f0:	e789                	bnez	a5,800132fa <software_interrupt_msi+0x33e>
    800132f2:	0001a597          	auipc	a1,0x1a
    800132f6:	fee58593          	addi	a1,a1,-18 # 8002d2e0 <__func__.0+0x2c0>
    800132fa:	0001a517          	auipc	a0,0x1a
    800132fe:	03650513          	addi	a0,a0,54 # 8002d330 <__func__.0+0x310>
    80013302:	2b9170ef          	jal	8002adba <printf>
    80013306:	0003e797          	auipc	a5,0x3e
    8001330a:	d0b7c783          	lbu	a5,-757(a5) # 80051011 <excpt+0x1>
    8001330e:	18079ee3          	bnez	a5,80013caa <software_interrupt_msi+0xcee>
    80013312:	4529                	li	a0,10
    80013314:	794160ef          	jal	80029aa8 <putchar>
    80013318:	c419                	beqz	s0,80013326 <software_interrupt_msi+0x36a>
    8001331a:	0003e417          	auipc	s0,0x3e
    8001331e:	cf744403          	lbu	s0,-777(s0) # 80051011 <excpt+0x1>
    80013322:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//HS mode 下

    TEST_SETUP_EXCEPT();
    80013326:	a4ded0ef          	jal	80000d72 <test_setup_except_function>
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    8001332a:	4511                	li	a0,4
    8001332c:	b43ed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    80013330:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013334:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013338:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    8001333c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013340:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013344:	450d                	li	a0,3
    80013346:	b29ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    8001334a:	08200593          	li	a1,130
    8001334e:	0001e617          	auipc	a2,0x1e
    80013352:	57a60613          	addi	a2,a2,1402 # 800318c8 <__func__.0+0x48a8>
    80013356:	0001a517          	auipc	a0,0x1a
    8001335a:	fc250513          	addi	a0,a0,-62 # 8002d318 <__func__.0+0x2f8>
    8001335e:	25d170ef          	jal	8002adba <printf>
    80013362:	0003e797          	auipc	a5,0x3e
    80013366:	caf7c783          	lbu	a5,-849(a5) # 80051011 <excpt+0x1>
    8001336a:	0001a597          	auipc	a1,0x1a
    8001336e:	f8658593          	addi	a1,a1,-122 # 8002d2f0 <__func__.0+0x2d0>
    80013372:	c799                	beqz	a5,80013380 <software_interrupt_msi+0x3c4>
    80013374:	57fd                	li	a5,-1
    80013376:	6498                	ld	a4,8(s1)
    80013378:	17fe                	slli	a5,a5,0x3f
    8001337a:	0789                	addi	a5,a5,2
    8001337c:	20f702e3          	beq	a4,a5,80013d80 <software_interrupt_msi+0xdc4>
    80013380:	0001a517          	auipc	a0,0x1a
    80013384:	fb050513          	addi	a0,a0,-80 # 8002d330 <__func__.0+0x310>
    80013388:	233170ef          	jal	8002adba <printf>
    8001338c:	0003e797          	auipc	a5,0x3e
    80013390:	c857c783          	lbu	a5,-891(a5) # 80051011 <excpt+0x1>
    80013394:	c799                	beqz	a5,800133a2 <software_interrupt_msi+0x3e6>
    80013396:	57fd                	li	a5,-1
    80013398:	6498                	ld	a4,8(s1)
    8001339a:	17fe                	slli	a5,a5,0x3f
    8001339c:	0789                	addi	a5,a5,2
    8001339e:	04f700e3          	beq	a4,a5,80013bde <software_interrupt_msi+0xc22>
    800133a2:	0001a517          	auipc	a0,0x1a
    800133a6:	f9650513          	addi	a0,a0,-106 # 8002d338 <__func__.0+0x318>
    800133aa:	211170ef          	jal	8002adba <printf>
    800133ae:	02900513          	li	a0,41
    800133b2:	6f6160ef          	jal	80029aa8 <putchar>
    800133b6:	4529                	li	a0,10
    800133b8:	6f0160ef          	jal	80029aa8 <putchar>
    800133bc:	c801                	beqz	s0,800133cc <software_interrupt_msi+0x410>
    800133be:	0003e797          	auipc	a5,0x3e
    800133c2:	c537c783          	lbu	a5,-941(a5) # 80051011 <excpt+0x1>
    800133c6:	4401                	li	s0,0
    800133c8:	78079a63          	bnez	a5,80013b5c <software_interrupt_msi+0xba0>
        excpt.priv == PRIV_M
    ); 

    
    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    800133cc:	9a7ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800133d0:	4511                	li	a0,4
    800133d2:	a9ded0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800133d6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800133da:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800133de:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    800133e2:	57fd                	li	a5,-1
    800133e4:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    800133e8:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800133ec:	450d                	li	a0,3
    800133ee:	a81ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    800133f2:	08200593          	li	a1,130
    800133f6:	0001e617          	auipc	a2,0x1e
    800133fa:	53260613          	addi	a2,a2,1330 # 80031928 <__func__.0+0x4908>
    800133fe:	0001a517          	auipc	a0,0x1a
    80013402:	f1a50513          	addi	a0,a0,-230 # 8002d318 <__func__.0+0x2f8>
    80013406:	1b5170ef          	jal	8002adba <printf>
    8001340a:	0003e797          	auipc	a5,0x3e
    8001340e:	c077c783          	lbu	a5,-1017(a5) # 80051011 <excpt+0x1>
    80013412:	0001a597          	auipc	a1,0x1a
    80013416:	ede58593          	addi	a1,a1,-290 # 8002d2f0 <__func__.0+0x2d0>
    8001341a:	c799                	beqz	a5,80013428 <software_interrupt_msi+0x46c>
    8001341c:	57fd                	li	a5,-1
    8001341e:	6498                	ld	a4,8(s1)
    80013420:	17fe                	slli	a5,a5,0x3f
    80013422:	0789                	addi	a5,a5,2
    80013424:	16f70fe3          	beq	a4,a5,80013da2 <software_interrupt_msi+0xde6>
    80013428:	0001a517          	auipc	a0,0x1a
    8001342c:	f0850513          	addi	a0,a0,-248 # 8002d330 <__func__.0+0x310>
    80013430:	18b170ef          	jal	8002adba <printf>
    80013434:	0003e797          	auipc	a5,0x3e
    80013438:	bdd7c783          	lbu	a5,-1059(a5) # 80051011 <excpt+0x1>
    8001343c:	c799                	beqz	a5,8001344a <software_interrupt_msi+0x48e>
    8001343e:	57fd                	li	a5,-1
    80013440:	6498                	ld	a4,8(s1)
    80013442:	17fe                	slli	a5,a5,0x3f
    80013444:	0789                	addi	a5,a5,2
    80013446:	78f70363          	beq	a4,a5,80013bcc <software_interrupt_msi+0xc10>
    8001344a:	0001a517          	auipc	a0,0x1a
    8001344e:	eee50513          	addi	a0,a0,-274 # 8002d338 <__func__.0+0x318>
    80013452:	169170ef          	jal	8002adba <printf>
    80013456:	02900513          	li	a0,41
    8001345a:	64e160ef          	jal	80029aa8 <putchar>
    8001345e:	4529                	li	a0,10
    80013460:	648160ef          	jal	80029aa8 <putchar>
    80013464:	c801                	beqz	s0,80013474 <software_interrupt_msi+0x4b8>
    80013466:	0003e797          	auipc	a5,0x3e
    8001346a:	bab7c783          	lbu	a5,-1109(a5) # 80051011 <excpt+0x1>
    8001346e:	4401                	li	s0,0
    80013470:	6c079763          	bnez	a5,80013b3e <software_interrupt_msi+0xb82>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    80013474:	8ffed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013478:	4511                	li	a0,4
    8001347a:	9f5ed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001347e:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013482:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013486:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    8001348a:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8001348e:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013492:	450d                	li	a0,3
    80013494:	9dbed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013498:	08200593          	li	a1,130
    8001349c:	0001e617          	auipc	a2,0x1e
    800134a0:	4fc60613          	addi	a2,a2,1276 # 80031998 <__func__.0+0x4978>
    800134a4:	0001a517          	auipc	a0,0x1a
    800134a8:	e7450513          	addi	a0,a0,-396 # 8002d318 <__func__.0+0x2f8>
    800134ac:	10f170ef          	jal	8002adba <printf>
    800134b0:	0003e797          	auipc	a5,0x3e
    800134b4:	b617c783          	lbu	a5,-1183(a5) # 80051011 <excpt+0x1>
    800134b8:	0001a597          	auipc	a1,0x1a
    800134bc:	e3858593          	addi	a1,a1,-456 # 8002d2f0 <__func__.0+0x2d0>
    800134c0:	e789                	bnez	a5,800134ca <software_interrupt_msi+0x50e>
    800134c2:	0001a597          	auipc	a1,0x1a
    800134c6:	e1e58593          	addi	a1,a1,-482 # 8002d2e0 <__func__.0+0x2c0>
    800134ca:	0001a517          	auipc	a0,0x1a
    800134ce:	e6650513          	addi	a0,a0,-410 # 8002d330 <__func__.0+0x310>
    800134d2:	0e9170ef          	jal	8002adba <printf>
    800134d6:	0003e797          	auipc	a5,0x3e
    800134da:	b3b7c783          	lbu	a5,-1221(a5) # 80051011 <excpt+0x1>
    800134de:	7a079a63          	bnez	a5,80013c92 <software_interrupt_msi+0xcd6>
    800134e2:	4529                	li	a0,10
    800134e4:	5c4160ef          	jal	80029aa8 <putchar>
    800134e8:	c419                	beqz	s0,800134f6 <software_interrupt_msi+0x53a>
    800134ea:	0003e417          	auipc	s0,0x3e
    800134ee:	b2744403          	lbu	s0,-1241(s0) # 80051011 <excpt+0x1>
    800134f2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    800134f6:	87ded0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800134fa:	4511                	li	a0,4
    800134fc:	973ed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013500:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013504:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013508:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    8001350c:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    80013510:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013514:	450d                	li	a0,3
    80013516:	959ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    8001351a:	08200593          	li	a1,130
    8001351e:	0001e617          	auipc	a2,0x1e
    80013522:	4e260613          	addi	a2,a2,1250 # 80031a00 <__func__.0+0x49e0>
    80013526:	0001a517          	auipc	a0,0x1a
    8001352a:	df250513          	addi	a0,a0,-526 # 8002d318 <__func__.0+0x2f8>
    8001352e:	08d170ef          	jal	8002adba <printf>
    80013532:	0003e797          	auipc	a5,0x3e
    80013536:	adf7c783          	lbu	a5,-1313(a5) # 80051011 <excpt+0x1>
    8001353a:	0001a597          	auipc	a1,0x1a
    8001353e:	db658593          	addi	a1,a1,-586 # 8002d2f0 <__func__.0+0x2d0>
    80013542:	c799                	beqz	a5,80013550 <software_interrupt_msi+0x594>
    80013544:	57fd                	li	a5,-1
    80013546:	6498                	ld	a4,8(s1)
    80013548:	17fe                	slli	a5,a5,0x3f
    8001354a:	0789                	addi	a5,a5,2
    8001354c:	7ef70963          	beq	a4,a5,80013d3e <software_interrupt_msi+0xd82>
    80013550:	0001a517          	auipc	a0,0x1a
    80013554:	de050513          	addi	a0,a0,-544 # 8002d330 <__func__.0+0x310>
    80013558:	063170ef          	jal	8002adba <printf>
    8001355c:	0003e797          	auipc	a5,0x3e
    80013560:	ab57c783          	lbu	a5,-1355(a5) # 80051011 <excpt+0x1>
    80013564:	c799                	beqz	a5,80013572 <software_interrupt_msi+0x5b6>
    80013566:	57fd                	li	a5,-1
    80013568:	6498                	ld	a4,8(s1)
    8001356a:	17fe                	slli	a5,a5,0x3f
    8001356c:	0789                	addi	a5,a5,2
    8001356e:	68f70963          	beq	a4,a5,80013c00 <software_interrupt_msi+0xc44>
    80013572:	0001a517          	auipc	a0,0x1a
    80013576:	dc650513          	addi	a0,a0,-570 # 8002d338 <__func__.0+0x318>
    8001357a:	041170ef          	jal	8002adba <printf>
    8001357e:	02900513          	li	a0,41
    80013582:	526160ef          	jal	80029aa8 <putchar>
    80013586:	4529                	li	a0,10
    80013588:	520160ef          	jal	80029aa8 <putchar>
    8001358c:	c801                	beqz	s0,8001359c <software_interrupt_msi+0x5e0>
    8001358e:	0003e797          	auipc	a5,0x3e
    80013592:	a837c783          	lbu	a5,-1405(a5) # 80051011 <excpt+0x1>
    80013596:	4401                	li	s0,0
    80013598:	58079563          	bnez	a5,80013b22 <software_interrupt_msi+0xb66>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001359c:	fd6ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800135a0:	4511                	li	a0,4
    800135a2:	8cded0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    800135a6:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800135aa:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800135ae:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    800135b2:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    800135b6:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    800135ba:	450d                	li	a0,3
    800135bc:	8b3ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    800135c0:	08200593          	li	a1,130
    800135c4:	0001e617          	auipc	a2,0x1e
    800135c8:	4ac60613          	addi	a2,a2,1196 # 80031a70 <__func__.0+0x4a50>
    800135cc:	0001a517          	auipc	a0,0x1a
    800135d0:	d4c50513          	addi	a0,a0,-692 # 8002d318 <__func__.0+0x2f8>
    800135d4:	7e6170ef          	jal	8002adba <printf>
    800135d8:	0003e797          	auipc	a5,0x3e
    800135dc:	a397c783          	lbu	a5,-1479(a5) # 80051011 <excpt+0x1>
    800135e0:	0001a597          	auipc	a1,0x1a
    800135e4:	d1058593          	addi	a1,a1,-752 # 8002d2f0 <__func__.0+0x2d0>
    800135e8:	c799                	beqz	a5,800135f6 <software_interrupt_msi+0x63a>
    800135ea:	57fd                	li	a5,-1
    800135ec:	6498                	ld	a4,8(s1)
    800135ee:	17fe                	slli	a5,a5,0x3f
    800135f0:	0789                	addi	a5,a5,2
    800135f2:	6ef70463          	beq	a4,a5,80013cda <software_interrupt_msi+0xd1e>
    800135f6:	0001a517          	auipc	a0,0x1a
    800135fa:	d3a50513          	addi	a0,a0,-710 # 8002d330 <__func__.0+0x310>
    800135fe:	7bc170ef          	jal	8002adba <printf>
    80013602:	0003e797          	auipc	a5,0x3e
    80013606:	a0f7c783          	lbu	a5,-1521(a5) # 80051011 <excpt+0x1>
    8001360a:	c799                	beqz	a5,80013618 <software_interrupt_msi+0x65c>
    8001360c:	57fd                	li	a5,-1
    8001360e:	6498                	ld	a4,8(s1)
    80013610:	17fe                	slli	a5,a5,0x3f
    80013612:	0789                	addi	a5,a5,2
    80013614:	5ef70e63          	beq	a4,a5,80013c10 <software_interrupt_msi+0xc54>
    80013618:	0001a517          	auipc	a0,0x1a
    8001361c:	d2050513          	addi	a0,a0,-736 # 8002d338 <__func__.0+0x318>
    80013620:	79a170ef          	jal	8002adba <printf>
    80013624:	02900513          	li	a0,41
    80013628:	480160ef          	jal	80029aa8 <putchar>
    8001362c:	4529                	li	a0,10
    8001362e:	47a160ef          	jal	80029aa8 <putchar>
    80013632:	c801                	beqz	s0,80013642 <software_interrupt_msi+0x686>
    80013634:	0003e797          	auipc	a5,0x3e
    80013638:	9dd7c783          	lbu	a5,-1571(a5) # 80051011 <excpt+0x1>
    8001363c:	4401                	li	s0,0
    8001363e:	4c079463          	bnez	a5,80013b06 <software_interrupt_msi+0xb4a>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //HS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    80013642:	f30ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013646:	4511                	li	a0,4
    80013648:	827ed0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    8001364c:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013650:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    80013654:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    80013658:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8001365c:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_HS);
    80013660:	450d                	li	a0,3
    80013662:	80ded0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013666:	08200593          	li	a1,130
    8001366a:	0001e617          	auipc	a2,0x1e
    8001366e:	47660613          	addi	a2,a2,1142 # 80031ae0 <__func__.0+0x4ac0>
    80013672:	0001a517          	auipc	a0,0x1a
    80013676:	ca650513          	addi	a0,a0,-858 # 8002d318 <__func__.0+0x2f8>
    8001367a:	740170ef          	jal	8002adba <printf>
    8001367e:	0003e797          	auipc	a5,0x3e
    80013682:	9937c783          	lbu	a5,-1645(a5) # 80051011 <excpt+0x1>
    80013686:	0001a597          	auipc	a1,0x1a
    8001368a:	c6a58593          	addi	a1,a1,-918 # 8002d2f0 <__func__.0+0x2d0>
    8001368e:	e789                	bnez	a5,80013698 <software_interrupt_msi+0x6dc>
    80013690:	0001a597          	auipc	a1,0x1a
    80013694:	c5058593          	addi	a1,a1,-944 # 8002d2e0 <__func__.0+0x2c0>
    80013698:	0001a517          	auipc	a0,0x1a
    8001369c:	c9850513          	addi	a0,a0,-872 # 8002d330 <__func__.0+0x310>
    800136a0:	71a170ef          	jal	8002adba <printf>
    800136a4:	0003e797          	auipc	a5,0x3e
    800136a8:	96d7c783          	lbu	a5,-1683(a5) # 80051011 <excpt+0x1>
    800136ac:	5c079863          	bnez	a5,80013c7c <software_interrupt_msi+0xcc0>
    800136b0:	4529                	li	a0,10
    800136b2:	3f6160ef          	jal	80029aa8 <putchar>
    800136b6:	c419                	beqz	s0,800136c4 <software_interrupt_msi+0x708>
    800136b8:	0003e417          	auipc	s0,0x3e
    800136bc:	95944403          	lbu	s0,-1703(s0) # 80051011 <excpt+0x1>
    800136c0:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

//vs mode 下

    TEST_SETUP_EXCEPT();
    800136c4:	eaeed0ef          	jal	80000d72 <test_setup_except_function>
    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，无代理
    goto_priv(PRIV_M);
    800136c8:	4511                	li	a0,4
    800136ca:	fa4ed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);     //mie位
    800136ce:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800136d2:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    800136d6:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    800136da:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800136de:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800136e2:	4509                	li	a0,2
    800136e4:	f8aed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    800136e8:	08200593          	li	a1,130
    800136ec:	0001e617          	auipc	a2,0x1e
    800136f0:	45460613          	addi	a2,a2,1108 # 80031b40 <__func__.0+0x4b20>
    800136f4:	0001a517          	auipc	a0,0x1a
    800136f8:	c2450513          	addi	a0,a0,-988 # 8002d318 <__func__.0+0x2f8>
    800136fc:	6be170ef          	jal	8002adba <printf>
    80013700:	0003e797          	auipc	a5,0x3e
    80013704:	9117c783          	lbu	a5,-1775(a5) # 80051011 <excpt+0x1>
    80013708:	0001a597          	auipc	a1,0x1a
    8001370c:	be858593          	addi	a1,a1,-1048 # 8002d2f0 <__func__.0+0x2d0>
    80013710:	c799                	beqz	a5,8001371e <software_interrupt_msi+0x762>
    80013712:	57fd                	li	a5,-1
    80013714:	6498                	ld	a4,8(s1)
    80013716:	17fe                	slli	a5,a5,0x3f
    80013718:	0789                	addi	a5,a5,2
    8001371a:	64f70363          	beq	a4,a5,80013d60 <software_interrupt_msi+0xda4>
    8001371e:	0001a517          	auipc	a0,0x1a
    80013722:	c1250513          	addi	a0,a0,-1006 # 8002d330 <__func__.0+0x310>
    80013726:	694170ef          	jal	8002adba <printf>
    8001372a:	0003e797          	auipc	a5,0x3e
    8001372e:	8e77c783          	lbu	a5,-1817(a5) # 80051011 <excpt+0x1>
    80013732:	c799                	beqz	a5,80013740 <software_interrupt_msi+0x784>
    80013734:	57fd                	li	a5,-1
    80013736:	6498                	ld	a4,8(s1)
    80013738:	17fe                	slli	a5,a5,0x3f
    8001373a:	0789                	addi	a5,a5,2
    8001373c:	4af70a63          	beq	a4,a5,80013bf0 <software_interrupt_msi+0xc34>
    80013740:	0001a517          	auipc	a0,0x1a
    80013744:	bf850513          	addi	a0,a0,-1032 # 8002d338 <__func__.0+0x318>
    80013748:	672170ef          	jal	8002adba <printf>
    8001374c:	02900513          	li	a0,41
    80013750:	358160ef          	jal	80029aa8 <putchar>
    80013754:	4529                	li	a0,10
    80013756:	352160ef          	jal	80029aa8 <putchar>
    8001375a:	c801                	beqz	s0,8001376a <software_interrupt_msi+0x7ae>
    8001375c:	0003e797          	auipc	a5,0x3e
    80013760:	8b57c783          	lbu	a5,-1867(a5) # 80051011 <excpt+0x1>
    80013764:	4401                	li	s0,0
    80013766:	38079263          	bnez	a5,80013aea <software_interrupt_msi+0xb2e>
        excpt.priv == PRIV_M
    ); 


    //vs模式下产生高特权级别软件中断，mstatus.mie=1，且mip，mie对应的MSIP、MSIE拉高，有mideleg代理
    TEST_SETUP_EXCEPT();
    8001376a:	e08ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001376e:	4511                	li	a0,4
    80013770:	efeed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013774:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013778:	30446073          	csrsi	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    8001377c:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,(uint64_t)-1);
    80013780:	57fd                	li	a5,-1
    80013782:	30379073          	csrw	mideleg,a5
    CSRW(CSR_HIDELEG,0);
    80013786:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    8001378a:	4509                	li	a0,2
    8001378c:	ee2ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013790:	08200593          	li	a1,130
    80013794:	0001e617          	auipc	a2,0x1e
    80013798:	40c60613          	addi	a2,a2,1036 # 80031ba0 <__func__.0+0x4b80>
    8001379c:	0001a517          	auipc	a0,0x1a
    800137a0:	b7c50513          	addi	a0,a0,-1156 # 8002d318 <__func__.0+0x2f8>
    800137a4:	616170ef          	jal	8002adba <printf>
    800137a8:	0003e797          	auipc	a5,0x3e
    800137ac:	8697c783          	lbu	a5,-1943(a5) # 80051011 <excpt+0x1>
    800137b0:	0001a597          	auipc	a1,0x1a
    800137b4:	b4058593          	addi	a1,a1,-1216 # 8002d2f0 <__func__.0+0x2d0>
    800137b8:	c799                	beqz	a5,800137c6 <software_interrupt_msi+0x80a>
    800137ba:	57fd                	li	a5,-1
    800137bc:	6498                	ld	a4,8(s1)
    800137be:	17fe                	slli	a5,a5,0x3f
    800137c0:	0789                	addi	a5,a5,2
    800137c2:	62f70163          	beq	a4,a5,80013de4 <software_interrupt_msi+0xe28>
    800137c6:	0001a517          	auipc	a0,0x1a
    800137ca:	b6a50513          	addi	a0,a0,-1174 # 8002d330 <__func__.0+0x310>
    800137ce:	5ec170ef          	jal	8002adba <printf>
    800137d2:	0003e797          	auipc	a5,0x3e
    800137d6:	83f7c783          	lbu	a5,-1985(a5) # 80051011 <excpt+0x1>
    800137da:	c799                	beqz	a5,800137e8 <software_interrupt_msi+0x82c>
    800137dc:	57fd                	li	a5,-1
    800137de:	6498                	ld	a4,8(s1)
    800137e0:	17fe                	slli	a5,a5,0x3f
    800137e2:	0789                	addi	a5,a5,2
    800137e4:	3cf70463          	beq	a4,a5,80013bac <software_interrupt_msi+0xbf0>
    800137e8:	0001a517          	auipc	a0,0x1a
    800137ec:	b5050513          	addi	a0,a0,-1200 # 8002d338 <__func__.0+0x318>
    800137f0:	5ca170ef          	jal	8002adba <printf>
    800137f4:	02900513          	li	a0,41
    800137f8:	2b0160ef          	jal	80029aa8 <putchar>
    800137fc:	4529                	li	a0,10
    800137fe:	2aa160ef          	jal	80029aa8 <putchar>
    80013802:	c801                	beqz	s0,80013812 <software_interrupt_msi+0x856>
    80013804:	0003e797          	auipc	a5,0x3e
    80013808:	80d7c783          	lbu	a5,-2035(a5) # 80051011 <excpt+0x1>
    8001380c:	4401                	li	s0,0
    8001380e:	2c079063          	bnez	a5,80013ace <software_interrupt_msi+0xb12>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=1，mie.MSIE=0，无代理
    TEST_SETUP_EXCEPT();
    80013812:	d60ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013816:	4511                	li	a0,4
    80013818:	e56ed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001381c:	30046073          	csrsi	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    80013820:	30447073          	csrci	mie,8
    CSRS(CSR_MIP,MIP_MSIP);
    80013824:	34446073          	csrsi	mip,8
    CSRW(CSR_MIDELEG,0);
    80013828:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    8001382c:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013830:	4509                	li	a0,2
    80013832:	e3ced0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013836:	08200593          	li	a1,130
    8001383a:	0001e617          	auipc	a2,0x1e
    8001383e:	3d660613          	addi	a2,a2,982 # 80031c10 <__func__.0+0x4bf0>
    80013842:	0001a517          	auipc	a0,0x1a
    80013846:	ad650513          	addi	a0,a0,-1322 # 8002d318 <__func__.0+0x2f8>
    8001384a:	570170ef          	jal	8002adba <printf>
    8001384e:	0003d797          	auipc	a5,0x3d
    80013852:	7c37c783          	lbu	a5,1987(a5) # 80051011 <excpt+0x1>
    80013856:	0001a597          	auipc	a1,0x1a
    8001385a:	a9a58593          	addi	a1,a1,-1382 # 8002d2f0 <__func__.0+0x2d0>
    8001385e:	e789                	bnez	a5,80013868 <software_interrupt_msi+0x8ac>
    80013860:	0001a597          	auipc	a1,0x1a
    80013864:	a8058593          	addi	a1,a1,-1408 # 8002d2e0 <__func__.0+0x2c0>
    80013868:	0001a517          	auipc	a0,0x1a
    8001386c:	ac850513          	addi	a0,a0,-1336 # 8002d330 <__func__.0+0x310>
    80013870:	54a170ef          	jal	8002adba <printf>
    80013874:	0003d797          	auipc	a5,0x3d
    80013878:	79d7c783          	lbu	a5,1949(a5) # 80051011 <excpt+0x1>
    8001387c:	3a079e63          	bnez	a5,80013c38 <software_interrupt_msi+0xc7c>
    80013880:	4529                	li	a0,10
    80013882:	226160ef          	jal	80029aa8 <putchar>
    80013886:	c419                	beqz	s0,80013894 <software_interrupt_msi+0x8d8>
    80013888:	0003d417          	auipc	s0,0x3d
    8001388c:	78944403          	lbu	s0,1929(s0) # 80051011 <excpt+0x1>
    80013890:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MESIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    80013894:	cdeed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013898:	4511                	li	a0,4
    8001389a:	dd4ed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    8001389e:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    800138a2:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800138a6:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    800138aa:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800138ae:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800138b2:	4509                	li	a0,2
    800138b4:	dbaed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    800138b8:	08200593          	li	a1,130
    800138bc:	0001e617          	auipc	a2,0x1e
    800138c0:	3bc60613          	addi	a2,a2,956 # 80031c78 <__func__.0+0x4c58>
    800138c4:	0001a517          	auipc	a0,0x1a
    800138c8:	a5450513          	addi	a0,a0,-1452 # 8002d318 <__func__.0+0x2f8>
    800138cc:	4ee170ef          	jal	8002adba <printf>
    800138d0:	0003d797          	auipc	a5,0x3d
    800138d4:	7417c783          	lbu	a5,1857(a5) # 80051011 <excpt+0x1>
    800138d8:	0001a597          	auipc	a1,0x1a
    800138dc:	a1858593          	addi	a1,a1,-1512 # 8002d2f0 <__func__.0+0x2d0>
    800138e0:	c799                	beqz	a5,800138ee <software_interrupt_msi+0x932>
    800138e2:	57fd                	li	a5,-1
    800138e4:	6498                	ld	a4,8(s1)
    800138e6:	17fe                	slli	a5,a5,0x3f
    800138e8:	0789                	addi	a5,a5,2
    800138ea:	40f70963          	beq	a4,a5,80013cfc <software_interrupt_msi+0xd40>
    800138ee:	0001a517          	auipc	a0,0x1a
    800138f2:	a4250513          	addi	a0,a0,-1470 # 8002d330 <__func__.0+0x310>
    800138f6:	4c4170ef          	jal	8002adba <printf>
    800138fa:	0003d797          	auipc	a5,0x3d
    800138fe:	7177c783          	lbu	a5,1815(a5) # 80051011 <excpt+0x1>
    80013902:	c799                	beqz	a5,80013910 <software_interrupt_msi+0x954>
    80013904:	57fd                	li	a5,-1
    80013906:	6498                	ld	a4,8(s1)
    80013908:	17fe                	slli	a5,a5,0x3f
    8001390a:	0789                	addi	a5,a5,2
    8001390c:	26f70f63          	beq	a4,a5,80013b8a <software_interrupt_msi+0xbce>
    80013910:	0001a517          	auipc	a0,0x1a
    80013914:	a2850513          	addi	a0,a0,-1496 # 8002d338 <__func__.0+0x318>
    80013918:	4a2170ef          	jal	8002adba <printf>
    8001391c:	02900513          	li	a0,41
    80013920:	188160ef          	jal	80029aa8 <putchar>
    80013924:	4529                	li	a0,10
    80013926:	182160ef          	jal	80029aa8 <putchar>
    8001392a:	c801                	beqz	s0,8001393a <software_interrupt_msi+0x97e>
    8001392c:	0003d797          	auipc	a5,0x3d
    80013930:	6e57c783          	lbu	a5,1765(a5) # 80051011 <excpt+0x1>
    80013934:	4401                	li	s0,0
    80013936:	16079e63          	bnez	a5,80013ab2 <software_interrupt_msi+0xaf6>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=1，且mip.MSIP=0，mie.MSIE=1，无代理
    TEST_SETUP_EXCEPT();
    8001393a:	c38ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001393e:	4511                	li	a0,4
    80013940:	d2eed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 3);   
    80013944:	30046073          	csrsi	mstatus,8
    CSRS(CSR_MIE,MIE_MSIE);
    80013948:	30446073          	csrsi	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    8001394c:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,1);
    80013950:	3030d073          	csrwi	mideleg,1
    CSRW(CSR_HIDELEG,0);
    80013954:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    80013958:	4509                	li	a0,2
    8001395a:	d14ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    8001395e:	08200593          	li	a1,130
    80013962:	0001e617          	auipc	a2,0x1e
    80013966:	38660613          	addi	a2,a2,902 # 80031ce8 <__func__.0+0x4cc8>
    8001396a:	0001a517          	auipc	a0,0x1a
    8001396e:	9ae50513          	addi	a0,a0,-1618 # 8002d318 <__func__.0+0x2f8>
    80013972:	448170ef          	jal	8002adba <printf>
    80013976:	0003d797          	auipc	a5,0x3d
    8001397a:	69b7c783          	lbu	a5,1691(a5) # 80051011 <excpt+0x1>
    8001397e:	0001a597          	auipc	a1,0x1a
    80013982:	97258593          	addi	a1,a1,-1678 # 8002d2f0 <__func__.0+0x2d0>
    80013986:	c799                	beqz	a5,80013994 <software_interrupt_msi+0x9d8>
    80013988:	57fd                	li	a5,-1
    8001398a:	6498                	ld	a4,8(s1)
    8001398c:	17fe                	slli	a5,a5,0x3f
    8001398e:	0789                	addi	a5,a5,2
    80013990:	42f70a63          	beq	a4,a5,80013dc4 <software_interrupt_msi+0xe08>
    80013994:	0001a517          	auipc	a0,0x1a
    80013998:	99c50513          	addi	a0,a0,-1636 # 8002d330 <__func__.0+0x310>
    8001399c:	41e170ef          	jal	8002adba <printf>
    800139a0:	0003d797          	auipc	a5,0x3d
    800139a4:	6717c783          	lbu	a5,1649(a5) # 80051011 <excpt+0x1>
    800139a8:	c799                	beqz	a5,800139b6 <software_interrupt_msi+0x9fa>
    800139aa:	57fd                	li	a5,-1
    800139ac:	6498                	ld	a4,8(s1)
    800139ae:	17fe                	slli	a5,a5,0x3f
    800139b0:	0789                	addi	a5,a5,2
    800139b2:	20f70563          	beq	a4,a5,80013bbc <software_interrupt_msi+0xc00>
    800139b6:	0001a517          	auipc	a0,0x1a
    800139ba:	98250513          	addi	a0,a0,-1662 # 8002d338 <__func__.0+0x318>
    800139be:	3fc170ef          	jal	8002adba <printf>
    800139c2:	02900513          	li	a0,41
    800139c6:	0e2160ef          	jal	80029aa8 <putchar>
    800139ca:	4529                	li	a0,10
    800139cc:	0dc160ef          	jal	80029aa8 <putchar>
    800139d0:	c419                	beqz	s0,800139de <software_interrupt_msi+0xa22>
    800139d2:	0003d797          	auipc	a5,0x3d
    800139d6:	63f7c783          	lbu	a5,1599(a5) # 80051011 <excpt+0x1>
    800139da:	4401                	li	s0,0
    800139dc:	efcd                	bnez	a5,80013a96 <software_interrupt_msi+0xada>
        excpt.cause == CAUSE_MSI &&
        excpt.priv == PRIV_HS
    ); 

    //VS模式下产生高特权级别软件中断，mstatus.mie=0，且mip.MSIP，mie.MSIE为任意值，无代理
    TEST_SETUP_EXCEPT();
    800139de:	b94ed0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800139e2:	4511                	li	a0,4
    800139e4:	c8aed0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS,1ULL << 3);   
    800139e8:	30047073          	csrci	mstatus,8
    CSRC(CSR_MIE,MIE_MSIE);
    800139ec:	30447073          	csrci	mie,8
    CSRC(CSR_MIP,MIP_MSIP);
    800139f0:	34447073          	csrci	mip,8
    CSRW(CSR_MIDELEG,0);
    800139f4:	30305073          	csrwi	mideleg,0
    CSRW(CSR_HIDELEG,0);
    800139f8:	60305073          	csrwi	hideleg,0

    goto_priv(PRIV_VS);
    800139fc:	4509                	li	a0,2
    800139fe:	c70ed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013a02:	08200593          	li	a1,130
    80013a06:	0001e617          	auipc	a2,0x1e
    80013a0a:	35260613          	addi	a2,a2,850 # 80031d58 <__func__.0+0x4d38>
    80013a0e:	0001a517          	auipc	a0,0x1a
    80013a12:	90a50513          	addi	a0,a0,-1782 # 8002d318 <__func__.0+0x2f8>
    80013a16:	3a4170ef          	jal	8002adba <printf>
    80013a1a:	0003d797          	auipc	a5,0x3d
    80013a1e:	5f77c783          	lbu	a5,1527(a5) # 80051011 <excpt+0x1>
    80013a22:	0001a597          	auipc	a1,0x1a
    80013a26:	8ce58593          	addi	a1,a1,-1842 # 8002d2f0 <__func__.0+0x2d0>
    80013a2a:	e789                	bnez	a5,80013a34 <software_interrupt_msi+0xa78>
    80013a2c:	0001a597          	auipc	a1,0x1a
    80013a30:	8b458593          	addi	a1,a1,-1868 # 8002d2e0 <__func__.0+0x2c0>
    80013a34:	0001a517          	auipc	a0,0x1a
    80013a38:	8fc50513          	addi	a0,a0,-1796 # 8002d330 <__func__.0+0x310>
    80013a3c:	37e170ef          	jal	8002adba <printf>
    80013a40:	0003d797          	auipc	a5,0x3d
    80013a44:	5d17c783          	lbu	a5,1489(a5) # 80051011 <excpt+0x1>
    80013a48:	20079f63          	bnez	a5,80013c66 <software_interrupt_msi+0xcaa>
    80013a4c:	4529                	li	a0,10
    80013a4e:	05a160ef          	jal	80029aa8 <putchar>
    80013a52:	c411                	beqz	s0,80013a5e <software_interrupt_msi+0xaa2>
    80013a54:	0003d797          	auipc	a5,0x3d
    80013a58:	5bd7c783          	lbu	a5,1469(a5) # 80051011 <excpt+0x1>
    80013a5c:	c79d                	beqz	a5,80013a8a <software_interrupt_msi+0xace>
    80013a5e:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80013a60:	0001a597          	auipc	a1,0x1a
    80013a64:	89058593          	addi	a1,a1,-1904 # 8002d2f0 <__func__.0+0x2d0>
    80013a68:	0001a517          	auipc	a0,0x1a
    80013a6c:	93050513          	addi	a0,a0,-1744 # 8002d398 <__func__.0+0x378>
    80013a70:	34a170ef          	jal	8002adba <printf>
    80013a74:	4511                	li	a0,4
    80013a76:	bf8ed0ef          	jal	80000e6e <goto_priv>
    80013a7a:	d11ed0ef          	jal	8000178a <reset_state>
}
    80013a7e:	60e2                	ld	ra,24(sp)
    80013a80:	8522                	mv	a0,s0
    80013a82:	6442                	ld	s0,16(sp)
    80013a84:	64a2                	ld	s1,8(sp)
    80013a86:	6105                	addi	sp,sp,32
    80013a88:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013a8a:	4405                	li	s0,1
    TEST_END();
    80013a8c:	0001a597          	auipc	a1,0x1a
    80013a90:	85458593          	addi	a1,a1,-1964 # 8002d2e0 <__func__.0+0x2c0>
    80013a94:	bfd1                	j	80013a68 <software_interrupt_msi+0xaac>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013a96:	57fd                	li	a5,-1
    80013a98:	6498                	ld	a4,8(s1)
    80013a9a:	17fe                	slli	a5,a5,0x3f
    80013a9c:	0789                	addi	a5,a5,2
    80013a9e:	f4f710e3          	bne	a4,a5,800139de <software_interrupt_msi+0xa22>
    80013aa2:	0003d417          	auipc	s0,0x3d
    80013aa6:	57242403          	lw	s0,1394(s0) # 80051014 <excpt+0x4>
    80013aaa:	1475                	addi	s0,s0,-3
    80013aac:	00143413          	seqz	s0,s0
    80013ab0:	b73d                	j	800139de <software_interrupt_msi+0xa22>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013ab2:	57fd                	li	a5,-1
    80013ab4:	6498                	ld	a4,8(s1)
    80013ab6:	17fe                	slli	a5,a5,0x3f
    80013ab8:	0789                	addi	a5,a5,2
    80013aba:	e8f710e3          	bne	a4,a5,8001393a <software_interrupt_msi+0x97e>
    80013abe:	0003d417          	auipc	s0,0x3d
    80013ac2:	55642403          	lw	s0,1366(s0) # 80051014 <excpt+0x4>
    80013ac6:	1471                	addi	s0,s0,-4
    80013ac8:	00143413          	seqz	s0,s0
    80013acc:	b5bd                	j	8001393a <software_interrupt_msi+0x97e>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013ace:	57fd                	li	a5,-1
    80013ad0:	6498                	ld	a4,8(s1)
    80013ad2:	17fe                	slli	a5,a5,0x3f
    80013ad4:	0789                	addi	a5,a5,2
    80013ad6:	d2f71ee3          	bne	a4,a5,80013812 <software_interrupt_msi+0x856>
    80013ada:	0003d417          	auipc	s0,0x3d
    80013ade:	53a42403          	lw	s0,1338(s0) # 80051014 <excpt+0x4>
    80013ae2:	1475                	addi	s0,s0,-3
    80013ae4:	00143413          	seqz	s0,s0
    80013ae8:	b32d                	j	80013812 <software_interrupt_msi+0x856>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013aea:	57fd                	li	a5,-1
    80013aec:	6498                	ld	a4,8(s1)
    80013aee:	17fe                	slli	a5,a5,0x3f
    80013af0:	0789                	addi	a5,a5,2
    80013af2:	c6f71ce3          	bne	a4,a5,8001376a <software_interrupt_msi+0x7ae>
    80013af6:	0003d417          	auipc	s0,0x3d
    80013afa:	51e42403          	lw	s0,1310(s0) # 80051014 <excpt+0x4>
    80013afe:	1471                	addi	s0,s0,-4
    80013b00:	00143413          	seqz	s0,s0
    80013b04:	b19d                	j	8001376a <software_interrupt_msi+0x7ae>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013b06:	57fd                	li	a5,-1
    80013b08:	6498                	ld	a4,8(s1)
    80013b0a:	17fe                	slli	a5,a5,0x3f
    80013b0c:	0789                	addi	a5,a5,2
    80013b0e:	b2f71ae3          	bne	a4,a5,80013642 <software_interrupt_msi+0x686>
    80013b12:	0003d417          	auipc	s0,0x3d
    80013b16:	50242403          	lw	s0,1282(s0) # 80051014 <excpt+0x4>
    80013b1a:	1475                	addi	s0,s0,-3
    80013b1c:	00143413          	seqz	s0,s0
    80013b20:	b60d                	j	80013642 <software_interrupt_msi+0x686>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013b22:	57fd                	li	a5,-1
    80013b24:	6498                	ld	a4,8(s1)
    80013b26:	17fe                	slli	a5,a5,0x3f
    80013b28:	0789                	addi	a5,a5,2
    80013b2a:	a6f719e3          	bne	a4,a5,8001359c <software_interrupt_msi+0x5e0>
    80013b2e:	0003d417          	auipc	s0,0x3d
    80013b32:	4e642403          	lw	s0,1254(s0) # 80051014 <excpt+0x4>
    80013b36:	1471                	addi	s0,s0,-4
    80013b38:	00143413          	seqz	s0,s0
    80013b3c:	b485                	j	8001359c <software_interrupt_msi+0x5e0>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013b3e:	57fd                	li	a5,-1
    80013b40:	6498                	ld	a4,8(s1)
    80013b42:	17fe                	slli	a5,a5,0x3f
    80013b44:	0789                	addi	a5,a5,2
    80013b46:	92f717e3          	bne	a4,a5,80013474 <software_interrupt_msi+0x4b8>
    80013b4a:	0003d417          	auipc	s0,0x3d
    80013b4e:	4ca42403          	lw	s0,1226(s0) # 80051014 <excpt+0x4>
    80013b52:	1475                	addi	s0,s0,-3
    80013b54:	00143413          	seqz	s0,s0
    80013b58:	91dff06f          	j	80013474 <software_interrupt_msi+0x4b8>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013b5c:	57fd                	li	a5,-1
    80013b5e:	6498                	ld	a4,8(s1)
    80013b60:	17fe                	slli	a5,a5,0x3f
    80013b62:	0789                	addi	a5,a5,2
    80013b64:	86f714e3          	bne	a4,a5,800133cc <software_interrupt_msi+0x410>
    80013b68:	0003d417          	auipc	s0,0x3d
    80013b6c:	4ac42403          	lw	s0,1196(s0) # 80051014 <excpt+0x4>
    80013b70:	1471                	addi	s0,s0,-4
    80013b72:	00143413          	seqz	s0,s0
    80013b76:	857ff06f          	j	800133cc <software_interrupt_msi+0x410>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1",
    80013b7a:	6480                	ld	s0,8(s1)
    80013b7c:	57f5                	li	a5,-3
    80013b7e:	8385                	srli	a5,a5,0x1
    80013b80:	943e                	add	s0,s0,a5
    80013b82:	00143413          	seqz	s0,s0
    80013b86:	e32ff06f          	j	800131b8 <software_interrupt_msi+0x1fc>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013b8a:	0003d717          	auipc	a4,0x3d
    80013b8e:	48a72703          	lw	a4,1162(a4) # 80051014 <excpt+0x4>
    80013b92:	4791                	li	a5,4
    80013b94:	d6f71ee3          	bne	a4,a5,80013910 <software_interrupt_msi+0x954>
    80013b98:	b371                	j	80013924 <software_interrupt_msi+0x968>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013b9a:	0003d717          	auipc	a4,0x3d
    80013b9e:	47a72703          	lw	a4,1146(a4) # 80051014 <excpt+0x4>
    80013ba2:	4791                	li	a5,4
    80013ba4:	caf71d63          	bne	a4,a5,8001305e <software_interrupt_msi+0xa2>
    80013ba8:	ccaff06f          	j	80013072 <software_interrupt_msi+0xb6>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013bac:	0003d717          	auipc	a4,0x3d
    80013bb0:	46872703          	lw	a4,1128(a4) # 80051014 <excpt+0x4>
    80013bb4:	478d                	li	a5,3
    80013bb6:	c2f719e3          	bne	a4,a5,800137e8 <software_interrupt_msi+0x82c>
    80013bba:	b189                	j	800137fc <software_interrupt_msi+0x840>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013bbc:	0003d717          	auipc	a4,0x3d
    80013bc0:	45872703          	lw	a4,1112(a4) # 80051014 <excpt+0x4>
    80013bc4:	478d                	li	a5,3
    80013bc6:	def718e3          	bne	a4,a5,800139b6 <software_interrupt_msi+0x9fa>
    80013bca:	b501                	j	800139ca <software_interrupt_msi+0xa0e>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013bcc:	0003d717          	auipc	a4,0x3d
    80013bd0:	44872703          	lw	a4,1096(a4) # 80051014 <excpt+0x4>
    80013bd4:	478d                	li	a5,3
    80013bd6:	86f71ae3          	bne	a4,a5,8001344a <software_interrupt_msi+0x48e>
    80013bda:	885ff06f          	j	8001345e <software_interrupt_msi+0x4a2>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013bde:	0003d717          	auipc	a4,0x3d
    80013be2:	43672703          	lw	a4,1078(a4) # 80051014 <excpt+0x4>
    80013be6:	4791                	li	a5,4
    80013be8:	faf71d63          	bne	a4,a5,800133a2 <software_interrupt_msi+0x3e6>
    80013bec:	fcaff06f          	j	800133b6 <software_interrupt_msi+0x3fa>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013bf0:	0003d717          	auipc	a4,0x3d
    80013bf4:	42472703          	lw	a4,1060(a4) # 80051014 <excpt+0x4>
    80013bf8:	4791                	li	a5,4
    80013bfa:	b4f713e3          	bne	a4,a5,80013740 <software_interrupt_msi+0x784>
    80013bfe:	be99                	j	80013754 <software_interrupt_msi+0x798>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013c00:	0003d717          	auipc	a4,0x3d
    80013c04:	41472703          	lw	a4,1044(a4) # 80051014 <excpt+0x4>
    80013c08:	4791                	li	a5,4
    80013c0a:	96f714e3          	bne	a4,a5,80013572 <software_interrupt_msi+0x5b6>
    80013c0e:	baa5                	j	80013586 <software_interrupt_msi+0x5ca>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013c10:	0003d717          	auipc	a4,0x3d
    80013c14:	40472703          	lw	a4,1028(a4) # 80051014 <excpt+0x4>
    80013c18:	478d                	li	a5,3
    80013c1a:	9ef71fe3          	bne	a4,a5,80013618 <software_interrupt_msi+0x65c>
    80013c1e:	b439                	j	8001362c <software_interrupt_msi+0x670>
    TEST_ASSERT("m mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0",
    80013c20:	00019517          	auipc	a0,0x19
    80013c24:	71850513          	addi	a0,a0,1816 # 8002d338 <__func__.0+0x318>
    80013c28:	192170ef          	jal	8002adba <printf>
    80013c2c:	02900513          	li	a0,41
    80013c30:	679150ef          	jal	80029aa8 <putchar>
    80013c34:	cc2ff06f          	j	800130f6 <software_interrupt_msi+0x13a>
    TEST_ASSERT("VS mode leads to  interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013c38:	00019517          	auipc	a0,0x19
    80013c3c:	70050513          	addi	a0,a0,1792 # 8002d338 <__func__.0+0x318>
    80013c40:	17a170ef          	jal	8002adba <printf>
    80013c44:	02900513          	li	a0,41
    80013c48:	661150ef          	jal	80029aa8 <putchar>
    80013c4c:	b915                	j	80013880 <software_interrupt_msi+0x8c4>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=1",
    80013c4e:	00019517          	auipc	a0,0x19
    80013c52:	6ea50513          	addi	a0,a0,1770 # 8002d338 <__func__.0+0x318>
    80013c56:	164170ef          	jal	8002adba <printf>
    80013c5a:	02900513          	li	a0,41
    80013c5e:	64b150ef          	jal	80029aa8 <putchar>
    80013c62:	dbcff06f          	j	8001321e <software_interrupt_msi+0x262>
    TEST_ASSERT("VS mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013c66:	00019517          	auipc	a0,0x19
    80013c6a:	6d250513          	addi	a0,a0,1746 # 8002d338 <__func__.0+0x318>
    80013c6e:	14c170ef          	jal	8002adba <printf>
    80013c72:	02900513          	li	a0,41
    80013c76:	633150ef          	jal	80029aa8 <putchar>
    80013c7a:	bbc9                	j	80013a4c <software_interrupt_msi+0xa90>
    TEST_ASSERT("hs mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0 and mideleg=0",
    80013c7c:	00019517          	auipc	a0,0x19
    80013c80:	6bc50513          	addi	a0,a0,1724 # 8002d338 <__func__.0+0x318>
    80013c84:	136170ef          	jal	8002adba <printf>
    80013c88:	02900513          	li	a0,41
    80013c8c:	61d150ef          	jal	80029aa8 <putchar>
    80013c90:	b405                	j	800136b0 <software_interrupt_msi+0x6f4>
    TEST_ASSERT("hs mode leads to interrupt pending when mstatus.mie=1 and mip.msip=1 and mie.msie=0 and mideleg=1",
    80013c92:	00019517          	auipc	a0,0x19
    80013c96:	6a650513          	addi	a0,a0,1702 # 8002d338 <__func__.0+0x318>
    80013c9a:	120170ef          	jal	8002adba <printf>
    80013c9e:	02900513          	li	a0,41
    80013ca2:	607150ef          	jal	80029aa8 <putchar>
    80013ca6:	83dff06f          	j	800134e2 <software_interrupt_msi+0x526>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=0 and mie.msie=0",
    80013caa:	00019517          	auipc	a0,0x19
    80013cae:	68e50513          	addi	a0,a0,1678 # 8002d338 <__func__.0+0x318>
    80013cb2:	108170ef          	jal	8002adba <printf>
    80013cb6:	02900513          	li	a0,41
    80013cba:	5ef150ef          	jal	80029aa8 <putchar>
    80013cbe:	e54ff06f          	j	80013312 <software_interrupt_msi+0x356>
    TEST_ASSERT("m mode leads to no interrupt when mstatus.mie=0 and mip.msip=1 and mie.msie=0",
    80013cc2:	00019517          	auipc	a0,0x19
    80013cc6:	67650513          	addi	a0,a0,1654 # 8002d338 <__func__.0+0x318>
    80013cca:	0f0170ef          	jal	8002adba <printf>
    80013cce:	02900513          	li	a0,41
    80013cd2:	5d7150ef          	jal	80029aa8 <putchar>
    80013cd6:	dc2ff06f          	j	80013298 <software_interrupt_msi+0x2dc>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1",
    80013cda:	0003d717          	auipc	a4,0x3d
    80013cde:	33a72703          	lw	a4,826(a4) # 80051014 <excpt+0x4>
    80013ce2:	478d                	li	a5,3
    80013ce4:	00019597          	auipc	a1,0x19
    80013ce8:	5fc58593          	addi	a1,a1,1532 # 8002d2e0 <__func__.0+0x2c0>
    80013cec:	90f705e3          	beq	a4,a5,800135f6 <software_interrupt_msi+0x63a>
    80013cf0:	00019597          	auipc	a1,0x19
    80013cf4:	60058593          	addi	a1,a1,1536 # 8002d2f0 <__func__.0+0x2d0>
    80013cf8:	8ffff06f          	j	800135f6 <software_interrupt_msi+0x63a>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013cfc:	0003d717          	auipc	a4,0x3d
    80013d00:	31872703          	lw	a4,792(a4) # 80051014 <excpt+0x4>
    80013d04:	4791                	li	a5,4
    80013d06:	00019597          	auipc	a1,0x19
    80013d0a:	5da58593          	addi	a1,a1,1498 # 8002d2e0 <__func__.0+0x2c0>
    80013d0e:	bef700e3          	beq	a4,a5,800138ee <software_interrupt_msi+0x932>
    80013d12:	00019597          	auipc	a1,0x19
    80013d16:	5de58593          	addi	a1,a1,1502 # 8002d2f0 <__func__.0+0x2d0>
    80013d1a:	bed1                	j	800138ee <software_interrupt_msi+0x932>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013d1c:	0003d717          	auipc	a4,0x3d
    80013d20:	2f872703          	lw	a4,760(a4) # 80051014 <excpt+0x4>
    80013d24:	4791                	li	a5,4
    80013d26:	00019597          	auipc	a1,0x19
    80013d2a:	5ba58593          	addi	a1,a1,1466 # 8002d2e0 <__func__.0+0x2c0>
    80013d2e:	b0f70763          	beq	a4,a5,8001303c <software_interrupt_msi+0x80>
    80013d32:	00019597          	auipc	a1,0x19
    80013d36:	5be58593          	addi	a1,a1,1470 # 8002d2f0 <__func__.0+0x2d0>
    80013d3a:	b02ff06f          	j	8001303c <software_interrupt_msi+0x80>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=0",
    80013d3e:	0003d717          	auipc	a4,0x3d
    80013d42:	2d672703          	lw	a4,726(a4) # 80051014 <excpt+0x4>
    80013d46:	4791                	li	a5,4
    80013d48:	00019597          	auipc	a1,0x19
    80013d4c:	59858593          	addi	a1,a1,1432 # 8002d2e0 <__func__.0+0x2c0>
    80013d50:	80f700e3          	beq	a4,a5,80013550 <software_interrupt_msi+0x594>
    80013d54:	00019597          	auipc	a1,0x19
    80013d58:	59c58593          	addi	a1,a1,1436 # 8002d2f0 <__func__.0+0x2d0>
    80013d5c:	ff4ff06f          	j	80013550 <software_interrupt_msi+0x594>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013d60:	0003d717          	auipc	a4,0x3d
    80013d64:	2b472703          	lw	a4,692(a4) # 80051014 <excpt+0x4>
    80013d68:	4791                	li	a5,4
    80013d6a:	00019597          	auipc	a1,0x19
    80013d6e:	57658593          	addi	a1,a1,1398 # 8002d2e0 <__func__.0+0x2c0>
    80013d72:	9af706e3          	beq	a4,a5,8001371e <software_interrupt_msi+0x762>
    80013d76:	00019597          	auipc	a1,0x19
    80013d7a:	57a58593          	addi	a1,a1,1402 # 8002d2f0 <__func__.0+0x2d0>
    80013d7e:	b245                	j	8001371e <software_interrupt_msi+0x762>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013d80:	0003d717          	auipc	a4,0x3d
    80013d84:	29472703          	lw	a4,660(a4) # 80051014 <excpt+0x4>
    80013d88:	4791                	li	a5,4
    80013d8a:	00019597          	auipc	a1,0x19
    80013d8e:	55658593          	addi	a1,a1,1366 # 8002d2e0 <__func__.0+0x2c0>
    80013d92:	def70763          	beq	a4,a5,80013380 <software_interrupt_msi+0x3c4>
    80013d96:	00019597          	auipc	a1,0x19
    80013d9a:	55a58593          	addi	a1,a1,1370 # 8002d2f0 <__func__.0+0x2d0>
    80013d9e:	de2ff06f          	j	80013380 <software_interrupt_msi+0x3c4>
    TEST_ASSERT("hs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013da2:	0003d717          	auipc	a4,0x3d
    80013da6:	27272703          	lw	a4,626(a4) # 80051014 <excpt+0x4>
    80013daa:	478d                	li	a5,3
    80013dac:	00019597          	auipc	a1,0x19
    80013db0:	53458593          	addi	a1,a1,1332 # 8002d2e0 <__func__.0+0x2c0>
    80013db4:	e6f70a63          	beq	a4,a5,80013428 <software_interrupt_msi+0x46c>
    80013db8:	00019597          	auipc	a1,0x19
    80013dbc:	53858593          	addi	a1,a1,1336 # 8002d2f0 <__func__.0+0x2d0>
    80013dc0:	e68ff06f          	j	80013428 <software_interrupt_msi+0x46c>
    TEST_ASSERT("VS mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=0 and mie.msie=1 and mideleg=1 and",
    80013dc4:	0003d717          	auipc	a4,0x3d
    80013dc8:	25072703          	lw	a4,592(a4) # 80051014 <excpt+0x4>
    80013dcc:	478d                	li	a5,3
    80013dce:	00019597          	auipc	a1,0x19
    80013dd2:	51258593          	addi	a1,a1,1298 # 8002d2e0 <__func__.0+0x2c0>
    80013dd6:	baf70fe3          	beq	a4,a5,80013994 <software_interrupt_msi+0x9d8>
    80013dda:	00019597          	auipc	a1,0x19
    80013dde:	51658593          	addi	a1,a1,1302 # 8002d2f0 <__func__.0+0x2d0>
    80013de2:	be4d                	j	80013994 <software_interrupt_msi+0x9d8>
    TEST_ASSERT("vs mode leads to m level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1 and mideleg=1",
    80013de4:	0003d717          	auipc	a4,0x3d
    80013de8:	23072703          	lw	a4,560(a4) # 80051014 <excpt+0x4>
    80013dec:	478d                	li	a5,3
    80013dee:	00019597          	auipc	a1,0x19
    80013df2:	4f258593          	addi	a1,a1,1266 # 8002d2e0 <__func__.0+0x2c0>
    80013df6:	9cf708e3          	beq	a4,a5,800137c6 <software_interrupt_msi+0x80a>
    80013dfa:	00019597          	auipc	a1,0x19
    80013dfe:	4f658593          	addi	a1,a1,1270 # 8002d2f0 <__func__.0+0x2d0>
    80013e02:	b2d1                	j	800137c6 <software_interrupt_msi+0x80a>
    TEST_ASSERT("m mode leads to M level software interrupt when mstatus.mie=1 and mip.msip=1 and mie.msie=1",
    80013e04:	0003d417          	auipc	s0,0x3d
    80013e08:	21042403          	lw	s0,528(s0) # 80051014 <excpt+0x4>
    80013e0c:	1471                	addi	s0,s0,-4
    80013e0e:	00143413          	seqz	s0,s0
    80013e12:	a7eff06f          	j	80013090 <software_interrupt_msi+0xd4>

0000000080013e16 <software_interrupt_ssi>:



bool software_interrupt_ssi() {
    80013e16:	1101                	addi	sp,sp,-32

    TEST_START();
    80013e18:	00018597          	auipc	a1,0x18
    80013e1c:	d9058593          	addi	a1,a1,-624 # 8002bba8 <__func__.1>
    80013e20:	00019517          	auipc	a0,0x19
    80013e24:	4e050513          	addi	a0,a0,1248 # 8002d300 <__func__.0+0x2e0>
bool software_interrupt_ssi() {
    80013e28:	ec06                	sd	ra,24(sp)
    80013e2a:	e822                	sd	s0,16(sp)
    80013e2c:	e426                	sd	s1,8(sp)
    TEST_START();
    80013e2e:	78d160ef          	jal	8002adba <printf>
    80013e32:	4529                	li	a0,10
    80013e34:	475150ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    80013e38:	f3bec0ef          	jal	80000d72 <test_setup_except_function>

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    goto_priv(PRIV_M);
    80013e3c:	4511                	li	a0,4
    80013e3e:	830ed0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80013e42:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80013e46:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80013e4a:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013e4e:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013e52:	450d                	li	a0,3
    80013e54:	81aed0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80013e58:	08200593          	li	a1,130
    80013e5c:	0001e617          	auipc	a2,0x1e
    80013e60:	f5c60613          	addi	a2,a2,-164 # 80031db8 <__func__.0+0x4d98>
    80013e64:	00019517          	auipc	a0,0x19
    80013e68:	4b450513          	addi	a0,a0,1204 # 8002d318 <__func__.0+0x2f8>
    80013e6c:	74f160ef          	jal	8002adba <printf>
    80013e70:	0003d797          	auipc	a5,0x3d
    80013e74:	1a17c783          	lbu	a5,417(a5) # 80051011 <excpt+0x1>
    80013e78:	0003d497          	auipc	s1,0x3d
    80013e7c:	19848493          	addi	s1,s1,408 # 80051010 <excpt>
    80013e80:	00019597          	auipc	a1,0x19
    80013e84:	47058593          	addi	a1,a1,1136 # 8002d2f0 <__func__.0+0x2d0>
    80013e88:	c799                	beqz	a5,80013e96 <software_interrupt_ssi+0x80>
    80013e8a:	57fd                	li	a5,-1
    80013e8c:	6498                	ld	a4,8(s1)
    80013e8e:	17fe                	slli	a5,a5,0x3f
    80013e90:	0785                	addi	a5,a5,1
    80013e92:	26f706e3          	beq	a4,a5,800148fe <software_interrupt_ssi+0xae8>
    80013e96:	00019517          	auipc	a0,0x19
    80013e9a:	49a50513          	addi	a0,a0,1178 # 8002d330 <__func__.0+0x310>
    80013e9e:	71d160ef          	jal	8002adba <printf>
    80013ea2:	0003d797          	auipc	a5,0x3d
    80013ea6:	16f7c783          	lbu	a5,367(a5) # 80051011 <excpt+0x1>
    80013eaa:	c799                	beqz	a5,80013eb8 <software_interrupt_ssi+0xa2>
    80013eac:	57fd                	li	a5,-1
    80013eae:	6498                	ld	a4,8(s1)
    80013eb0:	17fe                	slli	a5,a5,0x3f
    80013eb2:	0785                	addi	a5,a5,1
    80013eb4:	08f70de3          	beq	a4,a5,8001474e <software_interrupt_ssi+0x938>
    80013eb8:	00019517          	auipc	a0,0x19
    80013ebc:	48050513          	addi	a0,a0,1152 # 8002d338 <__func__.0+0x318>
    80013ec0:	6fb160ef          	jal	8002adba <printf>
    80013ec4:	02900513          	li	a0,41
    80013ec8:	3e1150ef          	jal	80029aa8 <putchar>
    80013ecc:	4529                	li	a0,10
    80013ece:	3db150ef          	jal	80029aa8 <putchar>
    80013ed2:	0003d797          	auipc	a5,0x3d
    80013ed6:	13f7c783          	lbu	a5,319(a5) # 80051011 <excpt+0x1>
    80013eda:	4401                	li	s0,0
    80013edc:	c799                	beqz	a5,80013eea <software_interrupt_ssi+0xd4>
    80013ede:	57fd                	li	a5,-1
    80013ee0:	6498                	ld	a4,8(s1)
    80013ee2:	17fe                	slli	a5,a5,0x3f
    80013ee4:	0785                	addi	a5,a5,1
    80013ee6:	18f701e3          	beq	a4,a5,80014868 <software_interrupt_ssi+0xa52>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //HS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    80013eea:	e89ec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013eee:	4511                	li	a0,4
    80013ef0:	f7fec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80013ef4:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    80013ef8:	57fd                	li	a5,-1
    80013efa:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    80013efe:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80013f02:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013f06:	450d                	li	a0,3
    80013f08:	f67ec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80013f0c:	08200593          	li	a1,130
    80013f10:	0001e617          	auipc	a2,0x1e
    80013f14:	f1860613          	addi	a2,a2,-232 # 80031e28 <__func__.0+0x4e08>
    80013f18:	00019517          	auipc	a0,0x19
    80013f1c:	40050513          	addi	a0,a0,1024 # 8002d318 <__func__.0+0x2f8>
    80013f20:	69b160ef          	jal	8002adba <printf>
    80013f24:	0003d797          	auipc	a5,0x3d
    80013f28:	0ed7c783          	lbu	a5,237(a5) # 80051011 <excpt+0x1>
    80013f2c:	00019597          	auipc	a1,0x19
    80013f30:	3c458593          	addi	a1,a1,964 # 8002d2f0 <__func__.0+0x2d0>
    80013f34:	c799                	beqz	a5,80013f42 <software_interrupt_ssi+0x12c>
    80013f36:	57fd                	li	a5,-1
    80013f38:	6498                	ld	a4,8(s1)
    80013f3a:	17fe                	slli	a5,a5,0x3f
    80013f3c:	0785                	addi	a5,a5,1
    80013f3e:	12f70ee3          	beq	a4,a5,8001487a <software_interrupt_ssi+0xa64>
    80013f42:	00019517          	auipc	a0,0x19
    80013f46:	3ee50513          	addi	a0,a0,1006 # 8002d330 <__func__.0+0x310>
    80013f4a:	671160ef          	jal	8002adba <printf>
    80013f4e:	0003d797          	auipc	a5,0x3d
    80013f52:	0c37c783          	lbu	a5,195(a5) # 80051011 <excpt+0x1>
    80013f56:	c799                	beqz	a5,80013f64 <software_interrupt_ssi+0x14e>
    80013f58:	57fd                	li	a5,-1
    80013f5a:	6498                	ld	a4,8(s1)
    80013f5c:	17fe                	slli	a5,a5,0x3f
    80013f5e:	0785                	addi	a5,a5,1
    80013f60:	7cf70e63          	beq	a4,a5,8001473c <software_interrupt_ssi+0x926>
    80013f64:	00019517          	auipc	a0,0x19
    80013f68:	3d450513          	addi	a0,a0,980 # 8002d338 <__func__.0+0x318>
    80013f6c:	64f160ef          	jal	8002adba <printf>
    80013f70:	02900513          	li	a0,41
    80013f74:	335150ef          	jal	80029aa8 <putchar>
    80013f78:	4529                	li	a0,10
    80013f7a:	32f150ef          	jal	80029aa8 <putchar>
    80013f7e:	c801                	beqz	s0,80013f8e <software_interrupt_ssi+0x178>
    80013f80:	0003d797          	auipc	a5,0x3d
    80013f84:	0917c783          	lbu	a5,145(a5) # 80051011 <excpt+0x1>
    80013f88:	4401                	li	s0,0
    80013f8a:	78079a63          	bnez	a5,8001471e <software_interrupt_ssi+0x908>
        excpt.priv == PRIV_HS
    ); 


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    80013f8e:	de5ec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80013f92:	4511                	li	a0,4
    80013f94:	edbec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80013f98:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    80013f9c:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    80013fa0:	14416073          	csrsi	sip,2

    goto_priv(PRIV_HS);
    80013fa4:	450d                	li	a0,3
    80013fa6:	ec9ec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    80013faa:	08200593          	li	a1,130
    80013fae:	0001e617          	auipc	a2,0x1e
    80013fb2:	eea60613          	addi	a2,a2,-278 # 80031e98 <__func__.0+0x4e78>
    80013fb6:	00019517          	auipc	a0,0x19
    80013fba:	36250513          	addi	a0,a0,866 # 8002d318 <__func__.0+0x2f8>
    80013fbe:	5fd160ef          	jal	8002adba <printf>
    80013fc2:	0003d797          	auipc	a5,0x3d
    80013fc6:	04f7c783          	lbu	a5,79(a5) # 80051011 <excpt+0x1>
    80013fca:	00019597          	auipc	a1,0x19
    80013fce:	32658593          	addi	a1,a1,806 # 8002d2f0 <__func__.0+0x2d0>
    80013fd2:	e789                	bnez	a5,80013fdc <software_interrupt_ssi+0x1c6>
    80013fd4:	00019597          	auipc	a1,0x19
    80013fd8:	30c58593          	addi	a1,a1,780 # 8002d2e0 <__func__.0+0x2c0>
    80013fdc:	00019517          	auipc	a0,0x19
    80013fe0:	35450513          	addi	a0,a0,852 # 8002d330 <__func__.0+0x310>
    80013fe4:	5d7160ef          	jal	8002adba <printf>
    80013fe8:	0003d797          	auipc	a5,0x3d
    80013fec:	0297c783          	lbu	a5,41(a5) # 80051011 <excpt+0x1>
    80013ff0:	7e079463          	bnez	a5,800147d8 <software_interrupt_ssi+0x9c2>
    80013ff4:	4529                	li	a0,10
    80013ff6:	2b3150ef          	jal	80029aa8 <putchar>
    80013ffa:	c419                	beqz	s0,80014008 <software_interrupt_ssi+0x1f2>
    80013ffc:	0003d417          	auipc	s0,0x3d
    80014000:	01544403          	lbu	s0,21(s0) # 80051011 <excpt+0x1>
    80014004:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    80014008:	d6bec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001400c:	4511                	li	a0,4
    8001400e:	e61ec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014012:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    80014016:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    8001401a:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001401e:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014022:	450d                	li	a0,3
    80014024:	e4bec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014028:	08200593          	li	a1,130
    8001402c:	0001e617          	auipc	a2,0x1e
    80014030:	ec460613          	addi	a2,a2,-316 # 80031ef0 <__func__.0+0x4ed0>
    80014034:	00019517          	auipc	a0,0x19
    80014038:	2e450513          	addi	a0,a0,740 # 8002d318 <__func__.0+0x2f8>
    8001403c:	57f160ef          	jal	8002adba <printf>
    80014040:	0003d797          	auipc	a5,0x3d
    80014044:	fd17c783          	lbu	a5,-47(a5) # 80051011 <excpt+0x1>
    80014048:	00019597          	auipc	a1,0x19
    8001404c:	2a858593          	addi	a1,a1,680 # 8002d2f0 <__func__.0+0x2d0>
    80014050:	c799                	beqz	a5,8001405e <software_interrupt_ssi+0x248>
    80014052:	57fd                	li	a5,-1
    80014054:	6498                	ld	a4,8(s1)
    80014056:	17fe                	slli	a5,a5,0x3f
    80014058:	0785                	addi	a5,a5,1
    8001405a:	04f701e3          	beq	a4,a5,8001489c <software_interrupt_ssi+0xa86>
    8001405e:	00019517          	auipc	a0,0x19
    80014062:	2d250513          	addi	a0,a0,722 # 8002d330 <__func__.0+0x310>
    80014066:	555160ef          	jal	8002adba <printf>
    8001406a:	0003d797          	auipc	a5,0x3d
    8001406e:	fa77c783          	lbu	a5,-89(a5) # 80051011 <excpt+0x1>
    80014072:	c799                	beqz	a5,80014080 <software_interrupt_ssi+0x26a>
    80014074:	57fd                	li	a5,-1
    80014076:	6498                	ld	a4,8(s1)
    80014078:	17fe                	slli	a5,a5,0x3f
    8001407a:	0785                	addi	a5,a5,1
    8001407c:	70f70a63          	beq	a4,a5,80014790 <software_interrupt_ssi+0x97a>
    80014080:	00019517          	auipc	a0,0x19
    80014084:	2b850513          	addi	a0,a0,696 # 8002d338 <__func__.0+0x318>
    80014088:	533160ef          	jal	8002adba <printf>
    8001408c:	02900513          	li	a0,41
    80014090:	219150ef          	jal	80029aa8 <putchar>
    80014094:	4529                	li	a0,10
    80014096:	213150ef          	jal	80029aa8 <putchar>
    8001409a:	c801                	beqz	s0,800140aa <software_interrupt_ssi+0x294>
    8001409c:	0003d797          	auipc	a5,0x3d
    800140a0:	f757c783          	lbu	a5,-139(a5) # 80051011 <excpt+0x1>
    800140a4:	4401                	li	s0,0
    800140a6:	64079e63          	bnez	a5,80014702 <software_interrupt_ssi+0x8ec>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    800140aa:	cc9ec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800140ae:	4511                	li	a0,4
    800140b0:	dbfec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800140b4:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800140b8:	57fd                	li	a5,-1
    800140ba:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800140be:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800140c2:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800140c6:	450d                	li	a0,3
    800140c8:	da7ec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800140cc:	08200593          	li	a1,130
    800140d0:	0001e617          	auipc	a2,0x1e
    800140d4:	e9060613          	addi	a2,a2,-368 # 80031f60 <__func__.0+0x4f40>
    800140d8:	00019517          	auipc	a0,0x19
    800140dc:	24050513          	addi	a0,a0,576 # 8002d318 <__func__.0+0x2f8>
    800140e0:	4db160ef          	jal	8002adba <printf>
    800140e4:	0003d797          	auipc	a5,0x3d
    800140e8:	f2d7c783          	lbu	a5,-211(a5) # 80051011 <excpt+0x1>
    800140ec:	00019597          	auipc	a1,0x19
    800140f0:	20458593          	addi	a1,a1,516 # 8002d2f0 <__func__.0+0x2d0>
    800140f4:	c799                	beqz	a5,80014102 <software_interrupt_ssi+0x2ec>
    800140f6:	57fd                	li	a5,-1
    800140f8:	6498                	ld	a4,8(s1)
    800140fa:	17fe                	slli	a5,a5,0x3f
    800140fc:	0785                	addi	a5,a5,1
    800140fe:	02f701e3          	beq	a4,a5,80014920 <software_interrupt_ssi+0xb0a>
    80014102:	00019517          	auipc	a0,0x19
    80014106:	22e50513          	addi	a0,a0,558 # 8002d330 <__func__.0+0x310>
    8001410a:	4b1160ef          	jal	8002adba <printf>
    8001410e:	0003d797          	auipc	a5,0x3d
    80014112:	f037c783          	lbu	a5,-253(a5) # 80051011 <excpt+0x1>
    80014116:	c799                	beqz	a5,80014124 <software_interrupt_ssi+0x30e>
    80014118:	57fd                	li	a5,-1
    8001411a:	6498                	ld	a4,8(s1)
    8001411c:	17fe                	slli	a5,a5,0x3f
    8001411e:	0785                	addi	a5,a5,1
    80014120:	68f70163          	beq	a4,a5,800147a2 <software_interrupt_ssi+0x98c>
    80014124:	00019517          	auipc	a0,0x19
    80014128:	21450513          	addi	a0,a0,532 # 8002d338 <__func__.0+0x318>
    8001412c:	48f160ef          	jal	8002adba <printf>
    80014130:	02900513          	li	a0,41
    80014134:	175150ef          	jal	80029aa8 <putchar>
    80014138:	4529                	li	a0,10
    8001413a:	16f150ef          	jal	80029aa8 <putchar>
    8001413e:	c801                	beqz	s0,8001414e <software_interrupt_ssi+0x338>
    80014140:	0003d797          	auipc	a5,0x3d
    80014144:	ed17c783          	lbu	a5,-303(a5) # 80051011 <excpt+0x1>
    80014148:	4401                	li	s0,0
    8001414a:	58079e63          	bnez	a5,800146e6 <software_interrupt_ssi+0x8d0>
        excpt.priv == PRIV_HS
    );


    //HS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001414e:	c25ec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80014152:	4511                	li	a0,4
    80014154:	d1bec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014158:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001415c:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    80014160:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    80014164:	450d                	li	a0,3
    80014166:	d09ec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    8001416a:	08200593          	li	a1,130
    8001416e:	0001e617          	auipc	a2,0x1e
    80014172:	e5260613          	addi	a2,a2,-430 # 80031fc0 <__func__.0+0x4fa0>
    80014176:	00019517          	auipc	a0,0x19
    8001417a:	1a250513          	addi	a0,a0,418 # 8002d318 <__func__.0+0x2f8>
    8001417e:	43d160ef          	jal	8002adba <printf>
    80014182:	0003d797          	auipc	a5,0x3d
    80014186:	e8f7c783          	lbu	a5,-369(a5) # 80051011 <excpt+0x1>
    8001418a:	00019597          	auipc	a1,0x19
    8001418e:	16658593          	addi	a1,a1,358 # 8002d2f0 <__func__.0+0x2d0>
    80014192:	e789                	bnez	a5,8001419c <software_interrupt_ssi+0x386>
    80014194:	00019597          	auipc	a1,0x19
    80014198:	14c58593          	addi	a1,a1,332 # 8002d2e0 <__func__.0+0x2c0>
    8001419c:	00019517          	auipc	a0,0x19
    800141a0:	19450513          	addi	a0,a0,404 # 8002d330 <__func__.0+0x310>
    800141a4:	417160ef          	jal	8002adba <printf>
    800141a8:	0003d797          	auipc	a5,0x3d
    800141ac:	e697c783          	lbu	a5,-407(a5) # 80051011 <excpt+0x1>
    800141b0:	64079b63          	bnez	a5,80014806 <software_interrupt_ssi+0x9f0>
    800141b4:	4529                	li	a0,10
    800141b6:	0f3150ef          	jal	80029aa8 <putchar>
    800141ba:	c419                	beqz	s0,800141c8 <software_interrupt_ssi+0x3b2>
    800141bc:	0003d417          	auipc	s0,0x3d
    800141c0:	e5544403          	lbu	s0,-427(s0) # 80051011 <excpt+0x1>
    800141c4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //HS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800141c8:	babec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800141cc:	4511                	li	a0,4
    800141ce:	ca1ec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800141d2:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800141d6:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800141da:	14417073          	csrci	sip,2

    goto_priv(PRIV_HS);
    800141de:	450d                	li	a0,3
    800141e0:	c8fec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800141e4:	08200593          	li	a1,130
    800141e8:	0001e617          	auipc	a2,0x1e
    800141ec:	e2860613          	addi	a2,a2,-472 # 80032010 <__func__.0+0x4ff0>
    800141f0:	00019517          	auipc	a0,0x19
    800141f4:	12850513          	addi	a0,a0,296 # 8002d318 <__func__.0+0x2f8>
    800141f8:	3c3160ef          	jal	8002adba <printf>
    800141fc:	0003d797          	auipc	a5,0x3d
    80014200:	e157c783          	lbu	a5,-491(a5) # 80051011 <excpt+0x1>
    80014204:	00019597          	auipc	a1,0x19
    80014208:	0ec58593          	addi	a1,a1,236 # 8002d2f0 <__func__.0+0x2d0>
    8001420c:	e789                	bnez	a5,80014216 <software_interrupt_ssi+0x400>
    8001420e:	00019597          	auipc	a1,0x19
    80014212:	0d258593          	addi	a1,a1,210 # 8002d2e0 <__func__.0+0x2c0>
    80014216:	00019517          	auipc	a0,0x19
    8001421a:	11a50513          	addi	a0,a0,282 # 8002d330 <__func__.0+0x310>
    8001421e:	39d160ef          	jal	8002adba <printf>
    80014222:	0003d797          	auipc	a5,0x3d
    80014226:	def7c783          	lbu	a5,-529(a5) # 80051011 <excpt+0x1>
    8001422a:	5c079363          	bnez	a5,800147f0 <software_interrupt_ssi+0x9da>
    8001422e:	4529                	li	a0,10
    80014230:	079150ef          	jal	80029aa8 <putchar>
    80014234:	c419                	beqz	s0,80014242 <software_interrupt_ssi+0x42c>
    80014236:	0003d417          	auipc	s0,0x3d
    8001423a:	ddb44403          	lbu	s0,-549(s0) # 80051011 <excpt+0x1>
    8001423e:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

//VS-mode下

    TEST_SETUP_EXCEPT();
    80014242:	b31ec0ef          	jal	80000d72 <test_setup_except_function>
    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSIE拉高
    TEST_SETUP_EXCEPT();
    80014246:	b2dec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001424a:	4511                	li	a0,4
    8001424c:	c23ec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);    
    80014250:	10016073          	csrsi	sstatus,2
    CSRS(CSR_SIE,SIE_SSIE);
    80014254:	10416073          	csrsi	sie,2
    CSRW(CSR_MIDELEG,0);
    80014258:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    8001425c:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80014260:	4509                	li	a0,2
    80014262:	c0dec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014266:	08200593          	li	a1,130
    8001426a:	0001e617          	auipc	a2,0x1e
    8001426e:	df660613          	addi	a2,a2,-522 # 80032060 <__func__.0+0x5040>
    80014272:	00019517          	auipc	a0,0x19
    80014276:	0a650513          	addi	a0,a0,166 # 8002d318 <__func__.0+0x2f8>
    8001427a:	341160ef          	jal	8002adba <printf>
    8001427e:	0003d797          	auipc	a5,0x3d
    80014282:	d937c783          	lbu	a5,-621(a5) # 80051011 <excpt+0x1>
    80014286:	00019597          	auipc	a1,0x19
    8001428a:	06a58593          	addi	a1,a1,106 # 8002d2f0 <__func__.0+0x2d0>
    8001428e:	c799                	beqz	a5,8001429c <software_interrupt_ssi+0x486>
    80014290:	57fd                	li	a5,-1
    80014292:	6498                	ld	a4,8(s1)
    80014294:	17fe                	slli	a5,a5,0x3f
    80014296:	0785                	addi	a5,a5,1
    80014298:	6af70563          	beq	a4,a5,80014942 <software_interrupt_ssi+0xb2c>
    8001429c:	00019517          	auipc	a0,0x19
    800142a0:	09450513          	addi	a0,a0,148 # 8002d330 <__func__.0+0x310>
    800142a4:	317160ef          	jal	8002adba <printf>
    800142a8:	0003d797          	auipc	a5,0x3d
    800142ac:	d697c783          	lbu	a5,-663(a5) # 80051011 <excpt+0x1>
    800142b0:	c799                	beqz	a5,800142be <software_interrupt_ssi+0x4a8>
    800142b2:	57fd                	li	a5,-1
    800142b4:	6498                	ld	a4,8(s1)
    800142b6:	17fe                	slli	a5,a5,0x3f
    800142b8:	0785                	addi	a5,a5,1
    800142ba:	4af70363          	beq	a4,a5,80014760 <software_interrupt_ssi+0x94a>
    800142be:	00019517          	auipc	a0,0x19
    800142c2:	07a50513          	addi	a0,a0,122 # 8002d338 <__func__.0+0x318>
    800142c6:	2f5160ef          	jal	8002adba <printf>
    800142ca:	02900513          	li	a0,41
    800142ce:	7da150ef          	jal	80029aa8 <putchar>
    800142d2:	4529                	li	a0,10
    800142d4:	7d4150ef          	jal	80029aa8 <putchar>
    800142d8:	c801                	beqz	s0,800142e8 <software_interrupt_ssi+0x4d2>
    800142da:	0003d797          	auipc	a5,0x3d
    800142de:	d377c783          	lbu	a5,-713(a5) # 80051011 <excpt+0x1>
    800142e2:	4401                	li	s0,0
    800142e4:	3e079363          	bnez	a5,800146ca <software_interrupt_ssi+0x8b4>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    ); 

    //VS模式下产生软件中断，sstatus.sie=1，且sip，sie对应的SSIP、SSE拉高，有代理
    TEST_SETUP_EXCEPT();
    800142e8:	a8bec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800142ec:	4511                	li	a0,4
    800142ee:	b81ec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800142f2:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800142f6:	57fd                	li	a5,-1
    800142f8:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800142fc:	10416073          	csrsi	sie,2
    CSRS(CSR_SIP,SIP_SSIP);     //read-only
    80014300:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    80014304:	4509                	li	a0,2
    80014306:	b69ec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001430a:	08200593          	li	a1,130
    8001430e:	0001e617          	auipc	a2,0x1e
    80014312:	dc260613          	addi	a2,a2,-574 # 800320d0 <__func__.0+0x50b0>
    80014316:	00019517          	auipc	a0,0x19
    8001431a:	00250513          	addi	a0,a0,2 # 8002d318 <__func__.0+0x2f8>
    8001431e:	29d160ef          	jal	8002adba <printf>
    80014322:	0003d797          	auipc	a5,0x3d
    80014326:	cef7c783          	lbu	a5,-785(a5) # 80051011 <excpt+0x1>
    8001432a:	00019597          	auipc	a1,0x19
    8001432e:	fc658593          	addi	a1,a1,-58 # 8002d2f0 <__func__.0+0x2d0>
    80014332:	c799                	beqz	a5,80014340 <software_interrupt_ssi+0x52a>
    80014334:	57fd                	li	a5,-1
    80014336:	6498                	ld	a4,8(s1)
    80014338:	17fe                	slli	a5,a5,0x3f
    8001433a:	0785                	addi	a5,a5,1
    8001433c:	5af70163          	beq	a4,a5,800148de <software_interrupt_ssi+0xac8>
    80014340:	00019517          	auipc	a0,0x19
    80014344:	ff050513          	addi	a0,a0,-16 # 8002d330 <__func__.0+0x310>
    80014348:	273160ef          	jal	8002adba <printf>
    8001434c:	0003d797          	auipc	a5,0x3d
    80014350:	cc57c783          	lbu	a5,-827(a5) # 80051011 <excpt+0x1>
    80014354:	c799                	beqz	a5,80014362 <software_interrupt_ssi+0x54c>
    80014356:	57fd                	li	a5,-1
    80014358:	6498                	ld	a4,8(s1)
    8001435a:	17fe                	slli	a5,a5,0x3f
    8001435c:	0785                	addi	a5,a5,1
    8001435e:	40f70963          	beq	a4,a5,80014770 <software_interrupt_ssi+0x95a>
    80014362:	00019517          	auipc	a0,0x19
    80014366:	fd650513          	addi	a0,a0,-42 # 8002d338 <__func__.0+0x318>
    8001436a:	251160ef          	jal	8002adba <printf>
    8001436e:	02900513          	li	a0,41
    80014372:	736150ef          	jal	80029aa8 <putchar>
    80014376:	4529                	li	a0,10
    80014378:	730150ef          	jal	80029aa8 <putchar>
    8001437c:	c801                	beqz	s0,8001438c <software_interrupt_ssi+0x576>
    8001437e:	0003d797          	auipc	a5,0x3d
    80014382:	c937c783          	lbu	a5,-877(a5) # 80051011 <excpt+0x1>
    80014386:	4401                	li	s0,0
    80014388:	32079363          	bnez	a5,800146ae <software_interrupt_ssi+0x898>
        excpt.priv == PRIV_HS
    ); 


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=1，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001438c:	9e7ec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80014390:	4511                	li	a0,4
    80014392:	addec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014396:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001439a:	10417073          	csrci	sie,2
    CSRS(CSR_SIP,SIP_SSIP);    
    8001439e:	14416073          	csrsi	sip,2

    goto_priv(PRIV_VS);
    800143a2:	4509                	li	a0,2
    800143a4:	acbec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    800143a8:	08200593          	li	a1,130
    800143ac:	0001e617          	auipc	a2,0x1e
    800143b0:	d9460613          	addi	a2,a2,-620 # 80032140 <__func__.0+0x5120>
    800143b4:	00019517          	auipc	a0,0x19
    800143b8:	f6450513          	addi	a0,a0,-156 # 8002d318 <__func__.0+0x2f8>
    800143bc:	1ff160ef          	jal	8002adba <printf>
    800143c0:	0003d797          	auipc	a5,0x3d
    800143c4:	c517c783          	lbu	a5,-943(a5) # 80051011 <excpt+0x1>
    800143c8:	00019597          	auipc	a1,0x19
    800143cc:	f2858593          	addi	a1,a1,-216 # 8002d2f0 <__func__.0+0x2d0>
    800143d0:	e789                	bnez	a5,800143da <software_interrupt_ssi+0x5c4>
    800143d2:	00019597          	auipc	a1,0x19
    800143d6:	f0e58593          	addi	a1,a1,-242 # 8002d2e0 <__func__.0+0x2c0>
    800143da:	00019517          	auipc	a0,0x19
    800143de:	f5650513          	addi	a0,a0,-170 # 8002d330 <__func__.0+0x310>
    800143e2:	1d9160ef          	jal	8002adba <printf>
    800143e6:	0003d797          	auipc	a5,0x3d
    800143ea:	c2b7c783          	lbu	a5,-981(a5) # 80051011 <excpt+0x1>
    800143ee:	3c079a63          	bnez	a5,800147c2 <software_interrupt_ssi+0x9ac>
    800143f2:	4529                	li	a0,10
    800143f4:	6b4150ef          	jal	80029aa8 <putchar>
    800143f8:	c419                	beqz	s0,80014406 <software_interrupt_ssi+0x5f0>
    800143fa:	0003d417          	auipc	s0,0x3d
    800143fe:	c1744403          	lbu	s0,-1001(s0) # 80051011 <excpt+0x1>
    80014402:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1
    TEST_SETUP_EXCEPT();
    80014406:	96dec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001440a:	4511                	li	a0,4
    8001440c:	a63ec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014410:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,0);  
    80014414:	30305073          	csrwi	mideleg,0
    CSRS(CSR_SIE,SIE_SSIE);
    80014418:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001441c:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014420:	4509                	li	a0,2
    80014422:	a4dec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014426:	08200593          	li	a1,130
    8001442a:	0001e617          	auipc	a2,0x1e
    8001442e:	d6e60613          	addi	a2,a2,-658 # 80032198 <__func__.0+0x5178>
    80014432:	00019517          	auipc	a0,0x19
    80014436:	ee650513          	addi	a0,a0,-282 # 8002d318 <__func__.0+0x2f8>
    8001443a:	181160ef          	jal	8002adba <printf>
    8001443e:	0003d797          	auipc	a5,0x3d
    80014442:	bd37c783          	lbu	a5,-1069(a5) # 80051011 <excpt+0x1>
    80014446:	00019597          	auipc	a1,0x19
    8001444a:	eaa58593          	addi	a1,a1,-342 # 8002d2f0 <__func__.0+0x2d0>
    8001444e:	c799                	beqz	a5,8001445c <software_interrupt_ssi+0x646>
    80014450:	57fd                	li	a5,-1
    80014452:	6498                	ld	a4,8(s1)
    80014454:	17fe                	slli	a5,a5,0x3f
    80014456:	0785                	addi	a5,a5,1
    80014458:	3ef70863          	beq	a4,a5,80014848 <software_interrupt_ssi+0xa32>
    8001445c:	00019517          	auipc	a0,0x19
    80014460:	ed450513          	addi	a0,a0,-300 # 8002d330 <__func__.0+0x310>
    80014464:	157160ef          	jal	8002adba <printf>
    80014468:	0003d797          	auipc	a5,0x3d
    8001446c:	ba97c783          	lbu	a5,-1111(a5) # 80051011 <excpt+0x1>
    80014470:	c799                	beqz	a5,8001447e <software_interrupt_ssi+0x668>
    80014472:	57fd                	li	a5,-1
    80014474:	6498                	ld	a4,8(s1)
    80014476:	17fe                	slli	a5,a5,0x3f
    80014478:	0785                	addi	a5,a5,1
    8001447a:	32f70c63          	beq	a4,a5,800147b2 <software_interrupt_ssi+0x99c>
    8001447e:	00019517          	auipc	a0,0x19
    80014482:	eba50513          	addi	a0,a0,-326 # 8002d338 <__func__.0+0x318>
    80014486:	135160ef          	jal	8002adba <printf>
    8001448a:	02900513          	li	a0,41
    8001448e:	61a150ef          	jal	80029aa8 <putchar>
    80014492:	4529                	li	a0,10
    80014494:	614150ef          	jal	80029aa8 <putchar>
    80014498:	c801                	beqz	s0,800144a8 <software_interrupt_ssi+0x692>
    8001449a:	0003d797          	auipc	a5,0x3d
    8001449e:	b777c783          	lbu	a5,-1161(a5) # 80051011 <excpt+0x1>
    800144a2:	4401                	li	s0,0
    800144a4:	1e079763          	bnez	a5,80014692 <software_interrupt_ssi+0x87c>
        excpt.cause == CAUSE_SSI &&
        excpt.priv == PRIV_M
    );

    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=1，有代理
    TEST_SETUP_EXCEPT();
    800144a8:	8cbec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800144ac:	4511                	li	a0,4
    800144ae:	9c1ec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800144b2:	10016073          	csrsi	sstatus,2
    CSRW(CSR_MIDELEG,(uint64_t)-1);  
    800144b6:	57fd                	li	a5,-1
    800144b8:	30379073          	csrw	mideleg,a5
    CSRS(CSR_SIE,SIE_SSIE);
    800144bc:	10416073          	csrsi	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800144c0:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800144c4:	4509                	li	a0,2
    800144c6:	9a9ec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800144ca:	08200593          	li	a1,130
    800144ce:	0001e617          	auipc	a2,0x1e
    800144d2:	d3a60613          	addi	a2,a2,-710 # 80032208 <__func__.0+0x51e8>
    800144d6:	00019517          	auipc	a0,0x19
    800144da:	e4250513          	addi	a0,a0,-446 # 8002d318 <__func__.0+0x2f8>
    800144de:	0dd160ef          	jal	8002adba <printf>
    800144e2:	0003d797          	auipc	a5,0x3d
    800144e6:	b2f7c783          	lbu	a5,-1233(a5) # 80051011 <excpt+0x1>
    800144ea:	00019597          	auipc	a1,0x19
    800144ee:	e0658593          	addi	a1,a1,-506 # 8002d2f0 <__func__.0+0x2d0>
    800144f2:	c799                	beqz	a5,80014500 <software_interrupt_ssi+0x6ea>
    800144f4:	57fd                	li	a5,-1
    800144f6:	6498                	ld	a4,8(s1)
    800144f8:	17fe                	slli	a5,a5,0x3f
    800144fa:	0785                	addi	a5,a5,1
    800144fc:	3cf70163          	beq	a4,a5,800148be <software_interrupt_ssi+0xaa8>
    80014500:	00019517          	auipc	a0,0x19
    80014504:	e3050513          	addi	a0,a0,-464 # 8002d330 <__func__.0+0x310>
    80014508:	0b3160ef          	jal	8002adba <printf>
    8001450c:	0003d797          	auipc	a5,0x3d
    80014510:	b057c783          	lbu	a5,-1275(a5) # 80051011 <excpt+0x1>
    80014514:	c799                	beqz	a5,80014522 <software_interrupt_ssi+0x70c>
    80014516:	57fd                	li	a5,-1
    80014518:	6498                	ld	a4,8(s1)
    8001451a:	17fe                	slli	a5,a5,0x3f
    8001451c:	0785                	addi	a5,a5,1
    8001451e:	26f70163          	beq	a4,a5,80014780 <software_interrupt_ssi+0x96a>
    80014522:	00019517          	auipc	a0,0x19
    80014526:	e1650513          	addi	a0,a0,-490 # 8002d338 <__func__.0+0x318>
    8001452a:	091160ef          	jal	8002adba <printf>
    8001452e:	02900513          	li	a0,41
    80014532:	576150ef          	jal	80029aa8 <putchar>
    80014536:	4529                	li	a0,10
    80014538:	570150ef          	jal	80029aa8 <putchar>
    8001453c:	c801                	beqz	s0,8001454c <software_interrupt_ssi+0x736>
    8001453e:	0003d797          	auipc	a5,0x3d
    80014542:	ad37c783          	lbu	a5,-1325(a5) # 80051011 <excpt+0x1>
    80014546:	4401                	li	s0,0
    80014548:	12079763          	bnez	a5,80014676 <software_interrupt_ssi+0x860>
        excpt.priv == PRIV_HS
    );


    //VS模式下产生软件中断，sstatus.sie=1，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    8001454c:	827ec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    80014550:	4511                	li	a0,4
    80014552:	91dec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    80014556:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    8001455a:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    8001455e:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    80014562:	4509                	li	a0,2
    80014564:	90bec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80014568:	08200593          	li	a1,130
    8001456c:	0001e617          	auipc	a2,0x1e
    80014570:	cfc60613          	addi	a2,a2,-772 # 80032268 <__func__.0+0x5248>
    80014574:	00019517          	auipc	a0,0x19
    80014578:	da450513          	addi	a0,a0,-604 # 8002d318 <__func__.0+0x2f8>
    8001457c:	03f160ef          	jal	8002adba <printf>
    80014580:	0003d797          	auipc	a5,0x3d
    80014584:	a917c783          	lbu	a5,-1391(a5) # 80051011 <excpt+0x1>
    80014588:	00019597          	auipc	a1,0x19
    8001458c:	d6858593          	addi	a1,a1,-664 # 8002d2f0 <__func__.0+0x2d0>
    80014590:	e789                	bnez	a5,8001459a <software_interrupt_ssi+0x784>
    80014592:	00019597          	auipc	a1,0x19
    80014596:	d4e58593          	addi	a1,a1,-690 # 8002d2e0 <__func__.0+0x2c0>
    8001459a:	00019517          	auipc	a0,0x19
    8001459e:	d9650513          	addi	a0,a0,-618 # 8002d330 <__func__.0+0x310>
    800145a2:	019160ef          	jal	8002adba <printf>
    800145a6:	0003d797          	auipc	a5,0x3d
    800145aa:	a6b7c783          	lbu	a5,-1429(a5) # 80051011 <excpt+0x1>
    800145ae:	28079263          	bnez	a5,80014832 <software_interrupt_ssi+0xa1c>
    800145b2:	4529                	li	a0,10
    800145b4:	4f4150ef          	jal	80029aa8 <putchar>
    800145b8:	c419                	beqz	s0,800145c6 <software_interrupt_ssi+0x7b0>
    800145ba:	0003d417          	auipc	s0,0x3d
    800145be:	a5744403          	lbu	s0,-1449(s0) # 80051011 <excpt+0x1>
    800145c2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    //VS模式下产生软件中断，sstatus.sie=0，且sip.SSIP=0，sie.SSIE=0
    TEST_SETUP_EXCEPT();
    800145c6:	facec0ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    800145ca:	4511                	li	a0,4
    800145cc:	8a3ec0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SSTATUS,SSTATUS_SIE_BIT);  
    800145d0:	10016073          	csrsi	sstatus,2
    CSRC(CSR_SIE,SIE_SSIE);
    800145d4:	10417073          	csrci	sie,2
    CSRC(CSR_SIP,SIP_SSIP);    
    800145d8:	14417073          	csrci	sip,2

    goto_priv(PRIV_VS);
    800145dc:	4509                	li	a0,2
    800145de:	891ec0ef          	jal	80000e6e <goto_priv>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800145e2:	08200593          	li	a1,130
    800145e6:	0001e617          	auipc	a2,0x1e
    800145ea:	cd260613          	addi	a2,a2,-814 # 800322b8 <__func__.0+0x5298>
    800145ee:	00019517          	auipc	a0,0x19
    800145f2:	d2a50513          	addi	a0,a0,-726 # 8002d318 <__func__.0+0x2f8>
    800145f6:	7c4160ef          	jal	8002adba <printf>
    800145fa:	0003d797          	auipc	a5,0x3d
    800145fe:	a177c783          	lbu	a5,-1513(a5) # 80051011 <excpt+0x1>
    80014602:	00019597          	auipc	a1,0x19
    80014606:	cee58593          	addi	a1,a1,-786 # 8002d2f0 <__func__.0+0x2d0>
    8001460a:	e789                	bnez	a5,80014614 <software_interrupt_ssi+0x7fe>
    8001460c:	00019597          	auipc	a1,0x19
    80014610:	cd458593          	addi	a1,a1,-812 # 8002d2e0 <__func__.0+0x2c0>
    80014614:	00019517          	auipc	a0,0x19
    80014618:	d1c50513          	addi	a0,a0,-740 # 8002d330 <__func__.0+0x310>
    8001461c:	79e160ef          	jal	8002adba <printf>
    80014620:	0003d797          	auipc	a5,0x3d
    80014624:	9f17c783          	lbu	a5,-1551(a5) # 80051011 <excpt+0x1>
    80014628:	1e079a63          	bnez	a5,8001481c <software_interrupt_ssi+0xa06>
    8001462c:	4529                	li	a0,10
    8001462e:	47a150ef          	jal	80029aa8 <putchar>
    80014632:	c411                	beqz	s0,8001463e <software_interrupt_ssi+0x828>
    80014634:	0003d797          	auipc	a5,0x3d
    80014638:	9dd7c783          	lbu	a5,-1571(a5) # 80051011 <excpt+0x1>
    8001463c:	c79d                	beqz	a5,8001466a <software_interrupt_ssi+0x854>
    8001463e:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80014640:	00019597          	auipc	a1,0x19
    80014644:	cb058593          	addi	a1,a1,-848 # 8002d2f0 <__func__.0+0x2d0>
    80014648:	00019517          	auipc	a0,0x19
    8001464c:	d5050513          	addi	a0,a0,-688 # 8002d398 <__func__.0+0x378>
    80014650:	76a160ef          	jal	8002adba <printf>
    80014654:	4511                	li	a0,4
    80014656:	819ec0ef          	jal	80000e6e <goto_priv>
    8001465a:	930ed0ef          	jal	8000178a <reset_state>
}
    8001465e:	60e2                	ld	ra,24(sp)
    80014660:	8522                	mv	a0,s0
    80014662:	6442                	ld	s0,16(sp)
    80014664:	64a2                	ld	s1,8(sp)
    80014666:	6105                	addi	sp,sp,32
    80014668:	8082                	ret
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001466a:	4405                	li	s0,1
    TEST_END();
    8001466c:	00019597          	auipc	a1,0x19
    80014670:	c7458593          	addi	a1,a1,-908 # 8002d2e0 <__func__.0+0x2c0>
    80014674:	bfd1                	j	80014648 <software_interrupt_ssi+0x832>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014676:	57fd                	li	a5,-1
    80014678:	6498                	ld	a4,8(s1)
    8001467a:	17fe                	slli	a5,a5,0x3f
    8001467c:	0785                	addi	a5,a5,1
    8001467e:	ecf717e3          	bne	a4,a5,8001454c <software_interrupt_ssi+0x736>
    80014682:	0003d417          	auipc	s0,0x3d
    80014686:	99242403          	lw	s0,-1646(s0) # 80051014 <excpt+0x4>
    8001468a:	1475                	addi	s0,s0,-3
    8001468c:	00143413          	seqz	s0,s0
    80014690:	bd75                	j	8001454c <software_interrupt_ssi+0x736>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014692:	57fd                	li	a5,-1
    80014694:	6498                	ld	a4,8(s1)
    80014696:	17fe                	slli	a5,a5,0x3f
    80014698:	0785                	addi	a5,a5,1
    8001469a:	e0f717e3          	bne	a4,a5,800144a8 <software_interrupt_ssi+0x692>
    8001469e:	0003d417          	auipc	s0,0x3d
    800146a2:	97642403          	lw	s0,-1674(s0) # 80051014 <excpt+0x4>
    800146a6:	1471                	addi	s0,s0,-4
    800146a8:	00143413          	seqz	s0,s0
    800146ac:	bbf5                	j	800144a8 <software_interrupt_ssi+0x692>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800146ae:	57fd                	li	a5,-1
    800146b0:	6498                	ld	a4,8(s1)
    800146b2:	17fe                	slli	a5,a5,0x3f
    800146b4:	0785                	addi	a5,a5,1
    800146b6:	ccf71be3          	bne	a4,a5,8001438c <software_interrupt_ssi+0x576>
    800146ba:	0003d417          	auipc	s0,0x3d
    800146be:	95a42403          	lw	s0,-1702(s0) # 80051014 <excpt+0x4>
    800146c2:	1475                	addi	s0,s0,-3
    800146c4:	00143413          	seqz	s0,s0
    800146c8:	b1d1                	j	8001438c <software_interrupt_ssi+0x576>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800146ca:	57fd                	li	a5,-1
    800146cc:	6498                	ld	a4,8(s1)
    800146ce:	17fe                	slli	a5,a5,0x3f
    800146d0:	0785                	addi	a5,a5,1
    800146d2:	c0f71be3          	bne	a4,a5,800142e8 <software_interrupt_ssi+0x4d2>
    800146d6:	0003d417          	auipc	s0,0x3d
    800146da:	93e42403          	lw	s0,-1730(s0) # 80051014 <excpt+0x4>
    800146de:	1471                	addi	s0,s0,-4
    800146e0:	00143413          	seqz	s0,s0
    800146e4:	b111                	j	800142e8 <software_interrupt_ssi+0x4d2>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800146e6:	57fd                	li	a5,-1
    800146e8:	6498                	ld	a4,8(s1)
    800146ea:	17fe                	slli	a5,a5,0x3f
    800146ec:	0785                	addi	a5,a5,1
    800146ee:	a6f710e3          	bne	a4,a5,8001414e <software_interrupt_ssi+0x338>
    800146f2:	0003d417          	auipc	s0,0x3d
    800146f6:	92242403          	lw	s0,-1758(s0) # 80051014 <excpt+0x4>
    800146fa:	1475                	addi	s0,s0,-3
    800146fc:	00143413          	seqz	s0,s0
    80014700:	b4b9                	j	8001414e <software_interrupt_ssi+0x338>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014702:	57fd                	li	a5,-1
    80014704:	6498                	ld	a4,8(s1)
    80014706:	17fe                	slli	a5,a5,0x3f
    80014708:	0785                	addi	a5,a5,1
    8001470a:	9af710e3          	bne	a4,a5,800140aa <software_interrupt_ssi+0x294>
    8001470e:	0003d417          	auipc	s0,0x3d
    80014712:	90642403          	lw	s0,-1786(s0) # 80051014 <excpt+0x4>
    80014716:	1471                	addi	s0,s0,-4
    80014718:	00143413          	seqz	s0,s0
    8001471c:	b279                	j	800140aa <software_interrupt_ssi+0x294>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001471e:	57fd                	li	a5,-1
    80014720:	6498                	ld	a4,8(s1)
    80014722:	17fe                	slli	a5,a5,0x3f
    80014724:	0785                	addi	a5,a5,1
    80014726:	86f714e3          	bne	a4,a5,80013f8e <software_interrupt_ssi+0x178>
    8001472a:	0003d417          	auipc	s0,0x3d
    8001472e:	8ea42403          	lw	s0,-1814(s0) # 80051014 <excpt+0x4>
    80014732:	1475                	addi	s0,s0,-3
    80014734:	00143413          	seqz	s0,s0
    80014738:	857ff06f          	j	80013f8e <software_interrupt_ssi+0x178>
    8001473c:	0003d717          	auipc	a4,0x3d
    80014740:	8d872703          	lw	a4,-1832(a4) # 80051014 <excpt+0x4>
    80014744:	478d                	li	a5,3
    80014746:	80f71fe3          	bne	a4,a5,80013f64 <software_interrupt_ssi+0x14e>
    8001474a:	82fff06f          	j	80013f78 <software_interrupt_ssi+0x162>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    8001474e:	0003d717          	auipc	a4,0x3d
    80014752:	8c672703          	lw	a4,-1850(a4) # 80051014 <excpt+0x4>
    80014756:	4791                	li	a5,4
    80014758:	f6f71063          	bne	a4,a5,80013eb8 <software_interrupt_ssi+0xa2>
    8001475c:	f70ff06f          	j	80013ecc <software_interrupt_ssi+0xb6>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014760:	0003d717          	auipc	a4,0x3d
    80014764:	8b472703          	lw	a4,-1868(a4) # 80051014 <excpt+0x4>
    80014768:	4791                	li	a5,4
    8001476a:	b4f71ae3          	bne	a4,a5,800142be <software_interrupt_ssi+0x4a8>
    8001476e:	b695                	j	800142d2 <software_interrupt_ssi+0x4bc>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    80014770:	0003d717          	auipc	a4,0x3d
    80014774:	8a472703          	lw	a4,-1884(a4) # 80051014 <excpt+0x4>
    80014778:	478d                	li	a5,3
    8001477a:	bef714e3          	bne	a4,a5,80014362 <software_interrupt_ssi+0x54c>
    8001477e:	bee5                	j	80014376 <software_interrupt_ssi+0x560>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014780:	0003d717          	auipc	a4,0x3d
    80014784:	89472703          	lw	a4,-1900(a4) # 80051014 <excpt+0x4>
    80014788:	478d                	li	a5,3
    8001478a:	d8f71ce3          	bne	a4,a5,80014522 <software_interrupt_ssi+0x70c>
    8001478e:	b365                	j	80014536 <software_interrupt_ssi+0x720>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014790:	0003d717          	auipc	a4,0x3d
    80014794:	88472703          	lw	a4,-1916(a4) # 80051014 <excpt+0x4>
    80014798:	4791                	li	a5,4
    8001479a:	8ef713e3          	bne	a4,a5,80014080 <software_interrupt_ssi+0x26a>
    8001479e:	8f7ff06f          	j	80014094 <software_interrupt_ssi+0x27e>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800147a2:	0003d717          	auipc	a4,0x3d
    800147a6:	87272703          	lw	a4,-1934(a4) # 80051014 <excpt+0x4>
    800147aa:	478d                	li	a5,3
    800147ac:	96f71ce3          	bne	a4,a5,80014124 <software_interrupt_ssi+0x30e>
    800147b0:	b261                	j	80014138 <software_interrupt_ssi+0x322>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    800147b2:	0003d717          	auipc	a4,0x3d
    800147b6:	86272703          	lw	a4,-1950(a4) # 80051014 <excpt+0x4>
    800147ba:	4791                	li	a5,4
    800147bc:	ccf711e3          	bne	a4,a5,8001447e <software_interrupt_ssi+0x668>
    800147c0:	b9c9                	j	80014492 <software_interrupt_ssi+0x67c>
    TEST_ASSERT("VS mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    800147c2:	00019517          	auipc	a0,0x19
    800147c6:	b7650513          	addi	a0,a0,-1162 # 8002d338 <__func__.0+0x318>
    800147ca:	5f0160ef          	jal	8002adba <printf>
    800147ce:	02900513          	li	a0,41
    800147d2:	2d6150ef          	jal	80029aa8 <putchar>
    800147d6:	b931                	j	800143f2 <software_interrupt_ssi+0x5dc>
    TEST_ASSERT("hs mode leads to interrupt pending when sstatus.sie=1 and sip.ssip=1 and sie.ssie=0",
    800147d8:	00019517          	auipc	a0,0x19
    800147dc:	b6050513          	addi	a0,a0,-1184 # 8002d338 <__func__.0+0x318>
    800147e0:	5da160ef          	jal	8002adba <printf>
    800147e4:	02900513          	li	a0,41
    800147e8:	2c0150ef          	jal	80029aa8 <putchar>
    800147ec:	809ff06f          	j	80013ff4 <software_interrupt_ssi+0x1de>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    800147f0:	00019517          	auipc	a0,0x19
    800147f4:	b4850513          	addi	a0,a0,-1208 # 8002d338 <__func__.0+0x318>
    800147f8:	5c2160ef          	jal	8002adba <printf>
    800147fc:	02900513          	li	a0,41
    80014800:	2a8150ef          	jal	80029aa8 <putchar>
    80014804:	b42d                	j	8001422e <software_interrupt_ssi+0x418>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80014806:	00019517          	auipc	a0,0x19
    8001480a:	b3250513          	addi	a0,a0,-1230 # 8002d338 <__func__.0+0x318>
    8001480e:	5ac160ef          	jal	8002adba <printf>
    80014812:	02900513          	li	a0,41
    80014816:	292150ef          	jal	80029aa8 <putchar>
    8001481a:	ba69                	j	800141b4 <software_interrupt_ssi+0x39e>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=0 and sip.ssip=0 and sie.ssie=0",
    8001481c:	00019517          	auipc	a0,0x19
    80014820:	b1c50513          	addi	a0,a0,-1252 # 8002d338 <__func__.0+0x318>
    80014824:	596160ef          	jal	8002adba <printf>
    80014828:	02900513          	li	a0,41
    8001482c:	27c150ef          	jal	80029aa8 <putchar>
    80014830:	bbf5                	j	8001462c <software_interrupt_ssi+0x816>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1",
    80014832:	00019517          	auipc	a0,0x19
    80014836:	b0650513          	addi	a0,a0,-1274 # 8002d338 <__func__.0+0x318>
    8001483a:	580160ef          	jal	8002adba <printf>
    8001483e:	02900513          	li	a0,41
    80014842:	266150ef          	jal	80029aa8 <putchar>
    80014846:	b3b5                	j	800145b2 <software_interrupt_ssi+0x79c>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    80014848:	0003c717          	auipc	a4,0x3c
    8001484c:	7cc72703          	lw	a4,1996(a4) # 80051014 <excpt+0x4>
    80014850:	4791                	li	a5,4
    80014852:	00019597          	auipc	a1,0x19
    80014856:	a8e58593          	addi	a1,a1,-1394 # 8002d2e0 <__func__.0+0x2c0>
    8001485a:	c0f701e3          	beq	a4,a5,8001445c <software_interrupt_ssi+0x646>
    8001485e:	00019597          	auipc	a1,0x19
    80014862:	a9258593          	addi	a1,a1,-1390 # 8002d2f0 <__func__.0+0x2d0>
    80014866:	bedd                	j	8001445c <software_interrupt_ssi+0x646>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014868:	0003c417          	auipc	s0,0x3c
    8001486c:	7ac42403          	lw	s0,1964(s0) # 80051014 <excpt+0x4>
    80014870:	1471                	addi	s0,s0,-4
    80014872:	00143413          	seqz	s0,s0
    80014876:	e74ff06f          	j	80013eea <software_interrupt_ssi+0xd4>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    8001487a:	0003c717          	auipc	a4,0x3c
    8001487e:	79a72703          	lw	a4,1946(a4) # 80051014 <excpt+0x4>
    80014882:	478d                	li	a5,3
    80014884:	00019597          	auipc	a1,0x19
    80014888:	a5c58593          	addi	a1,a1,-1444 # 8002d2e0 <__func__.0+0x2c0>
    8001488c:	eaf70b63          	beq	a4,a5,80013f42 <software_interrupt_ssi+0x12c>
    80014890:	00019597          	auipc	a1,0x19
    80014894:	a6058593          	addi	a1,a1,-1440 # 8002d2f0 <__func__.0+0x2d0>
    80014898:	eaaff06f          	j	80013f42 <software_interrupt_ssi+0x12c>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=0",
    8001489c:	0003c717          	auipc	a4,0x3c
    800148a0:	77872703          	lw	a4,1912(a4) # 80051014 <excpt+0x4>
    800148a4:	4791                	li	a5,4
    800148a6:	00019597          	auipc	a1,0x19
    800148aa:	a3a58593          	addi	a1,a1,-1478 # 8002d2e0 <__func__.0+0x2c0>
    800148ae:	faf70863          	beq	a4,a5,8001405e <software_interrupt_ssi+0x248>
    800148b2:	00019597          	auipc	a1,0x19
    800148b6:	a3e58593          	addi	a1,a1,-1474 # 8002d2f0 <__func__.0+0x2d0>
    800148ba:	fa4ff06f          	j	8001405e <software_interrupt_ssi+0x248>
    TEST_ASSERT("VS mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    800148be:	0003c717          	auipc	a4,0x3c
    800148c2:	75672703          	lw	a4,1878(a4) # 80051014 <excpt+0x4>
    800148c6:	478d                	li	a5,3
    800148c8:	00019597          	auipc	a1,0x19
    800148cc:	a1858593          	addi	a1,a1,-1512 # 8002d2e0 <__func__.0+0x2c0>
    800148d0:	c2f708e3          	beq	a4,a5,80014500 <software_interrupt_ssi+0x6ea>
    800148d4:	00019597          	auipc	a1,0x19
    800148d8:	a1c58593          	addi	a1,a1,-1508 # 8002d2f0 <__func__.0+0x2d0>
    800148dc:	b115                	j	80014500 <software_interrupt_ssi+0x6ea>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=1",
    800148de:	0003c717          	auipc	a4,0x3c
    800148e2:	73672703          	lw	a4,1846(a4) # 80051014 <excpt+0x4>
    800148e6:	478d                	li	a5,3
    800148e8:	00019597          	auipc	a1,0x19
    800148ec:	9f858593          	addi	a1,a1,-1544 # 8002d2e0 <__func__.0+0x2c0>
    800148f0:	a4f708e3          	beq	a4,a5,80014340 <software_interrupt_ssi+0x52a>
    800148f4:	00019597          	auipc	a1,0x19
    800148f8:	9fc58593          	addi	a1,a1,-1540 # 8002d2f0 <__func__.0+0x2d0>
    800148fc:	b491                	j	80014340 <software_interrupt_ssi+0x52a>
    TEST_ASSERT("hs mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    800148fe:	0003c717          	auipc	a4,0x3c
    80014902:	71672703          	lw	a4,1814(a4) # 80051014 <excpt+0x4>
    80014906:	4791                	li	a5,4
    80014908:	00019597          	auipc	a1,0x19
    8001490c:	9d858593          	addi	a1,a1,-1576 # 8002d2e0 <__func__.0+0x2c0>
    80014910:	d8f70363          	beq	a4,a5,80013e96 <software_interrupt_ssi+0x80>
    80014914:	00019597          	auipc	a1,0x19
    80014918:	9dc58593          	addi	a1,a1,-1572 # 8002d2f0 <__func__.0+0x2d0>
    8001491c:	d7aff06f          	j	80013e96 <software_interrupt_ssi+0x80>
    TEST_ASSERT("hs mode leads to no interrupt when sstatus.sie=1 and sip.ssip=0 and sie.ssie=1 and mideleg=1",
    80014920:	0003c717          	auipc	a4,0x3c
    80014924:	6f472703          	lw	a4,1780(a4) # 80051014 <excpt+0x4>
    80014928:	478d                	li	a5,3
    8001492a:	00019597          	auipc	a1,0x19
    8001492e:	9b658593          	addi	a1,a1,-1610 # 8002d2e0 <__func__.0+0x2c0>
    80014932:	fcf70863          	beq	a4,a5,80014102 <software_interrupt_ssi+0x2ec>
    80014936:	00019597          	auipc	a1,0x19
    8001493a:	9ba58593          	addi	a1,a1,-1606 # 8002d2f0 <__func__.0+0x2d0>
    8001493e:	fc4ff06f          	j	80014102 <software_interrupt_ssi+0x2ec>
    TEST_ASSERT("VS mode leads to hs level software interrupt when sstatus.sie=1 and sip.ssip=1 and sie.ssie=1 and mideleg=0",
    80014942:	0003c717          	auipc	a4,0x3c
    80014946:	6d272703          	lw	a4,1746(a4) # 80051014 <excpt+0x4>
    8001494a:	4791                	li	a5,4
    8001494c:	00019597          	auipc	a1,0x19
    80014950:	99458593          	addi	a1,a1,-1644 # 8002d2e0 <__func__.0+0x2c0>
    80014954:	94f704e3          	beq	a4,a5,8001429c <software_interrupt_ssi+0x486>
    80014958:	00019597          	auipc	a1,0x19
    8001495c:	99858593          	addi	a1,a1,-1640 # 8002d2f0 <__func__.0+0x2d0>
    80014960:	ba35                	j	8001429c <software_interrupt_ssi+0x486>

0000000080014962 <software_interrupt_vssi>:


bool software_interrupt_vssi() {
    80014962:	1141                	addi	sp,sp,-16

    TEST_START();
    80014964:	00017597          	auipc	a1,0x17
    80014968:	25c58593          	addi	a1,a1,604 # 8002bbc0 <__func__.0>
    8001496c:	00019517          	auipc	a0,0x19
    80014970:	99450513          	addi	a0,a0,-1644 # 8002d300 <__func__.0+0x2e0>
bool software_interrupt_vssi() {
    80014974:	e406                	sd	ra,8(sp)
    TEST_START();
    80014976:	444160ef          	jal	8002adba <printf>
    8001497a:	4529                	li	a0,10
    8001497c:	12c150ef          	jal	80029aa8 <putchar>

    TEST_SETUP_EXCEPT();
    80014980:	bf2ec0ef          	jal	80000d72 <test_setup_except_function>

    TEST_END();
    80014984:	00019597          	auipc	a1,0x19
    80014988:	95c58593          	addi	a1,a1,-1700 # 8002d2e0 <__func__.0+0x2c0>
    8001498c:	00019517          	auipc	a0,0x19
    80014990:	a0c50513          	addi	a0,a0,-1524 # 8002d398 <__func__.0+0x378>
    80014994:	426160ef          	jal	8002adba <printf>
    80014998:	4511                	li	a0,4
    8001499a:	cd4ec0ef          	jal	80000e6e <goto_priv>
    8001499e:	dedec0ef          	jal	8000178a <reset_state>


    800149a2:	60a2                	ld	ra,8(sp)
    800149a4:	4505                	li	a0,1
    800149a6:	0141                	addi	sp,sp,16
    800149a8:	8082                	ret

00000000800149aa <instruction_page_fault_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool instruction_page_fault_1(){
    800149aa:	1101                	addi	sp,sp,-32

    TEST_START();
    800149ac:	00017597          	auipc	a1,0x17
    800149b0:	22c58593          	addi	a1,a1,556 # 8002bbd8 <__func__.26>
    800149b4:	00019517          	auipc	a0,0x19
    800149b8:	94c50513          	addi	a0,a0,-1716 # 8002d300 <__func__.0+0x2e0>
bool instruction_page_fault_1(){
    800149bc:	ec06                	sd	ra,24(sp)
    800149be:	e822                	sd	s0,16(sp)
    800149c0:	e426                	sd	s1,8(sp)
    TEST_START();
    800149c2:	3f8160ef          	jal	8002adba <printf>
    800149c6:	4529                	li	a0,10
    800149c8:	0e0150ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800149cc:	450d                	li	a0,3
    800149ce:	ca0ec0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800149d2:	c0feb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800149d6:	fa7eb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    800149da:	d49eb0ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_HS);
    800149de:	450d                	li	a0,3
    800149e0:	c8eec0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    800149e4:	4509                	li	a0,2
    800149e6:	ba8ec0ef          	jal	80000d8e <set_prev_priv>

    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    800149ea:	b88ec0ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    800149ee:	400197b7          	lui	a5,0x40019
    800149f2:	078a                	slli	a5,a5,0x2
    800149f4:	0003c417          	auipc	s0,0x3c
    800149f8:	61c40413          	addi	s0,s0,1564 # 80051010 <excpt>
    800149fc:	00000297          	auipc	t0,0x0
    80014a00:	00c28293          	addi	t0,t0,12 # 80014a08 <instruction_page_fault_1+0x5e>
    80014a04:	02543c23          	sd	t0,56(s0)
    80014a08:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.v=0 leads to IPF",
    80014a0a:	08200593          	li	a1,130
    80014a0e:	0001e617          	auipc	a2,0x1e
    80014a12:	8fa60613          	addi	a2,a2,-1798 # 80032308 <__func__.0+0x52e8>
    80014a16:	00019517          	auipc	a0,0x19
    80014a1a:	90250513          	addi	a0,a0,-1790 # 8002d318 <__func__.0+0x2f8>
    80014a1e:	39c160ef          	jal	8002adba <printf>
    80014a22:	0003c797          	auipc	a5,0x3c
    80014a26:	5ef7c783          	lbu	a5,1519(a5) # 80051011 <excpt+0x1>
    80014a2a:	00019597          	auipc	a1,0x19
    80014a2e:	8c658593          	addi	a1,a1,-1850 # 8002d2f0 <__func__.0+0x2d0>
    80014a32:	cf89                	beqz	a5,80014a4c <instruction_page_fault_1+0xa2>
    80014a34:	6418                	ld	a4,8(s0)
    80014a36:	47b1                	li	a5,12
    80014a38:	00019597          	auipc	a1,0x19
    80014a3c:	8a858593          	addi	a1,a1,-1880 # 8002d2e0 <__func__.0+0x2c0>
    80014a40:	00f70663          	beq	a4,a5,80014a4c <instruction_page_fault_1+0xa2>
    80014a44:	00019597          	auipc	a1,0x19
    80014a48:	8ac58593          	addi	a1,a1,-1876 # 8002d2f0 <__func__.0+0x2d0>
    80014a4c:	00019517          	auipc	a0,0x19
    80014a50:	8e450513          	addi	a0,a0,-1820 # 8002d330 <__func__.0+0x310>
    80014a54:	366160ef          	jal	8002adba <printf>
    80014a58:	0003c797          	auipc	a5,0x3c
    80014a5c:	5b97c783          	lbu	a5,1465(a5) # 80051011 <excpt+0x1>
    80014a60:	c789                	beqz	a5,80014a6a <instruction_page_fault_1+0xc0>
    80014a62:	6418                	ld	a4,8(s0)
    80014a64:	47b1                	li	a5,12
    80014a66:	00f70c63          	beq	a4,a5,80014a7e <instruction_page_fault_1+0xd4>
    80014a6a:	00019517          	auipc	a0,0x19
    80014a6e:	8ce50513          	addi	a0,a0,-1842 # 8002d338 <__func__.0+0x318>
    80014a72:	348160ef          	jal	8002adba <printf>
    80014a76:	02900513          	li	a0,41
    80014a7a:	02e150ef          	jal	80029aa8 <putchar>
    80014a7e:	4529                	li	a0,10
    80014a80:	028150ef          	jal	80029aa8 <putchar>
    80014a84:	0003c797          	auipc	a5,0x3c
    80014a88:	58d7c783          	lbu	a5,1421(a5) # 80051011 <excpt+0x1>
    80014a8c:	4481                	li	s1,0
    80014a8e:	c789                	beqz	a5,80014a98 <instruction_page_fault_1+0xee>
    80014a90:	6404                	ld	s1,8(s0)
    80014a92:	14d1                	addi	s1,s1,-12
    80014a94:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014a98:	adaec0ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014a9c:	001007b7          	lui	a5,0x100
    80014aa0:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014aa4:	07b2                	slli	a5,a5,0xc
    80014aa6:	00000297          	auipc	t0,0x0
    80014aaa:	00c28293          	addi	t0,t0,12 # 80014ab2 <instruction_page_fault_1+0x108>
    80014aae:	02543c23          	sd	t0,56(s0)
    80014ab2:	8782                	jr	a5

    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014ab4:	08200593          	li	a1,130
    80014ab8:	0001e617          	auipc	a2,0x1e
    80014abc:	88860613          	addi	a2,a2,-1912 # 80032340 <__func__.0+0x5320>
    80014ac0:	00019517          	auipc	a0,0x19
    80014ac4:	85850513          	addi	a0,a0,-1960 # 8002d318 <__func__.0+0x2f8>
    80014ac8:	2f2160ef          	jal	8002adba <printf>
    80014acc:	0003c797          	auipc	a5,0x3c
    80014ad0:	5457c783          	lbu	a5,1349(a5) # 80051011 <excpt+0x1>
    80014ad4:	00019597          	auipc	a1,0x19
    80014ad8:	81c58593          	addi	a1,a1,-2020 # 8002d2f0 <__func__.0+0x2d0>
    80014adc:	cf89                	beqz	a5,80014af6 <instruction_page_fault_1+0x14c>
    80014ade:	6418                	ld	a4,8(s0)
    80014ae0:	47b1                	li	a5,12
    80014ae2:	00018597          	auipc	a1,0x18
    80014ae6:	7fe58593          	addi	a1,a1,2046 # 8002d2e0 <__func__.0+0x2c0>
    80014aea:	00f70663          	beq	a4,a5,80014af6 <instruction_page_fault_1+0x14c>
    80014aee:	00019597          	auipc	a1,0x19
    80014af2:	80258593          	addi	a1,a1,-2046 # 8002d2f0 <__func__.0+0x2d0>
    80014af6:	00019517          	auipc	a0,0x19
    80014afa:	83a50513          	addi	a0,a0,-1990 # 8002d330 <__func__.0+0x310>
    80014afe:	2bc160ef          	jal	8002adba <printf>
    80014b02:	0003c797          	auipc	a5,0x3c
    80014b06:	50f7c783          	lbu	a5,1295(a5) # 80051011 <excpt+0x1>
    80014b0a:	c789                	beqz	a5,80014b14 <instruction_page_fault_1+0x16a>
    80014b0c:	6418                	ld	a4,8(s0)
    80014b0e:	47b1                	li	a5,12
    80014b10:	00f70c63          	beq	a4,a5,80014b28 <instruction_page_fault_1+0x17e>
    80014b14:	00019517          	auipc	a0,0x19
    80014b18:	82450513          	addi	a0,a0,-2012 # 8002d338 <__func__.0+0x318>
    80014b1c:	29e160ef          	jal	8002adba <printf>
    80014b20:	02900513          	li	a0,41
    80014b24:	785140ef          	jal	80029aa8 <putchar>
    80014b28:	4529                	li	a0,10
    80014b2a:	77f140ef          	jal	80029aa8 <putchar>
    80014b2e:	c095                	beqz	s1,80014b52 <instruction_page_fault_1+0x1a8>
    80014b30:	0003c497          	auipc	s1,0x3c
    80014b34:	4e14c483          	lbu	s1,1249(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014b38:	00018597          	auipc	a1,0x18
    80014b3c:	7b858593          	addi	a1,a1,1976 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014b40:	cc91                	beqz	s1,80014b5c <instruction_page_fault_1+0x1b2>
    80014b42:	6418                	ld	a4,8(s0)
    80014b44:	47b1                	li	a5,12
    TEST_END();
    80014b46:	00018597          	auipc	a1,0x18
    80014b4a:	79a58593          	addi	a1,a1,1946 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction when pte.x=0 leads to IPF",
    80014b4e:	00f70763          	beq	a4,a5,80014b5c <instruction_page_fault_1+0x1b2>
    80014b52:	4481                	li	s1,0
    TEST_END();
    80014b54:	00018597          	auipc	a1,0x18
    80014b58:	79c58593          	addi	a1,a1,1948 # 8002d2f0 <__func__.0+0x2d0>
    80014b5c:	00019517          	auipc	a0,0x19
    80014b60:	83c50513          	addi	a0,a0,-1988 # 8002d398 <__func__.0+0x378>
    80014b64:	256160ef          	jal	8002adba <printf>
    80014b68:	4511                	li	a0,4
    80014b6a:	b04ec0ef          	jal	80000e6e <goto_priv>
    80014b6e:	c1dec0ef          	jal	8000178a <reset_state>
}
    80014b72:	60e2                	ld	ra,24(sp)
    80014b74:	6442                	ld	s0,16(sp)
    80014b76:	8526                	mv	a0,s1
    80014b78:	64a2                	ld	s1,8(sp)
    80014b7a:	6105                	addi	sp,sp,32
    80014b7c:	8082                	ret

0000000080014b7e <instruction_page_fault_2>:

bool instruction_page_fault_2(){
    80014b7e:	1101                	addi	sp,sp,-32

    TEST_START();
    80014b80:	00017597          	auipc	a1,0x17
    80014b84:	07858593          	addi	a1,a1,120 # 8002bbf8 <__func__.24>
    80014b88:	00018517          	auipc	a0,0x18
    80014b8c:	77850513          	addi	a0,a0,1912 # 8002d300 <__func__.0+0x2e0>
bool instruction_page_fault_2(){
    80014b90:	ec06                	sd	ra,24(sp)
    80014b92:	e822                	sd	s0,16(sp)
    80014b94:	e426                	sd	s1,8(sp)
    TEST_START();
    80014b96:	224160ef          	jal	8002adba <printf>
    80014b9a:	4529                	li	a0,10
    80014b9c:	70d140ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80014ba0:	450d                	li	a0,3
    80014ba2:	accec0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80014ba6:	a3beb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014baa:	dd3eb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80014bae:	b75eb0ef          	jal	80000722 <vspt_init>


    goto_priv(PRIV_HS);
    80014bb2:	450d                	li	a0,3
    80014bb4:	abaec0ef          	jal	80000e6e <goto_priv>

    //执行取指指令时，在HS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014bb8:	9baec0ef          	jal	80000d72 <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014bbc:	000807b7          	lui	a5,0x80
    80014bc0:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014bc2:	07b6                	slli	a5,a5,0xd
    80014bc4:	0003c417          	auipc	s0,0x3c
    80014bc8:	44c40413          	addi	s0,s0,1100 # 80051010 <excpt>
    80014bcc:	00000297          	auipc	t0,0x0
    80014bd0:	00c28293          	addi	t0,t0,12 # 80014bd8 <instruction_page_fault_2+0x5a>
    80014bd4:	02543c23          	sd	t0,56(s0)
    80014bd8:	8782                	jr	a5
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014bda:	08200593          	li	a1,130
    80014bde:	0001d617          	auipc	a2,0x1d
    80014be2:	79a60613          	addi	a2,a2,1946 # 80032378 <__func__.0+0x5358>
    80014be6:	00018517          	auipc	a0,0x18
    80014bea:	73250513          	addi	a0,a0,1842 # 8002d318 <__func__.0+0x2f8>
    80014bee:	1cc160ef          	jal	8002adba <printf>
    80014bf2:	0003c797          	auipc	a5,0x3c
    80014bf6:	41f7c783          	lbu	a5,1055(a5) # 80051011 <excpt+0x1>
    80014bfa:	00018597          	auipc	a1,0x18
    80014bfe:	6f658593          	addi	a1,a1,1782 # 8002d2f0 <__func__.0+0x2d0>
    80014c02:	cf89                	beqz	a5,80014c1c <instruction_page_fault_2+0x9e>
    80014c04:	6418                	ld	a4,8(s0)
    80014c06:	47b1                	li	a5,12
    80014c08:	00018597          	auipc	a1,0x18
    80014c0c:	6d858593          	addi	a1,a1,1752 # 8002d2e0 <__func__.0+0x2c0>
    80014c10:	00f70663          	beq	a4,a5,80014c1c <instruction_page_fault_2+0x9e>
    80014c14:	00018597          	auipc	a1,0x18
    80014c18:	6dc58593          	addi	a1,a1,1756 # 8002d2f0 <__func__.0+0x2d0>
    80014c1c:	00018517          	auipc	a0,0x18
    80014c20:	71450513          	addi	a0,a0,1812 # 8002d330 <__func__.0+0x310>
    80014c24:	196160ef          	jal	8002adba <printf>
    80014c28:	0003c797          	auipc	a5,0x3c
    80014c2c:	3e97c783          	lbu	a5,1001(a5) # 80051011 <excpt+0x1>
    80014c30:	c789                	beqz	a5,80014c3a <instruction_page_fault_2+0xbc>
    80014c32:	6418                	ld	a4,8(s0)
    80014c34:	47b1                	li	a5,12
    80014c36:	00f70c63          	beq	a4,a5,80014c4e <instruction_page_fault_2+0xd0>
    80014c3a:	00018517          	auipc	a0,0x18
    80014c3e:	6fe50513          	addi	a0,a0,1790 # 8002d338 <__func__.0+0x318>
    80014c42:	178160ef          	jal	8002adba <printf>
    80014c46:	02900513          	li	a0,41
    80014c4a:	65f140ef          	jal	80029aa8 <putchar>
    80014c4e:	4529                	li	a0,10
    80014c50:	659140ef          	jal	80029aa8 <putchar>
    80014c54:	0003c497          	auipc	s1,0x3c
    80014c58:	3bd4c483          	lbu	s1,957(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014c5c:	00018597          	auipc	a1,0x18
    80014c60:	69458593          	addi	a1,a1,1684 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014c64:	cc91                	beqz	s1,80014c80 <instruction_page_fault_2+0x102>
    80014c66:	6418                	ld	a4,8(s0)
    80014c68:	47b1                	li	a5,12
    TEST_END();
    80014c6a:	00018597          	auipc	a1,0x18
    80014c6e:	67658593          	addi	a1,a1,1654 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetche instruction of u mode leads to IPF",
    80014c72:	00f70763          	beq	a4,a5,80014c80 <instruction_page_fault_2+0x102>
    80014c76:	4481                	li	s1,0
    TEST_END();
    80014c78:	00018597          	auipc	a1,0x18
    80014c7c:	67858593          	addi	a1,a1,1656 # 8002d2f0 <__func__.0+0x2d0>
    80014c80:	00018517          	auipc	a0,0x18
    80014c84:	71850513          	addi	a0,a0,1816 # 8002d398 <__func__.0+0x378>
    80014c88:	132160ef          	jal	8002adba <printf>
    80014c8c:	4511                	li	a0,4
    80014c8e:	9e0ec0ef          	jal	80000e6e <goto_priv>
    80014c92:	af9ec0ef          	jal	8000178a <reset_state>
}
    80014c96:	60e2                	ld	ra,24(sp)
    80014c98:	6442                	ld	s0,16(sp)
    80014c9a:	8526                	mv	a0,s1
    80014c9c:	64a2                	ld	s1,8(sp)
    80014c9e:	6105                	addi	sp,sp,32
    80014ca0:	8082                	ret

0000000080014ca2 <instruction_page_fault_3>:



bool instruction_page_fault_3(){
    80014ca2:	1101                	addi	sp,sp,-32

    TEST_START();
    80014ca4:	00017597          	auipc	a1,0x17
    80014ca8:	f7458593          	addi	a1,a1,-140 # 8002bc18 <__func__.23>
    80014cac:	00018517          	auipc	a0,0x18
    80014cb0:	65450513          	addi	a0,a0,1620 # 8002d300 <__func__.0+0x2e0>
bool instruction_page_fault_3(){
    80014cb4:	ec06                	sd	ra,24(sp)
    80014cb6:	e822                	sd	s0,16(sp)
    80014cb8:	e426                	sd	s1,8(sp)
    TEST_START();
    80014cba:	100160ef          	jal	8002adba <printf>
    80014cbe:	4529                	li	a0,10
    80014cc0:	5e9140ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80014cc4:	450d                	li	a0,3
    80014cc6:	9a8ec0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80014cca:	917eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014cce:	cafeb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80014cd2:	a51eb0ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80014cd6:	4509                	li	a0,2
    80014cd8:	996ec0ef          	jal	80000e6e <goto_priv>


    //执行取指指令时，pte.v=0
    vaddr = hs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80014cdc:	896ec0ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014ce0:	400197b7          	lui	a5,0x40019
    80014ce4:	078a                	slli	a5,a5,0x2
    80014ce6:	0003c417          	auipc	s0,0x3c
    80014cea:	32a40413          	addi	s0,s0,810 # 80051010 <excpt>
    80014cee:	00000297          	auipc	t0,0x0
    80014cf2:	00c28293          	addi	t0,t0,12 # 80014cfa <instruction_page_fault_3+0x58>
    80014cf6:	02543c23          	sd	t0,56(s0)
    80014cfa:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.v=0 leads to IPF",
    80014cfc:	08200593          	li	a1,130
    80014d00:	0001d617          	auipc	a2,0x1d
    80014d04:	6b060613          	addi	a2,a2,1712 # 800323b0 <__func__.0+0x5390>
    80014d08:	00018517          	auipc	a0,0x18
    80014d0c:	61050513          	addi	a0,a0,1552 # 8002d318 <__func__.0+0x2f8>
    80014d10:	0aa160ef          	jal	8002adba <printf>
    80014d14:	0003c797          	auipc	a5,0x3c
    80014d18:	2fd7c783          	lbu	a5,765(a5) # 80051011 <excpt+0x1>
    80014d1c:	00018597          	auipc	a1,0x18
    80014d20:	5d458593          	addi	a1,a1,1492 # 8002d2f0 <__func__.0+0x2d0>
    80014d24:	cf89                	beqz	a5,80014d3e <instruction_page_fault_3+0x9c>
    80014d26:	6418                	ld	a4,8(s0)
    80014d28:	47b1                	li	a5,12
    80014d2a:	00018597          	auipc	a1,0x18
    80014d2e:	5b658593          	addi	a1,a1,1462 # 8002d2e0 <__func__.0+0x2c0>
    80014d32:	00f70663          	beq	a4,a5,80014d3e <instruction_page_fault_3+0x9c>
    80014d36:	00018597          	auipc	a1,0x18
    80014d3a:	5ba58593          	addi	a1,a1,1466 # 8002d2f0 <__func__.0+0x2d0>
    80014d3e:	00018517          	auipc	a0,0x18
    80014d42:	5f250513          	addi	a0,a0,1522 # 8002d330 <__func__.0+0x310>
    80014d46:	074160ef          	jal	8002adba <printf>
    80014d4a:	0003c797          	auipc	a5,0x3c
    80014d4e:	2c77c783          	lbu	a5,711(a5) # 80051011 <excpt+0x1>
    80014d52:	c789                	beqz	a5,80014d5c <instruction_page_fault_3+0xba>
    80014d54:	6418                	ld	a4,8(s0)
    80014d56:	47b1                	li	a5,12
    80014d58:	00f70c63          	beq	a4,a5,80014d70 <instruction_page_fault_3+0xce>
    80014d5c:	00018517          	auipc	a0,0x18
    80014d60:	5dc50513          	addi	a0,a0,1500 # 8002d338 <__func__.0+0x318>
    80014d64:	056160ef          	jal	8002adba <printf>
    80014d68:	02900513          	li	a0,41
    80014d6c:	53d140ef          	jal	80029aa8 <putchar>
    80014d70:	4529                	li	a0,10
    80014d72:	537140ef          	jal	80029aa8 <putchar>
    80014d76:	0003c797          	auipc	a5,0x3c
    80014d7a:	29b7c783          	lbu	a5,667(a5) # 80051011 <excpt+0x1>
    80014d7e:	4481                	li	s1,0
    80014d80:	c789                	beqz	a5,80014d8a <instruction_page_fault_3+0xe8>
    80014d82:	6404                	ld	s1,8(s0)
    80014d84:	14d1                	addi	s1,s1,-12
    80014d86:	0014b493          	seqz	s1,s1
    );


    //执行取指指令时，pte.x=0
    vaddr = vs_page_base(VSRW_GRW);
    TEST_SETUP_EXCEPT();
    80014d8a:	fe9eb0ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80014d8e:	001007b7          	lui	a5,0x100
    80014d92:	05178793          	addi	a5,a5,81 # 100051 <STACK_SIZE+0x51>
    80014d96:	07b2                	slli	a5,a5,0xc
    80014d98:	00000297          	auipc	t0,0x0
    80014d9c:	00c28293          	addi	t0,t0,12 # 80014da4 <instruction_page_fault_3+0x102>
    80014da0:	02543c23          	sd	t0,56(s0)
    80014da4:	8782                	jr	a5

    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014da6:	08200593          	li	a1,130
    80014daa:	0001d617          	auipc	a2,0x1d
    80014dae:	63e60613          	addi	a2,a2,1598 # 800323e8 <__func__.0+0x53c8>
    80014db2:	00018517          	auipc	a0,0x18
    80014db6:	56650513          	addi	a0,a0,1382 # 8002d318 <__func__.0+0x2f8>
    80014dba:	000160ef          	jal	8002adba <printf>
    80014dbe:	0003c797          	auipc	a5,0x3c
    80014dc2:	2537c783          	lbu	a5,595(a5) # 80051011 <excpt+0x1>
    80014dc6:	00018597          	auipc	a1,0x18
    80014dca:	52a58593          	addi	a1,a1,1322 # 8002d2f0 <__func__.0+0x2d0>
    80014dce:	cf89                	beqz	a5,80014de8 <instruction_page_fault_3+0x146>
    80014dd0:	6418                	ld	a4,8(s0)
    80014dd2:	47b1                	li	a5,12
    80014dd4:	00018597          	auipc	a1,0x18
    80014dd8:	50c58593          	addi	a1,a1,1292 # 8002d2e0 <__func__.0+0x2c0>
    80014ddc:	00f70663          	beq	a4,a5,80014de8 <instruction_page_fault_3+0x146>
    80014de0:	00018597          	auipc	a1,0x18
    80014de4:	51058593          	addi	a1,a1,1296 # 8002d2f0 <__func__.0+0x2d0>
    80014de8:	00018517          	auipc	a0,0x18
    80014dec:	54850513          	addi	a0,a0,1352 # 8002d330 <__func__.0+0x310>
    80014df0:	7cb150ef          	jal	8002adba <printf>
    80014df4:	0003c797          	auipc	a5,0x3c
    80014df8:	21d7c783          	lbu	a5,541(a5) # 80051011 <excpt+0x1>
    80014dfc:	c789                	beqz	a5,80014e06 <instruction_page_fault_3+0x164>
    80014dfe:	6418                	ld	a4,8(s0)
    80014e00:	47b1                	li	a5,12
    80014e02:	00f70c63          	beq	a4,a5,80014e1a <instruction_page_fault_3+0x178>
    80014e06:	00018517          	auipc	a0,0x18
    80014e0a:	53250513          	addi	a0,a0,1330 # 8002d338 <__func__.0+0x318>
    80014e0e:	7ad150ef          	jal	8002adba <printf>
    80014e12:	02900513          	li	a0,41
    80014e16:	493140ef          	jal	80029aa8 <putchar>
    80014e1a:	4529                	li	a0,10
    80014e1c:	48d140ef          	jal	80029aa8 <putchar>
    80014e20:	c095                	beqz	s1,80014e44 <instruction_page_fault_3+0x1a2>
    80014e22:	0003c497          	auipc	s1,0x3c
    80014e26:	1ef4c483          	lbu	s1,495(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014e2a:	00018597          	auipc	a1,0x18
    80014e2e:	4c658593          	addi	a1,a1,1222 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014e32:	cc91                	beqz	s1,80014e4e <instruction_page_fault_3+0x1ac>
    80014e34:	6418                	ld	a4,8(s0)
    80014e36:	47b1                	li	a5,12
    TEST_END();
    80014e38:	00018597          	auipc	a1,0x18
    80014e3c:	4a858593          	addi	a1,a1,1192 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetch instruction when pte.x=0 leads to IPF",
    80014e40:	00f70763          	beq	a4,a5,80014e4e <instruction_page_fault_3+0x1ac>
    80014e44:	4481                	li	s1,0
    TEST_END();
    80014e46:	00018597          	auipc	a1,0x18
    80014e4a:	4aa58593          	addi	a1,a1,1194 # 8002d2f0 <__func__.0+0x2d0>
    80014e4e:	00018517          	auipc	a0,0x18
    80014e52:	54a50513          	addi	a0,a0,1354 # 8002d398 <__func__.0+0x378>
    80014e56:	765150ef          	jal	8002adba <printf>
    80014e5a:	4511                	li	a0,4
    80014e5c:	812ec0ef          	jal	80000e6e <goto_priv>
    80014e60:	92bec0ef          	jal	8000178a <reset_state>
}
    80014e64:	60e2                	ld	ra,24(sp)
    80014e66:	6442                	ld	s0,16(sp)
    80014e68:	8526                	mv	a0,s1
    80014e6a:	64a2                	ld	s1,8(sp)
    80014e6c:	6105                	addi	sp,sp,32
    80014e6e:	8082                	ret

0000000080014e70 <instruction_page_fault_4>:

bool instruction_page_fault_4(){
    80014e70:	1101                	addi	sp,sp,-32

    TEST_START();
    80014e72:	00017597          	auipc	a1,0x17
    80014e76:	dc658593          	addi	a1,a1,-570 # 8002bc38 <__func__.22>
    80014e7a:	00018517          	auipc	a0,0x18
    80014e7e:	48650513          	addi	a0,a0,1158 # 8002d300 <__func__.0+0x2e0>
bool instruction_page_fault_4(){
    80014e82:	ec06                	sd	ra,24(sp)
    80014e84:	e822                	sd	s0,16(sp)
    80014e86:	e426                	sd	s1,8(sp)
    TEST_START();
    80014e88:	733150ef          	jal	8002adba <printf>
    80014e8c:	4529                	li	a0,10
    80014e8e:	41b140ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80014e92:	450d                	li	a0,3
    80014e94:	fdbeb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80014e98:	f48eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014e9c:	ae1eb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80014ea0:	883eb0ef          	jal	80000722 <vspt_init>


    goto_priv(PRIV_VS);
    80014ea4:	4509                	li	a0,2
    80014ea6:	fc9eb0ef          	jal	80000e6e <goto_priv>

    //执行取指指令时，在VS模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80014eaa:	ec9eb0ef          	jal	80000d72 <test_setup_except_function>
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    TEST_EXEC_EXCEPT(vaddr); 
    80014eae:	000807b7          	lui	a5,0x80
    80014eb2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80014eb4:	07b6                	slli	a5,a5,0xd
    80014eb6:	0003c417          	auipc	s0,0x3c
    80014eba:	15a40413          	addi	s0,s0,346 # 80051010 <excpt>
    80014ebe:	00000297          	auipc	t0,0x0
    80014ec2:	00c28293          	addi	t0,t0,12 # 80014eca <instruction_page_fault_4+0x5a>
    80014ec6:	02543c23          	sd	t0,56(s0)
    80014eca:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80014ecc:	08200593          	li	a1,130
    80014ed0:	0001d617          	auipc	a2,0x1d
    80014ed4:	55060613          	addi	a2,a2,1360 # 80032420 <__func__.0+0x5400>
    80014ed8:	00018517          	auipc	a0,0x18
    80014edc:	44050513          	addi	a0,a0,1088 # 8002d318 <__func__.0+0x2f8>
    80014ee0:	6db150ef          	jal	8002adba <printf>
    80014ee4:	0003c797          	auipc	a5,0x3c
    80014ee8:	12d7c783          	lbu	a5,301(a5) # 80051011 <excpt+0x1>
    80014eec:	00018597          	auipc	a1,0x18
    80014ef0:	40458593          	addi	a1,a1,1028 # 8002d2f0 <__func__.0+0x2d0>
    80014ef4:	cf89                	beqz	a5,80014f0e <instruction_page_fault_4+0x9e>
    80014ef6:	6418                	ld	a4,8(s0)
    80014ef8:	47b1                	li	a5,12
    80014efa:	00018597          	auipc	a1,0x18
    80014efe:	3e658593          	addi	a1,a1,998 # 8002d2e0 <__func__.0+0x2c0>
    80014f02:	00f70663          	beq	a4,a5,80014f0e <instruction_page_fault_4+0x9e>
    80014f06:	00018597          	auipc	a1,0x18
    80014f0a:	3ea58593          	addi	a1,a1,1002 # 8002d2f0 <__func__.0+0x2d0>
    80014f0e:	00018517          	auipc	a0,0x18
    80014f12:	42250513          	addi	a0,a0,1058 # 8002d330 <__func__.0+0x310>
    80014f16:	6a5150ef          	jal	8002adba <printf>
    80014f1a:	0003c797          	auipc	a5,0x3c
    80014f1e:	0f77c783          	lbu	a5,247(a5) # 80051011 <excpt+0x1>
    80014f22:	c789                	beqz	a5,80014f2c <instruction_page_fault_4+0xbc>
    80014f24:	6418                	ld	a4,8(s0)
    80014f26:	47b1                	li	a5,12
    80014f28:	00f70c63          	beq	a4,a5,80014f40 <instruction_page_fault_4+0xd0>
    80014f2c:	00018517          	auipc	a0,0x18
    80014f30:	40c50513          	addi	a0,a0,1036 # 8002d338 <__func__.0+0x318>
    80014f34:	687150ef          	jal	8002adba <printf>
    80014f38:	02900513          	li	a0,41
    80014f3c:	36d140ef          	jal	80029aa8 <putchar>
    80014f40:	4529                	li	a0,10
    80014f42:	367140ef          	jal	80029aa8 <putchar>
    80014f46:	0003c497          	auipc	s1,0x3c
    80014f4a:	0cb4c483          	lbu	s1,203(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80014f4e:	00018597          	auipc	a1,0x18
    80014f52:	3a258593          	addi	a1,a1,930 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80014f56:	cc91                	beqz	s1,80014f72 <instruction_page_fault_4+0x102>
    80014f58:	6418                	ld	a4,8(s0)
    80014f5a:	47b1                	li	a5,12
    TEST_END();
    80014f5c:	00018597          	auipc	a1,0x18
    80014f60:	38458593          	addi	a1,a1,900 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF",
    80014f64:	00f70763          	beq	a4,a5,80014f72 <instruction_page_fault_4+0x102>
    80014f68:	4481                	li	s1,0
    TEST_END();
    80014f6a:	00018597          	auipc	a1,0x18
    80014f6e:	38658593          	addi	a1,a1,902 # 8002d2f0 <__func__.0+0x2d0>
    80014f72:	00018517          	auipc	a0,0x18
    80014f76:	42650513          	addi	a0,a0,1062 # 8002d398 <__func__.0+0x378>
    80014f7a:	641150ef          	jal	8002adba <printf>
    80014f7e:	4511                	li	a0,4
    80014f80:	eefeb0ef          	jal	80000e6e <goto_priv>
    80014f84:	807ec0ef          	jal	8000178a <reset_state>
}
    80014f88:	60e2                	ld	ra,24(sp)
    80014f8a:	6442                	ld	s0,16(sp)
    80014f8c:	8526                	mv	a0,s1
    80014f8e:	64a2                	ld	s1,8(sp)
    80014f90:	6105                	addi	sp,sp,32
    80014f92:	8082                	ret

0000000080014f94 <load_page_fault_1>:

bool load_page_fault_1(){
    80014f94:	1101                	addi	sp,sp,-32

    TEST_START();
    80014f96:	00017597          	auipc	a1,0x17
    80014f9a:	cc258593          	addi	a1,a1,-830 # 8002bc58 <__func__.21>
    80014f9e:	00018517          	auipc	a0,0x18
    80014fa2:	36250513          	addi	a0,a0,866 # 8002d300 <__func__.0+0x2e0>
bool load_page_fault_1(){
    80014fa6:	ec06                	sd	ra,24(sp)
    80014fa8:	e822                	sd	s0,16(sp)
    80014faa:	e426                	sd	s1,8(sp)
    TEST_START();
    80014fac:	60f150ef          	jal	8002adba <printf>
    80014fb0:	4529                	li	a0,10
    80014fb2:	2f7140ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS); 
    80014fb6:	450d                	li	a0,3
    80014fb8:	eb7eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80014fbc:	e24eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80014fc0:	9bdeb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80014fc4:	f5eeb0ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80014fc8:	450d                	li	a0,3
    80014fca:	ea5eb0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80014fce:	4509                	li	a0,2
    80014fd0:	dbfeb0ef          	jal	80000d8e <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80014fd4:	d9feb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80014fd8:	400197b7          	lui	a5,0x40019
    80014fdc:	078a                	slli	a5,a5,0x2
    80014fde:	6007c7f3          	.insn	4, 0x6007c7f3

    addr = hs_page_base(VSI_GI);
    hlvb(addr);
    TEST_ASSERT("hs mode load when pte.v=0 leads to LPF",
    80014fe2:	08200593          	li	a1,130
    80014fe6:	0001d617          	auipc	a2,0x1d
    80014fea:	47260613          	addi	a2,a2,1138 # 80032458 <__func__.0+0x5438>
    80014fee:	00018517          	auipc	a0,0x18
    80014ff2:	32a50513          	addi	a0,a0,810 # 8002d318 <__func__.0+0x2f8>
    80014ff6:	5c5150ef          	jal	8002adba <printf>
    80014ffa:	0003c797          	auipc	a5,0x3c
    80014ffe:	0177c783          	lbu	a5,23(a5) # 80051011 <excpt+0x1>
    80015002:	0003c497          	auipc	s1,0x3c
    80015006:	00e48493          	addi	s1,s1,14 # 80051010 <excpt>
    8001500a:	00018597          	auipc	a1,0x18
    8001500e:	2e658593          	addi	a1,a1,742 # 8002d2f0 <__func__.0+0x2d0>
    80015012:	cf89                	beqz	a5,8001502c <load_page_fault_1+0x98>
    80015014:	6498                	ld	a4,8(s1)
    80015016:	47b5                	li	a5,13
    80015018:	00018597          	auipc	a1,0x18
    8001501c:	2c858593          	addi	a1,a1,712 # 8002d2e0 <__func__.0+0x2c0>
    80015020:	00f70663          	beq	a4,a5,8001502c <load_page_fault_1+0x98>
    80015024:	00018597          	auipc	a1,0x18
    80015028:	2cc58593          	addi	a1,a1,716 # 8002d2f0 <__func__.0+0x2d0>
    8001502c:	00018517          	auipc	a0,0x18
    80015030:	30450513          	addi	a0,a0,772 # 8002d330 <__func__.0+0x310>
    80015034:	587150ef          	jal	8002adba <printf>
    80015038:	0003c797          	auipc	a5,0x3c
    8001503c:	fd97c783          	lbu	a5,-39(a5) # 80051011 <excpt+0x1>
    80015040:	c789                	beqz	a5,8001504a <load_page_fault_1+0xb6>
    80015042:	6498                	ld	a4,8(s1)
    80015044:	47b5                	li	a5,13
    80015046:	00f70c63          	beq	a4,a5,8001505e <load_page_fault_1+0xca>
    8001504a:	00018517          	auipc	a0,0x18
    8001504e:	2ee50513          	addi	a0,a0,750 # 8002d338 <__func__.0+0x318>
    80015052:	569150ef          	jal	8002adba <printf>
    80015056:	02900513          	li	a0,41
    8001505a:	24f140ef          	jal	80029aa8 <putchar>
    8001505e:	4529                	li	a0,10
    80015060:	249140ef          	jal	80029aa8 <putchar>
    80015064:	0003c797          	auipc	a5,0x3c
    80015068:	fad7c783          	lbu	a5,-83(a5) # 80051011 <excpt+0x1>
    8001506c:	4401                	li	s0,0
    8001506e:	c789                	beqz	a5,80015078 <load_page_fault_1+0xe4>
    80015070:	6480                	ld	s0,8(s1)
    80015072:	144d                	addi	s0,s0,-13
    80015074:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行hlvd指令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80015078:	cfbeb0ef          	jal	80000d72 <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001507c:	000807b7          	lui	a5,0x80
    80015080:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80015084:	001007b7          	lui	a5,0x100
    80015088:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001508c:	07b2                	slli	a5,a5,0xc
    8001508e:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    80015092:	08200593          	li	a1,130
    80015096:	0001d617          	auipc	a2,0x1d
    8001509a:	3ea60613          	addi	a2,a2,1002 # 80032480 <__func__.0+0x5460>
    8001509e:	00018517          	auipc	a0,0x18
    800150a2:	27a50513          	addi	a0,a0,634 # 8002d318 <__func__.0+0x2f8>
    800150a6:	515150ef          	jal	8002adba <printf>
    800150aa:	0003c797          	auipc	a5,0x3c
    800150ae:	f677c783          	lbu	a5,-153(a5) # 80051011 <excpt+0x1>
    800150b2:	00018597          	auipc	a1,0x18
    800150b6:	23e58593          	addi	a1,a1,574 # 8002d2f0 <__func__.0+0x2d0>
    800150ba:	cf89                	beqz	a5,800150d4 <load_page_fault_1+0x140>
    800150bc:	6498                	ld	a4,8(s1)
    800150be:	47b5                	li	a5,13
    800150c0:	00018597          	auipc	a1,0x18
    800150c4:	22058593          	addi	a1,a1,544 # 8002d2e0 <__func__.0+0x2c0>
    800150c8:	00f70663          	beq	a4,a5,800150d4 <load_page_fault_1+0x140>
    800150cc:	00018597          	auipc	a1,0x18
    800150d0:	22458593          	addi	a1,a1,548 # 8002d2f0 <__func__.0+0x2d0>
    800150d4:	00018517          	auipc	a0,0x18
    800150d8:	25c50513          	addi	a0,a0,604 # 8002d330 <__func__.0+0x310>
    800150dc:	4df150ef          	jal	8002adba <printf>
    800150e0:	0003c797          	auipc	a5,0x3c
    800150e4:	f317c783          	lbu	a5,-207(a5) # 80051011 <excpt+0x1>
    800150e8:	c789                	beqz	a5,800150f2 <load_page_fault_1+0x15e>
    800150ea:	6498                	ld	a4,8(s1)
    800150ec:	47b5                	li	a5,13
    800150ee:	00f70c63          	beq	a4,a5,80015106 <load_page_fault_1+0x172>
    800150f2:	00018517          	auipc	a0,0x18
    800150f6:	24650513          	addi	a0,a0,582 # 8002d338 <__func__.0+0x318>
    800150fa:	4c1150ef          	jal	8002adba <printf>
    800150fe:	02900513          	li	a0,41
    80015102:	1a7140ef          	jal	80029aa8 <putchar>
    80015106:	4529                	li	a0,10
    80015108:	1a1140ef          	jal	80029aa8 <putchar>
    8001510c:	c801                	beqz	s0,8001511c <load_page_fault_1+0x188>
    8001510e:	0003c797          	auipc	a5,0x3c
    80015112:	f037c783          	lbu	a5,-253(a5) # 80051011 <excpt+0x1>
    80015116:	4401                	li	s0,0
    80015118:	0c079e63          	bnez	a5,800151f4 <load_page_fault_1+0x260>
        excpt.cause == CAUSE_LPF
    );

    //执行hlvd指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_HS);
    8001511c:	450d                	li	a0,3
    8001511e:	d51eb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80015122:	c51eb0ef          	jal	80000d72 <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80015126:	000807b7          	lui	a5,0x80
    8001512a:	1007a073          	csrs	sstatus,a5
    8001512e:	001007b7          	lui	a5,0x100
    80015132:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    80015134:	07b2                	slli	a5,a5,0xc
    80015136:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001513a:	08200593          	li	a1,130
    8001513e:	0001d617          	auipc	a2,0x1d
    80015142:	38260613          	addi	a2,a2,898 # 800324c0 <__func__.0+0x54a0>
    80015146:	00018517          	auipc	a0,0x18
    8001514a:	1d250513          	addi	a0,a0,466 # 8002d318 <__func__.0+0x2f8>
    8001514e:	46d150ef          	jal	8002adba <printf>
    80015152:	0003c797          	auipc	a5,0x3c
    80015156:	ebf7c783          	lbu	a5,-321(a5) # 80051011 <excpt+0x1>
    8001515a:	00018597          	auipc	a1,0x18
    8001515e:	19658593          	addi	a1,a1,406 # 8002d2f0 <__func__.0+0x2d0>
    80015162:	cf89                	beqz	a5,8001517c <load_page_fault_1+0x1e8>
    80015164:	6498                	ld	a4,8(s1)
    80015166:	47b5                	li	a5,13
    80015168:	00018597          	auipc	a1,0x18
    8001516c:	17858593          	addi	a1,a1,376 # 8002d2e0 <__func__.0+0x2c0>
    80015170:	00f70663          	beq	a4,a5,8001517c <load_page_fault_1+0x1e8>
    80015174:	00018597          	auipc	a1,0x18
    80015178:	17c58593          	addi	a1,a1,380 # 8002d2f0 <__func__.0+0x2d0>
    8001517c:	00018517          	auipc	a0,0x18
    80015180:	1b450513          	addi	a0,a0,436 # 8002d330 <__func__.0+0x310>
    80015184:	437150ef          	jal	8002adba <printf>
    80015188:	0003c797          	auipc	a5,0x3c
    8001518c:	e897c783          	lbu	a5,-375(a5) # 80051011 <excpt+0x1>
    80015190:	c789                	beqz	a5,8001519a <load_page_fault_1+0x206>
    80015192:	6498                	ld	a4,8(s1)
    80015194:	47b5                	li	a5,13
    80015196:	00f70c63          	beq	a4,a5,800151ae <load_page_fault_1+0x21a>
    8001519a:	00018517          	auipc	a0,0x18
    8001519e:	19e50513          	addi	a0,a0,414 # 8002d338 <__func__.0+0x318>
    800151a2:	419150ef          	jal	8002adba <printf>
    800151a6:	02900513          	li	a0,41
    800151aa:	0ff140ef          	jal	80029aa8 <putchar>
    800151ae:	4529                	li	a0,10
    800151b0:	0f9140ef          	jal	80029aa8 <putchar>
    800151b4:	c411                	beqz	s0,800151c0 <load_page_fault_1+0x22c>
    800151b6:	0003c417          	auipc	s0,0x3c
    800151ba:	e5b44403          	lbu	s0,-421(s0) # 80051011 <excpt+0x1>
    800151be:	e021                	bnez	s0,800151fe <load_page_fault_1+0x26a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800151c0:	000807b7          	lui	a5,0x80
    800151c4:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800151c8:	4401                	li	s0,0

    TEST_END();
    800151ca:	00018597          	auipc	a1,0x18
    800151ce:	12658593          	addi	a1,a1,294 # 8002d2f0 <__func__.0+0x2d0>
    800151d2:	00018517          	auipc	a0,0x18
    800151d6:	1c650513          	addi	a0,a0,454 # 8002d398 <__func__.0+0x378>
    800151da:	3e1150ef          	jal	8002adba <printf>
    800151de:	4511                	li	a0,4
    800151e0:	c8feb0ef          	jal	80000e6e <goto_priv>
    800151e4:	da6ec0ef          	jal	8000178a <reset_state>

}
    800151e8:	60e2                	ld	ra,24(sp)
    800151ea:	8522                	mv	a0,s0
    800151ec:	6442                	ld	s0,16(sp)
    800151ee:	64a2                	ld	s1,8(sp)
    800151f0:	6105                	addi	sp,sp,32
    800151f2:	8082                	ret
    TEST_ASSERT("hs mode load when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800151f4:	6480                	ld	s0,8(s1)
    800151f6:	144d                	addi	s0,s0,-13
    800151f8:	00143413          	seqz	s0,s0
    800151fc:	b705                	j	8001511c <load_page_fault_1+0x188>
    TEST_ASSERT("hs mode load when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800151fe:	6498                	ld	a4,8(s1)
    80015200:	47b5                	li	a5,13
    80015202:	faf71fe3          	bne	a4,a5,800151c0 <load_page_fault_1+0x22c>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015206:	000807b7          	lui	a5,0x80
    8001520a:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001520e:	00018597          	auipc	a1,0x18
    80015212:	0d258593          	addi	a1,a1,210 # 8002d2e0 <__func__.0+0x2c0>
    80015216:	bf75                	j	800151d2 <load_page_fault_1+0x23e>

0000000080015218 <load_page_fault_2>:

bool load_page_fault_2(){
    80015218:	1101                	addi	sp,sp,-32

    TEST_START();
    8001521a:	00017597          	auipc	a1,0x17
    8001521e:	a5658593          	addi	a1,a1,-1450 # 8002bc70 <__func__.20>
    80015222:	00018517          	auipc	a0,0x18
    80015226:	0de50513          	addi	a0,a0,222 # 8002d300 <__func__.0+0x2e0>
bool load_page_fault_2(){
    8001522a:	ec06                	sd	ra,24(sp)
    8001522c:	e822                	sd	s0,16(sp)
    8001522e:	e426                	sd	s1,8(sp)
    TEST_START();
    80015230:	38b150ef          	jal	8002adba <printf>
    80015234:	4529                	li	a0,10
    80015236:	073140ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_HS);
    8001523a:	450d                	li	a0,3
    8001523c:	c33eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80015240:	ba0eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015244:	f38eb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015248:	cdaeb0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    8001524c:	4511                	li	a0,4
    8001524e:	c21eb0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015252:	000407b7          	lui	a5,0x40
    80015256:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001525a:	450d                	li	a0,3
    8001525c:	c13eb0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80015260:	4509                	li	a0,2
    80015262:	b2deb0ef          	jal	80000d8e <set_prev_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015266:	b0deb0ef          	jal	80000d72 <test_setup_except_function>
    8001526a:	000807b7          	lui	a5,0x80
    8001526e:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015270:	07b6                	slli	a5,a5,0xd
    80015272:	6c07c7f3          	.insn	4, 0x6c07c7f3
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    hlvd(addr);
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80015276:	08200593          	li	a1,130
    8001527a:	0001d617          	auipc	a2,0x1d
    8001527e:	28e60613          	addi	a2,a2,654 # 80032508 <__func__.0+0x54e8>
    80015282:	00018517          	auipc	a0,0x18
    80015286:	09650513          	addi	a0,a0,150 # 8002d318 <__func__.0+0x2f8>
    8001528a:	331150ef          	jal	8002adba <printf>
    8001528e:	0003c797          	auipc	a5,0x3c
    80015292:	d837c783          	lbu	a5,-637(a5) # 80051011 <excpt+0x1>
    80015296:	0003c497          	auipc	s1,0x3c
    8001529a:	d7a48493          	addi	s1,s1,-646 # 80051010 <excpt>
    8001529e:	00018597          	auipc	a1,0x18
    800152a2:	05258593          	addi	a1,a1,82 # 8002d2f0 <__func__.0+0x2d0>
    800152a6:	cf89                	beqz	a5,800152c0 <load_page_fault_2+0xa8>
    800152a8:	6498                	ld	a4,8(s1)
    800152aa:	47b5                	li	a5,13
    800152ac:	00018597          	auipc	a1,0x18
    800152b0:	03458593          	addi	a1,a1,52 # 8002d2e0 <__func__.0+0x2c0>
    800152b4:	00f70663          	beq	a4,a5,800152c0 <load_page_fault_2+0xa8>
    800152b8:	00018597          	auipc	a1,0x18
    800152bc:	03858593          	addi	a1,a1,56 # 8002d2f0 <__func__.0+0x2d0>
    800152c0:	00018517          	auipc	a0,0x18
    800152c4:	07050513          	addi	a0,a0,112 # 8002d330 <__func__.0+0x310>
    800152c8:	2f3150ef          	jal	8002adba <printf>
    800152cc:	0003c797          	auipc	a5,0x3c
    800152d0:	d457c783          	lbu	a5,-699(a5) # 80051011 <excpt+0x1>
    800152d4:	c789                	beqz	a5,800152de <load_page_fault_2+0xc6>
    800152d6:	6498                	ld	a4,8(s1)
    800152d8:	47b5                	li	a5,13
    800152da:	00f70c63          	beq	a4,a5,800152f2 <load_page_fault_2+0xda>
    800152de:	00018517          	auipc	a0,0x18
    800152e2:	05a50513          	addi	a0,a0,90 # 8002d338 <__func__.0+0x318>
    800152e6:	2d5150ef          	jal	8002adba <printf>
    800152ea:	02900513          	li	a0,41
    800152ee:	7ba140ef          	jal	80029aa8 <putchar>
    800152f2:	4529                	li	a0,10
    800152f4:	7b4140ef          	jal	80029aa8 <putchar>
    800152f8:	0003c417          	auipc	s0,0x3c
    800152fc:	d1944403          	lbu	s0,-743(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80015300:	00018597          	auipc	a1,0x18
    80015304:	ff058593          	addi	a1,a1,-16 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80015308:	cc11                	beqz	s0,80015324 <load_page_fault_2+0x10c>
    8001530a:	6498                	ld	a4,8(s1)
    8001530c:	47b5                	li	a5,13
    TEST_END();
    8001530e:	00018597          	auipc	a1,0x18
    80015312:	fd258593          	addi	a1,a1,-46 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd u mode page when vsstatus.sum=0 leads to LPF",
    80015316:	00f70763          	beq	a4,a5,80015324 <load_page_fault_2+0x10c>
    8001531a:	4401                	li	s0,0
    TEST_END();
    8001531c:	00018597          	auipc	a1,0x18
    80015320:	fd458593          	addi	a1,a1,-44 # 8002d2f0 <__func__.0+0x2d0>
    80015324:	00018517          	auipc	a0,0x18
    80015328:	07450513          	addi	a0,a0,116 # 8002d398 <__func__.0+0x378>
    8001532c:	28f150ef          	jal	8002adba <printf>
    80015330:	4511                	li	a0,4
    80015332:	b3deb0ef          	jal	80000e6e <goto_priv>
    80015336:	c54ec0ef          	jal	8000178a <reset_state>
}
    8001533a:	60e2                	ld	ra,24(sp)
    8001533c:	8522                	mv	a0,s0
    8001533e:	6442                	ld	s0,16(sp)
    80015340:	64a2                	ld	s1,8(sp)
    80015342:	6105                	addi	sp,sp,32
    80015344:	8082                	ret

0000000080015346 <load_page_fault_3>:

bool load_page_fault_3(){
    80015346:	1141                	addi	sp,sp,-16

    TEST_START();
    80015348:	00017597          	auipc	a1,0x17
    8001534c:	94058593          	addi	a1,a1,-1728 # 8002bc88 <__func__.19>
    80015350:	00018517          	auipc	a0,0x18
    80015354:	fb050513          	addi	a0,a0,-80 # 8002d300 <__func__.0+0x2e0>
bool load_page_fault_3(){
    80015358:	e406                	sd	ra,8(sp)
    8001535a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001535c:	25f150ef          	jal	8002adba <printf>
    80015360:	4529                	li	a0,10
    80015362:	746140ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80015366:	450d                	li	a0,3
    80015368:	b07eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001536c:	a74eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015370:	e0ceb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015374:	baeeb0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    80015378:	4511                	li	a0,4
    8001537a:	af5eb0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    8001537e:	000407b7          	lui	a5,0x40
    80015382:	2007a073          	csrs	vsstatus,a5

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80015386:	450d                	li	a0,3
    80015388:	ae7eb0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8001538c:	4509                	li	a0,2
    8001538e:	a01eb0ef          	jal	80000d8e <set_prev_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80015392:	9e1eb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80015396:	000807b7          	lui	a5,0x80
    8001539a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001539c:	07b6                	slli	a5,a5,0xd
    8001539e:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(addr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800153a2:	08200593          	li	a1,130
    800153a6:	0001d617          	auipc	a2,0x1d
    800153aa:	1a260613          	addi	a2,a2,418 # 80032548 <__func__.0+0x5528>
    800153ae:	00018517          	auipc	a0,0x18
    800153b2:	f6a50513          	addi	a0,a0,-150 # 8002d318 <__func__.0+0x2f8>
    800153b6:	205150ef          	jal	8002adba <printf>
    800153ba:	0003c797          	auipc	a5,0x3c
    800153be:	c577c783          	lbu	a5,-937(a5) # 80051011 <excpt+0x1>
    800153c2:	00018597          	auipc	a1,0x18
    800153c6:	f1e58593          	addi	a1,a1,-226 # 8002d2e0 <__func__.0+0x2c0>
    800153ca:	c789                	beqz	a5,800153d4 <load_page_fault_3+0x8e>
    800153cc:	00018597          	auipc	a1,0x18
    800153d0:	f2458593          	addi	a1,a1,-220 # 8002d2f0 <__func__.0+0x2d0>
    800153d4:	00018517          	auipc	a0,0x18
    800153d8:	f5c50513          	addi	a0,a0,-164 # 8002d330 <__func__.0+0x310>
    800153dc:	1df150ef          	jal	8002adba <printf>
    800153e0:	0003c797          	auipc	a5,0x3c
    800153e4:	c317c783          	lbu	a5,-975(a5) # 80051011 <excpt+0x1>
    800153e8:	e7a1                	bnez	a5,80015430 <load_page_fault_3+0xea>
    800153ea:	4529                	li	a0,10
    800153ec:	6bc140ef          	jal	80029aa8 <putchar>
    800153f0:	0003c797          	auipc	a5,0x3c
    800153f4:	c217c783          	lbu	a5,-991(a5) # 80051011 <excpt+0x1>
    800153f8:	e795                	bnez	a5,80015424 <load_page_fault_3+0xde>
    800153fa:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800153fc:	00018597          	auipc	a1,0x18
    80015400:	ee458593          	addi	a1,a1,-284 # 8002d2e0 <__func__.0+0x2c0>
    80015404:	00018517          	auipc	a0,0x18
    80015408:	f9450513          	addi	a0,a0,-108 # 8002d398 <__func__.0+0x378>
    8001540c:	1af150ef          	jal	8002adba <printf>
    80015410:	4511                	li	a0,4
    80015412:	a5deb0ef          	jal	80000e6e <goto_priv>
    80015416:	b74ec0ef          	jal	8000178a <reset_state>
}
    8001541a:	60a2                	ld	ra,8(sp)
    8001541c:	8522                	mv	a0,s0
    8001541e:	6402                	ld	s0,0(sp)
    80015420:	0141                	addi	sp,sp,16
    80015422:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015424:	4401                	li	s0,0
    TEST_END();
    80015426:	00018597          	auipc	a1,0x18
    8001542a:	eca58593          	addi	a1,a1,-310 # 8002d2f0 <__func__.0+0x2d0>
    8001542e:	bfd9                	j	80015404 <load_page_fault_3+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    80015430:	00018517          	auipc	a0,0x18
    80015434:	f0850513          	addi	a0,a0,-248 # 8002d338 <__func__.0+0x318>
    80015438:	183150ef          	jal	8002adba <printf>
    8001543c:	02900513          	li	a0,41
    80015440:	668140ef          	jal	80029aa8 <putchar>
    80015444:	b75d                	j	800153ea <load_page_fault_3+0xa4>

0000000080015446 <load_page_fault_4>:


bool load_page_fault_4(){
    80015446:	1101                	addi	sp,sp,-32

    TEST_START();
    80015448:	00017597          	auipc	a1,0x17
    8001544c:	85858593          	addi	a1,a1,-1960 # 8002bca0 <__func__.18>
    80015450:	00018517          	auipc	a0,0x18
    80015454:	eb050513          	addi	a0,a0,-336 # 8002d300 <__func__.0+0x2e0>
bool load_page_fault_4(){
    80015458:	ec06                	sd	ra,24(sp)
    8001545a:	e822                	sd	s0,16(sp)
    8001545c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001545e:	15d150ef          	jal	8002adba <printf>
    80015462:	4529                	li	a0,10
    80015464:	644140ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS); 
    80015468:	450d                	li	a0,3
    8001546a:	a05eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001546e:	972eb0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015472:	d0aeb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015476:	aaceb0ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    8001547a:	4509                	li	a0,2
    8001547c:	9f3eb0ef          	jal	80000e6e <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015480:	8f3eb0ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80015484:	400197b7          	lui	a5,0x40019
    80015488:	078a                	slli	a5,a5,0x2
    8001548a:	00078783          	lb	a5,0(a5) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    lb(addr);
    TEST_ASSERT("vs mode lb when pte.v=0 leads to LPF",
    8001548e:	08200593          	li	a1,130
    80015492:	0001d617          	auipc	a2,0x1d
    80015496:	0ee60613          	addi	a2,a2,238 # 80032580 <__func__.0+0x5560>
    8001549a:	00018517          	auipc	a0,0x18
    8001549e:	e7e50513          	addi	a0,a0,-386 # 8002d318 <__func__.0+0x2f8>
    800154a2:	119150ef          	jal	8002adba <printf>
    800154a6:	0003c797          	auipc	a5,0x3c
    800154aa:	b6b7c783          	lbu	a5,-1173(a5) # 80051011 <excpt+0x1>
    800154ae:	0003c497          	auipc	s1,0x3c
    800154b2:	b6248493          	addi	s1,s1,-1182 # 80051010 <excpt>
    800154b6:	00018597          	auipc	a1,0x18
    800154ba:	e3a58593          	addi	a1,a1,-454 # 8002d2f0 <__func__.0+0x2d0>
    800154be:	cf89                	beqz	a5,800154d8 <load_page_fault_4+0x92>
    800154c0:	6498                	ld	a4,8(s1)
    800154c2:	47b5                	li	a5,13
    800154c4:	00018597          	auipc	a1,0x18
    800154c8:	e1c58593          	addi	a1,a1,-484 # 8002d2e0 <__func__.0+0x2c0>
    800154cc:	00f70663          	beq	a4,a5,800154d8 <load_page_fault_4+0x92>
    800154d0:	00018597          	auipc	a1,0x18
    800154d4:	e2058593          	addi	a1,a1,-480 # 8002d2f0 <__func__.0+0x2d0>
    800154d8:	00018517          	auipc	a0,0x18
    800154dc:	e5850513          	addi	a0,a0,-424 # 8002d330 <__func__.0+0x310>
    800154e0:	0db150ef          	jal	8002adba <printf>
    800154e4:	0003c797          	auipc	a5,0x3c
    800154e8:	b2d7c783          	lbu	a5,-1235(a5) # 80051011 <excpt+0x1>
    800154ec:	c789                	beqz	a5,800154f6 <load_page_fault_4+0xb0>
    800154ee:	6498                	ld	a4,8(s1)
    800154f0:	47b5                	li	a5,13
    800154f2:	00f70c63          	beq	a4,a5,8001550a <load_page_fault_4+0xc4>
    800154f6:	00018517          	auipc	a0,0x18
    800154fa:	e4250513          	addi	a0,a0,-446 # 8002d338 <__func__.0+0x318>
    800154fe:	0bd150ef          	jal	8002adba <printf>
    80015502:	02900513          	li	a0,41
    80015506:	5a2140ef          	jal	80029aa8 <putchar>
    8001550a:	4529                	li	a0,10
    8001550c:	59c140ef          	jal	80029aa8 <putchar>
    80015510:	0003c797          	auipc	a5,0x3c
    80015514:	b017c783          	lbu	a5,-1279(a5) # 80051011 <excpt+0x1>
    80015518:	4401                	li	s0,0
    8001551a:	c789                	beqz	a5,80015524 <load_page_fault_4+0xde>
    8001551c:	6480                	ld	s0,8(s1)
    8001551e:	144d                	addi	s0,s0,-13
    80015520:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LPF
    );


    //执行ld令时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    TEST_SETUP_EXCEPT();
    80015524:	84feb0ef          	jal	80000d72 <test_setup_except_function>
    addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80015528:	000807b7          	lui	a5,0x80
    8001552c:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80015530:	001007b7          	lui	a5,0x100
    80015534:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    80015538:	07b2                	slli	a5,a5,0xc
    8001553a:	0007b783          	ld	a5,0(a5)
    ld(addr);   
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    8001553e:	08200593          	li	a1,130
    80015542:	0001d617          	auipc	a2,0x1d
    80015546:	06660613          	addi	a2,a2,102 # 800325a8 <__func__.0+0x5588>
    8001554a:	00018517          	auipc	a0,0x18
    8001554e:	dce50513          	addi	a0,a0,-562 # 8002d318 <__func__.0+0x2f8>
    80015552:	069150ef          	jal	8002adba <printf>
    80015556:	0003c797          	auipc	a5,0x3c
    8001555a:	abb7c783          	lbu	a5,-1349(a5) # 80051011 <excpt+0x1>
    8001555e:	00018597          	auipc	a1,0x18
    80015562:	d9258593          	addi	a1,a1,-622 # 8002d2f0 <__func__.0+0x2d0>
    80015566:	cf89                	beqz	a5,80015580 <load_page_fault_4+0x13a>
    80015568:	6498                	ld	a4,8(s1)
    8001556a:	47b5                	li	a5,13
    8001556c:	00018597          	auipc	a1,0x18
    80015570:	d7458593          	addi	a1,a1,-652 # 8002d2e0 <__func__.0+0x2c0>
    80015574:	00f70663          	beq	a4,a5,80015580 <load_page_fault_4+0x13a>
    80015578:	00018597          	auipc	a1,0x18
    8001557c:	d7858593          	addi	a1,a1,-648 # 8002d2f0 <__func__.0+0x2d0>
    80015580:	00018517          	auipc	a0,0x18
    80015584:	db050513          	addi	a0,a0,-592 # 8002d330 <__func__.0+0x310>
    80015588:	033150ef          	jal	8002adba <printf>
    8001558c:	0003c797          	auipc	a5,0x3c
    80015590:	a857c783          	lbu	a5,-1403(a5) # 80051011 <excpt+0x1>
    80015594:	c789                	beqz	a5,8001559e <load_page_fault_4+0x158>
    80015596:	6498                	ld	a4,8(s1)
    80015598:	47b5                	li	a5,13
    8001559a:	00f70c63          	beq	a4,a5,800155b2 <load_page_fault_4+0x16c>
    8001559e:	00018517          	auipc	a0,0x18
    800155a2:	d9a50513          	addi	a0,a0,-614 # 8002d338 <__func__.0+0x318>
    800155a6:	015150ef          	jal	8002adba <printf>
    800155aa:	02900513          	li	a0,41
    800155ae:	4fa140ef          	jal	80029aa8 <putchar>
    800155b2:	4529                	li	a0,10
    800155b4:	4f4140ef          	jal	80029aa8 <putchar>
    800155b8:	c801                	beqz	s0,800155c8 <load_page_fault_4+0x182>
    800155ba:	0003c797          	auipc	a5,0x3c
    800155be:	a577c783          	lbu	a5,-1449(a5) # 80051011 <excpt+0x1>
    800155c2:	4401                	li	s0,0
    800155c4:	0c079e63          	bnez	a5,800156a0 <load_page_fault_4+0x25a>
        excpt.cause == CAUSE_LPF
    );

    //执行lh指令时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    goto_priv(PRIV_VS);
    800155c8:	4509                	li	a0,2
    800155ca:	8a5eb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800155ce:	fa4eb0ef          	jal	80000d72 <test_setup_except_function>
    addr = hs_page_base(VSV_GV);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800155d2:	000807b7          	lui	a5,0x80
    800155d6:	1007a073          	csrs	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800155da:	001007b7          	lui	a5,0x100
    800155de:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    800155e0:	07b2                	slli	a5,a5,0xc
    800155e2:	00079783          	lh	a5,0(a5)
    lh(addr);
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800155e6:	08200593          	li	a1,130
    800155ea:	0001d617          	auipc	a2,0x1d
    800155ee:	ff660613          	addi	a2,a2,-10 # 800325e0 <__func__.0+0x55c0>
    800155f2:	00018517          	auipc	a0,0x18
    800155f6:	d2650513          	addi	a0,a0,-730 # 8002d318 <__func__.0+0x2f8>
    800155fa:	7c0150ef          	jal	8002adba <printf>
    800155fe:	0003c797          	auipc	a5,0x3c
    80015602:	a137c783          	lbu	a5,-1517(a5) # 80051011 <excpt+0x1>
    80015606:	00018597          	auipc	a1,0x18
    8001560a:	cea58593          	addi	a1,a1,-790 # 8002d2f0 <__func__.0+0x2d0>
    8001560e:	cf89                	beqz	a5,80015628 <load_page_fault_4+0x1e2>
    80015610:	6498                	ld	a4,8(s1)
    80015612:	47b5                	li	a5,13
    80015614:	00018597          	auipc	a1,0x18
    80015618:	ccc58593          	addi	a1,a1,-820 # 8002d2e0 <__func__.0+0x2c0>
    8001561c:	00f70663          	beq	a4,a5,80015628 <load_page_fault_4+0x1e2>
    80015620:	00018597          	auipc	a1,0x18
    80015624:	cd058593          	addi	a1,a1,-816 # 8002d2f0 <__func__.0+0x2d0>
    80015628:	00018517          	auipc	a0,0x18
    8001562c:	d0850513          	addi	a0,a0,-760 # 8002d330 <__func__.0+0x310>
    80015630:	78a150ef          	jal	8002adba <printf>
    80015634:	0003c797          	auipc	a5,0x3c
    80015638:	9dd7c783          	lbu	a5,-1571(a5) # 80051011 <excpt+0x1>
    8001563c:	c789                	beqz	a5,80015646 <load_page_fault_4+0x200>
    8001563e:	6498                	ld	a4,8(s1)
    80015640:	47b5                	li	a5,13
    80015642:	00f70c63          	beq	a4,a5,8001565a <load_page_fault_4+0x214>
    80015646:	00018517          	auipc	a0,0x18
    8001564a:	cf250513          	addi	a0,a0,-782 # 8002d338 <__func__.0+0x318>
    8001564e:	76c150ef          	jal	8002adba <printf>
    80015652:	02900513          	li	a0,41
    80015656:	452140ef          	jal	80029aa8 <putchar>
    8001565a:	4529                	li	a0,10
    8001565c:	44c140ef          	jal	80029aa8 <putchar>
    80015660:	c411                	beqz	s0,8001566c <load_page_fault_4+0x226>
    80015662:	0003c417          	auipc	s0,0x3c
    80015666:	9af44403          	lbu	s0,-1617(s0) # 80051011 <excpt+0x1>
    8001566a:	e021                	bnez	s0,800156aa <load_page_fault_4+0x264>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001566c:	000807b7          	lui	a5,0x80
    80015670:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    80015674:	4401                	li	s0,0

    TEST_END();
    80015676:	00018597          	auipc	a1,0x18
    8001567a:	c7a58593          	addi	a1,a1,-902 # 8002d2f0 <__func__.0+0x2d0>
    8001567e:	00018517          	auipc	a0,0x18
    80015682:	d1a50513          	addi	a0,a0,-742 # 8002d398 <__func__.0+0x378>
    80015686:	734150ef          	jal	8002adba <printf>
    8001568a:	4511                	li	a0,4
    8001568c:	fe2eb0ef          	jal	80000e6e <goto_priv>
    80015690:	8faec0ef          	jal	8000178a <reset_state>

}
    80015694:	60e2                	ld	ra,24(sp)
    80015696:	8522                	mv	a0,s0
    80015698:	6442                	ld	s0,16(sp)
    8001569a:	64a2                	ld	s1,8(sp)
    8001569c:	6105                	addi	sp,sp,32
    8001569e:	8082                	ret
    TEST_ASSERT("vs mode ld when sstatus.mxr=0 and pte.r=0 leads to LPF",
    800156a0:	6480                	ld	s0,8(s1)
    800156a2:	144d                	addi	s0,s0,-13
    800156a4:	00143413          	seqz	s0,s0
    800156a8:	b705                	j	800155c8 <load_page_fault_4+0x182>
    TEST_ASSERT("vs mode lh when sstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    800156aa:	6498                	ld	a4,8(s1)
    800156ac:	47b5                	li	a5,13
    800156ae:	faf71fe3          	bne	a4,a5,8001566c <load_page_fault_4+0x226>
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800156b2:	000807b7          	lui	a5,0x80
    800156b6:	1007b073          	csrc	sstatus,a5
    TEST_END();
    800156ba:	00018597          	auipc	a1,0x18
    800156be:	c2658593          	addi	a1,a1,-986 # 8002d2e0 <__func__.0+0x2c0>
    800156c2:	bf75                	j	8001567e <load_page_fault_4+0x238>

00000000800156c4 <load_page_fault_5>:

bool load_page_fault_5(){
    800156c4:	1101                	addi	sp,sp,-32

    TEST_START();
    800156c6:	00016597          	auipc	a1,0x16
    800156ca:	5f258593          	addi	a1,a1,1522 # 8002bcb8 <__func__.17>
    800156ce:	00018517          	auipc	a0,0x18
    800156d2:	c3250513          	addi	a0,a0,-974 # 8002d300 <__func__.0+0x2e0>
bool load_page_fault_5(){
    800156d6:	ec06                	sd	ra,24(sp)
    800156d8:	e822                	sd	s0,16(sp)
    800156da:	e426                	sd	s1,8(sp)
    TEST_START();
    800156dc:	6de150ef          	jal	8002adba <printf>
    800156e0:	4529                	li	a0,10
    800156e2:	3c6140ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_HS);
    800156e6:	450d                	li	a0,3
    800156e8:	f86eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800156ec:	ef5ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800156f0:	a8ceb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    800156f4:	82eeb0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    800156f8:	4511                	li	a0,4
    800156fa:	f74eb0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800156fe:	000407b7          	lui	a5,0x40
    80015702:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80015706:	4509                	li	a0,2
    80015708:	f66eb0ef          	jal	80000e6e <goto_priv>

    //执行lbu指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001570c:	e66eb0ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lbu, "lbu", uint8_t);
    80015710:	000807b7          	lui	a5,0x80
    80015714:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015716:	07b6                	slli	a5,a5,0xd
    80015718:	0007c783          	lbu	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    lbu(addr);
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    8001571c:	08200593          	li	a1,130
    80015720:	0001d617          	auipc	a2,0x1d
    80015724:	f0860613          	addi	a2,a2,-248 # 80032628 <__func__.0+0x5608>
    80015728:	00018517          	auipc	a0,0x18
    8001572c:	bf050513          	addi	a0,a0,-1040 # 8002d318 <__func__.0+0x2f8>
    80015730:	68a150ef          	jal	8002adba <printf>
    80015734:	0003c797          	auipc	a5,0x3c
    80015738:	8dd7c783          	lbu	a5,-1827(a5) # 80051011 <excpt+0x1>
    8001573c:	0003c497          	auipc	s1,0x3c
    80015740:	8d448493          	addi	s1,s1,-1836 # 80051010 <excpt>
    80015744:	00018597          	auipc	a1,0x18
    80015748:	bac58593          	addi	a1,a1,-1108 # 8002d2f0 <__func__.0+0x2d0>
    8001574c:	cf89                	beqz	a5,80015766 <load_page_fault_5+0xa2>
    8001574e:	6498                	ld	a4,8(s1)
    80015750:	47b5                	li	a5,13
    80015752:	00018597          	auipc	a1,0x18
    80015756:	b8e58593          	addi	a1,a1,-1138 # 8002d2e0 <__func__.0+0x2c0>
    8001575a:	00f70663          	beq	a4,a5,80015766 <load_page_fault_5+0xa2>
    8001575e:	00018597          	auipc	a1,0x18
    80015762:	b9258593          	addi	a1,a1,-1134 # 8002d2f0 <__func__.0+0x2d0>
    80015766:	00018517          	auipc	a0,0x18
    8001576a:	bca50513          	addi	a0,a0,-1078 # 8002d330 <__func__.0+0x310>
    8001576e:	64c150ef          	jal	8002adba <printf>
    80015772:	0003c797          	auipc	a5,0x3c
    80015776:	89f7c783          	lbu	a5,-1889(a5) # 80051011 <excpt+0x1>
    8001577a:	c789                	beqz	a5,80015784 <load_page_fault_5+0xc0>
    8001577c:	6498                	ld	a4,8(s1)
    8001577e:	47b5                	li	a5,13
    80015780:	00f70c63          	beq	a4,a5,80015798 <load_page_fault_5+0xd4>
    80015784:	00018517          	auipc	a0,0x18
    80015788:	bb450513          	addi	a0,a0,-1100 # 8002d338 <__func__.0+0x318>
    8001578c:	62e150ef          	jal	8002adba <printf>
    80015790:	02900513          	li	a0,41
    80015794:	314140ef          	jal	80029aa8 <putchar>
    80015798:	4529                	li	a0,10
    8001579a:	30e140ef          	jal	80029aa8 <putchar>
    8001579e:	0003c417          	auipc	s0,0x3c
    800157a2:	87344403          	lbu	s0,-1933(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800157a6:	00018597          	auipc	a1,0x18
    800157aa:	b4a58593          	addi	a1,a1,-1206 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    800157ae:	cc11                	beqz	s0,800157ca <load_page_fault_5+0x106>
    800157b0:	6498                	ld	a4,8(s1)
    800157b2:	47b5                	li	a5,13
    TEST_END();
    800157b4:	00018597          	auipc	a1,0x18
    800157b8:	b2c58593          	addi	a1,a1,-1236 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=0 leads to LPF",
    800157bc:	00f70763          	beq	a4,a5,800157ca <load_page_fault_5+0x106>
    800157c0:	4401                	li	s0,0
    TEST_END();
    800157c2:	00018597          	auipc	a1,0x18
    800157c6:	b2e58593          	addi	a1,a1,-1234 # 8002d2f0 <__func__.0+0x2d0>
    800157ca:	00018517          	auipc	a0,0x18
    800157ce:	bce50513          	addi	a0,a0,-1074 # 8002d398 <__func__.0+0x378>
    800157d2:	5e8150ef          	jal	8002adba <printf>
    800157d6:	4511                	li	a0,4
    800157d8:	e96eb0ef          	jal	80000e6e <goto_priv>
    800157dc:	fafeb0ef          	jal	8000178a <reset_state>
}
    800157e0:	60e2                	ld	ra,24(sp)
    800157e2:	8522                	mv	a0,s0
    800157e4:	6442                	ld	s0,16(sp)
    800157e6:	64a2                	ld	s1,8(sp)
    800157e8:	6105                	addi	sp,sp,32
    800157ea:	8082                	ret

00000000800157ec <load_page_fault_6>:

bool load_page_fault_6(){
    800157ec:	1141                	addi	sp,sp,-16

    TEST_START();
    800157ee:	00016597          	auipc	a1,0x16
    800157f2:	4e258593          	addi	a1,a1,1250 # 8002bcd0 <__func__.16>
    800157f6:	00018517          	auipc	a0,0x18
    800157fa:	b0a50513          	addi	a0,a0,-1270 # 8002d300 <__func__.0+0x2e0>
bool load_page_fault_6(){
    800157fe:	e406                	sd	ra,8(sp)
    80015800:	e022                	sd	s0,0(sp)
    TEST_START();
    80015802:	5b8150ef          	jal	8002adba <printf>
    80015806:	4529                	li	a0,10
    80015808:	2a0140ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001580c:	450d                	li	a0,3
    8001580e:	e60eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80015812:	dcfea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015816:	966eb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001581a:	f09ea0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    8001581e:	4511                	li	a0,4
    80015820:	e4eeb0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015824:	000407b7          	lui	a5,0x40
    80015828:	2007a073          	csrs	vsstatus,a5

    //执行lbu指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_VS);
    8001582c:	4509                	li	a0,2
    8001582e:	e40eb0ef          	jal	80000e6e <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80015832:	d40eb0ef          	jal	80000d72 <test_setup_except_function>
    80015836:	000807b7          	lui	a5,0x80
    8001583a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001583c:	07b6                	slli	a5,a5,0xd
    8001583e:	0007c783          	lbu	a5,0(a5)
    lbu(addr);

    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    80015842:	08200593          	li	a1,130
    80015846:	0001d617          	auipc	a2,0x1d
    8001584a:	e2260613          	addi	a2,a2,-478 # 80032668 <__func__.0+0x5648>
    8001584e:	00018517          	auipc	a0,0x18
    80015852:	aca50513          	addi	a0,a0,-1334 # 8002d318 <__func__.0+0x2f8>
    80015856:	564150ef          	jal	8002adba <printf>
    8001585a:	0003b797          	auipc	a5,0x3b
    8001585e:	7b77c783          	lbu	a5,1975(a5) # 80051011 <excpt+0x1>
    80015862:	00018597          	auipc	a1,0x18
    80015866:	a7e58593          	addi	a1,a1,-1410 # 8002d2e0 <__func__.0+0x2c0>
    8001586a:	c789                	beqz	a5,80015874 <load_page_fault_6+0x88>
    8001586c:	00018597          	auipc	a1,0x18
    80015870:	a8458593          	addi	a1,a1,-1404 # 8002d2f0 <__func__.0+0x2d0>
    80015874:	00018517          	auipc	a0,0x18
    80015878:	abc50513          	addi	a0,a0,-1348 # 8002d330 <__func__.0+0x310>
    8001587c:	53e150ef          	jal	8002adba <printf>
    80015880:	0003b797          	auipc	a5,0x3b
    80015884:	7917c783          	lbu	a5,1937(a5) # 80051011 <excpt+0x1>
    80015888:	e7a1                	bnez	a5,800158d0 <load_page_fault_6+0xe4>
    8001588a:	4529                	li	a0,10
    8001588c:	21c140ef          	jal	80029aa8 <putchar>
    80015890:	0003b797          	auipc	a5,0x3b
    80015894:	7817c783          	lbu	a5,1921(a5) # 80051011 <excpt+0x1>
    80015898:	e795                	bnez	a5,800158c4 <load_page_fault_6+0xd8>
    8001589a:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001589c:	00018597          	auipc	a1,0x18
    800158a0:	a4458593          	addi	a1,a1,-1468 # 8002d2e0 <__func__.0+0x2c0>
    800158a4:	00018517          	auipc	a0,0x18
    800158a8:	af450513          	addi	a0,a0,-1292 # 8002d398 <__func__.0+0x378>
    800158ac:	50e150ef          	jal	8002adba <printf>
    800158b0:	4511                	li	a0,4
    800158b2:	dbceb0ef          	jal	80000e6e <goto_priv>
    800158b6:	ed5eb0ef          	jal	8000178a <reset_state>
}
    800158ba:	60a2                	ld	ra,8(sp)
    800158bc:	8522                	mv	a0,s0
    800158be:	6402                	ld	s0,0(sp)
    800158c0:	0141                	addi	sp,sp,16
    800158c2:	8082                	ret
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    800158c4:	4401                	li	s0,0
    TEST_END();
    800158c6:	00018597          	auipc	a1,0x18
    800158ca:	a2a58593          	addi	a1,a1,-1494 # 8002d2f0 <__func__.0+0x2d0>
    800158ce:	bfd9                	j	800158a4 <load_page_fault_6+0xb8>
    TEST_ASSERT("vs mode lbu u mode page when vsstatus.sum=1 successful",
    800158d0:	00018517          	auipc	a0,0x18
    800158d4:	a6850513          	addi	a0,a0,-1432 # 8002d338 <__func__.0+0x318>
    800158d8:	4e2150ef          	jal	8002adba <printf>
    800158dc:	02900513          	li	a0,41
    800158e0:	1c8140ef          	jal	80029aa8 <putchar>
    800158e4:	b75d                	j	8001588a <load_page_fault_6+0x9e>

00000000800158e6 <load_page_fault_7>:


bool load_page_fault_7(){
    800158e6:	1101                	addi	sp,sp,-32

    TEST_START();
    800158e8:	00016597          	auipc	a1,0x16
    800158ec:	40058593          	addi	a1,a1,1024 # 8002bce8 <__func__.15>
    800158f0:	00018517          	auipc	a0,0x18
    800158f4:	a1050513          	addi	a0,a0,-1520 # 8002d300 <__func__.0+0x2e0>
bool load_page_fault_7(){
    800158f8:	ec06                	sd	ra,24(sp)
    800158fa:	e822                	sd	s0,16(sp)
    800158fc:	e426                	sd	s1,8(sp)
    TEST_START();
    800158fe:	4bc150ef          	jal	8002adba <printf>
    80015902:	4529                	li	a0,10
    80015904:	1a4140ef          	jal	80029aa8 <putchar>


    goto_priv(PRIV_HS);
    80015908:	450d                	li	a0,3
    8001590a:	d64eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001590e:	cd3ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015912:	86aeb0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015916:	e0dea0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    8001591a:	4511                	li	a0,4
    8001591c:	d52eb0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80015920:	000407b7          	lui	a5,0x40
    80015924:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80015928:	450d                	li	a0,3
    8001592a:	d44eb0ef          	jal	80000e6e <goto_priv>

    //执行hlvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    8001592e:	c44eb0ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    80015932:	000807b7          	lui	a5,0x80
    80015936:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015938:	07b6                	slli	a5,a5,0xd
    8001593a:	0007b783          	ld	a5,0(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    
    ld(addr);
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    8001593e:	08200593          	li	a1,130
    80015942:	0001d617          	auipc	a2,0x1d
    80015946:	d5e60613          	addi	a2,a2,-674 # 800326a0 <__func__.0+0x5680>
    8001594a:	00018517          	auipc	a0,0x18
    8001594e:	9ce50513          	addi	a0,a0,-1586 # 8002d318 <__func__.0+0x2f8>
    80015952:	468150ef          	jal	8002adba <printf>
    80015956:	0003b797          	auipc	a5,0x3b
    8001595a:	6bb7c783          	lbu	a5,1723(a5) # 80051011 <excpt+0x1>
    8001595e:	0003b497          	auipc	s1,0x3b
    80015962:	6b248493          	addi	s1,s1,1714 # 80051010 <excpt>
    80015966:	00018597          	auipc	a1,0x18
    8001596a:	98a58593          	addi	a1,a1,-1654 # 8002d2f0 <__func__.0+0x2d0>
    8001596e:	cf89                	beqz	a5,80015988 <load_page_fault_7+0xa2>
    80015970:	6498                	ld	a4,8(s1)
    80015972:	47b5                	li	a5,13
    80015974:	00018597          	auipc	a1,0x18
    80015978:	96c58593          	addi	a1,a1,-1684 # 8002d2e0 <__func__.0+0x2c0>
    8001597c:	00f70663          	beq	a4,a5,80015988 <load_page_fault_7+0xa2>
    80015980:	00018597          	auipc	a1,0x18
    80015984:	97058593          	addi	a1,a1,-1680 # 8002d2f0 <__func__.0+0x2d0>
    80015988:	00018517          	auipc	a0,0x18
    8001598c:	9a850513          	addi	a0,a0,-1624 # 8002d330 <__func__.0+0x310>
    80015990:	42a150ef          	jal	8002adba <printf>
    80015994:	0003b797          	auipc	a5,0x3b
    80015998:	67d7c783          	lbu	a5,1661(a5) # 80051011 <excpt+0x1>
    8001599c:	c789                	beqz	a5,800159a6 <load_page_fault_7+0xc0>
    8001599e:	6498                	ld	a4,8(s1)
    800159a0:	47b5                	li	a5,13
    800159a2:	00f70c63          	beq	a4,a5,800159ba <load_page_fault_7+0xd4>
    800159a6:	00018517          	auipc	a0,0x18
    800159aa:	99250513          	addi	a0,a0,-1646 # 8002d338 <__func__.0+0x318>
    800159ae:	40c150ef          	jal	8002adba <printf>
    800159b2:	02900513          	li	a0,41
    800159b6:	0f2140ef          	jal	80029aa8 <putchar>
    800159ba:	4529                	li	a0,10
    800159bc:	0ec140ef          	jal	80029aa8 <putchar>
    800159c0:	0003b417          	auipc	s0,0x3b
    800159c4:	65144403          	lbu	s0,1617(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    800159c8:	00018597          	auipc	a1,0x18
    800159cc:	92858593          	addi	a1,a1,-1752 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    800159d0:	cc11                	beqz	s0,800159ec <load_page_fault_7+0x106>
    800159d2:	6498                	ld	a4,8(s1)
    800159d4:	47b5                	li	a5,13
    TEST_END();
    800159d6:	00018597          	auipc	a1,0x18
    800159da:	90a58593          	addi	a1,a1,-1782 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=0 leads to LPF",
    800159de:	00f70763          	beq	a4,a5,800159ec <load_page_fault_7+0x106>
    800159e2:	4401                	li	s0,0
    TEST_END();
    800159e4:	00018597          	auipc	a1,0x18
    800159e8:	90c58593          	addi	a1,a1,-1780 # 8002d2f0 <__func__.0+0x2d0>
    800159ec:	00018517          	auipc	a0,0x18
    800159f0:	9ac50513          	addi	a0,a0,-1620 # 8002d398 <__func__.0+0x378>
    800159f4:	3c6150ef          	jal	8002adba <printf>
    800159f8:	4511                	li	a0,4
    800159fa:	c74eb0ef          	jal	80000e6e <goto_priv>
    800159fe:	d8deb0ef          	jal	8000178a <reset_state>
}
    80015a02:	60e2                	ld	ra,24(sp)
    80015a04:	8522                	mv	a0,s0
    80015a06:	6442                	ld	s0,16(sp)
    80015a08:	64a2                	ld	s1,8(sp)
    80015a0a:	6105                	addi	sp,sp,32
    80015a0c:	8082                	ret

0000000080015a0e <load_page_fault_8>:

bool load_page_fault_8(){
    80015a0e:	1141                	addi	sp,sp,-16

    TEST_START();
    80015a10:	00016597          	auipc	a1,0x16
    80015a14:	2f058593          	addi	a1,a1,752 # 8002bd00 <__func__.14>
    80015a18:	00018517          	auipc	a0,0x18
    80015a1c:	8e850513          	addi	a0,a0,-1816 # 8002d300 <__func__.0+0x2e0>
bool load_page_fault_8(){
    80015a20:	e406                	sd	ra,8(sp)
    80015a22:	e022                	sd	s0,0(sp)
    TEST_START();
    80015a24:	396150ef          	jal	8002adba <printf>
    80015a28:	4529                	li	a0,10
    80015a2a:	07e140ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80015a2e:	450d                	li	a0,3
    80015a30:	c3eeb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80015a34:	badea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015a38:	f45ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015a3c:	ce7ea0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    80015a40:	4511                	li	a0,4
    80015a42:	c2ceb0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80015a46:	000407b7          	lui	a5,0x40
    80015a4a:	3007a073          	csrs	mstatus,a5

    //执行ld指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    goto_priv(PRIV_HS);
    80015a4e:	450d                	li	a0,3
    80015a50:	c1eeb0ef          	jal	80000e6e <goto_priv>
    
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    TEST_SETUP_EXCEPT();
    80015a54:	b1eeb0ef          	jal	80000d72 <test_setup_except_function>
    80015a58:	000807b7          	lui	a5,0x80
    80015a5c:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80015a5e:	07b6                	slli	a5,a5,0xd
    80015a60:	0007b783          	ld	a5,0(a5)
    ld(addr);

    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015a64:	08200593          	li	a1,130
    80015a68:	0001d617          	auipc	a2,0x1d
    80015a6c:	c7060613          	addi	a2,a2,-912 # 800326d8 <__func__.0+0x56b8>
    80015a70:	00018517          	auipc	a0,0x18
    80015a74:	8a850513          	addi	a0,a0,-1880 # 8002d318 <__func__.0+0x2f8>
    80015a78:	342150ef          	jal	8002adba <printf>
    80015a7c:	0003b797          	auipc	a5,0x3b
    80015a80:	5957c783          	lbu	a5,1429(a5) # 80051011 <excpt+0x1>
    80015a84:	00018597          	auipc	a1,0x18
    80015a88:	85c58593          	addi	a1,a1,-1956 # 8002d2e0 <__func__.0+0x2c0>
    80015a8c:	c789                	beqz	a5,80015a96 <load_page_fault_8+0x88>
    80015a8e:	00018597          	auipc	a1,0x18
    80015a92:	86258593          	addi	a1,a1,-1950 # 8002d2f0 <__func__.0+0x2d0>
    80015a96:	00018517          	auipc	a0,0x18
    80015a9a:	89a50513          	addi	a0,a0,-1894 # 8002d330 <__func__.0+0x310>
    80015a9e:	31c150ef          	jal	8002adba <printf>
    80015aa2:	0003b797          	auipc	a5,0x3b
    80015aa6:	56f7c783          	lbu	a5,1391(a5) # 80051011 <excpt+0x1>
    80015aaa:	e7a1                	bnez	a5,80015af2 <load_page_fault_8+0xe4>
    80015aac:	4529                	li	a0,10
    80015aae:	7fb130ef          	jal	80029aa8 <putchar>
    80015ab2:	0003b797          	auipc	a5,0x3b
    80015ab6:	55f7c783          	lbu	a5,1375(a5) # 80051011 <excpt+0x1>
    80015aba:	e795                	bnez	a5,80015ae6 <load_page_fault_8+0xd8>
    80015abc:	4405                	li	s0,1



    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015abe:	00018597          	auipc	a1,0x18
    80015ac2:	82258593          	addi	a1,a1,-2014 # 8002d2e0 <__func__.0+0x2c0>
    80015ac6:	00018517          	auipc	a0,0x18
    80015aca:	8d250513          	addi	a0,a0,-1838 # 8002d398 <__func__.0+0x378>
    80015ace:	2ec150ef          	jal	8002adba <printf>
    80015ad2:	4511                	li	a0,4
    80015ad4:	b9aeb0ef          	jal	80000e6e <goto_priv>
    80015ad8:	cb3eb0ef          	jal	8000178a <reset_state>
}
    80015adc:	60a2                	ld	ra,8(sp)
    80015ade:	8522                	mv	a0,s0
    80015ae0:	6402                	ld	s0,0(sp)
    80015ae2:	0141                	addi	sp,sp,16
    80015ae4:	8082                	ret
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015ae6:	4401                	li	s0,0
    TEST_END();
    80015ae8:	00018597          	auipc	a1,0x18
    80015aec:	80858593          	addi	a1,a1,-2040 # 8002d2f0 <__func__.0+0x2d0>
    80015af0:	bfd9                	j	80015ac6 <load_page_fault_8+0xb8>
    TEST_ASSERT("hs mode ld u mode page when mstatus.sum=1 successful",
    80015af2:	00018517          	auipc	a0,0x18
    80015af6:	84650513          	addi	a0,a0,-1978 # 8002d338 <__func__.0+0x318>
    80015afa:	2c0150ef          	jal	8002adba <printf>
    80015afe:	02900513          	li	a0,41
    80015b02:	7a7130ef          	jal	80029aa8 <putchar>
    80015b06:	b75d                	j	80015aac <load_page_fault_8+0x9e>

0000000080015b08 <store_page_fault_1>:





bool store_page_fault_1(){
    80015b08:	1101                	addi	sp,sp,-32

    TEST_START();
    80015b0a:	00016597          	auipc	a1,0x16
    80015b0e:	20e58593          	addi	a1,a1,526 # 8002bd18 <__func__.13>
    80015b12:	00017517          	auipc	a0,0x17
    80015b16:	7ee50513          	addi	a0,a0,2030 # 8002d300 <__func__.0+0x2e0>
bool store_page_fault_1(){
    80015b1a:	ec06                	sd	ra,24(sp)
    80015b1c:	e822                	sd	s0,16(sp)
    80015b1e:	e426                	sd	s1,8(sp)
    TEST_START();
    80015b20:	29a150ef          	jal	8002adba <printf>
    80015b24:	4529                	li	a0,10
    80015b26:	783130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80015b2a:	450d                	li	a0,3
    80015b2c:	b42eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80015b30:	ab1ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015b34:	e49ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015b38:	bebea0ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80015b3c:	450d                	li	a0,3
    80015b3e:	b30eb0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80015b42:	4509                	li	a0,2
    80015b44:	a4aeb0ef          	jal	80000d8e <set_prev_priv>

    //执行store指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015b48:	a2aeb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80015b4c:	37ab77b7          	lui	a5,0x37ab7
    80015b50:	078a                	slli	a5,a5,0x2
    80015b52:	40019737          	lui	a4,0x40019
    80015b56:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015b5a:	070a                	slli	a4,a4,0x2
    80015b5c:	6ef74073          	.insn	4, 0x6ef74073

    addr = hs_page_base(VSI_GI);
    hsvd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when pte.v=0 leads to LPF",
    80015b60:	08200593          	li	a1,130
    80015b64:	0001d617          	auipc	a2,0x1d
    80015b68:	bac60613          	addi	a2,a2,-1108 # 80032710 <__func__.0+0x56f0>
    80015b6c:	00017517          	auipc	a0,0x17
    80015b70:	7ac50513          	addi	a0,a0,1964 # 8002d318 <__func__.0+0x2f8>
    80015b74:	246150ef          	jal	8002adba <printf>
    80015b78:	0003b797          	auipc	a5,0x3b
    80015b7c:	4997c783          	lbu	a5,1177(a5) # 80051011 <excpt+0x1>
    80015b80:	0003b497          	auipc	s1,0x3b
    80015b84:	49048493          	addi	s1,s1,1168 # 80051010 <excpt>
    80015b88:	00017597          	auipc	a1,0x17
    80015b8c:	76858593          	addi	a1,a1,1896 # 8002d2f0 <__func__.0+0x2d0>
    80015b90:	cf89                	beqz	a5,80015baa <store_page_fault_1+0xa2>
    80015b92:	6498                	ld	a4,8(s1)
    80015b94:	47bd                	li	a5,15
    80015b96:	00017597          	auipc	a1,0x17
    80015b9a:	74a58593          	addi	a1,a1,1866 # 8002d2e0 <__func__.0+0x2c0>
    80015b9e:	00f70663          	beq	a4,a5,80015baa <store_page_fault_1+0xa2>
    80015ba2:	00017597          	auipc	a1,0x17
    80015ba6:	74e58593          	addi	a1,a1,1870 # 8002d2f0 <__func__.0+0x2d0>
    80015baa:	00017517          	auipc	a0,0x17
    80015bae:	78650513          	addi	a0,a0,1926 # 8002d330 <__func__.0+0x310>
    80015bb2:	208150ef          	jal	8002adba <printf>
    80015bb6:	0003b797          	auipc	a5,0x3b
    80015bba:	45b7c783          	lbu	a5,1115(a5) # 80051011 <excpt+0x1>
    80015bbe:	c789                	beqz	a5,80015bc8 <store_page_fault_1+0xc0>
    80015bc0:	6498                	ld	a4,8(s1)
    80015bc2:	47bd                	li	a5,15
    80015bc4:	00f70c63          	beq	a4,a5,80015bdc <store_page_fault_1+0xd4>
    80015bc8:	00017517          	auipc	a0,0x17
    80015bcc:	77050513          	addi	a0,a0,1904 # 8002d338 <__func__.0+0x318>
    80015bd0:	1ea150ef          	jal	8002adba <printf>
    80015bd4:	02900513          	li	a0,41
    80015bd8:	6d1130ef          	jal	80029aa8 <putchar>
    80015bdc:	4529                	li	a0,10
    80015bde:	6cb130ef          	jal	80029aa8 <putchar>
    80015be2:	0003b797          	auipc	a5,0x3b
    80015be6:	42f7c783          	lbu	a5,1071(a5) # 80051011 <excpt+0x1>
    80015bea:	4401                	li	s0,0
    80015bec:	c789                	beqz	a5,80015bf6 <store_page_fault_1+0xee>
    80015bee:	6480                	ld	s0,8(s1)
    80015bf0:	1445                	addi	s0,s0,-15
    80015bf2:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行store指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80015bf6:	97ceb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80015bfa:	37ab77b7          	lui	a5,0x37ab7
    80015bfe:	00100737          	lui	a4,0x100
    80015c02:	078a                	slli	a5,a5,0x2
    80015c04:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    80015c08:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015c0c:	0732                	slli	a4,a4,0xc
    80015c0e:	62f74073          	.insn	4, 0x62f74073
    addr = hs_page_base(VSRX_GRWX);

    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015c12:	08200593          	li	a1,130
    80015c16:	0001d617          	auipc	a2,0x1d
    80015c1a:	b2260613          	addi	a2,a2,-1246 # 80032738 <__func__.0+0x5718>
    80015c1e:	00017517          	auipc	a0,0x17
    80015c22:	6fa50513          	addi	a0,a0,1786 # 8002d318 <__func__.0+0x2f8>
    80015c26:	194150ef          	jal	8002adba <printf>
    80015c2a:	0003b797          	auipc	a5,0x3b
    80015c2e:	3e77c783          	lbu	a5,999(a5) # 80051011 <excpt+0x1>
    80015c32:	00017597          	auipc	a1,0x17
    80015c36:	6be58593          	addi	a1,a1,1726 # 8002d2f0 <__func__.0+0x2d0>
    80015c3a:	cf89                	beqz	a5,80015c54 <store_page_fault_1+0x14c>
    80015c3c:	6498                	ld	a4,8(s1)
    80015c3e:	47bd                	li	a5,15
    80015c40:	00017597          	auipc	a1,0x17
    80015c44:	6a058593          	addi	a1,a1,1696 # 8002d2e0 <__func__.0+0x2c0>
    80015c48:	00f70663          	beq	a4,a5,80015c54 <store_page_fault_1+0x14c>
    80015c4c:	00017597          	auipc	a1,0x17
    80015c50:	6a458593          	addi	a1,a1,1700 # 8002d2f0 <__func__.0+0x2d0>
    80015c54:	00017517          	auipc	a0,0x17
    80015c58:	6dc50513          	addi	a0,a0,1756 # 8002d330 <__func__.0+0x310>
    80015c5c:	15e150ef          	jal	8002adba <printf>
    80015c60:	0003b797          	auipc	a5,0x3b
    80015c64:	3b17c783          	lbu	a5,945(a5) # 80051011 <excpt+0x1>
    80015c68:	c789                	beqz	a5,80015c72 <store_page_fault_1+0x16a>
    80015c6a:	6498                	ld	a4,8(s1)
    80015c6c:	47bd                	li	a5,15
    80015c6e:	00f70c63          	beq	a4,a5,80015c86 <store_page_fault_1+0x17e>
    80015c72:	00017517          	auipc	a0,0x17
    80015c76:	6c650513          	addi	a0,a0,1734 # 8002d338 <__func__.0+0x318>
    80015c7a:	140150ef          	jal	8002adba <printf>
    80015c7e:	02900513          	li	a0,41
    80015c82:	627130ef          	jal	80029aa8 <putchar>
    80015c86:	4529                	li	a0,10
    80015c88:	621130ef          	jal	80029aa8 <putchar>
    80015c8c:	c419                	beqz	s0,80015c9a <store_page_fault_1+0x192>
    80015c8e:	0003b797          	auipc	a5,0x3b
    80015c92:	3837c783          	lbu	a5,899(a5) # 80051011 <excpt+0x1>
    80015c96:	4401                	li	s0,0
    80015c98:	e7dd                	bnez	a5,80015d46 <store_page_fault_1+0x23e>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行store指令时，pte.w=1
    TEST_SETUP_EXCEPT();
    80015c9a:	8d8eb0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80015c9e:	37ab77b7          	lui	a5,0x37ab7
    80015ca2:	00080737          	lui	a4,0x80
    80015ca6:	078a                	slli	a5,a5,0x2
    80015ca8:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    80015caa:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015cae:	0736                	slli	a4,a4,0xd
    80015cb0:	66f74073          	.insn	4, 0x66f74073
    addr = hs_page_base(VSRW_GURW);

    hsvh(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015cb4:	08200593          	li	a1,130
    80015cb8:	0001d617          	auipc	a2,0x1d
    80015cbc:	ab060613          	addi	a2,a2,-1360 # 80032768 <__func__.0+0x5748>
    80015cc0:	00017517          	auipc	a0,0x17
    80015cc4:	65850513          	addi	a0,a0,1624 # 8002d318 <__func__.0+0x2f8>
    80015cc8:	0f2150ef          	jal	8002adba <printf>
    80015ccc:	0003b797          	auipc	a5,0x3b
    80015cd0:	3457c783          	lbu	a5,837(a5) # 80051011 <excpt+0x1>
    80015cd4:	00017597          	auipc	a1,0x17
    80015cd8:	61c58593          	addi	a1,a1,1564 # 8002d2f0 <__func__.0+0x2d0>
    80015cdc:	e789                	bnez	a5,80015ce6 <store_page_fault_1+0x1de>
    80015cde:	00017597          	auipc	a1,0x17
    80015ce2:	60258593          	addi	a1,a1,1538 # 8002d2e0 <__func__.0+0x2c0>
    80015ce6:	00017517          	auipc	a0,0x17
    80015cea:	64a50513          	addi	a0,a0,1610 # 8002d330 <__func__.0+0x310>
    80015cee:	0cc150ef          	jal	8002adba <printf>
    80015cf2:	0003b797          	auipc	a5,0x3b
    80015cf6:	31f7c783          	lbu	a5,799(a5) # 80051011 <excpt+0x1>
    80015cfa:	ebb9                	bnez	a5,80015d50 <store_page_fault_1+0x248>
    80015cfc:	4529                	li	a0,10
    80015cfe:	5ab130ef          	jal	80029aa8 <putchar>
    80015d02:	c411                	beqz	s0,80015d0e <store_page_fault_1+0x206>
    80015d04:	0003b797          	auipc	a5,0x3b
    80015d08:	30d7c783          	lbu	a5,781(a5) # 80051011 <excpt+0x1>
    80015d0c:	c79d                	beqz	a5,80015d3a <store_page_fault_1+0x232>
    80015d0e:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80015d10:	00017597          	auipc	a1,0x17
    80015d14:	5e058593          	addi	a1,a1,1504 # 8002d2f0 <__func__.0+0x2d0>
    80015d18:	00017517          	auipc	a0,0x17
    80015d1c:	68050513          	addi	a0,a0,1664 # 8002d398 <__func__.0+0x378>
    80015d20:	09a150ef          	jal	8002adba <printf>
    80015d24:	4511                	li	a0,4
    80015d26:	948eb0ef          	jal	80000e6e <goto_priv>
    80015d2a:	a61eb0ef          	jal	8000178a <reset_state>
}
    80015d2e:	60e2                	ld	ra,24(sp)
    80015d30:	8522                	mv	a0,s0
    80015d32:	6442                	ld	s0,16(sp)
    80015d34:	64a2                	ld	s1,8(sp)
    80015d36:	6105                	addi	sp,sp,32
    80015d38:	8082                	ret
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015d3a:	4405                	li	s0,1
    TEST_END();
    80015d3c:	00017597          	auipc	a1,0x17
    80015d40:	5a458593          	addi	a1,a1,1444 # 8002d2e0 <__func__.0+0x2c0>
    80015d44:	bfd1                	j	80015d18 <store_page_fault_1+0x210>
    TEST_ASSERT("hs mode hsvb when and pte.w=0 leads to LPF",
    80015d46:	6480                	ld	s0,8(s1)
    80015d48:	1445                	addi	s0,s0,-15
    80015d4a:	00143413          	seqz	s0,s0
    80015d4e:	b7b1                	j	80015c9a <store_page_fault_1+0x192>
    TEST_ASSERT("hs mode hsvh successful when pte.w=1",
    80015d50:	00017517          	auipc	a0,0x17
    80015d54:	5e850513          	addi	a0,a0,1512 # 8002d338 <__func__.0+0x318>
    80015d58:	062150ef          	jal	8002adba <printf>
    80015d5c:	02900513          	li	a0,41
    80015d60:	549130ef          	jal	80029aa8 <putchar>
    80015d64:	bf61                	j	80015cfc <store_page_fault_1+0x1f4>

0000000080015d66 <store_page_fault_2>:

bool store_page_fault_2(){
    80015d66:	1101                	addi	sp,sp,-32

    TEST_START();
    80015d68:	00016597          	auipc	a1,0x16
    80015d6c:	fc858593          	addi	a1,a1,-56 # 8002bd30 <__func__.12>
    80015d70:	00017517          	auipc	a0,0x17
    80015d74:	59050513          	addi	a0,a0,1424 # 8002d300 <__func__.0+0x2e0>
bool store_page_fault_2(){
    80015d78:	ec06                	sd	ra,24(sp)
    80015d7a:	e822                	sd	s0,16(sp)
    80015d7c:	e426                	sd	s1,8(sp)
    TEST_START();
    80015d7e:	03c150ef          	jal	8002adba <printf>
    80015d82:	4529                	li	a0,10
    80015d84:	525130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80015d88:	450d                	li	a0,3
    80015d8a:	8e4eb0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80015d8e:	853ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015d92:	bebea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015d96:	98dea0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    80015d9a:	4511                	li	a0,4
    80015d9c:	8d2eb0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80015da0:	000407b7          	lui	a5,0x40
    80015da4:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    80015da8:	450d                	li	a0,3
    80015daa:	8c4eb0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80015dae:	4509                	li	a0,2
    80015db0:	fdfea0ef          	jal	80000d8e <set_prev_priv>
    //执行hsvd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80015db4:	fbfea0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80015db8:	37ab77b7          	lui	a5,0x37ab7
    80015dbc:	00080737          	lui	a4,0x80
    80015dc0:	078a                	slli	a5,a5,0x2
    80015dc2:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015dc4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015dc8:	0736                	slli	a4,a4,0xd
    80015dca:	6ef74073          	.insn	4, 0x6ef74073
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    hsvd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015dce:	08200593          	li	a1,130
    80015dd2:	0001d617          	auipc	a2,0x1d
    80015dd6:	9be60613          	addi	a2,a2,-1602 # 80032790 <__func__.0+0x5770>
    80015dda:	00017517          	auipc	a0,0x17
    80015dde:	53e50513          	addi	a0,a0,1342 # 8002d318 <__func__.0+0x2f8>
    80015de2:	7d9140ef          	jal	8002adba <printf>
    80015de6:	0003b797          	auipc	a5,0x3b
    80015dea:	22b7c783          	lbu	a5,555(a5) # 80051011 <excpt+0x1>
    80015dee:	0003b497          	auipc	s1,0x3b
    80015df2:	22248493          	addi	s1,s1,546 # 80051010 <excpt>
    80015df6:	00017597          	auipc	a1,0x17
    80015dfa:	4fa58593          	addi	a1,a1,1274 # 8002d2f0 <__func__.0+0x2d0>
    80015dfe:	cf89                	beqz	a5,80015e18 <store_page_fault_2+0xb2>
    80015e00:	6498                	ld	a4,8(s1)
    80015e02:	47bd                	li	a5,15
    80015e04:	00017597          	auipc	a1,0x17
    80015e08:	4dc58593          	addi	a1,a1,1244 # 8002d2e0 <__func__.0+0x2c0>
    80015e0c:	00f70663          	beq	a4,a5,80015e18 <store_page_fault_2+0xb2>
    80015e10:	00017597          	auipc	a1,0x17
    80015e14:	4e058593          	addi	a1,a1,1248 # 8002d2f0 <__func__.0+0x2d0>
    80015e18:	00017517          	auipc	a0,0x17
    80015e1c:	51850513          	addi	a0,a0,1304 # 8002d330 <__func__.0+0x310>
    80015e20:	79b140ef          	jal	8002adba <printf>
    80015e24:	0003b797          	auipc	a5,0x3b
    80015e28:	1ed7c783          	lbu	a5,493(a5) # 80051011 <excpt+0x1>
    80015e2c:	c789                	beqz	a5,80015e36 <store_page_fault_2+0xd0>
    80015e2e:	6498                	ld	a4,8(s1)
    80015e30:	47bd                	li	a5,15
    80015e32:	00f70c63          	beq	a4,a5,80015e4a <store_page_fault_2+0xe4>
    80015e36:	00017517          	auipc	a0,0x17
    80015e3a:	50250513          	addi	a0,a0,1282 # 8002d338 <__func__.0+0x318>
    80015e3e:	77d140ef          	jal	8002adba <printf>
    80015e42:	02900513          	li	a0,41
    80015e46:	463130ef          	jal	80029aa8 <putchar>
    80015e4a:	4529                	li	a0,10
    80015e4c:	45d130ef          	jal	80029aa8 <putchar>
    80015e50:	0003b417          	auipc	s0,0x3b
    80015e54:	1c144403          	lbu	s0,449(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    80015e58:	00017597          	auipc	a1,0x17
    80015e5c:	49858593          	addi	a1,a1,1176 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015e60:	cc11                	beqz	s0,80015e7c <store_page_fault_2+0x116>
    80015e62:	6498                	ld	a4,8(s1)
    80015e64:	47bd                	li	a5,15
    TEST_END();
    80015e66:	00017597          	auipc	a1,0x17
    80015e6a:	47a58593          	addi	a1,a1,1146 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to LPF",
    80015e6e:	00f70763          	beq	a4,a5,80015e7c <store_page_fault_2+0x116>
    80015e72:	4401                	li	s0,0
    TEST_END();
    80015e74:	00017597          	auipc	a1,0x17
    80015e78:	47c58593          	addi	a1,a1,1148 # 8002d2f0 <__func__.0+0x2d0>
    80015e7c:	00017517          	auipc	a0,0x17
    80015e80:	51c50513          	addi	a0,a0,1308 # 8002d398 <__func__.0+0x378>
    80015e84:	737140ef          	jal	8002adba <printf>
    80015e88:	4511                	li	a0,4
    80015e8a:	fe5ea0ef          	jal	80000e6e <goto_priv>
    80015e8e:	8fdeb0ef          	jal	8000178a <reset_state>
}
    80015e92:	60e2                	ld	ra,24(sp)
    80015e94:	8522                	mv	a0,s0
    80015e96:	6442                	ld	s0,16(sp)
    80015e98:	64a2                	ld	s1,8(sp)
    80015e9a:	6105                	addi	sp,sp,32
    80015e9c:	8082                	ret

0000000080015e9e <store_page_fault_3>:

bool store_page_fault_3(){
    80015e9e:	1141                	addi	sp,sp,-16

    TEST_START();
    80015ea0:	00016597          	auipc	a1,0x16
    80015ea4:	ea858593          	addi	a1,a1,-344 # 8002bd48 <__func__.11>
    80015ea8:	00017517          	auipc	a0,0x17
    80015eac:	45850513          	addi	a0,a0,1112 # 8002d300 <__func__.0+0x2e0>
bool store_page_fault_3(){
    80015eb0:	e406                	sd	ra,8(sp)
    80015eb2:	e022                	sd	s0,0(sp)
    TEST_START();
    80015eb4:	707140ef          	jal	8002adba <printf>
    80015eb8:	4529                	li	a0,10
    80015eba:	3ef130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80015ebe:	450d                	li	a0,3
    80015ec0:	fafea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80015ec4:	f1cea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015ec8:	ab5ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015ecc:	857ea0ef          	jal	80000722 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80015ed0:	4511                	li	a0,4
    80015ed2:	f9dea0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80015ed6:	000407b7          	lui	a5,0x40
    80015eda:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    80015ede:	450d                	li	a0,3
    80015ee0:	f8fea0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80015ee4:	4509                	li	a0,2
    80015ee6:	ea9ea0ef          	jal	80000d8e <set_prev_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80015eea:	e89ea0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80015eee:	37ab77b7          	lui	a5,0x37ab7
    80015ef2:	00080737          	lui	a4,0x80
    80015ef6:	078a                	slli	a5,a5,0x2
    80015ef8:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80015efa:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015efe:	0736                	slli	a4,a4,0xd
    80015f00:	62f74073          	.insn	4, 0x62f74073
    hsvb(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80015f04:	08200593          	li	a1,130
    80015f08:	0001d617          	auipc	a2,0x1d
    80015f0c:	8c860613          	addi	a2,a2,-1848 # 800327d0 <__func__.0+0x57b0>
    80015f10:	00017517          	auipc	a0,0x17
    80015f14:	40850513          	addi	a0,a0,1032 # 8002d318 <__func__.0+0x2f8>
    80015f18:	6a3140ef          	jal	8002adba <printf>
    80015f1c:	0003b797          	auipc	a5,0x3b
    80015f20:	0f57c783          	lbu	a5,245(a5) # 80051011 <excpt+0x1>
    80015f24:	00017597          	auipc	a1,0x17
    80015f28:	3bc58593          	addi	a1,a1,956 # 8002d2e0 <__func__.0+0x2c0>
    80015f2c:	c789                	beqz	a5,80015f36 <store_page_fault_3+0x98>
    80015f2e:	00017597          	auipc	a1,0x17
    80015f32:	3c258593          	addi	a1,a1,962 # 8002d2f0 <__func__.0+0x2d0>
    80015f36:	00017517          	auipc	a0,0x17
    80015f3a:	3fa50513          	addi	a0,a0,1018 # 8002d330 <__func__.0+0x310>
    80015f3e:	67d140ef          	jal	8002adba <printf>
    80015f42:	0003b797          	auipc	a5,0x3b
    80015f46:	0cf7c783          	lbu	a5,207(a5) # 80051011 <excpt+0x1>
    80015f4a:	e7a1                	bnez	a5,80015f92 <store_page_fault_3+0xf4>
    80015f4c:	4529                	li	a0,10
    80015f4e:	35b130ef          	jal	80029aa8 <putchar>
    80015f52:	0003b797          	auipc	a5,0x3b
    80015f56:	0bf7c783          	lbu	a5,191(a5) # 80051011 <excpt+0x1>
    80015f5a:	e795                	bnez	a5,80015f86 <store_page_fault_3+0xe8>
    80015f5c:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80015f5e:	00017597          	auipc	a1,0x17
    80015f62:	38258593          	addi	a1,a1,898 # 8002d2e0 <__func__.0+0x2c0>
    80015f66:	00017517          	auipc	a0,0x17
    80015f6a:	43250513          	addi	a0,a0,1074 # 8002d398 <__func__.0+0x378>
    80015f6e:	64d140ef          	jal	8002adba <printf>
    80015f72:	4511                	li	a0,4
    80015f74:	efbea0ef          	jal	80000e6e <goto_priv>
    80015f78:	813eb0ef          	jal	8000178a <reset_state>
}
    80015f7c:	60a2                	ld	ra,8(sp)
    80015f7e:	8522                	mv	a0,s0
    80015f80:	6402                	ld	s0,0(sp)
    80015f82:	0141                	addi	sp,sp,16
    80015f84:	8082                	ret
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80015f86:	4401                	li	s0,0
    TEST_END();
    80015f88:	00017597          	auipc	a1,0x17
    80015f8c:	36858593          	addi	a1,a1,872 # 8002d2f0 <__func__.0+0x2d0>
    80015f90:	bfd9                	j	80015f66 <store_page_fault_3+0xc8>
    TEST_ASSERT("hs mode hsvb u mode page when vsstatus.sum=1 successful",
    80015f92:	00017517          	auipc	a0,0x17
    80015f96:	3a650513          	addi	a0,a0,934 # 8002d338 <__func__.0+0x318>
    80015f9a:	621140ef          	jal	8002adba <printf>
    80015f9e:	02900513          	li	a0,41
    80015fa2:	307130ef          	jal	80029aa8 <putchar>
    80015fa6:	b75d                	j	80015f4c <store_page_fault_3+0xae>

0000000080015fa8 <store_page_fault_4>:


bool store_page_fault_4(){
    80015fa8:	1101                	addi	sp,sp,-32

    TEST_START();
    80015faa:	00016597          	auipc	a1,0x16
    80015fae:	db658593          	addi	a1,a1,-586 # 8002bd60 <__func__.10>
    80015fb2:	00017517          	auipc	a0,0x17
    80015fb6:	34e50513          	addi	a0,a0,846 # 8002d300 <__func__.0+0x2e0>
bool store_page_fault_4(){
    80015fba:	ec06                	sd	ra,24(sp)
    80015fbc:	e822                	sd	s0,16(sp)
    80015fbe:	e426                	sd	s1,8(sp)
    TEST_START();
    80015fc0:	5fb140ef          	jal	8002adba <printf>
    80015fc4:	4529                	li	a0,10
    80015fc6:	2e3130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80015fca:	450d                	li	a0,3
    80015fcc:	ea3ea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80015fd0:	e10ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80015fd4:	9a9ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80015fd8:	f4aea0ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80015fdc:	4509                	li	a0,2
    80015fde:	e91ea0ef          	jal	80000e6e <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80015fe2:	d91ea0ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80015fe6:	37ab77b7          	lui	a5,0x37ab7
    80015fea:	078a                	slli	a5,a5,0x2
    80015fec:	40019737          	lui	a4,0x40019
    80015ff0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80015ff4:	070a                	slli	a4,a4,0x2
    80015ff6:	00f73023          	sd	a5,0(a4) # 40019000 <STACK_SIZE+0x3ff19000>

    addr = hs_page_base(VSI_GI);
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.v=0 leads to LPF",
    80015ffa:	08200593          	li	a1,130
    80015ffe:	0001d617          	auipc	a2,0x1d
    80016002:	80a60613          	addi	a2,a2,-2038 # 80032808 <__func__.0+0x57e8>
    80016006:	00017517          	auipc	a0,0x17
    8001600a:	31250513          	addi	a0,a0,786 # 8002d318 <__func__.0+0x2f8>
    8001600e:	5ad140ef          	jal	8002adba <printf>
    80016012:	0003b797          	auipc	a5,0x3b
    80016016:	fff7c783          	lbu	a5,-1(a5) # 80051011 <excpt+0x1>
    8001601a:	0003b497          	auipc	s1,0x3b
    8001601e:	ff648493          	addi	s1,s1,-10 # 80051010 <excpt>
    80016022:	00017597          	auipc	a1,0x17
    80016026:	2ce58593          	addi	a1,a1,718 # 8002d2f0 <__func__.0+0x2d0>
    8001602a:	cf89                	beqz	a5,80016044 <store_page_fault_4+0x9c>
    8001602c:	6498                	ld	a4,8(s1)
    8001602e:	47bd                	li	a5,15
    80016030:	00017597          	auipc	a1,0x17
    80016034:	2b058593          	addi	a1,a1,688 # 8002d2e0 <__func__.0+0x2c0>
    80016038:	00f70663          	beq	a4,a5,80016044 <store_page_fault_4+0x9c>
    8001603c:	00017597          	auipc	a1,0x17
    80016040:	2b458593          	addi	a1,a1,692 # 8002d2f0 <__func__.0+0x2d0>
    80016044:	00017517          	auipc	a0,0x17
    80016048:	2ec50513          	addi	a0,a0,748 # 8002d330 <__func__.0+0x310>
    8001604c:	56f140ef          	jal	8002adba <printf>
    80016050:	0003b797          	auipc	a5,0x3b
    80016054:	fc17c783          	lbu	a5,-63(a5) # 80051011 <excpt+0x1>
    80016058:	c789                	beqz	a5,80016062 <store_page_fault_4+0xba>
    8001605a:	6498                	ld	a4,8(s1)
    8001605c:	47bd                	li	a5,15
    8001605e:	00f70c63          	beq	a4,a5,80016076 <store_page_fault_4+0xce>
    80016062:	00017517          	auipc	a0,0x17
    80016066:	2d650513          	addi	a0,a0,726 # 8002d338 <__func__.0+0x318>
    8001606a:	551140ef          	jal	8002adba <printf>
    8001606e:	02900513          	li	a0,41
    80016072:	237130ef          	jal	80029aa8 <putchar>
    80016076:	4529                	li	a0,10
    80016078:	231130ef          	jal	80029aa8 <putchar>
    8001607c:	0003b797          	auipc	a5,0x3b
    80016080:	f957c783          	lbu	a5,-107(a5) # 80051011 <excpt+0x1>
    80016084:	4401                	li	s0,0
    80016086:	c789                	beqz	a5,80016090 <store_page_fault_4+0xe8>
    80016088:	6480                	ld	s0,8(s1)
    8001608a:	1445                	addi	s0,s0,-15
    8001608c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SPF
    );


    //执行sd指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016090:	ce3ea0ef          	jal	80000d72 <test_setup_except_function>
    addr = hs_page_base(VSRX_GRWX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80016094:	000807b7          	lui	a5,0x80
    80016098:	1007b073          	csrc	sstatus,a5
    8001609c:	37ab77b7          	lui	a5,0x37ab7
    800160a0:	00100737          	lui	a4,0x100
    800160a4:	078a                	slli	a5,a5,0x2
    800160a6:	05570713          	addi	a4,a4,85 # 100055 <STACK_SIZE+0x55>
    800160aa:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800160ae:	0732                	slli	a4,a4,0xc
    800160b0:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    800160b4:	08200593          	li	a1,130
    800160b8:	0001c617          	auipc	a2,0x1c
    800160bc:	77860613          	addi	a2,a2,1912 # 80032830 <__func__.0+0x5810>
    800160c0:	00017517          	auipc	a0,0x17
    800160c4:	25850513          	addi	a0,a0,600 # 8002d318 <__func__.0+0x2f8>
    800160c8:	4f3140ef          	jal	8002adba <printf>
    800160cc:	0003b797          	auipc	a5,0x3b
    800160d0:	f457c783          	lbu	a5,-187(a5) # 80051011 <excpt+0x1>
    800160d4:	00017597          	auipc	a1,0x17
    800160d8:	21c58593          	addi	a1,a1,540 # 8002d2f0 <__func__.0+0x2d0>
    800160dc:	cf89                	beqz	a5,800160f6 <store_page_fault_4+0x14e>
    800160de:	6498                	ld	a4,8(s1)
    800160e0:	47bd                	li	a5,15
    800160e2:	00017597          	auipc	a1,0x17
    800160e6:	1fe58593          	addi	a1,a1,510 # 8002d2e0 <__func__.0+0x2c0>
    800160ea:	00f70663          	beq	a4,a5,800160f6 <store_page_fault_4+0x14e>
    800160ee:	00017597          	auipc	a1,0x17
    800160f2:	20258593          	addi	a1,a1,514 # 8002d2f0 <__func__.0+0x2d0>
    800160f6:	00017517          	auipc	a0,0x17
    800160fa:	23a50513          	addi	a0,a0,570 # 8002d330 <__func__.0+0x310>
    800160fe:	4bd140ef          	jal	8002adba <printf>
    80016102:	0003b797          	auipc	a5,0x3b
    80016106:	f0f7c783          	lbu	a5,-241(a5) # 80051011 <excpt+0x1>
    8001610a:	c789                	beqz	a5,80016114 <store_page_fault_4+0x16c>
    8001610c:	6498                	ld	a4,8(s1)
    8001610e:	47bd                	li	a5,15
    80016110:	00f70c63          	beq	a4,a5,80016128 <store_page_fault_4+0x180>
    80016114:	00017517          	auipc	a0,0x17
    80016118:	22450513          	addi	a0,a0,548 # 8002d338 <__func__.0+0x318>
    8001611c:	49f140ef          	jal	8002adba <printf>
    80016120:	02900513          	li	a0,41
    80016124:	185130ef          	jal	80029aa8 <putchar>
    80016128:	4529                	li	a0,10
    8001612a:	17f130ef          	jal	80029aa8 <putchar>
    8001612e:	c419                	beqz	s0,8001613c <store_page_fault_4+0x194>
    80016130:	0003b797          	auipc	a5,0x3b
    80016134:	ee17c783          	lbu	a5,-287(a5) # 80051011 <excpt+0x1>
    80016138:	4401                	li	s0,0
    8001613a:	e7dd                	bnez	a5,800161e8 <store_page_fault_4+0x240>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行sd指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    8001613c:	c37ea0ef          	jal	80000d72 <test_setup_except_function>
    80016140:	37ab77b7          	lui	a5,0x37ab7
    80016144:	00080737          	lui	a4,0x80
    80016148:	078a                	slli	a5,a5,0x2
    8001614a:	070d                	addi	a4,a4,3 # 80003 <_test_table_size+0x80002>
    8001614c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016150:	0736                	slli	a4,a4,0xd
    80016152:	00f73023          	sd	a5,0(a4)
    addr = hs_page_base(VSRW_GURW);

    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    80016156:	08200593          	li	a1,130
    8001615a:	0001c617          	auipc	a2,0x1c
    8001615e:	6fe60613          	addi	a2,a2,1790 # 80032858 <__func__.0+0x5838>
    80016162:	00017517          	auipc	a0,0x17
    80016166:	1b650513          	addi	a0,a0,438 # 8002d318 <__func__.0+0x2f8>
    8001616a:	451140ef          	jal	8002adba <printf>
    8001616e:	0003b797          	auipc	a5,0x3b
    80016172:	ea37c783          	lbu	a5,-349(a5) # 80051011 <excpt+0x1>
    80016176:	00017597          	auipc	a1,0x17
    8001617a:	17a58593          	addi	a1,a1,378 # 8002d2f0 <__func__.0+0x2d0>
    8001617e:	e789                	bnez	a5,80016188 <store_page_fault_4+0x1e0>
    80016180:	00017597          	auipc	a1,0x17
    80016184:	16058593          	addi	a1,a1,352 # 8002d2e0 <__func__.0+0x2c0>
    80016188:	00017517          	auipc	a0,0x17
    8001618c:	1a850513          	addi	a0,a0,424 # 8002d330 <__func__.0+0x310>
    80016190:	42b140ef          	jal	8002adba <printf>
    80016194:	0003b797          	auipc	a5,0x3b
    80016198:	e7d7c783          	lbu	a5,-387(a5) # 80051011 <excpt+0x1>
    8001619c:	ebb9                	bnez	a5,800161f2 <store_page_fault_4+0x24a>
    8001619e:	4529                	li	a0,10
    800161a0:	109130ef          	jal	80029aa8 <putchar>
    800161a4:	c411                	beqz	s0,800161b0 <store_page_fault_4+0x208>
    800161a6:	0003b797          	auipc	a5,0x3b
    800161aa:	e6b7c783          	lbu	a5,-405(a5) # 80051011 <excpt+0x1>
    800161ae:	c79d                	beqz	a5,800161dc <store_page_fault_4+0x234>
    800161b0:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    800161b2:	00017597          	auipc	a1,0x17
    800161b6:	13e58593          	addi	a1,a1,318 # 8002d2f0 <__func__.0+0x2d0>
    800161ba:	00017517          	auipc	a0,0x17
    800161be:	1de50513          	addi	a0,a0,478 # 8002d398 <__func__.0+0x378>
    800161c2:	3f9140ef          	jal	8002adba <printf>
    800161c6:	4511                	li	a0,4
    800161c8:	ca7ea0ef          	jal	80000e6e <goto_priv>
    800161cc:	dbeeb0ef          	jal	8000178a <reset_state>
}
    800161d0:	60e2                	ld	ra,24(sp)
    800161d2:	8522                	mv	a0,s0
    800161d4:	6442                	ld	s0,16(sp)
    800161d6:	64a2                	ld	s1,8(sp)
    800161d8:	6105                	addi	sp,sp,32
    800161da:	8082                	ret
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    800161dc:	4405                	li	s0,1
    TEST_END();
    800161de:	00017597          	auipc	a1,0x17
    800161e2:	10258593          	addi	a1,a1,258 # 8002d2e0 <__func__.0+0x2c0>
    800161e6:	bfd1                	j	800161ba <store_page_fault_4+0x212>
    TEST_ASSERT("vs mode sd when pte.w=0 leads to LPF",
    800161e8:	6480                	ld	s0,8(s1)
    800161ea:	1445                	addi	s0,s0,-15
    800161ec:	00143413          	seqz	s0,s0
    800161f0:	b7b1                	j	8001613c <store_page_fault_4+0x194>
    TEST_ASSERT("vs mode hsvh successful when pte.w=1",
    800161f2:	00017517          	auipc	a0,0x17
    800161f6:	14650513          	addi	a0,a0,326 # 8002d338 <__func__.0+0x318>
    800161fa:	3c1140ef          	jal	8002adba <printf>
    800161fe:	02900513          	li	a0,41
    80016202:	0a7130ef          	jal	80029aa8 <putchar>
    80016206:	bf61                	j	8001619e <store_page_fault_4+0x1f6>

0000000080016208 <store_page_fault_5>:

bool store_page_fault_5(){
    80016208:	1101                	addi	sp,sp,-32

    TEST_START();
    8001620a:	00016597          	auipc	a1,0x16
    8001620e:	b6e58593          	addi	a1,a1,-1170 # 8002bd78 <__func__.9>
    80016212:	00017517          	auipc	a0,0x17
    80016216:	0ee50513          	addi	a0,a0,238 # 8002d300 <__func__.0+0x2e0>
bool store_page_fault_5(){
    8001621a:	ec06                	sd	ra,24(sp)
    8001621c:	e822                	sd	s0,16(sp)
    8001621e:	e426                	sd	s1,8(sp)
    TEST_START();
    80016220:	39b140ef          	jal	8002adba <printf>
    80016224:	4529                	li	a0,10
    80016226:	083130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001622a:	450d                	li	a0,3
    8001622c:	c43ea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016230:	bb0ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016234:	f48ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80016238:	ceaea0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    8001623c:	4511                	li	a0,4
    8001623e:	c31ea0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016242:	000407b7          	lui	a5,0x40
    80016246:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    8001624a:	4509                	li	a0,2
    8001624c:	c23ea0ef          	jal	80000e6e <goto_priv>
    //执行sd指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016250:	b23ea0ef          	jal	80000d72 <test_setup_except_function>
    80016254:	37ab77b7          	lui	a5,0x37ab7
    80016258:	00080737          	lui	a4,0x80
    8001625c:	078a                	slli	a5,a5,0x2
    8001625e:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016260:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016264:	0736                	slli	a4,a4,0xd
    80016266:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    8001626a:	08200593          	li	a1,130
    8001626e:	0001c617          	auipc	a2,0x1c
    80016272:	61260613          	addi	a2,a2,1554 # 80032880 <__func__.0+0x5860>
    80016276:	00017517          	auipc	a0,0x17
    8001627a:	0a250513          	addi	a0,a0,162 # 8002d318 <__func__.0+0x2f8>
    8001627e:	33d140ef          	jal	8002adba <printf>
    80016282:	0003b797          	auipc	a5,0x3b
    80016286:	d8f7c783          	lbu	a5,-625(a5) # 80051011 <excpt+0x1>
    8001628a:	0003b497          	auipc	s1,0x3b
    8001628e:	d8648493          	addi	s1,s1,-634 # 80051010 <excpt>
    80016292:	00017597          	auipc	a1,0x17
    80016296:	05e58593          	addi	a1,a1,94 # 8002d2f0 <__func__.0+0x2d0>
    8001629a:	cf89                	beqz	a5,800162b4 <store_page_fault_5+0xac>
    8001629c:	6498                	ld	a4,8(s1)
    8001629e:	47bd                	li	a5,15
    800162a0:	00017597          	auipc	a1,0x17
    800162a4:	04058593          	addi	a1,a1,64 # 8002d2e0 <__func__.0+0x2c0>
    800162a8:	00f70663          	beq	a4,a5,800162b4 <store_page_fault_5+0xac>
    800162ac:	00017597          	auipc	a1,0x17
    800162b0:	04458593          	addi	a1,a1,68 # 8002d2f0 <__func__.0+0x2d0>
    800162b4:	00017517          	auipc	a0,0x17
    800162b8:	07c50513          	addi	a0,a0,124 # 8002d330 <__func__.0+0x310>
    800162bc:	2ff140ef          	jal	8002adba <printf>
    800162c0:	0003b797          	auipc	a5,0x3b
    800162c4:	d517c783          	lbu	a5,-687(a5) # 80051011 <excpt+0x1>
    800162c8:	c789                	beqz	a5,800162d2 <store_page_fault_5+0xca>
    800162ca:	6498                	ld	a4,8(s1)
    800162cc:	47bd                	li	a5,15
    800162ce:	00f70c63          	beq	a4,a5,800162e6 <store_page_fault_5+0xde>
    800162d2:	00017517          	auipc	a0,0x17
    800162d6:	06650513          	addi	a0,a0,102 # 8002d338 <__func__.0+0x318>
    800162da:	2e1140ef          	jal	8002adba <printf>
    800162de:	02900513          	li	a0,41
    800162e2:	7c6130ef          	jal	80029aa8 <putchar>
    800162e6:	4529                	li	a0,10
    800162e8:	7c0130ef          	jal	80029aa8 <putchar>
    800162ec:	0003b417          	auipc	s0,0x3b
    800162f0:	d2544403          	lbu	s0,-731(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    800162f4:	00017597          	auipc	a1,0x17
    800162f8:	ffc58593          	addi	a1,a1,-4 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    800162fc:	cc11                	beqz	s0,80016318 <store_page_fault_5+0x110>
    800162fe:	6498                	ld	a4,8(s1)
    80016300:	47bd                	li	a5,15
    TEST_END();
    80016302:	00017597          	auipc	a1,0x17
    80016306:	fde58593          	addi	a1,a1,-34 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=0 leads to LPF",
    8001630a:	00f70763          	beq	a4,a5,80016318 <store_page_fault_5+0x110>
    8001630e:	4401                	li	s0,0
    TEST_END();
    80016310:	00017597          	auipc	a1,0x17
    80016314:	fe058593          	addi	a1,a1,-32 # 8002d2f0 <__func__.0+0x2d0>
    80016318:	00017517          	auipc	a0,0x17
    8001631c:	08050513          	addi	a0,a0,128 # 8002d398 <__func__.0+0x378>
    80016320:	29b140ef          	jal	8002adba <printf>
    80016324:	4511                	li	a0,4
    80016326:	b49ea0ef          	jal	80000e6e <goto_priv>
    8001632a:	c60eb0ef          	jal	8000178a <reset_state>
}
    8001632e:	60e2                	ld	ra,24(sp)
    80016330:	8522                	mv	a0,s0
    80016332:	6442                	ld	s0,16(sp)
    80016334:	64a2                	ld	s1,8(sp)
    80016336:	6105                	addi	sp,sp,32
    80016338:	8082                	ret

000000008001633a <store_page_fault_6>:

bool store_page_fault_6(){
    8001633a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001633c:	00016597          	auipc	a1,0x16
    80016340:	a5458593          	addi	a1,a1,-1452 # 8002bd90 <__func__.8>
    80016344:	00017517          	auipc	a0,0x17
    80016348:	fbc50513          	addi	a0,a0,-68 # 8002d300 <__func__.0+0x2e0>
bool store_page_fault_6(){
    8001634c:	e406                	sd	ra,8(sp)
    8001634e:	e022                	sd	s0,0(sp)
    TEST_START();
    80016350:	26b140ef          	jal	8002adba <printf>
    80016354:	4529                	li	a0,10
    80016356:	752130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001635a:	450d                	li	a0,3
    8001635c:	b13ea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016360:	a80ea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016364:	e18ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80016368:	bbaea0ef          	jal	80000722 <vspt_init>


    //执行hsvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001636c:	4511                	li	a0,4
    8001636e:	b01ea0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016372:	000407b7          	lui	a5,0x40
    80016376:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    8001637a:	4509                	li	a0,2
    8001637c:	af3ea0ef          	jal	80000e6e <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80016380:	9f3ea0ef          	jal	80000d72 <test_setup_except_function>
    80016384:	37ab77b7          	lui	a5,0x37ab7
    80016388:	00080737          	lui	a4,0x80
    8001638c:	078a                	slli	a5,a5,0x2
    8001638e:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016390:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80016394:	0736                	slli	a4,a4,0xd
    80016396:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001639a:	08200593          	li	a1,130
    8001639e:	0001c617          	auipc	a2,0x1c
    800163a2:	51a60613          	addi	a2,a2,1306 # 800328b8 <__func__.0+0x5898>
    800163a6:	00017517          	auipc	a0,0x17
    800163aa:	f7250513          	addi	a0,a0,-142 # 8002d318 <__func__.0+0x2f8>
    800163ae:	20d140ef          	jal	8002adba <printf>
    800163b2:	0003b797          	auipc	a5,0x3b
    800163b6:	c5f7c783          	lbu	a5,-929(a5) # 80051011 <excpt+0x1>
    800163ba:	00017597          	auipc	a1,0x17
    800163be:	f2658593          	addi	a1,a1,-218 # 8002d2e0 <__func__.0+0x2c0>
    800163c2:	c789                	beqz	a5,800163cc <store_page_fault_6+0x92>
    800163c4:	00017597          	auipc	a1,0x17
    800163c8:	f2c58593          	addi	a1,a1,-212 # 8002d2f0 <__func__.0+0x2d0>
    800163cc:	00017517          	auipc	a0,0x17
    800163d0:	f6450513          	addi	a0,a0,-156 # 8002d330 <__func__.0+0x310>
    800163d4:	1e7140ef          	jal	8002adba <printf>
    800163d8:	0003b797          	auipc	a5,0x3b
    800163dc:	c397c783          	lbu	a5,-967(a5) # 80051011 <excpt+0x1>
    800163e0:	e7a1                	bnez	a5,80016428 <store_page_fault_6+0xee>
    800163e2:	4529                	li	a0,10
    800163e4:	6c4130ef          	jal	80029aa8 <putchar>
    800163e8:	0003b797          	auipc	a5,0x3b
    800163ec:	c297c783          	lbu	a5,-983(a5) # 80051011 <excpt+0x1>
    800163f0:	e795                	bnez	a5,8001641c <store_page_fault_6+0xe2>
    800163f2:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    800163f4:	00017597          	auipc	a1,0x17
    800163f8:	eec58593          	addi	a1,a1,-276 # 8002d2e0 <__func__.0+0x2c0>
    800163fc:	00017517          	auipc	a0,0x17
    80016400:	f9c50513          	addi	a0,a0,-100 # 8002d398 <__func__.0+0x378>
    80016404:	1b7140ef          	jal	8002adba <printf>
    80016408:	4511                	li	a0,4
    8001640a:	a65ea0ef          	jal	80000e6e <goto_priv>
    8001640e:	b7ceb0ef          	jal	8000178a <reset_state>
}
    80016412:	60a2                	ld	ra,8(sp)
    80016414:	8522                	mv	a0,s0
    80016416:	6402                	ld	s0,0(sp)
    80016418:	0141                	addi	sp,sp,16
    8001641a:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    8001641c:	4401                	li	s0,0
    TEST_END();
    8001641e:	00017597          	auipc	a1,0x17
    80016422:	ed258593          	addi	a1,a1,-302 # 8002d2f0 <__func__.0+0x2d0>
    80016426:	bfd9                	j	800163fc <store_page_fault_6+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80016428:	00017517          	auipc	a0,0x17
    8001642c:	f1050513          	addi	a0,a0,-240 # 8002d338 <__func__.0+0x318>
    80016430:	18b140ef          	jal	8002adba <printf>
    80016434:	02900513          	li	a0,41
    80016438:	670130ef          	jal	80029aa8 <putchar>
    8001643c:	b75d                	j	800163e2 <store_page_fault_6+0xa8>

000000008001643e <store_page_fault_7>:

bool store_page_fault_7(){
    8001643e:	1101                	addi	sp,sp,-32

    TEST_START();
    80016440:	00016597          	auipc	a1,0x16
    80016444:	96858593          	addi	a1,a1,-1688 # 8002bda8 <__func__.7>
    80016448:	00017517          	auipc	a0,0x17
    8001644c:	eb850513          	addi	a0,a0,-328 # 8002d300 <__func__.0+0x2e0>
bool store_page_fault_7(){
    80016450:	ec06                	sd	ra,24(sp)
    80016452:	e822                	sd	s0,16(sp)
    80016454:	e426                	sd	s1,8(sp)
    TEST_START();
    80016456:	165140ef          	jal	8002adba <printf>
    8001645a:	4529                	li	a0,10
    8001645c:	64c130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80016460:	450d                	li	a0,3
    80016462:	a0dea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016466:	97aea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001646a:	d12ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001646e:	ab4ea0ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    80016472:	4511                	li	a0,4
    80016474:	9fbea0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80016478:	000407b7          	lui	a5,0x40
    8001647c:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80016480:	450d                	li	a0,3
    80016482:	9edea0ef          	jal	80000e6e <goto_priv>
    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80016486:	8edea0ef          	jal	80000d72 <test_setup_except_function>
    8001648a:	37ab77b7          	lui	a5,0x37ab7
    8001648e:	00080737          	lui	a4,0x80
    80016492:	078a                	slli	a5,a5,0x2
    80016494:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80016496:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001649a:	0736                	slli	a4,a4,0xd
    8001649c:	00f73023          	sd	a5,0(a4)
    uintptr_t vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800164a0:	08200593          	li	a1,130
    800164a4:	0001c617          	auipc	a2,0x1c
    800164a8:	44c60613          	addi	a2,a2,1100 # 800328f0 <__func__.0+0x58d0>
    800164ac:	00017517          	auipc	a0,0x17
    800164b0:	e6c50513          	addi	a0,a0,-404 # 8002d318 <__func__.0+0x2f8>
    800164b4:	107140ef          	jal	8002adba <printf>
    800164b8:	0003b797          	auipc	a5,0x3b
    800164bc:	b597c783          	lbu	a5,-1191(a5) # 80051011 <excpt+0x1>
    800164c0:	0003b497          	auipc	s1,0x3b
    800164c4:	b5048493          	addi	s1,s1,-1200 # 80051010 <excpt>
    800164c8:	00017597          	auipc	a1,0x17
    800164cc:	e2858593          	addi	a1,a1,-472 # 8002d2f0 <__func__.0+0x2d0>
    800164d0:	cf89                	beqz	a5,800164ea <store_page_fault_7+0xac>
    800164d2:	6498                	ld	a4,8(s1)
    800164d4:	47bd                	li	a5,15
    800164d6:	00017597          	auipc	a1,0x17
    800164da:	e0a58593          	addi	a1,a1,-502 # 8002d2e0 <__func__.0+0x2c0>
    800164de:	00f70663          	beq	a4,a5,800164ea <store_page_fault_7+0xac>
    800164e2:	00017597          	auipc	a1,0x17
    800164e6:	e0e58593          	addi	a1,a1,-498 # 8002d2f0 <__func__.0+0x2d0>
    800164ea:	00017517          	auipc	a0,0x17
    800164ee:	e4650513          	addi	a0,a0,-442 # 8002d330 <__func__.0+0x310>
    800164f2:	0c9140ef          	jal	8002adba <printf>
    800164f6:	0003b797          	auipc	a5,0x3b
    800164fa:	b1b7c783          	lbu	a5,-1253(a5) # 80051011 <excpt+0x1>
    800164fe:	c789                	beqz	a5,80016508 <store_page_fault_7+0xca>
    80016500:	6498                	ld	a4,8(s1)
    80016502:	47bd                	li	a5,15
    80016504:	00f70c63          	beq	a4,a5,8001651c <store_page_fault_7+0xde>
    80016508:	00017517          	auipc	a0,0x17
    8001650c:	e3050513          	addi	a0,a0,-464 # 8002d338 <__func__.0+0x318>
    80016510:	0ab140ef          	jal	8002adba <printf>
    80016514:	02900513          	li	a0,41
    80016518:	590130ef          	jal	80029aa8 <putchar>
    8001651c:	4529                	li	a0,10
    8001651e:	58a130ef          	jal	80029aa8 <putchar>
    80016522:	0003b417          	auipc	s0,0x3b
    80016526:	aef44403          	lbu	s0,-1297(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );


    TEST_END();
    8001652a:	00017597          	auipc	a1,0x17
    8001652e:	dc658593          	addi	a1,a1,-570 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80016532:	cc11                	beqz	s0,8001654e <store_page_fault_7+0x110>
    80016534:	6498                	ld	a4,8(s1)
    80016536:	47bd                	li	a5,15
    TEST_END();
    80016538:	00017597          	auipc	a1,0x17
    8001653c:	da858593          	addi	a1,a1,-600 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80016540:	00f70763          	beq	a4,a5,8001654e <store_page_fault_7+0x110>
    80016544:	4401                	li	s0,0
    TEST_END();
    80016546:	00017597          	auipc	a1,0x17
    8001654a:	daa58593          	addi	a1,a1,-598 # 8002d2f0 <__func__.0+0x2d0>
    8001654e:	00017517          	auipc	a0,0x17
    80016552:	e4a50513          	addi	a0,a0,-438 # 8002d398 <__func__.0+0x378>
    80016556:	065140ef          	jal	8002adba <printf>
    8001655a:	4511                	li	a0,4
    8001655c:	913ea0ef          	jal	80000e6e <goto_priv>
    80016560:	a2aeb0ef          	jal	8000178a <reset_state>
}
    80016564:	60e2                	ld	ra,24(sp)
    80016566:	8522                	mv	a0,s0
    80016568:	6442                	ld	s0,16(sp)
    8001656a:	64a2                	ld	s1,8(sp)
    8001656c:	6105                	addi	sp,sp,32
    8001656e:	8082                	ret

0000000080016570 <store_page_fault_8>:

bool store_page_fault_8(){
    80016570:	1141                	addi	sp,sp,-16

    TEST_START();
    80016572:	00016597          	auipc	a1,0x16
    80016576:	84e58593          	addi	a1,a1,-1970 # 8002bdc0 <__func__.6>
    8001657a:	00017517          	auipc	a0,0x17
    8001657e:	d8650513          	addi	a0,a0,-634 # 8002d300 <__func__.0+0x2e0>
bool store_page_fault_8(){
    80016582:	e406                	sd	ra,8(sp)
    80016584:	e022                	sd	s0,0(sp)
    TEST_START();
    80016586:	035140ef          	jal	8002adba <printf>
    8001658a:	4529                	li	a0,10
    8001658c:	51c130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80016590:	450d                	li	a0,3
    80016592:	8ddea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016596:	84aea0ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001659a:	be2ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001659e:	984ea0ef          	jal	80000722 <vspt_init>


    //执行sd指令时，设置了msstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    800165a2:	4511                	li	a0,4
    800165a4:	8cbea0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    800165a8:	000407b7          	lui	a5,0x40
    800165ac:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    800165b0:	450d                	li	a0,3
    800165b2:	8bdea0ef          	jal	80000e6e <goto_priv>
    uintptr_t addr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800165b6:	fbcea0ef          	jal	80000d72 <test_setup_except_function>
    800165ba:	37ab77b7          	lui	a5,0x37ab7
    800165be:	00080737          	lui	a4,0x80
    800165c2:	078a                	slli	a5,a5,0x2
    800165c4:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800165c6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800165ca:	0736                	slli	a4,a4,0xd
    800165cc:	00f73023          	sd	a5,0(a4)
    sd(addr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    800165d0:	08200593          	li	a1,130
    800165d4:	0001c617          	auipc	a2,0x1c
    800165d8:	35460613          	addi	a2,a2,852 # 80032928 <__func__.0+0x5908>
    800165dc:	00017517          	auipc	a0,0x17
    800165e0:	d3c50513          	addi	a0,a0,-708 # 8002d318 <__func__.0+0x2f8>
    800165e4:	7d6140ef          	jal	8002adba <printf>
    800165e8:	0003b797          	auipc	a5,0x3b
    800165ec:	a297c783          	lbu	a5,-1495(a5) # 80051011 <excpt+0x1>
    800165f0:	00017597          	auipc	a1,0x17
    800165f4:	cf058593          	addi	a1,a1,-784 # 8002d2e0 <__func__.0+0x2c0>
    800165f8:	c789                	beqz	a5,80016602 <store_page_fault_8+0x92>
    800165fa:	00017597          	auipc	a1,0x17
    800165fe:	cf658593          	addi	a1,a1,-778 # 8002d2f0 <__func__.0+0x2d0>
    80016602:	00017517          	auipc	a0,0x17
    80016606:	d2e50513          	addi	a0,a0,-722 # 8002d330 <__func__.0+0x310>
    8001660a:	7b0140ef          	jal	8002adba <printf>
    8001660e:	0003b797          	auipc	a5,0x3b
    80016612:	a037c783          	lbu	a5,-1533(a5) # 80051011 <excpt+0x1>
    80016616:	e7a1                	bnez	a5,8001665e <store_page_fault_8+0xee>
    80016618:	4529                	li	a0,10
    8001661a:	48e130ef          	jal	80029aa8 <putchar>
    8001661e:	0003b797          	auipc	a5,0x3b
    80016622:	9f37c783          	lbu	a5,-1549(a5) # 80051011 <excpt+0x1>
    80016626:	e795                	bnez	a5,80016652 <store_page_fault_8+0xe2>
    80016628:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001662a:	00017597          	auipc	a1,0x17
    8001662e:	cb658593          	addi	a1,a1,-842 # 8002d2e0 <__func__.0+0x2c0>
    80016632:	00017517          	auipc	a0,0x17
    80016636:	d6650513          	addi	a0,a0,-666 # 8002d398 <__func__.0+0x378>
    8001663a:	780140ef          	jal	8002adba <printf>
    8001663e:	4511                	li	a0,4
    80016640:	82fea0ef          	jal	80000e6e <goto_priv>
    80016644:	946eb0ef          	jal	8000178a <reset_state>
}
    80016648:	60a2                	ld	ra,8(sp)
    8001664a:	8522                	mv	a0,s0
    8001664c:	6402                	ld	s0,0(sp)
    8001664e:	0141                	addi	sp,sp,16
    80016650:	8082                	ret
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    80016652:	4401                	li	s0,0
    TEST_END();
    80016654:	00017597          	auipc	a1,0x17
    80016658:	c9c58593          	addi	a1,a1,-868 # 8002d2f0 <__func__.0+0x2d0>
    8001665c:	bfd9                	j	80016632 <store_page_fault_8+0xc2>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=1 successful",
    8001665e:	00017517          	auipc	a0,0x17
    80016662:	cda50513          	addi	a0,a0,-806 # 8002d338 <__func__.0+0x318>
    80016666:	754140ef          	jal	8002adba <printf>
    8001666a:	02900513          	li	a0,41
    8001666e:	43a130ef          	jal	80029aa8 <putchar>
    80016672:	b75d                	j	80016618 <store_page_fault_8+0xa8>

0000000080016674 <amo_page_fault_1>:





bool amo_page_fault_1(){
    80016674:	1101                	addi	sp,sp,-32

    TEST_START();
    80016676:	00015597          	auipc	a1,0x15
    8001667a:	76258593          	addi	a1,a1,1890 # 8002bdd8 <__func__.5>
    8001667e:	00017517          	auipc	a0,0x17
    80016682:	c8250513          	addi	a0,a0,-894 # 8002d300 <__func__.0+0x2e0>
bool amo_page_fault_1(){
    80016686:	ec06                	sd	ra,24(sp)
    80016688:	e822                	sd	s0,16(sp)
    8001668a:	e426                	sd	s1,8(sp)
    8001668c:	e04a                	sd	s2,0(sp)
    TEST_START();
    8001668e:	72c140ef          	jal	8002adba <printf>
    80016692:	4529                	li	a0,10
    80016694:	414130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80016698:	450d                	li	a0,3
    8001669a:	fd4ea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001669e:	f43e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800166a2:	adaea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    800166a6:	87cea0ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_HS);
    800166aa:	450d                	li	a0,3
    800166ac:	fc2ea0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    800166b0:	4509                	li	a0,2
    800166b2:	edcea0ef          	jal	80000d8e <set_prev_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    800166b6:	ebcea0ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    800166ba:	deadc7b7          	lui	a5,0xdeadc
    800166be:	40019737          	lui	a4,0x40019
    800166c2:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    800166c6:	070a                	slli	a4,a4,0x2
    800166c8:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    800166cc:	08200593          	li	a1,130
    800166d0:	0001c617          	auipc	a2,0x1c
    800166d4:	29060613          	addi	a2,a2,656 # 80032960 <__func__.0+0x5940>
    800166d8:	00017517          	auipc	a0,0x17
    800166dc:	c4050513          	addi	a0,a0,-960 # 8002d318 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    800166e0:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    800166e4:	6d6140ef          	jal	8002adba <printf>
    800166e8:	0003b797          	auipc	a5,0x3b
    800166ec:	9297c783          	lbu	a5,-1751(a5) # 80051011 <excpt+0x1>
    value = amoadd_w(addr,value);
    800166f0:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("hs mode execute amoadd_w when pte.v=0 leads to SPF",
    800166f2:	0003b917          	auipc	s2,0x3b
    800166f6:	91e90913          	addi	s2,s2,-1762 # 80051010 <excpt>
    800166fa:	00017597          	auipc	a1,0x17
    800166fe:	bf658593          	addi	a1,a1,-1034 # 8002d2f0 <__func__.0+0x2d0>
    80016702:	cf91                	beqz	a5,8001671e <amo_page_fault_1+0xaa>
    80016704:	00893703          	ld	a4,8(s2)
    80016708:	47bd                	li	a5,15
    8001670a:	00017597          	auipc	a1,0x17
    8001670e:	bd658593          	addi	a1,a1,-1066 # 8002d2e0 <__func__.0+0x2c0>
    80016712:	00f70663          	beq	a4,a5,8001671e <amo_page_fault_1+0xaa>
    80016716:	00017597          	auipc	a1,0x17
    8001671a:	bda58593          	addi	a1,a1,-1062 # 8002d2f0 <__func__.0+0x2d0>
    8001671e:	00017517          	auipc	a0,0x17
    80016722:	c1250513          	addi	a0,a0,-1006 # 8002d330 <__func__.0+0x310>
    80016726:	694140ef          	jal	8002adba <printf>
    8001672a:	0003b797          	auipc	a5,0x3b
    8001672e:	8e77c783          	lbu	a5,-1817(a5) # 80051011 <excpt+0x1>
    80016732:	c791                	beqz	a5,8001673e <amo_page_fault_1+0xca>
    80016734:	00893703          	ld	a4,8(s2)
    80016738:	47bd                	li	a5,15
    8001673a:	00f70c63          	beq	a4,a5,80016752 <amo_page_fault_1+0xde>
    8001673e:	00017517          	auipc	a0,0x17
    80016742:	bfa50513          	addi	a0,a0,-1030 # 8002d338 <__func__.0+0x318>
    80016746:	674140ef          	jal	8002adba <printf>
    8001674a:	02900513          	li	a0,41
    8001674e:	35a130ef          	jal	80029aa8 <putchar>
    80016752:	4529                	li	a0,10
    80016754:	354130ef          	jal	80029aa8 <putchar>
    80016758:	0003b797          	auipc	a5,0x3b
    8001675c:	8b97c783          	lbu	a5,-1863(a5) # 80051011 <excpt+0x1>
    80016760:	4481                	li	s1,0
    80016762:	c791                	beqz	a5,8001676e <amo_page_fault_1+0xfa>
    80016764:	00893483          	ld	s1,8(s2)
    80016768:	14c5                	addi	s1,s1,-15
    8001676a:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    8001676e:	e04ea0ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80016772:	001007b7          	lui	a5,0x100
    80016776:	05578793          	addi	a5,a5,85 # 100055 <STACK_SIZE+0x55>
    8001677a:	07b2                	slli	a5,a5,0xc
    8001677c:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GRWX);

    value = amoand_d(addr,value);
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    80016780:	08200593          	li	a1,130
    80016784:	0001c617          	auipc	a2,0x1c
    80016788:	21460613          	addi	a2,a2,532 # 80032998 <__func__.0+0x5978>
    8001678c:	00017517          	auipc	a0,0x17
    80016790:	b8c50513          	addi	a0,a0,-1140 # 8002d318 <__func__.0+0x2f8>
    80016794:	626140ef          	jal	8002adba <printf>
    80016798:	0003b797          	auipc	a5,0x3b
    8001679c:	8797c783          	lbu	a5,-1927(a5) # 80051011 <excpt+0x1>
    800167a0:	00017597          	auipc	a1,0x17
    800167a4:	b5058593          	addi	a1,a1,-1200 # 8002d2f0 <__func__.0+0x2d0>
    800167a8:	cf91                	beqz	a5,800167c4 <amo_page_fault_1+0x150>
    800167aa:	00893703          	ld	a4,8(s2)
    800167ae:	47bd                	li	a5,15
    800167b0:	00017597          	auipc	a1,0x17
    800167b4:	b3058593          	addi	a1,a1,-1232 # 8002d2e0 <__func__.0+0x2c0>
    800167b8:	00f70663          	beq	a4,a5,800167c4 <amo_page_fault_1+0x150>
    800167bc:	00017597          	auipc	a1,0x17
    800167c0:	b3458593          	addi	a1,a1,-1228 # 8002d2f0 <__func__.0+0x2d0>
    800167c4:	00017517          	auipc	a0,0x17
    800167c8:	b6c50513          	addi	a0,a0,-1172 # 8002d330 <__func__.0+0x310>
    800167cc:	5ee140ef          	jal	8002adba <printf>
    800167d0:	0003b797          	auipc	a5,0x3b
    800167d4:	8417c783          	lbu	a5,-1983(a5) # 80051011 <excpt+0x1>
    800167d8:	c791                	beqz	a5,800167e4 <amo_page_fault_1+0x170>
    800167da:	00893703          	ld	a4,8(s2)
    800167de:	47bd                	li	a5,15
    800167e0:	00f70c63          	beq	a4,a5,800167f8 <amo_page_fault_1+0x184>
    800167e4:	00017517          	auipc	a0,0x17
    800167e8:	b5450513          	addi	a0,a0,-1196 # 8002d338 <__func__.0+0x318>
    800167ec:	5ce140ef          	jal	8002adba <printf>
    800167f0:	02900513          	li	a0,41
    800167f4:	2b4130ef          	jal	80029aa8 <putchar>
    800167f8:	4529                	li	a0,10
    800167fa:	2ae130ef          	jal	80029aa8 <putchar>
    800167fe:	c499                	beqz	s1,8001680c <amo_page_fault_1+0x198>
    80016800:	0003b797          	auipc	a5,0x3b
    80016804:	8117c783          	lbu	a5,-2031(a5) # 80051011 <excpt+0x1>
    80016808:	4481                	li	s1,0
    8001680a:	e3cd                	bnez	a5,800168ac <amo_page_fault_1+0x238>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    8001680c:	d66ea0ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80016810:	4785                	li	a5,1
    80016812:	1782                	slli	a5,a5,0x20
    80016814:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    80016818:	08200593          	li	a1,130
    8001681c:	0001c617          	auipc	a2,0x1c
    80016820:	1b460613          	addi	a2,a2,436 # 800329d0 <__func__.0+0x59b0>
    80016824:	00017517          	auipc	a0,0x17
    80016828:	af450513          	addi	a0,a0,-1292 # 8002d318 <__func__.0+0x2f8>
    8001682c:	58e140ef          	jal	8002adba <printf>
    80016830:	0003a797          	auipc	a5,0x3a
    80016834:	7e17c783          	lbu	a5,2017(a5) # 80051011 <excpt+0x1>
    80016838:	00017597          	auipc	a1,0x17
    8001683c:	ab858593          	addi	a1,a1,-1352 # 8002d2f0 <__func__.0+0x2d0>
    80016840:	e789                	bnez	a5,8001684a <amo_page_fault_1+0x1d6>
    80016842:	00017597          	auipc	a1,0x17
    80016846:	a9e58593          	addi	a1,a1,-1378 # 8002d2e0 <__func__.0+0x2c0>
    8001684a:	00017517          	auipc	a0,0x17
    8001684e:	ae650513          	addi	a0,a0,-1306 # 8002d330 <__func__.0+0x310>
    80016852:	568140ef          	jal	8002adba <printf>
    80016856:	0003a797          	auipc	a5,0x3a
    8001685a:	7bb7c783          	lbu	a5,1979(a5) # 80051011 <excpt+0x1>
    8001685e:	efa9                	bnez	a5,800168b8 <amo_page_fault_1+0x244>
    80016860:	4529                	li	a0,10
    80016862:	246130ef          	jal	80029aa8 <putchar>
    80016866:	c491                	beqz	s1,80016872 <amo_page_fault_1+0x1fe>
    80016868:	0003a797          	auipc	a5,0x3a
    8001686c:	7a97c783          	lbu	a5,1961(a5) # 80051011 <excpt+0x1>
    80016870:	cb85                	beqz	a5,800168a0 <amo_page_fault_1+0x22c>
    80016872:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016874:	00017597          	auipc	a1,0x17
    80016878:	a7c58593          	addi	a1,a1,-1412 # 8002d2f0 <__func__.0+0x2d0>
    8001687c:	00017517          	auipc	a0,0x17
    80016880:	b1c50513          	addi	a0,a0,-1252 # 8002d398 <__func__.0+0x378>
    80016884:	536140ef          	jal	8002adba <printf>
    80016888:	4511                	li	a0,4
    8001688a:	de4ea0ef          	jal	80000e6e <goto_priv>
    8001688e:	efdea0ef          	jal	8000178a <reset_state>
}
    80016892:	60e2                	ld	ra,24(sp)
    80016894:	8522                	mv	a0,s0
    80016896:	6442                	ld	s0,16(sp)
    80016898:	64a2                	ld	s1,8(sp)
    8001689a:	6902                	ld	s2,0(sp)
    8001689c:	6105                	addi	sp,sp,32
    8001689e:	8082                	ret
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800168a0:	4405                	li	s0,1
    TEST_END();
    800168a2:	00017597          	auipc	a1,0x17
    800168a6:	a3e58593          	addi	a1,a1,-1474 # 8002d2e0 <__func__.0+0x2c0>
    800168aa:	bfc9                	j	8001687c <amo_page_fault_1+0x208>
    TEST_ASSERT("hs mode execute amoand_d when pte.w=0 leads to LPF",
    800168ac:	00893483          	ld	s1,8(s2)
    800168b0:	14c5                	addi	s1,s1,-15
    800168b2:	0014b493          	seqz	s1,s1
    800168b6:	bf99                	j	8001680c <amo_page_fault_1+0x198>
    TEST_ASSERT("hs mode execute amomax_d successful when pte.w=0",
    800168b8:	00017517          	auipc	a0,0x17
    800168bc:	a8050513          	addi	a0,a0,-1408 # 8002d338 <__func__.0+0x318>
    800168c0:	4fa140ef          	jal	8002adba <printf>
    800168c4:	02900513          	li	a0,41
    800168c8:	1e0130ef          	jal	80029aa8 <putchar>
    800168cc:	bf51                	j	80016860 <amo_page_fault_1+0x1ec>

00000000800168ce <amo_page_fault_2>:

bool amo_page_fault_2(){
    800168ce:	1101                	addi	sp,sp,-32

    TEST_START();
    800168d0:	00015597          	auipc	a1,0x15
    800168d4:	52058593          	addi	a1,a1,1312 # 8002bdf0 <__func__.4>
    800168d8:	00017517          	auipc	a0,0x17
    800168dc:	a2850513          	addi	a0,a0,-1496 # 8002d300 <__func__.0+0x2e0>
bool amo_page_fault_2(){
    800168e0:	ec06                	sd	ra,24(sp)
    800168e2:	e822                	sd	s0,16(sp)
    800168e4:	e426                	sd	s1,8(sp)
    TEST_START();
    800168e6:	4d4140ef          	jal	8002adba <printf>
    800168ea:	4529                	li	a0,10
    800168ec:	1bc130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800168f0:	450d                	li	a0,3
    800168f2:	d7cea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800168f6:	cebe90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800168fa:	882ea0ef          	jal	8000097c <hpt_init>
    vspt_init();
    800168fe:	e25e90ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    80016902:	4511                	li	a0,4
    80016904:	d6aea0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80016908:	000407b7          	lui	a5,0x40
    8001690c:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80016910:	450d                	li	a0,3
    80016912:	d5cea0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);    
    80016916:	4509                	li	a0,2
    80016918:	c76ea0ef          	jal	80000d8e <set_prev_priv>
    //执行amomin_d指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    8001691c:	c56ea0ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80016920:	000807b7          	lui	a5,0x80
    80016924:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016926:	4701                	li	a4,0
    80016928:	07b6                	slli	a5,a5,0xd
    8001692a:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    8001692e:	08200593          	li	a1,130
    80016932:	0001c617          	auipc	a2,0x1c
    80016936:	0d660613          	addi	a2,a2,214 # 80032a08 <__func__.0+0x59e8>
    8001693a:	00017517          	auipc	a0,0x17
    8001693e:	9de50513          	addi	a0,a0,-1570 # 8002d318 <__func__.0+0x2f8>
    80016942:	478140ef          	jal	8002adba <printf>
    80016946:	0003a797          	auipc	a5,0x3a
    8001694a:	6cb7c783          	lbu	a5,1739(a5) # 80051011 <excpt+0x1>
    8001694e:	0003a497          	auipc	s1,0x3a
    80016952:	6c248493          	addi	s1,s1,1730 # 80051010 <excpt>
    80016956:	00017597          	auipc	a1,0x17
    8001695a:	99a58593          	addi	a1,a1,-1638 # 8002d2f0 <__func__.0+0x2d0>
    8001695e:	cf89                	beqz	a5,80016978 <amo_page_fault_2+0xaa>
    80016960:	6498                	ld	a4,8(s1)
    80016962:	47bd                	li	a5,15
    80016964:	00017597          	auipc	a1,0x17
    80016968:	97c58593          	addi	a1,a1,-1668 # 8002d2e0 <__func__.0+0x2c0>
    8001696c:	00f70663          	beq	a4,a5,80016978 <amo_page_fault_2+0xaa>
    80016970:	00017597          	auipc	a1,0x17
    80016974:	98058593          	addi	a1,a1,-1664 # 8002d2f0 <__func__.0+0x2d0>
    80016978:	00017517          	auipc	a0,0x17
    8001697c:	9b850513          	addi	a0,a0,-1608 # 8002d330 <__func__.0+0x310>
    80016980:	43a140ef          	jal	8002adba <printf>
    80016984:	0003a797          	auipc	a5,0x3a
    80016988:	68d7c783          	lbu	a5,1677(a5) # 80051011 <excpt+0x1>
    8001698c:	c789                	beqz	a5,80016996 <amo_page_fault_2+0xc8>
    8001698e:	6498                	ld	a4,8(s1)
    80016990:	47bd                	li	a5,15
    80016992:	00f70c63          	beq	a4,a5,800169aa <amo_page_fault_2+0xdc>
    80016996:	00017517          	auipc	a0,0x17
    8001699a:	9a250513          	addi	a0,a0,-1630 # 8002d338 <__func__.0+0x318>
    8001699e:	41c140ef          	jal	8002adba <printf>
    800169a2:	02900513          	li	a0,41
    800169a6:	102130ef          	jal	80029aa8 <putchar>
    800169aa:	4529                	li	a0,10
    800169ac:	0fc130ef          	jal	80029aa8 <putchar>
    800169b0:	0003a417          	auipc	s0,0x3a
    800169b4:	66144403          	lbu	s0,1633(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    800169b8:	00017597          	auipc	a1,0x17
    800169bc:	93858593          	addi	a1,a1,-1736 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800169c0:	cc11                	beqz	s0,800169dc <amo_page_fault_2+0x10e>
    800169c2:	6498                	ld	a4,8(s1)
    800169c4:	47bd                	li	a5,15
    TEST_END();
    800169c6:	00017597          	auipc	a1,0x17
    800169ca:	91a58593          	addi	a1,a1,-1766 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode execute amomin_d of u mode page when sstatus.sum=0 leads to LPF",
    800169ce:	00f70763          	beq	a4,a5,800169dc <amo_page_fault_2+0x10e>
    800169d2:	4401                	li	s0,0
    TEST_END();
    800169d4:	00017597          	auipc	a1,0x17
    800169d8:	91c58593          	addi	a1,a1,-1764 # 8002d2f0 <__func__.0+0x2d0>
    800169dc:	00017517          	auipc	a0,0x17
    800169e0:	9bc50513          	addi	a0,a0,-1604 # 8002d398 <__func__.0+0x378>
    800169e4:	3d6140ef          	jal	8002adba <printf>
    800169e8:	4511                	li	a0,4
    800169ea:	c84ea0ef          	jal	80000e6e <goto_priv>
    800169ee:	d9dea0ef          	jal	8000178a <reset_state>
}
    800169f2:	60e2                	ld	ra,24(sp)
    800169f4:	8522                	mv	a0,s0
    800169f6:	6442                	ld	s0,16(sp)
    800169f8:	64a2                	ld	s1,8(sp)
    800169fa:	6105                	addi	sp,sp,32
    800169fc:	8082                	ret

00000000800169fe <amo_page_fault_3>:

bool amo_page_fault_3(){
    800169fe:	1141                	addi	sp,sp,-16

    TEST_START();
    80016a00:	00015597          	auipc	a1,0x15
    80016a04:	40858593          	addi	a1,a1,1032 # 8002be08 <__func__.3>
    80016a08:	00017517          	auipc	a0,0x17
    80016a0c:	8f850513          	addi	a0,a0,-1800 # 8002d300 <__func__.0+0x2e0>
bool amo_page_fault_3(){
    80016a10:	e406                	sd	ra,8(sp)
    80016a12:	e022                	sd	s0,0(sp)
    TEST_START();
    80016a14:	3a6140ef          	jal	8002adba <printf>
    80016a18:	4529                	li	a0,10
    80016a1a:	08e130ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80016a1e:	450d                	li	a0,3
    80016a20:	c4eea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016a24:	bbde90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016a28:	f55e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    80016a2c:	cf7e90ef          	jal	80000722 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016a30:	4511                	li	a0,4
    80016a32:	c3cea0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80016a36:	000407b7          	lui	a5,0x40
    80016a3a:	3007a073          	csrs	mstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80016a3e:	450d                	li	a0,3
    80016a40:	c2eea0ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);   
    80016a44:	4509                	li	a0,2
    80016a46:	b48ea0ef          	jal	80000d8e <set_prev_priv>
    
    TEST_SETUP_EXCEPT();
    80016a4a:	b28ea0ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016a4e:	000807b7          	lui	a5,0x80
    80016a52:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016a54:	4701                	li	a4,0
    80016a56:	07b6                	slli	a5,a5,0xd
    80016a58:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016a5c:	08200593          	li	a1,130
    80016a60:	0001c617          	auipc	a2,0x1c
    80016a64:	ff060613          	addi	a2,a2,-16 # 80032a50 <__func__.0+0x5a30>
    80016a68:	00017517          	auipc	a0,0x17
    80016a6c:	8b050513          	addi	a0,a0,-1872 # 8002d318 <__func__.0+0x2f8>
    80016a70:	34a140ef          	jal	8002adba <printf>
    80016a74:	0003a797          	auipc	a5,0x3a
    80016a78:	59d7c783          	lbu	a5,1437(a5) # 80051011 <excpt+0x1>
    80016a7c:	00017597          	auipc	a1,0x17
    80016a80:	86458593          	addi	a1,a1,-1948 # 8002d2e0 <__func__.0+0x2c0>
    80016a84:	c789                	beqz	a5,80016a8e <amo_page_fault_3+0x90>
    80016a86:	00017597          	auipc	a1,0x17
    80016a8a:	86a58593          	addi	a1,a1,-1942 # 8002d2f0 <__func__.0+0x2d0>
    80016a8e:	00017517          	auipc	a0,0x17
    80016a92:	8a250513          	addi	a0,a0,-1886 # 8002d330 <__func__.0+0x310>
    80016a96:	324140ef          	jal	8002adba <printf>
    80016a9a:	0003a797          	auipc	a5,0x3a
    80016a9e:	5777c783          	lbu	a5,1399(a5) # 80051011 <excpt+0x1>
    80016aa2:	e7a1                	bnez	a5,80016aea <amo_page_fault_3+0xec>
    80016aa4:	4529                	li	a0,10
    80016aa6:	002130ef          	jal	80029aa8 <putchar>
    80016aaa:	0003a797          	auipc	a5,0x3a
    80016aae:	5677c783          	lbu	a5,1383(a5) # 80051011 <excpt+0x1>
    80016ab2:	e795                	bnez	a5,80016ade <amo_page_fault_3+0xe0>
    80016ab4:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016ab6:	00017597          	auipc	a1,0x17
    80016aba:	82a58593          	addi	a1,a1,-2006 # 8002d2e0 <__func__.0+0x2c0>
    80016abe:	00017517          	auipc	a0,0x17
    80016ac2:	8da50513          	addi	a0,a0,-1830 # 8002d398 <__func__.0+0x378>
    80016ac6:	2f4140ef          	jal	8002adba <printf>
    80016aca:	4511                	li	a0,4
    80016acc:	ba2ea0ef          	jal	80000e6e <goto_priv>
    80016ad0:	cbbea0ef          	jal	8000178a <reset_state>
}
    80016ad4:	60a2                	ld	ra,8(sp)
    80016ad6:	8522                	mv	a0,s0
    80016ad8:	6402                	ld	s0,0(sp)
    80016ada:	0141                	addi	sp,sp,16
    80016adc:	8082                	ret
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016ade:	4401                	li	s0,0
    TEST_END();
    80016ae0:	00017597          	auipc	a1,0x17
    80016ae4:	81058593          	addi	a1,a1,-2032 # 8002d2f0 <__func__.0+0x2d0>
    80016ae8:	bfd9                	j	80016abe <amo_page_fault_3+0xc0>
    TEST_ASSERT("hs mode execute amoadd_w of u mode page when sstatus.sum=1 successful",
    80016aea:	00017517          	auipc	a0,0x17
    80016aee:	84e50513          	addi	a0,a0,-1970 # 8002d338 <__func__.0+0x318>
    80016af2:	2c8140ef          	jal	8002adba <printf>
    80016af6:	02900513          	li	a0,41
    80016afa:	7af120ef          	jal	80029aa8 <putchar>
    80016afe:	b75d                	j	80016aa4 <amo_page_fault_3+0xa6>

0000000080016b00 <amo_page_fault_4>:

bool amo_page_fault_4(){
    80016b00:	1101                	addi	sp,sp,-32

    TEST_START();
    80016b02:	00015597          	auipc	a1,0x15
    80016b06:	31e58593          	addi	a1,a1,798 # 8002be20 <__func__.2>
    80016b0a:	00016517          	auipc	a0,0x16
    80016b0e:	7f650513          	addi	a0,a0,2038 # 8002d300 <__func__.0+0x2e0>
bool amo_page_fault_4(){
    80016b12:	ec06                	sd	ra,24(sp)
    80016b14:	e822                	sd	s0,16(sp)
    80016b16:	e426                	sd	s1,8(sp)
    80016b18:	e04a                	sd	s2,0(sp)
    TEST_START();
    80016b1a:	2a0140ef          	jal	8002adba <printf>
    80016b1e:	4529                	li	a0,10
    80016b20:	789120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80016b24:	450d                	li	a0,3
    80016b26:	b48ea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016b2a:	ab7e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016b2e:	e4fe90ef          	jal	8000097c <hpt_init>
    vspt_init();
    80016b32:	bf1e90ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    80016b36:	4509                	li	a0,2
    80016b38:	b36ea0ef          	jal	80000e6e <goto_priv>

    //执行取指指令时，pte.v=0
    TEST_SETUP_EXCEPT();
    80016b3c:	a36ea0ef          	jal	80000d72 <test_setup_except_function>
    80016b40:	deadc7b7          	lui	a5,0xdeadc
    80016b44:	40019737          	lui	a4,0x40019
    80016b48:	eef7879b          	addiw	a5,a5,-273 # ffffffffdeadbeef <__stack_top+0xffffffff5e7dceef>
    80016b4c:	070a                	slli	a4,a4,0x2
    80016b4e:	00f727af          	amoadd.w	a5,a5,(a4)

    addr = hs_page_base(VSI_GI);
    value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016b52:	08200593          	li	a1,130
    80016b56:	0001c617          	auipc	a2,0x1c
    80016b5a:	f4260613          	addi	a2,a2,-190 # 80032a98 <__func__.0+0x5a78>
    80016b5e:	00016517          	auipc	a0,0x16
    80016b62:	7ba50513          	addi	a0,a0,1978 # 8002d318 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80016b66:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016b6a:	250140ef          	jal	8002adba <printf>
    80016b6e:	0003a797          	auipc	a5,0x3a
    80016b72:	4a37c783          	lbu	a5,1187(a5) # 80051011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80016b76:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("vs mode execute amoadd_w when pte.v=0 leads to SPF",
    80016b78:	0003a917          	auipc	s2,0x3a
    80016b7c:	49890913          	addi	s2,s2,1176 # 80051010 <excpt>
    80016b80:	00016597          	auipc	a1,0x16
    80016b84:	77058593          	addi	a1,a1,1904 # 8002d2f0 <__func__.0+0x2d0>
    80016b88:	cf91                	beqz	a5,80016ba4 <amo_page_fault_4+0xa4>
    80016b8a:	00893703          	ld	a4,8(s2)
    80016b8e:	47bd                	li	a5,15
    80016b90:	00016597          	auipc	a1,0x16
    80016b94:	75058593          	addi	a1,a1,1872 # 8002d2e0 <__func__.0+0x2c0>
    80016b98:	00f70663          	beq	a4,a5,80016ba4 <amo_page_fault_4+0xa4>
    80016b9c:	00016597          	auipc	a1,0x16
    80016ba0:	75458593          	addi	a1,a1,1876 # 8002d2f0 <__func__.0+0x2d0>
    80016ba4:	00016517          	auipc	a0,0x16
    80016ba8:	78c50513          	addi	a0,a0,1932 # 8002d330 <__func__.0+0x310>
    80016bac:	20e140ef          	jal	8002adba <printf>
    80016bb0:	0003a797          	auipc	a5,0x3a
    80016bb4:	4617c783          	lbu	a5,1121(a5) # 80051011 <excpt+0x1>
    80016bb8:	c791                	beqz	a5,80016bc4 <amo_page_fault_4+0xc4>
    80016bba:	00893703          	ld	a4,8(s2)
    80016bbe:	47bd                	li	a5,15
    80016bc0:	00f70c63          	beq	a4,a5,80016bd8 <amo_page_fault_4+0xd8>
    80016bc4:	00016517          	auipc	a0,0x16
    80016bc8:	77450513          	addi	a0,a0,1908 # 8002d338 <__func__.0+0x318>
    80016bcc:	1ee140ef          	jal	8002adba <printf>
    80016bd0:	02900513          	li	a0,41
    80016bd4:	6d5120ef          	jal	80029aa8 <putchar>
    80016bd8:	4529                	li	a0,10
    80016bda:	6cf120ef          	jal	80029aa8 <putchar>
    80016bde:	0003a797          	auipc	a5,0x3a
    80016be2:	4337c783          	lbu	a5,1075(a5) # 80051011 <excpt+0x1>
    80016be6:	4481                	li	s1,0
    80016be8:	c791                	beqz	a5,80016bf4 <amo_page_fault_4+0xf4>
    80016bea:	00893483          	ld	s1,8(s2)
    80016bee:	14c5                	addi	s1,s1,-15
    80016bf0:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SPF
    );


    //执行amoand_d指令时，如果此时pte.w=0
    TEST_SETUP_EXCEPT();
    80016bf4:	97eea0ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    80016bf8:	000807b7          	lui	a5,0x80
    80016bfc:	0795                	addi	a5,a5,5 # 80005 <_test_table_size+0x80004>
    80016bfe:	07b6                	slli	a5,a5,0xd
    80016c00:	6087b42f          	amoand.d	s0,s0,(a5)
    addr = hs_page_base(VSRX_GURWX);

    value = amoand_d(addr,value);

    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016c04:	08200593          	li	a1,130
    80016c08:	0001c617          	auipc	a2,0x1c
    80016c0c:	ec860613          	addi	a2,a2,-312 # 80032ad0 <__func__.0+0x5ab0>
    80016c10:	00016517          	auipc	a0,0x16
    80016c14:	70850513          	addi	a0,a0,1800 # 8002d318 <__func__.0+0x2f8>
    80016c18:	1a2140ef          	jal	8002adba <printf>
    80016c1c:	0003a797          	auipc	a5,0x3a
    80016c20:	3f57c783          	lbu	a5,1013(a5) # 80051011 <excpt+0x1>
    80016c24:	00016597          	auipc	a1,0x16
    80016c28:	6cc58593          	addi	a1,a1,1740 # 8002d2f0 <__func__.0+0x2d0>
    80016c2c:	cf91                	beqz	a5,80016c48 <amo_page_fault_4+0x148>
    80016c2e:	00893703          	ld	a4,8(s2)
    80016c32:	47bd                	li	a5,15
    80016c34:	00016597          	auipc	a1,0x16
    80016c38:	6ac58593          	addi	a1,a1,1708 # 8002d2e0 <__func__.0+0x2c0>
    80016c3c:	00f70663          	beq	a4,a5,80016c48 <amo_page_fault_4+0x148>
    80016c40:	00016597          	auipc	a1,0x16
    80016c44:	6b058593          	addi	a1,a1,1712 # 8002d2f0 <__func__.0+0x2d0>
    80016c48:	00016517          	auipc	a0,0x16
    80016c4c:	6e850513          	addi	a0,a0,1768 # 8002d330 <__func__.0+0x310>
    80016c50:	16a140ef          	jal	8002adba <printf>
    80016c54:	0003a797          	auipc	a5,0x3a
    80016c58:	3bd7c783          	lbu	a5,957(a5) # 80051011 <excpt+0x1>
    80016c5c:	c791                	beqz	a5,80016c68 <amo_page_fault_4+0x168>
    80016c5e:	00893703          	ld	a4,8(s2)
    80016c62:	47bd                	li	a5,15
    80016c64:	00f70c63          	beq	a4,a5,80016c7c <amo_page_fault_4+0x17c>
    80016c68:	00016517          	auipc	a0,0x16
    80016c6c:	6d050513          	addi	a0,a0,1744 # 8002d338 <__func__.0+0x318>
    80016c70:	14a140ef          	jal	8002adba <printf>
    80016c74:	02900513          	li	a0,41
    80016c78:	631120ef          	jal	80029aa8 <putchar>
    80016c7c:	4529                	li	a0,10
    80016c7e:	62b120ef          	jal	80029aa8 <putchar>
    80016c82:	c499                	beqz	s1,80016c90 <amo_page_fault_4+0x190>
    80016c84:	0003a797          	auipc	a5,0x3a
    80016c88:	38d7c783          	lbu	a5,909(a5) # 80051011 <excpt+0x1>
    80016c8c:	4481                	li	s1,0
    80016c8e:	e3cd                	bnez	a5,80016d30 <amo_page_fault_4+0x230>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    //执行amoand_d指令时，如果此时pte.w=1
    TEST_SETUP_EXCEPT();
    80016c90:	8e2ea0ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80016c94:	4785                	li	a5,1
    80016c96:	1782                	slli	a5,a5,0x20
    80016c98:	a087b42f          	amomax.d	s0,s0,(a5)
    addr = hs_page_base(VSRWX_GURWX);

    value = amomax_d(addr,value);
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016c9c:	08200593          	li	a1,130
    80016ca0:	0001c617          	auipc	a2,0x1c
    80016ca4:	e6060613          	addi	a2,a2,-416 # 80032b00 <__func__.0+0x5ae0>
    80016ca8:	00016517          	auipc	a0,0x16
    80016cac:	67050513          	addi	a0,a0,1648 # 8002d318 <__func__.0+0x2f8>
    80016cb0:	10a140ef          	jal	8002adba <printf>
    80016cb4:	0003a797          	auipc	a5,0x3a
    80016cb8:	35d7c783          	lbu	a5,861(a5) # 80051011 <excpt+0x1>
    80016cbc:	00016597          	auipc	a1,0x16
    80016cc0:	63458593          	addi	a1,a1,1588 # 8002d2f0 <__func__.0+0x2d0>
    80016cc4:	e789                	bnez	a5,80016cce <amo_page_fault_4+0x1ce>
    80016cc6:	00016597          	auipc	a1,0x16
    80016cca:	61a58593          	addi	a1,a1,1562 # 8002d2e0 <__func__.0+0x2c0>
    80016cce:	00016517          	auipc	a0,0x16
    80016cd2:	66250513          	addi	a0,a0,1634 # 8002d330 <__func__.0+0x310>
    80016cd6:	0e4140ef          	jal	8002adba <printf>
    80016cda:	0003a797          	auipc	a5,0x3a
    80016cde:	3377c783          	lbu	a5,823(a5) # 80051011 <excpt+0x1>
    80016ce2:	efa9                	bnez	a5,80016d3c <amo_page_fault_4+0x23c>
    80016ce4:	4529                	li	a0,10
    80016ce6:	5c3120ef          	jal	80029aa8 <putchar>
    80016cea:	c491                	beqz	s1,80016cf6 <amo_page_fault_4+0x1f6>
    80016cec:	0003a797          	auipc	a5,0x3a
    80016cf0:	3257c783          	lbu	a5,805(a5) # 80051011 <excpt+0x1>
    80016cf4:	cb85                	beqz	a5,80016d24 <amo_page_fault_4+0x224>
    80016cf6:	4401                	li	s0,0
        excpt.triggered == false
    );

    TEST_END();
    80016cf8:	00016597          	auipc	a1,0x16
    80016cfc:	5f858593          	addi	a1,a1,1528 # 8002d2f0 <__func__.0+0x2d0>
    80016d00:	00016517          	auipc	a0,0x16
    80016d04:	69850513          	addi	a0,a0,1688 # 8002d398 <__func__.0+0x378>
    80016d08:	0b2140ef          	jal	8002adba <printf>
    80016d0c:	4511                	li	a0,4
    80016d0e:	960ea0ef          	jal	80000e6e <goto_priv>
    80016d12:	a79ea0ef          	jal	8000178a <reset_state>
}
    80016d16:	60e2                	ld	ra,24(sp)
    80016d18:	8522                	mv	a0,s0
    80016d1a:	6442                	ld	s0,16(sp)
    80016d1c:	64a2                	ld	s1,8(sp)
    80016d1e:	6902                	ld	s2,0(sp)
    80016d20:	6105                	addi	sp,sp,32
    80016d22:	8082                	ret
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016d24:	4405                	li	s0,1
    TEST_END();
    80016d26:	00016597          	auipc	a1,0x16
    80016d2a:	5ba58593          	addi	a1,a1,1466 # 8002d2e0 <__func__.0+0x2c0>
    80016d2e:	bfc9                	j	80016d00 <amo_page_fault_4+0x200>
    TEST_ASSERT("vs mode execute amoand_d pte.w=0 leads to LPF",
    80016d30:	00893483          	ld	s1,8(s2)
    80016d34:	14c5                	addi	s1,s1,-15
    80016d36:	0014b493          	seqz	s1,s1
    80016d3a:	bf99                	j	80016c90 <amo_page_fault_4+0x190>
    TEST_ASSERT("vs mode execute amomax_d successful when pte.w=0",
    80016d3c:	00016517          	auipc	a0,0x16
    80016d40:	5fc50513          	addi	a0,a0,1532 # 8002d338 <__func__.0+0x318>
    80016d44:	076140ef          	jal	8002adba <printf>
    80016d48:	02900513          	li	a0,41
    80016d4c:	55d120ef          	jal	80029aa8 <putchar>
    80016d50:	bf51                	j	80016ce4 <amo_page_fault_4+0x1e4>

0000000080016d52 <amo_page_fault_5>:

bool amo_page_fault_5(){
    80016d52:	1101                	addi	sp,sp,-32

    TEST_START();
    80016d54:	00015597          	auipc	a1,0x15
    80016d58:	0e458593          	addi	a1,a1,228 # 8002be38 <__func__.1>
    80016d5c:	00016517          	auipc	a0,0x16
    80016d60:	5a450513          	addi	a0,a0,1444 # 8002d300 <__func__.0+0x2e0>
bool amo_page_fault_5(){
    80016d64:	ec06                	sd	ra,24(sp)
    80016d66:	e822                	sd	s0,16(sp)
    80016d68:	e426                	sd	s1,8(sp)
    TEST_START();
    80016d6a:	050140ef          	jal	8002adba <printf>
    80016d6e:	4529                	li	a0,10
    80016d70:	539120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80016d74:	450d                	li	a0,3
    80016d76:	8f8ea0ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016d7a:	867e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016d7e:	bffe90ef          	jal	8000097c <hpt_init>
    vspt_init();
    80016d82:	9a1e90ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    80016d86:	4511                	li	a0,4
    80016d88:	8e6ea0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80016d8c:	000407b7          	lui	a5,0x40
    80016d90:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80016d94:	4509                	li	a0,2
    80016d96:	8d8ea0ef          	jal	80000e6e <goto_priv>
   
    //执行amomin_d指令时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项(sstatus配置不进去，需要配置mstatus)
    TEST_SETUP_EXCEPT();
    80016d9a:	fd9e90ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    80016d9e:	000807b7          	lui	a5,0x80
    80016da2:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016da4:	4701                	li	a4,0
    80016da6:	07b6                	slli	a5,a5,0xd
    80016da8:	80e7b72f          	amomin.d	a4,a4,(a5)
    uintptr_t addr = hs_page_base(VSURWX_GURWX);


    uint64_t value = amomin_d(addr,value);
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016dac:	08200593          	li	a1,130
    80016db0:	0001c617          	auipc	a2,0x1c
    80016db4:	d8860613          	addi	a2,a2,-632 # 80032b38 <__func__.0+0x5b18>
    80016db8:	00016517          	auipc	a0,0x16
    80016dbc:	56050513          	addi	a0,a0,1376 # 8002d318 <__func__.0+0x2f8>
    80016dc0:	7fb130ef          	jal	8002adba <printf>
    80016dc4:	0003a797          	auipc	a5,0x3a
    80016dc8:	24d7c783          	lbu	a5,589(a5) # 80051011 <excpt+0x1>
    80016dcc:	0003a497          	auipc	s1,0x3a
    80016dd0:	24448493          	addi	s1,s1,580 # 80051010 <excpt>
    80016dd4:	00016597          	auipc	a1,0x16
    80016dd8:	51c58593          	addi	a1,a1,1308 # 8002d2f0 <__func__.0+0x2d0>
    80016ddc:	cf89                	beqz	a5,80016df6 <amo_page_fault_5+0xa4>
    80016dde:	6498                	ld	a4,8(s1)
    80016de0:	47bd                	li	a5,15
    80016de2:	00016597          	auipc	a1,0x16
    80016de6:	4fe58593          	addi	a1,a1,1278 # 8002d2e0 <__func__.0+0x2c0>
    80016dea:	00f70663          	beq	a4,a5,80016df6 <amo_page_fault_5+0xa4>
    80016dee:	00016597          	auipc	a1,0x16
    80016df2:	50258593          	addi	a1,a1,1282 # 8002d2f0 <__func__.0+0x2d0>
    80016df6:	00016517          	auipc	a0,0x16
    80016dfa:	53a50513          	addi	a0,a0,1338 # 8002d330 <__func__.0+0x310>
    80016dfe:	7bd130ef          	jal	8002adba <printf>
    80016e02:	0003a797          	auipc	a5,0x3a
    80016e06:	20f7c783          	lbu	a5,527(a5) # 80051011 <excpt+0x1>
    80016e0a:	c789                	beqz	a5,80016e14 <amo_page_fault_5+0xc2>
    80016e0c:	6498                	ld	a4,8(s1)
    80016e0e:	47bd                	li	a5,15
    80016e10:	00f70c63          	beq	a4,a5,80016e28 <amo_page_fault_5+0xd6>
    80016e14:	00016517          	auipc	a0,0x16
    80016e18:	52450513          	addi	a0,a0,1316 # 8002d338 <__func__.0+0x318>
    80016e1c:	79f130ef          	jal	8002adba <printf>
    80016e20:	02900513          	li	a0,41
    80016e24:	485120ef          	jal	80029aa8 <putchar>
    80016e28:	4529                	li	a0,10
    80016e2a:	47f120ef          	jal	80029aa8 <putchar>
    80016e2e:	0003a417          	auipc	s0,0x3a
    80016e32:	1e344403          	lbu	s0,483(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80016e36:	00016597          	auipc	a1,0x16
    80016e3a:	4ba58593          	addi	a1,a1,1210 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016e3e:	cc11                	beqz	s0,80016e5a <amo_page_fault_5+0x108>
    80016e40:	6498                	ld	a4,8(s1)
    80016e42:	47bd                	li	a5,15
    TEST_END();
    80016e44:	00016597          	auipc	a1,0x16
    80016e48:	49c58593          	addi	a1,a1,1180 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode execute amomin_d of u mode page when vsstatus.sum=0 leads to LPF",
    80016e4c:	00f70763          	beq	a4,a5,80016e5a <amo_page_fault_5+0x108>
    80016e50:	4401                	li	s0,0
    TEST_END();
    80016e52:	00016597          	auipc	a1,0x16
    80016e56:	49e58593          	addi	a1,a1,1182 # 8002d2f0 <__func__.0+0x2d0>
    80016e5a:	00016517          	auipc	a0,0x16
    80016e5e:	53e50513          	addi	a0,a0,1342 # 8002d398 <__func__.0+0x378>
    80016e62:	759130ef          	jal	8002adba <printf>
    80016e66:	4511                	li	a0,4
    80016e68:	806ea0ef          	jal	80000e6e <goto_priv>
    80016e6c:	91fea0ef          	jal	8000178a <reset_state>
}
    80016e70:	60e2                	ld	ra,24(sp)
    80016e72:	8522                	mv	a0,s0
    80016e74:	6442                	ld	s0,16(sp)
    80016e76:	64a2                	ld	s1,8(sp)
    80016e78:	6105                	addi	sp,sp,32
    80016e7a:	8082                	ret

0000000080016e7c <amo_page_fault_6>:

bool amo_page_fault_6(){
    80016e7c:	1141                	addi	sp,sp,-16

    TEST_START();
    80016e7e:	00015597          	auipc	a1,0x15
    80016e82:	fd258593          	addi	a1,a1,-46 # 8002be50 <__func__.0>
    80016e86:	00016517          	auipc	a0,0x16
    80016e8a:	47a50513          	addi	a0,a0,1146 # 8002d300 <__func__.0+0x2e0>
bool amo_page_fault_6(){
    80016e8e:	e406                	sd	ra,8(sp)
    80016e90:	e022                	sd	s0,0(sp)
    TEST_START();
    80016e92:	729130ef          	jal	8002adba <printf>
    80016e96:	4529                	li	a0,10
    80016e98:	411120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80016e9c:	450d                	li	a0,3
    80016e9e:	fd1e90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016ea2:	f3ee90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016ea6:	ad7e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    80016eaa:	879e90ef          	jal	80000722 <vspt_init>

 

    //执行amoadd_w指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    80016eae:	4511                	li	a0,4
    80016eb0:	fbfe90ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80016eb4:	000407b7          	lui	a5,0x40
    80016eb8:	2007a073          	csrs	vsstatus,a5

    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    goto_priv(PRIV_VS);   
    80016ebc:	4509                	li	a0,2
    80016ebe:	fb1e90ef          	jal	80000e6e <goto_priv>
    
    TEST_SETUP_EXCEPT();
    80016ec2:	eb1e90ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80016ec6:	000807b7          	lui	a5,0x80
    80016eca:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80016ecc:	4701                	li	a4,0
    80016ece:	07b6                	slli	a5,a5,0xd
    80016ed0:	00e7a72f          	amoadd.w	a4,a4,(a5)
    uint64_t value = amoadd_w(addr,value);
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80016ed4:	08200593          	li	a1,130
    80016ed8:	0001c617          	auipc	a2,0x1c
    80016edc:	cb060613          	addi	a2,a2,-848 # 80032b88 <__func__.0+0x5b68>
    80016ee0:	00016517          	auipc	a0,0x16
    80016ee4:	43850513          	addi	a0,a0,1080 # 8002d318 <__func__.0+0x2f8>
    80016ee8:	6d3130ef          	jal	8002adba <printf>
    80016eec:	0003a797          	auipc	a5,0x3a
    80016ef0:	1257c783          	lbu	a5,293(a5) # 80051011 <excpt+0x1>
    80016ef4:	00016597          	auipc	a1,0x16
    80016ef8:	3ec58593          	addi	a1,a1,1004 # 8002d2e0 <__func__.0+0x2c0>
    80016efc:	c789                	beqz	a5,80016f06 <amo_page_fault_6+0x8a>
    80016efe:	00016597          	auipc	a1,0x16
    80016f02:	3f258593          	addi	a1,a1,1010 # 8002d2f0 <__func__.0+0x2d0>
    80016f06:	00016517          	auipc	a0,0x16
    80016f0a:	42a50513          	addi	a0,a0,1066 # 8002d330 <__func__.0+0x310>
    80016f0e:	6ad130ef          	jal	8002adba <printf>
    80016f12:	0003a797          	auipc	a5,0x3a
    80016f16:	0ff7c783          	lbu	a5,255(a5) # 80051011 <excpt+0x1>
    80016f1a:	e7a1                	bnez	a5,80016f62 <amo_page_fault_6+0xe6>
    80016f1c:	4529                	li	a0,10
    80016f1e:	38b120ef          	jal	80029aa8 <putchar>
    80016f22:	0003a797          	auipc	a5,0x3a
    80016f26:	0ef7c783          	lbu	a5,239(a5) # 80051011 <excpt+0x1>
    80016f2a:	e795                	bnez	a5,80016f56 <amo_page_fault_6+0xda>
    80016f2c:	4405                	li	s0,1


    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80016f2e:	00016597          	auipc	a1,0x16
    80016f32:	3b258593          	addi	a1,a1,946 # 8002d2e0 <__func__.0+0x2c0>
    80016f36:	00016517          	auipc	a0,0x16
    80016f3a:	46250513          	addi	a0,a0,1122 # 8002d398 <__func__.0+0x378>
    80016f3e:	67d130ef          	jal	8002adba <printf>
    80016f42:	4511                	li	a0,4
    80016f44:	f2be90ef          	jal	80000e6e <goto_priv>
    80016f48:	843ea0ef          	jal	8000178a <reset_state>
}
    80016f4c:	60a2                	ld	ra,8(sp)
    80016f4e:	8522                	mv	a0,s0
    80016f50:	6402                	ld	s0,0(sp)
    80016f52:	0141                	addi	sp,sp,16
    80016f54:	8082                	ret
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80016f56:	4401                	li	s0,0
    TEST_END();
    80016f58:	00016597          	auipc	a1,0x16
    80016f5c:	39858593          	addi	a1,a1,920 # 8002d2f0 <__func__.0+0x2d0>
    80016f60:	bfd9                	j	80016f36 <amo_page_fault_6+0xba>
    TEST_ASSERT("vs mode execute amoadd_w of u mode page when vsstatus.sum=1 successful",
    80016f62:	00016517          	auipc	a0,0x16
    80016f66:	3d650513          	addi	a0,a0,982 # 8002d338 <__func__.0+0x318>
    80016f6a:	651130ef          	jal	8002adba <printf>
    80016f6e:	02900513          	li	a0,41
    80016f72:	337120ef          	jal	80029aa8 <putchar>
    80016f76:	b75d                	j	80016f1c <amo_page_fault_6+0xa0>

0000000080016f78 <load_guest_page_fault_1>:
 #include <rvh_test.h>
#include <page_tables.h>

bool load_guest_page_fault_1(){
    80016f78:	1101                	addi	sp,sp,-32

    TEST_START();
    80016f7a:	00015597          	auipc	a1,0x15
    80016f7e:	eee58593          	addi	a1,a1,-274 # 8002be68 <__func__.37>
    80016f82:	00016517          	auipc	a0,0x16
    80016f86:	37e50513          	addi	a0,a0,894 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_1(){
    80016f8a:	ec06                	sd	ra,24(sp)
    80016f8c:	e822                	sd	s0,16(sp)
    80016f8e:	e426                	sd	s1,8(sp)
    TEST_START();
    80016f90:	62b130ef          	jal	8002adba <printf>
    80016f94:	4529                	li	a0,10
    80016f96:	313120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80016f9a:	450d                	li	a0,3
    80016f9c:	ed3e90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80016fa0:	e40e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80016fa4:	9d9e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    80016fa8:	f7ae90ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80016fac:	450d                	li	a0,3
    80016fae:	ec1e90ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80016fb2:	4509                	li	a0,2
    80016fb4:	ddbe90ef          	jal	80000d8e <set_prev_priv>

    //执行取指相关指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80016fb8:	dbbe90ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80016fbc:	001007b7          	lui	a5,0x100
    80016fc0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80016fc4:	07b2                	slli	a5,a5,0xc
    80016fc6:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = hs_page_base(VSRWX_GI);
    hlvd(vaddr);
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80016fca:	08200593          	li	a1,130
    80016fce:	0001c617          	auipc	a2,0x1c
    80016fd2:	c0260613          	addi	a2,a2,-1022 # 80032bd0 <__func__.0+0x5bb0>
    80016fd6:	00016517          	auipc	a0,0x16
    80016fda:	34250513          	addi	a0,a0,834 # 8002d318 <__func__.0+0x2f8>
    80016fde:	5dd130ef          	jal	8002adba <printf>
    80016fe2:	0003a797          	auipc	a5,0x3a
    80016fe6:	02f7c783          	lbu	a5,47(a5) # 80051011 <excpt+0x1>
    80016fea:	0003a497          	auipc	s1,0x3a
    80016fee:	02648493          	addi	s1,s1,38 # 80051010 <excpt>
    80016ff2:	00016597          	auipc	a1,0x16
    80016ff6:	2fe58593          	addi	a1,a1,766 # 8002d2f0 <__func__.0+0x2d0>
    80016ffa:	cf89                	beqz	a5,80017014 <load_guest_page_fault_1+0x9c>
    80016ffc:	6498                	ld	a4,8(s1)
    80016ffe:	47d5                	li	a5,21
    80017000:	00016597          	auipc	a1,0x16
    80017004:	2e058593          	addi	a1,a1,736 # 8002d2e0 <__func__.0+0x2c0>
    80017008:	00f70663          	beq	a4,a5,80017014 <load_guest_page_fault_1+0x9c>
    8001700c:	00016597          	auipc	a1,0x16
    80017010:	2e458593          	addi	a1,a1,740 # 8002d2f0 <__func__.0+0x2d0>
    80017014:	00016517          	auipc	a0,0x16
    80017018:	31c50513          	addi	a0,a0,796 # 8002d330 <__func__.0+0x310>
    8001701c:	59f130ef          	jal	8002adba <printf>
    80017020:	0003a797          	auipc	a5,0x3a
    80017024:	ff17c783          	lbu	a5,-15(a5) # 80051011 <excpt+0x1>
    80017028:	c789                	beqz	a5,80017032 <load_guest_page_fault_1+0xba>
    8001702a:	6498                	ld	a4,8(s1)
    8001702c:	47d5                	li	a5,21
    8001702e:	00f70c63          	beq	a4,a5,80017046 <load_guest_page_fault_1+0xce>
    80017032:	00016517          	auipc	a0,0x16
    80017036:	30650513          	addi	a0,a0,774 # 8002d338 <__func__.0+0x318>
    8001703a:	581130ef          	jal	8002adba <printf>
    8001703e:	02900513          	li	a0,41
    80017042:	267120ef          	jal	80029aa8 <putchar>
    80017046:	4529                	li	a0,10
    80017048:	261120ef          	jal	80029aa8 <putchar>
    8001704c:	0003a797          	auipc	a5,0x3a
    80017050:	fc57c783          	lbu	a5,-59(a5) # 80051011 <excpt+0x1>
    80017054:	4401                	li	s0,0
    80017056:	c789                	beqz	a5,80017060 <load_guest_page_fault_1+0xe8>
    80017058:	6480                	ld	s0,8(s1)
    8001705a:	142d                	addi	s0,s0,-21
    8001705c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行hlvb指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80017060:	d13e90ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80017064:	001007b7          	lui	a5,0x100
    80017068:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001706c:	07b2                	slli	a5,a5,0xc
    8001706e:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSRWX_GI);

    hlvb(vaddr);   
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    80017072:	08200593          	li	a1,130
    80017076:	0001c617          	auipc	a2,0x1c
    8001707a:	baa60613          	addi	a2,a2,-1110 # 80032c20 <__func__.0+0x5c00>
    8001707e:	00016517          	auipc	a0,0x16
    80017082:	29a50513          	addi	a0,a0,666 # 8002d318 <__func__.0+0x2f8>
    80017086:	535130ef          	jal	8002adba <printf>
    8001708a:	0003a797          	auipc	a5,0x3a
    8001708e:	f877c783          	lbu	a5,-121(a5) # 80051011 <excpt+0x1>
    80017092:	00016597          	auipc	a1,0x16
    80017096:	25e58593          	addi	a1,a1,606 # 8002d2f0 <__func__.0+0x2d0>
    8001709a:	cf89                	beqz	a5,800170b4 <load_guest_page_fault_1+0x13c>
    8001709c:	6498                	ld	a4,8(s1)
    8001709e:	47d5                	li	a5,21
    800170a0:	00016597          	auipc	a1,0x16
    800170a4:	24058593          	addi	a1,a1,576 # 8002d2e0 <__func__.0+0x2c0>
    800170a8:	00f70663          	beq	a4,a5,800170b4 <load_guest_page_fault_1+0x13c>
    800170ac:	00016597          	auipc	a1,0x16
    800170b0:	24458593          	addi	a1,a1,580 # 8002d2f0 <__func__.0+0x2d0>
    800170b4:	00016517          	auipc	a0,0x16
    800170b8:	27c50513          	addi	a0,a0,636 # 8002d330 <__func__.0+0x310>
    800170bc:	4ff130ef          	jal	8002adba <printf>
    800170c0:	0003a797          	auipc	a5,0x3a
    800170c4:	f517c783          	lbu	a5,-175(a5) # 80051011 <excpt+0x1>
    800170c8:	c789                	beqz	a5,800170d2 <load_guest_page_fault_1+0x15a>
    800170ca:	6498                	ld	a4,8(s1)
    800170cc:	47d5                	li	a5,21
    800170ce:	00f70c63          	beq	a4,a5,800170e6 <load_guest_page_fault_1+0x16e>
    800170d2:	00016517          	auipc	a0,0x16
    800170d6:	26650513          	addi	a0,a0,614 # 8002d338 <__func__.0+0x318>
    800170da:	4e1130ef          	jal	8002adba <printf>
    800170de:	02900513          	li	a0,41
    800170e2:	1c7120ef          	jal	80029aa8 <putchar>
    800170e6:	4529                	li	a0,10
    800170e8:	1c1120ef          	jal	80029aa8 <putchar>
    800170ec:	c015                	beqz	s0,80017110 <load_guest_page_fault_1+0x198>
    800170ee:	0003a417          	auipc	s0,0x3a
    800170f2:	f2344403          	lbu	s0,-221(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800170f6:	00016597          	auipc	a1,0x16
    800170fa:	1fa58593          	addi	a1,a1,506 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800170fe:	cc11                	beqz	s0,8001711a <load_guest_page_fault_1+0x1a2>
    80017100:	6498                	ld	a4,8(s1)
    80017102:	47d5                	li	a5,21
    TEST_END();
    80017104:	00016597          	auipc	a1,0x16
    80017108:	1dc58593          	addi	a1,a1,476 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001710c:	00f70763          	beq	a4,a5,8001711a <load_guest_page_fault_1+0x1a2>
    80017110:	4401                	li	s0,0
    TEST_END();
    80017112:	00016597          	auipc	a1,0x16
    80017116:	1de58593          	addi	a1,a1,478 # 8002d2f0 <__func__.0+0x2d0>
    8001711a:	00016517          	auipc	a0,0x16
    8001711e:	27e50513          	addi	a0,a0,638 # 8002d398 <__func__.0+0x378>
    80017122:	499130ef          	jal	8002adba <printf>
    80017126:	4511                	li	a0,4
    80017128:	d47e90ef          	jal	80000e6e <goto_priv>
    8001712c:	e5eea0ef          	jal	8000178a <reset_state>
}
    80017130:	60e2                	ld	ra,24(sp)
    80017132:	8522                	mv	a0,s0
    80017134:	6442                	ld	s0,16(sp)
    80017136:	64a2                	ld	s1,8(sp)
    80017138:	6105                	addi	sp,sp,32
    8001713a:	8082                	ret

000000008001713c <load_guest_page_fault_2>:

bool load_guest_page_fault_2(){
    8001713c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001713e:	00015597          	auipc	a1,0x15
    80017142:	d4258593          	addi	a1,a1,-702 # 8002be80 <__func__.35>
    80017146:	00016517          	auipc	a0,0x16
    8001714a:	1ba50513          	addi	a0,a0,442 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_2(){
    8001714e:	ec06                	sd	ra,24(sp)
    80017150:	e822                	sd	s0,16(sp)
    80017152:	e426                	sd	s1,8(sp)
    TEST_START();
    80017154:	467130ef          	jal	8002adba <printf>
    80017158:	4529                	li	a0,10
    8001715a:	14f120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001715e:	450d                	li	a0,3
    80017160:	d0fe90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80017164:	c7ce90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017168:	815e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001716c:	db6e90ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80017170:	450d                	li	a0,3
    80017172:	cfde90ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80017176:	4509                	li	a0,2
    80017178:	c17e90ef          	jal	80000d8e <set_prev_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    8001717c:	bf7e90ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017180:	000807b7          	lui	a5,0x80
    80017184:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80017188:	001007b7          	lui	a5,0x100
    8001718c:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017190:	07b2                	slli	a5,a5,0xc
    80017192:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017196:	08200593          	li	a1,130
    8001719a:	0001c617          	auipc	a2,0x1c
    8001719e:	ae660613          	addi	a2,a2,-1306 # 80032c80 <__func__.0+0x5c60>
    800171a2:	00016517          	auipc	a0,0x16
    800171a6:	17650513          	addi	a0,a0,374 # 8002d318 <__func__.0+0x2f8>
    800171aa:	411130ef          	jal	8002adba <printf>
    800171ae:	0003a797          	auipc	a5,0x3a
    800171b2:	e637c783          	lbu	a5,-413(a5) # 80051011 <excpt+0x1>
    800171b6:	0003a497          	auipc	s1,0x3a
    800171ba:	e5a48493          	addi	s1,s1,-422 # 80051010 <excpt>
    800171be:	00016597          	auipc	a1,0x16
    800171c2:	13258593          	addi	a1,a1,306 # 8002d2f0 <__func__.0+0x2d0>
    800171c6:	cf89                	beqz	a5,800171e0 <load_guest_page_fault_2+0xa4>
    800171c8:	6498                	ld	a4,8(s1)
    800171ca:	47d5                	li	a5,21
    800171cc:	00016597          	auipc	a1,0x16
    800171d0:	11458593          	addi	a1,a1,276 # 8002d2e0 <__func__.0+0x2c0>
    800171d4:	00f70663          	beq	a4,a5,800171e0 <load_guest_page_fault_2+0xa4>
    800171d8:	00016597          	auipc	a1,0x16
    800171dc:	11858593          	addi	a1,a1,280 # 8002d2f0 <__func__.0+0x2d0>
    800171e0:	00016517          	auipc	a0,0x16
    800171e4:	15050513          	addi	a0,a0,336 # 8002d330 <__func__.0+0x310>
    800171e8:	3d3130ef          	jal	8002adba <printf>
    800171ec:	0003a797          	auipc	a5,0x3a
    800171f0:	e257c783          	lbu	a5,-475(a5) # 80051011 <excpt+0x1>
    800171f4:	c789                	beqz	a5,800171fe <load_guest_page_fault_2+0xc2>
    800171f6:	6498                	ld	a4,8(s1)
    800171f8:	47d5                	li	a5,21
    800171fa:	00f70c63          	beq	a4,a5,80017212 <load_guest_page_fault_2+0xd6>
    800171fe:	00016517          	auipc	a0,0x16
    80017202:	13a50513          	addi	a0,a0,314 # 8002d338 <__func__.0+0x318>
    80017206:	3b5130ef          	jal	8002adba <printf>
    8001720a:	02900513          	li	a0,41
    8001720e:	09b120ef          	jal	80029aa8 <putchar>
    80017212:	4529                	li	a0,10
    80017214:	095120ef          	jal	80029aa8 <putchar>
    80017218:	0003a417          	auipc	s0,0x3a
    8001721c:	df944403          	lbu	s0,-519(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017220:	00016597          	auipc	a1,0x16
    80017224:	0d058593          	addi	a1,a1,208 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017228:	cc11                	beqz	s0,80017244 <load_guest_page_fault_2+0x108>
    8001722a:	6498                	ld	a4,8(s1)
    8001722c:	47d5                	li	a5,21
    TEST_END();
    8001722e:	00016597          	auipc	a1,0x16
    80017232:	0b258593          	addi	a1,a1,178 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017236:	00f70763          	beq	a4,a5,80017244 <load_guest_page_fault_2+0x108>
    8001723a:	4401                	li	s0,0
    TEST_END();
    8001723c:	00016597          	auipc	a1,0x16
    80017240:	0b458593          	addi	a1,a1,180 # 8002d2f0 <__func__.0+0x2d0>
    80017244:	00016517          	auipc	a0,0x16
    80017248:	15450513          	addi	a0,a0,340 # 8002d398 <__func__.0+0x378>
    8001724c:	36f130ef          	jal	8002adba <printf>
    80017250:	4511                	li	a0,4
    80017252:	c1de90ef          	jal	80000e6e <goto_priv>
    80017256:	d34ea0ef          	jal	8000178a <reset_state>
}
    8001725a:	60e2                	ld	ra,24(sp)
    8001725c:	8522                	mv	a0,s0
    8001725e:	6442                	ld	s0,16(sp)
    80017260:	64a2                	ld	s1,8(sp)
    80017262:	6105                	addi	sp,sp,32
    80017264:	8082                	ret

0000000080017266 <load_guest_page_fault_3>:

bool load_guest_page_fault_3(){
    80017266:	1101                	addi	sp,sp,-32

    TEST_START();
    80017268:	00015597          	auipc	a1,0x15
    8001726c:	c3058593          	addi	a1,a1,-976 # 8002be98 <__func__.34>
    80017270:	00016517          	auipc	a0,0x16
    80017274:	09050513          	addi	a0,a0,144 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_3(){
    80017278:	ec06                	sd	ra,24(sp)
    8001727a:	e822                	sd	s0,16(sp)
    8001727c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001727e:	33d130ef          	jal	8002adba <printf>
    80017282:	4529                	li	a0,10
    80017284:	025120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80017288:	450d                	li	a0,3
    8001728a:	be5e90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001728e:	b52e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017292:	eeae90ef          	jal	8000097c <hpt_init>
    vspt_init();
    80017296:	c8ce90ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001729a:	450d                	li	a0,3
    8001729c:	bd3e90ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    800172a0:	4509                	li	a0,2
    800172a2:	aede90ef          	jal	80000d8e <set_prev_priv>
    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800172a6:	acde90ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800172aa:	000807b7          	lui	a5,0x80
    800172ae:	1007a073          	csrs	sstatus,a5
    800172b2:	001007b7          	lui	a5,0x100
    800172b6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800172ba:	07b2                	slli	a5,a5,0xc
    800172bc:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800172c0:	08200593          	li	a1,130
    800172c4:	0001c617          	auipc	a2,0x1c
    800172c8:	a1c60613          	addi	a2,a2,-1508 # 80032ce0 <__func__.0+0x5cc0>
    800172cc:	00016517          	auipc	a0,0x16
    800172d0:	04c50513          	addi	a0,a0,76 # 8002d318 <__func__.0+0x2f8>
    800172d4:	2e7130ef          	jal	8002adba <printf>
    800172d8:	0003a797          	auipc	a5,0x3a
    800172dc:	d397c783          	lbu	a5,-711(a5) # 80051011 <excpt+0x1>
    800172e0:	0003a497          	auipc	s1,0x3a
    800172e4:	d3048493          	addi	s1,s1,-720 # 80051010 <excpt>
    800172e8:	00016597          	auipc	a1,0x16
    800172ec:	00858593          	addi	a1,a1,8 # 8002d2f0 <__func__.0+0x2d0>
    800172f0:	cf89                	beqz	a5,8001730a <load_guest_page_fault_3+0xa4>
    800172f2:	6498                	ld	a4,8(s1)
    800172f4:	47d5                	li	a5,21
    800172f6:	00016597          	auipc	a1,0x16
    800172fa:	fea58593          	addi	a1,a1,-22 # 8002d2e0 <__func__.0+0x2c0>
    800172fe:	00f70663          	beq	a4,a5,8001730a <load_guest_page_fault_3+0xa4>
    80017302:	00016597          	auipc	a1,0x16
    80017306:	fee58593          	addi	a1,a1,-18 # 8002d2f0 <__func__.0+0x2d0>
    8001730a:	00016517          	auipc	a0,0x16
    8001730e:	02650513          	addi	a0,a0,38 # 8002d330 <__func__.0+0x310>
    80017312:	2a9130ef          	jal	8002adba <printf>
    80017316:	0003a797          	auipc	a5,0x3a
    8001731a:	cfb7c783          	lbu	a5,-773(a5) # 80051011 <excpt+0x1>
    8001731e:	c789                	beqz	a5,80017328 <load_guest_page_fault_3+0xc2>
    80017320:	6498                	ld	a4,8(s1)
    80017322:	47d5                	li	a5,21
    80017324:	00f70c63          	beq	a4,a5,8001733c <load_guest_page_fault_3+0xd6>
    80017328:	00016517          	auipc	a0,0x16
    8001732c:	01050513          	addi	a0,a0,16 # 8002d338 <__func__.0+0x318>
    80017330:	28b130ef          	jal	8002adba <printf>
    80017334:	02900513          	li	a0,41
    80017338:	770120ef          	jal	80029aa8 <putchar>
    8001733c:	4529                	li	a0,10
    8001733e:	76a120ef          	jal	80029aa8 <putchar>
    80017342:	0003a417          	auipc	s0,0x3a
    80017346:	ccf44403          	lbu	s0,-817(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    8001734a:	00016597          	auipc	a1,0x16
    8001734e:	fa658593          	addi	a1,a1,-90 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017352:	cc11                	beqz	s0,8001736e <load_guest_page_fault_3+0x108>
    80017354:	6498                	ld	a4,8(s1)
    80017356:	47d5                	li	a5,21
    TEST_END();
    80017358:	00016597          	auipc	a1,0x16
    8001735c:	f8858593          	addi	a1,a1,-120 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017360:	00f70763          	beq	a4,a5,8001736e <load_guest_page_fault_3+0x108>
    80017364:	4401                	li	s0,0
    TEST_END();
    80017366:	00016597          	auipc	a1,0x16
    8001736a:	f8a58593          	addi	a1,a1,-118 # 8002d2f0 <__func__.0+0x2d0>
    8001736e:	00016517          	auipc	a0,0x16
    80017372:	02a50513          	addi	a0,a0,42 # 8002d398 <__func__.0+0x378>
    80017376:	245130ef          	jal	8002adba <printf>
    8001737a:	4511                	li	a0,4
    8001737c:	af3e90ef          	jal	80000e6e <goto_priv>
    80017380:	c0aea0ef          	jal	8000178a <reset_state>
}
    80017384:	60e2                	ld	ra,24(sp)
    80017386:	8522                	mv	a0,s0
    80017388:	6442                	ld	s0,16(sp)
    8001738a:	64a2                	ld	s1,8(sp)
    8001738c:	6105                	addi	sp,sp,32
    8001738e:	8082                	ret

0000000080017390 <load_guest_page_fault_4>:

bool load_guest_page_fault_4(){
    80017390:	1101                	addi	sp,sp,-32

    TEST_START();
    80017392:	00015597          	auipc	a1,0x15
    80017396:	b1e58593          	addi	a1,a1,-1250 # 8002beb0 <__func__.33>
    8001739a:	00016517          	auipc	a0,0x16
    8001739e:	f6650513          	addi	a0,a0,-154 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_4(){
    800173a2:	ec06                	sd	ra,24(sp)
    800173a4:	e822                	sd	s0,16(sp)
    800173a6:	e426                	sd	s1,8(sp)
    TEST_START();
    800173a8:	213130ef          	jal	8002adba <printf>
    800173ac:	4529                	li	a0,10
    800173ae:	6fa120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800173b2:	450d                	li	a0,3
    800173b4:	abbe90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800173b8:	a28e90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800173bc:	dc0e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    800173c0:	b62e90ef          	jal	80000722 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800173c4:	4511                	li	a0,4
    800173c6:	aa9e90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800173ca:	000407b7          	lui	a5,0x40
    800173ce:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_HS);
    800173d2:	450d                	li	a0,3
    800173d4:	a9be90ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    800173d8:	4509                	li	a0,2
    800173da:	9b5e90ef          	jal	80000d8e <set_prev_priv>
    //执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800173de:	995e90ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800173e2:	000807b7          	lui	a5,0x80
    800173e6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800173e8:	07b6                	slli	a5,a5,0xd
    800173ea:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = hs_page_base(VSURWX_GURWX);


    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    800173ee:	08200593          	li	a1,130
    800173f2:	0001c617          	auipc	a2,0x1c
    800173f6:	95e60613          	addi	a2,a2,-1698 # 80032d50 <__func__.0+0x5d30>
    800173fa:	00016517          	auipc	a0,0x16
    800173fe:	f1e50513          	addi	a0,a0,-226 # 8002d318 <__func__.0+0x2f8>
    80017402:	1b9130ef          	jal	8002adba <printf>
    80017406:	0003a797          	auipc	a5,0x3a
    8001740a:	c0b7c783          	lbu	a5,-1013(a5) # 80051011 <excpt+0x1>
    8001740e:	0003a497          	auipc	s1,0x3a
    80017412:	c0248493          	addi	s1,s1,-1022 # 80051010 <excpt>
    80017416:	00016597          	auipc	a1,0x16
    8001741a:	eda58593          	addi	a1,a1,-294 # 8002d2f0 <__func__.0+0x2d0>
    8001741e:	cf89                	beqz	a5,80017438 <load_guest_page_fault_4+0xa8>
    80017420:	6498                	ld	a4,8(s1)
    80017422:	47b5                	li	a5,13
    80017424:	00016597          	auipc	a1,0x16
    80017428:	ebc58593          	addi	a1,a1,-324 # 8002d2e0 <__func__.0+0x2c0>
    8001742c:	00f70663          	beq	a4,a5,80017438 <load_guest_page_fault_4+0xa8>
    80017430:	00016597          	auipc	a1,0x16
    80017434:	ec058593          	addi	a1,a1,-320 # 8002d2f0 <__func__.0+0x2d0>
    80017438:	00016517          	auipc	a0,0x16
    8001743c:	ef850513          	addi	a0,a0,-264 # 8002d330 <__func__.0+0x310>
    80017440:	17b130ef          	jal	8002adba <printf>
    80017444:	0003a797          	auipc	a5,0x3a
    80017448:	bcd7c783          	lbu	a5,-1075(a5) # 80051011 <excpt+0x1>
    8001744c:	c789                	beqz	a5,80017456 <load_guest_page_fault_4+0xc6>
    8001744e:	6498                	ld	a4,8(s1)
    80017450:	47b5                	li	a5,13
    80017452:	00f70c63          	beq	a4,a5,8001746a <load_guest_page_fault_4+0xda>
    80017456:	00016517          	auipc	a0,0x16
    8001745a:	ee250513          	addi	a0,a0,-286 # 8002d338 <__func__.0+0x318>
    8001745e:	15d130ef          	jal	8002adba <printf>
    80017462:	02900513          	li	a0,41
    80017466:	642120ef          	jal	80029aa8 <putchar>
    8001746a:	4529                	li	a0,10
    8001746c:	63c120ef          	jal	80029aa8 <putchar>
    80017470:	0003a417          	auipc	s0,0x3a
    80017474:	ba144403          	lbu	s0,-1119(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80017478:	00016597          	auipc	a1,0x16
    8001747c:	e7858593          	addi	a1,a1,-392 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    80017480:	cc11                	beqz	s0,8001749c <load_guest_page_fault_4+0x10c>
    80017482:	6498                	ld	a4,8(s1)
    80017484:	47b5                	li	a5,13
    TEST_END();
    80017486:	00016597          	auipc	a1,0x16
    8001748a:	e5a58593          	addi	a1,a1,-422 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LPF",
    8001748e:	00f70763          	beq	a4,a5,8001749c <load_guest_page_fault_4+0x10c>
    80017492:	4401                	li	s0,0
    TEST_END();
    80017494:	00016597          	auipc	a1,0x16
    80017498:	e5c58593          	addi	a1,a1,-420 # 8002d2f0 <__func__.0+0x2d0>
    8001749c:	00016517          	auipc	a0,0x16
    800174a0:	efc50513          	addi	a0,a0,-260 # 8002d398 <__func__.0+0x378>
    800174a4:	117130ef          	jal	8002adba <printf>
    800174a8:	4511                	li	a0,4
    800174aa:	9c5e90ef          	jal	80000e6e <goto_priv>
    800174ae:	adcea0ef          	jal	8000178a <reset_state>
}
    800174b2:	60e2                	ld	ra,24(sp)
    800174b4:	8522                	mv	a0,s0
    800174b6:	6442                	ld	s0,16(sp)
    800174b8:	64a2                	ld	s1,8(sp)
    800174ba:	6105                	addi	sp,sp,32
    800174bc:	8082                	ret

00000000800174be <load_guest_page_fault_5>:

bool load_guest_page_fault_5(){
    800174be:	1141                	addi	sp,sp,-16

    TEST_START();
    800174c0:	00015597          	auipc	a1,0x15
    800174c4:	a0858593          	addi	a1,a1,-1528 # 8002bec8 <__func__.32>
    800174c8:	00016517          	auipc	a0,0x16
    800174cc:	e3850513          	addi	a0,a0,-456 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_5(){
    800174d0:	e406                	sd	ra,8(sp)
    800174d2:	e022                	sd	s0,0(sp)
    TEST_START();
    800174d4:	0e7130ef          	jal	8002adba <printf>
    800174d8:	4529                	li	a0,10
    800174da:	5ce120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800174de:	450d                	li	a0,3
    800174e0:	98fe90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800174e4:	8fce90ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800174e8:	c94e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    800174ec:	a36e90ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    800174f0:	4511                	li	a0,4
    800174f2:	97de90ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800174f6:	000407b7          	lui	a5,0x40
    800174fa:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_HS);
    800174fe:	450d                	li	a0,3
    80017500:	96fe90ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80017504:	4509                	li	a0,2
    80017506:	889e90ef          	jal	80000d8e <set_prev_priv>

    //执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001750a:	869e90ef          	jal	80000d72 <test_setup_except_function>
    8001750e:	000807b7          	lui	a5,0x80
    80017512:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017514:	07b6                	slli	a5,a5,0xd
    80017516:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001751a:	08200593          	li	a1,130
    8001751e:	0001b617          	auipc	a2,0x1b
    80017522:	02a60613          	addi	a2,a2,42 # 80032548 <__func__.0+0x5528>
    80017526:	00016517          	auipc	a0,0x16
    8001752a:	df250513          	addi	a0,a0,-526 # 8002d318 <__func__.0+0x2f8>
    8001752e:	08d130ef          	jal	8002adba <printf>
    80017532:	0003a797          	auipc	a5,0x3a
    80017536:	adf7c783          	lbu	a5,-1313(a5) # 80051011 <excpt+0x1>
    8001753a:	00016597          	auipc	a1,0x16
    8001753e:	da658593          	addi	a1,a1,-602 # 8002d2e0 <__func__.0+0x2c0>
    80017542:	c789                	beqz	a5,8001754c <load_guest_page_fault_5+0x8e>
    80017544:	00016597          	auipc	a1,0x16
    80017548:	dac58593          	addi	a1,a1,-596 # 8002d2f0 <__func__.0+0x2d0>
    8001754c:	00016517          	auipc	a0,0x16
    80017550:	de450513          	addi	a0,a0,-540 # 8002d330 <__func__.0+0x310>
    80017554:	067130ef          	jal	8002adba <printf>
    80017558:	0003a797          	auipc	a5,0x3a
    8001755c:	ab97c783          	lbu	a5,-1351(a5) # 80051011 <excpt+0x1>
    80017560:	e7a1                	bnez	a5,800175a8 <load_guest_page_fault_5+0xea>
    80017562:	4529                	li	a0,10
    80017564:	544120ef          	jal	80029aa8 <putchar>
    80017568:	0003a797          	auipc	a5,0x3a
    8001756c:	aa97c783          	lbu	a5,-1367(a5) # 80051011 <excpt+0x1>
    80017570:	e795                	bnez	a5,8001759c <load_guest_page_fault_5+0xde>
    80017572:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017574:	00016597          	auipc	a1,0x16
    80017578:	d6c58593          	addi	a1,a1,-660 # 8002d2e0 <__func__.0+0x2c0>
    8001757c:	00016517          	auipc	a0,0x16
    80017580:	e1c50513          	addi	a0,a0,-484 # 8002d398 <__func__.0+0x378>
    80017584:	037130ef          	jal	8002adba <printf>
    80017588:	4511                	li	a0,4
    8001758a:	8e5e90ef          	jal	80000e6e <goto_priv>
    8001758e:	9fcea0ef          	jal	8000178a <reset_state>
}
    80017592:	60a2                	ld	ra,8(sp)
    80017594:	8522                	mv	a0,s0
    80017596:	6402                	ld	s0,0(sp)
    80017598:	0141                	addi	sp,sp,16
    8001759a:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001759c:	4401                	li	s0,0
    TEST_END();
    8001759e:	00016597          	auipc	a1,0x16
    800175a2:	d5258593          	addi	a1,a1,-686 # 8002d2f0 <__func__.0+0x2d0>
    800175a6:	bfd9                	j	8001757c <load_guest_page_fault_5+0xbe>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800175a8:	00016517          	auipc	a0,0x16
    800175ac:	d9050513          	addi	a0,a0,-624 # 8002d338 <__func__.0+0x318>
    800175b0:	00b130ef          	jal	8002adba <printf>
    800175b4:	02900513          	li	a0,41
    800175b8:	4f0120ef          	jal	80029aa8 <putchar>
    800175bc:	b75d                	j	80017562 <load_guest_page_fault_5+0xa4>

00000000800175be <load_guest_page_fault_6>:

bool load_guest_page_fault_6(){
    800175be:	1101                	addi	sp,sp,-32

    TEST_START();
    800175c0:	00015597          	auipc	a1,0x15
    800175c4:	92058593          	addi	a1,a1,-1760 # 8002bee0 <__func__.31>
    800175c8:	00016517          	auipc	a0,0x16
    800175cc:	d3850513          	addi	a0,a0,-712 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_6(){
    800175d0:	ec06                	sd	ra,24(sp)
    800175d2:	e822                	sd	s0,16(sp)
    800175d4:	e426                	sd	s1,8(sp)
    TEST_START();
    800175d6:	7e4130ef          	jal	8002adba <printf>
    800175da:	4529                	li	a0,10
    800175dc:	4cc120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800175e0:	450d                	li	a0,3
    800175e2:	88de90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800175e6:	ffbe80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800175ea:	b92e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    800175ee:	934e90ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800175f2:	4509                	li	a0,2
    800175f4:	87be90ef          	jal	80000e6e <goto_priv>

    //执行lb指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800175f8:	f7ae90ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    800175fc:	001007b7          	lui	a5,0x100
    80017600:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80017604:	07b2                	slli	a5,a5,0xc
    80017606:	00078783          	lb	a5,0(a5)

    vaddr = hs_page_base(VSRWX_GI);
    lb(vaddr);
    TEST_ASSERT("vs mode lb when the second-stage address translation pte.v=0 leads to LGPF",
    8001760a:	08200593          	li	a1,130
    8001760e:	0001b617          	auipc	a2,0x1b
    80017612:	78260613          	addi	a2,a2,1922 # 80032d90 <__func__.0+0x5d70>
    80017616:	00016517          	auipc	a0,0x16
    8001761a:	d0250513          	addi	a0,a0,-766 # 8002d318 <__func__.0+0x2f8>
    8001761e:	79c130ef          	jal	8002adba <printf>
    80017622:	0003a797          	auipc	a5,0x3a
    80017626:	9ef7c783          	lbu	a5,-1553(a5) # 80051011 <excpt+0x1>
    8001762a:	0003a497          	auipc	s1,0x3a
    8001762e:	9e648493          	addi	s1,s1,-1562 # 80051010 <excpt>
    80017632:	00016597          	auipc	a1,0x16
    80017636:	cbe58593          	addi	a1,a1,-834 # 8002d2f0 <__func__.0+0x2d0>
    8001763a:	cf89                	beqz	a5,80017654 <load_guest_page_fault_6+0x96>
    8001763c:	6498                	ld	a4,8(s1)
    8001763e:	47d5                	li	a5,21
    80017640:	00016597          	auipc	a1,0x16
    80017644:	ca058593          	addi	a1,a1,-864 # 8002d2e0 <__func__.0+0x2c0>
    80017648:	00f70663          	beq	a4,a5,80017654 <load_guest_page_fault_6+0x96>
    8001764c:	00016597          	auipc	a1,0x16
    80017650:	ca458593          	addi	a1,a1,-860 # 8002d2f0 <__func__.0+0x2d0>
    80017654:	00016517          	auipc	a0,0x16
    80017658:	cdc50513          	addi	a0,a0,-804 # 8002d330 <__func__.0+0x310>
    8001765c:	75e130ef          	jal	8002adba <printf>
    80017660:	0003a797          	auipc	a5,0x3a
    80017664:	9b17c783          	lbu	a5,-1615(a5) # 80051011 <excpt+0x1>
    80017668:	c789                	beqz	a5,80017672 <load_guest_page_fault_6+0xb4>
    8001766a:	6498                	ld	a4,8(s1)
    8001766c:	47d5                	li	a5,21
    8001766e:	00f70c63          	beq	a4,a5,80017686 <load_guest_page_fault_6+0xc8>
    80017672:	00016517          	auipc	a0,0x16
    80017676:	cc650513          	addi	a0,a0,-826 # 8002d338 <__func__.0+0x318>
    8001767a:	740130ef          	jal	8002adba <printf>
    8001767e:	02900513          	li	a0,41
    80017682:	426120ef          	jal	80029aa8 <putchar>
    80017686:	4529                	li	a0,10
    80017688:	420120ef          	jal	80029aa8 <putchar>
    8001768c:	0003a797          	auipc	a5,0x3a
    80017690:	9857c783          	lbu	a5,-1659(a5) # 80051011 <excpt+0x1>
    80017694:	4401                	li	s0,0
    80017696:	c789                	beqz	a5,800176a0 <load_guest_page_fault_6+0xe2>
    80017698:	6480                	ld	s0,8(s1)
    8001769a:	142d                	addi	s0,s0,-21
    8001769c:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_LGPF
    );


    //执行ld指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800176a0:	ed2e90ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    800176a4:	001007b7          	lui	a5,0x100
    800176a8:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800176ac:	07b2                	slli	a5,a5,0xc
    800176ae:	0007b783          	ld	a5,0(a5)
    vaddr = hs_page_base(VSRWX_GI);

    ld(vaddr);   
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    800176b2:	08200593          	li	a1,130
    800176b6:	0001b617          	auipc	a2,0x1b
    800176ba:	72a60613          	addi	a2,a2,1834 # 80032de0 <__func__.0+0x5dc0>
    800176be:	00016517          	auipc	a0,0x16
    800176c2:	c5a50513          	addi	a0,a0,-934 # 8002d318 <__func__.0+0x2f8>
    800176c6:	6f4130ef          	jal	8002adba <printf>
    800176ca:	0003a797          	auipc	a5,0x3a
    800176ce:	9477c783          	lbu	a5,-1721(a5) # 80051011 <excpt+0x1>
    800176d2:	00016597          	auipc	a1,0x16
    800176d6:	c1e58593          	addi	a1,a1,-994 # 8002d2f0 <__func__.0+0x2d0>
    800176da:	cf89                	beqz	a5,800176f4 <load_guest_page_fault_6+0x136>
    800176dc:	6498                	ld	a4,8(s1)
    800176de:	47d5                	li	a5,21
    800176e0:	00016597          	auipc	a1,0x16
    800176e4:	c0058593          	addi	a1,a1,-1024 # 8002d2e0 <__func__.0+0x2c0>
    800176e8:	00f70663          	beq	a4,a5,800176f4 <load_guest_page_fault_6+0x136>
    800176ec:	00016597          	auipc	a1,0x16
    800176f0:	c0458593          	addi	a1,a1,-1020 # 8002d2f0 <__func__.0+0x2d0>
    800176f4:	00016517          	auipc	a0,0x16
    800176f8:	c3c50513          	addi	a0,a0,-964 # 8002d330 <__func__.0+0x310>
    800176fc:	6be130ef          	jal	8002adba <printf>
    80017700:	0003a797          	auipc	a5,0x3a
    80017704:	9117c783          	lbu	a5,-1775(a5) # 80051011 <excpt+0x1>
    80017708:	c789                	beqz	a5,80017712 <load_guest_page_fault_6+0x154>
    8001770a:	6498                	ld	a4,8(s1)
    8001770c:	47d5                	li	a5,21
    8001770e:	00f70c63          	beq	a4,a5,80017726 <load_guest_page_fault_6+0x168>
    80017712:	00016517          	auipc	a0,0x16
    80017716:	c2650513          	addi	a0,a0,-986 # 8002d338 <__func__.0+0x318>
    8001771a:	6a0130ef          	jal	8002adba <printf>
    8001771e:	02900513          	li	a0,41
    80017722:	386120ef          	jal	80029aa8 <putchar>
    80017726:	4529                	li	a0,10
    80017728:	380120ef          	jal	80029aa8 <putchar>
    8001772c:	c015                	beqz	s0,80017750 <load_guest_page_fault_6+0x192>
    8001772e:	0003a417          	auipc	s0,0x3a
    80017732:	8e344403          	lbu	s0,-1821(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017736:	00016597          	auipc	a1,0x16
    8001773a:	bba58593          	addi	a1,a1,-1094 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001773e:	cc11                	beqz	s0,8001775a <load_guest_page_fault_6+0x19c>
    80017740:	6498                	ld	a4,8(s1)
    80017742:	47d5                	li	a5,21
    TEST_END();
    80017744:	00016597          	auipc	a1,0x16
    80017748:	b9c58593          	addi	a1,a1,-1124 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ld when the second-stage address translation pte.v=0 and pte.r=0 leads to LGPF",
    8001774c:	00f70763          	beq	a4,a5,8001775a <load_guest_page_fault_6+0x19c>
    80017750:	4401                	li	s0,0
    TEST_END();
    80017752:	00016597          	auipc	a1,0x16
    80017756:	b9e58593          	addi	a1,a1,-1122 # 8002d2f0 <__func__.0+0x2d0>
    8001775a:	00016517          	auipc	a0,0x16
    8001775e:	c3e50513          	addi	a0,a0,-962 # 8002d398 <__func__.0+0x378>
    80017762:	658130ef          	jal	8002adba <printf>
    80017766:	4511                	li	a0,4
    80017768:	f06e90ef          	jal	80000e6e <goto_priv>
    8001776c:	81eea0ef          	jal	8000178a <reset_state>
}
    80017770:	60e2                	ld	ra,24(sp)
    80017772:	8522                	mv	a0,s0
    80017774:	6442                	ld	s0,16(sp)
    80017776:	64a2                	ld	s1,8(sp)
    80017778:	6105                	addi	sp,sp,32
    8001777a:	8082                	ret

000000008001777c <load_guest_page_fault_7>:

bool load_guest_page_fault_7(){
    8001777c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001777e:	00014597          	auipc	a1,0x14
    80017782:	77a58593          	addi	a1,a1,1914 # 8002bef8 <__func__.30>
    80017786:	00016517          	auipc	a0,0x16
    8001778a:	b7a50513          	addi	a0,a0,-1158 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_7(){
    8001778e:	ec06                	sd	ra,24(sp)
    80017790:	e822                	sd	s0,16(sp)
    80017792:	e426                	sd	s1,8(sp)
    TEST_START();
    80017794:	626130ef          	jal	8002adba <printf>
    80017798:	4529                	li	a0,10
    8001779a:	30e120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001779e:	450d                	li	a0,3
    800177a0:	ecee90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800177a4:	e3de80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800177a8:	9d4e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    800177ac:	f77e80ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800177b0:	4509                	li	a0,2
    800177b2:	ebce90ef          	jal	80000e6e <goto_priv>

    //执行lh指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800177b6:	dbce90ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);


    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800177ba:	000807b7          	lui	a5,0x80
    800177be:	1007b073          	csrc	sstatus,a5
LOAD_INSTRUCTION(lh, "lh", uint16_t);
    800177c2:	001007b7          	lui	a5,0x100
    800177c6:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800177ca:	07b2                	slli	a5,a5,0xc
    800177cc:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    800177d0:	08200593          	li	a1,130
    800177d4:	0001b617          	auipc	a2,0x1b
    800177d8:	66460613          	addi	a2,a2,1636 # 80032e38 <__func__.0+0x5e18>
    800177dc:	00016517          	auipc	a0,0x16
    800177e0:	b3c50513          	addi	a0,a0,-1220 # 8002d318 <__func__.0+0x2f8>
    800177e4:	5d6130ef          	jal	8002adba <printf>
    800177e8:	0003a797          	auipc	a5,0x3a
    800177ec:	8297c783          	lbu	a5,-2007(a5) # 80051011 <excpt+0x1>
    800177f0:	0003a497          	auipc	s1,0x3a
    800177f4:	82048493          	addi	s1,s1,-2016 # 80051010 <excpt>
    800177f8:	00016597          	auipc	a1,0x16
    800177fc:	af858593          	addi	a1,a1,-1288 # 8002d2f0 <__func__.0+0x2d0>
    80017800:	cf89                	beqz	a5,8001781a <load_guest_page_fault_7+0x9e>
    80017802:	6498                	ld	a4,8(s1)
    80017804:	47d5                	li	a5,21
    80017806:	00016597          	auipc	a1,0x16
    8001780a:	ada58593          	addi	a1,a1,-1318 # 8002d2e0 <__func__.0+0x2c0>
    8001780e:	00f70663          	beq	a4,a5,8001781a <load_guest_page_fault_7+0x9e>
    80017812:	00016597          	auipc	a1,0x16
    80017816:	ade58593          	addi	a1,a1,-1314 # 8002d2f0 <__func__.0+0x2d0>
    8001781a:	00016517          	auipc	a0,0x16
    8001781e:	b1650513          	addi	a0,a0,-1258 # 8002d330 <__func__.0+0x310>
    80017822:	598130ef          	jal	8002adba <printf>
    80017826:	00039797          	auipc	a5,0x39
    8001782a:	7eb7c783          	lbu	a5,2027(a5) # 80051011 <excpt+0x1>
    8001782e:	c789                	beqz	a5,80017838 <load_guest_page_fault_7+0xbc>
    80017830:	6498                	ld	a4,8(s1)
    80017832:	47d5                	li	a5,21
    80017834:	00f70c63          	beq	a4,a5,8001784c <load_guest_page_fault_7+0xd0>
    80017838:	00016517          	auipc	a0,0x16
    8001783c:	b0050513          	addi	a0,a0,-1280 # 8002d338 <__func__.0+0x318>
    80017840:	57a130ef          	jal	8002adba <printf>
    80017844:	02900513          	li	a0,41
    80017848:	260120ef          	jal	80029aa8 <putchar>
    8001784c:	4529                	li	a0,10
    8001784e:	25a120ef          	jal	80029aa8 <putchar>
    80017852:	00039417          	auipc	s0,0x39
    80017856:	7bf44403          	lbu	s0,1983(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    8001785a:	00016597          	auipc	a1,0x16
    8001785e:	a9658593          	addi	a1,a1,-1386 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017862:	cc11                	beqz	s0,8001787e <load_guest_page_fault_7+0x102>
    80017864:	6498                	ld	a4,8(s1)
    80017866:	47d5                	li	a5,21
    TEST_END();
    80017868:	00016597          	auipc	a1,0x16
    8001786c:	a7858593          	addi	a1,a1,-1416 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017870:	00f70763          	beq	a4,a5,8001787e <load_guest_page_fault_7+0x102>
    80017874:	4401                	li	s0,0
    TEST_END();
    80017876:	00016597          	auipc	a1,0x16
    8001787a:	a7a58593          	addi	a1,a1,-1414 # 8002d2f0 <__func__.0+0x2d0>
    8001787e:	00016517          	auipc	a0,0x16
    80017882:	b1a50513          	addi	a0,a0,-1254 # 8002d398 <__func__.0+0x378>
    80017886:	534130ef          	jal	8002adba <printf>
    8001788a:	4511                	li	a0,4
    8001788c:	de2e90ef          	jal	80000e6e <goto_priv>
    80017890:	efbe90ef          	jal	8000178a <reset_state>
}
    80017894:	60e2                	ld	ra,24(sp)
    80017896:	8522                	mv	a0,s0
    80017898:	6442                	ld	s0,16(sp)
    8001789a:	64a2                	ld	s1,8(sp)
    8001789c:	6105                	addi	sp,sp,32
    8001789e:	8082                	ret

00000000800178a0 <load_guest_page_fault_8>:

bool load_guest_page_fault_8(){
    800178a0:	1101                	addi	sp,sp,-32

    TEST_START();
    800178a2:	00014597          	auipc	a1,0x14
    800178a6:	66e58593          	addi	a1,a1,1646 # 8002bf10 <__func__.29>
    800178aa:	00016517          	auipc	a0,0x16
    800178ae:	a5650513          	addi	a0,a0,-1450 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_8(){
    800178b2:	ec06                	sd	ra,24(sp)
    800178b4:	e822                	sd	s0,16(sp)
    800178b6:	e426                	sd	s1,8(sp)
    TEST_START();
    800178b8:	502130ef          	jal	8002adba <printf>
    800178bc:	4529                	li	a0,10
    800178be:	1ea120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800178c2:	450d                	li	a0,3
    800178c4:	daae90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800178c8:	d19e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800178cc:	8b0e90ef          	jal	8000097c <hpt_init>
    vspt_init();
    800178d0:	e53e80ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800178d4:	4509                	li	a0,2
    800178d6:	d98e90ef          	jal	80000e6e <goto_priv>

    //执行hlvh指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    800178da:	c98e90ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    800178de:	000807b7          	lui	a5,0x80
    800178e2:	1007a073          	csrs	sstatus,a5
    800178e6:	001007b7          	lui	a5,0x100
    800178ea:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800178ee:	07b2                	slli	a5,a5,0xc
    800178f0:	00079783          	lh	a5,0(a5)
    lh(vaddr);
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    800178f4:	08200593          	li	a1,130
    800178f8:	0001b617          	auipc	a2,0x1b
    800178fc:	5a060613          	addi	a2,a2,1440 # 80032e98 <__func__.0+0x5e78>
    80017900:	00016517          	auipc	a0,0x16
    80017904:	a1850513          	addi	a0,a0,-1512 # 8002d318 <__func__.0+0x2f8>
    80017908:	4b2130ef          	jal	8002adba <printf>
    8001790c:	00039797          	auipc	a5,0x39
    80017910:	7057c783          	lbu	a5,1797(a5) # 80051011 <excpt+0x1>
    80017914:	00039497          	auipc	s1,0x39
    80017918:	6fc48493          	addi	s1,s1,1788 # 80051010 <excpt>
    8001791c:	00016597          	auipc	a1,0x16
    80017920:	9d458593          	addi	a1,a1,-1580 # 8002d2f0 <__func__.0+0x2d0>
    80017924:	cf89                	beqz	a5,8001793e <load_guest_page_fault_8+0x9e>
    80017926:	6498                	ld	a4,8(s1)
    80017928:	47d5                	li	a5,21
    8001792a:	00016597          	auipc	a1,0x16
    8001792e:	9b658593          	addi	a1,a1,-1610 # 8002d2e0 <__func__.0+0x2c0>
    80017932:	00f70663          	beq	a4,a5,8001793e <load_guest_page_fault_8+0x9e>
    80017936:	00016597          	auipc	a1,0x16
    8001793a:	9ba58593          	addi	a1,a1,-1606 # 8002d2f0 <__func__.0+0x2d0>
    8001793e:	00016517          	auipc	a0,0x16
    80017942:	9f250513          	addi	a0,a0,-1550 # 8002d330 <__func__.0+0x310>
    80017946:	474130ef          	jal	8002adba <printf>
    8001794a:	00039797          	auipc	a5,0x39
    8001794e:	6c77c783          	lbu	a5,1735(a5) # 80051011 <excpt+0x1>
    80017952:	c789                	beqz	a5,8001795c <load_guest_page_fault_8+0xbc>
    80017954:	6498                	ld	a4,8(s1)
    80017956:	47d5                	li	a5,21
    80017958:	00f70c63          	beq	a4,a5,80017970 <load_guest_page_fault_8+0xd0>
    8001795c:	00016517          	auipc	a0,0x16
    80017960:	9dc50513          	addi	a0,a0,-1572 # 8002d338 <__func__.0+0x318>
    80017964:	456130ef          	jal	8002adba <printf>
    80017968:	02900513          	li	a0,41
    8001796c:	13c120ef          	jal	80029aa8 <putchar>
    80017970:	4529                	li	a0,10
    80017972:	136120ef          	jal	80029aa8 <putchar>
    80017976:	00039417          	auipc	s0,0x39
    8001797a:	69b44403          	lbu	s0,1691(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    8001797e:	00016597          	auipc	a1,0x16
    80017982:	97258593          	addi	a1,a1,-1678 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017986:	cc11                	beqz	s0,800179a2 <load_guest_page_fault_8+0x102>
    80017988:	6498                	ld	a4,8(s1)
    8001798a:	47d5                	li	a5,21
    TEST_END();
    8001798c:	00016597          	auipc	a1,0x16
    80017990:	95458593          	addi	a1,a1,-1708 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017994:	00f70763          	beq	a4,a5,800179a2 <load_guest_page_fault_8+0x102>
    80017998:	4401                	li	s0,0
    TEST_END();
    8001799a:	00016597          	auipc	a1,0x16
    8001799e:	95658593          	addi	a1,a1,-1706 # 8002d2f0 <__func__.0+0x2d0>
    800179a2:	00016517          	auipc	a0,0x16
    800179a6:	9f650513          	addi	a0,a0,-1546 # 8002d398 <__func__.0+0x378>
    800179aa:	410130ef          	jal	8002adba <printf>
    800179ae:	4511                	li	a0,4
    800179b0:	cbee90ef          	jal	80000e6e <goto_priv>
    800179b4:	dd7e90ef          	jal	8000178a <reset_state>
}
    800179b8:	60e2                	ld	ra,24(sp)
    800179ba:	8522                	mv	a0,s0
    800179bc:	6442                	ld	s0,16(sp)
    800179be:	64a2                	ld	s1,8(sp)
    800179c0:	6105                	addi	sp,sp,32
    800179c2:	8082                	ret

00000000800179c4 <load_guest_page_fault_9>:

bool load_guest_page_fault_9(){
    800179c4:	1101                	addi	sp,sp,-32

    TEST_START();
    800179c6:	00014597          	auipc	a1,0x14
    800179ca:	56258593          	addi	a1,a1,1378 # 8002bf28 <__func__.28>
    800179ce:	00016517          	auipc	a0,0x16
    800179d2:	93250513          	addi	a0,a0,-1742 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_9(){
    800179d6:	ec06                	sd	ra,24(sp)
    800179d8:	e822                	sd	s0,16(sp)
    800179da:	e426                	sd	s1,8(sp)
    TEST_START();
    800179dc:	3de130ef          	jal	8002adba <printf>
    800179e0:	4529                	li	a0,10
    800179e2:	0c6120ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800179e6:	450d                	li	a0,3
    800179e8:	c86e90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800179ec:	bf5e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800179f0:	f8de80ef          	jal	8000097c <hpt_init>
    vspt_init();
    800179f4:	d2fe80ef          	jal	80000722 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    800179f8:	4511                	li	a0,4
    800179fa:	c74e90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    800179fe:	000407b7          	lui	a5,0x40
    80017a02:	2007b073          	csrc	vsstatus,a5
    

    goto_priv(PRIV_VS);
    80017a06:	4509                	li	a0,2
    80017a08:	c66e90ef          	jal	80000e6e <goto_priv>
    //执行lb指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017a0c:	b66e90ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80017a10:	000807b7          	lui	a5,0x80
    80017a14:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017a16:	07b6                	slli	a5,a5,0xd
    80017a18:	00078783          	lb	a5,0(a5)
    vaddr = hs_page_base(VSURWX_GURWX);


    lb(vaddr)  ;
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017a1c:	08200593          	li	a1,130
    80017a20:	0001b617          	auipc	a2,0x1b
    80017a24:	4e860613          	addi	a2,a2,1256 # 80032f08 <__func__.0+0x5ee8>
    80017a28:	00016517          	auipc	a0,0x16
    80017a2c:	8f050513          	addi	a0,a0,-1808 # 8002d318 <__func__.0+0x2f8>
    80017a30:	38a130ef          	jal	8002adba <printf>
    80017a34:	00039797          	auipc	a5,0x39
    80017a38:	5dd7c783          	lbu	a5,1501(a5) # 80051011 <excpt+0x1>
    80017a3c:	00039497          	auipc	s1,0x39
    80017a40:	5d448493          	addi	s1,s1,1492 # 80051010 <excpt>
    80017a44:	00016597          	auipc	a1,0x16
    80017a48:	8ac58593          	addi	a1,a1,-1876 # 8002d2f0 <__func__.0+0x2d0>
    80017a4c:	cf89                	beqz	a5,80017a66 <load_guest_page_fault_9+0xa2>
    80017a4e:	6498                	ld	a4,8(s1)
    80017a50:	47b5                	li	a5,13
    80017a52:	00016597          	auipc	a1,0x16
    80017a56:	88e58593          	addi	a1,a1,-1906 # 8002d2e0 <__func__.0+0x2c0>
    80017a5a:	00f70663          	beq	a4,a5,80017a66 <load_guest_page_fault_9+0xa2>
    80017a5e:	00016597          	auipc	a1,0x16
    80017a62:	89258593          	addi	a1,a1,-1902 # 8002d2f0 <__func__.0+0x2d0>
    80017a66:	00016517          	auipc	a0,0x16
    80017a6a:	8ca50513          	addi	a0,a0,-1846 # 8002d330 <__func__.0+0x310>
    80017a6e:	34c130ef          	jal	8002adba <printf>
    80017a72:	00039797          	auipc	a5,0x39
    80017a76:	59f7c783          	lbu	a5,1439(a5) # 80051011 <excpt+0x1>
    80017a7a:	c789                	beqz	a5,80017a84 <load_guest_page_fault_9+0xc0>
    80017a7c:	6498                	ld	a4,8(s1)
    80017a7e:	47b5                	li	a5,13
    80017a80:	00f70c63          	beq	a4,a5,80017a98 <load_guest_page_fault_9+0xd4>
    80017a84:	00016517          	auipc	a0,0x16
    80017a88:	8b450513          	addi	a0,a0,-1868 # 8002d338 <__func__.0+0x318>
    80017a8c:	32e130ef          	jal	8002adba <printf>
    80017a90:	02900513          	li	a0,41
    80017a94:	014120ef          	jal	80029aa8 <putchar>
    80017a98:	4529                	li	a0,10
    80017a9a:	00e120ef          	jal	80029aa8 <putchar>
    80017a9e:	00039417          	auipc	s0,0x39
    80017aa2:	57344403          	lbu	s0,1395(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    80017aa6:	00016597          	auipc	a1,0x16
    80017aaa:	84a58593          	addi	a1,a1,-1974 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017aae:	cc11                	beqz	s0,80017aca <load_guest_page_fault_9+0x106>
    80017ab0:	6498                	ld	a4,8(s1)
    80017ab2:	47b5                	li	a5,13
    TEST_END();
    80017ab4:	00016597          	auipc	a1,0x16
    80017ab8:	82c58593          	addi	a1,a1,-2004 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=0 leads to LPF",
    80017abc:	00f70763          	beq	a4,a5,80017aca <load_guest_page_fault_9+0x106>
    80017ac0:	4401                	li	s0,0
    TEST_END();
    80017ac2:	00016597          	auipc	a1,0x16
    80017ac6:	82e58593          	addi	a1,a1,-2002 # 8002d2f0 <__func__.0+0x2d0>
    80017aca:	00016517          	auipc	a0,0x16
    80017ace:	8ce50513          	addi	a0,a0,-1842 # 8002d398 <__func__.0+0x378>
    80017ad2:	2e8130ef          	jal	8002adba <printf>
    80017ad6:	4511                	li	a0,4
    80017ad8:	b96e90ef          	jal	80000e6e <goto_priv>
    80017adc:	cafe90ef          	jal	8000178a <reset_state>
}
    80017ae0:	60e2                	ld	ra,24(sp)
    80017ae2:	8522                	mv	a0,s0
    80017ae4:	6442                	ld	s0,16(sp)
    80017ae6:	64a2                	ld	s1,8(sp)
    80017ae8:	6105                	addi	sp,sp,32
    80017aea:	8082                	ret

0000000080017aec <load_guest_page_fault_10>:

bool load_guest_page_fault_10(){
    80017aec:	1141                	addi	sp,sp,-16

    TEST_START();
    80017aee:	00014597          	auipc	a1,0x14
    80017af2:	45258593          	addi	a1,a1,1106 # 8002bf40 <__func__.27>
    80017af6:	00016517          	auipc	a0,0x16
    80017afa:	80a50513          	addi	a0,a0,-2038 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_10(){
    80017afe:	e406                	sd	ra,8(sp)
    80017b00:	e022                	sd	s0,0(sp)
    TEST_START();
    80017b02:	2b8130ef          	jal	8002adba <printf>
    80017b06:	4529                	li	a0,10
    80017b08:	7a1110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80017b0c:	450d                	li	a0,3
    80017b0e:	b60e90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80017b12:	acfe80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017b16:	e67e80ef          	jal	8000097c <hpt_init>
    vspt_init();
    80017b1a:	c09e80ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017b1e:	4511                	li	a0,4
    80017b20:	b4ee90ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80017b24:	000407b7          	lui	a5,0x40
    80017b28:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    80017b2c:	4509                	li	a0,2
    80017b2e:	b40e90ef          	jal	80000e6e <goto_priv>

    //执行lb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80017b32:	a40e90ef          	jal	80000d72 <test_setup_except_function>
    80017b36:	000807b7          	lui	a5,0x80
    80017b3a:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80017b3c:	07b6                	slli	a5,a5,0xd
    80017b3e:	00078783          	lb	a5,0(a5)
    lb(vaddr);

    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017b42:	08200593          	li	a1,130
    80017b46:	0001b617          	auipc	a2,0x1b
    80017b4a:	3fa60613          	addi	a2,a2,1018 # 80032f40 <__func__.0+0x5f20>
    80017b4e:	00015517          	auipc	a0,0x15
    80017b52:	7ca50513          	addi	a0,a0,1994 # 8002d318 <__func__.0+0x2f8>
    80017b56:	264130ef          	jal	8002adba <printf>
    80017b5a:	00039797          	auipc	a5,0x39
    80017b5e:	4b77c783          	lbu	a5,1207(a5) # 80051011 <excpt+0x1>
    80017b62:	00015597          	auipc	a1,0x15
    80017b66:	77e58593          	addi	a1,a1,1918 # 8002d2e0 <__func__.0+0x2c0>
    80017b6a:	c789                	beqz	a5,80017b74 <load_guest_page_fault_10+0x88>
    80017b6c:	00015597          	auipc	a1,0x15
    80017b70:	78458593          	addi	a1,a1,1924 # 8002d2f0 <__func__.0+0x2d0>
    80017b74:	00015517          	auipc	a0,0x15
    80017b78:	7bc50513          	addi	a0,a0,1980 # 8002d330 <__func__.0+0x310>
    80017b7c:	23e130ef          	jal	8002adba <printf>
    80017b80:	00039797          	auipc	a5,0x39
    80017b84:	4917c783          	lbu	a5,1169(a5) # 80051011 <excpt+0x1>
    80017b88:	e7a1                	bnez	a5,80017bd0 <load_guest_page_fault_10+0xe4>
    80017b8a:	4529                	li	a0,10
    80017b8c:	71d110ef          	jal	80029aa8 <putchar>
    80017b90:	00039797          	auipc	a5,0x39
    80017b94:	4817c783          	lbu	a5,1153(a5) # 80051011 <excpt+0x1>
    80017b98:	e795                	bnez	a5,80017bc4 <load_guest_page_fault_10+0xd8>
    80017b9a:	4405                	li	s0,1
    );

    //如果pte.a=0，标识上次A位被清除以来，页面被访问过
    //如果pte.a=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80017b9c:	00015597          	auipc	a1,0x15
    80017ba0:	74458593          	addi	a1,a1,1860 # 8002d2e0 <__func__.0+0x2c0>
    80017ba4:	00015517          	auipc	a0,0x15
    80017ba8:	7f450513          	addi	a0,a0,2036 # 8002d398 <__func__.0+0x378>
    80017bac:	20e130ef          	jal	8002adba <printf>
    80017bb0:	4511                	li	a0,4
    80017bb2:	abce90ef          	jal	80000e6e <goto_priv>
    80017bb6:	bd5e90ef          	jal	8000178a <reset_state>
}
    80017bba:	60a2                	ld	ra,8(sp)
    80017bbc:	8522                	mv	a0,s0
    80017bbe:	6402                	ld	s0,0(sp)
    80017bc0:	0141                	addi	sp,sp,16
    80017bc2:	8082                	ret
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017bc4:	4401                	li	s0,0
    TEST_END();
    80017bc6:	00015597          	auipc	a1,0x15
    80017bca:	72a58593          	addi	a1,a1,1834 # 8002d2f0 <__func__.0+0x2d0>
    80017bce:	bfd9                	j	80017ba4 <load_guest_page_fault_10+0xb8>
    TEST_ASSERT("vs mode lb u mode page when vsstatus.sum=1 successful",
    80017bd0:	00015517          	auipc	a0,0x15
    80017bd4:	76850513          	addi	a0,a0,1896 # 8002d338 <__func__.0+0x318>
    80017bd8:	1e2130ef          	jal	8002adba <printf>
    80017bdc:	02900513          	li	a0,41
    80017be0:	6c9110ef          	jal	80029aa8 <putchar>
    80017be4:	b75d                	j	80017b8a <load_guest_page_fault_10+0x9e>

0000000080017be6 <load_guest_page_fault_11>:



bool load_guest_page_fault_11(){
    80017be6:	1101                	addi	sp,sp,-32

    TEST_START();
    80017be8:	00014597          	auipc	a1,0x14
    80017bec:	37858593          	addi	a1,a1,888 # 8002bf60 <__func__.26>
    80017bf0:	00015517          	auipc	a0,0x15
    80017bf4:	71050513          	addi	a0,a0,1808 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_11(){
    80017bf8:	ec06                	sd	ra,24(sp)
    80017bfa:	e822                	sd	s0,16(sp)
    80017bfc:	e426                	sd	s1,8(sp)
    TEST_START();
    80017bfe:	1bc130ef          	jal	8002adba <printf>
    80017c02:	4529                	li	a0,10
    80017c04:	6a5110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80017c08:	450d                	li	a0,3
    80017c0a:	a64e90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80017c0e:	9d3e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017c12:	d6be80ef          	jal	8000097c <hpt_init>
    vspt_init();
    80017c16:	b0de80ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017c1a:	4511                	li	a0,4
    80017c1c:	a52e90ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017c20:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017c24:	450d                	li	a0,3
    80017c26:	a48e90ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80017c2a:	4509                	li	a0,2
    80017c2c:	962e90ef          	jal	80000d8e <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80017c30:	942e90ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80017c34:	400197b7          	lui	a5,0x40019
    80017c38:	078a                	slli	a5,a5,0x2
    80017c3a:	6c07c7f3          	.insn	4, 0x6c07c7f3

    vaddr = vs_page_base(VSI_GI);
    hlvd(vaddr);

    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017c3e:	08200593          	li	a1,130
    80017c42:	0001b617          	auipc	a2,0x1b
    80017c46:	f8e60613          	addi	a2,a2,-114 # 80032bd0 <__func__.0+0x5bb0>
    80017c4a:	00015517          	auipc	a0,0x15
    80017c4e:	6ce50513          	addi	a0,a0,1742 # 8002d318 <__func__.0+0x2f8>
    80017c52:	168130ef          	jal	8002adba <printf>
    80017c56:	00039797          	auipc	a5,0x39
    80017c5a:	3bb7c783          	lbu	a5,955(a5) # 80051011 <excpt+0x1>
    80017c5e:	00039497          	auipc	s1,0x39
    80017c62:	3b248493          	addi	s1,s1,946 # 80051010 <excpt>
    80017c66:	00015597          	auipc	a1,0x15
    80017c6a:	68a58593          	addi	a1,a1,1674 # 8002d2f0 <__func__.0+0x2d0>
    80017c6e:	cf89                	beqz	a5,80017c88 <load_guest_page_fault_11+0xa2>
    80017c70:	6498                	ld	a4,8(s1)
    80017c72:	47d5                	li	a5,21
    80017c74:	00015597          	auipc	a1,0x15
    80017c78:	66c58593          	addi	a1,a1,1644 # 8002d2e0 <__func__.0+0x2c0>
    80017c7c:	00f70663          	beq	a4,a5,80017c88 <load_guest_page_fault_11+0xa2>
    80017c80:	00015597          	auipc	a1,0x15
    80017c84:	67058593          	addi	a1,a1,1648 # 8002d2f0 <__func__.0+0x2d0>
    80017c88:	00015517          	auipc	a0,0x15
    80017c8c:	6a850513          	addi	a0,a0,1704 # 8002d330 <__func__.0+0x310>
    80017c90:	12a130ef          	jal	8002adba <printf>
    80017c94:	00039797          	auipc	a5,0x39
    80017c98:	37d7c783          	lbu	a5,893(a5) # 80051011 <excpt+0x1>
    80017c9c:	c789                	beqz	a5,80017ca6 <load_guest_page_fault_11+0xc0>
    80017c9e:	6498                	ld	a4,8(s1)
    80017ca0:	47d5                	li	a5,21
    80017ca2:	00f70c63          	beq	a4,a5,80017cba <load_guest_page_fault_11+0xd4>
    80017ca6:	00015517          	auipc	a0,0x15
    80017caa:	69250513          	addi	a0,a0,1682 # 8002d338 <__func__.0+0x318>
    80017cae:	10c130ef          	jal	8002adba <printf>
    80017cb2:	02900513          	li	a0,41
    80017cb6:	5f3110ef          	jal	80029aa8 <putchar>
    80017cba:	4529                	li	a0,10
    80017cbc:	5ed110ef          	jal	80029aa8 <putchar>
    80017cc0:	00039417          	auipc	s0,0x39
    80017cc4:	35144403          	lbu	s0,849(s0) # 80051011 <excpt+0x1>
        excpt.cause == CAUSE_LGPF
    );



    TEST_END();
    80017cc8:	00015597          	auipc	a1,0x15
    80017ccc:	62858593          	addi	a1,a1,1576 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017cd0:	cc11                	beqz	s0,80017cec <load_guest_page_fault_11+0x106>
    80017cd2:	6498                	ld	a4,8(s1)
    80017cd4:	47d5                	li	a5,21
    TEST_END();
    80017cd6:	00015597          	auipc	a1,0x15
    80017cda:	60a58593          	addi	a1,a1,1546 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvd when the second-stage address translation pte.v=0 leads to LGPF",
    80017cde:	00f70763          	beq	a4,a5,80017cec <load_guest_page_fault_11+0x106>
    80017ce2:	4401                	li	s0,0
    TEST_END();
    80017ce4:	00015597          	auipc	a1,0x15
    80017ce8:	60c58593          	addi	a1,a1,1548 # 8002d2f0 <__func__.0+0x2d0>
    80017cec:	00015517          	auipc	a0,0x15
    80017cf0:	6ac50513          	addi	a0,a0,1708 # 8002d398 <__func__.0+0x378>
    80017cf4:	0c6130ef          	jal	8002adba <printf>
    80017cf8:	4511                	li	a0,4
    80017cfa:	974e90ef          	jal	80000e6e <goto_priv>
    80017cfe:	a8de90ef          	jal	8000178a <reset_state>
}
    80017d02:	60e2                	ld	ra,24(sp)
    80017d04:	8522                	mv	a0,s0
    80017d06:	6442                	ld	s0,16(sp)
    80017d08:	64a2                	ld	s1,8(sp)
    80017d0a:	6105                	addi	sp,sp,32
    80017d0c:	8082                	ret

0000000080017d0e <load_guest_page_fault_12>:

bool load_guest_page_fault_12(){
    80017d0e:	1101                	addi	sp,sp,-32

    TEST_START();
    80017d10:	00014597          	auipc	a1,0x14
    80017d14:	27058593          	addi	a1,a1,624 # 8002bf80 <__func__.25>
    80017d18:	00015517          	auipc	a0,0x15
    80017d1c:	5e850513          	addi	a0,a0,1512 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_12(){
    80017d20:	ec06                	sd	ra,24(sp)
    80017d22:	e822                	sd	s0,16(sp)
    80017d24:	e426                	sd	s1,8(sp)
    TEST_START();
    80017d26:	094130ef          	jal	8002adba <printf>
    80017d2a:	4529                	li	a0,10
    80017d2c:	57d110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80017d30:	450d                	li	a0,3
    80017d32:	93ce90ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80017d36:	8abe80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017d3a:	c43e80ef          	jal	8000097c <hpt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017d3e:	4511                	li	a0,4
    80017d40:	92ee90ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017d44:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017d48:	450d                	li	a0,3
    80017d4a:	924e90ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80017d4e:	4509                	li	a0,2
    80017d50:	83ee90ef          	jal	80000d8e <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80017d54:	81ee90ef          	jal	80000d72 <test_setup_except_function>
    vaddr = vs_page_base(VSI_GUX);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80017d58:	000807b7          	lui	a5,0x80
    80017d5c:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80017d60:	2000d5b7          	lui	a1,0x2000d
    80017d64:	058e                	slli	a1,a1,0x3
    80017d66:	6405c7f3          	.insn	4, 0x6405c7f3
    hlvh(vaddr);

    printf("%llx\n",vaddr);
    80017d6a:	0001c517          	auipc	a0,0x1c
    80017d6e:	bbe50513          	addi	a0,a0,-1090 # 80033928 <__func__.0+0x6908>
    80017d72:	048130ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    80017d76:	00039417          	auipc	s0,0x39
    80017d7a:	29a40413          	addi	s0,s0,666 # 80051010 <excpt>
    80017d7e:	640c                	ld	a1,8(s0)
    80017d80:	00016517          	auipc	a0,0x16
    80017d84:	10850513          	addi	a0,a0,264 # 8002de88 <__func__.0+0xe68>
    80017d88:	032130ef          	jal	8002adba <printf>
    printf("%d\n",excpt.triggered);
    80017d8c:	00039597          	auipc	a1,0x39
    80017d90:	2855c583          	lbu	a1,645(a1) # 80051011 <excpt+0x1>
    80017d94:	00016517          	auipc	a0,0x16
    80017d98:	0f450513          	addi	a0,a0,244 # 8002de88 <__func__.0+0xe68>
    80017d9c:	01e130ef          	jal	8002adba <printf>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017da0:	08200593          	li	a1,130
    80017da4:	0001b617          	auipc	a2,0x1b
    80017da8:	edc60613          	addi	a2,a2,-292 # 80032c80 <__func__.0+0x5c60>
    80017dac:	00015517          	auipc	a0,0x15
    80017db0:	56c50513          	addi	a0,a0,1388 # 8002d318 <__func__.0+0x2f8>
    80017db4:	006130ef          	jal	8002adba <printf>
    80017db8:	00039797          	auipc	a5,0x39
    80017dbc:	2597c783          	lbu	a5,601(a5) # 80051011 <excpt+0x1>
    80017dc0:	00015597          	auipc	a1,0x15
    80017dc4:	53058593          	addi	a1,a1,1328 # 8002d2f0 <__func__.0+0x2d0>
    80017dc8:	cf89                	beqz	a5,80017de2 <load_guest_page_fault_12+0xd4>
    80017dca:	6418                	ld	a4,8(s0)
    80017dcc:	47d5                	li	a5,21
    80017dce:	00015597          	auipc	a1,0x15
    80017dd2:	51258593          	addi	a1,a1,1298 # 8002d2e0 <__func__.0+0x2c0>
    80017dd6:	00f70663          	beq	a4,a5,80017de2 <load_guest_page_fault_12+0xd4>
    80017dda:	00015597          	auipc	a1,0x15
    80017dde:	51658593          	addi	a1,a1,1302 # 8002d2f0 <__func__.0+0x2d0>
    80017de2:	00015517          	auipc	a0,0x15
    80017de6:	54e50513          	addi	a0,a0,1358 # 8002d330 <__func__.0+0x310>
    80017dea:	7d1120ef          	jal	8002adba <printf>
    80017dee:	00039797          	auipc	a5,0x39
    80017df2:	2237c783          	lbu	a5,547(a5) # 80051011 <excpt+0x1>
    80017df6:	c789                	beqz	a5,80017e00 <load_guest_page_fault_12+0xf2>
    80017df8:	6418                	ld	a4,8(s0)
    80017dfa:	47d5                	li	a5,21
    80017dfc:	00f70c63          	beq	a4,a5,80017e14 <load_guest_page_fault_12+0x106>
    80017e00:	00015517          	auipc	a0,0x15
    80017e04:	53850513          	addi	a0,a0,1336 # 8002d338 <__func__.0+0x318>
    80017e08:	7b3120ef          	jal	8002adba <printf>
    80017e0c:	02900513          	li	a0,41
    80017e10:	499110ef          	jal	80029aa8 <putchar>
    80017e14:	4529                	li	a0,10
    80017e16:	493110ef          	jal	80029aa8 <putchar>
    80017e1a:	00039497          	auipc	s1,0x39
    80017e1e:	1f74c483          	lbu	s1,503(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    80017e22:	00015597          	auipc	a1,0x15
    80017e26:	4ce58593          	addi	a1,a1,1230 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017e2a:	cc91                	beqz	s1,80017e46 <load_guest_page_fault_12+0x138>
    80017e2c:	6418                	ld	a4,8(s0)
    80017e2e:	47d5                	li	a5,21
    TEST_END();
    80017e30:	00015597          	auipc	a1,0x15
    80017e34:	4b058593          	addi	a1,a1,1200 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to LGPF",
    80017e38:	00f70763          	beq	a4,a5,80017e46 <load_guest_page_fault_12+0x138>
    80017e3c:	4481                	li	s1,0
    TEST_END();
    80017e3e:	00015597          	auipc	a1,0x15
    80017e42:	4b258593          	addi	a1,a1,1202 # 8002d2f0 <__func__.0+0x2d0>
    80017e46:	00015517          	auipc	a0,0x15
    80017e4a:	55250513          	addi	a0,a0,1362 # 8002d398 <__func__.0+0x378>
    80017e4e:	76d120ef          	jal	8002adba <printf>
    80017e52:	4511                	li	a0,4
    80017e54:	81ae90ef          	jal	80000e6e <goto_priv>
    80017e58:	933e90ef          	jal	8000178a <reset_state>
}
    80017e5c:	60e2                	ld	ra,24(sp)
    80017e5e:	6442                	ld	s0,16(sp)
    80017e60:	8526                	mv	a0,s1
    80017e62:	64a2                	ld	s1,8(sp)
    80017e64:	6105                	addi	sp,sp,32
    80017e66:	8082                	ret

0000000080017e68 <load_guest_page_fault_13>:

bool load_guest_page_fault_13(){
    80017e68:	1101                	addi	sp,sp,-32

    TEST_START();
    80017e6a:	00014597          	auipc	a1,0x14
    80017e6e:	13658593          	addi	a1,a1,310 # 8002bfa0 <__func__.24>
    80017e72:	00015517          	auipc	a0,0x15
    80017e76:	48e50513          	addi	a0,a0,1166 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_13(){
    80017e7a:	ec06                	sd	ra,24(sp)
    80017e7c:	e822                	sd	s0,16(sp)
    80017e7e:	e426                	sd	s1,8(sp)
    TEST_START();
    80017e80:	73b120ef          	jal	8002adba <printf>
    80017e84:	4529                	li	a0,10
    80017e86:	423110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80017e8a:	450d                	li	a0,3
    80017e8c:	fe3e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80017e90:	f50e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80017e94:	ae9e80ef          	jal	8000097c <hpt_init>
    vspt_init();
    80017e98:	88be80ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80017e9c:	4511                	li	a0,4
    80017e9e:	fd1e80ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80017ea2:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80017ea6:	450d                	li	a0,3
    80017ea8:	fc7e80ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80017eac:	4509                	li	a0,2
    80017eae:	ee1e80ef          	jal	80000d8e <set_prev_priv>
    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80017eb2:	ec1e80ef          	jal	80000d72 <test_setup_except_function>
    vaddr = vs_page_base(VSI_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80017eb6:	000807b7          	lui	a5,0x80
    80017eba:	1007a073          	csrs	sstatus,a5
    80017ebe:	400197b7          	lui	a5,0x40019
    80017ec2:	078a                	slli	a5,a5,0x2
    80017ec4:	6407c7f3          	.insn	4, 0x6407c7f3
    hlvh(vaddr);
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017ec8:	08200593          	li	a1,130
    80017ecc:	0001b617          	auipc	a2,0x1b
    80017ed0:	e1460613          	addi	a2,a2,-492 # 80032ce0 <__func__.0+0x5cc0>
    80017ed4:	00015517          	auipc	a0,0x15
    80017ed8:	44450513          	addi	a0,a0,1092 # 8002d318 <__func__.0+0x2f8>
    80017edc:	6df120ef          	jal	8002adba <printf>
    80017ee0:	00039797          	auipc	a5,0x39
    80017ee4:	1317c783          	lbu	a5,305(a5) # 80051011 <excpt+0x1>
    80017ee8:	00039497          	auipc	s1,0x39
    80017eec:	12848493          	addi	s1,s1,296 # 80051010 <excpt>
    80017ef0:	00015597          	auipc	a1,0x15
    80017ef4:	40058593          	addi	a1,a1,1024 # 8002d2f0 <__func__.0+0x2d0>
    80017ef8:	cf89                	beqz	a5,80017f12 <load_guest_page_fault_13+0xaa>
    80017efa:	6498                	ld	a4,8(s1)
    80017efc:	47d5                	li	a5,21
    80017efe:	00015597          	auipc	a1,0x15
    80017f02:	3e258593          	addi	a1,a1,994 # 8002d2e0 <__func__.0+0x2c0>
    80017f06:	00f70663          	beq	a4,a5,80017f12 <load_guest_page_fault_13+0xaa>
    80017f0a:	00015597          	auipc	a1,0x15
    80017f0e:	3e658593          	addi	a1,a1,998 # 8002d2f0 <__func__.0+0x2d0>
    80017f12:	00015517          	auipc	a0,0x15
    80017f16:	41e50513          	addi	a0,a0,1054 # 8002d330 <__func__.0+0x310>
    80017f1a:	6a1120ef          	jal	8002adba <printf>
    80017f1e:	00039797          	auipc	a5,0x39
    80017f22:	0f37c783          	lbu	a5,243(a5) # 80051011 <excpt+0x1>
    80017f26:	c789                	beqz	a5,80017f30 <load_guest_page_fault_13+0xc8>
    80017f28:	6498                	ld	a4,8(s1)
    80017f2a:	47d5                	li	a5,21
    80017f2c:	00f70c63          	beq	a4,a5,80017f44 <load_guest_page_fault_13+0xdc>
    80017f30:	00015517          	auipc	a0,0x15
    80017f34:	40850513          	addi	a0,a0,1032 # 8002d338 <__func__.0+0x318>
    80017f38:	683120ef          	jal	8002adba <printf>
    80017f3c:	02900513          	li	a0,41
    80017f40:	369110ef          	jal	80029aa8 <putchar>
    80017f44:	4529                	li	a0,10
    80017f46:	363110ef          	jal	80029aa8 <putchar>
    80017f4a:	00039417          	auipc	s0,0x39
    80017f4e:	0c744403          	lbu	s0,199(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );
    TEST_END();
    80017f52:	00015597          	auipc	a1,0x15
    80017f56:	39e58593          	addi	a1,a1,926 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017f5a:	cc11                	beqz	s0,80017f76 <load_guest_page_fault_13+0x10e>
    80017f5c:	6498                	ld	a4,8(s1)
    80017f5e:	47d5                	li	a5,21
    TEST_END();
    80017f60:	00015597          	auipc	a1,0x15
    80017f64:	38058593          	addi	a1,a1,896 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to LGPF",
    80017f68:	00f70763          	beq	a4,a5,80017f76 <load_guest_page_fault_13+0x10e>
    80017f6c:	4401                	li	s0,0
    TEST_END();
    80017f6e:	00015597          	auipc	a1,0x15
    80017f72:	38258593          	addi	a1,a1,898 # 8002d2f0 <__func__.0+0x2d0>
    80017f76:	00015517          	auipc	a0,0x15
    80017f7a:	42250513          	addi	a0,a0,1058 # 8002d398 <__func__.0+0x378>
    80017f7e:	63d120ef          	jal	8002adba <printf>
    80017f82:	4511                	li	a0,4
    80017f84:	eebe80ef          	jal	80000e6e <goto_priv>
    80017f88:	803e90ef          	jal	8000178a <reset_state>
}
    80017f8c:	60e2                	ld	ra,24(sp)
    80017f8e:	8522                	mv	a0,s0
    80017f90:	6442                	ld	s0,16(sp)
    80017f92:	64a2                	ld	s1,8(sp)
    80017f94:	6105                	addi	sp,sp,32
    80017f96:	8082                	ret

0000000080017f98 <load_guest_page_fault_14>:

bool load_guest_page_fault_14(){
    80017f98:	1101                	addi	sp,sp,-32

    TEST_START();
    80017f9a:	00014597          	auipc	a1,0x14
    80017f9e:	02658593          	addi	a1,a1,38 # 8002bfc0 <__func__.23>
    80017fa2:	00015517          	auipc	a0,0x15
    80017fa6:	35e50513          	addi	a0,a0,862 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_14(){
    80017faa:	ec06                	sd	ra,24(sp)
    80017fac:	e822                	sd	s0,16(sp)
    80017fae:	e426                	sd	s1,8(sp)
    TEST_START();
    80017fb0:	60b120ef          	jal	8002adba <printf>
    80017fb4:	4529                	li	a0,10
    80017fb6:	2f3110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80017fba:	450d                	li	a0,3
    80017fbc:	eb3e80ef          	jal	80000e6e <goto_priv>
    hpt_init();
    80017fc0:	9bde80ef          	jal	8000097c <hpt_init>
    hspt_init();
    80017fc4:	e1ce80ef          	jal	800005e0 <hspt_init>
    vspt_init();
    80017fc8:	f5ae80ef          	jal	80000722 <vspt_init>



    uintptr_t vaddr;
    uintptr_t addr;
    goto_priv(PRIV_M);
    80017fcc:	4511                	li	a0,4
    80017fce:	ea1e80ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80017fd2:	000407b7          	lui	a5,0x40
    80017fd6:	2007b073          	csrc	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    80017fda:	28005073          	csrwi	vsatp,0
    
    goto_priv(PRIV_HS);
    80017fde:	450d                	li	a0,3
    80017fe0:	e8fe80ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80017fe4:	4509                	li	a0,2
    80017fe6:	da9e80ef          	jal	80000d8e <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80017fea:	d89e80ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80017fee:	001007b7          	lui	a5,0x100
    80017ff2:	06778793          	addi	a5,a5,103 # 100067 <STACK_SIZE+0x67>
    80017ff6:	07b2                	slli	a5,a5,0xc
    80017ff8:	6007c7f3          	.insn	4, 0x6007c7f3
    vaddr = vs_page_base(VSI_GURWX);


    hlvb(vaddr);
    printf("%d\n",excpt.cause);
    80017ffc:	00039417          	auipc	s0,0x39
    80018000:	01440413          	addi	s0,s0,20 # 80051010 <excpt>
    80018004:	640c                	ld	a1,8(s0)
    80018006:	00016517          	auipc	a0,0x16
    8001800a:	e8250513          	addi	a0,a0,-382 # 8002de88 <__func__.0+0xe68>
    8001800e:	5ad120ef          	jal	8002adba <printf>
    printf("%d\n",excpt.triggered);
    80018012:	00039597          	auipc	a1,0x39
    80018016:	fff5c583          	lbu	a1,-1(a1) # 80051011 <excpt+0x1>
    8001801a:	00016517          	auipc	a0,0x16
    8001801e:	e6e50513          	addi	a0,a0,-402 # 8002de88 <__func__.0+0xe68>
    80018022:	599120ef          	jal	8002adba <printf>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    80018026:	08200593          	li	a1,130
    8001802a:	0001b617          	auipc	a2,0x1b
    8001802e:	f4e60613          	addi	a2,a2,-178 # 80032f78 <__func__.0+0x5f58>
    80018032:	00015517          	auipc	a0,0x15
    80018036:	2e650513          	addi	a0,a0,742 # 8002d318 <__func__.0+0x2f8>
    8001803a:	581120ef          	jal	8002adba <printf>
    8001803e:	00039797          	auipc	a5,0x39
    80018042:	fd37c783          	lbu	a5,-45(a5) # 80051011 <excpt+0x1>
    80018046:	00015597          	auipc	a1,0x15
    8001804a:	2aa58593          	addi	a1,a1,682 # 8002d2f0 <__func__.0+0x2d0>
    8001804e:	cf89                	beqz	a5,80018068 <load_guest_page_fault_14+0xd0>
    80018050:	6418                	ld	a4,8(s0)
    80018052:	47d5                	li	a5,21
    80018054:	00015597          	auipc	a1,0x15
    80018058:	28c58593          	addi	a1,a1,652 # 8002d2e0 <__func__.0+0x2c0>
    8001805c:	00f70663          	beq	a4,a5,80018068 <load_guest_page_fault_14+0xd0>
    80018060:	00015597          	auipc	a1,0x15
    80018064:	29058593          	addi	a1,a1,656 # 8002d2f0 <__func__.0+0x2d0>
    80018068:	00015517          	auipc	a0,0x15
    8001806c:	2c850513          	addi	a0,a0,712 # 8002d330 <__func__.0+0x310>
    80018070:	54b120ef          	jal	8002adba <printf>
    80018074:	00039797          	auipc	a5,0x39
    80018078:	f9d7c783          	lbu	a5,-99(a5) # 80051011 <excpt+0x1>
    8001807c:	c789                	beqz	a5,80018086 <load_guest_page_fault_14+0xee>
    8001807e:	6418                	ld	a4,8(s0)
    80018080:	47d5                	li	a5,21
    80018082:	00f70c63          	beq	a4,a5,8001809a <load_guest_page_fault_14+0x102>
    80018086:	00015517          	auipc	a0,0x15
    8001808a:	2b250513          	addi	a0,a0,690 # 8002d338 <__func__.0+0x318>
    8001808e:	52d120ef          	jal	8002adba <printf>
    80018092:	02900513          	li	a0,41
    80018096:	213110ef          	jal	80029aa8 <putchar>
    8001809a:	4529                	li	a0,10
    8001809c:	20d110ef          	jal	80029aa8 <putchar>
    800180a0:	00039497          	auipc	s1,0x39
    800180a4:	f714c483          	lbu	s1,-143(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LGPF
    );

    TEST_END();
    800180a8:	00015597          	auipc	a1,0x15
    800180ac:	24858593          	addi	a1,a1,584 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    800180b0:	cc91                	beqz	s1,800180cc <load_guest_page_fault_14+0x134>
    800180b2:	6418                	ld	a4,8(s0)
    800180b4:	47d5                	li	a5,21
    TEST_END();
    800180b6:	00015597          	auipc	a1,0x15
    800180ba:	22a58593          	addi	a1,a1,554 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=0 leads to LGPF",
    800180be:	00f70763          	beq	a4,a5,800180cc <load_guest_page_fault_14+0x134>
    800180c2:	4481                	li	s1,0
    TEST_END();
    800180c4:	00015597          	auipc	a1,0x15
    800180c8:	22c58593          	addi	a1,a1,556 # 8002d2f0 <__func__.0+0x2d0>
    800180cc:	00015517          	auipc	a0,0x15
    800180d0:	2cc50513          	addi	a0,a0,716 # 8002d398 <__func__.0+0x378>
    800180d4:	4e7120ef          	jal	8002adba <printf>
    800180d8:	4511                	li	a0,4
    800180da:	d95e80ef          	jal	80000e6e <goto_priv>
    800180de:	eace90ef          	jal	8000178a <reset_state>
}
    800180e2:	60e2                	ld	ra,24(sp)
    800180e4:	6442                	ld	s0,16(sp)
    800180e6:	8526                	mv	a0,s1
    800180e8:	64a2                	ld	s1,8(sp)
    800180ea:	6105                	addi	sp,sp,32
    800180ec:	8082                	ret

00000000800180ee <load_guest_page_fault_15>:

bool load_guest_page_fault_15(){
    800180ee:	1141                	addi	sp,sp,-16

    TEST_START();
    800180f0:	00014597          	auipc	a1,0x14
    800180f4:	ef058593          	addi	a1,a1,-272 # 8002bfe0 <__func__.22>
    800180f8:	00015517          	auipc	a0,0x15
    800180fc:	20850513          	addi	a0,a0,520 # 8002d300 <__func__.0+0x2e0>
bool load_guest_page_fault_15(){
    80018100:	e406                	sd	ra,8(sp)
    80018102:	e022                	sd	s0,0(sp)
    TEST_START();
    80018104:	4b7120ef          	jal	8002adba <printf>
    80018108:	4529                	li	a0,10
    8001810a:	19f110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001810e:	450d                	li	a0,3
    80018110:	d5fe80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018114:	ccce80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018118:	865e80ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001811c:	e06e80ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018120:	4511                	li	a0,4
    80018122:	d4de80ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018126:	000407b7          	lui	a5,0x40
    8001812a:	2007a073          	csrs	vsstatus,a5
    CSRW(CSR_VSATP,(uint64_t)0);
    8001812e:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_HS);
    80018132:	450d                	li	a0,3
    80018134:	d3be80ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80018138:	4509                	li	a0,2
    8001813a:	c55e80ef          	jal	80000d8e <set_prev_priv>

    //特权模式在HS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，执行hlvb指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = vs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    8001813e:	c35e80ef          	jal	80000d72 <test_setup_except_function>
    80018142:	000807b7          	lui	a5,0x80
    80018146:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80018148:	07b6                	slli	a5,a5,0xd
    8001814a:	6007c7f3          	.insn	4, 0x6007c7f3
    hlvb(vaddr);

    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    8001814e:	08200593          	li	a1,130
    80018152:	0001a617          	auipc	a2,0x1a
    80018156:	3f660613          	addi	a2,a2,1014 # 80032548 <__func__.0+0x5528>
    8001815a:	00015517          	auipc	a0,0x15
    8001815e:	1be50513          	addi	a0,a0,446 # 8002d318 <__func__.0+0x2f8>
    80018162:	459120ef          	jal	8002adba <printf>
    80018166:	00039797          	auipc	a5,0x39
    8001816a:	eab7c783          	lbu	a5,-341(a5) # 80051011 <excpt+0x1>
    8001816e:	00015597          	auipc	a1,0x15
    80018172:	17258593          	addi	a1,a1,370 # 8002d2e0 <__func__.0+0x2c0>
    80018176:	c789                	beqz	a5,80018180 <load_guest_page_fault_15+0x92>
    80018178:	00015597          	auipc	a1,0x15
    8001817c:	17858593          	addi	a1,a1,376 # 8002d2f0 <__func__.0+0x2d0>
    80018180:	00015517          	auipc	a0,0x15
    80018184:	1b050513          	addi	a0,a0,432 # 8002d330 <__func__.0+0x310>
    80018188:	433120ef          	jal	8002adba <printf>
    8001818c:	00039797          	auipc	a5,0x39
    80018190:	e857c783          	lbu	a5,-379(a5) # 80051011 <excpt+0x1>
    80018194:	e7a1                	bnez	a5,800181dc <load_guest_page_fault_15+0xee>
    80018196:	4529                	li	a0,10
    80018198:	111110ef          	jal	80029aa8 <putchar>
    8001819c:	00039797          	auipc	a5,0x39
    800181a0:	e757c783          	lbu	a5,-395(a5) # 80051011 <excpt+0x1>
    800181a4:	e795                	bnez	a5,800181d0 <load_guest_page_fault_15+0xe2>
    800181a6:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    800181a8:	00015597          	auipc	a1,0x15
    800181ac:	13858593          	addi	a1,a1,312 # 8002d2e0 <__func__.0+0x2c0>
    800181b0:	00015517          	auipc	a0,0x15
    800181b4:	1e850513          	addi	a0,a0,488 # 8002d398 <__func__.0+0x378>
    800181b8:	403120ef          	jal	8002adba <printf>
    800181bc:	4511                	li	a0,4
    800181be:	cb1e80ef          	jal	80000e6e <goto_priv>
    800181c2:	dc8e90ef          	jal	8000178a <reset_state>
}
    800181c6:	60a2                	ld	ra,8(sp)
    800181c8:	8522                	mv	a0,s0
    800181ca:	6402                	ld	s0,0(sp)
    800181cc:	0141                	addi	sp,sp,16
    800181ce:	8082                	ret
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800181d0:	4401                	li	s0,0
    TEST_END();
    800181d2:	00015597          	auipc	a1,0x15
    800181d6:	11e58593          	addi	a1,a1,286 # 8002d2f0 <__func__.0+0x2d0>
    800181da:	bfd9                	j	800181b0 <load_guest_page_fault_15+0xc2>
    TEST_ASSERT("hs mode hlvb u mode page when vsstatus.sum=1 successful",
    800181dc:	00015517          	auipc	a0,0x15
    800181e0:	15c50513          	addi	a0,a0,348 # 8002d338 <__func__.0+0x318>
    800181e4:	3d7120ef          	jal	8002adba <printf>
    800181e8:	02900513          	li	a0,41
    800181ec:	0bd110ef          	jal	80029aa8 <putchar>
    800181f0:	b75d                	j	80018196 <load_guest_page_fault_15+0xa8>

00000000800181f2 <store_guest_page_fault_1>:



bool store_guest_page_fault_1(){
    800181f2:	1101                	addi	sp,sp,-32

    TEST_START();
    800181f4:	00014597          	auipc	a1,0x14
    800181f8:	e0c58593          	addi	a1,a1,-500 # 8002c000 <__func__.21>
    800181fc:	00015517          	auipc	a0,0x15
    80018200:	10450513          	addi	a0,a0,260 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_1(){
    80018204:	ec06                	sd	ra,24(sp)
    80018206:	e822                	sd	s0,16(sp)
    80018208:	e426                	sd	s1,8(sp)
    TEST_START();
    8001820a:	3b1120ef          	jal	8002adba <printf>
    8001820e:	4529                	li	a0,10
    80018210:	099110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80018214:	450d                	li	a0,3
    80018216:	c59e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001821a:	bc6e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001821e:	f5ee80ef          	jal	8000097c <hpt_init>
    vspt_init();
    80018222:	d00e80ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    80018226:	450d                	li	a0,3
    80018228:	c47e80ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8001822c:	4509                	li	a0,2
    8001822e:	b61e80ef          	jal	80000d8e <set_prev_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018232:	b41e80ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80018236:	37ab77b7          	lui	a5,0x37ab7
    8001823a:	00100737          	lui	a4,0x100
    8001823e:	078a                	slli	a5,a5,0x2
    80018240:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018244:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018248:	0732                	slli	a4,a4,0xc
    8001824a:	6ef74073          	.insn	4, 0x6ef74073

    vaddr = hs_page_base(VSRWX_GI);
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.v=0 leads to SGPF",
    8001824e:	08200593          	li	a1,130
    80018252:	0001b617          	auipc	a2,0x1b
    80018256:	d6660613          	addi	a2,a2,-666 # 80032fb8 <__func__.0+0x5f98>
    8001825a:	00015517          	auipc	a0,0x15
    8001825e:	0be50513          	addi	a0,a0,190 # 8002d318 <__func__.0+0x2f8>
    80018262:	359120ef          	jal	8002adba <printf>
    80018266:	00039797          	auipc	a5,0x39
    8001826a:	dab7c783          	lbu	a5,-597(a5) # 80051011 <excpt+0x1>
    8001826e:	00039497          	auipc	s1,0x39
    80018272:	da248493          	addi	s1,s1,-606 # 80051010 <excpt>
    80018276:	00015597          	auipc	a1,0x15
    8001827a:	07a58593          	addi	a1,a1,122 # 8002d2f0 <__func__.0+0x2d0>
    8001827e:	cf89                	beqz	a5,80018298 <store_guest_page_fault_1+0xa6>
    80018280:	6498                	ld	a4,8(s1)
    80018282:	47dd                	li	a5,23
    80018284:	00015597          	auipc	a1,0x15
    80018288:	05c58593          	addi	a1,a1,92 # 8002d2e0 <__func__.0+0x2c0>
    8001828c:	00f70663          	beq	a4,a5,80018298 <store_guest_page_fault_1+0xa6>
    80018290:	00015597          	auipc	a1,0x15
    80018294:	06058593          	addi	a1,a1,96 # 8002d2f0 <__func__.0+0x2d0>
    80018298:	00015517          	auipc	a0,0x15
    8001829c:	09850513          	addi	a0,a0,152 # 8002d330 <__func__.0+0x310>
    800182a0:	31b120ef          	jal	8002adba <printf>
    800182a4:	00039797          	auipc	a5,0x39
    800182a8:	d6d7c783          	lbu	a5,-659(a5) # 80051011 <excpt+0x1>
    800182ac:	c789                	beqz	a5,800182b6 <store_guest_page_fault_1+0xc4>
    800182ae:	6498                	ld	a4,8(s1)
    800182b0:	47dd                	li	a5,23
    800182b2:	00f70c63          	beq	a4,a5,800182ca <store_guest_page_fault_1+0xd8>
    800182b6:	00015517          	auipc	a0,0x15
    800182ba:	08250513          	addi	a0,a0,130 # 8002d338 <__func__.0+0x318>
    800182be:	2fd120ef          	jal	8002adba <printf>
    800182c2:	02900513          	li	a0,41
    800182c6:	7e2110ef          	jal	80029aa8 <putchar>
    800182ca:	4529                	li	a0,10
    800182cc:	7dc110ef          	jal	80029aa8 <putchar>
    800182d0:	00039797          	auipc	a5,0x39
    800182d4:	d417c783          	lbu	a5,-703(a5) # 80051011 <excpt+0x1>
    800182d8:	4401                	li	s0,0
    800182da:	c789                	beqz	a5,800182e4 <store_guest_page_fault_1+0xf2>
    800182dc:	6480                	ld	s0,8(s1)
    800182de:	1425                	addi	s0,s0,-23
    800182e0:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    800182e4:	a8fe80ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800182e8:	001007b7          	lui	a5,0x100
    800182ec:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    800182f0:	6731                	lui	a4,0xc
    800182f2:	07b2                	slli	a5,a5,0xc
    800182f4:	eef70713          	addi	a4,a4,-273 # beef <_test_table_size+0xbeee>
    800182f8:	66e7c073          	.insn	4, 0x66e7c073
    addr = hs_page_base(VSRWX_GI);

    hsvh(addr,0xbeef);   
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    800182fc:	08200593          	li	a1,130
    80018300:	0001b617          	auipc	a2,0x1b
    80018304:	d0860613          	addi	a2,a2,-760 # 80033008 <__func__.0+0x5fe8>
    80018308:	00015517          	auipc	a0,0x15
    8001830c:	01050513          	addi	a0,a0,16 # 8002d318 <__func__.0+0x2f8>
    80018310:	2ab120ef          	jal	8002adba <printf>
    80018314:	00039797          	auipc	a5,0x39
    80018318:	cfd7c783          	lbu	a5,-771(a5) # 80051011 <excpt+0x1>
    8001831c:	00015597          	auipc	a1,0x15
    80018320:	fd458593          	addi	a1,a1,-44 # 8002d2f0 <__func__.0+0x2d0>
    80018324:	cf89                	beqz	a5,8001833e <store_guest_page_fault_1+0x14c>
    80018326:	6498                	ld	a4,8(s1)
    80018328:	47dd                	li	a5,23
    8001832a:	00015597          	auipc	a1,0x15
    8001832e:	fb658593          	addi	a1,a1,-74 # 8002d2e0 <__func__.0+0x2c0>
    80018332:	00f70663          	beq	a4,a5,8001833e <store_guest_page_fault_1+0x14c>
    80018336:	00015597          	auipc	a1,0x15
    8001833a:	fba58593          	addi	a1,a1,-70 # 8002d2f0 <__func__.0+0x2d0>
    8001833e:	00015517          	auipc	a0,0x15
    80018342:	ff250513          	addi	a0,a0,-14 # 8002d330 <__func__.0+0x310>
    80018346:	275120ef          	jal	8002adba <printf>
    8001834a:	00039797          	auipc	a5,0x39
    8001834e:	cc77c783          	lbu	a5,-825(a5) # 80051011 <excpt+0x1>
    80018352:	c789                	beqz	a5,8001835c <store_guest_page_fault_1+0x16a>
    80018354:	6498                	ld	a4,8(s1)
    80018356:	47dd                	li	a5,23
    80018358:	00f70c63          	beq	a4,a5,80018370 <store_guest_page_fault_1+0x17e>
    8001835c:	00015517          	auipc	a0,0x15
    80018360:	fdc50513          	addi	a0,a0,-36 # 8002d338 <__func__.0+0x318>
    80018364:	257120ef          	jal	8002adba <printf>
    80018368:	02900513          	li	a0,41
    8001836c:	73c110ef          	jal	80029aa8 <putchar>
    80018370:	4529                	li	a0,10
    80018372:	736110ef          	jal	80029aa8 <putchar>
    80018376:	c015                	beqz	s0,8001839a <store_guest_page_fault_1+0x1a8>
    80018378:	00039417          	auipc	s0,0x39
    8001837c:	c9944403          	lbu	s0,-871(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018380:	00015597          	auipc	a1,0x15
    80018384:	f7058593          	addi	a1,a1,-144 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018388:	cc11                	beqz	s0,800183a4 <store_guest_page_fault_1+0x1b2>
    8001838a:	6498                	ld	a4,8(s1)
    8001838c:	47dd                	li	a5,23
    TEST_END();
    8001838e:	00015597          	auipc	a1,0x15
    80018392:	f5258593          	addi	a1,a1,-174 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018396:	00f70763          	beq	a4,a5,800183a4 <store_guest_page_fault_1+0x1b2>
    8001839a:	4401                	li	s0,0
    TEST_END();
    8001839c:	00015597          	auipc	a1,0x15
    800183a0:	f5458593          	addi	a1,a1,-172 # 8002d2f0 <__func__.0+0x2d0>
    800183a4:	00015517          	auipc	a0,0x15
    800183a8:	ff450513          	addi	a0,a0,-12 # 8002d398 <__func__.0+0x378>
    800183ac:	20f120ef          	jal	8002adba <printf>
    800183b0:	4511                	li	a0,4
    800183b2:	abde80ef          	jal	80000e6e <goto_priv>
    800183b6:	bd4e90ef          	jal	8000178a <reset_state>

}
    800183ba:	60e2                	ld	ra,24(sp)
    800183bc:	8522                	mv	a0,s0
    800183be:	6442                	ld	s0,16(sp)
    800183c0:	64a2                	ld	s1,8(sp)
    800183c2:	6105                	addi	sp,sp,32
    800183c4:	8082                	ret

00000000800183c6 <store_guest_page_fault_2>:

bool store_guest_page_fault_2(){
    800183c6:	1101                	addi	sp,sp,-32

    TEST_START();
    800183c8:	00014597          	auipc	a1,0x14
    800183cc:	c5858593          	addi	a1,a1,-936 # 8002c020 <__func__.20>
    800183d0:	00015517          	auipc	a0,0x15
    800183d4:	f3050513          	addi	a0,a0,-208 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_2(){
    800183d8:	ec06                	sd	ra,24(sp)
    800183da:	e822                	sd	s0,16(sp)
    800183dc:	e426                	sd	s1,8(sp)
    TEST_START();
    800183de:	1dd120ef          	jal	8002adba <printf>
    800183e2:	4529                	li	a0,10
    800183e4:	6c4110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800183e8:	450d                	li	a0,3
    800183ea:	a85e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800183ee:	9f2e80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800183f2:	d8ae80ef          	jal	8000097c <hpt_init>
    vspt_init();
    800183f6:	b2ce80ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800183fa:	450d                	li	a0,3
    800183fc:	a73e80ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80018400:	4509                	li	a0,2
    80018402:	98de80ef          	jal	80000d8e <set_prev_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018406:	96de80ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001840a:	000807b7          	lui	a5,0x80
    8001840e:	1007b073          	csrc	sstatus,a5
    asm volatile(
    80018412:	37ab77b7          	lui	a5,0x37ab7
    80018416:	00100737          	lui	a4,0x100
    8001841a:	078a                	slli	a5,a5,0x2
    8001841c:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018420:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018424:	0732                	slli	a4,a4,0xc
    80018426:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    8001842a:	08200593          	li	a1,130
    8001842e:	0001b617          	auipc	a2,0x1b
    80018432:	c3a60613          	addi	a2,a2,-966 # 80033068 <__func__.0+0x6048>
    80018436:	00015517          	auipc	a0,0x15
    8001843a:	ee250513          	addi	a0,a0,-286 # 8002d318 <__func__.0+0x2f8>
    8001843e:	17d120ef          	jal	8002adba <printf>
    80018442:	00039797          	auipc	a5,0x39
    80018446:	bcf7c783          	lbu	a5,-1073(a5) # 80051011 <excpt+0x1>
    8001844a:	00039497          	auipc	s1,0x39
    8001844e:	bc648493          	addi	s1,s1,-1082 # 80051010 <excpt>
    80018452:	00015597          	auipc	a1,0x15
    80018456:	e9e58593          	addi	a1,a1,-354 # 8002d2f0 <__func__.0+0x2d0>
    8001845a:	cf89                	beqz	a5,80018474 <store_guest_page_fault_2+0xae>
    8001845c:	6498                	ld	a4,8(s1)
    8001845e:	47dd                	li	a5,23
    80018460:	00015597          	auipc	a1,0x15
    80018464:	e8058593          	addi	a1,a1,-384 # 8002d2e0 <__func__.0+0x2c0>
    80018468:	00f70663          	beq	a4,a5,80018474 <store_guest_page_fault_2+0xae>
    8001846c:	00015597          	auipc	a1,0x15
    80018470:	e8458593          	addi	a1,a1,-380 # 8002d2f0 <__func__.0+0x2d0>
    80018474:	00015517          	auipc	a0,0x15
    80018478:	ebc50513          	addi	a0,a0,-324 # 8002d330 <__func__.0+0x310>
    8001847c:	13f120ef          	jal	8002adba <printf>
    80018480:	00039797          	auipc	a5,0x39
    80018484:	b917c783          	lbu	a5,-1135(a5) # 80051011 <excpt+0x1>
    80018488:	c789                	beqz	a5,80018492 <store_guest_page_fault_2+0xcc>
    8001848a:	6498                	ld	a4,8(s1)
    8001848c:	47dd                	li	a5,23
    8001848e:	00f70c63          	beq	a4,a5,800184a6 <store_guest_page_fault_2+0xe0>
    80018492:	00015517          	auipc	a0,0x15
    80018496:	ea650513          	addi	a0,a0,-346 # 8002d338 <__func__.0+0x318>
    8001849a:	121120ef          	jal	8002adba <printf>
    8001849e:	02900513          	li	a0,41
    800184a2:	606110ef          	jal	80029aa8 <putchar>
    800184a6:	4529                	li	a0,10
    800184a8:	600110ef          	jal	80029aa8 <putchar>
    800184ac:	00039417          	auipc	s0,0x39
    800184b0:	b6544403          	lbu	s0,-1179(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800184b4:	00015597          	auipc	a1,0x15
    800184b8:	e3c58593          	addi	a1,a1,-452 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800184bc:	cc11                	beqz	s0,800184d8 <store_guest_page_fault_2+0x112>
    800184be:	6498                	ld	a4,8(s1)
    800184c0:	47dd                	li	a5,23
    TEST_END();
    800184c2:	00015597          	auipc	a1,0x15
    800184c6:	e1e58593          	addi	a1,a1,-482 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800184ca:	00f70763          	beq	a4,a5,800184d8 <store_guest_page_fault_2+0x112>
    800184ce:	4401                	li	s0,0
    TEST_END();
    800184d0:	00015597          	auipc	a1,0x15
    800184d4:	e2058593          	addi	a1,a1,-480 # 8002d2f0 <__func__.0+0x2d0>
    800184d8:	00015517          	auipc	a0,0x15
    800184dc:	ec050513          	addi	a0,a0,-320 # 8002d398 <__func__.0+0x378>
    800184e0:	0db120ef          	jal	8002adba <printf>
    800184e4:	4511                	li	a0,4
    800184e6:	989e80ef          	jal	80000e6e <goto_priv>
    800184ea:	aa0e90ef          	jal	8000178a <reset_state>
}
    800184ee:	60e2                	ld	ra,24(sp)
    800184f0:	8522                	mv	a0,s0
    800184f2:	6442                	ld	s0,16(sp)
    800184f4:	64a2                	ld	s1,8(sp)
    800184f6:	6105                	addi	sp,sp,32
    800184f8:	8082                	ret

00000000800184fa <store_guest_page_fault_3>:

bool store_guest_page_fault_3(){
    800184fa:	1101                	addi	sp,sp,-32

    TEST_START();
    800184fc:	00014597          	auipc	a1,0x14
    80018500:	b4458593          	addi	a1,a1,-1212 # 8002c040 <__func__.19>
    80018504:	00015517          	auipc	a0,0x15
    80018508:	dfc50513          	addi	a0,a0,-516 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_3(){
    8001850c:	ec06                	sd	ra,24(sp)
    8001850e:	e822                	sd	s0,16(sp)
    80018510:	e426                	sd	s1,8(sp)
    TEST_START();
    80018512:	0a9120ef          	jal	8002adba <printf>
    80018516:	4529                	li	a0,10
    80018518:	590110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001851c:	450d                	li	a0,3
    8001851e:	951e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018522:	8bee80ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018526:	c56e80ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001852a:	9f8e80ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    8001852e:	450d                	li	a0,3
    80018530:	93fe80ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80018534:	4509                	li	a0,2
    80018536:	859e80ef          	jal	80000d8e <set_prev_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    8001853a:	839e80ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    8001853e:	000807b7          	lui	a5,0x80
    80018542:	1007a073          	csrs	sstatus,a5
    80018546:	37ab77b7          	lui	a5,0x37ab7
    8001854a:	00100737          	lui	a4,0x100
    8001854e:	078a                	slli	a5,a5,0x2
    80018550:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018554:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018558:	0732                	slli	a4,a4,0xc
    8001855a:	6ef74073          	.insn	4, 0x6ef74073
    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    8001855e:	08200593          	li	a1,130
    80018562:	0001b617          	auipc	a2,0x1b
    80018566:	b6660613          	addi	a2,a2,-1178 # 800330c8 <__func__.0+0x60a8>
    8001856a:	00015517          	auipc	a0,0x15
    8001856e:	dae50513          	addi	a0,a0,-594 # 8002d318 <__func__.0+0x2f8>
    80018572:	049120ef          	jal	8002adba <printf>
    80018576:	00039797          	auipc	a5,0x39
    8001857a:	a9b7c783          	lbu	a5,-1381(a5) # 80051011 <excpt+0x1>
    8001857e:	00039497          	auipc	s1,0x39
    80018582:	a9248493          	addi	s1,s1,-1390 # 80051010 <excpt>
    80018586:	00015597          	auipc	a1,0x15
    8001858a:	d6a58593          	addi	a1,a1,-662 # 8002d2f0 <__func__.0+0x2d0>
    8001858e:	cf89                	beqz	a5,800185a8 <store_guest_page_fault_3+0xae>
    80018590:	6498                	ld	a4,8(s1)
    80018592:	47dd                	li	a5,23
    80018594:	00015597          	auipc	a1,0x15
    80018598:	d4c58593          	addi	a1,a1,-692 # 8002d2e0 <__func__.0+0x2c0>
    8001859c:	00f70663          	beq	a4,a5,800185a8 <store_guest_page_fault_3+0xae>
    800185a0:	00015597          	auipc	a1,0x15
    800185a4:	d5058593          	addi	a1,a1,-688 # 8002d2f0 <__func__.0+0x2d0>
    800185a8:	00015517          	auipc	a0,0x15
    800185ac:	d8850513          	addi	a0,a0,-632 # 8002d330 <__func__.0+0x310>
    800185b0:	00b120ef          	jal	8002adba <printf>
    800185b4:	00039797          	auipc	a5,0x39
    800185b8:	a5d7c783          	lbu	a5,-1443(a5) # 80051011 <excpt+0x1>
    800185bc:	c789                	beqz	a5,800185c6 <store_guest_page_fault_3+0xcc>
    800185be:	6498                	ld	a4,8(s1)
    800185c0:	47dd                	li	a5,23
    800185c2:	00f70c63          	beq	a4,a5,800185da <store_guest_page_fault_3+0xe0>
    800185c6:	00015517          	auipc	a0,0x15
    800185ca:	d7250513          	addi	a0,a0,-654 # 8002d338 <__func__.0+0x318>
    800185ce:	7ec120ef          	jal	8002adba <printf>
    800185d2:	02900513          	li	a0,41
    800185d6:	4d2110ef          	jal	80029aa8 <putchar>
    800185da:	4529                	li	a0,10
    800185dc:	4cc110ef          	jal	80029aa8 <putchar>
    800185e0:	00039417          	auipc	s0,0x39
    800185e4:	a3144403          	lbu	s0,-1487(s0) # 80051011 <excpt+0x1>
    800185e8:	c409                	beqz	s0,800185f2 <store_guest_page_fault_3+0xf8>
    800185ea:	6498                	ld	a4,8(s1)
    800185ec:	47dd                	li	a5,23
    800185ee:	02f70c63          	beq	a4,a5,80018626 <store_guest_page_fault_3+0x12c>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800185f2:	000807b7          	lui	a5,0x80
    800185f6:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("hs mode hsvd when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800185fa:	4401                	li	s0,0

    TEST_END();
    800185fc:	00015597          	auipc	a1,0x15
    80018600:	cf458593          	addi	a1,a1,-780 # 8002d2f0 <__func__.0+0x2d0>
    80018604:	00015517          	auipc	a0,0x15
    80018608:	d9450513          	addi	a0,a0,-620 # 8002d398 <__func__.0+0x378>
    8001860c:	7ae120ef          	jal	8002adba <printf>
    80018610:	4511                	li	a0,4
    80018612:	85de80ef          	jal	80000e6e <goto_priv>
    80018616:	974e90ef          	jal	8000178a <reset_state>
}
    8001861a:	60e2                	ld	ra,24(sp)
    8001861c:	8522                	mv	a0,s0
    8001861e:	6442                	ld	s0,16(sp)
    80018620:	64a2                	ld	s1,8(sp)
    80018622:	6105                	addi	sp,sp,32
    80018624:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018626:	000807b7          	lui	a5,0x80
    8001862a:	1007b073          	csrc	sstatus,a5
    TEST_END();
    8001862e:	00015597          	auipc	a1,0x15
    80018632:	cb258593          	addi	a1,a1,-846 # 8002d2e0 <__func__.0+0x2c0>
    80018636:	b7f9                	j	80018604 <store_guest_page_fault_3+0x10a>

0000000080018638 <store_guest_page_fault_4>:

bool store_guest_page_fault_4(){
    80018638:	1101                	addi	sp,sp,-32

    TEST_START();
    8001863a:	00014597          	auipc	a1,0x14
    8001863e:	a2658593          	addi	a1,a1,-1498 # 8002c060 <__func__.18>
    80018642:	00015517          	auipc	a0,0x15
    80018646:	cbe50513          	addi	a0,a0,-834 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_4(){
    8001864a:	ec06                	sd	ra,24(sp)
    8001864c:	e822                	sd	s0,16(sp)
    8001864e:	e426                	sd	s1,8(sp)
    TEST_START();
    80018650:	76a120ef          	jal	8002adba <printf>
    80018654:	4529                	li	a0,10
    80018656:	452110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001865a:	450d                	li	a0,3
    8001865c:	813e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018660:	f81e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018664:	b18e80ef          	jal	8000097c <hpt_init>
    vspt_init();
    80018668:	8bae80ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    8001866c:	4511                	li	a0,4
    8001866e:	801e80ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018672:	000407b7          	lui	a5,0x40
    80018676:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    8001867a:	450d                	li	a0,3
    8001867c:	ff2e80ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    80018680:	4509                	li	a0,2
    80018682:	f0ce80ef          	jal	80000d8e <set_prev_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018686:	eece80ef          	jal	80000d72 <test_setup_except_function>
    8001868a:	37ab77b7          	lui	a5,0x37ab7
    8001868e:	00080737          	lui	a4,0x80
    80018692:	078a                	slli	a5,a5,0x2
    80018694:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80018696:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001869a:	0736                	slli	a4,a4,0xd
    8001869c:	6ef74073          	.insn	4, 0x6ef74073
    vaddr = hs_page_base(VSURWX_GUX);


    hsvd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    800186a0:	08200593          	li	a1,130
    800186a4:	0001b617          	auipc	a2,0x1b
    800186a8:	a9460613          	addi	a2,a2,-1388 # 80033138 <__func__.0+0x6118>
    800186ac:	00015517          	auipc	a0,0x15
    800186b0:	c6c50513          	addi	a0,a0,-916 # 8002d318 <__func__.0+0x2f8>
    800186b4:	706120ef          	jal	8002adba <printf>
    800186b8:	00039797          	auipc	a5,0x39
    800186bc:	9597c783          	lbu	a5,-1703(a5) # 80051011 <excpt+0x1>
    800186c0:	00039497          	auipc	s1,0x39
    800186c4:	95048493          	addi	s1,s1,-1712 # 80051010 <excpt>
    800186c8:	00015597          	auipc	a1,0x15
    800186cc:	c2858593          	addi	a1,a1,-984 # 8002d2f0 <__func__.0+0x2d0>
    800186d0:	cf89                	beqz	a5,800186ea <store_guest_page_fault_4+0xb2>
    800186d2:	6498                	ld	a4,8(s1)
    800186d4:	47bd                	li	a5,15
    800186d6:	00015597          	auipc	a1,0x15
    800186da:	c0a58593          	addi	a1,a1,-1014 # 8002d2e0 <__func__.0+0x2c0>
    800186de:	00f70663          	beq	a4,a5,800186ea <store_guest_page_fault_4+0xb2>
    800186e2:	00015597          	auipc	a1,0x15
    800186e6:	c0e58593          	addi	a1,a1,-1010 # 8002d2f0 <__func__.0+0x2d0>
    800186ea:	00015517          	auipc	a0,0x15
    800186ee:	c4650513          	addi	a0,a0,-954 # 8002d330 <__func__.0+0x310>
    800186f2:	6c8120ef          	jal	8002adba <printf>
    800186f6:	00039797          	auipc	a5,0x39
    800186fa:	91b7c783          	lbu	a5,-1765(a5) # 80051011 <excpt+0x1>
    800186fe:	c789                	beqz	a5,80018708 <store_guest_page_fault_4+0xd0>
    80018700:	6498                	ld	a4,8(s1)
    80018702:	47bd                	li	a5,15
    80018704:	00f70c63          	beq	a4,a5,8001871c <store_guest_page_fault_4+0xe4>
    80018708:	00015517          	auipc	a0,0x15
    8001870c:	c3050513          	addi	a0,a0,-976 # 8002d338 <__func__.0+0x318>
    80018710:	6aa120ef          	jal	8002adba <printf>
    80018714:	02900513          	li	a0,41
    80018718:	390110ef          	jal	80029aa8 <putchar>
    8001871c:	4529                	li	a0,10
    8001871e:	38a110ef          	jal	80029aa8 <putchar>
    80018722:	00039417          	auipc	s0,0x39
    80018726:	8ef44403          	lbu	s0,-1809(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001872a:	00015597          	auipc	a1,0x15
    8001872e:	bc658593          	addi	a1,a1,-1082 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80018732:	cc11                	beqz	s0,8001874e <store_guest_page_fault_4+0x116>
    80018734:	6498                	ld	a4,8(s1)
    80018736:	47bd                	li	a5,15
    TEST_END();
    80018738:	00015597          	auipc	a1,0x15
    8001873c:	ba858593          	addi	a1,a1,-1112 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=0 leads to SPF",
    80018740:	00f70763          	beq	a4,a5,8001874e <store_guest_page_fault_4+0x116>
    80018744:	4401                	li	s0,0
    TEST_END();
    80018746:	00015597          	auipc	a1,0x15
    8001874a:	baa58593          	addi	a1,a1,-1110 # 8002d2f0 <__func__.0+0x2d0>
    8001874e:	00015517          	auipc	a0,0x15
    80018752:	c4a50513          	addi	a0,a0,-950 # 8002d398 <__func__.0+0x378>
    80018756:	664120ef          	jal	8002adba <printf>
    8001875a:	4511                	li	a0,4
    8001875c:	f12e80ef          	jal	80000e6e <goto_priv>
    80018760:	82ae90ef          	jal	8000178a <reset_state>
}
    80018764:	60e2                	ld	ra,24(sp)
    80018766:	8522                	mv	a0,s0
    80018768:	6442                	ld	s0,16(sp)
    8001876a:	64a2                	ld	s1,8(sp)
    8001876c:	6105                	addi	sp,sp,32
    8001876e:	8082                	ret

0000000080018770 <store_guest_page_fault_5>:

bool store_guest_page_fault_5(){
    80018770:	1141                	addi	sp,sp,-16

    TEST_START();
    80018772:	00014597          	auipc	a1,0x14
    80018776:	90e58593          	addi	a1,a1,-1778 # 8002c080 <__func__.17>
    8001877a:	00015517          	auipc	a0,0x15
    8001877e:	b8650513          	addi	a0,a0,-1146 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_5(){
    80018782:	e406                	sd	ra,8(sp)
    80018784:	e022                	sd	s0,0(sp)
    TEST_START();
    80018786:	634120ef          	jal	8002adba <printf>
    8001878a:	4529                	li	a0,10
    8001878c:	31c110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80018790:	450d                	li	a0,3
    80018792:	edce80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018796:	e4be70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001879a:	9e2e80ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001879e:	f85e70ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    800187a2:	4511                	li	a0,4
    800187a4:	ecae80ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    800187a8:	000407b7          	lui	a5,0x40
    800187ac:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_HS);
    800187b0:	450d                	li	a0,3
    800187b2:	ebce80ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    800187b6:	4509                	li	a0,2
    800187b8:	dd6e80ef          	jal	80000d8e <set_prev_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    800187bc:	db6e80ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    800187c0:	37ab77b7          	lui	a5,0x37ab7
    800187c4:	00080737          	lui	a4,0x80
    800187c8:	078a                	slli	a5,a5,0x2
    800187ca:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800187cc:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800187d0:	0736                	slli	a4,a4,0xd
    800187d2:	62f74073          	.insn	4, 0x62f74073
    hsvb(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    800187d6:	08200593          	li	a1,130
    800187da:	0001b617          	auipc	a2,0x1b
    800187de:	99e60613          	addi	a2,a2,-1634 # 80033178 <__func__.0+0x6158>
    800187e2:	00015517          	auipc	a0,0x15
    800187e6:	b3650513          	addi	a0,a0,-1226 # 8002d318 <__func__.0+0x2f8>
    800187ea:	5d0120ef          	jal	8002adba <printf>
    800187ee:	00039797          	auipc	a5,0x39
    800187f2:	8237c783          	lbu	a5,-2013(a5) # 80051011 <excpt+0x1>
    800187f6:	00015597          	auipc	a1,0x15
    800187fa:	aea58593          	addi	a1,a1,-1302 # 8002d2e0 <__func__.0+0x2c0>
    800187fe:	c789                	beqz	a5,80018808 <store_guest_page_fault_5+0x98>
    80018800:	00015597          	auipc	a1,0x15
    80018804:	af058593          	addi	a1,a1,-1296 # 8002d2f0 <__func__.0+0x2d0>
    80018808:	00015517          	auipc	a0,0x15
    8001880c:	b2850513          	addi	a0,a0,-1240 # 8002d330 <__func__.0+0x310>
    80018810:	5aa120ef          	jal	8002adba <printf>
    80018814:	00038797          	auipc	a5,0x38
    80018818:	7fd7c783          	lbu	a5,2045(a5) # 80051011 <excpt+0x1>
    8001881c:	e7a1                	bnez	a5,80018864 <store_guest_page_fault_5+0xf4>
    8001881e:	4529                	li	a0,10
    80018820:	288110ef          	jal	80029aa8 <putchar>
    80018824:	00038797          	auipc	a5,0x38
    80018828:	7ed7c783          	lbu	a5,2029(a5) # 80051011 <excpt+0x1>
    8001882c:	e795                	bnez	a5,80018858 <store_guest_page_fault_5+0xe8>
    8001882e:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018830:	00015597          	auipc	a1,0x15
    80018834:	ab058593          	addi	a1,a1,-1360 # 8002d2e0 <__func__.0+0x2c0>
    80018838:	00015517          	auipc	a0,0x15
    8001883c:	b6050513          	addi	a0,a0,-1184 # 8002d398 <__func__.0+0x378>
    80018840:	57a120ef          	jal	8002adba <printf>
    80018844:	4511                	li	a0,4
    80018846:	e28e80ef          	jal	80000e6e <goto_priv>
    8001884a:	f41e80ef          	jal	8000178a <reset_state>
}
    8001884e:	60a2                	ld	ra,8(sp)
    80018850:	8522                	mv	a0,s0
    80018852:	6402                	ld	s0,0(sp)
    80018854:	0141                	addi	sp,sp,16
    80018856:	8082                	ret
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018858:	4401                	li	s0,0
    TEST_END();
    8001885a:	00015597          	auipc	a1,0x15
    8001885e:	a9658593          	addi	a1,a1,-1386 # 8002d2f0 <__func__.0+0x2d0>
    80018862:	bfd9                	j	80018838 <store_guest_page_fault_5+0xc8>
    TEST_ASSERT("hs mode hsvd u mode page when vsstatus.sum=1 successful",
    80018864:	00015517          	auipc	a0,0x15
    80018868:	ad450513          	addi	a0,a0,-1324 # 8002d338 <__func__.0+0x318>
    8001886c:	54e120ef          	jal	8002adba <printf>
    80018870:	02900513          	li	a0,41
    80018874:	234110ef          	jal	80029aa8 <putchar>
    80018878:	b75d                	j	8001881e <store_guest_page_fault_5+0xae>

000000008001887a <store_guest_page_fault_6>:

bool store_guest_page_fault_6(){
    8001887a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001887c:	00014597          	auipc	a1,0x14
    80018880:	82458593          	addi	a1,a1,-2012 # 8002c0a0 <__func__.16>
    80018884:	00015517          	auipc	a0,0x15
    80018888:	a7c50513          	addi	a0,a0,-1412 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_6(){
    8001888c:	ec06                	sd	ra,24(sp)
    8001888e:	e822                	sd	s0,16(sp)
    80018890:	e426                	sd	s1,8(sp)
    TEST_START();
    80018892:	528120ef          	jal	8002adba <printf>
    80018896:	4529                	li	a0,10
    80018898:	210110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001889c:	450d                	li	a0,3
    8001889e:	dd0e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800188a2:	d3fe70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800188a6:	8d6e80ef          	jal	8000097c <hpt_init>
    vspt_init();
    800188aa:	e79e70ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    800188ae:	4509                	li	a0,2
    800188b0:	dbee80ef          	jal	80000e6e <goto_priv>

    //执行store指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    800188b4:	cbee80ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    800188b8:	37ab77b7          	lui	a5,0x37ab7
    800188bc:	00100737          	lui	a4,0x100
    800188c0:	078a                	slli	a5,a5,0x2
    800188c2:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    800188c6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800188ca:	0732                	slli	a4,a4,0xc
    800188cc:	00f73023          	sd	a5,0(a4)

    vaddr = hs_page_base(VSRWX_GI);
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.v=0 leads to SGPF",
    800188d0:	08200593          	li	a1,130
    800188d4:	0001b617          	auipc	a2,0x1b
    800188d8:	8dc60613          	addi	a2,a2,-1828 # 800331b0 <__func__.0+0x6190>
    800188dc:	00015517          	auipc	a0,0x15
    800188e0:	a3c50513          	addi	a0,a0,-1476 # 8002d318 <__func__.0+0x2f8>
    800188e4:	4d6120ef          	jal	8002adba <printf>
    800188e8:	00038797          	auipc	a5,0x38
    800188ec:	7297c783          	lbu	a5,1833(a5) # 80051011 <excpt+0x1>
    800188f0:	00038497          	auipc	s1,0x38
    800188f4:	72048493          	addi	s1,s1,1824 # 80051010 <excpt>
    800188f8:	00015597          	auipc	a1,0x15
    800188fc:	9f858593          	addi	a1,a1,-1544 # 8002d2f0 <__func__.0+0x2d0>
    80018900:	cf89                	beqz	a5,8001891a <store_guest_page_fault_6+0xa0>
    80018902:	6498                	ld	a4,8(s1)
    80018904:	47dd                	li	a5,23
    80018906:	00015597          	auipc	a1,0x15
    8001890a:	9da58593          	addi	a1,a1,-1574 # 8002d2e0 <__func__.0+0x2c0>
    8001890e:	00f70663          	beq	a4,a5,8001891a <store_guest_page_fault_6+0xa0>
    80018912:	00015597          	auipc	a1,0x15
    80018916:	9de58593          	addi	a1,a1,-1570 # 8002d2f0 <__func__.0+0x2d0>
    8001891a:	00015517          	auipc	a0,0x15
    8001891e:	a1650513          	addi	a0,a0,-1514 # 8002d330 <__func__.0+0x310>
    80018922:	498120ef          	jal	8002adba <printf>
    80018926:	00038797          	auipc	a5,0x38
    8001892a:	6eb7c783          	lbu	a5,1771(a5) # 80051011 <excpt+0x1>
    8001892e:	c789                	beqz	a5,80018938 <store_guest_page_fault_6+0xbe>
    80018930:	6498                	ld	a4,8(s1)
    80018932:	47dd                	li	a5,23
    80018934:	00f70c63          	beq	a4,a5,8001894c <store_guest_page_fault_6+0xd2>
    80018938:	00015517          	auipc	a0,0x15
    8001893c:	a0050513          	addi	a0,a0,-1536 # 8002d338 <__func__.0+0x318>
    80018940:	47a120ef          	jal	8002adba <printf>
    80018944:	02900513          	li	a0,41
    80018948:	160110ef          	jal	80029aa8 <putchar>
    8001894c:	4529                	li	a0,10
    8001894e:	15a110ef          	jal	80029aa8 <putchar>
    80018952:	00038797          	auipc	a5,0x38
    80018956:	6bf7c783          	lbu	a5,1727(a5) # 80051011 <excpt+0x1>
    8001895a:	4401                	li	s0,0
    8001895c:	c789                	beqz	a5,80018966 <store_guest_page_fault_6+0xec>
    8001895e:	6480                	ld	s0,8(s1)
    80018960:	1425                	addi	s0,s0,-23
    80018962:	00143413          	seqz	s0,s0
        excpt.cause == CAUSE_SGPF
    );


    //执行store相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018966:	c0ce80ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sh, "sh", uint16_t);
    8001896a:	001007b7          	lui	a5,0x100
    8001896e:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018972:	7771                	lui	a4,0xffffc
    80018974:	07b2                	slli	a5,a5,0xc
    80018976:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    8001897a:	00e79023          	sh	a4,0(a5)
    addr = hs_page_base(VSRWX_GI);

    sh(addr,0xbeef);   
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    8001897e:	08200593          	li	a1,130
    80018982:	0001b617          	auipc	a2,0x1b
    80018986:	87e60613          	addi	a2,a2,-1922 # 80033200 <__func__.0+0x61e0>
    8001898a:	00015517          	auipc	a0,0x15
    8001898e:	98e50513          	addi	a0,a0,-1650 # 8002d318 <__func__.0+0x2f8>
    80018992:	428120ef          	jal	8002adba <printf>
    80018996:	00038797          	auipc	a5,0x38
    8001899a:	67b7c783          	lbu	a5,1659(a5) # 80051011 <excpt+0x1>
    8001899e:	00015597          	auipc	a1,0x15
    800189a2:	95258593          	addi	a1,a1,-1710 # 8002d2f0 <__func__.0+0x2d0>
    800189a6:	cf89                	beqz	a5,800189c0 <store_guest_page_fault_6+0x146>
    800189a8:	6498                	ld	a4,8(s1)
    800189aa:	47dd                	li	a5,23
    800189ac:	00015597          	auipc	a1,0x15
    800189b0:	93458593          	addi	a1,a1,-1740 # 8002d2e0 <__func__.0+0x2c0>
    800189b4:	00f70663          	beq	a4,a5,800189c0 <store_guest_page_fault_6+0x146>
    800189b8:	00015597          	auipc	a1,0x15
    800189bc:	93858593          	addi	a1,a1,-1736 # 8002d2f0 <__func__.0+0x2d0>
    800189c0:	00015517          	auipc	a0,0x15
    800189c4:	97050513          	addi	a0,a0,-1680 # 8002d330 <__func__.0+0x310>
    800189c8:	3f2120ef          	jal	8002adba <printf>
    800189cc:	00038797          	auipc	a5,0x38
    800189d0:	6457c783          	lbu	a5,1605(a5) # 80051011 <excpt+0x1>
    800189d4:	c789                	beqz	a5,800189de <store_guest_page_fault_6+0x164>
    800189d6:	6498                	ld	a4,8(s1)
    800189d8:	47dd                	li	a5,23
    800189da:	00f70c63          	beq	a4,a5,800189f2 <store_guest_page_fault_6+0x178>
    800189de:	00015517          	auipc	a0,0x15
    800189e2:	95a50513          	addi	a0,a0,-1702 # 8002d338 <__func__.0+0x318>
    800189e6:	3d4120ef          	jal	8002adba <printf>
    800189ea:	02900513          	li	a0,41
    800189ee:	0ba110ef          	jal	80029aa8 <putchar>
    800189f2:	4529                	li	a0,10
    800189f4:	0b4110ef          	jal	80029aa8 <putchar>
    800189f8:	c015                	beqz	s0,80018a1c <store_guest_page_fault_6+0x1a2>
    800189fa:	00038417          	auipc	s0,0x38
    800189fe:	61744403          	lbu	s0,1559(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018a02:	00015597          	auipc	a1,0x15
    80018a06:	8ee58593          	addi	a1,a1,-1810 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018a0a:	cc11                	beqz	s0,80018a26 <store_guest_page_fault_6+0x1ac>
    80018a0c:	6498                	ld	a4,8(s1)
    80018a0e:	47dd                	li	a5,23
    TEST_END();
    80018a10:	00015597          	auipc	a1,0x15
    80018a14:	8d058593          	addi	a1,a1,-1840 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018a18:	00f70763          	beq	a4,a5,80018a26 <store_guest_page_fault_6+0x1ac>
    80018a1c:	4401                	li	s0,0
    TEST_END();
    80018a1e:	00015597          	auipc	a1,0x15
    80018a22:	8d258593          	addi	a1,a1,-1838 # 8002d2f0 <__func__.0+0x2d0>
    80018a26:	00015517          	auipc	a0,0x15
    80018a2a:	97250513          	addi	a0,a0,-1678 # 8002d398 <__func__.0+0x378>
    80018a2e:	38c120ef          	jal	8002adba <printf>
    80018a32:	4511                	li	a0,4
    80018a34:	c3ae80ef          	jal	80000e6e <goto_priv>
    80018a38:	d53e80ef          	jal	8000178a <reset_state>

}
    80018a3c:	60e2                	ld	ra,24(sp)
    80018a3e:	8522                	mv	a0,s0
    80018a40:	6442                	ld	s0,16(sp)
    80018a42:	64a2                	ld	s1,8(sp)
    80018a44:	6105                	addi	sp,sp,32
    80018a46:	8082                	ret

0000000080018a48 <store_guest_page_fault_7>:

bool store_guest_page_fault_7(){
    80018a48:	1101                	addi	sp,sp,-32

    TEST_START();
    80018a4a:	00013597          	auipc	a1,0x13
    80018a4e:	67658593          	addi	a1,a1,1654 # 8002c0c0 <__func__.15>
    80018a52:	00015517          	auipc	a0,0x15
    80018a56:	8ae50513          	addi	a0,a0,-1874 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_7(){
    80018a5a:	ec06                	sd	ra,24(sp)
    80018a5c:	e822                	sd	s0,16(sp)
    80018a5e:	e426                	sd	s1,8(sp)
    TEST_START();
    80018a60:	35a120ef          	jal	8002adba <printf>
    80018a64:	4529                	li	a0,10
    80018a66:	042110ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80018a6a:	450d                	li	a0,3
    80018a6c:	c02e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018a70:	b71e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018a74:	f09e70ef          	jal	8000097c <hpt_init>
    vspt_init();
    80018a78:	cabe70ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018a7c:	4509                	li	a0,2
    80018a7e:	bf0e80ef          	jal	80000e6e <goto_priv>

    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    80018a82:	af0e80ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018a86:	000807b7          	lui	a5,0x80
    80018a8a:	1007b073          	csrc	sstatus,a5
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018a8e:	37ab77b7          	lui	a5,0x37ab7
    80018a92:	00100737          	lui	a4,0x100
    80018a96:	078a                	slli	a5,a5,0x2
    80018a98:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018a9c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018aa0:	0732                	slli	a4,a4,0xc
    80018aa2:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018aa6:	08200593          	li	a1,130
    80018aaa:	0001a617          	auipc	a2,0x1a
    80018aae:	7ae60613          	addi	a2,a2,1966 # 80033258 <__func__.0+0x6238>
    80018ab2:	00015517          	auipc	a0,0x15
    80018ab6:	86650513          	addi	a0,a0,-1946 # 8002d318 <__func__.0+0x2f8>
    80018aba:	300120ef          	jal	8002adba <printf>
    80018abe:	00038797          	auipc	a5,0x38
    80018ac2:	5537c783          	lbu	a5,1363(a5) # 80051011 <excpt+0x1>
    80018ac6:	00038497          	auipc	s1,0x38
    80018aca:	54a48493          	addi	s1,s1,1354 # 80051010 <excpt>
    80018ace:	00015597          	auipc	a1,0x15
    80018ad2:	82258593          	addi	a1,a1,-2014 # 8002d2f0 <__func__.0+0x2d0>
    80018ad6:	cf89                	beqz	a5,80018af0 <store_guest_page_fault_7+0xa8>
    80018ad8:	6498                	ld	a4,8(s1)
    80018ada:	47dd                	li	a5,23
    80018adc:	00015597          	auipc	a1,0x15
    80018ae0:	80458593          	addi	a1,a1,-2044 # 8002d2e0 <__func__.0+0x2c0>
    80018ae4:	00f70663          	beq	a4,a5,80018af0 <store_guest_page_fault_7+0xa8>
    80018ae8:	00015597          	auipc	a1,0x15
    80018aec:	80858593          	addi	a1,a1,-2040 # 8002d2f0 <__func__.0+0x2d0>
    80018af0:	00015517          	auipc	a0,0x15
    80018af4:	84050513          	addi	a0,a0,-1984 # 8002d330 <__func__.0+0x310>
    80018af8:	2c2120ef          	jal	8002adba <printf>
    80018afc:	00038797          	auipc	a5,0x38
    80018b00:	5157c783          	lbu	a5,1301(a5) # 80051011 <excpt+0x1>
    80018b04:	c789                	beqz	a5,80018b0e <store_guest_page_fault_7+0xc6>
    80018b06:	6498                	ld	a4,8(s1)
    80018b08:	47dd                	li	a5,23
    80018b0a:	00f70c63          	beq	a4,a5,80018b22 <store_guest_page_fault_7+0xda>
    80018b0e:	00015517          	auipc	a0,0x15
    80018b12:	82a50513          	addi	a0,a0,-2006 # 8002d338 <__func__.0+0x318>
    80018b16:	2a4120ef          	jal	8002adba <printf>
    80018b1a:	02900513          	li	a0,41
    80018b1e:	78b100ef          	jal	80029aa8 <putchar>
    80018b22:	4529                	li	a0,10
    80018b24:	785100ef          	jal	80029aa8 <putchar>
    80018b28:	00038417          	auipc	s0,0x38
    80018b2c:	4e944403          	lbu	s0,1257(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    80018b30:	00014597          	auipc	a1,0x14
    80018b34:	7c058593          	addi	a1,a1,1984 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018b38:	cc11                	beqz	s0,80018b54 <store_guest_page_fault_7+0x10c>
    80018b3a:	6498                	ld	a4,8(s1)
    80018b3c:	47dd                	li	a5,23
    TEST_END();
    80018b3e:	00014597          	auipc	a1,0x14
    80018b42:	7a258593          	addi	a1,a1,1954 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode sd when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80018b46:	00f70763          	beq	a4,a5,80018b54 <store_guest_page_fault_7+0x10c>
    80018b4a:	4401                	li	s0,0
    TEST_END();
    80018b4c:	00014597          	auipc	a1,0x14
    80018b50:	7a458593          	addi	a1,a1,1956 # 8002d2f0 <__func__.0+0x2d0>
    80018b54:	00015517          	auipc	a0,0x15
    80018b58:	84450513          	addi	a0,a0,-1980 # 8002d398 <__func__.0+0x378>
    80018b5c:	25e120ef          	jal	8002adba <printf>
    80018b60:	4511                	li	a0,4
    80018b62:	b0ce80ef          	jal	80000e6e <goto_priv>
    80018b66:	c25e80ef          	jal	8000178a <reset_state>
}
    80018b6a:	60e2                	ld	ra,24(sp)
    80018b6c:	8522                	mv	a0,s0
    80018b6e:	6442                	ld	s0,16(sp)
    80018b70:	64a2                	ld	s1,8(sp)
    80018b72:	6105                	addi	sp,sp,32
    80018b74:	8082                	ret

0000000080018b76 <store_guest_page_fault_8>:

bool store_guest_page_fault_8(){
    80018b76:	1101                	addi	sp,sp,-32

    TEST_START();
    80018b78:	00013597          	auipc	a1,0x13
    80018b7c:	56858593          	addi	a1,a1,1384 # 8002c0e0 <__func__.14>
    80018b80:	00014517          	auipc	a0,0x14
    80018b84:	78050513          	addi	a0,a0,1920 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_8(){
    80018b88:	ec06                	sd	ra,24(sp)
    80018b8a:	e822                	sd	s0,16(sp)
    80018b8c:	e426                	sd	s1,8(sp)
    TEST_START();
    80018b8e:	22c120ef          	jal	8002adba <printf>
    80018b92:	4529                	li	a0,10
    80018b94:	715100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80018b98:	450d                	li	a0,3
    80018b9a:	ad4e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018b9e:	a43e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018ba2:	ddbe70ef          	jal	8000097c <hpt_init>
    vspt_init();
    80018ba6:	b7de70ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018baa:	4509                	li	a0,2
    80018bac:	ac2e80ef          	jal	80000e6e <goto_priv>


    //执行store相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80018bb0:	9c2e80ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80018bb4:	000807b7          	lui	a5,0x80
    80018bb8:	1007a073          	csrs	sstatus,a5
STORE_INSTRUCTION(sh, "sh", uint16_t);
    80018bbc:	001007b7          	lui	a5,0x100
    80018bc0:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018bc4:	7771                	lui	a4,0xffffc
    80018bc6:	07b2                	slli	a5,a5,0xc
    80018bc8:	eef7071b          	addiw	a4,a4,-273 # ffffffffffffbeef <__stack_top+0xffffffff7fcfceef>
    80018bcc:	00e79023          	sh	a4,0(a5)
    sh(vaddr,0xbeef);
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018bd0:	08200593          	li	a1,130
    80018bd4:	0001a617          	auipc	a2,0x1a
    80018bd8:	6e460613          	addi	a2,a2,1764 # 800332b8 <__func__.0+0x6298>
    80018bdc:	00014517          	auipc	a0,0x14
    80018be0:	73c50513          	addi	a0,a0,1852 # 8002d318 <__func__.0+0x2f8>
    80018be4:	1d6120ef          	jal	8002adba <printf>
    80018be8:	00038797          	auipc	a5,0x38
    80018bec:	4297c783          	lbu	a5,1065(a5) # 80051011 <excpt+0x1>
    80018bf0:	00038497          	auipc	s1,0x38
    80018bf4:	42048493          	addi	s1,s1,1056 # 80051010 <excpt>
    80018bf8:	00014597          	auipc	a1,0x14
    80018bfc:	6f858593          	addi	a1,a1,1784 # 8002d2f0 <__func__.0+0x2d0>
    80018c00:	cf89                	beqz	a5,80018c1a <store_guest_page_fault_8+0xa4>
    80018c02:	6498                	ld	a4,8(s1)
    80018c04:	47dd                	li	a5,23
    80018c06:	00014597          	auipc	a1,0x14
    80018c0a:	6da58593          	addi	a1,a1,1754 # 8002d2e0 <__func__.0+0x2c0>
    80018c0e:	00f70663          	beq	a4,a5,80018c1a <store_guest_page_fault_8+0xa4>
    80018c12:	00014597          	auipc	a1,0x14
    80018c16:	6de58593          	addi	a1,a1,1758 # 8002d2f0 <__func__.0+0x2d0>
    80018c1a:	00014517          	auipc	a0,0x14
    80018c1e:	71650513          	addi	a0,a0,1814 # 8002d330 <__func__.0+0x310>
    80018c22:	198120ef          	jal	8002adba <printf>
    80018c26:	00038797          	auipc	a5,0x38
    80018c2a:	3eb7c783          	lbu	a5,1003(a5) # 80051011 <excpt+0x1>
    80018c2e:	c789                	beqz	a5,80018c38 <store_guest_page_fault_8+0xc2>
    80018c30:	6498                	ld	a4,8(s1)
    80018c32:	47dd                	li	a5,23
    80018c34:	00f70c63          	beq	a4,a5,80018c4c <store_guest_page_fault_8+0xd6>
    80018c38:	00014517          	auipc	a0,0x14
    80018c3c:	70050513          	addi	a0,a0,1792 # 8002d338 <__func__.0+0x318>
    80018c40:	17a120ef          	jal	8002adba <printf>
    80018c44:	02900513          	li	a0,41
    80018c48:	661100ef          	jal	80029aa8 <putchar>
    80018c4c:	4529                	li	a0,10
    80018c4e:	65b100ef          	jal	80029aa8 <putchar>
    80018c52:	00038417          	auipc	s0,0x38
    80018c56:	3bf44403          	lbu	s0,959(s0) # 80051011 <excpt+0x1>
    80018c5a:	c409                	beqz	s0,80018c64 <store_guest_page_fault_8+0xee>
    80018c5c:	6498                	ld	a4,8(s1)
    80018c5e:	47dd                	li	a5,23
    80018c60:	02f70c63          	beq	a4,a5,80018c98 <store_guest_page_fault_8+0x122>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018c64:	000807b7          	lui	a5,0x80
    80018c68:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("vs mode sh when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80018c6c:	4401                	li	s0,0

    TEST_END();
    80018c6e:	00014597          	auipc	a1,0x14
    80018c72:	68258593          	addi	a1,a1,1666 # 8002d2f0 <__func__.0+0x2d0>
    80018c76:	00014517          	auipc	a0,0x14
    80018c7a:	72250513          	addi	a0,a0,1826 # 8002d398 <__func__.0+0x378>
    80018c7e:	13c120ef          	jal	8002adba <printf>
    80018c82:	4511                	li	a0,4
    80018c84:	9eae80ef          	jal	80000e6e <goto_priv>
    80018c88:	b03e80ef          	jal	8000178a <reset_state>
}
    80018c8c:	60e2                	ld	ra,24(sp)
    80018c8e:	8522                	mv	a0,s0
    80018c90:	6442                	ld	s0,16(sp)
    80018c92:	64a2                	ld	s1,8(sp)
    80018c94:	6105                	addi	sp,sp,32
    80018c96:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    80018c98:	000807b7          	lui	a5,0x80
    80018c9c:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80018ca0:	00014597          	auipc	a1,0x14
    80018ca4:	64058593          	addi	a1,a1,1600 # 8002d2e0 <__func__.0+0x2c0>
    80018ca8:	b7f9                	j	80018c76 <store_guest_page_fault_8+0x100>

0000000080018caa <store_guest_page_fault_9>:

bool store_guest_page_fault_9(){
    80018caa:	1101                	addi	sp,sp,-32

    TEST_START();
    80018cac:	00013597          	auipc	a1,0x13
    80018cb0:	45458593          	addi	a1,a1,1108 # 8002c100 <__func__.13>
    80018cb4:	00014517          	auipc	a0,0x14
    80018cb8:	64c50513          	addi	a0,a0,1612 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_9(){
    80018cbc:	ec06                	sd	ra,24(sp)
    80018cbe:	e822                	sd	s0,16(sp)
    80018cc0:	e426                	sd	s1,8(sp)
    TEST_START();
    80018cc2:	0f8120ef          	jal	8002adba <printf>
    80018cc6:	4529                	li	a0,10
    80018cc8:	5e1100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80018ccc:	450d                	li	a0,3
    80018cce:	9a0e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018cd2:	90fe70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018cd6:	ca7e70ef          	jal	8000097c <hpt_init>
    vspt_init();
    80018cda:	a49e70ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_M);
    80018cde:	4511                	li	a0,4
    80018ce0:	98ee80ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_VSSTATUS, SSTATUS_SUM);
    80018ce4:	000407b7          	lui	a5,0x40
    80018ce8:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80018cec:	4509                	li	a0,2
    80018cee:	980e80ef          	jal	80000e6e <goto_priv>

    //执行hsvd指令需要二级地址翻页时，设置了vsstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80018cf2:	880e80ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80018cf6:	37ab77b7          	lui	a5,0x37ab7
    80018cfa:	00080737          	lui	a4,0x80
    80018cfe:	078a                	slli	a5,a5,0x2
    80018d00:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80018d02:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018d06:	0736                	slli	a4,a4,0xd
    80018d08:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GUX);


    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018d0c:	08200593          	li	a1,130
    80018d10:	0001a617          	auipc	a2,0x1a
    80018d14:	61860613          	addi	a2,a2,1560 # 80033328 <__func__.0+0x6308>
    80018d18:	00014517          	auipc	a0,0x14
    80018d1c:	60050513          	addi	a0,a0,1536 # 8002d318 <__func__.0+0x2f8>
    80018d20:	09a120ef          	jal	8002adba <printf>
    80018d24:	00038797          	auipc	a5,0x38
    80018d28:	2ed7c783          	lbu	a5,749(a5) # 80051011 <excpt+0x1>
    80018d2c:	00038497          	auipc	s1,0x38
    80018d30:	2e448493          	addi	s1,s1,740 # 80051010 <excpt>
    80018d34:	00014597          	auipc	a1,0x14
    80018d38:	5bc58593          	addi	a1,a1,1468 # 8002d2f0 <__func__.0+0x2d0>
    80018d3c:	cf89                	beqz	a5,80018d56 <store_guest_page_fault_9+0xac>
    80018d3e:	6498                	ld	a4,8(s1)
    80018d40:	47bd                	li	a5,15
    80018d42:	00014597          	auipc	a1,0x14
    80018d46:	59e58593          	addi	a1,a1,1438 # 8002d2e0 <__func__.0+0x2c0>
    80018d4a:	00f70663          	beq	a4,a5,80018d56 <store_guest_page_fault_9+0xac>
    80018d4e:	00014597          	auipc	a1,0x14
    80018d52:	5a258593          	addi	a1,a1,1442 # 8002d2f0 <__func__.0+0x2d0>
    80018d56:	00014517          	auipc	a0,0x14
    80018d5a:	5da50513          	addi	a0,a0,1498 # 8002d330 <__func__.0+0x310>
    80018d5e:	05c120ef          	jal	8002adba <printf>
    80018d62:	00038797          	auipc	a5,0x38
    80018d66:	2af7c783          	lbu	a5,687(a5) # 80051011 <excpt+0x1>
    80018d6a:	c789                	beqz	a5,80018d74 <store_guest_page_fault_9+0xca>
    80018d6c:	6498                	ld	a4,8(s1)
    80018d6e:	47bd                	li	a5,15
    80018d70:	00f70c63          	beq	a4,a5,80018d88 <store_guest_page_fault_9+0xde>
    80018d74:	00014517          	auipc	a0,0x14
    80018d78:	5c450513          	addi	a0,a0,1476 # 8002d338 <__func__.0+0x318>
    80018d7c:	03e120ef          	jal	8002adba <printf>
    80018d80:	02900513          	li	a0,41
    80018d84:	525100ef          	jal	80029aa8 <putchar>
    80018d88:	4529                	li	a0,10
    80018d8a:	51f100ef          	jal	80029aa8 <putchar>
    80018d8e:	00038417          	auipc	s0,0x38
    80018d92:	28344403          	lbu	s0,643(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    80018d96:	00014597          	auipc	a1,0x14
    80018d9a:	55a58593          	addi	a1,a1,1370 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018d9e:	cc11                	beqz	s0,80018dba <store_guest_page_fault_9+0x110>
    80018da0:	6498                	ld	a4,8(s1)
    80018da2:	47bd                	li	a5,15
    TEST_END();
    80018da4:	00014597          	auipc	a1,0x14
    80018da8:	53c58593          	addi	a1,a1,1340 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sd u mode page when vsstatus.sum=0 leads to SPF",
    80018dac:	00f70763          	beq	a4,a5,80018dba <store_guest_page_fault_9+0x110>
    80018db0:	4401                	li	s0,0
    TEST_END();
    80018db2:	00014597          	auipc	a1,0x14
    80018db6:	53e58593          	addi	a1,a1,1342 # 8002d2f0 <__func__.0+0x2d0>
    80018dba:	00014517          	auipc	a0,0x14
    80018dbe:	5de50513          	addi	a0,a0,1502 # 8002d398 <__func__.0+0x378>
    80018dc2:	7f9110ef          	jal	8002adba <printf>
    80018dc6:	4511                	li	a0,4
    80018dc8:	8a6e80ef          	jal	80000e6e <goto_priv>
    80018dcc:	9bfe80ef          	jal	8000178a <reset_state>
}
    80018dd0:	60e2                	ld	ra,24(sp)
    80018dd2:	8522                	mv	a0,s0
    80018dd4:	6442                	ld	s0,16(sp)
    80018dd6:	64a2                	ld	s1,8(sp)
    80018dd8:	6105                	addi	sp,sp,32
    80018dda:	8082                	ret

0000000080018ddc <store_guest_page_fault_10>:

bool store_guest_page_fault_10(){
    80018ddc:	1141                	addi	sp,sp,-16

    TEST_START();
    80018dde:	00013597          	auipc	a1,0x13
    80018de2:	34258593          	addi	a1,a1,834 # 8002c120 <__func__.12>
    80018de6:	00014517          	auipc	a0,0x14
    80018dea:	51a50513          	addi	a0,a0,1306 # 8002d300 <__func__.0+0x2e0>
bool store_guest_page_fault_10(){
    80018dee:	e406                	sd	ra,8(sp)
    80018df0:	e022                	sd	s0,0(sp)
    TEST_START();
    80018df2:	7c9110ef          	jal	8002adba <printf>
    80018df6:	4529                	li	a0,10
    80018df8:	4b1100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80018dfc:	450d                	li	a0,3
    80018dfe:	870e80ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018e02:	fdee70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018e06:	b77e70ef          	jal	8000097c <hpt_init>
    vspt_init();
    80018e0a:	919e70ef          	jal	80000722 <vspt_init>

    goto_priv(PRIV_M);
    80018e0e:	4511                	li	a0,4
    80018e10:	85ee80ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    80018e14:	000407b7          	lui	a5,0x40
    80018e18:	2007a073          	csrs	vsstatus,a5

    uintptr_t vaddr;
    uintptr_t addr;

    goto_priv(PRIV_VS);
    80018e1c:	4509                	li	a0,2
    80018e1e:	850e80ef          	jal	80000e6e <goto_priv>

    //执行hsvd指令时，设置了vsstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80018e22:	f51e70ef          	jal	80000d72 <test_setup_except_function>
    80018e26:	37ab77b7          	lui	a5,0x37ab7
    80018e2a:	00080737          	lui	a4,0x80
    80018e2e:	078a                	slli	a5,a5,0x2
    80018e30:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80018e32:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80018e36:	0736                	slli	a4,a4,0xd
    80018e38:	00f73023          	sd	a5,0(a4)
    sd(vaddr,0xdeadbeef);
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018e3c:	08200593          	li	a1,130
    80018e40:	0001a617          	auipc	a2,0x1a
    80018e44:	a7860613          	addi	a2,a2,-1416 # 800328b8 <__func__.0+0x5898>
    80018e48:	00014517          	auipc	a0,0x14
    80018e4c:	4d050513          	addi	a0,a0,1232 # 8002d318 <__func__.0+0x2f8>
    80018e50:	76b110ef          	jal	8002adba <printf>
    80018e54:	00038797          	auipc	a5,0x38
    80018e58:	1bd7c783          	lbu	a5,445(a5) # 80051011 <excpt+0x1>
    80018e5c:	00014597          	auipc	a1,0x14
    80018e60:	48458593          	addi	a1,a1,1156 # 8002d2e0 <__func__.0+0x2c0>
    80018e64:	c789                	beqz	a5,80018e6e <store_guest_page_fault_10+0x92>
    80018e66:	00014597          	auipc	a1,0x14
    80018e6a:	48a58593          	addi	a1,a1,1162 # 8002d2f0 <__func__.0+0x2d0>
    80018e6e:	00014517          	auipc	a0,0x14
    80018e72:	4c250513          	addi	a0,a0,1218 # 8002d330 <__func__.0+0x310>
    80018e76:	745110ef          	jal	8002adba <printf>
    80018e7a:	00038797          	auipc	a5,0x38
    80018e7e:	1977c783          	lbu	a5,407(a5) # 80051011 <excpt+0x1>
    80018e82:	e7a1                	bnez	a5,80018eca <store_guest_page_fault_10+0xee>
    80018e84:	4529                	li	a0,10
    80018e86:	423100ef          	jal	80029aa8 <putchar>
    80018e8a:	00038797          	auipc	a5,0x38
    80018e8e:	1877c783          	lbu	a5,391(a5) # 80051011 <excpt+0x1>
    80018e92:	e795                	bnez	a5,80018ebe <store_guest_page_fault_10+0xe2>
    80018e94:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    80018e96:	00014597          	auipc	a1,0x14
    80018e9a:	44a58593          	addi	a1,a1,1098 # 8002d2e0 <__func__.0+0x2c0>
    80018e9e:	00014517          	auipc	a0,0x14
    80018ea2:	4fa50513          	addi	a0,a0,1274 # 8002d398 <__func__.0+0x378>
    80018ea6:	715110ef          	jal	8002adba <printf>
    80018eaa:	4511                	li	a0,4
    80018eac:	fc3e70ef          	jal	80000e6e <goto_priv>
    80018eb0:	8dbe80ef          	jal	8000178a <reset_state>
}
    80018eb4:	60a2                	ld	ra,8(sp)
    80018eb6:	8522                	mv	a0,s0
    80018eb8:	6402                	ld	s0,0(sp)
    80018eba:	0141                	addi	sp,sp,16
    80018ebc:	8082                	ret
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018ebe:	4401                	li	s0,0
    TEST_END();
    80018ec0:	00014597          	auipc	a1,0x14
    80018ec4:	43058593          	addi	a1,a1,1072 # 8002d2f0 <__func__.0+0x2d0>
    80018ec8:	bfd9                	j	80018e9e <store_guest_page_fault_10+0xc2>
    TEST_ASSERT("vs mode sd u mode page when vsstatus.sum=1 successful",
    80018eca:	00014517          	auipc	a0,0x14
    80018ece:	46e50513          	addi	a0,a0,1134 # 8002d338 <__func__.0+0x318>
    80018ed2:	6e9110ef          	jal	8002adba <printf>
    80018ed6:	02900513          	li	a0,41
    80018eda:	3cf100ef          	jal	80029aa8 <putchar>
    80018ede:	b75d                	j	80018e84 <store_guest_page_fault_10+0xa8>

0000000080018ee0 <amo_guest_page_fault_1>:

bool amo_guest_page_fault_1(){
    80018ee0:	1101                	addi	sp,sp,-32

    TEST_START();
    80018ee2:	00013597          	auipc	a1,0x13
    80018ee6:	25e58593          	addi	a1,a1,606 # 8002c140 <__func__.11>
    80018eea:	00014517          	auipc	a0,0x14
    80018eee:	41650513          	addi	a0,a0,1046 # 8002d300 <__func__.0+0x2e0>
bool amo_guest_page_fault_1(){
    80018ef2:	ec06                	sd	ra,24(sp)
    80018ef4:	e822                	sd	s0,16(sp)
    80018ef6:	e426                	sd	s1,8(sp)
    80018ef8:	e04a                	sd	s2,0(sp)
    TEST_START();
    80018efa:	6c1110ef          	jal	8002adba <printf>
    80018efe:	4529                	li	a0,10
    80018f00:	3a9100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80018f04:	450d                	li	a0,3
    80018f06:	f69e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80018f0a:	ed6e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80018f0e:	a6fe70ef          	jal	8000097c <hpt_init>
    vspt_init();
    80018f12:	811e70ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0x1;  
    goto_priv(PRIV_VS);
    80018f16:	4509                	li	a0,2
    80018f18:	f57e70ef          	jal	80000e6e <goto_priv>


    //执行原子指令二级地址翻译阶段时,第二阶段地址翻译pte.v=0
    TEST_SETUP_EXCEPT();
    80018f1c:	e57e70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_w, "amoadd.w", uint32_t);
    80018f20:	00100737          	lui	a4,0x100
    80018f24:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    80018f28:	4785                	li	a5,1
    80018f2a:	0732                	slli	a4,a4,0xc
    80018f2c:	00f727af          	amoadd.w	a5,a5,(a4)


    addr = hs_page_base(VSRWX_GI);
    value = amoadd_w(addr,value);
    
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018f30:	08200593          	li	a1,130
    80018f34:	0001a617          	auipc	a2,0x1a
    80018f38:	42c60613          	addi	a2,a2,1068 # 80033360 <__func__.0+0x6340>
    80018f3c:	00014517          	auipc	a0,0x14
    80018f40:	3dc50513          	addi	a0,a0,988 # 8002d318 <__func__.0+0x2f8>
    value = amoadd_w(addr,value);
    80018f44:	02079413          	slli	s0,a5,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018f48:	673110ef          	jal	8002adba <printf>
    80018f4c:	00038797          	auipc	a5,0x38
    80018f50:	0c57c783          	lbu	a5,197(a5) # 80051011 <excpt+0x1>
    value = amoadd_w(addr,value);
    80018f54:	9001                	srli	s0,s0,0x20
    TEST_ASSERT("s mode amoadd_w when the second-stage address translation pte.v=0 leads to SGPF",
    80018f56:	00038917          	auipc	s2,0x38
    80018f5a:	0ba90913          	addi	s2,s2,186 # 80051010 <excpt>
    80018f5e:	00014597          	auipc	a1,0x14
    80018f62:	39258593          	addi	a1,a1,914 # 8002d2f0 <__func__.0+0x2d0>
    80018f66:	cf91                	beqz	a5,80018f82 <amo_guest_page_fault_1+0xa2>
    80018f68:	00893703          	ld	a4,8(s2)
    80018f6c:	47dd                	li	a5,23
    80018f6e:	00014597          	auipc	a1,0x14
    80018f72:	37258593          	addi	a1,a1,882 # 8002d2e0 <__func__.0+0x2c0>
    80018f76:	00f70663          	beq	a4,a5,80018f82 <amo_guest_page_fault_1+0xa2>
    80018f7a:	00014597          	auipc	a1,0x14
    80018f7e:	37658593          	addi	a1,a1,886 # 8002d2f0 <__func__.0+0x2d0>
    80018f82:	00014517          	auipc	a0,0x14
    80018f86:	3ae50513          	addi	a0,a0,942 # 8002d330 <__func__.0+0x310>
    80018f8a:	631110ef          	jal	8002adba <printf>
    80018f8e:	00038797          	auipc	a5,0x38
    80018f92:	0837c783          	lbu	a5,131(a5) # 80051011 <excpt+0x1>
    80018f96:	c791                	beqz	a5,80018fa2 <amo_guest_page_fault_1+0xc2>
    80018f98:	00893703          	ld	a4,8(s2)
    80018f9c:	47dd                	li	a5,23
    80018f9e:	00f70c63          	beq	a4,a5,80018fb6 <amo_guest_page_fault_1+0xd6>
    80018fa2:	00014517          	auipc	a0,0x14
    80018fa6:	39650513          	addi	a0,a0,918 # 8002d338 <__func__.0+0x318>
    80018faa:	611110ef          	jal	8002adba <printf>
    80018fae:	02900513          	li	a0,41
    80018fb2:	2f7100ef          	jal	80029aa8 <putchar>
    80018fb6:	4529                	li	a0,10
    80018fb8:	2f1100ef          	jal	80029aa8 <putchar>
    80018fbc:	00038797          	auipc	a5,0x38
    80018fc0:	0557c783          	lbu	a5,85(a5) # 80051011 <excpt+0x1>
    80018fc4:	4481                	li	s1,0
    80018fc6:	c791                	beqz	a5,80018fd2 <amo_guest_page_fault_1+0xf2>
    80018fc8:	00893483          	ld	s1,8(s2)
    80018fcc:	14a5                	addi	s1,s1,-23
    80018fce:	0014b493          	seqz	s1,s1
        excpt.cause == CAUSE_SGPF
    );


    //执行原子相关指令需要二级地址翻页时，第二阶段地址翻译pte.r=0&&pte.w=1
    TEST_SETUP_EXCEPT();
    80018fd2:	da1e70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomax_d, "amomax.d", uint64_t);
    80018fd6:	001007b7          	lui	a5,0x100
    80018fda:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    80018fde:	8722                	mv	a4,s0
    80018fe0:	07b2                	slli	a5,a5,0xc
    80018fe2:	a0e7b72f          	amomax.d	a4,a4,(a5)
    vaddr = hs_page_base(VSRWX_GI);
    value = amomax_d(vaddr,value);

    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80018fe6:	08200593          	li	a1,130
    80018fea:	0001a617          	auipc	a2,0x1a
    80018fee:	3c660613          	addi	a2,a2,966 # 800333b0 <__func__.0+0x6390>
    80018ff2:	00014517          	auipc	a0,0x14
    80018ff6:	32650513          	addi	a0,a0,806 # 8002d318 <__func__.0+0x2f8>
    80018ffa:	5c1110ef          	jal	8002adba <printf>
    80018ffe:	00038797          	auipc	a5,0x38
    80019002:	0137c783          	lbu	a5,19(a5) # 80051011 <excpt+0x1>
    80019006:	00014597          	auipc	a1,0x14
    8001900a:	2ea58593          	addi	a1,a1,746 # 8002d2f0 <__func__.0+0x2d0>
    8001900e:	cf91                	beqz	a5,8001902a <amo_guest_page_fault_1+0x14a>
    80019010:	00893703          	ld	a4,8(s2)
    80019014:	47dd                	li	a5,23
    80019016:	00014597          	auipc	a1,0x14
    8001901a:	2ca58593          	addi	a1,a1,714 # 8002d2e0 <__func__.0+0x2c0>
    8001901e:	00f70663          	beq	a4,a5,8001902a <amo_guest_page_fault_1+0x14a>
    80019022:	00014597          	auipc	a1,0x14
    80019026:	2ce58593          	addi	a1,a1,718 # 8002d2f0 <__func__.0+0x2d0>
    8001902a:	00014517          	auipc	a0,0x14
    8001902e:	30650513          	addi	a0,a0,774 # 8002d330 <__func__.0+0x310>
    80019032:	589110ef          	jal	8002adba <printf>
    80019036:	00038797          	auipc	a5,0x38
    8001903a:	fdb7c783          	lbu	a5,-37(a5) # 80051011 <excpt+0x1>
    8001903e:	c791                	beqz	a5,8001904a <amo_guest_page_fault_1+0x16a>
    80019040:	00893703          	ld	a4,8(s2)
    80019044:	47dd                	li	a5,23
    80019046:	00f70c63          	beq	a4,a5,8001905e <amo_guest_page_fault_1+0x17e>
    8001904a:	00014517          	auipc	a0,0x14
    8001904e:	2ee50513          	addi	a0,a0,750 # 8002d338 <__func__.0+0x318>
    80019052:	569110ef          	jal	8002adba <printf>
    80019056:	02900513          	li	a0,41
    8001905a:	24f100ef          	jal	80029aa8 <putchar>
    8001905e:	4529                	li	a0,10
    80019060:	249100ef          	jal	80029aa8 <putchar>
    80019064:	c09d                	beqz	s1,8001908a <amo_guest_page_fault_1+0x1aa>
    80019066:	00038417          	auipc	s0,0x38
    8001906a:	fab44403          	lbu	s0,-85(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    8001906e:	00014597          	auipc	a1,0x14
    80019072:	28258593          	addi	a1,a1,642 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019076:	cc19                	beqz	s0,80019094 <amo_guest_page_fault_1+0x1b4>
    80019078:	00893703          	ld	a4,8(s2)
    8001907c:	47dd                	li	a5,23
    TEST_END();
    8001907e:	00014597          	auipc	a1,0x14
    80019082:	26258593          	addi	a1,a1,610 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomax_d when the second-stage address translation pte.v=0 and pte.r=0 leads to SGPF",
    80019086:	00f70763          	beq	a4,a5,80019094 <amo_guest_page_fault_1+0x1b4>
    8001908a:	4401                	li	s0,0
    TEST_END();
    8001908c:	00014597          	auipc	a1,0x14
    80019090:	26458593          	addi	a1,a1,612 # 8002d2f0 <__func__.0+0x2d0>
    80019094:	00014517          	auipc	a0,0x14
    80019098:	30450513          	addi	a0,a0,772 # 8002d398 <__func__.0+0x378>
    8001909c:	51f110ef          	jal	8002adba <printf>
    800190a0:	4511                	li	a0,4
    800190a2:	dcde70ef          	jal	80000e6e <goto_priv>
    800190a6:	ee4e80ef          	jal	8000178a <reset_state>
}
    800190aa:	60e2                	ld	ra,24(sp)
    800190ac:	8522                	mv	a0,s0
    800190ae:	6442                	ld	s0,16(sp)
    800190b0:	64a2                	ld	s1,8(sp)
    800190b2:	6902                	ld	s2,0(sp)
    800190b4:	6105                	addi	sp,sp,32
    800190b6:	8082                	ret

00000000800190b8 <amo_guest_page_fault_2>:

bool amo_guest_page_fault_2(){
    800190b8:	1101                	addi	sp,sp,-32

    TEST_START();
    800190ba:	00013597          	auipc	a1,0x13
    800190be:	09e58593          	addi	a1,a1,158 # 8002c158 <__func__.10>
    800190c2:	00014517          	auipc	a0,0x14
    800190c6:	23e50513          	addi	a0,a0,574 # 8002d300 <__func__.0+0x2e0>
bool amo_guest_page_fault_2(){
    800190ca:	ec06                	sd	ra,24(sp)
    800190cc:	e822                	sd	s0,16(sp)
    800190ce:	e426                	sd	s1,8(sp)
    TEST_START();
    800190d0:	4eb110ef          	jal	8002adba <printf>
    800190d4:	4529                	li	a0,10
    800190d6:	1d3100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800190da:	450d                	li	a0,3
    800190dc:	d93e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800190e0:	d00e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800190e4:	899e70ef          	jal	8000097c <hpt_init>
    vspt_init();
    800190e8:	e3ae70ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    800190ec:	4509                	li	a0,2
    800190ee:	d81e70ef          	jal	80000e6e <goto_priv>
    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=0，只能从只读页面读取，如果此时第二阶段地址翻译pte.r=0
    TEST_SETUP_EXCEPT();
    800190f2:	c81e70ef          	jal	80000d72 <test_setup_except_function>
    addr = hs_page_base(VSRWX_GI);

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800190f6:	000807b7          	lui	a5,0x80
    800190fa:	1007b073          	csrc	sstatus,a5
AMO_INSTRUCTION(amoswap_d, "amoswap.d", uint64_t);
    800190fe:	37ab77b7          	lui	a5,0x37ab7
    80019102:	00100737          	lui	a4,0x100
    80019106:	078a                	slli	a5,a5,0x2
    80019108:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001910c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80019110:	0732                	slli	a4,a4,0xc
    80019112:	08f737af          	amoswap.d	a5,a5,(a4)
    value = amoswap_d(addr,value);
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    80019116:	08200593          	li	a1,130
    8001911a:	0001a617          	auipc	a2,0x1a
    8001911e:	2f660613          	addi	a2,a2,758 # 80033410 <__func__.0+0x63f0>
    80019122:	00014517          	auipc	a0,0x14
    80019126:	1f650513          	addi	a0,a0,502 # 8002d318 <__func__.0+0x2f8>
    8001912a:	491110ef          	jal	8002adba <printf>
    8001912e:	00038797          	auipc	a5,0x38
    80019132:	ee37c783          	lbu	a5,-285(a5) # 80051011 <excpt+0x1>
    80019136:	00038497          	auipc	s1,0x38
    8001913a:	eda48493          	addi	s1,s1,-294 # 80051010 <excpt>
    8001913e:	00014597          	auipc	a1,0x14
    80019142:	1b258593          	addi	a1,a1,434 # 8002d2f0 <__func__.0+0x2d0>
    80019146:	cf89                	beqz	a5,80019160 <amo_guest_page_fault_2+0xa8>
    80019148:	6498                	ld	a4,8(s1)
    8001914a:	47dd                	li	a5,23
    8001914c:	00014597          	auipc	a1,0x14
    80019150:	19458593          	addi	a1,a1,404 # 8002d2e0 <__func__.0+0x2c0>
    80019154:	00f70663          	beq	a4,a5,80019160 <amo_guest_page_fault_2+0xa8>
    80019158:	00014597          	auipc	a1,0x14
    8001915c:	19858593          	addi	a1,a1,408 # 8002d2f0 <__func__.0+0x2d0>
    80019160:	00014517          	auipc	a0,0x14
    80019164:	1d050513          	addi	a0,a0,464 # 8002d330 <__func__.0+0x310>
    80019168:	453110ef          	jal	8002adba <printf>
    8001916c:	00038797          	auipc	a5,0x38
    80019170:	ea57c783          	lbu	a5,-347(a5) # 80051011 <excpt+0x1>
    80019174:	c789                	beqz	a5,8001917e <amo_guest_page_fault_2+0xc6>
    80019176:	6498                	ld	a4,8(s1)
    80019178:	47dd                	li	a5,23
    8001917a:	00f70c63          	beq	a4,a5,80019192 <amo_guest_page_fault_2+0xda>
    8001917e:	00014517          	auipc	a0,0x14
    80019182:	1ba50513          	addi	a0,a0,442 # 8002d338 <__func__.0+0x318>
    80019186:	435110ef          	jal	8002adba <printf>
    8001918a:	02900513          	li	a0,41
    8001918e:	11b100ef          	jal	80029aa8 <putchar>
    80019192:	4529                	li	a0,10
    80019194:	115100ef          	jal	80029aa8 <putchar>
    80019198:	00038417          	auipc	s0,0x38
    8001919c:	e7944403          	lbu	s0,-391(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    TEST_END();
    800191a0:	00014597          	auipc	a1,0x14
    800191a4:	15058593          	addi	a1,a1,336 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800191a8:	cc11                	beqz	s0,800191c4 <amo_guest_page_fault_2+0x10c>
    800191aa:	6498                	ld	a4,8(s1)
    800191ac:	47dd                	li	a5,23
    TEST_END();
    800191ae:	00014597          	auipc	a1,0x14
    800191b2:	13258593          	addi	a1,a1,306 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amoswap_d when the second-stage address translation pte.r=0 and sstatus.mxr=0 leads to SGPF",
    800191b6:	00f70763          	beq	a4,a5,800191c4 <amo_guest_page_fault_2+0x10c>
    800191ba:	4401                	li	s0,0
    TEST_END();
    800191bc:	00014597          	auipc	a1,0x14
    800191c0:	13458593          	addi	a1,a1,308 # 8002d2f0 <__func__.0+0x2d0>
    800191c4:	00014517          	auipc	a0,0x14
    800191c8:	1d450513          	addi	a0,a0,468 # 8002d398 <__func__.0+0x378>
    800191cc:	3ef110ef          	jal	8002adba <printf>
    800191d0:	4511                	li	a0,4
    800191d2:	c9de70ef          	jal	80000e6e <goto_priv>
    800191d6:	db4e80ef          	jal	8000178a <reset_state>
}
    800191da:	60e2                	ld	ra,24(sp)
    800191dc:	8522                	mv	a0,s0
    800191de:	6442                	ld	s0,16(sp)
    800191e0:	64a2                	ld	s1,8(sp)
    800191e2:	6105                	addi	sp,sp,32
    800191e4:	8082                	ret

00000000800191e6 <amo_guest_page_fault_3>:

bool amo_guest_page_fault_3(){
    800191e6:	1101                	addi	sp,sp,-32

    TEST_START();
    800191e8:	00013597          	auipc	a1,0x13
    800191ec:	f8858593          	addi	a1,a1,-120 # 8002c170 <__func__.9>
    800191f0:	00014517          	auipc	a0,0x14
    800191f4:	11050513          	addi	a0,a0,272 # 8002d300 <__func__.0+0x2e0>
bool amo_guest_page_fault_3(){
    800191f8:	ec06                	sd	ra,24(sp)
    800191fa:	e822                	sd	s0,16(sp)
    800191fc:	e426                	sd	s1,8(sp)
    TEST_START();
    800191fe:	3bd110ef          	jal	8002adba <printf>
    80019202:	4529                	li	a0,10
    80019204:	0a5100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80019208:	450d                	li	a0,3
    8001920a:	c65e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001920e:	bd2e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019212:	f6ae70ef          	jal	8000097c <hpt_init>
    vspt_init();
    80019216:	d0ce70ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_VS);
    8001921a:	4509                	li	a0,2
    8001921c:	c53e70ef          	jal	80000e6e <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了sstatus.MXR=1，能从可读可执行页面读取，如果此时第二阶段地址翻译pte.r=0&&pte.x=0
    TEST_SETUP_EXCEPT();
    80019220:	b53e70ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSRWX_GI);

    CSRS(CSR_SSTATUS, SSTATUS_MXR);
    80019224:	000807b7          	lui	a5,0x80
    80019228:	1007a073          	csrs	sstatus,a5
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001922c:	37ab77b7          	lui	a5,0x37ab7
    80019230:	00100737          	lui	a4,0x100
    80019234:	078a                	slli	a5,a5,0x2
    80019236:	06570713          	addi	a4,a4,101 # 100065 <STACK_SIZE+0x65>
    8001923a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001923e:	0732                	slli	a4,a4,0xc
    80019240:	40f737af          	amoor.d	a5,a5,(a4)
    value = amoor_d(vaddr,value);
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    80019244:	08200593          	li	a1,130
    80019248:	0001a617          	auipc	a2,0x1a
    8001924c:	23060613          	addi	a2,a2,560 # 80033478 <__func__.0+0x6458>
    80019250:	00014517          	auipc	a0,0x14
    80019254:	0c850513          	addi	a0,a0,200 # 8002d318 <__func__.0+0x2f8>
    80019258:	363110ef          	jal	8002adba <printf>
    8001925c:	00038797          	auipc	a5,0x38
    80019260:	db57c783          	lbu	a5,-587(a5) # 80051011 <excpt+0x1>
    80019264:	00038497          	auipc	s1,0x38
    80019268:	dac48493          	addi	s1,s1,-596 # 80051010 <excpt>
    8001926c:	00014597          	auipc	a1,0x14
    80019270:	08458593          	addi	a1,a1,132 # 8002d2f0 <__func__.0+0x2d0>
    80019274:	cf89                	beqz	a5,8001928e <amo_guest_page_fault_3+0xa8>
    80019276:	6498                	ld	a4,8(s1)
    80019278:	47dd                	li	a5,23
    8001927a:	00014597          	auipc	a1,0x14
    8001927e:	06658593          	addi	a1,a1,102 # 8002d2e0 <__func__.0+0x2c0>
    80019282:	00f70663          	beq	a4,a5,8001928e <amo_guest_page_fault_3+0xa8>
    80019286:	00014597          	auipc	a1,0x14
    8001928a:	06a58593          	addi	a1,a1,106 # 8002d2f0 <__func__.0+0x2d0>
    8001928e:	00014517          	auipc	a0,0x14
    80019292:	0a250513          	addi	a0,a0,162 # 8002d330 <__func__.0+0x310>
    80019296:	325110ef          	jal	8002adba <printf>
    8001929a:	00038797          	auipc	a5,0x38
    8001929e:	d777c783          	lbu	a5,-649(a5) # 80051011 <excpt+0x1>
    800192a2:	c789                	beqz	a5,800192ac <amo_guest_page_fault_3+0xc6>
    800192a4:	6498                	ld	a4,8(s1)
    800192a6:	47dd                	li	a5,23
    800192a8:	00f70c63          	beq	a4,a5,800192c0 <amo_guest_page_fault_3+0xda>
    800192ac:	00014517          	auipc	a0,0x14
    800192b0:	08c50513          	addi	a0,a0,140 # 8002d338 <__func__.0+0x318>
    800192b4:	307110ef          	jal	8002adba <printf>
    800192b8:	02900513          	li	a0,41
    800192bc:	7ec100ef          	jal	80029aa8 <putchar>
    800192c0:	4529                	li	a0,10
    800192c2:	7e6100ef          	jal	80029aa8 <putchar>
    800192c6:	00038417          	auipc	s0,0x38
    800192ca:	d4b44403          	lbu	s0,-693(s0) # 80051011 <excpt+0x1>
    800192ce:	c409                	beqz	s0,800192d8 <amo_guest_page_fault_3+0xf2>
    800192d0:	6498                	ld	a4,8(s1)
    800192d2:	47dd                	li	a5,23
    800192d4:	02f70c63          	beq	a4,a5,8001930c <amo_guest_page_fault_3+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SGPF
    );

    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    800192d8:	000807b7          	lui	a5,0x80
    800192dc:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode amoor_d when the second-stage address translation pte.r=0 and pte.x=0 and sstatus.mxr=1 leads to SGPF",
    800192e0:	4401                	li	s0,0

    TEST_END();
    800192e2:	00014597          	auipc	a1,0x14
    800192e6:	00e58593          	addi	a1,a1,14 # 8002d2f0 <__func__.0+0x2d0>
    800192ea:	00014517          	auipc	a0,0x14
    800192ee:	0ae50513          	addi	a0,a0,174 # 8002d398 <__func__.0+0x378>
    800192f2:	2c9110ef          	jal	8002adba <printf>
    800192f6:	4511                	li	a0,4
    800192f8:	b77e70ef          	jal	80000e6e <goto_priv>
    800192fc:	c8ee80ef          	jal	8000178a <reset_state>
}
    80019300:	60e2                	ld	ra,24(sp)
    80019302:	8522                	mv	a0,s0
    80019304:	6442                	ld	s0,16(sp)
    80019306:	64a2                	ld	s1,8(sp)
    80019308:	6105                	addi	sp,sp,32
    8001930a:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001930c:	000807b7          	lui	a5,0x80
    80019310:	1007b073          	csrc	sstatus,a5
    TEST_END();
    80019314:	00014597          	auipc	a1,0x14
    80019318:	fcc58593          	addi	a1,a1,-52 # 8002d2e0 <__func__.0+0x2c0>
    8001931c:	b7f9                	j	800192ea <amo_guest_page_fault_3+0x104>

000000008001931e <amo_guest_page_fault_4>:

bool amo_guest_page_fault_4(){
    8001931e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019320:	00013597          	auipc	a1,0x13
    80019324:	e6858593          	addi	a1,a1,-408 # 8002c188 <__func__.8>
    80019328:	00014517          	auipc	a0,0x14
    8001932c:	fd850513          	addi	a0,a0,-40 # 8002d300 <__func__.0+0x2e0>
bool amo_guest_page_fault_4(){
    80019330:	ec06                	sd	ra,24(sp)
    80019332:	e822                	sd	s0,16(sp)
    80019334:	e426                	sd	s1,8(sp)
    TEST_START();
    80019336:	285110ef          	jal	8002adba <printf>
    8001933a:	4529                	li	a0,10
    8001933c:	76c100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80019340:	450d                	li	a0,3
    80019342:	b2de70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80019346:	a9ae70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001934a:	e32e70ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001934e:	bd4e70ef          	jal	80000722 <vspt_init>
    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  

    goto_priv(PRIV_M);
    80019352:	4511                	li	a0,4
    80019354:	b1be70ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80019358:	000407b7          	lui	a5,0x40
    8001935c:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80019360:	450d                	li	a0,3
    80019362:	b0de70ef          	jal	80000e6e <goto_priv>


    //执行原子相关指令需要二级地址翻页时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80019366:	a0de70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amomin_d, "amomin.d", uint64_t);
    8001936a:	37ab77b7          	lui	a5,0x37ab7
    8001936e:	00080737          	lui	a4,0x80
    80019372:	078a                	slli	a5,a5,0x2
    80019374:	076d                	addi	a4,a4,27 # 8001b <_test_table_size+0x8001a>
    80019376:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001937a:	0736                	slli	a4,a4,0xd
    8001937c:	80f737af          	amomin.d	a5,a5,(a4)
    addr = hs_page_base(VSURWX_GUX);

    value = amomin_d(addr,value);
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80019380:	08200593          	li	a1,130
    80019384:	0001a617          	auipc	a2,0x1a
    80019388:	16460613          	addi	a2,a2,356 # 800334e8 <__func__.0+0x64c8>
    8001938c:	00014517          	auipc	a0,0x14
    80019390:	f8c50513          	addi	a0,a0,-116 # 8002d318 <__func__.0+0x2f8>
    80019394:	227110ef          	jal	8002adba <printf>
    80019398:	00038797          	auipc	a5,0x38
    8001939c:	c797c783          	lbu	a5,-903(a5) # 80051011 <excpt+0x1>
    800193a0:	00038497          	auipc	s1,0x38
    800193a4:	c7048493          	addi	s1,s1,-912 # 80051010 <excpt>
    800193a8:	00014597          	auipc	a1,0x14
    800193ac:	f4858593          	addi	a1,a1,-184 # 8002d2f0 <__func__.0+0x2d0>
    800193b0:	cf89                	beqz	a5,800193ca <amo_guest_page_fault_4+0xac>
    800193b2:	6498                	ld	a4,8(s1)
    800193b4:	47bd                	li	a5,15
    800193b6:	00014597          	auipc	a1,0x14
    800193ba:	f2a58593          	addi	a1,a1,-214 # 8002d2e0 <__func__.0+0x2c0>
    800193be:	00f70663          	beq	a4,a5,800193ca <amo_guest_page_fault_4+0xac>
    800193c2:	00014597          	auipc	a1,0x14
    800193c6:	f2e58593          	addi	a1,a1,-210 # 8002d2f0 <__func__.0+0x2d0>
    800193ca:	00014517          	auipc	a0,0x14
    800193ce:	f6650513          	addi	a0,a0,-154 # 8002d330 <__func__.0+0x310>
    800193d2:	1e9110ef          	jal	8002adba <printf>
    800193d6:	00038797          	auipc	a5,0x38
    800193da:	c3b7c783          	lbu	a5,-965(a5) # 80051011 <excpt+0x1>
    800193de:	c789                	beqz	a5,800193e8 <amo_guest_page_fault_4+0xca>
    800193e0:	6498                	ld	a4,8(s1)
    800193e2:	47bd                	li	a5,15
    800193e4:	00f70c63          	beq	a4,a5,800193fc <amo_guest_page_fault_4+0xde>
    800193e8:	00014517          	auipc	a0,0x14
    800193ec:	f5050513          	addi	a0,a0,-176 # 8002d338 <__func__.0+0x318>
    800193f0:	1cb110ef          	jal	8002adba <printf>
    800193f4:	02900513          	li	a0,41
    800193f8:	6b0100ef          	jal	80029aa8 <putchar>
    800193fc:	4529                	li	a0,10
    800193fe:	6aa100ef          	jal	80029aa8 <putchar>
    80019402:	00038417          	auipc	s0,0x38
    80019406:	c0f44403          	lbu	s0,-1009(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );

    TEST_END();
    8001940a:	00014597          	auipc	a1,0x14
    8001940e:	ee658593          	addi	a1,a1,-282 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80019412:	cc11                	beqz	s0,8001942e <amo_guest_page_fault_4+0x110>
    80019414:	6498                	ld	a4,8(s1)
    80019416:	47bd                	li	a5,15
    TEST_END();
    80019418:	00014597          	auipc	a1,0x14
    8001941c:	ec858593          	addi	a1,a1,-312 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("s mode amomin_d u mode page when mstatus.sum=0 leads to SPF",
    80019420:	00f70763          	beq	a4,a5,8001942e <amo_guest_page_fault_4+0x110>
    80019424:	4401                	li	s0,0
    TEST_END();
    80019426:	00014597          	auipc	a1,0x14
    8001942a:	eca58593          	addi	a1,a1,-310 # 8002d2f0 <__func__.0+0x2d0>
    8001942e:	00014517          	auipc	a0,0x14
    80019432:	f6a50513          	addi	a0,a0,-150 # 8002d398 <__func__.0+0x378>
    80019436:	185110ef          	jal	8002adba <printf>
    8001943a:	4511                	li	a0,4
    8001943c:	a33e70ef          	jal	80000e6e <goto_priv>
    80019440:	b4ae80ef          	jal	8000178a <reset_state>
}
    80019444:	60e2                	ld	ra,24(sp)
    80019446:	8522                	mv	a0,s0
    80019448:	6442                	ld	s0,16(sp)
    8001944a:	64a2                	ld	s1,8(sp)
    8001944c:	6105                	addi	sp,sp,32
    8001944e:	8082                	ret

0000000080019450 <amo_guest_page_fault_5>:

bool amo_guest_page_fault_5(){
    80019450:	1141                	addi	sp,sp,-16

    TEST_START();
    80019452:	00013597          	auipc	a1,0x13
    80019456:	d4e58593          	addi	a1,a1,-690 # 8002c1a0 <__func__.7>
    8001945a:	00014517          	auipc	a0,0x14
    8001945e:	ea650513          	addi	a0,a0,-346 # 8002d300 <__func__.0+0x2e0>
bool amo_guest_page_fault_5(){
    80019462:	e406                	sd	ra,8(sp)
    80019464:	e022                	sd	s0,0(sp)
    TEST_START();
    80019466:	155110ef          	jal	8002adba <printf>
    8001946a:	4529                	li	a0,10
    8001946c:	63c100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80019470:	450d                	li	a0,3
    80019472:	9fde70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80019476:	96ae70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001947a:	d02e70ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001947e:	aa4e70ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr;

    uint64_t value = 0xdeadbeef;  
    goto_priv(PRIV_M);
    80019482:	4511                	li	a0,4
    80019484:	9ebe70ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS, SSTATUS_SUM);
    80019488:	000407b7          	lui	a5,0x40
    8001948c:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    80019490:	450d                	li	a0,3
    80019492:	9dde70ef          	jal	80000e6e <goto_priv>

    //执行原子指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项

    vaddr = hs_page_base(VSURWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019496:	8dde70ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amominu_d, "amominu.d", uint64_t);
    8001949a:	37ab77b7          	lui	a5,0x37ab7
    8001949e:	00080737          	lui	a4,0x80
    800194a2:	078a                	slli	a5,a5,0x2
    800194a4:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    800194a6:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    800194aa:	0736                	slli	a4,a4,0xd
    800194ac:	c0f737af          	amominu.d	a5,a5,(a4)
    value = amominu_d(vaddr,value);

    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    800194b0:	08200593          	li	a1,130
    800194b4:	0001a617          	auipc	a2,0x1a
    800194b8:	07460613          	addi	a2,a2,116 # 80033528 <__func__.0+0x6508>
    800194bc:	00014517          	auipc	a0,0x14
    800194c0:	e5c50513          	addi	a0,a0,-420 # 8002d318 <__func__.0+0x2f8>
    800194c4:	0f7110ef          	jal	8002adba <printf>
    800194c8:	00038797          	auipc	a5,0x38
    800194cc:	b497c783          	lbu	a5,-1207(a5) # 80051011 <excpt+0x1>
    800194d0:	00014597          	auipc	a1,0x14
    800194d4:	e1058593          	addi	a1,a1,-496 # 8002d2e0 <__func__.0+0x2c0>
    800194d8:	c789                	beqz	a5,800194e2 <amo_guest_page_fault_5+0x92>
    800194da:	00014597          	auipc	a1,0x14
    800194de:	e1658593          	addi	a1,a1,-490 # 8002d2f0 <__func__.0+0x2d0>
    800194e2:	00014517          	auipc	a0,0x14
    800194e6:	e4e50513          	addi	a0,a0,-434 # 8002d330 <__func__.0+0x310>
    800194ea:	0d1110ef          	jal	8002adba <printf>
    800194ee:	00038797          	auipc	a5,0x38
    800194f2:	b237c783          	lbu	a5,-1245(a5) # 80051011 <excpt+0x1>
    800194f6:	e7a1                	bnez	a5,8001953e <amo_guest_page_fault_5+0xee>
    800194f8:	4529                	li	a0,10
    800194fa:	5ae100ef          	jal	80029aa8 <putchar>
    800194fe:	00038797          	auipc	a5,0x38
    80019502:	b137c783          	lbu	a5,-1261(a5) # 80051011 <excpt+0x1>
    80019506:	e795                	bnez	a5,80019532 <amo_guest_page_fault_5+0xe2>
    80019508:	4405                	li	s0,1


    //如果pte.d=0，标识上次A位被清除以来，页面被访问过
    //如果pte.d=1，标识上次A位被清除以来，页面未被访问过

    TEST_END();
    8001950a:	00014597          	auipc	a1,0x14
    8001950e:	dd658593          	addi	a1,a1,-554 # 8002d2e0 <__func__.0+0x2c0>
    80019512:	00014517          	auipc	a0,0x14
    80019516:	e8650513          	addi	a0,a0,-378 # 8002d398 <__func__.0+0x378>
    8001951a:	0a1110ef          	jal	8002adba <printf>
    8001951e:	4511                	li	a0,4
    80019520:	94fe70ef          	jal	80000e6e <goto_priv>
    80019524:	a66e80ef          	jal	8000178a <reset_state>
}
    80019528:	60a2                	ld	ra,8(sp)
    8001952a:	8522                	mv	a0,s0
    8001952c:	6402                	ld	s0,0(sp)
    8001952e:	0141                	addi	sp,sp,16
    80019530:	8082                	ret
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    80019532:	4401                	li	s0,0
    TEST_END();
    80019534:	00014597          	auipc	a1,0x14
    80019538:	dbc58593          	addi	a1,a1,-580 # 8002d2f0 <__func__.0+0x2d0>
    8001953c:	bfd9                	j	80019512 <amo_guest_page_fault_5+0xc2>
    TEST_ASSERT("s mode amominu_d u mode page when mstatus.sum=1 successful",
    8001953e:	00014517          	auipc	a0,0x14
    80019542:	dfa50513          	addi	a0,a0,-518 # 8002d338 <__func__.0+0x318>
    80019546:	075110ef          	jal	8002adba <printf>
    8001954a:	02900513          	li	a0,41
    8001954e:	55a100ef          	jal	80029aa8 <putchar>
    80019552:	b75d                	j	800194f8 <amo_guest_page_fault_5+0xa8>

0000000080019554 <instruction_guest_page_fault_1>:


bool instruction_guest_page_fault_1(){
    80019554:	1101                	addi	sp,sp,-32

    TEST_START();
    80019556:	00013597          	auipc	a1,0x13
    8001955a:	c6258593          	addi	a1,a1,-926 # 8002c1b8 <__func__.6>
    8001955e:	00014517          	auipc	a0,0x14
    80019562:	da250513          	addi	a0,a0,-606 # 8002d300 <__func__.0+0x2e0>
bool instruction_guest_page_fault_1(){
    80019566:	ec06                	sd	ra,24(sp)
    80019568:	e822                	sd	s0,16(sp)
    8001956a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001956c:	04f110ef          	jal	8002adba <printf>
    80019570:	4529                	li	a0,10
    80019572:	536100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80019576:	450d                	li	a0,3
    80019578:	8f7e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001957c:	864e70ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019580:	bfce70ef          	jal	8000097c <hpt_init>
    vspt_init();
    80019584:	99ee70ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019588:	4509                	li	a0,2
    8001958a:	8e5e70ef          	jal	80000e6e <goto_priv>

    //执行取指指令二级地址翻译阶段时，pte.v=0
    vaddr = hs_page_base(VSRWX_GI);
    TEST_SETUP_EXCEPT();
    8001958e:	fe4e70ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019592:	001007b7          	lui	a5,0x100
    80019596:	06578793          	addi	a5,a5,101 # 100065 <STACK_SIZE+0x65>
    8001959a:	07b2                	slli	a5,a5,0xc
    8001959c:	00038417          	auipc	s0,0x38
    800195a0:	a7440413          	addi	s0,s0,-1420 # 80051010 <excpt>
    800195a4:	00000297          	auipc	t0,0x0
    800195a8:	00c28293          	addi	t0,t0,12 # 800195b0 <instruction_guest_page_fault_1+0x5c>
    800195ac:	02543c23          	sd	t0,56(s0)
    800195b0:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    800195b2:	08200593          	li	a1,130
    800195b6:	0001a617          	auipc	a2,0x1a
    800195ba:	fb260613          	addi	a2,a2,-78 # 80033568 <__func__.0+0x6548>
    800195be:	00014517          	auipc	a0,0x14
    800195c2:	d5a50513          	addi	a0,a0,-678 # 8002d318 <__func__.0+0x2f8>
    800195c6:	7f4110ef          	jal	8002adba <printf>
    800195ca:	00038797          	auipc	a5,0x38
    800195ce:	a477c783          	lbu	a5,-1465(a5) # 80051011 <excpt+0x1>
    800195d2:	00014597          	auipc	a1,0x14
    800195d6:	d1e58593          	addi	a1,a1,-738 # 8002d2f0 <__func__.0+0x2d0>
    800195da:	cf89                	beqz	a5,800195f4 <instruction_guest_page_fault_1+0xa0>
    800195dc:	6418                	ld	a4,8(s0)
    800195de:	47d1                	li	a5,20
    800195e0:	00014597          	auipc	a1,0x14
    800195e4:	d0058593          	addi	a1,a1,-768 # 8002d2e0 <__func__.0+0x2c0>
    800195e8:	00f70663          	beq	a4,a5,800195f4 <instruction_guest_page_fault_1+0xa0>
    800195ec:	00014597          	auipc	a1,0x14
    800195f0:	d0458593          	addi	a1,a1,-764 # 8002d2f0 <__func__.0+0x2d0>
    800195f4:	00014517          	auipc	a0,0x14
    800195f8:	d3c50513          	addi	a0,a0,-708 # 8002d330 <__func__.0+0x310>
    800195fc:	7be110ef          	jal	8002adba <printf>
    80019600:	00038797          	auipc	a5,0x38
    80019604:	a117c783          	lbu	a5,-1519(a5) # 80051011 <excpt+0x1>
    80019608:	c789                	beqz	a5,80019612 <instruction_guest_page_fault_1+0xbe>
    8001960a:	6418                	ld	a4,8(s0)
    8001960c:	47d1                	li	a5,20
    8001960e:	00f70c63          	beq	a4,a5,80019626 <instruction_guest_page_fault_1+0xd2>
    80019612:	00014517          	auipc	a0,0x14
    80019616:	d2650513          	addi	a0,a0,-730 # 8002d338 <__func__.0+0x318>
    8001961a:	7a0110ef          	jal	8002adba <printf>
    8001961e:	02900513          	li	a0,41
    80019622:	486100ef          	jal	80029aa8 <putchar>
    80019626:	4529                	li	a0,10
    80019628:	480100ef          	jal	80029aa8 <putchar>
    8001962c:	00038497          	auipc	s1,0x38
    80019630:	9e54c483          	lbu	s1,-1563(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019634:	00014597          	auipc	a1,0x14
    80019638:	cbc58593          	addi	a1,a1,-836 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001963c:	cc91                	beqz	s1,80019658 <instruction_guest_page_fault_1+0x104>
    8001963e:	6418                	ld	a4,8(s0)
    80019640:	47d1                	li	a5,20
    TEST_END();
    80019642:	00014597          	auipc	a1,0x14
    80019646:	c9e58593          	addi	a1,a1,-866 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.v=0 leads to IGPF",
    8001964a:	00f70763          	beq	a4,a5,80019658 <instruction_guest_page_fault_1+0x104>
    8001964e:	4481                	li	s1,0
    TEST_END();
    80019650:	00014597          	auipc	a1,0x14
    80019654:	ca058593          	addi	a1,a1,-864 # 8002d2f0 <__func__.0+0x2d0>
    80019658:	00014517          	auipc	a0,0x14
    8001965c:	d4050513          	addi	a0,a0,-704 # 8002d398 <__func__.0+0x378>
    80019660:	75a110ef          	jal	8002adba <printf>
    80019664:	4511                	li	a0,4
    80019666:	809e70ef          	jal	80000e6e <goto_priv>
    8001966a:	920e80ef          	jal	8000178a <reset_state>

}
    8001966e:	60e2                	ld	ra,24(sp)
    80019670:	6442                	ld	s0,16(sp)
    80019672:	8526                	mv	a0,s1
    80019674:	64a2                	ld	s1,8(sp)
    80019676:	6105                	addi	sp,sp,32
    80019678:	8082                	ret

000000008001967a <instruction_guest_page_fault_2>:


bool instruction_guest_page_fault_2(){
    8001967a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001967c:	00013597          	auipc	a1,0x13
    80019680:	b5c58593          	addi	a1,a1,-1188 # 8002c1d8 <__func__.5>
    80019684:	00014517          	auipc	a0,0x14
    80019688:	c7c50513          	addi	a0,a0,-900 # 8002d300 <__func__.0+0x2e0>
bool instruction_guest_page_fault_2(){
    8001968c:	ec06                	sd	ra,24(sp)
    8001968e:	e822                	sd	s0,16(sp)
    80019690:	e426                	sd	s1,8(sp)
    TEST_START();
    80019692:	728110ef          	jal	8002adba <printf>
    80019696:	4529                	li	a0,10
    80019698:	410100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001969c:	450d                	li	a0,3
    8001969e:	fd0e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800196a2:	f3fe60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800196a6:	ad6e70ef          	jal	8000097c <hpt_init>
    vspt_init();
    800196aa:	878e70ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800196ae:	4509                	li	a0,2
    800196b0:	fbee70ef          	jal	80000e6e <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    800196b4:	ebee70ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    800196b8:	400137b7          	lui	a5,0x40013
    800196bc:	078a                	slli	a5,a5,0x2
    800196be:	00038417          	auipc	s0,0x38
    800196c2:	95240413          	addi	s0,s0,-1710 # 80051010 <excpt>
    800196c6:	00000297          	auipc	t0,0x0
    800196ca:	00c28293          	addi	t0,t0,12 # 800196d2 <instruction_guest_page_fault_2+0x58>
    800196ce:	02543c23          	sd	t0,56(s0)
    800196d2:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800196d4:	08200593          	li	a1,130
    800196d8:	0001a617          	auipc	a2,0x1a
    800196dc:	ef060613          	addi	a2,a2,-272 # 800335c8 <__func__.0+0x65a8>
    800196e0:	00014517          	auipc	a0,0x14
    800196e4:	c3850513          	addi	a0,a0,-968 # 8002d318 <__func__.0+0x2f8>
    800196e8:	6d2110ef          	jal	8002adba <printf>
    800196ec:	00038797          	auipc	a5,0x38
    800196f0:	9257c783          	lbu	a5,-1755(a5) # 80051011 <excpt+0x1>
    800196f4:	00014597          	auipc	a1,0x14
    800196f8:	bfc58593          	addi	a1,a1,-1028 # 8002d2f0 <__func__.0+0x2d0>
    800196fc:	cf89                	beqz	a5,80019716 <instruction_guest_page_fault_2+0x9c>
    800196fe:	6418                	ld	a4,8(s0)
    80019700:	47d1                	li	a5,20
    80019702:	00014597          	auipc	a1,0x14
    80019706:	bde58593          	addi	a1,a1,-1058 # 8002d2e0 <__func__.0+0x2c0>
    8001970a:	00f70663          	beq	a4,a5,80019716 <instruction_guest_page_fault_2+0x9c>
    8001970e:	00014597          	auipc	a1,0x14
    80019712:	be258593          	addi	a1,a1,-1054 # 8002d2f0 <__func__.0+0x2d0>
    80019716:	00014517          	auipc	a0,0x14
    8001971a:	c1a50513          	addi	a0,a0,-998 # 8002d330 <__func__.0+0x310>
    8001971e:	69c110ef          	jal	8002adba <printf>
    80019722:	00038797          	auipc	a5,0x38
    80019726:	8ef7c783          	lbu	a5,-1809(a5) # 80051011 <excpt+0x1>
    8001972a:	c789                	beqz	a5,80019734 <instruction_guest_page_fault_2+0xba>
    8001972c:	6418                	ld	a4,8(s0)
    8001972e:	47d1                	li	a5,20
    80019730:	00f70c63          	beq	a4,a5,80019748 <instruction_guest_page_fault_2+0xce>
    80019734:	00014517          	auipc	a0,0x14
    80019738:	c0450513          	addi	a0,a0,-1020 # 8002d338 <__func__.0+0x318>
    8001973c:	67e110ef          	jal	8002adba <printf>
    80019740:	02900513          	li	a0,41
    80019744:	364100ef          	jal	80029aa8 <putchar>
    80019748:	4529                	li	a0,10
    8001974a:	35e100ef          	jal	80029aa8 <putchar>
    8001974e:	00038497          	auipc	s1,0x38
    80019752:	8c34c483          	lbu	s1,-1853(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019756:	00014597          	auipc	a1,0x14
    8001975a:	b9a58593          	addi	a1,a1,-1126 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001975e:	cc91                	beqz	s1,8001977a <instruction_guest_page_fault_2+0x100>
    80019760:	6418                	ld	a4,8(s0)
    80019762:	47d1                	li	a5,20
    TEST_END();
    80019764:	00014597          	auipc	a1,0x14
    80019768:	b7c58593          	addi	a1,a1,-1156 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    8001976c:	00f70763          	beq	a4,a5,8001977a <instruction_guest_page_fault_2+0x100>
    80019770:	4481                	li	s1,0
    TEST_END();
    80019772:	00014597          	auipc	a1,0x14
    80019776:	b7e58593          	addi	a1,a1,-1154 # 8002d2f0 <__func__.0+0x2d0>
    8001977a:	00014517          	auipc	a0,0x14
    8001977e:	c1e50513          	addi	a0,a0,-994 # 8002d398 <__func__.0+0x378>
    80019782:	638110ef          	jal	8002adba <printf>
    80019786:	4511                	li	a0,4
    80019788:	ee6e70ef          	jal	80000e6e <goto_priv>
    8001978c:	fffe70ef          	jal	8000178a <reset_state>
}
    80019790:	60e2                	ld	ra,24(sp)
    80019792:	6442                	ld	s0,16(sp)
    80019794:	8526                	mv	a0,s1
    80019796:	64a2                	ld	s1,8(sp)
    80019798:	6105                	addi	sp,sp,32
    8001979a:	8082                	ret

000000008001979c <instruction_guest_page_fault_3>:

bool instruction_guest_page_fault_3(){
    8001979c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001979e:	00013597          	auipc	a1,0x13
    800197a2:	a5a58593          	addi	a1,a1,-1446 # 8002c1f8 <__func__.4>
    800197a6:	00014517          	auipc	a0,0x14
    800197aa:	b5a50513          	addi	a0,a0,-1190 # 8002d300 <__func__.0+0x2e0>
bool instruction_guest_page_fault_3(){
    800197ae:	ec06                	sd	ra,24(sp)
    800197b0:	e822                	sd	s0,16(sp)
    800197b2:	e426                	sd	s1,8(sp)
    TEST_START();
    800197b4:	606110ef          	jal	8002adba <printf>
    800197b8:	4529                	li	a0,10
    800197ba:	2ee100ef          	jal	80029aa8 <putchar>

    CSRC(CSR_VSSTATUS,SSTATUS_SUM);
    800197be:	000407b7          	lui	a5,0x40
    800197c2:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_HS);
    800197c6:	450d                	li	a0,3
    800197c8:	ea6e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800197cc:	e15e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800197d0:	9ace70ef          	jal	8000097c <hpt_init>
    vspt_init();
    800197d4:	f4fe60ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    800197d8:	4509                	li	a0,2
    800197da:	e94e70ef          	jal	80000e6e <goto_priv>

    //执行取指指令时，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    800197de:	d94e70ef          	jal	80000d72 <test_setup_except_function>
    vaddr = hs_page_base(VSURWX_GURWX);


    TEST_EXEC_EXCEPT(vaddr); 
    800197e2:	000807b7          	lui	a5,0x80
    800197e6:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    800197e8:	07b6                	slli	a5,a5,0xd
    800197ea:	00038417          	auipc	s0,0x38
    800197ee:	82640413          	addi	s0,s0,-2010 # 80051010 <excpt>
    800197f2:	00000297          	auipc	t0,0x0
    800197f6:	00c28293          	addi	t0,t0,12 # 800197fe <instruction_guest_page_fault_3+0x62>
    800197fa:	02543c23          	sd	t0,56(s0)
    800197fe:	8782                	jr	a5
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    80019800:	08200593          	li	a1,130
    80019804:	0001a617          	auipc	a2,0x1a
    80019808:	e2460613          	addi	a2,a2,-476 # 80033628 <__func__.0+0x6608>
    8001980c:	00014517          	auipc	a0,0x14
    80019810:	b0c50513          	addi	a0,a0,-1268 # 8002d318 <__func__.0+0x2f8>
    80019814:	5a6110ef          	jal	8002adba <printf>
    80019818:	00037797          	auipc	a5,0x37
    8001981c:	7f97c783          	lbu	a5,2041(a5) # 80051011 <excpt+0x1>
    80019820:	00014597          	auipc	a1,0x14
    80019824:	ad058593          	addi	a1,a1,-1328 # 8002d2f0 <__func__.0+0x2d0>
    80019828:	cf89                	beqz	a5,80019842 <instruction_guest_page_fault_3+0xa6>
    8001982a:	6418                	ld	a4,8(s0)
    8001982c:	47b1                	li	a5,12
    8001982e:	00014597          	auipc	a1,0x14
    80019832:	ab258593          	addi	a1,a1,-1358 # 8002d2e0 <__func__.0+0x2c0>
    80019836:	00f70663          	beq	a4,a5,80019842 <instruction_guest_page_fault_3+0xa6>
    8001983a:	00014597          	auipc	a1,0x14
    8001983e:	ab658593          	addi	a1,a1,-1354 # 8002d2f0 <__func__.0+0x2d0>
    80019842:	00014517          	auipc	a0,0x14
    80019846:	aee50513          	addi	a0,a0,-1298 # 8002d330 <__func__.0+0x310>
    8001984a:	570110ef          	jal	8002adba <printf>
    8001984e:	00037797          	auipc	a5,0x37
    80019852:	7c37c783          	lbu	a5,1987(a5) # 80051011 <excpt+0x1>
    80019856:	c789                	beqz	a5,80019860 <instruction_guest_page_fault_3+0xc4>
    80019858:	6418                	ld	a4,8(s0)
    8001985a:	47b1                	li	a5,12
    8001985c:	00f70c63          	beq	a4,a5,80019874 <instruction_guest_page_fault_3+0xd8>
    80019860:	00014517          	auipc	a0,0x14
    80019864:	ad850513          	addi	a0,a0,-1320 # 8002d338 <__func__.0+0x318>
    80019868:	552110ef          	jal	8002adba <printf>
    8001986c:	02900513          	li	a0,41
    80019870:	238100ef          	jal	80029aa8 <putchar>
    80019874:	4529                	li	a0,10
    80019876:	232100ef          	jal	80029aa8 <putchar>
    8001987a:	00037497          	auipc	s1,0x37
    8001987e:	7974c483          	lbu	s1,1943(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IPF
    );

    TEST_END();
    80019882:	00014597          	auipc	a1,0x14
    80019886:	a6e58593          	addi	a1,a1,-1426 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    8001988a:	cc91                	beqz	s1,800198a6 <instruction_guest_page_fault_3+0x10a>
    8001988c:	6418                	ld	a4,8(s0)
    8001988e:	47b1                	li	a5,12
    TEST_END();
    80019890:	00014597          	auipc	a1,0x14
    80019894:	a5058593          	addi	a1,a1,-1456 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction of u mode leads to IPF when vsstatus.sum=0",
    80019898:	00f70763          	beq	a4,a5,800198a6 <instruction_guest_page_fault_3+0x10a>
    8001989c:	4481                	li	s1,0
    TEST_END();
    8001989e:	00014597          	auipc	a1,0x14
    800198a2:	a5258593          	addi	a1,a1,-1454 # 8002d2f0 <__func__.0+0x2d0>
    800198a6:	00014517          	auipc	a0,0x14
    800198aa:	af250513          	addi	a0,a0,-1294 # 8002d398 <__func__.0+0x378>
    800198ae:	50c110ef          	jal	8002adba <printf>
    800198b2:	4511                	li	a0,4
    800198b4:	dbae70ef          	jal	80000e6e <goto_priv>
    800198b8:	ed3e70ef          	jal	8000178a <reset_state>
}
    800198bc:	60e2                	ld	ra,24(sp)
    800198be:	6442                	ld	s0,16(sp)
    800198c0:	8526                	mv	a0,s1
    800198c2:	64a2                	ld	s1,8(sp)
    800198c4:	6105                	addi	sp,sp,32
    800198c6:	8082                	ret

00000000800198c8 <instruction_guest_page_fault_4>:


bool instruction_guest_page_fault_4(){
    800198c8:	1101                	addi	sp,sp,-32

    TEST_START();
    800198ca:	00013597          	auipc	a1,0x13
    800198ce:	94e58593          	addi	a1,a1,-1714 # 8002c218 <__func__.3>
    800198d2:	00014517          	auipc	a0,0x14
    800198d6:	a2e50513          	addi	a0,a0,-1490 # 8002d300 <__func__.0+0x2e0>
bool instruction_guest_page_fault_4(){
    800198da:	ec06                	sd	ra,24(sp)
    800198dc:	e822                	sd	s0,16(sp)
    800198de:	e426                	sd	s1,8(sp)
    TEST_START();
    800198e0:	4da110ef          	jal	8002adba <printf>
    800198e4:	4529                	li	a0,10
    800198e6:	1c2100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    800198ea:	450d                	li	a0,3
    800198ec:	d82e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    800198f0:	cf1e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    800198f4:	888e70ef          	jal	8000097c <hpt_init>
    vspt_init();
    800198f8:	e2be60ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_M);
    800198fc:	4511                	li	a0,4
    800198fe:	d70e70ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80019902:	28005073          	csrwi	vsatp,0
    goto_priv(PRIV_VS);
    80019906:	4509                	li	a0,2
    80019908:	d66e70ef          	jal	80000e6e <goto_priv>


    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项没有执行权限的页面中执行，pte.x=0
    addr = vs_page_base(VSURWX_GRW);
    TEST_SETUP_EXCEPT();
    8001990c:	c66e70ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(addr); 
    80019910:	000807b7          	lui	a5,0x80
    80019914:	07b5                	addi	a5,a5,13 # 8000d <_test_table_size+0x8000c>
    80019916:	07b6                	slli	a5,a5,0xd
    80019918:	00037417          	auipc	s0,0x37
    8001991c:	6f840413          	addi	s0,s0,1784 # 80051010 <excpt>
    80019920:	00000297          	auipc	t0,0x0
    80019924:	00c28293          	addi	t0,t0,12 # 8001992c <instruction_guest_page_fault_4+0x64>
    80019928:	02543c23          	sd	t0,56(s0)
    8001992c:	8782                	jr	a5

    printf("%d\n",excpt.cause);
    8001992e:	640c                	ld	a1,8(s0)
    80019930:	00014517          	auipc	a0,0x14
    80019934:	55850513          	addi	a0,a0,1368 # 8002de88 <__func__.0+0xe68>
    80019938:	482110ef          	jal	8002adba <printf>
    printf("%d\n",excpt.triggered);
    8001993c:	00037597          	auipc	a1,0x37
    80019940:	6d55c583          	lbu	a1,1749(a1) # 80051011 <excpt+0x1>
    80019944:	00014517          	auipc	a0,0x14
    80019948:	54450513          	addi	a0,a0,1348 # 8002de88 <__func__.0+0xe68>
    8001994c:	46e110ef          	jal	8002adba <printf>

    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    80019950:	08200593          	li	a1,130
    80019954:	0001a617          	auipc	a2,0x1a
    80019958:	d1c60613          	addi	a2,a2,-740 # 80033670 <__func__.0+0x6650>
    8001995c:	00014517          	auipc	a0,0x14
    80019960:	9bc50513          	addi	a0,a0,-1604 # 8002d318 <__func__.0+0x2f8>
    80019964:	456110ef          	jal	8002adba <printf>
    80019968:	00037797          	auipc	a5,0x37
    8001996c:	6a97c783          	lbu	a5,1705(a5) # 80051011 <excpt+0x1>
    80019970:	00014597          	auipc	a1,0x14
    80019974:	98058593          	addi	a1,a1,-1664 # 8002d2f0 <__func__.0+0x2d0>
    80019978:	cf89                	beqz	a5,80019992 <instruction_guest_page_fault_4+0xca>
    8001997a:	6418                	ld	a4,8(s0)
    8001997c:	47d1                	li	a5,20
    8001997e:	00014597          	auipc	a1,0x14
    80019982:	96258593          	addi	a1,a1,-1694 # 8002d2e0 <__func__.0+0x2c0>
    80019986:	00f70663          	beq	a4,a5,80019992 <instruction_guest_page_fault_4+0xca>
    8001998a:	00014597          	auipc	a1,0x14
    8001998e:	96658593          	addi	a1,a1,-1690 # 8002d2f0 <__func__.0+0x2d0>
    80019992:	00014517          	auipc	a0,0x14
    80019996:	99e50513          	addi	a0,a0,-1634 # 8002d330 <__func__.0+0x310>
    8001999a:	420110ef          	jal	8002adba <printf>
    8001999e:	00037797          	auipc	a5,0x37
    800199a2:	6737c783          	lbu	a5,1651(a5) # 80051011 <excpt+0x1>
    800199a6:	c789                	beqz	a5,800199b0 <instruction_guest_page_fault_4+0xe8>
    800199a8:	6418                	ld	a4,8(s0)
    800199aa:	47d1                	li	a5,20
    800199ac:	00f70c63          	beq	a4,a5,800199c4 <instruction_guest_page_fault_4+0xfc>
    800199b0:	00014517          	auipc	a0,0x14
    800199b4:	98850513          	addi	a0,a0,-1656 # 8002d338 <__func__.0+0x318>
    800199b8:	402110ef          	jal	8002adba <printf>
    800199bc:	02900513          	li	a0,41
    800199c0:	0e8100ef          	jal	80029aa8 <putchar>
    800199c4:	4529                	li	a0,10
    800199c6:	0e2100ef          	jal	80029aa8 <putchar>
    800199ca:	00037497          	auipc	s1,0x37
    800199ce:	6474c483          	lbu	s1,1607(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    800199d2:	00014597          	auipc	a1,0x14
    800199d6:	91e58593          	addi	a1,a1,-1762 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    800199da:	cc91                	beqz	s1,800199f6 <instruction_guest_page_fault_4+0x12e>
    800199dc:	6418                	ld	a4,8(s0)
    800199de:	47d1                	li	a5,20
    TEST_END();
    800199e0:	00014597          	auipc	a1,0x14
    800199e4:	90058593          	addi	a1,a1,-1792 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation pte.x=0 leads to IGPF",
    800199e8:	00f70763          	beq	a4,a5,800199f6 <instruction_guest_page_fault_4+0x12e>
    800199ec:	4481                	li	s1,0
    TEST_END();
    800199ee:	00014597          	auipc	a1,0x14
    800199f2:	90258593          	addi	a1,a1,-1790 # 8002d2f0 <__func__.0+0x2d0>
    800199f6:	00014517          	auipc	a0,0x14
    800199fa:	9a250513          	addi	a0,a0,-1630 # 8002d398 <__func__.0+0x378>
    800199fe:	3bc110ef          	jal	8002adba <printf>
    80019a02:	4511                	li	a0,4
    80019a04:	c6ae70ef          	jal	80000e6e <goto_priv>
    80019a08:	d83e70ef          	jal	8000178a <reset_state>
}
    80019a0c:	60e2                	ld	ra,24(sp)
    80019a0e:	6442                	ld	s0,16(sp)
    80019a10:	8526                	mv	a0,s1
    80019a12:	64a2                	ld	s1,8(sp)
    80019a14:	6105                	addi	sp,sp,32
    80019a16:	8082                	ret

0000000080019a18 <instruction_guest_page_fault_5>:


bool instruction_guest_page_fault_5(){
    80019a18:	1101                	addi	sp,sp,-32

    TEST_START();
    80019a1a:	00013597          	auipc	a1,0x13
    80019a1e:	81e58593          	addi	a1,a1,-2018 # 8002c238 <__func__.2>
    80019a22:	00014517          	auipc	a0,0x14
    80019a26:	8de50513          	addi	a0,a0,-1826 # 8002d300 <__func__.0+0x2e0>
bool instruction_guest_page_fault_5(){
    80019a2a:	ec06                	sd	ra,24(sp)
    80019a2c:	e822                	sd	s0,16(sp)
    80019a2e:	e426                	sd	s1,8(sp)
    TEST_START();
    80019a30:	38a110ef          	jal	8002adba <printf>
    80019a34:	4529                	li	a0,10
    80019a36:	072100ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80019a3a:	450d                	li	a0,3
    80019a3c:	c32e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80019a40:	ba1e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019a44:	f39e60ef          	jal	8000097c <hpt_init>
    vspt_init();
    80019a48:	cdbe60ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;
    goto_priv(PRIV_M);
    80019a4c:	4511                	li	a0,4
    80019a4e:	c20e70ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_VSATP,(uint64_t)0);
    80019a52:	28005073          	csrwi	vsatp,0

    goto_priv(PRIV_VS);
    80019a56:	4509                	li	a0,2
    80019a58:	c16e70ef          	jal	80000e6e <goto_priv>

    //特权模式在VS模式下，执行取指相关指令，设置vsatp=0（禁用VS阶段翻译），hgatp配置sv39模式，G阶段地址翻译一级页表项无效，pte.v=0
    vaddr = vs_page_base(VSI_GI);
    TEST_SETUP_EXCEPT();
    80019a5c:	b16e70ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019a60:	400197b7          	lui	a5,0x40019
    80019a64:	078a                	slli	a5,a5,0x2
    80019a66:	00037417          	auipc	s0,0x37
    80019a6a:	5aa40413          	addi	s0,s0,1450 # 80051010 <excpt>
    80019a6e:	00000297          	auipc	t0,0x0
    80019a72:	00c28293          	addi	t0,t0,12 # 80019a7a <instruction_guest_page_fault_5+0x62>
    80019a76:	02543c23          	sd	t0,56(s0)
    80019a7a:	8782                	jr	a5


    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019a7c:	08200593          	li	a1,130
    80019a80:	0001a617          	auipc	a2,0x1a
    80019a84:	c5060613          	addi	a2,a2,-944 # 800336d0 <__func__.0+0x66b0>
    80019a88:	00014517          	auipc	a0,0x14
    80019a8c:	89050513          	addi	a0,a0,-1904 # 8002d318 <__func__.0+0x2f8>
    80019a90:	32a110ef          	jal	8002adba <printf>
    80019a94:	00037797          	auipc	a5,0x37
    80019a98:	57d7c783          	lbu	a5,1405(a5) # 80051011 <excpt+0x1>
    80019a9c:	00014597          	auipc	a1,0x14
    80019aa0:	85458593          	addi	a1,a1,-1964 # 8002d2f0 <__func__.0+0x2d0>
    80019aa4:	cf89                	beqz	a5,80019abe <instruction_guest_page_fault_5+0xa6>
    80019aa6:	6418                	ld	a4,8(s0)
    80019aa8:	47d1                	li	a5,20
    80019aaa:	00014597          	auipc	a1,0x14
    80019aae:	83658593          	addi	a1,a1,-1994 # 8002d2e0 <__func__.0+0x2c0>
    80019ab2:	00f70663          	beq	a4,a5,80019abe <instruction_guest_page_fault_5+0xa6>
    80019ab6:	00014597          	auipc	a1,0x14
    80019aba:	83a58593          	addi	a1,a1,-1990 # 8002d2f0 <__func__.0+0x2d0>
    80019abe:	00014517          	auipc	a0,0x14
    80019ac2:	87250513          	addi	a0,a0,-1934 # 8002d330 <__func__.0+0x310>
    80019ac6:	2f4110ef          	jal	8002adba <printf>
    80019aca:	00037797          	auipc	a5,0x37
    80019ace:	5477c783          	lbu	a5,1351(a5) # 80051011 <excpt+0x1>
    80019ad2:	c789                	beqz	a5,80019adc <instruction_guest_page_fault_5+0xc4>
    80019ad4:	6418                	ld	a4,8(s0)
    80019ad6:	47d1                	li	a5,20
    80019ad8:	00f70c63          	beq	a4,a5,80019af0 <instruction_guest_page_fault_5+0xd8>
    80019adc:	00014517          	auipc	a0,0x14
    80019ae0:	85c50513          	addi	a0,a0,-1956 # 8002d338 <__func__.0+0x318>
    80019ae4:	2d6110ef          	jal	8002adba <printf>
    80019ae8:	02900513          	li	a0,41
    80019aec:	7bd0f0ef          	jal	80029aa8 <putchar>
    80019af0:	4529                	li	a0,10
    80019af2:	7b70f0ef          	jal	80029aa8 <putchar>
    80019af6:	00037497          	auipc	s1,0x37
    80019afa:	51b4c483          	lbu	s1,1307(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019afe:	00013597          	auipc	a1,0x13
    80019b02:	7f258593          	addi	a1,a1,2034 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019b06:	cc91                	beqz	s1,80019b22 <instruction_guest_page_fault_5+0x10a>
    80019b08:	6418                	ld	a4,8(s0)
    80019b0a:	47d1                	li	a5,20
    TEST_END();
    80019b0c:	00013597          	auipc	a1,0x13
    80019b10:	7d458593          	addi	a1,a1,2004 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode fetche instruction when the only second-stage address translation and pte.v=0 leads to IGPF",
    80019b14:	00f70763          	beq	a4,a5,80019b22 <instruction_guest_page_fault_5+0x10a>
    80019b18:	4481                	li	s1,0
    TEST_END();
    80019b1a:	00013597          	auipc	a1,0x13
    80019b1e:	7d658593          	addi	a1,a1,2006 # 8002d2f0 <__func__.0+0x2d0>
    80019b22:	00014517          	auipc	a0,0x14
    80019b26:	87650513          	addi	a0,a0,-1930 # 8002d398 <__func__.0+0x378>
    80019b2a:	290110ef          	jal	8002adba <printf>
    80019b2e:	4511                	li	a0,4
    80019b30:	b3ee70ef          	jal	80000e6e <goto_priv>
    80019b34:	c57e70ef          	jal	8000178a <reset_state>

}
    80019b38:	60e2                	ld	ra,24(sp)
    80019b3a:	6442                	ld	s0,16(sp)
    80019b3c:	8526                	mv	a0,s1
    80019b3e:	64a2                	ld	s1,8(sp)
    80019b40:	6105                	addi	sp,sp,32
    80019b42:	8082                	ret

0000000080019b44 <instruction_guest_page_fault_6>:



bool instruction_guest_page_fault_6(){
    80019b44:	1141                	addi	sp,sp,-16

    TEST_START();
    80019b46:	00012597          	auipc	a1,0x12
    80019b4a:	71258593          	addi	a1,a1,1810 # 8002c258 <__func__.1>
    80019b4e:	00013517          	auipc	a0,0x13
    80019b52:	7b250513          	addi	a0,a0,1970 # 8002d300 <__func__.0+0x2e0>
bool instruction_guest_page_fault_6(){
    80019b56:	e406                	sd	ra,8(sp)
    80019b58:	e022                	sd	s0,0(sp)
    TEST_START();
    80019b5a:	260110ef          	jal	8002adba <printf>
    80019b5e:	4529                	li	a0,10
    80019b60:	7490f0ef          	jal	80029aa8 <putchar>
    // CSRS(CSR_VSSTATUS, SSTATUS_SUM);
    // CSRS(CSR_MSTATUS, SSTATUS_SUM);


    goto_priv(PRIV_HS);
    80019b64:	450d                	li	a0,3
    80019b66:	b08e70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80019b6a:	a77e60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019b6e:	e0fe60ef          	jal	8000097c <hpt_init>
    vspt_init();
    80019b72:	bb1e60ef          	jal	80000722 <vspt_init>

    uintptr_t vaddr;
    uintptr_t addr ;


    goto_priv(PRIV_VS);
    80019b76:	4509                	li	a0,2
    80019b78:	af6e70ef          	jal	80000e6e <goto_priv>

    //执行取指指令时，在VS模式下
    vaddr = vs_page_base(VSRWX_GURWX);
    
    TEST_SETUP_EXCEPT();
    80019b7c:	9f6e70ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019b80:	4785                	li	a5,1
    80019b82:	1782                	slli	a5,a5,0x20
    80019b84:	00037717          	auipc	a4,0x37
    80019b88:	48c70713          	addi	a4,a4,1164 # 80051010 <excpt>
    80019b8c:	00000297          	auipc	t0,0x0
    80019b90:	00c28293          	addi	t0,t0,12 # 80019b98 <instruction_guest_page_fault_6+0x54>
    80019b94:	02573c23          	sd	t0,56(a4)
    80019b98:	8782                	jr	a5

    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019b9a:	08200593          	li	a1,130
    80019b9e:	0001a617          	auipc	a2,0x1a
    80019ba2:	b9a60613          	addi	a2,a2,-1126 # 80033738 <__func__.0+0x6718>
    80019ba6:	00013517          	auipc	a0,0x13
    80019baa:	77250513          	addi	a0,a0,1906 # 8002d318 <__func__.0+0x2f8>
    80019bae:	20c110ef          	jal	8002adba <printf>
    80019bb2:	00037797          	auipc	a5,0x37
    80019bb6:	45f7c783          	lbu	a5,1119(a5) # 80051011 <excpt+0x1>
    80019bba:	00013597          	auipc	a1,0x13
    80019bbe:	72658593          	addi	a1,a1,1830 # 8002d2e0 <__func__.0+0x2c0>
    80019bc2:	c789                	beqz	a5,80019bcc <instruction_guest_page_fault_6+0x88>
    80019bc4:	00013597          	auipc	a1,0x13
    80019bc8:	72c58593          	addi	a1,a1,1836 # 8002d2f0 <__func__.0+0x2d0>
    80019bcc:	00013517          	auipc	a0,0x13
    80019bd0:	76450513          	addi	a0,a0,1892 # 8002d330 <__func__.0+0x310>
    80019bd4:	1e6110ef          	jal	8002adba <printf>
    80019bd8:	00037797          	auipc	a5,0x37
    80019bdc:	4397c783          	lbu	a5,1081(a5) # 80051011 <excpt+0x1>
    80019be0:	e7a1                	bnez	a5,80019c28 <instruction_guest_page_fault_6+0xe4>
    80019be2:	4529                	li	a0,10
    80019be4:	6c50f0ef          	jal	80029aa8 <putchar>
    80019be8:	00037797          	auipc	a5,0x37
    80019bec:	4297c783          	lbu	a5,1065(a5) # 80051011 <excpt+0x1>
    80019bf0:	e795                	bnez	a5,80019c1c <instruction_guest_page_fault_6+0xd8>
    80019bf2:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    80019bf4:	00013597          	auipc	a1,0x13
    80019bf8:	6ec58593          	addi	a1,a1,1772 # 8002d2e0 <__func__.0+0x2c0>
    80019bfc:	00013517          	auipc	a0,0x13
    80019c00:	79c50513          	addi	a0,a0,1948 # 8002d398 <__func__.0+0x378>
    80019c04:	1b6110ef          	jal	8002adba <printf>
    80019c08:	4511                	li	a0,4
    80019c0a:	a64e70ef          	jal	80000e6e <goto_priv>
    80019c0e:	b7de70ef          	jal	8000178a <reset_state>
}
    80019c12:	60a2                	ld	ra,8(sp)
    80019c14:	8522                	mv	a0,s0
    80019c16:	6402                	ld	s0,0(sp)
    80019c18:	0141                	addi	sp,sp,16
    80019c1a:	8082                	ret
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019c1c:	4401                	li	s0,0
    TEST_END();
    80019c1e:	00013597          	auipc	a1,0x13
    80019c22:	6d258593          	addi	a1,a1,1746 # 8002d2f0 <__func__.0+0x2d0>
    80019c26:	bfd9                	j	80019bfc <instruction_guest_page_fault_6+0xb8>
    TEST_ASSERT("vs mode fetche instruction successful when pte.x=1",
    80019c28:	00013517          	auipc	a0,0x13
    80019c2c:	71050513          	addi	a0,a0,1808 # 8002d338 <__func__.0+0x318>
    80019c30:	18a110ef          	jal	8002adba <printf>
    80019c34:	02900513          	li	a0,41
    80019c38:	6710f0ef          	jal	80029aa8 <putchar>
    80019c3c:	b75d                	j	80019be2 <instruction_guest_page_fault_6+0x9e>

0000000080019c3e <instruction_guest_page_fault_7>:

bool instruction_guest_page_fault_7(){
    80019c3e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019c40:	00012597          	auipc	a1,0x12
    80019c44:	63858593          	addi	a1,a1,1592 # 8002c278 <__func__.0>
    80019c48:	00013517          	auipc	a0,0x13
    80019c4c:	6b850513          	addi	a0,a0,1720 # 8002d300 <__func__.0+0x2e0>
bool instruction_guest_page_fault_7(){
    80019c50:	ec06                	sd	ra,24(sp)
    80019c52:	e822                	sd	s0,16(sp)
    80019c54:	e426                	sd	s1,8(sp)
    TEST_START();
    80019c56:	164110ef          	jal	8002adba <printf>
    80019c5a:	4529                	li	a0,10
    80019c5c:	64d0f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    80019c60:	450d                	li	a0,3
    80019c62:	a0ce70ef          	jal	80000e6e <goto_priv>
    hspt_init();
    80019c66:	97be60ef          	jal	800005e0 <hspt_init>
    hpt_init();
    80019c6a:	d13e60ef          	jal	8000097c <hpt_init>
    vspt_init();
    80019c6e:	ab5e60ef          	jal	80000722 <vspt_init>


    uintptr_t vaddr;
    uintptr_t addr ;

    goto_priv(PRIV_VS);
    80019c72:	4509                	li	a0,2
    80019c74:	9fae70ef          	jal	80000e6e <goto_priv>


    //执行取指指令二级地址翻译阶段时，pte.x=0
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80019c78:	8fae70ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019c7c:	400137b7          	lui	a5,0x40013
    80019c80:	078a                	slli	a5,a5,0x2
    80019c82:	00037417          	auipc	s0,0x37
    80019c86:	38e40413          	addi	s0,s0,910 # 80051010 <excpt>
    80019c8a:	00000297          	auipc	t0,0x0
    80019c8e:	00c28293          	addi	t0,t0,12 # 80019c96 <instruction_guest_page_fault_7+0x58>
    80019c92:	02543c23          	sd	t0,56(s0)
    80019c96:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019c98:	08200593          	li	a1,130
    80019c9c:	0001a617          	auipc	a2,0x1a
    80019ca0:	ad460613          	addi	a2,a2,-1324 # 80033770 <__func__.0+0x6750>
    80019ca4:	00013517          	auipc	a0,0x13
    80019ca8:	67450513          	addi	a0,a0,1652 # 8002d318 <__func__.0+0x2f8>
    80019cac:	10e110ef          	jal	8002adba <printf>
    80019cb0:	00037797          	auipc	a5,0x37
    80019cb4:	3617c783          	lbu	a5,865(a5) # 80051011 <excpt+0x1>
    80019cb8:	00013597          	auipc	a1,0x13
    80019cbc:	63858593          	addi	a1,a1,1592 # 8002d2f0 <__func__.0+0x2d0>
    80019cc0:	cf89                	beqz	a5,80019cda <instruction_guest_page_fault_7+0x9c>
    80019cc2:	6418                	ld	a4,8(s0)
    80019cc4:	47d1                	li	a5,20
    80019cc6:	00013597          	auipc	a1,0x13
    80019cca:	61a58593          	addi	a1,a1,1562 # 8002d2e0 <__func__.0+0x2c0>
    80019cce:	00f70663          	beq	a4,a5,80019cda <instruction_guest_page_fault_7+0x9c>
    80019cd2:	00013597          	auipc	a1,0x13
    80019cd6:	61e58593          	addi	a1,a1,1566 # 8002d2f0 <__func__.0+0x2d0>
    80019cda:	00013517          	auipc	a0,0x13
    80019cde:	65650513          	addi	a0,a0,1622 # 8002d330 <__func__.0+0x310>
    80019ce2:	0d8110ef          	jal	8002adba <printf>
    80019ce6:	00037797          	auipc	a5,0x37
    80019cea:	32b7c783          	lbu	a5,811(a5) # 80051011 <excpt+0x1>
    80019cee:	c789                	beqz	a5,80019cf8 <instruction_guest_page_fault_7+0xba>
    80019cf0:	6418                	ld	a4,8(s0)
    80019cf2:	47d1                	li	a5,20
    80019cf4:	00f70c63          	beq	a4,a5,80019d0c <instruction_guest_page_fault_7+0xce>
    80019cf8:	00013517          	auipc	a0,0x13
    80019cfc:	64050513          	addi	a0,a0,1600 # 8002d338 <__func__.0+0x318>
    80019d00:	0ba110ef          	jal	8002adba <printf>
    80019d04:	02900513          	li	a0,41
    80019d08:	5a10f0ef          	jal	80029aa8 <putchar>
    80019d0c:	4529                	li	a0,10
    80019d0e:	59b0f0ef          	jal	80029aa8 <putchar>
    80019d12:	00037797          	auipc	a5,0x37
    80019d16:	2ff7c783          	lbu	a5,767(a5) # 80051011 <excpt+0x1>
    80019d1a:	4481                	li	s1,0
    80019d1c:	c789                	beqz	a5,80019d26 <instruction_guest_page_fault_7+0xe8>
    80019d1e:	6404                	ld	s1,8(s0)
    80019d20:	14b1                	addi	s1,s1,-20
    80019d22:	0014b493          	seqz	s1,s1
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_SETUP_EXCEPT();
    80019d26:	84ce70ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    80019d2a:	400137b7          	lui	a5,0x40013
    80019d2e:	078a                	slli	a5,a5,0x2
    80019d30:	00000297          	auipc	t0,0x0
    80019d34:	00c28293          	addi	t0,t0,12 # 80019d3c <instruction_guest_page_fault_7+0xfe>
    80019d38:	02543c23          	sd	t0,56(s0)
    80019d3c:	8782                	jr	a5

    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019d3e:	08200593          	li	a1,130
    80019d42:	0001a617          	auipc	a2,0x1a
    80019d46:	a9660613          	addi	a2,a2,-1386 # 800337d8 <__func__.0+0x67b8>
    80019d4a:	00013517          	auipc	a0,0x13
    80019d4e:	5ce50513          	addi	a0,a0,1486 # 8002d318 <__func__.0+0x2f8>
    80019d52:	068110ef          	jal	8002adba <printf>
    80019d56:	00037797          	auipc	a5,0x37
    80019d5a:	2bb7c783          	lbu	a5,699(a5) # 80051011 <excpt+0x1>
    80019d5e:	00013597          	auipc	a1,0x13
    80019d62:	59258593          	addi	a1,a1,1426 # 8002d2f0 <__func__.0+0x2d0>
    80019d66:	cf89                	beqz	a5,80019d80 <instruction_guest_page_fault_7+0x142>
    80019d68:	6418                	ld	a4,8(s0)
    80019d6a:	47d1                	li	a5,20
    80019d6c:	00013597          	auipc	a1,0x13
    80019d70:	57458593          	addi	a1,a1,1396 # 8002d2e0 <__func__.0+0x2c0>
    80019d74:	00f70663          	beq	a4,a5,80019d80 <instruction_guest_page_fault_7+0x142>
    80019d78:	00013597          	auipc	a1,0x13
    80019d7c:	57858593          	addi	a1,a1,1400 # 8002d2f0 <__func__.0+0x2d0>
    80019d80:	00013517          	auipc	a0,0x13
    80019d84:	5b050513          	addi	a0,a0,1456 # 8002d330 <__func__.0+0x310>
    80019d88:	032110ef          	jal	8002adba <printf>
    80019d8c:	00037797          	auipc	a5,0x37
    80019d90:	2857c783          	lbu	a5,645(a5) # 80051011 <excpt+0x1>
    80019d94:	c789                	beqz	a5,80019d9e <instruction_guest_page_fault_7+0x160>
    80019d96:	6418                	ld	a4,8(s0)
    80019d98:	47d1                	li	a5,20
    80019d9a:	00f70c63          	beq	a4,a5,80019db2 <instruction_guest_page_fault_7+0x174>
    80019d9e:	00013517          	auipc	a0,0x13
    80019da2:	59a50513          	addi	a0,a0,1434 # 8002d338 <__func__.0+0x318>
    80019da6:	014110ef          	jal	8002adba <printf>
    80019daa:	02900513          	li	a0,41
    80019dae:	4fb0f0ef          	jal	80029aa8 <putchar>
    80019db2:	4529                	li	a0,10
    80019db4:	4f50f0ef          	jal	80029aa8 <putchar>
    80019db8:	c095                	beqz	s1,80019ddc <instruction_guest_page_fault_7+0x19e>
    80019dba:	00037497          	auipc	s1,0x37
    80019dbe:	2574c483          	lbu	s1,599(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );

    TEST_END();
    80019dc2:	00013597          	auipc	a1,0x13
    80019dc6:	52e58593          	addi	a1,a1,1326 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019dca:	cc91                	beqz	s1,80019de6 <instruction_guest_page_fault_7+0x1a8>
    80019dcc:	6418                	ld	a4,8(s0)
    80019dce:	47d1                	li	a5,20
    TEST_END();
    80019dd0:	00013597          	auipc	a1,0x13
    80019dd4:	51058593          	addi	a1,a1,1296 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode second fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80019dd8:	00f70763          	beq	a4,a5,80019de6 <instruction_guest_page_fault_7+0x1a8>
    80019ddc:	4481                	li	s1,0
    TEST_END();
    80019dde:	00013597          	auipc	a1,0x13
    80019de2:	51258593          	addi	a1,a1,1298 # 8002d2f0 <__func__.0+0x2d0>
    80019de6:	00013517          	auipc	a0,0x13
    80019dea:	5b250513          	addi	a0,a0,1458 # 8002d398 <__func__.0+0x378>
    80019dee:	7cd100ef          	jal	8002adba <printf>
    80019df2:	4511                	li	a0,4
    80019df4:	87ae70ef          	jal	80000e6e <goto_priv>
    80019df8:	993e70ef          	jal	8000178a <reset_state>
    80019dfc:	60e2                	ld	ra,24(sp)
    80019dfe:	6442                	ld	s0,16(sp)
    80019e00:	8526                	mv	a0,s1
    80019e02:	64a2                	ld	s1,8(sp)
    80019e04:	6105                	addi	sp,sp,32
    80019e06:	8082                	ret

0000000080019e08 <load_access_fault_1>:
#include <page_tables.h>




bool load_access_fault_1(){
    80019e08:	1101                	addi	sp,sp,-32

    TEST_START();
    80019e0a:	00012597          	auipc	a1,0x12
    80019e0e:	48e58593          	addi	a1,a1,1166 # 8002c298 <__func__.39>
    80019e12:	00013517          	auipc	a0,0x13
    80019e16:	4ee50513          	addi	a0,a0,1262 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_1(){
    80019e1a:	ec06                	sd	ra,24(sp)
    80019e1c:	e822                	sd	s0,16(sp)
    80019e1e:	e426                	sd	s1,8(sp)
    TEST_START();
    80019e20:	79b100ef          	jal	8002adba <printf>
    80019e24:	4529                	li	a0,10
    80019e26:	4830f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    80019e2a:	4511                	li	a0,4
    80019e2c:	842e70ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019e30:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位（清除）
    80019e34:	10000793          	li	a5,256
    80019e38:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019e3c:	20000793          	li	a5,512
    80019e40:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019e44:	40000793          	li	a5,1024
    80019e48:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019e4c:	6785                	lui	a5,0x1
    80019e4e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019e52:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    80019e56:	4785                	li	a5,1
    80019e58:	07fe                	slli	a5,a5,0x1f
    80019e5a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    80019e5e:	08100793          	li	a5,129
    80019e62:	07e2                	slli	a5,a5,0x18
    80019e64:	3b179073          	csrw	pmpaddr1,a5
    // sfence();
    // hfence();
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    80019e68:	67a1                	lui	a5,0x8
    80019e6a:	3a07a073          	csrs	pmpcfg0,a5
    
    TEST_SETUP_EXCEPT();
    80019e6e:	f05e60ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80019e72:	4785                	li	a5,1
    80019e74:	1786                	slli	a5,a5,0x21
    80019e76:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    80019e7a:	00078783          	lb	a5,0(a5)

    lb(0x80000100UL << 2);    //访问区域内地址


    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019e7e:	08200593          	li	a1,130
    80019e82:	0001a617          	auipc	a2,0x1a
    80019e86:	9be60613          	addi	a2,a2,-1602 # 80033840 <__func__.0+0x6820>
    80019e8a:	00013517          	auipc	a0,0x13
    80019e8e:	48e50513          	addi	a0,a0,1166 # 8002d318 <__func__.0+0x2f8>
    80019e92:	729100ef          	jal	8002adba <printf>
    80019e96:	00037797          	auipc	a5,0x37
    80019e9a:	17b7c783          	lbu	a5,379(a5) # 80051011 <excpt+0x1>
    80019e9e:	00037497          	auipc	s1,0x37
    80019ea2:	17248493          	addi	s1,s1,370 # 80051010 <excpt>
    80019ea6:	00013597          	auipc	a1,0x13
    80019eaa:	44a58593          	addi	a1,a1,1098 # 8002d2f0 <__func__.0+0x2d0>
    80019eae:	cf89                	beqz	a5,80019ec8 <load_access_fault_1+0xc0>
    80019eb0:	6498                	ld	a4,8(s1)
    80019eb2:	4795                	li	a5,5
    80019eb4:	00013597          	auipc	a1,0x13
    80019eb8:	42c58593          	addi	a1,a1,1068 # 8002d2e0 <__func__.0+0x2c0>
    80019ebc:	00f70663          	beq	a4,a5,80019ec8 <load_access_fault_1+0xc0>
    80019ec0:	00013597          	auipc	a1,0x13
    80019ec4:	43058593          	addi	a1,a1,1072 # 8002d2f0 <__func__.0+0x2d0>
    80019ec8:	00013517          	auipc	a0,0x13
    80019ecc:	46850513          	addi	a0,a0,1128 # 8002d330 <__func__.0+0x310>
    80019ed0:	6eb100ef          	jal	8002adba <printf>
    80019ed4:	00037797          	auipc	a5,0x37
    80019ed8:	13d7c783          	lbu	a5,317(a5) # 80051011 <excpt+0x1>
    80019edc:	c789                	beqz	a5,80019ee6 <load_access_fault_1+0xde>
    80019ede:	6498                	ld	a4,8(s1)
    80019ee0:	4795                	li	a5,5
    80019ee2:	00f70c63          	beq	a4,a5,80019efa <load_access_fault_1+0xf2>
    80019ee6:	00013517          	auipc	a0,0x13
    80019eea:	45250513          	addi	a0,a0,1106 # 8002d338 <__func__.0+0x318>
    80019eee:	6cd100ef          	jal	8002adba <printf>
    80019ef2:	02900513          	li	a0,41
    80019ef6:	3b30f0ef          	jal	80029aa8 <putchar>
    80019efa:	4529                	li	a0,10
    80019efc:	3ad0f0ef          	jal	80029aa8 <putchar>
    80019f00:	00037417          	auipc	s0,0x37
    80019f04:	11144403          	lbu	s0,273(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    80019f08:	00013597          	auipc	a1,0x13
    80019f0c:	3e858593          	addi	a1,a1,1000 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019f10:	cc11                	beqz	s0,80019f2c <load_access_fault_1+0x124>
    80019f12:	6498                	ld	a4,8(s1)
    80019f14:	4795                	li	a5,5
    TEST_END();
    80019f16:	00013597          	auipc	a1,0x13
    80019f1a:	3ca58593          	addi	a1,a1,970 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("m mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",        //预期产生load access fault
    80019f1e:	00f70763          	beq	a4,a5,80019f2c <load_access_fault_1+0x124>
    80019f22:	4401                	li	s0,0
    TEST_END();
    80019f24:	00013597          	auipc	a1,0x13
    80019f28:	3cc58593          	addi	a1,a1,972 # 8002d2f0 <__func__.0+0x2d0>
    80019f2c:	00013517          	auipc	a0,0x13
    80019f30:	46c50513          	addi	a0,a0,1132 # 8002d398 <__func__.0+0x378>
    80019f34:	687100ef          	jal	8002adba <printf>
    80019f38:	4511                	li	a0,4
    80019f3a:	f35e60ef          	jal	80000e6e <goto_priv>
    80019f3e:	84de70ef          	jal	8000178a <reset_state>
}
    80019f42:	60e2                	ld	ra,24(sp)
    80019f44:	8522                	mv	a0,s0
    80019f46:	6442                	ld	s0,16(sp)
    80019f48:	64a2                	ld	s1,8(sp)
    80019f4a:	6105                	addi	sp,sp,32
    80019f4c:	8082                	ret

0000000080019f4e <load_access_fault_2>:

bool load_access_fault_2(){
    80019f4e:	1101                	addi	sp,sp,-32

    TEST_START();
    80019f50:	00012597          	auipc	a1,0x12
    80019f54:	36058593          	addi	a1,a1,864 # 8002c2b0 <__func__.38>
    80019f58:	00013517          	auipc	a0,0x13
    80019f5c:	3a850513          	addi	a0,a0,936 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_2(){
    80019f60:	ec06                	sd	ra,24(sp)
    80019f62:	e822                	sd	s0,16(sp)
    80019f64:	e426                	sd	s1,8(sp)
    TEST_START();
    80019f66:	655100ef          	jal	8002adba <printf>
    80019f6a:	4529                	li	a0,10
    80019f6c:	33d0f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    80019f70:	4511                	li	a0,4
    80019f72:	efde60ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0

    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    80019f76:	3a005073          	csrwi	pmpcfg0,0

    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    80019f7a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    80019f7e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    80019f82:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    80019f86:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    80019f8a:	10000793          	li	a5,256
    80019f8e:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    80019f92:	20000793          	li	a5,512
    80019f96:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    80019f9a:	40000793          	li	a5,1024
    80019f9e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    80019fa2:	6785                	lui	a5,0x1
    80019fa4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    80019fa8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, 0x88000000UL);
    80019fac:	47c5                	li	a5,17
    80019fae:	07ee                	slli	a5,a5,0x1b
    80019fb0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, 0x89000000UL);
    80019fb4:	08900793          	li	a5,137
    80019fb8:	07e2                	slli	a5,a5,0x18
    80019fba:	3b179073          	csrw	pmpaddr1,a5


    CSRS(CSR_PMPCFG0,1ULL << 7 );       //pmp0cfg的L位 
    80019fbe:	08000793          	li	a5,128
    80019fc2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );      //pmp1cfg的L位 
    80019fc6:	67a1                	lui	a5,0x8
    80019fc8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    80019fcc:	450d                	li	a0,3
    80019fce:	ea1e60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    80019fd2:	da1e60ef          	jal	80000d72 <test_setup_except_function>
    80019fd6:	008817b7          	lui	a5,0x881
    80019fda:	07aa                	slli	a5,a5,0xa
    80019fdc:	00078783          	lb	a5,0(a5) # 881000 <STACK_SIZE+0x781000>

    lb(0x88100000UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    80019fe0:	08200593          	li	a1,130
    80019fe4:	0001a617          	auipc	a2,0x1a
    80019fe8:	89460613          	addi	a2,a2,-1900 # 80033878 <__func__.0+0x6858>
    80019fec:	00013517          	auipc	a0,0x13
    80019ff0:	32c50513          	addi	a0,a0,812 # 8002d318 <__func__.0+0x2f8>
    80019ff4:	5c7100ef          	jal	8002adba <printf>
    80019ff8:	00037797          	auipc	a5,0x37
    80019ffc:	0197c783          	lbu	a5,25(a5) # 80051011 <excpt+0x1>
    8001a000:	00037497          	auipc	s1,0x37
    8001a004:	01048493          	addi	s1,s1,16 # 80051010 <excpt>
    8001a008:	00013597          	auipc	a1,0x13
    8001a00c:	2e858593          	addi	a1,a1,744 # 8002d2f0 <__func__.0+0x2d0>
    8001a010:	cf89                	beqz	a5,8001a02a <load_access_fault_2+0xdc>
    8001a012:	6498                	ld	a4,8(s1)
    8001a014:	4795                	li	a5,5
    8001a016:	00013597          	auipc	a1,0x13
    8001a01a:	2ca58593          	addi	a1,a1,714 # 8002d2e0 <__func__.0+0x2c0>
    8001a01e:	00f70663          	beq	a4,a5,8001a02a <load_access_fault_2+0xdc>
    8001a022:	00013597          	auipc	a1,0x13
    8001a026:	2ce58593          	addi	a1,a1,718 # 8002d2f0 <__func__.0+0x2d0>
    8001a02a:	00013517          	auipc	a0,0x13
    8001a02e:	30650513          	addi	a0,a0,774 # 8002d330 <__func__.0+0x310>
    8001a032:	589100ef          	jal	8002adba <printf>
    8001a036:	00037797          	auipc	a5,0x37
    8001a03a:	fdb7c783          	lbu	a5,-37(a5) # 80051011 <excpt+0x1>
    8001a03e:	c789                	beqz	a5,8001a048 <load_access_fault_2+0xfa>
    8001a040:	6498                	ld	a4,8(s1)
    8001a042:	4795                	li	a5,5
    8001a044:	00f70c63          	beq	a4,a5,8001a05c <load_access_fault_2+0x10e>
    8001a048:	00013517          	auipc	a0,0x13
    8001a04c:	2f050513          	addi	a0,a0,752 # 8002d338 <__func__.0+0x318>
    8001a050:	56b100ef          	jal	8002adba <printf>
    8001a054:	02900513          	li	a0,41
    8001a058:	2510f0ef          	jal	80029aa8 <putchar>
    8001a05c:	4529                	li	a0,10
    8001a05e:	24b0f0ef          	jal	80029aa8 <putchar>
    8001a062:	00037417          	auipc	s0,0x37
    8001a066:	faf44403          	lbu	s0,-81(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a06a:	00013597          	auipc	a1,0x13
    8001a06e:	28658593          	addi	a1,a1,646 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a072:	cc11                	beqz	s0,8001a08e <load_access_fault_2+0x140>
    8001a074:	6498                	ld	a4,8(s1)
    8001a076:	4795                	li	a5,5
    TEST_END();
    8001a078:	00013597          	auipc	a1,0x13
    8001a07c:	26858593          	addi	a1,a1,616 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a080:	00f70763          	beq	a4,a5,8001a08e <load_access_fault_2+0x140>
    8001a084:	4401                	li	s0,0
    TEST_END();
    8001a086:	00013597          	auipc	a1,0x13
    8001a08a:	26a58593          	addi	a1,a1,618 # 8002d2f0 <__func__.0+0x2d0>
    8001a08e:	00013517          	auipc	a0,0x13
    8001a092:	30a50513          	addi	a0,a0,778 # 8002d398 <__func__.0+0x378>
    8001a096:	525100ef          	jal	8002adba <printf>
    8001a09a:	4511                	li	a0,4
    8001a09c:	dd3e60ef          	jal	80000e6e <goto_priv>
    8001a0a0:	eeae70ef          	jal	8000178a <reset_state>
}
    8001a0a4:	60e2                	ld	ra,24(sp)
    8001a0a6:	8522                	mv	a0,s0
    8001a0a8:	6442                	ld	s0,16(sp)
    8001a0aa:	64a2                	ld	s1,8(sp)
    8001a0ac:	6105                	addi	sp,sp,32
    8001a0ae:	8082                	ret

000000008001a0b0 <load_access_fault_3>:


bool load_access_fault_3(){
    8001a0b0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a0b2:	00012597          	auipc	a1,0x12
    8001a0b6:	21658593          	addi	a1,a1,534 # 8002c2c8 <__func__.37>
    8001a0ba:	00013517          	auipc	a0,0x13
    8001a0be:	24650513          	addi	a0,a0,582 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_3(){
    8001a0c2:	ec06                	sd	ra,24(sp)
    8001a0c4:	e822                	sd	s0,16(sp)
    8001a0c6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a0c8:	4f3100ef          	jal	8002adba <printf>
    8001a0cc:	4529                	li	a0,10
    8001a0ce:	1db0f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001a0d2:	4511                	li	a0,4
    8001a0d4:	d9be60ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a0d8:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a0dc:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a0e0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a0e4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a0e8:	3a046073          	csrsi	pmpcfg0,8

    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a0ec:	10000793          	li	a5,256
    8001a0f0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a0f4:	20000793          	li	a5,512
    8001a0f8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a0fc:	40000793          	li	a5,1024
    8001a100:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a104:	6785                	lui	a5,0x1
    8001a106:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a10a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a10e:	4785                	li	a5,1
    8001a110:	07fe                	slli	a5,a5,0x1f
    8001a112:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a116:	08100793          	li	a5,129
    8001a11a:	07e2                	slli	a5,a5,0x18
    8001a11c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a120:	08000793          	li	a5,128
    8001a124:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a128:	67a1                	lui	a5,0x8
    8001a12a:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a12e:	4505                	li	a0,1
    8001a130:	d3fe60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a134:	c3fe60ef          	jal	80000d72 <test_setup_except_function>
    8001a138:	4785                	li	a5,1
    8001a13a:	1786                	slli	a5,a5,0x21
    8001a13c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a140:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a144:	08200593          	li	a1,130
    8001a148:	00019617          	auipc	a2,0x19
    8001a14c:	76860613          	addi	a2,a2,1896 # 800338b0 <__func__.0+0x6890>
    8001a150:	00013517          	auipc	a0,0x13
    8001a154:	1c850513          	addi	a0,a0,456 # 8002d318 <__func__.0+0x2f8>
    8001a158:	463100ef          	jal	8002adba <printf>
    8001a15c:	00037797          	auipc	a5,0x37
    8001a160:	eb57c783          	lbu	a5,-331(a5) # 80051011 <excpt+0x1>
    8001a164:	00037497          	auipc	s1,0x37
    8001a168:	eac48493          	addi	s1,s1,-340 # 80051010 <excpt>
    8001a16c:	00013597          	auipc	a1,0x13
    8001a170:	18458593          	addi	a1,a1,388 # 8002d2f0 <__func__.0+0x2d0>
    8001a174:	cf89                	beqz	a5,8001a18e <load_access_fault_3+0xde>
    8001a176:	6498                	ld	a4,8(s1)
    8001a178:	4795                	li	a5,5
    8001a17a:	00013597          	auipc	a1,0x13
    8001a17e:	16658593          	addi	a1,a1,358 # 8002d2e0 <__func__.0+0x2c0>
    8001a182:	00f70663          	beq	a4,a5,8001a18e <load_access_fault_3+0xde>
    8001a186:	00013597          	auipc	a1,0x13
    8001a18a:	16a58593          	addi	a1,a1,362 # 8002d2f0 <__func__.0+0x2d0>
    8001a18e:	00013517          	auipc	a0,0x13
    8001a192:	1a250513          	addi	a0,a0,418 # 8002d330 <__func__.0+0x310>
    8001a196:	425100ef          	jal	8002adba <printf>
    8001a19a:	00037797          	auipc	a5,0x37
    8001a19e:	e777c783          	lbu	a5,-393(a5) # 80051011 <excpt+0x1>
    8001a1a2:	c789                	beqz	a5,8001a1ac <load_access_fault_3+0xfc>
    8001a1a4:	6498                	ld	a4,8(s1)
    8001a1a6:	4795                	li	a5,5
    8001a1a8:	00f70c63          	beq	a4,a5,8001a1c0 <load_access_fault_3+0x110>
    8001a1ac:	00013517          	auipc	a0,0x13
    8001a1b0:	18c50513          	addi	a0,a0,396 # 8002d338 <__func__.0+0x318>
    8001a1b4:	407100ef          	jal	8002adba <printf>
    8001a1b8:	02900513          	li	a0,41
    8001a1bc:	0ed0f0ef          	jal	80029aa8 <putchar>
    8001a1c0:	4529                	li	a0,10
    8001a1c2:	0e70f0ef          	jal	80029aa8 <putchar>
    8001a1c6:	00037417          	auipc	s0,0x37
    8001a1ca:	e4b44403          	lbu	s0,-437(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a1ce:	00013597          	auipc	a1,0x13
    8001a1d2:	12258593          	addi	a1,a1,290 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a1d6:	cc11                	beqz	s0,8001a1f2 <load_access_fault_3+0x142>
    8001a1d8:	6498                	ld	a4,8(s1)
    8001a1da:	4795                	li	a5,5
    TEST_END();
    8001a1dc:	00013597          	auipc	a1,0x13
    8001a1e0:	10458593          	addi	a1,a1,260 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a1e4:	00f70763          	beq	a4,a5,8001a1f2 <load_access_fault_3+0x142>
    8001a1e8:	4401                	li	s0,0
    TEST_END();
    8001a1ea:	00013597          	auipc	a1,0x13
    8001a1ee:	10658593          	addi	a1,a1,262 # 8002d2f0 <__func__.0+0x2d0>
    8001a1f2:	00013517          	auipc	a0,0x13
    8001a1f6:	1a650513          	addi	a0,a0,422 # 8002d398 <__func__.0+0x378>
    8001a1fa:	3c1100ef          	jal	8002adba <printf>
    8001a1fe:	4511                	li	a0,4
    8001a200:	c6fe60ef          	jal	80000e6e <goto_priv>
    8001a204:	d86e70ef          	jal	8000178a <reset_state>
}
    8001a208:	60e2                	ld	ra,24(sp)
    8001a20a:	8522                	mv	a0,s0
    8001a20c:	6442                	ld	s0,16(sp)
    8001a20e:	64a2                	ld	s1,8(sp)
    8001a210:	6105                	addi	sp,sp,32
    8001a212:	8082                	ret

000000008001a214 <load_access_fault_4>:

bool load_access_fault_4(){
    8001a214:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a216:	00012597          	auipc	a1,0x12
    8001a21a:	0ca58593          	addi	a1,a1,202 # 8002c2e0 <__func__.36>
    8001a21e:	00013517          	auipc	a0,0x13
    8001a222:	0e250513          	addi	a0,a0,226 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_4(){
    8001a226:	ec06                	sd	ra,24(sp)
    8001a228:	e822                	sd	s0,16(sp)
    8001a22a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a22c:	38f100ef          	jal	8002adba <printf>
    8001a230:	4529                	li	a0,10
    8001a232:	0770f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001a236:	4511                	li	a0,4
    8001a238:	c37e60ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a23c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a240:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a244:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a248:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a24c:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a250:	10000793          	li	a5,256
    8001a254:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a258:	20000793          	li	a5,512
    8001a25c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a260:	40000793          	li	a5,1024
    8001a264:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a268:	6785                	lui	a5,0x1
    8001a26a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a26e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a272:	4785                	li	a5,1
    8001a274:	07fe                	slli	a5,a5,0x1f
    8001a276:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a27a:	08100793          	li	a5,129
    8001a27e:	07e2                	slli	a5,a5,0x18
    8001a280:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a284:	08000793          	li	a5,128
    8001a288:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a28c:	67a1                	lui	a5,0x8
    8001a28e:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a292:	4501                	li	a0,0
    8001a294:	bdbe60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a298:	adbe60ef          	jal	80000d72 <test_setup_except_function>
    8001a29c:	4785                	li	a5,1
    8001a29e:	1786                	slli	a5,a5,0x21
    8001a2a0:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a2a4:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a2a8:	08200593          	li	a1,130
    8001a2ac:	00019617          	auipc	a2,0x19
    8001a2b0:	63c60613          	addi	a2,a2,1596 # 800338e8 <__func__.0+0x68c8>
    8001a2b4:	00013517          	auipc	a0,0x13
    8001a2b8:	06450513          	addi	a0,a0,100 # 8002d318 <__func__.0+0x2f8>
    8001a2bc:	2ff100ef          	jal	8002adba <printf>
    8001a2c0:	00037797          	auipc	a5,0x37
    8001a2c4:	d517c783          	lbu	a5,-687(a5) # 80051011 <excpt+0x1>
    8001a2c8:	00037497          	auipc	s1,0x37
    8001a2cc:	d4848493          	addi	s1,s1,-696 # 80051010 <excpt>
    8001a2d0:	00013597          	auipc	a1,0x13
    8001a2d4:	02058593          	addi	a1,a1,32 # 8002d2f0 <__func__.0+0x2d0>
    8001a2d8:	cf89                	beqz	a5,8001a2f2 <load_access_fault_4+0xde>
    8001a2da:	6498                	ld	a4,8(s1)
    8001a2dc:	4795                	li	a5,5
    8001a2de:	00013597          	auipc	a1,0x13
    8001a2e2:	00258593          	addi	a1,a1,2 # 8002d2e0 <__func__.0+0x2c0>
    8001a2e6:	00f70663          	beq	a4,a5,8001a2f2 <load_access_fault_4+0xde>
    8001a2ea:	00013597          	auipc	a1,0x13
    8001a2ee:	00658593          	addi	a1,a1,6 # 8002d2f0 <__func__.0+0x2d0>
    8001a2f2:	00013517          	auipc	a0,0x13
    8001a2f6:	03e50513          	addi	a0,a0,62 # 8002d330 <__func__.0+0x310>
    8001a2fa:	2c1100ef          	jal	8002adba <printf>
    8001a2fe:	00037797          	auipc	a5,0x37
    8001a302:	d137c783          	lbu	a5,-749(a5) # 80051011 <excpt+0x1>
    8001a306:	c789                	beqz	a5,8001a310 <load_access_fault_4+0xfc>
    8001a308:	6498                	ld	a4,8(s1)
    8001a30a:	4795                	li	a5,5
    8001a30c:	00f70c63          	beq	a4,a5,8001a324 <load_access_fault_4+0x110>
    8001a310:	00013517          	auipc	a0,0x13
    8001a314:	02850513          	addi	a0,a0,40 # 8002d338 <__func__.0+0x318>
    8001a318:	2a3100ef          	jal	8002adba <printf>
    8001a31c:	02900513          	li	a0,41
    8001a320:	7880f0ef          	jal	80029aa8 <putchar>
    8001a324:	4529                	li	a0,10
    8001a326:	7820f0ef          	jal	80029aa8 <putchar>
    8001a32a:	00037417          	auipc	s0,0x37
    8001a32e:	ce744403          	lbu	s0,-793(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a332:	00013597          	auipc	a1,0x13
    8001a336:	fbe58593          	addi	a1,a1,-66 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a33a:	cc11                	beqz	s0,8001a356 <load_access_fault_4+0x142>
    8001a33c:	6498                	ld	a4,8(s1)
    8001a33e:	4795                	li	a5,5
    TEST_END();
    8001a340:	00013597          	auipc	a1,0x13
    8001a344:	fa058593          	addi	a1,a1,-96 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=1 leads to LAF",
    8001a348:	00f70763          	beq	a4,a5,8001a356 <load_access_fault_4+0x142>
    8001a34c:	4401                	li	s0,0
    TEST_END();
    8001a34e:	00013597          	auipc	a1,0x13
    8001a352:	fa258593          	addi	a1,a1,-94 # 8002d2f0 <__func__.0+0x2d0>
    8001a356:	00013517          	auipc	a0,0x13
    8001a35a:	04250513          	addi	a0,a0,66 # 8002d398 <__func__.0+0x378>
    8001a35e:	25d100ef          	jal	8002adba <printf>
    8001a362:	4511                	li	a0,4
    8001a364:	b0be60ef          	jal	80000e6e <goto_priv>
    8001a368:	c22e70ef          	jal	8000178a <reset_state>
}
    8001a36c:	60e2                	ld	ra,24(sp)
    8001a36e:	8522                	mv	a0,s0
    8001a370:	6442                	ld	s0,16(sp)
    8001a372:	64a2                	ld	s1,8(sp)
    8001a374:	6105                	addi	sp,sp,32
    8001a376:	8082                	ret

000000008001a378 <load_access_fault_5>:

bool load_access_fault_5(){
    8001a378:	1141                	addi	sp,sp,-16

    TEST_START();
    8001a37a:	00012597          	auipc	a1,0x12
    8001a37e:	f7e58593          	addi	a1,a1,-130 # 8002c2f8 <__func__.35>
    8001a382:	00013517          	auipc	a0,0x13
    8001a386:	f7e50513          	addi	a0,a0,-130 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_5(){
    8001a38a:	e406                	sd	ra,8(sp)
    8001a38c:	e022                	sd	s0,0(sp)
    TEST_START();
    8001a38e:	22d100ef          	jal	8002adba <printf>
    8001a392:	4529                	li	a0,10
    8001a394:	7140f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001a398:	4511                	li	a0,4
    8001a39a:	ad5e60ef          	jal	80000e6e <goto_priv>
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));
    8001a39e:	3a0025f3          	csrr	a1,pmpcfg0
    8001a3a2:	00019517          	auipc	a0,0x19
    8001a3a6:	57e50513          	addi	a0,a0,1406 # 80033920 <__func__.0+0x6900>
    8001a3aa:	211100ef          	jal	8002adba <printf>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a3ae:	3a005073          	csrwi	pmpcfg0,0
    
    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a3b2:	10000793          	li	a5,256
    8001a3b6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a3ba:	20000793          	li	a5,512
    8001a3be:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a3c2:	40000793          	li	a5,1024
    8001a3c6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a3ca:	6785                	lui	a5,0x1
    8001a3cc:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a3d0:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a3d4:	4785                	li	a5,1
    8001a3d6:	07fe                	slli	a5,a5,0x1f
    8001a3d8:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a3dc:	08100793          	li	a5,129
    8001a3e0:	07e2                	slli	a5,a5,0x18
    8001a3e2:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a3e6:	67a1                	lui	a5,0x8
    8001a3e8:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001a3ec:	987e60ef          	jal	80000d72 <test_setup_except_function>
    8001a3f0:	4785                	li	a5,1
    8001a3f2:	1786                	slli	a5,a5,0x21
    8001a3f4:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a3f8:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    printf("%d\n",excpt.triggered);
    8001a3fc:	00037597          	auipc	a1,0x37
    8001a400:	c155c583          	lbu	a1,-1003(a1) # 80051011 <excpt+0x1>
    8001a404:	00014517          	auipc	a0,0x14
    8001a408:	a8450513          	addi	a0,a0,-1404 # 8002de88 <__func__.0+0xe68>
    8001a40c:	1af100ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001a410:	00037597          	auipc	a1,0x37
    8001a414:	c085b583          	ld	a1,-1016(a1) # 80051018 <excpt+0x8>
    8001a418:	00014517          	auipc	a0,0x14
    8001a41c:	a7050513          	addi	a0,a0,-1424 # 8002de88 <__func__.0+0xe68>
    8001a420:	19b100ef          	jal	8002adba <printf>



    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a424:	08200593          	li	a1,130
    8001a428:	00019617          	auipc	a2,0x19
    8001a42c:	50860613          	addi	a2,a2,1288 # 80033930 <__func__.0+0x6910>
    8001a430:	00013517          	auipc	a0,0x13
    8001a434:	ee850513          	addi	a0,a0,-280 # 8002d318 <__func__.0+0x2f8>
    8001a438:	183100ef          	jal	8002adba <printf>
    8001a43c:	00037797          	auipc	a5,0x37
    8001a440:	bd57c783          	lbu	a5,-1067(a5) # 80051011 <excpt+0x1>
    8001a444:	00013597          	auipc	a1,0x13
    8001a448:	e9c58593          	addi	a1,a1,-356 # 8002d2e0 <__func__.0+0x2c0>
    8001a44c:	c789                	beqz	a5,8001a456 <load_access_fault_5+0xde>
    8001a44e:	00013597          	auipc	a1,0x13
    8001a452:	ea258593          	addi	a1,a1,-350 # 8002d2f0 <__func__.0+0x2d0>
    8001a456:	00013517          	auipc	a0,0x13
    8001a45a:	eda50513          	addi	a0,a0,-294 # 8002d330 <__func__.0+0x310>
    8001a45e:	15d100ef          	jal	8002adba <printf>
    8001a462:	00037797          	auipc	a5,0x37
    8001a466:	baf7c783          	lbu	a5,-1105(a5) # 80051011 <excpt+0x1>
    8001a46a:	e7a1                	bnez	a5,8001a4b2 <load_access_fault_5+0x13a>
    8001a46c:	4529                	li	a0,10
    8001a46e:	63a0f0ef          	jal	80029aa8 <putchar>
    8001a472:	00037797          	auipc	a5,0x37
    8001a476:	b9f7c783          	lbu	a5,-1121(a5) # 80051011 <excpt+0x1>
    8001a47a:	e795                	bnez	a5,8001a4a6 <load_access_fault_5+0x12e>
    8001a47c:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001a47e:	00013597          	auipc	a1,0x13
    8001a482:	e6258593          	addi	a1,a1,-414 # 8002d2e0 <__func__.0+0x2c0>
    8001a486:	00013517          	auipc	a0,0x13
    8001a48a:	f1250513          	addi	a0,a0,-238 # 8002d398 <__func__.0+0x378>
    8001a48e:	12d100ef          	jal	8002adba <printf>
    8001a492:	4511                	li	a0,4
    8001a494:	9dbe60ef          	jal	80000e6e <goto_priv>
    8001a498:	af2e70ef          	jal	8000178a <reset_state>
}
    8001a49c:	60a2                	ld	ra,8(sp)
    8001a49e:	8522                	mv	a0,s0
    8001a4a0:	6402                	ld	s0,0(sp)
    8001a4a2:	0141                	addi	sp,sp,16
    8001a4a4:	8082                	ret
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a4a6:	4401                	li	s0,0
    TEST_END();
    8001a4a8:	00013597          	auipc	a1,0x13
    8001a4ac:	e4858593          	addi	a1,a1,-440 # 8002d2f0 <__func__.0+0x2d0>
    8001a4b0:	bfd9                	j	8001a486 <load_access_fault_5+0x10e>
    TEST_ASSERT("m mode lb successful when pmpcfg.R=0 and pmpcfg.L=0 ",
    8001a4b2:	00013517          	auipc	a0,0x13
    8001a4b6:	e8650513          	addi	a0,a0,-378 # 8002d338 <__func__.0+0x318>
    8001a4ba:	101100ef          	jal	8002adba <printf>
    8001a4be:	02900513          	li	a0,41
    8001a4c2:	5e60f0ef          	jal	80029aa8 <putchar>
    8001a4c6:	b75d                	j	8001a46c <load_access_fault_5+0xf4>

000000008001a4c8 <load_access_fault_6>:


bool load_access_fault_6(){
    8001a4c8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a4ca:	00012597          	auipc	a1,0x12
    8001a4ce:	e4658593          	addi	a1,a1,-442 # 8002c310 <__func__.34>
    8001a4d2:	00013517          	auipc	a0,0x13
    8001a4d6:	e2e50513          	addi	a0,a0,-466 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_6(){
    8001a4da:	ec06                	sd	ra,24(sp)
    8001a4dc:	e822                	sd	s0,16(sp)
    8001a4de:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a4e0:	0db100ef          	jal	8002adba <printf>
    8001a4e4:	4529                	li	a0,10
    8001a4e6:	5c20f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001a4ea:	4511                	li	a0,4
    8001a4ec:	983e60ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a4f0:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a4f4:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a4f8:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a4fc:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a500:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a504:	10000793          	li	a5,256
    8001a508:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a50c:	20000793          	li	a5,512
    8001a510:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a514:	40000793          	li	a5,1024
    8001a518:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a51c:	6785                	lui	a5,0x1
    8001a51e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a522:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a526:	4785                	li	a5,1
    8001a528:	07fe                	slli	a5,a5,0x1f
    8001a52a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a52e:	08100793          	li	a5,129
    8001a532:	07e2                	slli	a5,a5,0x18
    8001a534:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );           //pmp0cfg的L位 
    8001a538:	08000793          	li	a5,128
    8001a53c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );          //pmp1cfg的L位 
    8001a540:	67a1                	lui	a5,0x8
    8001a542:	3a07b073          	csrc	pmpcfg0,a5

    printf("%llx\n",CSRR(CSR_PMPADDR0));
    8001a546:	3b0025f3          	csrr	a1,pmpaddr0
    8001a54a:	00019517          	auipc	a0,0x19
    8001a54e:	3de50513          	addi	a0,a0,990 # 80033928 <__func__.0+0x6908>
    8001a552:	069100ef          	jal	8002adba <printf>
    printf("%llx\n",CSRR(CSR_PMPADDR1));
    8001a556:	3b1025f3          	csrr	a1,pmpaddr1
    8001a55a:	00019517          	auipc	a0,0x19
    8001a55e:	3ce50513          	addi	a0,a0,974 # 80033928 <__func__.0+0x6908>
    8001a562:	059100ef          	jal	8002adba <printf>
    goto_priv(PRIV_HS);
    8001a566:	450d                	li	a0,3
    8001a568:	907e60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a56c:	807e60ef          	jal	80000d72 <test_setup_except_function>
    8001a570:	4785                	li	a5,1
    8001a572:	1786                	slli	a5,a5,0x21
    8001a574:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a578:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a57c:	08200593          	li	a1,130
    8001a580:	00019617          	auipc	a2,0x19
    8001a584:	3e860613          	addi	a2,a2,1000 # 80033968 <__func__.0+0x6948>
    8001a588:	00013517          	auipc	a0,0x13
    8001a58c:	d9050513          	addi	a0,a0,-624 # 8002d318 <__func__.0+0x2f8>
    8001a590:	02b100ef          	jal	8002adba <printf>
    8001a594:	00037797          	auipc	a5,0x37
    8001a598:	a7d7c783          	lbu	a5,-1411(a5) # 80051011 <excpt+0x1>
    8001a59c:	00037497          	auipc	s1,0x37
    8001a5a0:	a7448493          	addi	s1,s1,-1420 # 80051010 <excpt>
    8001a5a4:	00013597          	auipc	a1,0x13
    8001a5a8:	d4c58593          	addi	a1,a1,-692 # 8002d2f0 <__func__.0+0x2d0>
    8001a5ac:	cf89                	beqz	a5,8001a5c6 <load_access_fault_6+0xfe>
    8001a5ae:	6498                	ld	a4,8(s1)
    8001a5b0:	4795                	li	a5,5
    8001a5b2:	00013597          	auipc	a1,0x13
    8001a5b6:	d2e58593          	addi	a1,a1,-722 # 8002d2e0 <__func__.0+0x2c0>
    8001a5ba:	00f70663          	beq	a4,a5,8001a5c6 <load_access_fault_6+0xfe>
    8001a5be:	00013597          	auipc	a1,0x13
    8001a5c2:	d3258593          	addi	a1,a1,-718 # 8002d2f0 <__func__.0+0x2d0>
    8001a5c6:	00013517          	auipc	a0,0x13
    8001a5ca:	d6a50513          	addi	a0,a0,-662 # 8002d330 <__func__.0+0x310>
    8001a5ce:	7ec100ef          	jal	8002adba <printf>
    8001a5d2:	00037797          	auipc	a5,0x37
    8001a5d6:	a3f7c783          	lbu	a5,-1473(a5) # 80051011 <excpt+0x1>
    8001a5da:	c789                	beqz	a5,8001a5e4 <load_access_fault_6+0x11c>
    8001a5dc:	6498                	ld	a4,8(s1)
    8001a5de:	4795                	li	a5,5
    8001a5e0:	00f70c63          	beq	a4,a5,8001a5f8 <load_access_fault_6+0x130>
    8001a5e4:	00013517          	auipc	a0,0x13
    8001a5e8:	d5450513          	addi	a0,a0,-684 # 8002d338 <__func__.0+0x318>
    8001a5ec:	7ce100ef          	jal	8002adba <printf>
    8001a5f0:	02900513          	li	a0,41
    8001a5f4:	4b40f0ef          	jal	80029aa8 <putchar>
    8001a5f8:	4529                	li	a0,10
    8001a5fa:	4ae0f0ef          	jal	80029aa8 <putchar>
    8001a5fe:	00037417          	auipc	s0,0x37
    8001a602:	a1344403          	lbu	s0,-1517(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a606:	00013597          	auipc	a1,0x13
    8001a60a:	cea58593          	addi	a1,a1,-790 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a60e:	cc11                	beqz	s0,8001a62a <load_access_fault_6+0x162>
    8001a610:	6498                	ld	a4,8(s1)
    8001a612:	4795                	li	a5,5
    TEST_END();
    8001a614:	00013597          	auipc	a1,0x13
    8001a618:	ccc58593          	addi	a1,a1,-820 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a61c:	00f70763          	beq	a4,a5,8001a62a <load_access_fault_6+0x162>
    8001a620:	4401                	li	s0,0
    TEST_END();
    8001a622:	00013597          	auipc	a1,0x13
    8001a626:	cce58593          	addi	a1,a1,-818 # 8002d2f0 <__func__.0+0x2d0>
    8001a62a:	00013517          	auipc	a0,0x13
    8001a62e:	d6e50513          	addi	a0,a0,-658 # 8002d398 <__func__.0+0x378>
    8001a632:	788100ef          	jal	8002adba <printf>
    8001a636:	4511                	li	a0,4
    8001a638:	837e60ef          	jal	80000e6e <goto_priv>
    8001a63c:	94ee70ef          	jal	8000178a <reset_state>
}
    8001a640:	60e2                	ld	ra,24(sp)
    8001a642:	8522                	mv	a0,s0
    8001a644:	6442                	ld	s0,16(sp)
    8001a646:	64a2                	ld	s1,8(sp)
    8001a648:	6105                	addi	sp,sp,32
    8001a64a:	8082                	ret

000000008001a64c <load_access_fault_7>:


bool load_access_fault_7(){
    8001a64c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a64e:	00012597          	auipc	a1,0x12
    8001a652:	cda58593          	addi	a1,a1,-806 # 8002c328 <__func__.33>
    8001a656:	00013517          	auipc	a0,0x13
    8001a65a:	caa50513          	addi	a0,a0,-854 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_7(){
    8001a65e:	ec06                	sd	ra,24(sp)
    8001a660:	e822                	sd	s0,16(sp)
    8001a662:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a664:	756100ef          	jal	8002adba <printf>
    8001a668:	4529                	li	a0,10
    8001a66a:	43e0f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001a66e:	4511                	li	a0,4
    8001a670:	ffee60ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a674:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a678:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a67c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a680:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a684:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a688:	10000793          	li	a5,256
    8001a68c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a690:	20000793          	li	a5,512
    8001a694:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a698:	40000793          	li	a5,1024
    8001a69c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a6a0:	6785                	lui	a5,0x1
    8001a6a2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a6a6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a6aa:	4785                	li	a5,1
    8001a6ac:	07fe                	slli	a5,a5,0x1f
    8001a6ae:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a6b2:	08100793          	li	a5,129
    8001a6b6:	07e2                	slli	a5,a5,0x18
    8001a6b8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a6bc:	08000793          	li	a5,128
    8001a6c0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a6c4:	67a1                	lui	a5,0x8
    8001a6c6:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001a6ca:	4505                	li	a0,1
    8001a6cc:	fa2e60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a6d0:	ea2e60ef          	jal	80000d72 <test_setup_except_function>
    8001a6d4:	4785                	li	a5,1
    8001a6d6:	1786                	slli	a5,a5,0x21
    8001a6d8:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a6dc:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a6e0:	08200593          	li	a1,130
    8001a6e4:	00019617          	auipc	a2,0x19
    8001a6e8:	2bc60613          	addi	a2,a2,700 # 800339a0 <__func__.0+0x6980>
    8001a6ec:	00013517          	auipc	a0,0x13
    8001a6f0:	c2c50513          	addi	a0,a0,-980 # 8002d318 <__func__.0+0x2f8>
    8001a6f4:	6c6100ef          	jal	8002adba <printf>
    8001a6f8:	00037797          	auipc	a5,0x37
    8001a6fc:	9197c783          	lbu	a5,-1767(a5) # 80051011 <excpt+0x1>
    8001a700:	00037497          	auipc	s1,0x37
    8001a704:	91048493          	addi	s1,s1,-1776 # 80051010 <excpt>
    8001a708:	00013597          	auipc	a1,0x13
    8001a70c:	be858593          	addi	a1,a1,-1048 # 8002d2f0 <__func__.0+0x2d0>
    8001a710:	cf89                	beqz	a5,8001a72a <load_access_fault_7+0xde>
    8001a712:	6498                	ld	a4,8(s1)
    8001a714:	4795                	li	a5,5
    8001a716:	00013597          	auipc	a1,0x13
    8001a71a:	bca58593          	addi	a1,a1,-1078 # 8002d2e0 <__func__.0+0x2c0>
    8001a71e:	00f70663          	beq	a4,a5,8001a72a <load_access_fault_7+0xde>
    8001a722:	00013597          	auipc	a1,0x13
    8001a726:	bce58593          	addi	a1,a1,-1074 # 8002d2f0 <__func__.0+0x2d0>
    8001a72a:	00013517          	auipc	a0,0x13
    8001a72e:	c0650513          	addi	a0,a0,-1018 # 8002d330 <__func__.0+0x310>
    8001a732:	688100ef          	jal	8002adba <printf>
    8001a736:	00037797          	auipc	a5,0x37
    8001a73a:	8db7c783          	lbu	a5,-1829(a5) # 80051011 <excpt+0x1>
    8001a73e:	c789                	beqz	a5,8001a748 <load_access_fault_7+0xfc>
    8001a740:	6498                	ld	a4,8(s1)
    8001a742:	4795                	li	a5,5
    8001a744:	00f70c63          	beq	a4,a5,8001a75c <load_access_fault_7+0x110>
    8001a748:	00013517          	auipc	a0,0x13
    8001a74c:	bf050513          	addi	a0,a0,-1040 # 8002d338 <__func__.0+0x318>
    8001a750:	66a100ef          	jal	8002adba <printf>
    8001a754:	02900513          	li	a0,41
    8001a758:	3500f0ef          	jal	80029aa8 <putchar>
    8001a75c:	4529                	li	a0,10
    8001a75e:	34a0f0ef          	jal	80029aa8 <putchar>
    8001a762:	00037417          	auipc	s0,0x37
    8001a766:	8af44403          	lbu	s0,-1873(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a76a:	00013597          	auipc	a1,0x13
    8001a76e:	b8658593          	addi	a1,a1,-1146 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a772:	cc11                	beqz	s0,8001a78e <load_access_fault_7+0x142>
    8001a774:	6498                	ld	a4,8(s1)
    8001a776:	4795                	li	a5,5
    TEST_END();
    8001a778:	00013597          	auipc	a1,0x13
    8001a77c:	b6858593          	addi	a1,a1,-1176 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a780:	00f70763          	beq	a4,a5,8001a78e <load_access_fault_7+0x142>
    8001a784:	4401                	li	s0,0
    TEST_END();
    8001a786:	00013597          	auipc	a1,0x13
    8001a78a:	b6a58593          	addi	a1,a1,-1174 # 8002d2f0 <__func__.0+0x2d0>
    8001a78e:	00013517          	auipc	a0,0x13
    8001a792:	c0a50513          	addi	a0,a0,-1014 # 8002d398 <__func__.0+0x378>
    8001a796:	624100ef          	jal	8002adba <printf>
    8001a79a:	4511                	li	a0,4
    8001a79c:	ed2e60ef          	jal	80000e6e <goto_priv>
    8001a7a0:	febe60ef          	jal	8000178a <reset_state>
}
    8001a7a4:	60e2                	ld	ra,24(sp)
    8001a7a6:	8522                	mv	a0,s0
    8001a7a8:	6442                	ld	s0,16(sp)
    8001a7aa:	64a2                	ld	s1,8(sp)
    8001a7ac:	6105                	addi	sp,sp,32
    8001a7ae:	8082                	ret

000000008001a7b0 <load_access_fault_8>:

bool load_access_fault_8(){
    8001a7b0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a7b2:	00012597          	auipc	a1,0x12
    8001a7b6:	b8e58593          	addi	a1,a1,-1138 # 8002c340 <__func__.32>
    8001a7ba:	00013517          	auipc	a0,0x13
    8001a7be:	b4650513          	addi	a0,a0,-1210 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_8(){
    8001a7c2:	ec06                	sd	ra,24(sp)
    8001a7c4:	e822                	sd	s0,16(sp)
    8001a7c6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a7c8:	5f2100ef          	jal	8002adba <printf>
    8001a7cc:	4529                	li	a0,10
    8001a7ce:	2da0f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001a7d2:	4511                	li	a0,4
    8001a7d4:	e9ae60ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.R=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a7d8:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a7dc:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a7e0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a7e4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a7e8:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a7ec:	10000793          	li	a5,256
    8001a7f0:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a7f4:	20000793          	li	a5,512
    8001a7f8:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a7fc:	40000793          	li	a5,1024
    8001a800:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a804:	6785                	lui	a5,0x1
    8001a806:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a80a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a80e:	4785                	li	a5,1
    8001a810:	07fe                	slli	a5,a5,0x1f
    8001a812:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a816:	08100793          	li	a5,129
    8001a81a:	07e2                	slli	a5,a5,0x18
    8001a81c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a820:	08000793          	li	a5,128
    8001a824:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a828:	67a1                	lui	a5,0x8
    8001a82a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a82e:	4501                	li	a0,0
    8001a830:	e3ee60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a834:	d3ee60ef          	jal	80000d72 <test_setup_except_function>
    8001a838:	4785                	li	a5,1
    8001a83a:	1786                	slli	a5,a5,0x21
    8001a83c:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001a840:	00078783          	lb	a5,0(a5)
    
    lb(0x80000100UL << 2);

    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a844:	08200593          	li	a1,130
    8001a848:	00019617          	auipc	a2,0x19
    8001a84c:	19060613          	addi	a2,a2,400 # 800339d8 <__func__.0+0x69b8>
    8001a850:	00013517          	auipc	a0,0x13
    8001a854:	ac850513          	addi	a0,a0,-1336 # 8002d318 <__func__.0+0x2f8>
    8001a858:	562100ef          	jal	8002adba <printf>
    8001a85c:	00036797          	auipc	a5,0x36
    8001a860:	7b57c783          	lbu	a5,1973(a5) # 80051011 <excpt+0x1>
    8001a864:	00036497          	auipc	s1,0x36
    8001a868:	7ac48493          	addi	s1,s1,1964 # 80051010 <excpt>
    8001a86c:	00013597          	auipc	a1,0x13
    8001a870:	a8458593          	addi	a1,a1,-1404 # 8002d2f0 <__func__.0+0x2d0>
    8001a874:	cf89                	beqz	a5,8001a88e <load_access_fault_8+0xde>
    8001a876:	6498                	ld	a4,8(s1)
    8001a878:	4795                	li	a5,5
    8001a87a:	00013597          	auipc	a1,0x13
    8001a87e:	a6658593          	addi	a1,a1,-1434 # 8002d2e0 <__func__.0+0x2c0>
    8001a882:	00f70663          	beq	a4,a5,8001a88e <load_access_fault_8+0xde>
    8001a886:	00013597          	auipc	a1,0x13
    8001a88a:	a6a58593          	addi	a1,a1,-1430 # 8002d2f0 <__func__.0+0x2d0>
    8001a88e:	00013517          	auipc	a0,0x13
    8001a892:	aa250513          	addi	a0,a0,-1374 # 8002d330 <__func__.0+0x310>
    8001a896:	524100ef          	jal	8002adba <printf>
    8001a89a:	00036797          	auipc	a5,0x36
    8001a89e:	7777c783          	lbu	a5,1911(a5) # 80051011 <excpt+0x1>
    8001a8a2:	c789                	beqz	a5,8001a8ac <load_access_fault_8+0xfc>
    8001a8a4:	6498                	ld	a4,8(s1)
    8001a8a6:	4795                	li	a5,5
    8001a8a8:	00f70c63          	beq	a4,a5,8001a8c0 <load_access_fault_8+0x110>
    8001a8ac:	00013517          	auipc	a0,0x13
    8001a8b0:	a8c50513          	addi	a0,a0,-1396 # 8002d338 <__func__.0+0x318>
    8001a8b4:	506100ef          	jal	8002adba <printf>
    8001a8b8:	02900513          	li	a0,41
    8001a8bc:	1ec0f0ef          	jal	80029aa8 <putchar>
    8001a8c0:	4529                	li	a0,10
    8001a8c2:	1e60f0ef          	jal	80029aa8 <putchar>
    8001a8c6:	00036417          	auipc	s0,0x36
    8001a8ca:	74b44403          	lbu	s0,1867(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001a8ce:	00013597          	auipc	a1,0x13
    8001a8d2:	a2258593          	addi	a1,a1,-1502 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a8d6:	cc11                	beqz	s0,8001a8f2 <load_access_fault_8+0x142>
    8001a8d8:	6498                	ld	a4,8(s1)
    8001a8da:	4795                	li	a5,5
    TEST_END();
    8001a8dc:	00013597          	auipc	a1,0x13
    8001a8e0:	a0458593          	addi	a1,a1,-1532 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.R=0 and pmpcfg.L=0 leads to LAF",
    8001a8e4:	00f70763          	beq	a4,a5,8001a8f2 <load_access_fault_8+0x142>
    8001a8e8:	4401                	li	s0,0
    TEST_END();
    8001a8ea:	00013597          	auipc	a1,0x13
    8001a8ee:	a0658593          	addi	a1,a1,-1530 # 8002d2f0 <__func__.0+0x2d0>
    8001a8f2:	00013517          	auipc	a0,0x13
    8001a8f6:	aa650513          	addi	a0,a0,-1370 # 8002d398 <__func__.0+0x378>
    8001a8fa:	4c0100ef          	jal	8002adba <printf>
    8001a8fe:	4511                	li	a0,4
    8001a900:	d6ee60ef          	jal	80000e6e <goto_priv>
    8001a904:	e87e60ef          	jal	8000178a <reset_state>
}
    8001a908:	60e2                	ld	ra,24(sp)
    8001a90a:	8522                	mv	a0,s0
    8001a90c:	6442                	ld	s0,16(sp)
    8001a90e:	64a2                	ld	s1,8(sp)
    8001a910:	6105                	addi	sp,sp,32
    8001a912:	8082                	ret

000000008001a914 <load_access_fault_9>:

bool load_access_fault_9(){
    8001a914:	1101                	addi	sp,sp,-32

    TEST_START();
    8001a916:	00012597          	auipc	a1,0x12
    8001a91a:	a4258593          	addi	a1,a1,-1470 # 8002c358 <__func__.31>
    8001a91e:	00013517          	auipc	a0,0x13
    8001a922:	9e250513          	addi	a0,a0,-1566 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_9(){
    8001a926:	ec06                	sd	ra,24(sp)
    8001a928:	e822                	sd	s0,16(sp)
    8001a92a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001a92c:	48e100ef          	jal	8002adba <printf>
    8001a930:	4529                	li	a0,10
    8001a932:	1760f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001a936:	4511                	li	a0,4
    8001a938:	d36e60ef          	jal	80000e6e <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001a93c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001a940:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001a944:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001a948:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001a94c:	3a046073          	csrsi	pmpcfg0,8


    CSRC(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001a950:	10000793          	li	a5,256
    8001a954:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001a958:	20000793          	li	a5,512
    8001a95c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001a960:	40000793          	li	a5,1024
    8001a964:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001a968:	6785                	lui	a5,0x1
    8001a96a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001a96e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001a972:	4785                	li	a5,1
    8001a974:	07fe                	slli	a5,a5,0x1f
    8001a976:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001a97a:	08100793          	li	a5,129
    8001a97e:	07e2                	slli	a5,a5,0x18
    8001a980:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001a984:	08000793          	li	a5,128
    8001a988:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001a98c:	67a1                	lui	a5,0x8
    8001a98e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001a992:	4501                	li	a0,0
    8001a994:	cdae60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001a998:	bdae60ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(ld, "ld", uint64_t);
    8001a99c:	4785                	li	a5,1
    8001a99e:	178e                	slli	a5,a5,0x23
    8001a9a0:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001a9a2:	0007b783          	ld	a5,0(a5)
    
    ld(0x1fffffffeUL << 2);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001a9a6:	08200593          	li	a1,130
    8001a9aa:	00019617          	auipc	a2,0x19
    8001a9ae:	06660613          	addi	a2,a2,102 # 80033a10 <__func__.0+0x69f0>
    8001a9b2:	00013517          	auipc	a0,0x13
    8001a9b6:	96650513          	addi	a0,a0,-1690 # 8002d318 <__func__.0+0x2f8>
    8001a9ba:	400100ef          	jal	8002adba <printf>
    8001a9be:	00036797          	auipc	a5,0x36
    8001a9c2:	6537c783          	lbu	a5,1619(a5) # 80051011 <excpt+0x1>
    8001a9c6:	00036497          	auipc	s1,0x36
    8001a9ca:	64a48493          	addi	s1,s1,1610 # 80051010 <excpt>
    8001a9ce:	00013597          	auipc	a1,0x13
    8001a9d2:	92258593          	addi	a1,a1,-1758 # 8002d2f0 <__func__.0+0x2d0>
    8001a9d6:	cf89                	beqz	a5,8001a9f0 <load_access_fault_9+0xdc>
    8001a9d8:	6498                	ld	a4,8(s1)
    8001a9da:	4795                	li	a5,5
    8001a9dc:	00013597          	auipc	a1,0x13
    8001a9e0:	90458593          	addi	a1,a1,-1788 # 8002d2e0 <__func__.0+0x2c0>
    8001a9e4:	00f70663          	beq	a4,a5,8001a9f0 <load_access_fault_9+0xdc>
    8001a9e8:	00013597          	auipc	a1,0x13
    8001a9ec:	90858593          	addi	a1,a1,-1784 # 8002d2f0 <__func__.0+0x2d0>
    8001a9f0:	00013517          	auipc	a0,0x13
    8001a9f4:	94050513          	addi	a0,a0,-1728 # 8002d330 <__func__.0+0x310>
    8001a9f8:	3c2100ef          	jal	8002adba <printf>
    8001a9fc:	00036797          	auipc	a5,0x36
    8001aa00:	6157c783          	lbu	a5,1557(a5) # 80051011 <excpt+0x1>
    8001aa04:	c789                	beqz	a5,8001aa0e <load_access_fault_9+0xfa>
    8001aa06:	6498                	ld	a4,8(s1)
    8001aa08:	4795                	li	a5,5
    8001aa0a:	00f70c63          	beq	a4,a5,8001aa22 <load_access_fault_9+0x10e>
    8001aa0e:	00013517          	auipc	a0,0x13
    8001aa12:	92a50513          	addi	a0,a0,-1750 # 8002d338 <__func__.0+0x318>
    8001aa16:	3a4100ef          	jal	8002adba <printf>
    8001aa1a:	02900513          	li	a0,41
    8001aa1e:	08a0f0ef          	jal	80029aa8 <putchar>
    8001aa22:	4529                	li	a0,10
    8001aa24:	0840f0ef          	jal	80029aa8 <putchar>
    8001aa28:	00036417          	auipc	s0,0x36
    8001aa2c:	5e944403          	lbu	s0,1513(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001aa30:	00013597          	auipc	a1,0x13
    8001aa34:	8c058593          	addi	a1,a1,-1856 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aa38:	cc11                	beqz	s0,8001aa54 <load_access_fault_9+0x140>
    8001aa3a:	6498                	ld	a4,8(s1)
    8001aa3c:	4795                	li	a5,5
    TEST_END();
    8001aa3e:	00013597          	auipc	a1,0x13
    8001aa42:	8a258593          	addi	a1,a1,-1886 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to laf",
    8001aa46:	00f70763          	beq	a4,a5,8001aa54 <load_access_fault_9+0x140>
    8001aa4a:	4401                	li	s0,0
    TEST_END();
    8001aa4c:	00013597          	auipc	a1,0x13
    8001aa50:	8a458593          	addi	a1,a1,-1884 # 8002d2f0 <__func__.0+0x2d0>
    8001aa54:	00013517          	auipc	a0,0x13
    8001aa58:	94450513          	addi	a0,a0,-1724 # 8002d398 <__func__.0+0x378>
    8001aa5c:	35e100ef          	jal	8002adba <printf>
    8001aa60:	4511                	li	a0,4
    8001aa62:	c0ce60ef          	jal	80000e6e <goto_priv>
    8001aa66:	d25e60ef          	jal	8000178a <reset_state>
}
    8001aa6a:	60e2                	ld	ra,24(sp)
    8001aa6c:	8522                	mv	a0,s0
    8001aa6e:	6442                	ld	s0,16(sp)
    8001aa70:	64a2                	ld	s1,8(sp)
    8001aa72:	6105                	addi	sp,sp,32
    8001aa74:	8082                	ret

000000008001aa76 <load_access_fault_10>:

bool load_access_fault_10(){
    8001aa76:	1101                	addi	sp,sp,-32

    TEST_START();
    8001aa78:	00012597          	auipc	a1,0x12
    8001aa7c:	8f858593          	addi	a1,a1,-1800 # 8002c370 <__func__.30>
    8001aa80:	00013517          	auipc	a0,0x13
    8001aa84:	88050513          	addi	a0,a0,-1920 # 8002d300 <__func__.0+0x2e0>
bool load_access_fault_10(){
    8001aa88:	ec06                	sd	ra,24(sp)
    8001aa8a:	e822                	sd	s0,16(sp)
    8001aa8c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001aa8e:	32c100ef          	jal	8002adba <printf>
    8001aa92:	4529                	li	a0,10
    8001aa94:	0140f0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001aa98:	4511                	li	a0,4
    8001aa9a:	bd4e60ef          	jal	80000e6e <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001aa9e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001aaa2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001aaa6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001aaaa:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001aaae:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001aab2:	4785                	li	a5,1
    8001aab4:	07fe                	slli	a5,a5,0x1f
    8001aab6:	3b079073          	csrw	pmpaddr0,a5
    
    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001aaba:	08000793          	li	a5,128
    8001aabe:	3a07a073          	csrs	pmpcfg0,a5

    printf("pmpcfg0=%llx \n",CSRR(CSR_PMPCFG0));
    8001aac2:	3a0025f3          	csrr	a1,pmpcfg0
    8001aac6:	00019517          	auipc	a0,0x19
    8001aaca:	fba50513          	addi	a0,a0,-70 # 80033a80 <__func__.0+0x6a60>
    8001aace:	2ec100ef          	jal	8002adba <printf>
    printf("pmpcfg2=%llx \n",CSRR(CSR_PMPCFG2));
    8001aad2:	3a2025f3          	csrr	a1,pmpcfg2
    8001aad6:	00019517          	auipc	a0,0x19
    8001aada:	fba50513          	addi	a0,a0,-70 # 80033a90 <__func__.0+0x6a70>
    8001aade:	2dc100ef          	jal	8002adba <printf>


    goto_priv(PRIV_HS);
    8001aae2:	450d                	li	a0,3
    8001aae4:	b8ae60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001aae8:	a8ae60ef          	jal	80000d72 <test_setup_except_function>
    8001aaec:	08f00793          	li	a5,143
    8001aaf0:	07ea                	slli	a5,a5,0x1a
    8001aaf2:	0007b783          	ld	a5,0(a5)

    ld(0x8f000000UL << 2);

    printf("%d\n",excpt.triggered);
    8001aaf6:	00036597          	auipc	a1,0x36
    8001aafa:	51b5c583          	lbu	a1,1307(a1) # 80051011 <excpt+0x1>
    8001aafe:	00013517          	auipc	a0,0x13
    8001ab02:	38a50513          	addi	a0,a0,906 # 8002de88 <__func__.0+0xe68>
    8001ab06:	00036417          	auipc	s0,0x36
    8001ab0a:	50a40413          	addi	s0,s0,1290 # 80051010 <excpt>
    8001ab0e:	2ac100ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001ab12:	640c                	ld	a1,8(s0)
    8001ab14:	00013517          	auipc	a0,0x13
    8001ab18:	37450513          	addi	a0,a0,884 # 8002de88 <__func__.0+0xe68>
    8001ab1c:	29e100ef          	jal	8002adba <printf>

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001ab20:	08200593          	li	a1,130
    8001ab24:	00019617          	auipc	a2,0x19
    8001ab28:	f7c60613          	addi	a2,a2,-132 # 80033aa0 <__func__.0+0x6a80>
    8001ab2c:	00012517          	auipc	a0,0x12
    8001ab30:	7ec50513          	addi	a0,a0,2028 # 8002d318 <__func__.0+0x2f8>
    8001ab34:	286100ef          	jal	8002adba <printf>
    8001ab38:	00036797          	auipc	a5,0x36
    8001ab3c:	4d97c783          	lbu	a5,1241(a5) # 80051011 <excpt+0x1>
    8001ab40:	00012597          	auipc	a1,0x12
    8001ab44:	7b058593          	addi	a1,a1,1968 # 8002d2f0 <__func__.0+0x2d0>
    8001ab48:	cf89                	beqz	a5,8001ab62 <load_access_fault_10+0xec>
    8001ab4a:	6418                	ld	a4,8(s0)
    8001ab4c:	4795                	li	a5,5
    8001ab4e:	00012597          	auipc	a1,0x12
    8001ab52:	79258593          	addi	a1,a1,1938 # 8002d2e0 <__func__.0+0x2c0>
    8001ab56:	00f70663          	beq	a4,a5,8001ab62 <load_access_fault_10+0xec>
    8001ab5a:	00012597          	auipc	a1,0x12
    8001ab5e:	79658593          	addi	a1,a1,1942 # 8002d2f0 <__func__.0+0x2d0>
    8001ab62:	00012517          	auipc	a0,0x12
    8001ab66:	7ce50513          	addi	a0,a0,1998 # 8002d330 <__func__.0+0x310>
    8001ab6a:	250100ef          	jal	8002adba <printf>
    8001ab6e:	00036797          	auipc	a5,0x36
    8001ab72:	4a37c783          	lbu	a5,1187(a5) # 80051011 <excpt+0x1>
    8001ab76:	c789                	beqz	a5,8001ab80 <load_access_fault_10+0x10a>
    8001ab78:	6418                	ld	a4,8(s0)
    8001ab7a:	4795                	li	a5,5
    8001ab7c:	00f70c63          	beq	a4,a5,8001ab94 <load_access_fault_10+0x11e>
    8001ab80:	00012517          	auipc	a0,0x12
    8001ab84:	7b850513          	addi	a0,a0,1976 # 8002d338 <__func__.0+0x318>
    8001ab88:	232100ef          	jal	8002adba <printf>
    8001ab8c:	02900513          	li	a0,41
    8001ab90:	7190e0ef          	jal	80029aa8 <putchar>
    8001ab94:	4529                	li	a0,10
    8001ab96:	7130e0ef          	jal	80029aa8 <putchar>
    8001ab9a:	00036497          	auipc	s1,0x36
    8001ab9e:	4774c483          	lbu	s1,1143(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LAF
    );


    TEST_END();
    8001aba2:	00012597          	auipc	a1,0x12
    8001aba6:	74e58593          	addi	a1,a1,1870 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001abaa:	cc91                	beqz	s1,8001abc6 <load_access_fault_10+0x150>
    8001abac:	6418                	ld	a4,8(s0)
    8001abae:	4795                	li	a5,5
    TEST_END();
    8001abb0:	00012597          	auipc	a1,0x12
    8001abb4:	73058593          	addi	a1,a1,1840 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to laf",
    8001abb8:	00f70763          	beq	a4,a5,8001abc6 <load_access_fault_10+0x150>
    8001abbc:	4481                	li	s1,0
    TEST_END();
    8001abbe:	00012597          	auipc	a1,0x12
    8001abc2:	73258593          	addi	a1,a1,1842 # 8002d2f0 <__func__.0+0x2d0>
    8001abc6:	00012517          	auipc	a0,0x12
    8001abca:	7d250513          	addi	a0,a0,2002 # 8002d398 <__func__.0+0x378>
    8001abce:	1ec100ef          	jal	8002adba <printf>
    8001abd2:	4511                	li	a0,4
    8001abd4:	a9ae60ef          	jal	80000e6e <goto_priv>
    8001abd8:	bb3e60ef          	jal	8000178a <reset_state>
}
    8001abdc:	60e2                	ld	ra,24(sp)
    8001abde:	6442                	ld	s0,16(sp)
    8001abe0:	8526                	mv	a0,s1
    8001abe2:	64a2                	ld	s1,8(sp)
    8001abe4:	6105                	addi	sp,sp,32
    8001abe6:	8082                	ret

000000008001abe8 <store_access_fault_1>:


bool store_access_fault_1(){
    8001abe8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001abea:	00011597          	auipc	a1,0x11
    8001abee:	79e58593          	addi	a1,a1,1950 # 8002c388 <__func__.29>
    8001abf2:	00012517          	auipc	a0,0x12
    8001abf6:	70e50513          	addi	a0,a0,1806 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_1(){
    8001abfa:	ec06                	sd	ra,24(sp)
    8001abfc:	e822                	sd	s0,16(sp)
    8001abfe:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ac00:	1ba100ef          	jal	8002adba <printf>
    8001ac04:	4529                	li	a0,10
    8001ac06:	6a30e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001ac0a:	4511                	li	a0,4
    8001ac0c:	a62e60ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ac10:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ac14:	10000793          	li	a5,256
    8001ac18:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ac1c:	20000793          	li	a5,512
    8001ac20:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001ac24:	40000793          	li	a5,1024
    8001ac28:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001ac2c:	6785                	lui	a5,0x1
    8001ac2e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001ac32:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001ac36:	4785                	li	a5,1
    8001ac38:	07fe                	slli	a5,a5,0x1f
    8001ac3a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ac3e:	08100793          	li	a5,129
    8001ac42:	07e2                	slli	a5,a5,0x18
    8001ac44:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ac48:	67a1                	lui	a5,0x8
    8001ac4a:	3a07a073          	csrs	pmpcfg0,a5
    asm volatile ("sfence.vma \n\t");
    8001ac4e:	12000073          	sfence.vma
    asm volatile(
    8001ac52:	22000073          	.insn	4, 0x22000073
    asm volatile(
    8001ac56:	62000073          	.insn	4, 0x62000073

    sfence();
    hfence();
    TEST_SETUP_EXCEPT();
    8001ac5a:	918e60ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sb, "sb", uint8_t);
    8001ac5e:	4785                	li	a5,1
    8001ac60:	1786                	slli	a5,a5,0x21
    8001ac62:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001ac66:	4701                	li	a4,0
    8001ac68:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2 , 0x0);

    printf("%d\n",excpt.triggered);
    8001ac6c:	00036597          	auipc	a1,0x36
    8001ac70:	3a55c583          	lbu	a1,933(a1) # 80051011 <excpt+0x1>
    8001ac74:	00013517          	auipc	a0,0x13
    8001ac78:	21450513          	addi	a0,a0,532 # 8002de88 <__func__.0+0xe68>
    8001ac7c:	00036417          	auipc	s0,0x36
    8001ac80:	39440413          	addi	s0,s0,916 # 80051010 <excpt>
    8001ac84:	136100ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001ac88:	640c                	ld	a1,8(s0)
    8001ac8a:	00013517          	auipc	a0,0x13
    8001ac8e:	1fe50513          	addi	a0,a0,510 # 8002de88 <__func__.0+0xe68>
    8001ac92:	128100ef          	jal	8002adba <printf>

    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ac96:	08200593          	li	a1,130
    8001ac9a:	00019617          	auipc	a2,0x19
    8001ac9e:	e6660613          	addi	a2,a2,-410 # 80033b00 <__func__.0+0x6ae0>
    8001aca2:	00012517          	auipc	a0,0x12
    8001aca6:	67650513          	addi	a0,a0,1654 # 8002d318 <__func__.0+0x2f8>
    8001acaa:	110100ef          	jal	8002adba <printf>
    8001acae:	00036797          	auipc	a5,0x36
    8001acb2:	3637c783          	lbu	a5,867(a5) # 80051011 <excpt+0x1>
    8001acb6:	00012597          	auipc	a1,0x12
    8001acba:	63a58593          	addi	a1,a1,1594 # 8002d2f0 <__func__.0+0x2d0>
    8001acbe:	cf89                	beqz	a5,8001acd8 <store_access_fault_1+0xf0>
    8001acc0:	6418                	ld	a4,8(s0)
    8001acc2:	479d                	li	a5,7
    8001acc4:	00012597          	auipc	a1,0x12
    8001acc8:	61c58593          	addi	a1,a1,1564 # 8002d2e0 <__func__.0+0x2c0>
    8001accc:	00f70663          	beq	a4,a5,8001acd8 <store_access_fault_1+0xf0>
    8001acd0:	00012597          	auipc	a1,0x12
    8001acd4:	62058593          	addi	a1,a1,1568 # 8002d2f0 <__func__.0+0x2d0>
    8001acd8:	00012517          	auipc	a0,0x12
    8001acdc:	65850513          	addi	a0,a0,1624 # 8002d330 <__func__.0+0x310>
    8001ace0:	0da100ef          	jal	8002adba <printf>
    8001ace4:	00036797          	auipc	a5,0x36
    8001ace8:	32d7c783          	lbu	a5,813(a5) # 80051011 <excpt+0x1>
    8001acec:	c789                	beqz	a5,8001acf6 <store_access_fault_1+0x10e>
    8001acee:	6418                	ld	a4,8(s0)
    8001acf0:	479d                	li	a5,7
    8001acf2:	00f70c63          	beq	a4,a5,8001ad0a <store_access_fault_1+0x122>
    8001acf6:	00012517          	auipc	a0,0x12
    8001acfa:	64250513          	addi	a0,a0,1602 # 8002d338 <__func__.0+0x318>
    8001acfe:	0bc100ef          	jal	8002adba <printf>
    8001ad02:	02900513          	li	a0,41
    8001ad06:	5a30e0ef          	jal	80029aa8 <putchar>
    8001ad0a:	4529                	li	a0,10
    8001ad0c:	59d0e0ef          	jal	80029aa8 <putchar>
    8001ad10:	00036497          	auipc	s1,0x36
    8001ad14:	3014c483          	lbu	s1,769(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ad18:	00012597          	auipc	a1,0x12
    8001ad1c:	5d858593          	addi	a1,a1,1496 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ad20:	cc91                	beqz	s1,8001ad3c <store_access_fault_1+0x154>
    8001ad22:	6418                	ld	a4,8(s0)
    8001ad24:	479d                	li	a5,7
    TEST_END();
    8001ad26:	00012597          	auipc	a1,0x12
    8001ad2a:	5ba58593          	addi	a1,a1,1466 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("m mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ad2e:	00f70763          	beq	a4,a5,8001ad3c <store_access_fault_1+0x154>
    8001ad32:	4481                	li	s1,0
    TEST_END();
    8001ad34:	00012597          	auipc	a1,0x12
    8001ad38:	5bc58593          	addi	a1,a1,1468 # 8002d2f0 <__func__.0+0x2d0>
    8001ad3c:	00012517          	auipc	a0,0x12
    8001ad40:	65c50513          	addi	a0,a0,1628 # 8002d398 <__func__.0+0x378>
    8001ad44:	076100ef          	jal	8002adba <printf>
    8001ad48:	4511                	li	a0,4
    8001ad4a:	924e60ef          	jal	80000e6e <goto_priv>
    8001ad4e:	a3de60ef          	jal	8000178a <reset_state>
}
    8001ad52:	60e2                	ld	ra,24(sp)
    8001ad54:	6442                	ld	s0,16(sp)
    8001ad56:	8526                	mv	a0,s1
    8001ad58:	64a2                	ld	s1,8(sp)
    8001ad5a:	6105                	addi	sp,sp,32
    8001ad5c:	8082                	ret

000000008001ad5e <store_access_fault_2>:

bool store_access_fault_2(){
    8001ad5e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ad60:	00011597          	auipc	a1,0x11
    8001ad64:	64058593          	addi	a1,a1,1600 # 8002c3a0 <__func__.28>
    8001ad68:	00012517          	auipc	a0,0x12
    8001ad6c:	59850513          	addi	a0,a0,1432 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_2(){
    8001ad70:	ec06                	sd	ra,24(sp)
    8001ad72:	e822                	sd	s0,16(sp)
    8001ad74:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ad76:	044100ef          	jal	8002adba <printf>
    8001ad7a:	4529                	li	a0,10
    8001ad7c:	52d0e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001ad80:	4511                	li	a0,4
    8001ad82:	8ece60ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001ad86:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001ad8a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001ad8e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ad92:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ad96:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001ad9a:	10000793          	li	a5,256
    8001ad9e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001ada2:	20000793          	li	a5,512
    8001ada6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001adaa:	40000793          	li	a5,1024
    8001adae:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001adb2:	6785                	lui	a5,0x1
    8001adb4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001adb8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001adbc:	4785                	li	a5,1
    8001adbe:	07fe                	slli	a5,a5,0x1f
    8001adc0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001adc4:	08100793          	li	a5,129
    8001adc8:	07e2                	slli	a5,a5,0x18
    8001adca:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001adce:	08000793          	li	a5,128
    8001add2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001add6:	67a1                	lui	a5,0x8
    8001add8:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001addc:	450d                	li	a0,3
    8001adde:	890e60ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001ade2:	f91e50ef          	jal	80000d72 <test_setup_except_function>
    8001ade6:	4785                	li	a5,1
    8001ade8:	1786                	slli	a5,a5,0x21
    8001adea:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001adee:	4701                	li	a4,0
    8001adf0:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001adf4:	08200593          	li	a1,130
    8001adf8:	00019617          	auipc	a2,0x19
    8001adfc:	d4060613          	addi	a2,a2,-704 # 80033b38 <__func__.0+0x6b18>
    8001ae00:	00012517          	auipc	a0,0x12
    8001ae04:	51850513          	addi	a0,a0,1304 # 8002d318 <__func__.0+0x2f8>
    8001ae08:	7b30f0ef          	jal	8002adba <printf>
    8001ae0c:	00036797          	auipc	a5,0x36
    8001ae10:	2057c783          	lbu	a5,517(a5) # 80051011 <excpt+0x1>
    8001ae14:	00036497          	auipc	s1,0x36
    8001ae18:	1fc48493          	addi	s1,s1,508 # 80051010 <excpt>
    8001ae1c:	00012597          	auipc	a1,0x12
    8001ae20:	4d458593          	addi	a1,a1,1236 # 8002d2f0 <__func__.0+0x2d0>
    8001ae24:	cf89                	beqz	a5,8001ae3e <store_access_fault_2+0xe0>
    8001ae26:	6498                	ld	a4,8(s1)
    8001ae28:	479d                	li	a5,7
    8001ae2a:	00012597          	auipc	a1,0x12
    8001ae2e:	4b658593          	addi	a1,a1,1206 # 8002d2e0 <__func__.0+0x2c0>
    8001ae32:	00f70663          	beq	a4,a5,8001ae3e <store_access_fault_2+0xe0>
    8001ae36:	00012597          	auipc	a1,0x12
    8001ae3a:	4ba58593          	addi	a1,a1,1210 # 8002d2f0 <__func__.0+0x2d0>
    8001ae3e:	00012517          	auipc	a0,0x12
    8001ae42:	4f250513          	addi	a0,a0,1266 # 8002d330 <__func__.0+0x310>
    8001ae46:	7750f0ef          	jal	8002adba <printf>
    8001ae4a:	00036797          	auipc	a5,0x36
    8001ae4e:	1c77c783          	lbu	a5,455(a5) # 80051011 <excpt+0x1>
    8001ae52:	c789                	beqz	a5,8001ae5c <store_access_fault_2+0xfe>
    8001ae54:	6498                	ld	a4,8(s1)
    8001ae56:	479d                	li	a5,7
    8001ae58:	00f70c63          	beq	a4,a5,8001ae70 <store_access_fault_2+0x112>
    8001ae5c:	00012517          	auipc	a0,0x12
    8001ae60:	4dc50513          	addi	a0,a0,1244 # 8002d338 <__func__.0+0x318>
    8001ae64:	7570f0ef          	jal	8002adba <printf>
    8001ae68:	02900513          	li	a0,41
    8001ae6c:	43d0e0ef          	jal	80029aa8 <putchar>
    8001ae70:	4529                	li	a0,10
    8001ae72:	4370e0ef          	jal	80029aa8 <putchar>
    8001ae76:	00036417          	auipc	s0,0x36
    8001ae7a:	19b44403          	lbu	s0,411(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001ae7e:	00012597          	auipc	a1,0x12
    8001ae82:	47258593          	addi	a1,a1,1138 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ae86:	cc11                	beqz	s0,8001aea2 <store_access_fault_2+0x144>
    8001ae88:	6498                	ld	a4,8(s1)
    8001ae8a:	479d                	li	a5,7
    TEST_END();
    8001ae8c:	00012597          	auipc	a1,0x12
    8001ae90:	45458593          	addi	a1,a1,1108 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ae94:	00f70763          	beq	a4,a5,8001aea2 <store_access_fault_2+0x144>
    8001ae98:	4401                	li	s0,0
    TEST_END();
    8001ae9a:	00012597          	auipc	a1,0x12
    8001ae9e:	45658593          	addi	a1,a1,1110 # 8002d2f0 <__func__.0+0x2d0>
    8001aea2:	00012517          	auipc	a0,0x12
    8001aea6:	4f650513          	addi	a0,a0,1270 # 8002d398 <__func__.0+0x378>
    8001aeaa:	7110f0ef          	jal	8002adba <printf>
    8001aeae:	4511                	li	a0,4
    8001aeb0:	fbfe50ef          	jal	80000e6e <goto_priv>
    8001aeb4:	8d7e60ef          	jal	8000178a <reset_state>
}
    8001aeb8:	60e2                	ld	ra,24(sp)
    8001aeba:	8522                	mv	a0,s0
    8001aebc:	6442                	ld	s0,16(sp)
    8001aebe:	64a2                	ld	s1,8(sp)
    8001aec0:	6105                	addi	sp,sp,32
    8001aec2:	8082                	ret

000000008001aec4 <store_access_fault_3>:


bool store_access_fault_3(){
    8001aec4:	1101                	addi	sp,sp,-32

    TEST_START();
    8001aec6:	00011597          	auipc	a1,0x11
    8001aeca:	4f258593          	addi	a1,a1,1266 # 8002c3b8 <__func__.27>
    8001aece:	00012517          	auipc	a0,0x12
    8001aed2:	43250513          	addi	a0,a0,1074 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_3(){
    8001aed6:	ec06                	sd	ra,24(sp)
    8001aed8:	e822                	sd	s0,16(sp)
    8001aeda:	e426                	sd	s1,8(sp)
    TEST_START();
    8001aedc:	6df0f0ef          	jal	8002adba <printf>
    8001aee0:	4529                	li	a0,10
    8001aee2:	3c70e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001aee6:	4511                	li	a0,4
    8001aee8:	f87e50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001aeec:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001aef0:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001aef4:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001aef8:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001aefc:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001af00:	10000793          	li	a5,256
    8001af04:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001af08:	20000793          	li	a5,512
    8001af0c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001af10:	40000793          	li	a5,1024
    8001af14:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001af18:	6785                	lui	a5,0x1
    8001af1a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001af1e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001af22:	4785                	li	a5,1
    8001af24:	07fe                	slli	a5,a5,0x1f
    8001af26:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001af2a:	08100793          	li	a5,129
    8001af2e:	07e2                	slli	a5,a5,0x18
    8001af30:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001af34:	08000793          	li	a5,128
    8001af38:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001af3c:	67a1                	lui	a5,0x8
    8001af3e:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001af42:	4505                	li	a0,1
    8001af44:	f2be50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001af48:	e2be50ef          	jal	80000d72 <test_setup_except_function>
    8001af4c:	4785                	li	a5,1
    8001af4e:	1786                	slli	a5,a5,0x21
    8001af50:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001af54:	4701                	li	a4,0
    8001af56:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001af5a:	08200593          	li	a1,130
    8001af5e:	00019617          	auipc	a2,0x19
    8001af62:	c1260613          	addi	a2,a2,-1006 # 80033b70 <__func__.0+0x6b50>
    8001af66:	00012517          	auipc	a0,0x12
    8001af6a:	3b250513          	addi	a0,a0,946 # 8002d318 <__func__.0+0x2f8>
    8001af6e:	64d0f0ef          	jal	8002adba <printf>
    8001af72:	00036797          	auipc	a5,0x36
    8001af76:	09f7c783          	lbu	a5,159(a5) # 80051011 <excpt+0x1>
    8001af7a:	00036497          	auipc	s1,0x36
    8001af7e:	09648493          	addi	s1,s1,150 # 80051010 <excpt>
    8001af82:	00012597          	auipc	a1,0x12
    8001af86:	36e58593          	addi	a1,a1,878 # 8002d2f0 <__func__.0+0x2d0>
    8001af8a:	cf89                	beqz	a5,8001afa4 <store_access_fault_3+0xe0>
    8001af8c:	6498                	ld	a4,8(s1)
    8001af8e:	479d                	li	a5,7
    8001af90:	00012597          	auipc	a1,0x12
    8001af94:	35058593          	addi	a1,a1,848 # 8002d2e0 <__func__.0+0x2c0>
    8001af98:	00f70663          	beq	a4,a5,8001afa4 <store_access_fault_3+0xe0>
    8001af9c:	00012597          	auipc	a1,0x12
    8001afa0:	35458593          	addi	a1,a1,852 # 8002d2f0 <__func__.0+0x2d0>
    8001afa4:	00012517          	auipc	a0,0x12
    8001afa8:	38c50513          	addi	a0,a0,908 # 8002d330 <__func__.0+0x310>
    8001afac:	60f0f0ef          	jal	8002adba <printf>
    8001afb0:	00036797          	auipc	a5,0x36
    8001afb4:	0617c783          	lbu	a5,97(a5) # 80051011 <excpt+0x1>
    8001afb8:	c789                	beqz	a5,8001afc2 <store_access_fault_3+0xfe>
    8001afba:	6498                	ld	a4,8(s1)
    8001afbc:	479d                	li	a5,7
    8001afbe:	00f70c63          	beq	a4,a5,8001afd6 <store_access_fault_3+0x112>
    8001afc2:	00012517          	auipc	a0,0x12
    8001afc6:	37650513          	addi	a0,a0,886 # 8002d338 <__func__.0+0x318>
    8001afca:	5f10f0ef          	jal	8002adba <printf>
    8001afce:	02900513          	li	a0,41
    8001afd2:	2d70e0ef          	jal	80029aa8 <putchar>
    8001afd6:	4529                	li	a0,10
    8001afd8:	2d10e0ef          	jal	80029aa8 <putchar>
    8001afdc:	00036417          	auipc	s0,0x36
    8001afe0:	03544403          	lbu	s0,53(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001afe4:	00012597          	auipc	a1,0x12
    8001afe8:	30c58593          	addi	a1,a1,780 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001afec:	cc11                	beqz	s0,8001b008 <store_access_fault_3+0x144>
    8001afee:	6498                	ld	a4,8(s1)
    8001aff0:	479d                	li	a5,7
    TEST_END();
    8001aff2:	00012597          	auipc	a1,0x12
    8001aff6:	2ee58593          	addi	a1,a1,750 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001affa:	00f70763          	beq	a4,a5,8001b008 <store_access_fault_3+0x144>
    8001affe:	4401                	li	s0,0
    TEST_END();
    8001b000:	00012597          	auipc	a1,0x12
    8001b004:	2f058593          	addi	a1,a1,752 # 8002d2f0 <__func__.0+0x2d0>
    8001b008:	00012517          	auipc	a0,0x12
    8001b00c:	39050513          	addi	a0,a0,912 # 8002d398 <__func__.0+0x378>
    8001b010:	5ab0f0ef          	jal	8002adba <printf>
    8001b014:	4511                	li	a0,4
    8001b016:	e59e50ef          	jal	80000e6e <goto_priv>
    8001b01a:	f70e60ef          	jal	8000178a <reset_state>
}
    8001b01e:	60e2                	ld	ra,24(sp)
    8001b020:	8522                	mv	a0,s0
    8001b022:	6442                	ld	s0,16(sp)
    8001b024:	64a2                	ld	s1,8(sp)
    8001b026:	6105                	addi	sp,sp,32
    8001b028:	8082                	ret

000000008001b02a <store_access_fault_4>:

bool store_access_fault_4(){
    8001b02a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b02c:	00011597          	auipc	a1,0x11
    8001b030:	3a458593          	addi	a1,a1,932 # 8002c3d0 <__func__.26>
    8001b034:	00012517          	auipc	a0,0x12
    8001b038:	2cc50513          	addi	a0,a0,716 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_4(){
    8001b03c:	ec06                	sd	ra,24(sp)
    8001b03e:	e822                	sd	s0,16(sp)
    8001b040:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b042:	5790f0ef          	jal	8002adba <printf>
    8001b046:	4529                	li	a0,10
    8001b048:	2610e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001b04c:	4511                	li	a0,4
    8001b04e:	e21e50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b052:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b056:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b05a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b05e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b062:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b066:	10000793          	li	a5,256
    8001b06a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b06e:	20000793          	li	a5,512
    8001b072:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b076:	40000793          	li	a5,1024
    8001b07a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b07e:	6785                	lui	a5,0x1
    8001b080:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b084:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b088:	4785                	li	a5,1
    8001b08a:	07fe                	slli	a5,a5,0x1f
    8001b08c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b090:	08100793          	li	a5,129
    8001b094:	07e2                	slli	a5,a5,0x18
    8001b096:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b09a:	08000793          	li	a5,128
    8001b09e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b0a2:	67a1                	lui	a5,0x8
    8001b0a4:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b0a8:	4501                	li	a0,0
    8001b0aa:	dc5e50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b0ae:	cc5e50ef          	jal	80000d72 <test_setup_except_function>
    8001b0b2:	4785                	li	a5,1
    8001b0b4:	1786                	slli	a5,a5,0x21
    8001b0b6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b0ba:	4701                	li	a4,0
    8001b0bc:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b0c0:	08200593          	li	a1,130
    8001b0c4:	00019617          	auipc	a2,0x19
    8001b0c8:	ae460613          	addi	a2,a2,-1308 # 80033ba8 <__func__.0+0x6b88>
    8001b0cc:	00012517          	auipc	a0,0x12
    8001b0d0:	24c50513          	addi	a0,a0,588 # 8002d318 <__func__.0+0x2f8>
    8001b0d4:	4e70f0ef          	jal	8002adba <printf>
    8001b0d8:	00036797          	auipc	a5,0x36
    8001b0dc:	f397c783          	lbu	a5,-199(a5) # 80051011 <excpt+0x1>
    8001b0e0:	00036497          	auipc	s1,0x36
    8001b0e4:	f3048493          	addi	s1,s1,-208 # 80051010 <excpt>
    8001b0e8:	00012597          	auipc	a1,0x12
    8001b0ec:	20858593          	addi	a1,a1,520 # 8002d2f0 <__func__.0+0x2d0>
    8001b0f0:	cf89                	beqz	a5,8001b10a <store_access_fault_4+0xe0>
    8001b0f2:	6498                	ld	a4,8(s1)
    8001b0f4:	479d                	li	a5,7
    8001b0f6:	00012597          	auipc	a1,0x12
    8001b0fa:	1ea58593          	addi	a1,a1,490 # 8002d2e0 <__func__.0+0x2c0>
    8001b0fe:	00f70663          	beq	a4,a5,8001b10a <store_access_fault_4+0xe0>
    8001b102:	00012597          	auipc	a1,0x12
    8001b106:	1ee58593          	addi	a1,a1,494 # 8002d2f0 <__func__.0+0x2d0>
    8001b10a:	00012517          	auipc	a0,0x12
    8001b10e:	22650513          	addi	a0,a0,550 # 8002d330 <__func__.0+0x310>
    8001b112:	4a90f0ef          	jal	8002adba <printf>
    8001b116:	00036797          	auipc	a5,0x36
    8001b11a:	efb7c783          	lbu	a5,-261(a5) # 80051011 <excpt+0x1>
    8001b11e:	c789                	beqz	a5,8001b128 <store_access_fault_4+0xfe>
    8001b120:	6498                	ld	a4,8(s1)
    8001b122:	479d                	li	a5,7
    8001b124:	00f70c63          	beq	a4,a5,8001b13c <store_access_fault_4+0x112>
    8001b128:	00012517          	auipc	a0,0x12
    8001b12c:	21050513          	addi	a0,a0,528 # 8002d338 <__func__.0+0x318>
    8001b130:	48b0f0ef          	jal	8002adba <printf>
    8001b134:	02900513          	li	a0,41
    8001b138:	1710e0ef          	jal	80029aa8 <putchar>
    8001b13c:	4529                	li	a0,10
    8001b13e:	16b0e0ef          	jal	80029aa8 <putchar>
    8001b142:	00036417          	auipc	s0,0x36
    8001b146:	ecf44403          	lbu	s0,-305(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b14a:	00012597          	auipc	a1,0x12
    8001b14e:	1a658593          	addi	a1,a1,422 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b152:	cc11                	beqz	s0,8001b16e <store_access_fault_4+0x144>
    8001b154:	6498                	ld	a4,8(s1)
    8001b156:	479d                	li	a5,7
    TEST_END();
    8001b158:	00012597          	auipc	a1,0x12
    8001b15c:	18858593          	addi	a1,a1,392 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001b160:	00f70763          	beq	a4,a5,8001b16e <store_access_fault_4+0x144>
    8001b164:	4401                	li	s0,0
    TEST_END();
    8001b166:	00012597          	auipc	a1,0x12
    8001b16a:	18a58593          	addi	a1,a1,394 # 8002d2f0 <__func__.0+0x2d0>
    8001b16e:	00012517          	auipc	a0,0x12
    8001b172:	22a50513          	addi	a0,a0,554 # 8002d398 <__func__.0+0x378>
    8001b176:	4450f0ef          	jal	8002adba <printf>
    8001b17a:	4511                	li	a0,4
    8001b17c:	cf3e50ef          	jal	80000e6e <goto_priv>
    8001b180:	e0ae60ef          	jal	8000178a <reset_state>
}
    8001b184:	60e2                	ld	ra,24(sp)
    8001b186:	8522                	mv	a0,s0
    8001b188:	6442                	ld	s0,16(sp)
    8001b18a:	64a2                	ld	s1,8(sp)
    8001b18c:	6105                	addi	sp,sp,32
    8001b18e:	8082                	ret

000000008001b190 <store_access_fault_5>:

bool store_access_fault_5(){
    8001b190:	1141                	addi	sp,sp,-16

    TEST_START();
    8001b192:	00011597          	auipc	a1,0x11
    8001b196:	25658593          	addi	a1,a1,598 # 8002c3e8 <__func__.25>
    8001b19a:	00012517          	auipc	a0,0x12
    8001b19e:	16650513          	addi	a0,a0,358 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_5(){
    8001b1a2:	e406                	sd	ra,8(sp)
    8001b1a4:	e022                	sd	s0,0(sp)
    TEST_START();
    8001b1a6:	4150f0ef          	jal	8002adba <printf>
    8001b1aa:	4529                	li	a0,10
    8001b1ac:	0fd0e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001b1b0:	4511                	li	a0,4
    8001b1b2:	cbde50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b1b6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b1ba:	10000793          	li	a5,256
    8001b1be:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b1c2:	20000793          	li	a5,512
    8001b1c6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b1ca:	40000793          	li	a5,1024
    8001b1ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b1d2:	6785                	lui	a5,0x1
    8001b1d4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b1d8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b1dc:	4785                	li	a5,1
    8001b1de:	07fe                	slli	a5,a5,0x1f
    8001b1e0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b1e4:	08100793          	li	a5,129
    8001b1e8:	07e2                	slli	a5,a5,0x18
    8001b1ea:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b1ee:	67a1                	lui	a5,0x8
    8001b1f0:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001b1f4:	b7fe50ef          	jal	80000d72 <test_setup_except_function>
    8001b1f8:	4785                	li	a5,1
    8001b1fa:	1786                	slli	a5,a5,0x21
    8001b1fc:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b200:	4701                	li	a4,0
    8001b202:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    printf("%d\n",excpt.triggered);
    8001b206:	00036597          	auipc	a1,0x36
    8001b20a:	e0b5c583          	lbu	a1,-501(a1) # 80051011 <excpt+0x1>
    8001b20e:	00013517          	auipc	a0,0x13
    8001b212:	c7a50513          	addi	a0,a0,-902 # 8002de88 <__func__.0+0xe68>
    8001b216:	3a50f0ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001b21a:	00036597          	auipc	a1,0x36
    8001b21e:	dfe5b583          	ld	a1,-514(a1) # 80051018 <excpt+0x8>
    8001b222:	00013517          	auipc	a0,0x13
    8001b226:	c6650513          	addi	a0,a0,-922 # 8002de88 <__func__.0+0xe68>
    8001b22a:	3910f0ef          	jal	8002adba <printf>

    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b22e:	08200593          	li	a1,130
    8001b232:	00019617          	auipc	a2,0x19
    8001b236:	9ae60613          	addi	a2,a2,-1618 # 80033be0 <__func__.0+0x6bc0>
    8001b23a:	00012517          	auipc	a0,0x12
    8001b23e:	0de50513          	addi	a0,a0,222 # 8002d318 <__func__.0+0x2f8>
    8001b242:	3790f0ef          	jal	8002adba <printf>
    8001b246:	00036797          	auipc	a5,0x36
    8001b24a:	dcb7c783          	lbu	a5,-565(a5) # 80051011 <excpt+0x1>
    8001b24e:	00012597          	auipc	a1,0x12
    8001b252:	09258593          	addi	a1,a1,146 # 8002d2e0 <__func__.0+0x2c0>
    8001b256:	c789                	beqz	a5,8001b260 <store_access_fault_5+0xd0>
    8001b258:	00012597          	auipc	a1,0x12
    8001b25c:	09858593          	addi	a1,a1,152 # 8002d2f0 <__func__.0+0x2d0>
    8001b260:	00012517          	auipc	a0,0x12
    8001b264:	0d050513          	addi	a0,a0,208 # 8002d330 <__func__.0+0x310>
    8001b268:	3530f0ef          	jal	8002adba <printf>
    8001b26c:	00036797          	auipc	a5,0x36
    8001b270:	da57c783          	lbu	a5,-603(a5) # 80051011 <excpt+0x1>
    8001b274:	e7a1                	bnez	a5,8001b2bc <store_access_fault_5+0x12c>
    8001b276:	4529                	li	a0,10
    8001b278:	0310e0ef          	jal	80029aa8 <putchar>
    8001b27c:	00036797          	auipc	a5,0x36
    8001b280:	d957c783          	lbu	a5,-619(a5) # 80051011 <excpt+0x1>
    8001b284:	e795                	bnez	a5,8001b2b0 <store_access_fault_5+0x120>
    8001b286:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001b288:	00012597          	auipc	a1,0x12
    8001b28c:	05858593          	addi	a1,a1,88 # 8002d2e0 <__func__.0+0x2c0>
    8001b290:	00012517          	auipc	a0,0x12
    8001b294:	10850513          	addi	a0,a0,264 # 8002d398 <__func__.0+0x378>
    8001b298:	3230f0ef          	jal	8002adba <printf>
    8001b29c:	4511                	li	a0,4
    8001b29e:	bd1e50ef          	jal	80000e6e <goto_priv>
    8001b2a2:	ce8e60ef          	jal	8000178a <reset_state>
}
    8001b2a6:	60a2                	ld	ra,8(sp)
    8001b2a8:	8522                	mv	a0,s0
    8001b2aa:	6402                	ld	s0,0(sp)
    8001b2ac:	0141                	addi	sp,sp,16
    8001b2ae:	8082                	ret
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b2b0:	4401                	li	s0,0
    TEST_END();
    8001b2b2:	00012597          	auipc	a1,0x12
    8001b2b6:	03e58593          	addi	a1,a1,62 # 8002d2f0 <__func__.0+0x2d0>
    8001b2ba:	bfd9                	j	8001b290 <store_access_fault_5+0x100>
    TEST_ASSERT("m mode sb successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001b2bc:	00012517          	auipc	a0,0x12
    8001b2c0:	07c50513          	addi	a0,a0,124 # 8002d338 <__func__.0+0x318>
    8001b2c4:	2f70f0ef          	jal	8002adba <printf>
    8001b2c8:	02900513          	li	a0,41
    8001b2cc:	7dc0e0ef          	jal	80029aa8 <putchar>
    8001b2d0:	b75d                	j	8001b276 <store_access_fault_5+0xe6>

000000008001b2d2 <store_access_fault_6>:


bool store_access_fault_6(){
    8001b2d2:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b2d4:	00011597          	auipc	a1,0x11
    8001b2d8:	12c58593          	addi	a1,a1,300 # 8002c400 <__func__.24>
    8001b2dc:	00012517          	auipc	a0,0x12
    8001b2e0:	02450513          	addi	a0,a0,36 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_6(){
    8001b2e4:	ec06                	sd	ra,24(sp)
    8001b2e6:	e822                	sd	s0,16(sp)
    8001b2e8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b2ea:	2d10f0ef          	jal	8002adba <printf>
    8001b2ee:	4529                	li	a0,10
    8001b2f0:	7b80e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001b2f4:	4511                	li	a0,4
    8001b2f6:	b79e50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b2fa:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b2fe:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b302:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b306:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b30a:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b30e:	10000793          	li	a5,256
    8001b312:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b316:	20000793          	li	a5,512
    8001b31a:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b31e:	40000793          	li	a5,1024
    8001b322:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b326:	6785                	lui	a5,0x1
    8001b328:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b32c:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b330:	4785                	li	a5,1
    8001b332:	07fe                	slli	a5,a5,0x1f
    8001b334:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b338:	08100793          	li	a5,129
    8001b33c:	07e2                	slli	a5,a5,0x18
    8001b33e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b342:	08000793          	li	a5,128
    8001b346:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b34a:	67a1                	lui	a5,0x8
    8001b34c:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b350:	450d                	li	a0,3
    8001b352:	b1de50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b356:	a1de50ef          	jal	80000d72 <test_setup_except_function>
    8001b35a:	4785                	li	a5,1
    8001b35c:	1786                	slli	a5,a5,0x21
    8001b35e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b362:	4701                	li	a4,0
    8001b364:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b368:	08200593          	li	a1,130
    8001b36c:	00019617          	auipc	a2,0x19
    8001b370:	8ac60613          	addi	a2,a2,-1876 # 80033c18 <__func__.0+0x6bf8>
    8001b374:	00012517          	auipc	a0,0x12
    8001b378:	fa450513          	addi	a0,a0,-92 # 8002d318 <__func__.0+0x2f8>
    8001b37c:	23f0f0ef          	jal	8002adba <printf>
    8001b380:	00036797          	auipc	a5,0x36
    8001b384:	c917c783          	lbu	a5,-879(a5) # 80051011 <excpt+0x1>
    8001b388:	00036497          	auipc	s1,0x36
    8001b38c:	c8848493          	addi	s1,s1,-888 # 80051010 <excpt>
    8001b390:	00012597          	auipc	a1,0x12
    8001b394:	f6058593          	addi	a1,a1,-160 # 8002d2f0 <__func__.0+0x2d0>
    8001b398:	cf89                	beqz	a5,8001b3b2 <store_access_fault_6+0xe0>
    8001b39a:	6498                	ld	a4,8(s1)
    8001b39c:	479d                	li	a5,7
    8001b39e:	00012597          	auipc	a1,0x12
    8001b3a2:	f4258593          	addi	a1,a1,-190 # 8002d2e0 <__func__.0+0x2c0>
    8001b3a6:	00f70663          	beq	a4,a5,8001b3b2 <store_access_fault_6+0xe0>
    8001b3aa:	00012597          	auipc	a1,0x12
    8001b3ae:	f4658593          	addi	a1,a1,-186 # 8002d2f0 <__func__.0+0x2d0>
    8001b3b2:	00012517          	auipc	a0,0x12
    8001b3b6:	f7e50513          	addi	a0,a0,-130 # 8002d330 <__func__.0+0x310>
    8001b3ba:	2010f0ef          	jal	8002adba <printf>
    8001b3be:	00036797          	auipc	a5,0x36
    8001b3c2:	c537c783          	lbu	a5,-941(a5) # 80051011 <excpt+0x1>
    8001b3c6:	c789                	beqz	a5,8001b3d0 <store_access_fault_6+0xfe>
    8001b3c8:	6498                	ld	a4,8(s1)
    8001b3ca:	479d                	li	a5,7
    8001b3cc:	00f70c63          	beq	a4,a5,8001b3e4 <store_access_fault_6+0x112>
    8001b3d0:	00012517          	auipc	a0,0x12
    8001b3d4:	f6850513          	addi	a0,a0,-152 # 8002d338 <__func__.0+0x318>
    8001b3d8:	1e30f0ef          	jal	8002adba <printf>
    8001b3dc:	02900513          	li	a0,41
    8001b3e0:	6c80e0ef          	jal	80029aa8 <putchar>
    8001b3e4:	4529                	li	a0,10
    8001b3e6:	6c20e0ef          	jal	80029aa8 <putchar>
    8001b3ea:	00036417          	auipc	s0,0x36
    8001b3ee:	c2744403          	lbu	s0,-985(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b3f2:	00012597          	auipc	a1,0x12
    8001b3f6:	efe58593          	addi	a1,a1,-258 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b3fa:	cc11                	beqz	s0,8001b416 <store_access_fault_6+0x144>
    8001b3fc:	6498                	ld	a4,8(s1)
    8001b3fe:	479d                	li	a5,7
    TEST_END();
    8001b400:	00012597          	auipc	a1,0x12
    8001b404:	ee058593          	addi	a1,a1,-288 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b408:	00f70763          	beq	a4,a5,8001b416 <store_access_fault_6+0x144>
    8001b40c:	4401                	li	s0,0
    TEST_END();
    8001b40e:	00012597          	auipc	a1,0x12
    8001b412:	ee258593          	addi	a1,a1,-286 # 8002d2f0 <__func__.0+0x2d0>
    8001b416:	00012517          	auipc	a0,0x12
    8001b41a:	f8250513          	addi	a0,a0,-126 # 8002d398 <__func__.0+0x378>
    8001b41e:	19d0f0ef          	jal	8002adba <printf>
    8001b422:	4511                	li	a0,4
    8001b424:	a4be50ef          	jal	80000e6e <goto_priv>
    8001b428:	b62e60ef          	jal	8000178a <reset_state>
}
    8001b42c:	60e2                	ld	ra,24(sp)
    8001b42e:	8522                	mv	a0,s0
    8001b430:	6442                	ld	s0,16(sp)
    8001b432:	64a2                	ld	s1,8(sp)
    8001b434:	6105                	addi	sp,sp,32
    8001b436:	8082                	ret

000000008001b438 <store_access_fault_7>:


bool store_access_fault_7(){
    8001b438:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b43a:	00011597          	auipc	a1,0x11
    8001b43e:	fde58593          	addi	a1,a1,-34 # 8002c418 <__func__.23>
    8001b442:	00012517          	auipc	a0,0x12
    8001b446:	ebe50513          	addi	a0,a0,-322 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_7(){
    8001b44a:	ec06                	sd	ra,24(sp)
    8001b44c:	e822                	sd	s0,16(sp)
    8001b44e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b450:	16b0f0ef          	jal	8002adba <printf>
    8001b454:	4529                	li	a0,10
    8001b456:	6520e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001b45a:	4511                	li	a0,4
    8001b45c:	a13e50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b460:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b464:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b468:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b46c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b470:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b474:	10000793          	li	a5,256
    8001b478:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b47c:	20000793          	li	a5,512
    8001b480:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b484:	40000793          	li	a5,1024
    8001b488:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b48c:	6785                	lui	a5,0x1
    8001b48e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b492:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b496:	4785                	li	a5,1
    8001b498:	07fe                	slli	a5,a5,0x1f
    8001b49a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b49e:	08100793          	li	a5,129
    8001b4a2:	07e2                	slli	a5,a5,0x18
    8001b4a4:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b4a8:	08000793          	li	a5,128
    8001b4ac:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b4b0:	67a1                	lui	a5,0x8
    8001b4b2:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001b4b6:	4505                	li	a0,1
    8001b4b8:	9b7e50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b4bc:	8b7e50ef          	jal	80000d72 <test_setup_except_function>
    8001b4c0:	4785                	li	a5,1
    8001b4c2:	1786                	slli	a5,a5,0x21
    8001b4c4:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b4c8:	4701                	li	a4,0
    8001b4ca:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b4ce:	08200593          	li	a1,130
    8001b4d2:	00018617          	auipc	a2,0x18
    8001b4d6:	77e60613          	addi	a2,a2,1918 # 80033c50 <__func__.0+0x6c30>
    8001b4da:	00012517          	auipc	a0,0x12
    8001b4de:	e3e50513          	addi	a0,a0,-450 # 8002d318 <__func__.0+0x2f8>
    8001b4e2:	0d90f0ef          	jal	8002adba <printf>
    8001b4e6:	00036797          	auipc	a5,0x36
    8001b4ea:	b2b7c783          	lbu	a5,-1237(a5) # 80051011 <excpt+0x1>
    8001b4ee:	00036497          	auipc	s1,0x36
    8001b4f2:	b2248493          	addi	s1,s1,-1246 # 80051010 <excpt>
    8001b4f6:	00012597          	auipc	a1,0x12
    8001b4fa:	dfa58593          	addi	a1,a1,-518 # 8002d2f0 <__func__.0+0x2d0>
    8001b4fe:	cf89                	beqz	a5,8001b518 <store_access_fault_7+0xe0>
    8001b500:	6498                	ld	a4,8(s1)
    8001b502:	479d                	li	a5,7
    8001b504:	00012597          	auipc	a1,0x12
    8001b508:	ddc58593          	addi	a1,a1,-548 # 8002d2e0 <__func__.0+0x2c0>
    8001b50c:	00f70663          	beq	a4,a5,8001b518 <store_access_fault_7+0xe0>
    8001b510:	00012597          	auipc	a1,0x12
    8001b514:	de058593          	addi	a1,a1,-544 # 8002d2f0 <__func__.0+0x2d0>
    8001b518:	00012517          	auipc	a0,0x12
    8001b51c:	e1850513          	addi	a0,a0,-488 # 8002d330 <__func__.0+0x310>
    8001b520:	09b0f0ef          	jal	8002adba <printf>
    8001b524:	00036797          	auipc	a5,0x36
    8001b528:	aed7c783          	lbu	a5,-1299(a5) # 80051011 <excpt+0x1>
    8001b52c:	c789                	beqz	a5,8001b536 <store_access_fault_7+0xfe>
    8001b52e:	6498                	ld	a4,8(s1)
    8001b530:	479d                	li	a5,7
    8001b532:	00f70c63          	beq	a4,a5,8001b54a <store_access_fault_7+0x112>
    8001b536:	00012517          	auipc	a0,0x12
    8001b53a:	e0250513          	addi	a0,a0,-510 # 8002d338 <__func__.0+0x318>
    8001b53e:	07d0f0ef          	jal	8002adba <printf>
    8001b542:	02900513          	li	a0,41
    8001b546:	5620e0ef          	jal	80029aa8 <putchar>
    8001b54a:	4529                	li	a0,10
    8001b54c:	55c0e0ef          	jal	80029aa8 <putchar>
    8001b550:	00036417          	auipc	s0,0x36
    8001b554:	ac144403          	lbu	s0,-1343(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b558:	00012597          	auipc	a1,0x12
    8001b55c:	d9858593          	addi	a1,a1,-616 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b560:	cc11                	beqz	s0,8001b57c <store_access_fault_7+0x144>
    8001b562:	6498                	ld	a4,8(s1)
    8001b564:	479d                	li	a5,7
    TEST_END();
    8001b566:	00012597          	auipc	a1,0x12
    8001b56a:	d7a58593          	addi	a1,a1,-646 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b56e:	00f70763          	beq	a4,a5,8001b57c <store_access_fault_7+0x144>
    8001b572:	4401                	li	s0,0
    TEST_END();
    8001b574:	00012597          	auipc	a1,0x12
    8001b578:	d7c58593          	addi	a1,a1,-644 # 8002d2f0 <__func__.0+0x2d0>
    8001b57c:	00012517          	auipc	a0,0x12
    8001b580:	e1c50513          	addi	a0,a0,-484 # 8002d398 <__func__.0+0x378>
    8001b584:	0370f0ef          	jal	8002adba <printf>
    8001b588:	4511                	li	a0,4
    8001b58a:	8e5e50ef          	jal	80000e6e <goto_priv>
    8001b58e:	9fce60ef          	jal	8000178a <reset_state>
}
    8001b592:	60e2                	ld	ra,24(sp)
    8001b594:	8522                	mv	a0,s0
    8001b596:	6442                	ld	s0,16(sp)
    8001b598:	64a2                	ld	s1,8(sp)
    8001b59a:	6105                	addi	sp,sp,32
    8001b59c:	8082                	ret

000000008001b59e <store_access_fault_8>:

bool store_access_fault_8(){
    8001b59e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b5a0:	00011597          	auipc	a1,0x11
    8001b5a4:	e9058593          	addi	a1,a1,-368 # 8002c430 <__func__.22>
    8001b5a8:	00012517          	auipc	a0,0x12
    8001b5ac:	d5850513          	addi	a0,a0,-680 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_8(){
    8001b5b0:	ec06                	sd	ra,24(sp)
    8001b5b2:	e822                	sd	s0,16(sp)
    8001b5b4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b5b6:	0050f0ef          	jal	8002adba <printf>
    8001b5ba:	4529                	li	a0,10
    8001b5bc:	4ec0e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001b5c0:	4511                	li	a0,4
    8001b5c2:	8ade50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b5c6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b5ca:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b5ce:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b5d2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b5d6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b5da:	10000793          	li	a5,256
    8001b5de:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b5e2:	20000793          	li	a5,512
    8001b5e6:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b5ea:	40000793          	li	a5,1024
    8001b5ee:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b5f2:	6785                	lui	a5,0x1
    8001b5f4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b5f8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b5fc:	4785                	li	a5,1
    8001b5fe:	07fe                	slli	a5,a5,0x1f
    8001b600:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b604:	08100793          	li	a5,129
    8001b608:	07e2                	slli	a5,a5,0x18
    8001b60a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b60e:	08000793          	li	a5,128
    8001b612:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b616:	67a1                	lui	a5,0x8
    8001b618:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b61c:	4501                	li	a0,0
    8001b61e:	851e50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b622:	f50e50ef          	jal	80000d72 <test_setup_except_function>
    8001b626:	4785                	li	a5,1
    8001b628:	1786                	slli	a5,a5,0x21
    8001b62a:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001b62e:	4701                	li	a4,0
    8001b630:	00e78023          	sb	a4,0(a5)
    
    sb(0x80000100UL << 2, 0x0);

    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b634:	08200593          	li	a1,130
    8001b638:	00018617          	auipc	a2,0x18
    8001b63c:	65060613          	addi	a2,a2,1616 # 80033c88 <__func__.0+0x6c68>
    8001b640:	00012517          	auipc	a0,0x12
    8001b644:	cd850513          	addi	a0,a0,-808 # 8002d318 <__func__.0+0x2f8>
    8001b648:	7720f0ef          	jal	8002adba <printf>
    8001b64c:	00036797          	auipc	a5,0x36
    8001b650:	9c57c783          	lbu	a5,-1595(a5) # 80051011 <excpt+0x1>
    8001b654:	00036497          	auipc	s1,0x36
    8001b658:	9bc48493          	addi	s1,s1,-1604 # 80051010 <excpt>
    8001b65c:	00012597          	auipc	a1,0x12
    8001b660:	c9458593          	addi	a1,a1,-876 # 8002d2f0 <__func__.0+0x2d0>
    8001b664:	cf89                	beqz	a5,8001b67e <store_access_fault_8+0xe0>
    8001b666:	6498                	ld	a4,8(s1)
    8001b668:	479d                	li	a5,7
    8001b66a:	00012597          	auipc	a1,0x12
    8001b66e:	c7658593          	addi	a1,a1,-906 # 8002d2e0 <__func__.0+0x2c0>
    8001b672:	00f70663          	beq	a4,a5,8001b67e <store_access_fault_8+0xe0>
    8001b676:	00012597          	auipc	a1,0x12
    8001b67a:	c7a58593          	addi	a1,a1,-902 # 8002d2f0 <__func__.0+0x2d0>
    8001b67e:	00012517          	auipc	a0,0x12
    8001b682:	cb250513          	addi	a0,a0,-846 # 8002d330 <__func__.0+0x310>
    8001b686:	7340f0ef          	jal	8002adba <printf>
    8001b68a:	00036797          	auipc	a5,0x36
    8001b68e:	9877c783          	lbu	a5,-1657(a5) # 80051011 <excpt+0x1>
    8001b692:	c789                	beqz	a5,8001b69c <store_access_fault_8+0xfe>
    8001b694:	6498                	ld	a4,8(s1)
    8001b696:	479d                	li	a5,7
    8001b698:	00f70c63          	beq	a4,a5,8001b6b0 <store_access_fault_8+0x112>
    8001b69c:	00012517          	auipc	a0,0x12
    8001b6a0:	c9c50513          	addi	a0,a0,-868 # 8002d338 <__func__.0+0x318>
    8001b6a4:	7160f0ef          	jal	8002adba <printf>
    8001b6a8:	02900513          	li	a0,41
    8001b6ac:	3fc0e0ef          	jal	80029aa8 <putchar>
    8001b6b0:	4529                	li	a0,10
    8001b6b2:	3f60e0ef          	jal	80029aa8 <putchar>
    8001b6b6:	00036417          	auipc	s0,0x36
    8001b6ba:	95b44403          	lbu	s0,-1701(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b6be:	00012597          	auipc	a1,0x12
    8001b6c2:	c3258593          	addi	a1,a1,-974 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b6c6:	cc11                	beqz	s0,8001b6e2 <store_access_fault_8+0x144>
    8001b6c8:	6498                	ld	a4,8(s1)
    8001b6ca:	479d                	li	a5,7
    TEST_END();
    8001b6cc:	00012597          	auipc	a1,0x12
    8001b6d0:	c1458593          	addi	a1,a1,-1004 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode sb when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001b6d4:	00f70763          	beq	a4,a5,8001b6e2 <store_access_fault_8+0x144>
    8001b6d8:	4401                	li	s0,0
    TEST_END();
    8001b6da:	00012597          	auipc	a1,0x12
    8001b6de:	c1658593          	addi	a1,a1,-1002 # 8002d2f0 <__func__.0+0x2d0>
    8001b6e2:	00012517          	auipc	a0,0x12
    8001b6e6:	cb650513          	addi	a0,a0,-842 # 8002d398 <__func__.0+0x378>
    8001b6ea:	6d00f0ef          	jal	8002adba <printf>
    8001b6ee:	4511                	li	a0,4
    8001b6f0:	f7ee50ef          	jal	80000e6e <goto_priv>
    8001b6f4:	896e60ef          	jal	8000178a <reset_state>
}
    8001b6f8:	60e2                	ld	ra,24(sp)
    8001b6fa:	8522                	mv	a0,s0
    8001b6fc:	6442                	ld	s0,16(sp)
    8001b6fe:	64a2                	ld	s1,8(sp)
    8001b700:	6105                	addi	sp,sp,32
    8001b702:	8082                	ret

000000008001b704 <store_access_fault_9>:

bool store_access_fault_9(){
    8001b704:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b706:	00011597          	auipc	a1,0x11
    8001b70a:	d4258593          	addi	a1,a1,-702 # 8002c448 <__func__.21>
    8001b70e:	00012517          	auipc	a0,0x12
    8001b712:	bf250513          	addi	a0,a0,-1038 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_9(){
    8001b716:	ec06                	sd	ra,24(sp)
    8001b718:	e822                	sd	s0,16(sp)
    8001b71a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b71c:	69e0f0ef          	jal	8002adba <printf>
    8001b720:	4529                	li	a0,10
    8001b722:	3860e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001b726:	4511                	li	a0,4
    8001b728:	f46e50ef          	jal	80000e6e <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b72c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b730:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b734:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b738:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b73c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b740:	10000793          	li	a5,256
    8001b744:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b748:	20000793          	li	a5,512
    8001b74c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b750:	40000793          	li	a5,1024
    8001b754:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b758:	6785                	lui	a5,0x1
    8001b75a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b75e:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b762:	4785                	li	a5,1
    8001b764:	07fe                	slli	a5,a5,0x1f
    8001b766:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001b76a:	08100793          	li	a5,129
    8001b76e:	07e2                	slli	a5,a5,0x18
    8001b770:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b774:	08000793          	li	a5,128
    8001b778:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001b77c:	67a1                	lui	a5,0x8
    8001b77e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001b782:	4501                	li	a0,0
    8001b784:	eeae50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b788:	deae50ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    8001b78c:	37ab77b7          	lui	a5,0x37ab7
    8001b790:	4705                	li	a4,1
    8001b792:	078a                	slli	a5,a5,0x2
    8001b794:	170e                	slli	a4,a4,0x23
    8001b796:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b79a:	1761                	addi	a4,a4,-8
    8001b79c:	00f73023          	sd	a5,0(a4)
    
    sd(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b7a0:	08200593          	li	a1,130
    8001b7a4:	00018617          	auipc	a2,0x18
    8001b7a8:	51c60613          	addi	a2,a2,1308 # 80033cc0 <__func__.0+0x6ca0>
    8001b7ac:	00012517          	auipc	a0,0x12
    8001b7b0:	b6c50513          	addi	a0,a0,-1172 # 8002d318 <__func__.0+0x2f8>
    8001b7b4:	6060f0ef          	jal	8002adba <printf>
    8001b7b8:	00036797          	auipc	a5,0x36
    8001b7bc:	8597c783          	lbu	a5,-1959(a5) # 80051011 <excpt+0x1>
    8001b7c0:	00036497          	auipc	s1,0x36
    8001b7c4:	85048493          	addi	s1,s1,-1968 # 80051010 <excpt>
    8001b7c8:	00012597          	auipc	a1,0x12
    8001b7cc:	b2858593          	addi	a1,a1,-1240 # 8002d2f0 <__func__.0+0x2d0>
    8001b7d0:	cf89                	beqz	a5,8001b7ea <store_access_fault_9+0xe6>
    8001b7d2:	6498                	ld	a4,8(s1)
    8001b7d4:	479d                	li	a5,7
    8001b7d6:	00012597          	auipc	a1,0x12
    8001b7da:	b0a58593          	addi	a1,a1,-1270 # 8002d2e0 <__func__.0+0x2c0>
    8001b7de:	00f70663          	beq	a4,a5,8001b7ea <store_access_fault_9+0xe6>
    8001b7e2:	00012597          	auipc	a1,0x12
    8001b7e6:	b0e58593          	addi	a1,a1,-1266 # 8002d2f0 <__func__.0+0x2d0>
    8001b7ea:	00012517          	auipc	a0,0x12
    8001b7ee:	b4650513          	addi	a0,a0,-1210 # 8002d330 <__func__.0+0x310>
    8001b7f2:	5c80f0ef          	jal	8002adba <printf>
    8001b7f6:	00036797          	auipc	a5,0x36
    8001b7fa:	81b7c783          	lbu	a5,-2021(a5) # 80051011 <excpt+0x1>
    8001b7fe:	c789                	beqz	a5,8001b808 <store_access_fault_9+0x104>
    8001b800:	6498                	ld	a4,8(s1)
    8001b802:	479d                	li	a5,7
    8001b804:	00f70c63          	beq	a4,a5,8001b81c <store_access_fault_9+0x118>
    8001b808:	00012517          	auipc	a0,0x12
    8001b80c:	b3050513          	addi	a0,a0,-1232 # 8002d338 <__func__.0+0x318>
    8001b810:	5aa0f0ef          	jal	8002adba <printf>
    8001b814:	02900513          	li	a0,41
    8001b818:	2900e0ef          	jal	80029aa8 <putchar>
    8001b81c:	4529                	li	a0,10
    8001b81e:	28a0e0ef          	jal	80029aa8 <putchar>
    8001b822:	00035417          	auipc	s0,0x35
    8001b826:	7ef44403          	lbu	s0,2031(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b82a:	00012597          	auipc	a1,0x12
    8001b82e:	ac658593          	addi	a1,a1,-1338 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b832:	cc11                	beqz	s0,8001b84e <store_access_fault_9+0x14a>
    8001b834:	6498                	ld	a4,8(s1)
    8001b836:	479d                	li	a5,7
    TEST_END();
    8001b838:	00012597          	auipc	a1,0x12
    8001b83c:	aa858593          	addi	a1,a1,-1368 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf",
    8001b840:	00f70763          	beq	a4,a5,8001b84e <store_access_fault_9+0x14a>
    8001b844:	4401                	li	s0,0
    TEST_END();
    8001b846:	00012597          	auipc	a1,0x12
    8001b84a:	aaa58593          	addi	a1,a1,-1366 # 8002d2f0 <__func__.0+0x2d0>
    8001b84e:	00012517          	auipc	a0,0x12
    8001b852:	b4a50513          	addi	a0,a0,-1206 # 8002d398 <__func__.0+0x378>
    8001b856:	5640f0ef          	jal	8002adba <printf>
    8001b85a:	4511                	li	a0,4
    8001b85c:	e12e50ef          	jal	80000e6e <goto_priv>
    8001b860:	f2be50ef          	jal	8000178a <reset_state>
}
    8001b864:	60e2                	ld	ra,24(sp)
    8001b866:	8522                	mv	a0,s0
    8001b868:	6442                	ld	s0,16(sp)
    8001b86a:	64a2                	ld	s1,8(sp)
    8001b86c:	6105                	addi	sp,sp,32
    8001b86e:	8082                	ret

000000008001b870 <store_access_fault_10>:


bool store_access_fault_10(){
    8001b870:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b872:	00011597          	auipc	a1,0x11
    8001b876:	bee58593          	addi	a1,a1,-1042 # 8002c460 <__func__.20>
    8001b87a:	00012517          	auipc	a0,0x12
    8001b87e:	a8650513          	addi	a0,a0,-1402 # 8002d300 <__func__.0+0x2e0>
bool store_access_fault_10(){
    8001b882:	ec06                	sd	ra,24(sp)
    8001b884:	e822                	sd	s0,16(sp)
    8001b886:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b888:	5320f0ef          	jal	8002adba <printf>
    8001b88c:	4529                	li	a0,10
    8001b88e:	21a0e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001b892:	4511                	li	a0,4
    8001b894:	ddae50ef          	jal	80000e6e <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b898:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001b89c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001b8a0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001b8a4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001b8a8:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b8ac:	4785                	li	a5,1
    8001b8ae:	07fe                	slli	a5,a5,0x1f
    8001b8b0:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001b8b4:	08000793          	li	a5,128
    8001b8b8:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001b8bc:	450d                	li	a0,3
    8001b8be:	db0e50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001b8c2:	cb0e50ef          	jal	80000d72 <test_setup_except_function>
    8001b8c6:	37ab77b7          	lui	a5,0x37ab7
    8001b8ca:	078a                	slli	a5,a5,0x2
    8001b8cc:	00803737          	lui	a4,0x803
    8001b8d0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001b8d4:	072a                	slli	a4,a4,0xa
    8001b8d6:	00f73023          	sd	a5,0(a4) # 803000 <STACK_SIZE+0x703000>
    
    sd(0x80300000UL << 2,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001b8da:	08200593          	li	a1,130
    8001b8de:	00018617          	auipc	a2,0x18
    8001b8e2:	45260613          	addi	a2,a2,1106 # 80033d30 <__func__.0+0x6d10>
    8001b8e6:	00012517          	auipc	a0,0x12
    8001b8ea:	a3250513          	addi	a0,a0,-1486 # 8002d318 <__func__.0+0x2f8>
    8001b8ee:	4cc0f0ef          	jal	8002adba <printf>
    8001b8f2:	00035797          	auipc	a5,0x35
    8001b8f6:	71f7c783          	lbu	a5,1823(a5) # 80051011 <excpt+0x1>
    8001b8fa:	00035497          	auipc	s1,0x35
    8001b8fe:	71648493          	addi	s1,s1,1814 # 80051010 <excpt>
    8001b902:	00012597          	auipc	a1,0x12
    8001b906:	9ee58593          	addi	a1,a1,-1554 # 8002d2f0 <__func__.0+0x2d0>
    8001b90a:	cf89                	beqz	a5,8001b924 <store_access_fault_10+0xb4>
    8001b90c:	6498                	ld	a4,8(s1)
    8001b90e:	479d                	li	a5,7
    8001b910:	00012597          	auipc	a1,0x12
    8001b914:	9d058593          	addi	a1,a1,-1584 # 8002d2e0 <__func__.0+0x2c0>
    8001b918:	00f70663          	beq	a4,a5,8001b924 <store_access_fault_10+0xb4>
    8001b91c:	00012597          	auipc	a1,0x12
    8001b920:	9d458593          	addi	a1,a1,-1580 # 8002d2f0 <__func__.0+0x2d0>
    8001b924:	00012517          	auipc	a0,0x12
    8001b928:	a0c50513          	addi	a0,a0,-1524 # 8002d330 <__func__.0+0x310>
    8001b92c:	48e0f0ef          	jal	8002adba <printf>
    8001b930:	00035797          	auipc	a5,0x35
    8001b934:	6e17c783          	lbu	a5,1761(a5) # 80051011 <excpt+0x1>
    8001b938:	c789                	beqz	a5,8001b942 <store_access_fault_10+0xd2>
    8001b93a:	6498                	ld	a4,8(s1)
    8001b93c:	479d                	li	a5,7
    8001b93e:	00f70c63          	beq	a4,a5,8001b956 <store_access_fault_10+0xe6>
    8001b942:	00012517          	auipc	a0,0x12
    8001b946:	9f650513          	addi	a0,a0,-1546 # 8002d338 <__func__.0+0x318>
    8001b94a:	4700f0ef          	jal	8002adba <printf>
    8001b94e:	02900513          	li	a0,41
    8001b952:	1560e0ef          	jal	80029aa8 <putchar>
    8001b956:	4529                	li	a0,10
    8001b958:	1500e0ef          	jal	80029aa8 <putchar>
    8001b95c:	00035417          	auipc	s0,0x35
    8001b960:	6b544403          	lbu	s0,1717(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001b964:	00012597          	auipc	a1,0x12
    8001b968:	98c58593          	addi	a1,a1,-1652 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001b96c:	cc11                	beqz	s0,8001b988 <store_access_fault_10+0x118>
    8001b96e:	6498                	ld	a4,8(s1)
    8001b970:	479d                	li	a5,7
    TEST_END();
    8001b972:	00012597          	auipc	a1,0x12
    8001b976:	96e58593          	addi	a1,a1,-1682 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to saf",
    8001b97a:	00f70763          	beq	a4,a5,8001b988 <store_access_fault_10+0x118>
    8001b97e:	4401                	li	s0,0
    TEST_END();
    8001b980:	00012597          	auipc	a1,0x12
    8001b984:	97058593          	addi	a1,a1,-1680 # 8002d2f0 <__func__.0+0x2d0>
    8001b988:	00012517          	auipc	a0,0x12
    8001b98c:	a1050513          	addi	a0,a0,-1520 # 8002d398 <__func__.0+0x378>
    8001b990:	42a0f0ef          	jal	8002adba <printf>
    8001b994:	4511                	li	a0,4
    8001b996:	cd8e50ef          	jal	80000e6e <goto_priv>
    8001b99a:	df1e50ef          	jal	8000178a <reset_state>
}
    8001b99e:	60e2                	ld	ra,24(sp)
    8001b9a0:	8522                	mv	a0,s0
    8001b9a2:	6442                	ld	s0,16(sp)
    8001b9a4:	64a2                	ld	s1,8(sp)
    8001b9a6:	6105                	addi	sp,sp,32
    8001b9a8:	8082                	ret

000000008001b9aa <amo_access_fault_1>:




bool amo_access_fault_1(){
    8001b9aa:	1101                	addi	sp,sp,-32

    TEST_START();
    8001b9ac:	00011597          	auipc	a1,0x11
    8001b9b0:	acc58593          	addi	a1,a1,-1332 # 8002c478 <__func__.19>
    8001b9b4:	00012517          	auipc	a0,0x12
    8001b9b8:	94c50513          	addi	a0,a0,-1716 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_1(){
    8001b9bc:	ec06                	sd	ra,24(sp)
    8001b9be:	e822                	sd	s0,16(sp)
    8001b9c0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001b9c2:	3f80f0ef          	jal	8002adba <printf>
    8001b9c6:	4529                	li	a0,10
    8001b9c8:	0e00e0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001b9cc:	4511                	li	a0,4
    8001b9ce:	ca0e50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001b9d2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001b9d6:	10000793          	li	a5,256
    8001b9da:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001b9de:	20000793          	li	a5,512
    8001b9e2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001b9e6:	40000793          	li	a5,1024
    8001b9ea:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001b9ee:	6785                	lui	a5,0x1
    8001b9f0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001b9f4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001b9f8:	4785                	li	a5,1
    8001b9fa:	07fe                	slli	a5,a5,0x1f
    8001b9fc:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001ba00:	08100793          	li	a5,129
    8001ba04:	07e2                	slli	a5,a5,0x18
    8001ba06:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001ba0a:	67a1                	lui	a5,0x8
    8001ba0c:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001ba10:	b62e50ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoadd_d, "amoadd.d", uint64_t);
    8001ba14:	37ab77b7          	lui	a5,0x37ab7
    8001ba18:	4705                	li	a4,1
    8001ba1a:	078a                	slli	a5,a5,0x2
    8001ba1c:	1706                	slli	a4,a4,0x21
    8001ba1e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001ba22:	40070713          	addi	a4,a4,1024
    8001ba26:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001ba2a:	00035597          	auipc	a1,0x35
    8001ba2e:	5e75c583          	lbu	a1,1511(a1) # 80051011 <excpt+0x1>
    8001ba32:	00012517          	auipc	a0,0x12
    8001ba36:	45650513          	addi	a0,a0,1110 # 8002de88 <__func__.0+0xe68>
    8001ba3a:	00035417          	auipc	s0,0x35
    8001ba3e:	5d640413          	addi	s0,s0,1494 # 80051010 <excpt>
    8001ba42:	3780f0ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001ba46:	640c                	ld	a1,8(s0)
    8001ba48:	00012517          	auipc	a0,0x12
    8001ba4c:	44050513          	addi	a0,a0,1088 # 8002de88 <__func__.0+0xe68>
    8001ba50:	36a0f0ef          	jal	8002adba <printf>

    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001ba54:	08200593          	li	a1,130
    8001ba58:	00018617          	auipc	a2,0x18
    8001ba5c:	33860613          	addi	a2,a2,824 # 80033d90 <__func__.0+0x6d70>
    8001ba60:	00012517          	auipc	a0,0x12
    8001ba64:	8b850513          	addi	a0,a0,-1864 # 8002d318 <__func__.0+0x2f8>
    8001ba68:	3520f0ef          	jal	8002adba <printf>
    8001ba6c:	00035797          	auipc	a5,0x35
    8001ba70:	5a57c783          	lbu	a5,1445(a5) # 80051011 <excpt+0x1>
    8001ba74:	00012597          	auipc	a1,0x12
    8001ba78:	87c58593          	addi	a1,a1,-1924 # 8002d2f0 <__func__.0+0x2d0>
    8001ba7c:	cf89                	beqz	a5,8001ba96 <amo_access_fault_1+0xec>
    8001ba7e:	6418                	ld	a4,8(s0)
    8001ba80:	479d                	li	a5,7
    8001ba82:	00012597          	auipc	a1,0x12
    8001ba86:	85e58593          	addi	a1,a1,-1954 # 8002d2e0 <__func__.0+0x2c0>
    8001ba8a:	00f70663          	beq	a4,a5,8001ba96 <amo_access_fault_1+0xec>
    8001ba8e:	00012597          	auipc	a1,0x12
    8001ba92:	86258593          	addi	a1,a1,-1950 # 8002d2f0 <__func__.0+0x2d0>
    8001ba96:	00012517          	auipc	a0,0x12
    8001ba9a:	89a50513          	addi	a0,a0,-1894 # 8002d330 <__func__.0+0x310>
    8001ba9e:	31c0f0ef          	jal	8002adba <printf>
    8001baa2:	00035797          	auipc	a5,0x35
    8001baa6:	56f7c783          	lbu	a5,1391(a5) # 80051011 <excpt+0x1>
    8001baaa:	c789                	beqz	a5,8001bab4 <amo_access_fault_1+0x10a>
    8001baac:	6418                	ld	a4,8(s0)
    8001baae:	479d                	li	a5,7
    8001bab0:	00f70c63          	beq	a4,a5,8001bac8 <amo_access_fault_1+0x11e>
    8001bab4:	00012517          	auipc	a0,0x12
    8001bab8:	88450513          	addi	a0,a0,-1916 # 8002d338 <__func__.0+0x318>
    8001babc:	2fe0f0ef          	jal	8002adba <printf>
    8001bac0:	02900513          	li	a0,41
    8001bac4:	7e50d0ef          	jal	80029aa8 <putchar>
    8001bac8:	4529                	li	a0,10
    8001baca:	7df0d0ef          	jal	80029aa8 <putchar>
    8001bace:	00035497          	auipc	s1,0x35
    8001bad2:	5434c483          	lbu	s1,1347(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bad6:	00012597          	auipc	a1,0x12
    8001bada:	81a58593          	addi	a1,a1,-2022 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bade:	cc91                	beqz	s1,8001bafa <amo_access_fault_1+0x150>
    8001bae0:	6418                	ld	a4,8(s0)
    8001bae2:	479d                	li	a5,7
    TEST_END();
    8001bae4:	00011597          	auipc	a1,0x11
    8001bae8:	7fc58593          	addi	a1,a1,2044 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("m mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001baec:	00f70763          	beq	a4,a5,8001bafa <amo_access_fault_1+0x150>
    8001baf0:	4481                	li	s1,0
    TEST_END();
    8001baf2:	00011597          	auipc	a1,0x11
    8001baf6:	7fe58593          	addi	a1,a1,2046 # 8002d2f0 <__func__.0+0x2d0>
    8001bafa:	00012517          	auipc	a0,0x12
    8001bafe:	89e50513          	addi	a0,a0,-1890 # 8002d398 <__func__.0+0x378>
    8001bb02:	2b80f0ef          	jal	8002adba <printf>
    8001bb06:	4511                	li	a0,4
    8001bb08:	b66e50ef          	jal	80000e6e <goto_priv>
    8001bb0c:	c7fe50ef          	jal	8000178a <reset_state>
}
    8001bb10:	60e2                	ld	ra,24(sp)
    8001bb12:	6442                	ld	s0,16(sp)
    8001bb14:	8526                	mv	a0,s1
    8001bb16:	64a2                	ld	s1,8(sp)
    8001bb18:	6105                	addi	sp,sp,32
    8001bb1a:	8082                	ret

000000008001bb1c <amo_access_fault_2>:

bool amo_access_fault_2(){
    8001bb1c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bb1e:	00011597          	auipc	a1,0x11
    8001bb22:	97258593          	addi	a1,a1,-1678 # 8002c490 <__func__.18>
    8001bb26:	00011517          	auipc	a0,0x11
    8001bb2a:	7da50513          	addi	a0,a0,2010 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_2(){
    8001bb2e:	ec06                	sd	ra,24(sp)
    8001bb30:	e822                	sd	s0,16(sp)
    8001bb32:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bb34:	2860f0ef          	jal	8002adba <printf>
    8001bb38:	4529                	li	a0,10
    8001bb3a:	76f0d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001bb3e:	4511                	li	a0,4
    8001bb40:	b2ee50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bb44:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bb48:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bb4c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bb50:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bb54:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bb58:	10000793          	li	a5,256
    8001bb5c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bb60:	20000793          	li	a5,512
    8001bb64:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bb68:	40000793          	li	a5,1024
    8001bb6c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bb70:	6785                	lui	a5,0x1
    8001bb72:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bb76:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bb7a:	4785                	li	a5,1
    8001bb7c:	07fe                	slli	a5,a5,0x1f
    8001bb7e:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bb82:	08100793          	li	a5,129
    8001bb86:	07e2                	slli	a5,a5,0x18
    8001bb88:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bb8c:	08000793          	li	a5,128
    8001bb90:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bb94:	67a1                	lui	a5,0x8
    8001bb96:	3a07a073          	csrs	pmpcfg0,a5


    goto_priv(PRIV_HS);
    8001bb9a:	450d                	li	a0,3
    8001bb9c:	ad2e50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bba0:	9d2e50ef          	jal	80000d72 <test_setup_except_function>
    8001bba4:	37ab77b7          	lui	a5,0x37ab7
    8001bba8:	4705                	li	a4,1
    8001bbaa:	078a                	slli	a5,a5,0x2
    8001bbac:	1706                	slli	a4,a4,0x21
    8001bbae:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bbb2:	40070713          	addi	a4,a4,1024
    8001bbb6:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bbba:	08200593          	li	a1,130
    8001bbbe:	00018617          	auipc	a2,0x18
    8001bbc2:	21260613          	addi	a2,a2,530 # 80033dd0 <__func__.0+0x6db0>
    8001bbc6:	00011517          	auipc	a0,0x11
    8001bbca:	75250513          	addi	a0,a0,1874 # 8002d318 <__func__.0+0x2f8>
    8001bbce:	1ec0f0ef          	jal	8002adba <printf>
    8001bbd2:	00035797          	auipc	a5,0x35
    8001bbd6:	43f7c783          	lbu	a5,1087(a5) # 80051011 <excpt+0x1>
    8001bbda:	00035497          	auipc	s1,0x35
    8001bbde:	43648493          	addi	s1,s1,1078 # 80051010 <excpt>
    8001bbe2:	00011597          	auipc	a1,0x11
    8001bbe6:	70e58593          	addi	a1,a1,1806 # 8002d2f0 <__func__.0+0x2d0>
    8001bbea:	cf89                	beqz	a5,8001bc04 <amo_access_fault_2+0xe8>
    8001bbec:	6498                	ld	a4,8(s1)
    8001bbee:	479d                	li	a5,7
    8001bbf0:	00011597          	auipc	a1,0x11
    8001bbf4:	6f058593          	addi	a1,a1,1776 # 8002d2e0 <__func__.0+0x2c0>
    8001bbf8:	00f70663          	beq	a4,a5,8001bc04 <amo_access_fault_2+0xe8>
    8001bbfc:	00011597          	auipc	a1,0x11
    8001bc00:	6f458593          	addi	a1,a1,1780 # 8002d2f0 <__func__.0+0x2d0>
    8001bc04:	00011517          	auipc	a0,0x11
    8001bc08:	72c50513          	addi	a0,a0,1836 # 8002d330 <__func__.0+0x310>
    8001bc0c:	1ae0f0ef          	jal	8002adba <printf>
    8001bc10:	00035797          	auipc	a5,0x35
    8001bc14:	4017c783          	lbu	a5,1025(a5) # 80051011 <excpt+0x1>
    8001bc18:	c789                	beqz	a5,8001bc22 <amo_access_fault_2+0x106>
    8001bc1a:	6498                	ld	a4,8(s1)
    8001bc1c:	479d                	li	a5,7
    8001bc1e:	00f70c63          	beq	a4,a5,8001bc36 <amo_access_fault_2+0x11a>
    8001bc22:	00011517          	auipc	a0,0x11
    8001bc26:	71650513          	addi	a0,a0,1814 # 8002d338 <__func__.0+0x318>
    8001bc2a:	1900f0ef          	jal	8002adba <printf>
    8001bc2e:	02900513          	li	a0,41
    8001bc32:	6770d0ef          	jal	80029aa8 <putchar>
    8001bc36:	4529                	li	a0,10
    8001bc38:	6710d0ef          	jal	80029aa8 <putchar>
    8001bc3c:	00035417          	auipc	s0,0x35
    8001bc40:	3d544403          	lbu	s0,981(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bc44:	00011597          	auipc	a1,0x11
    8001bc48:	6ac58593          	addi	a1,a1,1708 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bc4c:	cc11                	beqz	s0,8001bc68 <amo_access_fault_2+0x14c>
    8001bc4e:	6498                	ld	a4,8(s1)
    8001bc50:	479d                	li	a5,7
    TEST_END();
    8001bc52:	00011597          	auipc	a1,0x11
    8001bc56:	68e58593          	addi	a1,a1,1678 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bc5a:	00f70763          	beq	a4,a5,8001bc68 <amo_access_fault_2+0x14c>
    8001bc5e:	4401                	li	s0,0
    TEST_END();
    8001bc60:	00011597          	auipc	a1,0x11
    8001bc64:	69058593          	addi	a1,a1,1680 # 8002d2f0 <__func__.0+0x2d0>
    8001bc68:	00011517          	auipc	a0,0x11
    8001bc6c:	73050513          	addi	a0,a0,1840 # 8002d398 <__func__.0+0x378>
    8001bc70:	14a0f0ef          	jal	8002adba <printf>
    8001bc74:	4511                	li	a0,4
    8001bc76:	9f8e50ef          	jal	80000e6e <goto_priv>
    8001bc7a:	b11e50ef          	jal	8000178a <reset_state>
}
    8001bc7e:	60e2                	ld	ra,24(sp)
    8001bc80:	8522                	mv	a0,s0
    8001bc82:	6442                	ld	s0,16(sp)
    8001bc84:	64a2                	ld	s1,8(sp)
    8001bc86:	6105                	addi	sp,sp,32
    8001bc88:	8082                	ret

000000008001bc8a <amo_access_fault_3>:


bool amo_access_fault_3(){
    8001bc8a:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bc8c:	00011597          	auipc	a1,0x11
    8001bc90:	81c58593          	addi	a1,a1,-2020 # 8002c4a8 <__func__.17>
    8001bc94:	00011517          	auipc	a0,0x11
    8001bc98:	66c50513          	addi	a0,a0,1644 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_3(){
    8001bc9c:	ec06                	sd	ra,24(sp)
    8001bc9e:	e822                	sd	s0,16(sp)
    8001bca0:	e426                	sd	s1,8(sp)
    TEST_START();
    8001bca2:	1180f0ef          	jal	8002adba <printf>
    8001bca6:	4529                	li	a0,10
    8001bca8:	6010d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001bcac:	4511                	li	a0,4
    8001bcae:	9c0e50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bcb2:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001bcb6:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001bcba:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001bcbe:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001bcc2:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bcc6:	10000793          	li	a5,256
    8001bcca:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bcce:	20000793          	li	a5,512
    8001bcd2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bcd6:	40000793          	li	a5,1024
    8001bcda:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bcde:	6785                	lui	a5,0x1
    8001bce0:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bce4:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bce8:	4785                	li	a5,1
    8001bcea:	07fe                	slli	a5,a5,0x1f
    8001bcec:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bcf0:	08100793          	li	a5,129
    8001bcf4:	07e2                	slli	a5,a5,0x18
    8001bcf6:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001bcfa:	08000793          	li	a5,128
    8001bcfe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bd02:	67a1                	lui	a5,0x8
    8001bd04:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001bd08:	4505                	li	a0,1
    8001bd0a:	964e50ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001bd0e:	864e50ef          	jal	80000d72 <test_setup_except_function>
    8001bd12:	37ab77b7          	lui	a5,0x37ab7
    8001bd16:	4705                	li	a4,1
    8001bd18:	078a                	slli	a5,a5,0x2
    8001bd1a:	1706                	slli	a4,a4,0x21
    8001bd1c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bd20:	40070713          	addi	a4,a4,1024
    8001bd24:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bd28:	08200593          	li	a1,130
    8001bd2c:	00018617          	auipc	a2,0x18
    8001bd30:	0e460613          	addi	a2,a2,228 # 80033e10 <__func__.0+0x6df0>
    8001bd34:	00011517          	auipc	a0,0x11
    8001bd38:	5e450513          	addi	a0,a0,1508 # 8002d318 <__func__.0+0x2f8>
    8001bd3c:	07e0f0ef          	jal	8002adba <printf>
    8001bd40:	00035797          	auipc	a5,0x35
    8001bd44:	2d17c783          	lbu	a5,721(a5) # 80051011 <excpt+0x1>
    8001bd48:	00035497          	auipc	s1,0x35
    8001bd4c:	2c848493          	addi	s1,s1,712 # 80051010 <excpt>
    8001bd50:	00011597          	auipc	a1,0x11
    8001bd54:	5a058593          	addi	a1,a1,1440 # 8002d2f0 <__func__.0+0x2d0>
    8001bd58:	cf89                	beqz	a5,8001bd72 <amo_access_fault_3+0xe8>
    8001bd5a:	6498                	ld	a4,8(s1)
    8001bd5c:	479d                	li	a5,7
    8001bd5e:	00011597          	auipc	a1,0x11
    8001bd62:	58258593          	addi	a1,a1,1410 # 8002d2e0 <__func__.0+0x2c0>
    8001bd66:	00f70663          	beq	a4,a5,8001bd72 <amo_access_fault_3+0xe8>
    8001bd6a:	00011597          	auipc	a1,0x11
    8001bd6e:	58658593          	addi	a1,a1,1414 # 8002d2f0 <__func__.0+0x2d0>
    8001bd72:	00011517          	auipc	a0,0x11
    8001bd76:	5be50513          	addi	a0,a0,1470 # 8002d330 <__func__.0+0x310>
    8001bd7a:	0400f0ef          	jal	8002adba <printf>
    8001bd7e:	00035797          	auipc	a5,0x35
    8001bd82:	2937c783          	lbu	a5,659(a5) # 80051011 <excpt+0x1>
    8001bd86:	c789                	beqz	a5,8001bd90 <amo_access_fault_3+0x106>
    8001bd88:	6498                	ld	a4,8(s1)
    8001bd8a:	479d                	li	a5,7
    8001bd8c:	00f70c63          	beq	a4,a5,8001bda4 <amo_access_fault_3+0x11a>
    8001bd90:	00011517          	auipc	a0,0x11
    8001bd94:	5a850513          	addi	a0,a0,1448 # 8002d338 <__func__.0+0x318>
    8001bd98:	0220f0ef          	jal	8002adba <printf>
    8001bd9c:	02900513          	li	a0,41
    8001bda0:	5090d0ef          	jal	80029aa8 <putchar>
    8001bda4:	4529                	li	a0,10
    8001bda6:	5030d0ef          	jal	80029aa8 <putchar>
    8001bdaa:	00035417          	auipc	s0,0x35
    8001bdae:	26744403          	lbu	s0,615(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bdb2:	00011597          	auipc	a1,0x11
    8001bdb6:	53e58593          	addi	a1,a1,1342 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bdba:	cc11                	beqz	s0,8001bdd6 <amo_access_fault_3+0x14c>
    8001bdbc:	6498                	ld	a4,8(s1)
    8001bdbe:	479d                	li	a5,7
    TEST_END();
    8001bdc0:	00011597          	auipc	a1,0x11
    8001bdc4:	52058593          	addi	a1,a1,1312 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bdc8:	00f70763          	beq	a4,a5,8001bdd6 <amo_access_fault_3+0x14c>
    8001bdcc:	4401                	li	s0,0
    TEST_END();
    8001bdce:	00011597          	auipc	a1,0x11
    8001bdd2:	52258593          	addi	a1,a1,1314 # 8002d2f0 <__func__.0+0x2d0>
    8001bdd6:	00011517          	auipc	a0,0x11
    8001bdda:	5c250513          	addi	a0,a0,1474 # 8002d398 <__func__.0+0x378>
    8001bdde:	7dd0e0ef          	jal	8002adba <printf>
    8001bde2:	4511                	li	a0,4
    8001bde4:	88ae50ef          	jal	80000e6e <goto_priv>
    8001bde8:	9a3e50ef          	jal	8000178a <reset_state>
}
    8001bdec:	60e2                	ld	ra,24(sp)
    8001bdee:	8522                	mv	a0,s0
    8001bdf0:	6442                	ld	s0,16(sp)
    8001bdf2:	64a2                	ld	s1,8(sp)
    8001bdf4:	6105                	addi	sp,sp,32
    8001bdf6:	8082                	ret

000000008001bdf8 <amo_access_fault_4>:

bool amo_access_fault_4(){
    8001bdf8:	1101                	addi	sp,sp,-32

    TEST_START();
    8001bdfa:	00010597          	auipc	a1,0x10
    8001bdfe:	6c658593          	addi	a1,a1,1734 # 8002c4c0 <__func__.16>
    8001be02:	00011517          	auipc	a0,0x11
    8001be06:	4fe50513          	addi	a0,a0,1278 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_4(){
    8001be0a:	ec06                	sd	ra,24(sp)
    8001be0c:	e822                	sd	s0,16(sp)
    8001be0e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001be10:	7ab0e0ef          	jal	8002adba <printf>
    8001be14:	4529                	li	a0,10
    8001be16:	4930d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001be1a:	4511                	li	a0,4
    8001be1c:	852e50ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001be20:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001be24:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001be28:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001be2c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001be30:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001be34:	10000793          	li	a5,256
    8001be38:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001be3c:	20000793          	li	a5,512
    8001be40:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001be44:	40000793          	li	a5,1024
    8001be48:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001be4c:	6785                	lui	a5,0x1
    8001be4e:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001be52:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001be56:	4785                	li	a5,1
    8001be58:	07fe                	slli	a5,a5,0x1f
    8001be5a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001be5e:	08100793          	li	a5,129
    8001be62:	07e2                	slli	a5,a5,0x18
    8001be64:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001be68:	08000793          	li	a5,128
    8001be6c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001be70:	67a1                	lui	a5,0x8
    8001be72:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001be76:	4501                	li	a0,0
    8001be78:	ff7e40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001be7c:	ef7e40ef          	jal	80000d72 <test_setup_except_function>
    8001be80:	37ab77b7          	lui	a5,0x37ab7
    8001be84:	4705                	li	a4,1
    8001be86:	078a                	slli	a5,a5,0x2
    8001be88:	1706                	slli	a4,a4,0x21
    8001be8a:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001be8e:	40070713          	addi	a4,a4,1024
    8001be92:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001be96:	08200593          	li	a1,130
    8001be9a:	00018617          	auipc	a2,0x18
    8001be9e:	fb660613          	addi	a2,a2,-74 # 80033e50 <__func__.0+0x6e30>
    8001bea2:	00011517          	auipc	a0,0x11
    8001bea6:	47650513          	addi	a0,a0,1142 # 8002d318 <__func__.0+0x2f8>
    8001beaa:	7110e0ef          	jal	8002adba <printf>
    8001beae:	00035797          	auipc	a5,0x35
    8001beb2:	1637c783          	lbu	a5,355(a5) # 80051011 <excpt+0x1>
    8001beb6:	00035497          	auipc	s1,0x35
    8001beba:	15a48493          	addi	s1,s1,346 # 80051010 <excpt>
    8001bebe:	00011597          	auipc	a1,0x11
    8001bec2:	43258593          	addi	a1,a1,1074 # 8002d2f0 <__func__.0+0x2d0>
    8001bec6:	cf89                	beqz	a5,8001bee0 <amo_access_fault_4+0xe8>
    8001bec8:	6498                	ld	a4,8(s1)
    8001beca:	479d                	li	a5,7
    8001becc:	00011597          	auipc	a1,0x11
    8001bed0:	41458593          	addi	a1,a1,1044 # 8002d2e0 <__func__.0+0x2c0>
    8001bed4:	00f70663          	beq	a4,a5,8001bee0 <amo_access_fault_4+0xe8>
    8001bed8:	00011597          	auipc	a1,0x11
    8001bedc:	41858593          	addi	a1,a1,1048 # 8002d2f0 <__func__.0+0x2d0>
    8001bee0:	00011517          	auipc	a0,0x11
    8001bee4:	45050513          	addi	a0,a0,1104 # 8002d330 <__func__.0+0x310>
    8001bee8:	6d30e0ef          	jal	8002adba <printf>
    8001beec:	00035797          	auipc	a5,0x35
    8001bef0:	1257c783          	lbu	a5,293(a5) # 80051011 <excpt+0x1>
    8001bef4:	c789                	beqz	a5,8001befe <amo_access_fault_4+0x106>
    8001bef6:	6498                	ld	a4,8(s1)
    8001bef8:	479d                	li	a5,7
    8001befa:	00f70c63          	beq	a4,a5,8001bf12 <amo_access_fault_4+0x11a>
    8001befe:	00011517          	auipc	a0,0x11
    8001bf02:	43a50513          	addi	a0,a0,1082 # 8002d338 <__func__.0+0x318>
    8001bf06:	6b50e0ef          	jal	8002adba <printf>
    8001bf0a:	02900513          	li	a0,41
    8001bf0e:	39b0d0ef          	jal	80029aa8 <putchar>
    8001bf12:	4529                	li	a0,10
    8001bf14:	3950d0ef          	jal	80029aa8 <putchar>
    8001bf18:	00035417          	auipc	s0,0x35
    8001bf1c:	0f944403          	lbu	s0,249(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001bf20:	00011597          	auipc	a1,0x11
    8001bf24:	3d058593          	addi	a1,a1,976 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bf28:	cc11                	beqz	s0,8001bf44 <amo_access_fault_4+0x14c>
    8001bf2a:	6498                	ld	a4,8(s1)
    8001bf2c:	479d                	li	a5,7
    TEST_END();
    8001bf2e:	00011597          	auipc	a1,0x11
    8001bf32:	3b258593          	addi	a1,a1,946 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=1 leads to SAF",
    8001bf36:	00f70763          	beq	a4,a5,8001bf44 <amo_access_fault_4+0x14c>
    8001bf3a:	4401                	li	s0,0
    TEST_END();
    8001bf3c:	00011597          	auipc	a1,0x11
    8001bf40:	3b458593          	addi	a1,a1,948 # 8002d2f0 <__func__.0+0x2d0>
    8001bf44:	00011517          	auipc	a0,0x11
    8001bf48:	45450513          	addi	a0,a0,1108 # 8002d398 <__func__.0+0x378>
    8001bf4c:	66f0e0ef          	jal	8002adba <printf>
    8001bf50:	4511                	li	a0,4
    8001bf52:	f1de40ef          	jal	80000e6e <goto_priv>
    8001bf56:	835e50ef          	jal	8000178a <reset_state>
}
    8001bf5a:	60e2                	ld	ra,24(sp)
    8001bf5c:	8522                	mv	a0,s0
    8001bf5e:	6442                	ld	s0,16(sp)
    8001bf60:	64a2                	ld	s1,8(sp)
    8001bf62:	6105                	addi	sp,sp,32
    8001bf64:	8082                	ret

000000008001bf66 <amo_access_fault_5>:

bool amo_access_fault_5(){
    8001bf66:	1141                	addi	sp,sp,-16

    TEST_START();
    8001bf68:	00010597          	auipc	a1,0x10
    8001bf6c:	57058593          	addi	a1,a1,1392 # 8002c4d8 <__func__.15>
    8001bf70:	00011517          	auipc	a0,0x11
    8001bf74:	39050513          	addi	a0,a0,912 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_5(){
    8001bf78:	e406                	sd	ra,8(sp)
    8001bf7a:	e022                	sd	s0,0(sp)
    TEST_START();
    8001bf7c:	63f0e0ef          	jal	8002adba <printf>
    8001bf80:	4529                	li	a0,10
    8001bf82:	3270d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001bf86:	4511                	li	a0,4
    8001bf88:	ee7e40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001bf8c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001bf90:	10000793          	li	a5,256
    8001bf94:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001bf98:	20000793          	li	a5,512
    8001bf9c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001bfa0:	40000793          	li	a5,1024
    8001bfa4:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001bfa8:	6785                	lui	a5,0x1
    8001bfaa:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001bfae:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001bfb2:	4785                	li	a5,1
    8001bfb4:	07fe                	slli	a5,a5,0x1f
    8001bfb6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001bfba:	08100793          	li	a5,129
    8001bfbe:	07e2                	slli	a5,a5,0x18
    8001bfc0:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001bfc4:	67a1                	lui	a5,0x8
    8001bfc6:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001bfca:	da9e40ef          	jal	80000d72 <test_setup_except_function>
    8001bfce:	37ab77b7          	lui	a5,0x37ab7
    8001bfd2:	4705                	li	a4,1
    8001bfd4:	078a                	slli	a5,a5,0x2
    8001bfd6:	1706                	slli	a4,a4,0x21
    8001bfd8:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001bfdc:	40070713          	addi	a4,a4,1024
    8001bfe0:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    printf("%d\n",excpt.triggered);
    8001bfe4:	00035597          	auipc	a1,0x35
    8001bfe8:	02d5c583          	lbu	a1,45(a1) # 80051011 <excpt+0x1>
    8001bfec:	00012517          	auipc	a0,0x12
    8001bff0:	e9c50513          	addi	a0,a0,-356 # 8002de88 <__func__.0+0xe68>
    8001bff4:	5c70e0ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001bff8:	00035597          	auipc	a1,0x35
    8001bffc:	0205b583          	ld	a1,32(a1) # 80051018 <excpt+0x8>
    8001c000:	00012517          	auipc	a0,0x12
    8001c004:	e8850513          	addi	a0,a0,-376 # 8002de88 <__func__.0+0xe68>
    8001c008:	5b30e0ef          	jal	8002adba <printf>

    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c00c:	08200593          	li	a1,130
    8001c010:	00018617          	auipc	a2,0x18
    8001c014:	e8060613          	addi	a2,a2,-384 # 80033e90 <__func__.0+0x6e70>
    8001c018:	00011517          	auipc	a0,0x11
    8001c01c:	30050513          	addi	a0,a0,768 # 8002d318 <__func__.0+0x2f8>
    8001c020:	59b0e0ef          	jal	8002adba <printf>
    8001c024:	00035797          	auipc	a5,0x35
    8001c028:	fed7c783          	lbu	a5,-19(a5) # 80051011 <excpt+0x1>
    8001c02c:	00011597          	auipc	a1,0x11
    8001c030:	2b458593          	addi	a1,a1,692 # 8002d2e0 <__func__.0+0x2c0>
    8001c034:	c789                	beqz	a5,8001c03e <amo_access_fault_5+0xd8>
    8001c036:	00011597          	auipc	a1,0x11
    8001c03a:	2ba58593          	addi	a1,a1,698 # 8002d2f0 <__func__.0+0x2d0>
    8001c03e:	00011517          	auipc	a0,0x11
    8001c042:	2f250513          	addi	a0,a0,754 # 8002d330 <__func__.0+0x310>
    8001c046:	5750e0ef          	jal	8002adba <printf>
    8001c04a:	00035797          	auipc	a5,0x35
    8001c04e:	fc77c783          	lbu	a5,-57(a5) # 80051011 <excpt+0x1>
    8001c052:	e7a1                	bnez	a5,8001c09a <amo_access_fault_5+0x134>
    8001c054:	4529                	li	a0,10
    8001c056:	2530d0ef          	jal	80029aa8 <putchar>
    8001c05a:	00035797          	auipc	a5,0x35
    8001c05e:	fb77c783          	lbu	a5,-73(a5) # 80051011 <excpt+0x1>
    8001c062:	e795                	bnez	a5,8001c08e <amo_access_fault_5+0x128>
    8001c064:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001c066:	00011597          	auipc	a1,0x11
    8001c06a:	27a58593          	addi	a1,a1,634 # 8002d2e0 <__func__.0+0x2c0>
    8001c06e:	00011517          	auipc	a0,0x11
    8001c072:	32a50513          	addi	a0,a0,810 # 8002d398 <__func__.0+0x378>
    8001c076:	5450e0ef          	jal	8002adba <printf>
    8001c07a:	4511                	li	a0,4
    8001c07c:	df3e40ef          	jal	80000e6e <goto_priv>
    8001c080:	f0ae50ef          	jal	8000178a <reset_state>
}
    8001c084:	60a2                	ld	ra,8(sp)
    8001c086:	8522                	mv	a0,s0
    8001c088:	6402                	ld	s0,0(sp)
    8001c08a:	0141                	addi	sp,sp,16
    8001c08c:	8082                	ret
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c08e:	4401                	li	s0,0
    TEST_END();
    8001c090:	00011597          	auipc	a1,0x11
    8001c094:	26058593          	addi	a1,a1,608 # 8002d2f0 <__func__.0+0x2d0>
    8001c098:	bfd9                	j	8001c06e <amo_access_fault_5+0x108>
    TEST_ASSERT("m mode amoadd_d successful when pmpcfg.W=0 and pmpcfg.L=0 ",
    8001c09a:	00011517          	auipc	a0,0x11
    8001c09e:	29e50513          	addi	a0,a0,670 # 8002d338 <__func__.0+0x318>
    8001c0a2:	5190e0ef          	jal	8002adba <printf>
    8001c0a6:	02900513          	li	a0,41
    8001c0aa:	1ff0d0ef          	jal	80029aa8 <putchar>
    8001c0ae:	b75d                	j	8001c054 <amo_access_fault_5+0xee>

000000008001c0b0 <amo_access_fault_6>:


bool amo_access_fault_6(){
    8001c0b0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c0b2:	00010597          	auipc	a1,0x10
    8001c0b6:	43e58593          	addi	a1,a1,1086 # 8002c4f0 <__func__.14>
    8001c0ba:	00011517          	auipc	a0,0x11
    8001c0be:	24650513          	addi	a0,a0,582 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_6(){
    8001c0c2:	ec06                	sd	ra,24(sp)
    8001c0c4:	e822                	sd	s0,16(sp)
    8001c0c6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c0c8:	4f30e0ef          	jal	8002adba <printf>
    8001c0cc:	4529                	li	a0,10
    8001c0ce:	1db0d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001c0d2:	4511                	li	a0,4
    8001c0d4:	d9be40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c0d8:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c0dc:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c0e0:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c0e4:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c0e8:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c0ec:	10000793          	li	a5,256
    8001c0f0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c0f4:	20000793          	li	a5,512
    8001c0f8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c0fc:	40000793          	li	a5,1024
    8001c100:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c104:	6785                	lui	a5,0x1
    8001c106:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c10a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c10e:	4785                	li	a5,1
    8001c110:	07fe                	slli	a5,a5,0x1f
    8001c112:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c116:	08100793          	li	a5,129
    8001c11a:	07e2                	slli	a5,a5,0x18
    8001c11c:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c120:	08000793          	li	a5,128
    8001c124:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c128:	67a1                	lui	a5,0x8
    8001c12a:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c12e:	450d                	li	a0,3
    8001c130:	d3fe40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c134:	c3fe40ef          	jal	80000d72 <test_setup_except_function>
    8001c138:	37ab77b7          	lui	a5,0x37ab7
    8001c13c:	4705                	li	a4,1
    8001c13e:	078a                	slli	a5,a5,0x2
    8001c140:	1706                	slli	a4,a4,0x21
    8001c142:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c146:	40070713          	addi	a4,a4,1024
    8001c14a:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c14e:	08200593          	li	a1,130
    8001c152:	00018617          	auipc	a2,0x18
    8001c156:	d7e60613          	addi	a2,a2,-642 # 80033ed0 <__func__.0+0x6eb0>
    8001c15a:	00011517          	auipc	a0,0x11
    8001c15e:	1be50513          	addi	a0,a0,446 # 8002d318 <__func__.0+0x2f8>
    8001c162:	4590e0ef          	jal	8002adba <printf>
    8001c166:	00035797          	auipc	a5,0x35
    8001c16a:	eab7c783          	lbu	a5,-341(a5) # 80051011 <excpt+0x1>
    8001c16e:	00035497          	auipc	s1,0x35
    8001c172:	ea248493          	addi	s1,s1,-350 # 80051010 <excpt>
    8001c176:	00011597          	auipc	a1,0x11
    8001c17a:	17a58593          	addi	a1,a1,378 # 8002d2f0 <__func__.0+0x2d0>
    8001c17e:	cf89                	beqz	a5,8001c198 <amo_access_fault_6+0xe8>
    8001c180:	6498                	ld	a4,8(s1)
    8001c182:	479d                	li	a5,7
    8001c184:	00011597          	auipc	a1,0x11
    8001c188:	15c58593          	addi	a1,a1,348 # 8002d2e0 <__func__.0+0x2c0>
    8001c18c:	00f70663          	beq	a4,a5,8001c198 <amo_access_fault_6+0xe8>
    8001c190:	00011597          	auipc	a1,0x11
    8001c194:	16058593          	addi	a1,a1,352 # 8002d2f0 <__func__.0+0x2d0>
    8001c198:	00011517          	auipc	a0,0x11
    8001c19c:	19850513          	addi	a0,a0,408 # 8002d330 <__func__.0+0x310>
    8001c1a0:	41b0e0ef          	jal	8002adba <printf>
    8001c1a4:	00035797          	auipc	a5,0x35
    8001c1a8:	e6d7c783          	lbu	a5,-403(a5) # 80051011 <excpt+0x1>
    8001c1ac:	c789                	beqz	a5,8001c1b6 <amo_access_fault_6+0x106>
    8001c1ae:	6498                	ld	a4,8(s1)
    8001c1b0:	479d                	li	a5,7
    8001c1b2:	00f70c63          	beq	a4,a5,8001c1ca <amo_access_fault_6+0x11a>
    8001c1b6:	00011517          	auipc	a0,0x11
    8001c1ba:	18250513          	addi	a0,a0,386 # 8002d338 <__func__.0+0x318>
    8001c1be:	3fd0e0ef          	jal	8002adba <printf>
    8001c1c2:	02900513          	li	a0,41
    8001c1c6:	0e30d0ef          	jal	80029aa8 <putchar>
    8001c1ca:	4529                	li	a0,10
    8001c1cc:	0dd0d0ef          	jal	80029aa8 <putchar>
    8001c1d0:	00035417          	auipc	s0,0x35
    8001c1d4:	e4144403          	lbu	s0,-447(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c1d8:	00011597          	auipc	a1,0x11
    8001c1dc:	11858593          	addi	a1,a1,280 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c1e0:	cc11                	beqz	s0,8001c1fc <amo_access_fault_6+0x14c>
    8001c1e2:	6498                	ld	a4,8(s1)
    8001c1e4:	479d                	li	a5,7
    TEST_END();
    8001c1e6:	00011597          	auipc	a1,0x11
    8001c1ea:	0fa58593          	addi	a1,a1,250 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c1ee:	00f70763          	beq	a4,a5,8001c1fc <amo_access_fault_6+0x14c>
    8001c1f2:	4401                	li	s0,0
    TEST_END();
    8001c1f4:	00011597          	auipc	a1,0x11
    8001c1f8:	0fc58593          	addi	a1,a1,252 # 8002d2f0 <__func__.0+0x2d0>
    8001c1fc:	00011517          	auipc	a0,0x11
    8001c200:	19c50513          	addi	a0,a0,412 # 8002d398 <__func__.0+0x378>
    8001c204:	3b70e0ef          	jal	8002adba <printf>
    8001c208:	4511                	li	a0,4
    8001c20a:	c65e40ef          	jal	80000e6e <goto_priv>
    8001c20e:	d7ce50ef          	jal	8000178a <reset_state>
}
    8001c212:	60e2                	ld	ra,24(sp)
    8001c214:	8522                	mv	a0,s0
    8001c216:	6442                	ld	s0,16(sp)
    8001c218:	64a2                	ld	s1,8(sp)
    8001c21a:	6105                	addi	sp,sp,32
    8001c21c:	8082                	ret

000000008001c21e <amo_access_fault_7>:


bool amo_access_fault_7(){
    8001c21e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c220:	00010597          	auipc	a1,0x10
    8001c224:	2e858593          	addi	a1,a1,744 # 8002c508 <__func__.13>
    8001c228:	00011517          	auipc	a0,0x11
    8001c22c:	0d850513          	addi	a0,a0,216 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_7(){
    8001c230:	ec06                	sd	ra,24(sp)
    8001c232:	e822                	sd	s0,16(sp)
    8001c234:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c236:	3850e0ef          	jal	8002adba <printf>
    8001c23a:	4529                	li	a0,10
    8001c23c:	06d0d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001c240:	4511                	li	a0,4
    8001c242:	c2de40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c246:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c24a:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c24e:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c252:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c256:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c25a:	10000793          	li	a5,256
    8001c25e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c262:	20000793          	li	a5,512
    8001c266:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c26a:	40000793          	li	a5,1024
    8001c26e:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c272:	6785                	lui	a5,0x1
    8001c274:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c278:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c27c:	4785                	li	a5,1
    8001c27e:	07fe                	slli	a5,a5,0x1f
    8001c280:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c284:	08100793          	li	a5,129
    8001c288:	07e2                	slli	a5,a5,0x18
    8001c28a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c28e:	08000793          	li	a5,128
    8001c292:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c296:	67a1                	lui	a5,0x8
    8001c298:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001c29c:	4505                	li	a0,1
    8001c29e:	bd1e40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c2a2:	ad1e40ef          	jal	80000d72 <test_setup_except_function>
    8001c2a6:	37ab77b7          	lui	a5,0x37ab7
    8001c2aa:	4705                	li	a4,1
    8001c2ac:	078a                	slli	a5,a5,0x2
    8001c2ae:	1706                	slli	a4,a4,0x21
    8001c2b0:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c2b4:	40070713          	addi	a4,a4,1024
    8001c2b8:	00f737af          	amoadd.d	a5,a5,(a4)
    
    amoadd_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c2bc:	08200593          	li	a1,130
    8001c2c0:	00018617          	auipc	a2,0x18
    8001c2c4:	c5060613          	addi	a2,a2,-944 # 80033f10 <__func__.0+0x6ef0>
    8001c2c8:	00011517          	auipc	a0,0x11
    8001c2cc:	05050513          	addi	a0,a0,80 # 8002d318 <__func__.0+0x2f8>
    8001c2d0:	2eb0e0ef          	jal	8002adba <printf>
    8001c2d4:	00035797          	auipc	a5,0x35
    8001c2d8:	d3d7c783          	lbu	a5,-707(a5) # 80051011 <excpt+0x1>
    8001c2dc:	00035497          	auipc	s1,0x35
    8001c2e0:	d3448493          	addi	s1,s1,-716 # 80051010 <excpt>
    8001c2e4:	00011597          	auipc	a1,0x11
    8001c2e8:	00c58593          	addi	a1,a1,12 # 8002d2f0 <__func__.0+0x2d0>
    8001c2ec:	cf89                	beqz	a5,8001c306 <amo_access_fault_7+0xe8>
    8001c2ee:	6498                	ld	a4,8(s1)
    8001c2f0:	479d                	li	a5,7
    8001c2f2:	00011597          	auipc	a1,0x11
    8001c2f6:	fee58593          	addi	a1,a1,-18 # 8002d2e0 <__func__.0+0x2c0>
    8001c2fa:	00f70663          	beq	a4,a5,8001c306 <amo_access_fault_7+0xe8>
    8001c2fe:	00011597          	auipc	a1,0x11
    8001c302:	ff258593          	addi	a1,a1,-14 # 8002d2f0 <__func__.0+0x2d0>
    8001c306:	00011517          	auipc	a0,0x11
    8001c30a:	02a50513          	addi	a0,a0,42 # 8002d330 <__func__.0+0x310>
    8001c30e:	2ad0e0ef          	jal	8002adba <printf>
    8001c312:	00035797          	auipc	a5,0x35
    8001c316:	cff7c783          	lbu	a5,-769(a5) # 80051011 <excpt+0x1>
    8001c31a:	c789                	beqz	a5,8001c324 <amo_access_fault_7+0x106>
    8001c31c:	6498                	ld	a4,8(s1)
    8001c31e:	479d                	li	a5,7
    8001c320:	00f70c63          	beq	a4,a5,8001c338 <amo_access_fault_7+0x11a>
    8001c324:	00011517          	auipc	a0,0x11
    8001c328:	01450513          	addi	a0,a0,20 # 8002d338 <__func__.0+0x318>
    8001c32c:	28f0e0ef          	jal	8002adba <printf>
    8001c330:	02900513          	li	a0,41
    8001c334:	7740d0ef          	jal	80029aa8 <putchar>
    8001c338:	4529                	li	a0,10
    8001c33a:	76e0d0ef          	jal	80029aa8 <putchar>
    8001c33e:	00035417          	auipc	s0,0x35
    8001c342:	cd344403          	lbu	s0,-813(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c346:	00011597          	auipc	a1,0x11
    8001c34a:	faa58593          	addi	a1,a1,-86 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c34e:	cc11                	beqz	s0,8001c36a <amo_access_fault_7+0x14c>
    8001c350:	6498                	ld	a4,8(s1)
    8001c352:	479d                	li	a5,7
    TEST_END();
    8001c354:	00011597          	auipc	a1,0x11
    8001c358:	f8c58593          	addi	a1,a1,-116 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode amoadd_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c35c:	00f70763          	beq	a4,a5,8001c36a <amo_access_fault_7+0x14c>
    8001c360:	4401                	li	s0,0
    TEST_END();
    8001c362:	00011597          	auipc	a1,0x11
    8001c366:	f8e58593          	addi	a1,a1,-114 # 8002d2f0 <__func__.0+0x2d0>
    8001c36a:	00011517          	auipc	a0,0x11
    8001c36e:	02e50513          	addi	a0,a0,46 # 8002d398 <__func__.0+0x378>
    8001c372:	2490e0ef          	jal	8002adba <printf>
    8001c376:	4511                	li	a0,4
    8001c378:	af7e40ef          	jal	80000e6e <goto_priv>
    8001c37c:	c0ee50ef          	jal	8000178a <reset_state>
}
    8001c380:	60e2                	ld	ra,24(sp)
    8001c382:	8522                	mv	a0,s0
    8001c384:	6442                	ld	s0,16(sp)
    8001c386:	64a2                	ld	s1,8(sp)
    8001c388:	6105                	addi	sp,sp,32
    8001c38a:	8082                	ret

000000008001c38c <amo_access_fault_8>:

bool amo_access_fault_8(){
    8001c38c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c38e:	00010597          	auipc	a1,0x10
    8001c392:	19258593          	addi	a1,a1,402 # 8002c520 <__func__.12>
    8001c396:	00011517          	auipc	a0,0x11
    8001c39a:	f6a50513          	addi	a0,a0,-150 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_8(){
    8001c39e:	ec06                	sd	ra,24(sp)
    8001c3a0:	e822                	sd	s0,16(sp)
    8001c3a2:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c3a4:	2170e0ef          	jal	8002adba <printf>
    8001c3a8:	4529                	li	a0,10
    8001c3aa:	6fe0d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001c3ae:	4511                	li	a0,4
    8001c3b0:	abfe40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.W=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c3b4:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c3b8:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c3bc:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c3c0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c3c4:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c3c8:	10000793          	li	a5,256
    8001c3cc:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c3d0:	20000793          	li	a5,512
    8001c3d4:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c3d8:	40000793          	li	a5,1024
    8001c3dc:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c3e0:	6785                	lui	a5,0x1
    8001c3e2:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c3e6:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c3ea:	4785                	li	a5,1
    8001c3ec:	07fe                	slli	a5,a5,0x1f
    8001c3ee:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c3f2:	08100793          	li	a5,129
    8001c3f6:	07e2                	slli	a5,a5,0x18
    8001c3f8:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c3fc:	08000793          	li	a5,128
    8001c400:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c404:	67a1                	lui	a5,0x8
    8001c406:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c40a:	4501                	li	a0,0
    8001c40c:	a63e40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c410:	963e40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoor_d, "amoor.d", uint64_t);
    8001c414:	37ab77b7          	lui	a5,0x37ab7
    8001c418:	4705                	li	a4,1
    8001c41a:	078a                	slli	a5,a5,0x2
    8001c41c:	1706                	slli	a4,a4,0x21
    8001c41e:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c422:	40070713          	addi	a4,a4,1024
    8001c426:	40f737af          	amoor.d	a5,a5,(a4)
    
    amoor_d(0x80000100UL << 2 , 0xdeadbeef);

    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c42a:	08200593          	li	a1,130
    8001c42e:	00018617          	auipc	a2,0x18
    8001c432:	b2260613          	addi	a2,a2,-1246 # 80033f50 <__func__.0+0x6f30>
    8001c436:	00011517          	auipc	a0,0x11
    8001c43a:	ee250513          	addi	a0,a0,-286 # 8002d318 <__func__.0+0x2f8>
    8001c43e:	17d0e0ef          	jal	8002adba <printf>
    8001c442:	00035797          	auipc	a5,0x35
    8001c446:	bcf7c783          	lbu	a5,-1073(a5) # 80051011 <excpt+0x1>
    8001c44a:	00035497          	auipc	s1,0x35
    8001c44e:	bc648493          	addi	s1,s1,-1082 # 80051010 <excpt>
    8001c452:	00011597          	auipc	a1,0x11
    8001c456:	e9e58593          	addi	a1,a1,-354 # 8002d2f0 <__func__.0+0x2d0>
    8001c45a:	cf89                	beqz	a5,8001c474 <amo_access_fault_8+0xe8>
    8001c45c:	6498                	ld	a4,8(s1)
    8001c45e:	479d                	li	a5,7
    8001c460:	00011597          	auipc	a1,0x11
    8001c464:	e8058593          	addi	a1,a1,-384 # 8002d2e0 <__func__.0+0x2c0>
    8001c468:	00f70663          	beq	a4,a5,8001c474 <amo_access_fault_8+0xe8>
    8001c46c:	00011597          	auipc	a1,0x11
    8001c470:	e8458593          	addi	a1,a1,-380 # 8002d2f0 <__func__.0+0x2d0>
    8001c474:	00011517          	auipc	a0,0x11
    8001c478:	ebc50513          	addi	a0,a0,-324 # 8002d330 <__func__.0+0x310>
    8001c47c:	13f0e0ef          	jal	8002adba <printf>
    8001c480:	00035797          	auipc	a5,0x35
    8001c484:	b917c783          	lbu	a5,-1135(a5) # 80051011 <excpt+0x1>
    8001c488:	c789                	beqz	a5,8001c492 <amo_access_fault_8+0x106>
    8001c48a:	6498                	ld	a4,8(s1)
    8001c48c:	479d                	li	a5,7
    8001c48e:	00f70c63          	beq	a4,a5,8001c4a6 <amo_access_fault_8+0x11a>
    8001c492:	00011517          	auipc	a0,0x11
    8001c496:	ea650513          	addi	a0,a0,-346 # 8002d338 <__func__.0+0x318>
    8001c49a:	1210e0ef          	jal	8002adba <printf>
    8001c49e:	02900513          	li	a0,41
    8001c4a2:	6060d0ef          	jal	80029aa8 <putchar>
    8001c4a6:	4529                	li	a0,10
    8001c4a8:	6000d0ef          	jal	80029aa8 <putchar>
    8001c4ac:	00035417          	auipc	s0,0x35
    8001c4b0:	b6544403          	lbu	s0,-1179(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c4b4:	00011597          	auipc	a1,0x11
    8001c4b8:	e3c58593          	addi	a1,a1,-452 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c4bc:	cc11                	beqz	s0,8001c4d8 <amo_access_fault_8+0x14c>
    8001c4be:	6498                	ld	a4,8(s1)
    8001c4c0:	479d                	li	a5,7
    TEST_END();
    8001c4c2:	00011597          	auipc	a1,0x11
    8001c4c6:	e1e58593          	addi	a1,a1,-482 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode amoor_d when pmpcfg.W=0 and pmpcfg.L=0 leads to SAF",
    8001c4ca:	00f70763          	beq	a4,a5,8001c4d8 <amo_access_fault_8+0x14c>
    8001c4ce:	4401                	li	s0,0
    TEST_END();
    8001c4d0:	00011597          	auipc	a1,0x11
    8001c4d4:	e2058593          	addi	a1,a1,-480 # 8002d2f0 <__func__.0+0x2d0>
    8001c4d8:	00011517          	auipc	a0,0x11
    8001c4dc:	ec050513          	addi	a0,a0,-320 # 8002d398 <__func__.0+0x378>
    8001c4e0:	0db0e0ef          	jal	8002adba <printf>
    8001c4e4:	4511                	li	a0,4
    8001c4e6:	989e40ef          	jal	80000e6e <goto_priv>
    8001c4ea:	aa0e50ef          	jal	8000178a <reset_state>
}
    8001c4ee:	60e2                	ld	ra,24(sp)
    8001c4f0:	8522                	mv	a0,s0
    8001c4f2:	6442                	ld	s0,16(sp)
    8001c4f4:	64a2                	ld	s1,8(sp)
    8001c4f6:	6105                	addi	sp,sp,32
    8001c4f8:	8082                	ret

000000008001c4fa <amo_access_fault_9>:

bool amo_access_fault_9(){
    8001c4fa:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c4fc:	00010597          	auipc	a1,0x10
    8001c500:	03c58593          	addi	a1,a1,60 # 8002c538 <__func__.11>
    8001c504:	00011517          	auipc	a0,0x11
    8001c508:	dfc50513          	addi	a0,a0,-516 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_9(){
    8001c50c:	ec06                	sd	ra,24(sp)
    8001c50e:	e822                	sd	s0,16(sp)
    8001c510:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c512:	0a90e0ef          	jal	8002adba <printf>
    8001c516:	4529                	li	a0,10
    8001c518:	5900d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001c51c:	4511                	li	a0,4
    8001c51e:	951e40ef          	jal	80000e6e <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c522:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c526:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c52a:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c52e:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c532:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c536:	10000793          	li	a5,256
    8001c53a:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c53e:	20000793          	li	a5,512
    8001c542:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c546:	40000793          	li	a5,1024
    8001c54a:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c54e:	6785                	lui	a5,0x1
    8001c550:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c554:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c558:	4785                	li	a5,1
    8001c55a:	07fe                	slli	a5,a5,0x1f
    8001c55c:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c560:	08100793          	li	a5,129
    8001c564:	07e2                	slli	a5,a5,0x18
    8001c566:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c56a:	08000793          	li	a5,128
    8001c56e:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c572:	67a1                	lui	a5,0x8
    8001c574:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001c578:	4501                	li	a0,0
    8001c57a:	8f5e40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c57e:	ff4e40ef          	jal	80000d72 <test_setup_except_function>
AMO_INSTRUCTION(amoand_d, "amoand.d", uint64_t);
    8001c582:	37ab77b7          	lui	a5,0x37ab7
    8001c586:	4705                	li	a4,1
    8001c588:	078a                	slli	a5,a5,0x2
    8001c58a:	170e                	slli	a4,a4,0x23
    8001c58c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c590:	1761                	addi	a4,a4,-8
    8001c592:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x1fffffffeUL << 2 ,0xdeadbeef);

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c596:	08200593          	li	a1,130
    8001c59a:	00018617          	auipc	a2,0x18
    8001c59e:	9f660613          	addi	a2,a2,-1546 # 80033f90 <__func__.0+0x6f70>
    8001c5a2:	00011517          	auipc	a0,0x11
    8001c5a6:	d7650513          	addi	a0,a0,-650 # 8002d318 <__func__.0+0x2f8>
    8001c5aa:	0110e0ef          	jal	8002adba <printf>
    8001c5ae:	00035797          	auipc	a5,0x35
    8001c5b2:	a637c783          	lbu	a5,-1437(a5) # 80051011 <excpt+0x1>
    8001c5b6:	00035497          	auipc	s1,0x35
    8001c5ba:	a5a48493          	addi	s1,s1,-1446 # 80051010 <excpt>
    8001c5be:	00011597          	auipc	a1,0x11
    8001c5c2:	d3258593          	addi	a1,a1,-718 # 8002d2f0 <__func__.0+0x2d0>
    8001c5c6:	cf89                	beqz	a5,8001c5e0 <amo_access_fault_9+0xe6>
    8001c5c8:	6498                	ld	a4,8(s1)
    8001c5ca:	479d                	li	a5,7
    8001c5cc:	00011597          	auipc	a1,0x11
    8001c5d0:	d1458593          	addi	a1,a1,-748 # 8002d2e0 <__func__.0+0x2c0>
    8001c5d4:	00f70663          	beq	a4,a5,8001c5e0 <amo_access_fault_9+0xe6>
    8001c5d8:	00011597          	auipc	a1,0x11
    8001c5dc:	d1858593          	addi	a1,a1,-744 # 8002d2f0 <__func__.0+0x2d0>
    8001c5e0:	00011517          	auipc	a0,0x11
    8001c5e4:	d5050513          	addi	a0,a0,-688 # 8002d330 <__func__.0+0x310>
    8001c5e8:	7d20e0ef          	jal	8002adba <printf>
    8001c5ec:	00035797          	auipc	a5,0x35
    8001c5f0:	a257c783          	lbu	a5,-1499(a5) # 80051011 <excpt+0x1>
    8001c5f4:	c789                	beqz	a5,8001c5fe <amo_access_fault_9+0x104>
    8001c5f6:	6498                	ld	a4,8(s1)
    8001c5f8:	479d                	li	a5,7
    8001c5fa:	00f70c63          	beq	a4,a5,8001c612 <amo_access_fault_9+0x118>
    8001c5fe:	00011517          	auipc	a0,0x11
    8001c602:	d3a50513          	addi	a0,a0,-710 # 8002d338 <__func__.0+0x318>
    8001c606:	7b40e0ef          	jal	8002adba <printf>
    8001c60a:	02900513          	li	a0,41
    8001c60e:	49a0d0ef          	jal	80029aa8 <putchar>
    8001c612:	4529                	li	a0,10
    8001c614:	4940d0ef          	jal	80029aa8 <putchar>
    8001c618:	00035417          	auipc	s0,0x35
    8001c61c:	9f944403          	lbu	s0,-1543(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c620:	00011597          	auipc	a1,0x11
    8001c624:	cd058593          	addi	a1,a1,-816 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c628:	cc11                	beqz	s0,8001c644 <amo_access_fault_9+0x14a>
    8001c62a:	6498                	ld	a4,8(s1)
    8001c62c:	479d                	li	a5,7
    TEST_END();
    8001c62e:	00011597          	auipc	a1,0x11
    8001c632:	cb258593          	addi	a1,a1,-846 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to saf(amo)",
    8001c636:	00f70763          	beq	a4,a5,8001c644 <amo_access_fault_9+0x14a>
    8001c63a:	4401                	li	s0,0
    TEST_END();
    8001c63c:	00011597          	auipc	a1,0x11
    8001c640:	cb458593          	addi	a1,a1,-844 # 8002d2f0 <__func__.0+0x2d0>
    8001c644:	00011517          	auipc	a0,0x11
    8001c648:	d5450513          	addi	a0,a0,-684 # 8002d398 <__func__.0+0x378>
    8001c64c:	76e0e0ef          	jal	8002adba <printf>
    8001c650:	4511                	li	a0,4
    8001c652:	81de40ef          	jal	80000e6e <goto_priv>
    8001c656:	934e50ef          	jal	8000178a <reset_state>
}
    8001c65a:	60e2                	ld	ra,24(sp)
    8001c65c:	8522                	mv	a0,s0
    8001c65e:	6442                	ld	s0,16(sp)
    8001c660:	64a2                	ld	s1,8(sp)
    8001c662:	6105                	addi	sp,sp,32
    8001c664:	8082                	ret

000000008001c666 <amo_access_fault_10>:


bool amo_access_fault_10(){
    8001c666:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c668:	00010597          	auipc	a1,0x10
    8001c66c:	ee858593          	addi	a1,a1,-280 # 8002c550 <__func__.10>
    8001c670:	00011517          	auipc	a0,0x11
    8001c674:	c9050513          	addi	a0,a0,-880 # 8002d300 <__func__.0+0x2e0>
bool amo_access_fault_10(){
    8001c678:	ec06                	sd	ra,24(sp)
    8001c67a:	e822                	sd	s0,16(sp)
    8001c67c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c67e:	73c0e0ef          	jal	8002adba <printf>
    8001c682:	4529                	li	a0,10
    8001c684:	4240d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001c688:	4511                	li	a0,4
    8001c68a:	fe4e40ef          	jal	80000e6e <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c68e:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c692:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c696:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c69a:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c69e:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c6a2:	4785                	li	a5,1
    8001c6a4:	07fe                	slli	a5,a5,0x1f
    8001c6a6:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c6aa:	08000793          	li	a5,128
    8001c6ae:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c6b2:	450d                	li	a0,3
    8001c6b4:	fbae40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c6b8:	ebae40ef          	jal	80000d72 <test_setup_except_function>
    8001c6bc:	37ab77b7          	lui	a5,0x37ab7
    8001c6c0:	078a                	slli	a5,a5,0x2
    8001c6c2:	4705                	li	a4,1
    8001c6c4:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    8001c6c8:	1706                	slli	a4,a4,0x21
    8001c6ca:	60f737af          	amoand.d	a5,a5,(a4)
    
    amoand_d(0x80000000UL << 2 ,0xdeadbeef);

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c6ce:	08200593          	li	a1,130
    8001c6d2:	00018617          	auipc	a2,0x18
    8001c6d6:	93660613          	addi	a2,a2,-1738 # 80034008 <__func__.0+0x6fe8>
    8001c6da:	00011517          	auipc	a0,0x11
    8001c6de:	c3e50513          	addi	a0,a0,-962 # 8002d318 <__func__.0+0x2f8>
    8001c6e2:	6d80e0ef          	jal	8002adba <printf>
    8001c6e6:	00035797          	auipc	a5,0x35
    8001c6ea:	92b7c783          	lbu	a5,-1749(a5) # 80051011 <excpt+0x1>
    8001c6ee:	00035497          	auipc	s1,0x35
    8001c6f2:	92248493          	addi	s1,s1,-1758 # 80051010 <excpt>
    8001c6f6:	00011597          	auipc	a1,0x11
    8001c6fa:	bfa58593          	addi	a1,a1,-1030 # 8002d2f0 <__func__.0+0x2d0>
    8001c6fe:	cf89                	beqz	a5,8001c718 <amo_access_fault_10+0xb2>
    8001c700:	6498                	ld	a4,8(s1)
    8001c702:	479d                	li	a5,7
    8001c704:	00011597          	auipc	a1,0x11
    8001c708:	bdc58593          	addi	a1,a1,-1060 # 8002d2e0 <__func__.0+0x2c0>
    8001c70c:	00f70663          	beq	a4,a5,8001c718 <amo_access_fault_10+0xb2>
    8001c710:	00011597          	auipc	a1,0x11
    8001c714:	be058593          	addi	a1,a1,-1056 # 8002d2f0 <__func__.0+0x2d0>
    8001c718:	00011517          	auipc	a0,0x11
    8001c71c:	c1850513          	addi	a0,a0,-1000 # 8002d330 <__func__.0+0x310>
    8001c720:	69a0e0ef          	jal	8002adba <printf>
    8001c724:	00035797          	auipc	a5,0x35
    8001c728:	8ed7c783          	lbu	a5,-1811(a5) # 80051011 <excpt+0x1>
    8001c72c:	c789                	beqz	a5,8001c736 <amo_access_fault_10+0xd0>
    8001c72e:	6498                	ld	a4,8(s1)
    8001c730:	479d                	li	a5,7
    8001c732:	00f70c63          	beq	a4,a5,8001c74a <amo_access_fault_10+0xe4>
    8001c736:	00011517          	auipc	a0,0x11
    8001c73a:	c0250513          	addi	a0,a0,-1022 # 8002d338 <__func__.0+0x318>
    8001c73e:	67c0e0ef          	jal	8002adba <printf>
    8001c742:	02900513          	li	a0,41
    8001c746:	3620d0ef          	jal	80029aa8 <putchar>
    8001c74a:	4529                	li	a0,10
    8001c74c:	35c0d0ef          	jal	80029aa8 <putchar>
    8001c750:	00035417          	auipc	s0,0x35
    8001c754:	8c144403          	lbu	s0,-1855(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SAF
    );


    TEST_END();
    8001c758:	00011597          	auipc	a1,0x11
    8001c75c:	b9858593          	addi	a1,a1,-1128 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c760:	cc11                	beqz	s0,8001c77c <amo_access_fault_10+0x116>
    8001c762:	6498                	ld	a4,8(s1)
    8001c764:	479d                	li	a5,7
    TEST_END();
    8001c766:	00011597          	auipc	a1,0x11
    8001c76a:	b7a58593          	addi	a1,a1,-1158 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to store guest fault(amo)",
    8001c76e:	00f70763          	beq	a4,a5,8001c77c <amo_access_fault_10+0x116>
    8001c772:	4401                	li	s0,0
    TEST_END();
    8001c774:	00011597          	auipc	a1,0x11
    8001c778:	b7c58593          	addi	a1,a1,-1156 # 8002d2f0 <__func__.0+0x2d0>
    8001c77c:	00011517          	auipc	a0,0x11
    8001c780:	c1c50513          	addi	a0,a0,-996 # 8002d398 <__func__.0+0x378>
    8001c784:	6360e0ef          	jal	8002adba <printf>
    8001c788:	4511                	li	a0,4
    8001c78a:	ee4e40ef          	jal	80000e6e <goto_priv>
    8001c78e:	ffde40ef          	jal	8000178a <reset_state>
}
    8001c792:	60e2                	ld	ra,24(sp)
    8001c794:	8522                	mv	a0,s0
    8001c796:	6442                	ld	s0,16(sp)
    8001c798:	64a2                	ld	s1,8(sp)
    8001c79a:	6105                	addi	sp,sp,32
    8001c79c:	8082                	ret

000000008001c79e <instruction_access_fault_1>:


bool instruction_access_fault_1(){
    8001c79e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c7a0:	00010597          	auipc	a1,0x10
    8001c7a4:	dc858593          	addi	a1,a1,-568 # 8002c568 <__func__.9>
    8001c7a8:	00011517          	auipc	a0,0x11
    8001c7ac:	b5850513          	addi	a0,a0,-1192 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_1(){
    8001c7b0:	ec06                	sd	ra,24(sp)
    8001c7b2:	e822                	sd	s0,16(sp)
    8001c7b4:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c7b6:	6040e0ef          	jal	8002adba <printf>
    8001c7ba:	4529                	li	a0,10
    8001c7bc:	2ec0d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001c7c0:	4511                	li	a0,4
    8001c7c2:	eace40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c7c6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c7ca:	10000793          	li	a5,256
    8001c7ce:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c7d2:	20000793          	li	a5,512
    8001c7d6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c7da:	40000793          	li	a5,1024
    8001c7de:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c7e2:	6785                	lui	a5,0x1
    8001c7e4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c7e8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c7ec:	4785                	li	a5,1
    8001c7ee:	07fe                	slli	a5,a5,0x1f
    8001c7f0:	4485                	li	s1,1
    8001c7f2:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c7f6:	08100793          	li	a5,129
    8001c7fa:	07e2                	slli	a5,a5,0x18
    8001c7fc:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c800:	67a1                	lui	a5,0x8
    8001c802:	3a07a073          	csrs	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001c806:	d6ce40ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001c80a:	02149793          	slli	a5,s1,0x21
    8001c80e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001c812:	00034417          	auipc	s0,0x34
    8001c816:	7fe40413          	addi	s0,s0,2046 # 80051010 <excpt>
    8001c81a:	00000297          	auipc	t0,0x0
    8001c81e:	00c28293          	addi	t0,t0,12 # 8001c826 <instruction_access_fault_1+0x88>
    8001c822:	02543c23          	sd	t0,56(s0)
    8001c826:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001c828:	00034597          	auipc	a1,0x34
    8001c82c:	7e95c583          	lbu	a1,2025(a1) # 80051011 <excpt+0x1>
    8001c830:	00011517          	auipc	a0,0x11
    8001c834:	65850513          	addi	a0,a0,1624 # 8002de88 <__func__.0+0xe68>
    8001c838:	5820e0ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001c83c:	640c                	ld	a1,8(s0)
    8001c83e:	00011517          	auipc	a0,0x11
    8001c842:	64a50513          	addi	a0,a0,1610 # 8002de88 <__func__.0+0xe68>
    8001c846:	5740e0ef          	jal	8002adba <printf>

    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c84a:	08200593          	li	a1,130
    8001c84e:	00018617          	auipc	a2,0x18
    8001c852:	82a60613          	addi	a2,a2,-2006 # 80034078 <__func__.0+0x7058>
    8001c856:	00011517          	auipc	a0,0x11
    8001c85a:	ac250513          	addi	a0,a0,-1342 # 8002d318 <__func__.0+0x2f8>
    8001c85e:	55c0e0ef          	jal	8002adba <printf>
    8001c862:	00034797          	auipc	a5,0x34
    8001c866:	7af7c783          	lbu	a5,1967(a5) # 80051011 <excpt+0x1>
    8001c86a:	00011597          	auipc	a1,0x11
    8001c86e:	a8658593          	addi	a1,a1,-1402 # 8002d2f0 <__func__.0+0x2d0>
    8001c872:	cf81                	beqz	a5,8001c88a <instruction_access_fault_1+0xec>
    8001c874:	641c                	ld	a5,8(s0)
    8001c876:	00011597          	auipc	a1,0x11
    8001c87a:	a6a58593          	addi	a1,a1,-1430 # 8002d2e0 <__func__.0+0x2c0>
    8001c87e:	00978663          	beq	a5,s1,8001c88a <instruction_access_fault_1+0xec>
    8001c882:	00011597          	auipc	a1,0x11
    8001c886:	a6e58593          	addi	a1,a1,-1426 # 8002d2f0 <__func__.0+0x2d0>
    8001c88a:	00011517          	auipc	a0,0x11
    8001c88e:	aa650513          	addi	a0,a0,-1370 # 8002d330 <__func__.0+0x310>
    8001c892:	5280e0ef          	jal	8002adba <printf>
    8001c896:	00034797          	auipc	a5,0x34
    8001c89a:	77b7c783          	lbu	a5,1915(a5) # 80051011 <excpt+0x1>
    8001c89e:	c789                	beqz	a5,8001c8a8 <instruction_access_fault_1+0x10a>
    8001c8a0:	6418                	ld	a4,8(s0)
    8001c8a2:	4785                	li	a5,1
    8001c8a4:	00f70c63          	beq	a4,a5,8001c8bc <instruction_access_fault_1+0x11e>
    8001c8a8:	00011517          	auipc	a0,0x11
    8001c8ac:	a9050513          	addi	a0,a0,-1392 # 8002d338 <__func__.0+0x318>
    8001c8b0:	50a0e0ef          	jal	8002adba <printf>
    8001c8b4:	02900513          	li	a0,41
    8001c8b8:	1f00d0ef          	jal	80029aa8 <putchar>
    8001c8bc:	4529                	li	a0,10
    8001c8be:	1ea0d0ef          	jal	80029aa8 <putchar>
    8001c8c2:	00034497          	auipc	s1,0x34
    8001c8c6:	74f4c483          	lbu	s1,1871(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001c8ca:	00011597          	auipc	a1,0x11
    8001c8ce:	a2658593          	addi	a1,a1,-1498 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c8d2:	cc91                	beqz	s1,8001c8ee <instruction_access_fault_1+0x150>
    8001c8d4:	6418                	ld	a4,8(s0)
    8001c8d6:	4785                	li	a5,1
    TEST_END();
    8001c8d8:	00011597          	auipc	a1,0x11
    8001c8dc:	a0858593          	addi	a1,a1,-1528 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("m mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c8e0:	00f70763          	beq	a4,a5,8001c8ee <instruction_access_fault_1+0x150>
    8001c8e4:	4481                	li	s1,0
    TEST_END();
    8001c8e6:	00011597          	auipc	a1,0x11
    8001c8ea:	a0a58593          	addi	a1,a1,-1526 # 8002d2f0 <__func__.0+0x2d0>
    8001c8ee:	00011517          	auipc	a0,0x11
    8001c8f2:	aaa50513          	addi	a0,a0,-1366 # 8002d398 <__func__.0+0x378>
    8001c8f6:	4c40e0ef          	jal	8002adba <printf>
    8001c8fa:	4511                	li	a0,4
    8001c8fc:	d72e40ef          	jal	80000e6e <goto_priv>
    8001c900:	e8be40ef          	jal	8000178a <reset_state>
}
    8001c904:	60e2                	ld	ra,24(sp)
    8001c906:	6442                	ld	s0,16(sp)
    8001c908:	8526                	mv	a0,s1
    8001c90a:	64a2                	ld	s1,8(sp)
    8001c90c:	6105                	addi	sp,sp,32
    8001c90e:	8082                	ret

000000008001c910 <instruction_access_fault_2>:

bool instruction_access_fault_2(){
    8001c910:	1101                	addi	sp,sp,-32

    TEST_START();
    8001c912:	00010597          	auipc	a1,0x10
    8001c916:	c7658593          	addi	a1,a1,-906 # 8002c588 <__func__.8>
    8001c91a:	00011517          	auipc	a0,0x11
    8001c91e:	9e650513          	addi	a0,a0,-1562 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_2(){
    8001c922:	ec06                	sd	ra,24(sp)
    8001c924:	e822                	sd	s0,16(sp)
    8001c926:	e426                	sd	s1,8(sp)
    TEST_START();
    8001c928:	4920e0ef          	jal	8002adba <printf>
    8001c92c:	4529                	li	a0,10
    8001c92e:	17a0d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001c932:	4511                	li	a0,4
    8001c934:	d3ae40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001c938:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001c93c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001c940:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001c944:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001c948:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001c94c:	10000793          	li	a5,256
    8001c950:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001c954:	20000793          	li	a5,512
    8001c958:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001c95c:	40000793          	li	a5,1024
    8001c960:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001c964:	6785                	lui	a5,0x1
    8001c966:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001c96a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001c96e:	4785                	li	a5,1
    8001c970:	07fe                	slli	a5,a5,0x1f
    8001c972:	4485                	li	s1,1
    8001c974:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001c978:	08100793          	li	a5,129
    8001c97c:	07e2                	slli	a5,a5,0x18
    8001c97e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001c982:	08000793          	li	a5,128
    8001c986:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001c98a:	67a1                	lui	a5,0x8
    8001c98c:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001c990:	450d                	li	a0,3
    8001c992:	cdce40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001c996:	bdce40ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001c99a:	02149793          	slli	a5,s1,0x21
    8001c99e:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001c9a2:	00034417          	auipc	s0,0x34
    8001c9a6:	66e40413          	addi	s0,s0,1646 # 80051010 <excpt>
    8001c9aa:	00000297          	auipc	t0,0x0
    8001c9ae:	00c28293          	addi	t0,t0,12 # 8001c9b6 <instruction_access_fault_2+0xa6>
    8001c9b2:	02543c23          	sd	t0,56(s0)
    8001c9b6:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001c9b8:	08200593          	li	a1,130
    8001c9bc:	00017617          	auipc	a2,0x17
    8001c9c0:	70460613          	addi	a2,a2,1796 # 800340c0 <__func__.0+0x70a0>
    8001c9c4:	00011517          	auipc	a0,0x11
    8001c9c8:	95450513          	addi	a0,a0,-1708 # 8002d318 <__func__.0+0x2f8>
    8001c9cc:	3ee0e0ef          	jal	8002adba <printf>
    8001c9d0:	00034797          	auipc	a5,0x34
    8001c9d4:	6417c783          	lbu	a5,1601(a5) # 80051011 <excpt+0x1>
    8001c9d8:	00011597          	auipc	a1,0x11
    8001c9dc:	91858593          	addi	a1,a1,-1768 # 8002d2f0 <__func__.0+0x2d0>
    8001c9e0:	cf81                	beqz	a5,8001c9f8 <instruction_access_fault_2+0xe8>
    8001c9e2:	641c                	ld	a5,8(s0)
    8001c9e4:	00011597          	auipc	a1,0x11
    8001c9e8:	8fc58593          	addi	a1,a1,-1796 # 8002d2e0 <__func__.0+0x2c0>
    8001c9ec:	00978663          	beq	a5,s1,8001c9f8 <instruction_access_fault_2+0xe8>
    8001c9f0:	00011597          	auipc	a1,0x11
    8001c9f4:	90058593          	addi	a1,a1,-1792 # 8002d2f0 <__func__.0+0x2d0>
    8001c9f8:	00011517          	auipc	a0,0x11
    8001c9fc:	93850513          	addi	a0,a0,-1736 # 8002d330 <__func__.0+0x310>
    8001ca00:	3ba0e0ef          	jal	8002adba <printf>
    8001ca04:	00034797          	auipc	a5,0x34
    8001ca08:	60d7c783          	lbu	a5,1549(a5) # 80051011 <excpt+0x1>
    8001ca0c:	c789                	beqz	a5,8001ca16 <instruction_access_fault_2+0x106>
    8001ca0e:	6418                	ld	a4,8(s0)
    8001ca10:	4785                	li	a5,1
    8001ca12:	00f70c63          	beq	a4,a5,8001ca2a <instruction_access_fault_2+0x11a>
    8001ca16:	00011517          	auipc	a0,0x11
    8001ca1a:	92250513          	addi	a0,a0,-1758 # 8002d338 <__func__.0+0x318>
    8001ca1e:	39c0e0ef          	jal	8002adba <printf>
    8001ca22:	02900513          	li	a0,41
    8001ca26:	0820d0ef          	jal	80029aa8 <putchar>
    8001ca2a:	4529                	li	a0,10
    8001ca2c:	07c0d0ef          	jal	80029aa8 <putchar>
    8001ca30:	00034497          	auipc	s1,0x34
    8001ca34:	5e14c483          	lbu	s1,1505(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001ca38:	00011597          	auipc	a1,0x11
    8001ca3c:	8b858593          	addi	a1,a1,-1864 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ca40:	cc91                	beqz	s1,8001ca5c <instruction_access_fault_2+0x14c>
    8001ca42:	6418                	ld	a4,8(s0)
    8001ca44:	4785                	li	a5,1
    TEST_END();
    8001ca46:	00011597          	auipc	a1,0x11
    8001ca4a:	89a58593          	addi	a1,a1,-1894 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001ca4e:	00f70763          	beq	a4,a5,8001ca5c <instruction_access_fault_2+0x14c>
    8001ca52:	4481                	li	s1,0
    TEST_END();
    8001ca54:	00011597          	auipc	a1,0x11
    8001ca58:	89c58593          	addi	a1,a1,-1892 # 8002d2f0 <__func__.0+0x2d0>
    8001ca5c:	00011517          	auipc	a0,0x11
    8001ca60:	93c50513          	addi	a0,a0,-1732 # 8002d398 <__func__.0+0x378>
    8001ca64:	3560e0ef          	jal	8002adba <printf>
    8001ca68:	4511                	li	a0,4
    8001ca6a:	c04e40ef          	jal	80000e6e <goto_priv>
    8001ca6e:	d1de40ef          	jal	8000178a <reset_state>
}
    8001ca72:	60e2                	ld	ra,24(sp)
    8001ca74:	6442                	ld	s0,16(sp)
    8001ca76:	8526                	mv	a0,s1
    8001ca78:	64a2                	ld	s1,8(sp)
    8001ca7a:	6105                	addi	sp,sp,32
    8001ca7c:	8082                	ret

000000008001ca7e <instruction_access_fault_3>:


bool instruction_access_fault_3(){
    8001ca7e:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ca80:	00010597          	auipc	a1,0x10
    8001ca84:	b2858593          	addi	a1,a1,-1240 # 8002c5a8 <__func__.7>
    8001ca88:	00011517          	auipc	a0,0x11
    8001ca8c:	87850513          	addi	a0,a0,-1928 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_3(){
    8001ca90:	ec06                	sd	ra,24(sp)
    8001ca92:	e822                	sd	s0,16(sp)
    8001ca94:	e426                	sd	s1,8(sp)
    TEST_START();
    8001ca96:	3240e0ef          	jal	8002adba <printf>
    8001ca9a:	4529                	li	a0,10
    8001ca9c:	00c0d0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001caa0:	4511                	li	a0,4
    8001caa2:	bcce40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001caa6:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001caaa:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001caae:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cab2:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cab6:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001caba:	10000793          	li	a5,256
    8001cabe:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cac2:	20000793          	li	a5,512
    8001cac6:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001caca:	40000793          	li	a5,1024
    8001cace:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cad2:	6785                	lui	a5,0x1
    8001cad4:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cad8:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cadc:	4785                	li	a5,1
    8001cade:	07fe                	slli	a5,a5,0x1f
    8001cae0:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cae4:	08100793          	li	a5,129
    8001cae8:	07e2                	slli	a5,a5,0x18
    8001caea:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001caee:	08000793          	li	a5,128
    8001caf2:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001caf6:	67a1                	lui	a5,0x8
    8001caf8:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HU);
    8001cafc:	4505                	li	a0,1
    8001cafe:	b70e40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cb02:	a70e40ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cb06:	4785                	li	a5,1
    8001cb08:	1786                	slli	a5,a5,0x21
    8001cb0a:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cb0e:	00034417          	auipc	s0,0x34
    8001cb12:	50240413          	addi	s0,s0,1282 # 80051010 <excpt>
    8001cb16:	00000297          	auipc	t0,0x0
    8001cb1a:	00c28293          	addi	t0,t0,12 # 8001cb22 <instruction_access_fault_3+0xa4>
    8001cb1e:	02543c23          	sd	t0,56(s0)
    8001cb22:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cb24:	08200593          	li	a1,130
    8001cb28:	00017617          	auipc	a2,0x17
    8001cb2c:	5e060613          	addi	a2,a2,1504 # 80034108 <__func__.0+0x70e8>
    8001cb30:	00010517          	auipc	a0,0x10
    8001cb34:	7e850513          	addi	a0,a0,2024 # 8002d318 <__func__.0+0x2f8>
    8001cb38:	2820e0ef          	jal	8002adba <printf>
    8001cb3c:	00034797          	auipc	a5,0x34
    8001cb40:	4d57c783          	lbu	a5,1237(a5) # 80051011 <excpt+0x1>
    8001cb44:	00010597          	auipc	a1,0x10
    8001cb48:	7ac58593          	addi	a1,a1,1964 # 8002d2f0 <__func__.0+0x2d0>
    8001cb4c:	cf89                	beqz	a5,8001cb66 <instruction_access_fault_3+0xe8>
    8001cb4e:	641c                	ld	a5,8(s0)
    8001cb50:	4705                	li	a4,1
    8001cb52:	00010597          	auipc	a1,0x10
    8001cb56:	78e58593          	addi	a1,a1,1934 # 8002d2e0 <__func__.0+0x2c0>
    8001cb5a:	00e78663          	beq	a5,a4,8001cb66 <instruction_access_fault_3+0xe8>
    8001cb5e:	00010597          	auipc	a1,0x10
    8001cb62:	79258593          	addi	a1,a1,1938 # 8002d2f0 <__func__.0+0x2d0>
    8001cb66:	00010517          	auipc	a0,0x10
    8001cb6a:	7ca50513          	addi	a0,a0,1994 # 8002d330 <__func__.0+0x310>
    8001cb6e:	24c0e0ef          	jal	8002adba <printf>
    8001cb72:	00034797          	auipc	a5,0x34
    8001cb76:	49f7c783          	lbu	a5,1183(a5) # 80051011 <excpt+0x1>
    8001cb7a:	c789                	beqz	a5,8001cb84 <instruction_access_fault_3+0x106>
    8001cb7c:	6418                	ld	a4,8(s0)
    8001cb7e:	4785                	li	a5,1
    8001cb80:	00f70c63          	beq	a4,a5,8001cb98 <instruction_access_fault_3+0x11a>
    8001cb84:	00010517          	auipc	a0,0x10
    8001cb88:	7b450513          	addi	a0,a0,1972 # 8002d338 <__func__.0+0x318>
    8001cb8c:	22e0e0ef          	jal	8002adba <printf>
    8001cb90:	02900513          	li	a0,41
    8001cb94:	7150c0ef          	jal	80029aa8 <putchar>
    8001cb98:	4529                	li	a0,10
    8001cb9a:	70f0c0ef          	jal	80029aa8 <putchar>
    8001cb9e:	00034497          	auipc	s1,0x34
    8001cba2:	4734c483          	lbu	s1,1139(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cba6:	00010597          	auipc	a1,0x10
    8001cbaa:	74a58593          	addi	a1,a1,1866 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cbae:	cc91                	beqz	s1,8001cbca <instruction_access_fault_3+0x14c>
    8001cbb0:	6418                	ld	a4,8(s0)
    8001cbb2:	4785                	li	a5,1
    TEST_END();
    8001cbb4:	00010597          	auipc	a1,0x10
    8001cbb8:	72c58593          	addi	a1,a1,1836 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cbbc:	00f70763          	beq	a4,a5,8001cbca <instruction_access_fault_3+0x14c>
    8001cbc0:	4481                	li	s1,0
    TEST_END();
    8001cbc2:	00010597          	auipc	a1,0x10
    8001cbc6:	72e58593          	addi	a1,a1,1838 # 8002d2f0 <__func__.0+0x2d0>
    8001cbca:	00010517          	auipc	a0,0x10
    8001cbce:	7ce50513          	addi	a0,a0,1998 # 8002d398 <__func__.0+0x378>
    8001cbd2:	1e80e0ef          	jal	8002adba <printf>
    8001cbd6:	4511                	li	a0,4
    8001cbd8:	a96e40ef          	jal	80000e6e <goto_priv>
    8001cbdc:	bafe40ef          	jal	8000178a <reset_state>
}
    8001cbe0:	60e2                	ld	ra,24(sp)
    8001cbe2:	6442                	ld	s0,16(sp)
    8001cbe4:	8526                	mv	a0,s1
    8001cbe6:	64a2                	ld	s1,8(sp)
    8001cbe8:	6105                	addi	sp,sp,32
    8001cbea:	8082                	ret

000000008001cbec <instruction_access_fault_4>:

bool instruction_access_fault_4(){
    8001cbec:	1101                	addi	sp,sp,-32

    TEST_START();
    8001cbee:	00010597          	auipc	a1,0x10
    8001cbf2:	9da58593          	addi	a1,a1,-1574 # 8002c5c8 <__func__.6>
    8001cbf6:	00010517          	auipc	a0,0x10
    8001cbfa:	70a50513          	addi	a0,a0,1802 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_4(){
    8001cbfe:	ec06                	sd	ra,24(sp)
    8001cc00:	e822                	sd	s0,16(sp)
    8001cc02:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cc04:	1b60e0ef          	jal	8002adba <printf>
    8001cc08:	4529                	li	a0,10
    8001cc0a:	69f0c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001cc0e:	4511                	li	a0,4
    8001cc10:	a5ee40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设置，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cc14:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cc18:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cc1c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cc20:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cc24:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cc28:	10000793          	li	a5,256
    8001cc2c:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cc30:	20000793          	li	a5,512
    8001cc34:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cc38:	40000793          	li	a5,1024
    8001cc3c:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cc40:	6785                	lui	a5,0x1
    8001cc42:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cc46:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cc4a:	4785                	li	a5,1
    8001cc4c:	07fe                	slli	a5,a5,0x1f
    8001cc4e:	4485                	li	s1,1
    8001cc50:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cc54:	08100793          	li	a5,129
    8001cc58:	07e2                	slli	a5,a5,0x18
    8001cc5a:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cc5e:	08000793          	li	a5,128
    8001cc62:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cc66:	67a1                	lui	a5,0x8
    8001cc68:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001cc6c:	4501                	li	a0,0
    8001cc6e:	a00e40ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cc72:	900e40ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cc76:	02149793          	slli	a5,s1,0x21
    8001cc7a:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cc7e:	00034417          	auipc	s0,0x34
    8001cc82:	39240413          	addi	s0,s0,914 # 80051010 <excpt>
    8001cc86:	00000297          	auipc	t0,0x0
    8001cc8a:	00c28293          	addi	t0,t0,12 # 8001cc92 <instruction_access_fault_4+0xa6>
    8001cc8e:	02543c23          	sd	t0,56(s0)
    8001cc92:	8782                	jr	a5

    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cc94:	08200593          	li	a1,130
    8001cc98:	00017617          	auipc	a2,0x17
    8001cc9c:	4b860613          	addi	a2,a2,1208 # 80034150 <__func__.0+0x7130>
    8001cca0:	00010517          	auipc	a0,0x10
    8001cca4:	67850513          	addi	a0,a0,1656 # 8002d318 <__func__.0+0x2f8>
    8001cca8:	1120e0ef          	jal	8002adba <printf>
    8001ccac:	00034797          	auipc	a5,0x34
    8001ccb0:	3657c783          	lbu	a5,869(a5) # 80051011 <excpt+0x1>
    8001ccb4:	00010597          	auipc	a1,0x10
    8001ccb8:	63c58593          	addi	a1,a1,1596 # 8002d2f0 <__func__.0+0x2d0>
    8001ccbc:	cf81                	beqz	a5,8001ccd4 <instruction_access_fault_4+0xe8>
    8001ccbe:	641c                	ld	a5,8(s0)
    8001ccc0:	00010597          	auipc	a1,0x10
    8001ccc4:	62058593          	addi	a1,a1,1568 # 8002d2e0 <__func__.0+0x2c0>
    8001ccc8:	00978663          	beq	a5,s1,8001ccd4 <instruction_access_fault_4+0xe8>
    8001cccc:	00010597          	auipc	a1,0x10
    8001ccd0:	62458593          	addi	a1,a1,1572 # 8002d2f0 <__func__.0+0x2d0>
    8001ccd4:	00010517          	auipc	a0,0x10
    8001ccd8:	65c50513          	addi	a0,a0,1628 # 8002d330 <__func__.0+0x310>
    8001ccdc:	0de0e0ef          	jal	8002adba <printf>
    8001cce0:	00034797          	auipc	a5,0x34
    8001cce4:	3317c783          	lbu	a5,817(a5) # 80051011 <excpt+0x1>
    8001cce8:	c789                	beqz	a5,8001ccf2 <instruction_access_fault_4+0x106>
    8001ccea:	6418                	ld	a4,8(s0)
    8001ccec:	4785                	li	a5,1
    8001ccee:	00f70c63          	beq	a4,a5,8001cd06 <instruction_access_fault_4+0x11a>
    8001ccf2:	00010517          	auipc	a0,0x10
    8001ccf6:	64650513          	addi	a0,a0,1606 # 8002d338 <__func__.0+0x318>
    8001ccfa:	0c00e0ef          	jal	8002adba <printf>
    8001ccfe:	02900513          	li	a0,41
    8001cd02:	5a70c0ef          	jal	80029aa8 <putchar>
    8001cd06:	4529                	li	a0,10
    8001cd08:	5a10c0ef          	jal	80029aa8 <putchar>
    8001cd0c:	00034497          	auipc	s1,0x34
    8001cd10:	3054c483          	lbu	s1,773(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cd14:	00010597          	auipc	a1,0x10
    8001cd18:	5dc58593          	addi	a1,a1,1500 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cd1c:	cc91                	beqz	s1,8001cd38 <instruction_access_fault_4+0x14c>
    8001cd1e:	6418                	ld	a4,8(s0)
    8001cd20:	4785                	li	a5,1
    TEST_END();
    8001cd22:	00010597          	auipc	a1,0x10
    8001cd26:	5be58593          	addi	a1,a1,1470 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=1 leads to IAF",
    8001cd2a:	00f70763          	beq	a4,a5,8001cd38 <instruction_access_fault_4+0x14c>
    8001cd2e:	4481                	li	s1,0
    TEST_END();
    8001cd30:	00010597          	auipc	a1,0x10
    8001cd34:	5c058593          	addi	a1,a1,1472 # 8002d2f0 <__func__.0+0x2d0>
    8001cd38:	00010517          	auipc	a0,0x10
    8001cd3c:	66050513          	addi	a0,a0,1632 # 8002d398 <__func__.0+0x378>
    8001cd40:	07a0e0ef          	jal	8002adba <printf>
    8001cd44:	4511                	li	a0,4
    8001cd46:	928e40ef          	jal	80000e6e <goto_priv>
    8001cd4a:	a41e40ef          	jal	8000178a <reset_state>
}
    8001cd4e:	60e2                	ld	ra,24(sp)
    8001cd50:	6442                	ld	s0,16(sp)
    8001cd52:	8526                	mv	a0,s1
    8001cd54:	64a2                	ld	s1,8(sp)
    8001cd56:	6105                	addi	sp,sp,32
    8001cd58:	8082                	ret

000000008001cd5a <instruction_access_fault_5>:

bool instruction_access_fault_5(){
    8001cd5a:	1141                	addi	sp,sp,-16

    TEST_START();
    8001cd5c:	00010597          	auipc	a1,0x10
    8001cd60:	88c58593          	addi	a1,a1,-1908 # 8002c5e8 <__func__.5>
    8001cd64:	00010517          	auipc	a0,0x10
    8001cd68:	59c50513          	addi	a0,a0,1436 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_5(){
    8001cd6c:	e406                	sd	ra,8(sp)
    8001cd6e:	e022                	sd	s0,0(sp)
    TEST_START();
    8001cd70:	04a0e0ef          	jal	8002adba <printf>
    8001cd74:	4529                	li	a0,10
    8001cd76:	5330c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001cd7a:	4511                	li	a0,4
    8001cd7c:	8f2e40ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是M，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cd80:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cd84:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cd88:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001cd8c:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001cd90:	3a046073          	csrsi	pmpcfg0,8
    
    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cd94:	10000793          	li	a5,256
    8001cd98:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cd9c:	20000793          	li	a5,512
    8001cda0:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cda4:	40000793          	li	a5,1024
    8001cda8:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cdac:	6785                	lui	a5,0x1
    8001cdae:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cdb2:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000UL);
    8001cdb6:	4785                	li	a5,1
    8001cdb8:	07fe                	slli	a5,a5,0x1f
    8001cdba:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000UL);
    8001cdbe:	08100793          	li	a5,129
    8001cdc2:	07e2                	slli	a5,a5,0x18
    8001cdc4:	3b179073          	csrw	pmpaddr1,a5

    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cdc8:	67a1                	lui	a5,0x8
    8001cdca:	3a07b073          	csrc	pmpcfg0,a5

    TEST_SETUP_EXCEPT();
    8001cdce:	fa5e30ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cdd2:	4785                	li	a5,1
    8001cdd4:	1786                	slli	a5,a5,0x21
    8001cdd6:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cdda:	00034417          	auipc	s0,0x34
    8001cdde:	23640413          	addi	s0,s0,566 # 80051010 <excpt>
    8001cde2:	00000297          	auipc	t0,0x0
    8001cde6:	00c28293          	addi	t0,t0,12 # 8001cdee <instruction_access_fault_5+0x94>
    8001cdea:	02543c23          	sd	t0,56(s0)
    8001cdee:	8782                	jr	a5

    printf("%d\n",excpt.triggered);
    8001cdf0:	00034597          	auipc	a1,0x34
    8001cdf4:	2215c583          	lbu	a1,545(a1) # 80051011 <excpt+0x1>
    8001cdf8:	00011517          	auipc	a0,0x11
    8001cdfc:	09050513          	addi	a0,a0,144 # 8002de88 <__func__.0+0xe68>
    8001ce00:	7bb0d0ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001ce04:	640c                	ld	a1,8(s0)
    8001ce06:	00011517          	auipc	a0,0x11
    8001ce0a:	08250513          	addi	a0,a0,130 # 8002de88 <__func__.0+0xe68>
    8001ce0e:	7ad0d0ef          	jal	8002adba <printf>

    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001ce12:	08200593          	li	a1,130
    8001ce16:	00017617          	auipc	a2,0x17
    8001ce1a:	38260613          	addi	a2,a2,898 # 80034198 <__func__.0+0x7178>
    8001ce1e:	00010517          	auipc	a0,0x10
    8001ce22:	4fa50513          	addi	a0,a0,1274 # 8002d318 <__func__.0+0x2f8>
    8001ce26:	7950d0ef          	jal	8002adba <printf>
    8001ce2a:	00034797          	auipc	a5,0x34
    8001ce2e:	1e77c783          	lbu	a5,487(a5) # 80051011 <excpt+0x1>
    8001ce32:	00010597          	auipc	a1,0x10
    8001ce36:	4ae58593          	addi	a1,a1,1198 # 8002d2e0 <__func__.0+0x2c0>
    8001ce3a:	c789                	beqz	a5,8001ce44 <instruction_access_fault_5+0xea>
    8001ce3c:	00010597          	auipc	a1,0x10
    8001ce40:	4b458593          	addi	a1,a1,1204 # 8002d2f0 <__func__.0+0x2d0>
    8001ce44:	00010517          	auipc	a0,0x10
    8001ce48:	4ec50513          	addi	a0,a0,1260 # 8002d330 <__func__.0+0x310>
    8001ce4c:	76f0d0ef          	jal	8002adba <printf>
    8001ce50:	00034797          	auipc	a5,0x34
    8001ce54:	1c17c783          	lbu	a5,449(a5) # 80051011 <excpt+0x1>
    8001ce58:	e7a1                	bnez	a5,8001cea0 <instruction_access_fault_5+0x146>
    8001ce5a:	4529                	li	a0,10
    8001ce5c:	44d0c0ef          	jal	80029aa8 <putchar>
    8001ce60:	00034797          	auipc	a5,0x34
    8001ce64:	1b17c783          	lbu	a5,433(a5) # 80051011 <excpt+0x1>
    8001ce68:	e795                	bnez	a5,8001ce94 <instruction_access_fault_5+0x13a>
    8001ce6a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END();
    8001ce6c:	00010597          	auipc	a1,0x10
    8001ce70:	47458593          	addi	a1,a1,1140 # 8002d2e0 <__func__.0+0x2c0>
    8001ce74:	00010517          	auipc	a0,0x10
    8001ce78:	52450513          	addi	a0,a0,1316 # 8002d398 <__func__.0+0x378>
    8001ce7c:	73f0d0ef          	jal	8002adba <printf>
    8001ce80:	4511                	li	a0,4
    8001ce82:	fede30ef          	jal	80000e6e <goto_priv>
    8001ce86:	905e40ef          	jal	8000178a <reset_state>
}
    8001ce8a:	60a2                	ld	ra,8(sp)
    8001ce8c:	8522                	mv	a0,s0
    8001ce8e:	6402                	ld	s0,0(sp)
    8001ce90:	0141                	addi	sp,sp,16
    8001ce92:	8082                	ret
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001ce94:	4401                	li	s0,0
    TEST_END();
    8001ce96:	00010597          	auipc	a1,0x10
    8001ce9a:	45a58593          	addi	a1,a1,1114 # 8002d2f0 <__func__.0+0x2d0>
    8001ce9e:	bfd9                	j	8001ce74 <instruction_access_fault_5+0x11a>
    TEST_ASSERT("m mode fetch instruction successful when pmpcfg.X=0 and pmpcfg.L=0 ",
    8001cea0:	00010517          	auipc	a0,0x10
    8001cea4:	49850513          	addi	a0,a0,1176 # 8002d338 <__func__.0+0x318>
    8001cea8:	7130d0ef          	jal	8002adba <printf>
    8001ceac:	02900513          	li	a0,41
    8001ceb0:	3f90c0ef          	jal	80029aa8 <putchar>
    8001ceb4:	b75d                	j	8001ce5a <instruction_access_fault_5+0x100>

000000008001ceb6 <instruction_access_fault_6>:


bool instruction_access_fault_6(){
    8001ceb6:	1101                	addi	sp,sp,-32

    TEST_START();
    8001ceb8:	0000f597          	auipc	a1,0xf
    8001cebc:	75058593          	addi	a1,a1,1872 # 8002c608 <__func__.4>
    8001cec0:	00010517          	auipc	a0,0x10
    8001cec4:	44050513          	addi	a0,a0,1088 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_6(){
    8001cec8:	ec06                	sd	ra,24(sp)
    8001ceca:	e822                	sd	s0,16(sp)
    8001cecc:	e426                	sd	s1,8(sp)
    TEST_START();
    8001cece:	6ed0d0ef          	jal	8002adba <printf>
    8001ced2:	4529                	li	a0,10
    8001ced4:	3d50c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001ced8:	4511                	li	a0,4
    8001ceda:	f95e30ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是HS，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001cede:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001cee2:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001cee6:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001ceea:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001ceee:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001cef2:	10000793          	li	a5,256
    8001cef6:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001cefa:	20000793          	li	a5,512
    8001cefe:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001cf02:	40000793          	li	a5,1024
    8001cf06:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001cf0a:	6785                	lui	a5,0x1
    8001cf0c:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001cf10:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001cf14:	4785                	li	a5,1
    8001cf16:	07fe                	slli	a5,a5,0x1f
    8001cf18:	4485                	li	s1,1
    8001cf1a:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001cf1e:	08100793          	li	a5,129
    8001cf22:	07e2                	slli	a5,a5,0x18
    8001cf24:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001cf28:	08000793          	li	a5,128
    8001cf2c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001cf30:	67a1                	lui	a5,0x8
    8001cf32:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_HS);
    8001cf36:	450d                	li	a0,3
    8001cf38:	f37e30ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001cf3c:	e37e30ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001cf40:	02149793          	slli	a5,s1,0x21
    8001cf44:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001cf48:	00034417          	auipc	s0,0x34
    8001cf4c:	0c840413          	addi	s0,s0,200 # 80051010 <excpt>
    8001cf50:	00000297          	auipc	t0,0x0
    8001cf54:	00c28293          	addi	t0,t0,12 # 8001cf5c <instruction_access_fault_6+0xa6>
    8001cf58:	02543c23          	sd	t0,56(s0)
    8001cf5c:	8782                	jr	a5

    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001cf5e:	08200593          	li	a1,130
    8001cf62:	00017617          	auipc	a2,0x17
    8001cf66:	27e60613          	addi	a2,a2,638 # 800341e0 <__func__.0+0x71c0>
    8001cf6a:	00010517          	auipc	a0,0x10
    8001cf6e:	3ae50513          	addi	a0,a0,942 # 8002d318 <__func__.0+0x2f8>
    8001cf72:	6490d0ef          	jal	8002adba <printf>
    8001cf76:	00034797          	auipc	a5,0x34
    8001cf7a:	09b7c783          	lbu	a5,155(a5) # 80051011 <excpt+0x1>
    8001cf7e:	00010597          	auipc	a1,0x10
    8001cf82:	37258593          	addi	a1,a1,882 # 8002d2f0 <__func__.0+0x2d0>
    8001cf86:	cf81                	beqz	a5,8001cf9e <instruction_access_fault_6+0xe8>
    8001cf88:	641c                	ld	a5,8(s0)
    8001cf8a:	00010597          	auipc	a1,0x10
    8001cf8e:	35658593          	addi	a1,a1,854 # 8002d2e0 <__func__.0+0x2c0>
    8001cf92:	00978663          	beq	a5,s1,8001cf9e <instruction_access_fault_6+0xe8>
    8001cf96:	00010597          	auipc	a1,0x10
    8001cf9a:	35a58593          	addi	a1,a1,858 # 8002d2f0 <__func__.0+0x2d0>
    8001cf9e:	00010517          	auipc	a0,0x10
    8001cfa2:	39250513          	addi	a0,a0,914 # 8002d330 <__func__.0+0x310>
    8001cfa6:	6150d0ef          	jal	8002adba <printf>
    8001cfaa:	00034797          	auipc	a5,0x34
    8001cfae:	0677c783          	lbu	a5,103(a5) # 80051011 <excpt+0x1>
    8001cfb2:	c789                	beqz	a5,8001cfbc <instruction_access_fault_6+0x106>
    8001cfb4:	6418                	ld	a4,8(s0)
    8001cfb6:	4785                	li	a5,1
    8001cfb8:	00f70c63          	beq	a4,a5,8001cfd0 <instruction_access_fault_6+0x11a>
    8001cfbc:	00010517          	auipc	a0,0x10
    8001cfc0:	37c50513          	addi	a0,a0,892 # 8002d338 <__func__.0+0x318>
    8001cfc4:	5f70d0ef          	jal	8002adba <printf>
    8001cfc8:	02900513          	li	a0,41
    8001cfcc:	2dd0c0ef          	jal	80029aa8 <putchar>
    8001cfd0:	4529                	li	a0,10
    8001cfd2:	2d70c0ef          	jal	80029aa8 <putchar>
    8001cfd6:	00034497          	auipc	s1,0x34
    8001cfda:	03b4c483          	lbu	s1,59(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001cfde:	00010597          	auipc	a1,0x10
    8001cfe2:	31258593          	addi	a1,a1,786 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001cfe6:	cc91                	beqz	s1,8001d002 <instruction_access_fault_6+0x14c>
    8001cfe8:	6418                	ld	a4,8(s0)
    8001cfea:	4785                	li	a5,1
    TEST_END();
    8001cfec:	00010597          	auipc	a1,0x10
    8001cff0:	2f458593          	addi	a1,a1,756 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001cff4:	00f70763          	beq	a4,a5,8001d002 <instruction_access_fault_6+0x14c>
    8001cff8:	4481                	li	s1,0
    TEST_END();
    8001cffa:	00010597          	auipc	a1,0x10
    8001cffe:	2f658593          	addi	a1,a1,758 # 8002d2f0 <__func__.0+0x2d0>
    8001d002:	00010517          	auipc	a0,0x10
    8001d006:	39650513          	addi	a0,a0,918 # 8002d398 <__func__.0+0x378>
    8001d00a:	5b10d0ef          	jal	8002adba <printf>
    8001d00e:	4511                	li	a0,4
    8001d010:	e5fe30ef          	jal	80000e6e <goto_priv>
    8001d014:	f76e40ef          	jal	8000178a <reset_state>
}
    8001d018:	60e2                	ld	ra,24(sp)
    8001d01a:	6442                	ld	s0,16(sp)
    8001d01c:	8526                	mv	a0,s1
    8001d01e:	64a2                	ld	s1,8(sp)
    8001d020:	6105                	addi	sp,sp,32
    8001d022:	8082                	ret

000000008001d024 <instruction_access_fault_7>:


bool instruction_access_fault_7(){
    8001d024:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d026:	0000f597          	auipc	a1,0xf
    8001d02a:	60258593          	addi	a1,a1,1538 # 8002c628 <__func__.3>
    8001d02e:	00010517          	auipc	a0,0x10
    8001d032:	2d250513          	addi	a0,a0,722 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_7(){
    8001d036:	ec06                	sd	ra,24(sp)
    8001d038:	e822                	sd	s0,16(sp)
    8001d03a:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d03c:	57f0d0ef          	jal	8002adba <printf>
    8001d040:	4529                	li	a0,10
    8001d042:	2670c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001d046:	4511                	li	a0,4
    8001d048:	e27e30ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是HU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d04c:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d050:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d054:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d058:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d05c:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d060:	10000793          	li	a5,256
    8001d064:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d068:	20000793          	li	a5,512
    8001d06c:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d070:	40000793          	li	a5,1024
    8001d074:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d078:	6785                	lui	a5,0x1
    8001d07a:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d07e:	3a07a073          	csrs	pmpcfg0,a5
    
    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d082:	4785                	li	a5,1
    8001d084:	07fe                	slli	a5,a5,0x1f
    8001d086:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d08a:	08100793          	li	a5,129
    8001d08e:	07e2                	slli	a5,a5,0x18
    8001d090:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d094:	08000793          	li	a5,128
    8001d098:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d09c:	67a1                	lui	a5,0x8
    8001d09e:	3a07b073          	csrc	pmpcfg0,a5


    goto_priv(PRIV_HU);
    8001d0a2:	4505                	li	a0,1
    8001d0a4:	dcbe30ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d0a8:	ccbe30ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d0ac:	4785                	li	a5,1
    8001d0ae:	1786                	slli	a5,a5,0x21
    8001d0b0:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d0b4:	00034417          	auipc	s0,0x34
    8001d0b8:	f5c40413          	addi	s0,s0,-164 # 80051010 <excpt>
    8001d0bc:	00000297          	auipc	t0,0x0
    8001d0c0:	00c28293          	addi	t0,t0,12 # 8001d0c8 <instruction_access_fault_7+0xa4>
    8001d0c4:	02543c23          	sd	t0,56(s0)
    8001d0c8:	8782                	jr	a5

    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d0ca:	08200593          	li	a1,130
    8001d0ce:	00017617          	auipc	a2,0x17
    8001d0d2:	15a60613          	addi	a2,a2,346 # 80034228 <__func__.0+0x7208>
    8001d0d6:	00010517          	auipc	a0,0x10
    8001d0da:	24250513          	addi	a0,a0,578 # 8002d318 <__func__.0+0x2f8>
    8001d0de:	4dd0d0ef          	jal	8002adba <printf>
    8001d0e2:	00034797          	auipc	a5,0x34
    8001d0e6:	f2f7c783          	lbu	a5,-209(a5) # 80051011 <excpt+0x1>
    8001d0ea:	00010597          	auipc	a1,0x10
    8001d0ee:	20658593          	addi	a1,a1,518 # 8002d2f0 <__func__.0+0x2d0>
    8001d0f2:	cf89                	beqz	a5,8001d10c <instruction_access_fault_7+0xe8>
    8001d0f4:	641c                	ld	a5,8(s0)
    8001d0f6:	4705                	li	a4,1
    8001d0f8:	00010597          	auipc	a1,0x10
    8001d0fc:	1e858593          	addi	a1,a1,488 # 8002d2e0 <__func__.0+0x2c0>
    8001d100:	00e78663          	beq	a5,a4,8001d10c <instruction_access_fault_7+0xe8>
    8001d104:	00010597          	auipc	a1,0x10
    8001d108:	1ec58593          	addi	a1,a1,492 # 8002d2f0 <__func__.0+0x2d0>
    8001d10c:	00010517          	auipc	a0,0x10
    8001d110:	22450513          	addi	a0,a0,548 # 8002d330 <__func__.0+0x310>
    8001d114:	4a70d0ef          	jal	8002adba <printf>
    8001d118:	00034797          	auipc	a5,0x34
    8001d11c:	ef97c783          	lbu	a5,-263(a5) # 80051011 <excpt+0x1>
    8001d120:	c789                	beqz	a5,8001d12a <instruction_access_fault_7+0x106>
    8001d122:	6418                	ld	a4,8(s0)
    8001d124:	4785                	li	a5,1
    8001d126:	00f70c63          	beq	a4,a5,8001d13e <instruction_access_fault_7+0x11a>
    8001d12a:	00010517          	auipc	a0,0x10
    8001d12e:	20e50513          	addi	a0,a0,526 # 8002d338 <__func__.0+0x318>
    8001d132:	4890d0ef          	jal	8002adba <printf>
    8001d136:	02900513          	li	a0,41
    8001d13a:	16f0c0ef          	jal	80029aa8 <putchar>
    8001d13e:	4529                	li	a0,10
    8001d140:	1690c0ef          	jal	80029aa8 <putchar>
    8001d144:	00034497          	auipc	s1,0x34
    8001d148:	ecd4c483          	lbu	s1,-307(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );

    TEST_END();
    8001d14c:	00010597          	auipc	a1,0x10
    8001d150:	1a458593          	addi	a1,a1,420 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d154:	cc91                	beqz	s1,8001d170 <instruction_access_fault_7+0x14c>
    8001d156:	6418                	ld	a4,8(s0)
    8001d158:	4785                	li	a5,1
    TEST_END();
    8001d15a:	00010597          	auipc	a1,0x10
    8001d15e:	18658593          	addi	a1,a1,390 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode fetch instruction when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d162:	00f70763          	beq	a4,a5,8001d170 <instruction_access_fault_7+0x14c>
    8001d166:	4481                	li	s1,0
    TEST_END();
    8001d168:	00010597          	auipc	a1,0x10
    8001d16c:	18858593          	addi	a1,a1,392 # 8002d2f0 <__func__.0+0x2d0>
    8001d170:	00010517          	auipc	a0,0x10
    8001d174:	22850513          	addi	a0,a0,552 # 8002d398 <__func__.0+0x378>
    8001d178:	4430d0ef          	jal	8002adba <printf>
    8001d17c:	4511                	li	a0,4
    8001d17e:	cf1e30ef          	jal	80000e6e <goto_priv>
    8001d182:	e08e40ef          	jal	8000178a <reset_state>
}
    8001d186:	60e2                	ld	ra,24(sp)
    8001d188:	6442                	ld	s0,16(sp)
    8001d18a:	8526                	mv	a0,s1
    8001d18c:	64a2                	ld	s1,8(sp)
    8001d18e:	6105                	addi	sp,sp,32
    8001d190:	8082                	ret

000000008001d192 <instruction_access_fault_8>:

bool instruction_access_fault_8(){
    8001d192:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d194:	0000f597          	auipc	a1,0xf
    8001d198:	4b458593          	addi	a1,a1,1204 # 8002c648 <__func__.2>
    8001d19c:	00010517          	auipc	a0,0x10
    8001d1a0:	16450513          	addi	a0,a0,356 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_8(){
    8001d1a4:	ec06                	sd	ra,24(sp)
    8001d1a6:	e822                	sd	s0,16(sp)
    8001d1a8:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d1aa:	4110d0ef          	jal	8002adba <printf>
    8001d1ae:	4529                	li	a0,10
    8001d1b0:	0f90c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001d1b4:	4511                	li	a0,4
    8001d1b6:	cb9e30ef          	jal	80000e6e <goto_priv>

    //pmpcfg.L被设0，当前特权级是VU，访问没有执行权限的PMP区域获取指令，pmpcfg.X=0
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d1ba:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d1be:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d1c2:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d1c6:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d1ca:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d1ce:	10000793          	li	a5,256
    8001d1d2:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d1d6:	20000793          	li	a5,512
    8001d1da:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d1de:	40000793          	li	a5,1024
    8001d1e2:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d1e6:	6785                	lui	a5,0x1
    8001d1e8:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d1ec:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d1f0:	4785                	li	a5,1
    8001d1f2:	07fe                	slli	a5,a5,0x1f
    8001d1f4:	4485                	li	s1,1
    8001d1f6:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d1fa:	08100793          	li	a5,129
    8001d1fe:	07e2                	slli	a5,a5,0x18
    8001d200:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d204:	08000793          	li	a5,128
    8001d208:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d20c:	67a1                	lui	a5,0x8
    8001d20e:	3a07b073          	csrc	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d212:	4501                	li	a0,0
    8001d214:	c5be30ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d218:	b5be30ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x80000100UL << 2);
    8001d21c:	02149793          	slli	a5,s1,0x21
    8001d220:	40078793          	addi	a5,a5,1024 # 8400 <_test_table_size+0x83ff>
    8001d224:	00034417          	auipc	s0,0x34
    8001d228:	dec40413          	addi	s0,s0,-532 # 80051010 <excpt>
    8001d22c:	00000297          	auipc	t0,0x0
    8001d230:	00c28293          	addi	t0,t0,12 # 8001d238 <instruction_access_fault_8+0xa6>
    8001d234:	02543c23          	sd	t0,56(s0)
    8001d238:	8782                	jr	a5

    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d23a:	08200593          	li	a1,130
    8001d23e:	00017617          	auipc	a2,0x17
    8001d242:	03260613          	addi	a2,a2,50 # 80034270 <__func__.0+0x7250>
    8001d246:	00010517          	auipc	a0,0x10
    8001d24a:	0d250513          	addi	a0,a0,210 # 8002d318 <__func__.0+0x2f8>
    8001d24e:	36d0d0ef          	jal	8002adba <printf>
    8001d252:	00034797          	auipc	a5,0x34
    8001d256:	dbf7c783          	lbu	a5,-577(a5) # 80051011 <excpt+0x1>
    8001d25a:	00010597          	auipc	a1,0x10
    8001d25e:	09658593          	addi	a1,a1,150 # 8002d2f0 <__func__.0+0x2d0>
    8001d262:	cf81                	beqz	a5,8001d27a <instruction_access_fault_8+0xe8>
    8001d264:	641c                	ld	a5,8(s0)
    8001d266:	00010597          	auipc	a1,0x10
    8001d26a:	07a58593          	addi	a1,a1,122 # 8002d2e0 <__func__.0+0x2c0>
    8001d26e:	00978663          	beq	a5,s1,8001d27a <instruction_access_fault_8+0xe8>
    8001d272:	00010597          	auipc	a1,0x10
    8001d276:	07e58593          	addi	a1,a1,126 # 8002d2f0 <__func__.0+0x2d0>
    8001d27a:	00010517          	auipc	a0,0x10
    8001d27e:	0b650513          	addi	a0,a0,182 # 8002d330 <__func__.0+0x310>
    8001d282:	3390d0ef          	jal	8002adba <printf>
    8001d286:	00034797          	auipc	a5,0x34
    8001d28a:	d8b7c783          	lbu	a5,-629(a5) # 80051011 <excpt+0x1>
    8001d28e:	c789                	beqz	a5,8001d298 <instruction_access_fault_8+0x106>
    8001d290:	6418                	ld	a4,8(s0)
    8001d292:	4785                	li	a5,1
    8001d294:	00f70c63          	beq	a4,a5,8001d2ac <instruction_access_fault_8+0x11a>
    8001d298:	00010517          	auipc	a0,0x10
    8001d29c:	0a050513          	addi	a0,a0,160 # 8002d338 <__func__.0+0x318>
    8001d2a0:	31b0d0ef          	jal	8002adba <printf>
    8001d2a4:	02900513          	li	a0,41
    8001d2a8:	0010c0ef          	jal	80029aa8 <putchar>
    8001d2ac:	4529                	li	a0,10
    8001d2ae:	7fa0c0ef          	jal	80029aa8 <putchar>
    8001d2b2:	00034497          	auipc	s1,0x34
    8001d2b6:	d5f4c483          	lbu	s1,-673(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d2ba:	00010597          	auipc	a1,0x10
    8001d2be:	03658593          	addi	a1,a1,54 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d2c2:	cc91                	beqz	s1,8001d2de <instruction_access_fault_8+0x14c>
    8001d2c4:	6418                	ld	a4,8(s0)
    8001d2c6:	4785                	li	a5,1
    TEST_END();
    8001d2c8:	00010597          	auipc	a1,0x10
    8001d2cc:	01858593          	addi	a1,a1,24 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode lb when pmpcfg.X=0 and pmpcfg.L=0 leads to IAF",
    8001d2d0:	00f70763          	beq	a4,a5,8001d2de <instruction_access_fault_8+0x14c>
    8001d2d4:	4481                	li	s1,0
    TEST_END();
    8001d2d6:	00010597          	auipc	a1,0x10
    8001d2da:	01a58593          	addi	a1,a1,26 # 8002d2f0 <__func__.0+0x2d0>
    8001d2de:	00010517          	auipc	a0,0x10
    8001d2e2:	0ba50513          	addi	a0,a0,186 # 8002d398 <__func__.0+0x378>
    8001d2e6:	2d50d0ef          	jal	8002adba <printf>
    8001d2ea:	4511                	li	a0,4
    8001d2ec:	b83e30ef          	jal	80000e6e <goto_priv>
    8001d2f0:	c9ae40ef          	jal	8000178a <reset_state>
}
    8001d2f4:	60e2                	ld	ra,24(sp)
    8001d2f6:	6442                	ld	s0,16(sp)
    8001d2f8:	8526                	mv	a0,s1
    8001d2fa:	64a2                	ld	s1,8(sp)
    8001d2fc:	6105                	addi	sp,sp,32
    8001d2fe:	8082                	ret

000000008001d300 <instruction_access_fault_9>:

bool instruction_access_fault_9(){
    8001d300:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d302:	0000f597          	auipc	a1,0xf
    8001d306:	36658593          	addi	a1,a1,870 # 8002c668 <__func__.1>
    8001d30a:	00010517          	auipc	a0,0x10
    8001d30e:	ff650513          	addi	a0,a0,-10 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_9(){
    8001d312:	ec06                	sd	ra,24(sp)
    8001d314:	e822                	sd	s0,16(sp)
    8001d316:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d318:	2a30d0ef          	jal	8002adba <printf>
    8001d31c:	4529                	li	a0,10
    8001d31e:	78a0c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001d322:	4511                	li	a0,4
    8001d324:	b4be30ef          	jal	80000e6e <goto_priv>

    //跨越了两个具有不同权限的内存区域，一部分访问成功，一部分失败
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d328:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d32c:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d330:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d334:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d338:	3a046073          	csrsi	pmpcfg0,8


    CSRS(CSR_PMPCFG0,1ULL << 8 );      //pmp1cfg的R位
    8001d33c:	10000793          	li	a5,256
    8001d340:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 9 );      //pmp1cfg的W位
    8001d344:	20000793          	li	a5,512
    8001d348:	3a07a073          	csrs	pmpcfg0,a5
    CSRC(CSR_PMPCFG0,1ULL << 10 );      //pmp1cfg的X位
    8001d34c:	40000793          	li	a5,1024
    8001d350:	3a07b073          	csrc	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 11 );      //pmp1cfg的TOR模式
    8001d354:	6785                	lui	a5,0x1
    8001d356:	80078793          	addi	a5,a5,-2048 # 800 <_test_table_size+0x7ff>
    8001d35a:	3a07a073          	csrs	pmpcfg0,a5

    CSRW(CSR_PMPADDR0, (uintptr_t)0x80000000);
    8001d35e:	4785                	li	a5,1
    8001d360:	07fe                	slli	a5,a5,0x1f
    8001d362:	4485                	li	s1,1
    8001d364:	3b079073          	csrw	pmpaddr0,a5
    CSRW(CSR_PMPADDR1, (uintptr_t)0x81000000);
    8001d368:	08100793          	li	a5,129
    8001d36c:	07e2                	slli	a5,a5,0x18
    8001d36e:	3b179073          	csrw	pmpaddr1,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d372:	08000793          	li	a5,128
    8001d376:	3a07a073          	csrs	pmpcfg0,a5
    CSRS(CSR_PMPCFG0,1ULL << 15 );       //pmp1cfg的L位 
    8001d37a:	67a1                	lui	a5,0x8
    8001d37c:	3a07a073          	csrs	pmpcfg0,a5

    goto_priv(PRIV_VU);
    8001d380:	4501                	li	a0,0
    8001d382:	aede30ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d386:	9ede30ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x1fffffffeUL << 2);
    8001d38a:	02349793          	slli	a5,s1,0x23
    8001d38e:	17e1                	addi	a5,a5,-8 # 7ff8 <_test_table_size+0x7ff7>
    8001d390:	00034417          	auipc	s0,0x34
    8001d394:	c8040413          	addi	s0,s0,-896 # 80051010 <excpt>
    8001d398:	00000297          	auipc	t0,0x0
    8001d39c:	00c28293          	addi	t0,t0,12 # 8001d3a4 <instruction_access_fault_9+0xa4>
    8001d3a0:	02543c23          	sd	t0,56(s0)
    8001d3a4:	8782                	jr	a5

    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d3a6:	08200593          	li	a1,130
    8001d3aa:	00017617          	auipc	a2,0x17
    8001d3ae:	efe60613          	addi	a2,a2,-258 # 800342a8 <__func__.0+0x7288>
    8001d3b2:	00010517          	auipc	a0,0x10
    8001d3b6:	f6650513          	addi	a0,a0,-154 # 8002d318 <__func__.0+0x2f8>
    8001d3ba:	2010d0ef          	jal	8002adba <printf>
    8001d3be:	00034797          	auipc	a5,0x34
    8001d3c2:	c537c783          	lbu	a5,-941(a5) # 80051011 <excpt+0x1>
    8001d3c6:	00010597          	auipc	a1,0x10
    8001d3ca:	f2a58593          	addi	a1,a1,-214 # 8002d2f0 <__func__.0+0x2d0>
    8001d3ce:	cf81                	beqz	a5,8001d3e6 <instruction_access_fault_9+0xe6>
    8001d3d0:	641c                	ld	a5,8(s0)
    8001d3d2:	00010597          	auipc	a1,0x10
    8001d3d6:	f0e58593          	addi	a1,a1,-242 # 8002d2e0 <__func__.0+0x2c0>
    8001d3da:	00978663          	beq	a5,s1,8001d3e6 <instruction_access_fault_9+0xe6>
    8001d3de:	00010597          	auipc	a1,0x10
    8001d3e2:	f1258593          	addi	a1,a1,-238 # 8002d2f0 <__func__.0+0x2d0>
    8001d3e6:	00010517          	auipc	a0,0x10
    8001d3ea:	f4a50513          	addi	a0,a0,-182 # 8002d330 <__func__.0+0x310>
    8001d3ee:	1cd0d0ef          	jal	8002adba <printf>
    8001d3f2:	00034797          	auipc	a5,0x34
    8001d3f6:	c1f7c783          	lbu	a5,-993(a5) # 80051011 <excpt+0x1>
    8001d3fa:	c789                	beqz	a5,8001d404 <instruction_access_fault_9+0x104>
    8001d3fc:	6418                	ld	a4,8(s0)
    8001d3fe:	4785                	li	a5,1
    8001d400:	00f70c63          	beq	a4,a5,8001d418 <instruction_access_fault_9+0x118>
    8001d404:	00010517          	auipc	a0,0x10
    8001d408:	f3450513          	addi	a0,a0,-204 # 8002d338 <__func__.0+0x318>
    8001d40c:	1af0d0ef          	jal	8002adba <printf>
    8001d410:	02900513          	li	a0,41
    8001d414:	6940c0ef          	jal	80029aa8 <putchar>
    8001d418:	4529                	li	a0,10
    8001d41a:	68e0c0ef          	jal	80029aa8 <putchar>
    8001d41e:	00034497          	auipc	s1,0x34
    8001d422:	bf34c483          	lbu	s1,-1037(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d426:	00010597          	auipc	a1,0x10
    8001d42a:	eca58593          	addi	a1,a1,-310 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d42e:	cc91                	beqz	s1,8001d44a <instruction_access_fault_9+0x14a>
    8001d430:	6418                	ld	a4,8(s0)
    8001d432:	4785                	li	a5,1
    TEST_END();
    8001d434:	00010597          	auipc	a1,0x10
    8001d438:	eac58593          	addi	a1,a1,-340 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("Spanning two memory regions with different permissions, some accessed successfully and some failed leads to IAF",
    8001d43c:	00f70763          	beq	a4,a5,8001d44a <instruction_access_fault_9+0x14a>
    8001d440:	4481                	li	s1,0
    TEST_END();
    8001d442:	00010597          	auipc	a1,0x10
    8001d446:	eae58593          	addi	a1,a1,-338 # 8002d2f0 <__func__.0+0x2d0>
    8001d44a:	00010517          	auipc	a0,0x10
    8001d44e:	f4e50513          	addi	a0,a0,-178 # 8002d398 <__func__.0+0x378>
    8001d452:	1690d0ef          	jal	8002adba <printf>
    8001d456:	4511                	li	a0,4
    8001d458:	a17e30ef          	jal	80000e6e <goto_priv>
    8001d45c:	b2ee40ef          	jal	8000178a <reset_state>
}
    8001d460:	60e2                	ld	ra,24(sp)
    8001d462:	6442                	ld	s0,16(sp)
    8001d464:	8526                	mv	a0,s1
    8001d466:	64a2                	ld	s1,8(sp)
    8001d468:	6105                	addi	sp,sp,32
    8001d46a:	8082                	ret

000000008001d46c <instruction_access_fault_10>:

bool instruction_access_fault_10(){
    8001d46c:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d46e:	0000f597          	auipc	a1,0xf
    8001d472:	21a58593          	addi	a1,a1,538 # 8002c688 <__func__.0>
    8001d476:	00010517          	auipc	a0,0x10
    8001d47a:	e8a50513          	addi	a0,a0,-374 # 8002d300 <__func__.0+0x2e0>
bool instruction_access_fault_10(){
    8001d47e:	ec06                	sd	ra,24(sp)
    8001d480:	e822                	sd	s0,16(sp)
    8001d482:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d484:	1370d0ef          	jal	8002adba <printf>
    8001d488:	4529                	li	a0,10
    8001d48a:	61e0c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    8001d48e:	4511                	li	a0,4
    8001d490:	9dfe30ef          	jal	80000e6e <goto_priv>

    //访问了无效的地址范围，不在正确的pmpaddr范围内
    
    CSRW(CSR_PMPCFG0,(uint64_t)0x0);
    8001d494:	3a005073          	csrwi	pmpcfg0,0
    
    CSRS(CSR_PMPCFG0,1ULL << 0 );      //pmp0cfg的R位
    8001d498:	3a00e073          	csrsi	pmpcfg0,1
    CSRS(CSR_PMPCFG0,1ULL << 1 );      //pmp0cfg的W位
    8001d49c:	3a016073          	csrsi	pmpcfg0,2
    CSRS(CSR_PMPCFG0,1ULL << 2 );      //pmp0cfg的X位
    8001d4a0:	3a026073          	csrsi	pmpcfg0,4
    CSRS(CSR_PMPCFG0,1ULL << 3 );      //pmp0cfg的TOR模式
    8001d4a4:	3a046073          	csrsi	pmpcfg0,8

    CSRW(CSR_PMPADDR0, (uintptr_t)0x90000000);
    8001d4a8:	47a5                	li	a5,9
    8001d4aa:	07f2                	slli	a5,a5,0x1c
    8001d4ac:	3b079073          	csrw	pmpaddr0,a5

    CSRS(CSR_PMPCFG0,1ULL << 7 );     //pmp0cfg的L位 
    8001d4b0:	08000793          	li	a5,128
    8001d4b4:	3a07a073          	csrs	pmpcfg0,a5
    printf("pmpcfg0=%llx\n",CSRR(CSR_PMPCFG0));printf("pmpcfg2=%llx\n",CSRR(CSR_PMPCFG2));
    8001d4b8:	3a0025f3          	csrr	a1,pmpcfg0
    8001d4bc:	00016517          	auipc	a0,0x16
    8001d4c0:	46450513          	addi	a0,a0,1124 # 80033920 <__func__.0+0x6900>
    8001d4c4:	0f70d0ef          	jal	8002adba <printf>
    8001d4c8:	3a2025f3          	csrr	a1,pmpcfg2
    8001d4cc:	00017517          	auipc	a0,0x17
    8001d4d0:	e4c50513          	addi	a0,a0,-436 # 80034318 <__func__.0+0x72f8>
    8001d4d4:	0e70d0ef          	jal	8002adba <printf>
    goto_priv(PRIV_HS);
    8001d4d8:	450d                	li	a0,3
    8001d4da:	995e30ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();    
    8001d4de:	895e30ef          	jal	80000d72 <test_setup_except_function>
    
    TEST_EXEC_EXCEPT(0x9f000000UL << 2);
    8001d4e2:	09f00793          	li	a5,159
    8001d4e6:	07ea                	slli	a5,a5,0x1a
    8001d4e8:	00034417          	auipc	s0,0x34
    8001d4ec:	b2840413          	addi	s0,s0,-1240 # 80051010 <excpt>
    8001d4f0:	00000297          	auipc	t0,0x0
    8001d4f4:	00c28293          	addi	t0,t0,12 # 8001d4fc <instruction_access_fault_10+0x90>
    8001d4f8:	02543c23          	sd	t0,56(s0)
    8001d4fc:	8782                	jr	a5

    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d4fe:	08200593          	li	a1,130
    8001d502:	00017617          	auipc	a2,0x17
    8001d506:	e2660613          	addi	a2,a2,-474 # 80034328 <__func__.0+0x7308>
    8001d50a:	00010517          	auipc	a0,0x10
    8001d50e:	e0e50513          	addi	a0,a0,-498 # 8002d318 <__func__.0+0x2f8>
    8001d512:	0a90d0ef          	jal	8002adba <printf>
    8001d516:	00034797          	auipc	a5,0x34
    8001d51a:	afb7c783          	lbu	a5,-1285(a5) # 80051011 <excpt+0x1>
    8001d51e:	00010597          	auipc	a1,0x10
    8001d522:	dd258593          	addi	a1,a1,-558 # 8002d2f0 <__func__.0+0x2d0>
    8001d526:	cf89                	beqz	a5,8001d540 <instruction_access_fault_10+0xd4>
    8001d528:	6418                	ld	a4,8(s0)
    8001d52a:	4785                	li	a5,1
    8001d52c:	00010597          	auipc	a1,0x10
    8001d530:	db458593          	addi	a1,a1,-588 # 8002d2e0 <__func__.0+0x2c0>
    8001d534:	00f70663          	beq	a4,a5,8001d540 <instruction_access_fault_10+0xd4>
    8001d538:	00010597          	auipc	a1,0x10
    8001d53c:	db858593          	addi	a1,a1,-584 # 8002d2f0 <__func__.0+0x2d0>
    8001d540:	00010517          	auipc	a0,0x10
    8001d544:	df050513          	addi	a0,a0,-528 # 8002d330 <__func__.0+0x310>
    8001d548:	0730d0ef          	jal	8002adba <printf>
    8001d54c:	00034797          	auipc	a5,0x34
    8001d550:	ac57c783          	lbu	a5,-1339(a5) # 80051011 <excpt+0x1>
    8001d554:	c789                	beqz	a5,8001d55e <instruction_access_fault_10+0xf2>
    8001d556:	6418                	ld	a4,8(s0)
    8001d558:	4785                	li	a5,1
    8001d55a:	00f70c63          	beq	a4,a5,8001d572 <instruction_access_fault_10+0x106>
    8001d55e:	00010517          	auipc	a0,0x10
    8001d562:	dda50513          	addi	a0,a0,-550 # 8002d338 <__func__.0+0x318>
    8001d566:	0550d0ef          	jal	8002adba <printf>
    8001d56a:	02900513          	li	a0,41
    8001d56e:	53a0c0ef          	jal	80029aa8 <putchar>
    8001d572:	4529                	li	a0,10
    8001d574:	5340c0ef          	jal	80029aa8 <putchar>
    8001d578:	00034497          	auipc	s1,0x34
    8001d57c:	a994c483          	lbu	s1,-1383(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IAF
    );


    TEST_END();
    8001d580:	00010597          	auipc	a1,0x10
    8001d584:	d7058593          	addi	a1,a1,-656 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d588:	cc91                	beqz	s1,8001d5a4 <instruction_access_fault_10+0x138>
    8001d58a:	6418                	ld	a4,8(s0)
    8001d58c:	4785                	li	a5,1
    TEST_END();
    8001d58e:	00010597          	auipc	a1,0x10
    8001d592:	d5258593          	addi	a1,a1,-686 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An invalid address range was accessed and is not in the correct pmpaddr range leads to IAF",
    8001d596:	00f70763          	beq	a4,a5,8001d5a4 <instruction_access_fault_10+0x138>
    8001d59a:	4481                	li	s1,0
    TEST_END();
    8001d59c:	00010597          	auipc	a1,0x10
    8001d5a0:	d5458593          	addi	a1,a1,-684 # 8002d2f0 <__func__.0+0x2d0>
    8001d5a4:	00010517          	auipc	a0,0x10
    8001d5a8:	df450513          	addi	a0,a0,-524 # 8002d398 <__func__.0+0x378>
    8001d5ac:	00f0d0ef          	jal	8002adba <printf>
    8001d5b0:	4511                	li	a0,4
    8001d5b2:	8bde30ef          	jal	80000e6e <goto_priv>
    8001d5b6:	9d4e40ef          	jal	8000178a <reset_state>
    8001d5ba:	60e2                	ld	ra,24(sp)
    8001d5bc:	6442                	ld	s0,16(sp)
    8001d5be:	8526                	mv	a0,s1
    8001d5c0:	64a2                	ld	s1,8(sp)
    8001d5c2:	6105                	addi	sp,sp,32
    8001d5c4:	8082                	ret

000000008001d5c6 <mstatus_csr_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>

bool mstatus_csr_tests_1(){
    8001d5c6:	1101                	addi	sp,sp,-32

TEST_START();
    8001d5c8:	0000f597          	auipc	a1,0xf
    8001d5cc:	0e058593          	addi	a1,a1,224 # 8002c6a8 <__func__.9>
    8001d5d0:	00010517          	auipc	a0,0x10
    8001d5d4:	d3050513          	addi	a0,a0,-720 # 8002d300 <__func__.0+0x2e0>
bool mstatus_csr_tests_1(){
    8001d5d8:	ec06                	sd	ra,24(sp)
    8001d5da:	e822                	sd	s0,16(sp)
    8001d5dc:	e426                	sd	s1,8(sp)
TEST_START();
    8001d5de:	7dc0d0ef          	jal	8002adba <printf>
    8001d5e2:	4529                	li	a0,10
    8001d5e4:	4c40c0ef          	jal	80029aa8 <putchar>
    printf("%d\n",x);
*/

//mstatus.SUM 阻止S对U访问，缺页异常
    
    goto_priv(PRIV_HS);
    8001d5e8:	450d                	li	a0,3
    8001d5ea:	885e30ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001d5ee:	ff3e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d5f2:	b8ae30ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001d5f6:	92ce30ef          	jal	80000722 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d5fa:	4511                	li	a0,4
    8001d5fc:	873e30ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATUS, MSTATUS_SUM);
    8001d600:	000407b7          	lui	a5,0x40
    8001d604:	3007b073          	csrc	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d608:	f6ae30ef          	jal	80000d72 <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d60c:	450d                	li	a0,3
    8001d60e:	861e30ef          	jal	80000e6e <goto_priv>
    asm volatile(
    8001d612:	000807b7          	lui	a5,0x80
    8001d616:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d618:	07b6                	slli	a5,a5,0xd
    8001d61a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d61e:	08200593          	li	a1,130
    8001d622:	00017617          	auipc	a2,0x17
    8001d626:	d6660613          	addi	a2,a2,-666 # 80034388 <__func__.0+0x7368>
    8001d62a:	00010517          	auipc	a0,0x10
    8001d62e:	cee50513          	addi	a0,a0,-786 # 8002d318 <__func__.0+0x2f8>
    8001d632:	7880d0ef          	jal	8002adba <printf>
    8001d636:	00034797          	auipc	a5,0x34
    8001d63a:	9db7c783          	lbu	a5,-1573(a5) # 80051011 <excpt+0x1>
    8001d63e:	00034497          	auipc	s1,0x34
    8001d642:	9d248493          	addi	s1,s1,-1582 # 80051010 <excpt>
    8001d646:	00010597          	auipc	a1,0x10
    8001d64a:	caa58593          	addi	a1,a1,-854 # 8002d2f0 <__func__.0+0x2d0>
    8001d64e:	cf89                	beqz	a5,8001d668 <mstatus_csr_tests_1+0xa2>
    8001d650:	6498                	ld	a4,8(s1)
    8001d652:	47b5                	li	a5,13
    8001d654:	00010597          	auipc	a1,0x10
    8001d658:	c8c58593          	addi	a1,a1,-884 # 8002d2e0 <__func__.0+0x2c0>
    8001d65c:	00f70663          	beq	a4,a5,8001d668 <mstatus_csr_tests_1+0xa2>
    8001d660:	00010597          	auipc	a1,0x10
    8001d664:	c9058593          	addi	a1,a1,-880 # 8002d2f0 <__func__.0+0x2d0>
    8001d668:	00010517          	auipc	a0,0x10
    8001d66c:	cc850513          	addi	a0,a0,-824 # 8002d330 <__func__.0+0x310>
    8001d670:	74a0d0ef          	jal	8002adba <printf>
    8001d674:	00034797          	auipc	a5,0x34
    8001d678:	99d7c783          	lbu	a5,-1635(a5) # 80051011 <excpt+0x1>
    8001d67c:	c789                	beqz	a5,8001d686 <mstatus_csr_tests_1+0xc0>
    8001d67e:	6498                	ld	a4,8(s1)
    8001d680:	47b5                	li	a5,13
    8001d682:	00f70c63          	beq	a4,a5,8001d69a <mstatus_csr_tests_1+0xd4>
    8001d686:	00010517          	auipc	a0,0x10
    8001d68a:	cb250513          	addi	a0,a0,-846 # 8002d338 <__func__.0+0x318>
    8001d68e:	72c0d0ef          	jal	8002adba <printf>
    8001d692:	02900513          	li	a0,41
    8001d696:	4120c0ef          	jal	80029aa8 <putchar>
    8001d69a:	4529                	li	a0,10
    8001d69c:	40c0c0ef          	jal	80029aa8 <putchar>
    8001d6a0:	00034417          	auipc	s0,0x34
    8001d6a4:	97144403          	lbu	s0,-1679(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );

    TEST_END();
    8001d6a8:	00010597          	auipc	a1,0x10
    8001d6ac:	c4858593          	addi	a1,a1,-952 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d6b0:	cc11                	beqz	s0,8001d6cc <mstatus_csr_tests_1+0x106>
    8001d6b2:	6498                	ld	a4,8(s1)
    8001d6b4:	47b5                	li	a5,13
    TEST_END();
    8001d6b6:	00010597          	auipc	a1,0x10
    8001d6ba:	c2a58593          	addi	a1,a1,-982 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=0 leads to LPF",
    8001d6be:	00f70763          	beq	a4,a5,8001d6cc <mstatus_csr_tests_1+0x106>
    8001d6c2:	4401                	li	s0,0
    TEST_END();
    8001d6c4:	00010597          	auipc	a1,0x10
    8001d6c8:	c2c58593          	addi	a1,a1,-980 # 8002d2f0 <__func__.0+0x2d0>
    8001d6cc:	00010517          	auipc	a0,0x10
    8001d6d0:	ccc50513          	addi	a0,a0,-820 # 8002d398 <__func__.0+0x378>
    8001d6d4:	6e60d0ef          	jal	8002adba <printf>
    8001d6d8:	4511                	li	a0,4
    8001d6da:	f94e30ef          	jal	80000e6e <goto_priv>
    8001d6de:	8ace40ef          	jal	8000178a <reset_state>
}
    8001d6e2:	60e2                	ld	ra,24(sp)
    8001d6e4:	8522                	mv	a0,s0
    8001d6e6:	6442                	ld	s0,16(sp)
    8001d6e8:	64a2                	ld	s1,8(sp)
    8001d6ea:	6105                	addi	sp,sp,32
    8001d6ec:	8082                	ret

000000008001d6ee <mstatus_csr_tests_2>:

bool mstatus_csr_tests_2(){
    8001d6ee:	1141                	addi	sp,sp,-16

    TEST_START();
    8001d6f0:	0000f597          	auipc	a1,0xf
    8001d6f4:	fd058593          	addi	a1,a1,-48 # 8002c6c0 <__func__.7>
    8001d6f8:	00010517          	auipc	a0,0x10
    8001d6fc:	c0850513          	addi	a0,a0,-1016 # 8002d300 <__func__.0+0x2e0>
bool mstatus_csr_tests_2(){
    8001d700:	e406                	sd	ra,8(sp)
    8001d702:	e022                	sd	s0,0(sp)
    TEST_START();
    8001d704:	6b60d0ef          	jal	8002adba <printf>
    8001d708:	4529                	li	a0,10
    8001d70a:	39e0c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001d70e:	450d                	li	a0,3
    8001d710:	f5ee30ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001d714:	ecde20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d718:	a64e30ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001d71c:	806e30ef          	jal	80000722 <vspt_init>

    //执行load指令时，设置了mstatus.SUM=1，在S模式下访问U模式可以访问的页表项
    goto_priv(PRIV_M);
    8001d720:	4511                	li	a0,4
    8001d722:	f4ce30ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_SUM);
    8001d726:	000407b7          	lui	a5,0x40
    8001d72a:	3007a073          	csrs	mstatus,a5
    uintptr_t addr = hs_page_base(VSURWX_GURWX);

    TEST_SETUP_EXCEPT();
    8001d72e:	e44e30ef          	jal	80000d72 <test_setup_except_function>

    goto_priv(PRIV_HS);
    8001d732:	450d                	li	a0,3
    8001d734:	f3ae30ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d738:	4509                	li	a0,2
    8001d73a:	e54e30ef          	jal	80000d8e <set_prev_priv>
    8001d73e:	000807b7          	lui	a5,0x80
    8001d742:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    8001d744:	07b6                	slli	a5,a5,0xd
    8001d746:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
        printf("%d\n",excpt.triggered);
    8001d74a:	00034597          	auipc	a1,0x34
    8001d74e:	8c75c583          	lbu	a1,-1849(a1) # 80051011 <excpt+0x1>
    8001d752:	00010517          	auipc	a0,0x10
    8001d756:	73650513          	addi	a0,a0,1846 # 8002de88 <__func__.0+0xe68>
    8001d75a:	6600d0ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001d75e:	00034597          	auipc	a1,0x34
    8001d762:	8ba5b583          	ld	a1,-1862(a1) # 80051018 <excpt+0x8>
    8001d766:	00010517          	auipc	a0,0x10
    8001d76a:	72250513          	addi	a0,a0,1826 # 8002de88 <__func__.0+0xe68>
    8001d76e:	64c0d0ef          	jal	8002adba <printf>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d772:	08200593          	li	a1,130
    8001d776:	00017617          	auipc	a2,0x17
    8001d77a:	c4a60613          	addi	a2,a2,-950 # 800343c0 <__func__.0+0x73a0>
    8001d77e:	00010517          	auipc	a0,0x10
    8001d782:	b9a50513          	addi	a0,a0,-1126 # 8002d318 <__func__.0+0x2f8>
    8001d786:	6340d0ef          	jal	8002adba <printf>
    8001d78a:	00034797          	auipc	a5,0x34
    8001d78e:	8877c783          	lbu	a5,-1913(a5) # 80051011 <excpt+0x1>
    8001d792:	00010597          	auipc	a1,0x10
    8001d796:	b4e58593          	addi	a1,a1,-1202 # 8002d2e0 <__func__.0+0x2c0>
    8001d79a:	c789                	beqz	a5,8001d7a4 <mstatus_csr_tests_2+0xb6>
    8001d79c:	00010597          	auipc	a1,0x10
    8001d7a0:	b5458593          	addi	a1,a1,-1196 # 8002d2f0 <__func__.0+0x2d0>
    8001d7a4:	00010517          	auipc	a0,0x10
    8001d7a8:	b8c50513          	addi	a0,a0,-1140 # 8002d330 <__func__.0+0x310>
    8001d7ac:	60e0d0ef          	jal	8002adba <printf>
    8001d7b0:	00034797          	auipc	a5,0x34
    8001d7b4:	8617c783          	lbu	a5,-1951(a5) # 80051011 <excpt+0x1>
    8001d7b8:	e7a1                	bnez	a5,8001d800 <mstatus_csr_tests_2+0x112>
    8001d7ba:	4529                	li	a0,10
    8001d7bc:	2ec0c0ef          	jal	80029aa8 <putchar>
    8001d7c0:	00034797          	auipc	a5,0x34
    8001d7c4:	8517c783          	lbu	a5,-1967(a5) # 80051011 <excpt+0x1>
    8001d7c8:	e795                	bnez	a5,8001d7f4 <mstatus_csr_tests_2+0x106>
    8001d7ca:	4405                	li	s0,1
        excpt.triggered == false
    );


    TEST_END();
    8001d7cc:	00010597          	auipc	a1,0x10
    8001d7d0:	b1458593          	addi	a1,a1,-1260 # 8002d2e0 <__func__.0+0x2c0>
    8001d7d4:	00010517          	auipc	a0,0x10
    8001d7d8:	bc450513          	addi	a0,a0,-1084 # 8002d398 <__func__.0+0x378>
    8001d7dc:	5de0d0ef          	jal	8002adba <printf>
    8001d7e0:	4511                	li	a0,4
    8001d7e2:	e8ce30ef          	jal	80000e6e <goto_priv>
    8001d7e6:	fa5e30ef          	jal	8000178a <reset_state>
}
    8001d7ea:	60a2                	ld	ra,8(sp)
    8001d7ec:	8522                	mv	a0,s0
    8001d7ee:	6402                	ld	s0,0(sp)
    8001d7f0:	0141                	addi	sp,sp,16
    8001d7f2:	8082                	ret
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d7f4:	4401                	li	s0,0
    TEST_END();
    8001d7f6:	00010597          	auipc	a1,0x10
    8001d7fa:	afa58593          	addi	a1,a1,-1286 # 8002d2f0 <__func__.0+0x2d0>
    8001d7fe:	bfd9                	j	8001d7d4 <mstatus_csr_tests_2+0xe6>
    TEST_ASSERT("s mode load u mode page when mstatus.sum=1 successful",
    8001d800:	00010517          	auipc	a0,0x10
    8001d804:	b3850513          	addi	a0,a0,-1224 # 8002d338 <__func__.0+0x318>
    8001d808:	5b20d0ef          	jal	8002adba <printf>
    8001d80c:	02900513          	li	a0,41
    8001d810:	2980c0ef          	jal	80029aa8 <putchar>
    8001d814:	b75d                	j	8001d7ba <mstatus_csr_tests_2+0xcc>

000000008001d816 <mstatus_csr_tests_3>:

bool mstatus_csr_tests_3(){
    8001d816:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d818:	0000f597          	auipc	a1,0xf
    8001d81c:	ec058593          	addi	a1,a1,-320 # 8002c6d8 <__func__.6>
    8001d820:	00010517          	auipc	a0,0x10
    8001d824:	ae050513          	addi	a0,a0,-1312 # 8002d300 <__func__.0+0x2e0>
bool mstatus_csr_tests_3(){
    8001d828:	ec06                	sd	ra,24(sp)
    8001d82a:	e822                	sd	s0,16(sp)
    8001d82c:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d82e:	58c0d0ef          	jal	8002adba <printf>
    8001d832:	4529                	li	a0,10
    8001d834:	2740c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001d838:	450d                	li	a0,3
    8001d83a:	e34e30ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001d83e:	da3e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d842:	93ae30ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001d846:	edde20ef          	jal	80000722 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=0，只能从只读页面读取，如果此时pte.r=0
    goto_priv(PRIV_M);
    8001d84a:	4511                	li	a0,4
    8001d84c:	e22e30ef          	jal	80000e6e <goto_priv>

    uintptr_t addr = hs_page_base(VSX_GRWX);

    CSRC(CSR_MSTATUS, MSTATUS_MXR);
    8001d850:	000807b7          	lui	a5,0x80
    8001d854:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_HS);
    8001d858:	450d                	li	a0,3
    8001d85a:	e14e30ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d85e:	4509                	li	a0,2
    8001d860:	d2ee30ef          	jal	80000d8e <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001d864:	d0ee30ef          	jal	80000d72 <test_setup_except_function>
    8001d868:	001007b7          	lui	a5,0x100
    8001d86c:	05f78793          	addi	a5,a5,95 # 10005f <STACK_SIZE+0x5f>
    8001d870:	07b2                	slli	a5,a5,0xc
    8001d872:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);   
    printf("%d\n",excpt.triggered);
    8001d876:	00033597          	auipc	a1,0x33
    8001d87a:	79b5c583          	lbu	a1,1947(a1) # 80051011 <excpt+0x1>
    8001d87e:	00010517          	auipc	a0,0x10
    8001d882:	60a50513          	addi	a0,a0,1546 # 8002de88 <__func__.0+0xe68>
    8001d886:	00033417          	auipc	s0,0x33
    8001d88a:	78a40413          	addi	s0,s0,1930 # 80051010 <excpt>
    8001d88e:	52c0d0ef          	jal	8002adba <printf>
    printf("%d\n",excpt.cause);
    8001d892:	640c                	ld	a1,8(s0)
    8001d894:	00010517          	auipc	a0,0x10
    8001d898:	5f450513          	addi	a0,a0,1524 # 8002de88 <__func__.0+0xe68>
    8001d89c:	51e0d0ef          	jal	8002adba <printf>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d8a0:	08200593          	li	a1,130
    8001d8a4:	00017617          	auipc	a2,0x17
    8001d8a8:	b5460613          	addi	a2,a2,-1196 # 800343f8 <__func__.0+0x73d8>
    8001d8ac:	00010517          	auipc	a0,0x10
    8001d8b0:	a6c50513          	addi	a0,a0,-1428 # 8002d318 <__func__.0+0x2f8>
    8001d8b4:	5060d0ef          	jal	8002adba <printf>
    8001d8b8:	00033797          	auipc	a5,0x33
    8001d8bc:	7597c783          	lbu	a5,1881(a5) # 80051011 <excpt+0x1>
    8001d8c0:	00010597          	auipc	a1,0x10
    8001d8c4:	a3058593          	addi	a1,a1,-1488 # 8002d2f0 <__func__.0+0x2d0>
    8001d8c8:	cf89                	beqz	a5,8001d8e2 <mstatus_csr_tests_3+0xcc>
    8001d8ca:	6418                	ld	a4,8(s0)
    8001d8cc:	47b5                	li	a5,13
    8001d8ce:	00010597          	auipc	a1,0x10
    8001d8d2:	a1258593          	addi	a1,a1,-1518 # 8002d2e0 <__func__.0+0x2c0>
    8001d8d6:	00f70663          	beq	a4,a5,8001d8e2 <mstatus_csr_tests_3+0xcc>
    8001d8da:	00010597          	auipc	a1,0x10
    8001d8de:	a1658593          	addi	a1,a1,-1514 # 8002d2f0 <__func__.0+0x2d0>
    8001d8e2:	00010517          	auipc	a0,0x10
    8001d8e6:	a4e50513          	addi	a0,a0,-1458 # 8002d330 <__func__.0+0x310>
    8001d8ea:	4d00d0ef          	jal	8002adba <printf>
    8001d8ee:	00033797          	auipc	a5,0x33
    8001d8f2:	7237c783          	lbu	a5,1827(a5) # 80051011 <excpt+0x1>
    8001d8f6:	c789                	beqz	a5,8001d900 <mstatus_csr_tests_3+0xea>
    8001d8f8:	6418                	ld	a4,8(s0)
    8001d8fa:	47b5                	li	a5,13
    8001d8fc:	00f70c63          	beq	a4,a5,8001d914 <mstatus_csr_tests_3+0xfe>
    8001d900:	00010517          	auipc	a0,0x10
    8001d904:	a3850513          	addi	a0,a0,-1480 # 8002d338 <__func__.0+0x318>
    8001d908:	4b20d0ef          	jal	8002adba <printf>
    8001d90c:	02900513          	li	a0,41
    8001d910:	1980c0ef          	jal	80029aa8 <putchar>
    8001d914:	4529                	li	a0,10
    8001d916:	1920c0ef          	jal	80029aa8 <putchar>
    8001d91a:	00033497          	auipc	s1,0x33
    8001d91e:	6f74c483          	lbu	s1,1783(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );


    TEST_END();
    8001d922:	00010597          	auipc	a1,0x10
    8001d926:	9ce58593          	addi	a1,a1,-1586 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d92a:	cc91                	beqz	s1,8001d946 <mstatus_csr_tests_3+0x130>
    8001d92c:	6418                	ld	a4,8(s0)
    8001d92e:	47b5                	li	a5,13
    TEST_END();
    8001d930:	00010597          	auipc	a1,0x10
    8001d934:	9b058593          	addi	a1,a1,-1616 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("s mode load when mstatus.mxr=0 and pte.r=0 leads to LPF",
    8001d938:	00f70763          	beq	a4,a5,8001d946 <mstatus_csr_tests_3+0x130>
    8001d93c:	4481                	li	s1,0
    TEST_END();
    8001d93e:	00010597          	auipc	a1,0x10
    8001d942:	9b258593          	addi	a1,a1,-1614 # 8002d2f0 <__func__.0+0x2d0>
    8001d946:	00010517          	auipc	a0,0x10
    8001d94a:	a5250513          	addi	a0,a0,-1454 # 8002d398 <__func__.0+0x378>
    8001d94e:	46c0d0ef          	jal	8002adba <printf>
    8001d952:	4511                	li	a0,4
    8001d954:	d1ae30ef          	jal	80000e6e <goto_priv>
    8001d958:	e33e30ef          	jal	8000178a <reset_state>
}
    8001d95c:	60e2                	ld	ra,24(sp)
    8001d95e:	6442                	ld	s0,16(sp)
    8001d960:	8526                	mv	a0,s1
    8001d962:	64a2                	ld	s1,8(sp)
    8001d964:	6105                	addi	sp,sp,32
    8001d966:	8082                	ret

000000008001d968 <mstatus_csr_tests_4>:

bool mstatus_csr_tests_4(){
    8001d968:	1101                	addi	sp,sp,-32

    TEST_START();
    8001d96a:	0000f597          	auipc	a1,0xf
    8001d96e:	d8658593          	addi	a1,a1,-634 # 8002c6f0 <__func__.5>
    8001d972:	00010517          	auipc	a0,0x10
    8001d976:	98e50513          	addi	a0,a0,-1650 # 8002d300 <__func__.0+0x2e0>
bool mstatus_csr_tests_4(){
    8001d97a:	ec06                	sd	ra,24(sp)
    8001d97c:	e822                	sd	s0,16(sp)
    8001d97e:	e426                	sd	s1,8(sp)
    TEST_START();
    8001d980:	43a0d0ef          	jal	8002adba <printf>
    8001d984:	4529                	li	a0,10
    8001d986:	1220c0ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_HS);
    8001d98a:	450d                	li	a0,3
    8001d98c:	ce2e30ef          	jal	80000e6e <goto_priv>
    hspt_init();
    8001d990:	c51e20ef          	jal	800005e0 <hspt_init>
    hpt_init();
    8001d994:	fe9e20ef          	jal	8000097c <hpt_init>
    vspt_init();
    8001d998:	d8be20ef          	jal	80000722 <vspt_init>
    //执行load指令时，设置了mstatus.MXR=1，能从可读可执行页面读取，如果此时页表项pte.r=0&&pte.x=0

    uintptr_t addr = hs_page_base(VSV_GV);

    goto_priv(PRIV_M);
    8001d99c:	4511                	li	a0,4
    8001d99e:	cd0e30ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS, MSTATUS_MXR);
    8001d9a2:	000807b7          	lui	a5,0x80
    8001d9a6:	3007a073          	csrs	mstatus,a5
    goto_priv(PRIV_HS);
    8001d9aa:	450d                	li	a0,3
    8001d9ac:	cc2e30ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VS);
    8001d9b0:	4509                	li	a0,2
    8001d9b2:	bdce30ef          	jal	80000d8e <set_prev_priv>
    TEST_SETUP_EXCEPT();
    8001d9b6:	bbce30ef          	jal	80000d72 <test_setup_except_function>
    8001d9ba:	001007b7          	lui	a5,0x100
    8001d9be:	07f5                	addi	a5,a5,29 # 10001d <STACK_SIZE+0x1d>
    8001d9c0:	07b2                	slli	a5,a5,0xc
    8001d9c2:	6c07c7f3          	.insn	4, 0x6c07c7f3
    hlvd(addr);
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001d9c6:	08200593          	li	a1,130
    8001d9ca:	00017617          	auipc	a2,0x17
    8001d9ce:	a6660613          	addi	a2,a2,-1434 # 80034430 <__func__.0+0x7410>
    8001d9d2:	00010517          	auipc	a0,0x10
    8001d9d6:	94650513          	addi	a0,a0,-1722 # 8002d318 <__func__.0+0x2f8>
    8001d9da:	3e00d0ef          	jal	8002adba <printf>
    8001d9de:	00033797          	auipc	a5,0x33
    8001d9e2:	6337c783          	lbu	a5,1587(a5) # 80051011 <excpt+0x1>
    8001d9e6:	00033497          	auipc	s1,0x33
    8001d9ea:	62a48493          	addi	s1,s1,1578 # 80051010 <excpt>
    8001d9ee:	00010597          	auipc	a1,0x10
    8001d9f2:	90258593          	addi	a1,a1,-1790 # 8002d2f0 <__func__.0+0x2d0>
    8001d9f6:	cf89                	beqz	a5,8001da10 <mstatus_csr_tests_4+0xa8>
    8001d9f8:	6498                	ld	a4,8(s1)
    8001d9fa:	47b5                	li	a5,13
    8001d9fc:	00010597          	auipc	a1,0x10
    8001da00:	8e458593          	addi	a1,a1,-1820 # 8002d2e0 <__func__.0+0x2c0>
    8001da04:	00f70663          	beq	a4,a5,8001da10 <mstatus_csr_tests_4+0xa8>
    8001da08:	00010597          	auipc	a1,0x10
    8001da0c:	8e858593          	addi	a1,a1,-1816 # 8002d2f0 <__func__.0+0x2d0>
    8001da10:	00010517          	auipc	a0,0x10
    8001da14:	92050513          	addi	a0,a0,-1760 # 8002d330 <__func__.0+0x310>
    8001da18:	3a20d0ef          	jal	8002adba <printf>
    8001da1c:	00033797          	auipc	a5,0x33
    8001da20:	5f57c783          	lbu	a5,1525(a5) # 80051011 <excpt+0x1>
    8001da24:	c789                	beqz	a5,8001da2e <mstatus_csr_tests_4+0xc6>
    8001da26:	6498                	ld	a4,8(s1)
    8001da28:	47b5                	li	a5,13
    8001da2a:	00f70c63          	beq	a4,a5,8001da42 <mstatus_csr_tests_4+0xda>
    8001da2e:	00010517          	auipc	a0,0x10
    8001da32:	90a50513          	addi	a0,a0,-1782 # 8002d338 <__func__.0+0x318>
    8001da36:	3840d0ef          	jal	8002adba <printf>
    8001da3a:	02900513          	li	a0,41
    8001da3e:	06a0c0ef          	jal	80029aa8 <putchar>
    8001da42:	4529                	li	a0,10
    8001da44:	0640c0ef          	jal	80029aa8 <putchar>
    8001da48:	00033417          	auipc	s0,0x33
    8001da4c:	5c944403          	lbu	s0,1481(s0) # 80051011 <excpt+0x1>
    8001da50:	c409                	beqz	s0,8001da5a <mstatus_csr_tests_4+0xf2>
    8001da52:	6498                	ld	a4,8(s1)
    8001da54:	47b5                	li	a5,13
    8001da56:	02f70c63          	beq	a4,a5,8001da8e <mstatus_csr_tests_4+0x126>
        excpt.triggered == true &&
        excpt.cause == CAUSE_LPF
    );
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001da5a:	000807b7          	lui	a5,0x80
    8001da5e:	1007b073          	csrc	sstatus,a5
    TEST_ASSERT("s mode load when mstatus.mxr=1 and pte.r=0 and pte.x=0 leads to LPF",
    8001da62:	4401                	li	s0,0


TEST_END();
    8001da64:	00010597          	auipc	a1,0x10
    8001da68:	88c58593          	addi	a1,a1,-1908 # 8002d2f0 <__func__.0+0x2d0>
    8001da6c:	00010517          	auipc	a0,0x10
    8001da70:	92c50513          	addi	a0,a0,-1748 # 8002d398 <__func__.0+0x378>
    8001da74:	3460d0ef          	jal	8002adba <printf>
    8001da78:	4511                	li	a0,4
    8001da7a:	bf4e30ef          	jal	80000e6e <goto_priv>
    8001da7e:	d0de30ef          	jal	8000178a <reset_state>

}
    8001da82:	60e2                	ld	ra,24(sp)
    8001da84:	8522                	mv	a0,s0
    8001da86:	6442                	ld	s0,16(sp)
    8001da88:	64a2                	ld	s1,8(sp)
    8001da8a:	6105                	addi	sp,sp,32
    8001da8c:	8082                	ret
    CSRC(CSR_SSTATUS, SSTATUS_MXR);
    8001da8e:	000807b7          	lui	a5,0x80
    8001da92:	1007b073          	csrc	sstatus,a5
TEST_END();
    8001da96:	00010597          	auipc	a1,0x10
    8001da9a:	84a58593          	addi	a1,a1,-1974 # 8002d2e0 <__func__.0+0x2c0>
    8001da9e:	b7f9                	j	8001da6c <mstatus_csr_tests_4+0x104>

000000008001daa0 <mstatus_csr_tests_5>:

bool mstatus_csr_tests_5(){
    8001daa0:	1101                	addi	sp,sp,-32

    TEST_START();
    8001daa2:	0000f597          	auipc	a1,0xf
    8001daa6:	c6658593          	addi	a1,a1,-922 # 8002c708 <__func__.4>
    8001daaa:	00010517          	auipc	a0,0x10
    8001daae:	85650513          	addi	a0,a0,-1962 # 8002d300 <__func__.0+0x2e0>
bool mstatus_csr_tests_5(){
    8001dab2:	ec06                	sd	ra,24(sp)
    8001dab4:	e822                	sd	s0,16(sp)
    8001dab6:	e426                	sd	s1,8(sp)
    TEST_START();
    8001dab8:	3020d0ef          	jal	8002adba <printf>
    8001dabc:	4529                	li	a0,10
    8001dabe:	7eb0b0ef          	jal	80029aa8 <putchar>
    //mstatus.TSR=1时，执行sret指令
    TEST_SETUP_EXCEPT();
    8001dac2:	ab0e30ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dac6:	4511                	li	a0,4
    8001dac8:	ba6e30ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATUS,1ULL << 22);    //TSR位
    8001dacc:	004007b7          	lui	a5,0x400
    8001dad0:	3007a073          	csrs	mstatus,a5

    goto_priv(PRIV_HS);
    8001dad4:	450d                	li	a0,3
    8001dad6:	b98e30ef          	jal	80000e6e <goto_priv>
    set_prev_priv(PRIV_VU);
    8001dada:	4501                	li	a0,0
    8001dadc:	ab2e30ef          	jal	80000d8e <set_prev_priv>

    TEST_EXEC_SRET();
    8001dae0:	00000297          	auipc	t0,0x0
    8001dae4:	01028293          	addi	t0,t0,16 # 8001daf0 <mstatus_csr_tests_5+0x50>
    8001dae8:	14129073          	csrw	sepc,t0
    8001daec:	10200073          	sret

    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001daf0:	08200593          	li	a1,130
    8001daf4:	00013617          	auipc	a2,0x13
    8001daf8:	fe460613          	addi	a2,a2,-28 # 80030ad8 <__func__.0+0x3ab8>
    8001dafc:	00010517          	auipc	a0,0x10
    8001db00:	81c50513          	addi	a0,a0,-2020 # 8002d318 <__func__.0+0x2f8>
    8001db04:	2b60d0ef          	jal	8002adba <printf>
    8001db08:	00033797          	auipc	a5,0x33
    8001db0c:	5097c783          	lbu	a5,1289(a5) # 80051011 <excpt+0x1>
    8001db10:	00033497          	auipc	s1,0x33
    8001db14:	50048493          	addi	s1,s1,1280 # 80051010 <excpt>
    8001db18:	0000f597          	auipc	a1,0xf
    8001db1c:	7d858593          	addi	a1,a1,2008 # 8002d2f0 <__func__.0+0x2d0>
    8001db20:	cf89                	beqz	a5,8001db3a <mstatus_csr_tests_5+0x9a>
    8001db22:	6498                	ld	a4,8(s1)
    8001db24:	4789                	li	a5,2
    8001db26:	0000f597          	auipc	a1,0xf
    8001db2a:	7ba58593          	addi	a1,a1,1978 # 8002d2e0 <__func__.0+0x2c0>
    8001db2e:	00f70663          	beq	a4,a5,8001db3a <mstatus_csr_tests_5+0x9a>
    8001db32:	0000f597          	auipc	a1,0xf
    8001db36:	7be58593          	addi	a1,a1,1982 # 8002d2f0 <__func__.0+0x2d0>
    8001db3a:	0000f517          	auipc	a0,0xf
    8001db3e:	7f650513          	addi	a0,a0,2038 # 8002d330 <__func__.0+0x310>
    8001db42:	2780d0ef          	jal	8002adba <printf>
    8001db46:	00033797          	auipc	a5,0x33
    8001db4a:	4cb7c783          	lbu	a5,1227(a5) # 80051011 <excpt+0x1>
    8001db4e:	c789                	beqz	a5,8001db58 <mstatus_csr_tests_5+0xb8>
    8001db50:	6498                	ld	a4,8(s1)
    8001db52:	4789                	li	a5,2
    8001db54:	00f70c63          	beq	a4,a5,8001db6c <mstatus_csr_tests_5+0xcc>
    8001db58:	0000f517          	auipc	a0,0xf
    8001db5c:	7e050513          	addi	a0,a0,2016 # 8002d338 <__func__.0+0x318>
    8001db60:	25a0d0ef          	jal	8002adba <printf>
    8001db64:	02900513          	li	a0,41
    8001db68:	7410b0ef          	jal	80029aa8 <putchar>
    8001db6c:	4529                	li	a0,10
    8001db6e:	73b0b0ef          	jal	80029aa8 <putchar>
    8001db72:	00033417          	auipc	s0,0x33
    8001db76:	49f44403          	lbu	s0,1183(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    8001db7a:	0000f597          	auipc	a1,0xf
    8001db7e:	77658593          	addi	a1,a1,1910 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001db82:	cc11                	beqz	s0,8001db9e <mstatus_csr_tests_5+0xfe>
    8001db84:	6498                	ld	a4,8(s1)
    8001db86:	4789                	li	a5,2
    TEST_END();
    8001db88:	0000f597          	auipc	a1,0xf
    8001db8c:	75858593          	addi	a1,a1,1880 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode sret cause to ili when mstatus.TSR=1",
    8001db90:	00f70763          	beq	a4,a5,8001db9e <mstatus_csr_tests_5+0xfe>
    8001db94:	4401                	li	s0,0
    TEST_END();
    8001db96:	0000f597          	auipc	a1,0xf
    8001db9a:	75a58593          	addi	a1,a1,1882 # 8002d2f0 <__func__.0+0x2d0>
    8001db9e:	0000f517          	auipc	a0,0xf
    8001dba2:	7fa50513          	addi	a0,a0,2042 # 8002d398 <__func__.0+0x378>
    8001dba6:	2140d0ef          	jal	8002adba <printf>
    8001dbaa:	4511                	li	a0,4
    8001dbac:	ac2e30ef          	jal	80000e6e <goto_priv>
    8001dbb0:	bdbe30ef          	jal	8000178a <reset_state>

}
    8001dbb4:	60e2                	ld	ra,24(sp)
    8001dbb6:	8522                	mv	a0,s0
    8001dbb8:	6442                	ld	s0,16(sp)
    8001dbba:	64a2                	ld	s1,8(sp)
    8001dbbc:	6105                	addi	sp,sp,32
    8001dbbe:	8082                	ret

000000008001dbc0 <hedeleg_csr_tests_1>:

bool hedeleg_csr_tests_1(){
    8001dbc0:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dbc2:	0000f597          	auipc	a1,0xf
    8001dbc6:	b5e58593          	addi	a1,a1,-1186 # 8002c720 <__func__.3>
    8001dbca:	0000f517          	auipc	a0,0xf
    8001dbce:	73650513          	addi	a0,a0,1846 # 8002d300 <__func__.0+0x2e0>
bool hedeleg_csr_tests_1(){
    8001dbd2:	e406                	sd	ra,8(sp)
    8001dbd4:	e022                	sd	s0,0(sp)
    TEST_START();
    8001dbd6:	1e40d0ef          	jal	8002adba <printf>
    8001dbda:	4529                	li	a0,10
    8001dbdc:	6cd0b0ef          	jal	80029aa8 <putchar>
    TEST_SETUP_EXCEPT();
    8001dbe0:	992e30ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dbe4:	4511                	li	a0,4
    8001dbe6:	a88e30ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_HEDELEG, (uint64_t)-1);
    8001dbea:	57fd                	li	a5,-1
    8001dbec:	60279073          	csrw	hedeleg,a5
    printf("%llx\n",CSRR(CSR_HEDELEG));
    8001dbf0:	602025f3          	csrr	a1,hedeleg
    8001dbf4:	00016517          	auipc	a0,0x16
    8001dbf8:	d3450513          	addi	a0,a0,-716 # 80033928 <__func__.0+0x6908>
    8001dbfc:	1be0d0ef          	jal	8002adba <printf>

    TEST_ASSERT("hedeleg right",
    8001dc00:	00017617          	auipc	a2,0x17
    8001dc04:	87860613          	addi	a2,a2,-1928 # 80034478 <__func__.0+0x7458>
    8001dc08:	08200593          	li	a1,130
    8001dc0c:	0000f517          	auipc	a0,0xf
    8001dc10:	70c50513          	addi	a0,a0,1804 # 8002d318 <__func__.0+0x2f8>
    8001dc14:	1a60d0ef          	jal	8002adba <printf>
    8001dc18:	60202773          	csrr	a4,hedeleg
    8001dc1c:	67ad                	lui	a5,0xb
    8001dc1e:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dc22:	0000f597          	auipc	a1,0xf
    8001dc26:	6be58593          	addi	a1,a1,1726 # 8002d2e0 <__func__.0+0x2c0>
    8001dc2a:	00f70663          	beq	a4,a5,8001dc36 <hedeleg_csr_tests_1+0x76>
    8001dc2e:	0000f597          	auipc	a1,0xf
    8001dc32:	6c258593          	addi	a1,a1,1730 # 8002d2f0 <__func__.0+0x2d0>
    8001dc36:	0000f517          	auipc	a0,0xf
    8001dc3a:	6fa50513          	addi	a0,a0,1786 # 8002d330 <__func__.0+0x310>
    8001dc3e:	17c0d0ef          	jal	8002adba <printf>
    8001dc42:	60202773          	csrr	a4,hedeleg
    8001dc46:	67ad                	lui	a5,0xb
    8001dc48:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dc4c:	00f70c63          	beq	a4,a5,8001dc64 <hedeleg_csr_tests_1+0xa4>
    8001dc50:	0000f517          	auipc	a0,0xf
    8001dc54:	6e850513          	addi	a0,a0,1768 # 8002d338 <__func__.0+0x318>
    8001dc58:	1620d0ef          	jal	8002adba <printf>
    8001dc5c:	02900513          	li	a0,41
    8001dc60:	6490b0ef          	jal	80029aa8 <putchar>
    8001dc64:	4529                	li	a0,10
    8001dc66:	6430b0ef          	jal	80029aa8 <putchar>
    8001dc6a:	60202773          	csrr	a4,hedeleg
    8001dc6e:	67ad                	lui	a5,0xb
    8001dc70:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dc74:	02f70763          	beq	a4,a5,8001dca2 <hedeleg_csr_tests_1+0xe2>
    8001dc78:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001dc7a:	0000f597          	auipc	a1,0xf
    8001dc7e:	67658593          	addi	a1,a1,1654 # 8002d2f0 <__func__.0+0x2d0>
    8001dc82:	0000f517          	auipc	a0,0xf
    8001dc86:	71650513          	addi	a0,a0,1814 # 8002d398 <__func__.0+0x378>
    8001dc8a:	1300d0ef          	jal	8002adba <printf>
    8001dc8e:	4511                	li	a0,4
    8001dc90:	9dee30ef          	jal	80000e6e <goto_priv>
    8001dc94:	af7e30ef          	jal	8000178a <reset_state>

}
    8001dc98:	60a2                	ld	ra,8(sp)
    8001dc9a:	8522                	mv	a0,s0
    8001dc9c:	6402                	ld	s0,0(sp)
    8001dc9e:	0141                	addi	sp,sp,16
    8001dca0:	8082                	ret
    TEST_ASSERT("hedeleg right",
    8001dca2:	4405                	li	s0,1
    TEST_END();
    8001dca4:	0000f597          	auipc	a1,0xf
    8001dca8:	63c58593          	addi	a1,a1,1596 # 8002d2e0 <__func__.0+0x2c0>
    8001dcac:	bfd9                	j	8001dc82 <hedeleg_csr_tests_1+0xc2>

000000008001dcae <mhpmevent_csr_tests_1>:

bool mhpmevent_csr_tests_1(){
    8001dcae:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dcb0:	0000f597          	auipc	a1,0xf
    8001dcb4:	a8858593          	addi	a1,a1,-1400 # 8002c738 <__func__.2>
    8001dcb8:	0000f517          	auipc	a0,0xf
    8001dcbc:	64850513          	addi	a0,a0,1608 # 8002d300 <__func__.0+0x2e0>
bool mhpmevent_csr_tests_1(){
    8001dcc0:	e406                	sd	ra,8(sp)
    TEST_START();
    8001dcc2:	0f80d0ef          	jal	8002adba <printf>
    8001dcc6:	4529                	li	a0,10
    8001dcc8:	5e10b0ef          	jal	80029aa8 <putchar>
    TEST_SETUP_EXCEPT();
    8001dccc:	8a6e30ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dcd0:	4511                	li	a0,4
    8001dcd2:	99ce30ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_MHPMEVENT3, (uint64_t)-1);
    8001dcd6:	57fd                	li	a5,-1
    8001dcd8:	32379073          	csrw	mhpmevent3,a5
    printf("%llx\n",CSRR(CSR_MHPMEVENT3));
    8001dcdc:	323025f3          	csrr	a1,mhpmevent3
    8001dce0:	00016517          	auipc	a0,0x16
    8001dce4:	c4850513          	addi	a0,a0,-952 # 80033928 <__func__.0+0x6908>
    8001dce8:	0d20d0ef          	jal	8002adba <printf>

    TEST_END();
    8001dcec:	0000f597          	auipc	a1,0xf
    8001dcf0:	5f458593          	addi	a1,a1,1524 # 8002d2e0 <__func__.0+0x2c0>
    8001dcf4:	0000f517          	auipc	a0,0xf
    8001dcf8:	6a450513          	addi	a0,a0,1700 # 8002d398 <__func__.0+0x378>
    8001dcfc:	0be0d0ef          	jal	8002adba <printf>
    8001dd00:	4511                	li	a0,4
    8001dd02:	96ce30ef          	jal	80000e6e <goto_priv>
    8001dd06:	a85e30ef          	jal	8000178a <reset_state>

}
    8001dd0a:	60a2                	ld	ra,8(sp)
    8001dd0c:	4505                	li	a0,1
    8001dd0e:	0141                	addi	sp,sp,16
    8001dd10:	8082                	ret

000000008001dd12 <tselect_csr_tests_1>:

bool tselect_csr_tests_1(){
    8001dd12:	1141                	addi	sp,sp,-16

    TEST_START();
    8001dd14:	0000f597          	auipc	a1,0xf
    8001dd18:	a3c58593          	addi	a1,a1,-1476 # 8002c750 <__func__.1>
    8001dd1c:	0000f517          	auipc	a0,0xf
    8001dd20:	5e450513          	addi	a0,a0,1508 # 8002d300 <__func__.0+0x2e0>
bool tselect_csr_tests_1(){
    8001dd24:	e406                	sd	ra,8(sp)
    8001dd26:	e022                	sd	s0,0(sp)
    TEST_START();
    8001dd28:	0920d0ef          	jal	8002adba <printf>
    8001dd2c:	4529                	li	a0,10
    8001dd2e:	57b0b0ef          	jal	80029aa8 <putchar>
    TEST_SETUP_EXCEPT();
    8001dd32:	840e30ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001dd36:	4511                	li	a0,4
    8001dd38:	936e30ef          	jal	80000e6e <goto_priv>
    CSRW(CSR_TSELECT, (uint64_t)-1);
    8001dd3c:	57fd                	li	a5,-1
    8001dd3e:	7a079073          	csrw	tselect,a5
    printf("%llx\n",CSRR(CSR_TSELECT));
    8001dd42:	7a0025f3          	csrr	a1,tselect
    8001dd46:	00016517          	auipc	a0,0x16
    8001dd4a:	be250513          	addi	a0,a0,-1054 # 80033928 <__func__.0+0x6908>
    8001dd4e:	06c0d0ef          	jal	8002adba <printf>

    TEST_ASSERT("tselect right",
    8001dd52:	00016617          	auipc	a2,0x16
    8001dd56:	73660613          	addi	a2,a2,1846 # 80034488 <__func__.0+0x7468>
    8001dd5a:	08200593          	li	a1,130
    8001dd5e:	0000f517          	auipc	a0,0xf
    8001dd62:	5ba50513          	addi	a0,a0,1466 # 8002d318 <__func__.0+0x2f8>
    8001dd66:	0540d0ef          	jal	8002adba <printf>
    8001dd6a:	60202773          	csrr	a4,hedeleg
    8001dd6e:	67ad                	lui	a5,0xb
    8001dd70:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dd74:	0000f597          	auipc	a1,0xf
    8001dd78:	56c58593          	addi	a1,a1,1388 # 8002d2e0 <__func__.0+0x2c0>
    8001dd7c:	00f70663          	beq	a4,a5,8001dd88 <tselect_csr_tests_1+0x76>
    8001dd80:	0000f597          	auipc	a1,0xf
    8001dd84:	57058593          	addi	a1,a1,1392 # 8002d2f0 <__func__.0+0x2d0>
    8001dd88:	0000f517          	auipc	a0,0xf
    8001dd8c:	5a850513          	addi	a0,a0,1448 # 8002d330 <__func__.0+0x310>
    8001dd90:	02a0d0ef          	jal	8002adba <printf>
    8001dd94:	60202773          	csrr	a4,hedeleg
    8001dd98:	67ad                	lui	a5,0xb
    8001dd9a:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001dd9e:	00f70c63          	beq	a4,a5,8001ddb6 <tselect_csr_tests_1+0xa4>
    8001dda2:	0000f517          	auipc	a0,0xf
    8001dda6:	59650513          	addi	a0,a0,1430 # 8002d338 <__func__.0+0x318>
    8001ddaa:	0100d0ef          	jal	8002adba <printf>
    8001ddae:	02900513          	li	a0,41
    8001ddb2:	4f70b0ef          	jal	80029aa8 <putchar>
    8001ddb6:	4529                	li	a0,10
    8001ddb8:	4f10b0ef          	jal	80029aa8 <putchar>
    8001ddbc:	60202773          	csrr	a4,hedeleg
    8001ddc0:	67ad                	lui	a5,0xb
    8001ddc2:	1ff78793          	addi	a5,a5,511 # b1ff <_test_table_size+0xb1fe>
    8001ddc6:	02f70763          	beq	a4,a5,8001ddf4 <tselect_csr_tests_1+0xe2>
    8001ddca:	4401                	li	s0,0
        CSRR(CSR_HEDELEG) == 0xb1ff
    ); 

    TEST_END();
    8001ddcc:	0000f597          	auipc	a1,0xf
    8001ddd0:	52458593          	addi	a1,a1,1316 # 8002d2f0 <__func__.0+0x2d0>
    8001ddd4:	0000f517          	auipc	a0,0xf
    8001ddd8:	5c450513          	addi	a0,a0,1476 # 8002d398 <__func__.0+0x378>
    8001dddc:	7df0c0ef          	jal	8002adba <printf>
    8001dde0:	4511                	li	a0,4
    8001dde2:	88ce30ef          	jal	80000e6e <goto_priv>
    8001dde6:	9a5e30ef          	jal	8000178a <reset_state>

}
    8001ddea:	60a2                	ld	ra,8(sp)
    8001ddec:	8522                	mv	a0,s0
    8001ddee:	6402                	ld	s0,0(sp)
    8001ddf0:	0141                	addi	sp,sp,16
    8001ddf2:	8082                	ret
    TEST_ASSERT("tselect right",
    8001ddf4:	4405                	li	s0,1
    TEST_END();
    8001ddf6:	0000f597          	auipc	a1,0xf
    8001ddfa:	4ea58593          	addi	a1,a1,1258 # 8002d2e0 <__func__.0+0x2c0>
    8001ddfe:	bfd9                	j	8001ddd4 <tselect_csr_tests_1+0xc2>

000000008001de00 <random_instruction_tests>:


bool random_instruction_tests(){
    8001de00:	1141                	addi	sp,sp,-16

    TEST_START();
    8001de02:	0000f597          	auipc	a1,0xf
    8001de06:	96658593          	addi	a1,a1,-1690 # 8002c768 <__func__.0>
    8001de0a:	0000f517          	auipc	a0,0xf
    8001de0e:	4f650513          	addi	a0,a0,1270 # 8002d300 <__func__.0+0x2e0>
bool random_instruction_tests(){
    8001de12:	e406                	sd	ra,8(sp)
    TEST_START();
    8001de14:	7a70c0ef          	jal	8002adba <printf>
    8001de18:	4529                	li	a0,10
    8001de1a:	48f0b0ef          	jal	80029aa8 <putchar>
    TEST_SETUP_EXCEPT();
    8001de1e:	f55e20ef          	jal	80000d72 <test_setup_except_function>
    goto_priv(PRIV_M);
    8001de22:	4511                	li	a0,4
    8001de24:	84ae30ef          	jal	80000e6e <goto_priv>

    for (int i = 0; i < 5; i++)
    {
        random_m_instruction();
    8001de28:	a49e30ef          	jal	80001870 <random_m_instruction>
    8001de2c:	a45e30ef          	jal	80001870 <random_m_instruction>
    8001de30:	a41e30ef          	jal	80001870 <random_m_instruction>
    8001de34:	a3de30ef          	jal	80001870 <random_m_instruction>
    8001de38:	a39e30ef          	jal	80001870 <random_m_instruction>
    }
    

    TEST_END();
    8001de3c:	0000f597          	auipc	a1,0xf
    8001de40:	4a458593          	addi	a1,a1,1188 # 8002d2e0 <__func__.0+0x2c0>
    8001de44:	0000f517          	auipc	a0,0xf
    8001de48:	55450513          	addi	a0,a0,1364 # 8002d398 <__func__.0+0x378>
    8001de4c:	76f0c0ef          	jal	8002adba <printf>
    8001de50:	4511                	li	a0,4
    8001de52:	81ce30ef          	jal	80000e6e <goto_priv>
    8001de56:	935e30ef          	jal	8000178a <reset_state>

    8001de5a:	60a2                	ld	ra,8(sp)
    8001de5c:	4505                	li	a0,1
    8001de5e:	0141                	addi	sp,sp,16
    8001de60:	8082                	ret

000000008001de62 <time_test_1>:
#include <rvh_test.h>
#include <csrs.h> 

bool time_test_1() {
    8001de62:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001de64:	0000f597          	auipc	a1,0xf
    8001de68:	92458593          	addi	a1,a1,-1756 # 8002c788 <__func__.50>
    8001de6c:	0000f517          	auipc	a0,0xf
    8001de70:	49450513          	addi	a0,a0,1172 # 8002d300 <__func__.0+0x2e0>
bool time_test_1() {
    8001de74:	ec06                	sd	ra,24(sp)
    8001de76:	e822                	sd	s0,16(sp)
    8001de78:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001de7a:	7410c0ef          	jal	8002adba <printf>
    8001de7e:	4529                	li	a0,10
    8001de80:	4290b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001de84:	4511                	li	a0,4
    8001de86:	fe9e20ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001de8a:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8001de8e:	4509                	li	a0,2
    8001de90:	fdfe20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001de94:	edfe20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001de98:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001de9c:	08200593          	li	a1,130
    8001dea0:	00016617          	auipc	a2,0x16
    8001dea4:	5f860613          	addi	a2,a2,1528 # 80034498 <__func__.0+0x7478>
    8001dea8:	0000f517          	auipc	a0,0xf
    8001deac:	47050513          	addi	a0,a0,1136 # 8002d318 <__func__.0+0x2f8>
    8001deb0:	70b0c0ef          	jal	8002adba <printf>
    8001deb4:	00033797          	auipc	a5,0x33
    8001deb8:	15d7c783          	lbu	a5,349(a5) # 80051011 <excpt+0x1>
    8001debc:	00033497          	auipc	s1,0x33
    8001dec0:	15448493          	addi	s1,s1,340 # 80051010 <excpt>
    8001dec4:	0000f597          	auipc	a1,0xf
    8001dec8:	42c58593          	addi	a1,a1,1068 # 8002d2f0 <__func__.0+0x2d0>
    8001decc:	cf89                	beqz	a5,8001dee6 <time_test_1+0x84>
    8001dece:	6498                	ld	a4,8(s1)
    8001ded0:	4789                	li	a5,2
    8001ded2:	0000f597          	auipc	a1,0xf
    8001ded6:	40e58593          	addi	a1,a1,1038 # 8002d2e0 <__func__.0+0x2c0>
    8001deda:	00f70663          	beq	a4,a5,8001dee6 <time_test_1+0x84>
    8001dede:	0000f597          	auipc	a1,0xf
    8001dee2:	41258593          	addi	a1,a1,1042 # 8002d2f0 <__func__.0+0x2d0>
    8001dee6:	0000f517          	auipc	a0,0xf
    8001deea:	44a50513          	addi	a0,a0,1098 # 8002d330 <__func__.0+0x310>
    8001deee:	6cd0c0ef          	jal	8002adba <printf>
    8001def2:	00033797          	auipc	a5,0x33
    8001def6:	11f7c783          	lbu	a5,287(a5) # 80051011 <excpt+0x1>
    8001defa:	c789                	beqz	a5,8001df04 <time_test_1+0xa2>
    8001defc:	6498                	ld	a4,8(s1)
    8001defe:	4789                	li	a5,2
    8001df00:	00f70c63          	beq	a4,a5,8001df18 <time_test_1+0xb6>
    8001df04:	0000f517          	auipc	a0,0xf
    8001df08:	43450513          	addi	a0,a0,1076 # 8002d338 <__func__.0+0x318>
    8001df0c:	6af0c0ef          	jal	8002adba <printf>
    8001df10:	02900513          	li	a0,41
    8001df14:	3950b0ef          	jal	80029aa8 <putchar>
    8001df18:	4529                	li	a0,10
    8001df1a:	38f0b0ef          	jal	80029aa8 <putchar>
    8001df1e:	00033797          	auipc	a5,0x33
    8001df22:	0f37c783          	lbu	a5,243(a5) # 80051011 <excpt+0x1>
    8001df26:	4401                	li	s0,0
    8001df28:	c789                	beqz	a5,8001df32 <time_test_1+0xd0>
    8001df2a:	6480                	ld	s0,8(s1)
    8001df2c:	1479                	addi	s0,s0,-2
    8001df2e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001df32:	450d                	li	a0,3
    8001df34:	f3be20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001df38:	e3be20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001df3c:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001df40:	08200593          	li	a1,130
    8001df44:	00016617          	auipc	a2,0x16
    8001df48:	5a460613          	addi	a2,a2,1444 # 800344e8 <__func__.0+0x74c8>
    8001df4c:	0000f517          	auipc	a0,0xf
    8001df50:	3cc50513          	addi	a0,a0,972 # 8002d318 <__func__.0+0x2f8>
    8001df54:	6670c0ef          	jal	8002adba <printf>
    8001df58:	00033797          	auipc	a5,0x33
    8001df5c:	0b97c783          	lbu	a5,185(a5) # 80051011 <excpt+0x1>
    8001df60:	0000f597          	auipc	a1,0xf
    8001df64:	39058593          	addi	a1,a1,912 # 8002d2f0 <__func__.0+0x2d0>
    8001df68:	cf89                	beqz	a5,8001df82 <time_test_1+0x120>
    8001df6a:	6498                	ld	a4,8(s1)
    8001df6c:	4789                	li	a5,2
    8001df6e:	0000f597          	auipc	a1,0xf
    8001df72:	37258593          	addi	a1,a1,882 # 8002d2e0 <__func__.0+0x2c0>
    8001df76:	00f70663          	beq	a4,a5,8001df82 <time_test_1+0x120>
    8001df7a:	0000f597          	auipc	a1,0xf
    8001df7e:	37658593          	addi	a1,a1,886 # 8002d2f0 <__func__.0+0x2d0>
    8001df82:	0000f517          	auipc	a0,0xf
    8001df86:	3ae50513          	addi	a0,a0,942 # 8002d330 <__func__.0+0x310>
    8001df8a:	6310c0ef          	jal	8002adba <printf>
    8001df8e:	00033797          	auipc	a5,0x33
    8001df92:	0837c783          	lbu	a5,131(a5) # 80051011 <excpt+0x1>
    8001df96:	c789                	beqz	a5,8001dfa0 <time_test_1+0x13e>
    8001df98:	6498                	ld	a4,8(s1)
    8001df9a:	4789                	li	a5,2
    8001df9c:	00f70c63          	beq	a4,a5,8001dfb4 <time_test_1+0x152>
    8001dfa0:	0000f517          	auipc	a0,0xf
    8001dfa4:	39850513          	addi	a0,a0,920 # 8002d338 <__func__.0+0x318>
    8001dfa8:	6130c0ef          	jal	8002adba <printf>
    8001dfac:	02900513          	li	a0,41
    8001dfb0:	2f90b0ef          	jal	80029aa8 <putchar>
    8001dfb4:	4529                	li	a0,10
    8001dfb6:	2f30b0ef          	jal	80029aa8 <putchar>
    8001dfba:	c801                	beqz	s0,8001dfca <time_test_1+0x168>
    8001dfbc:	00033797          	auipc	a5,0x33
    8001dfc0:	0557c783          	lbu	a5,85(a5) # 80051011 <excpt+0x1>
    8001dfc4:	4401                	li	s0,0
    8001dfc6:	16079f63          	bnez	a5,8001e144 <time_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001dfca:	4501                	li	a0,0
    8001dfcc:	ea3e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001dfd0:	da3e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001dfd4:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001dfd8:	08200593          	li	a1,130
    8001dfdc:	00016617          	auipc	a2,0x16
    8001dfe0:	55c60613          	addi	a2,a2,1372 # 80034538 <__func__.0+0x7518>
    8001dfe4:	0000f517          	auipc	a0,0xf
    8001dfe8:	33450513          	addi	a0,a0,820 # 8002d318 <__func__.0+0x2f8>
    8001dfec:	5cf0c0ef          	jal	8002adba <printf>
    8001dff0:	00033797          	auipc	a5,0x33
    8001dff4:	0217c783          	lbu	a5,33(a5) # 80051011 <excpt+0x1>
    8001dff8:	0000f597          	auipc	a1,0xf
    8001dffc:	2f858593          	addi	a1,a1,760 # 8002d2f0 <__func__.0+0x2d0>
    8001e000:	cf89                	beqz	a5,8001e01a <time_test_1+0x1b8>
    8001e002:	6498                	ld	a4,8(s1)
    8001e004:	4789                	li	a5,2
    8001e006:	0000f597          	auipc	a1,0xf
    8001e00a:	2da58593          	addi	a1,a1,730 # 8002d2e0 <__func__.0+0x2c0>
    8001e00e:	00f70663          	beq	a4,a5,8001e01a <time_test_1+0x1b8>
    8001e012:	0000f597          	auipc	a1,0xf
    8001e016:	2de58593          	addi	a1,a1,734 # 8002d2f0 <__func__.0+0x2d0>
    8001e01a:	0000f517          	auipc	a0,0xf
    8001e01e:	31650513          	addi	a0,a0,790 # 8002d330 <__func__.0+0x310>
    8001e022:	5990c0ef          	jal	8002adba <printf>
    8001e026:	00033797          	auipc	a5,0x33
    8001e02a:	feb7c783          	lbu	a5,-21(a5) # 80051011 <excpt+0x1>
    8001e02e:	c789                	beqz	a5,8001e038 <time_test_1+0x1d6>
    8001e030:	6498                	ld	a4,8(s1)
    8001e032:	4789                	li	a5,2
    8001e034:	00f70c63          	beq	a4,a5,8001e04c <time_test_1+0x1ea>
    8001e038:	0000f517          	auipc	a0,0xf
    8001e03c:	30050513          	addi	a0,a0,768 # 8002d338 <__func__.0+0x318>
    8001e040:	57b0c0ef          	jal	8002adba <printf>
    8001e044:	02900513          	li	a0,41
    8001e048:	2610b0ef          	jal	80029aa8 <putchar>
    8001e04c:	4529                	li	a0,10
    8001e04e:	25b0b0ef          	jal	80029aa8 <putchar>
    8001e052:	c801                	beqz	s0,8001e062 <time_test_1+0x200>
    8001e054:	00033797          	auipc	a5,0x33
    8001e058:	fbd7c783          	lbu	a5,-67(a5) # 80051011 <excpt+0x1>
    8001e05c:	4401                	li	s0,0
    8001e05e:	0c079e63          	bnez	a5,8001e13a <time_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001e062:	4505                	li	a0,1
    8001e064:	e0be20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e068:	d0be20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e06c:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e070:	08200593          	li	a1,130
    8001e074:	00016617          	auipc	a2,0x16
    8001e078:	51460613          	addi	a2,a2,1300 # 80034588 <__func__.0+0x7568>
    8001e07c:	0000f517          	auipc	a0,0xf
    8001e080:	29c50513          	addi	a0,a0,668 # 8002d318 <__func__.0+0x2f8>
    8001e084:	5370c0ef          	jal	8002adba <printf>
    8001e088:	00033797          	auipc	a5,0x33
    8001e08c:	f897c783          	lbu	a5,-119(a5) # 80051011 <excpt+0x1>
    8001e090:	0000f597          	auipc	a1,0xf
    8001e094:	26058593          	addi	a1,a1,608 # 8002d2f0 <__func__.0+0x2d0>
    8001e098:	cf89                	beqz	a5,8001e0b2 <time_test_1+0x250>
    8001e09a:	6498                	ld	a4,8(s1)
    8001e09c:	4789                	li	a5,2
    8001e09e:	0000f597          	auipc	a1,0xf
    8001e0a2:	24258593          	addi	a1,a1,578 # 8002d2e0 <__func__.0+0x2c0>
    8001e0a6:	00f70663          	beq	a4,a5,8001e0b2 <time_test_1+0x250>
    8001e0aa:	0000f597          	auipc	a1,0xf
    8001e0ae:	24658593          	addi	a1,a1,582 # 8002d2f0 <__func__.0+0x2d0>
    8001e0b2:	0000f517          	auipc	a0,0xf
    8001e0b6:	27e50513          	addi	a0,a0,638 # 8002d330 <__func__.0+0x310>
    8001e0ba:	5010c0ef          	jal	8002adba <printf>
    8001e0be:	00033797          	auipc	a5,0x33
    8001e0c2:	f537c783          	lbu	a5,-173(a5) # 80051011 <excpt+0x1>
    8001e0c6:	c789                	beqz	a5,8001e0d0 <time_test_1+0x26e>
    8001e0c8:	6498                	ld	a4,8(s1)
    8001e0ca:	4789                	li	a5,2
    8001e0cc:	00f70c63          	beq	a4,a5,8001e0e4 <time_test_1+0x282>
    8001e0d0:	0000f517          	auipc	a0,0xf
    8001e0d4:	26850513          	addi	a0,a0,616 # 8002d338 <__func__.0+0x318>
    8001e0d8:	4e30c0ef          	jal	8002adba <printf>
    8001e0dc:	02900513          	li	a0,41
    8001e0e0:	1c90b0ef          	jal	80029aa8 <putchar>
    8001e0e4:	4529                	li	a0,10
    8001e0e6:	1c30b0ef          	jal	80029aa8 <putchar>
    8001e0ea:	c015                	beqz	s0,8001e10e <time_test_1+0x2ac>
    8001e0ec:	00033417          	auipc	s0,0x33
    8001e0f0:	f2544403          	lbu	s0,-219(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e0f4:	0000f597          	auipc	a1,0xf
    8001e0f8:	1fc58593          	addi	a1,a1,508 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e0fc:	cc11                	beqz	s0,8001e118 <time_test_1+0x2b6>
    8001e0fe:	6498                	ld	a4,8(s1)
    8001e100:	4789                	li	a5,2
    TEST_END(); 
    8001e102:	0000f597          	auipc	a1,0xf
    8001e106:	1de58593          	addi	a1,a1,478 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e10a:	00f70763          	beq	a4,a5,8001e118 <time_test_1+0x2b6>
    8001e10e:	4401                	li	s0,0
    TEST_END(); 
    8001e110:	0000f597          	auipc	a1,0xf
    8001e114:	1e058593          	addi	a1,a1,480 # 8002d2f0 <__func__.0+0x2d0>
    8001e118:	0000f517          	auipc	a0,0xf
    8001e11c:	28050513          	addi	a0,a0,640 # 8002d398 <__func__.0+0x378>
    8001e120:	49b0c0ef          	jal	8002adba <printf>
    8001e124:	4511                	li	a0,4
    8001e126:	d49e20ef          	jal	80000e6e <goto_priv>
    8001e12a:	e60e30ef          	jal	8000178a <reset_state>
}
    8001e12e:	60e2                	ld	ra,24(sp)
    8001e130:	8522                	mv	a0,s0
    8001e132:	6442                	ld	s0,16(sp)
    8001e134:	64a2                	ld	s1,8(sp)
    8001e136:	6105                	addi	sp,sp,32
    8001e138:	8082                	ret
    TEST_ASSERT("vu access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e13a:	6480                	ld	s0,8(s1)
    8001e13c:	1479                	addi	s0,s0,-2
    8001e13e:	00143413          	seqz	s0,s0
    8001e142:	b705                	j	8001e062 <time_test_1+0x200>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    8001e144:	6480                	ld	s0,8(s1)
    8001e146:	1479                	addi	s0,s0,-2
    8001e148:	00143413          	seqz	s0,s0
    8001e14c:	bdbd                	j	8001dfca <time_test_1+0x168>

000000008001e14e <time_test_2>:

bool time_test_2() {
    8001e14e:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e150:	0000e597          	auipc	a1,0xe
    8001e154:	64858593          	addi	a1,a1,1608 # 8002c798 <__func__.49>
    8001e158:	0000f517          	auipc	a0,0xf
    8001e15c:	1a850513          	addi	a0,a0,424 # 8002d300 <__func__.0+0x2e0>
bool time_test_2() {
    8001e160:	e406                	sd	ra,8(sp)
    8001e162:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e164:	4570c0ef          	jal	8002adba <printf>
    8001e168:	4529                	li	a0,10
    8001e16a:	13f0b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e16e:	4511                	li	a0,4
    8001e170:	cffe20ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM);
    8001e174:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    8001e178:	450d                	li	a0,3
    8001e17a:	cf5e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e17e:	bf5e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e182:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e186:	08200593          	li	a1,130
    8001e18a:	00016617          	auipc	a2,0x16
    8001e18e:	44e60613          	addi	a2,a2,1102 # 800345d8 <__func__.0+0x75b8>
    8001e192:	0000f517          	auipc	a0,0xf
    8001e196:	18650513          	addi	a0,a0,390 # 8002d318 <__func__.0+0x2f8>
    8001e19a:	4210c0ef          	jal	8002adba <printf>
    8001e19e:	00033797          	auipc	a5,0x33
    8001e1a2:	e737c783          	lbu	a5,-397(a5) # 80051011 <excpt+0x1>
    8001e1a6:	0000f597          	auipc	a1,0xf
    8001e1aa:	13a58593          	addi	a1,a1,314 # 8002d2e0 <__func__.0+0x2c0>
    8001e1ae:	c789                	beqz	a5,8001e1b8 <time_test_2+0x6a>
    8001e1b0:	0000f597          	auipc	a1,0xf
    8001e1b4:	14058593          	addi	a1,a1,320 # 8002d2f0 <__func__.0+0x2d0>
    8001e1b8:	0000f517          	auipc	a0,0xf
    8001e1bc:	17850513          	addi	a0,a0,376 # 8002d330 <__func__.0+0x310>
    8001e1c0:	3fb0c0ef          	jal	8002adba <printf>
    8001e1c4:	00033797          	auipc	a5,0x33
    8001e1c8:	e4d7c783          	lbu	a5,-435(a5) # 80051011 <excpt+0x1>
    8001e1cc:	e7a1                	bnez	a5,8001e214 <time_test_2+0xc6>
    8001e1ce:	4529                	li	a0,10
    8001e1d0:	0d90b0ef          	jal	80029aa8 <putchar>
    8001e1d4:	00033797          	auipc	a5,0x33
    8001e1d8:	e3d7c783          	lbu	a5,-451(a5) # 80051011 <excpt+0x1>
    8001e1dc:	e795                	bnez	a5,8001e208 <time_test_2+0xba>
    8001e1de:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001e1e0:	0000f597          	auipc	a1,0xf
    8001e1e4:	10058593          	addi	a1,a1,256 # 8002d2e0 <__func__.0+0x2c0>
    8001e1e8:	0000f517          	auipc	a0,0xf
    8001e1ec:	1b050513          	addi	a0,a0,432 # 8002d398 <__func__.0+0x378>
    8001e1f0:	3cb0c0ef          	jal	8002adba <printf>
    8001e1f4:	4511                	li	a0,4
    8001e1f6:	c79e20ef          	jal	80000e6e <goto_priv>
    8001e1fa:	d90e30ef          	jal	8000178a <reset_state>
}
    8001e1fe:	60a2                	ld	ra,8(sp)
    8001e200:	8522                	mv	a0,s0
    8001e202:	6402                	ld	s0,0(sp)
    8001e204:	0141                	addi	sp,sp,16
    8001e206:	8082                	ret
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e208:	4401                	li	s0,0
    TEST_END(); 
    8001e20a:	0000f597          	auipc	a1,0xf
    8001e20e:	0e658593          	addi	a1,a1,230 # 8002d2f0 <__func__.0+0x2d0>
    8001e212:	bfd9                	j	8001e1e8 <time_test_2+0x9a>
    TEST_ASSERT("hs access to time successful when mcounteren.tm=1",
    8001e214:	0000f517          	auipc	a0,0xf
    8001e218:	12450513          	addi	a0,a0,292 # 8002d338 <__func__.0+0x318>
    8001e21c:	39f0c0ef          	jal	8002adba <printf>
    8001e220:	02900513          	li	a0,41
    8001e224:	0850b0ef          	jal	80029aa8 <putchar>
    8001e228:	b75d                	j	8001e1ce <time_test_2+0x80>

000000008001e22a <time_test_3>:

bool time_test_3() {
    8001e22a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e22c:	0000e597          	auipc	a1,0xe
    8001e230:	57c58593          	addi	a1,a1,1404 # 8002c7a8 <__func__.48>
    8001e234:	0000f517          	auipc	a0,0xf
    8001e238:	0cc50513          	addi	a0,a0,204 # 8002d300 <__func__.0+0x2e0>
bool time_test_3() {
    8001e23c:	ec06                	sd	ra,24(sp)
    8001e23e:	e822                	sd	s0,16(sp)
    8001e240:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e242:	3790c0ef          	jal	8002adba <printf>
    8001e246:	4529                	li	a0,10
    8001e248:	0610b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e24c:	4511                	li	a0,4
    8001e24e:	c21e20ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e252:	10617073          	csrci	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e256:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e25a:	4505                	li	a0,1
    8001e25c:	c13e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e260:	b13e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e264:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e268:	08200593          	li	a1,130
    8001e26c:	00016617          	auipc	a2,0x16
    8001e270:	3a460613          	addi	a2,a2,932 # 80034610 <__func__.0+0x75f0>
    8001e274:	0000f517          	auipc	a0,0xf
    8001e278:	0a450513          	addi	a0,a0,164 # 8002d318 <__func__.0+0x2f8>
    8001e27c:	33f0c0ef          	jal	8002adba <printf>
    8001e280:	00033797          	auipc	a5,0x33
    8001e284:	d917c783          	lbu	a5,-623(a5) # 80051011 <excpt+0x1>
    8001e288:	00033497          	auipc	s1,0x33
    8001e28c:	d8848493          	addi	s1,s1,-632 # 80051010 <excpt>
    8001e290:	0000f597          	auipc	a1,0xf
    8001e294:	06058593          	addi	a1,a1,96 # 8002d2f0 <__func__.0+0x2d0>
    8001e298:	cf89                	beqz	a5,8001e2b2 <time_test_3+0x88>
    8001e29a:	6498                	ld	a4,8(s1)
    8001e29c:	4789                	li	a5,2
    8001e29e:	0000f597          	auipc	a1,0xf
    8001e2a2:	04258593          	addi	a1,a1,66 # 8002d2e0 <__func__.0+0x2c0>
    8001e2a6:	00f70663          	beq	a4,a5,8001e2b2 <time_test_3+0x88>
    8001e2aa:	0000f597          	auipc	a1,0xf
    8001e2ae:	04658593          	addi	a1,a1,70 # 8002d2f0 <__func__.0+0x2d0>
    8001e2b2:	0000f517          	auipc	a0,0xf
    8001e2b6:	07e50513          	addi	a0,a0,126 # 8002d330 <__func__.0+0x310>
    8001e2ba:	3010c0ef          	jal	8002adba <printf>
    8001e2be:	00033797          	auipc	a5,0x33
    8001e2c2:	d537c783          	lbu	a5,-685(a5) # 80051011 <excpt+0x1>
    8001e2c6:	c789                	beqz	a5,8001e2d0 <time_test_3+0xa6>
    8001e2c8:	6498                	ld	a4,8(s1)
    8001e2ca:	4789                	li	a5,2
    8001e2cc:	00f70c63          	beq	a4,a5,8001e2e4 <time_test_3+0xba>
    8001e2d0:	0000f517          	auipc	a0,0xf
    8001e2d4:	06850513          	addi	a0,a0,104 # 8002d338 <__func__.0+0x318>
    8001e2d8:	2e30c0ef          	jal	8002adba <printf>
    8001e2dc:	02900513          	li	a0,41
    8001e2e0:	7c80b0ef          	jal	80029aa8 <putchar>
    8001e2e4:	4529                	li	a0,10
    8001e2e6:	7c20b0ef          	jal	80029aa8 <putchar>
    8001e2ea:	00033417          	auipc	s0,0x33
    8001e2ee:	d2744403          	lbu	s0,-729(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e2f2:	0000f597          	auipc	a1,0xf
    8001e2f6:	ffe58593          	addi	a1,a1,-2 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e2fa:	cc11                	beqz	s0,8001e316 <time_test_3+0xec>
    8001e2fc:	6498                	ld	a4,8(s1)
    8001e2fe:	4789                	li	a5,2
    TEST_END(); 
    8001e300:	0000f597          	auipc	a1,0xf
    8001e304:	fe058593          	addi	a1,a1,-32 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when scounteren.tm=0",
    8001e308:	00f70763          	beq	a4,a5,8001e316 <time_test_3+0xec>
    8001e30c:	4401                	li	s0,0
    TEST_END(); 
    8001e30e:	0000f597          	auipc	a1,0xf
    8001e312:	fe258593          	addi	a1,a1,-30 # 8002d2f0 <__func__.0+0x2d0>
    8001e316:	0000f517          	auipc	a0,0xf
    8001e31a:	08250513          	addi	a0,a0,130 # 8002d398 <__func__.0+0x378>
    8001e31e:	29d0c0ef          	jal	8002adba <printf>
    8001e322:	4511                	li	a0,4
    8001e324:	b4be20ef          	jal	80000e6e <goto_priv>
    8001e328:	c62e30ef          	jal	8000178a <reset_state>
}
    8001e32c:	60e2                	ld	ra,24(sp)
    8001e32e:	8522                	mv	a0,s0
    8001e330:	6442                	ld	s0,16(sp)
    8001e332:	64a2                	ld	s1,8(sp)
    8001e334:	6105                	addi	sp,sp,32
    8001e336:	8082                	ret

000000008001e338 <time_test_4>:

bool time_test_4() {
    8001e338:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e33a:	0000e597          	auipc	a1,0xe
    8001e33e:	47e58593          	addi	a1,a1,1150 # 8002c7b8 <__func__.47>
    8001e342:	0000f517          	auipc	a0,0xf
    8001e346:	fbe50513          	addi	a0,a0,-66 # 8002d300 <__func__.0+0x2e0>
bool time_test_4() {
    8001e34a:	e406                	sd	ra,8(sp)
    8001e34c:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e34e:	26d0c0ef          	jal	8002adba <printf>
    8001e352:	4529                	li	a0,10
    8001e354:	7540b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e358:	4511                	li	a0,4
    8001e35a:	b15e20ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e35e:	10616073          	csrsi	scounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e362:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HU);
    8001e366:	4505                	li	a0,1
    8001e368:	b07e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e36c:	a07e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e370:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e374:	08200593          	li	a1,130
    8001e378:	00016617          	auipc	a2,0x16
    8001e37c:	2e860613          	addi	a2,a2,744 # 80034660 <__func__.0+0x7640>
    8001e380:	0000f517          	auipc	a0,0xf
    8001e384:	f9850513          	addi	a0,a0,-104 # 8002d318 <__func__.0+0x2f8>
    8001e388:	2330c0ef          	jal	8002adba <printf>
    8001e38c:	00033797          	auipc	a5,0x33
    8001e390:	c857c783          	lbu	a5,-891(a5) # 80051011 <excpt+0x1>
    8001e394:	0000f597          	auipc	a1,0xf
    8001e398:	f4c58593          	addi	a1,a1,-180 # 8002d2e0 <__func__.0+0x2c0>
    8001e39c:	c789                	beqz	a5,8001e3a6 <time_test_4+0x6e>
    8001e39e:	0000f597          	auipc	a1,0xf
    8001e3a2:	f5258593          	addi	a1,a1,-174 # 8002d2f0 <__func__.0+0x2d0>
    8001e3a6:	0000f517          	auipc	a0,0xf
    8001e3aa:	f8a50513          	addi	a0,a0,-118 # 8002d330 <__func__.0+0x310>
    8001e3ae:	20d0c0ef          	jal	8002adba <printf>
    8001e3b2:	00033797          	auipc	a5,0x33
    8001e3b6:	c5f7c783          	lbu	a5,-929(a5) # 80051011 <excpt+0x1>
    8001e3ba:	e7a1                	bnez	a5,8001e402 <time_test_4+0xca>
    8001e3bc:	4529                	li	a0,10
    8001e3be:	6ea0b0ef          	jal	80029aa8 <putchar>
    8001e3c2:	00033797          	auipc	a5,0x33
    8001e3c6:	c4f7c783          	lbu	a5,-945(a5) # 80051011 <excpt+0x1>
    8001e3ca:	e795                	bnez	a5,8001e3f6 <time_test_4+0xbe>
    8001e3cc:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e3ce:	0000f597          	auipc	a1,0xf
    8001e3d2:	f1258593          	addi	a1,a1,-238 # 8002d2e0 <__func__.0+0x2c0>
    8001e3d6:	0000f517          	auipc	a0,0xf
    8001e3da:	fc250513          	addi	a0,a0,-62 # 8002d398 <__func__.0+0x378>
    8001e3de:	1dd0c0ef          	jal	8002adba <printf>
    8001e3e2:	4511                	li	a0,4
    8001e3e4:	a8be20ef          	jal	80000e6e <goto_priv>
    8001e3e8:	ba2e30ef          	jal	8000178a <reset_state>
}
    8001e3ec:	60a2                	ld	ra,8(sp)
    8001e3ee:	8522                	mv	a0,s0
    8001e3f0:	6402                	ld	s0,0(sp)
    8001e3f2:	0141                	addi	sp,sp,16
    8001e3f4:	8082                	ret
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e3f6:	4401                	li	s0,0
    TEST_END(); 
    8001e3f8:	0000f597          	auipc	a1,0xf
    8001e3fc:	ef858593          	addi	a1,a1,-264 # 8002d2f0 <__func__.0+0x2d0>
    8001e400:	bfd9                	j	8001e3d6 <time_test_4+0x9e>
    TEST_ASSERT("hu access to time successful when mcounteren.tm=1 scounteren.tm=1",
    8001e402:	0000f517          	auipc	a0,0xf
    8001e406:	f3650513          	addi	a0,a0,-202 # 8002d338 <__func__.0+0x318>
    8001e40a:	1b10c0ef          	jal	8002adba <printf>
    8001e40e:	02900513          	li	a0,41
    8001e412:	6960b0ef          	jal	80029aa8 <putchar>
    8001e416:	b75d                	j	8001e3bc <time_test_4+0x84>

000000008001e418 <time_test_5>:

bool time_test_5() {
    8001e418:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e41a:	0000e597          	auipc	a1,0xe
    8001e41e:	3ae58593          	addi	a1,a1,942 # 8002c7c8 <__func__.46>
    8001e422:	0000f517          	auipc	a0,0xf
    8001e426:	ede50513          	addi	a0,a0,-290 # 8002d300 <__func__.0+0x2e0>
bool time_test_5() {
    8001e42a:	ec06                	sd	ra,24(sp)
    8001e42c:	e822                	sd	s0,16(sp)
    8001e42e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e430:	18b0c0ef          	jal	8002adba <printf>
    8001e434:	4529                	li	a0,10
    8001e436:	6720b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e43a:	4511                	li	a0,4
    8001e43c:	a33e20ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e440:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e444:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e448:	4509                	li	a0,2
    8001e44a:	a25e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e44e:	925e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e452:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e456:	08200593          	li	a1,130
    8001e45a:	00016617          	auipc	a2,0x16
    8001e45e:	24e60613          	addi	a2,a2,590 # 800346a8 <__func__.0+0x7688>
    8001e462:	0000f517          	auipc	a0,0xf
    8001e466:	eb650513          	addi	a0,a0,-330 # 8002d318 <__func__.0+0x2f8>
    8001e46a:	1510c0ef          	jal	8002adba <printf>
    8001e46e:	00033797          	auipc	a5,0x33
    8001e472:	ba37c783          	lbu	a5,-1117(a5) # 80051011 <excpt+0x1>
    8001e476:	00033497          	auipc	s1,0x33
    8001e47a:	b9a48493          	addi	s1,s1,-1126 # 80051010 <excpt>
    8001e47e:	0000f597          	auipc	a1,0xf
    8001e482:	e7258593          	addi	a1,a1,-398 # 8002d2f0 <__func__.0+0x2d0>
    8001e486:	cf89                	beqz	a5,8001e4a0 <time_test_5+0x88>
    8001e488:	6498                	ld	a4,8(s1)
    8001e48a:	47d9                	li	a5,22
    8001e48c:	0000f597          	auipc	a1,0xf
    8001e490:	e5458593          	addi	a1,a1,-428 # 8002d2e0 <__func__.0+0x2c0>
    8001e494:	00f70663          	beq	a4,a5,8001e4a0 <time_test_5+0x88>
    8001e498:	0000f597          	auipc	a1,0xf
    8001e49c:	e5858593          	addi	a1,a1,-424 # 8002d2f0 <__func__.0+0x2d0>
    8001e4a0:	0000f517          	auipc	a0,0xf
    8001e4a4:	e9050513          	addi	a0,a0,-368 # 8002d330 <__func__.0+0x310>
    8001e4a8:	1130c0ef          	jal	8002adba <printf>
    8001e4ac:	00033797          	auipc	a5,0x33
    8001e4b0:	b657c783          	lbu	a5,-1179(a5) # 80051011 <excpt+0x1>
    8001e4b4:	c789                	beqz	a5,8001e4be <time_test_5+0xa6>
    8001e4b6:	6498                	ld	a4,8(s1)
    8001e4b8:	47d9                	li	a5,22
    8001e4ba:	00f70c63          	beq	a4,a5,8001e4d2 <time_test_5+0xba>
    8001e4be:	0000f517          	auipc	a0,0xf
    8001e4c2:	e7a50513          	addi	a0,a0,-390 # 8002d338 <__func__.0+0x318>
    8001e4c6:	0f50c0ef          	jal	8002adba <printf>
    8001e4ca:	02900513          	li	a0,41
    8001e4ce:	5da0b0ef          	jal	80029aa8 <putchar>
    8001e4d2:	4529                	li	a0,10
    8001e4d4:	5d40b0ef          	jal	80029aa8 <putchar>
    8001e4d8:	00033417          	auipc	s0,0x33
    8001e4dc:	b3944403          	lbu	s0,-1223(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e4e0:	0000f597          	auipc	a1,0xf
    8001e4e4:	e1058593          	addi	a1,a1,-496 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e4e8:	cc11                	beqz	s0,8001e504 <time_test_5+0xec>
    8001e4ea:	6498                	ld	a4,8(s1)
    8001e4ec:	47d9                	li	a5,22
    TEST_END(); 
    8001e4ee:	0000f597          	auipc	a1,0xf
    8001e4f2:	df258593          	addi	a1,a1,-526 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0",
    8001e4f6:	00f70763          	beq	a4,a5,8001e504 <time_test_5+0xec>
    8001e4fa:	4401                	li	s0,0
    TEST_END(); 
    8001e4fc:	0000f597          	auipc	a1,0xf
    8001e500:	df458593          	addi	a1,a1,-524 # 8002d2f0 <__func__.0+0x2d0>
    8001e504:	0000f517          	auipc	a0,0xf
    8001e508:	e9450513          	addi	a0,a0,-364 # 8002d398 <__func__.0+0x378>
    8001e50c:	0af0c0ef          	jal	8002adba <printf>
    8001e510:	4511                	li	a0,4
    8001e512:	95de20ef          	jal	80000e6e <goto_priv>
    8001e516:	a74e30ef          	jal	8000178a <reset_state>
}
    8001e51a:	60e2                	ld	ra,24(sp)
    8001e51c:	8522                	mv	a0,s0
    8001e51e:	6442                	ld	s0,16(sp)
    8001e520:	64a2                	ld	s1,8(sp)
    8001e522:	6105                	addi	sp,sp,32
    8001e524:	8082                	ret

000000008001e526 <time_test_6>:

bool time_test_6() {
    8001e526:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e528:	0000e597          	auipc	a1,0xe
    8001e52c:	2b058593          	addi	a1,a1,688 # 8002c7d8 <__func__.45>
    8001e530:	0000f517          	auipc	a0,0xf
    8001e534:	dd050513          	addi	a0,a0,-560 # 8002d300 <__func__.0+0x2e0>
bool time_test_6() {
    8001e538:	e406                	sd	ra,8(sp)
    8001e53a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e53c:	07f0c0ef          	jal	8002adba <printf>
    8001e540:	4529                	li	a0,10
    8001e542:	5660b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e546:	4511                	li	a0,4
    8001e548:	927e20ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e54c:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e550:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e554:	4509                	li	a0,2
    8001e556:	919e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e55a:	819e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e55e:	c01027f3          	rdtime	a5

    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e562:	08200593          	li	a1,130
    8001e566:	00016617          	auipc	a2,0x16
    8001e56a:	1a260613          	addi	a2,a2,418 # 80034708 <__func__.0+0x76e8>
    8001e56e:	0000f517          	auipc	a0,0xf
    8001e572:	daa50513          	addi	a0,a0,-598 # 8002d318 <__func__.0+0x2f8>
    8001e576:	0450c0ef          	jal	8002adba <printf>
    8001e57a:	00033797          	auipc	a5,0x33
    8001e57e:	a977c783          	lbu	a5,-1385(a5) # 80051011 <excpt+0x1>
    8001e582:	0000f597          	auipc	a1,0xf
    8001e586:	d5e58593          	addi	a1,a1,-674 # 8002d2e0 <__func__.0+0x2c0>
    8001e58a:	c789                	beqz	a5,8001e594 <time_test_6+0x6e>
    8001e58c:	0000f597          	auipc	a1,0xf
    8001e590:	d6458593          	addi	a1,a1,-668 # 8002d2f0 <__func__.0+0x2d0>
    8001e594:	0000f517          	auipc	a0,0xf
    8001e598:	d9c50513          	addi	a0,a0,-612 # 8002d330 <__func__.0+0x310>
    8001e59c:	01f0c0ef          	jal	8002adba <printf>
    8001e5a0:	00033797          	auipc	a5,0x33
    8001e5a4:	a717c783          	lbu	a5,-1423(a5) # 80051011 <excpt+0x1>
    8001e5a8:	e7a1                	bnez	a5,8001e5f0 <time_test_6+0xca>
    8001e5aa:	4529                	li	a0,10
    8001e5ac:	4fc0b0ef          	jal	80029aa8 <putchar>
    8001e5b0:	00033797          	auipc	a5,0x33
    8001e5b4:	a617c783          	lbu	a5,-1439(a5) # 80051011 <excpt+0x1>
    8001e5b8:	e795                	bnez	a5,8001e5e4 <time_test_6+0xbe>
    8001e5ba:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e5bc:	0000f597          	auipc	a1,0xf
    8001e5c0:	d2458593          	addi	a1,a1,-732 # 8002d2e0 <__func__.0+0x2c0>
    8001e5c4:	0000f517          	auipc	a0,0xf
    8001e5c8:	dd450513          	addi	a0,a0,-556 # 8002d398 <__func__.0+0x378>
    8001e5cc:	7ee0c0ef          	jal	8002adba <printf>
    8001e5d0:	4511                	li	a0,4
    8001e5d2:	89de20ef          	jal	80000e6e <goto_priv>
    8001e5d6:	9b4e30ef          	jal	8000178a <reset_state>
}
    8001e5da:	60a2                	ld	ra,8(sp)
    8001e5dc:	8522                	mv	a0,s0
    8001e5de:	6402                	ld	s0,0(sp)
    8001e5e0:	0141                	addi	sp,sp,16
    8001e5e2:	8082                	ret
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e5e4:	4401                	li	s0,0
    TEST_END(); 
    8001e5e6:	0000f597          	auipc	a1,0xf
    8001e5ea:	d0a58593          	addi	a1,a1,-758 # 8002d2f0 <__func__.0+0x2d0>
    8001e5ee:	bfd9                	j	8001e5c4 <time_test_6+0x9e>
    TEST_ASSERT("vs access to time successful when mcounteren.tm=1 hcounteren.tm=1",
    8001e5f0:	0000f517          	auipc	a0,0xf
    8001e5f4:	d4850513          	addi	a0,a0,-696 # 8002d338 <__func__.0+0x318>
    8001e5f8:	7c20c0ef          	jal	8002adba <printf>
    8001e5fc:	02900513          	li	a0,41
    8001e600:	4a80b0ef          	jal	80029aa8 <putchar>
    8001e604:	b75d                	j	8001e5aa <time_test_6+0x84>

000000008001e606 <time_test_7>:

bool time_test_7() {
    8001e606:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e608:	0000e597          	auipc	a1,0xe
    8001e60c:	1e058593          	addi	a1,a1,480 # 8002c7e8 <__func__.44>
    8001e610:	0000f517          	auipc	a0,0xf
    8001e614:	cf050513          	addi	a0,a0,-784 # 8002d300 <__func__.0+0x2e0>
bool time_test_7() {
    8001e618:	e406                	sd	ra,8(sp)
    8001e61a:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e61c:	79e0c0ef          	jal	8002adba <printf>
    8001e620:	4529                	li	a0,10
    8001e622:	4860b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e626:	4511                	li	a0,4
    8001e628:	847e20ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e62c:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e630:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e634:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e638:	4501                	li	a0,0
    8001e63a:	835e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e63e:	f34e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e642:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e646:	08200593          	li	a1,130
    8001e64a:	00016617          	auipc	a2,0x16
    8001e64e:	10660613          	addi	a2,a2,262 # 80034750 <__func__.0+0x7730>
    8001e652:	0000f517          	auipc	a0,0xf
    8001e656:	cc650513          	addi	a0,a0,-826 # 8002d318 <__func__.0+0x2f8>
    8001e65a:	7600c0ef          	jal	8002adba <printf>
    8001e65e:	00033797          	auipc	a5,0x33
    8001e662:	9b37c783          	lbu	a5,-1613(a5) # 80051011 <excpt+0x1>
    8001e666:	0000f597          	auipc	a1,0xf
    8001e66a:	c7a58593          	addi	a1,a1,-902 # 8002d2e0 <__func__.0+0x2c0>
    8001e66e:	c789                	beqz	a5,8001e678 <time_test_7+0x72>
    8001e670:	0000f597          	auipc	a1,0xf
    8001e674:	c8058593          	addi	a1,a1,-896 # 8002d2f0 <__func__.0+0x2d0>
    8001e678:	0000f517          	auipc	a0,0xf
    8001e67c:	cb850513          	addi	a0,a0,-840 # 8002d330 <__func__.0+0x310>
    8001e680:	73a0c0ef          	jal	8002adba <printf>
    8001e684:	00033797          	auipc	a5,0x33
    8001e688:	98d7c783          	lbu	a5,-1651(a5) # 80051011 <excpt+0x1>
    8001e68c:	e7a1                	bnez	a5,8001e6d4 <time_test_7+0xce>
    8001e68e:	4529                	li	a0,10
    8001e690:	4180b0ef          	jal	80029aa8 <putchar>
    8001e694:	00033797          	auipc	a5,0x33
    8001e698:	97d7c783          	lbu	a5,-1667(a5) # 80051011 <excpt+0x1>
    8001e69c:	e795                	bnez	a5,8001e6c8 <time_test_7+0xc2>
    8001e69e:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e6a0:	0000f597          	auipc	a1,0xf
    8001e6a4:	c4058593          	addi	a1,a1,-960 # 8002d2e0 <__func__.0+0x2c0>
    8001e6a8:	0000f517          	auipc	a0,0xf
    8001e6ac:	cf050513          	addi	a0,a0,-784 # 8002d398 <__func__.0+0x378>
    8001e6b0:	70a0c0ef          	jal	8002adba <printf>
    8001e6b4:	4511                	li	a0,4
    8001e6b6:	fb8e20ef          	jal	80000e6e <goto_priv>
    8001e6ba:	8d0e30ef          	jal	8000178a <reset_state>
}
    8001e6be:	60a2                	ld	ra,8(sp)
    8001e6c0:	8522                	mv	a0,s0
    8001e6c2:	6402                	ld	s0,0(sp)
    8001e6c4:	0141                	addi	sp,sp,16
    8001e6c6:	8082                	ret
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e6c8:	4401                	li	s0,0
    TEST_END(); 
    8001e6ca:	0000f597          	auipc	a1,0xf
    8001e6ce:	c2658593          	addi	a1,a1,-986 # 8002d2f0 <__func__.0+0x2d0>
    8001e6d2:	bfd9                	j	8001e6a8 <time_test_7+0xa2>
    TEST_ASSERT("vu access to time successful when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=1",
    8001e6d4:	0000f517          	auipc	a0,0xf
    8001e6d8:	c6450513          	addi	a0,a0,-924 # 8002d338 <__func__.0+0x318>
    8001e6dc:	6de0c0ef          	jal	8002adba <printf>
    8001e6e0:	02900513          	li	a0,41
    8001e6e4:	3c40b0ef          	jal	80029aa8 <putchar>
    8001e6e8:	b75d                	j	8001e68e <time_test_7+0x88>

000000008001e6ea <time_test_8>:

bool time_test_8() {
    8001e6ea:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e6ec:	0000e597          	auipc	a1,0xe
    8001e6f0:	10c58593          	addi	a1,a1,268 # 8002c7f8 <__func__.43>
    8001e6f4:	0000f517          	auipc	a0,0xf
    8001e6f8:	c0c50513          	addi	a0,a0,-1012 # 8002d300 <__func__.0+0x2e0>
bool time_test_8() {
    8001e6fc:	ec06                	sd	ra,24(sp)
    8001e6fe:	e822                	sd	s0,16(sp)
    8001e700:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e702:	6b80c0ef          	jal	8002adba <printf>
    8001e706:	4529                	li	a0,10
    8001e708:	3a00b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e70c:	4511                	li	a0,4
    8001e70e:	f60e20ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e712:	60617073          	csrci	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e716:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e71a:	10616073          	csrsi	scounteren,2

    goto_priv(PRIV_VU);
    8001e71e:	4501                	li	a0,0
    8001e720:	f4ee20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e724:	e4ee20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e728:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e72c:	08200593          	li	a1,130
    8001e730:	00016617          	auipc	a2,0x16
    8001e734:	07860613          	addi	a2,a2,120 # 800347a8 <__func__.0+0x7788>
    8001e738:	0000f517          	auipc	a0,0xf
    8001e73c:	be050513          	addi	a0,a0,-1056 # 8002d318 <__func__.0+0x2f8>
    8001e740:	67a0c0ef          	jal	8002adba <printf>
    8001e744:	00033797          	auipc	a5,0x33
    8001e748:	8cd7c783          	lbu	a5,-1843(a5) # 80051011 <excpt+0x1>
    8001e74c:	00033497          	auipc	s1,0x33
    8001e750:	8c448493          	addi	s1,s1,-1852 # 80051010 <excpt>
    8001e754:	0000f597          	auipc	a1,0xf
    8001e758:	b9c58593          	addi	a1,a1,-1124 # 8002d2f0 <__func__.0+0x2d0>
    8001e75c:	cf89                	beqz	a5,8001e776 <time_test_8+0x8c>
    8001e75e:	6498                	ld	a4,8(s1)
    8001e760:	47d9                	li	a5,22
    8001e762:	0000f597          	auipc	a1,0xf
    8001e766:	b7e58593          	addi	a1,a1,-1154 # 8002d2e0 <__func__.0+0x2c0>
    8001e76a:	00f70663          	beq	a4,a5,8001e776 <time_test_8+0x8c>
    8001e76e:	0000f597          	auipc	a1,0xf
    8001e772:	b8258593          	addi	a1,a1,-1150 # 8002d2f0 <__func__.0+0x2d0>
    8001e776:	0000f517          	auipc	a0,0xf
    8001e77a:	bba50513          	addi	a0,a0,-1094 # 8002d330 <__func__.0+0x310>
    8001e77e:	63c0c0ef          	jal	8002adba <printf>
    8001e782:	00033797          	auipc	a5,0x33
    8001e786:	88f7c783          	lbu	a5,-1905(a5) # 80051011 <excpt+0x1>
    8001e78a:	c789                	beqz	a5,8001e794 <time_test_8+0xaa>
    8001e78c:	6498                	ld	a4,8(s1)
    8001e78e:	47d9                	li	a5,22
    8001e790:	00f70c63          	beq	a4,a5,8001e7a8 <time_test_8+0xbe>
    8001e794:	0000f517          	auipc	a0,0xf
    8001e798:	ba450513          	addi	a0,a0,-1116 # 8002d338 <__func__.0+0x318>
    8001e79c:	61e0c0ef          	jal	8002adba <printf>
    8001e7a0:	02900513          	li	a0,41
    8001e7a4:	3040b0ef          	jal	80029aa8 <putchar>
    8001e7a8:	4529                	li	a0,10
    8001e7aa:	2fe0b0ef          	jal	80029aa8 <putchar>
    8001e7ae:	00033417          	auipc	s0,0x33
    8001e7b2:	86344403          	lbu	s0,-1949(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001e7b6:	0000f597          	auipc	a1,0xf
    8001e7ba:	b3a58593          	addi	a1,a1,-1222 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e7be:	cc11                	beqz	s0,8001e7da <time_test_8+0xf0>
    8001e7c0:	6498                	ld	a4,8(s1)
    8001e7c2:	47d9                	li	a5,22
    TEST_END(); 
    8001e7c4:	0000f597          	auipc	a1,0xf
    8001e7c8:	b1c58593          	addi	a1,a1,-1252 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to time casuses virtual instruction exception when mcounteren.tm=1 hcounteren.tm=0 scounteren.tm=1",
    8001e7cc:	00f70763          	beq	a4,a5,8001e7da <time_test_8+0xf0>
    8001e7d0:	4401                	li	s0,0
    TEST_END(); 
    8001e7d2:	0000f597          	auipc	a1,0xf
    8001e7d6:	b1e58593          	addi	a1,a1,-1250 # 8002d2f0 <__func__.0+0x2d0>
    8001e7da:	0000f517          	auipc	a0,0xf
    8001e7de:	bbe50513          	addi	a0,a0,-1090 # 8002d398 <__func__.0+0x378>
    8001e7e2:	5d80c0ef          	jal	8002adba <printf>
    8001e7e6:	4511                	li	a0,4
    8001e7e8:	e86e20ef          	jal	80000e6e <goto_priv>
    8001e7ec:	f9fe20ef          	jal	8000178a <reset_state>
}
    8001e7f0:	60e2                	ld	ra,24(sp)
    8001e7f2:	8522                	mv	a0,s0
    8001e7f4:	6442                	ld	s0,16(sp)
    8001e7f6:	64a2                	ld	s1,8(sp)
    8001e7f8:	6105                	addi	sp,sp,32
    8001e7fa:	8082                	ret

000000008001e7fc <time_test_9>:

bool time_test_9() {
    8001e7fc:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e7fe:	0000e597          	auipc	a1,0xe
    8001e802:	00a58593          	addi	a1,a1,10 # 8002c808 <__func__.42>
    8001e806:	0000f517          	auipc	a0,0xf
    8001e80a:	afa50513          	addi	a0,a0,-1286 # 8002d300 <__func__.0+0x2e0>
bool time_test_9() {
    8001e80e:	ec06                	sd	ra,24(sp)
    8001e810:	e822                	sd	s0,16(sp)
    8001e812:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001e814:	5a60c0ef          	jal	8002adba <printf>
    8001e818:	4529                	li	a0,10
    8001e81a:	28e0b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e81e:	4511                	li	a0,4
    8001e820:	e4ee20ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e824:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e828:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_TM); 
    8001e82c:	10617073          	csrci	scounteren,2

    goto_priv(PRIV_HU);
    8001e830:	4505                	li	a0,1
    8001e832:	e3ce20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e836:	d3ce20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e83a:	c01027f3          	rdtime	a5

    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e83e:	08200593          	li	a1,130
    8001e842:	00016617          	auipc	a2,0x16
    8001e846:	fd660613          	addi	a2,a2,-42 # 80034818 <__func__.0+0x77f8>
    8001e84a:	0000f517          	auipc	a0,0xf
    8001e84e:	ace50513          	addi	a0,a0,-1330 # 8002d318 <__func__.0+0x2f8>
    8001e852:	5680c0ef          	jal	8002adba <printf>
    8001e856:	00032797          	auipc	a5,0x32
    8001e85a:	7bb7c783          	lbu	a5,1979(a5) # 80051011 <excpt+0x1>
    8001e85e:	00032497          	auipc	s1,0x32
    8001e862:	7b248493          	addi	s1,s1,1970 # 80051010 <excpt>
    8001e866:	0000f597          	auipc	a1,0xf
    8001e86a:	a8a58593          	addi	a1,a1,-1398 # 8002d2f0 <__func__.0+0x2d0>
    8001e86e:	cf89                	beqz	a5,8001e888 <time_test_9+0x8c>
    8001e870:	6498                	ld	a4,8(s1)
    8001e872:	4789                	li	a5,2
    8001e874:	0000f597          	auipc	a1,0xf
    8001e878:	a6c58593          	addi	a1,a1,-1428 # 8002d2e0 <__func__.0+0x2c0>
    8001e87c:	00f70663          	beq	a4,a5,8001e888 <time_test_9+0x8c>
    8001e880:	0000f597          	auipc	a1,0xf
    8001e884:	a7058593          	addi	a1,a1,-1424 # 8002d2f0 <__func__.0+0x2d0>
    8001e888:	0000f517          	auipc	a0,0xf
    8001e88c:	aa850513          	addi	a0,a0,-1368 # 8002d330 <__func__.0+0x310>
    8001e890:	52a0c0ef          	jal	8002adba <printf>
    8001e894:	00032797          	auipc	a5,0x32
    8001e898:	77d7c783          	lbu	a5,1917(a5) # 80051011 <excpt+0x1>
    8001e89c:	c789                	beqz	a5,8001e8a6 <time_test_9+0xaa>
    8001e89e:	6498                	ld	a4,8(s1)
    8001e8a0:	4789                	li	a5,2
    8001e8a2:	00f70c63          	beq	a4,a5,8001e8ba <time_test_9+0xbe>
    8001e8a6:	0000f517          	auipc	a0,0xf
    8001e8aa:	a9250513          	addi	a0,a0,-1390 # 8002d338 <__func__.0+0x318>
    8001e8ae:	50c0c0ef          	jal	8002adba <printf>
    8001e8b2:	02900513          	li	a0,41
    8001e8b6:	1f20b0ef          	jal	80029aa8 <putchar>
    8001e8ba:	4529                	li	a0,10
    8001e8bc:	1ec0b0ef          	jal	80029aa8 <putchar>
    8001e8c0:	00032417          	auipc	s0,0x32
    8001e8c4:	75144403          	lbu	s0,1873(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001e8c8:	0000f597          	auipc	a1,0xf
    8001e8cc:	a2858593          	addi	a1,a1,-1496 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e8d0:	cc11                	beqz	s0,8001e8ec <time_test_9+0xf0>
    8001e8d2:	6498                	ld	a4,8(s1)
    8001e8d4:	4789                	li	a5,2
    TEST_END(); 
    8001e8d6:	0000f597          	auipc	a1,0xf
    8001e8da:	a0a58593          	addi	a1,a1,-1526 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to time casuses illegal instruction exception when mcounteren.tm=1 hcounteren.tm=1 scounteren.tm=0",
    8001e8de:	00f70763          	beq	a4,a5,8001e8ec <time_test_9+0xf0>
    8001e8e2:	4401                	li	s0,0
    TEST_END(); 
    8001e8e4:	0000f597          	auipc	a1,0xf
    8001e8e8:	a0c58593          	addi	a1,a1,-1524 # 8002d2f0 <__func__.0+0x2d0>
    8001e8ec:	0000f517          	auipc	a0,0xf
    8001e8f0:	aac50513          	addi	a0,a0,-1364 # 8002d398 <__func__.0+0x378>
    8001e8f4:	4c60c0ef          	jal	8002adba <printf>
    8001e8f8:	4511                	li	a0,4
    8001e8fa:	d74e20ef          	jal	80000e6e <goto_priv>
    8001e8fe:	e8de20ef          	jal	8000178a <reset_state>
}
    8001e902:	60e2                	ld	ra,24(sp)
    8001e904:	8522                	mv	a0,s0
    8001e906:	6442                	ld	s0,16(sp)
    8001e908:	64a2                	ld	s1,8(sp)
    8001e90a:	6105                	addi	sp,sp,32
    8001e90c:	8082                	ret

000000008001e90e <time_test_10>:

bool time_test_10() {
    8001e90e:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001e910:	0000e597          	auipc	a1,0xe
    8001e914:	f0858593          	addi	a1,a1,-248 # 8002c818 <__func__.41>
    8001e918:	0000f517          	auipc	a0,0xf
    8001e91c:	9e850513          	addi	a0,a0,-1560 # 8002d300 <__func__.0+0x2e0>
bool time_test_10() {
    8001e920:	e406                	sd	ra,8(sp)
    8001e922:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001e924:	4960c0ef          	jal	8002adba <printf>
    8001e928:	4529                	li	a0,10
    8001e92a:	17e0b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001e92e:	4511                	li	a0,4
    8001e930:	d3ee20ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    8001e934:	60616073          	csrsi	hcounteren,2
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8001e938:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_VS);
    8001e93c:	4509                	li	a0,2
    8001e93e:	d30e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001e942:	c30e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    8001e946:	c01027f3          	rdtime	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001e94a:	08200593          	li	a1,130
    8001e94e:	00016617          	auipc	a2,0x16
    8001e952:	f3a60613          	addi	a2,a2,-198 # 80034888 <__func__.0+0x7868>
    8001e956:	0000f517          	auipc	a0,0xf
    8001e95a:	9c250513          	addi	a0,a0,-1598 # 8002d318 <__func__.0+0x2f8>
    8001e95e:	45c0c0ef          	jal	8002adba <printf>
    8001e962:	00032797          	auipc	a5,0x32
    8001e966:	6af7c783          	lbu	a5,1711(a5) # 80051011 <excpt+0x1>
    8001e96a:	0000f597          	auipc	a1,0xf
    8001e96e:	97658593          	addi	a1,a1,-1674 # 8002d2e0 <__func__.0+0x2c0>
    8001e972:	c789                	beqz	a5,8001e97c <time_test_10+0x6e>
    8001e974:	0000f597          	auipc	a1,0xf
    8001e978:	97c58593          	addi	a1,a1,-1668 # 8002d2f0 <__func__.0+0x2d0>
    8001e97c:	0000f517          	auipc	a0,0xf
    8001e980:	9b450513          	addi	a0,a0,-1612 # 8002d330 <__func__.0+0x310>
    8001e984:	4360c0ef          	jal	8002adba <printf>
    8001e988:	00032797          	auipc	a5,0x32
    8001e98c:	6897c783          	lbu	a5,1673(a5) # 80051011 <excpt+0x1>
    8001e990:	e7a1                	bnez	a5,8001e9d8 <time_test_10+0xca>
    8001e992:	4529                	li	a0,10
    8001e994:	1140b0ef          	jal	80029aa8 <putchar>
    8001e998:	00032797          	auipc	a5,0x32
    8001e99c:	6797c783          	lbu	a5,1657(a5) # 80051011 <excpt+0x1>
    8001e9a0:	e795                	bnez	a5,8001e9cc <time_test_10+0xbe>
    8001e9a2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001e9a4:	0000f597          	auipc	a1,0xf
    8001e9a8:	93c58593          	addi	a1,a1,-1732 # 8002d2e0 <__func__.0+0x2c0>
    8001e9ac:	0000f517          	auipc	a0,0xf
    8001e9b0:	9ec50513          	addi	a0,a0,-1556 # 8002d398 <__func__.0+0x378>
    8001e9b4:	4060c0ef          	jal	8002adba <printf>
    8001e9b8:	4511                	li	a0,4
    8001e9ba:	cb4e20ef          	jal	80000e6e <goto_priv>
    8001e9be:	dcde20ef          	jal	8000178a <reset_state>
}
    8001e9c2:	60a2                	ld	ra,8(sp)
    8001e9c4:	8522                	mv	a0,s0
    8001e9c6:	6402                	ld	s0,0(sp)
    8001e9c8:	0141                	addi	sp,sp,16
    8001e9ca:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001e9cc:	4401                	li	s0,0
    TEST_END(); 
    8001e9ce:	0000f597          	auipc	a1,0xf
    8001e9d2:	92258593          	addi	a1,a1,-1758 # 8002d2f0 <__func__.0+0x2d0>
    8001e9d6:	bfd9                	j	8001e9ac <time_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.tm=1 hcounteren.tm=1",
    8001e9d8:	0000f517          	auipc	a0,0xf
    8001e9dc:	96050513          	addi	a0,a0,-1696 # 8002d338 <__func__.0+0x318>
    8001e9e0:	3da0c0ef          	jal	8002adba <printf>
    8001e9e4:	02900513          	li	a0,41
    8001e9e8:	0c00b0ef          	jal	80029aa8 <putchar>
    8001e9ec:	b75d                	j	8001e992 <time_test_10+0x84>

000000008001e9ee <cycle_test_1>:


bool cycle_test_1() {
    8001e9ee:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001e9f0:	0000e597          	auipc	a1,0xe
    8001e9f4:	e3858593          	addi	a1,a1,-456 # 8002c828 <__func__.40>
    8001e9f8:	0000f517          	auipc	a0,0xf
    8001e9fc:	90850513          	addi	a0,a0,-1784 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_1() {
    8001ea00:	ec06                	sd	ra,24(sp)
    8001ea02:	e822                	sd	s0,16(sp)
    8001ea04:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ea06:	3b40c0ef          	jal	8002adba <printf>
    8001ea0a:	4529                	li	a0,10
    8001ea0c:	09c0b0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001ea10:	4511                	li	a0,4
    8001ea12:	c5ce20ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001ea16:	3060f073          	csrci	mcounteren,1

    goto_priv(PRIV_VS);
    8001ea1a:	4509                	li	a0,2
    8001ea1c:	c52e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ea20:	b52e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ea24:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ea28:	08200593          	li	a1,130
    8001ea2c:	00016617          	auipc	a2,0x16
    8001ea30:	eac60613          	addi	a2,a2,-340 # 800348d8 <__func__.0+0x78b8>
    8001ea34:	0000f517          	auipc	a0,0xf
    8001ea38:	8e450513          	addi	a0,a0,-1820 # 8002d318 <__func__.0+0x2f8>
    8001ea3c:	37e0c0ef          	jal	8002adba <printf>
    8001ea40:	00032797          	auipc	a5,0x32
    8001ea44:	5d17c783          	lbu	a5,1489(a5) # 80051011 <excpt+0x1>
    8001ea48:	00032497          	auipc	s1,0x32
    8001ea4c:	5c848493          	addi	s1,s1,1480 # 80051010 <excpt>
    8001ea50:	0000f597          	auipc	a1,0xf
    8001ea54:	8a058593          	addi	a1,a1,-1888 # 8002d2f0 <__func__.0+0x2d0>
    8001ea58:	cf89                	beqz	a5,8001ea72 <cycle_test_1+0x84>
    8001ea5a:	6498                	ld	a4,8(s1)
    8001ea5c:	4789                	li	a5,2
    8001ea5e:	0000f597          	auipc	a1,0xf
    8001ea62:	88258593          	addi	a1,a1,-1918 # 8002d2e0 <__func__.0+0x2c0>
    8001ea66:	00f70663          	beq	a4,a5,8001ea72 <cycle_test_1+0x84>
    8001ea6a:	0000f597          	auipc	a1,0xf
    8001ea6e:	88658593          	addi	a1,a1,-1914 # 8002d2f0 <__func__.0+0x2d0>
    8001ea72:	0000f517          	auipc	a0,0xf
    8001ea76:	8be50513          	addi	a0,a0,-1858 # 8002d330 <__func__.0+0x310>
    8001ea7a:	3400c0ef          	jal	8002adba <printf>
    8001ea7e:	00032797          	auipc	a5,0x32
    8001ea82:	5937c783          	lbu	a5,1427(a5) # 80051011 <excpt+0x1>
    8001ea86:	c789                	beqz	a5,8001ea90 <cycle_test_1+0xa2>
    8001ea88:	6498                	ld	a4,8(s1)
    8001ea8a:	4789                	li	a5,2
    8001ea8c:	00f70c63          	beq	a4,a5,8001eaa4 <cycle_test_1+0xb6>
    8001ea90:	0000f517          	auipc	a0,0xf
    8001ea94:	8a850513          	addi	a0,a0,-1880 # 8002d338 <__func__.0+0x318>
    8001ea98:	3220c0ef          	jal	8002adba <printf>
    8001ea9c:	02900513          	li	a0,41
    8001eaa0:	0080b0ef          	jal	80029aa8 <putchar>
    8001eaa4:	4529                	li	a0,10
    8001eaa6:	0020b0ef          	jal	80029aa8 <putchar>
    8001eaaa:	00032797          	auipc	a5,0x32
    8001eaae:	5677c783          	lbu	a5,1383(a5) # 80051011 <excpt+0x1>
    8001eab2:	4401                	li	s0,0
    8001eab4:	c789                	beqz	a5,8001eabe <cycle_test_1+0xd0>
    8001eab6:	6480                	ld	s0,8(s1)
    8001eab8:	1479                	addi	s0,s0,-2
    8001eaba:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001eabe:	450d                	li	a0,3
    8001eac0:	baee20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eac4:	aaee20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eac8:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eacc:	08200593          	li	a1,130
    8001ead0:	00016617          	auipc	a2,0x16
    8001ead4:	e5860613          	addi	a2,a2,-424 # 80034928 <__func__.0+0x7908>
    8001ead8:	0000f517          	auipc	a0,0xf
    8001eadc:	84050513          	addi	a0,a0,-1984 # 8002d318 <__func__.0+0x2f8>
    8001eae0:	2da0c0ef          	jal	8002adba <printf>
    8001eae4:	00032797          	auipc	a5,0x32
    8001eae8:	52d7c783          	lbu	a5,1325(a5) # 80051011 <excpt+0x1>
    8001eaec:	0000f597          	auipc	a1,0xf
    8001eaf0:	80458593          	addi	a1,a1,-2044 # 8002d2f0 <__func__.0+0x2d0>
    8001eaf4:	cf89                	beqz	a5,8001eb0e <cycle_test_1+0x120>
    8001eaf6:	6498                	ld	a4,8(s1)
    8001eaf8:	4789                	li	a5,2
    8001eafa:	0000e597          	auipc	a1,0xe
    8001eafe:	7e658593          	addi	a1,a1,2022 # 8002d2e0 <__func__.0+0x2c0>
    8001eb02:	00f70663          	beq	a4,a5,8001eb0e <cycle_test_1+0x120>
    8001eb06:	0000e597          	auipc	a1,0xe
    8001eb0a:	7ea58593          	addi	a1,a1,2026 # 8002d2f0 <__func__.0+0x2d0>
    8001eb0e:	0000f517          	auipc	a0,0xf
    8001eb12:	82250513          	addi	a0,a0,-2014 # 8002d330 <__func__.0+0x310>
    8001eb16:	2a40c0ef          	jal	8002adba <printf>
    8001eb1a:	00032797          	auipc	a5,0x32
    8001eb1e:	4f77c783          	lbu	a5,1271(a5) # 80051011 <excpt+0x1>
    8001eb22:	c789                	beqz	a5,8001eb2c <cycle_test_1+0x13e>
    8001eb24:	6498                	ld	a4,8(s1)
    8001eb26:	4789                	li	a5,2
    8001eb28:	00f70c63          	beq	a4,a5,8001eb40 <cycle_test_1+0x152>
    8001eb2c:	0000f517          	auipc	a0,0xf
    8001eb30:	80c50513          	addi	a0,a0,-2036 # 8002d338 <__func__.0+0x318>
    8001eb34:	2860c0ef          	jal	8002adba <printf>
    8001eb38:	02900513          	li	a0,41
    8001eb3c:	76d0a0ef          	jal	80029aa8 <putchar>
    8001eb40:	4529                	li	a0,10
    8001eb42:	7670a0ef          	jal	80029aa8 <putchar>
    8001eb46:	c801                	beqz	s0,8001eb56 <cycle_test_1+0x168>
    8001eb48:	00032797          	auipc	a5,0x32
    8001eb4c:	4c97c783          	lbu	a5,1225(a5) # 80051011 <excpt+0x1>
    8001eb50:	4401                	li	s0,0
    8001eb52:	16079f63          	bnez	a5,8001ecd0 <cycle_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001eb56:	4501                	li	a0,0
    8001eb58:	b16e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eb5c:	a16e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eb60:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001eb64:	08200593          	li	a1,130
    8001eb68:	00016617          	auipc	a2,0x16
    8001eb6c:	e1060613          	addi	a2,a2,-496 # 80034978 <__func__.0+0x7958>
    8001eb70:	0000e517          	auipc	a0,0xe
    8001eb74:	7a850513          	addi	a0,a0,1960 # 8002d318 <__func__.0+0x2f8>
    8001eb78:	2420c0ef          	jal	8002adba <printf>
    8001eb7c:	00032797          	auipc	a5,0x32
    8001eb80:	4957c783          	lbu	a5,1173(a5) # 80051011 <excpt+0x1>
    8001eb84:	0000e597          	auipc	a1,0xe
    8001eb88:	76c58593          	addi	a1,a1,1900 # 8002d2f0 <__func__.0+0x2d0>
    8001eb8c:	cf89                	beqz	a5,8001eba6 <cycle_test_1+0x1b8>
    8001eb8e:	6498                	ld	a4,8(s1)
    8001eb90:	4789                	li	a5,2
    8001eb92:	0000e597          	auipc	a1,0xe
    8001eb96:	74e58593          	addi	a1,a1,1870 # 8002d2e0 <__func__.0+0x2c0>
    8001eb9a:	00f70663          	beq	a4,a5,8001eba6 <cycle_test_1+0x1b8>
    8001eb9e:	0000e597          	auipc	a1,0xe
    8001eba2:	75258593          	addi	a1,a1,1874 # 8002d2f0 <__func__.0+0x2d0>
    8001eba6:	0000e517          	auipc	a0,0xe
    8001ebaa:	78a50513          	addi	a0,a0,1930 # 8002d330 <__func__.0+0x310>
    8001ebae:	20c0c0ef          	jal	8002adba <printf>
    8001ebb2:	00032797          	auipc	a5,0x32
    8001ebb6:	45f7c783          	lbu	a5,1119(a5) # 80051011 <excpt+0x1>
    8001ebba:	c789                	beqz	a5,8001ebc4 <cycle_test_1+0x1d6>
    8001ebbc:	6498                	ld	a4,8(s1)
    8001ebbe:	4789                	li	a5,2
    8001ebc0:	00f70c63          	beq	a4,a5,8001ebd8 <cycle_test_1+0x1ea>
    8001ebc4:	0000e517          	auipc	a0,0xe
    8001ebc8:	77450513          	addi	a0,a0,1908 # 8002d338 <__func__.0+0x318>
    8001ebcc:	1ee0c0ef          	jal	8002adba <printf>
    8001ebd0:	02900513          	li	a0,41
    8001ebd4:	6d50a0ef          	jal	80029aa8 <putchar>
    8001ebd8:	4529                	li	a0,10
    8001ebda:	6cf0a0ef          	jal	80029aa8 <putchar>
    8001ebde:	c801                	beqz	s0,8001ebee <cycle_test_1+0x200>
    8001ebe0:	00032797          	auipc	a5,0x32
    8001ebe4:	4317c783          	lbu	a5,1073(a5) # 80051011 <excpt+0x1>
    8001ebe8:	4401                	li	s0,0
    8001ebea:	0c079e63          	bnez	a5,8001ecc6 <cycle_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001ebee:	4505                	li	a0,1
    8001ebf0:	a7ee20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ebf4:	97ee20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ebf8:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ebfc:	08200593          	li	a1,130
    8001ec00:	00016617          	auipc	a2,0x16
    8001ec04:	dc860613          	addi	a2,a2,-568 # 800349c8 <__func__.0+0x79a8>
    8001ec08:	0000e517          	auipc	a0,0xe
    8001ec0c:	71050513          	addi	a0,a0,1808 # 8002d318 <__func__.0+0x2f8>
    8001ec10:	1aa0c0ef          	jal	8002adba <printf>
    8001ec14:	00032797          	auipc	a5,0x32
    8001ec18:	3fd7c783          	lbu	a5,1021(a5) # 80051011 <excpt+0x1>
    8001ec1c:	0000e597          	auipc	a1,0xe
    8001ec20:	6d458593          	addi	a1,a1,1748 # 8002d2f0 <__func__.0+0x2d0>
    8001ec24:	cf89                	beqz	a5,8001ec3e <cycle_test_1+0x250>
    8001ec26:	6498                	ld	a4,8(s1)
    8001ec28:	4789                	li	a5,2
    8001ec2a:	0000e597          	auipc	a1,0xe
    8001ec2e:	6b658593          	addi	a1,a1,1718 # 8002d2e0 <__func__.0+0x2c0>
    8001ec32:	00f70663          	beq	a4,a5,8001ec3e <cycle_test_1+0x250>
    8001ec36:	0000e597          	auipc	a1,0xe
    8001ec3a:	6ba58593          	addi	a1,a1,1722 # 8002d2f0 <__func__.0+0x2d0>
    8001ec3e:	0000e517          	auipc	a0,0xe
    8001ec42:	6f250513          	addi	a0,a0,1778 # 8002d330 <__func__.0+0x310>
    8001ec46:	1740c0ef          	jal	8002adba <printf>
    8001ec4a:	00032797          	auipc	a5,0x32
    8001ec4e:	3c77c783          	lbu	a5,967(a5) # 80051011 <excpt+0x1>
    8001ec52:	c789                	beqz	a5,8001ec5c <cycle_test_1+0x26e>
    8001ec54:	6498                	ld	a4,8(s1)
    8001ec56:	4789                	li	a5,2
    8001ec58:	00f70c63          	beq	a4,a5,8001ec70 <cycle_test_1+0x282>
    8001ec5c:	0000e517          	auipc	a0,0xe
    8001ec60:	6dc50513          	addi	a0,a0,1756 # 8002d338 <__func__.0+0x318>
    8001ec64:	1560c0ef          	jal	8002adba <printf>
    8001ec68:	02900513          	li	a0,41
    8001ec6c:	63d0a0ef          	jal	80029aa8 <putchar>
    8001ec70:	4529                	li	a0,10
    8001ec72:	6370a0ef          	jal	80029aa8 <putchar>
    8001ec76:	c015                	beqz	s0,8001ec9a <cycle_test_1+0x2ac>
    8001ec78:	00032417          	auipc	s0,0x32
    8001ec7c:	39944403          	lbu	s0,921(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ec80:	0000e597          	auipc	a1,0xe
    8001ec84:	67058593          	addi	a1,a1,1648 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ec88:	cc11                	beqz	s0,8001eca4 <cycle_test_1+0x2b6>
    8001ec8a:	6498                	ld	a4,8(s1)
    8001ec8c:	4789                	li	a5,2
    TEST_END(); 
    8001ec8e:	0000e597          	auipc	a1,0xe
    8001ec92:	65258593          	addi	a1,a1,1618 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ec96:	00f70763          	beq	a4,a5,8001eca4 <cycle_test_1+0x2b6>
    8001ec9a:	4401                	li	s0,0
    TEST_END(); 
    8001ec9c:	0000e597          	auipc	a1,0xe
    8001eca0:	65458593          	addi	a1,a1,1620 # 8002d2f0 <__func__.0+0x2d0>
    8001eca4:	0000e517          	auipc	a0,0xe
    8001eca8:	6f450513          	addi	a0,a0,1780 # 8002d398 <__func__.0+0x378>
    8001ecac:	10e0c0ef          	jal	8002adba <printf>
    8001ecb0:	4511                	li	a0,4
    8001ecb2:	9bce20ef          	jal	80000e6e <goto_priv>
    8001ecb6:	ad5e20ef          	jal	8000178a <reset_state>
}
    8001ecba:	60e2                	ld	ra,24(sp)
    8001ecbc:	8522                	mv	a0,s0
    8001ecbe:	6442                	ld	s0,16(sp)
    8001ecc0:	64a2                	ld	s1,8(sp)
    8001ecc2:	6105                	addi	sp,sp,32
    8001ecc4:	8082                	ret
    TEST_ASSERT("vu access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ecc6:	6480                	ld	s0,8(s1)
    8001ecc8:	1479                	addi	s0,s0,-2
    8001ecca:	00143413          	seqz	s0,s0
    8001ecce:	b705                	j	8001ebee <cycle_test_1+0x200>
    TEST_ASSERT("hs access to cycle casuses illegal instruction exception when mcounteren.cy=0",
    8001ecd0:	6480                	ld	s0,8(s1)
    8001ecd2:	1479                	addi	s0,s0,-2
    8001ecd4:	00143413          	seqz	s0,s0
    8001ecd8:	bdbd                	j	8001eb56 <cycle_test_1+0x168>

000000008001ecda <cycle_test_2>:

bool cycle_test_2() {
    8001ecda:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001ecdc:	0000e597          	auipc	a1,0xe
    8001ece0:	b5c58593          	addi	a1,a1,-1188 # 8002c838 <__func__.39>
    8001ece4:	0000e517          	auipc	a0,0xe
    8001ece8:	61c50513          	addi	a0,a0,1564 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_2() {
    8001ecec:	e406                	sd	ra,8(sp)
    8001ecee:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001ecf0:	0ca0c0ef          	jal	8002adba <printf>
    8001ecf4:	4529                	li	a0,10
    8001ecf6:	5b30a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001ecfa:	4511                	li	a0,4
    8001ecfc:	972e20ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY);
    8001ed00:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HS);
    8001ed04:	450d                	li	a0,3
    8001ed06:	968e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ed0a:	868e20ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001ed0e:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ed12:	08200593          	li	a1,130
    8001ed16:	00016617          	auipc	a2,0x16
    8001ed1a:	d0260613          	addi	a2,a2,-766 # 80034a18 <__func__.0+0x79f8>
    8001ed1e:	0000e517          	auipc	a0,0xe
    8001ed22:	5fa50513          	addi	a0,a0,1530 # 8002d318 <__func__.0+0x2f8>
    8001ed26:	0940c0ef          	jal	8002adba <printf>
    8001ed2a:	00032797          	auipc	a5,0x32
    8001ed2e:	2e77c783          	lbu	a5,743(a5) # 80051011 <excpt+0x1>
    8001ed32:	0000e597          	auipc	a1,0xe
    8001ed36:	5ae58593          	addi	a1,a1,1454 # 8002d2e0 <__func__.0+0x2c0>
    8001ed3a:	c789                	beqz	a5,8001ed44 <cycle_test_2+0x6a>
    8001ed3c:	0000e597          	auipc	a1,0xe
    8001ed40:	5b458593          	addi	a1,a1,1460 # 8002d2f0 <__func__.0+0x2d0>
    8001ed44:	0000e517          	auipc	a0,0xe
    8001ed48:	5ec50513          	addi	a0,a0,1516 # 8002d330 <__func__.0+0x310>
    8001ed4c:	06e0c0ef          	jal	8002adba <printf>
    8001ed50:	00032797          	auipc	a5,0x32
    8001ed54:	2c17c783          	lbu	a5,705(a5) # 80051011 <excpt+0x1>
    8001ed58:	e7a1                	bnez	a5,8001eda0 <cycle_test_2+0xc6>
    8001ed5a:	4529                	li	a0,10
    8001ed5c:	54d0a0ef          	jal	80029aa8 <putchar>
    8001ed60:	00032797          	auipc	a5,0x32
    8001ed64:	2b17c783          	lbu	a5,689(a5) # 80051011 <excpt+0x1>
    8001ed68:	e795                	bnez	a5,8001ed94 <cycle_test_2+0xba>
    8001ed6a:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001ed6c:	0000e597          	auipc	a1,0xe
    8001ed70:	57458593          	addi	a1,a1,1396 # 8002d2e0 <__func__.0+0x2c0>
    8001ed74:	0000e517          	auipc	a0,0xe
    8001ed78:	62450513          	addi	a0,a0,1572 # 8002d398 <__func__.0+0x378>
    8001ed7c:	03e0c0ef          	jal	8002adba <printf>
    8001ed80:	4511                	li	a0,4
    8001ed82:	8ece20ef          	jal	80000e6e <goto_priv>
    8001ed86:	a05e20ef          	jal	8000178a <reset_state>
}
    8001ed8a:	60a2                	ld	ra,8(sp)
    8001ed8c:	8522                	mv	a0,s0
    8001ed8e:	6402                	ld	s0,0(sp)
    8001ed90:	0141                	addi	sp,sp,16
    8001ed92:	8082                	ret
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001ed94:	4401                	li	s0,0
    TEST_END(); 
    8001ed96:	0000e597          	auipc	a1,0xe
    8001ed9a:	55a58593          	addi	a1,a1,1370 # 8002d2f0 <__func__.0+0x2d0>
    8001ed9e:	bfd9                	j	8001ed74 <cycle_test_2+0x9a>
    TEST_ASSERT("hs access to cycle successful when mcounteren.cy=1",
    8001eda0:	0000e517          	auipc	a0,0xe
    8001eda4:	59850513          	addi	a0,a0,1432 # 8002d338 <__func__.0+0x318>
    8001eda8:	0120c0ef          	jal	8002adba <printf>
    8001edac:	02900513          	li	a0,41
    8001edb0:	4f90a0ef          	jal	80029aa8 <putchar>
    8001edb4:	b75d                	j	8001ed5a <cycle_test_2+0x80>

000000008001edb6 <cycle_test_3>:

bool cycle_test_3() {
    8001edb6:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001edb8:	0000e597          	auipc	a1,0xe
    8001edbc:	a9058593          	addi	a1,a1,-1392 # 8002c848 <__func__.38>
    8001edc0:	0000e517          	auipc	a0,0xe
    8001edc4:	54050513          	addi	a0,a0,1344 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_3() {
    8001edc8:	ec06                	sd	ra,24(sp)
    8001edca:	e822                	sd	s0,16(sp)
    8001edcc:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001edce:	7ed0b0ef          	jal	8002adba <printf>
    8001edd2:	4529                	li	a0,10
    8001edd4:	4d50a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001edd8:	4511                	li	a0,4
    8001edda:	894e20ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001edde:	1060f073          	csrci	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001ede2:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001ede6:	4505                	li	a0,1
    8001ede8:	886e20ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001edec:	f87e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001edf0:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001edf4:	08200593          	li	a1,130
    8001edf8:	00016617          	auipc	a2,0x16
    8001edfc:	c5860613          	addi	a2,a2,-936 # 80034a50 <__func__.0+0x7a30>
    8001ee00:	0000e517          	auipc	a0,0xe
    8001ee04:	51850513          	addi	a0,a0,1304 # 8002d318 <__func__.0+0x2f8>
    8001ee08:	7b30b0ef          	jal	8002adba <printf>
    8001ee0c:	00032797          	auipc	a5,0x32
    8001ee10:	2057c783          	lbu	a5,517(a5) # 80051011 <excpt+0x1>
    8001ee14:	00032497          	auipc	s1,0x32
    8001ee18:	1fc48493          	addi	s1,s1,508 # 80051010 <excpt>
    8001ee1c:	0000e597          	auipc	a1,0xe
    8001ee20:	4d458593          	addi	a1,a1,1236 # 8002d2f0 <__func__.0+0x2d0>
    8001ee24:	cf89                	beqz	a5,8001ee3e <cycle_test_3+0x88>
    8001ee26:	6498                	ld	a4,8(s1)
    8001ee28:	4789                	li	a5,2
    8001ee2a:	0000e597          	auipc	a1,0xe
    8001ee2e:	4b658593          	addi	a1,a1,1206 # 8002d2e0 <__func__.0+0x2c0>
    8001ee32:	00f70663          	beq	a4,a5,8001ee3e <cycle_test_3+0x88>
    8001ee36:	0000e597          	auipc	a1,0xe
    8001ee3a:	4ba58593          	addi	a1,a1,1210 # 8002d2f0 <__func__.0+0x2d0>
    8001ee3e:	0000e517          	auipc	a0,0xe
    8001ee42:	4f250513          	addi	a0,a0,1266 # 8002d330 <__func__.0+0x310>
    8001ee46:	7750b0ef          	jal	8002adba <printf>
    8001ee4a:	00032797          	auipc	a5,0x32
    8001ee4e:	1c77c783          	lbu	a5,455(a5) # 80051011 <excpt+0x1>
    8001ee52:	c789                	beqz	a5,8001ee5c <cycle_test_3+0xa6>
    8001ee54:	6498                	ld	a4,8(s1)
    8001ee56:	4789                	li	a5,2
    8001ee58:	00f70c63          	beq	a4,a5,8001ee70 <cycle_test_3+0xba>
    8001ee5c:	0000e517          	auipc	a0,0xe
    8001ee60:	4dc50513          	addi	a0,a0,1244 # 8002d338 <__func__.0+0x318>
    8001ee64:	7570b0ef          	jal	8002adba <printf>
    8001ee68:	02900513          	li	a0,41
    8001ee6c:	43d0a0ef          	jal	80029aa8 <putchar>
    8001ee70:	4529                	li	a0,10
    8001ee72:	4370a0ef          	jal	80029aa8 <putchar>
    8001ee76:	00032417          	auipc	s0,0x32
    8001ee7a:	19b44403          	lbu	s0,411(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ee7e:	0000e597          	auipc	a1,0xe
    8001ee82:	47258593          	addi	a1,a1,1138 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001ee86:	cc11                	beqz	s0,8001eea2 <cycle_test_3+0xec>
    8001ee88:	6498                	ld	a4,8(s1)
    8001ee8a:	4789                	li	a5,2
    TEST_END(); 
    8001ee8c:	0000e597          	auipc	a1,0xe
    8001ee90:	45458593          	addi	a1,a1,1108 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when scounteren.cy=0",
    8001ee94:	00f70763          	beq	a4,a5,8001eea2 <cycle_test_3+0xec>
    8001ee98:	4401                	li	s0,0
    TEST_END(); 
    8001ee9a:	0000e597          	auipc	a1,0xe
    8001ee9e:	45658593          	addi	a1,a1,1110 # 8002d2f0 <__func__.0+0x2d0>
    8001eea2:	0000e517          	auipc	a0,0xe
    8001eea6:	4f650513          	addi	a0,a0,1270 # 8002d398 <__func__.0+0x378>
    8001eeaa:	7110b0ef          	jal	8002adba <printf>
    8001eeae:	4511                	li	a0,4
    8001eeb0:	fbfe10ef          	jal	80000e6e <goto_priv>
    8001eeb4:	8d7e20ef          	jal	8000178a <reset_state>
}
    8001eeb8:	60e2                	ld	ra,24(sp)
    8001eeba:	8522                	mv	a0,s0
    8001eebc:	6442                	ld	s0,16(sp)
    8001eebe:	64a2                	ld	s1,8(sp)
    8001eec0:	6105                	addi	sp,sp,32
    8001eec2:	8082                	ret

000000008001eec4 <cycle_test_4>:

bool cycle_test_4() {
    8001eec4:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001eec6:	0000e597          	auipc	a1,0xe
    8001eeca:	99258593          	addi	a1,a1,-1646 # 8002c858 <__func__.37>
    8001eece:	0000e517          	auipc	a0,0xe
    8001eed2:	43250513          	addi	a0,a0,1074 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_4() {
    8001eed6:	e406                	sd	ra,8(sp)
    8001eed8:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001eeda:	6e10b0ef          	jal	8002adba <printf>
    8001eede:	4529                	li	a0,10
    8001eee0:	3c90a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001eee4:	4511                	li	a0,4
    8001eee6:	f89e10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001eeea:	1060e073          	csrsi	scounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001eeee:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_HU);
    8001eef2:	4505                	li	a0,1
    8001eef4:	f7be10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001eef8:	e7be10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001eefc:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001ef00:	08200593          	li	a1,130
    8001ef04:	00016617          	auipc	a2,0x16
    8001ef08:	b9c60613          	addi	a2,a2,-1124 # 80034aa0 <__func__.0+0x7a80>
    8001ef0c:	0000e517          	auipc	a0,0xe
    8001ef10:	40c50513          	addi	a0,a0,1036 # 8002d318 <__func__.0+0x2f8>
    8001ef14:	6a70b0ef          	jal	8002adba <printf>
    8001ef18:	00032797          	auipc	a5,0x32
    8001ef1c:	0f97c783          	lbu	a5,249(a5) # 80051011 <excpt+0x1>
    8001ef20:	0000e597          	auipc	a1,0xe
    8001ef24:	3c058593          	addi	a1,a1,960 # 8002d2e0 <__func__.0+0x2c0>
    8001ef28:	c789                	beqz	a5,8001ef32 <cycle_test_4+0x6e>
    8001ef2a:	0000e597          	auipc	a1,0xe
    8001ef2e:	3c658593          	addi	a1,a1,966 # 8002d2f0 <__func__.0+0x2d0>
    8001ef32:	0000e517          	auipc	a0,0xe
    8001ef36:	3fe50513          	addi	a0,a0,1022 # 8002d330 <__func__.0+0x310>
    8001ef3a:	6810b0ef          	jal	8002adba <printf>
    8001ef3e:	00032797          	auipc	a5,0x32
    8001ef42:	0d37c783          	lbu	a5,211(a5) # 80051011 <excpt+0x1>
    8001ef46:	e7a1                	bnez	a5,8001ef8e <cycle_test_4+0xca>
    8001ef48:	4529                	li	a0,10
    8001ef4a:	35f0a0ef          	jal	80029aa8 <putchar>
    8001ef4e:	00032797          	auipc	a5,0x32
    8001ef52:	0c37c783          	lbu	a5,195(a5) # 80051011 <excpt+0x1>
    8001ef56:	e795                	bnez	a5,8001ef82 <cycle_test_4+0xbe>
    8001ef58:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001ef5a:	0000e597          	auipc	a1,0xe
    8001ef5e:	38658593          	addi	a1,a1,902 # 8002d2e0 <__func__.0+0x2c0>
    8001ef62:	0000e517          	auipc	a0,0xe
    8001ef66:	43650513          	addi	a0,a0,1078 # 8002d398 <__func__.0+0x378>
    8001ef6a:	6510b0ef          	jal	8002adba <printf>
    8001ef6e:	4511                	li	a0,4
    8001ef70:	effe10ef          	jal	80000e6e <goto_priv>
    8001ef74:	817e20ef          	jal	8000178a <reset_state>
}
    8001ef78:	60a2                	ld	ra,8(sp)
    8001ef7a:	8522                	mv	a0,s0
    8001ef7c:	6402                	ld	s0,0(sp)
    8001ef7e:	0141                	addi	sp,sp,16
    8001ef80:	8082                	ret
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001ef82:	4401                	li	s0,0
    TEST_END(); 
    8001ef84:	0000e597          	auipc	a1,0xe
    8001ef88:	36c58593          	addi	a1,a1,876 # 8002d2f0 <__func__.0+0x2d0>
    8001ef8c:	bfd9                	j	8001ef62 <cycle_test_4+0x9e>
    TEST_ASSERT("hu access to cycle successful when mcounteren.cy=1 scounteren.cy=1",
    8001ef8e:	0000e517          	auipc	a0,0xe
    8001ef92:	3aa50513          	addi	a0,a0,938 # 8002d338 <__func__.0+0x318>
    8001ef96:	6250b0ef          	jal	8002adba <printf>
    8001ef9a:	02900513          	li	a0,41
    8001ef9e:	30b0a0ef          	jal	80029aa8 <putchar>
    8001efa2:	b75d                	j	8001ef48 <cycle_test_4+0x84>

000000008001efa4 <cycle_test_5>:

bool cycle_test_5() {
    8001efa4:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001efa6:	0000e597          	auipc	a1,0xe
    8001efaa:	8c258593          	addi	a1,a1,-1854 # 8002c868 <__func__.36>
    8001efae:	0000e517          	auipc	a0,0xe
    8001efb2:	35250513          	addi	a0,a0,850 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_5() {
    8001efb6:	ec06                	sd	ra,24(sp)
    8001efb8:	e822                	sd	s0,16(sp)
    8001efba:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001efbc:	5ff0b0ef          	jal	8002adba <printf>
    8001efc0:	4529                	li	a0,10
    8001efc2:	2e70a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001efc6:	4511                	li	a0,4
    8001efc8:	ea7e10ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001efcc:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001efd0:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001efd4:	4509                	li	a0,2
    8001efd6:	e99e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001efda:	d99e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001efde:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001efe2:	08200593          	li	a1,130
    8001efe6:	00016617          	auipc	a2,0x16
    8001efea:	b0260613          	addi	a2,a2,-1278 # 80034ae8 <__func__.0+0x7ac8>
    8001efee:	0000e517          	auipc	a0,0xe
    8001eff2:	32a50513          	addi	a0,a0,810 # 8002d318 <__func__.0+0x2f8>
    8001eff6:	5c50b0ef          	jal	8002adba <printf>
    8001effa:	00032797          	auipc	a5,0x32
    8001effe:	0177c783          	lbu	a5,23(a5) # 80051011 <excpt+0x1>
    8001f002:	00032497          	auipc	s1,0x32
    8001f006:	00e48493          	addi	s1,s1,14 # 80051010 <excpt>
    8001f00a:	0000e597          	auipc	a1,0xe
    8001f00e:	2e658593          	addi	a1,a1,742 # 8002d2f0 <__func__.0+0x2d0>
    8001f012:	cf89                	beqz	a5,8001f02c <cycle_test_5+0x88>
    8001f014:	6498                	ld	a4,8(s1)
    8001f016:	47d9                	li	a5,22
    8001f018:	0000e597          	auipc	a1,0xe
    8001f01c:	2c858593          	addi	a1,a1,712 # 8002d2e0 <__func__.0+0x2c0>
    8001f020:	00f70663          	beq	a4,a5,8001f02c <cycle_test_5+0x88>
    8001f024:	0000e597          	auipc	a1,0xe
    8001f028:	2cc58593          	addi	a1,a1,716 # 8002d2f0 <__func__.0+0x2d0>
    8001f02c:	0000e517          	auipc	a0,0xe
    8001f030:	30450513          	addi	a0,a0,772 # 8002d330 <__func__.0+0x310>
    8001f034:	5870b0ef          	jal	8002adba <printf>
    8001f038:	00032797          	auipc	a5,0x32
    8001f03c:	fd97c783          	lbu	a5,-39(a5) # 80051011 <excpt+0x1>
    8001f040:	c789                	beqz	a5,8001f04a <cycle_test_5+0xa6>
    8001f042:	6498                	ld	a4,8(s1)
    8001f044:	47d9                	li	a5,22
    8001f046:	00f70c63          	beq	a4,a5,8001f05e <cycle_test_5+0xba>
    8001f04a:	0000e517          	auipc	a0,0xe
    8001f04e:	2ee50513          	addi	a0,a0,750 # 8002d338 <__func__.0+0x318>
    8001f052:	5690b0ef          	jal	8002adba <printf>
    8001f056:	02900513          	li	a0,41
    8001f05a:	24f0a0ef          	jal	80029aa8 <putchar>
    8001f05e:	4529                	li	a0,10
    8001f060:	2490a0ef          	jal	80029aa8 <putchar>
    8001f064:	00032417          	auipc	s0,0x32
    8001f068:	fad44403          	lbu	s0,-83(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f06c:	0000e597          	auipc	a1,0xe
    8001f070:	28458593          	addi	a1,a1,644 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f074:	cc11                	beqz	s0,8001f090 <cycle_test_5+0xec>
    8001f076:	6498                	ld	a4,8(s1)
    8001f078:	47d9                	li	a5,22
    TEST_END(); 
    8001f07a:	0000e597          	auipc	a1,0xe
    8001f07e:	26658593          	addi	a1,a1,614 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0",
    8001f082:	00f70763          	beq	a4,a5,8001f090 <cycle_test_5+0xec>
    8001f086:	4401                	li	s0,0
    TEST_END(); 
    8001f088:	0000e597          	auipc	a1,0xe
    8001f08c:	26858593          	addi	a1,a1,616 # 8002d2f0 <__func__.0+0x2d0>
    8001f090:	0000e517          	auipc	a0,0xe
    8001f094:	30850513          	addi	a0,a0,776 # 8002d398 <__func__.0+0x378>
    8001f098:	5230b0ef          	jal	8002adba <printf>
    8001f09c:	4511                	li	a0,4
    8001f09e:	dd1e10ef          	jal	80000e6e <goto_priv>
    8001f0a2:	ee8e20ef          	jal	8000178a <reset_state>
}
    8001f0a6:	60e2                	ld	ra,24(sp)
    8001f0a8:	8522                	mv	a0,s0
    8001f0aa:	6442                	ld	s0,16(sp)
    8001f0ac:	64a2                	ld	s1,8(sp)
    8001f0ae:	6105                	addi	sp,sp,32
    8001f0b0:	8082                	ret

000000008001f0b2 <cycle_test_6>:

bool cycle_test_6() {
    8001f0b2:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f0b4:	0000d597          	auipc	a1,0xd
    8001f0b8:	7c458593          	addi	a1,a1,1988 # 8002c878 <__func__.35>
    8001f0bc:	0000e517          	auipc	a0,0xe
    8001f0c0:	24450513          	addi	a0,a0,580 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_6() {
    8001f0c4:	e406                	sd	ra,8(sp)
    8001f0c6:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f0c8:	4f30b0ef          	jal	8002adba <printf>
    8001f0cc:	4529                	li	a0,10
    8001f0ce:	1db0a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001f0d2:	4511                	li	a0,4
    8001f0d4:	d9be10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f0d8:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f0dc:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f0e0:	4509                	li	a0,2
    8001f0e2:	d8de10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f0e6:	c8de10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f0ea:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f0ee:	08200593          	li	a1,130
    8001f0f2:	00016617          	auipc	a2,0x16
    8001f0f6:	a5660613          	addi	a2,a2,-1450 # 80034b48 <__func__.0+0x7b28>
    8001f0fa:	0000e517          	auipc	a0,0xe
    8001f0fe:	21e50513          	addi	a0,a0,542 # 8002d318 <__func__.0+0x2f8>
    8001f102:	4b90b0ef          	jal	8002adba <printf>
    8001f106:	00032797          	auipc	a5,0x32
    8001f10a:	f0b7c783          	lbu	a5,-245(a5) # 80051011 <excpt+0x1>
    8001f10e:	0000e597          	auipc	a1,0xe
    8001f112:	1d258593          	addi	a1,a1,466 # 8002d2e0 <__func__.0+0x2c0>
    8001f116:	c789                	beqz	a5,8001f120 <cycle_test_6+0x6e>
    8001f118:	0000e597          	auipc	a1,0xe
    8001f11c:	1d858593          	addi	a1,a1,472 # 8002d2f0 <__func__.0+0x2d0>
    8001f120:	0000e517          	auipc	a0,0xe
    8001f124:	21050513          	addi	a0,a0,528 # 8002d330 <__func__.0+0x310>
    8001f128:	4930b0ef          	jal	8002adba <printf>
    8001f12c:	00032797          	auipc	a5,0x32
    8001f130:	ee57c783          	lbu	a5,-283(a5) # 80051011 <excpt+0x1>
    8001f134:	e7a1                	bnez	a5,8001f17c <cycle_test_6+0xca>
    8001f136:	4529                	li	a0,10
    8001f138:	1710a0ef          	jal	80029aa8 <putchar>
    8001f13c:	00032797          	auipc	a5,0x32
    8001f140:	ed57c783          	lbu	a5,-299(a5) # 80051011 <excpt+0x1>
    8001f144:	e795                	bnez	a5,8001f170 <cycle_test_6+0xbe>
    8001f146:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f148:	0000e597          	auipc	a1,0xe
    8001f14c:	19858593          	addi	a1,a1,408 # 8002d2e0 <__func__.0+0x2c0>
    8001f150:	0000e517          	auipc	a0,0xe
    8001f154:	24850513          	addi	a0,a0,584 # 8002d398 <__func__.0+0x378>
    8001f158:	4630b0ef          	jal	8002adba <printf>
    8001f15c:	4511                	li	a0,4
    8001f15e:	d11e10ef          	jal	80000e6e <goto_priv>
    8001f162:	e28e20ef          	jal	8000178a <reset_state>
}
    8001f166:	60a2                	ld	ra,8(sp)
    8001f168:	8522                	mv	a0,s0
    8001f16a:	6402                	ld	s0,0(sp)
    8001f16c:	0141                	addi	sp,sp,16
    8001f16e:	8082                	ret
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f170:	4401                	li	s0,0
    TEST_END(); 
    8001f172:	0000e597          	auipc	a1,0xe
    8001f176:	17e58593          	addi	a1,a1,382 # 8002d2f0 <__func__.0+0x2d0>
    8001f17a:	bfd9                	j	8001f150 <cycle_test_6+0x9e>
    TEST_ASSERT("vs access to cycle successful when mcounteren.cy=1 hcounteren.cy=1",
    8001f17c:	0000e517          	auipc	a0,0xe
    8001f180:	1bc50513          	addi	a0,a0,444 # 8002d338 <__func__.0+0x318>
    8001f184:	4370b0ef          	jal	8002adba <printf>
    8001f188:	02900513          	li	a0,41
    8001f18c:	11d0a0ef          	jal	80029aa8 <putchar>
    8001f190:	b75d                	j	8001f136 <cycle_test_6+0x84>

000000008001f192 <cycle_test_7>:

bool cycle_test_7() {
    8001f192:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f194:	0000d597          	auipc	a1,0xd
    8001f198:	6f458593          	addi	a1,a1,1780 # 8002c888 <__func__.34>
    8001f19c:	0000e517          	auipc	a0,0xe
    8001f1a0:	16450513          	addi	a0,a0,356 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_7() {
    8001f1a4:	e406                	sd	ra,8(sp)
    8001f1a6:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f1a8:	4130b0ef          	jal	8002adba <printf>
    8001f1ac:	4529                	li	a0,10
    8001f1ae:	0fb0a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001f1b2:	4511                	li	a0,4
    8001f1b4:	cbbe10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f1b8:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f1bc:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f1c0:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f1c4:	4501                	li	a0,0
    8001f1c6:	ca9e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f1ca:	ba9e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f1ce:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f1d2:	08200593          	li	a1,130
    8001f1d6:	00016617          	auipc	a2,0x16
    8001f1da:	9ba60613          	addi	a2,a2,-1606 # 80034b90 <__func__.0+0x7b70>
    8001f1de:	0000e517          	auipc	a0,0xe
    8001f1e2:	13a50513          	addi	a0,a0,314 # 8002d318 <__func__.0+0x2f8>
    8001f1e6:	3d50b0ef          	jal	8002adba <printf>
    8001f1ea:	00032797          	auipc	a5,0x32
    8001f1ee:	e277c783          	lbu	a5,-473(a5) # 80051011 <excpt+0x1>
    8001f1f2:	0000e597          	auipc	a1,0xe
    8001f1f6:	0ee58593          	addi	a1,a1,238 # 8002d2e0 <__func__.0+0x2c0>
    8001f1fa:	c789                	beqz	a5,8001f204 <cycle_test_7+0x72>
    8001f1fc:	0000e597          	auipc	a1,0xe
    8001f200:	0f458593          	addi	a1,a1,244 # 8002d2f0 <__func__.0+0x2d0>
    8001f204:	0000e517          	auipc	a0,0xe
    8001f208:	12c50513          	addi	a0,a0,300 # 8002d330 <__func__.0+0x310>
    8001f20c:	3af0b0ef          	jal	8002adba <printf>
    8001f210:	00032797          	auipc	a5,0x32
    8001f214:	e017c783          	lbu	a5,-511(a5) # 80051011 <excpt+0x1>
    8001f218:	e7a1                	bnez	a5,8001f260 <cycle_test_7+0xce>
    8001f21a:	4529                	li	a0,10
    8001f21c:	08d0a0ef          	jal	80029aa8 <putchar>
    8001f220:	00032797          	auipc	a5,0x32
    8001f224:	df17c783          	lbu	a5,-527(a5) # 80051011 <excpt+0x1>
    8001f228:	e795                	bnez	a5,8001f254 <cycle_test_7+0xc2>
    8001f22a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f22c:	0000e597          	auipc	a1,0xe
    8001f230:	0b458593          	addi	a1,a1,180 # 8002d2e0 <__func__.0+0x2c0>
    8001f234:	0000e517          	auipc	a0,0xe
    8001f238:	16450513          	addi	a0,a0,356 # 8002d398 <__func__.0+0x378>
    8001f23c:	37f0b0ef          	jal	8002adba <printf>
    8001f240:	4511                	li	a0,4
    8001f242:	c2de10ef          	jal	80000e6e <goto_priv>
    8001f246:	d44e20ef          	jal	8000178a <reset_state>
}
    8001f24a:	60a2                	ld	ra,8(sp)
    8001f24c:	8522                	mv	a0,s0
    8001f24e:	6402                	ld	s0,0(sp)
    8001f250:	0141                	addi	sp,sp,16
    8001f252:	8082                	ret
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f254:	4401                	li	s0,0
    TEST_END(); 
    8001f256:	0000e597          	auipc	a1,0xe
    8001f25a:	09a58593          	addi	a1,a1,154 # 8002d2f0 <__func__.0+0x2d0>
    8001f25e:	bfd9                	j	8001f234 <cycle_test_7+0xa2>
    TEST_ASSERT("vu access to cycle successful when mcounteren.cy=1 hcounteren.cy=1 scounteren.cy=1",
    8001f260:	0000e517          	auipc	a0,0xe
    8001f264:	0d850513          	addi	a0,a0,216 # 8002d338 <__func__.0+0x318>
    8001f268:	3530b0ef          	jal	8002adba <printf>
    8001f26c:	02900513          	li	a0,41
    8001f270:	0390a0ef          	jal	80029aa8 <putchar>
    8001f274:	b75d                	j	8001f21a <cycle_test_7+0x88>

000000008001f276 <cycle_test_8>:

bool cycle_test_8() {
    8001f276:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f278:	0000d597          	auipc	a1,0xd
    8001f27c:	62058593          	addi	a1,a1,1568 # 8002c898 <__func__.33>
    8001f280:	0000e517          	auipc	a0,0xe
    8001f284:	08050513          	addi	a0,a0,128 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_8() {
    8001f288:	ec06                	sd	ra,24(sp)
    8001f28a:	e822                	sd	s0,16(sp)
    8001f28c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f28e:	32d0b0ef          	jal	8002adba <printf>
    8001f292:	4529                	li	a0,10
    8001f294:	0150a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001f298:	4511                	li	a0,4
    8001f29a:	bd5e10ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f29e:	6060f073          	csrci	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f2a2:	3060e073          	csrsi	mcounteren,1
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f2a6:	1060e073          	csrsi	scounteren,1

    goto_priv(PRIV_VU);
    8001f2aa:	4501                	li	a0,0
    8001f2ac:	bc3e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f2b0:	ac3e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f2b4:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f2b8:	08200593          	li	a1,130
    8001f2bc:	00016617          	auipc	a2,0x16
    8001f2c0:	92c60613          	addi	a2,a2,-1748 # 80034be8 <__func__.0+0x7bc8>
    8001f2c4:	0000e517          	auipc	a0,0xe
    8001f2c8:	05450513          	addi	a0,a0,84 # 8002d318 <__func__.0+0x2f8>
    8001f2cc:	2ef0b0ef          	jal	8002adba <printf>
    8001f2d0:	00032797          	auipc	a5,0x32
    8001f2d4:	d417c783          	lbu	a5,-703(a5) # 80051011 <excpt+0x1>
    8001f2d8:	00032497          	auipc	s1,0x32
    8001f2dc:	d3848493          	addi	s1,s1,-712 # 80051010 <excpt>
    8001f2e0:	0000e597          	auipc	a1,0xe
    8001f2e4:	01058593          	addi	a1,a1,16 # 8002d2f0 <__func__.0+0x2d0>
    8001f2e8:	cf89                	beqz	a5,8001f302 <cycle_test_8+0x8c>
    8001f2ea:	6498                	ld	a4,8(s1)
    8001f2ec:	47d9                	li	a5,22
    8001f2ee:	0000e597          	auipc	a1,0xe
    8001f2f2:	ff258593          	addi	a1,a1,-14 # 8002d2e0 <__func__.0+0x2c0>
    8001f2f6:	00f70663          	beq	a4,a5,8001f302 <cycle_test_8+0x8c>
    8001f2fa:	0000e597          	auipc	a1,0xe
    8001f2fe:	ff658593          	addi	a1,a1,-10 # 8002d2f0 <__func__.0+0x2d0>
    8001f302:	0000e517          	auipc	a0,0xe
    8001f306:	02e50513          	addi	a0,a0,46 # 8002d330 <__func__.0+0x310>
    8001f30a:	2b10b0ef          	jal	8002adba <printf>
    8001f30e:	00032797          	auipc	a5,0x32
    8001f312:	d037c783          	lbu	a5,-765(a5) # 80051011 <excpt+0x1>
    8001f316:	c789                	beqz	a5,8001f320 <cycle_test_8+0xaa>
    8001f318:	6498                	ld	a4,8(s1)
    8001f31a:	47d9                	li	a5,22
    8001f31c:	00f70c63          	beq	a4,a5,8001f334 <cycle_test_8+0xbe>
    8001f320:	0000e517          	auipc	a0,0xe
    8001f324:	01850513          	addi	a0,a0,24 # 8002d338 <__func__.0+0x318>
    8001f328:	2930b0ef          	jal	8002adba <printf>
    8001f32c:	02900513          	li	a0,41
    8001f330:	7780a0ef          	jal	80029aa8 <putchar>
    8001f334:	4529                	li	a0,10
    8001f336:	7720a0ef          	jal	80029aa8 <putchar>
    8001f33a:	00032417          	auipc	s0,0x32
    8001f33e:	cd744403          	lbu	s0,-809(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001f342:	0000e597          	auipc	a1,0xe
    8001f346:	fae58593          	addi	a1,a1,-82 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f34a:	cc11                	beqz	s0,8001f366 <cycle_test_8+0xf0>
    8001f34c:	6498                	ld	a4,8(s1)
    8001f34e:	47d9                	li	a5,22
    TEST_END(); 
    8001f350:	0000e597          	auipc	a1,0xe
    8001f354:	f9058593          	addi	a1,a1,-112 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to cycle casuses virtual instruction exception when mcounteren.cy=1 hcounteren.cy=0 scounteren.cy=1",
    8001f358:	00f70763          	beq	a4,a5,8001f366 <cycle_test_8+0xf0>
    8001f35c:	4401                	li	s0,0
    TEST_END(); 
    8001f35e:	0000e597          	auipc	a1,0xe
    8001f362:	f9258593          	addi	a1,a1,-110 # 8002d2f0 <__func__.0+0x2d0>
    8001f366:	0000e517          	auipc	a0,0xe
    8001f36a:	03250513          	addi	a0,a0,50 # 8002d398 <__func__.0+0x378>
    8001f36e:	24d0b0ef          	jal	8002adba <printf>
    8001f372:	4511                	li	a0,4
    8001f374:	afbe10ef          	jal	80000e6e <goto_priv>
    8001f378:	c12e20ef          	jal	8000178a <reset_state>
}
    8001f37c:	60e2                	ld	ra,24(sp)
    8001f37e:	8522                	mv	a0,s0
    8001f380:	6442                	ld	s0,16(sp)
    8001f382:	64a2                	ld	s1,8(sp)
    8001f384:	6105                	addi	sp,sp,32
    8001f386:	8082                	ret

000000008001f388 <cycle_test_9>:

bool cycle_test_9() {
    8001f388:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f38a:	0000d597          	auipc	a1,0xd
    8001f38e:	51e58593          	addi	a1,a1,1310 # 8002c8a8 <__func__.32>
    8001f392:	0000e517          	auipc	a0,0xe
    8001f396:	f6e50513          	addi	a0,a0,-146 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_9() {
    8001f39a:	ec06                	sd	ra,24(sp)
    8001f39c:	e822                	sd	s0,16(sp)
    8001f39e:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f3a0:	21b0b0ef          	jal	8002adba <printf>
    8001f3a4:	4529                	li	a0,10
    8001f3a6:	7020a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001f3aa:	4511                	li	a0,4
    8001f3ac:	ac3e10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f3b0:	3060e073          	csrsi	mcounteren,1
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_CY); 
    8001f3b4:	1060f073          	csrci	scounteren,1

    goto_priv(PRIV_HU);
    8001f3b8:	4505                	li	a0,1
    8001f3ba:	ab5e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f3be:	9b5e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f3c2:	c00027f3          	rdcycle	a5

    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f3c6:	08200593          	li	a1,130
    8001f3ca:	00016617          	auipc	a2,0x16
    8001f3ce:	88e60613          	addi	a2,a2,-1906 # 80034c58 <__func__.0+0x7c38>
    8001f3d2:	0000e517          	auipc	a0,0xe
    8001f3d6:	f4650513          	addi	a0,a0,-186 # 8002d318 <__func__.0+0x2f8>
    8001f3da:	1e10b0ef          	jal	8002adba <printf>
    8001f3de:	00032797          	auipc	a5,0x32
    8001f3e2:	c337c783          	lbu	a5,-973(a5) # 80051011 <excpt+0x1>
    8001f3e6:	00032497          	auipc	s1,0x32
    8001f3ea:	c2a48493          	addi	s1,s1,-982 # 80051010 <excpt>
    8001f3ee:	0000e597          	auipc	a1,0xe
    8001f3f2:	f0258593          	addi	a1,a1,-254 # 8002d2f0 <__func__.0+0x2d0>
    8001f3f6:	cf89                	beqz	a5,8001f410 <cycle_test_9+0x88>
    8001f3f8:	6498                	ld	a4,8(s1)
    8001f3fa:	4789                	li	a5,2
    8001f3fc:	0000e597          	auipc	a1,0xe
    8001f400:	ee458593          	addi	a1,a1,-284 # 8002d2e0 <__func__.0+0x2c0>
    8001f404:	00f70663          	beq	a4,a5,8001f410 <cycle_test_9+0x88>
    8001f408:	0000e597          	auipc	a1,0xe
    8001f40c:	ee858593          	addi	a1,a1,-280 # 8002d2f0 <__func__.0+0x2d0>
    8001f410:	0000e517          	auipc	a0,0xe
    8001f414:	f2050513          	addi	a0,a0,-224 # 8002d330 <__func__.0+0x310>
    8001f418:	1a30b0ef          	jal	8002adba <printf>
    8001f41c:	00032797          	auipc	a5,0x32
    8001f420:	bf57c783          	lbu	a5,-1035(a5) # 80051011 <excpt+0x1>
    8001f424:	c789                	beqz	a5,8001f42e <cycle_test_9+0xa6>
    8001f426:	6498                	ld	a4,8(s1)
    8001f428:	4789                	li	a5,2
    8001f42a:	00f70c63          	beq	a4,a5,8001f442 <cycle_test_9+0xba>
    8001f42e:	0000e517          	auipc	a0,0xe
    8001f432:	f0a50513          	addi	a0,a0,-246 # 8002d338 <__func__.0+0x318>
    8001f436:	1850b0ef          	jal	8002adba <printf>
    8001f43a:	02900513          	li	a0,41
    8001f43e:	66a0a0ef          	jal	80029aa8 <putchar>
    8001f442:	4529                	li	a0,10
    8001f444:	6640a0ef          	jal	80029aa8 <putchar>
    8001f448:	00032417          	auipc	s0,0x32
    8001f44c:	bc944403          	lbu	s0,-1079(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f450:	0000e597          	auipc	a1,0xe
    8001f454:	ea058593          	addi	a1,a1,-352 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f458:	cc11                	beqz	s0,8001f474 <cycle_test_9+0xec>
    8001f45a:	6498                	ld	a4,8(s1)
    8001f45c:	4789                	li	a5,2
    TEST_END(); 
    8001f45e:	0000e597          	auipc	a1,0xe
    8001f462:	e8258593          	addi	a1,a1,-382 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to cycle casuses illegal instruction exception when mcounteren.cy=1 scounteren.cy=0",
    8001f466:	00f70763          	beq	a4,a5,8001f474 <cycle_test_9+0xec>
    8001f46a:	4401                	li	s0,0
    TEST_END(); 
    8001f46c:	0000e597          	auipc	a1,0xe
    8001f470:	e8458593          	addi	a1,a1,-380 # 8002d2f0 <__func__.0+0x2d0>
    8001f474:	0000e517          	auipc	a0,0xe
    8001f478:	f2450513          	addi	a0,a0,-220 # 8002d398 <__func__.0+0x378>
    8001f47c:	13f0b0ef          	jal	8002adba <printf>
    8001f480:	4511                	li	a0,4
    8001f482:	9ede10ef          	jal	80000e6e <goto_priv>
    8001f486:	b04e20ef          	jal	8000178a <reset_state>
}
    8001f48a:	60e2                	ld	ra,24(sp)
    8001f48c:	8522                	mv	a0,s0
    8001f48e:	6442                	ld	s0,16(sp)
    8001f490:	64a2                	ld	s1,8(sp)
    8001f492:	6105                	addi	sp,sp,32
    8001f494:	8082                	ret

000000008001f496 <cycle_test_10>:

bool cycle_test_10() {
    8001f496:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f498:	0000d597          	auipc	a1,0xd
    8001f49c:	42058593          	addi	a1,a1,1056 # 8002c8b8 <__func__.31>
    8001f4a0:	0000e517          	auipc	a0,0xe
    8001f4a4:	e6050513          	addi	a0,a0,-416 # 8002d300 <__func__.0+0x2e0>
bool cycle_test_10() {
    8001f4a8:	e406                	sd	ra,8(sp)
    8001f4aa:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f4ac:	10f0b0ef          	jal	8002adba <printf>
    8001f4b0:	4529                	li	a0,10
    8001f4b2:	5f60a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001f4b6:	4511                	li	a0,4
    8001f4b8:	9b7e10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_CY); 
    8001f4bc:	6060e073          	csrsi	hcounteren,1
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_CY); 
    8001f4c0:	3060e073          	csrsi	mcounteren,1

    goto_priv(PRIV_VS);
    8001f4c4:	4509                	li	a0,2
    8001f4c6:	9a9e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f4ca:	8a9e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_CYCLE);
    8001f4ce:	c00027f3          	rdcycle	a5

    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f4d2:	08200593          	li	a1,130
    8001f4d6:	00015617          	auipc	a2,0x15
    8001f4da:	7e260613          	addi	a2,a2,2018 # 80034cb8 <__func__.0+0x7c98>
    8001f4de:	0000e517          	auipc	a0,0xe
    8001f4e2:	e3a50513          	addi	a0,a0,-454 # 8002d318 <__func__.0+0x2f8>
    8001f4e6:	0d50b0ef          	jal	8002adba <printf>
    8001f4ea:	00032797          	auipc	a5,0x32
    8001f4ee:	b277c783          	lbu	a5,-1241(a5) # 80051011 <excpt+0x1>
    8001f4f2:	0000e597          	auipc	a1,0xe
    8001f4f6:	dee58593          	addi	a1,a1,-530 # 8002d2e0 <__func__.0+0x2c0>
    8001f4fa:	c789                	beqz	a5,8001f504 <cycle_test_10+0x6e>
    8001f4fc:	0000e597          	auipc	a1,0xe
    8001f500:	df458593          	addi	a1,a1,-524 # 8002d2f0 <__func__.0+0x2d0>
    8001f504:	0000e517          	auipc	a0,0xe
    8001f508:	e2c50513          	addi	a0,a0,-468 # 8002d330 <__func__.0+0x310>
    8001f50c:	0af0b0ef          	jal	8002adba <printf>
    8001f510:	00032797          	auipc	a5,0x32
    8001f514:	b017c783          	lbu	a5,-1279(a5) # 80051011 <excpt+0x1>
    8001f518:	e7a1                	bnez	a5,8001f560 <cycle_test_10+0xca>
    8001f51a:	4529                	li	a0,10
    8001f51c:	58c0a0ef          	jal	80029aa8 <putchar>
    8001f520:	00032797          	auipc	a5,0x32
    8001f524:	af17c783          	lbu	a5,-1295(a5) # 80051011 <excpt+0x1>
    8001f528:	e795                	bnez	a5,8001f554 <cycle_test_10+0xbe>
    8001f52a:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001f52c:	0000e597          	auipc	a1,0xe
    8001f530:	db458593          	addi	a1,a1,-588 # 8002d2e0 <__func__.0+0x2c0>
    8001f534:	0000e517          	auipc	a0,0xe
    8001f538:	e6450513          	addi	a0,a0,-412 # 8002d398 <__func__.0+0x378>
    8001f53c:	07f0b0ef          	jal	8002adba <printf>
    8001f540:	4511                	li	a0,4
    8001f542:	92de10ef          	jal	80000e6e <goto_priv>
    8001f546:	a44e20ef          	jal	8000178a <reset_state>
}
    8001f54a:	60a2                	ld	ra,8(sp)
    8001f54c:	8522                	mv	a0,s0
    8001f54e:	6402                	ld	s0,0(sp)
    8001f550:	0141                	addi	sp,sp,16
    8001f552:	8082                	ret
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f554:	4401                	li	s0,0
    TEST_END(); 
    8001f556:	0000e597          	auipc	a1,0xe
    8001f55a:	d9a58593          	addi	a1,a1,-614 # 8002d2f0 <__func__.0+0x2d0>
    8001f55e:	bfd9                	j	8001f534 <cycle_test_10+0x9e>
    TEST_ASSERT("vu access to time successful exception when mcounteren.cy=1 hcounteren.cy=1",
    8001f560:	0000e517          	auipc	a0,0xe
    8001f564:	dd850513          	addi	a0,a0,-552 # 8002d338 <__func__.0+0x318>
    8001f568:	0530b0ef          	jal	8002adba <printf>
    8001f56c:	02900513          	li	a0,41
    8001f570:	5380a0ef          	jal	80029aa8 <putchar>
    8001f574:	b75d                	j	8001f51a <cycle_test_10+0x84>

000000008001f576 <instret_test_1>:


bool instret_test_1() {
    8001f576:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f578:	0000d597          	auipc	a1,0xd
    8001f57c:	35058593          	addi	a1,a1,848 # 8002c8c8 <__func__.30>
    8001f580:	0000e517          	auipc	a0,0xe
    8001f584:	d8050513          	addi	a0,a0,-640 # 8002d300 <__func__.0+0x2e0>
bool instret_test_1() {
    8001f588:	ec06                	sd	ra,24(sp)
    8001f58a:	e822                	sd	s0,16(sp)
    8001f58c:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f58e:	02d0b0ef          	jal	8002adba <printf>
    8001f592:	4529                	li	a0,10
    8001f594:	5140a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001f598:	4511                	li	a0,4
    8001f59a:	8d5e10ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001f59e:	30627073          	csrci	mcounteren,4

    goto_priv(PRIV_VS);
    8001f5a2:	4509                	li	a0,2
    8001f5a4:	8cbe10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f5a8:	fcae10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f5ac:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f5b0:	08200593          	li	a1,130
    8001f5b4:	00015617          	auipc	a2,0x15
    8001f5b8:	75460613          	addi	a2,a2,1876 # 80034d08 <__func__.0+0x7ce8>
    8001f5bc:	0000e517          	auipc	a0,0xe
    8001f5c0:	d5c50513          	addi	a0,a0,-676 # 8002d318 <__func__.0+0x2f8>
    8001f5c4:	7f60b0ef          	jal	8002adba <printf>
    8001f5c8:	00032797          	auipc	a5,0x32
    8001f5cc:	a497c783          	lbu	a5,-1463(a5) # 80051011 <excpt+0x1>
    8001f5d0:	00032497          	auipc	s1,0x32
    8001f5d4:	a4048493          	addi	s1,s1,-1472 # 80051010 <excpt>
    8001f5d8:	0000e597          	auipc	a1,0xe
    8001f5dc:	d1858593          	addi	a1,a1,-744 # 8002d2f0 <__func__.0+0x2d0>
    8001f5e0:	cf89                	beqz	a5,8001f5fa <instret_test_1+0x84>
    8001f5e2:	6498                	ld	a4,8(s1)
    8001f5e4:	4789                	li	a5,2
    8001f5e6:	0000e597          	auipc	a1,0xe
    8001f5ea:	cfa58593          	addi	a1,a1,-774 # 8002d2e0 <__func__.0+0x2c0>
    8001f5ee:	00f70663          	beq	a4,a5,8001f5fa <instret_test_1+0x84>
    8001f5f2:	0000e597          	auipc	a1,0xe
    8001f5f6:	cfe58593          	addi	a1,a1,-770 # 8002d2f0 <__func__.0+0x2d0>
    8001f5fa:	0000e517          	auipc	a0,0xe
    8001f5fe:	d3650513          	addi	a0,a0,-714 # 8002d330 <__func__.0+0x310>
    8001f602:	7b80b0ef          	jal	8002adba <printf>
    8001f606:	00032797          	auipc	a5,0x32
    8001f60a:	a0b7c783          	lbu	a5,-1525(a5) # 80051011 <excpt+0x1>
    8001f60e:	c789                	beqz	a5,8001f618 <instret_test_1+0xa2>
    8001f610:	6498                	ld	a4,8(s1)
    8001f612:	4789                	li	a5,2
    8001f614:	00f70c63          	beq	a4,a5,8001f62c <instret_test_1+0xb6>
    8001f618:	0000e517          	auipc	a0,0xe
    8001f61c:	d2050513          	addi	a0,a0,-736 # 8002d338 <__func__.0+0x318>
    8001f620:	79a0b0ef          	jal	8002adba <printf>
    8001f624:	02900513          	li	a0,41
    8001f628:	4800a0ef          	jal	80029aa8 <putchar>
    8001f62c:	4529                	li	a0,10
    8001f62e:	47a0a0ef          	jal	80029aa8 <putchar>
    8001f632:	00032797          	auipc	a5,0x32
    8001f636:	9df7c783          	lbu	a5,-1569(a5) # 80051011 <excpt+0x1>
    8001f63a:	4401                	li	s0,0
    8001f63c:	c789                	beqz	a5,8001f646 <instret_test_1+0xd0>
    8001f63e:	6480                	ld	s0,8(s1)
    8001f640:	1479                	addi	s0,s0,-2
    8001f642:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HS);
    8001f646:	450d                	li	a0,3
    8001f648:	827e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f64c:	f26e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f650:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f654:	08200593          	li	a1,130
    8001f658:	00015617          	auipc	a2,0x15
    8001f65c:	70060613          	addi	a2,a2,1792 # 80034d58 <__func__.0+0x7d38>
    8001f660:	0000e517          	auipc	a0,0xe
    8001f664:	cb850513          	addi	a0,a0,-840 # 8002d318 <__func__.0+0x2f8>
    8001f668:	7520b0ef          	jal	8002adba <printf>
    8001f66c:	00032797          	auipc	a5,0x32
    8001f670:	9a57c783          	lbu	a5,-1627(a5) # 80051011 <excpt+0x1>
    8001f674:	0000e597          	auipc	a1,0xe
    8001f678:	c7c58593          	addi	a1,a1,-900 # 8002d2f0 <__func__.0+0x2d0>
    8001f67c:	cf89                	beqz	a5,8001f696 <instret_test_1+0x120>
    8001f67e:	6498                	ld	a4,8(s1)
    8001f680:	4789                	li	a5,2
    8001f682:	0000e597          	auipc	a1,0xe
    8001f686:	c5e58593          	addi	a1,a1,-930 # 8002d2e0 <__func__.0+0x2c0>
    8001f68a:	00f70663          	beq	a4,a5,8001f696 <instret_test_1+0x120>
    8001f68e:	0000e597          	auipc	a1,0xe
    8001f692:	c6258593          	addi	a1,a1,-926 # 8002d2f0 <__func__.0+0x2d0>
    8001f696:	0000e517          	auipc	a0,0xe
    8001f69a:	c9a50513          	addi	a0,a0,-870 # 8002d330 <__func__.0+0x310>
    8001f69e:	71c0b0ef          	jal	8002adba <printf>
    8001f6a2:	00032797          	auipc	a5,0x32
    8001f6a6:	96f7c783          	lbu	a5,-1681(a5) # 80051011 <excpt+0x1>
    8001f6aa:	c789                	beqz	a5,8001f6b4 <instret_test_1+0x13e>
    8001f6ac:	6498                	ld	a4,8(s1)
    8001f6ae:	4789                	li	a5,2
    8001f6b0:	00f70c63          	beq	a4,a5,8001f6c8 <instret_test_1+0x152>
    8001f6b4:	0000e517          	auipc	a0,0xe
    8001f6b8:	c8450513          	addi	a0,a0,-892 # 8002d338 <__func__.0+0x318>
    8001f6bc:	6fe0b0ef          	jal	8002adba <printf>
    8001f6c0:	02900513          	li	a0,41
    8001f6c4:	3e40a0ef          	jal	80029aa8 <putchar>
    8001f6c8:	4529                	li	a0,10
    8001f6ca:	3de0a0ef          	jal	80029aa8 <putchar>
    8001f6ce:	c801                	beqz	s0,8001f6de <instret_test_1+0x168>
    8001f6d0:	00032797          	auipc	a5,0x32
    8001f6d4:	9417c783          	lbu	a5,-1727(a5) # 80051011 <excpt+0x1>
    8001f6d8:	4401                	li	s0,0
    8001f6da:	16079f63          	bnez	a5,8001f858 <instret_test_1+0x2e2>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    8001f6de:	4501                	li	a0,0
    8001f6e0:	f8ee10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f6e4:	e8ee10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f6e8:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f6ec:	08200593          	li	a1,130
    8001f6f0:	00015617          	auipc	a2,0x15
    8001f6f4:	6b860613          	addi	a2,a2,1720 # 80034da8 <__func__.0+0x7d88>
    8001f6f8:	0000e517          	auipc	a0,0xe
    8001f6fc:	c2050513          	addi	a0,a0,-992 # 8002d318 <__func__.0+0x2f8>
    8001f700:	6ba0b0ef          	jal	8002adba <printf>
    8001f704:	00032797          	auipc	a5,0x32
    8001f708:	90d7c783          	lbu	a5,-1779(a5) # 80051011 <excpt+0x1>
    8001f70c:	0000e597          	auipc	a1,0xe
    8001f710:	be458593          	addi	a1,a1,-1052 # 8002d2f0 <__func__.0+0x2d0>
    8001f714:	cf89                	beqz	a5,8001f72e <instret_test_1+0x1b8>
    8001f716:	6498                	ld	a4,8(s1)
    8001f718:	4789                	li	a5,2
    8001f71a:	0000e597          	auipc	a1,0xe
    8001f71e:	bc658593          	addi	a1,a1,-1082 # 8002d2e0 <__func__.0+0x2c0>
    8001f722:	00f70663          	beq	a4,a5,8001f72e <instret_test_1+0x1b8>
    8001f726:	0000e597          	auipc	a1,0xe
    8001f72a:	bca58593          	addi	a1,a1,-1078 # 8002d2f0 <__func__.0+0x2d0>
    8001f72e:	0000e517          	auipc	a0,0xe
    8001f732:	c0250513          	addi	a0,a0,-1022 # 8002d330 <__func__.0+0x310>
    8001f736:	6840b0ef          	jal	8002adba <printf>
    8001f73a:	00032797          	auipc	a5,0x32
    8001f73e:	8d77c783          	lbu	a5,-1833(a5) # 80051011 <excpt+0x1>
    8001f742:	c789                	beqz	a5,8001f74c <instret_test_1+0x1d6>
    8001f744:	6498                	ld	a4,8(s1)
    8001f746:	4789                	li	a5,2
    8001f748:	00f70c63          	beq	a4,a5,8001f760 <instret_test_1+0x1ea>
    8001f74c:	0000e517          	auipc	a0,0xe
    8001f750:	bec50513          	addi	a0,a0,-1044 # 8002d338 <__func__.0+0x318>
    8001f754:	6660b0ef          	jal	8002adba <printf>
    8001f758:	02900513          	li	a0,41
    8001f75c:	34c0a0ef          	jal	80029aa8 <putchar>
    8001f760:	4529                	li	a0,10
    8001f762:	3460a0ef          	jal	80029aa8 <putchar>
    8001f766:	c801                	beqz	s0,8001f776 <instret_test_1+0x200>
    8001f768:	00032797          	auipc	a5,0x32
    8001f76c:	8a97c783          	lbu	a5,-1879(a5) # 80051011 <excpt+0x1>
    8001f770:	4401                	li	s0,0
    8001f772:	0c079e63          	bnez	a5,8001f84e <instret_test_1+0x2d8>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );
    
    goto_priv(PRIV_HU);
    8001f776:	4505                	li	a0,1
    8001f778:	ef6e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f77c:	df6e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f780:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f784:	08200593          	li	a1,130
    8001f788:	00015617          	auipc	a2,0x15
    8001f78c:	67060613          	addi	a2,a2,1648 # 80034df8 <__func__.0+0x7dd8>
    8001f790:	0000e517          	auipc	a0,0xe
    8001f794:	b8850513          	addi	a0,a0,-1144 # 8002d318 <__func__.0+0x2f8>
    8001f798:	6220b0ef          	jal	8002adba <printf>
    8001f79c:	00032797          	auipc	a5,0x32
    8001f7a0:	8757c783          	lbu	a5,-1931(a5) # 80051011 <excpt+0x1>
    8001f7a4:	0000e597          	auipc	a1,0xe
    8001f7a8:	b4c58593          	addi	a1,a1,-1204 # 8002d2f0 <__func__.0+0x2d0>
    8001f7ac:	cf89                	beqz	a5,8001f7c6 <instret_test_1+0x250>
    8001f7ae:	6498                	ld	a4,8(s1)
    8001f7b0:	4789                	li	a5,2
    8001f7b2:	0000e597          	auipc	a1,0xe
    8001f7b6:	b2e58593          	addi	a1,a1,-1234 # 8002d2e0 <__func__.0+0x2c0>
    8001f7ba:	00f70663          	beq	a4,a5,8001f7c6 <instret_test_1+0x250>
    8001f7be:	0000e597          	auipc	a1,0xe
    8001f7c2:	b3258593          	addi	a1,a1,-1230 # 8002d2f0 <__func__.0+0x2d0>
    8001f7c6:	0000e517          	auipc	a0,0xe
    8001f7ca:	b6a50513          	addi	a0,a0,-1174 # 8002d330 <__func__.0+0x310>
    8001f7ce:	5ec0b0ef          	jal	8002adba <printf>
    8001f7d2:	00032797          	auipc	a5,0x32
    8001f7d6:	83f7c783          	lbu	a5,-1985(a5) # 80051011 <excpt+0x1>
    8001f7da:	c789                	beqz	a5,8001f7e4 <instret_test_1+0x26e>
    8001f7dc:	6498                	ld	a4,8(s1)
    8001f7de:	4789                	li	a5,2
    8001f7e0:	00f70c63          	beq	a4,a5,8001f7f8 <instret_test_1+0x282>
    8001f7e4:	0000e517          	auipc	a0,0xe
    8001f7e8:	b5450513          	addi	a0,a0,-1196 # 8002d338 <__func__.0+0x318>
    8001f7ec:	5ce0b0ef          	jal	8002adba <printf>
    8001f7f0:	02900513          	li	a0,41
    8001f7f4:	2b40a0ef          	jal	80029aa8 <putchar>
    8001f7f8:	4529                	li	a0,10
    8001f7fa:	2ae0a0ef          	jal	80029aa8 <putchar>
    8001f7fe:	c015                	beqz	s0,8001f822 <instret_test_1+0x2ac>
    8001f800:	00032417          	auipc	s0,0x32
    8001f804:	81144403          	lbu	s0,-2031(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001f808:	0000e597          	auipc	a1,0xe
    8001f80c:	ae858593          	addi	a1,a1,-1304 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f810:	cc11                	beqz	s0,8001f82c <instret_test_1+0x2b6>
    8001f812:	6498                	ld	a4,8(s1)
    8001f814:	4789                	li	a5,2
    TEST_END(); 
    8001f816:	0000e597          	auipc	a1,0xe
    8001f81a:	aca58593          	addi	a1,a1,-1334 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f81e:	00f70763          	beq	a4,a5,8001f82c <instret_test_1+0x2b6>
    8001f822:	4401                	li	s0,0
    TEST_END(); 
    8001f824:	0000e597          	auipc	a1,0xe
    8001f828:	acc58593          	addi	a1,a1,-1332 # 8002d2f0 <__func__.0+0x2d0>
    8001f82c:	0000e517          	auipc	a0,0xe
    8001f830:	b6c50513          	addi	a0,a0,-1172 # 8002d398 <__func__.0+0x378>
    8001f834:	5860b0ef          	jal	8002adba <printf>
    8001f838:	4511                	li	a0,4
    8001f83a:	e34e10ef          	jal	80000e6e <goto_priv>
    8001f83e:	f4de10ef          	jal	8000178a <reset_state>
}
    8001f842:	60e2                	ld	ra,24(sp)
    8001f844:	8522                	mv	a0,s0
    8001f846:	6442                	ld	s0,16(sp)
    8001f848:	64a2                	ld	s1,8(sp)
    8001f84a:	6105                	addi	sp,sp,32
    8001f84c:	8082                	ret
    TEST_ASSERT("vu access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f84e:	6480                	ld	s0,8(s1)
    8001f850:	1479                	addi	s0,s0,-2
    8001f852:	00143413          	seqz	s0,s0
    8001f856:	b705                	j	8001f776 <instret_test_1+0x200>
    TEST_ASSERT("hs access to instret casuses illegal instruction exception when mcounteren.ir=0",
    8001f858:	6480                	ld	s0,8(s1)
    8001f85a:	1479                	addi	s0,s0,-2
    8001f85c:	00143413          	seqz	s0,s0
    8001f860:	bdbd                	j	8001f6de <instret_test_1+0x168>

000000008001f862 <instret_test_2>:

bool instret_test_2() {
    8001f862:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001f864:	0000d597          	auipc	a1,0xd
    8001f868:	07458593          	addi	a1,a1,116 # 8002c8d8 <__func__.29>
    8001f86c:	0000e517          	auipc	a0,0xe
    8001f870:	a9450513          	addi	a0,a0,-1388 # 8002d300 <__func__.0+0x2e0>
bool instret_test_2() {
    8001f874:	e406                	sd	ra,8(sp)
    8001f876:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001f878:	5420b0ef          	jal	8002adba <printf>
    8001f87c:	4529                	li	a0,10
    8001f87e:	22a0a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001f882:	4511                	li	a0,4
    8001f884:	deae10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR);
    8001f888:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HS);
    8001f88c:	450d                	li	a0,3
    8001f88e:	de0e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f892:	ce0e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f896:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f89a:	08200593          	li	a1,130
    8001f89e:	00015617          	auipc	a2,0x15
    8001f8a2:	5aa60613          	addi	a2,a2,1450 # 80034e48 <__func__.0+0x7e28>
    8001f8a6:	0000e517          	auipc	a0,0xe
    8001f8aa:	a7250513          	addi	a0,a0,-1422 # 8002d318 <__func__.0+0x2f8>
    8001f8ae:	50c0b0ef          	jal	8002adba <printf>
    8001f8b2:	00031797          	auipc	a5,0x31
    8001f8b6:	75f7c783          	lbu	a5,1887(a5) # 80051011 <excpt+0x1>
    8001f8ba:	0000e597          	auipc	a1,0xe
    8001f8be:	a2658593          	addi	a1,a1,-1498 # 8002d2e0 <__func__.0+0x2c0>
    8001f8c2:	c789                	beqz	a5,8001f8cc <instret_test_2+0x6a>
    8001f8c4:	0000e597          	auipc	a1,0xe
    8001f8c8:	a2c58593          	addi	a1,a1,-1492 # 8002d2f0 <__func__.0+0x2d0>
    8001f8cc:	0000e517          	auipc	a0,0xe
    8001f8d0:	a6450513          	addi	a0,a0,-1436 # 8002d330 <__func__.0+0x310>
    8001f8d4:	4e60b0ef          	jal	8002adba <printf>
    8001f8d8:	00031797          	auipc	a5,0x31
    8001f8dc:	7397c783          	lbu	a5,1849(a5) # 80051011 <excpt+0x1>
    8001f8e0:	e7a1                	bnez	a5,8001f928 <instret_test_2+0xc6>
    8001f8e2:	4529                	li	a0,10
    8001f8e4:	1c40a0ef          	jal	80029aa8 <putchar>
    8001f8e8:	00031797          	auipc	a5,0x31
    8001f8ec:	7297c783          	lbu	a5,1833(a5) # 80051011 <excpt+0x1>
    8001f8f0:	e795                	bnez	a5,8001f91c <instret_test_2+0xba>
    8001f8f2:	4405                	li	s0,1
        excpt.triggered == false
    );
    TEST_END(); 
    8001f8f4:	0000e597          	auipc	a1,0xe
    8001f8f8:	9ec58593          	addi	a1,a1,-1556 # 8002d2e0 <__func__.0+0x2c0>
    8001f8fc:	0000e517          	auipc	a0,0xe
    8001f900:	a9c50513          	addi	a0,a0,-1380 # 8002d398 <__func__.0+0x378>
    8001f904:	4b60b0ef          	jal	8002adba <printf>
    8001f908:	4511                	li	a0,4
    8001f90a:	d64e10ef          	jal	80000e6e <goto_priv>
    8001f90e:	e7de10ef          	jal	8000178a <reset_state>
}
    8001f912:	60a2                	ld	ra,8(sp)
    8001f914:	8522                	mv	a0,s0
    8001f916:	6402                	ld	s0,0(sp)
    8001f918:	0141                	addi	sp,sp,16
    8001f91a:	8082                	ret
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f91c:	4401                	li	s0,0
    TEST_END(); 
    8001f91e:	0000e597          	auipc	a1,0xe
    8001f922:	9d258593          	addi	a1,a1,-1582 # 8002d2f0 <__func__.0+0x2d0>
    8001f926:	bfd9                	j	8001f8fc <instret_test_2+0x9a>
    TEST_ASSERT("hs access to instret successful when mcounteren.ir=1",
    8001f928:	0000e517          	auipc	a0,0xe
    8001f92c:	a1050513          	addi	a0,a0,-1520 # 8002d338 <__func__.0+0x318>
    8001f930:	48a0b0ef          	jal	8002adba <printf>
    8001f934:	02900513          	li	a0,41
    8001f938:	1700a0ef          	jal	80029aa8 <putchar>
    8001f93c:	b75d                	j	8001f8e2 <instret_test_2+0x80>

000000008001f93e <instret_test_3>:

bool instret_test_3() {
    8001f93e:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001f940:	0000d597          	auipc	a1,0xd
    8001f944:	fa858593          	addi	a1,a1,-88 # 8002c8e8 <__func__.28>
    8001f948:	0000e517          	auipc	a0,0xe
    8001f94c:	9b850513          	addi	a0,a0,-1608 # 8002d300 <__func__.0+0x2e0>
bool instret_test_3() {
    8001f950:	ec06                	sd	ra,24(sp)
    8001f952:	e822                	sd	s0,16(sp)
    8001f954:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001f956:	4640b0ef          	jal	8002adba <printf>
    8001f95a:	4529                	li	a0,10
    8001f95c:	14c0a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001f960:	4511                	li	a0,4
    8001f962:	d0ce10ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001f966:	10627073          	csrci	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001f96a:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001f96e:	4505                	li	a0,1
    8001f970:	cfee10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001f974:	bfee10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001f978:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001f97c:	08200593          	li	a1,130
    8001f980:	00015617          	auipc	a2,0x15
    8001f984:	50060613          	addi	a2,a2,1280 # 80034e80 <__func__.0+0x7e60>
    8001f988:	0000e517          	auipc	a0,0xe
    8001f98c:	99050513          	addi	a0,a0,-1648 # 8002d318 <__func__.0+0x2f8>
    8001f990:	42a0b0ef          	jal	8002adba <printf>
    8001f994:	00031797          	auipc	a5,0x31
    8001f998:	67d7c783          	lbu	a5,1661(a5) # 80051011 <excpt+0x1>
    8001f99c:	00031497          	auipc	s1,0x31
    8001f9a0:	67448493          	addi	s1,s1,1652 # 80051010 <excpt>
    8001f9a4:	0000e597          	auipc	a1,0xe
    8001f9a8:	94c58593          	addi	a1,a1,-1716 # 8002d2f0 <__func__.0+0x2d0>
    8001f9ac:	cf89                	beqz	a5,8001f9c6 <instret_test_3+0x88>
    8001f9ae:	6498                	ld	a4,8(s1)
    8001f9b0:	4789                	li	a5,2
    8001f9b2:	0000e597          	auipc	a1,0xe
    8001f9b6:	92e58593          	addi	a1,a1,-1746 # 8002d2e0 <__func__.0+0x2c0>
    8001f9ba:	00f70663          	beq	a4,a5,8001f9c6 <instret_test_3+0x88>
    8001f9be:	0000e597          	auipc	a1,0xe
    8001f9c2:	93258593          	addi	a1,a1,-1742 # 8002d2f0 <__func__.0+0x2d0>
    8001f9c6:	0000e517          	auipc	a0,0xe
    8001f9ca:	96a50513          	addi	a0,a0,-1686 # 8002d330 <__func__.0+0x310>
    8001f9ce:	3ec0b0ef          	jal	8002adba <printf>
    8001f9d2:	00031797          	auipc	a5,0x31
    8001f9d6:	63f7c783          	lbu	a5,1599(a5) # 80051011 <excpt+0x1>
    8001f9da:	c789                	beqz	a5,8001f9e4 <instret_test_3+0xa6>
    8001f9dc:	6498                	ld	a4,8(s1)
    8001f9de:	4789                	li	a5,2
    8001f9e0:	00f70c63          	beq	a4,a5,8001f9f8 <instret_test_3+0xba>
    8001f9e4:	0000e517          	auipc	a0,0xe
    8001f9e8:	95450513          	addi	a0,a0,-1708 # 8002d338 <__func__.0+0x318>
    8001f9ec:	3ce0b0ef          	jal	8002adba <printf>
    8001f9f0:	02900513          	li	a0,41
    8001f9f4:	0b40a0ef          	jal	80029aa8 <putchar>
    8001f9f8:	4529                	li	a0,10
    8001f9fa:	0ae0a0ef          	jal	80029aa8 <putchar>
    8001f9fe:	00031417          	auipc	s0,0x31
    8001fa02:	61344403          	lbu	s0,1555(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001fa06:	0000e597          	auipc	a1,0xe
    8001fa0a:	8ea58593          	addi	a1,a1,-1814 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fa0e:	cc11                	beqz	s0,8001fa2a <instret_test_3+0xec>
    8001fa10:	6498                	ld	a4,8(s1)
    8001fa12:	4789                	li	a5,2
    TEST_END(); 
    8001fa14:	0000e597          	auipc	a1,0xe
    8001fa18:	8cc58593          	addi	a1,a1,-1844 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when scounteren.ir=0",
    8001fa1c:	00f70763          	beq	a4,a5,8001fa2a <instret_test_3+0xec>
    8001fa20:	4401                	li	s0,0
    TEST_END(); 
    8001fa22:	0000e597          	auipc	a1,0xe
    8001fa26:	8ce58593          	addi	a1,a1,-1842 # 8002d2f0 <__func__.0+0x2d0>
    8001fa2a:	0000e517          	auipc	a0,0xe
    8001fa2e:	96e50513          	addi	a0,a0,-1682 # 8002d398 <__func__.0+0x378>
    8001fa32:	3880b0ef          	jal	8002adba <printf>
    8001fa36:	4511                	li	a0,4
    8001fa38:	c36e10ef          	jal	80000e6e <goto_priv>
    8001fa3c:	d4fe10ef          	jal	8000178a <reset_state>
}
    8001fa40:	60e2                	ld	ra,24(sp)
    8001fa42:	8522                	mv	a0,s0
    8001fa44:	6442                	ld	s0,16(sp)
    8001fa46:	64a2                	ld	s1,8(sp)
    8001fa48:	6105                	addi	sp,sp,32
    8001fa4a:	8082                	ret

000000008001fa4c <instret_test_4>:

bool instret_test_4() {
    8001fa4c:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fa4e:	0000d597          	auipc	a1,0xd
    8001fa52:	eaa58593          	addi	a1,a1,-342 # 8002c8f8 <__func__.27>
    8001fa56:	0000e517          	auipc	a0,0xe
    8001fa5a:	8aa50513          	addi	a0,a0,-1878 # 8002d300 <__func__.0+0x2e0>
bool instret_test_4() {
    8001fa5e:	e406                	sd	ra,8(sp)
    8001fa60:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fa62:	3580b0ef          	jal	8002adba <printf>
    8001fa66:	4529                	li	a0,10
    8001fa68:	0400a0ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001fa6c:	4511                	li	a0,4
    8001fa6e:	c00e10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fa72:	10626073          	csrsi	scounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fa76:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_HU);
    8001fa7a:	4505                	li	a0,1
    8001fa7c:	bf2e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fa80:	af2e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fa84:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fa88:	08200593          	li	a1,130
    8001fa8c:	00015617          	auipc	a2,0x15
    8001fa90:	44460613          	addi	a2,a2,1092 # 80034ed0 <__func__.0+0x7eb0>
    8001fa94:	0000e517          	auipc	a0,0xe
    8001fa98:	88450513          	addi	a0,a0,-1916 # 8002d318 <__func__.0+0x2f8>
    8001fa9c:	31e0b0ef          	jal	8002adba <printf>
    8001faa0:	00031797          	auipc	a5,0x31
    8001faa4:	5717c783          	lbu	a5,1393(a5) # 80051011 <excpt+0x1>
    8001faa8:	0000e597          	auipc	a1,0xe
    8001faac:	83858593          	addi	a1,a1,-1992 # 8002d2e0 <__func__.0+0x2c0>
    8001fab0:	c789                	beqz	a5,8001faba <instret_test_4+0x6e>
    8001fab2:	0000e597          	auipc	a1,0xe
    8001fab6:	83e58593          	addi	a1,a1,-1986 # 8002d2f0 <__func__.0+0x2d0>
    8001faba:	0000e517          	auipc	a0,0xe
    8001fabe:	87650513          	addi	a0,a0,-1930 # 8002d330 <__func__.0+0x310>
    8001fac2:	2f80b0ef          	jal	8002adba <printf>
    8001fac6:	00031797          	auipc	a5,0x31
    8001faca:	54b7c783          	lbu	a5,1355(a5) # 80051011 <excpt+0x1>
    8001face:	e7a1                	bnez	a5,8001fb16 <instret_test_4+0xca>
    8001fad0:	4529                	li	a0,10
    8001fad2:	7d7090ef          	jal	80029aa8 <putchar>
    8001fad6:	00031797          	auipc	a5,0x31
    8001fada:	53b7c783          	lbu	a5,1339(a5) # 80051011 <excpt+0x1>
    8001fade:	e795                	bnez	a5,8001fb0a <instret_test_4+0xbe>
    8001fae0:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fae2:	0000d597          	auipc	a1,0xd
    8001fae6:	7fe58593          	addi	a1,a1,2046 # 8002d2e0 <__func__.0+0x2c0>
    8001faea:	0000e517          	auipc	a0,0xe
    8001faee:	8ae50513          	addi	a0,a0,-1874 # 8002d398 <__func__.0+0x378>
    8001faf2:	2c80b0ef          	jal	8002adba <printf>
    8001faf6:	4511                	li	a0,4
    8001faf8:	b76e10ef          	jal	80000e6e <goto_priv>
    8001fafc:	c8fe10ef          	jal	8000178a <reset_state>
}
    8001fb00:	60a2                	ld	ra,8(sp)
    8001fb02:	8522                	mv	a0,s0
    8001fb04:	6402                	ld	s0,0(sp)
    8001fb06:	0141                	addi	sp,sp,16
    8001fb08:	8082                	ret
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fb0a:	4401                	li	s0,0
    TEST_END(); 
    8001fb0c:	0000d597          	auipc	a1,0xd
    8001fb10:	7e458593          	addi	a1,a1,2020 # 8002d2f0 <__func__.0+0x2d0>
    8001fb14:	bfd9                	j	8001faea <instret_test_4+0x9e>
    TEST_ASSERT("hu access to instret successful when mcounteren.ir=1 scounteren.ir=1",
    8001fb16:	0000e517          	auipc	a0,0xe
    8001fb1a:	82250513          	addi	a0,a0,-2014 # 8002d338 <__func__.0+0x318>
    8001fb1e:	29c0b0ef          	jal	8002adba <printf>
    8001fb22:	02900513          	li	a0,41
    8001fb26:	783090ef          	jal	80029aa8 <putchar>
    8001fb2a:	b75d                	j	8001fad0 <instret_test_4+0x84>

000000008001fb2c <instret_test_5>:

bool instret_test_5() {
    8001fb2c:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fb2e:	0000d597          	auipc	a1,0xd
    8001fb32:	dda58593          	addi	a1,a1,-550 # 8002c908 <__func__.26>
    8001fb36:	0000d517          	auipc	a0,0xd
    8001fb3a:	7ca50513          	addi	a0,a0,1994 # 8002d300 <__func__.0+0x2e0>
bool instret_test_5() {
    8001fb3e:	ec06                	sd	ra,24(sp)
    8001fb40:	e822                	sd	s0,16(sp)
    8001fb42:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fb44:	2760b0ef          	jal	8002adba <printf>
    8001fb48:	4529                	li	a0,10
    8001fb4a:	75f090ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001fb4e:	4511                	li	a0,4
    8001fb50:	b1ee10ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fb54:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fb58:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fb5c:	4509                	li	a0,2
    8001fb5e:	b10e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fb62:	a10e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fb66:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fb6a:	08200593          	li	a1,130
    8001fb6e:	00015617          	auipc	a2,0x15
    8001fb72:	3aa60613          	addi	a2,a2,938 # 80034f18 <__func__.0+0x7ef8>
    8001fb76:	0000d517          	auipc	a0,0xd
    8001fb7a:	7a250513          	addi	a0,a0,1954 # 8002d318 <__func__.0+0x2f8>
    8001fb7e:	23c0b0ef          	jal	8002adba <printf>
    8001fb82:	00031797          	auipc	a5,0x31
    8001fb86:	48f7c783          	lbu	a5,1167(a5) # 80051011 <excpt+0x1>
    8001fb8a:	00031497          	auipc	s1,0x31
    8001fb8e:	48648493          	addi	s1,s1,1158 # 80051010 <excpt>
    8001fb92:	0000d597          	auipc	a1,0xd
    8001fb96:	75e58593          	addi	a1,a1,1886 # 8002d2f0 <__func__.0+0x2d0>
    8001fb9a:	cf89                	beqz	a5,8001fbb4 <instret_test_5+0x88>
    8001fb9c:	6498                	ld	a4,8(s1)
    8001fb9e:	47d9                	li	a5,22
    8001fba0:	0000d597          	auipc	a1,0xd
    8001fba4:	74058593          	addi	a1,a1,1856 # 8002d2e0 <__func__.0+0x2c0>
    8001fba8:	00f70663          	beq	a4,a5,8001fbb4 <instret_test_5+0x88>
    8001fbac:	0000d597          	auipc	a1,0xd
    8001fbb0:	74458593          	addi	a1,a1,1860 # 8002d2f0 <__func__.0+0x2d0>
    8001fbb4:	0000d517          	auipc	a0,0xd
    8001fbb8:	77c50513          	addi	a0,a0,1916 # 8002d330 <__func__.0+0x310>
    8001fbbc:	1fe0b0ef          	jal	8002adba <printf>
    8001fbc0:	00031797          	auipc	a5,0x31
    8001fbc4:	4517c783          	lbu	a5,1105(a5) # 80051011 <excpt+0x1>
    8001fbc8:	c789                	beqz	a5,8001fbd2 <instret_test_5+0xa6>
    8001fbca:	6498                	ld	a4,8(s1)
    8001fbcc:	47d9                	li	a5,22
    8001fbce:	00f70c63          	beq	a4,a5,8001fbe6 <instret_test_5+0xba>
    8001fbd2:	0000d517          	auipc	a0,0xd
    8001fbd6:	76650513          	addi	a0,a0,1894 # 8002d338 <__func__.0+0x318>
    8001fbda:	1e00b0ef          	jal	8002adba <printf>
    8001fbde:	02900513          	li	a0,41
    8001fbe2:	6c7090ef          	jal	80029aa8 <putchar>
    8001fbe6:	4529                	li	a0,10
    8001fbe8:	6c1090ef          	jal	80029aa8 <putchar>
    8001fbec:	00031417          	auipc	s0,0x31
    8001fbf0:	42544403          	lbu	s0,1061(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001fbf4:	0000d597          	auipc	a1,0xd
    8001fbf8:	6fc58593          	addi	a1,a1,1788 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fbfc:	cc11                	beqz	s0,8001fc18 <instret_test_5+0xec>
    8001fbfe:	6498                	ld	a4,8(s1)
    8001fc00:	47d9                	li	a5,22
    TEST_END(); 
    8001fc02:	0000d597          	auipc	a1,0xd
    8001fc06:	6de58593          	addi	a1,a1,1758 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0",
    8001fc0a:	00f70763          	beq	a4,a5,8001fc18 <instret_test_5+0xec>
    8001fc0e:	4401                	li	s0,0
    TEST_END(); 
    8001fc10:	0000d597          	auipc	a1,0xd
    8001fc14:	6e058593          	addi	a1,a1,1760 # 8002d2f0 <__func__.0+0x2d0>
    8001fc18:	0000d517          	auipc	a0,0xd
    8001fc1c:	78050513          	addi	a0,a0,1920 # 8002d398 <__func__.0+0x378>
    8001fc20:	19a0b0ef          	jal	8002adba <printf>
    8001fc24:	4511                	li	a0,4
    8001fc26:	a48e10ef          	jal	80000e6e <goto_priv>
    8001fc2a:	b61e10ef          	jal	8000178a <reset_state>
}
    8001fc2e:	60e2                	ld	ra,24(sp)
    8001fc30:	8522                	mv	a0,s0
    8001fc32:	6442                	ld	s0,16(sp)
    8001fc34:	64a2                	ld	s1,8(sp)
    8001fc36:	6105                	addi	sp,sp,32
    8001fc38:	8082                	ret

000000008001fc3a <instret_test_6>:

bool instret_test_6() {
    8001fc3a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fc3c:	0000d597          	auipc	a1,0xd
    8001fc40:	cdc58593          	addi	a1,a1,-804 # 8002c918 <__func__.25>
    8001fc44:	0000d517          	auipc	a0,0xd
    8001fc48:	6bc50513          	addi	a0,a0,1724 # 8002d300 <__func__.0+0x2e0>
bool instret_test_6() {
    8001fc4c:	e406                	sd	ra,8(sp)
    8001fc4e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fc50:	16a0b0ef          	jal	8002adba <printf>
    8001fc54:	4529                	li	a0,10
    8001fc56:	653090ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001fc5a:	4511                	li	a0,4
    8001fc5c:	a12e10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fc60:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fc64:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8001fc68:	4509                	li	a0,2
    8001fc6a:	a04e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fc6e:	904e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fc72:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fc76:	08200593          	li	a1,130
    8001fc7a:	00015617          	auipc	a2,0x15
    8001fc7e:	2fe60613          	addi	a2,a2,766 # 80034f78 <__func__.0+0x7f58>
    8001fc82:	0000d517          	auipc	a0,0xd
    8001fc86:	69650513          	addi	a0,a0,1686 # 8002d318 <__func__.0+0x2f8>
    8001fc8a:	1300b0ef          	jal	8002adba <printf>
    8001fc8e:	00031797          	auipc	a5,0x31
    8001fc92:	3837c783          	lbu	a5,899(a5) # 80051011 <excpt+0x1>
    8001fc96:	0000d597          	auipc	a1,0xd
    8001fc9a:	64a58593          	addi	a1,a1,1610 # 8002d2e0 <__func__.0+0x2c0>
    8001fc9e:	c789                	beqz	a5,8001fca8 <instret_test_6+0x6e>
    8001fca0:	0000d597          	auipc	a1,0xd
    8001fca4:	65058593          	addi	a1,a1,1616 # 8002d2f0 <__func__.0+0x2d0>
    8001fca8:	0000d517          	auipc	a0,0xd
    8001fcac:	68850513          	addi	a0,a0,1672 # 8002d330 <__func__.0+0x310>
    8001fcb0:	10a0b0ef          	jal	8002adba <printf>
    8001fcb4:	00031797          	auipc	a5,0x31
    8001fcb8:	35d7c783          	lbu	a5,861(a5) # 80051011 <excpt+0x1>
    8001fcbc:	e7a1                	bnez	a5,8001fd04 <instret_test_6+0xca>
    8001fcbe:	4529                	li	a0,10
    8001fcc0:	5e9090ef          	jal	80029aa8 <putchar>
    8001fcc4:	00031797          	auipc	a5,0x31
    8001fcc8:	34d7c783          	lbu	a5,845(a5) # 80051011 <excpt+0x1>
    8001fccc:	e795                	bnez	a5,8001fcf8 <instret_test_6+0xbe>
    8001fcce:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fcd0:	0000d597          	auipc	a1,0xd
    8001fcd4:	61058593          	addi	a1,a1,1552 # 8002d2e0 <__func__.0+0x2c0>
    8001fcd8:	0000d517          	auipc	a0,0xd
    8001fcdc:	6c050513          	addi	a0,a0,1728 # 8002d398 <__func__.0+0x378>
    8001fce0:	0da0b0ef          	jal	8002adba <printf>
    8001fce4:	4511                	li	a0,4
    8001fce6:	988e10ef          	jal	80000e6e <goto_priv>
    8001fcea:	aa1e10ef          	jal	8000178a <reset_state>
}
    8001fcee:	60a2                	ld	ra,8(sp)
    8001fcf0:	8522                	mv	a0,s0
    8001fcf2:	6402                	ld	s0,0(sp)
    8001fcf4:	0141                	addi	sp,sp,16
    8001fcf6:	8082                	ret
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fcf8:	4401                	li	s0,0
    TEST_END(); 
    8001fcfa:	0000d597          	auipc	a1,0xd
    8001fcfe:	5f658593          	addi	a1,a1,1526 # 8002d2f0 <__func__.0+0x2d0>
    8001fd02:	bfd9                	j	8001fcd8 <instret_test_6+0x9e>
    TEST_ASSERT("vs access to instret successful when mcounteren.ir=1 hcounteren.ir=1",
    8001fd04:	0000d517          	auipc	a0,0xd
    8001fd08:	63450513          	addi	a0,a0,1588 # 8002d338 <__func__.0+0x318>
    8001fd0c:	0ae0b0ef          	jal	8002adba <printf>
    8001fd10:	02900513          	li	a0,41
    8001fd14:	595090ef          	jal	80029aa8 <putchar>
    8001fd18:	b75d                	j	8001fcbe <instret_test_6+0x84>

000000008001fd1a <instret_test_7>:

bool instret_test_7() {
    8001fd1a:	1141                	addi	sp,sp,-16

    TEST_START();    
    8001fd1c:	0000d597          	auipc	a1,0xd
    8001fd20:	c0c58593          	addi	a1,a1,-1012 # 8002c928 <__func__.24>
    8001fd24:	0000d517          	auipc	a0,0xd
    8001fd28:	5dc50513          	addi	a0,a0,1500 # 8002d300 <__func__.0+0x2e0>
bool instret_test_7() {
    8001fd2c:	e406                	sd	ra,8(sp)
    8001fd2e:	e022                	sd	s0,0(sp)
    TEST_START();    
    8001fd30:	08a0b0ef          	jal	8002adba <printf>
    8001fd34:	4529                	li	a0,10
    8001fd36:	573090ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001fd3a:	4511                	li	a0,4
    8001fd3c:	932e10ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fd40:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fd44:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fd48:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001fd4c:	4501                	li	a0,0
    8001fd4e:	920e10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fd52:	820e10ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fd56:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fd5a:	08200593          	li	a1,130
    8001fd5e:	00015617          	auipc	a2,0x15
    8001fd62:	26260613          	addi	a2,a2,610 # 80034fc0 <__func__.0+0x7fa0>
    8001fd66:	0000d517          	auipc	a0,0xd
    8001fd6a:	5b250513          	addi	a0,a0,1458 # 8002d318 <__func__.0+0x2f8>
    8001fd6e:	04c0b0ef          	jal	8002adba <printf>
    8001fd72:	00031797          	auipc	a5,0x31
    8001fd76:	29f7c783          	lbu	a5,671(a5) # 80051011 <excpt+0x1>
    8001fd7a:	0000d597          	auipc	a1,0xd
    8001fd7e:	56658593          	addi	a1,a1,1382 # 8002d2e0 <__func__.0+0x2c0>
    8001fd82:	c789                	beqz	a5,8001fd8c <instret_test_7+0x72>
    8001fd84:	0000d597          	auipc	a1,0xd
    8001fd88:	56c58593          	addi	a1,a1,1388 # 8002d2f0 <__func__.0+0x2d0>
    8001fd8c:	0000d517          	auipc	a0,0xd
    8001fd90:	5a450513          	addi	a0,a0,1444 # 8002d330 <__func__.0+0x310>
    8001fd94:	0260b0ef          	jal	8002adba <printf>
    8001fd98:	00031797          	auipc	a5,0x31
    8001fd9c:	2797c783          	lbu	a5,633(a5) # 80051011 <excpt+0x1>
    8001fda0:	e7a1                	bnez	a5,8001fde8 <instret_test_7+0xce>
    8001fda2:	4529                	li	a0,10
    8001fda4:	505090ef          	jal	80029aa8 <putchar>
    8001fda8:	00031797          	auipc	a5,0x31
    8001fdac:	2697c783          	lbu	a5,617(a5) # 80051011 <excpt+0x1>
    8001fdb0:	e795                	bnez	a5,8001fddc <instret_test_7+0xc2>
    8001fdb2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    8001fdb4:	0000d597          	auipc	a1,0xd
    8001fdb8:	52c58593          	addi	a1,a1,1324 # 8002d2e0 <__func__.0+0x2c0>
    8001fdbc:	0000d517          	auipc	a0,0xd
    8001fdc0:	5dc50513          	addi	a0,a0,1500 # 8002d398 <__func__.0+0x378>
    8001fdc4:	7f70a0ef          	jal	8002adba <printf>
    8001fdc8:	4511                	li	a0,4
    8001fdca:	8a4e10ef          	jal	80000e6e <goto_priv>
    8001fdce:	9bde10ef          	jal	8000178a <reset_state>
}
    8001fdd2:	60a2                	ld	ra,8(sp)
    8001fdd4:	8522                	mv	a0,s0
    8001fdd6:	6402                	ld	s0,0(sp)
    8001fdd8:	0141                	addi	sp,sp,16
    8001fdda:	8082                	ret
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fddc:	4401                	li	s0,0
    TEST_END(); 
    8001fdde:	0000d597          	auipc	a1,0xd
    8001fde2:	51258593          	addi	a1,a1,1298 # 8002d2f0 <__func__.0+0x2d0>
    8001fde6:	bfd9                	j	8001fdbc <instret_test_7+0xa2>
    TEST_ASSERT("vu access to instret successful when mcounteren.ir=1 hcounteren.ir=1 scounteren.ir=1",
    8001fde8:	0000d517          	auipc	a0,0xd
    8001fdec:	55050513          	addi	a0,a0,1360 # 8002d338 <__func__.0+0x318>
    8001fdf0:	7cb0a0ef          	jal	8002adba <printf>
    8001fdf4:	02900513          	li	a0,41
    8001fdf8:	4b1090ef          	jal	80029aa8 <putchar>
    8001fdfc:	b75d                	j	8001fda2 <instret_test_7+0x88>

000000008001fdfe <instret_test_8>:

bool instret_test_8() {
    8001fdfe:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001fe00:	0000d597          	auipc	a1,0xd
    8001fe04:	b3858593          	addi	a1,a1,-1224 # 8002c938 <__func__.23>
    8001fe08:	0000d517          	auipc	a0,0xd
    8001fe0c:	4f850513          	addi	a0,a0,1272 # 8002d300 <__func__.0+0x2e0>
bool instret_test_8() {
    8001fe10:	ec06                	sd	ra,24(sp)
    8001fe12:	e822                	sd	s0,16(sp)
    8001fe14:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001fe16:	7a50a0ef          	jal	8002adba <printf>
    8001fe1a:	4529                	li	a0,10
    8001fe1c:	48d090ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001fe20:	4511                	li	a0,4
    8001fe22:	84ce10ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    8001fe26:	60627073          	csrci	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001fe2a:	30626073          	csrsi	mcounteren,4
    CSRS(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001fe2e:	10626073          	csrsi	scounteren,4

    goto_priv(PRIV_VU);
    8001fe32:	4501                	li	a0,0
    8001fe34:	83ae10ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001fe38:	f3be00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001fe3c:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001fe40:	08200593          	li	a1,130
    8001fe44:	00015617          	auipc	a2,0x15
    8001fe48:	1d460613          	addi	a2,a2,468 # 80035018 <__func__.0+0x7ff8>
    8001fe4c:	0000d517          	auipc	a0,0xd
    8001fe50:	4cc50513          	addi	a0,a0,1228 # 8002d318 <__func__.0+0x2f8>
    8001fe54:	7670a0ef          	jal	8002adba <printf>
    8001fe58:	00031797          	auipc	a5,0x31
    8001fe5c:	1b97c783          	lbu	a5,441(a5) # 80051011 <excpt+0x1>
    8001fe60:	00031497          	auipc	s1,0x31
    8001fe64:	1b048493          	addi	s1,s1,432 # 80051010 <excpt>
    8001fe68:	0000d597          	auipc	a1,0xd
    8001fe6c:	48858593          	addi	a1,a1,1160 # 8002d2f0 <__func__.0+0x2d0>
    8001fe70:	cf89                	beqz	a5,8001fe8a <instret_test_8+0x8c>
    8001fe72:	6498                	ld	a4,8(s1)
    8001fe74:	47d9                	li	a5,22
    8001fe76:	0000d597          	auipc	a1,0xd
    8001fe7a:	46a58593          	addi	a1,a1,1130 # 8002d2e0 <__func__.0+0x2c0>
    8001fe7e:	00f70663          	beq	a4,a5,8001fe8a <instret_test_8+0x8c>
    8001fe82:	0000d597          	auipc	a1,0xd
    8001fe86:	46e58593          	addi	a1,a1,1134 # 8002d2f0 <__func__.0+0x2d0>
    8001fe8a:	0000d517          	auipc	a0,0xd
    8001fe8e:	4a650513          	addi	a0,a0,1190 # 8002d330 <__func__.0+0x310>
    8001fe92:	7290a0ef          	jal	8002adba <printf>
    8001fe96:	00031797          	auipc	a5,0x31
    8001fe9a:	17b7c783          	lbu	a5,379(a5) # 80051011 <excpt+0x1>
    8001fe9e:	c789                	beqz	a5,8001fea8 <instret_test_8+0xaa>
    8001fea0:	6498                	ld	a4,8(s1)
    8001fea2:	47d9                	li	a5,22
    8001fea4:	00f70c63          	beq	a4,a5,8001febc <instret_test_8+0xbe>
    8001fea8:	0000d517          	auipc	a0,0xd
    8001feac:	49050513          	addi	a0,a0,1168 # 8002d338 <__func__.0+0x318>
    8001feb0:	70b0a0ef          	jal	8002adba <printf>
    8001feb4:	02900513          	li	a0,41
    8001feb8:	3f1090ef          	jal	80029aa8 <putchar>
    8001febc:	4529                	li	a0,10
    8001febe:	3eb090ef          	jal	80029aa8 <putchar>
    8001fec2:	00031417          	auipc	s0,0x31
    8001fec6:	14f44403          	lbu	s0,335(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8001feca:	0000d597          	auipc	a1,0xd
    8001fece:	42658593          	addi	a1,a1,1062 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001fed2:	cc11                	beqz	s0,8001feee <instret_test_8+0xf0>
    8001fed4:	6498                	ld	a4,8(s1)
    8001fed6:	47d9                	li	a5,22
    TEST_END(); 
    8001fed8:	0000d597          	auipc	a1,0xd
    8001fedc:	40858593          	addi	a1,a1,1032 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to instret casuses virtual instruction exception when mcounteren.ir=1 hcounteren.ir=0 scounteren.ir=1",
    8001fee0:	00f70763          	beq	a4,a5,8001feee <instret_test_8+0xf0>
    8001fee4:	4401                	li	s0,0
    TEST_END(); 
    8001fee6:	0000d597          	auipc	a1,0xd
    8001feea:	40a58593          	addi	a1,a1,1034 # 8002d2f0 <__func__.0+0x2d0>
    8001feee:	0000d517          	auipc	a0,0xd
    8001fef2:	4aa50513          	addi	a0,a0,1194 # 8002d398 <__func__.0+0x378>
    8001fef6:	6c50a0ef          	jal	8002adba <printf>
    8001fefa:	4511                	li	a0,4
    8001fefc:	f73e00ef          	jal	80000e6e <goto_priv>
    8001ff00:	88be10ef          	jal	8000178a <reset_state>
}
    8001ff04:	60e2                	ld	ra,24(sp)
    8001ff06:	8522                	mv	a0,s0
    8001ff08:	6442                	ld	s0,16(sp)
    8001ff0a:	64a2                	ld	s1,8(sp)
    8001ff0c:	6105                	addi	sp,sp,32
    8001ff0e:	8082                	ret

000000008001ff10 <instret_test_9>:

bool instret_test_9() {
    8001ff10:	1101                	addi	sp,sp,-32

    TEST_START();    
    8001ff12:	0000d597          	auipc	a1,0xd
    8001ff16:	a3658593          	addi	a1,a1,-1482 # 8002c948 <__func__.22>
    8001ff1a:	0000d517          	auipc	a0,0xd
    8001ff1e:	3e650513          	addi	a0,a0,998 # 8002d300 <__func__.0+0x2e0>
bool instret_test_9() {
    8001ff22:	ec06                	sd	ra,24(sp)
    8001ff24:	e822                	sd	s0,16(sp)
    8001ff26:	e426                	sd	s1,8(sp)
    TEST_START();    
    8001ff28:	6930a0ef          	jal	8002adba <printf>
    8001ff2c:	4529                	li	a0,10
    8001ff2e:	37b090ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8001ff32:	4511                	li	a0,4
    8001ff34:	f3be00ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    8001ff38:	30626073          	csrsi	mcounteren,4
    CSRC(CSR_SCOUNTEREN, HCOUNTEREN_IR); 
    8001ff3c:	10627073          	csrci	scounteren,4

    goto_priv(PRIV_HU);
    8001ff40:	4505                	li	a0,1
    8001ff42:	f2de00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8001ff46:	e2de00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    8001ff4a:	c02027f3          	rdinstret	a5

    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    8001ff4e:	08200593          	li	a1,130
    8001ff52:	00015617          	auipc	a2,0x15
    8001ff56:	13660613          	addi	a2,a2,310 # 80035088 <__func__.0+0x8068>
    8001ff5a:	0000d517          	auipc	a0,0xd
    8001ff5e:	3be50513          	addi	a0,a0,958 # 8002d318 <__func__.0+0x2f8>
    8001ff62:	6590a0ef          	jal	8002adba <printf>
    8001ff66:	00031797          	auipc	a5,0x31
    8001ff6a:	0ab7c783          	lbu	a5,171(a5) # 80051011 <excpt+0x1>
    8001ff6e:	00031497          	auipc	s1,0x31
    8001ff72:	0a248493          	addi	s1,s1,162 # 80051010 <excpt>
    8001ff76:	0000d597          	auipc	a1,0xd
    8001ff7a:	37a58593          	addi	a1,a1,890 # 8002d2f0 <__func__.0+0x2d0>
    8001ff7e:	cf89                	beqz	a5,8001ff98 <instret_test_9+0x88>
    8001ff80:	6498                	ld	a4,8(s1)
    8001ff82:	4789                	li	a5,2
    8001ff84:	0000d597          	auipc	a1,0xd
    8001ff88:	35c58593          	addi	a1,a1,860 # 8002d2e0 <__func__.0+0x2c0>
    8001ff8c:	00f70663          	beq	a4,a5,8001ff98 <instret_test_9+0x88>
    8001ff90:	0000d597          	auipc	a1,0xd
    8001ff94:	36058593          	addi	a1,a1,864 # 8002d2f0 <__func__.0+0x2d0>
    8001ff98:	0000d517          	auipc	a0,0xd
    8001ff9c:	39850513          	addi	a0,a0,920 # 8002d330 <__func__.0+0x310>
    8001ffa0:	61b0a0ef          	jal	8002adba <printf>
    8001ffa4:	00031797          	auipc	a5,0x31
    8001ffa8:	06d7c783          	lbu	a5,109(a5) # 80051011 <excpt+0x1>
    8001ffac:	c789                	beqz	a5,8001ffb6 <instret_test_9+0xa6>
    8001ffae:	6498                	ld	a4,8(s1)
    8001ffb0:	4789                	li	a5,2
    8001ffb2:	00f70c63          	beq	a4,a5,8001ffca <instret_test_9+0xba>
    8001ffb6:	0000d517          	auipc	a0,0xd
    8001ffba:	38250513          	addi	a0,a0,898 # 8002d338 <__func__.0+0x318>
    8001ffbe:	5fd0a0ef          	jal	8002adba <printf>
    8001ffc2:	02900513          	li	a0,41
    8001ffc6:	2e3090ef          	jal	80029aa8 <putchar>
    8001ffca:	4529                	li	a0,10
    8001ffcc:	2dd090ef          	jal	80029aa8 <putchar>
    8001ffd0:	00031417          	auipc	s0,0x31
    8001ffd4:	04144403          	lbu	s0,65(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8001ffd8:	0000d597          	auipc	a1,0xd
    8001ffdc:	31858593          	addi	a1,a1,792 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    8001ffe0:	cc11                	beqz	s0,8001fffc <instret_test_9+0xec>
    8001ffe2:	6498                	ld	a4,8(s1)
    8001ffe4:	4789                	li	a5,2
    TEST_END(); 
    8001ffe6:	0000d597          	auipc	a1,0xd
    8001ffea:	2fa58593          	addi	a1,a1,762 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to instret casuses illegal instruction exception when mcounteren.ir=1 scounteren.ir=0",
    8001ffee:	00f70763          	beq	a4,a5,8001fffc <instret_test_9+0xec>
    8001fff2:	4401                	li	s0,0
    TEST_END(); 
    8001fff4:	0000d597          	auipc	a1,0xd
    8001fff8:	2fc58593          	addi	a1,a1,764 # 8002d2f0 <__func__.0+0x2d0>
    8001fffc:	0000d517          	auipc	a0,0xd
    80020000:	39c50513          	addi	a0,a0,924 # 8002d398 <__func__.0+0x378>
    80020004:	5b70a0ef          	jal	8002adba <printf>
    80020008:	4511                	li	a0,4
    8002000a:	e65e00ef          	jal	80000e6e <goto_priv>
    8002000e:	f7ce10ef          	jal	8000178a <reset_state>
}
    80020012:	60e2                	ld	ra,24(sp)
    80020014:	8522                	mv	a0,s0
    80020016:	6442                	ld	s0,16(sp)
    80020018:	64a2                	ld	s1,8(sp)
    8002001a:	6105                	addi	sp,sp,32
    8002001c:	8082                	ret

000000008002001e <instret_test_10>:

bool instret_test_10() {
    8002001e:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020020:	0000d597          	auipc	a1,0xd
    80020024:	93858593          	addi	a1,a1,-1736 # 8002c958 <__func__.21>
    80020028:	0000d517          	auipc	a0,0xd
    8002002c:	2d850513          	addi	a0,a0,728 # 8002d300 <__func__.0+0x2e0>
bool instret_test_10() {
    80020030:	e406                	sd	ra,8(sp)
    80020032:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020034:	5870a0ef          	jal	8002adba <printf>
    80020038:	4529                	li	a0,10
    8002003a:	26f090ef          	jal	80029aa8 <putchar>
    goto_priv(PRIV_M);
    8002003e:	4511                	li	a0,4
    80020040:	e2fe00ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_IR); 
    80020044:	60626073          	csrsi	hcounteren,4
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_IR); 
    80020048:	30626073          	csrsi	mcounteren,4

    goto_priv(PRIV_VS);
    8002004c:	4509                	li	a0,2
    8002004e:	e21e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80020052:	d21e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_INSTRET);
    80020056:	c02027f3          	rdinstret	a5

    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    8002005a:	08200593          	li	a1,130
    8002005e:	00015617          	auipc	a2,0x15
    80020062:	08a60613          	addi	a2,a2,138 # 800350e8 <__func__.0+0x80c8>
    80020066:	0000d517          	auipc	a0,0xd
    8002006a:	2b250513          	addi	a0,a0,690 # 8002d318 <__func__.0+0x2f8>
    8002006e:	54d0a0ef          	jal	8002adba <printf>
    80020072:	00031797          	auipc	a5,0x31
    80020076:	f9f7c783          	lbu	a5,-97(a5) # 80051011 <excpt+0x1>
    8002007a:	0000d597          	auipc	a1,0xd
    8002007e:	26658593          	addi	a1,a1,614 # 8002d2e0 <__func__.0+0x2c0>
    80020082:	c789                	beqz	a5,8002008c <instret_test_10+0x6e>
    80020084:	0000d597          	auipc	a1,0xd
    80020088:	26c58593          	addi	a1,a1,620 # 8002d2f0 <__func__.0+0x2d0>
    8002008c:	0000d517          	auipc	a0,0xd
    80020090:	2a450513          	addi	a0,a0,676 # 8002d330 <__func__.0+0x310>
    80020094:	5270a0ef          	jal	8002adba <printf>
    80020098:	00031797          	auipc	a5,0x31
    8002009c:	f797c783          	lbu	a5,-135(a5) # 80051011 <excpt+0x1>
    800200a0:	e7a1                	bnez	a5,800200e8 <instret_test_10+0xca>
    800200a2:	4529                	li	a0,10
    800200a4:	205090ef          	jal	80029aa8 <putchar>
    800200a8:	00031797          	auipc	a5,0x31
    800200ac:	f697c783          	lbu	a5,-151(a5) # 80051011 <excpt+0x1>
    800200b0:	e795                	bnez	a5,800200dc <instret_test_10+0xbe>
    800200b2:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    800200b4:	0000d597          	auipc	a1,0xd
    800200b8:	22c58593          	addi	a1,a1,556 # 8002d2e0 <__func__.0+0x2c0>
    800200bc:	0000d517          	auipc	a0,0xd
    800200c0:	2dc50513          	addi	a0,a0,732 # 8002d398 <__func__.0+0x378>
    800200c4:	4f70a0ef          	jal	8002adba <printf>
    800200c8:	4511                	li	a0,4
    800200ca:	da5e00ef          	jal	80000e6e <goto_priv>
    800200ce:	ebce10ef          	jal	8000178a <reset_state>
}
    800200d2:	60a2                	ld	ra,8(sp)
    800200d4:	8522                	mv	a0,s0
    800200d6:	6402                	ld	s0,0(sp)
    800200d8:	0141                	addi	sp,sp,16
    800200da:	8082                	ret
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    800200dc:	4401                	li	s0,0
    TEST_END(); 
    800200de:	0000d597          	auipc	a1,0xd
    800200e2:	21258593          	addi	a1,a1,530 # 8002d2f0 <__func__.0+0x2d0>
    800200e6:	bfd9                	j	800200bc <instret_test_10+0x9e>
    TEST_ASSERT("vu access to instret successful exception when mcounteren.ir=1 hcounteren.ir=1",
    800200e8:	0000d517          	auipc	a0,0xd
    800200ec:	25050513          	addi	a0,a0,592 # 8002d338 <__func__.0+0x318>
    800200f0:	4cb0a0ef          	jal	8002adba <printf>
    800200f4:	02900513          	li	a0,41
    800200f8:	1b1090ef          	jal	80029aa8 <putchar>
    800200fc:	b75d                	j	800200a2 <instret_test_10+0x84>

00000000800200fe <timecmp_test_1>:


bool timecmp_test_1() {
    800200fe:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020100:	0000d597          	auipc	a1,0xd
    80020104:	86858593          	addi	a1,a1,-1944 # 8002c968 <__func__.20>
    80020108:	0000d517          	auipc	a0,0xd
    8002010c:	1f850513          	addi	a0,a0,504 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_1() {
    80020110:	ec06                	sd	ra,24(sp)
    80020112:	e822                	sd	s0,16(sp)
    80020114:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020116:	4a50a0ef          	jal	8002adba <printf>
    8002011a:	4529                	li	a0,10
    8002011c:	18d090ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020120:	57fd                	li	a5,-1
    80020122:	17fe                	slli	a5,a5,0x3f
    80020124:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020128:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    8002012c:	450d                	li	a0,3
    8002012e:	d41e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80020132:	c41e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020136:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002013a:	08200593          	li	a1,130
    8002013e:	00015617          	auipc	a2,0x15
    80020142:	ffa60613          	addi	a2,a2,-6 # 80035138 <__func__.0+0x8118>
    80020146:	0000d517          	auipc	a0,0xd
    8002014a:	1d250513          	addi	a0,a0,466 # 8002d318 <__func__.0+0x2f8>
    8002014e:	46d0a0ef          	jal	8002adba <printf>
    80020152:	00031797          	auipc	a5,0x31
    80020156:	ebf7c783          	lbu	a5,-321(a5) # 80051011 <excpt+0x1>
    8002015a:	00031497          	auipc	s1,0x31
    8002015e:	eb648493          	addi	s1,s1,-330 # 80051010 <excpt>
    80020162:	0000d597          	auipc	a1,0xd
    80020166:	18e58593          	addi	a1,a1,398 # 8002d2f0 <__func__.0+0x2d0>
    8002016a:	cf89                	beqz	a5,80020184 <timecmp_test_1+0x86>
    8002016c:	6498                	ld	a4,8(s1)
    8002016e:	4789                	li	a5,2
    80020170:	0000d597          	auipc	a1,0xd
    80020174:	17058593          	addi	a1,a1,368 # 8002d2e0 <__func__.0+0x2c0>
    80020178:	00f70663          	beq	a4,a5,80020184 <timecmp_test_1+0x86>
    8002017c:	0000d597          	auipc	a1,0xd
    80020180:	17458593          	addi	a1,a1,372 # 8002d2f0 <__func__.0+0x2d0>
    80020184:	0000d517          	auipc	a0,0xd
    80020188:	1ac50513          	addi	a0,a0,428 # 8002d330 <__func__.0+0x310>
    8002018c:	42f0a0ef          	jal	8002adba <printf>
    80020190:	00031797          	auipc	a5,0x31
    80020194:	e817c783          	lbu	a5,-383(a5) # 80051011 <excpt+0x1>
    80020198:	c789                	beqz	a5,800201a2 <timecmp_test_1+0xa4>
    8002019a:	6498                	ld	a4,8(s1)
    8002019c:	4789                	li	a5,2
    8002019e:	00f70c63          	beq	a4,a5,800201b6 <timecmp_test_1+0xb8>
    800201a2:	0000d517          	auipc	a0,0xd
    800201a6:	19650513          	addi	a0,a0,406 # 8002d338 <__func__.0+0x318>
    800201aa:	4110a0ef          	jal	8002adba <printf>
    800201ae:	02900513          	li	a0,41
    800201b2:	0f7090ef          	jal	80029aa8 <putchar>
    800201b6:	4529                	li	a0,10
    800201b8:	0f1090ef          	jal	80029aa8 <putchar>
    800201bc:	00031797          	auipc	a5,0x31
    800201c0:	e557c783          	lbu	a5,-427(a5) # 80051011 <excpt+0x1>
    800201c4:	4401                	li	s0,0
    800201c6:	c789                	beqz	a5,800201d0 <timecmp_test_1+0xd2>
    800201c8:	6480                	ld	s0,8(s1)
    800201ca:	1479                	addi	s0,s0,-2
    800201cc:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_HU);
    800201d0:	4505                	li	a0,1
    800201d2:	c9de00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800201d6:	b9de00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800201da:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800201de:	08200593          	li	a1,130
    800201e2:	00015617          	auipc	a2,0x15
    800201e6:	fbe60613          	addi	a2,a2,-66 # 800351a0 <__func__.0+0x8180>
    800201ea:	0000d517          	auipc	a0,0xd
    800201ee:	12e50513          	addi	a0,a0,302 # 8002d318 <__func__.0+0x2f8>
    800201f2:	3c90a0ef          	jal	8002adba <printf>
    800201f6:	00031797          	auipc	a5,0x31
    800201fa:	e1b7c783          	lbu	a5,-485(a5) # 80051011 <excpt+0x1>
    800201fe:	0000d597          	auipc	a1,0xd
    80020202:	0f258593          	addi	a1,a1,242 # 8002d2f0 <__func__.0+0x2d0>
    80020206:	cf89                	beqz	a5,80020220 <timecmp_test_1+0x122>
    80020208:	6498                	ld	a4,8(s1)
    8002020a:	4789                	li	a5,2
    8002020c:	0000d597          	auipc	a1,0xd
    80020210:	0d458593          	addi	a1,a1,212 # 8002d2e0 <__func__.0+0x2c0>
    80020214:	00f70663          	beq	a4,a5,80020220 <timecmp_test_1+0x122>
    80020218:	0000d597          	auipc	a1,0xd
    8002021c:	0d858593          	addi	a1,a1,216 # 8002d2f0 <__func__.0+0x2d0>
    80020220:	0000d517          	auipc	a0,0xd
    80020224:	11050513          	addi	a0,a0,272 # 8002d330 <__func__.0+0x310>
    80020228:	3930a0ef          	jal	8002adba <printf>
    8002022c:	00031797          	auipc	a5,0x31
    80020230:	de57c783          	lbu	a5,-539(a5) # 80051011 <excpt+0x1>
    80020234:	c789                	beqz	a5,8002023e <timecmp_test_1+0x140>
    80020236:	6498                	ld	a4,8(s1)
    80020238:	4789                	li	a5,2
    8002023a:	00f70c63          	beq	a4,a5,80020252 <timecmp_test_1+0x154>
    8002023e:	0000d517          	auipc	a0,0xd
    80020242:	0fa50513          	addi	a0,a0,250 # 8002d338 <__func__.0+0x318>
    80020246:	3750a0ef          	jal	8002adba <printf>
    8002024a:	02900513          	li	a0,41
    8002024e:	05b090ef          	jal	80029aa8 <putchar>
    80020252:	4529                	li	a0,10
    80020254:	055090ef          	jal	80029aa8 <putchar>
    80020258:	c015                	beqz	s0,8002027c <timecmp_test_1+0x17e>
    8002025a:	00031417          	auipc	s0,0x31
    8002025e:	db744403          	lbu	s0,-585(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020262:	0000d597          	auipc	a1,0xd
    80020266:	08e58593          	addi	a1,a1,142 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002026a:	cc11                	beqz	s0,80020286 <timecmp_test_1+0x188>
    8002026c:	6498                	ld	a4,8(s1)
    8002026e:	4789                	li	a5,2
    TEST_END(); 
    80020270:	0000d597          	auipc	a1,0xd
    80020274:	07058593          	addi	a1,a1,112 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    80020278:	00f70763          	beq	a4,a5,80020286 <timecmp_test_1+0x188>
    8002027c:	4401                	li	s0,0
    TEST_END(); 
    8002027e:	0000d597          	auipc	a1,0xd
    80020282:	07258593          	addi	a1,a1,114 # 8002d2f0 <__func__.0+0x2d0>
    80020286:	0000d517          	auipc	a0,0xd
    8002028a:	11250513          	addi	a0,a0,274 # 8002d398 <__func__.0+0x378>
    8002028e:	32d0a0ef          	jal	8002adba <printf>
    80020292:	4511                	li	a0,4
    80020294:	bdbe00ef          	jal	80000e6e <goto_priv>
    80020298:	cf2e10ef          	jal	8000178a <reset_state>
}
    8002029c:	60e2                	ld	ra,24(sp)
    8002029e:	8522                	mv	a0,s0
    800202a0:	6442                	ld	s0,16(sp)
    800202a2:	64a2                	ld	s1,8(sp)
    800202a4:	6105                	addi	sp,sp,32
    800202a6:	8082                	ret

00000000800202a8 <timecmp_test_2>:

bool timecmp_test_2() {
    800202a8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800202aa:	0000c597          	auipc	a1,0xc
    800202ae:	6ce58593          	addi	a1,a1,1742 # 8002c978 <__func__.19>
    800202b2:	0000d517          	auipc	a0,0xd
    800202b6:	04e50513          	addi	a0,a0,78 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_2() {
    800202ba:	ec06                	sd	ra,24(sp)
    800202bc:	e822                	sd	s0,16(sp)
    800202be:	e426                	sd	s1,8(sp)
    TEST_START();    
    800202c0:	2fb0a0ef          	jal	8002adba <printf>
    800202c4:	4529                	li	a0,10
    800202c6:	7e2090ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800202ca:	57fd                	li	a5,-1
    800202cc:	17fe                	slli	a5,a5,0x3f
    800202ce:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HS);
    800202d2:	450d                	li	a0,3
    800202d4:	b9be00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800202d8:	a9be00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800202dc:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800202e0:	08200593          	li	a1,130
    800202e4:	00015617          	auipc	a2,0x15
    800202e8:	f2460613          	addi	a2,a2,-220 # 80035208 <__func__.0+0x81e8>
    800202ec:	0000d517          	auipc	a0,0xd
    800202f0:	02c50513          	addi	a0,a0,44 # 8002d318 <__func__.0+0x2f8>
    800202f4:	2c70a0ef          	jal	8002adba <printf>
    800202f8:	00031797          	auipc	a5,0x31
    800202fc:	d197c783          	lbu	a5,-743(a5) # 80051011 <excpt+0x1>
    80020300:	00031497          	auipc	s1,0x31
    80020304:	d1048493          	addi	s1,s1,-752 # 80051010 <excpt>
    80020308:	0000d597          	auipc	a1,0xd
    8002030c:	fe858593          	addi	a1,a1,-24 # 8002d2f0 <__func__.0+0x2d0>
    80020310:	cf89                	beqz	a5,8002032a <timecmp_test_2+0x82>
    80020312:	6498                	ld	a4,8(s1)
    80020314:	4789                	li	a5,2
    80020316:	0000d597          	auipc	a1,0xd
    8002031a:	fca58593          	addi	a1,a1,-54 # 8002d2e0 <__func__.0+0x2c0>
    8002031e:	00f70663          	beq	a4,a5,8002032a <timecmp_test_2+0x82>
    80020322:	0000d597          	auipc	a1,0xd
    80020326:	fce58593          	addi	a1,a1,-50 # 8002d2f0 <__func__.0+0x2d0>
    8002032a:	0000d517          	auipc	a0,0xd
    8002032e:	00650513          	addi	a0,a0,6 # 8002d330 <__func__.0+0x310>
    80020332:	2890a0ef          	jal	8002adba <printf>
    80020336:	00031797          	auipc	a5,0x31
    8002033a:	cdb7c783          	lbu	a5,-805(a5) # 80051011 <excpt+0x1>
    8002033e:	c789                	beqz	a5,80020348 <timecmp_test_2+0xa0>
    80020340:	6498                	ld	a4,8(s1)
    80020342:	4789                	li	a5,2
    80020344:	00f70c63          	beq	a4,a5,8002035c <timecmp_test_2+0xb4>
    80020348:	0000d517          	auipc	a0,0xd
    8002034c:	ff050513          	addi	a0,a0,-16 # 8002d338 <__func__.0+0x318>
    80020350:	26b0a0ef          	jal	8002adba <printf>
    80020354:	02900513          	li	a0,41
    80020358:	750090ef          	jal	80029aa8 <putchar>
    8002035c:	4529                	li	a0,10
    8002035e:	74a090ef          	jal	80029aa8 <putchar>
    80020362:	00031417          	auipc	s0,0x31
    80020366:	caf44403          	lbu	s0,-849(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002036a:	0000d597          	auipc	a1,0xd
    8002036e:	f8658593          	addi	a1,a1,-122 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020372:	cc11                	beqz	s0,8002038e <timecmp_test_2+0xe6>
    80020374:	6498                	ld	a4,8(s1)
    80020376:	4789                	li	a5,2
    TEST_END(); 
    80020378:	0000d597          	auipc	a1,0xd
    8002037c:	f6858593          	addi	a1,a1,-152 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020380:	00f70763          	beq	a4,a5,8002038e <timecmp_test_2+0xe6>
    80020384:	4401                	li	s0,0
    TEST_END(); 
    80020386:	0000d597          	auipc	a1,0xd
    8002038a:	f6a58593          	addi	a1,a1,-150 # 8002d2f0 <__func__.0+0x2d0>
    8002038e:	0000d517          	auipc	a0,0xd
    80020392:	00a50513          	addi	a0,a0,10 # 8002d398 <__func__.0+0x378>
    80020396:	2250a0ef          	jal	8002adba <printf>
    8002039a:	4511                	li	a0,4
    8002039c:	ad3e00ef          	jal	80000e6e <goto_priv>
    800203a0:	beae10ef          	jal	8000178a <reset_state>
}
    800203a4:	60e2                	ld	ra,24(sp)
    800203a6:	8522                	mv	a0,s0
    800203a8:	6442                	ld	s0,16(sp)
    800203aa:	64a2                	ld	s1,8(sp)
    800203ac:	6105                	addi	sp,sp,32
    800203ae:	8082                	ret

00000000800203b0 <timecmp_test_3>:

bool timecmp_test_3() {
    800203b0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800203b2:	0000c597          	auipc	a1,0xc
    800203b6:	5d658593          	addi	a1,a1,1494 # 8002c988 <__func__.18>
    800203ba:	0000d517          	auipc	a0,0xd
    800203be:	f4650513          	addi	a0,a0,-186 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_3() {
    800203c2:	ec06                	sd	ra,24(sp)
    800203c4:	e822                	sd	s0,16(sp)
    800203c6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800203c8:	1f30a0ef          	jal	8002adba <printf>
    800203cc:	4529                	li	a0,10
    800203ce:	6da090ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800203d2:	57fd                	li	a5,-1
    800203d4:	17fe                	slli	a5,a5,0x3f
    800203d6:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VS); 
    800203da:	4509                	li	a0,2
    800203dc:	a93e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800203e0:	993e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800203e4:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800203e8:	08200593          	li	a1,130
    800203ec:	00015617          	auipc	a2,0x15
    800203f0:	e7460613          	addi	a2,a2,-396 # 80035260 <__func__.0+0x8240>
    800203f4:	0000d517          	auipc	a0,0xd
    800203f8:	f2450513          	addi	a0,a0,-220 # 8002d318 <__func__.0+0x2f8>
    800203fc:	1bf0a0ef          	jal	8002adba <printf>
    80020400:	00031797          	auipc	a5,0x31
    80020404:	c117c783          	lbu	a5,-1007(a5) # 80051011 <excpt+0x1>
    80020408:	00031497          	auipc	s1,0x31
    8002040c:	c0848493          	addi	s1,s1,-1016 # 80051010 <excpt>
    80020410:	0000d597          	auipc	a1,0xd
    80020414:	ee058593          	addi	a1,a1,-288 # 8002d2f0 <__func__.0+0x2d0>
    80020418:	cf89                	beqz	a5,80020432 <timecmp_test_3+0x82>
    8002041a:	6498                	ld	a4,8(s1)
    8002041c:	4789                	li	a5,2
    8002041e:	0000d597          	auipc	a1,0xd
    80020422:	ec258593          	addi	a1,a1,-318 # 8002d2e0 <__func__.0+0x2c0>
    80020426:	00f70663          	beq	a4,a5,80020432 <timecmp_test_3+0x82>
    8002042a:	0000d597          	auipc	a1,0xd
    8002042e:	ec658593          	addi	a1,a1,-314 # 8002d2f0 <__func__.0+0x2d0>
    80020432:	0000d517          	auipc	a0,0xd
    80020436:	efe50513          	addi	a0,a0,-258 # 8002d330 <__func__.0+0x310>
    8002043a:	1810a0ef          	jal	8002adba <printf>
    8002043e:	00031797          	auipc	a5,0x31
    80020442:	bd37c783          	lbu	a5,-1069(a5) # 80051011 <excpt+0x1>
    80020446:	c789                	beqz	a5,80020450 <timecmp_test_3+0xa0>
    80020448:	6498                	ld	a4,8(s1)
    8002044a:	4789                	li	a5,2
    8002044c:	00f70c63          	beq	a4,a5,80020464 <timecmp_test_3+0xb4>
    80020450:	0000d517          	auipc	a0,0xd
    80020454:	ee850513          	addi	a0,a0,-280 # 8002d338 <__func__.0+0x318>
    80020458:	1630a0ef          	jal	8002adba <printf>
    8002045c:	02900513          	li	a0,41
    80020460:	648090ef          	jal	80029aa8 <putchar>
    80020464:	4529                	li	a0,10
    80020466:	642090ef          	jal	80029aa8 <putchar>
    8002046a:	00031417          	auipc	s0,0x31
    8002046e:	ba744403          	lbu	s0,-1113(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020472:	0000d597          	auipc	a1,0xd
    80020476:	e7e58593          	addi	a1,a1,-386 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002047a:	cc11                	beqz	s0,80020496 <timecmp_test_3+0xe6>
    8002047c:	6498                	ld	a4,8(s1)
    8002047e:	4789                	li	a5,2
    TEST_END(); 
    80020480:	0000d597          	auipc	a1,0xd
    80020484:	e6058593          	addi	a1,a1,-416 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020488:	00f70763          	beq	a4,a5,80020496 <timecmp_test_3+0xe6>
    8002048c:	4401                	li	s0,0
    TEST_END(); 
    8002048e:	0000d597          	auipc	a1,0xd
    80020492:	e6258593          	addi	a1,a1,-414 # 8002d2f0 <__func__.0+0x2d0>
    80020496:	0000d517          	auipc	a0,0xd
    8002049a:	f0250513          	addi	a0,a0,-254 # 8002d398 <__func__.0+0x378>
    8002049e:	11d0a0ef          	jal	8002adba <printf>
    800204a2:	4511                	li	a0,4
    800204a4:	9cbe00ef          	jal	80000e6e <goto_priv>
    800204a8:	ae2e10ef          	jal	8000178a <reset_state>
}
    800204ac:	60e2                	ld	ra,24(sp)
    800204ae:	8522                	mv	a0,s0
    800204b0:	6442                	ld	s0,16(sp)
    800204b2:	64a2                	ld	s1,8(sp)
    800204b4:	6105                	addi	sp,sp,32
    800204b6:	8082                	ret

00000000800204b8 <timecmp_test_4>:

bool timecmp_test_4() {
    800204b8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800204ba:	0000c597          	auipc	a1,0xc
    800204be:	4de58593          	addi	a1,a1,1246 # 8002c998 <__func__.17>
    800204c2:	0000d517          	auipc	a0,0xd
    800204c6:	e3e50513          	addi	a0,a0,-450 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_4() {
    800204ca:	ec06                	sd	ra,24(sp)
    800204cc:	e822                	sd	s0,16(sp)
    800204ce:	e426                	sd	s1,8(sp)
    TEST_START();    
    800204d0:	0eb0a0ef          	jal	8002adba <printf>
    800204d4:	4529                	li	a0,10
    800204d6:	5d2090ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800204da:	57fd                	li	a5,-1
    800204dc:	17fe                	slli	a5,a5,0x3f
    800204de:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_HU);
    800204e2:	4505                	li	a0,1
    800204e4:	98be00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800204e8:	88be00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800204ec:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800204f0:	08200593          	li	a1,130
    800204f4:	00015617          	auipc	a2,0x15
    800204f8:	dc460613          	addi	a2,a2,-572 # 800352b8 <__func__.0+0x8298>
    800204fc:	0000d517          	auipc	a0,0xd
    80020500:	e1c50513          	addi	a0,a0,-484 # 8002d318 <__func__.0+0x2f8>
    80020504:	0b70a0ef          	jal	8002adba <printf>
    80020508:	00031797          	auipc	a5,0x31
    8002050c:	b097c783          	lbu	a5,-1271(a5) # 80051011 <excpt+0x1>
    80020510:	00031497          	auipc	s1,0x31
    80020514:	b0048493          	addi	s1,s1,-1280 # 80051010 <excpt>
    80020518:	0000d597          	auipc	a1,0xd
    8002051c:	dd858593          	addi	a1,a1,-552 # 8002d2f0 <__func__.0+0x2d0>
    80020520:	cf89                	beqz	a5,8002053a <timecmp_test_4+0x82>
    80020522:	6498                	ld	a4,8(s1)
    80020524:	4789                	li	a5,2
    80020526:	0000d597          	auipc	a1,0xd
    8002052a:	dba58593          	addi	a1,a1,-582 # 8002d2e0 <__func__.0+0x2c0>
    8002052e:	00f70663          	beq	a4,a5,8002053a <timecmp_test_4+0x82>
    80020532:	0000d597          	auipc	a1,0xd
    80020536:	dbe58593          	addi	a1,a1,-578 # 8002d2f0 <__func__.0+0x2d0>
    8002053a:	0000d517          	auipc	a0,0xd
    8002053e:	df650513          	addi	a0,a0,-522 # 8002d330 <__func__.0+0x310>
    80020542:	0790a0ef          	jal	8002adba <printf>
    80020546:	00031797          	auipc	a5,0x31
    8002054a:	acb7c783          	lbu	a5,-1333(a5) # 80051011 <excpt+0x1>
    8002054e:	c789                	beqz	a5,80020558 <timecmp_test_4+0xa0>
    80020550:	6498                	ld	a4,8(s1)
    80020552:	4789                	li	a5,2
    80020554:	00f70c63          	beq	a4,a5,8002056c <timecmp_test_4+0xb4>
    80020558:	0000d517          	auipc	a0,0xd
    8002055c:	de050513          	addi	a0,a0,-544 # 8002d338 <__func__.0+0x318>
    80020560:	05b0a0ef          	jal	8002adba <printf>
    80020564:	02900513          	li	a0,41
    80020568:	540090ef          	jal	80029aa8 <putchar>
    8002056c:	4529                	li	a0,10
    8002056e:	53a090ef          	jal	80029aa8 <putchar>
    80020572:	00031417          	auipc	s0,0x31
    80020576:	a9f44403          	lbu	s0,-1377(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002057a:	0000d597          	auipc	a1,0xd
    8002057e:	d7658593          	addi	a1,a1,-650 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020582:	cc11                	beqz	s0,8002059e <timecmp_test_4+0xe6>
    80020584:	6498                	ld	a4,8(s1)
    80020586:	4789                	li	a5,2
    TEST_END(); 
    80020588:	0000d597          	auipc	a1,0xd
    8002058c:	d5858593          	addi	a1,a1,-680 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020590:	00f70763          	beq	a4,a5,8002059e <timecmp_test_4+0xe6>
    80020594:	4401                	li	s0,0
    TEST_END(); 
    80020596:	0000d597          	auipc	a1,0xd
    8002059a:	d5a58593          	addi	a1,a1,-678 # 8002d2f0 <__func__.0+0x2d0>
    8002059e:	0000d517          	auipc	a0,0xd
    800205a2:	dfa50513          	addi	a0,a0,-518 # 8002d398 <__func__.0+0x378>
    800205a6:	0150a0ef          	jal	8002adba <printf>
    800205aa:	4511                	li	a0,4
    800205ac:	8c3e00ef          	jal	80000e6e <goto_priv>
    800205b0:	9dae10ef          	jal	8000178a <reset_state>
}
    800205b4:	60e2                	ld	ra,24(sp)
    800205b6:	8522                	mv	a0,s0
    800205b8:	6442                	ld	s0,16(sp)
    800205ba:	64a2                	ld	s1,8(sp)
    800205bc:	6105                	addi	sp,sp,32
    800205be:	8082                	ret

00000000800205c0 <timecmp_test_5>:

bool timecmp_test_5() {
    800205c0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800205c2:	0000c597          	auipc	a1,0xc
    800205c6:	3e658593          	addi	a1,a1,998 # 8002c9a8 <__func__.16>
    800205ca:	0000d517          	auipc	a0,0xd
    800205ce:	d3650513          	addi	a0,a0,-714 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_5() {
    800205d2:	ec06                	sd	ra,24(sp)
    800205d4:	e822                	sd	s0,16(sp)
    800205d6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800205d8:	7e20a0ef          	jal	8002adba <printf>
    800205dc:	4529                	li	a0,10
    800205de:	4ca090ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    800205e2:	57fd                	li	a5,-1
    800205e4:	17fe                	slli	a5,a5,0x3f
    800205e6:	30a7b073          	csrc	0x30a,a5

    goto_priv(PRIV_VU);
    800205ea:	4501                	li	a0,0
    800205ec:	883e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800205f0:	f82e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800205f4:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    800205f8:	08200593          	li	a1,130
    800205fc:	00015617          	auipc	a2,0x15
    80020600:	d1460613          	addi	a2,a2,-748 # 80035310 <__func__.0+0x82f0>
    80020604:	0000d517          	auipc	a0,0xd
    80020608:	d1450513          	addi	a0,a0,-748 # 8002d318 <__func__.0+0x2f8>
    8002060c:	7ae0a0ef          	jal	8002adba <printf>
    80020610:	00031797          	auipc	a5,0x31
    80020614:	a017c783          	lbu	a5,-1535(a5) # 80051011 <excpt+0x1>
    80020618:	00031497          	auipc	s1,0x31
    8002061c:	9f848493          	addi	s1,s1,-1544 # 80051010 <excpt>
    80020620:	0000d597          	auipc	a1,0xd
    80020624:	cd058593          	addi	a1,a1,-816 # 8002d2f0 <__func__.0+0x2d0>
    80020628:	cf89                	beqz	a5,80020642 <timecmp_test_5+0x82>
    8002062a:	6498                	ld	a4,8(s1)
    8002062c:	4789                	li	a5,2
    8002062e:	0000d597          	auipc	a1,0xd
    80020632:	cb258593          	addi	a1,a1,-846 # 8002d2e0 <__func__.0+0x2c0>
    80020636:	00f70663          	beq	a4,a5,80020642 <timecmp_test_5+0x82>
    8002063a:	0000d597          	auipc	a1,0xd
    8002063e:	cb658593          	addi	a1,a1,-842 # 8002d2f0 <__func__.0+0x2d0>
    80020642:	0000d517          	auipc	a0,0xd
    80020646:	cee50513          	addi	a0,a0,-786 # 8002d330 <__func__.0+0x310>
    8002064a:	7700a0ef          	jal	8002adba <printf>
    8002064e:	00031797          	auipc	a5,0x31
    80020652:	9c37c783          	lbu	a5,-1597(a5) # 80051011 <excpt+0x1>
    80020656:	c789                	beqz	a5,80020660 <timecmp_test_5+0xa0>
    80020658:	6498                	ld	a4,8(s1)
    8002065a:	4789                	li	a5,2
    8002065c:	00f70c63          	beq	a4,a5,80020674 <timecmp_test_5+0xb4>
    80020660:	0000d517          	auipc	a0,0xd
    80020664:	cd850513          	addi	a0,a0,-808 # 8002d338 <__func__.0+0x318>
    80020668:	7520a0ef          	jal	8002adba <printf>
    8002066c:	02900513          	li	a0,41
    80020670:	438090ef          	jal	80029aa8 <putchar>
    80020674:	4529                	li	a0,10
    80020676:	432090ef          	jal	80029aa8 <putchar>
    8002067a:	00031417          	auipc	s0,0x31
    8002067e:	99744403          	lbu	s0,-1641(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020682:	0000d597          	auipc	a1,0xd
    80020686:	c6e58593          	addi	a1,a1,-914 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    8002068a:	cc11                	beqz	s0,800206a6 <timecmp_test_5+0xe6>
    8002068c:	6498                	ld	a4,8(s1)
    8002068e:	4789                	li	a5,2
    TEST_END(); 
    80020690:	0000d597          	auipc	a1,0xd
    80020694:	c5058593          	addi	a1,a1,-944 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=0",
    80020698:	00f70763          	beq	a4,a5,800206a6 <timecmp_test_5+0xe6>
    8002069c:	4401                	li	s0,0
    TEST_END(); 
    8002069e:	0000d597          	auipc	a1,0xd
    800206a2:	c5258593          	addi	a1,a1,-942 # 8002d2f0 <__func__.0+0x2d0>
    800206a6:	0000d517          	auipc	a0,0xd
    800206aa:	cf250513          	addi	a0,a0,-782 # 8002d398 <__func__.0+0x378>
    800206ae:	70c0a0ef          	jal	8002adba <printf>
    800206b2:	4511                	li	a0,4
    800206b4:	fbae00ef          	jal	80000e6e <goto_priv>
    800206b8:	8d2e10ef          	jal	8000178a <reset_state>
}
    800206bc:	60e2                	ld	ra,24(sp)
    800206be:	8522                	mv	a0,s0
    800206c0:	6442                	ld	s0,16(sp)
    800206c2:	64a2                	ld	s1,8(sp)
    800206c4:	6105                	addi	sp,sp,32
    800206c6:	8082                	ret

00000000800206c8 <timecmp_test_6>:

bool timecmp_test_6() {
    800206c8:	1101                	addi	sp,sp,-32

    TEST_START();    
    800206ca:	0000c597          	auipc	a1,0xc
    800206ce:	2ee58593          	addi	a1,a1,750 # 8002c9b8 <__func__.15>
    800206d2:	0000d517          	auipc	a0,0xd
    800206d6:	c2e50513          	addi	a0,a0,-978 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_6() {
    800206da:	ec06                	sd	ra,24(sp)
    800206dc:	e822                	sd	s0,16(sp)
    800206de:	e426                	sd	s1,8(sp)
    TEST_START();    
    800206e0:	6da0a0ef          	jal	8002adba <printf>
    800206e4:	4529                	li	a0,10
    800206e6:	3c2090ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800206ea:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    800206ee:	450d                	li	a0,3
    800206f0:	f7ee00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800206f4:	e7ee00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800206f8:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800206fc:	08200593          	li	a1,130
    80020700:	00015617          	auipc	a2,0x15
    80020704:	c6860613          	addi	a2,a2,-920 # 80035368 <__func__.0+0x8348>
    80020708:	0000d517          	auipc	a0,0xd
    8002070c:	c1050513          	addi	a0,a0,-1008 # 8002d318 <__func__.0+0x2f8>
    80020710:	6aa0a0ef          	jal	8002adba <printf>
    80020714:	00031797          	auipc	a5,0x31
    80020718:	8fd7c783          	lbu	a5,-1795(a5) # 80051011 <excpt+0x1>
    8002071c:	00031497          	auipc	s1,0x31
    80020720:	8f448493          	addi	s1,s1,-1804 # 80051010 <excpt>
    80020724:	0000d597          	auipc	a1,0xd
    80020728:	bcc58593          	addi	a1,a1,-1076 # 8002d2f0 <__func__.0+0x2d0>
    8002072c:	cf89                	beqz	a5,80020746 <timecmp_test_6+0x7e>
    8002072e:	6498                	ld	a4,8(s1)
    80020730:	4789                	li	a5,2
    80020732:	0000d597          	auipc	a1,0xd
    80020736:	bae58593          	addi	a1,a1,-1106 # 8002d2e0 <__func__.0+0x2c0>
    8002073a:	00f70663          	beq	a4,a5,80020746 <timecmp_test_6+0x7e>
    8002073e:	0000d597          	auipc	a1,0xd
    80020742:	bb258593          	addi	a1,a1,-1102 # 8002d2f0 <__func__.0+0x2d0>
    80020746:	0000d517          	auipc	a0,0xd
    8002074a:	bea50513          	addi	a0,a0,-1046 # 8002d330 <__func__.0+0x310>
    8002074e:	66c0a0ef          	jal	8002adba <printf>
    80020752:	00031797          	auipc	a5,0x31
    80020756:	8bf7c783          	lbu	a5,-1857(a5) # 80051011 <excpt+0x1>
    8002075a:	c789                	beqz	a5,80020764 <timecmp_test_6+0x9c>
    8002075c:	6498                	ld	a4,8(s1)
    8002075e:	4789                	li	a5,2
    80020760:	00f70c63          	beq	a4,a5,80020778 <timecmp_test_6+0xb0>
    80020764:	0000d517          	auipc	a0,0xd
    80020768:	bd450513          	addi	a0,a0,-1068 # 8002d338 <__func__.0+0x318>
    8002076c:	64e0a0ef          	jal	8002adba <printf>
    80020770:	02900513          	li	a0,41
    80020774:	334090ef          	jal	80029aa8 <putchar>
    80020778:	4529                	li	a0,10
    8002077a:	32e090ef          	jal	80029aa8 <putchar>
    8002077e:	00031417          	auipc	s0,0x31
    80020782:	89344403          	lbu	s0,-1901(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80020786:	0000d597          	auipc	a1,0xd
    8002078a:	b6a58593          	addi	a1,a1,-1174 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002078e:	cc11                	beqz	s0,800207aa <timecmp_test_6+0xe2>
    80020790:	6498                	ld	a4,8(s1)
    80020792:	4789                	li	a5,2
    TEST_END(); 
    80020794:	0000d597          	auipc	a1,0xd
    80020798:	b4c58593          	addi	a1,a1,-1204 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    8002079c:	00f70763          	beq	a4,a5,800207aa <timecmp_test_6+0xe2>
    800207a0:	4401                	li	s0,0
    TEST_END(); 
    800207a2:	0000d597          	auipc	a1,0xd
    800207a6:	b4e58593          	addi	a1,a1,-1202 # 8002d2f0 <__func__.0+0x2d0>
    800207aa:	0000d517          	auipc	a0,0xd
    800207ae:	bee50513          	addi	a0,a0,-1042 # 8002d398 <__func__.0+0x378>
    800207b2:	6080a0ef          	jal	8002adba <printf>
    800207b6:	4511                	li	a0,4
    800207b8:	eb6e00ef          	jal	80000e6e <goto_priv>
    800207bc:	fcfe00ef          	jal	8000178a <reset_state>
}
    800207c0:	60e2                	ld	ra,24(sp)
    800207c2:	8522                	mv	a0,s0
    800207c4:	6442                	ld	s0,16(sp)
    800207c6:	64a2                	ld	s1,8(sp)
    800207c8:	6105                	addi	sp,sp,32
    800207ca:	8082                	ret

00000000800207cc <timecmp_test_7>:

bool timecmp_test_7() {
    800207cc:	1101                	addi	sp,sp,-32

    TEST_START();    
    800207ce:	0000c597          	auipc	a1,0xc
    800207d2:	1fa58593          	addi	a1,a1,506 # 8002c9c8 <__func__.14>
    800207d6:	0000d517          	auipc	a0,0xd
    800207da:	b2a50513          	addi	a0,a0,-1238 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_7() {
    800207de:	ec06                	sd	ra,24(sp)
    800207e0:	e822                	sd	s0,16(sp)
    800207e2:	e426                	sd	s1,8(sp)
    TEST_START();    
    800207e4:	5d60a0ef          	jal	8002adba <printf>
    800207e8:	4529                	li	a0,10
    800207ea:	2be090ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800207ee:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    800207f2:	4509                	li	a0,2
    800207f4:	e7ae00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800207f8:	d7ae00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    800207fc:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020800:	08200593          	li	a1,130
    80020804:	00015617          	auipc	a2,0x15
    80020808:	bbc60613          	addi	a2,a2,-1092 # 800353c0 <__func__.0+0x83a0>
    8002080c:	0000d517          	auipc	a0,0xd
    80020810:	b0c50513          	addi	a0,a0,-1268 # 8002d318 <__func__.0+0x2f8>
    80020814:	5a60a0ef          	jal	8002adba <printf>
    80020818:	00030797          	auipc	a5,0x30
    8002081c:	7f97c783          	lbu	a5,2041(a5) # 80051011 <excpt+0x1>
    80020820:	00030497          	auipc	s1,0x30
    80020824:	7f048493          	addi	s1,s1,2032 # 80051010 <excpt>
    80020828:	0000d597          	auipc	a1,0xd
    8002082c:	ac858593          	addi	a1,a1,-1336 # 8002d2f0 <__func__.0+0x2d0>
    80020830:	cf89                	beqz	a5,8002084a <timecmp_test_7+0x7e>
    80020832:	6498                	ld	a4,8(s1)
    80020834:	4789                	li	a5,2
    80020836:	0000d597          	auipc	a1,0xd
    8002083a:	aaa58593          	addi	a1,a1,-1366 # 8002d2e0 <__func__.0+0x2c0>
    8002083e:	00f70663          	beq	a4,a5,8002084a <timecmp_test_7+0x7e>
    80020842:	0000d597          	auipc	a1,0xd
    80020846:	aae58593          	addi	a1,a1,-1362 # 8002d2f0 <__func__.0+0x2d0>
    8002084a:	0000d517          	auipc	a0,0xd
    8002084e:	ae650513          	addi	a0,a0,-1306 # 8002d330 <__func__.0+0x310>
    80020852:	5680a0ef          	jal	8002adba <printf>
    80020856:	00030797          	auipc	a5,0x30
    8002085a:	7bb7c783          	lbu	a5,1979(a5) # 80051011 <excpt+0x1>
    8002085e:	c789                	beqz	a5,80020868 <timecmp_test_7+0x9c>
    80020860:	6498                	ld	a4,8(s1)
    80020862:	4789                	li	a5,2
    80020864:	00f70c63          	beq	a4,a5,8002087c <timecmp_test_7+0xb0>
    80020868:	0000d517          	auipc	a0,0xd
    8002086c:	ad050513          	addi	a0,a0,-1328 # 8002d338 <__func__.0+0x318>
    80020870:	54a0a0ef          	jal	8002adba <printf>
    80020874:	02900513          	li	a0,41
    80020878:	230090ef          	jal	80029aa8 <putchar>
    8002087c:	4529                	li	a0,10
    8002087e:	22a090ef          	jal	80029aa8 <putchar>
    80020882:	00030417          	auipc	s0,0x30
    80020886:	78f44403          	lbu	s0,1935(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002088a:	0000d597          	auipc	a1,0xd
    8002088e:	a6658593          	addi	a1,a1,-1434 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    80020892:	cc11                	beqz	s0,800208ae <timecmp_test_7+0xe2>
    80020894:	6498                	ld	a4,8(s1)
    80020896:	4789                	li	a5,2
    TEST_END(); 
    80020898:	0000d597          	auipc	a1,0xd
    8002089c:	a4858593          	addi	a1,a1,-1464 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses illegal instruction exception when mcounteren.tm=0",
    800208a0:	00f70763          	beq	a4,a5,800208ae <timecmp_test_7+0xe2>
    800208a4:	4401                	li	s0,0
    TEST_END(); 
    800208a6:	0000d597          	auipc	a1,0xd
    800208aa:	a4a58593          	addi	a1,a1,-1462 # 8002d2f0 <__func__.0+0x2d0>
    800208ae:	0000d517          	auipc	a0,0xd
    800208b2:	aea50513          	addi	a0,a0,-1302 # 8002d398 <__func__.0+0x378>
    800208b6:	5040a0ef          	jal	8002adba <printf>
    800208ba:	4511                	li	a0,4
    800208bc:	db2e00ef          	jal	80000e6e <goto_priv>
    800208c0:	ecbe00ef          	jal	8000178a <reset_state>
}
    800208c4:	60e2                	ld	ra,24(sp)
    800208c6:	8522                	mv	a0,s0
    800208c8:	6442                	ld	s0,16(sp)
    800208ca:	64a2                	ld	s1,8(sp)
    800208cc:	6105                	addi	sp,sp,32
    800208ce:	8082                	ret

00000000800208d0 <timecmp_test_8>:

bool timecmp_test_8() {
    800208d0:	1101                	addi	sp,sp,-32

    TEST_START();    
    800208d2:	0000c597          	auipc	a1,0xc
    800208d6:	10658593          	addi	a1,a1,262 # 8002c9d8 <__func__.13>
    800208da:	0000d517          	auipc	a0,0xd
    800208de:	a2650513          	addi	a0,a0,-1498 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_8() {
    800208e2:	ec06                	sd	ra,24(sp)
    800208e4:	e822                	sd	s0,16(sp)
    800208e6:	e426                	sd	s1,8(sp)
    TEST_START();    
    800208e8:	4d20a0ef          	jal	8002adba <printf>
    800208ec:	4529                	li	a0,10
    800208ee:	1ba090ef          	jal	80029aa8 <putchar>

    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800208f2:	57fd                	li	a5,-1
    800208f4:	17fe                	slli	a5,a5,0x3f
    800208f6:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    800208fa:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800208fe:	30616073          	csrsi	mcounteren,2
    CSRC(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020902:	60617073          	csrci	hcounteren,2

    goto_priv(PRIV_VS);
    80020906:	4509                	li	a0,2
    80020908:	d66e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8002090c:	c66e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020910:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    80020914:	08200593          	li	a1,130
    80020918:	00015617          	auipc	a2,0x15
    8002091c:	b0060613          	addi	a2,a2,-1280 # 80035418 <__func__.0+0x83f8>
    80020920:	0000d517          	auipc	a0,0xd
    80020924:	9f850513          	addi	a0,a0,-1544 # 8002d318 <__func__.0+0x2f8>
    80020928:	4920a0ef          	jal	8002adba <printf>
    8002092c:	00030797          	auipc	a5,0x30
    80020930:	6e57c783          	lbu	a5,1765(a5) # 80051011 <excpt+0x1>
    80020934:	00030497          	auipc	s1,0x30
    80020938:	6dc48493          	addi	s1,s1,1756 # 80051010 <excpt>
    8002093c:	0000d597          	auipc	a1,0xd
    80020940:	9b458593          	addi	a1,a1,-1612 # 8002d2f0 <__func__.0+0x2d0>
    80020944:	cf89                	beqz	a5,8002095e <timecmp_test_8+0x8e>
    80020946:	6498                	ld	a4,8(s1)
    80020948:	47d9                	li	a5,22
    8002094a:	0000d597          	auipc	a1,0xd
    8002094e:	99658593          	addi	a1,a1,-1642 # 8002d2e0 <__func__.0+0x2c0>
    80020952:	00f70663          	beq	a4,a5,8002095e <timecmp_test_8+0x8e>
    80020956:	0000d597          	auipc	a1,0xd
    8002095a:	99a58593          	addi	a1,a1,-1638 # 8002d2f0 <__func__.0+0x2d0>
    8002095e:	0000d517          	auipc	a0,0xd
    80020962:	9d250513          	addi	a0,a0,-1582 # 8002d330 <__func__.0+0x310>
    80020966:	4540a0ef          	jal	8002adba <printf>
    8002096a:	00030797          	auipc	a5,0x30
    8002096e:	6a77c783          	lbu	a5,1703(a5) # 80051011 <excpt+0x1>
    80020972:	c789                	beqz	a5,8002097c <timecmp_test_8+0xac>
    80020974:	6498                	ld	a4,8(s1)
    80020976:	47d9                	li	a5,22
    80020978:	00f70c63          	beq	a4,a5,80020990 <timecmp_test_8+0xc0>
    8002097c:	0000d517          	auipc	a0,0xd
    80020980:	9bc50513          	addi	a0,a0,-1604 # 8002d338 <__func__.0+0x318>
    80020984:	4360a0ef          	jal	8002adba <printf>
    80020988:	02900513          	li	a0,41
    8002098c:	11c090ef          	jal	80029aa8 <putchar>
    80020990:	4529                	li	a0,10
    80020992:	116090ef          	jal	80029aa8 <putchar>
    80020996:	00030417          	auipc	s0,0x30
    8002099a:	67b44403          	lbu	s0,1659(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    8002099e:	0000d597          	auipc	a1,0xd
    800209a2:	95258593          	addi	a1,a1,-1710 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    800209a6:	cc11                	beqz	s0,800209c2 <timecmp_test_8+0xf2>
    800209a8:	6498                	ld	a4,8(s1)
    800209aa:	47d9                	li	a5,22
    TEST_END(); 
    800209ac:	0000d597          	auipc	a1,0xd
    800209b0:	93458593          	addi	a1,a1,-1740 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=0",
    800209b4:	00f70763          	beq	a4,a5,800209c2 <timecmp_test_8+0xf2>
    800209b8:	4401                	li	s0,0
    TEST_END(); 
    800209ba:	0000d597          	auipc	a1,0xd
    800209be:	93658593          	addi	a1,a1,-1738 # 8002d2f0 <__func__.0+0x2d0>
    800209c2:	0000d517          	auipc	a0,0xd
    800209c6:	9d650513          	addi	a0,a0,-1578 # 8002d398 <__func__.0+0x378>
    800209ca:	3f00a0ef          	jal	8002adba <printf>
    800209ce:	4511                	li	a0,4
    800209d0:	c9ee00ef          	jal	80000e6e <goto_priv>
    800209d4:	db7e00ef          	jal	8000178a <reset_state>
}
    800209d8:	60e2                	ld	ra,24(sp)
    800209da:	8522                	mv	a0,s0
    800209dc:	6442                	ld	s0,16(sp)
    800209de:	64a2                	ld	s1,8(sp)
    800209e0:	6105                	addi	sp,sp,32
    800209e2:	8082                	ret

00000000800209e4 <timecmp_test_9>:

bool timecmp_test_9() {
    800209e4:	1101                	addi	sp,sp,-32

    TEST_START();    
    800209e6:	0000c597          	auipc	a1,0xc
    800209ea:	00258593          	addi	a1,a1,2 # 8002c9e8 <__func__.12>
    800209ee:	0000d517          	auipc	a0,0xd
    800209f2:	91250513          	addi	a0,a0,-1774 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_9() {
    800209f6:	ec06                	sd	ra,24(sp)
    800209f8:	e822                	sd	s0,16(sp)
    800209fa:	e426                	sd	s1,8(sp)
    TEST_START();    
    800209fc:	3be0a0ef          	jal	8002adba <printf>
    80020a00:	4529                	li	a0,10
    80020a02:	0a6090ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020a06:	57fd                	li	a5,-1
    80020a08:	17fe                	slli	a5,a5,0x3f
    80020a0a:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020a0e:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020a12:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020a16:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020a1a:	4509                	li	a0,2
    80020a1c:	c52e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80020a20:	b52e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020a24:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020a28:	08200593          	li	a1,130
    80020a2c:	00015617          	auipc	a2,0x15
    80020a30:	a6c60613          	addi	a2,a2,-1428 # 80035498 <__func__.0+0x8478>
    80020a34:	0000d517          	auipc	a0,0xd
    80020a38:	8e450513          	addi	a0,a0,-1820 # 8002d318 <__func__.0+0x2f8>
    80020a3c:	37e0a0ef          	jal	8002adba <printf>
    80020a40:	00030797          	auipc	a5,0x30
    80020a44:	5d17c783          	lbu	a5,1489(a5) # 80051011 <excpt+0x1>
    80020a48:	00030497          	auipc	s1,0x30
    80020a4c:	5c848493          	addi	s1,s1,1480 # 80051010 <excpt>
    80020a50:	0000d597          	auipc	a1,0xd
    80020a54:	8a058593          	addi	a1,a1,-1888 # 8002d2f0 <__func__.0+0x2d0>
    80020a58:	cf89                	beqz	a5,80020a72 <timecmp_test_9+0x8e>
    80020a5a:	6498                	ld	a4,8(s1)
    80020a5c:	47d9                	li	a5,22
    80020a5e:	0000d597          	auipc	a1,0xd
    80020a62:	88258593          	addi	a1,a1,-1918 # 8002d2e0 <__func__.0+0x2c0>
    80020a66:	00f70663          	beq	a4,a5,80020a72 <timecmp_test_9+0x8e>
    80020a6a:	0000d597          	auipc	a1,0xd
    80020a6e:	88658593          	addi	a1,a1,-1914 # 8002d2f0 <__func__.0+0x2d0>
    80020a72:	0000d517          	auipc	a0,0xd
    80020a76:	8be50513          	addi	a0,a0,-1858 # 8002d330 <__func__.0+0x310>
    80020a7a:	3400a0ef          	jal	8002adba <printf>
    80020a7e:	00030797          	auipc	a5,0x30
    80020a82:	5937c783          	lbu	a5,1427(a5) # 80051011 <excpt+0x1>
    80020a86:	c789                	beqz	a5,80020a90 <timecmp_test_9+0xac>
    80020a88:	6498                	ld	a4,8(s1)
    80020a8a:	47d9                	li	a5,22
    80020a8c:	00f70c63          	beq	a4,a5,80020aa4 <timecmp_test_9+0xc0>
    80020a90:	0000d517          	auipc	a0,0xd
    80020a94:	8a850513          	addi	a0,a0,-1880 # 8002d338 <__func__.0+0x318>
    80020a98:	3220a0ef          	jal	8002adba <printf>
    80020a9c:	02900513          	li	a0,41
    80020aa0:	008090ef          	jal	80029aa8 <putchar>
    80020aa4:	4529                	li	a0,10
    80020aa6:	002090ef          	jal	80029aa8 <putchar>
    80020aaa:	00030417          	auipc	s0,0x30
    80020aae:	56744403          	lbu	s0,1383(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020ab2:	0000d597          	auipc	a1,0xd
    80020ab6:	83e58593          	addi	a1,a1,-1986 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020aba:	cc11                	beqz	s0,80020ad6 <timecmp_test_9+0xf2>
    80020abc:	6498                	ld	a4,8(s1)
    80020abe:	47d9                	li	a5,22
    TEST_END(); 
    80020ac0:	0000d597          	auipc	a1,0xd
    80020ac4:	82058593          	addi	a1,a1,-2016 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1 hcounteren.tm=1",
    80020ac8:	00f70763          	beq	a4,a5,80020ad6 <timecmp_test_9+0xf2>
    80020acc:	4401                	li	s0,0
    TEST_END(); 
    80020ace:	0000d597          	auipc	a1,0xd
    80020ad2:	82258593          	addi	a1,a1,-2014 # 8002d2f0 <__func__.0+0x2d0>
    80020ad6:	0000d517          	auipc	a0,0xd
    80020ada:	8c250513          	addi	a0,a0,-1854 # 8002d398 <__func__.0+0x378>
    80020ade:	2dc0a0ef          	jal	8002adba <printf>
    80020ae2:	4511                	li	a0,4
    80020ae4:	b8ae00ef          	jal	80000e6e <goto_priv>
    80020ae8:	ca3e00ef          	jal	8000178a <reset_state>
}
    80020aec:	60e2                	ld	ra,24(sp)
    80020aee:	8522                	mv	a0,s0
    80020af0:	6442                	ld	s0,16(sp)
    80020af2:	64a2                	ld	s1,8(sp)
    80020af4:	6105                	addi	sp,sp,32
    80020af6:	8082                	ret

0000000080020af8 <timecmp_test_10>:

bool timecmp_test_10() {
    80020af8:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020afa:	0000c597          	auipc	a1,0xc
    80020afe:	efe58593          	addi	a1,a1,-258 # 8002c9f8 <__func__.11>
    80020b02:	0000c517          	auipc	a0,0xc
    80020b06:	7fe50513          	addi	a0,a0,2046 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_10() {
    80020b0a:	e406                	sd	ra,8(sp)
    80020b0c:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020b0e:	2ac0a0ef          	jal	8002adba <printf>
    80020b12:	4529                	li	a0,10
    80020b14:	795080ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020b18:	57fd                	li	a5,-1
    80020b1a:	17fe                	slli	a5,a5,0x3f
    80020b1c:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020b20:	60a7a073          	csrs	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020b24:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80020b28:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80020b2c:	4509                	li	a0,2
    80020b2e:	b40e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80020b32:	a40e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020b36:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020b3a:	08200593          	li	a1,130
    80020b3e:	00015617          	auipc	a2,0x15
    80020b42:	9da60613          	addi	a2,a2,-1574 # 80035518 <__func__.0+0x84f8>
    80020b46:	0000c517          	auipc	a0,0xc
    80020b4a:	7d250513          	addi	a0,a0,2002 # 8002d318 <__func__.0+0x2f8>
    80020b4e:	26c0a0ef          	jal	8002adba <printf>
    80020b52:	00030797          	auipc	a5,0x30
    80020b56:	4bf7c783          	lbu	a5,1215(a5) # 80051011 <excpt+0x1>
    80020b5a:	0000c597          	auipc	a1,0xc
    80020b5e:	78658593          	addi	a1,a1,1926 # 8002d2e0 <__func__.0+0x2c0>
    80020b62:	c789                	beqz	a5,80020b6c <timecmp_test_10+0x74>
    80020b64:	0000c597          	auipc	a1,0xc
    80020b68:	78c58593          	addi	a1,a1,1932 # 8002d2f0 <__func__.0+0x2d0>
    80020b6c:	0000c517          	auipc	a0,0xc
    80020b70:	7c450513          	addi	a0,a0,1988 # 8002d330 <__func__.0+0x310>
    80020b74:	2460a0ef          	jal	8002adba <printf>
    80020b78:	00030797          	auipc	a5,0x30
    80020b7c:	4997c783          	lbu	a5,1177(a5) # 80051011 <excpt+0x1>
    80020b80:	e7a1                	bnez	a5,80020bc8 <timecmp_test_10+0xd0>
    80020b82:	4529                	li	a0,10
    80020b84:	725080ef          	jal	80029aa8 <putchar>
    80020b88:	00030797          	auipc	a5,0x30
    80020b8c:	4897c783          	lbu	a5,1161(a5) # 80051011 <excpt+0x1>
    80020b90:	e795                	bnez	a5,80020bbc <timecmp_test_10+0xc4>
    80020b92:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020b94:	0000c597          	auipc	a1,0xc
    80020b98:	74c58593          	addi	a1,a1,1868 # 8002d2e0 <__func__.0+0x2c0>
    80020b9c:	0000c517          	auipc	a0,0xc
    80020ba0:	7fc50513          	addi	a0,a0,2044 # 8002d398 <__func__.0+0x378>
    80020ba4:	2160a0ef          	jal	8002adba <printf>
    80020ba8:	4511                	li	a0,4
    80020baa:	ac4e00ef          	jal	80000e6e <goto_priv>
    80020bae:	bdde00ef          	jal	8000178a <reset_state>
}
    80020bb2:	60a2                	ld	ra,8(sp)
    80020bb4:	8522                	mv	a0,s0
    80020bb6:	6402                	ld	s0,0(sp)
    80020bb8:	0141                	addi	sp,sp,16
    80020bba:	8082                	ret
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020bbc:	4401                	li	s0,0
    TEST_END(); 
    80020bbe:	0000c597          	auipc	a1,0xc
    80020bc2:	73258593          	addi	a1,a1,1842 # 8002d2f0 <__func__.0+0x2d0>
    80020bc6:	bfd9                	j	80020b9c <timecmp_test_10+0xa4>
    TEST_ASSERT("vs access to stimecmp successful when menvcfg.stce=1 henvcfg.stce=1 mcounteren.tm=1 hcounteren.tm=1",
    80020bc8:	0000c517          	auipc	a0,0xc
    80020bcc:	77050513          	addi	a0,a0,1904 # 8002d338 <__func__.0+0x318>
    80020bd0:	1ea0a0ef          	jal	8002adba <printf>
    80020bd4:	02900513          	li	a0,41
    80020bd8:	6d1080ef          	jal	80029aa8 <putchar>
    80020bdc:	b75d                	j	80020b82 <timecmp_test_10+0x8a>

0000000080020bde <timecmp_test_11>:

bool timecmp_test_11() {
    80020bde:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020be0:	0000c597          	auipc	a1,0xc
    80020be4:	e2858593          	addi	a1,a1,-472 # 8002ca08 <__func__.10>
    80020be8:	0000c517          	auipc	a0,0xc
    80020bec:	71850513          	addi	a0,a0,1816 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_11() {
    80020bf0:	e406                	sd	ra,8(sp)
    80020bf2:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020bf4:	1c60a0ef          	jal	8002adba <printf>
    80020bf8:	4529                	li	a0,10
    80020bfa:	6af080ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020bfe:	57fd                	li	a5,-1
    80020c00:	17fe                	slli	a5,a5,0x3f
    80020c02:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020c06:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020c0a:	450d                	li	a0,3
    80020c0c:	a62e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80020c10:	962e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80020c14:	14d027f3          	csrr	a5,stimecmp
    CSRR(CSR_VSTIMECMP);
    80020c18:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020c1c:	08200593          	li	a1,130
    80020c20:	00015617          	auipc	a2,0x15
    80020c24:	96060613          	addi	a2,a2,-1696 # 80035580 <__func__.0+0x8560>
    80020c28:	0000c517          	auipc	a0,0xc
    80020c2c:	6f050513          	addi	a0,a0,1776 # 8002d318 <__func__.0+0x2f8>
    80020c30:	18a0a0ef          	jal	8002adba <printf>
    80020c34:	00030797          	auipc	a5,0x30
    80020c38:	3dd7c783          	lbu	a5,989(a5) # 80051011 <excpt+0x1>
    80020c3c:	0000c597          	auipc	a1,0xc
    80020c40:	6a458593          	addi	a1,a1,1700 # 8002d2e0 <__func__.0+0x2c0>
    80020c44:	c789                	beqz	a5,80020c4e <timecmp_test_11+0x70>
    80020c46:	0000c597          	auipc	a1,0xc
    80020c4a:	6aa58593          	addi	a1,a1,1706 # 8002d2f0 <__func__.0+0x2d0>
    80020c4e:	0000c517          	auipc	a0,0xc
    80020c52:	6e250513          	addi	a0,a0,1762 # 8002d330 <__func__.0+0x310>
    80020c56:	1640a0ef          	jal	8002adba <printf>
    80020c5a:	00030797          	auipc	a5,0x30
    80020c5e:	3b77c783          	lbu	a5,951(a5) # 80051011 <excpt+0x1>
    80020c62:	e7a1                	bnez	a5,80020caa <timecmp_test_11+0xcc>
    80020c64:	4529                	li	a0,10
    80020c66:	643080ef          	jal	80029aa8 <putchar>
    80020c6a:	00030797          	auipc	a5,0x30
    80020c6e:	3a77c783          	lbu	a5,935(a5) # 80051011 <excpt+0x1>
    80020c72:	e795                	bnez	a5,80020c9e <timecmp_test_11+0xc0>
    80020c74:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020c76:	0000c597          	auipc	a1,0xc
    80020c7a:	66a58593          	addi	a1,a1,1642 # 8002d2e0 <__func__.0+0x2c0>
    80020c7e:	0000c517          	auipc	a0,0xc
    80020c82:	71a50513          	addi	a0,a0,1818 # 8002d398 <__func__.0+0x378>
    80020c86:	1340a0ef          	jal	8002adba <printf>
    80020c8a:	4511                	li	a0,4
    80020c8c:	9e2e00ef          	jal	80000e6e <goto_priv>
    80020c90:	afbe00ef          	jal	8000178a <reset_state>
}
    80020c94:	60a2                	ld	ra,8(sp)
    80020c96:	8522                	mv	a0,s0
    80020c98:	6402                	ld	s0,0(sp)
    80020c9a:	0141                	addi	sp,sp,16
    80020c9c:	8082                	ret
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020c9e:	4401                	li	s0,0
    TEST_END(); 
    80020ca0:	0000c597          	auipc	a1,0xc
    80020ca4:	65058593          	addi	a1,a1,1616 # 8002d2f0 <__func__.0+0x2d0>
    80020ca8:	bfd9                	j	80020c7e <timecmp_test_11+0xa0>
    TEST_ASSERT("vs access to stimecmp/vstimecmp successful when menvcfg.stce=1 mcounteren.tm=1",
    80020caa:	0000c517          	auipc	a0,0xc
    80020cae:	68e50513          	addi	a0,a0,1678 # 8002d338 <__func__.0+0x318>
    80020cb2:	1080a0ef          	jal	8002adba <printf>
    80020cb6:	02900513          	li	a0,41
    80020cba:	5ef080ef          	jal	80029aa8 <putchar>
    80020cbe:	b75d                	j	80020c64 <timecmp_test_11+0x86>

0000000080020cc0 <timecmp_test_12>:

bool timecmp_test_12() {
    80020cc0:	1141                	addi	sp,sp,-16

    TEST_START();    
    80020cc2:	0000c597          	auipc	a1,0xc
    80020cc6:	d5658593          	addi	a1,a1,-682 # 8002ca18 <__func__.9>
    80020cca:	0000c517          	auipc	a0,0xc
    80020cce:	63650513          	addi	a0,a0,1590 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_12() {
    80020cd2:	e406                	sd	ra,8(sp)
    80020cd4:	e022                	sd	s0,0(sp)
    TEST_START();    
    80020cd6:	0e40a0ef          	jal	8002adba <printf>
    80020cda:	4529                	li	a0,10
    80020cdc:	5cd080ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80020ce0:	57fd                	li	a5,-1
    80020ce2:	17fe                	slli	a5,a5,0x3f
    80020ce4:	30a7a073          	csrs	0x30a,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020ce8:	30616073          	csrsi	mcounteren,2

    goto_priv(PRIV_HS);
    80020cec:	450d                	li	a0,3
    80020cee:	980e00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80020cf2:	880e00ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020cf6:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020cfa:	08200593          	li	a1,130
    80020cfe:	00015617          	auipc	a2,0x15
    80020d02:	8d260613          	addi	a2,a2,-1838 # 800355d0 <__func__.0+0x85b0>
    80020d06:	0000c517          	auipc	a0,0xc
    80020d0a:	61250513          	addi	a0,a0,1554 # 8002d318 <__func__.0+0x2f8>
    80020d0e:	0ac0a0ef          	jal	8002adba <printf>
    80020d12:	00030797          	auipc	a5,0x30
    80020d16:	2ff7c783          	lbu	a5,767(a5) # 80051011 <excpt+0x1>
    80020d1a:	0000c597          	auipc	a1,0xc
    80020d1e:	5c658593          	addi	a1,a1,1478 # 8002d2e0 <__func__.0+0x2c0>
    80020d22:	c789                	beqz	a5,80020d2c <timecmp_test_12+0x6c>
    80020d24:	0000c597          	auipc	a1,0xc
    80020d28:	5cc58593          	addi	a1,a1,1484 # 8002d2f0 <__func__.0+0x2d0>
    80020d2c:	0000c517          	auipc	a0,0xc
    80020d30:	60450513          	addi	a0,a0,1540 # 8002d330 <__func__.0+0x310>
    80020d34:	0860a0ef          	jal	8002adba <printf>
    80020d38:	00030797          	auipc	a5,0x30
    80020d3c:	2d97c783          	lbu	a5,729(a5) # 80051011 <excpt+0x1>
    80020d40:	e7a1                	bnez	a5,80020d88 <timecmp_test_12+0xc8>
    80020d42:	4529                	li	a0,10
    80020d44:	565080ef          	jal	80029aa8 <putchar>
    80020d48:	00030797          	auipc	a5,0x30
    80020d4c:	2c97c783          	lbu	a5,713(a5) # 80051011 <excpt+0x1>
    80020d50:	e795                	bnez	a5,80020d7c <timecmp_test_12+0xbc>
    80020d52:	4405                	li	s0,1
        excpt.triggered == false
    );

    TEST_END(); 
    80020d54:	0000c597          	auipc	a1,0xc
    80020d58:	58c58593          	addi	a1,a1,1420 # 8002d2e0 <__func__.0+0x2c0>
    80020d5c:	0000c517          	auipc	a0,0xc
    80020d60:	63c50513          	addi	a0,a0,1596 # 8002d398 <__func__.0+0x378>
    80020d64:	0560a0ef          	jal	8002adba <printf>
    80020d68:	4511                	li	a0,4
    80020d6a:	904e00ef          	jal	80000e6e <goto_priv>
    80020d6e:	a1de00ef          	jal	8000178a <reset_state>
}
    80020d72:	60a2                	ld	ra,8(sp)
    80020d74:	8522                	mv	a0,s0
    80020d76:	6402                	ld	s0,0(sp)
    80020d78:	0141                	addi	sp,sp,16
    80020d7a:	8082                	ret
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020d7c:	4401                	li	s0,0
    TEST_END(); 
    80020d7e:	0000c597          	auipc	a1,0xc
    80020d82:	57258593          	addi	a1,a1,1394 # 8002d2f0 <__func__.0+0x2d0>
    80020d86:	bfd9                	j	80020d5c <timecmp_test_12+0x9c>
    TEST_ASSERT("hs access to vstimecmp successful exception when menvcfg.stce=1 mcounteren.tm=1",
    80020d88:	0000c517          	auipc	a0,0xc
    80020d8c:	5b050513          	addi	a0,a0,1456 # 8002d338 <__func__.0+0x318>
    80020d90:	02a0a0ef          	jal	8002adba <printf>
    80020d94:	02900513          	li	a0,41
    80020d98:	511080ef          	jal	80029aa8 <putchar>
    80020d9c:	b75d                	j	80020d42 <timecmp_test_12+0x82>

0000000080020d9e <timecmp_test_13>:

bool timecmp_test_13() {
    80020d9e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020da0:	0000c597          	auipc	a1,0xc
    80020da4:	c8858593          	addi	a1,a1,-888 # 8002ca28 <__func__.8>
    80020da8:	0000c517          	auipc	a0,0xc
    80020dac:	55850513          	addi	a0,a0,1368 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_13() {
    80020db0:	ec06                	sd	ra,24(sp)
    80020db2:	e822                	sd	s0,16(sp)
    80020db4:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020db6:	0040a0ef          	jal	8002adba <printf>
    80020dba:	4529                	li	a0,10
    80020dbc:	4ed080ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020dc0:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020dc4:	57fd                	li	a5,-1
    80020dc6:	17fe                	slli	a5,a5,0x3f
    80020dc8:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020dcc:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80020dd0:	30a025f3          	csrr	a1,0x30a
    80020dd4:	00013517          	auipc	a0,0x13
    80020dd8:	b5450513          	addi	a0,a0,-1196 # 80033928 <__func__.0+0x6908>
    80020ddc:	7df090ef          	jal	8002adba <printf>
    80020de0:	60a025f3          	csrr	a1,henvcfg
    80020de4:	00013517          	auipc	a0,0x13
    80020de8:	b4450513          	addi	a0,a0,-1212 # 80033928 <__func__.0+0x6908>
    80020dec:	7cf090ef          	jal	8002adba <printf>

    goto_priv(PRIV_VU);
    80020df0:	4501                	li	a0,0
    80020df2:	87ce00ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80020df6:	f7ddf0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020dfa:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80020dfe:	00030597          	auipc	a1,0x30
    80020e02:	2135c583          	lbu	a1,531(a1) # 80051011 <excpt+0x1>
    80020e06:	00015517          	auipc	a0,0x15
    80020e0a:	81a50513          	addi	a0,a0,-2022 # 80035620 <__func__.0+0x8600>
    80020e0e:	00030417          	auipc	s0,0x30
    80020e12:	20240413          	addi	s0,s0,514 # 80051010 <excpt>
    80020e16:	7a5090ef          	jal	8002adba <printf>
    printf("cause=%d\n",excpt.cause);
    80020e1a:	640c                	ld	a1,8(s0)
    80020e1c:	00015517          	auipc	a0,0x15
    80020e20:	81450513          	addi	a0,a0,-2028 # 80035630 <__func__.0+0x8610>
    80020e24:	797090ef          	jal	8002adba <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020e28:	08200593          	li	a1,130
    80020e2c:	00015617          	auipc	a2,0x15
    80020e30:	81460613          	addi	a2,a2,-2028 # 80035640 <__func__.0+0x8620>
    80020e34:	0000c517          	auipc	a0,0xc
    80020e38:	4e450513          	addi	a0,a0,1252 # 8002d318 <__func__.0+0x2f8>
    80020e3c:	77f090ef          	jal	8002adba <printf>
    80020e40:	00030797          	auipc	a5,0x30
    80020e44:	1d17c783          	lbu	a5,465(a5) # 80051011 <excpt+0x1>
    80020e48:	0000c597          	auipc	a1,0xc
    80020e4c:	4a858593          	addi	a1,a1,1192 # 8002d2f0 <__func__.0+0x2d0>
    80020e50:	cf89                	beqz	a5,80020e6a <timecmp_test_13+0xcc>
    80020e52:	6418                	ld	a4,8(s0)
    80020e54:	47d9                	li	a5,22
    80020e56:	0000c597          	auipc	a1,0xc
    80020e5a:	48a58593          	addi	a1,a1,1162 # 8002d2e0 <__func__.0+0x2c0>
    80020e5e:	00f70663          	beq	a4,a5,80020e6a <timecmp_test_13+0xcc>
    80020e62:	0000c597          	auipc	a1,0xc
    80020e66:	48e58593          	addi	a1,a1,1166 # 8002d2f0 <__func__.0+0x2d0>
    80020e6a:	0000c517          	auipc	a0,0xc
    80020e6e:	4c650513          	addi	a0,a0,1222 # 8002d330 <__func__.0+0x310>
    80020e72:	749090ef          	jal	8002adba <printf>
    80020e76:	00030797          	auipc	a5,0x30
    80020e7a:	19b7c783          	lbu	a5,411(a5) # 80051011 <excpt+0x1>
    80020e7e:	c789                	beqz	a5,80020e88 <timecmp_test_13+0xea>
    80020e80:	6418                	ld	a4,8(s0)
    80020e82:	47d9                	li	a5,22
    80020e84:	00f70c63          	beq	a4,a5,80020e9c <timecmp_test_13+0xfe>
    80020e88:	0000c517          	auipc	a0,0xc
    80020e8c:	4b050513          	addi	a0,a0,1200 # 8002d338 <__func__.0+0x318>
    80020e90:	72b090ef          	jal	8002adba <printf>
    80020e94:	02900513          	li	a0,41
    80020e98:	411080ef          	jal	80029aa8 <putchar>
    80020e9c:	4529                	li	a0,10
    80020e9e:	40b080ef          	jal	80029aa8 <putchar>
    80020ea2:	00030497          	auipc	s1,0x30
    80020ea6:	16f4c483          	lbu	s1,367(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020eaa:	0000c597          	auipc	a1,0xc
    80020eae:	44658593          	addi	a1,a1,1094 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020eb2:	cc91                	beqz	s1,80020ece <timecmp_test_13+0x130>
    80020eb4:	6418                	ld	a4,8(s0)
    80020eb6:	47d9                	li	a5,22
    TEST_END(); 
    80020eb8:	0000c597          	auipc	a1,0xc
    80020ebc:	42858593          	addi	a1,a1,1064 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020ec0:	00f70763          	beq	a4,a5,80020ece <timecmp_test_13+0x130>
    80020ec4:	4481                	li	s1,0
    TEST_END(); 
    80020ec6:	0000c597          	auipc	a1,0xc
    80020eca:	42a58593          	addi	a1,a1,1066 # 8002d2f0 <__func__.0+0x2d0>
    80020ece:	0000c517          	auipc	a0,0xc
    80020ed2:	4ca50513          	addi	a0,a0,1226 # 8002d398 <__func__.0+0x378>
    80020ed6:	6e5090ef          	jal	8002adba <printf>
    80020eda:	4511                	li	a0,4
    80020edc:	f93df0ef          	jal	80000e6e <goto_priv>
    80020ee0:	8abe00ef          	jal	8000178a <reset_state>
}
    80020ee4:	60e2                	ld	ra,24(sp)
    80020ee6:	6442                	ld	s0,16(sp)
    80020ee8:	8526                	mv	a0,s1
    80020eea:	64a2                	ld	s1,8(sp)
    80020eec:	6105                	addi	sp,sp,32
    80020eee:	8082                	ret

0000000080020ef0 <timecmp_test_14>:

bool timecmp_test_14() {
    80020ef0:	1101                	addi	sp,sp,-32

    TEST_START();    
    80020ef2:	0000c597          	auipc	a1,0xc
    80020ef6:	b4658593          	addi	a1,a1,-1210 # 8002ca38 <__func__.7>
    80020efa:	0000c517          	auipc	a0,0xc
    80020efe:	40650513          	addi	a0,a0,1030 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_14() {
    80020f02:	ec06                	sd	ra,24(sp)
    80020f04:	e822                	sd	s0,16(sp)
    80020f06:	e426                	sd	s1,8(sp)
    TEST_START();    
    80020f08:	6b3090ef          	jal	8002adba <printf>
    80020f0c:	4529                	li	a0,10
    80020f0e:	39b080ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80020f12:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80020f16:	57fd                	li	a5,-1
    80020f18:	17fe                	slli	a5,a5,0x3f
    80020f1a:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80020f1e:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80020f22:	30a025f3          	csrr	a1,0x30a
    80020f26:	00013517          	auipc	a0,0x13
    80020f2a:	a0250513          	addi	a0,a0,-1534 # 80033928 <__func__.0+0x6908>
    80020f2e:	68d090ef          	jal	8002adba <printf>
    80020f32:	60a025f3          	csrr	a1,henvcfg
    80020f36:	00013517          	auipc	a0,0x13
    80020f3a:	9f250513          	addi	a0,a0,-1550 # 80033928 <__func__.0+0x6908>
    80020f3e:	67d090ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    80020f42:	4509                	li	a0,2
    80020f44:	f2bdf0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80020f48:	e2bdf0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80020f4c:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80020f50:	00030597          	auipc	a1,0x30
    80020f54:	0c15c583          	lbu	a1,193(a1) # 80051011 <excpt+0x1>
    80020f58:	00014517          	auipc	a0,0x14
    80020f5c:	6c850513          	addi	a0,a0,1736 # 80035620 <__func__.0+0x8600>
    80020f60:	00030417          	auipc	s0,0x30
    80020f64:	0b040413          	addi	s0,s0,176 # 80051010 <excpt>
    80020f68:	653090ef          	jal	8002adba <printf>
    printf("cause=%d\n",excpt.cause);
    80020f6c:	640c                	ld	a1,8(s0)
    80020f6e:	00014517          	auipc	a0,0x14
    80020f72:	6c250513          	addi	a0,a0,1730 # 80035630 <__func__.0+0x8610>
    80020f76:	645090ef          	jal	8002adba <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80020f7a:	08200593          	li	a1,130
    80020f7e:	00014617          	auipc	a2,0x14
    80020f82:	73260613          	addi	a2,a2,1842 # 800356b0 <__func__.0+0x8690>
    80020f86:	0000c517          	auipc	a0,0xc
    80020f8a:	39250513          	addi	a0,a0,914 # 8002d318 <__func__.0+0x2f8>
    80020f8e:	62d090ef          	jal	8002adba <printf>
    80020f92:	00030797          	auipc	a5,0x30
    80020f96:	07f7c783          	lbu	a5,127(a5) # 80051011 <excpt+0x1>
    80020f9a:	0000c597          	auipc	a1,0xc
    80020f9e:	35658593          	addi	a1,a1,854 # 8002d2f0 <__func__.0+0x2d0>
    80020fa2:	cf89                	beqz	a5,80020fbc <timecmp_test_14+0xcc>
    80020fa4:	6418                	ld	a4,8(s0)
    80020fa6:	47d9                	li	a5,22
    80020fa8:	0000c597          	auipc	a1,0xc
    80020fac:	33858593          	addi	a1,a1,824 # 8002d2e0 <__func__.0+0x2c0>
    80020fb0:	00f70663          	beq	a4,a5,80020fbc <timecmp_test_14+0xcc>
    80020fb4:	0000c597          	auipc	a1,0xc
    80020fb8:	33c58593          	addi	a1,a1,828 # 8002d2f0 <__func__.0+0x2d0>
    80020fbc:	0000c517          	auipc	a0,0xc
    80020fc0:	37450513          	addi	a0,a0,884 # 8002d330 <__func__.0+0x310>
    80020fc4:	5f7090ef          	jal	8002adba <printf>
    80020fc8:	00030797          	auipc	a5,0x30
    80020fcc:	0497c783          	lbu	a5,73(a5) # 80051011 <excpt+0x1>
    80020fd0:	c789                	beqz	a5,80020fda <timecmp_test_14+0xea>
    80020fd2:	6418                	ld	a4,8(s0)
    80020fd4:	47d9                	li	a5,22
    80020fd6:	00f70c63          	beq	a4,a5,80020fee <timecmp_test_14+0xfe>
    80020fda:	0000c517          	auipc	a0,0xc
    80020fde:	35e50513          	addi	a0,a0,862 # 8002d338 <__func__.0+0x318>
    80020fe2:	5d9090ef          	jal	8002adba <printf>
    80020fe6:	02900513          	li	a0,41
    80020fea:	2bf080ef          	jal	80029aa8 <putchar>
    80020fee:	4529                	li	a0,10
    80020ff0:	2b9080ef          	jal	80029aa8 <putchar>
    80020ff4:	00030497          	auipc	s1,0x30
    80020ff8:	01d4c483          	lbu	s1,29(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80020ffc:	0000c597          	auipc	a1,0xc
    80021000:	2f458593          	addi	a1,a1,756 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021004:	cc91                	beqz	s1,80021020 <timecmp_test_14+0x130>
    80021006:	6418                	ld	a4,8(s0)
    80021008:	47d9                	li	a5,22
    TEST_END(); 
    8002100a:	0000c597          	auipc	a1,0xc
    8002100e:	2d658593          	addi	a1,a1,726 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021012:	00f70763          	beq	a4,a5,80021020 <timecmp_test_14+0x130>
    80021016:	4481                	li	s1,0
    TEST_END(); 
    80021018:	0000c597          	auipc	a1,0xc
    8002101c:	2d858593          	addi	a1,a1,728 # 8002d2f0 <__func__.0+0x2d0>
    80021020:	0000c517          	auipc	a0,0xc
    80021024:	37850513          	addi	a0,a0,888 # 8002d398 <__func__.0+0x378>
    80021028:	593090ef          	jal	8002adba <printf>
    8002102c:	4511                	li	a0,4
    8002102e:	e41df0ef          	jal	80000e6e <goto_priv>
    80021032:	f58e00ef          	jal	8000178a <reset_state>
}
    80021036:	60e2                	ld	ra,24(sp)
    80021038:	6442                	ld	s0,16(sp)
    8002103a:	8526                	mv	a0,s1
    8002103c:	64a2                	ld	s1,8(sp)
    8002103e:	6105                	addi	sp,sp,32
    80021040:	8082                	ret

0000000080021042 <timecmp_test_15>:


bool timecmp_test_15() {
    80021042:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021044:	0000c597          	auipc	a1,0xc
    80021048:	a0458593          	addi	a1,a1,-1532 # 8002ca48 <__func__.6>
    8002104c:	0000c517          	auipc	a0,0xc
    80021050:	2b450513          	addi	a0,a0,692 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_15() {
    80021054:	ec06                	sd	ra,24(sp)
    80021056:	e822                	sd	s0,16(sp)
    80021058:	e426                	sd	s1,8(sp)
    TEST_START();    
    8002105a:	561090ef          	jal	8002adba <printf>
    8002105e:	4529                	li	a0,10
    80021060:	249080ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021064:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021068:	57fd                	li	a5,-1
    8002106a:	17fe                	slli	a5,a5,0x3f
    8002106c:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021070:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021074:	30a025f3          	csrr	a1,0x30a
    80021078:	00013517          	auipc	a0,0x13
    8002107c:	8b050513          	addi	a0,a0,-1872 # 80033928 <__func__.0+0x6908>
    80021080:	53b090ef          	jal	8002adba <printf>
    80021084:	60a025f3          	csrr	a1,henvcfg
    80021088:	00013517          	auipc	a0,0x13
    8002108c:	8a050513          	addi	a0,a0,-1888 # 80033928 <__func__.0+0x6908>
    80021090:	52b090ef          	jal	8002adba <printf>

    goto_priv(PRIV_VU);
    80021094:	4501                	li	a0,0
    80021096:	dd9df0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8002109a:	cd9df0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002109e:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800210a2:	00030597          	auipc	a1,0x30
    800210a6:	f6f5c583          	lbu	a1,-145(a1) # 80051011 <excpt+0x1>
    800210aa:	00014517          	auipc	a0,0x14
    800210ae:	57650513          	addi	a0,a0,1398 # 80035620 <__func__.0+0x8600>
    800210b2:	00030417          	auipc	s0,0x30
    800210b6:	f5e40413          	addi	s0,s0,-162 # 80051010 <excpt>
    800210ba:	501090ef          	jal	8002adba <printf>
    printf("cause=%d\n",excpt.cause);
    800210be:	640c                	ld	a1,8(s0)
    800210c0:	00014517          	auipc	a0,0x14
    800210c4:	57050513          	addi	a0,a0,1392 # 80035630 <__func__.0+0x8610>
    800210c8:	4f3090ef          	jal	8002adba <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800210cc:	08200593          	li	a1,130
    800210d0:	00014617          	auipc	a2,0x14
    800210d4:	65060613          	addi	a2,a2,1616 # 80035720 <__func__.0+0x8700>
    800210d8:	0000c517          	auipc	a0,0xc
    800210dc:	24050513          	addi	a0,a0,576 # 8002d318 <__func__.0+0x2f8>
    800210e0:	4db090ef          	jal	8002adba <printf>
    800210e4:	00030797          	auipc	a5,0x30
    800210e8:	f2d7c783          	lbu	a5,-211(a5) # 80051011 <excpt+0x1>
    800210ec:	0000c597          	auipc	a1,0xc
    800210f0:	20458593          	addi	a1,a1,516 # 8002d2f0 <__func__.0+0x2d0>
    800210f4:	cf89                	beqz	a5,8002110e <timecmp_test_15+0xcc>
    800210f6:	6418                	ld	a4,8(s0)
    800210f8:	4789                	li	a5,2
    800210fa:	0000c597          	auipc	a1,0xc
    800210fe:	1e658593          	addi	a1,a1,486 # 8002d2e0 <__func__.0+0x2c0>
    80021102:	00f70663          	beq	a4,a5,8002110e <timecmp_test_15+0xcc>
    80021106:	0000c597          	auipc	a1,0xc
    8002110a:	1ea58593          	addi	a1,a1,490 # 8002d2f0 <__func__.0+0x2d0>
    8002110e:	0000c517          	auipc	a0,0xc
    80021112:	22250513          	addi	a0,a0,546 # 8002d330 <__func__.0+0x310>
    80021116:	4a5090ef          	jal	8002adba <printf>
    8002111a:	00030797          	auipc	a5,0x30
    8002111e:	ef77c783          	lbu	a5,-265(a5) # 80051011 <excpt+0x1>
    80021122:	c789                	beqz	a5,8002112c <timecmp_test_15+0xea>
    80021124:	6418                	ld	a4,8(s0)
    80021126:	4789                	li	a5,2
    80021128:	00f70c63          	beq	a4,a5,80021140 <timecmp_test_15+0xfe>
    8002112c:	0000c517          	auipc	a0,0xc
    80021130:	20c50513          	addi	a0,a0,524 # 8002d338 <__func__.0+0x318>
    80021134:	487090ef          	jal	8002adba <printf>
    80021138:	02900513          	li	a0,41
    8002113c:	16d080ef          	jal	80029aa8 <putchar>
    80021140:	4529                	li	a0,10
    80021142:	167080ef          	jal	80029aa8 <putchar>
    80021146:	00030497          	auipc	s1,0x30
    8002114a:	ecb4c483          	lbu	s1,-309(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    8002114e:	0000c597          	auipc	a1,0xc
    80021152:	1a258593          	addi	a1,a1,418 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021156:	cc91                	beqz	s1,80021172 <timecmp_test_15+0x130>
    80021158:	6418                	ld	a4,8(s0)
    8002115a:	4789                	li	a5,2
    TEST_END(); 
    8002115c:	0000c597          	auipc	a1,0xc
    80021160:	18458593          	addi	a1,a1,388 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021164:	00f70763          	beq	a4,a5,80021172 <timecmp_test_15+0x130>
    80021168:	4481                	li	s1,0
    TEST_END(); 
    8002116a:	0000c597          	auipc	a1,0xc
    8002116e:	18658593          	addi	a1,a1,390 # 8002d2f0 <__func__.0+0x2d0>
    80021172:	0000c517          	auipc	a0,0xc
    80021176:	22650513          	addi	a0,a0,550 # 8002d398 <__func__.0+0x378>
    8002117a:	441090ef          	jal	8002adba <printf>
    8002117e:	4511                	li	a0,4
    80021180:	cefdf0ef          	jal	80000e6e <goto_priv>
    80021184:	e06e00ef          	jal	8000178a <reset_state>
}
    80021188:	60e2                	ld	ra,24(sp)
    8002118a:	6442                	ld	s0,16(sp)
    8002118c:	8526                	mv	a0,s1
    8002118e:	64a2                	ld	s1,8(sp)
    80021190:	6105                	addi	sp,sp,32
    80021192:	8082                	ret

0000000080021194 <timecmp_test_16>:

bool timecmp_test_16() {
    80021194:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021196:	0000c597          	auipc	a1,0xc
    8002119a:	8c258593          	addi	a1,a1,-1854 # 8002ca58 <__func__.5>
    8002119e:	0000c517          	auipc	a0,0xc
    800211a2:	16250513          	addi	a0,a0,354 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_16() {
    800211a6:	ec06                	sd	ra,24(sp)
    800211a8:	e822                	sd	s0,16(sp)
    800211aa:	e426                	sd	s1,8(sp)
    TEST_START();    
    800211ac:	40f090ef          	jal	8002adba <printf>
    800211b0:	4529                	li	a0,10
    800211b2:	0f7080ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800211b6:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800211ba:	57fd                	li	a5,-1
    800211bc:	17fe                	slli	a5,a5,0x3f
    800211be:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800211c2:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800211c6:	30a025f3          	csrr	a1,0x30a
    800211ca:	00012517          	auipc	a0,0x12
    800211ce:	75e50513          	addi	a0,a0,1886 # 80033928 <__func__.0+0x6908>
    800211d2:	3e9090ef          	jal	8002adba <printf>
    800211d6:	60a025f3          	csrr	a1,henvcfg
    800211da:	00012517          	auipc	a0,0x12
    800211de:	74e50513          	addi	a0,a0,1870 # 80033928 <__func__.0+0x6908>
    800211e2:	3d9090ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    800211e6:	4509                	li	a0,2
    800211e8:	c87df0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800211ec:	b87df0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800211f0:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800211f4:	00030597          	auipc	a1,0x30
    800211f8:	e1d5c583          	lbu	a1,-483(a1) # 80051011 <excpt+0x1>
    800211fc:	00014517          	auipc	a0,0x14
    80021200:	42450513          	addi	a0,a0,1060 # 80035620 <__func__.0+0x8600>
    80021204:	00030417          	auipc	s0,0x30
    80021208:	e0c40413          	addi	s0,s0,-500 # 80051010 <excpt>
    8002120c:	3af090ef          	jal	8002adba <printf>
    printf("cause=%d\n",excpt.cause);
    80021210:	640c                	ld	a1,8(s0)
    80021212:	00014517          	auipc	a0,0x14
    80021216:	41e50513          	addi	a0,a0,1054 # 80035630 <__func__.0+0x8610>
    8002121a:	3a1090ef          	jal	8002adba <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002121e:	08200593          	li	a1,130
    80021222:	00014617          	auipc	a2,0x14
    80021226:	56e60613          	addi	a2,a2,1390 # 80035790 <__func__.0+0x8770>
    8002122a:	0000c517          	auipc	a0,0xc
    8002122e:	0ee50513          	addi	a0,a0,238 # 8002d318 <__func__.0+0x2f8>
    80021232:	389090ef          	jal	8002adba <printf>
    80021236:	00030797          	auipc	a5,0x30
    8002123a:	ddb7c783          	lbu	a5,-549(a5) # 80051011 <excpt+0x1>
    8002123e:	0000c597          	auipc	a1,0xc
    80021242:	0b258593          	addi	a1,a1,178 # 8002d2f0 <__func__.0+0x2d0>
    80021246:	cf89                	beqz	a5,80021260 <timecmp_test_16+0xcc>
    80021248:	6418                	ld	a4,8(s0)
    8002124a:	4789                	li	a5,2
    8002124c:	0000c597          	auipc	a1,0xc
    80021250:	09458593          	addi	a1,a1,148 # 8002d2e0 <__func__.0+0x2c0>
    80021254:	00f70663          	beq	a4,a5,80021260 <timecmp_test_16+0xcc>
    80021258:	0000c597          	auipc	a1,0xc
    8002125c:	09858593          	addi	a1,a1,152 # 8002d2f0 <__func__.0+0x2d0>
    80021260:	0000c517          	auipc	a0,0xc
    80021264:	0d050513          	addi	a0,a0,208 # 8002d330 <__func__.0+0x310>
    80021268:	353090ef          	jal	8002adba <printf>
    8002126c:	00030797          	auipc	a5,0x30
    80021270:	da57c783          	lbu	a5,-603(a5) # 80051011 <excpt+0x1>
    80021274:	c789                	beqz	a5,8002127e <timecmp_test_16+0xea>
    80021276:	6418                	ld	a4,8(s0)
    80021278:	4789                	li	a5,2
    8002127a:	00f70c63          	beq	a4,a5,80021292 <timecmp_test_16+0xfe>
    8002127e:	0000c517          	auipc	a0,0xc
    80021282:	0ba50513          	addi	a0,a0,186 # 8002d338 <__func__.0+0x318>
    80021286:	335090ef          	jal	8002adba <printf>
    8002128a:	02900513          	li	a0,41
    8002128e:	01b080ef          	jal	80029aa8 <putchar>
    80021292:	4529                	li	a0,10
    80021294:	015080ef          	jal	80029aa8 <putchar>
    80021298:	00030497          	auipc	s1,0x30
    8002129c:	d794c483          	lbu	s1,-647(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800212a0:	0000c597          	auipc	a1,0xc
    800212a4:	05058593          	addi	a1,a1,80 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800212a8:	cc91                	beqz	s1,800212c4 <timecmp_test_16+0x130>
    800212aa:	6418                	ld	a4,8(s0)
    800212ac:	4789                	li	a5,2
    TEST_END(); 
    800212ae:	0000c597          	auipc	a1,0xc
    800212b2:	03258593          	addi	a1,a1,50 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800212b6:	00f70763          	beq	a4,a5,800212c4 <timecmp_test_16+0x130>
    800212ba:	4481                	li	s1,0
    TEST_END(); 
    800212bc:	0000c597          	auipc	a1,0xc
    800212c0:	03458593          	addi	a1,a1,52 # 8002d2f0 <__func__.0+0x2d0>
    800212c4:	0000c517          	auipc	a0,0xc
    800212c8:	0d450513          	addi	a0,a0,212 # 8002d398 <__func__.0+0x378>
    800212cc:	2ef090ef          	jal	8002adba <printf>
    800212d0:	4511                	li	a0,4
    800212d2:	b9ddf0ef          	jal	80000e6e <goto_priv>
    800212d6:	cb4e00ef          	jal	8000178a <reset_state>
}
    800212da:	60e2                	ld	ra,24(sp)
    800212dc:	6442                	ld	s0,16(sp)
    800212de:	8526                	mv	a0,s1
    800212e0:	64a2                	ld	s1,8(sp)
    800212e2:	6105                	addi	sp,sp,32
    800212e4:	8082                	ret

00000000800212e6 <timecmp_test_17>:

bool timecmp_test_17() {
    800212e6:	1101                	addi	sp,sp,-32

    TEST_START();    
    800212e8:	0000b597          	auipc	a1,0xb
    800212ec:	78058593          	addi	a1,a1,1920 # 8002ca68 <__func__.4>
    800212f0:	0000c517          	auipc	a0,0xc
    800212f4:	01050513          	addi	a0,a0,16 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_17() {
    800212f8:	ec06                	sd	ra,24(sp)
    800212fa:	e822                	sd	s0,16(sp)
    800212fc:	e426                	sd	s1,8(sp)
    TEST_START();    
    800212fe:	2bd090ef          	jal	8002adba <printf>
    80021302:	4529                	li	a0,10
    80021304:	7a4080ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021308:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002130c:	57fd                	li	a5,-1
    8002130e:	17fe                	slli	a5,a5,0x3f
    80021310:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021314:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    80021318:	30a025f3          	csrr	a1,0x30a
    8002131c:	00012517          	auipc	a0,0x12
    80021320:	60c50513          	addi	a0,a0,1548 # 80033928 <__func__.0+0x6908>
    80021324:	297090ef          	jal	8002adba <printf>
    80021328:	60a025f3          	csrr	a1,henvcfg
    8002132c:	00012517          	auipc	a0,0x12
    80021330:	5fc50513          	addi	a0,a0,1532 # 80033928 <__func__.0+0x6908>
    80021334:	287090ef          	jal	8002adba <printf>

    goto_priv(PRIV_VU);
    80021338:	4501                	li	a0,0
    8002133a:	b35df0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8002133e:	a35df0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021342:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021346:	00030597          	auipc	a1,0x30
    8002134a:	ccb5c583          	lbu	a1,-821(a1) # 80051011 <excpt+0x1>
    8002134e:	00014517          	auipc	a0,0x14
    80021352:	2d250513          	addi	a0,a0,722 # 80035620 <__func__.0+0x8600>
    80021356:	00030417          	auipc	s0,0x30
    8002135a:	cba40413          	addi	s0,s0,-838 # 80051010 <excpt>
    8002135e:	25d090ef          	jal	8002adba <printf>
    printf("cause=%d\n",excpt.cause);
    80021362:	640c                	ld	a1,8(s0)
    80021364:	00014517          	auipc	a0,0x14
    80021368:	2cc50513          	addi	a0,a0,716 # 80035630 <__func__.0+0x8610>
    8002136c:	24f090ef          	jal	8002adba <printf>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021370:	08200593          	li	a1,130
    80021374:	00014617          	auipc	a2,0x14
    80021378:	2cc60613          	addi	a2,a2,716 # 80035640 <__func__.0+0x8620>
    8002137c:	0000c517          	auipc	a0,0xc
    80021380:	f9c50513          	addi	a0,a0,-100 # 8002d318 <__func__.0+0x2f8>
    80021384:	237090ef          	jal	8002adba <printf>
    80021388:	00030797          	auipc	a5,0x30
    8002138c:	c897c783          	lbu	a5,-887(a5) # 80051011 <excpt+0x1>
    80021390:	0000c597          	auipc	a1,0xc
    80021394:	f6058593          	addi	a1,a1,-160 # 8002d2f0 <__func__.0+0x2d0>
    80021398:	cf89                	beqz	a5,800213b2 <timecmp_test_17+0xcc>
    8002139a:	6418                	ld	a4,8(s0)
    8002139c:	47d9                	li	a5,22
    8002139e:	0000c597          	auipc	a1,0xc
    800213a2:	f4258593          	addi	a1,a1,-190 # 8002d2e0 <__func__.0+0x2c0>
    800213a6:	00f70663          	beq	a4,a5,800213b2 <timecmp_test_17+0xcc>
    800213aa:	0000c597          	auipc	a1,0xc
    800213ae:	f4658593          	addi	a1,a1,-186 # 8002d2f0 <__func__.0+0x2d0>
    800213b2:	0000c517          	auipc	a0,0xc
    800213b6:	f7e50513          	addi	a0,a0,-130 # 8002d330 <__func__.0+0x310>
    800213ba:	201090ef          	jal	8002adba <printf>
    800213be:	00030797          	auipc	a5,0x30
    800213c2:	c537c783          	lbu	a5,-941(a5) # 80051011 <excpt+0x1>
    800213c6:	c789                	beqz	a5,800213d0 <timecmp_test_17+0xea>
    800213c8:	6418                	ld	a4,8(s0)
    800213ca:	47d9                	li	a5,22
    800213cc:	00f70c63          	beq	a4,a5,800213e4 <timecmp_test_17+0xfe>
    800213d0:	0000c517          	auipc	a0,0xc
    800213d4:	f6850513          	addi	a0,a0,-152 # 8002d338 <__func__.0+0x318>
    800213d8:	1e3090ef          	jal	8002adba <printf>
    800213dc:	02900513          	li	a0,41
    800213e0:	6c8080ef          	jal	80029aa8 <putchar>
    800213e4:	4529                	li	a0,10
    800213e6:	6c2080ef          	jal	80029aa8 <putchar>
    800213ea:	00030497          	auipc	s1,0x30
    800213ee:	c274c483          	lbu	s1,-985(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    800213f2:	0000c597          	auipc	a1,0xc
    800213f6:	efe58593          	addi	a1,a1,-258 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800213fa:	cc91                	beqz	s1,80021416 <timecmp_test_17+0x130>
    800213fc:	6418                	ld	a4,8(s0)
    800213fe:	47d9                	li	a5,22
    TEST_END(); 
    80021400:	0000c597          	auipc	a1,0xc
    80021404:	ee058593          	addi	a1,a1,-288 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    80021408:	00f70763          	beq	a4,a5,80021416 <timecmp_test_17+0x130>
    8002140c:	4481                	li	s1,0
    TEST_END(); 
    8002140e:	0000c597          	auipc	a1,0xc
    80021412:	ee258593          	addi	a1,a1,-286 # 8002d2f0 <__func__.0+0x2d0>
    80021416:	0000c517          	auipc	a0,0xc
    8002141a:	f8250513          	addi	a0,a0,-126 # 8002d398 <__func__.0+0x378>
    8002141e:	19d090ef          	jal	8002adba <printf>
    80021422:	4511                	li	a0,4
    80021424:	a4bdf0ef          	jal	80000e6e <goto_priv>
    80021428:	b62e00ef          	jal	8000178a <reset_state>
}
    8002142c:	60e2                	ld	ra,24(sp)
    8002142e:	6442                	ld	s0,16(sp)
    80021430:	8526                	mv	a0,s1
    80021432:	64a2                	ld	s1,8(sp)
    80021434:	6105                	addi	sp,sp,32
    80021436:	8082                	ret

0000000080021438 <timecmp_test_18>:

bool timecmp_test_18() {
    80021438:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002143a:	0000b597          	auipc	a1,0xb
    8002143e:	63e58593          	addi	a1,a1,1598 # 8002ca78 <__func__.3>
    80021442:	0000c517          	auipc	a0,0xc
    80021446:	ebe50513          	addi	a0,a0,-322 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_18() {
    8002144a:	ec06                	sd	ra,24(sp)
    8002144c:	e822                	sd	s0,16(sp)
    8002144e:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021450:	16b090ef          	jal	8002adba <printf>
    80021454:	4529                	li	a0,10
    80021456:	652080ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    8002145a:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    8002145e:	57fd                	li	a5,-1
    80021460:	17fe                	slli	a5,a5,0x3f
    80021462:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021466:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002146a:	30a025f3          	csrr	a1,0x30a
    8002146e:	00012517          	auipc	a0,0x12
    80021472:	4ba50513          	addi	a0,a0,1210 # 80033928 <__func__.0+0x6908>
    80021476:	145090ef          	jal	8002adba <printf>
    8002147a:	60a025f3          	csrr	a1,henvcfg
    8002147e:	00012517          	auipc	a0,0x12
    80021482:	4aa50513          	addi	a0,a0,1194 # 80033928 <__func__.0+0x6908>
    80021486:	135090ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    8002148a:	4509                	li	a0,2
    8002148c:	9e3df0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80021490:	8e3df0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021494:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    80021498:	00030597          	auipc	a1,0x30
    8002149c:	b795c583          	lbu	a1,-1159(a1) # 80051011 <excpt+0x1>
    800214a0:	00014517          	auipc	a0,0x14
    800214a4:	18050513          	addi	a0,a0,384 # 80035620 <__func__.0+0x8600>
    800214a8:	00030417          	auipc	s0,0x30
    800214ac:	b6840413          	addi	s0,s0,-1176 # 80051010 <excpt>
    800214b0:	10b090ef          	jal	8002adba <printf>
    printf("cause=%d\n",excpt.cause);
    800214b4:	640c                	ld	a1,8(s0)
    800214b6:	00014517          	auipc	a0,0x14
    800214ba:	17a50513          	addi	a0,a0,378 # 80035630 <__func__.0+0x8610>
    800214be:	0fd090ef          	jal	8002adba <printf>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    800214c2:	08200593          	li	a1,130
    800214c6:	00014617          	auipc	a2,0x14
    800214ca:	1ea60613          	addi	a2,a2,490 # 800356b0 <__func__.0+0x8690>
    800214ce:	0000c517          	auipc	a0,0xc
    800214d2:	e4a50513          	addi	a0,a0,-438 # 8002d318 <__func__.0+0x2f8>
    800214d6:	0e5090ef          	jal	8002adba <printf>
    800214da:	00030797          	auipc	a5,0x30
    800214de:	b377c783          	lbu	a5,-1225(a5) # 80051011 <excpt+0x1>
    800214e2:	0000c597          	auipc	a1,0xc
    800214e6:	e0e58593          	addi	a1,a1,-498 # 8002d2f0 <__func__.0+0x2d0>
    800214ea:	cf89                	beqz	a5,80021504 <timecmp_test_18+0xcc>
    800214ec:	6418                	ld	a4,8(s0)
    800214ee:	47d9                	li	a5,22
    800214f0:	0000c597          	auipc	a1,0xc
    800214f4:	df058593          	addi	a1,a1,-528 # 8002d2e0 <__func__.0+0x2c0>
    800214f8:	00f70663          	beq	a4,a5,80021504 <timecmp_test_18+0xcc>
    800214fc:	0000c597          	auipc	a1,0xc
    80021500:	df458593          	addi	a1,a1,-524 # 8002d2f0 <__func__.0+0x2d0>
    80021504:	0000c517          	auipc	a0,0xc
    80021508:	e2c50513          	addi	a0,a0,-468 # 8002d330 <__func__.0+0x310>
    8002150c:	0af090ef          	jal	8002adba <printf>
    80021510:	00030797          	auipc	a5,0x30
    80021514:	b017c783          	lbu	a5,-1279(a5) # 80051011 <excpt+0x1>
    80021518:	c789                	beqz	a5,80021522 <timecmp_test_18+0xea>
    8002151a:	6418                	ld	a4,8(s0)
    8002151c:	47d9                	li	a5,22
    8002151e:	00f70c63          	beq	a4,a5,80021536 <timecmp_test_18+0xfe>
    80021522:	0000c517          	auipc	a0,0xc
    80021526:	e1650513          	addi	a0,a0,-490 # 8002d338 <__func__.0+0x318>
    8002152a:	091090ef          	jal	8002adba <printf>
    8002152e:	02900513          	li	a0,41
    80021532:	576080ef          	jal	80029aa8 <putchar>
    80021536:	4529                	li	a0,10
    80021538:	570080ef          	jal	80029aa8 <putchar>
    8002153c:	00030497          	auipc	s1,0x30
    80021540:	ad54c483          	lbu	s1,-1323(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

    TEST_END(); 
    80021544:	0000c597          	auipc	a1,0xc
    80021548:	dac58593          	addi	a1,a1,-596 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002154c:	cc91                	beqz	s1,80021568 <timecmp_test_18+0x130>
    8002154e:	6418                	ld	a4,8(s0)
    80021550:	47d9                	li	a5,22
    TEST_END(); 
    80021552:	0000c597          	auipc	a1,0xc
    80021556:	d8e58593          	addi	a1,a1,-626 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses virtual instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=1",
    8002155a:	00f70763          	beq	a4,a5,80021568 <timecmp_test_18+0x130>
    8002155e:	4481                	li	s1,0
    TEST_END(); 
    80021560:	0000c597          	auipc	a1,0xc
    80021564:	d9058593          	addi	a1,a1,-624 # 8002d2f0 <__func__.0+0x2d0>
    80021568:	0000c517          	auipc	a0,0xc
    8002156c:	e3050513          	addi	a0,a0,-464 # 8002d398 <__func__.0+0x378>
    80021570:	04b090ef          	jal	8002adba <printf>
    80021574:	4511                	li	a0,4
    80021576:	8f9df0ef          	jal	80000e6e <goto_priv>
    8002157a:	a10e00ef          	jal	8000178a <reset_state>
}
    8002157e:	60e2                	ld	ra,24(sp)
    80021580:	6442                	ld	s0,16(sp)
    80021582:	8526                	mv	a0,s1
    80021584:	64a2                	ld	s1,8(sp)
    80021586:	6105                	addi	sp,sp,32
    80021588:	8082                	ret

000000008002158a <timecmp_test_19>:


bool timecmp_test_19() {
    8002158a:	1101                	addi	sp,sp,-32

    TEST_START();    
    8002158c:	0000b597          	auipc	a1,0xb
    80021590:	4fc58593          	addi	a1,a1,1276 # 8002ca88 <__func__.2>
    80021594:	0000c517          	auipc	a0,0xc
    80021598:	d6c50513          	addi	a0,a0,-660 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_19() {
    8002159c:	ec06                	sd	ra,24(sp)
    8002159e:	e822                	sd	s0,16(sp)
    800215a0:	e426                	sd	s1,8(sp)
    TEST_START();    
    800215a2:	019090ef          	jal	8002adba <printf>
    800215a6:	4529                	li	a0,10
    800215a8:	500080ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800215ac:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    800215b0:	57fd                	li	a5,-1
    800215b2:	17fe                	slli	a5,a5,0x3f
    800215b4:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    800215b8:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    800215bc:	30a025f3          	csrr	a1,0x30a
    800215c0:	00012517          	auipc	a0,0x12
    800215c4:	36850513          	addi	a0,a0,872 # 80033928 <__func__.0+0x6908>
    800215c8:	7f2090ef          	jal	8002adba <printf>
    800215cc:	60a025f3          	csrr	a1,henvcfg
    800215d0:	00012517          	auipc	a0,0x12
    800215d4:	35850513          	addi	a0,a0,856 # 80033928 <__func__.0+0x6908>
    800215d8:	7e2090ef          	jal	8002adba <printf>

    goto_priv(PRIV_VU);
    800215dc:	4501                	li	a0,0
    800215de:	891df0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800215e2:	f90df0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    800215e6:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    800215ea:	00030597          	auipc	a1,0x30
    800215ee:	a275c583          	lbu	a1,-1497(a1) # 80051011 <excpt+0x1>
    800215f2:	00014517          	auipc	a0,0x14
    800215f6:	02e50513          	addi	a0,a0,46 # 80035620 <__func__.0+0x8600>
    800215fa:	00030417          	auipc	s0,0x30
    800215fe:	a1640413          	addi	s0,s0,-1514 # 80051010 <excpt>
    80021602:	7b8090ef          	jal	8002adba <printf>
    printf("cause=%d\n",excpt.cause);
    80021606:	640c                	ld	a1,8(s0)
    80021608:	00014517          	auipc	a0,0x14
    8002160c:	02850513          	addi	a0,a0,40 # 80035630 <__func__.0+0x8610>
    80021610:	7aa090ef          	jal	8002adba <printf>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021614:	08200593          	li	a1,130
    80021618:	00014617          	auipc	a2,0x14
    8002161c:	10860613          	addi	a2,a2,264 # 80035720 <__func__.0+0x8700>
    80021620:	0000c517          	auipc	a0,0xc
    80021624:	cf850513          	addi	a0,a0,-776 # 8002d318 <__func__.0+0x2f8>
    80021628:	792090ef          	jal	8002adba <printf>
    8002162c:	00030797          	auipc	a5,0x30
    80021630:	9e57c783          	lbu	a5,-1563(a5) # 80051011 <excpt+0x1>
    80021634:	0000c597          	auipc	a1,0xc
    80021638:	cbc58593          	addi	a1,a1,-836 # 8002d2f0 <__func__.0+0x2d0>
    8002163c:	cf89                	beqz	a5,80021656 <timecmp_test_19+0xcc>
    8002163e:	6418                	ld	a4,8(s0)
    80021640:	4789                	li	a5,2
    80021642:	0000c597          	auipc	a1,0xc
    80021646:	c9e58593          	addi	a1,a1,-866 # 8002d2e0 <__func__.0+0x2c0>
    8002164a:	00f70663          	beq	a4,a5,80021656 <timecmp_test_19+0xcc>
    8002164e:	0000c597          	auipc	a1,0xc
    80021652:	ca258593          	addi	a1,a1,-862 # 8002d2f0 <__func__.0+0x2d0>
    80021656:	0000c517          	auipc	a0,0xc
    8002165a:	cda50513          	addi	a0,a0,-806 # 8002d330 <__func__.0+0x310>
    8002165e:	75c090ef          	jal	8002adba <printf>
    80021662:	00030797          	auipc	a5,0x30
    80021666:	9af7c783          	lbu	a5,-1617(a5) # 80051011 <excpt+0x1>
    8002166a:	c789                	beqz	a5,80021674 <timecmp_test_19+0xea>
    8002166c:	6418                	ld	a4,8(s0)
    8002166e:	4789                	li	a5,2
    80021670:	00f70c63          	beq	a4,a5,80021688 <timecmp_test_19+0xfe>
    80021674:	0000c517          	auipc	a0,0xc
    80021678:	cc450513          	addi	a0,a0,-828 # 8002d338 <__func__.0+0x318>
    8002167c:	73e090ef          	jal	8002adba <printf>
    80021680:	02900513          	li	a0,41
    80021684:	424080ef          	jal	80029aa8 <putchar>
    80021688:	4529                	li	a0,10
    8002168a:	41e080ef          	jal	80029aa8 <putchar>
    8002168e:	00030497          	auipc	s1,0x30
    80021692:	9834c483          	lbu	s1,-1661(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021696:	0000c597          	auipc	a1,0xc
    8002169a:	c5a58593          	addi	a1,a1,-934 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    8002169e:	cc91                	beqz	s1,800216ba <timecmp_test_19+0x130>
    800216a0:	6418                	ld	a4,8(s0)
    800216a2:	4789                	li	a5,2
    TEST_END(); 
    800216a4:	0000c597          	auipc	a1,0xc
    800216a8:	c3c58593          	addi	a1,a1,-964 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800216ac:	00f70763          	beq	a4,a5,800216ba <timecmp_test_19+0x130>
    800216b0:	4481                	li	s1,0
    TEST_END(); 
    800216b2:	0000c597          	auipc	a1,0xc
    800216b6:	c3e58593          	addi	a1,a1,-962 # 8002d2f0 <__func__.0+0x2d0>
    800216ba:	0000c517          	auipc	a0,0xc
    800216be:	cde50513          	addi	a0,a0,-802 # 8002d398 <__func__.0+0x378>
    800216c2:	6f8090ef          	jal	8002adba <printf>
    800216c6:	4511                	li	a0,4
    800216c8:	fa6df0ef          	jal	80000e6e <goto_priv>
    800216cc:	8bee00ef          	jal	8000178a <reset_state>
}
    800216d0:	60e2                	ld	ra,24(sp)
    800216d2:	6442                	ld	s0,16(sp)
    800216d4:	8526                	mv	a0,s1
    800216d6:	64a2                	ld	s1,8(sp)
    800216d8:	6105                	addi	sp,sp,32
    800216da:	8082                	ret

00000000800216dc <timecmp_test_20>:

bool timecmp_test_20() {
    800216dc:	1101                	addi	sp,sp,-32

    TEST_START();    
    800216de:	0000b597          	auipc	a1,0xb
    800216e2:	3ba58593          	addi	a1,a1,954 # 8002ca98 <__func__.1>
    800216e6:	0000c517          	auipc	a0,0xc
    800216ea:	c1a50513          	addi	a0,a0,-998 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_20() {
    800216ee:	ec06                	sd	ra,24(sp)
    800216f0:	e822                	sd	s0,16(sp)
    800216f2:	e426                	sd	s1,8(sp)
    TEST_START();    
    800216f4:	6c6090ef          	jal	8002adba <printf>
    800216f8:	4529                	li	a0,10
    800216fa:	3ae080ef          	jal	80029aa8 <putchar>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    800216fe:	30617073          	csrci	mcounteren,2
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021702:	57fd                	li	a5,-1
    80021704:	17fe                	slli	a5,a5,0x3f
    80021706:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    8002170a:	60a7b073          	csrc	henvcfg,a5
    printf("%llx\n",CSRR(CSR_MENVCFG));    printf("%llx\n",CSRR(CSR_HENVCFG));
    8002170e:	30a025f3          	csrr	a1,0x30a
    80021712:	00012517          	auipc	a0,0x12
    80021716:	21650513          	addi	a0,a0,534 # 80033928 <__func__.0+0x6908>
    8002171a:	6a0090ef          	jal	8002adba <printf>
    8002171e:	60a025f3          	csrr	a1,henvcfg
    80021722:	00012517          	auipc	a0,0x12
    80021726:	20650513          	addi	a0,a0,518 # 80033928 <__func__.0+0x6908>
    8002172a:	690090ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    8002172e:	4509                	li	a0,2
    80021730:	f3edf0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80021734:	e3edf0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021738:	24d027f3          	csrr	a5,vstimecmp
    printf("trigger=%d\n",excpt.triggered);
    8002173c:	00030597          	auipc	a1,0x30
    80021740:	8d55c583          	lbu	a1,-1835(a1) # 80051011 <excpt+0x1>
    80021744:	00014517          	auipc	a0,0x14
    80021748:	edc50513          	addi	a0,a0,-292 # 80035620 <__func__.0+0x8600>
    8002174c:	00030417          	auipc	s0,0x30
    80021750:	8c440413          	addi	s0,s0,-1852 # 80051010 <excpt>
    80021754:	666090ef          	jal	8002adba <printf>
    printf("cause=%d\n",excpt.cause);
    80021758:	640c                	ld	a1,8(s0)
    8002175a:	00014517          	auipc	a0,0x14
    8002175e:	ed650513          	addi	a0,a0,-298 # 80035630 <__func__.0+0x8610>
    80021762:	658090ef          	jal	8002adba <printf>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    80021766:	08200593          	li	a1,130
    8002176a:	00014617          	auipc	a2,0x14
    8002176e:	02660613          	addi	a2,a2,38 # 80035790 <__func__.0+0x8770>
    80021772:	0000c517          	auipc	a0,0xc
    80021776:	ba650513          	addi	a0,a0,-1114 # 8002d318 <__func__.0+0x2f8>
    8002177a:	640090ef          	jal	8002adba <printf>
    8002177e:	00030797          	auipc	a5,0x30
    80021782:	8937c783          	lbu	a5,-1901(a5) # 80051011 <excpt+0x1>
    80021786:	0000c597          	auipc	a1,0xc
    8002178a:	b6a58593          	addi	a1,a1,-1174 # 8002d2f0 <__func__.0+0x2d0>
    8002178e:	cf89                	beqz	a5,800217a8 <timecmp_test_20+0xcc>
    80021790:	6418                	ld	a4,8(s0)
    80021792:	4789                	li	a5,2
    80021794:	0000c597          	auipc	a1,0xc
    80021798:	b4c58593          	addi	a1,a1,-1204 # 8002d2e0 <__func__.0+0x2c0>
    8002179c:	00f70663          	beq	a4,a5,800217a8 <timecmp_test_20+0xcc>
    800217a0:	0000c597          	auipc	a1,0xc
    800217a4:	b5058593          	addi	a1,a1,-1200 # 8002d2f0 <__func__.0+0x2d0>
    800217a8:	0000c517          	auipc	a0,0xc
    800217ac:	b8850513          	addi	a0,a0,-1144 # 8002d330 <__func__.0+0x310>
    800217b0:	60a090ef          	jal	8002adba <printf>
    800217b4:	00030797          	auipc	a5,0x30
    800217b8:	85d7c783          	lbu	a5,-1955(a5) # 80051011 <excpt+0x1>
    800217bc:	c789                	beqz	a5,800217c6 <timecmp_test_20+0xea>
    800217be:	6418                	ld	a4,8(s0)
    800217c0:	4789                	li	a5,2
    800217c2:	00f70c63          	beq	a4,a5,800217da <timecmp_test_20+0xfe>
    800217c6:	0000c517          	auipc	a0,0xc
    800217ca:	b7250513          	addi	a0,a0,-1166 # 8002d338 <__func__.0+0x318>
    800217ce:	5ec090ef          	jal	8002adba <printf>
    800217d2:	02900513          	li	a0,41
    800217d6:	2d2080ef          	jal	80029aa8 <putchar>
    800217da:	4529                	li	a0,10
    800217dc:	2cc080ef          	jal	80029aa8 <putchar>
    800217e0:	00030497          	auipc	s1,0x30
    800217e4:	8314c483          	lbu	s1,-1999(s1) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    800217e8:	0000c597          	auipc	a1,0xc
    800217ec:	b0858593          	addi	a1,a1,-1272 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800217f0:	cc91                	beqz	s1,8002180c <timecmp_test_20+0x130>
    800217f2:	6418                	ld	a4,8(s0)
    800217f4:	4789                	li	a5,2
    TEST_END(); 
    800217f6:	0000c597          	auipc	a1,0xc
    800217fa:	aea58593          	addi	a1,a1,-1302 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 henvcfg.stce=0 mcounteren.tm=0",
    800217fe:	00f70763          	beq	a4,a5,8002180c <timecmp_test_20+0x130>
    80021802:	4481                	li	s1,0
    TEST_END(); 
    80021804:	0000c597          	auipc	a1,0xc
    80021808:	aec58593          	addi	a1,a1,-1300 # 8002d2f0 <__func__.0+0x2d0>
    8002180c:	0000c517          	auipc	a0,0xc
    80021810:	b8c50513          	addi	a0,a0,-1140 # 8002d398 <__func__.0+0x378>
    80021814:	5a6090ef          	jal	8002adba <printf>
    80021818:	4511                	li	a0,4
    8002181a:	e54df0ef          	jal	80000e6e <goto_priv>
    8002181e:	f6ddf0ef          	jal	8000178a <reset_state>
}
    80021822:	60e2                	ld	ra,24(sp)
    80021824:	6442                	ld	s0,16(sp)
    80021826:	8526                	mv	a0,s1
    80021828:	64a2                	ld	s1,8(sp)
    8002182a:	6105                	addi	sp,sp,32
    8002182c:	8082                	ret

000000008002182e <timecmp_test_21>:

bool timecmp_test_21() {
    8002182e:	1101                	addi	sp,sp,-32

    TEST_START();    
    80021830:	0000b597          	auipc	a1,0xb
    80021834:	27858593          	addi	a1,a1,632 # 8002caa8 <__func__.0>
    80021838:	0000c517          	auipc	a0,0xc
    8002183c:	ac850513          	addi	a0,a0,-1336 # 8002d300 <__func__.0+0x2e0>
bool timecmp_test_21() {
    80021840:	ec06                	sd	ra,24(sp)
    80021842:	e822                	sd	s0,16(sp)
    80021844:	e426                	sd	s1,8(sp)
    TEST_START();    
    80021846:	574090ef          	jal	8002adba <printf>
    8002184a:	4529                	li	a0,10
    8002184c:	25c080ef          	jal	80029aa8 <putchar>
    CSRS(CSR_MENVCFG, 1ULL << 63);  //STCE位 
    80021850:	57fd                	li	a5,-1
    80021852:	17fe                	slli	a5,a5,0x3f
    80021854:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021858:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_VS);
    8002185c:	4509                	li	a0,2
    8002185e:	e10df0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80021862:	d10df0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    80021866:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vs access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002186a:	08200593          	li	a1,130
    8002186e:	00014617          	auipc	a2,0x14
    80021872:	f9260613          	addi	a2,a2,-110 # 80035800 <__func__.0+0x87e0>
    80021876:	0000c517          	auipc	a0,0xc
    8002187a:	aa250513          	addi	a0,a0,-1374 # 8002d318 <__func__.0+0x2f8>
    8002187e:	53c090ef          	jal	8002adba <printf>
    80021882:	0002f797          	auipc	a5,0x2f
    80021886:	78f7c783          	lbu	a5,1935(a5) # 80051011 <excpt+0x1>
    8002188a:	0002f497          	auipc	s1,0x2f
    8002188e:	78648493          	addi	s1,s1,1926 # 80051010 <excpt>
    80021892:	0000c597          	auipc	a1,0xc
    80021896:	a5e58593          	addi	a1,a1,-1442 # 8002d2f0 <__func__.0+0x2d0>
    8002189a:	cf89                	beqz	a5,800218b4 <timecmp_test_21+0x86>
    8002189c:	6498                	ld	a4,8(s1)
    8002189e:	4789                	li	a5,2
    800218a0:	0000c597          	auipc	a1,0xc
    800218a4:	a4058593          	addi	a1,a1,-1472 # 8002d2e0 <__func__.0+0x2c0>
    800218a8:	00f70663          	beq	a4,a5,800218b4 <timecmp_test_21+0x86>
    800218ac:	0000c597          	auipc	a1,0xc
    800218b0:	a4458593          	addi	a1,a1,-1468 # 8002d2f0 <__func__.0+0x2d0>
    800218b4:	0000c517          	auipc	a0,0xc
    800218b8:	a7c50513          	addi	a0,a0,-1412 # 8002d330 <__func__.0+0x310>
    800218bc:	4fe090ef          	jal	8002adba <printf>
    800218c0:	0002f797          	auipc	a5,0x2f
    800218c4:	7517c783          	lbu	a5,1873(a5) # 80051011 <excpt+0x1>
    800218c8:	c789                	beqz	a5,800218d2 <timecmp_test_21+0xa4>
    800218ca:	6498                	ld	a4,8(s1)
    800218cc:	4789                	li	a5,2
    800218ce:	00f70c63          	beq	a4,a5,800218e6 <timecmp_test_21+0xb8>
    800218d2:	0000c517          	auipc	a0,0xc
    800218d6:	a6650513          	addi	a0,a0,-1434 # 8002d338 <__func__.0+0x318>
    800218da:	4e0090ef          	jal	8002adba <printf>
    800218de:	02900513          	li	a0,41
    800218e2:	1c6080ef          	jal	80029aa8 <putchar>
    800218e6:	4529                	li	a0,10
    800218e8:	1c0080ef          	jal	80029aa8 <putchar>
    800218ec:	0002f797          	auipc	a5,0x2f
    800218f0:	7257c783          	lbu	a5,1829(a5) # 80051011 <excpt+0x1>
    800218f4:	4401                	li	s0,0
    800218f6:	c789                	beqz	a5,80021900 <timecmp_test_21+0xd2>
    800218f8:	6480                	ld	s0,8(s1)
    800218fa:	1479                	addi	s0,s0,-2
    800218fc:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    goto_priv(PRIV_VU);
    80021900:	4501                	li	a0,0
    80021902:	d6cdf0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80021906:	c6cdf0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTIMECMP);
    8002190a:	24d027f3          	csrr	a5,vstimecmp

    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002190e:	08200593          	li	a1,130
    80021912:	00014617          	auipc	a2,0x14
    80021916:	f5660613          	addi	a2,a2,-170 # 80035868 <__func__.0+0x8848>
    8002191a:	0000c517          	auipc	a0,0xc
    8002191e:	9fe50513          	addi	a0,a0,-1538 # 8002d318 <__func__.0+0x2f8>
    80021922:	498090ef          	jal	8002adba <printf>
    80021926:	0002f797          	auipc	a5,0x2f
    8002192a:	6eb7c783          	lbu	a5,1771(a5) # 80051011 <excpt+0x1>
    8002192e:	0000c597          	auipc	a1,0xc
    80021932:	9c258593          	addi	a1,a1,-1598 # 8002d2f0 <__func__.0+0x2d0>
    80021936:	cf89                	beqz	a5,80021950 <timecmp_test_21+0x122>
    80021938:	6498                	ld	a4,8(s1)
    8002193a:	4789                	li	a5,2
    8002193c:	0000c597          	auipc	a1,0xc
    80021940:	9a458593          	addi	a1,a1,-1628 # 8002d2e0 <__func__.0+0x2c0>
    80021944:	00f70663          	beq	a4,a5,80021950 <timecmp_test_21+0x122>
    80021948:	0000c597          	auipc	a1,0xc
    8002194c:	9a858593          	addi	a1,a1,-1624 # 8002d2f0 <__func__.0+0x2d0>
    80021950:	0000c517          	auipc	a0,0xc
    80021954:	9e050513          	addi	a0,a0,-1568 # 8002d330 <__func__.0+0x310>
    80021958:	462090ef          	jal	8002adba <printf>
    8002195c:	0002f797          	auipc	a5,0x2f
    80021960:	6b57c783          	lbu	a5,1717(a5) # 80051011 <excpt+0x1>
    80021964:	c789                	beqz	a5,8002196e <timecmp_test_21+0x140>
    80021966:	6498                	ld	a4,8(s1)
    80021968:	4789                	li	a5,2
    8002196a:	00f70c63          	beq	a4,a5,80021982 <timecmp_test_21+0x154>
    8002196e:	0000c517          	auipc	a0,0xc
    80021972:	9ca50513          	addi	a0,a0,-1590 # 8002d338 <__func__.0+0x318>
    80021976:	444090ef          	jal	8002adba <printf>
    8002197a:	02900513          	li	a0,41
    8002197e:	12a080ef          	jal	80029aa8 <putchar>
    80021982:	4529                	li	a0,10
    80021984:	124080ef          	jal	80029aa8 <putchar>
    80021988:	c015                	beqz	s0,800219ac <timecmp_test_21+0x17e>
    8002198a:	0002f417          	auipc	s0,0x2f
    8002198e:	68744403          	lbu	s0,1671(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    );

    TEST_END(); 
    80021992:	0000c597          	auipc	a1,0xc
    80021996:	95e58593          	addi	a1,a1,-1698 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    8002199a:	cc11                	beqz	s0,800219b6 <timecmp_test_21+0x188>
    8002199c:	6498                	ld	a4,8(s1)
    8002199e:	4789                	li	a5,2
    TEST_END(); 
    800219a0:	0000c597          	auipc	a1,0xc
    800219a4:	94058593          	addi	a1,a1,-1728 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu access to vstimecmp casuses illegal instruction exception when menvcfg.stce=1 mcounteren.tm=0",
    800219a8:	00f70763          	beq	a4,a5,800219b6 <timecmp_test_21+0x188>
    800219ac:	4401                	li	s0,0
    TEST_END(); 
    800219ae:	0000c597          	auipc	a1,0xc
    800219b2:	94258593          	addi	a1,a1,-1726 # 8002d2f0 <__func__.0+0x2d0>
    800219b6:	0000c517          	auipc	a0,0xc
    800219ba:	9e250513          	addi	a0,a0,-1566 # 8002d398 <__func__.0+0x378>
    800219be:	3fc090ef          	jal	8002adba <printf>
    800219c2:	4511                	li	a0,4
    800219c4:	caadf0ef          	jal	80000e6e <goto_priv>
    800219c8:	dc3df0ef          	jal	8000178a <reset_state>
    800219cc:	60e2                	ld	ra,24(sp)
    800219ce:	8522                	mv	a0,s0
    800219d0:	6442                	ld	s0,16(sp)
    800219d2:	64a2                	ld	s1,8(sp)
    800219d4:	6105                	addi	sp,sp,32
    800219d6:	8082                	ret

00000000800219d8 <mix_instruction_1>:
#include <rvh_test.h>
#include <csrs.h> 
#include <page_tables.h>

bool mix_instruction_1(){
    800219d8:	7179                	addi	sp,sp,-48

    TEST_START();
    800219da:	0000b597          	auipc	a1,0xb
    800219de:	0de58593          	addi	a1,a1,222 # 8002cab8 <__func__.2>
    800219e2:	0000c517          	auipc	a0,0xc
    800219e6:	91e50513          	addi	a0,a0,-1762 # 8002d300 <__func__.0+0x2e0>
bool mix_instruction_1(){
    800219ea:	f406                	sd	ra,40(sp)
    800219ec:	f022                	sd	s0,32(sp)
    800219ee:	ec26                	sd	s1,24(sp)
    800219f0:	e84a                	sd	s2,16(sp)
    800219f2:	e44e                	sd	s3,8(sp)
    TEST_START();
    800219f4:	3c6090ef          	jal	8002adba <printf>
    800219f8:	4529                	li	a0,10
    800219fa:	0ae080ef          	jal	80029aa8 <putchar>

    goto_priv(PRIV_M);
    800219fe:	4511                	li	a0,4
    80021a00:	c6edf0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MENVCFG,  1ULL << 63);     //stce位
    80021a04:	57fd                	li	a5,-1
    80021a06:	17fe                	slli	a5,a5,0x3f
    80021a08:	30a7a073          	csrs	0x30a,a5
    CSRC(CSR_HENVCFG,  1ULL << 63);     //stce位
    80021a0c:	60a7b073          	csrc	henvcfg,a5
    CSRS(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021a10:	30616073          	csrsi	mcounteren,2
    CSRS(CSR_HCOUNTEREN, HCOUNTEREN_TM); 
    80021a14:	60616073          	csrsi	hcounteren,2

    goto_priv(PRIV_VS);
    80021a18:	4509                	li	a0,2
    80021a1a:	c54df0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80021a1e:	b54df0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STIMECMP);
    80021a22:	14d027f3          	csrr	a5,stimecmp

    TEST_ASSERT("vs access to stimecmp casuses virtual instruction exception when menvcfg.stce=1 and henvcfg.stce=0",
    80021a26:	08200593          	li	a1,130
    80021a2a:	00014617          	auipc	a2,0x14
    80021a2e:	ea660613          	addi	a2,a2,-346 # 800358d0 <__func__.0+0x88b0>
    80021a32:	0000c517          	auipc	a0,0xc
    80021a36:	8e650513          	addi	a0,a0,-1818 # 8002d318 <__func__.0+0x2f8>
    80021a3a:	380090ef          	jal	8002adba <printf>
    80021a3e:	0002f797          	auipc	a5,0x2f
    80021a42:	5d37c783          	lbu	a5,1491(a5) # 80051011 <excpt+0x1>
    80021a46:	0002f497          	auipc	s1,0x2f
    80021a4a:	5ca48493          	addi	s1,s1,1482 # 80051010 <excpt>
    80021a4e:	0000c597          	auipc	a1,0xc
    80021a52:	8a258593          	addi	a1,a1,-1886 # 8002d2f0 <__func__.0+0x2d0>
    80021a56:	cf89                	beqz	a5,80021a70 <mix_instruction_1+0x98>
    80021a58:	6498                	ld	a4,8(s1)
    80021a5a:	47d9                	li	a5,22
    80021a5c:	0000c597          	auipc	a1,0xc
    80021a60:	88458593          	addi	a1,a1,-1916 # 8002d2e0 <__func__.0+0x2c0>
    80021a64:	00f70663          	beq	a4,a5,80021a70 <mix_instruction_1+0x98>
    80021a68:	0000c597          	auipc	a1,0xc
    80021a6c:	88858593          	addi	a1,a1,-1912 # 8002d2f0 <__func__.0+0x2d0>
    80021a70:	0000c517          	auipc	a0,0xc
    80021a74:	8c050513          	addi	a0,a0,-1856 # 8002d330 <__func__.0+0x310>
    80021a78:	342090ef          	jal	8002adba <printf>
    80021a7c:	0002f797          	auipc	a5,0x2f
    80021a80:	5957c783          	lbu	a5,1429(a5) # 80051011 <excpt+0x1>
    80021a84:	c789                	beqz	a5,80021a8e <mix_instruction_1+0xb6>
    80021a86:	6498                	ld	a4,8(s1)
    80021a88:	47d9                	li	a5,22
    80021a8a:	00f70c63          	beq	a4,a5,80021aa2 <mix_instruction_1+0xca>
    80021a8e:	0000c517          	auipc	a0,0xc
    80021a92:	8aa50513          	addi	a0,a0,-1878 # 8002d338 <__func__.0+0x318>
    80021a96:	324090ef          	jal	8002adba <printf>
    80021a9a:	02900513          	li	a0,41
    80021a9e:	00a080ef          	jal	80029aa8 <putchar>
    80021aa2:	4529                	li	a0,10
    80021aa4:	004080ef          	jal	80029aa8 <putchar>
    80021aa8:	0002f797          	auipc	a5,0x2f
    80021aac:	5697c783          	lbu	a5,1385(a5) # 80051011 <excpt+0x1>
    80021ab0:	4401                	li	s0,0
    80021ab2:	c789                	beqz	a5,80021abc <mix_instruction_1+0xe4>
    80021ab4:	6480                	ld	s0,8(s1)
    80021ab6:	1429                	addi	s0,s0,-22
    80021ab8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );

//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021abc:	4511                	li	a0,4
    80021abe:	bb0df0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MCOUNTEREN, HCOUNTEREN_TM); 
    80021ac2:	30617073          	csrci	mcounteren,2

    goto_priv(PRIV_HS);
    80021ac6:	450d                	li	a0,3
    80021ac8:	ba6df0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80021acc:	aa6df0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_TIME);
    80021ad0:	c01027f3          	rdtime	a5

    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    80021ad4:	08200593          	li	a1,130
    80021ad8:	00013617          	auipc	a2,0x13
    80021adc:	a1060613          	addi	a2,a2,-1520 # 800344e8 <__func__.0+0x74c8>
    80021ae0:	0000c517          	auipc	a0,0xc
    80021ae4:	83850513          	addi	a0,a0,-1992 # 8002d318 <__func__.0+0x2f8>
    80021ae8:	2d2090ef          	jal	8002adba <printf>
    80021aec:	0002f797          	auipc	a5,0x2f
    80021af0:	5257c783          	lbu	a5,1317(a5) # 80051011 <excpt+0x1>
    80021af4:	0000b597          	auipc	a1,0xb
    80021af8:	7fc58593          	addi	a1,a1,2044 # 8002d2f0 <__func__.0+0x2d0>
    80021afc:	cf89                	beqz	a5,80021b16 <mix_instruction_1+0x13e>
    80021afe:	6498                	ld	a4,8(s1)
    80021b00:	4789                	li	a5,2
    80021b02:	0000b597          	auipc	a1,0xb
    80021b06:	7de58593          	addi	a1,a1,2014 # 8002d2e0 <__func__.0+0x2c0>
    80021b0a:	00f70663          	beq	a4,a5,80021b16 <mix_instruction_1+0x13e>
    80021b0e:	0000b597          	auipc	a1,0xb
    80021b12:	7e258593          	addi	a1,a1,2018 # 8002d2f0 <__func__.0+0x2d0>
    80021b16:	0000c517          	auipc	a0,0xc
    80021b1a:	81a50513          	addi	a0,a0,-2022 # 8002d330 <__func__.0+0x310>
    80021b1e:	29c090ef          	jal	8002adba <printf>
    80021b22:	0002f797          	auipc	a5,0x2f
    80021b26:	4ef7c783          	lbu	a5,1263(a5) # 80051011 <excpt+0x1>
    80021b2a:	c789                	beqz	a5,80021b34 <mix_instruction_1+0x15c>
    80021b2c:	6498                	ld	a4,8(s1)
    80021b2e:	4789                	li	a5,2
    80021b30:	00f70c63          	beq	a4,a5,80021b48 <mix_instruction_1+0x170>
    80021b34:	0000c517          	auipc	a0,0xc
    80021b38:	80450513          	addi	a0,a0,-2044 # 8002d338 <__func__.0+0x318>
    80021b3c:	27e090ef          	jal	8002adba <printf>
    80021b40:	02900513          	li	a0,41
    80021b44:	765070ef          	jal	80029aa8 <putchar>
    80021b48:	4529                	li	a0,10
    80021b4a:	75f070ef          	jal	80029aa8 <putchar>
    80021b4e:	c801                	beqz	s0,80021b5e <mix_instruction_1+0x186>
    80021b50:	0002f797          	auipc	a5,0x2f
    80021b54:	4c17c783          	lbu	a5,1217(a5) # 80051011 <excpt+0x1>
    80021b58:	4401                	li	s0,0
    80021b5a:	040794e3          	bnez	a5,800223a2 <mix_instruction_1+0x9ca>
    //     excpt.cause == CAUSE_ILI
    // ); 
    
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021b5e:	4511                	li	a0,4
    80021b60:	b0edf0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_HSTATUS, HSTATUS_VTSR);
    80021b64:	004007b7          	lui	a5,0x400
    80021b68:	6007a073          	csrs	hstatus,a5
    CSRC(CSR_MSTATUS, MSTATUS_TW);
    80021b6c:	002007b7          	lui	a5,0x200
    80021b70:	3007b073          	csrc	mstatus,a5
    goto_priv(PRIV_VU);
    80021b74:	4501                	li	a0,0
    80021b76:	af8df0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80021b7a:	9f8df0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile(
    80021b7e:	10200073          	sret
    sret();
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80021b82:	08200593          	li	a1,130
    80021b86:	0000d617          	auipc	a2,0xd
    80021b8a:	8ca60613          	addi	a2,a2,-1846 # 8002e450 <__func__.0+0x1430>
    80021b8e:	0000b517          	auipc	a0,0xb
    80021b92:	78a50513          	addi	a0,a0,1930 # 8002d318 <__func__.0+0x2f8>
    80021b96:	224090ef          	jal	8002adba <printf>
    80021b9a:	0002f797          	auipc	a5,0x2f
    80021b9e:	4777c783          	lbu	a5,1143(a5) # 80051011 <excpt+0x1>
    80021ba2:	0000b597          	auipc	a1,0xb
    80021ba6:	74e58593          	addi	a1,a1,1870 # 8002d2f0 <__func__.0+0x2d0>
    80021baa:	cf89                	beqz	a5,80021bc4 <mix_instruction_1+0x1ec>
    80021bac:	6498                	ld	a4,8(s1)
    80021bae:	47d9                	li	a5,22
    80021bb0:	0000b597          	auipc	a1,0xb
    80021bb4:	73058593          	addi	a1,a1,1840 # 8002d2e0 <__func__.0+0x2c0>
    80021bb8:	00f70663          	beq	a4,a5,80021bc4 <mix_instruction_1+0x1ec>
    80021bbc:	0000b597          	auipc	a1,0xb
    80021bc0:	73458593          	addi	a1,a1,1844 # 8002d2f0 <__func__.0+0x2d0>
    80021bc4:	0000b517          	auipc	a0,0xb
    80021bc8:	76c50513          	addi	a0,a0,1900 # 8002d330 <__func__.0+0x310>
    80021bcc:	1ee090ef          	jal	8002adba <printf>
    80021bd0:	0002f797          	auipc	a5,0x2f
    80021bd4:	4417c783          	lbu	a5,1089(a5) # 80051011 <excpt+0x1>
    80021bd8:	c789                	beqz	a5,80021be2 <mix_instruction_1+0x20a>
    80021bda:	6498                	ld	a4,8(s1)
    80021bdc:	47d9                	li	a5,22
    80021bde:	00f70c63          	beq	a4,a5,80021bf6 <mix_instruction_1+0x21e>
    80021be2:	0000b517          	auipc	a0,0xb
    80021be6:	75650513          	addi	a0,a0,1878 # 8002d338 <__func__.0+0x318>
    80021bea:	1d0090ef          	jal	8002adba <printf>
    80021bee:	02900513          	li	a0,41
    80021bf2:	6b7070ef          	jal	80029aa8 <putchar>
    80021bf6:	4529                	li	a0,10
    80021bf8:	6b1070ef          	jal	80029aa8 <putchar>
    80021bfc:	c801                	beqz	s0,80021c0c <mix_instruction_1+0x234>
    80021bfe:	0002f797          	auipc	a5,0x2f
    80021c02:	4137c783          	lbu	a5,1043(a5) # 80051011 <excpt+0x1>
    80021c06:	4401                	li	s0,0
    80021c08:	78079763          	bnez	a5,80022396 <mix_instruction_1+0x9be>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    );  
//----------------------------------------------------------------------

    goto_priv(PRIV_M);
    80021c0c:	4511                	li	a0,4
    80021c0e:	a60df0ef          	jal	80000e6e <goto_priv>
    uint64_t val, valu;
    uintptr_t vaddr;
    uintptr_t addr;

    hspt_init();
    80021c12:	9cfde0ef          	jal	800005e0 <hspt_init>
    hpt_init(); 
    80021c16:	d67de0ef          	jal	8000097c <hpt_init>
    vspt_init();
    80021c1a:	b09de0ef          	jal	80000722 <vspt_init>

    vaddr = vs_page_base(VSURWX_GURWX);
    addr = phys_page_base(VSURWX_GURWX);

    goto_priv(PRIV_HS);
    80021c1e:	450d                	li	a0,3
    80021c20:	a4edf0ef          	jal	80000e6e <goto_priv>

    set_prev_priv(PRIV_VU);
    80021c24:	4501                	li	a0,0
    80021c26:	968df0ef          	jal	80000d8e <set_prev_priv>
    *((volatile uint64_t*) addr) = val;
    80021c2a:	00017917          	auipc	s2,0x17
    80021c2e:	c7690913          	addi	s2,s2,-906 # 800388a0 <__func__.0+0xb880>
    TEST_SETUP_EXCEPT();
    80021c32:	940df0ef          	jal	80000d72 <test_setup_except_function>
    80021c36:	00093683          	ld	a3,0(s2)
    80021c3a:	44019737          	lui	a4,0x44019
    asm volatile(
    80021c3e:	000807b7          	lui	a5,0x80
    80021c42:	0706                	slli	a4,a4,0x1
    80021c44:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021c46:	e314                	sd	a3,0(a4)
    80021c48:	07b6                	slli	a5,a5,0xd
    80021c4a:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    80021c4e:	08200593          	li	a1,130
    80021c52:	0000c617          	auipc	a2,0xc
    80021c56:	08e60613          	addi	a2,a2,142 # 8002dce0 <__func__.0+0xcc0>
    80021c5a:	0000b517          	auipc	a0,0xb
    80021c5e:	6be50513          	addi	a0,a0,1726 # 8002d318 <__func__.0+0x2f8>
    80021c62:	158090ef          	jal	8002adba <printf>
    80021c66:	0002f797          	auipc	a5,0x2f
    80021c6a:	3ab7c783          	lbu	a5,939(a5) # 80051011 <excpt+0x1>
    80021c6e:	0000b597          	auipc	a1,0xb
    80021c72:	68258593          	addi	a1,a1,1666 # 8002d2f0 <__func__.0+0x2d0>
    80021c76:	e789                	bnez	a5,80021c80 <mix_instruction_1+0x2a8>
    80021c78:	0000b597          	auipc	a1,0xb
    80021c7c:	66858593          	addi	a1,a1,1640 # 8002d2e0 <__func__.0+0x2c0>
    80021c80:	0000b517          	auipc	a0,0xb
    80021c84:	6b050513          	addi	a0,a0,1712 # 8002d330 <__func__.0+0x310>
    80021c88:	132090ef          	jal	8002adba <printf>
    80021c8c:	0002f797          	auipc	a5,0x2f
    80021c90:	3857c783          	lbu	a5,901(a5) # 80051011 <excpt+0x1>
    80021c94:	76079563          	bnez	a5,800223fe <mix_instruction_1+0xa26>
    80021c98:	4529                	li	a0,10
    80021c9a:	60f070ef          	jal	80029aa8 <putchar>
    80021c9e:	c419                	beqz	s0,80021cac <mix_instruction_1+0x2d4>
    80021ca0:	0002f417          	auipc	s0,0x2f
    80021ca4:	37144403          	lbu	s0,881(s0) # 80051011 <excpt+0x1>
    80021ca8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    );

    set_prev_priv(PRIV_VS);
    80021cac:	4509                	li	a0,2
    80021cae:	8e0df0ef          	jal	80000d8e <set_prev_priv>
    TEST_SETUP_EXCEPT();
    80021cb2:	8c0df0ef          	jal	80000d72 <test_setup_except_function>
    80021cb6:	00093683          	ld	a3,0(s2)
    80021cba:	44019737          	lui	a4,0x44019
    80021cbe:	000807b7          	lui	a5,0x80
    80021cc2:	0706                	slli	a4,a4,0x1
    80021cc4:	07e5                	addi	a5,a5,25 # 80019 <_test_table_size+0x80018>
    80021cc6:	e314                	sd	a3,0(a4)
    80021cc8:	07b6                	slli	a5,a5,0xd
    80021cca:	6c07c7f3          	.insn	4, 0x6c07c7f3
    write64(addr, 0x1107ec0ffee);
    val = hlvd(vaddr);
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    80021cce:	08200593          	li	a1,130
    80021cd2:	0000c617          	auipc	a2,0xc
    80021cd6:	03e60613          	addi	a2,a2,62 # 8002dd10 <__func__.0+0xcf0>
    80021cda:	0000b517          	auipc	a0,0xb
    80021cde:	63e50513          	addi	a0,a0,1598 # 8002d318 <__func__.0+0x2f8>
    80021ce2:	0d8090ef          	jal	8002adba <printf>
    80021ce6:	0002f797          	auipc	a5,0x2f
    80021cea:	32b7c783          	lbu	a5,811(a5) # 80051011 <excpt+0x1>
    80021cee:	0000b597          	auipc	a1,0xb
    80021cf2:	60258593          	addi	a1,a1,1538 # 8002d2f0 <__func__.0+0x2d0>
    80021cf6:	cf89                	beqz	a5,80021d10 <mix_instruction_1+0x338>
    80021cf8:	6498                	ld	a4,8(s1)
    80021cfa:	47b5                	li	a5,13
    80021cfc:	0000b597          	auipc	a1,0xb
    80021d00:	5e458593          	addi	a1,a1,1508 # 8002d2e0 <__func__.0+0x2c0>
    80021d04:	00f70663          	beq	a4,a5,80021d10 <mix_instruction_1+0x338>
    80021d08:	0000b597          	auipc	a1,0xb
    80021d0c:	5e858593          	addi	a1,a1,1512 # 8002d2f0 <__func__.0+0x2d0>
    80021d10:	0000b517          	auipc	a0,0xb
    80021d14:	62050513          	addi	a0,a0,1568 # 8002d330 <__func__.0+0x310>
    80021d18:	0a2090ef          	jal	8002adba <printf>
    80021d1c:	0002f797          	auipc	a5,0x2f
    80021d20:	2f57c783          	lbu	a5,757(a5) # 80051011 <excpt+0x1>
    80021d24:	c789                	beqz	a5,80021d2e <mix_instruction_1+0x356>
    80021d26:	6498                	ld	a4,8(s1)
    80021d28:	47b5                	li	a5,13
    80021d2a:	00f70c63          	beq	a4,a5,80021d42 <mix_instruction_1+0x36a>
    80021d2e:	0000b517          	auipc	a0,0xb
    80021d32:	60a50513          	addi	a0,a0,1546 # 8002d338 <__func__.0+0x318>
    80021d36:	084090ef          	jal	8002adba <printf>
    80021d3a:	02900513          	li	a0,41
    80021d3e:	56b070ef          	jal	80029aa8 <putchar>
    80021d42:	4529                	li	a0,10
    80021d44:	565070ef          	jal	80029aa8 <putchar>
    80021d48:	c801                	beqz	s0,80021d58 <mix_instruction_1+0x380>
    80021d4a:	0002f797          	auipc	a5,0x2f
    80021d4e:	2c77c783          	lbu	a5,711(a5) # 80051011 <excpt+0x1>
    80021d52:	4401                	li	s0,0
    80021d54:	66079263          	bnez	a5,800223b8 <mix_instruction_1+0x9e0>


//----------------------------------------------------------------------


    goto_priv(PRIV_M);     
    80021d58:	4511                	li	a0,4
    80021d5a:	914df0ef          	jal	80000e6e <goto_priv>

    CSRC(CSR_MSTATUS, SSTATUS_SUM);
    80021d5e:	000407b7          	lui	a5,0x40
    80021d62:	3007b073          	csrc	mstatus,a5

    goto_priv(PRIV_HS);
    80021d66:	450d                	li	a0,3
    80021d68:	906df0ef          	jal	80000e6e <goto_priv>

    //执行sd指令时，设置了mstatus.SUM=0，在S模式下访问U模式可以访问的页表项
    TEST_SETUP_EXCEPT();
    80021d6c:	806df0ef          	jal	80000d72 <test_setup_except_function>
STORE_INSTRUCTION(sd, "sd", uint64_t);
    80021d70:	37ab77b7          	lui	a5,0x37ab7
    80021d74:	00080737          	lui	a4,0x80
    80021d78:	078a                	slli	a5,a5,0x2
    80021d7a:	0765                	addi	a4,a4,25 # 80019 <_test_table_size+0x80018>
    80021d7c:	eef78793          	addi	a5,a5,-273 # 37ab6eef <STACK_SIZE+0x379b6eef>
    80021d80:	0736                	slli	a4,a4,0xd
    80021d82:	00f73023          	sd	a5,0(a4)
    vaddr = hs_page_base(VSURWX_GURWX);

    
    sd(vaddr, 0xdeadbeef);
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    80021d86:	08200593          	li	a1,130
    80021d8a:	00011617          	auipc	a2,0x11
    80021d8e:	b6660613          	addi	a2,a2,-1178 # 800328f0 <__func__.0+0x58d0>
    80021d92:	0000b517          	auipc	a0,0xb
    80021d96:	58650513          	addi	a0,a0,1414 # 8002d318 <__func__.0+0x2f8>
    80021d9a:	020090ef          	jal	8002adba <printf>
    80021d9e:	0002f797          	auipc	a5,0x2f
    80021da2:	2737c783          	lbu	a5,627(a5) # 80051011 <excpt+0x1>
    80021da6:	0000b597          	auipc	a1,0xb
    80021daa:	54a58593          	addi	a1,a1,1354 # 8002d2f0 <__func__.0+0x2d0>
    80021dae:	cf89                	beqz	a5,80021dc8 <mix_instruction_1+0x3f0>
    80021db0:	6498                	ld	a4,8(s1)
    80021db2:	47bd                	li	a5,15
    80021db4:	0000b597          	auipc	a1,0xb
    80021db8:	52c58593          	addi	a1,a1,1324 # 8002d2e0 <__func__.0+0x2c0>
    80021dbc:	00f70663          	beq	a4,a5,80021dc8 <mix_instruction_1+0x3f0>
    80021dc0:	0000b597          	auipc	a1,0xb
    80021dc4:	53058593          	addi	a1,a1,1328 # 8002d2f0 <__func__.0+0x2d0>
    80021dc8:	0000b517          	auipc	a0,0xb
    80021dcc:	56850513          	addi	a0,a0,1384 # 8002d330 <__func__.0+0x310>
    80021dd0:	7eb080ef          	jal	8002adba <printf>
    80021dd4:	0002f797          	auipc	a5,0x2f
    80021dd8:	23d7c783          	lbu	a5,573(a5) # 80051011 <excpt+0x1>
    80021ddc:	c789                	beqz	a5,80021de6 <mix_instruction_1+0x40e>
    80021dde:	6498                	ld	a4,8(s1)
    80021de0:	47bd                	li	a5,15
    80021de2:	00f70c63          	beq	a4,a5,80021dfa <mix_instruction_1+0x422>
    80021de6:	0000b517          	auipc	a0,0xb
    80021dea:	55250513          	addi	a0,a0,1362 # 8002d338 <__func__.0+0x318>
    80021dee:	7cd080ef          	jal	8002adba <printf>
    80021df2:	02900513          	li	a0,41
    80021df6:	4b3070ef          	jal	80029aa8 <putchar>
    80021dfa:	4529                	li	a0,10
    80021dfc:	4ad070ef          	jal	80029aa8 <putchar>
    80021e00:	c801                	beqz	s0,80021e10 <mix_instruction_1+0x438>
    80021e02:	0002f797          	auipc	a5,0x2f
    80021e06:	20f7c783          	lbu	a5,527(a5) # 80051011 <excpt+0x1>
    80021e0a:	4401                	li	s0,0
    80021e0c:	5a079b63          	bnez	a5,800223c2 <mix_instruction_1+0x9ea>
        excpt.triggered == true &&
        excpt.cause == CAUSE_SPF
    );
//----------------------------------------------------------------------
    goto_priv(PRIV_M);
    80021e10:	4511                	li	a0,4
    80021e12:	85cdf0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MENVCFG,1ULL<<63);                   //若menvcfg.stce=0,则mip的stip可写，若为1则不可写
    80021e16:	57fd                	li	a5,-1
    80021e18:	03f79713          	slli	a4,a5,0x3f
    80021e1c:	30a73073          	csrc	0x30a,a4

    CSRW(mideleg, (uint64_t)-1);
    80021e20:	30379073          	csrw	mideleg,a5
    VERBOSE("setting mideleg and hideleg\n");
    
    CSRW(CSR_HIDELEG, (uint64_t)-1);
    80021e24:	60379073          	csrw	hideleg,a5

    VERBOSE("setting all in mip\n");
    CSRW(mip, (uint64_t)-1);
    80021e28:	34479073          	csrw	mip,a5
    check_csr_rd("hip", CSR_HIP, 0x4);
    80021e2c:	64402973          	csrr	s2,hip
    80021e30:	0000c617          	auipc	a2,0xc
    80021e34:	9a860613          	addi	a2,a2,-1624 # 8002d7d8 <__func__.0+0x7b8>
    80021e38:	08200593          	li	a1,130
    80021e3c:	0000b517          	auipc	a0,0xb
    80021e40:	4dc50513          	addi	a0,a0,1244 # 8002d318 <__func__.0+0x2f8>
    80021e44:	4991                	li	s3,4
    80021e46:	775080ef          	jal	8002adba <printf>
    80021e4a:	59390163          	beq	s2,s3,800223cc <mix_instruction_1+0x9f4>
    80021e4e:	0000b597          	auipc	a1,0xb
    80021e52:	4a258593          	addi	a1,a1,1186 # 8002d2f0 <__func__.0+0x2d0>
    80021e56:	0000b517          	auipc	a0,0xb
    80021e5a:	4da50513          	addi	a0,a0,1242 # 8002d330 <__func__.0+0x310>
    80021e5e:	75d080ef          	jal	8002adba <printf>
    80021e62:	0000b517          	auipc	a0,0xb
    80021e66:	4d650513          	addi	a0,a0,1238 # 8002d338 <__func__.0+0x318>
    80021e6a:	751080ef          	jal	8002adba <printf>
    80021e6e:	86ce                	mv	a3,s3
    80021e70:	864a                	mv	a2,s2
    80021e72:	02d00593          	li	a1,45
    80021e76:	0000c517          	auipc	a0,0xc
    80021e7a:	96a50513          	addi	a0,a0,-1686 # 8002d7e0 <__func__.0+0x7c0>
    80021e7e:	73d080ef          	jal	8002adba <printf>
    80021e82:	02900513          	li	a0,41
    80021e86:	423070ef          	jal	80029aa8 <putchar>
    80021e8a:	4529                	li	a0,10
    80021e8c:	41d070ef          	jal	80029aa8 <putchar>
    80021e90:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x222);    
    80021e92:	14402973          	csrr	s2,sip
    80021e96:	0000c617          	auipc	a2,0xc
    80021e9a:	96260613          	addi	a2,a2,-1694 # 8002d7f8 <__func__.0+0x7d8>
    80021e9e:	08200593          	li	a1,130
    80021ea2:	0000b517          	auipc	a0,0xb
    80021ea6:	47650513          	addi	a0,a0,1142 # 8002d318 <__func__.0+0x2f8>
    80021eaa:	22200993          	li	s3,546
    80021eae:	70d080ef          	jal	8002adba <printf>
    80021eb2:	4b390e63          	beq	s2,s3,8002236e <mix_instruction_1+0x996>
    80021eb6:	0000b597          	auipc	a1,0xb
    80021eba:	43a58593          	addi	a1,a1,1082 # 8002d2f0 <__func__.0+0x2d0>
    80021ebe:	0000b517          	auipc	a0,0xb
    80021ec2:	47250513          	addi	a0,a0,1138 # 8002d330 <__func__.0+0x310>
    80021ec6:	6f5080ef          	jal	8002adba <printf>
    80021eca:	0000b517          	auipc	a0,0xb
    80021ece:	46e50513          	addi	a0,a0,1134 # 8002d338 <__func__.0+0x318>
    80021ed2:	6e9080ef          	jal	8002adba <printf>
    80021ed6:	86ce                	mv	a3,s3
    80021ed8:	864a                	mv	a2,s2
    80021eda:	02d00593          	li	a1,45
    80021ede:	0000c517          	auipc	a0,0xc
    80021ee2:	90250513          	addi	a0,a0,-1790 # 8002d7e0 <__func__.0+0x7c0>
    80021ee6:	6d5080ef          	jal	8002adba <printf>
    80021eea:	02900513          	li	a0,41
    80021eee:	3bb070ef          	jal	80029aa8 <putchar>
    80021ef2:	4529                	li	a0,10
    80021ef4:	3b5070ef          	jal	80029aa8 <putchar>
    80021ef8:	4401                	li	s0,0

    // check_csr_rd_mask("mip", mip, 0x226, mtime_mask); // only test when nemu don't use difftest because spike, as ref, shut up time interrupt
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80021efa:	24402973          	csrr	s2,vsip
    80021efe:	0000c617          	auipc	a2,0xc
    80021f02:	8ca60613          	addi	a2,a2,-1846 # 8002d7c8 <__func__.0+0x7a8>
    80021f06:	08200593          	li	a1,130
    80021f0a:	0000b517          	auipc	a0,0xb
    80021f0e:	40e50513          	addi	a0,a0,1038 # 8002d318 <__func__.0+0x2f8>
    80021f12:	4989                	li	s3,2
    80021f14:	6a7080ef          	jal	8002adba <printf>
    80021f18:	43390d63          	beq	s2,s3,80022352 <mix_instruction_1+0x97a>
    80021f1c:	0000b597          	auipc	a1,0xb
    80021f20:	3d458593          	addi	a1,a1,980 # 8002d2f0 <__func__.0+0x2d0>
    80021f24:	0000b517          	auipc	a0,0xb
    80021f28:	40c50513          	addi	a0,a0,1036 # 8002d330 <__func__.0+0x310>
    80021f2c:	68f080ef          	jal	8002adba <printf>
    80021f30:	0000b517          	auipc	a0,0xb
    80021f34:	40850513          	addi	a0,a0,1032 # 8002d338 <__func__.0+0x318>
    80021f38:	683080ef          	jal	8002adba <printf>
    80021f3c:	86ce                	mv	a3,s3
    80021f3e:	864a                	mv	a2,s2
    80021f40:	02d00593          	li	a1,45
    80021f44:	0000c517          	auipc	a0,0xc
    80021f48:	89c50513          	addi	a0,a0,-1892 # 8002d7e0 <__func__.0+0x7c0>
    80021f4c:	66f080ef          	jal	8002adba <printf>
    80021f50:	02900513          	li	a0,41
    80021f54:	355070ef          	jal	80029aa8 <putchar>
    80021f58:	4529                	li	a0,10
    80021f5a:	34f070ef          	jal	80029aa8 <putchar>
    80021f5e:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80021f60:	4509                	li	a0,2
    80021f62:	f0dde0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80021f66:	14402973          	csrr	s2,sip
    80021f6a:	0000c617          	auipc	a2,0xc
    80021f6e:	89660613          	addi	a2,a2,-1898 # 8002d800 <__func__.0+0x7e0>
    80021f72:	08200593          	li	a1,130
    80021f76:	0000b517          	auipc	a0,0xb
    80021f7a:	3a250513          	addi	a0,a0,930 # 8002d318 <__func__.0+0x2f8>
    80021f7e:	4989                	li	s3,2
    80021f80:	63b080ef          	jal	8002adba <printf>
    80021f84:	3b390963          	beq	s2,s3,80022336 <mix_instruction_1+0x95e>
    80021f88:	0000b597          	auipc	a1,0xb
    80021f8c:	36858593          	addi	a1,a1,872 # 8002d2f0 <__func__.0+0x2d0>
    80021f90:	0000b517          	auipc	a0,0xb
    80021f94:	3a050513          	addi	a0,a0,928 # 8002d330 <__func__.0+0x310>
    80021f98:	623080ef          	jal	8002adba <printf>
    80021f9c:	0000b517          	auipc	a0,0xb
    80021fa0:	39c50513          	addi	a0,a0,924 # 8002d338 <__func__.0+0x318>
    80021fa4:	617080ef          	jal	8002adba <printf>
    80021fa8:	86ce                	mv	a3,s3
    80021faa:	864a                	mv	a2,s2
    80021fac:	02d00593          	li	a1,45
    80021fb0:	0000c517          	auipc	a0,0xc
    80021fb4:	83050513          	addi	a0,a0,-2000 # 8002d7e0 <__func__.0+0x7c0>
    80021fb8:	603080ef          	jal	8002adba <printf>
    80021fbc:	02900513          	li	a0,41
    80021fc0:	2e9070ef          	jal	80029aa8 <putchar>
    80021fc4:	4529                	li	a0,10
    80021fc6:	2e3070ef          	jal	80029aa8 <putchar>
    80021fca:	4401                	li	s0,0
    goto_priv(PRIV_M);
    80021fcc:	4511                	li	a0,4
    80021fce:	ea1de0ef          	jal	80000e6e <goto_priv>

    VERBOSE("clearing all in mip\n");
    CSRW(mip, (uint64_t)0);
    80021fd2:	34405073          	csrwi	mip,0
    check_csr_rd("hip", CSR_HIP, 0x0);
    80021fd6:	64402973          	csrr	s2,hip
    80021fda:	0000b617          	auipc	a2,0xb
    80021fde:	7fe60613          	addi	a2,a2,2046 # 8002d7d8 <__func__.0+0x7b8>
    80021fe2:	08200593          	li	a1,130
    80021fe6:	0000b517          	auipc	a0,0xb
    80021fea:	33250513          	addi	a0,a0,818 # 8002d318 <__func__.0+0x2f8>
    80021fee:	5cd080ef          	jal	8002adba <printf>
    80021ff2:	32090463          	beqz	s2,8002231a <mix_instruction_1+0x942>
    80021ff6:	0000b597          	auipc	a1,0xb
    80021ffa:	2fa58593          	addi	a1,a1,762 # 8002d2f0 <__func__.0+0x2d0>
    80021ffe:	0000b517          	auipc	a0,0xb
    80022002:	33250513          	addi	a0,a0,818 # 8002d330 <__func__.0+0x310>
    80022006:	5b5080ef          	jal	8002adba <printf>
    8002200a:	0000b517          	auipc	a0,0xb
    8002200e:	32e50513          	addi	a0,a0,814 # 8002d338 <__func__.0+0x318>
    80022012:	5a9080ef          	jal	8002adba <printf>
    80022016:	864a                	mv	a2,s2
    80022018:	4681                	li	a3,0
    8002201a:	02d00593          	li	a1,45
    8002201e:	0000b517          	auipc	a0,0xb
    80022022:	7c250513          	addi	a0,a0,1986 # 8002d7e0 <__func__.0+0x7c0>
    80022026:	595080ef          	jal	8002adba <printf>
    8002202a:	02900513          	li	a0,41
    8002202e:	27b070ef          	jal	80029aa8 <putchar>
    80022032:	4529                	li	a0,10
    80022034:	275070ef          	jal	80029aa8 <putchar>
    80022038:	4401                	li	s0,0
    check_csr_rd("sip", sip, 0x0);
    8002203a:	14402973          	csrr	s2,sip
    8002203e:	0000b617          	auipc	a2,0xb
    80022042:	7ba60613          	addi	a2,a2,1978 # 8002d7f8 <__func__.0+0x7d8>
    80022046:	08200593          	li	a1,130
    8002204a:	0000b517          	auipc	a0,0xb
    8002204e:	2ce50513          	addi	a0,a0,718 # 8002d318 <__func__.0+0x2f8>
    80022052:	569080ef          	jal	8002adba <printf>
    80022056:	2a090463          	beqz	s2,800222fe <mix_instruction_1+0x926>
    8002205a:	0000b597          	auipc	a1,0xb
    8002205e:	29658593          	addi	a1,a1,662 # 8002d2f0 <__func__.0+0x2d0>
    80022062:	0000b517          	auipc	a0,0xb
    80022066:	2ce50513          	addi	a0,a0,718 # 8002d330 <__func__.0+0x310>
    8002206a:	551080ef          	jal	8002adba <printf>
    8002206e:	0000b517          	auipc	a0,0xb
    80022072:	2ca50513          	addi	a0,a0,714 # 8002d338 <__func__.0+0x318>
    80022076:	545080ef          	jal	8002adba <printf>
    8002207a:	864a                	mv	a2,s2
    8002207c:	4681                	li	a3,0
    8002207e:	02d00593          	li	a1,45
    80022082:	0000b517          	auipc	a0,0xb
    80022086:	75e50513          	addi	a0,a0,1886 # 8002d7e0 <__func__.0+0x7c0>
    8002208a:	531080ef          	jal	8002adba <printf>
    8002208e:	02900513          	li	a0,41
    80022092:	217070ef          	jal	80029aa8 <putchar>
    80022096:	4529                	li	a0,10
    80022098:	211070ef          	jal	80029aa8 <putchar>
    8002209c:	4401                	li	s0,0
    // check_csr_rd_mask("mip", mip, 0x000, mtime_mask);
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    8002209e:	24402973          	csrr	s2,vsip
    800220a2:	0000b617          	auipc	a2,0xb
    800220a6:	72660613          	addi	a2,a2,1830 # 8002d7c8 <__func__.0+0x7a8>
    800220aa:	08200593          	li	a1,130
    800220ae:	0000b517          	auipc	a0,0xb
    800220b2:	26a50513          	addi	a0,a0,618 # 8002d318 <__func__.0+0x2f8>
    800220b6:	505080ef          	jal	8002adba <printf>
    800220ba:	22090463          	beqz	s2,800222e2 <mix_instruction_1+0x90a>
    800220be:	0000b597          	auipc	a1,0xb
    800220c2:	23258593          	addi	a1,a1,562 # 8002d2f0 <__func__.0+0x2d0>
    800220c6:	0000b517          	auipc	a0,0xb
    800220ca:	26a50513          	addi	a0,a0,618 # 8002d330 <__func__.0+0x310>
    800220ce:	4ed080ef          	jal	8002adba <printf>
    800220d2:	0000b517          	auipc	a0,0xb
    800220d6:	26650513          	addi	a0,a0,614 # 8002d338 <__func__.0+0x318>
    800220da:	4e1080ef          	jal	8002adba <printf>
    800220de:	864a                	mv	a2,s2
    800220e0:	4681                	li	a3,0
    800220e2:	02d00593          	li	a1,45
    800220e6:	0000b517          	auipc	a0,0xb
    800220ea:	6fa50513          	addi	a0,a0,1786 # 8002d7e0 <__func__.0+0x7c0>
    800220ee:	4cd080ef          	jal	8002adba <printf>
    800220f2:	02900513          	li	a0,41
    800220f6:	1b3070ef          	jal	80029aa8 <putchar>
    800220fa:	4529                	li	a0,10
    800220fc:	1ad070ef          	jal	80029aa8 <putchar>
    80022100:	4401                	li	s0,0
    goto_priv(PRIV_VS);
    80022102:	4509                	li	a0,2
    80022104:	d6bde0ef          	jal	80000e6e <goto_priv>
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    80022108:	14402973          	csrr	s2,sip
    8002210c:	0000b617          	auipc	a2,0xb
    80022110:	6f460613          	addi	a2,a2,1780 # 8002d800 <__func__.0+0x7e0>
    80022114:	08200593          	li	a1,130
    80022118:	0000b517          	auipc	a0,0xb
    8002211c:	20050513          	addi	a0,a0,512 # 8002d318 <__func__.0+0x2f8>
    80022120:	49b080ef          	jal	8002adba <printf>
    80022124:	1a090163          	beqz	s2,800222c6 <mix_instruction_1+0x8ee>
    80022128:	0000b597          	auipc	a1,0xb
    8002212c:	1c858593          	addi	a1,a1,456 # 8002d2f0 <__func__.0+0x2d0>
    80022130:	0000b517          	auipc	a0,0xb
    80022134:	20050513          	addi	a0,a0,512 # 8002d330 <__func__.0+0x310>
    80022138:	483080ef          	jal	8002adba <printf>
    8002213c:	0000b517          	auipc	a0,0xb
    80022140:	1fc50513          	addi	a0,a0,508 # 8002d338 <__func__.0+0x318>
    80022144:	477080ef          	jal	8002adba <printf>
    80022148:	864a                	mv	a2,s2
    8002214a:	4681                	li	a3,0
    8002214c:	02d00593          	li	a1,45
    80022150:	0000b517          	auipc	a0,0xb
    80022154:	69050513          	addi	a0,a0,1680 # 8002d7e0 <__func__.0+0x7c0>
    80022158:	463080ef          	jal	8002adba <printf>
    8002215c:	02900513          	li	a0,41
    80022160:	149070ef          	jal	80029aa8 <putchar>
    80022164:	4529                	li	a0,10
    80022166:	143070ef          	jal	80029aa8 <putchar>
    8002216a:	4401                	li	s0,0
    goto_priv(PRIV_M);   
    8002216c:	4511                	li	a0,4
    8002216e:	d01de0ef          	jal	80000e6e <goto_priv>


//----------------------------------------------------------------------
    //执行取指指令二级地址翻译阶段时，pte.x=0
    goto_priv(PRIV_VS);
    80022172:	4509                	li	a0,2
    80022174:	cfbde0ef          	jal	80000e6e <goto_priv>
    vaddr = vs_page_base(VSRWX_GRW);
    TEST_SETUP_EXCEPT();
    80022178:	bfbde0ef          	jal	80000d72 <test_setup_except_function>
    TEST_EXEC_EXCEPT(vaddr); 
    8002217c:	400137b7          	lui	a5,0x40013
    80022180:	078a                	slli	a5,a5,0x2
    80022182:	00000297          	auipc	t0,0x0
    80022186:	00c28293          	addi	t0,t0,12 # 8002218e <mix_instruction_1+0x7b6>
    8002218a:	0254bc23          	sd	t0,56(s1)
    8002218e:	8782                	jr	a5

    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    80022190:	08200593          	li	a1,130
    80022194:	00011617          	auipc	a2,0x11
    80022198:	5dc60613          	addi	a2,a2,1500 # 80033770 <__func__.0+0x6750>
    8002219c:	0000b517          	auipc	a0,0xb
    800221a0:	17c50513          	addi	a0,a0,380 # 8002d318 <__func__.0+0x2f8>
    800221a4:	417080ef          	jal	8002adba <printf>
    800221a8:	0002f797          	auipc	a5,0x2f
    800221ac:	e697c783          	lbu	a5,-407(a5) # 80051011 <excpt+0x1>
    800221b0:	0000b597          	auipc	a1,0xb
    800221b4:	14058593          	addi	a1,a1,320 # 8002d2f0 <__func__.0+0x2d0>
    800221b8:	cf89                	beqz	a5,800221d2 <mix_instruction_1+0x7fa>
    800221ba:	6498                	ld	a4,8(s1)
    800221bc:	47d1                	li	a5,20
    800221be:	0000b597          	auipc	a1,0xb
    800221c2:	12258593          	addi	a1,a1,290 # 8002d2e0 <__func__.0+0x2c0>
    800221c6:	00f70663          	beq	a4,a5,800221d2 <mix_instruction_1+0x7fa>
    800221ca:	0000b597          	auipc	a1,0xb
    800221ce:	12658593          	addi	a1,a1,294 # 8002d2f0 <__func__.0+0x2d0>
    800221d2:	0000b517          	auipc	a0,0xb
    800221d6:	15e50513          	addi	a0,a0,350 # 8002d330 <__func__.0+0x310>
    800221da:	3e1080ef          	jal	8002adba <printf>
    800221de:	0002f797          	auipc	a5,0x2f
    800221e2:	e337c783          	lbu	a5,-461(a5) # 80051011 <excpt+0x1>
    800221e6:	c789                	beqz	a5,800221f0 <mix_instruction_1+0x818>
    800221e8:	6498                	ld	a4,8(s1)
    800221ea:	47d1                	li	a5,20
    800221ec:	00f70c63          	beq	a4,a5,80022204 <mix_instruction_1+0x82c>
    800221f0:	0000b517          	auipc	a0,0xb
    800221f4:	14850513          	addi	a0,a0,328 # 8002d338 <__func__.0+0x318>
    800221f8:	3c3080ef          	jal	8002adba <printf>
    800221fc:	02900513          	li	a0,41
    80022200:	0a9070ef          	jal	80029aa8 <putchar>
    80022204:	4529                	li	a0,10
    80022206:	0a3070ef          	jal	80029aa8 <putchar>
    8002220a:	c801                	beqz	s0,8002221a <mix_instruction_1+0x842>
    8002220c:	0002f797          	auipc	a5,0x2f
    80022210:	e057c783          	lbu	a5,-507(a5) # 80051011 <excpt+0x1>
    80022214:	4401                	li	s0,0
    80022216:	18079c63          	bnez	a5,800223ae <mix_instruction_1+0x9d6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_IGPF
    );
//----------------------------------------------------------------------
    TEST_SETUP_EXCEPT();
    8002221a:	b59de0ef          	jal	80000d72 <test_setup_except_function>
    
    
    goto_priv(PRIV_HS);     
    8002221e:	450d                	li	a0,3
    80022220:	c4fde0ef          	jal	80000e6e <goto_priv>
    uintptr_t vaddr_f = hs_page_base(VSRWX_GRWX) + 1;      
    uint64_t value = 0xdeadbeef;

    //load byte地址不会发生未对齐
    TEST_SETUP_EXCEPT();        
    80022224:	b4fde0ef          	jal	80000d72 <test_setup_except_function>
LOAD_INSTRUCTION(lb, "lb", uint8_t);
    80022228:	001007b7          	lui	a5,0x100
    8002222c:	04b78793          	addi	a5,a5,75 # 10004b <STACK_SIZE+0x4b>
    80022230:	07b2                	slli	a5,a5,0xc
    80022232:	0785                	addi	a5,a5,1
    80022234:	00078783          	lb	a5,0(a5)
    value = lb(vaddr_f);
    TEST_ASSERT("load byte address is not aligned successful",         
    80022238:	08200593          	li	a1,130
    8002223c:	0000e617          	auipc	a2,0xe
    80022240:	1ac60613          	addi	a2,a2,428 # 800303e8 <__func__.0+0x33c8>
    80022244:	0000b517          	auipc	a0,0xb
    80022248:	0d450513          	addi	a0,a0,212 # 8002d318 <__func__.0+0x2f8>
    8002224c:	36f080ef          	jal	8002adba <printf>
    80022250:	0002f797          	auipc	a5,0x2f
    80022254:	dc17c783          	lbu	a5,-575(a5) # 80051011 <excpt+0x1>
    80022258:	0000b597          	auipc	a1,0xb
    8002225c:	09858593          	addi	a1,a1,152 # 8002d2f0 <__func__.0+0x2d0>
    80022260:	e789                	bnez	a5,8002226a <mix_instruction_1+0x892>
    80022262:	0000b597          	auipc	a1,0xb
    80022266:	07e58593          	addi	a1,a1,126 # 8002d2e0 <__func__.0+0x2c0>
    8002226a:	0000b517          	auipc	a0,0xb
    8002226e:	0c650513          	addi	a0,a0,198 # 8002d330 <__func__.0+0x310>
    80022272:	349080ef          	jal	8002adba <printf>
    80022276:	0002f797          	auipc	a5,0x2f
    8002227a:	d9b7c783          	lbu	a5,-613(a5) # 80051011 <excpt+0x1>
    8002227e:	16079563          	bnez	a5,800223e8 <mix_instruction_1+0xa10>
    80022282:	4529                	li	a0,10
    80022284:	025070ef          	jal	80029aa8 <putchar>
    80022288:	c419                	beqz	s0,80022296 <mix_instruction_1+0x8be>
    8002228a:	0002f797          	auipc	a5,0x2f
    8002228e:	d877c783          	lbu	a5,-633(a5) # 80051011 <excpt+0x1>
    80022292:	0e078c63          	beqz	a5,8002238a <mix_instruction_1+0x9b2>
    80022296:	4401                	li	s0,0
        excpt.triggered == false
    );
//----------------------------------------------------------------------

    TEST_END();
    80022298:	0000b597          	auipc	a1,0xb
    8002229c:	05858593          	addi	a1,a1,88 # 8002d2f0 <__func__.0+0x2d0>
    800222a0:	0000b517          	auipc	a0,0xb
    800222a4:	0f850513          	addi	a0,a0,248 # 8002d398 <__func__.0+0x378>
    800222a8:	313080ef          	jal	8002adba <printf>
    800222ac:	4511                	li	a0,4
    800222ae:	bc1de0ef          	jal	80000e6e <goto_priv>
    800222b2:	cd8df0ef          	jal	8000178a <reset_state>

    800222b6:	70a2                	ld	ra,40(sp)
    800222b8:	8522                	mv	a0,s0
    800222ba:	7402                	ld	s0,32(sp)
    800222bc:	64e2                	ld	s1,24(sp)
    800222be:	6942                	ld	s2,16(sp)
    800222c0:	69a2                	ld	s3,8(sp)
    800222c2:	6145                	addi	sp,sp,48
    800222c4:	8082                	ret
    check_csr_rd("sip (vs perspective)", sip, 0x0);
    800222c6:	0000b597          	auipc	a1,0xb
    800222ca:	01a58593          	addi	a1,a1,26 # 8002d2e0 <__func__.0+0x2c0>
    800222ce:	0000b517          	auipc	a0,0xb
    800222d2:	06250513          	addi	a0,a0,98 # 8002d330 <__func__.0+0x310>
    800222d6:	2e5080ef          	jal	8002adba <printf>
    800222da:	4529                	li	a0,10
    800222dc:	7cc070ef          	jal	80029aa8 <putchar>
    800222e0:	b571                	j	8002216c <mix_instruction_1+0x794>
    check_csr_rd("vsip", CSR_VSIP, 0x0);
    800222e2:	0000b597          	auipc	a1,0xb
    800222e6:	ffe58593          	addi	a1,a1,-2 # 8002d2e0 <__func__.0+0x2c0>
    800222ea:	0000b517          	auipc	a0,0xb
    800222ee:	04650513          	addi	a0,a0,70 # 8002d330 <__func__.0+0x310>
    800222f2:	2c9080ef          	jal	8002adba <printf>
    800222f6:	4529                	li	a0,10
    800222f8:	7b0070ef          	jal	80029aa8 <putchar>
    800222fc:	b519                	j	80022102 <mix_instruction_1+0x72a>
    check_csr_rd("sip", sip, 0x0);
    800222fe:	0000b597          	auipc	a1,0xb
    80022302:	fe258593          	addi	a1,a1,-30 # 8002d2e0 <__func__.0+0x2c0>
    80022306:	0000b517          	auipc	a0,0xb
    8002230a:	02a50513          	addi	a0,a0,42 # 8002d330 <__func__.0+0x310>
    8002230e:	2ad080ef          	jal	8002adba <printf>
    80022312:	4529                	li	a0,10
    80022314:	794070ef          	jal	80029aa8 <putchar>
    80022318:	b359                	j	8002209e <mix_instruction_1+0x6c6>
    check_csr_rd("hip", CSR_HIP, 0x0);
    8002231a:	0000b597          	auipc	a1,0xb
    8002231e:	fc658593          	addi	a1,a1,-58 # 8002d2e0 <__func__.0+0x2c0>
    80022322:	0000b517          	auipc	a0,0xb
    80022326:	00e50513          	addi	a0,a0,14 # 8002d330 <__func__.0+0x310>
    8002232a:	291080ef          	jal	8002adba <printf>
    8002232e:	4529                	li	a0,10
    80022330:	778070ef          	jal	80029aa8 <putchar>
    80022334:	b319                	j	8002203a <mix_instruction_1+0x662>
    check_csr_rd("sip (vs perspective)", sip, 0x2);
    80022336:	0000b597          	auipc	a1,0xb
    8002233a:	faa58593          	addi	a1,a1,-86 # 8002d2e0 <__func__.0+0x2c0>
    8002233e:	0000b517          	auipc	a0,0xb
    80022342:	ff250513          	addi	a0,a0,-14 # 8002d330 <__func__.0+0x310>
    80022346:	275080ef          	jal	8002adba <printf>
    8002234a:	4529                	li	a0,10
    8002234c:	75c070ef          	jal	80029aa8 <putchar>
    80022350:	b9b5                	j	80021fcc <mix_instruction_1+0x5f4>
    check_csr_rd("vsip", CSR_VSIP, 0x2);
    80022352:	0000b597          	auipc	a1,0xb
    80022356:	f8e58593          	addi	a1,a1,-114 # 8002d2e0 <__func__.0+0x2c0>
    8002235a:	0000b517          	auipc	a0,0xb
    8002235e:	fd650513          	addi	a0,a0,-42 # 8002d330 <__func__.0+0x310>
    80022362:	259080ef          	jal	8002adba <printf>
    80022366:	4529                	li	a0,10
    80022368:	740070ef          	jal	80029aa8 <putchar>
    8002236c:	bed5                	j	80021f60 <mix_instruction_1+0x588>
    check_csr_rd("sip", sip, 0x222);    
    8002236e:	0000b597          	auipc	a1,0xb
    80022372:	f7258593          	addi	a1,a1,-142 # 8002d2e0 <__func__.0+0x2c0>
    80022376:	0000b517          	auipc	a0,0xb
    8002237a:	fba50513          	addi	a0,a0,-70 # 8002d330 <__func__.0+0x310>
    8002237e:	23d080ef          	jal	8002adba <printf>
    80022382:	4529                	li	a0,10
    80022384:	724070ef          	jal	80029aa8 <putchar>
    80022388:	be8d                	j	80021efa <mix_instruction_1+0x522>
    TEST_ASSERT("load byte address is not aligned successful",         
    8002238a:	4405                	li	s0,1
    TEST_END();
    8002238c:	0000b597          	auipc	a1,0xb
    80022390:	f5458593          	addi	a1,a1,-172 # 8002d2e0 <__func__.0+0x2c0>
    80022394:	b731                	j	800222a0 <mix_instruction_1+0x8c8>
    TEST_ASSERT("vu sret leads to virtual instruction exception when mstatus.TW=0",
    80022396:	6480                	ld	s0,8(s1)
    80022398:	1429                	addi	s0,s0,-22
    8002239a:	00143413          	seqz	s0,s0
    8002239e:	86fff06f          	j	80021c0c <mix_instruction_1+0x234>
    TEST_ASSERT("hs access to time casuses illegal instruction exception when mcounteren.tm=0",
    800223a2:	6480                	ld	s0,8(s1)
    800223a4:	1479                	addi	s0,s0,-2
    800223a6:	00143413          	seqz	s0,s0
    800223aa:	fb4ff06f          	j	80021b5e <mix_instruction_1+0x186>
    TEST_ASSERT("vs mode first fetche instruction when the second-stage address translation pte.x=0 leads to IGPF",
    800223ae:	6480                	ld	s0,8(s1)
    800223b0:	1431                	addi	s0,s0,-20
    800223b2:	00143413          	seqz	s0,s0
    800223b6:	b595                	j	8002221a <mix_instruction_1+0x842>
    TEST_ASSERT("hs hlvd to vu page leads to exception when spvp = 1",
    800223b8:	6480                	ld	s0,8(s1)
    800223ba:	144d                	addi	s0,s0,-13
    800223bc:	00143413          	seqz	s0,s0
    800223c0:	ba61                	j	80021d58 <mix_instruction_1+0x380>
    TEST_ASSERT("hs mode sd u mode page when mstatus.sum=0 leads to LPF",
    800223c2:	6480                	ld	s0,8(s1)
    800223c4:	1445                	addi	s0,s0,-15
    800223c6:	00143413          	seqz	s0,s0
    800223ca:	b499                	j	80021e10 <mix_instruction_1+0x438>
    check_csr_rd("hip", CSR_HIP, 0x4);
    800223cc:	0000b597          	auipc	a1,0xb
    800223d0:	f1458593          	addi	a1,a1,-236 # 8002d2e0 <__func__.0+0x2c0>
    800223d4:	0000b517          	auipc	a0,0xb
    800223d8:	f5c50513          	addi	a0,a0,-164 # 8002d330 <__func__.0+0x310>
    800223dc:	1df080ef          	jal	8002adba <printf>
    800223e0:	4529                	li	a0,10
    800223e2:	6c6070ef          	jal	80029aa8 <putchar>
    800223e6:	b475                	j	80021e92 <mix_instruction_1+0x4ba>
    TEST_ASSERT("load byte address is not aligned successful",         
    800223e8:	0000b517          	auipc	a0,0xb
    800223ec:	f5050513          	addi	a0,a0,-176 # 8002d338 <__func__.0+0x318>
    800223f0:	1cb080ef          	jal	8002adba <printf>
    800223f4:	02900513          	li	a0,41
    800223f8:	6b0070ef          	jal	80029aa8 <putchar>
    800223fc:	b559                	j	80022282 <mix_instruction_1+0x8aa>
    TEST_ASSERT("hs hlvd to vu page successful when spvp = 0",
    800223fe:	0000b517          	auipc	a0,0xb
    80022402:	f3a50513          	addi	a0,a0,-198 # 8002d338 <__func__.0+0x318>
    80022406:	1b5080ef          	jal	8002adba <printf>
    8002240a:	02900513          	li	a0,41
    8002240e:	69a070ef          	jal	80029aa8 <putchar>
    80022412:	887ff06f          	j	80021c98 <mix_instruction_1+0x2c0>

0000000080022416 <ebreak_tests_1>:
#include <rvh_test.h>
#include <page_tables.h>
#include <csrs.h> 

bool ebreak_tests_1() {
    80022416:	1101                	addi	sp,sp,-32

    TEST_START();
    80022418:	0000a597          	auipc	a1,0xa
    8002241c:	6b858593          	addi	a1,a1,1720 # 8002cad0 <__func__.4>
    80022420:	0000b517          	auipc	a0,0xb
    80022424:	ee050513          	addi	a0,a0,-288 # 8002d300 <__func__.0+0x2e0>
bool ebreak_tests_1() {
    80022428:	ec06                	sd	ra,24(sp)
    8002242a:	e822                	sd	s0,16(sp)
    8002242c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002242e:	18d080ef          	jal	8002adba <printf>
    80022432:	4529                	li	a0,10
    80022434:	674070ef          	jal	80029aa8 <putchar>

    //m模式下执行ebreak指令
    goto_priv(PRIV_M);
    80022438:	4511                	li	a0,4
    8002243a:	a35de0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002243e:	935de0ef          	jal	80000d72 <test_setup_except_function>
    asm volatile ("ebreak");
    80022442:	9002                	ebreak
    
    ebreak();

    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    80022444:	08200593          	li	a1,130
    80022448:	00013617          	auipc	a2,0x13
    8002244c:	4f060613          	addi	a2,a2,1264 # 80035938 <__func__.0+0x8918>
    80022450:	0000b517          	auipc	a0,0xb
    80022454:	ec850513          	addi	a0,a0,-312 # 8002d318 <__func__.0+0x2f8>
    80022458:	163080ef          	jal	8002adba <printf>
    8002245c:	0002f797          	auipc	a5,0x2f
    80022460:	bb57c783          	lbu	a5,-1099(a5) # 80051011 <excpt+0x1>
    80022464:	0002f497          	auipc	s1,0x2f
    80022468:	bac48493          	addi	s1,s1,-1108 # 80051010 <excpt>
    8002246c:	0000b597          	auipc	a1,0xb
    80022470:	e8458593          	addi	a1,a1,-380 # 8002d2f0 <__func__.0+0x2d0>
    80022474:	cf89                	beqz	a5,8002248e <ebreak_tests_1+0x78>
    80022476:	6498                	ld	a4,8(s1)
    80022478:	478d                	li	a5,3
    8002247a:	0000b597          	auipc	a1,0xb
    8002247e:	e6658593          	addi	a1,a1,-410 # 8002d2e0 <__func__.0+0x2c0>
    80022482:	00f70663          	beq	a4,a5,8002248e <ebreak_tests_1+0x78>
    80022486:	0000b597          	auipc	a1,0xb
    8002248a:	e6a58593          	addi	a1,a1,-406 # 8002d2f0 <__func__.0+0x2d0>
    8002248e:	0000b517          	auipc	a0,0xb
    80022492:	ea250513          	addi	a0,a0,-350 # 8002d330 <__func__.0+0x310>
    80022496:	125080ef          	jal	8002adba <printf>
    8002249a:	0002f797          	auipc	a5,0x2f
    8002249e:	b777c783          	lbu	a5,-1161(a5) # 80051011 <excpt+0x1>
    800224a2:	c789                	beqz	a5,800224ac <ebreak_tests_1+0x96>
    800224a4:	6498                	ld	a4,8(s1)
    800224a6:	478d                	li	a5,3
    800224a8:	00f70c63          	beq	a4,a5,800224c0 <ebreak_tests_1+0xaa>
    800224ac:	0000b517          	auipc	a0,0xb
    800224b0:	e8c50513          	addi	a0,a0,-372 # 8002d338 <__func__.0+0x318>
    800224b4:	107080ef          	jal	8002adba <printf>
    800224b8:	02900513          	li	a0,41
    800224bc:	5ec070ef          	jal	80029aa8 <putchar>
    800224c0:	4529                	li	a0,10
    800224c2:	5e6070ef          	jal	80029aa8 <putchar>
    800224c6:	0002f417          	auipc	s0,0x2f
    800224ca:	b4b44403          	lbu	s0,-1205(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800224ce:	0000b597          	auipc	a1,0xb
    800224d2:	e2258593          	addi	a1,a1,-478 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800224d6:	cc11                	beqz	s0,800224f2 <ebreak_tests_1+0xdc>
    800224d8:	6498                	ld	a4,8(s1)
    800224da:	478d                	li	a5,3
    TEST_END();
    800224dc:	0000b597          	auipc	a1,0xb
    800224e0:	e0458593          	addi	a1,a1,-508 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("m mode ebreak cause to Breakpoint",
    800224e4:	00f70763          	beq	a4,a5,800224f2 <ebreak_tests_1+0xdc>
    800224e8:	4401                	li	s0,0
    TEST_END();
    800224ea:	0000b597          	auipc	a1,0xb
    800224ee:	e0658593          	addi	a1,a1,-506 # 8002d2f0 <__func__.0+0x2d0>
    800224f2:	0000b517          	auipc	a0,0xb
    800224f6:	ea650513          	addi	a0,a0,-346 # 8002d398 <__func__.0+0x378>
    800224fa:	0c1080ef          	jal	8002adba <printf>
    800224fe:	4511                	li	a0,4
    80022500:	96fde0ef          	jal	80000e6e <goto_priv>
    80022504:	a86df0ef          	jal	8000178a <reset_state>

}
    80022508:	60e2                	ld	ra,24(sp)
    8002250a:	8522                	mv	a0,s0
    8002250c:	6442                	ld	s0,16(sp)
    8002250e:	64a2                	ld	s1,8(sp)
    80022510:	6105                	addi	sp,sp,32
    80022512:	8082                	ret

0000000080022514 <ebreak_tests_2>:

bool ebreak_tests_2() {
    80022514:	1101                	addi	sp,sp,-32

    TEST_START();
    80022516:	0000a597          	auipc	a1,0xa
    8002251a:	5ca58593          	addi	a1,a1,1482 # 8002cae0 <__func__.3>
    8002251e:	0000b517          	auipc	a0,0xb
    80022522:	de250513          	addi	a0,a0,-542 # 8002d300 <__func__.0+0x2e0>
bool ebreak_tests_2() {
    80022526:	ec06                	sd	ra,24(sp)
    80022528:	e822                	sd	s0,16(sp)
    8002252a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002252c:	08f080ef          	jal	8002adba <printf>
    80022530:	4529                	li	a0,10
    80022532:	576070ef          	jal	80029aa8 <putchar>

    //vs模式下执行ebreak指令
    goto_priv(PRIV_VS);
    80022536:	4509                	li	a0,2
    80022538:	937de0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002253c:	837de0ef          	jal	80000d72 <test_setup_except_function>
    80022540:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    80022542:	08200593          	li	a1,130
    80022546:	00013617          	auipc	a2,0x13
    8002254a:	41a60613          	addi	a2,a2,1050 # 80035960 <__func__.0+0x8940>
    8002254e:	0000b517          	auipc	a0,0xb
    80022552:	dca50513          	addi	a0,a0,-566 # 8002d318 <__func__.0+0x2f8>
    80022556:	065080ef          	jal	8002adba <printf>
    8002255a:	0002f797          	auipc	a5,0x2f
    8002255e:	ab77c783          	lbu	a5,-1353(a5) # 80051011 <excpt+0x1>
    80022562:	0002f497          	auipc	s1,0x2f
    80022566:	aae48493          	addi	s1,s1,-1362 # 80051010 <excpt>
    8002256a:	0000b597          	auipc	a1,0xb
    8002256e:	d8658593          	addi	a1,a1,-634 # 8002d2f0 <__func__.0+0x2d0>
    80022572:	cf89                	beqz	a5,8002258c <ebreak_tests_2+0x78>
    80022574:	6498                	ld	a4,8(s1)
    80022576:	478d                	li	a5,3
    80022578:	0000b597          	auipc	a1,0xb
    8002257c:	d6858593          	addi	a1,a1,-664 # 8002d2e0 <__func__.0+0x2c0>
    80022580:	00f70663          	beq	a4,a5,8002258c <ebreak_tests_2+0x78>
    80022584:	0000b597          	auipc	a1,0xb
    80022588:	d6c58593          	addi	a1,a1,-660 # 8002d2f0 <__func__.0+0x2d0>
    8002258c:	0000b517          	auipc	a0,0xb
    80022590:	da450513          	addi	a0,a0,-604 # 8002d330 <__func__.0+0x310>
    80022594:	027080ef          	jal	8002adba <printf>
    80022598:	0002f797          	auipc	a5,0x2f
    8002259c:	a797c783          	lbu	a5,-1415(a5) # 80051011 <excpt+0x1>
    800225a0:	c789                	beqz	a5,800225aa <ebreak_tests_2+0x96>
    800225a2:	6498                	ld	a4,8(s1)
    800225a4:	478d                	li	a5,3
    800225a6:	00f70c63          	beq	a4,a5,800225be <ebreak_tests_2+0xaa>
    800225aa:	0000b517          	auipc	a0,0xb
    800225ae:	d8e50513          	addi	a0,a0,-626 # 8002d338 <__func__.0+0x318>
    800225b2:	009080ef          	jal	8002adba <printf>
    800225b6:	02900513          	li	a0,41
    800225ba:	4ee070ef          	jal	80029aa8 <putchar>
    800225be:	4529                	li	a0,10
    800225c0:	4e8070ef          	jal	80029aa8 <putchar>
    800225c4:	0002f417          	auipc	s0,0x2f
    800225c8:	a4d44403          	lbu	s0,-1459(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800225cc:	0000b597          	auipc	a1,0xb
    800225d0:	d2458593          	addi	a1,a1,-732 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800225d4:	cc11                	beqz	s0,800225f0 <ebreak_tests_2+0xdc>
    800225d6:	6498                	ld	a4,8(s1)
    800225d8:	478d                	li	a5,3
    TEST_END();
    800225da:	0000b597          	auipc	a1,0xb
    800225de:	d0658593          	addi	a1,a1,-762 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode ebreak cause to Breakpoint",
    800225e2:	00f70763          	beq	a4,a5,800225f0 <ebreak_tests_2+0xdc>
    800225e6:	4401                	li	s0,0
    TEST_END();
    800225e8:	0000b597          	auipc	a1,0xb
    800225ec:	d0858593          	addi	a1,a1,-760 # 8002d2f0 <__func__.0+0x2d0>
    800225f0:	0000b517          	auipc	a0,0xb
    800225f4:	da850513          	addi	a0,a0,-600 # 8002d398 <__func__.0+0x378>
    800225f8:	7c2080ef          	jal	8002adba <printf>
    800225fc:	4511                	li	a0,4
    800225fe:	871de0ef          	jal	80000e6e <goto_priv>
    80022602:	988df0ef          	jal	8000178a <reset_state>

}
    80022606:	60e2                	ld	ra,24(sp)
    80022608:	8522                	mv	a0,s0
    8002260a:	6442                	ld	s0,16(sp)
    8002260c:	64a2                	ld	s1,8(sp)
    8002260e:	6105                	addi	sp,sp,32
    80022610:	8082                	ret

0000000080022612 <ebreak_tests_3>:

bool ebreak_tests_3() {
    80022612:	1101                	addi	sp,sp,-32

    TEST_START();
    80022614:	0000a597          	auipc	a1,0xa
    80022618:	4dc58593          	addi	a1,a1,1244 # 8002caf0 <__func__.2>
    8002261c:	0000b517          	auipc	a0,0xb
    80022620:	ce450513          	addi	a0,a0,-796 # 8002d300 <__func__.0+0x2e0>
bool ebreak_tests_3() {
    80022624:	ec06                	sd	ra,24(sp)
    80022626:	e822                	sd	s0,16(sp)
    80022628:	e426                	sd	s1,8(sp)
    TEST_START();
    8002262a:	790080ef          	jal	8002adba <printf>
    8002262e:	4529                	li	a0,10
    80022630:	478070ef          	jal	80029aa8 <putchar>

    //HS模式下执行ebreak指令
    goto_priv(PRIV_HS);
    80022634:	450d                	li	a0,3
    80022636:	839de0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002263a:	f38de0ef          	jal	80000d72 <test_setup_except_function>
    8002263e:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    80022640:	08200593          	li	a1,130
    80022644:	00013617          	auipc	a2,0x13
    80022648:	34460613          	addi	a2,a2,836 # 80035988 <__func__.0+0x8968>
    8002264c:	0000b517          	auipc	a0,0xb
    80022650:	ccc50513          	addi	a0,a0,-820 # 8002d318 <__func__.0+0x2f8>
    80022654:	766080ef          	jal	8002adba <printf>
    80022658:	0002f797          	auipc	a5,0x2f
    8002265c:	9b97c783          	lbu	a5,-1607(a5) # 80051011 <excpt+0x1>
    80022660:	0002f497          	auipc	s1,0x2f
    80022664:	9b048493          	addi	s1,s1,-1616 # 80051010 <excpt>
    80022668:	0000b597          	auipc	a1,0xb
    8002266c:	c8858593          	addi	a1,a1,-888 # 8002d2f0 <__func__.0+0x2d0>
    80022670:	cf89                	beqz	a5,8002268a <ebreak_tests_3+0x78>
    80022672:	6498                	ld	a4,8(s1)
    80022674:	478d                	li	a5,3
    80022676:	0000b597          	auipc	a1,0xb
    8002267a:	c6a58593          	addi	a1,a1,-918 # 8002d2e0 <__func__.0+0x2c0>
    8002267e:	00f70663          	beq	a4,a5,8002268a <ebreak_tests_3+0x78>
    80022682:	0000b597          	auipc	a1,0xb
    80022686:	c6e58593          	addi	a1,a1,-914 # 8002d2f0 <__func__.0+0x2d0>
    8002268a:	0000b517          	auipc	a0,0xb
    8002268e:	ca650513          	addi	a0,a0,-858 # 8002d330 <__func__.0+0x310>
    80022692:	728080ef          	jal	8002adba <printf>
    80022696:	0002f797          	auipc	a5,0x2f
    8002269a:	97b7c783          	lbu	a5,-1669(a5) # 80051011 <excpt+0x1>
    8002269e:	c789                	beqz	a5,800226a8 <ebreak_tests_3+0x96>
    800226a0:	6498                	ld	a4,8(s1)
    800226a2:	478d                	li	a5,3
    800226a4:	00f70c63          	beq	a4,a5,800226bc <ebreak_tests_3+0xaa>
    800226a8:	0000b517          	auipc	a0,0xb
    800226ac:	c9050513          	addi	a0,a0,-880 # 8002d338 <__func__.0+0x318>
    800226b0:	70a080ef          	jal	8002adba <printf>
    800226b4:	02900513          	li	a0,41
    800226b8:	3f0070ef          	jal	80029aa8 <putchar>
    800226bc:	4529                	li	a0,10
    800226be:	3ea070ef          	jal	80029aa8 <putchar>
    800226c2:	0002f417          	auipc	s0,0x2f
    800226c6:	94f44403          	lbu	s0,-1713(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800226ca:	0000b597          	auipc	a1,0xb
    800226ce:	c2658593          	addi	a1,a1,-986 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800226d2:	cc11                	beqz	s0,800226ee <ebreak_tests_3+0xdc>
    800226d4:	6498                	ld	a4,8(s1)
    800226d6:	478d                	li	a5,3
    TEST_END();
    800226d8:	0000b597          	auipc	a1,0xb
    800226dc:	c0858593          	addi	a1,a1,-1016 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode ebreak cause to Breakpoint",
    800226e0:	00f70763          	beq	a4,a5,800226ee <ebreak_tests_3+0xdc>
    800226e4:	4401                	li	s0,0
    TEST_END();
    800226e6:	0000b597          	auipc	a1,0xb
    800226ea:	c0a58593          	addi	a1,a1,-1014 # 8002d2f0 <__func__.0+0x2d0>
    800226ee:	0000b517          	auipc	a0,0xb
    800226f2:	caa50513          	addi	a0,a0,-854 # 8002d398 <__func__.0+0x378>
    800226f6:	6c4080ef          	jal	8002adba <printf>
    800226fa:	4511                	li	a0,4
    800226fc:	f72de0ef          	jal	80000e6e <goto_priv>
    80022700:	88adf0ef          	jal	8000178a <reset_state>

}
    80022704:	60e2                	ld	ra,24(sp)
    80022706:	8522                	mv	a0,s0
    80022708:	6442                	ld	s0,16(sp)
    8002270a:	64a2                	ld	s1,8(sp)
    8002270c:	6105                	addi	sp,sp,32
    8002270e:	8082                	ret

0000000080022710 <ebreak_tests_4>:

bool ebreak_tests_4() {
    80022710:	1101                	addi	sp,sp,-32

    TEST_START();
    80022712:	0000a597          	auipc	a1,0xa
    80022716:	3ee58593          	addi	a1,a1,1006 # 8002cb00 <__func__.1>
    8002271a:	0000b517          	auipc	a0,0xb
    8002271e:	be650513          	addi	a0,a0,-1050 # 8002d300 <__func__.0+0x2e0>
bool ebreak_tests_4() {
    80022722:	ec06                	sd	ra,24(sp)
    80022724:	e822                	sd	s0,16(sp)
    80022726:	e426                	sd	s1,8(sp)
    TEST_START();
    80022728:	692080ef          	jal	8002adba <printf>
    8002272c:	4529                	li	a0,10
    8002272e:	37a070ef          	jal	80029aa8 <putchar>

    //HU模式下执行ebreak指令
    goto_priv(PRIV_HU);
    80022732:	4505                	li	a0,1
    80022734:	f3ade0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80022738:	e3ade0ef          	jal	80000d72 <test_setup_except_function>
    8002273c:	9002                	ebreak

    ebreak();

    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    8002273e:	08200593          	li	a1,130
    80022742:	00013617          	auipc	a2,0x13
    80022746:	26e60613          	addi	a2,a2,622 # 800359b0 <__func__.0+0x8990>
    8002274a:	0000b517          	auipc	a0,0xb
    8002274e:	bce50513          	addi	a0,a0,-1074 # 8002d318 <__func__.0+0x2f8>
    80022752:	668080ef          	jal	8002adba <printf>
    80022756:	0002f797          	auipc	a5,0x2f
    8002275a:	8bb7c783          	lbu	a5,-1861(a5) # 80051011 <excpt+0x1>
    8002275e:	0002f497          	auipc	s1,0x2f
    80022762:	8b248493          	addi	s1,s1,-1870 # 80051010 <excpt>
    80022766:	0000b597          	auipc	a1,0xb
    8002276a:	b8a58593          	addi	a1,a1,-1142 # 8002d2f0 <__func__.0+0x2d0>
    8002276e:	cf89                	beqz	a5,80022788 <ebreak_tests_4+0x78>
    80022770:	6498                	ld	a4,8(s1)
    80022772:	478d                	li	a5,3
    80022774:	0000b597          	auipc	a1,0xb
    80022778:	b6c58593          	addi	a1,a1,-1172 # 8002d2e0 <__func__.0+0x2c0>
    8002277c:	00f70663          	beq	a4,a5,80022788 <ebreak_tests_4+0x78>
    80022780:	0000b597          	auipc	a1,0xb
    80022784:	b7058593          	addi	a1,a1,-1168 # 8002d2f0 <__func__.0+0x2d0>
    80022788:	0000b517          	auipc	a0,0xb
    8002278c:	ba850513          	addi	a0,a0,-1112 # 8002d330 <__func__.0+0x310>
    80022790:	62a080ef          	jal	8002adba <printf>
    80022794:	0002f797          	auipc	a5,0x2f
    80022798:	87d7c783          	lbu	a5,-1923(a5) # 80051011 <excpt+0x1>
    8002279c:	c789                	beqz	a5,800227a6 <ebreak_tests_4+0x96>
    8002279e:	6498                	ld	a4,8(s1)
    800227a0:	478d                	li	a5,3
    800227a2:	00f70c63          	beq	a4,a5,800227ba <ebreak_tests_4+0xaa>
    800227a6:	0000b517          	auipc	a0,0xb
    800227aa:	b9250513          	addi	a0,a0,-1134 # 8002d338 <__func__.0+0x318>
    800227ae:	60c080ef          	jal	8002adba <printf>
    800227b2:	02900513          	li	a0,41
    800227b6:	2f2070ef          	jal	80029aa8 <putchar>
    800227ba:	4529                	li	a0,10
    800227bc:	2ec070ef          	jal	80029aa8 <putchar>
    800227c0:	0002f417          	auipc	s0,0x2f
    800227c4:	85144403          	lbu	s0,-1967(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800227c8:	0000b597          	auipc	a1,0xb
    800227cc:	b2858593          	addi	a1,a1,-1240 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800227d0:	cc11                	beqz	s0,800227ec <ebreak_tests_4+0xdc>
    800227d2:	6498                	ld	a4,8(s1)
    800227d4:	478d                	li	a5,3
    TEST_END();
    800227d6:	0000b597          	auipc	a1,0xb
    800227da:	b0a58593          	addi	a1,a1,-1270 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hu mode ebreak cause to Breakpoint",
    800227de:	00f70763          	beq	a4,a5,800227ec <ebreak_tests_4+0xdc>
    800227e2:	4401                	li	s0,0
    TEST_END();
    800227e4:	0000b597          	auipc	a1,0xb
    800227e8:	b0c58593          	addi	a1,a1,-1268 # 8002d2f0 <__func__.0+0x2d0>
    800227ec:	0000b517          	auipc	a0,0xb
    800227f0:	bac50513          	addi	a0,a0,-1108 # 8002d398 <__func__.0+0x378>
    800227f4:	5c6080ef          	jal	8002adba <printf>
    800227f8:	4511                	li	a0,4
    800227fa:	e74de0ef          	jal	80000e6e <goto_priv>
    800227fe:	f8dde0ef          	jal	8000178a <reset_state>

}
    80022802:	60e2                	ld	ra,24(sp)
    80022804:	8522                	mv	a0,s0
    80022806:	6442                	ld	s0,16(sp)
    80022808:	64a2                	ld	s1,8(sp)
    8002280a:	6105                	addi	sp,sp,32
    8002280c:	8082                	ret

000000008002280e <ebreak_tests_5>:

bool ebreak_tests_5() {
    8002280e:	1101                	addi	sp,sp,-32

    TEST_START();
    80022810:	0000a597          	auipc	a1,0xa
    80022814:	30058593          	addi	a1,a1,768 # 8002cb10 <__func__.0>
    80022818:	0000b517          	auipc	a0,0xb
    8002281c:	ae850513          	addi	a0,a0,-1304 # 8002d300 <__func__.0+0x2e0>
bool ebreak_tests_5() {
    80022820:	ec06                	sd	ra,24(sp)
    80022822:	e822                	sd	s0,16(sp)
    80022824:	e426                	sd	s1,8(sp)
    TEST_START();
    80022826:	594080ef          	jal	8002adba <printf>
    8002282a:	4529                	li	a0,10
    8002282c:	27c070ef          	jal	80029aa8 <putchar>

    //VU模式下执行ebreak指令
    goto_priv(PRIV_VU);
    80022830:	4501                	li	a0,0
    80022832:	e3cde0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80022836:	d3cde0ef          	jal	80000d72 <test_setup_except_function>
    8002283a:	9002                	ebreak

    ebreak();

    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    8002283c:	08200593          	li	a1,130
    80022840:	00013617          	auipc	a2,0x13
    80022844:	19860613          	addi	a2,a2,408 # 800359d8 <__func__.0+0x89b8>
    80022848:	0000b517          	auipc	a0,0xb
    8002284c:	ad050513          	addi	a0,a0,-1328 # 8002d318 <__func__.0+0x2f8>
    80022850:	56a080ef          	jal	8002adba <printf>
    80022854:	0002e797          	auipc	a5,0x2e
    80022858:	7bd7c783          	lbu	a5,1981(a5) # 80051011 <excpt+0x1>
    8002285c:	0002e497          	auipc	s1,0x2e
    80022860:	7b448493          	addi	s1,s1,1972 # 80051010 <excpt>
    80022864:	0000b597          	auipc	a1,0xb
    80022868:	a8c58593          	addi	a1,a1,-1396 # 8002d2f0 <__func__.0+0x2d0>
    8002286c:	cf89                	beqz	a5,80022886 <ebreak_tests_5+0x78>
    8002286e:	6498                	ld	a4,8(s1)
    80022870:	478d                	li	a5,3
    80022872:	0000b597          	auipc	a1,0xb
    80022876:	a6e58593          	addi	a1,a1,-1426 # 8002d2e0 <__func__.0+0x2c0>
    8002287a:	00f70663          	beq	a4,a5,80022886 <ebreak_tests_5+0x78>
    8002287e:	0000b597          	auipc	a1,0xb
    80022882:	a7258593          	addi	a1,a1,-1422 # 8002d2f0 <__func__.0+0x2d0>
    80022886:	0000b517          	auipc	a0,0xb
    8002288a:	aaa50513          	addi	a0,a0,-1366 # 8002d330 <__func__.0+0x310>
    8002288e:	52c080ef          	jal	8002adba <printf>
    80022892:	0002e797          	auipc	a5,0x2e
    80022896:	77f7c783          	lbu	a5,1919(a5) # 80051011 <excpt+0x1>
    8002289a:	c789                	beqz	a5,800228a4 <ebreak_tests_5+0x96>
    8002289c:	6498                	ld	a4,8(s1)
    8002289e:	478d                	li	a5,3
    800228a0:	00f70c63          	beq	a4,a5,800228b8 <ebreak_tests_5+0xaa>
    800228a4:	0000b517          	auipc	a0,0xb
    800228a8:	a9450513          	addi	a0,a0,-1388 # 8002d338 <__func__.0+0x318>
    800228ac:	50e080ef          	jal	8002adba <printf>
    800228b0:	02900513          	li	a0,41
    800228b4:	1f4070ef          	jal	80029aa8 <putchar>
    800228b8:	4529                	li	a0,10
    800228ba:	1ee070ef          	jal	80029aa8 <putchar>
    800228be:	0002e417          	auipc	s0,0x2e
    800228c2:	75344403          	lbu	s0,1875(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_BKP
    ); 

    TEST_END();
    800228c6:	0000b597          	auipc	a1,0xb
    800228ca:	a2a58593          	addi	a1,a1,-1494 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    800228ce:	cc11                	beqz	s0,800228ea <ebreak_tests_5+0xdc>
    800228d0:	6498                	ld	a4,8(s1)
    800228d2:	478d                	li	a5,3
    TEST_END();
    800228d4:	0000b597          	auipc	a1,0xb
    800228d8:	a0c58593          	addi	a1,a1,-1524 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vu mode ebreak cause to Breakpoint",
    800228dc:	00f70763          	beq	a4,a5,800228ea <ebreak_tests_5+0xdc>
    800228e0:	4401                	li	s0,0
    TEST_END();
    800228e2:	0000b597          	auipc	a1,0xb
    800228e6:	a0e58593          	addi	a1,a1,-1522 # 8002d2f0 <__func__.0+0x2d0>
    800228ea:	0000b517          	auipc	a0,0xb
    800228ee:	aae50513          	addi	a0,a0,-1362 # 8002d398 <__func__.0+0x378>
    800228f2:	4c8080ef          	jal	8002adba <printf>
    800228f6:	4511                	li	a0,4
    800228f8:	d76de0ef          	jal	80000e6e <goto_priv>
    800228fc:	e8fde0ef          	jal	8000178a <reset_state>

    80022900:	60e2                	ld	ra,24(sp)
    80022902:	8522                	mv	a0,s0
    80022904:	6442                	ld	s0,16(sp)
    80022906:	64a2                	ld	s1,8(sp)
    80022908:	6105                	addi	sp,sp,32
    8002290a:	8082                	ret

000000008002290c <stateen_C_test_1>:
#include <rvh_test.h>


bool stateen_C_test_1(){
    8002290c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002290e:	0000a597          	auipc	a1,0xa
    80022912:	21258593          	addi	a1,a1,530 # 8002cb20 <__func__.36>
    80022916:	0000b517          	auipc	a0,0xb
    8002291a:	9ea50513          	addi	a0,a0,-1558 # 8002d300 <__func__.0+0x2e0>
bool stateen_C_test_1(){
    8002291e:	ec06                	sd	ra,24(sp)
    80022920:	e822                	sd	s0,16(sp)
    80022922:	e426                	sd	s1,8(sp)
    TEST_START();
    80022924:	496080ef          	jal	8002adba <printf>
    80022928:	4529                	li	a0,10
    8002292a:	17e070ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    8002292e:	4511                	li	a0,4
    80022930:	d3ede0ef          	jal	80000e6e <goto_priv>
    //当mstateen.C=0,hu mode 不可访问自定义寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022934:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HU);
    80022938:	4505                	li	a0,1
    8002293a:	d34de0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002293e:	c34de0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C2);
    80022942:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    80022946:	e6ede0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    8002294a:	08200593          	li	a1,130
    8002294e:	00013617          	auipc	a2,0x13
    80022952:	0b260613          	addi	a2,a2,178 # 80035a00 <__func__.0+0x89e0>
    80022956:	0000b517          	auipc	a0,0xb
    8002295a:	9c250513          	addi	a0,a0,-1598 # 8002d318 <__func__.0+0x2f8>
    8002295e:	45c080ef          	jal	8002adba <printf>
    80022962:	0002e797          	auipc	a5,0x2e
    80022966:	6af7c783          	lbu	a5,1711(a5) # 80051011 <excpt+0x1>
    8002296a:	0002e497          	auipc	s1,0x2e
    8002296e:	6a648493          	addi	s1,s1,1702 # 80051010 <excpt>
    80022972:	0000b597          	auipc	a1,0xb
    80022976:	97e58593          	addi	a1,a1,-1666 # 8002d2f0 <__func__.0+0x2d0>
    8002297a:	cf89                	beqz	a5,80022994 <stateen_C_test_1+0x88>
    8002297c:	6498                	ld	a4,8(s1)
    8002297e:	4789                	li	a5,2
    80022980:	0000b597          	auipc	a1,0xb
    80022984:	96058593          	addi	a1,a1,-1696 # 8002d2e0 <__func__.0+0x2c0>
    80022988:	00f70663          	beq	a4,a5,80022994 <stateen_C_test_1+0x88>
    8002298c:	0000b597          	auipc	a1,0xb
    80022990:	96458593          	addi	a1,a1,-1692 # 8002d2f0 <__func__.0+0x2d0>
    80022994:	0000b517          	auipc	a0,0xb
    80022998:	99c50513          	addi	a0,a0,-1636 # 8002d330 <__func__.0+0x310>
    8002299c:	41e080ef          	jal	8002adba <printf>
    800229a0:	0002e797          	auipc	a5,0x2e
    800229a4:	6717c783          	lbu	a5,1649(a5) # 80051011 <excpt+0x1>
    800229a8:	c789                	beqz	a5,800229b2 <stateen_C_test_1+0xa6>
    800229aa:	6498                	ld	a4,8(s1)
    800229ac:	4789                	li	a5,2
    800229ae:	00f70c63          	beq	a4,a5,800229c6 <stateen_C_test_1+0xba>
    800229b2:	0000b517          	auipc	a0,0xb
    800229b6:	98650513          	addi	a0,a0,-1658 # 8002d338 <__func__.0+0x318>
    800229ba:	400080ef          	jal	8002adba <printf>
    800229be:	02900513          	li	a0,41
    800229c2:	0e6070ef          	jal	80029aa8 <putchar>
    800229c6:	4529                	li	a0,10
    800229c8:	0e0070ef          	jal	80029aa8 <putchar>
    800229cc:	0002e417          	auipc	s0,0x2e
    800229d0:	64544403          	lbu	s0,1605(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    800229d4:	0000b597          	auipc	a1,0xb
    800229d8:	91c58593          	addi	a1,a1,-1764 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    800229dc:	cc11                	beqz	s0,800229f8 <stateen_C_test_1+0xec>
    800229de:	6498                	ld	a4,8(s1)
    800229e0:	4789                	li	a5,2
    TEST_END();
    800229e2:	0000b597          	auipc	a1,0xb
    800229e6:	8fe58593          	addi	a1,a1,-1794 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss Custom register cause to illegal except when mstateen.c=0",
    800229ea:	00f70763          	beq	a4,a5,800229f8 <stateen_C_test_1+0xec>
    800229ee:	4401                	li	s0,0
    TEST_END();
    800229f0:	0000b597          	auipc	a1,0xb
    800229f4:	90058593          	addi	a1,a1,-1792 # 8002d2f0 <__func__.0+0x2d0>
    800229f8:	0000b517          	auipc	a0,0xb
    800229fc:	9a050513          	addi	a0,a0,-1632 # 8002d398 <__func__.0+0x378>
    80022a00:	3ba080ef          	jal	8002adba <printf>
    80022a04:	4511                	li	a0,4
    80022a06:	c68de0ef          	jal	80000e6e <goto_priv>
    80022a0a:	d81de0ef          	jal	8000178a <reset_state>

}
    80022a0e:	60e2                	ld	ra,24(sp)
    80022a10:	8522                	mv	a0,s0
    80022a12:	6442                	ld	s0,16(sp)
    80022a14:	64a2                	ld	s1,8(sp)
    80022a16:	6105                	addi	sp,sp,32
    80022a18:	8082                	ret

0000000080022a1a <stateen_C_test_2>:

bool stateen_C_test_2(){
    80022a1a:	1101                	addi	sp,sp,-32

    TEST_START();
    80022a1c:	0000a597          	auipc	a1,0xa
    80022a20:	11c58593          	addi	a1,a1,284 # 8002cb38 <__func__.35>
    80022a24:	0000b517          	auipc	a0,0xb
    80022a28:	8dc50513          	addi	a0,a0,-1828 # 8002d300 <__func__.0+0x2e0>
bool stateen_C_test_2(){
    80022a2c:	ec06                	sd	ra,24(sp)
    80022a2e:	e822                	sd	s0,16(sp)
    80022a30:	e426                	sd	s1,8(sp)
    TEST_START();
    80022a32:	388080ef          	jal	8002adba <printf>
    80022a36:	4529                	li	a0,10
    80022a38:	070070ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80022a3c:	4511                	li	a0,4
    80022a3e:	c30de0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022a42:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022a46:	60c0f073          	csrci	hstateen0,1

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器
    goto_priv(PRIV_VU);
    80022a4a:	4501                	li	a0,0
    80022a4c:	c22de0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80022a50:	b22de0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C3);
    80022a54:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    80022a58:	d5cde0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022a5c:	08200593          	li	a1,130
    80022a60:	00013617          	auipc	a2,0x13
    80022a64:	ff060613          	addi	a2,a2,-16 # 80035a50 <__func__.0+0x8a30>
    80022a68:	0000b517          	auipc	a0,0xb
    80022a6c:	8b050513          	addi	a0,a0,-1872 # 8002d318 <__func__.0+0x2f8>
    80022a70:	34a080ef          	jal	8002adba <printf>
    80022a74:	0002e797          	auipc	a5,0x2e
    80022a78:	59d7c783          	lbu	a5,1437(a5) # 80051011 <excpt+0x1>
    80022a7c:	0002e497          	auipc	s1,0x2e
    80022a80:	59448493          	addi	s1,s1,1428 # 80051010 <excpt>
    80022a84:	0000b597          	auipc	a1,0xb
    80022a88:	86c58593          	addi	a1,a1,-1940 # 8002d2f0 <__func__.0+0x2d0>
    80022a8c:	cf89                	beqz	a5,80022aa6 <stateen_C_test_2+0x8c>
    80022a8e:	6498                	ld	a4,8(s1)
    80022a90:	47d9                	li	a5,22
    80022a92:	0000b597          	auipc	a1,0xb
    80022a96:	84e58593          	addi	a1,a1,-1970 # 8002d2e0 <__func__.0+0x2c0>
    80022a9a:	00f70663          	beq	a4,a5,80022aa6 <stateen_C_test_2+0x8c>
    80022a9e:	0000b597          	auipc	a1,0xb
    80022aa2:	85258593          	addi	a1,a1,-1966 # 8002d2f0 <__func__.0+0x2d0>
    80022aa6:	0000b517          	auipc	a0,0xb
    80022aaa:	88a50513          	addi	a0,a0,-1910 # 8002d330 <__func__.0+0x310>
    80022aae:	30c080ef          	jal	8002adba <printf>
    80022ab2:	0002e797          	auipc	a5,0x2e
    80022ab6:	55f7c783          	lbu	a5,1375(a5) # 80051011 <excpt+0x1>
    80022aba:	c789                	beqz	a5,80022ac4 <stateen_C_test_2+0xaa>
    80022abc:	6498                	ld	a4,8(s1)
    80022abe:	47d9                	li	a5,22
    80022ac0:	00f70c63          	beq	a4,a5,80022ad8 <stateen_C_test_2+0xbe>
    80022ac4:	0000b517          	auipc	a0,0xb
    80022ac8:	87450513          	addi	a0,a0,-1932 # 8002d338 <__func__.0+0x318>
    80022acc:	2ee080ef          	jal	8002adba <printf>
    80022ad0:	02900513          	li	a0,41
    80022ad4:	7d5060ef          	jal	80029aa8 <putchar>
    80022ad8:	4529                	li	a0,10
    80022ada:	7cf060ef          	jal	80029aa8 <putchar>
    80022ade:	0002e417          	auipc	s0,0x2e
    80022ae2:	53344403          	lbu	s0,1331(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80022ae6:	0000b597          	auipc	a1,0xb
    80022aea:	80a58593          	addi	a1,a1,-2038 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022aee:	cc11                	beqz	s0,80022b0a <stateen_C_test_2+0xf0>
    80022af0:	6498                	ld	a4,8(s1)
    80022af2:	47d9                	li	a5,22
    TEST_END();
    80022af4:	0000a597          	auipc	a1,0xa
    80022af8:	7ec58593          	addi	a1,a1,2028 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022afc:	00f70763          	beq	a4,a5,80022b0a <stateen_C_test_2+0xf0>
    80022b00:	4401                	li	s0,0
    TEST_END();
    80022b02:	0000a597          	auipc	a1,0xa
    80022b06:	7ee58593          	addi	a1,a1,2030 # 8002d2f0 <__func__.0+0x2d0>
    80022b0a:	0000b517          	auipc	a0,0xb
    80022b0e:	88e50513          	addi	a0,a0,-1906 # 8002d398 <__func__.0+0x378>
    80022b12:	2a8080ef          	jal	8002adba <printf>
    80022b16:	4511                	li	a0,4
    80022b18:	b56de0ef          	jal	80000e6e <goto_priv>
    80022b1c:	c6fde0ef          	jal	8000178a <reset_state>

}
    80022b20:	60e2                	ld	ra,24(sp)
    80022b22:	8522                	mv	a0,s0
    80022b24:	6442                	ld	s0,16(sp)
    80022b26:	64a2                	ld	s1,8(sp)
    80022b28:	6105                	addi	sp,sp,32
    80022b2a:	8082                	ret

0000000080022b2c <stateen_C_test_3>:

bool stateen_C_test_3(){
    80022b2c:	1141                	addi	sp,sp,-16

    //当mstateen.C=0,m mode 可访问自定义寄存器

    TEST_START();
    80022b2e:	0000a597          	auipc	a1,0xa
    80022b32:	02258593          	addi	a1,a1,34 # 8002cb50 <__func__.34>
    80022b36:	0000a517          	auipc	a0,0xa
    80022b3a:	7ca50513          	addi	a0,a0,1994 # 8002d300 <__func__.0+0x2e0>
bool stateen_C_test_3(){
    80022b3e:	e406                	sd	ra,8(sp)
    80022b40:	e022                	sd	s0,0(sp)
    TEST_START();
    80022b42:	278080ef          	jal	8002adba <printf>
    80022b46:	4529                	li	a0,10
    80022b48:	761060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80022b4c:	4511                	li	a0,4
    80022b4e:	b20de0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022b52:	30c0f073          	csrci	mstateen0,1
    goto_priv(PRIV_M);
    80022b56:	4511                	li	a0,4
    80022b58:	b16de0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80022b5c:	a16de0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C1);
    80022b60:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    80022b64:	c50de0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022b68:	08200593          	li	a1,130
    80022b6c:	00013617          	auipc	a2,0x13
    80022b70:	f3460613          	addi	a2,a2,-204 # 80035aa0 <__func__.0+0x8a80>
    80022b74:	0000a517          	auipc	a0,0xa
    80022b78:	7a450513          	addi	a0,a0,1956 # 8002d318 <__func__.0+0x2f8>
    80022b7c:	23e080ef          	jal	8002adba <printf>
    80022b80:	0002e797          	auipc	a5,0x2e
    80022b84:	4917c783          	lbu	a5,1169(a5) # 80051011 <excpt+0x1>
    80022b88:	0000a597          	auipc	a1,0xa
    80022b8c:	75858593          	addi	a1,a1,1880 # 8002d2e0 <__func__.0+0x2c0>
    80022b90:	c789                	beqz	a5,80022b9a <stateen_C_test_3+0x6e>
    80022b92:	0000a597          	auipc	a1,0xa
    80022b96:	75e58593          	addi	a1,a1,1886 # 8002d2f0 <__func__.0+0x2d0>
    80022b9a:	0000a517          	auipc	a0,0xa
    80022b9e:	79650513          	addi	a0,a0,1942 # 8002d330 <__func__.0+0x310>
    80022ba2:	218080ef          	jal	8002adba <printf>
    80022ba6:	0002e797          	auipc	a5,0x2e
    80022baa:	46b7c783          	lbu	a5,1131(a5) # 80051011 <excpt+0x1>
    80022bae:	e7a1                	bnez	a5,80022bf6 <stateen_C_test_3+0xca>
    80022bb0:	4529                	li	a0,10
    80022bb2:	6f7060ef          	jal	80029aa8 <putchar>
    80022bb6:	0002e797          	auipc	a5,0x2e
    80022bba:	45b7c783          	lbu	a5,1115(a5) # 80051011 <excpt+0x1>
    80022bbe:	e795                	bnez	a5,80022bea <stateen_C_test_3+0xbe>
    80022bc0:	4405                	li	s0,1
        excpt.triggered == false
    ); 

    TEST_END();
    80022bc2:	0000a597          	auipc	a1,0xa
    80022bc6:	71e58593          	addi	a1,a1,1822 # 8002d2e0 <__func__.0+0x2c0>
    80022bca:	0000a517          	auipc	a0,0xa
    80022bce:	7ce50513          	addi	a0,a0,1998 # 8002d398 <__func__.0+0x378>
    80022bd2:	1e8080ef          	jal	8002adba <printf>
    80022bd6:	4511                	li	a0,4
    80022bd8:	a96de0ef          	jal	80000e6e <goto_priv>
    80022bdc:	bafde0ef          	jal	8000178a <reset_state>

}
    80022be0:	60a2                	ld	ra,8(sp)
    80022be2:	8522                	mv	a0,s0
    80022be4:	6402                	ld	s0,0(sp)
    80022be6:	0141                	addi	sp,sp,16
    80022be8:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022bea:	4401                	li	s0,0
    TEST_END();
    80022bec:	0000a597          	auipc	a1,0xa
    80022bf0:	70458593          	addi	a1,a1,1796 # 8002d2f0 <__func__.0+0x2d0>
    80022bf4:	bfd9                	j	80022bca <stateen_C_test_3+0x9e>
    TEST_ASSERT("m mode accesss Custom register success  when mstateen.c=0",
    80022bf6:	0000a517          	auipc	a0,0xa
    80022bfa:	74250513          	addi	a0,a0,1858 # 8002d338 <__func__.0+0x318>
    80022bfe:	1bc080ef          	jal	8002adba <printf>
    80022c02:	02900513          	li	a0,41
    80022c06:	6a3060ef          	jal	80029aa8 <putchar>
    80022c0a:	b75d                	j	80022bb0 <stateen_C_test_3+0x84>

0000000080022c0c <stateen_C_test_4>:

bool stateen_C_test_4(){
    80022c0c:	1101                	addi	sp,sp,-32

    //当mstateen.C=1,hstateen.C=0,v=1时不可访问自定义寄存器

    TEST_START();
    80022c0e:	0000a597          	auipc	a1,0xa
    80022c12:	f5a58593          	addi	a1,a1,-166 # 8002cb68 <__func__.33>
    80022c16:	0000a517          	auipc	a0,0xa
    80022c1a:	6ea50513          	addi	a0,a0,1770 # 8002d300 <__func__.0+0x2e0>
bool stateen_C_test_4(){
    80022c1e:	ec06                	sd	ra,24(sp)
    80022c20:	e822                	sd	s0,16(sp)
    80022c22:	e426                	sd	s1,8(sp)
    TEST_START();
    80022c24:	196080ef          	jal	8002adba <printf>
    80022c28:	4529                	li	a0,10
    80022c2a:	67f060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80022c2e:	4511                	li	a0,4
    80022c30:	a3ede0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022c34:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022c38:	60c0f073          	csrci	hstateen0,1
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80022c3c:	30c025f3          	csrr	a1,mstateen0
    80022c40:	00013517          	auipc	a0,0x13
    80022c44:	ea050513          	addi	a0,a0,-352 # 80035ae0 <__func__.0+0x8ac0>
    80022c48:	172080ef          	jal	8002adba <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80022c4c:	60c025f3          	csrr	a1,hstateen0
    80022c50:	00013517          	auipc	a0,0x13
    80022c54:	ea050513          	addi	a0,a0,-352 # 80035af0 <__func__.0+0x8ad0>
    80022c58:	162080ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    80022c5c:	4509                	li	a0,2
    80022c5e:	a10de0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80022c62:	910de0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C4);
    80022c66:	5c4027f3          	csrr	a5,0x5c4

    excpt_info();
    80022c6a:	b4ade0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022c6e:	08200593          	li	a1,130
    80022c72:	00013617          	auipc	a2,0x13
    80022c76:	e8e60613          	addi	a2,a2,-370 # 80035b00 <__func__.0+0x8ae0>
    80022c7a:	0000a517          	auipc	a0,0xa
    80022c7e:	69e50513          	addi	a0,a0,1694 # 8002d318 <__func__.0+0x2f8>
    80022c82:	138080ef          	jal	8002adba <printf>
    80022c86:	0002e797          	auipc	a5,0x2e
    80022c8a:	38b7c783          	lbu	a5,907(a5) # 80051011 <excpt+0x1>
    80022c8e:	0002e497          	auipc	s1,0x2e
    80022c92:	38248493          	addi	s1,s1,898 # 80051010 <excpt>
    80022c96:	0000a597          	auipc	a1,0xa
    80022c9a:	65a58593          	addi	a1,a1,1626 # 8002d2f0 <__func__.0+0x2d0>
    80022c9e:	cf89                	beqz	a5,80022cb8 <stateen_C_test_4+0xac>
    80022ca0:	6498                	ld	a4,8(s1)
    80022ca2:	47d9                	li	a5,22
    80022ca4:	0000a597          	auipc	a1,0xa
    80022ca8:	63c58593          	addi	a1,a1,1596 # 8002d2e0 <__func__.0+0x2c0>
    80022cac:	00f70663          	beq	a4,a5,80022cb8 <stateen_C_test_4+0xac>
    80022cb0:	0000a597          	auipc	a1,0xa
    80022cb4:	64058593          	addi	a1,a1,1600 # 8002d2f0 <__func__.0+0x2d0>
    80022cb8:	0000a517          	auipc	a0,0xa
    80022cbc:	67850513          	addi	a0,a0,1656 # 8002d330 <__func__.0+0x310>
    80022cc0:	0fa080ef          	jal	8002adba <printf>
    80022cc4:	0002e797          	auipc	a5,0x2e
    80022cc8:	34d7c783          	lbu	a5,845(a5) # 80051011 <excpt+0x1>
    80022ccc:	c789                	beqz	a5,80022cd6 <stateen_C_test_4+0xca>
    80022cce:	6498                	ld	a4,8(s1)
    80022cd0:	47d9                	li	a5,22
    80022cd2:	00f70c63          	beq	a4,a5,80022cea <stateen_C_test_4+0xde>
    80022cd6:	0000a517          	auipc	a0,0xa
    80022cda:	66250513          	addi	a0,a0,1634 # 8002d338 <__func__.0+0x318>
    80022cde:	0dc080ef          	jal	8002adba <printf>
    80022ce2:	02900513          	li	a0,41
    80022ce6:	5c3060ef          	jal	80029aa8 <putchar>
    80022cea:	4529                	li	a0,10
    80022cec:	5bd060ef          	jal	80029aa8 <putchar>
    80022cf0:	0002e417          	auipc	s0,0x2e
    80022cf4:	32144403          	lbu	s0,801(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80022cf8:	0000a597          	auipc	a1,0xa
    80022cfc:	5f858593          	addi	a1,a1,1528 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022d00:	cc11                	beqz	s0,80022d1c <stateen_C_test_4+0x110>
    80022d02:	6498                	ld	a4,8(s1)
    80022d04:	47d9                	li	a5,22
    TEST_END();
    80022d06:	0000a597          	auipc	a1,0xa
    80022d0a:	5da58593          	addi	a1,a1,1498 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss Custom register cause to VRTI when mstateen.c=1 hstateen.c=0",
    80022d0e:	00f70763          	beq	a4,a5,80022d1c <stateen_C_test_4+0x110>
    80022d12:	4401                	li	s0,0
    TEST_END();
    80022d14:	0000a597          	auipc	a1,0xa
    80022d18:	5dc58593          	addi	a1,a1,1500 # 8002d2f0 <__func__.0+0x2d0>
    80022d1c:	0000a517          	auipc	a0,0xa
    80022d20:	67c50513          	addi	a0,a0,1660 # 8002d398 <__func__.0+0x378>
    80022d24:	096080ef          	jal	8002adba <printf>
    80022d28:	4511                	li	a0,4
    80022d2a:	944de0ef          	jal	80000e6e <goto_priv>
    80022d2e:	a5dde0ef          	jal	8000178a <reset_state>

}
    80022d32:	60e2                	ld	ra,24(sp)
    80022d34:	8522                	mv	a0,s0
    80022d36:	6442                	ld	s0,16(sp)
    80022d38:	64a2                	ld	s1,8(sp)
    80022d3a:	6105                	addi	sp,sp,32
    80022d3c:	8082                	ret

0000000080022d3e <stateen_C_test_5>:

bool stateen_C_test_5(){
    80022d3e:	1101                	addi	sp,sp,-32

    //当mstateen.C=0,hs mode 不可访问自定义寄存器

    TEST_START();
    80022d40:	0000a597          	auipc	a1,0xa
    80022d44:	e4058593          	addi	a1,a1,-448 # 8002cb80 <__func__.32>
    80022d48:	0000a517          	auipc	a0,0xa
    80022d4c:	5b850513          	addi	a0,a0,1464 # 8002d300 <__func__.0+0x2e0>
bool stateen_C_test_5(){
    80022d50:	ec06                	sd	ra,24(sp)
    80022d52:	e822                	sd	s0,16(sp)
    80022d54:	e426                	sd	s1,8(sp)
    TEST_START();
    80022d56:	064080ef          	jal	8002adba <printf>
    80022d5a:	4529                	li	a0,10
    80022d5c:	54d060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80022d60:	4511                	li	a0,4
    80022d62:	90cde0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_C);
    80022d66:	30c0f073          	csrci	mstateen0,1

    goto_priv(PRIV_HS);
    80022d6a:	450d                	li	a0,3
    80022d6c:	902de0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80022d70:	802de0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C0);
    80022d74:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80022d78:	a3cde0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022d7c:	08200593          	li	a1,130
    80022d80:	00013617          	auipc	a2,0x13
    80022d84:	dd060613          	addi	a2,a2,-560 # 80035b50 <__func__.0+0x8b30>
    80022d88:	0000a517          	auipc	a0,0xa
    80022d8c:	59050513          	addi	a0,a0,1424 # 8002d318 <__func__.0+0x2f8>
    80022d90:	02a080ef          	jal	8002adba <printf>
    80022d94:	0002e797          	auipc	a5,0x2e
    80022d98:	27d7c783          	lbu	a5,637(a5) # 80051011 <excpt+0x1>
    80022d9c:	0002e497          	auipc	s1,0x2e
    80022da0:	27448493          	addi	s1,s1,628 # 80051010 <excpt>
    80022da4:	0000a597          	auipc	a1,0xa
    80022da8:	54c58593          	addi	a1,a1,1356 # 8002d2f0 <__func__.0+0x2d0>
    80022dac:	cf89                	beqz	a5,80022dc6 <stateen_C_test_5+0x88>
    80022dae:	6498                	ld	a4,8(s1)
    80022db0:	4789                	li	a5,2
    80022db2:	0000a597          	auipc	a1,0xa
    80022db6:	52e58593          	addi	a1,a1,1326 # 8002d2e0 <__func__.0+0x2c0>
    80022dba:	00f70663          	beq	a4,a5,80022dc6 <stateen_C_test_5+0x88>
    80022dbe:	0000a597          	auipc	a1,0xa
    80022dc2:	53258593          	addi	a1,a1,1330 # 8002d2f0 <__func__.0+0x2d0>
    80022dc6:	0000a517          	auipc	a0,0xa
    80022dca:	56a50513          	addi	a0,a0,1386 # 8002d330 <__func__.0+0x310>
    80022dce:	7ed070ef          	jal	8002adba <printf>
    80022dd2:	0002e797          	auipc	a5,0x2e
    80022dd6:	23f7c783          	lbu	a5,575(a5) # 80051011 <excpt+0x1>
    80022dda:	c789                	beqz	a5,80022de4 <stateen_C_test_5+0xa6>
    80022ddc:	6498                	ld	a4,8(s1)
    80022dde:	4789                	li	a5,2
    80022de0:	00f70c63          	beq	a4,a5,80022df8 <stateen_C_test_5+0xba>
    80022de4:	0000a517          	auipc	a0,0xa
    80022de8:	55450513          	addi	a0,a0,1364 # 8002d338 <__func__.0+0x318>
    80022dec:	7cf070ef          	jal	8002adba <printf>
    80022df0:	02900513          	li	a0,41
    80022df4:	4b5060ef          	jal	80029aa8 <putchar>
    80022df8:	4529                	li	a0,10
    80022dfa:	4af060ef          	jal	80029aa8 <putchar>
    80022dfe:	0002e417          	auipc	s0,0x2e
    80022e02:	21344403          	lbu	s0,531(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80022e06:	0000a597          	auipc	a1,0xa
    80022e0a:	4ea58593          	addi	a1,a1,1258 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022e0e:	cc11                	beqz	s0,80022e2a <stateen_C_test_5+0xec>
    80022e10:	6498                	ld	a4,8(s1)
    80022e12:	4789                	li	a5,2
    TEST_END();
    80022e14:	0000a597          	auipc	a1,0xa
    80022e18:	4cc58593          	addi	a1,a1,1228 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss Custom register cause to illegal except when mstateen.c=0",
    80022e1c:	00f70763          	beq	a4,a5,80022e2a <stateen_C_test_5+0xec>
    80022e20:	4401                	li	s0,0
    TEST_END();
    80022e22:	0000a597          	auipc	a1,0xa
    80022e26:	4ce58593          	addi	a1,a1,1230 # 8002d2f0 <__func__.0+0x2d0>
    80022e2a:	0000a517          	auipc	a0,0xa
    80022e2e:	56e50513          	addi	a0,a0,1390 # 8002d398 <__func__.0+0x378>
    80022e32:	789070ef          	jal	8002adba <printf>
    80022e36:	4511                	li	a0,4
    80022e38:	836de0ef          	jal	80000e6e <goto_priv>
    80022e3c:	94fde0ef          	jal	8000178a <reset_state>

}
    80022e40:	60e2                	ld	ra,24(sp)
    80022e42:	8522                	mv	a0,s0
    80022e44:	6442                	ld	s0,16(sp)
    80022e46:	64a2                	ld	s1,8(sp)
    80022e48:	6105                	addi	sp,sp,32
    80022e4a:	8082                	ret

0000000080022e4c <stateen_C_test_6>:


bool stateen_C_test_6(){
    80022e4c:	1141                	addi	sp,sp,-16

    TEST_START();
    80022e4e:	0000a597          	auipc	a1,0xa
    80022e52:	d4a58593          	addi	a1,a1,-694 # 8002cb98 <__func__.31>
    80022e56:	0000a517          	auipc	a0,0xa
    80022e5a:	4aa50513          	addi	a0,a0,1194 # 8002d300 <__func__.0+0x2e0>
bool stateen_C_test_6(){
    80022e5e:	e406                	sd	ra,8(sp)
    80022e60:	e022                	sd	s0,0(sp)
    TEST_START();
    80022e62:	759070ef          	jal	8002adba <printf>
    80022e66:	4529                	li	a0,10
    80022e68:	441060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80022e6c:	4511                	li	a0,4
    80022e6e:	800de0ef          	jal	80000e6e <goto_priv>
    //当mstateen.C=1,v=0时,可访问自定义寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022e72:	30c0e073          	csrsi	mstateen0,1
    CSRC(CSR_HSTATEEN0 , MSTATEEN_C);
    80022e76:	60c0f073          	csrci	hstateen0,1

    goto_priv(PRIV_HS);
    80022e7a:	450d                	li	a0,3
    80022e7c:	ff3dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80022e80:	ef3dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C0);
    80022e84:	5c0027f3          	csrr	a5,0x5c0

    excpt_info();
    80022e88:	92cde0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80022e8c:	08200593          	li	a1,130
    80022e90:	00013617          	auipc	a2,0x13
    80022e94:	d1060613          	addi	a2,a2,-752 # 80035ba0 <__func__.0+0x8b80>
    80022e98:	0000a517          	auipc	a0,0xa
    80022e9c:	48050513          	addi	a0,a0,1152 # 8002d318 <__func__.0+0x2f8>
    80022ea0:	71b070ef          	jal	8002adba <printf>
    80022ea4:	0002e797          	auipc	a5,0x2e
    80022ea8:	16d7c783          	lbu	a5,365(a5) # 80051011 <excpt+0x1>
    80022eac:	0000a597          	auipc	a1,0xa
    80022eb0:	43458593          	addi	a1,a1,1076 # 8002d2e0 <__func__.0+0x2c0>
    80022eb4:	c789                	beqz	a5,80022ebe <stateen_C_test_6+0x72>
    80022eb6:	0000a597          	auipc	a1,0xa
    80022eba:	43a58593          	addi	a1,a1,1082 # 8002d2f0 <__func__.0+0x2d0>
    80022ebe:	0000a517          	auipc	a0,0xa
    80022ec2:	47250513          	addi	a0,a0,1138 # 8002d330 <__func__.0+0x310>
    80022ec6:	6f5070ef          	jal	8002adba <printf>
    80022eca:	0002e797          	auipc	a5,0x2e
    80022ece:	1477c783          	lbu	a5,327(a5) # 80051011 <excpt+0x1>
    80022ed2:	e7e9                	bnez	a5,80022f9c <stateen_C_test_6+0x150>
    80022ed4:	4529                	li	a0,10
    80022ed6:	3d3060ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

#endif

    goto_priv(PRIV_M);
    80022eda:	4511                	li	a0,4
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80022edc:	0002e417          	auipc	s0,0x2e
    80022ee0:	13544403          	lbu	s0,309(s0) # 80051011 <excpt+0x1>
    goto_priv(PRIV_M);
    80022ee4:	f8bdd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80022ee8:	e8bdd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C3);
    80022eec:	5c3027f3          	csrr	a5,0x5c3

    excpt_info();
    80022ef0:	8c4de0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80022ef4:	08200593          	li	a1,130
    80022ef8:	00013617          	auipc	a2,0x13
    80022efc:	cf860613          	addi	a2,a2,-776 # 80035bf0 <__func__.0+0x8bd0>
    80022f00:	0000a517          	auipc	a0,0xa
    80022f04:	41850513          	addi	a0,a0,1048 # 8002d318 <__func__.0+0x2f8>
    80022f08:	6b3070ef          	jal	8002adba <printf>
    80022f0c:	0002e797          	auipc	a5,0x2e
    80022f10:	1057c783          	lbu	a5,261(a5) # 80051011 <excpt+0x1>
    80022f14:	0000a597          	auipc	a1,0xa
    80022f18:	3dc58593          	addi	a1,a1,988 # 8002d2f0 <__func__.0+0x2d0>
    80022f1c:	e789                	bnez	a5,80022f26 <stateen_C_test_6+0xda>
    80022f1e:	0000a597          	auipc	a1,0xa
    80022f22:	3c258593          	addi	a1,a1,962 # 8002d2e0 <__func__.0+0x2c0>
    80022f26:	0000a517          	auipc	a0,0xa
    80022f2a:	40a50513          	addi	a0,a0,1034 # 8002d330 <__func__.0+0x310>
    80022f2e:	68d070ef          	jal	8002adba <printf>
    80022f32:	0002e797          	auipc	a5,0x2e
    80022f36:	0df7c783          	lbu	a5,223(a5) # 80051011 <excpt+0x1>
    80022f3a:	e7b1                	bnez	a5,80022f86 <stateen_C_test_6+0x13a>
    80022f3c:	4529                	li	a0,10
    80022f3e:	36b060ef          	jal	80029aa8 <putchar>
    80022f42:	e815                	bnez	s0,80022f76 <stateen_C_test_6+0x12a>
    80022f44:	0002e797          	auipc	a5,0x2e
    80022f48:	0cd7c783          	lbu	a5,205(a5) # 80051011 <excpt+0x1>
    80022f4c:	c79d                	beqz	a5,80022f7a <stateen_C_test_6+0x12e>
        excpt.triggered == false
    ); 

    TEST_END();
    80022f4e:	0000a597          	auipc	a1,0xa
    80022f52:	3a258593          	addi	a1,a1,930 # 8002d2f0 <__func__.0+0x2d0>
    80022f56:	0000a517          	auipc	a0,0xa
    80022f5a:	44250513          	addi	a0,a0,1090 # 8002d398 <__func__.0+0x378>
    80022f5e:	65d070ef          	jal	8002adba <printf>
    80022f62:	4511                	li	a0,4
    80022f64:	f0bdd0ef          	jal	80000e6e <goto_priv>
    80022f68:	823de0ef          	jal	8000178a <reset_state>

}
    80022f6c:	60a2                	ld	ra,8(sp)
    80022f6e:	8522                	mv	a0,s0
    80022f70:	6402                	ld	s0,0(sp)
    80022f72:	0141                	addi	sp,sp,16
    80022f74:	8082                	ret
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80022f76:	4401                	li	s0,0
    80022f78:	bfd9                	j	80022f4e <stateen_C_test_6+0x102>
    80022f7a:	4405                	li	s0,1
    TEST_END();
    80022f7c:	0000a597          	auipc	a1,0xa
    80022f80:	36458593          	addi	a1,a1,868 # 8002d2e0 <__func__.0+0x2c0>
    80022f84:	bfc9                	j	80022f56 <stateen_C_test_6+0x10a>
    TEST_ASSERT("m mode accesss Custom register successful when mstateen.c=1 hstateen.c=0",
    80022f86:	0000a517          	auipc	a0,0xa
    80022f8a:	3b250513          	addi	a0,a0,946 # 8002d338 <__func__.0+0x318>
    80022f8e:	62d070ef          	jal	8002adba <printf>
    80022f92:	02900513          	li	a0,41
    80022f96:	313060ef          	jal	80029aa8 <putchar>
    80022f9a:	b74d                	j	80022f3c <stateen_C_test_6+0xf0>
    TEST_ASSERT("hs mode accesss Custom register successful when  mstateen.c=1 hstateen.c=0",
    80022f9c:	0000a517          	auipc	a0,0xa
    80022fa0:	39c50513          	addi	a0,a0,924 # 8002d338 <__func__.0+0x318>
    80022fa4:	617070ef          	jal	8002adba <printf>
    80022fa8:	02900513          	li	a0,41
    80022fac:	2fd060ef          	jal	80029aa8 <putchar>
    80022fb0:	b715                	j	80022ed4 <stateen_C_test_6+0x88>

0000000080022fb2 <stateen_C_test_7>:


bool stateen_C_test_7(){
    80022fb2:	1141                	addi	sp,sp,-16

    TEST_START();
    80022fb4:	0000a597          	auipc	a1,0xa
    80022fb8:	bfc58593          	addi	a1,a1,-1028 # 8002cbb0 <__func__.30>
    80022fbc:	0000a517          	auipc	a0,0xa
    80022fc0:	34450513          	addi	a0,a0,836 # 8002d300 <__func__.0+0x2e0>
bool stateen_C_test_7(){
    80022fc4:	e406                	sd	ra,8(sp)
    80022fc6:	e022                	sd	s0,0(sp)
    TEST_START();
    80022fc8:	5f3070ef          	jal	8002adba <printf>
    80022fcc:	4529                	li	a0,10
    80022fce:	2db060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80022fd2:	4511                	li	a0,4
    80022fd4:	e9bdd0ef          	jal	80000e6e <goto_priv>
    //当mstateen.C=1 hstateen.C=1,v=1 时可访问自定义寄存器(vs,vu自定义寄存器是哪些)
    CSRS(CSR_MSTATEEN0 , MSTATEEN_C);
    80022fd8:	30c0e073          	csrsi	mstateen0,1
    CSRS(CSR_HSTATEEN0 , MSTATEEN_C);
    80022fdc:	60c0e073          	csrsi	hstateen0,1

    goto_priv(PRIV_VS);
    80022fe0:	4509                	li	a0,2
    80022fe2:	e8ddd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80022fe6:	d8ddd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C1);
    80022fea:	5c1027f3          	csrr	a5,0x5c1

    excpt_info();
    80022fee:	fc7dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    80022ff2:	08200593          	li	a1,130
    80022ff6:	00013617          	auipc	a2,0x13
    80022ffa:	c4a60613          	addi	a2,a2,-950 # 80035c40 <__func__.0+0x8c20>
    80022ffe:	0000a517          	auipc	a0,0xa
    80023002:	31a50513          	addi	a0,a0,794 # 8002d318 <__func__.0+0x2f8>
    80023006:	5b5070ef          	jal	8002adba <printf>
    8002300a:	0002e797          	auipc	a5,0x2e
    8002300e:	0077c783          	lbu	a5,7(a5) # 80051011 <excpt+0x1>
    80023012:	0000a597          	auipc	a1,0xa
    80023016:	2ce58593          	addi	a1,a1,718 # 8002d2e0 <__func__.0+0x2c0>
    8002301a:	c789                	beqz	a5,80023024 <stateen_C_test_7+0x72>
    8002301c:	0000a597          	auipc	a1,0xa
    80023020:	2d458593          	addi	a1,a1,724 # 8002d2f0 <__func__.0+0x2d0>
    80023024:	0000a517          	auipc	a0,0xa
    80023028:	30c50513          	addi	a0,a0,780 # 8002d330 <__func__.0+0x310>
    8002302c:	58f070ef          	jal	8002adba <printf>
    80023030:	0002e797          	auipc	a5,0x2e
    80023034:	fe17c783          	lbu	a5,-31(a5) # 80051011 <excpt+0x1>
    80023038:	e7e9                	bnez	a5,80023102 <stateen_C_test_7+0x150>
    8002303a:	4529                	li	a0,10
    8002303c:	26d060ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80023040:	4501                	li	a0,0
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    80023042:	0002e417          	auipc	s0,0x2e
    80023046:	fcf44403          	lbu	s0,-49(s0) # 80051011 <excpt+0x1>
    goto_priv(PRIV_VU);
    8002304a:	e25dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002304e:	d25dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(0X5C2);
    80023052:	5c2027f3          	csrr	a5,0x5c2

    excpt_info();
    80023056:	f5fdd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    8002305a:	08200593          	li	a1,130
    8002305e:	00013617          	auipc	a2,0x13
    80023062:	c3260613          	addi	a2,a2,-974 # 80035c90 <__func__.0+0x8c70>
    80023066:	0000a517          	auipc	a0,0xa
    8002306a:	2b250513          	addi	a0,a0,690 # 8002d318 <__func__.0+0x2f8>
    8002306e:	54d070ef          	jal	8002adba <printf>
    80023072:	0002e797          	auipc	a5,0x2e
    80023076:	f9f7c783          	lbu	a5,-97(a5) # 80051011 <excpt+0x1>
    8002307a:	0000a597          	auipc	a1,0xa
    8002307e:	27658593          	addi	a1,a1,630 # 8002d2f0 <__func__.0+0x2d0>
    80023082:	e789                	bnez	a5,8002308c <stateen_C_test_7+0xda>
    80023084:	0000a597          	auipc	a1,0xa
    80023088:	25c58593          	addi	a1,a1,604 # 8002d2e0 <__func__.0+0x2c0>
    8002308c:	0000a517          	auipc	a0,0xa
    80023090:	2a450513          	addi	a0,a0,676 # 8002d330 <__func__.0+0x310>
    80023094:	527070ef          	jal	8002adba <printf>
    80023098:	0002e797          	auipc	a5,0x2e
    8002309c:	f797c783          	lbu	a5,-135(a5) # 80051011 <excpt+0x1>
    800230a0:	e7b1                	bnez	a5,800230ec <stateen_C_test_7+0x13a>
    800230a2:	4529                	li	a0,10
    800230a4:	205060ef          	jal	80029aa8 <putchar>
    800230a8:	e815                	bnez	s0,800230dc <stateen_C_test_7+0x12a>
    800230aa:	0002e797          	auipc	a5,0x2e
    800230ae:	f677c783          	lbu	a5,-153(a5) # 80051011 <excpt+0x1>
    800230b2:	c79d                	beqz	a5,800230e0 <stateen_C_test_7+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    800230b4:	0000a597          	auipc	a1,0xa
    800230b8:	23c58593          	addi	a1,a1,572 # 8002d2f0 <__func__.0+0x2d0>
    800230bc:	0000a517          	auipc	a0,0xa
    800230c0:	2dc50513          	addi	a0,a0,732 # 8002d398 <__func__.0+0x378>
    800230c4:	4f7070ef          	jal	8002adba <printf>
    800230c8:	4511                	li	a0,4
    800230ca:	da5dd0ef          	jal	80000e6e <goto_priv>
    800230ce:	ebcde0ef          	jal	8000178a <reset_state>
}
    800230d2:	60a2                	ld	ra,8(sp)
    800230d4:	8522                	mv	a0,s0
    800230d6:	6402                	ld	s0,0(sp)
    800230d8:	0141                	addi	sp,sp,16
    800230da:	8082                	ret
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800230dc:	4401                	li	s0,0
    800230de:	bfd9                	j	800230b4 <stateen_C_test_7+0x102>
    800230e0:	4405                	li	s0,1
    TEST_END();
    800230e2:	0000a597          	auipc	a1,0xa
    800230e6:	1fe58593          	addi	a1,a1,510 # 8002d2e0 <__func__.0+0x2c0>
    800230ea:	bfc9                	j	800230bc <stateen_C_test_7+0x10a>
    TEST_ASSERT("vu mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    800230ec:	0000a517          	auipc	a0,0xa
    800230f0:	24c50513          	addi	a0,a0,588 # 8002d338 <__func__.0+0x318>
    800230f4:	4c7070ef          	jal	8002adba <printf>
    800230f8:	02900513          	li	a0,41
    800230fc:	1ad060ef          	jal	80029aa8 <putchar>
    80023100:	b74d                	j	800230a2 <stateen_C_test_7+0xf0>
    TEST_ASSERT("vs mode accesss Custom register successful when mstateen.c=1 hstateen.c=1",
    80023102:	0000a517          	auipc	a0,0xa
    80023106:	23650513          	addi	a0,a0,566 # 8002d338 <__func__.0+0x318>
    8002310a:	4b1070ef          	jal	8002adba <printf>
    8002310e:	02900513          	li	a0,41
    80023112:	197060ef          	jal	80029aa8 <putchar>
    80023116:	b715                	j	8002303a <stateen_C_test_7+0x88>

0000000080023118 <stateen_IMSIC_test_1>:

//----



bool stateen_IMSIC_test_1(){
    80023118:	1101                	addi	sp,sp,-32

    TEST_START();
    8002311a:	0000a597          	auipc	a1,0xa
    8002311e:	aae58593          	addi	a1,a1,-1362 # 8002cbc8 <__func__.29>
    80023122:	0000a517          	auipc	a0,0xa
    80023126:	1de50513          	addi	a0,a0,478 # 8002d300 <__func__.0+0x2e0>
bool stateen_IMSIC_test_1(){
    8002312a:	ec06                	sd	ra,24(sp)
    8002312c:	e822                	sd	s0,16(sp)
    8002312e:	e426                	sd	s1,8(sp)
    TEST_START();
    80023130:	48b070ef          	jal	8002adba <printf>
    80023134:	4529                	li	a0,10
    80023136:	173060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    8002313a:	4511                	li	a0,4
    8002313c:	d33dd0ef          	jal	80000e6e <goto_priv>
    //当mstateen.IMSIC=0,hu mode 不可访问stopei、vstopei寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023140:	4785                	li	a5,1
    80023142:	17ea                	slli	a5,a5,0x3a
    80023144:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80023148:	4505                	li	a0,1
    8002314a:	d25dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002314e:	c25dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023152:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023156:	e5fdd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    8002315a:	08200593          	li	a1,130
    8002315e:	00013617          	auipc	a2,0x13
    80023162:	b8260613          	addi	a2,a2,-1150 # 80035ce0 <__func__.0+0x8cc0>
    80023166:	0000a517          	auipc	a0,0xa
    8002316a:	1b250513          	addi	a0,a0,434 # 8002d318 <__func__.0+0x2f8>
    8002316e:	44d070ef          	jal	8002adba <printf>
    80023172:	0002e797          	auipc	a5,0x2e
    80023176:	e9f7c783          	lbu	a5,-353(a5) # 80051011 <excpt+0x1>
    8002317a:	0002e497          	auipc	s1,0x2e
    8002317e:	e9648493          	addi	s1,s1,-362 # 80051010 <excpt>
    80023182:	0000a597          	auipc	a1,0xa
    80023186:	16e58593          	addi	a1,a1,366 # 8002d2f0 <__func__.0+0x2d0>
    8002318a:	cf89                	beqz	a5,800231a4 <stateen_IMSIC_test_1+0x8c>
    8002318c:	6498                	ld	a4,8(s1)
    8002318e:	4789                	li	a5,2
    80023190:	0000a597          	auipc	a1,0xa
    80023194:	15058593          	addi	a1,a1,336 # 8002d2e0 <__func__.0+0x2c0>
    80023198:	00f70663          	beq	a4,a5,800231a4 <stateen_IMSIC_test_1+0x8c>
    8002319c:	0000a597          	auipc	a1,0xa
    800231a0:	15458593          	addi	a1,a1,340 # 8002d2f0 <__func__.0+0x2d0>
    800231a4:	0000a517          	auipc	a0,0xa
    800231a8:	18c50513          	addi	a0,a0,396 # 8002d330 <__func__.0+0x310>
    800231ac:	40f070ef          	jal	8002adba <printf>
    800231b0:	0002e797          	auipc	a5,0x2e
    800231b4:	e617c783          	lbu	a5,-415(a5) # 80051011 <excpt+0x1>
    800231b8:	c789                	beqz	a5,800231c2 <stateen_IMSIC_test_1+0xaa>
    800231ba:	6498                	ld	a4,8(s1)
    800231bc:	4789                	li	a5,2
    800231be:	00f70c63          	beq	a4,a5,800231d6 <stateen_IMSIC_test_1+0xbe>
    800231c2:	0000a517          	auipc	a0,0xa
    800231c6:	17650513          	addi	a0,a0,374 # 8002d338 <__func__.0+0x318>
    800231ca:	3f1070ef          	jal	8002adba <printf>
    800231ce:	02900513          	li	a0,41
    800231d2:	0d7060ef          	jal	80029aa8 <putchar>
    800231d6:	4529                	li	a0,10
    800231d8:	0d1060ef          	jal	80029aa8 <putchar>
    800231dc:	0002e797          	auipc	a5,0x2e
    800231e0:	e357c783          	lbu	a5,-459(a5) # 80051011 <excpt+0x1>
    800231e4:	4401                	li	s0,0
    800231e6:	c789                	beqz	a5,800231f0 <stateen_IMSIC_test_1+0xd8>
    800231e8:	6480                	ld	s0,8(s1)
    800231ea:	1479                	addi	s0,s0,-2
    800231ec:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800231f0:	4505                	li	a0,1
    800231f2:	c7ddd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800231f6:	b7ddd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800231fa:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800231fe:	db7dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023202:	08200593          	li	a1,130
    80023206:	00013617          	auipc	a2,0x13
    8002320a:	b2a60613          	addi	a2,a2,-1238 # 80035d30 <__func__.0+0x8d10>
    8002320e:	0000a517          	auipc	a0,0xa
    80023212:	10a50513          	addi	a0,a0,266 # 8002d318 <__func__.0+0x2f8>
    80023216:	3a5070ef          	jal	8002adba <printf>
    8002321a:	0002e797          	auipc	a5,0x2e
    8002321e:	df77c783          	lbu	a5,-521(a5) # 80051011 <excpt+0x1>
    80023222:	0000a597          	auipc	a1,0xa
    80023226:	0ce58593          	addi	a1,a1,206 # 8002d2f0 <__func__.0+0x2d0>
    8002322a:	cf89                	beqz	a5,80023244 <stateen_IMSIC_test_1+0x12c>
    8002322c:	6498                	ld	a4,8(s1)
    8002322e:	4789                	li	a5,2
    80023230:	0000a597          	auipc	a1,0xa
    80023234:	0b058593          	addi	a1,a1,176 # 8002d2e0 <__func__.0+0x2c0>
    80023238:	00f70663          	beq	a4,a5,80023244 <stateen_IMSIC_test_1+0x12c>
    8002323c:	0000a597          	auipc	a1,0xa
    80023240:	0b458593          	addi	a1,a1,180 # 8002d2f0 <__func__.0+0x2d0>
    80023244:	0000a517          	auipc	a0,0xa
    80023248:	0ec50513          	addi	a0,a0,236 # 8002d330 <__func__.0+0x310>
    8002324c:	36f070ef          	jal	8002adba <printf>
    80023250:	0002e797          	auipc	a5,0x2e
    80023254:	dc17c783          	lbu	a5,-575(a5) # 80051011 <excpt+0x1>
    80023258:	c789                	beqz	a5,80023262 <stateen_IMSIC_test_1+0x14a>
    8002325a:	6498                	ld	a4,8(s1)
    8002325c:	4789                	li	a5,2
    8002325e:	00f70c63          	beq	a4,a5,80023276 <stateen_IMSIC_test_1+0x15e>
    80023262:	0000a517          	auipc	a0,0xa
    80023266:	0d650513          	addi	a0,a0,214 # 8002d338 <__func__.0+0x318>
    8002326a:	351070ef          	jal	8002adba <printf>
    8002326e:	02900513          	li	a0,41
    80023272:	037060ef          	jal	80029aa8 <putchar>
    80023276:	4529                	li	a0,10
    80023278:	031060ef          	jal	80029aa8 <putchar>
    8002327c:	c015                	beqz	s0,800232a0 <stateen_IMSIC_test_1+0x188>
    8002327e:	0002e417          	auipc	s0,0x2e
    80023282:	d9344403          	lbu	s0,-621(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80023286:	0000a597          	auipc	a1,0xa
    8002328a:	06a58593          	addi	a1,a1,106 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    8002328e:	cc11                	beqz	s0,800232aa <stateen_IMSIC_test_1+0x192>
    80023290:	6498                	ld	a4,8(s1)
    80023292:	4789                	li	a5,2
    TEST_END();
    80023294:	0000a597          	auipc	a1,0xa
    80023298:	04c58593          	addi	a1,a1,76 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    8002329c:	00f70763          	beq	a4,a5,800232aa <stateen_IMSIC_test_1+0x192>
    800232a0:	4401                	li	s0,0
    TEST_END();
    800232a2:	0000a597          	auipc	a1,0xa
    800232a6:	04e58593          	addi	a1,a1,78 # 8002d2f0 <__func__.0+0x2d0>
    800232aa:	0000a517          	auipc	a0,0xa
    800232ae:	0ee50513          	addi	a0,a0,238 # 8002d398 <__func__.0+0x378>
    800232b2:	309070ef          	jal	8002adba <printf>
    800232b6:	4511                	li	a0,4
    800232b8:	bb7dd0ef          	jal	80000e6e <goto_priv>
    800232bc:	ccede0ef          	jal	8000178a <reset_state>

}
    800232c0:	60e2                	ld	ra,24(sp)
    800232c2:	8522                	mv	a0,s0
    800232c4:	6442                	ld	s0,16(sp)
    800232c6:	64a2                	ld	s1,8(sp)
    800232c8:	6105                	addi	sp,sp,32
    800232ca:	8082                	ret

00000000800232cc <stateen_IMSIC_test_2>:

bool stateen_IMSIC_test_2(){
    800232cc:	1101                	addi	sp,sp,-32

    TEST_START();
    800232ce:	0000a597          	auipc	a1,0xa
    800232d2:	91258593          	addi	a1,a1,-1774 # 8002cbe0 <__func__.28>
    800232d6:	0000a517          	auipc	a0,0xa
    800232da:	02a50513          	addi	a0,a0,42 # 8002d300 <__func__.0+0x2e0>
bool stateen_IMSIC_test_2(){
    800232de:	ec06                	sd	ra,24(sp)
    800232e0:	e822                	sd	s0,16(sp)
    800232e2:	e426                	sd	s1,8(sp)
    TEST_START();
    800232e4:	2d7070ef          	jal	8002adba <printf>
    800232e8:	4529                	li	a0,10
    800232ea:	7be060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    800232ee:	4511                	li	a0,4
    800232f0:	b7fdd0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800232f4:	4785                	li	a5,1
    800232f6:	17ea                	slli	a5,a5,0x3a
    800232f8:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800232fc:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时,不可访问stopei、vstopei寄存器
    goto_priv(PRIV_VU);
    80023300:	4501                	li	a0,0
    80023302:	b6ddd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023306:	a6ddd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    8002330a:	15c027f3          	csrr	a5,stopei

    excpt_info();
    8002330e:	ca7dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023312:	08200593          	li	a1,130
    80023316:	00013617          	auipc	a2,0x13
    8002331a:	a6a60613          	addi	a2,a2,-1430 # 80035d80 <__func__.0+0x8d60>
    8002331e:	0000a517          	auipc	a0,0xa
    80023322:	ffa50513          	addi	a0,a0,-6 # 8002d318 <__func__.0+0x2f8>
    80023326:	295070ef          	jal	8002adba <printf>
    8002332a:	0002e797          	auipc	a5,0x2e
    8002332e:	ce77c783          	lbu	a5,-793(a5) # 80051011 <excpt+0x1>
    80023332:	0002e497          	auipc	s1,0x2e
    80023336:	cde48493          	addi	s1,s1,-802 # 80051010 <excpt>
    8002333a:	0000a597          	auipc	a1,0xa
    8002333e:	fb658593          	addi	a1,a1,-74 # 8002d2f0 <__func__.0+0x2d0>
    80023342:	cf89                	beqz	a5,8002335c <stateen_IMSIC_test_2+0x90>
    80023344:	6498                	ld	a4,8(s1)
    80023346:	47d9                	li	a5,22
    80023348:	0000a597          	auipc	a1,0xa
    8002334c:	f9858593          	addi	a1,a1,-104 # 8002d2e0 <__func__.0+0x2c0>
    80023350:	00f70663          	beq	a4,a5,8002335c <stateen_IMSIC_test_2+0x90>
    80023354:	0000a597          	auipc	a1,0xa
    80023358:	f9c58593          	addi	a1,a1,-100 # 8002d2f0 <__func__.0+0x2d0>
    8002335c:	0000a517          	auipc	a0,0xa
    80023360:	fd450513          	addi	a0,a0,-44 # 8002d330 <__func__.0+0x310>
    80023364:	257070ef          	jal	8002adba <printf>
    80023368:	0002e797          	auipc	a5,0x2e
    8002336c:	ca97c783          	lbu	a5,-855(a5) # 80051011 <excpt+0x1>
    80023370:	c789                	beqz	a5,8002337a <stateen_IMSIC_test_2+0xae>
    80023372:	6498                	ld	a4,8(s1)
    80023374:	47d9                	li	a5,22
    80023376:	00f70c63          	beq	a4,a5,8002338e <stateen_IMSIC_test_2+0xc2>
    8002337a:	0000a517          	auipc	a0,0xa
    8002337e:	fbe50513          	addi	a0,a0,-66 # 8002d338 <__func__.0+0x318>
    80023382:	239070ef          	jal	8002adba <printf>
    80023386:	02900513          	li	a0,41
    8002338a:	71e060ef          	jal	80029aa8 <putchar>
    8002338e:	4529                	li	a0,10
    80023390:	718060ef          	jal	80029aa8 <putchar>
    80023394:	0002e797          	auipc	a5,0x2e
    80023398:	c7d7c783          	lbu	a5,-899(a5) # 80051011 <excpt+0x1>
    8002339c:	4401                	li	s0,0
    8002339e:	c789                	beqz	a5,800233a8 <stateen_IMSIC_test_2+0xdc>
    800233a0:	6480                	ld	s0,8(s1)
    800233a2:	1429                	addi	s0,s0,-22
    800233a4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800233a8:	4501                	li	a0,0
    800233aa:	ac5dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800233ae:	9c5dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800233b2:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800233b6:	bffdd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800233ba:	08200593          	li	a1,130
    800233be:	00013617          	auipc	a2,0x13
    800233c2:	a1a60613          	addi	a2,a2,-1510 # 80035dd8 <__func__.0+0x8db8>
    800233c6:	0000a517          	auipc	a0,0xa
    800233ca:	f5250513          	addi	a0,a0,-174 # 8002d318 <__func__.0+0x2f8>
    800233ce:	1ed070ef          	jal	8002adba <printf>
    800233d2:	0002e797          	auipc	a5,0x2e
    800233d6:	c3f7c783          	lbu	a5,-961(a5) # 80051011 <excpt+0x1>
    800233da:	0000a597          	auipc	a1,0xa
    800233de:	f1658593          	addi	a1,a1,-234 # 8002d2f0 <__func__.0+0x2d0>
    800233e2:	cf89                	beqz	a5,800233fc <stateen_IMSIC_test_2+0x130>
    800233e4:	6498                	ld	a4,8(s1)
    800233e6:	47d9                	li	a5,22
    800233e8:	0000a597          	auipc	a1,0xa
    800233ec:	ef858593          	addi	a1,a1,-264 # 8002d2e0 <__func__.0+0x2c0>
    800233f0:	00f70663          	beq	a4,a5,800233fc <stateen_IMSIC_test_2+0x130>
    800233f4:	0000a597          	auipc	a1,0xa
    800233f8:	efc58593          	addi	a1,a1,-260 # 8002d2f0 <__func__.0+0x2d0>
    800233fc:	0000a517          	auipc	a0,0xa
    80023400:	f3450513          	addi	a0,a0,-204 # 8002d330 <__func__.0+0x310>
    80023404:	1b7070ef          	jal	8002adba <printf>
    80023408:	0002e797          	auipc	a5,0x2e
    8002340c:	c097c783          	lbu	a5,-1015(a5) # 80051011 <excpt+0x1>
    80023410:	c789                	beqz	a5,8002341a <stateen_IMSIC_test_2+0x14e>
    80023412:	6498                	ld	a4,8(s1)
    80023414:	47d9                	li	a5,22
    80023416:	00f70c63          	beq	a4,a5,8002342e <stateen_IMSIC_test_2+0x162>
    8002341a:	0000a517          	auipc	a0,0xa
    8002341e:	f1e50513          	addi	a0,a0,-226 # 8002d338 <__func__.0+0x318>
    80023422:	199070ef          	jal	8002adba <printf>
    80023426:	02900513          	li	a0,41
    8002342a:	67e060ef          	jal	80029aa8 <putchar>
    8002342e:	4529                	li	a0,10
    80023430:	678060ef          	jal	80029aa8 <putchar>
    80023434:	c015                	beqz	s0,80023458 <stateen_IMSIC_test_2+0x18c>
    80023436:	0002e417          	auipc	s0,0x2e
    8002343a:	bdb44403          	lbu	s0,-1061(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    8002343e:	0000a597          	auipc	a1,0xa
    80023442:	eb258593          	addi	a1,a1,-334 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023446:	cc11                	beqz	s0,80023462 <stateen_IMSIC_test_2+0x196>
    80023448:	6498                	ld	a4,8(s1)
    8002344a:	47d9                	li	a5,22
    TEST_END();
    8002344c:	0000a597          	auipc	a1,0xa
    80023450:	e9458593          	addi	a1,a1,-364 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023454:	00f70763          	beq	a4,a5,80023462 <stateen_IMSIC_test_2+0x196>
    80023458:	4401                	li	s0,0
    TEST_END();
    8002345a:	0000a597          	auipc	a1,0xa
    8002345e:	e9658593          	addi	a1,a1,-362 # 8002d2f0 <__func__.0+0x2d0>
    80023462:	0000a517          	auipc	a0,0xa
    80023466:	f3650513          	addi	a0,a0,-202 # 8002d398 <__func__.0+0x378>
    8002346a:	151070ef          	jal	8002adba <printf>
    8002346e:	4511                	li	a0,4
    80023470:	9ffdd0ef          	jal	80000e6e <goto_priv>
    80023474:	b16de0ef          	jal	8000178a <reset_state>

}
    80023478:	60e2                	ld	ra,24(sp)
    8002347a:	8522                	mv	a0,s0
    8002347c:	6442                	ld	s0,16(sp)
    8002347e:	64a2                	ld	s1,8(sp)
    80023480:	6105                	addi	sp,sp,32
    80023482:	8082                	ret

0000000080023484 <stateen_IMSIC_test_3>:

bool stateen_IMSIC_test_3(){
    80023484:	1141                	addi	sp,sp,-16

    //当mstateen.IMSIC=0,m mode 可访问stopei、vstopei寄存器

    TEST_START();
    80023486:	00009597          	auipc	a1,0x9
    8002348a:	77258593          	addi	a1,a1,1906 # 8002cbf8 <__func__.27>
    8002348e:	0000a517          	auipc	a0,0xa
    80023492:	e7250513          	addi	a0,a0,-398 # 8002d300 <__func__.0+0x2e0>
bool stateen_IMSIC_test_3(){
    80023496:	e406                	sd	ra,8(sp)
    80023498:	e022                	sd	s0,0(sp)
    TEST_START();
    8002349a:	121070ef          	jal	8002adba <printf>
    8002349e:	4529                	li	a0,10
    800234a0:	608060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    800234a4:	4511                	li	a0,4
    800234a6:	9c9dd0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800234aa:	4785                	li	a5,1
    800234ac:	17ea                	slli	a5,a5,0x3a
    800234ae:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    800234b2:	4511                	li	a0,4
    800234b4:	9bbdd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800234b8:	8bbdd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800234bc:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800234c0:	af5dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800234c4:	08200593          	li	a1,130
    800234c8:	00013617          	auipc	a2,0x13
    800234cc:	96860613          	addi	a2,a2,-1688 # 80035e30 <__func__.0+0x8e10>
    800234d0:	0000a517          	auipc	a0,0xa
    800234d4:	e4850513          	addi	a0,a0,-440 # 8002d318 <__func__.0+0x2f8>
    800234d8:	0e3070ef          	jal	8002adba <printf>
    800234dc:	0002e797          	auipc	a5,0x2e
    800234e0:	b357c783          	lbu	a5,-1227(a5) # 80051011 <excpt+0x1>
    800234e4:	0000a597          	auipc	a1,0xa
    800234e8:	dfc58593          	addi	a1,a1,-516 # 8002d2e0 <__func__.0+0x2c0>
    800234ec:	c789                	beqz	a5,800234f6 <stateen_IMSIC_test_3+0x72>
    800234ee:	0000a597          	auipc	a1,0xa
    800234f2:	e0258593          	addi	a1,a1,-510 # 8002d2f0 <__func__.0+0x2d0>
    800234f6:	0000a517          	auipc	a0,0xa
    800234fa:	e3a50513          	addi	a0,a0,-454 # 8002d330 <__func__.0+0x310>
    800234fe:	0bd070ef          	jal	8002adba <printf>
    80023502:	0002e797          	auipc	a5,0x2e
    80023506:	b0f7c783          	lbu	a5,-1265(a5) # 80051011 <excpt+0x1>
    8002350a:	e7e9                	bnez	a5,800235d4 <stateen_IMSIC_test_3+0x150>
    8002350c:	4529                	li	a0,10
    8002350e:	59a060ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80023512:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    80023514:	0002e417          	auipc	s0,0x2e
    80023518:	afd44403          	lbu	s0,-1283(s0) # 80051011 <excpt+0x1>
    goto_priv(PRIV_M);
    8002351c:	953dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023520:	853dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023524:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023528:	a8ddd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    8002352c:	08200593          	li	a1,130
    80023530:	00013617          	auipc	a2,0x13
    80023534:	94060613          	addi	a2,a2,-1728 # 80035e70 <__func__.0+0x8e50>
    80023538:	0000a517          	auipc	a0,0xa
    8002353c:	de050513          	addi	a0,a0,-544 # 8002d318 <__func__.0+0x2f8>
    80023540:	07b070ef          	jal	8002adba <printf>
    80023544:	0002e797          	auipc	a5,0x2e
    80023548:	acd7c783          	lbu	a5,-1331(a5) # 80051011 <excpt+0x1>
    8002354c:	0000a597          	auipc	a1,0xa
    80023550:	da458593          	addi	a1,a1,-604 # 8002d2f0 <__func__.0+0x2d0>
    80023554:	e789                	bnez	a5,8002355e <stateen_IMSIC_test_3+0xda>
    80023556:	0000a597          	auipc	a1,0xa
    8002355a:	d8a58593          	addi	a1,a1,-630 # 8002d2e0 <__func__.0+0x2c0>
    8002355e:	0000a517          	auipc	a0,0xa
    80023562:	dd250513          	addi	a0,a0,-558 # 8002d330 <__func__.0+0x310>
    80023566:	055070ef          	jal	8002adba <printf>
    8002356a:	0002e797          	auipc	a5,0x2e
    8002356e:	aa77c783          	lbu	a5,-1369(a5) # 80051011 <excpt+0x1>
    80023572:	e7b1                	bnez	a5,800235be <stateen_IMSIC_test_3+0x13a>
    80023574:	4529                	li	a0,10
    80023576:	532060ef          	jal	80029aa8 <putchar>
    8002357a:	e815                	bnez	s0,800235ae <stateen_IMSIC_test_3+0x12a>
    8002357c:	0002e797          	auipc	a5,0x2e
    80023580:	a957c783          	lbu	a5,-1387(a5) # 80051011 <excpt+0x1>
    80023584:	c79d                	beqz	a5,800235b2 <stateen_IMSIC_test_3+0x12e>
        excpt.triggered == false
    ); 
    TEST_END();
    80023586:	0000a597          	auipc	a1,0xa
    8002358a:	d6a58593          	addi	a1,a1,-662 # 8002d2f0 <__func__.0+0x2d0>
    8002358e:	0000a517          	auipc	a0,0xa
    80023592:	e0a50513          	addi	a0,a0,-502 # 8002d398 <__func__.0+0x378>
    80023596:	025070ef          	jal	8002adba <printf>
    8002359a:	4511                	li	a0,4
    8002359c:	8d3dd0ef          	jal	80000e6e <goto_priv>
    800235a0:	9eade0ef          	jal	8000178a <reset_state>

}
    800235a4:	60a2                	ld	ra,8(sp)
    800235a6:	8522                	mv	a0,s0
    800235a8:	6402                	ld	s0,0(sp)
    800235aa:	0141                	addi	sp,sp,16
    800235ac:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    800235ae:	4401                	li	s0,0
    800235b0:	bfd9                	j	80023586 <stateen_IMSIC_test_3+0x102>
    800235b2:	4405                	li	s0,1
    TEST_END();
    800235b4:	0000a597          	auipc	a1,0xa
    800235b8:	d2c58593          	addi	a1,a1,-724 # 8002d2e0 <__func__.0+0x2c0>
    800235bc:	bfc9                	j	8002358e <stateen_IMSIC_test_3+0x10a>
    TEST_ASSERT("m mode accesss vstopei register success  when mstateen.imsic=0",
    800235be:	0000a517          	auipc	a0,0xa
    800235c2:	d7a50513          	addi	a0,a0,-646 # 8002d338 <__func__.0+0x318>
    800235c6:	7f4070ef          	jal	8002adba <printf>
    800235ca:	02900513          	li	a0,41
    800235ce:	4da060ef          	jal	80029aa8 <putchar>
    800235d2:	b74d                	j	80023574 <stateen_IMSIC_test_3+0xf0>
    TEST_ASSERT("m mode accesss stopei register success  when mstateen.imsic=0",
    800235d4:	0000a517          	auipc	a0,0xa
    800235d8:	d6450513          	addi	a0,a0,-668 # 8002d338 <__func__.0+0x318>
    800235dc:	7de070ef          	jal	8002adba <printf>
    800235e0:	02900513          	li	a0,41
    800235e4:	4c4060ef          	jal	80029aa8 <putchar>
    800235e8:	b715                	j	8002350c <stateen_IMSIC_test_3+0x88>

00000000800235ea <stateen_IMSIC_test_4>:

bool stateen_IMSIC_test_4(){
    800235ea:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=1,hstateen.IMSIC=0,v=1时不可访问stopei、vstopei寄存器

    TEST_START();
    800235ec:	00009597          	auipc	a1,0x9
    800235f0:	62458593          	addi	a1,a1,1572 # 8002cc10 <__func__.26>
    800235f4:	0000a517          	auipc	a0,0xa
    800235f8:	d0c50513          	addi	a0,a0,-756 # 8002d300 <__func__.0+0x2e0>
bool stateen_IMSIC_test_4(){
    800235fc:	ec06                	sd	ra,24(sp)
    800235fe:	e822                	sd	s0,16(sp)
    80023600:	e426                	sd	s1,8(sp)
    TEST_START();
    80023602:	7b8070ef          	jal	8002adba <printf>
    80023606:	4529                	li	a0,10
    80023608:	4a0060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    8002360c:	4511                	li	a0,4
    8002360e:	861dd0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023612:	4785                	li	a5,1
    80023614:	17ea                	slli	a5,a5,0x3a
    80023616:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    8002361a:	60c7b073          	csrc	hstateen0,a5

    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    8002361e:	30c025f3          	csrr	a1,mstateen0
    80023622:	00012517          	auipc	a0,0x12
    80023626:	4be50513          	addi	a0,a0,1214 # 80035ae0 <__func__.0+0x8ac0>
    8002362a:	790070ef          	jal	8002adba <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    8002362e:	60c025f3          	csrr	a1,hstateen0
    80023632:	00012517          	auipc	a0,0x12
    80023636:	4be50513          	addi	a0,a0,1214 # 80035af0 <__func__.0+0x8ad0>
    8002363a:	780070ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    8002363e:	4509                	li	a0,2
    80023640:	82fdd0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80023644:	f2edd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023648:	15c027f3          	csrr	a5,stopei

    excpt_info();
    8002364c:	969dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023650:	08200593          	li	a1,130
    80023654:	00013617          	auipc	a2,0x13
    80023658:	85c60613          	addi	a2,a2,-1956 # 80035eb0 <__func__.0+0x8e90>
    8002365c:	0000a517          	auipc	a0,0xa
    80023660:	cbc50513          	addi	a0,a0,-836 # 8002d318 <__func__.0+0x2f8>
    80023664:	756070ef          	jal	8002adba <printf>
    80023668:	0002e797          	auipc	a5,0x2e
    8002366c:	9a97c783          	lbu	a5,-1623(a5) # 80051011 <excpt+0x1>
    80023670:	0002e497          	auipc	s1,0x2e
    80023674:	9a048493          	addi	s1,s1,-1632 # 80051010 <excpt>
    80023678:	0000a597          	auipc	a1,0xa
    8002367c:	c7858593          	addi	a1,a1,-904 # 8002d2f0 <__func__.0+0x2d0>
    80023680:	cf89                	beqz	a5,8002369a <stateen_IMSIC_test_4+0xb0>
    80023682:	6498                	ld	a4,8(s1)
    80023684:	47d9                	li	a5,22
    80023686:	0000a597          	auipc	a1,0xa
    8002368a:	c5a58593          	addi	a1,a1,-934 # 8002d2e0 <__func__.0+0x2c0>
    8002368e:	00f70663          	beq	a4,a5,8002369a <stateen_IMSIC_test_4+0xb0>
    80023692:	0000a597          	auipc	a1,0xa
    80023696:	c5e58593          	addi	a1,a1,-930 # 8002d2f0 <__func__.0+0x2d0>
    8002369a:	0000a517          	auipc	a0,0xa
    8002369e:	c9650513          	addi	a0,a0,-874 # 8002d330 <__func__.0+0x310>
    800236a2:	718070ef          	jal	8002adba <printf>
    800236a6:	0002e797          	auipc	a5,0x2e
    800236aa:	96b7c783          	lbu	a5,-1685(a5) # 80051011 <excpt+0x1>
    800236ae:	c789                	beqz	a5,800236b8 <stateen_IMSIC_test_4+0xce>
    800236b0:	6498                	ld	a4,8(s1)
    800236b2:	47d9                	li	a5,22
    800236b4:	00f70c63          	beq	a4,a5,800236cc <stateen_IMSIC_test_4+0xe2>
    800236b8:	0000a517          	auipc	a0,0xa
    800236bc:	c8050513          	addi	a0,a0,-896 # 8002d338 <__func__.0+0x318>
    800236c0:	6fa070ef          	jal	8002adba <printf>
    800236c4:	02900513          	li	a0,41
    800236c8:	3e0060ef          	jal	80029aa8 <putchar>
    800236cc:	4529                	li	a0,10
    800236ce:	3da060ef          	jal	80029aa8 <putchar>
    800236d2:	0002e797          	auipc	a5,0x2e
    800236d6:	93f7c783          	lbu	a5,-1729(a5) # 80051011 <excpt+0x1>
    800236da:	4401                	li	s0,0
    800236dc:	c789                	beqz	a5,800236e6 <stateen_IMSIC_test_4+0xfc>
    800236de:	6480                	ld	s0,8(s1)
    800236e0:	1429                	addi	s0,s0,-22
    800236e2:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800236e6:	4509                	li	a0,2
    800236e8:	f86dd0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800236ec:	e86dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800236f0:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800236f4:	8c1dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    800236f8:	08200593          	li	a1,130
    800236fc:	00013617          	auipc	a2,0x13
    80023700:	80c60613          	addi	a2,a2,-2036 # 80035f08 <__func__.0+0x8ee8>
    80023704:	0000a517          	auipc	a0,0xa
    80023708:	c1450513          	addi	a0,a0,-1004 # 8002d318 <__func__.0+0x2f8>
    8002370c:	6ae070ef          	jal	8002adba <printf>
    80023710:	0002e797          	auipc	a5,0x2e
    80023714:	9017c783          	lbu	a5,-1791(a5) # 80051011 <excpt+0x1>
    80023718:	0000a597          	auipc	a1,0xa
    8002371c:	bd858593          	addi	a1,a1,-1064 # 8002d2f0 <__func__.0+0x2d0>
    80023720:	cf89                	beqz	a5,8002373a <stateen_IMSIC_test_4+0x150>
    80023722:	6498                	ld	a4,8(s1)
    80023724:	47d9                	li	a5,22
    80023726:	0000a597          	auipc	a1,0xa
    8002372a:	bba58593          	addi	a1,a1,-1094 # 8002d2e0 <__func__.0+0x2c0>
    8002372e:	00f70663          	beq	a4,a5,8002373a <stateen_IMSIC_test_4+0x150>
    80023732:	0000a597          	auipc	a1,0xa
    80023736:	bbe58593          	addi	a1,a1,-1090 # 8002d2f0 <__func__.0+0x2d0>
    8002373a:	0000a517          	auipc	a0,0xa
    8002373e:	bf650513          	addi	a0,a0,-1034 # 8002d330 <__func__.0+0x310>
    80023742:	678070ef          	jal	8002adba <printf>
    80023746:	0002e797          	auipc	a5,0x2e
    8002374a:	8cb7c783          	lbu	a5,-1845(a5) # 80051011 <excpt+0x1>
    8002374e:	c789                	beqz	a5,80023758 <stateen_IMSIC_test_4+0x16e>
    80023750:	6498                	ld	a4,8(s1)
    80023752:	47d9                	li	a5,22
    80023754:	00f70c63          	beq	a4,a5,8002376c <stateen_IMSIC_test_4+0x182>
    80023758:	0000a517          	auipc	a0,0xa
    8002375c:	be050513          	addi	a0,a0,-1056 # 8002d338 <__func__.0+0x318>
    80023760:	65a070ef          	jal	8002adba <printf>
    80023764:	02900513          	li	a0,41
    80023768:	340060ef          	jal	80029aa8 <putchar>
    8002376c:	4529                	li	a0,10
    8002376e:	33a060ef          	jal	80029aa8 <putchar>
    80023772:	c015                	beqz	s0,80023796 <stateen_IMSIC_test_4+0x1ac>
    80023774:	0002e417          	auipc	s0,0x2e
    80023778:	89d44403          	lbu	s0,-1891(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    8002377c:	0000a597          	auipc	a1,0xa
    80023780:	b7458593          	addi	a1,a1,-1164 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023784:	cc11                	beqz	s0,800237a0 <stateen_IMSIC_test_4+0x1b6>
    80023786:	6498                	ld	a4,8(s1)
    80023788:	47d9                	li	a5,22
    TEST_END();
    8002378a:	0000a597          	auipc	a1,0xa
    8002378e:	b5658593          	addi	a1,a1,-1194 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss vstopei register cause to VRTI when mstateen.imsic=1 hstateen.imsic=0",
    80023792:	00f70763          	beq	a4,a5,800237a0 <stateen_IMSIC_test_4+0x1b6>
    80023796:	4401                	li	s0,0
    TEST_END();
    80023798:	0000a597          	auipc	a1,0xa
    8002379c:	b5858593          	addi	a1,a1,-1192 # 8002d2f0 <__func__.0+0x2d0>
    800237a0:	0000a517          	auipc	a0,0xa
    800237a4:	bf850513          	addi	a0,a0,-1032 # 8002d398 <__func__.0+0x378>
    800237a8:	612070ef          	jal	8002adba <printf>
    800237ac:	4511                	li	a0,4
    800237ae:	ec0dd0ef          	jal	80000e6e <goto_priv>
    800237b2:	fd9dd0ef          	jal	8000178a <reset_state>

}
    800237b6:	60e2                	ld	ra,24(sp)
    800237b8:	8522                	mv	a0,s0
    800237ba:	6442                	ld	s0,16(sp)
    800237bc:	64a2                	ld	s1,8(sp)
    800237be:	6105                	addi	sp,sp,32
    800237c0:	8082                	ret

00000000800237c2 <stateen_IMSIC_test_5>:

bool stateen_IMSIC_test_5(){
    800237c2:	1101                	addi	sp,sp,-32

    //当mstateen.IMSIC=0,hs mode 不可访问stopei、vstopei寄存器

    TEST_START();
    800237c4:	00009597          	auipc	a1,0x9
    800237c8:	46458593          	addi	a1,a1,1124 # 8002cc28 <__func__.25>
    800237cc:	0000a517          	auipc	a0,0xa
    800237d0:	b3450513          	addi	a0,a0,-1228 # 8002d300 <__func__.0+0x2e0>
bool stateen_IMSIC_test_5(){
    800237d4:	ec06                	sd	ra,24(sp)
    800237d6:	e822                	sd	s0,16(sp)
    800237d8:	e426                	sd	s1,8(sp)
    TEST_START();
    800237da:	5e0070ef          	jal	8002adba <printf>
    800237de:	4529                	li	a0,10
    800237e0:	2c8060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    800237e4:	4511                	li	a0,4
    800237e6:	e88dd0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    800237ea:	4785                	li	a5,1
    800237ec:	17ea                	slli	a5,a5,0x3a
    800237ee:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_HS);
    800237f2:	450d                	li	a0,3
    800237f4:	e7add0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800237f8:	d7add0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800237fc:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023800:	fb4dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register cause to illegal except when mstateen.imsic=0",
    80023804:	08200593          	li	a1,130
    80023808:	00012617          	auipc	a2,0x12
    8002380c:	75860613          	addi	a2,a2,1880 # 80035f60 <__func__.0+0x8f40>
    80023810:	0000a517          	auipc	a0,0xa
    80023814:	b0850513          	addi	a0,a0,-1272 # 8002d318 <__func__.0+0x2f8>
    80023818:	5a2070ef          	jal	8002adba <printf>
    8002381c:	0002d797          	auipc	a5,0x2d
    80023820:	7f57c783          	lbu	a5,2037(a5) # 80051011 <excpt+0x1>
    80023824:	0002d497          	auipc	s1,0x2d
    80023828:	7ec48493          	addi	s1,s1,2028 # 80051010 <excpt>
    8002382c:	0000a597          	auipc	a1,0xa
    80023830:	ac458593          	addi	a1,a1,-1340 # 8002d2f0 <__func__.0+0x2d0>
    80023834:	cf89                	beqz	a5,8002384e <stateen_IMSIC_test_5+0x8c>
    80023836:	6498                	ld	a4,8(s1)
    80023838:	4789                	li	a5,2
    8002383a:	0000a597          	auipc	a1,0xa
    8002383e:	aa658593          	addi	a1,a1,-1370 # 8002d2e0 <__func__.0+0x2c0>
    80023842:	00f70663          	beq	a4,a5,8002384e <stateen_IMSIC_test_5+0x8c>
    80023846:	0000a597          	auipc	a1,0xa
    8002384a:	aaa58593          	addi	a1,a1,-1366 # 8002d2f0 <__func__.0+0x2d0>
    8002384e:	0000a517          	auipc	a0,0xa
    80023852:	ae250513          	addi	a0,a0,-1310 # 8002d330 <__func__.0+0x310>
    80023856:	564070ef          	jal	8002adba <printf>
    8002385a:	0002d797          	auipc	a5,0x2d
    8002385e:	7b77c783          	lbu	a5,1975(a5) # 80051011 <excpt+0x1>
    80023862:	c789                	beqz	a5,8002386c <stateen_IMSIC_test_5+0xaa>
    80023864:	6498                	ld	a4,8(s1)
    80023866:	4789                	li	a5,2
    80023868:	00f70c63          	beq	a4,a5,80023880 <stateen_IMSIC_test_5+0xbe>
    8002386c:	0000a517          	auipc	a0,0xa
    80023870:	acc50513          	addi	a0,a0,-1332 # 8002d338 <__func__.0+0x318>
    80023874:	546070ef          	jal	8002adba <printf>
    80023878:	02900513          	li	a0,41
    8002387c:	22c060ef          	jal	80029aa8 <putchar>
    80023880:	4529                	li	a0,10
    80023882:	226060ef          	jal	80029aa8 <putchar>
    80023886:	0002d797          	auipc	a5,0x2d
    8002388a:	78b7c783          	lbu	a5,1931(a5) # 80051011 <excpt+0x1>
    8002388e:	4401                	li	s0,0
    80023890:	c789                	beqz	a5,8002389a <stateen_IMSIC_test_5+0xd8>
    80023892:	6480                	ld	s0,8(s1)
    80023894:	1479                	addi	s0,s0,-2
    80023896:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8002389a:	450d                	li	a0,3
    8002389c:	dd2dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800238a0:	cd2dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    800238a4:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    800238a8:	f0cdd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    800238ac:	08200593          	li	a1,130
    800238b0:	00012617          	auipc	a2,0x12
    800238b4:	70060613          	addi	a2,a2,1792 # 80035fb0 <__func__.0+0x8f90>
    800238b8:	0000a517          	auipc	a0,0xa
    800238bc:	a6050513          	addi	a0,a0,-1440 # 8002d318 <__func__.0+0x2f8>
    800238c0:	4fa070ef          	jal	8002adba <printf>
    800238c4:	0002d797          	auipc	a5,0x2d
    800238c8:	74d7c783          	lbu	a5,1869(a5) # 80051011 <excpt+0x1>
    800238cc:	0000a597          	auipc	a1,0xa
    800238d0:	a2458593          	addi	a1,a1,-1500 # 8002d2f0 <__func__.0+0x2d0>
    800238d4:	cf89                	beqz	a5,800238ee <stateen_IMSIC_test_5+0x12c>
    800238d6:	6498                	ld	a4,8(s1)
    800238d8:	4789                	li	a5,2
    800238da:	0000a597          	auipc	a1,0xa
    800238de:	a0658593          	addi	a1,a1,-1530 # 8002d2e0 <__func__.0+0x2c0>
    800238e2:	00f70663          	beq	a4,a5,800238ee <stateen_IMSIC_test_5+0x12c>
    800238e6:	0000a597          	auipc	a1,0xa
    800238ea:	a0a58593          	addi	a1,a1,-1526 # 8002d2f0 <__func__.0+0x2d0>
    800238ee:	0000a517          	auipc	a0,0xa
    800238f2:	a4250513          	addi	a0,a0,-1470 # 8002d330 <__func__.0+0x310>
    800238f6:	4c4070ef          	jal	8002adba <printf>
    800238fa:	0002d797          	auipc	a5,0x2d
    800238fe:	7177c783          	lbu	a5,1815(a5) # 80051011 <excpt+0x1>
    80023902:	c789                	beqz	a5,8002390c <stateen_IMSIC_test_5+0x14a>
    80023904:	6498                	ld	a4,8(s1)
    80023906:	4789                	li	a5,2
    80023908:	00f70c63          	beq	a4,a5,80023920 <stateen_IMSIC_test_5+0x15e>
    8002390c:	0000a517          	auipc	a0,0xa
    80023910:	a2c50513          	addi	a0,a0,-1492 # 8002d338 <__func__.0+0x318>
    80023914:	4a6070ef          	jal	8002adba <printf>
    80023918:	02900513          	li	a0,41
    8002391c:	18c060ef          	jal	80029aa8 <putchar>
    80023920:	4529                	li	a0,10
    80023922:	186060ef          	jal	80029aa8 <putchar>
    80023926:	c015                	beqz	s0,8002394a <stateen_IMSIC_test_5+0x188>
    80023928:	0002d417          	auipc	s0,0x2d
    8002392c:	6e944403          	lbu	s0,1769(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80023930:	0000a597          	auipc	a1,0xa
    80023934:	9c058593          	addi	a1,a1,-1600 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023938:	cc11                	beqz	s0,80023954 <stateen_IMSIC_test_5+0x192>
    8002393a:	6498                	ld	a4,8(s1)
    8002393c:	4789                	li	a5,2
    TEST_END();
    8002393e:	0000a597          	auipc	a1,0xa
    80023942:	9a258593          	addi	a1,a1,-1630 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss vstopei register cause to illegal except when mstateen.imsic=0",
    80023946:	00f70763          	beq	a4,a5,80023954 <stateen_IMSIC_test_5+0x192>
    8002394a:	4401                	li	s0,0
    TEST_END();
    8002394c:	0000a597          	auipc	a1,0xa
    80023950:	9a458593          	addi	a1,a1,-1628 # 8002d2f0 <__func__.0+0x2d0>
    80023954:	0000a517          	auipc	a0,0xa
    80023958:	a4450513          	addi	a0,a0,-1468 # 8002d398 <__func__.0+0x378>
    8002395c:	45e070ef          	jal	8002adba <printf>
    80023960:	4511                	li	a0,4
    80023962:	d0cdd0ef          	jal	80000e6e <goto_priv>
    80023966:	e25dd0ef          	jal	8000178a <reset_state>

}
    8002396a:	60e2                	ld	ra,24(sp)
    8002396c:	8522                	mv	a0,s0
    8002396e:	6442                	ld	s0,16(sp)
    80023970:	64a2                	ld	s1,8(sp)
    80023972:	6105                	addi	sp,sp,32
    80023974:	8082                	ret

0000000080023976 <stateen_IMSIC_test_6>:


bool stateen_IMSIC_test_6(){
    80023976:	1101                	addi	sp,sp,-32

    TEST_START();
    80023978:	00009597          	auipc	a1,0x9
    8002397c:	2c858593          	addi	a1,a1,712 # 8002cc40 <__func__.24>
    80023980:	0000a517          	auipc	a0,0xa
    80023984:	98050513          	addi	a0,a0,-1664 # 8002d300 <__func__.0+0x2e0>
bool stateen_IMSIC_test_6(){
    80023988:	ec06                	sd	ra,24(sp)
    8002398a:	e822                	sd	s0,16(sp)
    8002398c:	e426                	sd	s1,8(sp)
    TEST_START();
    8002398e:	42c070ef          	jal	8002adba <printf>
    80023992:	4529                	li	a0,10
    80023994:	114060ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80023998:	4511                	li	a0,4
    8002399a:	cd4dd0ef          	jal	80000e6e <goto_priv>
    //当mstateen.IMSIC=1,v=0时,可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    8002399e:	4785                	li	a5,1
    800239a0:	17ea                	slli	a5,a5,0x3a
    800239a2:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    800239a6:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    800239aa:	450d                	li	a0,3
    800239ac:	cc2dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800239b0:	bc2dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    800239b4:	15c027f3          	csrr	a5,stopei

    excpt_info();
    800239b8:	dfcdd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    800239bc:	08200593          	li	a1,130
    800239c0:	00012617          	auipc	a2,0x12
    800239c4:	64060613          	addi	a2,a2,1600 # 80036000 <__func__.0+0x8fe0>
    800239c8:	0000a517          	auipc	a0,0xa
    800239cc:	95050513          	addi	a0,a0,-1712 # 8002d318 <__func__.0+0x2f8>
    800239d0:	3ea070ef          	jal	8002adba <printf>
    800239d4:	0002d797          	auipc	a5,0x2d
    800239d8:	63d7c783          	lbu	a5,1597(a5) # 80051011 <excpt+0x1>
    800239dc:	0000a597          	auipc	a1,0xa
    800239e0:	90458593          	addi	a1,a1,-1788 # 8002d2e0 <__func__.0+0x2c0>
    800239e4:	c789                	beqz	a5,800239ee <stateen_IMSIC_test_6+0x78>
    800239e6:	0000a597          	auipc	a1,0xa
    800239ea:	90a58593          	addi	a1,a1,-1782 # 8002d2f0 <__func__.0+0x2d0>
    800239ee:	0000a517          	auipc	a0,0xa
    800239f2:	94250513          	addi	a0,a0,-1726 # 8002d330 <__func__.0+0x310>
    800239f6:	3c4070ef          	jal	8002adba <printf>
    800239fa:	0002d797          	auipc	a5,0x2d
    800239fe:	6177c783          	lbu	a5,1559(a5) # 80051011 <excpt+0x1>
    80023a02:	2c079e63          	bnez	a5,80023cde <stateen_IMSIC_test_6+0x368>
    80023a06:	4529                	li	a0,10
    80023a08:	0a0060ef          	jal	80029aa8 <putchar>
    80023a0c:	0002d497          	auipc	s1,0x2d
    80023a10:	6054c483          	lbu	s1,1541(s1) # 80051011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPEI);
    80023a14:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023a18:	d9cdd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023a1c:	08200593          	li	a1,130
    80023a20:	00012617          	auipc	a2,0x12
    80023a24:	63860613          	addi	a2,a2,1592 # 80036058 <__func__.0+0x9038>
    80023a28:	0000a517          	auipc	a0,0xa
    80023a2c:	8f050513          	addi	a0,a0,-1808 # 8002d318 <__func__.0+0x2f8>
    80023a30:	38a070ef          	jal	8002adba <printf>
    80023a34:	0002d797          	auipc	a5,0x2d
    80023a38:	5dd7c783          	lbu	a5,1501(a5) # 80051011 <excpt+0x1>
    80023a3c:	0000a597          	auipc	a1,0xa
    80023a40:	8b458593          	addi	a1,a1,-1868 # 8002d2f0 <__func__.0+0x2d0>
    80023a44:	e789                	bnez	a5,80023a4e <stateen_IMSIC_test_6+0xd8>
    80023a46:	0000a597          	auipc	a1,0xa
    80023a4a:	89a58593          	addi	a1,a1,-1894 # 8002d2e0 <__func__.0+0x2c0>
    80023a4e:	0000a517          	auipc	a0,0xa
    80023a52:	8e250513          	addi	a0,a0,-1822 # 8002d330 <__func__.0+0x310>
    80023a56:	364070ef          	jal	8002adba <printf>
    80023a5a:	0002d797          	auipc	a5,0x2d
    80023a5e:	5b77c783          	lbu	a5,1463(a5) # 80051011 <excpt+0x1>
    80023a62:	26079363          	bnez	a5,80023cc8 <stateen_IMSIC_test_6+0x352>
    80023a66:	4529                	li	a0,10
    80023a68:	040060ef          	jal	80029aa8 <putchar>
    80023a6c:	4401                	li	s0,0
    80023a6e:	e499                	bnez	s1,80023a7c <stateen_IMSIC_test_6+0x106>
    80023a70:	0002d417          	auipc	s0,0x2d
    80023a74:	5a144403          	lbu	s0,1441(s0) # 80051011 <excpt+0x1>
    80023a78:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80023a7c:	4505                	li	a0,1
    80023a7e:	bf0dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023a82:	af0dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023a86:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023a8a:	d2add0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023a8e:	08200593          	li	a1,130
    80023a92:	00012617          	auipc	a2,0x12
    80023a96:	61e60613          	addi	a2,a2,1566 # 800360b0 <__func__.0+0x9090>
    80023a9a:	0000a517          	auipc	a0,0xa
    80023a9e:	87e50513          	addi	a0,a0,-1922 # 8002d318 <__func__.0+0x2f8>
    80023aa2:	318070ef          	jal	8002adba <printf>
    80023aa6:	0002d797          	auipc	a5,0x2d
    80023aaa:	56b7c783          	lbu	a5,1387(a5) # 80051011 <excpt+0x1>
    80023aae:	0000a597          	auipc	a1,0xa
    80023ab2:	84258593          	addi	a1,a1,-1982 # 8002d2f0 <__func__.0+0x2d0>
    80023ab6:	e789                	bnez	a5,80023ac0 <stateen_IMSIC_test_6+0x14a>
    80023ab8:	0000a597          	auipc	a1,0xa
    80023abc:	82858593          	addi	a1,a1,-2008 # 8002d2e0 <__func__.0+0x2c0>
    80023ac0:	0000a517          	auipc	a0,0xa
    80023ac4:	87050513          	addi	a0,a0,-1936 # 8002d330 <__func__.0+0x310>
    80023ac8:	2f2070ef          	jal	8002adba <printf>
    80023acc:	0002d797          	auipc	a5,0x2d
    80023ad0:	5457c783          	lbu	a5,1349(a5) # 80051011 <excpt+0x1>
    80023ad4:	1c079f63          	bnez	a5,80023cb2 <stateen_IMSIC_test_6+0x33c>
    80023ad8:	4529                	li	a0,10
    80023ada:	7cf050ef          	jal	80029aa8 <putchar>
    80023ade:	c419                	beqz	s0,80023aec <stateen_IMSIC_test_6+0x176>
    80023ae0:	0002d417          	auipc	s0,0x2d
    80023ae4:	53144403          	lbu	s0,1329(s0) # 80051011 <excpt+0x1>
    80023ae8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80023aec:	4505                	li	a0,1
    80023aee:	b80dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023af2:	a80dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023af6:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023afa:	cbadd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023afe:	08200593          	li	a1,130
    80023b02:	00012617          	auipc	a2,0x12
    80023b06:	61660613          	addi	a2,a2,1558 # 80036118 <__func__.0+0x90f8>
    80023b0a:	0000a517          	auipc	a0,0xa
    80023b0e:	80e50513          	addi	a0,a0,-2034 # 8002d318 <__func__.0+0x2f8>
    80023b12:	2a8070ef          	jal	8002adba <printf>
    80023b16:	0002d797          	auipc	a5,0x2d
    80023b1a:	4fb7c783          	lbu	a5,1275(a5) # 80051011 <excpt+0x1>
    80023b1e:	00009597          	auipc	a1,0x9
    80023b22:	7d258593          	addi	a1,a1,2002 # 8002d2f0 <__func__.0+0x2d0>
    80023b26:	e789                	bnez	a5,80023b30 <stateen_IMSIC_test_6+0x1ba>
    80023b28:	00009597          	auipc	a1,0x9
    80023b2c:	7b858593          	addi	a1,a1,1976 # 8002d2e0 <__func__.0+0x2c0>
    80023b30:	0000a517          	auipc	a0,0xa
    80023b34:	80050513          	addi	a0,a0,-2048 # 8002d330 <__func__.0+0x310>
    80023b38:	282070ef          	jal	8002adba <printf>
    80023b3c:	0002d797          	auipc	a5,0x2d
    80023b40:	4d57c783          	lbu	a5,1237(a5) # 80051011 <excpt+0x1>
    80023b44:	14079c63          	bnez	a5,80023c9c <stateen_IMSIC_test_6+0x326>
    80023b48:	4529                	li	a0,10
    80023b4a:	75f050ef          	jal	80029aa8 <putchar>
    80023b4e:	c419                	beqz	s0,80023b5c <stateen_IMSIC_test_6+0x1e6>
    80023b50:	0002d417          	auipc	s0,0x2d
    80023b54:	4c144403          	lbu	s0,1217(s0) # 80051011 <excpt+0x1>
    80023b58:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80023b5c:	4511                	li	a0,4
    80023b5e:	b10dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023b62:	a10dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023b66:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023b6a:	c4add0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023b6e:	08200593          	li	a1,130
    80023b72:	00012617          	auipc	a2,0x12
    80023b76:	60e60613          	addi	a2,a2,1550 # 80036180 <__func__.0+0x9160>
    80023b7a:	00009517          	auipc	a0,0x9
    80023b7e:	79e50513          	addi	a0,a0,1950 # 8002d318 <__func__.0+0x2f8>
    80023b82:	238070ef          	jal	8002adba <printf>
    80023b86:	0002d797          	auipc	a5,0x2d
    80023b8a:	48b7c783          	lbu	a5,1163(a5) # 80051011 <excpt+0x1>
    80023b8e:	00009597          	auipc	a1,0x9
    80023b92:	76258593          	addi	a1,a1,1890 # 8002d2f0 <__func__.0+0x2d0>
    80023b96:	e789                	bnez	a5,80023ba0 <stateen_IMSIC_test_6+0x22a>
    80023b98:	00009597          	auipc	a1,0x9
    80023b9c:	74858593          	addi	a1,a1,1864 # 8002d2e0 <__func__.0+0x2c0>
    80023ba0:	00009517          	auipc	a0,0x9
    80023ba4:	79050513          	addi	a0,a0,1936 # 8002d330 <__func__.0+0x310>
    80023ba8:	212070ef          	jal	8002adba <printf>
    80023bac:	0002d797          	auipc	a5,0x2d
    80023bb0:	4657c783          	lbu	a5,1125(a5) # 80051011 <excpt+0x1>
    80023bb4:	0c079963          	bnez	a5,80023c86 <stateen_IMSIC_test_6+0x310>
    80023bb8:	4529                	li	a0,10
    80023bba:	6ef050ef          	jal	80029aa8 <putchar>
    80023bbe:	c419                	beqz	s0,80023bcc <stateen_IMSIC_test_6+0x256>
    80023bc0:	0002d417          	auipc	s0,0x2d
    80023bc4:	45144403          	lbu	s0,1105(s0) # 80051011 <excpt+0x1>
    80023bc8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80023bcc:	4511                	li	a0,4
    80023bce:	aa0dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023bd2:	9a0dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023bd6:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023bda:	bdadd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023bde:	08200593          	li	a1,130
    80023be2:	00012617          	auipc	a2,0x12
    80023be6:	5f660613          	addi	a2,a2,1526 # 800361d8 <__func__.0+0x91b8>
    80023bea:	00009517          	auipc	a0,0x9
    80023bee:	72e50513          	addi	a0,a0,1838 # 8002d318 <__func__.0+0x2f8>
    80023bf2:	1c8070ef          	jal	8002adba <printf>
    80023bf6:	0002d797          	auipc	a5,0x2d
    80023bfa:	41b7c783          	lbu	a5,1051(a5) # 80051011 <excpt+0x1>
    80023bfe:	00009597          	auipc	a1,0x9
    80023c02:	6f258593          	addi	a1,a1,1778 # 8002d2f0 <__func__.0+0x2d0>
    80023c06:	e789                	bnez	a5,80023c10 <stateen_IMSIC_test_6+0x29a>
    80023c08:	00009597          	auipc	a1,0x9
    80023c0c:	6d858593          	addi	a1,a1,1752 # 8002d2e0 <__func__.0+0x2c0>
    80023c10:	00009517          	auipc	a0,0x9
    80023c14:	72050513          	addi	a0,a0,1824 # 8002d330 <__func__.0+0x310>
    80023c18:	1a2070ef          	jal	8002adba <printf>
    80023c1c:	0002d797          	auipc	a5,0x2d
    80023c20:	3f57c783          	lbu	a5,1013(a5) # 80051011 <excpt+0x1>
    80023c24:	e7b1                	bnez	a5,80023c70 <stateen_IMSIC_test_6+0x2fa>
    80023c26:	4529                	li	a0,10
    80023c28:	681050ef          	jal	80029aa8 <putchar>
    80023c2c:	c411                	beqz	s0,80023c38 <stateen_IMSIC_test_6+0x2c2>
    80023c2e:	0002d797          	auipc	a5,0x2d
    80023c32:	3e37c783          	lbu	a5,995(a5) # 80051011 <excpt+0x1>
    80023c36:	c79d                	beqz	a5,80023c64 <stateen_IMSIC_test_6+0x2ee>
    80023c38:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80023c3a:	00009597          	auipc	a1,0x9
    80023c3e:	6b658593          	addi	a1,a1,1718 # 8002d2f0 <__func__.0+0x2d0>
    80023c42:	00009517          	auipc	a0,0x9
    80023c46:	75650513          	addi	a0,a0,1878 # 8002d398 <__func__.0+0x378>
    80023c4a:	170070ef          	jal	8002adba <printf>
    80023c4e:	4511                	li	a0,4
    80023c50:	a1edd0ef          	jal	80000e6e <goto_priv>
    80023c54:	b37dd0ef          	jal	8000178a <reset_state>

}
    80023c58:	60e2                	ld	ra,24(sp)
    80023c5a:	8522                	mv	a0,s0
    80023c5c:	6442                	ld	s0,16(sp)
    80023c5e:	64a2                	ld	s1,8(sp)
    80023c60:	6105                	addi	sp,sp,32
    80023c62:	8082                	ret
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023c64:	4405                	li	s0,1
    TEST_END();
    80023c66:	00009597          	auipc	a1,0x9
    80023c6a:	67a58593          	addi	a1,a1,1658 # 8002d2e0 <__func__.0+0x2c0>
    80023c6e:	bfd1                	j	80023c42 <stateen_IMSIC_test_6+0x2cc>
    TEST_ASSERT("m mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023c70:	00009517          	auipc	a0,0x9
    80023c74:	6c850513          	addi	a0,a0,1736 # 8002d338 <__func__.0+0x318>
    80023c78:	142070ef          	jal	8002adba <printf>
    80023c7c:	02900513          	li	a0,41
    80023c80:	629050ef          	jal	80029aa8 <putchar>
    80023c84:	b74d                	j	80023c26 <stateen_IMSIC_test_6+0x2b0>
    TEST_ASSERT("m mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=0",
    80023c86:	00009517          	auipc	a0,0x9
    80023c8a:	6b250513          	addi	a0,a0,1714 # 8002d338 <__func__.0+0x318>
    80023c8e:	12c070ef          	jal	8002adba <printf>
    80023c92:	02900513          	li	a0,41
    80023c96:	613050ef          	jal	80029aa8 <putchar>
    80023c9a:	bf39                	j	80023bb8 <stateen_IMSIC_test_6+0x242>
    TEST_ASSERT("hu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=0 sstateen.imsic=0",
    80023c9c:	00009517          	auipc	a0,0x9
    80023ca0:	69c50513          	addi	a0,a0,1692 # 8002d338 <__func__.0+0x318>
    80023ca4:	116070ef          	jal	8002adba <printf>
    80023ca8:	02900513          	li	a0,41
    80023cac:	5fd050ef          	jal	80029aa8 <putchar>
    80023cb0:	bd61                	j	80023b48 <stateen_IMSIC_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss stopei register successful when mstateen.imsic=1  hstateen.imsic=0 sstateen.imsic=0 ",
    80023cb2:	00009517          	auipc	a0,0x9
    80023cb6:	68650513          	addi	a0,a0,1670 # 8002d338 <__func__.0+0x318>
    80023cba:	100070ef          	jal	8002adba <printf>
    80023cbe:	02900513          	li	a0,41
    80023cc2:	5e7050ef          	jal	80029aa8 <putchar>
    80023cc6:	bd09                	j	80023ad8 <stateen_IMSIC_test_6+0x162>
    TEST_ASSERT("hs mode accesss vstopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023cc8:	00009517          	auipc	a0,0x9
    80023ccc:	67050513          	addi	a0,a0,1648 # 8002d338 <__func__.0+0x318>
    80023cd0:	0ea070ef          	jal	8002adba <printf>
    80023cd4:	02900513          	li	a0,41
    80023cd8:	5d1050ef          	jal	80029aa8 <putchar>
    80023cdc:	b369                	j	80023a66 <stateen_IMSIC_test_6+0xf0>
    TEST_ASSERT("hs mode accesss stopei register successful when  mstateen.imsic=1 hstateen.imsic=0",
    80023cde:	00009517          	auipc	a0,0x9
    80023ce2:	65a50513          	addi	a0,a0,1626 # 8002d338 <__func__.0+0x318>
    80023ce6:	0d4070ef          	jal	8002adba <printf>
    80023cea:	02900513          	li	a0,41
    80023cee:	5bb050ef          	jal	80029aa8 <putchar>
    80023cf2:	bb11                	j	80023a06 <stateen_IMSIC_test_6+0x90>

0000000080023cf4 <stateen_IMSIC_test_7>:


bool stateen_IMSIC_test_7(){
    80023cf4:	1101                	addi	sp,sp,-32

    TEST_START();
    80023cf6:	00009597          	auipc	a1,0x9
    80023cfa:	f6258593          	addi	a1,a1,-158 # 8002cc58 <__func__.23>
    80023cfe:	00009517          	auipc	a0,0x9
    80023d02:	60250513          	addi	a0,a0,1538 # 8002d300 <__func__.0+0x2e0>
bool stateen_IMSIC_test_7(){
    80023d06:	ec06                	sd	ra,24(sp)
    80023d08:	e822                	sd	s0,16(sp)
    80023d0a:	e426                	sd	s1,8(sp)
    TEST_START();
    80023d0c:	0ae070ef          	jal	8002adba <printf>
    80023d10:	4529                	li	a0,10
    80023d12:	597050ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80023d16:	4511                	li	a0,4
    80023d18:	956dd0ef          	jal	80000e6e <goto_priv>
    //当mstateen.IMSIC=1 hstateen.IMSIC=1,v=1 时可访问stopei、vstopei寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_IMSIC);
    80023d1c:	4785                	li	a5,1
    80023d1e:	17ea                	slli	a5,a5,0x3a
    80023d20:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_IMSIC);
    80023d24:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    80023d28:	4509                	li	a0,2
    80023d2a:	944dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023d2e:	844dd0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023d32:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023d36:	a7edd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023d3a:	08200593          	li	a1,130
    80023d3e:	00012617          	auipc	a2,0x12
    80023d42:	4f260613          	addi	a2,a2,1266 # 80036230 <__func__.0+0x9210>
    80023d46:	00009517          	auipc	a0,0x9
    80023d4a:	5d250513          	addi	a0,a0,1490 # 8002d318 <__func__.0+0x2f8>
    80023d4e:	06c070ef          	jal	8002adba <printf>
    80023d52:	0002d797          	auipc	a5,0x2d
    80023d56:	2bf7c783          	lbu	a5,703(a5) # 80051011 <excpt+0x1>
    80023d5a:	00009597          	auipc	a1,0x9
    80023d5e:	58658593          	addi	a1,a1,1414 # 8002d2e0 <__func__.0+0x2c0>
    80023d62:	c789                	beqz	a5,80023d6c <stateen_IMSIC_test_7+0x78>
    80023d64:	00009597          	auipc	a1,0x9
    80023d68:	58c58593          	addi	a1,a1,1420 # 8002d2f0 <__func__.0+0x2d0>
    80023d6c:	00009517          	auipc	a0,0x9
    80023d70:	5c450513          	addi	a0,a0,1476 # 8002d330 <__func__.0+0x310>
    80023d74:	046070ef          	jal	8002adba <printf>
    80023d78:	0002d797          	auipc	a5,0x2d
    80023d7c:	2997c783          	lbu	a5,665(a5) # 80051011 <excpt+0x1>
    80023d80:	1c079d63          	bnez	a5,80023f5a <stateen_IMSIC_test_7+0x266>
    80023d84:	4529                	li	a0,10
    80023d86:	523050ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80023d8a:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023d8c:	0002d497          	auipc	s1,0x2d
    80023d90:	2854c483          	lbu	s1,645(s1) # 80051011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80023d94:	8dadd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023d98:	fdbdc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023d9c:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023da0:	a14dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023da4:	08200593          	li	a1,130
    80023da8:	00012617          	auipc	a2,0x12
    80023dac:	4e060613          	addi	a2,a2,1248 # 80036288 <__func__.0+0x9268>
    80023db0:	00009517          	auipc	a0,0x9
    80023db4:	56850513          	addi	a0,a0,1384 # 8002d318 <__func__.0+0x2f8>
    80023db8:	002070ef          	jal	8002adba <printf>
    80023dbc:	0002d797          	auipc	a5,0x2d
    80023dc0:	2557c783          	lbu	a5,597(a5) # 80051011 <excpt+0x1>
    80023dc4:	00009597          	auipc	a1,0x9
    80023dc8:	52c58593          	addi	a1,a1,1324 # 8002d2f0 <__func__.0+0x2d0>
    80023dcc:	e789                	bnez	a5,80023dd6 <stateen_IMSIC_test_7+0xe2>
    80023dce:	00009597          	auipc	a1,0x9
    80023dd2:	51258593          	addi	a1,a1,1298 # 8002d2e0 <__func__.0+0x2c0>
    80023dd6:	00009517          	auipc	a0,0x9
    80023dda:	55a50513          	addi	a0,a0,1370 # 8002d330 <__func__.0+0x310>
    80023dde:	7dd060ef          	jal	8002adba <printf>
    80023de2:	0002d797          	auipc	a5,0x2d
    80023de6:	22f7c783          	lbu	a5,559(a5) # 80051011 <excpt+0x1>
    80023dea:	14079d63          	bnez	a5,80023f44 <stateen_IMSIC_test_7+0x250>
    80023dee:	4529                	li	a0,10
    80023df0:	4b9050ef          	jal	80029aa8 <putchar>
    80023df4:	4401                	li	s0,0
    80023df6:	e499                	bnez	s1,80023e04 <stateen_IMSIC_test_7+0x110>
    80023df8:	0002d417          	auipc	s0,0x2d
    80023dfc:	21944403          	lbu	s0,537(s0) # 80051011 <excpt+0x1>
    80023e00:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80023e04:	4501                	li	a0,0
    80023e06:	868dd0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023e0a:	f69dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPEI);
    80023e0e:	15c027f3          	csrr	a5,stopei

    excpt_info();
    80023e12:	9a2dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023e16:	08200593          	li	a1,130
    80023e1a:	00012617          	auipc	a2,0x12
    80023e1e:	4c660613          	addi	a2,a2,1222 # 800362e0 <__func__.0+0x92c0>
    80023e22:	00009517          	auipc	a0,0x9
    80023e26:	4f650513          	addi	a0,a0,1270 # 8002d318 <__func__.0+0x2f8>
    80023e2a:	791060ef          	jal	8002adba <printf>
    80023e2e:	0002d797          	auipc	a5,0x2d
    80023e32:	1e37c783          	lbu	a5,483(a5) # 80051011 <excpt+0x1>
    80023e36:	00009597          	auipc	a1,0x9
    80023e3a:	4ba58593          	addi	a1,a1,1210 # 8002d2f0 <__func__.0+0x2d0>
    80023e3e:	e789                	bnez	a5,80023e48 <stateen_IMSIC_test_7+0x154>
    80023e40:	00009597          	auipc	a1,0x9
    80023e44:	4a058593          	addi	a1,a1,1184 # 8002d2e0 <__func__.0+0x2c0>
    80023e48:	00009517          	auipc	a0,0x9
    80023e4c:	4e850513          	addi	a0,a0,1256 # 8002d330 <__func__.0+0x310>
    80023e50:	76b060ef          	jal	8002adba <printf>
    80023e54:	0002d797          	auipc	a5,0x2d
    80023e58:	1bd7c783          	lbu	a5,445(a5) # 80051011 <excpt+0x1>
    80023e5c:	0c079963          	bnez	a5,80023f2e <stateen_IMSIC_test_7+0x23a>
    80023e60:	4529                	li	a0,10
    80023e62:	447050ef          	jal	80029aa8 <putchar>
    80023e66:	c419                	beqz	s0,80023e74 <stateen_IMSIC_test_7+0x180>
    80023e68:	0002d417          	auipc	s0,0x2d
    80023e6c:	1a944403          	lbu	s0,425(s0) # 80051011 <excpt+0x1>
    80023e70:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80023e74:	4501                	li	a0,0
    80023e76:	ff9dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023e7a:	ef9dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPEI);
    80023e7e:	25c027f3          	csrr	a5,vstopei

    excpt_info();
    80023e82:	932dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023e86:	08200593          	li	a1,130
    80023e8a:	00012617          	auipc	a2,0x12
    80023e8e:	4ae60613          	addi	a2,a2,1198 # 80036338 <__func__.0+0x9318>
    80023e92:	00009517          	auipc	a0,0x9
    80023e96:	48650513          	addi	a0,a0,1158 # 8002d318 <__func__.0+0x2f8>
    80023e9a:	721060ef          	jal	8002adba <printf>
    80023e9e:	0002d797          	auipc	a5,0x2d
    80023ea2:	1737c783          	lbu	a5,371(a5) # 80051011 <excpt+0x1>
    80023ea6:	00009597          	auipc	a1,0x9
    80023eaa:	44a58593          	addi	a1,a1,1098 # 8002d2f0 <__func__.0+0x2d0>
    80023eae:	e789                	bnez	a5,80023eb8 <stateen_IMSIC_test_7+0x1c4>
    80023eb0:	00009597          	auipc	a1,0x9
    80023eb4:	43058593          	addi	a1,a1,1072 # 8002d2e0 <__func__.0+0x2c0>
    80023eb8:	00009517          	auipc	a0,0x9
    80023ebc:	47850513          	addi	a0,a0,1144 # 8002d330 <__func__.0+0x310>
    80023ec0:	6fb060ef          	jal	8002adba <printf>
    80023ec4:	0002d797          	auipc	a5,0x2d
    80023ec8:	14d7c783          	lbu	a5,333(a5) # 80051011 <excpt+0x1>
    80023ecc:	e7b1                	bnez	a5,80023f18 <stateen_IMSIC_test_7+0x224>
    80023ece:	4529                	li	a0,10
    80023ed0:	3d9050ef          	jal	80029aa8 <putchar>
    80023ed4:	c411                	beqz	s0,80023ee0 <stateen_IMSIC_test_7+0x1ec>
    80023ed6:	0002d797          	auipc	a5,0x2d
    80023eda:	13b7c783          	lbu	a5,315(a5) # 80051011 <excpt+0x1>
    80023ede:	c79d                	beqz	a5,80023f0c <stateen_IMSIC_test_7+0x218>
    80023ee0:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80023ee2:	00009597          	auipc	a1,0x9
    80023ee6:	40e58593          	addi	a1,a1,1038 # 8002d2f0 <__func__.0+0x2d0>
    80023eea:	00009517          	auipc	a0,0x9
    80023eee:	4ae50513          	addi	a0,a0,1198 # 8002d398 <__func__.0+0x378>
    80023ef2:	6c9060ef          	jal	8002adba <printf>
    80023ef6:	4511                	li	a0,4
    80023ef8:	f77dc0ef          	jal	80000e6e <goto_priv>
    80023efc:	88fdd0ef          	jal	8000178a <reset_state>
}
    80023f00:	60e2                	ld	ra,24(sp)
    80023f02:	8522                	mv	a0,s0
    80023f04:	6442                	ld	s0,16(sp)
    80023f06:	64a2                	ld	s1,8(sp)
    80023f08:	6105                	addi	sp,sp,32
    80023f0a:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f0c:	4405                	li	s0,1
    TEST_END();
    80023f0e:	00009597          	auipc	a1,0x9
    80023f12:	3d258593          	addi	a1,a1,978 # 8002d2e0 <__func__.0+0x2c0>
    80023f16:	bfd1                	j	80023eea <stateen_IMSIC_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f18:	00009517          	auipc	a0,0x9
    80023f1c:	42050513          	addi	a0,a0,1056 # 8002d338 <__func__.0+0x318>
    80023f20:	69b060ef          	jal	8002adba <printf>
    80023f24:	02900513          	li	a0,41
    80023f28:	381050ef          	jal	80029aa8 <putchar>
    80023f2c:	b74d                	j	80023ece <stateen_IMSIC_test_7+0x1da>
    TEST_ASSERT("vu mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f2e:	00009517          	auipc	a0,0x9
    80023f32:	40a50513          	addi	a0,a0,1034 # 8002d338 <__func__.0+0x318>
    80023f36:	685060ef          	jal	8002adba <printf>
    80023f3a:	02900513          	li	a0,41
    80023f3e:	36b050ef          	jal	80029aa8 <putchar>
    80023f42:	bf39                	j	80023e60 <stateen_IMSIC_test_7+0x16c>
    TEST_ASSERT("vs mode accesss vstopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f44:	00009517          	auipc	a0,0x9
    80023f48:	3f450513          	addi	a0,a0,1012 # 8002d338 <__func__.0+0x318>
    80023f4c:	66f060ef          	jal	8002adba <printf>
    80023f50:	02900513          	li	a0,41
    80023f54:	355050ef          	jal	80029aa8 <putchar>
    80023f58:	bd59                	j	80023dee <stateen_IMSIC_test_7+0xfa>
    TEST_ASSERT("vs mode accesss stopei register successful when mstateen.imsic=1 hstateen.imsic=1",
    80023f5a:	00009517          	auipc	a0,0x9
    80023f5e:	3de50513          	addi	a0,a0,990 # 8002d338 <__func__.0+0x318>
    80023f62:	659060ef          	jal	8002adba <printf>
    80023f66:	02900513          	li	a0,41
    80023f6a:	33f050ef          	jal	80029aa8 <putchar>
    80023f6e:	bd19                	j	80023d84 <stateen_IMSIC_test_7+0x90>

0000000080023f70 <stateen_AIA_test_1>:



//--

bool stateen_AIA_test_1(){
    80023f70:	1101                	addi	sp,sp,-32

    TEST_START();
    80023f72:	00009597          	auipc	a1,0x9
    80023f76:	cfe58593          	addi	a1,a1,-770 # 8002cc70 <__func__.22>
    80023f7a:	00009517          	auipc	a0,0x9
    80023f7e:	38650513          	addi	a0,a0,902 # 8002d300 <__func__.0+0x2e0>
bool stateen_AIA_test_1(){
    80023f82:	ec06                	sd	ra,24(sp)
    80023f84:	e822                	sd	s0,16(sp)
    80023f86:	e426                	sd	s1,8(sp)
    TEST_START();
    80023f88:	633060ef          	jal	8002adba <printf>
    80023f8c:	4529                	li	a0,10
    80023f8e:	31b050ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80023f92:	4511                	li	a0,4
    80023f94:	edbdc0ef          	jal	80000e6e <goto_priv>
    //当mstateen.AIA=0,hu mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80023f98:	4785                	li	a5,1
    80023f9a:	17ee                	slli	a5,a5,0x3b
    80023f9c:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80023fa0:	4505                	li	a0,1
    80023fa2:	ecddc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80023fa6:	dcddc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80023faa:	608027f3          	csrr	a5,hvien

    excpt_info();
    80023fae:	806dd0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss hvien register cause to illegal except when mstateen.aia=0",
    80023fb2:	08200593          	li	a1,130
    80023fb6:	00012617          	auipc	a2,0x12
    80023fba:	3da60613          	addi	a2,a2,986 # 80036390 <__func__.0+0x9370>
    80023fbe:	00009517          	auipc	a0,0x9
    80023fc2:	35a50513          	addi	a0,a0,858 # 8002d318 <__func__.0+0x2f8>
    80023fc6:	5f5060ef          	jal	8002adba <printf>
    80023fca:	0002d797          	auipc	a5,0x2d
    80023fce:	0477c783          	lbu	a5,71(a5) # 80051011 <excpt+0x1>
    80023fd2:	0002d497          	auipc	s1,0x2d
    80023fd6:	03e48493          	addi	s1,s1,62 # 80051010 <excpt>
    80023fda:	00009597          	auipc	a1,0x9
    80023fde:	31658593          	addi	a1,a1,790 # 8002d2f0 <__func__.0+0x2d0>
    80023fe2:	cf89                	beqz	a5,80023ffc <stateen_AIA_test_1+0x8c>
    80023fe4:	6498                	ld	a4,8(s1)
    80023fe6:	4789                	li	a5,2
    80023fe8:	00009597          	auipc	a1,0x9
    80023fec:	2f858593          	addi	a1,a1,760 # 8002d2e0 <__func__.0+0x2c0>
    80023ff0:	00f70663          	beq	a4,a5,80023ffc <stateen_AIA_test_1+0x8c>
    80023ff4:	00009597          	auipc	a1,0x9
    80023ff8:	2fc58593          	addi	a1,a1,764 # 8002d2f0 <__func__.0+0x2d0>
    80023ffc:	00009517          	auipc	a0,0x9
    80024000:	33450513          	addi	a0,a0,820 # 8002d330 <__func__.0+0x310>
    80024004:	5b7060ef          	jal	8002adba <printf>
    80024008:	0002d797          	auipc	a5,0x2d
    8002400c:	0097c783          	lbu	a5,9(a5) # 80051011 <excpt+0x1>
    80024010:	c789                	beqz	a5,8002401a <stateen_AIA_test_1+0xaa>
    80024012:	6498                	ld	a4,8(s1)
    80024014:	4789                	li	a5,2
    80024016:	00f70c63          	beq	a4,a5,8002402e <stateen_AIA_test_1+0xbe>
    8002401a:	00009517          	auipc	a0,0x9
    8002401e:	31e50513          	addi	a0,a0,798 # 8002d338 <__func__.0+0x318>
    80024022:	599060ef          	jal	8002adba <printf>
    80024026:	02900513          	li	a0,41
    8002402a:	27f050ef          	jal	80029aa8 <putchar>
    8002402e:	4529                	li	a0,10
    80024030:	279050ef          	jal	80029aa8 <putchar>
    80024034:	0002d797          	auipc	a5,0x2d
    80024038:	fdd7c783          	lbu	a5,-35(a5) # 80051011 <excpt+0x1>
    8002403c:	4401                	li	s0,0
    8002403e:	c789                	beqz	a5,80024048 <stateen_AIA_test_1+0xd8>
    80024040:	6480                	ld	s0,8(s1)
    80024042:	1479                	addi	s0,s0,-2
    80024044:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80024048:	4505                	li	a0,1
    8002404a:	e25dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002404e:	d25dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024052:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024056:	f5fdc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    8002405a:	08200593          	li	a1,130
    8002405e:	00012617          	auipc	a2,0x12
    80024062:	38260613          	addi	a2,a2,898 # 800363e0 <__func__.0+0x93c0>
    80024066:	00009517          	auipc	a0,0x9
    8002406a:	2b250513          	addi	a0,a0,690 # 8002d318 <__func__.0+0x2f8>
    8002406e:	54d060ef          	jal	8002adba <printf>
    80024072:	0002d797          	auipc	a5,0x2d
    80024076:	f9f7c783          	lbu	a5,-97(a5) # 80051011 <excpt+0x1>
    8002407a:	00009597          	auipc	a1,0x9
    8002407e:	27658593          	addi	a1,a1,630 # 8002d2f0 <__func__.0+0x2d0>
    80024082:	cf89                	beqz	a5,8002409c <stateen_AIA_test_1+0x12c>
    80024084:	6498                	ld	a4,8(s1)
    80024086:	4789                	li	a5,2
    80024088:	00009597          	auipc	a1,0x9
    8002408c:	25858593          	addi	a1,a1,600 # 8002d2e0 <__func__.0+0x2c0>
    80024090:	00f70663          	beq	a4,a5,8002409c <stateen_AIA_test_1+0x12c>
    80024094:	00009597          	auipc	a1,0x9
    80024098:	25c58593          	addi	a1,a1,604 # 8002d2f0 <__func__.0+0x2d0>
    8002409c:	00009517          	auipc	a0,0x9
    800240a0:	29450513          	addi	a0,a0,660 # 8002d330 <__func__.0+0x310>
    800240a4:	517060ef          	jal	8002adba <printf>
    800240a8:	0002d797          	auipc	a5,0x2d
    800240ac:	f697c783          	lbu	a5,-151(a5) # 80051011 <excpt+0x1>
    800240b0:	c789                	beqz	a5,800240ba <stateen_AIA_test_1+0x14a>
    800240b2:	6498                	ld	a4,8(s1)
    800240b4:	4789                	li	a5,2
    800240b6:	00f70c63          	beq	a4,a5,800240ce <stateen_AIA_test_1+0x15e>
    800240ba:	00009517          	auipc	a0,0x9
    800240be:	27e50513          	addi	a0,a0,638 # 8002d338 <__func__.0+0x318>
    800240c2:	4f9060ef          	jal	8002adba <printf>
    800240c6:	02900513          	li	a0,41
    800240ca:	1df050ef          	jal	80029aa8 <putchar>
    800240ce:	4529                	li	a0,10
    800240d0:	1d9050ef          	jal	80029aa8 <putchar>
    800240d4:	c801                	beqz	s0,800240e4 <stateen_AIA_test_1+0x174>
    800240d6:	0002d797          	auipc	a5,0x2d
    800240da:	f3b7c783          	lbu	a5,-197(a5) # 80051011 <excpt+0x1>
    800240de:	4401                	li	s0,0
    800240e0:	18079363          	bnez	a5,80024266 <stateen_AIA_test_1+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    800240e4:	4505                	li	a0,1
    800240e6:	d89dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800240ea:	c89dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    800240ee:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800240f2:	ec3dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    800240f6:	08200593          	li	a1,130
    800240fa:	00012617          	auipc	a2,0x12
    800240fe:	33660613          	addi	a2,a2,822 # 80036430 <__func__.0+0x9410>
    80024102:	00009517          	auipc	a0,0x9
    80024106:	21650513          	addi	a0,a0,534 # 8002d318 <__func__.0+0x2f8>
    8002410a:	4b1060ef          	jal	8002adba <printf>
    8002410e:	0002d797          	auipc	a5,0x2d
    80024112:	f037c783          	lbu	a5,-253(a5) # 80051011 <excpt+0x1>
    80024116:	00009597          	auipc	a1,0x9
    8002411a:	1da58593          	addi	a1,a1,474 # 8002d2f0 <__func__.0+0x2d0>
    8002411e:	cf89                	beqz	a5,80024138 <stateen_AIA_test_1+0x1c8>
    80024120:	6498                	ld	a4,8(s1)
    80024122:	4789                	li	a5,2
    80024124:	00009597          	auipc	a1,0x9
    80024128:	1bc58593          	addi	a1,a1,444 # 8002d2e0 <__func__.0+0x2c0>
    8002412c:	00f70663          	beq	a4,a5,80024138 <stateen_AIA_test_1+0x1c8>
    80024130:	00009597          	auipc	a1,0x9
    80024134:	1c058593          	addi	a1,a1,448 # 8002d2f0 <__func__.0+0x2d0>
    80024138:	00009517          	auipc	a0,0x9
    8002413c:	1f850513          	addi	a0,a0,504 # 8002d330 <__func__.0+0x310>
    80024140:	47b060ef          	jal	8002adba <printf>
    80024144:	0002d797          	auipc	a5,0x2d
    80024148:	ecd7c783          	lbu	a5,-307(a5) # 80051011 <excpt+0x1>
    8002414c:	c789                	beqz	a5,80024156 <stateen_AIA_test_1+0x1e6>
    8002414e:	6498                	ld	a4,8(s1)
    80024150:	4789                	li	a5,2
    80024152:	00f70c63          	beq	a4,a5,8002416a <stateen_AIA_test_1+0x1fa>
    80024156:	00009517          	auipc	a0,0x9
    8002415a:	1e250513          	addi	a0,a0,482 # 8002d338 <__func__.0+0x318>
    8002415e:	45d060ef          	jal	8002adba <printf>
    80024162:	02900513          	li	a0,41
    80024166:	143050ef          	jal	80029aa8 <putchar>
    8002416a:	4529                	li	a0,10
    8002416c:	13d050ef          	jal	80029aa8 <putchar>
    80024170:	c801                	beqz	s0,80024180 <stateen_AIA_test_1+0x210>
    80024172:	0002d797          	auipc	a5,0x2d
    80024176:	e9f7c783          	lbu	a5,-353(a5) # 80051011 <excpt+0x1>
    8002417a:	4401                	li	s0,0
    8002417c:	0e079063          	bnez	a5,8002425c <stateen_AIA_test_1+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80024180:	4505                	li	a0,1
    80024182:	ceddc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024186:	beddc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    8002418a:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002418e:	e27dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    80024192:	08200593          	li	a1,130
    80024196:	00012617          	auipc	a2,0x12
    8002419a:	2ea60613          	addi	a2,a2,746 # 80036480 <__func__.0+0x9460>
    8002419e:	00009517          	auipc	a0,0x9
    800241a2:	17a50513          	addi	a0,a0,378 # 8002d318 <__func__.0+0x2f8>
    800241a6:	415060ef          	jal	8002adba <printf>
    800241aa:	0002d797          	auipc	a5,0x2d
    800241ae:	e677c783          	lbu	a5,-409(a5) # 80051011 <excpt+0x1>
    800241b2:	00009597          	auipc	a1,0x9
    800241b6:	13e58593          	addi	a1,a1,318 # 8002d2f0 <__func__.0+0x2d0>
    800241ba:	cf89                	beqz	a5,800241d4 <stateen_AIA_test_1+0x264>
    800241bc:	6498                	ld	a4,8(s1)
    800241be:	4789                	li	a5,2
    800241c0:	00009597          	auipc	a1,0x9
    800241c4:	12058593          	addi	a1,a1,288 # 8002d2e0 <__func__.0+0x2c0>
    800241c8:	00f70663          	beq	a4,a5,800241d4 <stateen_AIA_test_1+0x264>
    800241cc:	00009597          	auipc	a1,0x9
    800241d0:	12458593          	addi	a1,a1,292 # 8002d2f0 <__func__.0+0x2d0>
    800241d4:	00009517          	auipc	a0,0x9
    800241d8:	15c50513          	addi	a0,a0,348 # 8002d330 <__func__.0+0x310>
    800241dc:	3df060ef          	jal	8002adba <printf>
    800241e0:	0002d797          	auipc	a5,0x2d
    800241e4:	e317c783          	lbu	a5,-463(a5) # 80051011 <excpt+0x1>
    800241e8:	c789                	beqz	a5,800241f2 <stateen_AIA_test_1+0x282>
    800241ea:	6498                	ld	a4,8(s1)
    800241ec:	4789                	li	a5,2
    800241ee:	00f70c63          	beq	a4,a5,80024206 <stateen_AIA_test_1+0x296>
    800241f2:	00009517          	auipc	a0,0x9
    800241f6:	14650513          	addi	a0,a0,326 # 8002d338 <__func__.0+0x318>
    800241fa:	3c1060ef          	jal	8002adba <printf>
    800241fe:	02900513          	li	a0,41
    80024202:	0a7050ef          	jal	80029aa8 <putchar>
    80024206:	4529                	li	a0,10
    80024208:	0a1050ef          	jal	80029aa8 <putchar>
    8002420c:	c015                	beqz	s0,80024230 <stateen_AIA_test_1+0x2c0>
    8002420e:	0002d417          	auipc	s0,0x2d
    80024212:	e0344403          	lbu	s0,-509(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80024216:	00009597          	auipc	a1,0x9
    8002421a:	0da58593          	addi	a1,a1,218 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    8002421e:	cc11                	beqz	s0,8002423a <stateen_AIA_test_1+0x2ca>
    80024220:	6498                	ld	a4,8(s1)
    80024222:	4789                	li	a5,2
    TEST_END();
    80024224:	00009597          	auipc	a1,0x9
    80024228:	0bc58593          	addi	a1,a1,188 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss vstopi register cause to illegal except when mstateen.aia=0",
    8002422c:	00f70763          	beq	a4,a5,8002423a <stateen_AIA_test_1+0x2ca>
    80024230:	4401                	li	s0,0
    TEST_END();
    80024232:	00009597          	auipc	a1,0x9
    80024236:	0be58593          	addi	a1,a1,190 # 8002d2f0 <__func__.0+0x2d0>
    8002423a:	00009517          	auipc	a0,0x9
    8002423e:	15e50513          	addi	a0,a0,350 # 8002d398 <__func__.0+0x378>
    80024242:	379060ef          	jal	8002adba <printf>
    80024246:	4511                	li	a0,4
    80024248:	c27dc0ef          	jal	80000e6e <goto_priv>
    8002424c:	d3edd0ef          	jal	8000178a <reset_state>

}
    80024250:	60e2                	ld	ra,24(sp)
    80024252:	8522                	mv	a0,s0
    80024254:	6442                	ld	s0,16(sp)
    80024256:	64a2                	ld	s1,8(sp)
    80024258:	6105                	addi	sp,sp,32
    8002425a:	8082                	ret
    TEST_ASSERT("HU mode accesss stopi register cause to illegal except when mstateen.aia=0",
    8002425c:	6480                	ld	s0,8(s1)
    8002425e:	1479                	addi	s0,s0,-2
    80024260:	00143413          	seqz	s0,s0
    80024264:	bf31                	j	80024180 <stateen_AIA_test_1+0x210>
    TEST_ASSERT("HU mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024266:	6480                	ld	s0,8(s1)
    80024268:	1479                	addi	s0,s0,-2
    8002426a:	00143413          	seqz	s0,s0
    8002426e:	bd9d                	j	800240e4 <stateen_AIA_test_1+0x174>

0000000080024270 <stateen_AIA_test_2>:

bool stateen_AIA_test_2(){
    80024270:	1101                	addi	sp,sp,-32

    TEST_START();
    80024272:	00009597          	auipc	a1,0x9
    80024276:	a1658593          	addi	a1,a1,-1514 # 8002cc88 <__func__.21>
    8002427a:	00009517          	auipc	a0,0x9
    8002427e:	08650513          	addi	a0,a0,134 # 8002d300 <__func__.0+0x2e0>
bool stateen_AIA_test_2(){
    80024282:	ec06                	sd	ra,24(sp)
    80024284:	e822                	sd	s0,16(sp)
    80024286:	e426                	sd	s1,8(sp)
    TEST_START();
    80024288:	333060ef          	jal	8002adba <printf>
    8002428c:	4529                	li	a0,10
    8002428e:	01b050ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80024292:	4511                	li	a0,4
    80024294:	bdbdc0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024298:	4785                	li	a5,1
    8002429a:	17ee                	slli	a5,a5,0x3b
    8002429c:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    800242a0:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时,不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    goto_priv(PRIV_VU);
    800242a4:	4501                	li	a0,0
    800242a6:	bc9dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800242aa:	ac9dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800242ae:	608027f3          	csrr	a5,hvien

    excpt_info();
    800242b2:	d03dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800242b6:	08200593          	li	a1,130
    800242ba:	00012617          	auipc	a2,0x12
    800242be:	21660613          	addi	a2,a2,534 # 800364d0 <__func__.0+0x94b0>
    800242c2:	00009517          	auipc	a0,0x9
    800242c6:	05650513          	addi	a0,a0,86 # 8002d318 <__func__.0+0x2f8>
    800242ca:	2f1060ef          	jal	8002adba <printf>
    800242ce:	0002d797          	auipc	a5,0x2d
    800242d2:	d437c783          	lbu	a5,-701(a5) # 80051011 <excpt+0x1>
    800242d6:	0002d497          	auipc	s1,0x2d
    800242da:	d3a48493          	addi	s1,s1,-710 # 80051010 <excpt>
    800242de:	00009597          	auipc	a1,0x9
    800242e2:	01258593          	addi	a1,a1,18 # 8002d2f0 <__func__.0+0x2d0>
    800242e6:	cf89                	beqz	a5,80024300 <stateen_AIA_test_2+0x90>
    800242e8:	6498                	ld	a4,8(s1)
    800242ea:	47d9                	li	a5,22
    800242ec:	00009597          	auipc	a1,0x9
    800242f0:	ff458593          	addi	a1,a1,-12 # 8002d2e0 <__func__.0+0x2c0>
    800242f4:	00f70663          	beq	a4,a5,80024300 <stateen_AIA_test_2+0x90>
    800242f8:	00009597          	auipc	a1,0x9
    800242fc:	ff858593          	addi	a1,a1,-8 # 8002d2f0 <__func__.0+0x2d0>
    80024300:	00009517          	auipc	a0,0x9
    80024304:	03050513          	addi	a0,a0,48 # 8002d330 <__func__.0+0x310>
    80024308:	2b3060ef          	jal	8002adba <printf>
    8002430c:	0002d797          	auipc	a5,0x2d
    80024310:	d057c783          	lbu	a5,-763(a5) # 80051011 <excpt+0x1>
    80024314:	c789                	beqz	a5,8002431e <stateen_AIA_test_2+0xae>
    80024316:	6498                	ld	a4,8(s1)
    80024318:	47d9                	li	a5,22
    8002431a:	00f70c63          	beq	a4,a5,80024332 <stateen_AIA_test_2+0xc2>
    8002431e:	00009517          	auipc	a0,0x9
    80024322:	01a50513          	addi	a0,a0,26 # 8002d338 <__func__.0+0x318>
    80024326:	295060ef          	jal	8002adba <printf>
    8002432a:	02900513          	li	a0,41
    8002432e:	77a050ef          	jal	80029aa8 <putchar>
    80024332:	4529                	li	a0,10
    80024334:	774050ef          	jal	80029aa8 <putchar>
    80024338:	0002d797          	auipc	a5,0x2d
    8002433c:	cd97c783          	lbu	a5,-807(a5) # 80051011 <excpt+0x1>
    80024340:	4401                	li	s0,0
    80024342:	c789                	beqz	a5,8002434c <stateen_AIA_test_2+0xdc>
    80024344:	6480                	ld	s0,8(s1)
    80024346:	1429                	addi	s0,s0,-22
    80024348:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    8002434c:	4501                	li	a0,0
    8002434e:	b21dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024352:	a21dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024356:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002435a:	c5bdc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002435e:	08200593          	li	a1,130
    80024362:	00012617          	auipc	a2,0x12
    80024366:	1be60613          	addi	a2,a2,446 # 80036520 <__func__.0+0x9500>
    8002436a:	00009517          	auipc	a0,0x9
    8002436e:	fae50513          	addi	a0,a0,-82 # 8002d318 <__func__.0+0x2f8>
    80024372:	249060ef          	jal	8002adba <printf>
    80024376:	0002d797          	auipc	a5,0x2d
    8002437a:	c9b7c783          	lbu	a5,-869(a5) # 80051011 <excpt+0x1>
    8002437e:	00009597          	auipc	a1,0x9
    80024382:	f7258593          	addi	a1,a1,-142 # 8002d2f0 <__func__.0+0x2d0>
    80024386:	cf89                	beqz	a5,800243a0 <stateen_AIA_test_2+0x130>
    80024388:	6498                	ld	a4,8(s1)
    8002438a:	47d9                	li	a5,22
    8002438c:	00009597          	auipc	a1,0x9
    80024390:	f5458593          	addi	a1,a1,-172 # 8002d2e0 <__func__.0+0x2c0>
    80024394:	00f70663          	beq	a4,a5,800243a0 <stateen_AIA_test_2+0x130>
    80024398:	00009597          	auipc	a1,0x9
    8002439c:	f5858593          	addi	a1,a1,-168 # 8002d2f0 <__func__.0+0x2d0>
    800243a0:	00009517          	auipc	a0,0x9
    800243a4:	f9050513          	addi	a0,a0,-112 # 8002d330 <__func__.0+0x310>
    800243a8:	213060ef          	jal	8002adba <printf>
    800243ac:	0002d797          	auipc	a5,0x2d
    800243b0:	c657c783          	lbu	a5,-923(a5) # 80051011 <excpt+0x1>
    800243b4:	c789                	beqz	a5,800243be <stateen_AIA_test_2+0x14e>
    800243b6:	6498                	ld	a4,8(s1)
    800243b8:	47d9                	li	a5,22
    800243ba:	00f70c63          	beq	a4,a5,800243d2 <stateen_AIA_test_2+0x162>
    800243be:	00009517          	auipc	a0,0x9
    800243c2:	f7a50513          	addi	a0,a0,-134 # 8002d338 <__func__.0+0x318>
    800243c6:	1f5060ef          	jal	8002adba <printf>
    800243ca:	02900513          	li	a0,41
    800243ce:	6da050ef          	jal	80029aa8 <putchar>
    800243d2:	4529                	li	a0,10
    800243d4:	6d4050ef          	jal	80029aa8 <putchar>
    800243d8:	c801                	beqz	s0,800243e8 <stateen_AIA_test_2+0x178>
    800243da:	0002d797          	auipc	a5,0x2d
    800243de:	c377c783          	lbu	a5,-969(a5) # 80051011 <excpt+0x1>
    800243e2:	4401                	li	s0,0
    800243e4:	18079363          	bnez	a5,8002456a <stateen_AIA_test_2+0x2fa>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    800243e8:	4501                	li	a0,0
    800243ea:	a85dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800243ee:	985dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    800243f2:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800243f6:	bbfdc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800243fa:	08200593          	li	a1,130
    800243fe:	00012617          	auipc	a2,0x12
    80024402:	17a60613          	addi	a2,a2,378 # 80036578 <__func__.0+0x9558>
    80024406:	00009517          	auipc	a0,0x9
    8002440a:	f1250513          	addi	a0,a0,-238 # 8002d318 <__func__.0+0x2f8>
    8002440e:	1ad060ef          	jal	8002adba <printf>
    80024412:	0002d797          	auipc	a5,0x2d
    80024416:	bff7c783          	lbu	a5,-1025(a5) # 80051011 <excpt+0x1>
    8002441a:	00009597          	auipc	a1,0x9
    8002441e:	ed658593          	addi	a1,a1,-298 # 8002d2f0 <__func__.0+0x2d0>
    80024422:	cf89                	beqz	a5,8002443c <stateen_AIA_test_2+0x1cc>
    80024424:	6498                	ld	a4,8(s1)
    80024426:	47d9                	li	a5,22
    80024428:	00009597          	auipc	a1,0x9
    8002442c:	eb858593          	addi	a1,a1,-328 # 8002d2e0 <__func__.0+0x2c0>
    80024430:	00f70663          	beq	a4,a5,8002443c <stateen_AIA_test_2+0x1cc>
    80024434:	00009597          	auipc	a1,0x9
    80024438:	ebc58593          	addi	a1,a1,-324 # 8002d2f0 <__func__.0+0x2d0>
    8002443c:	00009517          	auipc	a0,0x9
    80024440:	ef450513          	addi	a0,a0,-268 # 8002d330 <__func__.0+0x310>
    80024444:	177060ef          	jal	8002adba <printf>
    80024448:	0002d797          	auipc	a5,0x2d
    8002444c:	bc97c783          	lbu	a5,-1079(a5) # 80051011 <excpt+0x1>
    80024450:	c789                	beqz	a5,8002445a <stateen_AIA_test_2+0x1ea>
    80024452:	6498                	ld	a4,8(s1)
    80024454:	47d9                	li	a5,22
    80024456:	00f70c63          	beq	a4,a5,8002446e <stateen_AIA_test_2+0x1fe>
    8002445a:	00009517          	auipc	a0,0x9
    8002445e:	ede50513          	addi	a0,a0,-290 # 8002d338 <__func__.0+0x318>
    80024462:	159060ef          	jal	8002adba <printf>
    80024466:	02900513          	li	a0,41
    8002446a:	63e050ef          	jal	80029aa8 <putchar>
    8002446e:	4529                	li	a0,10
    80024470:	638050ef          	jal	80029aa8 <putchar>
    80024474:	c801                	beqz	s0,80024484 <stateen_AIA_test_2+0x214>
    80024476:	0002d797          	auipc	a5,0x2d
    8002447a:	b9b7c783          	lbu	a5,-1125(a5) # 80051011 <excpt+0x1>
    8002447e:	4401                	li	s0,0
    80024480:	0e079063          	bnez	a5,80024560 <stateen_AIA_test_2+0x2f0>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80024484:	4501                	li	a0,0
    80024486:	9e9dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002448a:	8e9dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    8002448e:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024492:	b23dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024496:	08200593          	li	a1,130
    8002449a:	00012617          	auipc	a2,0x12
    8002449e:	12e60613          	addi	a2,a2,302 # 800365c8 <__func__.0+0x95a8>
    800244a2:	00009517          	auipc	a0,0x9
    800244a6:	e7650513          	addi	a0,a0,-394 # 8002d318 <__func__.0+0x2f8>
    800244aa:	111060ef          	jal	8002adba <printf>
    800244ae:	0002d797          	auipc	a5,0x2d
    800244b2:	b637c783          	lbu	a5,-1181(a5) # 80051011 <excpt+0x1>
    800244b6:	00009597          	auipc	a1,0x9
    800244ba:	e3a58593          	addi	a1,a1,-454 # 8002d2f0 <__func__.0+0x2d0>
    800244be:	cf89                	beqz	a5,800244d8 <stateen_AIA_test_2+0x268>
    800244c0:	6498                	ld	a4,8(s1)
    800244c2:	47d9                	li	a5,22
    800244c4:	00009597          	auipc	a1,0x9
    800244c8:	e1c58593          	addi	a1,a1,-484 # 8002d2e0 <__func__.0+0x2c0>
    800244cc:	00f70663          	beq	a4,a5,800244d8 <stateen_AIA_test_2+0x268>
    800244d0:	00009597          	auipc	a1,0x9
    800244d4:	e2058593          	addi	a1,a1,-480 # 8002d2f0 <__func__.0+0x2d0>
    800244d8:	00009517          	auipc	a0,0x9
    800244dc:	e5850513          	addi	a0,a0,-424 # 8002d330 <__func__.0+0x310>
    800244e0:	0db060ef          	jal	8002adba <printf>
    800244e4:	0002d797          	auipc	a5,0x2d
    800244e8:	b2d7c783          	lbu	a5,-1235(a5) # 80051011 <excpt+0x1>
    800244ec:	c789                	beqz	a5,800244f6 <stateen_AIA_test_2+0x286>
    800244ee:	6498                	ld	a4,8(s1)
    800244f0:	47d9                	li	a5,22
    800244f2:	00f70c63          	beq	a4,a5,8002450a <stateen_AIA_test_2+0x29a>
    800244f6:	00009517          	auipc	a0,0x9
    800244fa:	e4250513          	addi	a0,a0,-446 # 8002d338 <__func__.0+0x318>
    800244fe:	0bd060ef          	jal	8002adba <printf>
    80024502:	02900513          	li	a0,41
    80024506:	5a2050ef          	jal	80029aa8 <putchar>
    8002450a:	4529                	li	a0,10
    8002450c:	59c050ef          	jal	80029aa8 <putchar>
    80024510:	c015                	beqz	s0,80024534 <stateen_AIA_test_2+0x2c4>
    80024512:	0002d417          	auipc	s0,0x2d
    80024516:	aff44403          	lbu	s0,-1281(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    8002451a:	00009597          	auipc	a1,0x9
    8002451e:	dd658593          	addi	a1,a1,-554 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024522:	cc11                	beqz	s0,8002453e <stateen_AIA_test_2+0x2ce>
    80024524:	6498                	ld	a4,8(s1)
    80024526:	47d9                	li	a5,22
    TEST_END();
    80024528:	00009597          	auipc	a1,0x9
    8002452c:	db858593          	addi	a1,a1,-584 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024530:	00f70763          	beq	a4,a5,8002453e <stateen_AIA_test_2+0x2ce>
    80024534:	4401                	li	s0,0
    TEST_END();
    80024536:	00009597          	auipc	a1,0x9
    8002453a:	dba58593          	addi	a1,a1,-582 # 8002d2f0 <__func__.0+0x2d0>
    8002453e:	00009517          	auipc	a0,0x9
    80024542:	e5a50513          	addi	a0,a0,-422 # 8002d398 <__func__.0+0x378>
    80024546:	075060ef          	jal	8002adba <printf>
    8002454a:	4511                	li	a0,4
    8002454c:	923dc0ef          	jal	80000e6e <goto_priv>
    80024550:	a3add0ef          	jal	8000178a <reset_state>

}
    80024554:	60e2                	ld	ra,24(sp)
    80024556:	8522                	mv	a0,s0
    80024558:	6442                	ld	s0,16(sp)
    8002455a:	64a2                	ld	s1,8(sp)
    8002455c:	6105                	addi	sp,sp,32
    8002455e:	8082                	ret
    TEST_ASSERT("VU mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024560:	6480                	ld	s0,8(s1)
    80024562:	1429                	addi	s0,s0,-22
    80024564:	00143413          	seqz	s0,s0
    80024568:	bf31                	j	80024484 <stateen_AIA_test_2+0x214>
    TEST_ASSERT("VU mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    8002456a:	6480                	ld	s0,8(s1)
    8002456c:	1429                	addi	s0,s0,-22
    8002456e:	00143413          	seqz	s0,s0
    80024572:	bd9d                	j	800243e8 <stateen_AIA_test_2+0x178>

0000000080024574 <stateen_AIA_test_3>:

bool stateen_AIA_test_3(){
    80024574:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,m mode 可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024576:	00008597          	auipc	a1,0x8
    8002457a:	72a58593          	addi	a1,a1,1834 # 8002cca0 <__func__.20>
    8002457e:	00009517          	auipc	a0,0x9
    80024582:	d8250513          	addi	a0,a0,-638 # 8002d300 <__func__.0+0x2e0>
bool stateen_AIA_test_3(){
    80024586:	ec06                	sd	ra,24(sp)
    80024588:	e822                	sd	s0,16(sp)
    8002458a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002458c:	02f060ef          	jal	8002adba <printf>
    80024590:	4529                	li	a0,10
    80024592:	516050ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80024596:	4511                	li	a0,4
    80024598:	8d7dc0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    8002459c:	4785                	li	a5,1
    8002459e:	17ee                	slli	a5,a5,0x3b
    800245a0:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    800245a4:	4511                	li	a0,4
    800245a6:	8c9dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800245aa:	fc8dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800245ae:	608027f3          	csrr	a5,hvien

    excpt_info();
    800245b2:	a03dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    800245b6:	08200593          	li	a1,130
    800245ba:	00012617          	auipc	a2,0x12
    800245be:	06660613          	addi	a2,a2,102 # 80036620 <__func__.0+0x9600>
    800245c2:	00009517          	auipc	a0,0x9
    800245c6:	d5650513          	addi	a0,a0,-682 # 8002d318 <__func__.0+0x2f8>
    800245ca:	7f0060ef          	jal	8002adba <printf>
    800245ce:	0002d797          	auipc	a5,0x2d
    800245d2:	a437c783          	lbu	a5,-1469(a5) # 80051011 <excpt+0x1>
    800245d6:	00009597          	auipc	a1,0x9
    800245da:	d0a58593          	addi	a1,a1,-758 # 8002d2e0 <__func__.0+0x2c0>
    800245de:	c789                	beqz	a5,800245e8 <stateen_AIA_test_3+0x74>
    800245e0:	00009597          	auipc	a1,0x9
    800245e4:	d1058593          	addi	a1,a1,-752 # 8002d2f0 <__func__.0+0x2d0>
    800245e8:	00009517          	auipc	a0,0x9
    800245ec:	d4850513          	addi	a0,a0,-696 # 8002d330 <__func__.0+0x310>
    800245f0:	7ca060ef          	jal	8002adba <printf>
    800245f4:	0002d797          	auipc	a5,0x2d
    800245f8:	a1d7c783          	lbu	a5,-1507(a5) # 80051011 <excpt+0x1>
    800245fc:	1c079d63          	bnez	a5,800247d6 <stateen_AIA_test_3+0x262>
    80024600:	4529                	li	a0,10
    80024602:	4a6050ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80024606:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    80024608:	0002d497          	auipc	s1,0x2d
    8002460c:	a094c483          	lbu	s1,-1527(s1) # 80051011 <excpt+0x1>
    goto_priv(PRIV_M);
    80024610:	85fdc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024614:	f5edc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024618:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002461c:	999dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    80024620:	08200593          	li	a1,130
    80024624:	00012617          	auipc	a2,0x12
    80024628:	03c60613          	addi	a2,a2,60 # 80036660 <__func__.0+0x9640>
    8002462c:	00009517          	auipc	a0,0x9
    80024630:	cec50513          	addi	a0,a0,-788 # 8002d318 <__func__.0+0x2f8>
    80024634:	786060ef          	jal	8002adba <printf>
    80024638:	0002d797          	auipc	a5,0x2d
    8002463c:	9d97c783          	lbu	a5,-1575(a5) # 80051011 <excpt+0x1>
    80024640:	00009597          	auipc	a1,0x9
    80024644:	cb058593          	addi	a1,a1,-848 # 8002d2f0 <__func__.0+0x2d0>
    80024648:	e789                	bnez	a5,80024652 <stateen_AIA_test_3+0xde>
    8002464a:	00009597          	auipc	a1,0x9
    8002464e:	c9658593          	addi	a1,a1,-874 # 8002d2e0 <__func__.0+0x2c0>
    80024652:	00009517          	auipc	a0,0x9
    80024656:	cde50513          	addi	a0,a0,-802 # 8002d330 <__func__.0+0x310>
    8002465a:	760060ef          	jal	8002adba <printf>
    8002465e:	0002d797          	auipc	a5,0x2d
    80024662:	9b37c783          	lbu	a5,-1613(a5) # 80051011 <excpt+0x1>
    80024666:	14079d63          	bnez	a5,800247c0 <stateen_AIA_test_3+0x24c>
    8002466a:	4529                	li	a0,10
    8002466c:	43c050ef          	jal	80029aa8 <putchar>
    80024670:	4401                	li	s0,0
    80024672:	e499                	bnez	s1,80024680 <stateen_AIA_test_3+0x10c>
    80024674:	0002d417          	auipc	s0,0x2d
    80024678:	99d44403          	lbu	s0,-1635(s0) # 80051011 <excpt+0x1>
    8002467c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80024680:	4511                	li	a0,4
    80024682:	fecdc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024686:	eecdc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002468a:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002468e:	927dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    80024692:	08200593          	li	a1,130
    80024696:	00012617          	auipc	a2,0x12
    8002469a:	00a60613          	addi	a2,a2,10 # 800366a0 <__func__.0+0x9680>
    8002469e:	00009517          	auipc	a0,0x9
    800246a2:	c7a50513          	addi	a0,a0,-902 # 8002d318 <__func__.0+0x2f8>
    800246a6:	714060ef          	jal	8002adba <printf>
    800246aa:	0002d797          	auipc	a5,0x2d
    800246ae:	9677c783          	lbu	a5,-1689(a5) # 80051011 <excpt+0x1>
    800246b2:	00009597          	auipc	a1,0x9
    800246b6:	c3e58593          	addi	a1,a1,-962 # 8002d2f0 <__func__.0+0x2d0>
    800246ba:	e789                	bnez	a5,800246c4 <stateen_AIA_test_3+0x150>
    800246bc:	00009597          	auipc	a1,0x9
    800246c0:	c2458593          	addi	a1,a1,-988 # 8002d2e0 <__func__.0+0x2c0>
    800246c4:	00009517          	auipc	a0,0x9
    800246c8:	c6c50513          	addi	a0,a0,-916 # 8002d330 <__func__.0+0x310>
    800246cc:	6ee060ef          	jal	8002adba <printf>
    800246d0:	0002d797          	auipc	a5,0x2d
    800246d4:	9417c783          	lbu	a5,-1727(a5) # 80051011 <excpt+0x1>
    800246d8:	0c079963          	bnez	a5,800247aa <stateen_AIA_test_3+0x236>
    800246dc:	4529                	li	a0,10
    800246de:	3ca050ef          	jal	80029aa8 <putchar>
    800246e2:	c419                	beqz	s0,800246f0 <stateen_AIA_test_3+0x17c>
    800246e4:	0002d417          	auipc	s0,0x2d
    800246e8:	92d44403          	lbu	s0,-1747(s0) # 80051011 <excpt+0x1>
    800246ec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800246f0:	4511                	li	a0,4
    800246f2:	f7cdc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800246f6:	e7cdc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800246fa:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800246fe:	8b7dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    80024702:	08200593          	li	a1,130
    80024706:	00012617          	auipc	a2,0x12
    8002470a:	fda60613          	addi	a2,a2,-38 # 800366e0 <__func__.0+0x96c0>
    8002470e:	00009517          	auipc	a0,0x9
    80024712:	c0a50513          	addi	a0,a0,-1014 # 8002d318 <__func__.0+0x2f8>
    80024716:	6a4060ef          	jal	8002adba <printf>
    8002471a:	0002d797          	auipc	a5,0x2d
    8002471e:	8f77c783          	lbu	a5,-1801(a5) # 80051011 <excpt+0x1>
    80024722:	00009597          	auipc	a1,0x9
    80024726:	bce58593          	addi	a1,a1,-1074 # 8002d2f0 <__func__.0+0x2d0>
    8002472a:	e789                	bnez	a5,80024734 <stateen_AIA_test_3+0x1c0>
    8002472c:	00009597          	auipc	a1,0x9
    80024730:	bb458593          	addi	a1,a1,-1100 # 8002d2e0 <__func__.0+0x2c0>
    80024734:	00009517          	auipc	a0,0x9
    80024738:	bfc50513          	addi	a0,a0,-1028 # 8002d330 <__func__.0+0x310>
    8002473c:	67e060ef          	jal	8002adba <printf>
    80024740:	0002d797          	auipc	a5,0x2d
    80024744:	8d17c783          	lbu	a5,-1839(a5) # 80051011 <excpt+0x1>
    80024748:	e7b1                	bnez	a5,80024794 <stateen_AIA_test_3+0x220>
    8002474a:	4529                	li	a0,10
    8002474c:	35c050ef          	jal	80029aa8 <putchar>
    80024750:	c411                	beqz	s0,8002475c <stateen_AIA_test_3+0x1e8>
    80024752:	0002d797          	auipc	a5,0x2d
    80024756:	8bf7c783          	lbu	a5,-1857(a5) # 80051011 <excpt+0x1>
    8002475a:	c79d                	beqz	a5,80024788 <stateen_AIA_test_3+0x214>
    8002475c:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    8002475e:	00009597          	auipc	a1,0x9
    80024762:	b9258593          	addi	a1,a1,-1134 # 8002d2f0 <__func__.0+0x2d0>
    80024766:	00009517          	auipc	a0,0x9
    8002476a:	c3250513          	addi	a0,a0,-974 # 8002d398 <__func__.0+0x378>
    8002476e:	64c060ef          	jal	8002adba <printf>
    80024772:	4511                	li	a0,4
    80024774:	efadc0ef          	jal	80000e6e <goto_priv>
    80024778:	812dd0ef          	jal	8000178a <reset_state>

}
    8002477c:	60e2                	ld	ra,24(sp)
    8002477e:	8522                	mv	a0,s0
    80024780:	6442                	ld	s0,16(sp)
    80024782:	64a2                	ld	s1,8(sp)
    80024784:	6105                	addi	sp,sp,32
    80024786:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    80024788:	4405                	li	s0,1
    TEST_END();
    8002478a:	00009597          	auipc	a1,0x9
    8002478e:	b5658593          	addi	a1,a1,-1194 # 8002d2e0 <__func__.0+0x2c0>
    80024792:	bfd1                	j	80024766 <stateen_AIA_test_3+0x1f2>
    TEST_ASSERT("m mode accesss vstopi register success  when mstateen.aia=0",
    80024794:	00009517          	auipc	a0,0x9
    80024798:	ba450513          	addi	a0,a0,-1116 # 8002d338 <__func__.0+0x318>
    8002479c:	61e060ef          	jal	8002adba <printf>
    800247a0:	02900513          	li	a0,41
    800247a4:	304050ef          	jal	80029aa8 <putchar>
    800247a8:	b74d                	j	8002474a <stateen_AIA_test_3+0x1d6>
    TEST_ASSERT("m mode accesss stopi register success  when mstateen.aia=0",
    800247aa:	00009517          	auipc	a0,0x9
    800247ae:	b8e50513          	addi	a0,a0,-1138 # 8002d338 <__func__.0+0x318>
    800247b2:	608060ef          	jal	8002adba <printf>
    800247b6:	02900513          	li	a0,41
    800247ba:	2ee050ef          	jal	80029aa8 <putchar>
    800247be:	bf39                	j	800246dc <stateen_AIA_test_3+0x168>
    TEST_ASSERT("m mode accesss hvictl register success  when mstateen.aia=0",
    800247c0:	00009517          	auipc	a0,0x9
    800247c4:	b7850513          	addi	a0,a0,-1160 # 8002d338 <__func__.0+0x318>
    800247c8:	5f2060ef          	jal	8002adba <printf>
    800247cc:	02900513          	li	a0,41
    800247d0:	2d8050ef          	jal	80029aa8 <putchar>
    800247d4:	bd59                	j	8002466a <stateen_AIA_test_3+0xf6>
    TEST_ASSERT("m mode accesss hvien register success  when mstateen.aia=0",
    800247d6:	00009517          	auipc	a0,0x9
    800247da:	b6250513          	addi	a0,a0,-1182 # 8002d338 <__func__.0+0x318>
    800247de:	5dc060ef          	jal	8002adba <printf>
    800247e2:	02900513          	li	a0,41
    800247e6:	2c2050ef          	jal	80029aa8 <putchar>
    800247ea:	bd19                	j	80024600 <stateen_AIA_test_3+0x8c>

00000000800247ec <stateen_AIA_test_4>:


bool stateen_AIA_test_4(){
    800247ec:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=1,hstateen.AIA=0,v=1时不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    800247ee:	00008597          	auipc	a1,0x8
    800247f2:	4ca58593          	addi	a1,a1,1226 # 8002ccb8 <__func__.19>
    800247f6:	00009517          	auipc	a0,0x9
    800247fa:	b0a50513          	addi	a0,a0,-1270 # 8002d300 <__func__.0+0x2e0>
bool stateen_AIA_test_4(){
    800247fe:	ec06                	sd	ra,24(sp)
    80024800:	e822                	sd	s0,16(sp)
    80024802:	e426                	sd	s1,8(sp)
    TEST_START();
    80024804:	5b6060ef          	jal	8002adba <printf>
    80024808:	4529                	li	a0,10
    8002480a:	29e050ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    8002480e:	4511                	li	a0,4
    80024810:	e5edc0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024814:	4785                	li	a5,1
    80024816:	17ee                	slli	a5,a5,0x3b
    80024818:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    8002481c:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80024820:	30c025f3          	csrr	a1,mstateen0
    80024824:	00011517          	auipc	a0,0x11
    80024828:	2bc50513          	addi	a0,a0,700 # 80035ae0 <__func__.0+0x8ac0>
    8002482c:	58e060ef          	jal	8002adba <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80024830:	60c025f3          	csrr	a1,hstateen0
    80024834:	00011517          	auipc	a0,0x11
    80024838:	2bc50513          	addi	a0,a0,700 # 80035af0 <__func__.0+0x8ad0>
    8002483c:	57e060ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    80024840:	4509                	li	a0,2
    80024842:	e2cdc0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80024846:	d2cdc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    8002484a:	608027f3          	csrr	a5,hvien

    excpt_info();
    8002484e:	f66dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024852:	08200593          	li	a1,130
    80024856:	00012617          	auipc	a2,0x12
    8002485a:	eca60613          	addi	a2,a2,-310 # 80036720 <__func__.0+0x9700>
    8002485e:	00009517          	auipc	a0,0x9
    80024862:	aba50513          	addi	a0,a0,-1350 # 8002d318 <__func__.0+0x2f8>
    80024866:	554060ef          	jal	8002adba <printf>
    8002486a:	0002c797          	auipc	a5,0x2c
    8002486e:	7a77c783          	lbu	a5,1959(a5) # 80051011 <excpt+0x1>
    80024872:	0002c497          	auipc	s1,0x2c
    80024876:	79e48493          	addi	s1,s1,1950 # 80051010 <excpt>
    8002487a:	00009597          	auipc	a1,0x9
    8002487e:	a7658593          	addi	a1,a1,-1418 # 8002d2f0 <__func__.0+0x2d0>
    80024882:	cf89                	beqz	a5,8002489c <stateen_AIA_test_4+0xb0>
    80024884:	6498                	ld	a4,8(s1)
    80024886:	47d9                	li	a5,22
    80024888:	00009597          	auipc	a1,0x9
    8002488c:	a5858593          	addi	a1,a1,-1448 # 8002d2e0 <__func__.0+0x2c0>
    80024890:	00f70663          	beq	a4,a5,8002489c <stateen_AIA_test_4+0xb0>
    80024894:	00009597          	auipc	a1,0x9
    80024898:	a5c58593          	addi	a1,a1,-1444 # 8002d2f0 <__func__.0+0x2d0>
    8002489c:	00009517          	auipc	a0,0x9
    800248a0:	a9450513          	addi	a0,a0,-1388 # 8002d330 <__func__.0+0x310>
    800248a4:	516060ef          	jal	8002adba <printf>
    800248a8:	0002c797          	auipc	a5,0x2c
    800248ac:	7697c783          	lbu	a5,1897(a5) # 80051011 <excpt+0x1>
    800248b0:	c789                	beqz	a5,800248ba <stateen_AIA_test_4+0xce>
    800248b2:	6498                	ld	a4,8(s1)
    800248b4:	47d9                	li	a5,22
    800248b6:	00f70c63          	beq	a4,a5,800248ce <stateen_AIA_test_4+0xe2>
    800248ba:	00009517          	auipc	a0,0x9
    800248be:	a7e50513          	addi	a0,a0,-1410 # 8002d338 <__func__.0+0x318>
    800248c2:	4f8060ef          	jal	8002adba <printf>
    800248c6:	02900513          	li	a0,41
    800248ca:	1de050ef          	jal	80029aa8 <putchar>
    800248ce:	4529                	li	a0,10
    800248d0:	1d8050ef          	jal	80029aa8 <putchar>
    800248d4:	0002c797          	auipc	a5,0x2c
    800248d8:	73d7c783          	lbu	a5,1853(a5) # 80051011 <excpt+0x1>
    800248dc:	4401                	li	s0,0
    800248de:	c789                	beqz	a5,800248e8 <stateen_AIA_test_4+0xfc>
    800248e0:	6480                	ld	s0,8(s1)
    800248e2:	1429                	addi	s0,s0,-22
    800248e4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800248e8:	4509                	li	a0,2
    800248ea:	d84dc0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800248ee:	c84dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    800248f2:	608027f3          	csrr	a5,hvien

    excpt_info();
    800248f6:	ebedc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    800248fa:	08200593          	li	a1,130
    800248fe:	00012617          	auipc	a2,0x12
    80024902:	e7260613          	addi	a2,a2,-398 # 80036770 <__func__.0+0x9750>
    80024906:	00009517          	auipc	a0,0x9
    8002490a:	a1250513          	addi	a0,a0,-1518 # 8002d318 <__func__.0+0x2f8>
    8002490e:	4ac060ef          	jal	8002adba <printf>
    80024912:	0002c797          	auipc	a5,0x2c
    80024916:	6ff7c783          	lbu	a5,1791(a5) # 80051011 <excpt+0x1>
    8002491a:	00009597          	auipc	a1,0x9
    8002491e:	9d658593          	addi	a1,a1,-1578 # 8002d2f0 <__func__.0+0x2d0>
    80024922:	cf89                	beqz	a5,8002493c <stateen_AIA_test_4+0x150>
    80024924:	6498                	ld	a4,8(s1)
    80024926:	47d9                	li	a5,22
    80024928:	00009597          	auipc	a1,0x9
    8002492c:	9b858593          	addi	a1,a1,-1608 # 8002d2e0 <__func__.0+0x2c0>
    80024930:	00f70663          	beq	a4,a5,8002493c <stateen_AIA_test_4+0x150>
    80024934:	00009597          	auipc	a1,0x9
    80024938:	9bc58593          	addi	a1,a1,-1604 # 8002d2f0 <__func__.0+0x2d0>
    8002493c:	00009517          	auipc	a0,0x9
    80024940:	9f450513          	addi	a0,a0,-1548 # 8002d330 <__func__.0+0x310>
    80024944:	476060ef          	jal	8002adba <printf>
    80024948:	0002c797          	auipc	a5,0x2c
    8002494c:	6c97c783          	lbu	a5,1737(a5) # 80051011 <excpt+0x1>
    80024950:	c789                	beqz	a5,8002495a <stateen_AIA_test_4+0x16e>
    80024952:	6498                	ld	a4,8(s1)
    80024954:	47d9                	li	a5,22
    80024956:	00f70c63          	beq	a4,a5,8002496e <stateen_AIA_test_4+0x182>
    8002495a:	00009517          	auipc	a0,0x9
    8002495e:	9de50513          	addi	a0,a0,-1570 # 8002d338 <__func__.0+0x318>
    80024962:	458060ef          	jal	8002adba <printf>
    80024966:	02900513          	li	a0,41
    8002496a:	13e050ef          	jal	80029aa8 <putchar>
    8002496e:	4529                	li	a0,10
    80024970:	138050ef          	jal	80029aa8 <putchar>
    80024974:	c801                	beqz	s0,80024984 <stateen_AIA_test_4+0x198>
    80024976:	0002c797          	auipc	a5,0x2c
    8002497a:	69b7c783          	lbu	a5,1691(a5) # 80051011 <excpt+0x1>
    8002497e:	4401                	li	s0,0
    80024980:	18079363          	bnez	a5,80024b06 <stateen_AIA_test_4+0x31a>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024984:	4509                	li	a0,2
    80024986:	ce8dc0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    8002498a:	be8dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    8002498e:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024992:	e22dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024996:	08200593          	li	a1,130
    8002499a:	00012617          	auipc	a2,0x12
    8002499e:	e2e60613          	addi	a2,a2,-466 # 800367c8 <__func__.0+0x97a8>
    800249a2:	00009517          	auipc	a0,0x9
    800249a6:	97650513          	addi	a0,a0,-1674 # 8002d318 <__func__.0+0x2f8>
    800249aa:	410060ef          	jal	8002adba <printf>
    800249ae:	0002c797          	auipc	a5,0x2c
    800249b2:	6637c783          	lbu	a5,1635(a5) # 80051011 <excpt+0x1>
    800249b6:	00009597          	auipc	a1,0x9
    800249ba:	93a58593          	addi	a1,a1,-1734 # 8002d2f0 <__func__.0+0x2d0>
    800249be:	cf89                	beqz	a5,800249d8 <stateen_AIA_test_4+0x1ec>
    800249c0:	6498                	ld	a4,8(s1)
    800249c2:	47d9                	li	a5,22
    800249c4:	00009597          	auipc	a1,0x9
    800249c8:	91c58593          	addi	a1,a1,-1764 # 8002d2e0 <__func__.0+0x2c0>
    800249cc:	00f70663          	beq	a4,a5,800249d8 <stateen_AIA_test_4+0x1ec>
    800249d0:	00009597          	auipc	a1,0x9
    800249d4:	92058593          	addi	a1,a1,-1760 # 8002d2f0 <__func__.0+0x2d0>
    800249d8:	00009517          	auipc	a0,0x9
    800249dc:	95850513          	addi	a0,a0,-1704 # 8002d330 <__func__.0+0x310>
    800249e0:	3da060ef          	jal	8002adba <printf>
    800249e4:	0002c797          	auipc	a5,0x2c
    800249e8:	62d7c783          	lbu	a5,1581(a5) # 80051011 <excpt+0x1>
    800249ec:	c789                	beqz	a5,800249f6 <stateen_AIA_test_4+0x20a>
    800249ee:	6498                	ld	a4,8(s1)
    800249f0:	47d9                	li	a5,22
    800249f2:	00f70c63          	beq	a4,a5,80024a0a <stateen_AIA_test_4+0x21e>
    800249f6:	00009517          	auipc	a0,0x9
    800249fa:	94250513          	addi	a0,a0,-1726 # 8002d338 <__func__.0+0x318>
    800249fe:	3bc060ef          	jal	8002adba <printf>
    80024a02:	02900513          	li	a0,41
    80024a06:	0a2050ef          	jal	80029aa8 <putchar>
    80024a0a:	4529                	li	a0,10
    80024a0c:	09c050ef          	jal	80029aa8 <putchar>
    80024a10:	c801                	beqz	s0,80024a20 <stateen_AIA_test_4+0x234>
    80024a12:	0002c797          	auipc	a5,0x2c
    80024a16:	5ff7c783          	lbu	a5,1535(a5) # 80051011 <excpt+0x1>
    80024a1a:	4401                	li	s0,0
    80024a1c:	0e079063          	bnez	a5,80024afc <stateen_AIA_test_4+0x310>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80024a20:	4509                	li	a0,2
    80024a22:	c4cdc0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80024a26:	b4cdc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024a2a:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024a2e:	d86dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024a32:	08200593          	li	a1,130
    80024a36:	00012617          	auipc	a2,0x12
    80024a3a:	de260613          	addi	a2,a2,-542 # 80036818 <__func__.0+0x97f8>
    80024a3e:	00009517          	auipc	a0,0x9
    80024a42:	8da50513          	addi	a0,a0,-1830 # 8002d318 <__func__.0+0x2f8>
    80024a46:	374060ef          	jal	8002adba <printf>
    80024a4a:	0002c797          	auipc	a5,0x2c
    80024a4e:	5c77c783          	lbu	a5,1479(a5) # 80051011 <excpt+0x1>
    80024a52:	00009597          	auipc	a1,0x9
    80024a56:	89e58593          	addi	a1,a1,-1890 # 8002d2f0 <__func__.0+0x2d0>
    80024a5a:	cf89                	beqz	a5,80024a74 <stateen_AIA_test_4+0x288>
    80024a5c:	6498                	ld	a4,8(s1)
    80024a5e:	47d9                	li	a5,22
    80024a60:	00009597          	auipc	a1,0x9
    80024a64:	88058593          	addi	a1,a1,-1920 # 8002d2e0 <__func__.0+0x2c0>
    80024a68:	00f70663          	beq	a4,a5,80024a74 <stateen_AIA_test_4+0x288>
    80024a6c:	00009597          	auipc	a1,0x9
    80024a70:	88458593          	addi	a1,a1,-1916 # 8002d2f0 <__func__.0+0x2d0>
    80024a74:	00009517          	auipc	a0,0x9
    80024a78:	8bc50513          	addi	a0,a0,-1860 # 8002d330 <__func__.0+0x310>
    80024a7c:	33e060ef          	jal	8002adba <printf>
    80024a80:	0002c797          	auipc	a5,0x2c
    80024a84:	5917c783          	lbu	a5,1425(a5) # 80051011 <excpt+0x1>
    80024a88:	c789                	beqz	a5,80024a92 <stateen_AIA_test_4+0x2a6>
    80024a8a:	6498                	ld	a4,8(s1)
    80024a8c:	47d9                	li	a5,22
    80024a8e:	00f70c63          	beq	a4,a5,80024aa6 <stateen_AIA_test_4+0x2ba>
    80024a92:	00009517          	auipc	a0,0x9
    80024a96:	8a650513          	addi	a0,a0,-1882 # 8002d338 <__func__.0+0x318>
    80024a9a:	320060ef          	jal	8002adba <printf>
    80024a9e:	02900513          	li	a0,41
    80024aa2:	006050ef          	jal	80029aa8 <putchar>
    80024aa6:	4529                	li	a0,10
    80024aa8:	000050ef          	jal	80029aa8 <putchar>
    80024aac:	c015                	beqz	s0,80024ad0 <stateen_AIA_test_4+0x2e4>
    80024aae:	0002c417          	auipc	s0,0x2c
    80024ab2:	56344403          	lbu	s0,1379(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    TEST_END();
    80024ab6:	00009597          	auipc	a1,0x9
    80024aba:	83a58593          	addi	a1,a1,-1990 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024abe:	cc11                	beqz	s0,80024ada <stateen_AIA_test_4+0x2ee>
    80024ac0:	6498                	ld	a4,8(s1)
    80024ac2:	47d9                	li	a5,22
    TEST_END();
    80024ac4:	00009597          	auipc	a1,0x9
    80024ac8:	81c58593          	addi	a1,a1,-2020 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss vstopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024acc:	00f70763          	beq	a4,a5,80024ada <stateen_AIA_test_4+0x2ee>
    80024ad0:	4401                	li	s0,0
    TEST_END();
    80024ad2:	00009597          	auipc	a1,0x9
    80024ad6:	81e58593          	addi	a1,a1,-2018 # 8002d2f0 <__func__.0+0x2d0>
    80024ada:	00009517          	auipc	a0,0x9
    80024ade:	8be50513          	addi	a0,a0,-1858 # 8002d398 <__func__.0+0x378>
    80024ae2:	2d8060ef          	jal	8002adba <printf>
    80024ae6:	4511                	li	a0,4
    80024ae8:	b86dc0ef          	jal	80000e6e <goto_priv>
    80024aec:	c9fdc0ef          	jal	8000178a <reset_state>

}
    80024af0:	60e2                	ld	ra,24(sp)
    80024af2:	8522                	mv	a0,s0
    80024af4:	6442                	ld	s0,16(sp)
    80024af6:	64a2                	ld	s1,8(sp)
    80024af8:	6105                	addi	sp,sp,32
    80024afa:	8082                	ret
    TEST_ASSERT("vs mode accesss stopi register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024afc:	6480                	ld	s0,8(s1)
    80024afe:	1429                	addi	s0,s0,-22
    80024b00:	00143413          	seqz	s0,s0
    80024b04:	bf31                	j	80024a20 <stateen_AIA_test_4+0x234>
    TEST_ASSERT("vs mode accesss hvictl register cause to VRTI when mstateen.aia=1 hstateen.aia=0",
    80024b06:	6480                	ld	s0,8(s1)
    80024b08:	1429                	addi	s0,s0,-22
    80024b0a:	00143413          	seqz	s0,s0
    80024b0e:	bd9d                	j	80024984 <stateen_AIA_test_4+0x198>

0000000080024b10 <stateen_AIA_test_5>:

bool stateen_AIA_test_5(){
    80024b10:	1101                	addi	sp,sp,-32

    //当mstateen.AIA=0,hs mode 不可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器

    TEST_START();
    80024b12:	00008597          	auipc	a1,0x8
    80024b16:	1be58593          	addi	a1,a1,446 # 8002ccd0 <__func__.18>
    80024b1a:	00008517          	auipc	a0,0x8
    80024b1e:	7e650513          	addi	a0,a0,2022 # 8002d300 <__func__.0+0x2e0>
bool stateen_AIA_test_5(){
    80024b22:	ec06                	sd	ra,24(sp)
    80024b24:	e822                	sd	s0,16(sp)
    80024b26:	e426                	sd	s1,8(sp)
    TEST_START();
    80024b28:	292060ef          	jal	8002adba <printf>
    80024b2c:	4529                	li	a0,10
    80024b2e:	77b040ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80024b32:	4511                	li	a0,4
    80024b34:	b3adc0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024b38:	4785                	li	a5,1
    80024b3a:	17ee                	slli	a5,a5,0x3b
    80024b3c:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    80024b40:	450d                	li	a0,3
    80024b42:	b2cdc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024b46:	a2cdc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024b4a:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024b4e:	c66dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register cause to illegal except when mstateen.aia=0",
    80024b52:	08200593          	li	a1,130
    80024b56:	00012617          	auipc	a2,0x12
    80024b5a:	d1a60613          	addi	a2,a2,-742 # 80036870 <__func__.0+0x9850>
    80024b5e:	00008517          	auipc	a0,0x8
    80024b62:	7ba50513          	addi	a0,a0,1978 # 8002d318 <__func__.0+0x2f8>
    80024b66:	254060ef          	jal	8002adba <printf>
    80024b6a:	0002c797          	auipc	a5,0x2c
    80024b6e:	4a77c783          	lbu	a5,1191(a5) # 80051011 <excpt+0x1>
    80024b72:	0002c497          	auipc	s1,0x2c
    80024b76:	49e48493          	addi	s1,s1,1182 # 80051010 <excpt>
    80024b7a:	00008597          	auipc	a1,0x8
    80024b7e:	77658593          	addi	a1,a1,1910 # 8002d2f0 <__func__.0+0x2d0>
    80024b82:	cf89                	beqz	a5,80024b9c <stateen_AIA_test_5+0x8c>
    80024b84:	6498                	ld	a4,8(s1)
    80024b86:	4789                	li	a5,2
    80024b88:	00008597          	auipc	a1,0x8
    80024b8c:	75858593          	addi	a1,a1,1880 # 8002d2e0 <__func__.0+0x2c0>
    80024b90:	00f70663          	beq	a4,a5,80024b9c <stateen_AIA_test_5+0x8c>
    80024b94:	00008597          	auipc	a1,0x8
    80024b98:	75c58593          	addi	a1,a1,1884 # 8002d2f0 <__func__.0+0x2d0>
    80024b9c:	00008517          	auipc	a0,0x8
    80024ba0:	79450513          	addi	a0,a0,1940 # 8002d330 <__func__.0+0x310>
    80024ba4:	216060ef          	jal	8002adba <printf>
    80024ba8:	0002c797          	auipc	a5,0x2c
    80024bac:	4697c783          	lbu	a5,1129(a5) # 80051011 <excpt+0x1>
    80024bb0:	c789                	beqz	a5,80024bba <stateen_AIA_test_5+0xaa>
    80024bb2:	6498                	ld	a4,8(s1)
    80024bb4:	4789                	li	a5,2
    80024bb6:	00f70c63          	beq	a4,a5,80024bce <stateen_AIA_test_5+0xbe>
    80024bba:	00008517          	auipc	a0,0x8
    80024bbe:	77e50513          	addi	a0,a0,1918 # 8002d338 <__func__.0+0x318>
    80024bc2:	1f8060ef          	jal	8002adba <printf>
    80024bc6:	02900513          	li	a0,41
    80024bca:	6df040ef          	jal	80029aa8 <putchar>
    80024bce:	4529                	li	a0,10
    80024bd0:	6d9040ef          	jal	80029aa8 <putchar>
    80024bd4:	0002c797          	auipc	a5,0x2c
    80024bd8:	43d7c783          	lbu	a5,1085(a5) # 80051011 <excpt+0x1>
    80024bdc:	4401                	li	s0,0
    80024bde:	c789                	beqz	a5,80024be8 <stateen_AIA_test_5+0xd8>
    80024be0:	6480                	ld	s0,8(s1)
    80024be2:	1479                	addi	s0,s0,-2
    80024be4:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024be8:	450d                	li	a0,3
    80024bea:	a84dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024bee:	984dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024bf2:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024bf6:	bbedc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024bfa:	08200593          	li	a1,130
    80024bfe:	00012617          	auipc	a2,0x12
    80024c02:	cc260613          	addi	a2,a2,-830 # 800368c0 <__func__.0+0x98a0>
    80024c06:	00008517          	auipc	a0,0x8
    80024c0a:	71250513          	addi	a0,a0,1810 # 8002d318 <__func__.0+0x2f8>
    80024c0e:	1ac060ef          	jal	8002adba <printf>
    80024c12:	0002c797          	auipc	a5,0x2c
    80024c16:	3ff7c783          	lbu	a5,1023(a5) # 80051011 <excpt+0x1>
    80024c1a:	00008597          	auipc	a1,0x8
    80024c1e:	6d658593          	addi	a1,a1,1750 # 8002d2f0 <__func__.0+0x2d0>
    80024c22:	cf89                	beqz	a5,80024c3c <stateen_AIA_test_5+0x12c>
    80024c24:	6498                	ld	a4,8(s1)
    80024c26:	4789                	li	a5,2
    80024c28:	00008597          	auipc	a1,0x8
    80024c2c:	6b858593          	addi	a1,a1,1720 # 8002d2e0 <__func__.0+0x2c0>
    80024c30:	00f70663          	beq	a4,a5,80024c3c <stateen_AIA_test_5+0x12c>
    80024c34:	00008597          	auipc	a1,0x8
    80024c38:	6bc58593          	addi	a1,a1,1724 # 8002d2f0 <__func__.0+0x2d0>
    80024c3c:	00008517          	auipc	a0,0x8
    80024c40:	6f450513          	addi	a0,a0,1780 # 8002d330 <__func__.0+0x310>
    80024c44:	176060ef          	jal	8002adba <printf>
    80024c48:	0002c797          	auipc	a5,0x2c
    80024c4c:	3c97c783          	lbu	a5,969(a5) # 80051011 <excpt+0x1>
    80024c50:	c789                	beqz	a5,80024c5a <stateen_AIA_test_5+0x14a>
    80024c52:	6498                	ld	a4,8(s1)
    80024c54:	4789                	li	a5,2
    80024c56:	00f70c63          	beq	a4,a5,80024c6e <stateen_AIA_test_5+0x15e>
    80024c5a:	00008517          	auipc	a0,0x8
    80024c5e:	6de50513          	addi	a0,a0,1758 # 8002d338 <__func__.0+0x318>
    80024c62:	158060ef          	jal	8002adba <printf>
    80024c66:	02900513          	li	a0,41
    80024c6a:	63f040ef          	jal	80029aa8 <putchar>
    80024c6e:	4529                	li	a0,10
    80024c70:	639040ef          	jal	80029aa8 <putchar>
    80024c74:	c801                	beqz	s0,80024c84 <stateen_AIA_test_5+0x174>
    80024c76:	0002c797          	auipc	a5,0x2c
    80024c7a:	39b7c783          	lbu	a5,923(a5) # 80051011 <excpt+0x1>
    80024c7e:	4401                	li	s0,0
    80024c80:	18079363          	bnez	a5,80024e06 <stateen_AIA_test_5+0x2f6>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024c84:	450d                	li	a0,3
    80024c86:	9e8dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024c8a:	8e8dc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80024c8e:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80024c92:	b22dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024c96:	08200593          	li	a1,130
    80024c9a:	00012617          	auipc	a2,0x12
    80024c9e:	c7660613          	addi	a2,a2,-906 # 80036910 <__func__.0+0x98f0>
    80024ca2:	00008517          	auipc	a0,0x8
    80024ca6:	67650513          	addi	a0,a0,1654 # 8002d318 <__func__.0+0x2f8>
    80024caa:	110060ef          	jal	8002adba <printf>
    80024cae:	0002c797          	auipc	a5,0x2c
    80024cb2:	3637c783          	lbu	a5,867(a5) # 80051011 <excpt+0x1>
    80024cb6:	00008597          	auipc	a1,0x8
    80024cba:	63a58593          	addi	a1,a1,1594 # 8002d2f0 <__func__.0+0x2d0>
    80024cbe:	cf89                	beqz	a5,80024cd8 <stateen_AIA_test_5+0x1c8>
    80024cc0:	6498                	ld	a4,8(s1)
    80024cc2:	4789                	li	a5,2
    80024cc4:	00008597          	auipc	a1,0x8
    80024cc8:	61c58593          	addi	a1,a1,1564 # 8002d2e0 <__func__.0+0x2c0>
    80024ccc:	00f70663          	beq	a4,a5,80024cd8 <stateen_AIA_test_5+0x1c8>
    80024cd0:	00008597          	auipc	a1,0x8
    80024cd4:	62058593          	addi	a1,a1,1568 # 8002d2f0 <__func__.0+0x2d0>
    80024cd8:	00008517          	auipc	a0,0x8
    80024cdc:	65850513          	addi	a0,a0,1624 # 8002d330 <__func__.0+0x310>
    80024ce0:	0da060ef          	jal	8002adba <printf>
    80024ce4:	0002c797          	auipc	a5,0x2c
    80024ce8:	32d7c783          	lbu	a5,813(a5) # 80051011 <excpt+0x1>
    80024cec:	c789                	beqz	a5,80024cf6 <stateen_AIA_test_5+0x1e6>
    80024cee:	6498                	ld	a4,8(s1)
    80024cf0:	4789                	li	a5,2
    80024cf2:	00f70c63          	beq	a4,a5,80024d0a <stateen_AIA_test_5+0x1fa>
    80024cf6:	00008517          	auipc	a0,0x8
    80024cfa:	64250513          	addi	a0,a0,1602 # 8002d338 <__func__.0+0x318>
    80024cfe:	0bc060ef          	jal	8002adba <printf>
    80024d02:	02900513          	li	a0,41
    80024d06:	5a3040ef          	jal	80029aa8 <putchar>
    80024d0a:	4529                	li	a0,10
    80024d0c:	59d040ef          	jal	80029aa8 <putchar>
    80024d10:	c801                	beqz	s0,80024d20 <stateen_AIA_test_5+0x210>
    80024d12:	0002c797          	auipc	a5,0x2c
    80024d16:	2ff7c783          	lbu	a5,767(a5) # 80051011 <excpt+0x1>
    80024d1a:	4401                	li	s0,0
    80024d1c:	0e079063          	bnez	a5,80024dfc <stateen_AIA_test_5+0x2ec>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80024d20:	450d                	li	a0,3
    80024d22:	94cdc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024d26:	84cdc0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80024d2a:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80024d2e:	a86dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024d32:	08200593          	li	a1,130
    80024d36:	00012617          	auipc	a2,0x12
    80024d3a:	c2a60613          	addi	a2,a2,-982 # 80036960 <__func__.0+0x9940>
    80024d3e:	00008517          	auipc	a0,0x8
    80024d42:	5da50513          	addi	a0,a0,1498 # 8002d318 <__func__.0+0x2f8>
    80024d46:	074060ef          	jal	8002adba <printf>
    80024d4a:	0002c797          	auipc	a5,0x2c
    80024d4e:	2c77c783          	lbu	a5,711(a5) # 80051011 <excpt+0x1>
    80024d52:	00008597          	auipc	a1,0x8
    80024d56:	59e58593          	addi	a1,a1,1438 # 8002d2f0 <__func__.0+0x2d0>
    80024d5a:	cf89                	beqz	a5,80024d74 <stateen_AIA_test_5+0x264>
    80024d5c:	6498                	ld	a4,8(s1)
    80024d5e:	4789                	li	a5,2
    80024d60:	00008597          	auipc	a1,0x8
    80024d64:	58058593          	addi	a1,a1,1408 # 8002d2e0 <__func__.0+0x2c0>
    80024d68:	00f70663          	beq	a4,a5,80024d74 <stateen_AIA_test_5+0x264>
    80024d6c:	00008597          	auipc	a1,0x8
    80024d70:	58458593          	addi	a1,a1,1412 # 8002d2f0 <__func__.0+0x2d0>
    80024d74:	00008517          	auipc	a0,0x8
    80024d78:	5bc50513          	addi	a0,a0,1468 # 8002d330 <__func__.0+0x310>
    80024d7c:	03e060ef          	jal	8002adba <printf>
    80024d80:	0002c797          	auipc	a5,0x2c
    80024d84:	2917c783          	lbu	a5,657(a5) # 80051011 <excpt+0x1>
    80024d88:	c789                	beqz	a5,80024d92 <stateen_AIA_test_5+0x282>
    80024d8a:	6498                	ld	a4,8(s1)
    80024d8c:	4789                	li	a5,2
    80024d8e:	00f70c63          	beq	a4,a5,80024da6 <stateen_AIA_test_5+0x296>
    80024d92:	00008517          	auipc	a0,0x8
    80024d96:	5a650513          	addi	a0,a0,1446 # 8002d338 <__func__.0+0x318>
    80024d9a:	020060ef          	jal	8002adba <printf>
    80024d9e:	02900513          	li	a0,41
    80024da2:	507040ef          	jal	80029aa8 <putchar>
    80024da6:	4529                	li	a0,10
    80024da8:	501040ef          	jal	80029aa8 <putchar>
    80024dac:	c015                	beqz	s0,80024dd0 <stateen_AIA_test_5+0x2c0>
    80024dae:	0002c417          	auipc	s0,0x2c
    80024db2:	26344403          	lbu	s0,611(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    TEST_END();
    80024db6:	00008597          	auipc	a1,0x8
    80024dba:	53a58593          	addi	a1,a1,1338 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024dbe:	cc11                	beqz	s0,80024dda <stateen_AIA_test_5+0x2ca>
    80024dc0:	6498                	ld	a4,8(s1)
    80024dc2:	4789                	li	a5,2
    TEST_END();
    80024dc4:	00008597          	auipc	a1,0x8
    80024dc8:	51c58593          	addi	a1,a1,1308 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss VSTOPI register cause to illegal except when mstateen.aia=0",
    80024dcc:	00f70763          	beq	a4,a5,80024dda <stateen_AIA_test_5+0x2ca>
    80024dd0:	4401                	li	s0,0
    TEST_END();
    80024dd2:	00008597          	auipc	a1,0x8
    80024dd6:	51e58593          	addi	a1,a1,1310 # 8002d2f0 <__func__.0+0x2d0>
    80024dda:	00008517          	auipc	a0,0x8
    80024dde:	5be50513          	addi	a0,a0,1470 # 8002d398 <__func__.0+0x378>
    80024de2:	7d9050ef          	jal	8002adba <printf>
    80024de6:	4511                	li	a0,4
    80024de8:	886dc0ef          	jal	80000e6e <goto_priv>
    80024dec:	99fdc0ef          	jal	8000178a <reset_state>

}
    80024df0:	60e2                	ld	ra,24(sp)
    80024df2:	8522                	mv	a0,s0
    80024df4:	6442                	ld	s0,16(sp)
    80024df6:	64a2                	ld	s1,8(sp)
    80024df8:	6105                	addi	sp,sp,32
    80024dfa:	8082                	ret
    TEST_ASSERT("hs mode accesss stopi register cause to illegal except when mstateen.aia=0",
    80024dfc:	6480                	ld	s0,8(s1)
    80024dfe:	1479                	addi	s0,s0,-2
    80024e00:	00143413          	seqz	s0,s0
    80024e04:	bf31                	j	80024d20 <stateen_AIA_test_5+0x210>
    TEST_ASSERT("hs mode accesss hvictl register cause to illegal except when mstateen.aia=0",
    80024e06:	6480                	ld	s0,8(s1)
    80024e08:	1479                	addi	s0,s0,-2
    80024e0a:	00143413          	seqz	s0,s0
    80024e0e:	bd9d                	j	80024c84 <stateen_AIA_test_5+0x174>

0000000080024e10 <stateen_AIA_test_6>:


bool stateen_AIA_test_6(){
    80024e10:	1101                	addi	sp,sp,-32

    TEST_START();
    80024e12:	00008597          	auipc	a1,0x8
    80024e16:	ed658593          	addi	a1,a1,-298 # 8002cce8 <__func__.17>
    80024e1a:	00008517          	auipc	a0,0x8
    80024e1e:	4e650513          	addi	a0,a0,1254 # 8002d300 <__func__.0+0x2e0>
bool stateen_AIA_test_6(){
    80024e22:	ec06                	sd	ra,24(sp)
    80024e24:	e822                	sd	s0,16(sp)
    80024e26:	e426                	sd	s1,8(sp)
    TEST_START();
    80024e28:	793050ef          	jal	8002adba <printf>
    80024e2c:	4529                	li	a0,10
    80024e2e:	47b040ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80024e32:	4511                	li	a0,4
    80024e34:	83adc0ef          	jal	80000e6e <goto_priv>
    //当mstateen.AIA=1,v=0时,可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    80024e38:	4785                	li	a5,1
    80024e3a:	17ee                	slli	a5,a5,0x3b
    80024e3c:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_AIA);
    80024e40:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80024e44:	450d                	li	a0,3
    80024e46:	828dc0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024e4a:	f29db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024e4e:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024e52:	962dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    80024e56:	08200593          	li	a1,130
    80024e5a:	00012617          	auipc	a2,0x12
    80024e5e:	b5660613          	addi	a2,a2,-1194 # 800369b0 <__func__.0+0x9990>
    80024e62:	00008517          	auipc	a0,0x8
    80024e66:	4b650513          	addi	a0,a0,1206 # 8002d318 <__func__.0+0x2f8>
    80024e6a:	751050ef          	jal	8002adba <printf>
    80024e6e:	0002c797          	auipc	a5,0x2c
    80024e72:	1a37c783          	lbu	a5,419(a5) # 80051011 <excpt+0x1>
    80024e76:	00008597          	auipc	a1,0x8
    80024e7a:	46a58593          	addi	a1,a1,1130 # 8002d2e0 <__func__.0+0x2c0>
    80024e7e:	c789                	beqz	a5,80024e88 <stateen_AIA_test_6+0x78>
    80024e80:	00008597          	auipc	a1,0x8
    80024e84:	47058593          	addi	a1,a1,1136 # 8002d2f0 <__func__.0+0x2d0>
    80024e88:	00008517          	auipc	a0,0x8
    80024e8c:	4a850513          	addi	a0,a0,1192 # 8002d330 <__func__.0+0x310>
    80024e90:	72b050ef          	jal	8002adba <printf>
    80024e94:	0002c797          	auipc	a5,0x2c
    80024e98:	17d7c783          	lbu	a5,381(a5) # 80051011 <excpt+0x1>
    80024e9c:	5e079b63          	bnez	a5,80025492 <stateen_AIA_test_6+0x682>
    80024ea0:	4529                	li	a0,10
    80024ea2:	407040ef          	jal	80029aa8 <putchar>
    80024ea6:	0002c497          	auipc	s1,0x2c
    80024eaa:	16b4c483          	lbu	s1,363(s1) # 80051011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_HVICTL);
    80024eae:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024eb2:	902dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    80024eb6:	08200593          	li	a1,130
    80024eba:	00012617          	auipc	a2,0x12
    80024ebe:	b4660613          	addi	a2,a2,-1210 # 80036a00 <__func__.0+0x99e0>
    80024ec2:	00008517          	auipc	a0,0x8
    80024ec6:	45650513          	addi	a0,a0,1110 # 8002d318 <__func__.0+0x2f8>
    80024eca:	6f1050ef          	jal	8002adba <printf>
    80024ece:	0002c797          	auipc	a5,0x2c
    80024ed2:	1437c783          	lbu	a5,323(a5) # 80051011 <excpt+0x1>
    80024ed6:	00008597          	auipc	a1,0x8
    80024eda:	41a58593          	addi	a1,a1,1050 # 8002d2f0 <__func__.0+0x2d0>
    80024ede:	e789                	bnez	a5,80024ee8 <stateen_AIA_test_6+0xd8>
    80024ee0:	00008597          	auipc	a1,0x8
    80024ee4:	40058593          	addi	a1,a1,1024 # 8002d2e0 <__func__.0+0x2c0>
    80024ee8:	00008517          	auipc	a0,0x8
    80024eec:	44850513          	addi	a0,a0,1096 # 8002d330 <__func__.0+0x310>
    80024ef0:	6cb050ef          	jal	8002adba <printf>
    80024ef4:	0002c797          	auipc	a5,0x2c
    80024ef8:	11d7c783          	lbu	a5,285(a5) # 80051011 <excpt+0x1>
    80024efc:	58079063          	bnez	a5,8002547c <stateen_AIA_test_6+0x66c>
    80024f00:	4529                	li	a0,10
    80024f02:	3a7040ef          	jal	80029aa8 <putchar>
    80024f06:	4401                	li	s0,0
    80024f08:	e499                	bnez	s1,80024f16 <stateen_AIA_test_6+0x106>
    80024f0a:	0002c417          	auipc	s0,0x2c
    80024f0e:	10744403          	lbu	s0,263(s0) # 80051011 <excpt+0x1>
    80024f12:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80024f16:	4505                	li	a0,1
    80024f18:	f57db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024f1c:	e57db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80024f20:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024f24:	890dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80024f28:	08200593          	li	a1,130
    80024f2c:	00012617          	auipc	a2,0x12
    80024f30:	b2460613          	addi	a2,a2,-1244 # 80036a50 <__func__.0+0x9a30>
    80024f34:	00008517          	auipc	a0,0x8
    80024f38:	3e450513          	addi	a0,a0,996 # 8002d318 <__func__.0+0x2f8>
    80024f3c:	67f050ef          	jal	8002adba <printf>
    80024f40:	0002c797          	auipc	a5,0x2c
    80024f44:	0d17c783          	lbu	a5,209(a5) # 80051011 <excpt+0x1>
    80024f48:	00008597          	auipc	a1,0x8
    80024f4c:	3a858593          	addi	a1,a1,936 # 8002d2f0 <__func__.0+0x2d0>
    80024f50:	e789                	bnez	a5,80024f5a <stateen_AIA_test_6+0x14a>
    80024f52:	00008597          	auipc	a1,0x8
    80024f56:	38e58593          	addi	a1,a1,910 # 8002d2e0 <__func__.0+0x2c0>
    80024f5a:	00008517          	auipc	a0,0x8
    80024f5e:	3d650513          	addi	a0,a0,982 # 8002d330 <__func__.0+0x310>
    80024f62:	659050ef          	jal	8002adba <printf>
    80024f66:	0002c797          	auipc	a5,0x2c
    80024f6a:	0ab7c783          	lbu	a5,171(a5) # 80051011 <excpt+0x1>
    80024f6e:	4e079c63          	bnez	a5,80025466 <stateen_AIA_test_6+0x656>
    80024f72:	4529                	li	a0,10
    80024f74:	335040ef          	jal	80029aa8 <putchar>
    80024f78:	c419                	beqz	s0,80024f86 <stateen_AIA_test_6+0x176>
    80024f7a:	0002c417          	auipc	s0,0x2c
    80024f7e:	09744403          	lbu	s0,151(s0) # 80051011 <excpt+0x1>
    80024f82:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80024f86:	4505                	li	a0,1
    80024f88:	ee7db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024f8c:	de7db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80024f90:	608027f3          	csrr	a5,hvien

    excpt_info();
    80024f94:	820dc0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80024f98:	08200593          	li	a1,130
    80024f9c:	00012617          	auipc	a2,0x12
    80024fa0:	b0460613          	addi	a2,a2,-1276 # 80036aa0 <__func__.0+0x9a80>
    80024fa4:	00008517          	auipc	a0,0x8
    80024fa8:	37450513          	addi	a0,a0,884 # 8002d318 <__func__.0+0x2f8>
    80024fac:	60f050ef          	jal	8002adba <printf>
    80024fb0:	0002c797          	auipc	a5,0x2c
    80024fb4:	0617c783          	lbu	a5,97(a5) # 80051011 <excpt+0x1>
    80024fb8:	00008597          	auipc	a1,0x8
    80024fbc:	33858593          	addi	a1,a1,824 # 8002d2f0 <__func__.0+0x2d0>
    80024fc0:	e789                	bnez	a5,80024fca <stateen_AIA_test_6+0x1ba>
    80024fc2:	00008597          	auipc	a1,0x8
    80024fc6:	31e58593          	addi	a1,a1,798 # 8002d2e0 <__func__.0+0x2c0>
    80024fca:	00008517          	auipc	a0,0x8
    80024fce:	36650513          	addi	a0,a0,870 # 8002d330 <__func__.0+0x310>
    80024fd2:	5e9050ef          	jal	8002adba <printf>
    80024fd6:	0002c797          	auipc	a5,0x2c
    80024fda:	03b7c783          	lbu	a5,59(a5) # 80051011 <excpt+0x1>
    80024fde:	46079963          	bnez	a5,80025450 <stateen_AIA_test_6+0x640>
    80024fe2:	4529                	li	a0,10
    80024fe4:	2c5040ef          	jal	80029aa8 <putchar>
    80024fe8:	c419                	beqz	s0,80024ff6 <stateen_AIA_test_6+0x1e6>
    80024fea:	0002c417          	auipc	s0,0x2c
    80024fee:	02744403          	lbu	s0,39(s0) # 80051011 <excpt+0x1>
    80024ff2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80024ff6:	4511                	li	a0,4
    80024ff8:	e77db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80024ffc:	d77db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    80025000:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025004:	fb1db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80025008:	08200593          	li	a1,130
    8002500c:	00012617          	auipc	a2,0x12
    80025010:	ae460613          	addi	a2,a2,-1308 # 80036af0 <__func__.0+0x9ad0>
    80025014:	00008517          	auipc	a0,0x8
    80025018:	30450513          	addi	a0,a0,772 # 8002d318 <__func__.0+0x2f8>
    8002501c:	59f050ef          	jal	8002adba <printf>
    80025020:	0002c797          	auipc	a5,0x2c
    80025024:	ff17c783          	lbu	a5,-15(a5) # 80051011 <excpt+0x1>
    80025028:	00008597          	auipc	a1,0x8
    8002502c:	2c858593          	addi	a1,a1,712 # 8002d2f0 <__func__.0+0x2d0>
    80025030:	e789                	bnez	a5,8002503a <stateen_AIA_test_6+0x22a>
    80025032:	00008597          	auipc	a1,0x8
    80025036:	2ae58593          	addi	a1,a1,686 # 8002d2e0 <__func__.0+0x2c0>
    8002503a:	00008517          	auipc	a0,0x8
    8002503e:	2f650513          	addi	a0,a0,758 # 8002d330 <__func__.0+0x310>
    80025042:	579050ef          	jal	8002adba <printf>
    80025046:	0002c797          	auipc	a5,0x2c
    8002504a:	fcb7c783          	lbu	a5,-53(a5) # 80051011 <excpt+0x1>
    8002504e:	3e079663          	bnez	a5,8002543a <stateen_AIA_test_6+0x62a>
    80025052:	4529                	li	a0,10
    80025054:	255040ef          	jal	80029aa8 <putchar>
    80025058:	c419                	beqz	s0,80025066 <stateen_AIA_test_6+0x256>
    8002505a:	0002c417          	auipc	s0,0x2c
    8002505e:	fb744403          	lbu	s0,-73(s0) # 80051011 <excpt+0x1>
    80025062:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80025066:	4511                	li	a0,4
    80025068:	e07db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002506c:	d07db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025070:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025074:	f41db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025078:	08200593          	li	a1,130
    8002507c:	00012617          	auipc	a2,0x12
    80025080:	ac460613          	addi	a2,a2,-1340 # 80036b40 <__func__.0+0x9b20>
    80025084:	00008517          	auipc	a0,0x8
    80025088:	29450513          	addi	a0,a0,660 # 8002d318 <__func__.0+0x2f8>
    8002508c:	52f050ef          	jal	8002adba <printf>
    80025090:	0002c797          	auipc	a5,0x2c
    80025094:	f817c783          	lbu	a5,-127(a5) # 80051011 <excpt+0x1>
    80025098:	00008597          	auipc	a1,0x8
    8002509c:	25858593          	addi	a1,a1,600 # 8002d2f0 <__func__.0+0x2d0>
    800250a0:	e789                	bnez	a5,800250aa <stateen_AIA_test_6+0x29a>
    800250a2:	00008597          	auipc	a1,0x8
    800250a6:	23e58593          	addi	a1,a1,574 # 8002d2e0 <__func__.0+0x2c0>
    800250aa:	00008517          	auipc	a0,0x8
    800250ae:	28650513          	addi	a0,a0,646 # 8002d330 <__func__.0+0x310>
    800250b2:	509050ef          	jal	8002adba <printf>
    800250b6:	0002c797          	auipc	a5,0x2c
    800250ba:	f5b7c783          	lbu	a5,-165(a5) # 80051011 <excpt+0x1>
    800250be:	36079363          	bnez	a5,80025424 <stateen_AIA_test_6+0x614>
    800250c2:	4529                	li	a0,10
    800250c4:	1e5040ef          	jal	80029aa8 <putchar>
    800250c8:	c419                	beqz	s0,800250d6 <stateen_AIA_test_6+0x2c6>
    800250ca:	0002c417          	auipc	s0,0x2c
    800250ce:	f4744403          	lbu	s0,-185(s0) # 80051011 <excpt+0x1>
    800250d2:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    800250d6:	450d                	li	a0,3
    800250d8:	d97db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800250dc:	c97db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    800250e0:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800250e4:	ed1db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800250e8:	08200593          	li	a1,130
    800250ec:	00012617          	auipc	a2,0x12
    800250f0:	aa460613          	addi	a2,a2,-1372 # 80036b90 <__func__.0+0x9b70>
    800250f4:	00008517          	auipc	a0,0x8
    800250f8:	22450513          	addi	a0,a0,548 # 8002d318 <__func__.0+0x2f8>
    800250fc:	4bf050ef          	jal	8002adba <printf>
    80025100:	0002c797          	auipc	a5,0x2c
    80025104:	f117c783          	lbu	a5,-239(a5) # 80051011 <excpt+0x1>
    80025108:	00008597          	auipc	a1,0x8
    8002510c:	1e858593          	addi	a1,a1,488 # 8002d2f0 <__func__.0+0x2d0>
    80025110:	e789                	bnez	a5,8002511a <stateen_AIA_test_6+0x30a>
    80025112:	00008597          	auipc	a1,0x8
    80025116:	1ce58593          	addi	a1,a1,462 # 8002d2e0 <__func__.0+0x2c0>
    8002511a:	00008517          	auipc	a0,0x8
    8002511e:	21650513          	addi	a0,a0,534 # 8002d330 <__func__.0+0x310>
    80025122:	499050ef          	jal	8002adba <printf>
    80025126:	0002c797          	auipc	a5,0x2c
    8002512a:	eeb7c783          	lbu	a5,-277(a5) # 80051011 <excpt+0x1>
    8002512e:	2e079063          	bnez	a5,8002540e <stateen_AIA_test_6+0x5fe>
    80025132:	4529                	li	a0,10
    80025134:	175040ef          	jal	80029aa8 <putchar>
    80025138:	c419                	beqz	s0,80025146 <stateen_AIA_test_6+0x336>
    8002513a:	0002c417          	auipc	s0,0x2c
    8002513e:	ed744403          	lbu	s0,-297(s0) # 80051011 <excpt+0x1>
    80025142:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    CSRR(CSR_VSTOPI);
    80025146:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002514a:	e6bdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    8002514e:	08200593          	li	a1,130
    80025152:	00012617          	auipc	a2,0x12
    80025156:	a8e60613          	addi	a2,a2,-1394 # 80036be0 <__func__.0+0x9bc0>
    8002515a:	00008517          	auipc	a0,0x8
    8002515e:	1be50513          	addi	a0,a0,446 # 8002d318 <__func__.0+0x2f8>
    80025162:	459050ef          	jal	8002adba <printf>
    80025166:	0002c797          	auipc	a5,0x2c
    8002516a:	eab7c783          	lbu	a5,-341(a5) # 80051011 <excpt+0x1>
    8002516e:	00008597          	auipc	a1,0x8
    80025172:	18258593          	addi	a1,a1,386 # 8002d2f0 <__func__.0+0x2d0>
    80025176:	e789                	bnez	a5,80025180 <stateen_AIA_test_6+0x370>
    80025178:	00008597          	auipc	a1,0x8
    8002517c:	16858593          	addi	a1,a1,360 # 8002d2e0 <__func__.0+0x2c0>
    80025180:	00008517          	auipc	a0,0x8
    80025184:	1b050513          	addi	a0,a0,432 # 8002d330 <__func__.0+0x310>
    80025188:	433050ef          	jal	8002adba <printf>
    8002518c:	0002c797          	auipc	a5,0x2c
    80025190:	e857c783          	lbu	a5,-379(a5) # 80051011 <excpt+0x1>
    80025194:	26079263          	bnez	a5,800253f8 <stateen_AIA_test_6+0x5e8>
    80025198:	4529                	li	a0,10
    8002519a:	10f040ef          	jal	80029aa8 <putchar>
    8002519e:	c419                	beqz	s0,800251ac <stateen_AIA_test_6+0x39c>
    800251a0:	0002c417          	auipc	s0,0x2c
    800251a4:	e7144403          	lbu	s0,-399(s0) # 80051011 <excpt+0x1>
    800251a8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    800251ac:	4505                	li	a0,1
    800251ae:	cc1db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800251b2:	bc1db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    800251b6:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800251ba:	dfbdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    800251be:	08200593          	li	a1,130
    800251c2:	00012617          	auipc	a2,0x12
    800251c6:	a6e60613          	addi	a2,a2,-1426 # 80036c30 <__func__.0+0x9c10>
    800251ca:	00008517          	auipc	a0,0x8
    800251ce:	14e50513          	addi	a0,a0,334 # 8002d318 <__func__.0+0x2f8>
    800251d2:	3e9050ef          	jal	8002adba <printf>
    800251d6:	0002c797          	auipc	a5,0x2c
    800251da:	e3b7c783          	lbu	a5,-453(a5) # 80051011 <excpt+0x1>
    800251de:	00008597          	auipc	a1,0x8
    800251e2:	11258593          	addi	a1,a1,274 # 8002d2f0 <__func__.0+0x2d0>
    800251e6:	e789                	bnez	a5,800251f0 <stateen_AIA_test_6+0x3e0>
    800251e8:	00008597          	auipc	a1,0x8
    800251ec:	0f858593          	addi	a1,a1,248 # 8002d2e0 <__func__.0+0x2c0>
    800251f0:	00008517          	auipc	a0,0x8
    800251f4:	14050513          	addi	a0,a0,320 # 8002d330 <__func__.0+0x310>
    800251f8:	3c3050ef          	jal	8002adba <printf>
    800251fc:	0002c797          	auipc	a5,0x2c
    80025200:	e157c783          	lbu	a5,-491(a5) # 80051011 <excpt+0x1>
    80025204:	1c079f63          	bnez	a5,800253e2 <stateen_AIA_test_6+0x5d2>
    80025208:	4529                	li	a0,10
    8002520a:	09f040ef          	jal	80029aa8 <putchar>
    8002520e:	c419                	beqz	s0,8002521c <stateen_AIA_test_6+0x40c>
    80025210:	0002c417          	auipc	s0,0x2c
    80025214:	e0144403          	lbu	s0,-511(s0) # 80051011 <excpt+0x1>
    80025218:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    8002521c:	4505                	li	a0,1
    8002521e:	c51db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025222:	b51db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80025226:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002522a:	d8bdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002522e:	08200593          	li	a1,130
    80025232:	00012617          	auipc	a2,0x12
    80025236:	a4e60613          	addi	a2,a2,-1458 # 80036c80 <__func__.0+0x9c60>
    8002523a:	00008517          	auipc	a0,0x8
    8002523e:	0de50513          	addi	a0,a0,222 # 8002d318 <__func__.0+0x2f8>
    80025242:	379050ef          	jal	8002adba <printf>
    80025246:	0002c797          	auipc	a5,0x2c
    8002524a:	dcb7c783          	lbu	a5,-565(a5) # 80051011 <excpt+0x1>
    8002524e:	00008597          	auipc	a1,0x8
    80025252:	0a258593          	addi	a1,a1,162 # 8002d2f0 <__func__.0+0x2d0>
    80025256:	e789                	bnez	a5,80025260 <stateen_AIA_test_6+0x450>
    80025258:	00008597          	auipc	a1,0x8
    8002525c:	08858593          	addi	a1,a1,136 # 8002d2e0 <__func__.0+0x2c0>
    80025260:	00008517          	auipc	a0,0x8
    80025264:	0d050513          	addi	a0,a0,208 # 8002d330 <__func__.0+0x310>
    80025268:	353050ef          	jal	8002adba <printf>
    8002526c:	0002c797          	auipc	a5,0x2c
    80025270:	da57c783          	lbu	a5,-603(a5) # 80051011 <excpt+0x1>
    80025274:	14079c63          	bnez	a5,800253cc <stateen_AIA_test_6+0x5bc>
    80025278:	4529                	li	a0,10
    8002527a:	02f040ef          	jal	80029aa8 <putchar>
    8002527e:	c419                	beqz	s0,8002528c <stateen_AIA_test_6+0x47c>
    80025280:	0002c417          	auipc	s0,0x2c
    80025284:	d9144403          	lbu	s0,-623(s0) # 80051011 <excpt+0x1>
    80025288:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    8002528c:	4511                	li	a0,4
    8002528e:	be1db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025292:	ae1db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025296:	db0027f3          	csrr	a5,stopi

    excpt_info();
    8002529a:	d1bdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002529e:	08200593          	li	a1,130
    800252a2:	00012617          	auipc	a2,0x12
    800252a6:	a2e60613          	addi	a2,a2,-1490 # 80036cd0 <__func__.0+0x9cb0>
    800252aa:	00008517          	auipc	a0,0x8
    800252ae:	06e50513          	addi	a0,a0,110 # 8002d318 <__func__.0+0x2f8>
    800252b2:	309050ef          	jal	8002adba <printf>
    800252b6:	0002c797          	auipc	a5,0x2c
    800252ba:	d5b7c783          	lbu	a5,-677(a5) # 80051011 <excpt+0x1>
    800252be:	00008597          	auipc	a1,0x8
    800252c2:	03258593          	addi	a1,a1,50 # 8002d2f0 <__func__.0+0x2d0>
    800252c6:	e789                	bnez	a5,800252d0 <stateen_AIA_test_6+0x4c0>
    800252c8:	00008597          	auipc	a1,0x8
    800252cc:	01858593          	addi	a1,a1,24 # 8002d2e0 <__func__.0+0x2c0>
    800252d0:	00008517          	auipc	a0,0x8
    800252d4:	06050513          	addi	a0,a0,96 # 8002d330 <__func__.0+0x310>
    800252d8:	2e3050ef          	jal	8002adba <printf>
    800252dc:	0002c797          	auipc	a5,0x2c
    800252e0:	d357c783          	lbu	a5,-715(a5) # 80051011 <excpt+0x1>
    800252e4:	0c079963          	bnez	a5,800253b6 <stateen_AIA_test_6+0x5a6>
    800252e8:	4529                	li	a0,10
    800252ea:	7be040ef          	jal	80029aa8 <putchar>
    800252ee:	c419                	beqz	s0,800252fc <stateen_AIA_test_6+0x4ec>
    800252f0:	0002c417          	auipc	s0,0x2c
    800252f4:	d2144403          	lbu	s0,-735(s0) # 80051011 <excpt+0x1>
    800252f8:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800252fc:	4511                	li	a0,4
    800252fe:	b71db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025302:	a71db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80025306:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    8002530a:	cabdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    8002530e:	08200593          	li	a1,130
    80025312:	00012617          	auipc	a2,0x12
    80025316:	a0e60613          	addi	a2,a2,-1522 # 80036d20 <__func__.0+0x9d00>
    8002531a:	00008517          	auipc	a0,0x8
    8002531e:	ffe50513          	addi	a0,a0,-2 # 8002d318 <__func__.0+0x2f8>
    80025322:	299050ef          	jal	8002adba <printf>
    80025326:	0002c797          	auipc	a5,0x2c
    8002532a:	ceb7c783          	lbu	a5,-789(a5) # 80051011 <excpt+0x1>
    8002532e:	00008597          	auipc	a1,0x8
    80025332:	fc258593          	addi	a1,a1,-62 # 8002d2f0 <__func__.0+0x2d0>
    80025336:	e789                	bnez	a5,80025340 <stateen_AIA_test_6+0x530>
    80025338:	00008597          	auipc	a1,0x8
    8002533c:	fa858593          	addi	a1,a1,-88 # 8002d2e0 <__func__.0+0x2c0>
    80025340:	00008517          	auipc	a0,0x8
    80025344:	ff050513          	addi	a0,a0,-16 # 8002d330 <__func__.0+0x310>
    80025348:	273050ef          	jal	8002adba <printf>
    8002534c:	0002c797          	auipc	a5,0x2c
    80025350:	cc57c783          	lbu	a5,-827(a5) # 80051011 <excpt+0x1>
    80025354:	e7b1                	bnez	a5,800253a0 <stateen_AIA_test_6+0x590>
    80025356:	4529                	li	a0,10
    80025358:	750040ef          	jal	80029aa8 <putchar>
    8002535c:	c411                	beqz	s0,80025368 <stateen_AIA_test_6+0x558>
    8002535e:	0002c797          	auipc	a5,0x2c
    80025362:	cb37c783          	lbu	a5,-845(a5) # 80051011 <excpt+0x1>
    80025366:	c79d                	beqz	a5,80025394 <stateen_AIA_test_6+0x584>
    80025368:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    8002536a:	00008597          	auipc	a1,0x8
    8002536e:	f8658593          	addi	a1,a1,-122 # 8002d2f0 <__func__.0+0x2d0>
    80025372:	00008517          	auipc	a0,0x8
    80025376:	02650513          	addi	a0,a0,38 # 8002d398 <__func__.0+0x378>
    8002537a:	241050ef          	jal	8002adba <printf>
    8002537e:	4511                	li	a0,4
    80025380:	aefdb0ef          	jal	80000e6e <goto_priv>
    80025384:	c06dc0ef          	jal	8000178a <reset_state>

}
    80025388:	60e2                	ld	ra,24(sp)
    8002538a:	8522                	mv	a0,s0
    8002538c:	6442                	ld	s0,16(sp)
    8002538e:	64a2                	ld	s1,8(sp)
    80025390:	6105                	addi	sp,sp,32
    80025392:	8082                	ret
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    80025394:	4405                	li	s0,1
    TEST_END();
    80025396:	00008597          	auipc	a1,0x8
    8002539a:	f4a58593          	addi	a1,a1,-182 # 8002d2e0 <__func__.0+0x2c0>
    8002539e:	bfd1                	j	80025372 <stateen_AIA_test_6+0x562>
    TEST_ASSERT("m mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800253a0:	00008517          	auipc	a0,0x8
    800253a4:	f9850513          	addi	a0,a0,-104 # 8002d338 <__func__.0+0x318>
    800253a8:	213050ef          	jal	8002adba <printf>
    800253ac:	02900513          	li	a0,41
    800253b0:	6f8040ef          	jal	80029aa8 <putchar>
    800253b4:	b74d                	j	80025356 <stateen_AIA_test_6+0x546>
    TEST_ASSERT("m mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    800253b6:	00008517          	auipc	a0,0x8
    800253ba:	f8250513          	addi	a0,a0,-126 # 8002d338 <__func__.0+0x318>
    800253be:	1fd050ef          	jal	8002adba <printf>
    800253c2:	02900513          	li	a0,41
    800253c6:	6e2040ef          	jal	80029aa8 <putchar>
    800253ca:	bf39                	j	800252e8 <stateen_AIA_test_6+0x4d8>
    TEST_ASSERT("hu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=0",
    800253cc:	00008517          	auipc	a0,0x8
    800253d0:	f6c50513          	addi	a0,a0,-148 # 8002d338 <__func__.0+0x318>
    800253d4:	1e7050ef          	jal	8002adba <printf>
    800253d8:	02900513          	li	a0,41
    800253dc:	6cc040ef          	jal	80029aa8 <putchar>
    800253e0:	bd61                	j	80025278 <stateen_AIA_test_6+0x468>
    TEST_ASSERT("hu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=0",
    800253e2:	00008517          	auipc	a0,0x8
    800253e6:	f5650513          	addi	a0,a0,-170 # 8002d338 <__func__.0+0x318>
    800253ea:	1d1050ef          	jal	8002adba <printf>
    800253ee:	02900513          	li	a0,41
    800253f2:	6b6040ef          	jal	80029aa8 <putchar>
    800253f6:	bd09                	j	80025208 <stateen_AIA_test_6+0x3f8>
    TEST_ASSERT("hs mode accesss vstopi register successful when  mstateen.aia=1 hstateen.aia=0",
    800253f8:	00008517          	auipc	a0,0x8
    800253fc:	f4050513          	addi	a0,a0,-192 # 8002d338 <__func__.0+0x318>
    80025400:	1bb050ef          	jal	8002adba <printf>
    80025404:	02900513          	li	a0,41
    80025408:	6a0040ef          	jal	80029aa8 <putchar>
    8002540c:	b371                	j	80025198 <stateen_AIA_test_6+0x388>
    TEST_ASSERT("hs mode accesss stopi register successful when  mstateen.aia=1 hstateen.aia=0",
    8002540e:	00008517          	auipc	a0,0x8
    80025412:	f2a50513          	addi	a0,a0,-214 # 8002d338 <__func__.0+0x318>
    80025416:	1a5050ef          	jal	8002adba <printf>
    8002541a:	02900513          	li	a0,41
    8002541e:	68a040ef          	jal	80029aa8 <putchar>
    80025422:	bb01                	j	80025132 <stateen_AIA_test_6+0x322>
    TEST_ASSERT("m mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025424:	00008517          	auipc	a0,0x8
    80025428:	f1450513          	addi	a0,a0,-236 # 8002d338 <__func__.0+0x318>
    8002542c:	18f050ef          	jal	8002adba <printf>
    80025430:	02900513          	li	a0,41
    80025434:	674040ef          	jal	80029aa8 <putchar>
    80025438:	b169                	j	800250c2 <stateen_AIA_test_6+0x2b2>
    TEST_ASSERT("m mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    8002543a:	00008517          	auipc	a0,0x8
    8002543e:	efe50513          	addi	a0,a0,-258 # 8002d338 <__func__.0+0x318>
    80025442:	179050ef          	jal	8002adba <printf>
    80025446:	02900513          	li	a0,41
    8002544a:	65e040ef          	jal	80029aa8 <putchar>
    8002544e:	b111                	j	80025052 <stateen_AIA_test_6+0x242>
    TEST_ASSERT("hu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=0",
    80025450:	00008517          	auipc	a0,0x8
    80025454:	ee850513          	addi	a0,a0,-280 # 8002d338 <__func__.0+0x318>
    80025458:	163050ef          	jal	8002adba <printf>
    8002545c:	02900513          	li	a0,41
    80025460:	648040ef          	jal	80029aa8 <putchar>
    80025464:	bebd                	j	80024fe2 <stateen_AIA_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=0",
    80025466:	00008517          	auipc	a0,0x8
    8002546a:	ed250513          	addi	a0,a0,-302 # 8002d338 <__func__.0+0x318>
    8002546e:	14d050ef          	jal	8002adba <printf>
    80025472:	02900513          	li	a0,41
    80025476:	632040ef          	jal	80029aa8 <putchar>
    8002547a:	bce5                	j	80024f72 <stateen_AIA_test_6+0x162>
    TEST_ASSERT("hs mode accesss hvictl register successful when  mstateen.aia=1 hstateen.aia=0",
    8002547c:	00008517          	auipc	a0,0x8
    80025480:	ebc50513          	addi	a0,a0,-324 # 8002d338 <__func__.0+0x318>
    80025484:	137050ef          	jal	8002adba <printf>
    80025488:	02900513          	li	a0,41
    8002548c:	61c040ef          	jal	80029aa8 <putchar>
    80025490:	bc85                	j	80024f00 <stateen_AIA_test_6+0xf0>
    TEST_ASSERT("hs mode accesss hvien register successful when  mstateen.aia=1 hstateen.aia=0",
    80025492:	00008517          	auipc	a0,0x8
    80025496:	ea650513          	addi	a0,a0,-346 # 8002d338 <__func__.0+0x318>
    8002549a:	121050ef          	jal	8002adba <printf>
    8002549e:	02900513          	li	a0,41
    800254a2:	606040ef          	jal	80029aa8 <putchar>
    800254a6:	baed                	j	80024ea0 <stateen_AIA_test_6+0x90>

00000000800254a8 <stateen_AIA_test_7>:


bool stateen_AIA_test_7(){
    800254a8:	1101                	addi	sp,sp,-32

    TEST_START();
    800254aa:	00008597          	auipc	a1,0x8
    800254ae:	85658593          	addi	a1,a1,-1962 # 8002cd00 <__func__.16>
    800254b2:	00008517          	auipc	a0,0x8
    800254b6:	e4e50513          	addi	a0,a0,-434 # 8002d300 <__func__.0+0x2e0>
bool stateen_AIA_test_7(){
    800254ba:	ec06                	sd	ra,24(sp)
    800254bc:	e822                	sd	s0,16(sp)
    800254be:	e426                	sd	s1,8(sp)
    TEST_START();
    800254c0:	0fb050ef          	jal	8002adba <printf>
    800254c4:	4529                	li	a0,10
    800254c6:	5e2040ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    800254ca:	4511                	li	a0,4
    800254cc:	9a3db0ef          	jal	80000e6e <goto_priv>
    //当mstateen.AIA=1 hstateen.AIA=1,v=1 时可访问hvien、hvictl、hviprio1/2、stopi、vstopi寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_AIA);
    800254d0:	4785                	li	a5,1
    800254d2:	17ee                	slli	a5,a5,0x3b
    800254d4:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_AIA);
    800254d8:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    800254dc:	4509                	li	a0,2
    800254de:	991db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800254e2:	891db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800254e6:	608027f3          	csrr	a5,hvien

    excpt_info();
    800254ea:	acbdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800254ee:	08200593          	li	a1,130
    800254f2:	00012617          	auipc	a2,0x12
    800254f6:	87e60613          	addi	a2,a2,-1922 # 80036d70 <__func__.0+0x9d50>
    800254fa:	00008517          	auipc	a0,0x8
    800254fe:	e1e50513          	addi	a0,a0,-482 # 8002d318 <__func__.0+0x2f8>
    80025502:	0b9050ef          	jal	8002adba <printf>
    80025506:	0002c797          	auipc	a5,0x2c
    8002550a:	b0b7c783          	lbu	a5,-1269(a5) # 80051011 <excpt+0x1>
    8002550e:	00008597          	auipc	a1,0x8
    80025512:	dd258593          	addi	a1,a1,-558 # 8002d2e0 <__func__.0+0x2c0>
    80025516:	c789                	beqz	a5,80025520 <stateen_AIA_test_7+0x78>
    80025518:	00008597          	auipc	a1,0x8
    8002551c:	dd858593          	addi	a1,a1,-552 # 8002d2f0 <__func__.0+0x2d0>
    80025520:	00008517          	auipc	a0,0x8
    80025524:	e1050513          	addi	a0,a0,-496 # 8002d330 <__func__.0+0x310>
    80025528:	093050ef          	jal	8002adba <printf>
    8002552c:	0002c797          	auipc	a5,0x2c
    80025530:	ae57c783          	lbu	a5,-1307(a5) # 80051011 <excpt+0x1>
    80025534:	3e079963          	bnez	a5,80025926 <stateen_AIA_test_7+0x47e>
    80025538:	4529                	li	a0,10
    8002553a:	56e040ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    8002553e:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025540:	0002c497          	auipc	s1,0x2c
    80025544:	ad14c483          	lbu	s1,-1327(s1) # 80051011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80025548:	927db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002554c:	827db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025550:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025554:	a61db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025558:	08200593          	li	a1,130
    8002555c:	00012617          	auipc	a2,0x12
    80025560:	86460613          	addi	a2,a2,-1948 # 80036dc0 <__func__.0+0x9da0>
    80025564:	00008517          	auipc	a0,0x8
    80025568:	db450513          	addi	a0,a0,-588 # 8002d318 <__func__.0+0x2f8>
    8002556c:	04f050ef          	jal	8002adba <printf>
    80025570:	0002c797          	auipc	a5,0x2c
    80025574:	aa17c783          	lbu	a5,-1375(a5) # 80051011 <excpt+0x1>
    80025578:	00008597          	auipc	a1,0x8
    8002557c:	d7858593          	addi	a1,a1,-648 # 8002d2f0 <__func__.0+0x2d0>
    80025580:	e789                	bnez	a5,8002558a <stateen_AIA_test_7+0xe2>
    80025582:	00008597          	auipc	a1,0x8
    80025586:	d5e58593          	addi	a1,a1,-674 # 8002d2e0 <__func__.0+0x2c0>
    8002558a:	00008517          	auipc	a0,0x8
    8002558e:	da650513          	addi	a0,a0,-602 # 8002d330 <__func__.0+0x310>
    80025592:	029050ef          	jal	8002adba <printf>
    80025596:	0002c797          	auipc	a5,0x2c
    8002559a:	a7b7c783          	lbu	a5,-1413(a5) # 80051011 <excpt+0x1>
    8002559e:	36079963          	bnez	a5,80025910 <stateen_AIA_test_7+0x468>
    800255a2:	4529                	li	a0,10
    800255a4:	504040ef          	jal	80029aa8 <putchar>
    800255a8:	4401                	li	s0,0
    800255aa:	e499                	bnez	s1,800255b8 <stateen_AIA_test_7+0x110>
    800255ac:	0002c417          	auipc	s0,0x2c
    800255b0:	a6544403          	lbu	s0,-1435(s0) # 80051011 <excpt+0x1>
    800255b4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    800255b8:	4501                	li	a0,0
    800255ba:	8b5db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800255be:	fb4db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVIEN);
    800255c2:	608027f3          	csrr	a5,hvien

    excpt_info();
    800255c6:	9efdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800255ca:	08200593          	li	a1,130
    800255ce:	00012617          	auipc	a2,0x12
    800255d2:	84260613          	addi	a2,a2,-1982 # 80036e10 <__func__.0+0x9df0>
    800255d6:	00008517          	auipc	a0,0x8
    800255da:	d4250513          	addi	a0,a0,-702 # 8002d318 <__func__.0+0x2f8>
    800255de:	7dc050ef          	jal	8002adba <printf>
    800255e2:	0002c797          	auipc	a5,0x2c
    800255e6:	a2f7c783          	lbu	a5,-1489(a5) # 80051011 <excpt+0x1>
    800255ea:	00008597          	auipc	a1,0x8
    800255ee:	d0658593          	addi	a1,a1,-762 # 8002d2f0 <__func__.0+0x2d0>
    800255f2:	e789                	bnez	a5,800255fc <stateen_AIA_test_7+0x154>
    800255f4:	00008597          	auipc	a1,0x8
    800255f8:	cec58593          	addi	a1,a1,-788 # 8002d2e0 <__func__.0+0x2c0>
    800255fc:	00008517          	auipc	a0,0x8
    80025600:	d3450513          	addi	a0,a0,-716 # 8002d330 <__func__.0+0x310>
    80025604:	7b6050ef          	jal	8002adba <printf>
    80025608:	0002c797          	auipc	a5,0x2c
    8002560c:	a097c783          	lbu	a5,-1527(a5) # 80051011 <excpt+0x1>
    80025610:	2e079563          	bnez	a5,800258fa <stateen_AIA_test_7+0x452>
    80025614:	4529                	li	a0,10
    80025616:	492040ef          	jal	80029aa8 <putchar>
    8002561a:	c419                	beqz	s0,80025628 <stateen_AIA_test_7+0x180>
    8002561c:	0002c417          	auipc	s0,0x2c
    80025620:	9f544403          	lbu	s0,-1547(s0) # 80051011 <excpt+0x1>
    80025624:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80025628:	4501                	li	a0,0
    8002562a:	845db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002562e:	f44db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HVICTL);
    80025632:	608027f3          	csrr	a5,hvien

    excpt_info();
    80025636:	97fdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    8002563a:	08200593          	li	a1,130
    8002563e:	00012617          	auipc	a2,0x12
    80025642:	82260613          	addi	a2,a2,-2014 # 80036e60 <__func__.0+0x9e40>
    80025646:	00008517          	auipc	a0,0x8
    8002564a:	cd250513          	addi	a0,a0,-814 # 8002d318 <__func__.0+0x2f8>
    8002564e:	76c050ef          	jal	8002adba <printf>
    80025652:	0002c797          	auipc	a5,0x2c
    80025656:	9bf7c783          	lbu	a5,-1601(a5) # 80051011 <excpt+0x1>
    8002565a:	00008597          	auipc	a1,0x8
    8002565e:	c9658593          	addi	a1,a1,-874 # 8002d2f0 <__func__.0+0x2d0>
    80025662:	e789                	bnez	a5,8002566c <stateen_AIA_test_7+0x1c4>
    80025664:	00008597          	auipc	a1,0x8
    80025668:	c7c58593          	addi	a1,a1,-900 # 8002d2e0 <__func__.0+0x2c0>
    8002566c:	00008517          	auipc	a0,0x8
    80025670:	cc450513          	addi	a0,a0,-828 # 8002d330 <__func__.0+0x310>
    80025674:	746050ef          	jal	8002adba <printf>
    80025678:	0002c797          	auipc	a5,0x2c
    8002567c:	9997c783          	lbu	a5,-1639(a5) # 80051011 <excpt+0x1>
    80025680:	26079263          	bnez	a5,800258e4 <stateen_AIA_test_7+0x43c>
    80025684:	4529                	li	a0,10
    80025686:	422040ef          	jal	80029aa8 <putchar>
    8002568a:	c419                	beqz	s0,80025698 <stateen_AIA_test_7+0x1f0>
    8002568c:	0002c417          	auipc	s0,0x2c
    80025690:	98544403          	lbu	s0,-1659(s0) # 80051011 <excpt+0x1>
    80025694:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025698:	4509                	li	a0,2
    8002569a:	fd4db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002569e:	ed4db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    800256a2:	db0027f3          	csrr	a5,stopi

    excpt_info();
    800256a6:	90fdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    800256aa:	08200593          	li	a1,130
    800256ae:	00012617          	auipc	a2,0x12
    800256b2:	80260613          	addi	a2,a2,-2046 # 80036eb0 <__func__.0+0x9e90>
    800256b6:	00008517          	auipc	a0,0x8
    800256ba:	c6250513          	addi	a0,a0,-926 # 8002d318 <__func__.0+0x2f8>
    800256be:	6fc050ef          	jal	8002adba <printf>
    800256c2:	0002c797          	auipc	a5,0x2c
    800256c6:	94f7c783          	lbu	a5,-1713(a5) # 80051011 <excpt+0x1>
    800256ca:	00008597          	auipc	a1,0x8
    800256ce:	c2658593          	addi	a1,a1,-986 # 8002d2f0 <__func__.0+0x2d0>
    800256d2:	e789                	bnez	a5,800256dc <stateen_AIA_test_7+0x234>
    800256d4:	00008597          	auipc	a1,0x8
    800256d8:	c0c58593          	addi	a1,a1,-1012 # 8002d2e0 <__func__.0+0x2c0>
    800256dc:	00008517          	auipc	a0,0x8
    800256e0:	c5450513          	addi	a0,a0,-940 # 8002d330 <__func__.0+0x310>
    800256e4:	6d6050ef          	jal	8002adba <printf>
    800256e8:	0002c797          	auipc	a5,0x2c
    800256ec:	9297c783          	lbu	a5,-1751(a5) # 80051011 <excpt+0x1>
    800256f0:	1c079f63          	bnez	a5,800258ce <stateen_AIA_test_7+0x426>
    800256f4:	4529                	li	a0,10
    800256f6:	3b2040ef          	jal	80029aa8 <putchar>
    800256fa:	c419                	beqz	s0,80025708 <stateen_AIA_test_7+0x260>
    800256fc:	0002c417          	auipc	s0,0x2c
    80025700:	91544403          	lbu	s0,-1771(s0) # 80051011 <excpt+0x1>
    80025704:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80025708:	4509                	li	a0,2
    8002570a:	f64db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002570e:	e64db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    80025712:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    80025716:	89fdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002571a:	08200593          	li	a1,130
    8002571e:	00011617          	auipc	a2,0x11
    80025722:	7e260613          	addi	a2,a2,2018 # 80036f00 <__func__.0+0x9ee0>
    80025726:	00008517          	auipc	a0,0x8
    8002572a:	bf250513          	addi	a0,a0,-1038 # 8002d318 <__func__.0+0x2f8>
    8002572e:	68c050ef          	jal	8002adba <printf>
    80025732:	0002c797          	auipc	a5,0x2c
    80025736:	8df7c783          	lbu	a5,-1825(a5) # 80051011 <excpt+0x1>
    8002573a:	00008597          	auipc	a1,0x8
    8002573e:	bb658593          	addi	a1,a1,-1098 # 8002d2f0 <__func__.0+0x2d0>
    80025742:	e789                	bnez	a5,8002574c <stateen_AIA_test_7+0x2a4>
    80025744:	00008597          	auipc	a1,0x8
    80025748:	b9c58593          	addi	a1,a1,-1124 # 8002d2e0 <__func__.0+0x2c0>
    8002574c:	00008517          	auipc	a0,0x8
    80025750:	be450513          	addi	a0,a0,-1052 # 8002d330 <__func__.0+0x310>
    80025754:	666050ef          	jal	8002adba <printf>
    80025758:	0002c797          	auipc	a5,0x2c
    8002575c:	8b97c783          	lbu	a5,-1863(a5) # 80051011 <excpt+0x1>
    80025760:	14079c63          	bnez	a5,800258b8 <stateen_AIA_test_7+0x410>
    80025764:	4529                	li	a0,10
    80025766:	342040ef          	jal	80029aa8 <putchar>
    8002576a:	c419                	beqz	s0,80025778 <stateen_AIA_test_7+0x2d0>
    8002576c:	0002c417          	auipc	s0,0x2c
    80025770:	8a544403          	lbu	s0,-1883(s0) # 80051011 <excpt+0x1>
    80025774:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80025778:	4501                	li	a0,0
    8002577a:	ef4db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002577e:	df4db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_STOPI);
    80025782:	db0027f3          	csrr	a5,stopi

    excpt_info();
    80025786:	82fdb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002578a:	08200593          	li	a1,130
    8002578e:	00011617          	auipc	a2,0x11
    80025792:	7c260613          	addi	a2,a2,1986 # 80036f50 <__func__.0+0x9f30>
    80025796:	00008517          	auipc	a0,0x8
    8002579a:	b8250513          	addi	a0,a0,-1150 # 8002d318 <__func__.0+0x2f8>
    8002579e:	61c050ef          	jal	8002adba <printf>
    800257a2:	0002c797          	auipc	a5,0x2c
    800257a6:	86f7c783          	lbu	a5,-1937(a5) # 80051011 <excpt+0x1>
    800257aa:	00008597          	auipc	a1,0x8
    800257ae:	b4658593          	addi	a1,a1,-1210 # 8002d2f0 <__func__.0+0x2d0>
    800257b2:	e789                	bnez	a5,800257bc <stateen_AIA_test_7+0x314>
    800257b4:	00008597          	auipc	a1,0x8
    800257b8:	b2c58593          	addi	a1,a1,-1236 # 8002d2e0 <__func__.0+0x2c0>
    800257bc:	00008517          	auipc	a0,0x8
    800257c0:	b7450513          	addi	a0,a0,-1164 # 8002d330 <__func__.0+0x310>
    800257c4:	5f6050ef          	jal	8002adba <printf>
    800257c8:	0002c797          	auipc	a5,0x2c
    800257cc:	8497c783          	lbu	a5,-1975(a5) # 80051011 <excpt+0x1>
    800257d0:	0c079963          	bnez	a5,800258a2 <stateen_AIA_test_7+0x3fa>
    800257d4:	4529                	li	a0,10
    800257d6:	2d2040ef          	jal	80029aa8 <putchar>
    800257da:	c419                	beqz	s0,800257e8 <stateen_AIA_test_7+0x340>
    800257dc:	0002c417          	auipc	s0,0x2c
    800257e0:	83544403          	lbu	s0,-1995(s0) # 80051011 <excpt+0x1>
    800257e4:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    800257e8:	4501                	li	a0,0
    800257ea:	e84db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800257ee:	d84db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTOPI);
    800257f2:	eb0027f3          	csrr	a5,vstopi

    excpt_info();
    800257f6:	fbedb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800257fa:	08200593          	li	a1,130
    800257fe:	00011617          	auipc	a2,0x11
    80025802:	7a260613          	addi	a2,a2,1954 # 80036fa0 <__func__.0+0x9f80>
    80025806:	00008517          	auipc	a0,0x8
    8002580a:	b1250513          	addi	a0,a0,-1262 # 8002d318 <__func__.0+0x2f8>
    8002580e:	5ac050ef          	jal	8002adba <printf>
    80025812:	0002b797          	auipc	a5,0x2b
    80025816:	7ff7c783          	lbu	a5,2047(a5) # 80051011 <excpt+0x1>
    8002581a:	00008597          	auipc	a1,0x8
    8002581e:	ad658593          	addi	a1,a1,-1322 # 8002d2f0 <__func__.0+0x2d0>
    80025822:	e789                	bnez	a5,8002582c <stateen_AIA_test_7+0x384>
    80025824:	00008597          	auipc	a1,0x8
    80025828:	abc58593          	addi	a1,a1,-1348 # 8002d2e0 <__func__.0+0x2c0>
    8002582c:	00008517          	auipc	a0,0x8
    80025830:	b0450513          	addi	a0,a0,-1276 # 8002d330 <__func__.0+0x310>
    80025834:	586050ef          	jal	8002adba <printf>
    80025838:	0002b797          	auipc	a5,0x2b
    8002583c:	7d97c783          	lbu	a5,2009(a5) # 80051011 <excpt+0x1>
    80025840:	e7b1                	bnez	a5,8002588c <stateen_AIA_test_7+0x3e4>
    80025842:	4529                	li	a0,10
    80025844:	264040ef          	jal	80029aa8 <putchar>
    80025848:	c411                	beqz	s0,80025854 <stateen_AIA_test_7+0x3ac>
    8002584a:	0002b797          	auipc	a5,0x2b
    8002584e:	7c77c783          	lbu	a5,1991(a5) # 80051011 <excpt+0x1>
    80025852:	c79d                	beqz	a5,80025880 <stateen_AIA_test_7+0x3d8>
    80025854:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025856:	00008597          	auipc	a1,0x8
    8002585a:	a9a58593          	addi	a1,a1,-1382 # 8002d2f0 <__func__.0+0x2d0>
    8002585e:	00008517          	auipc	a0,0x8
    80025862:	b3a50513          	addi	a0,a0,-1222 # 8002d398 <__func__.0+0x378>
    80025866:	554050ef          	jal	8002adba <printf>
    8002586a:	4511                	li	a0,4
    8002586c:	e02db0ef          	jal	80000e6e <goto_priv>
    80025870:	f1bdb0ef          	jal	8000178a <reset_state>
}
    80025874:	60e2                	ld	ra,24(sp)
    80025876:	8522                	mv	a0,s0
    80025878:	6442                	ld	s0,16(sp)
    8002587a:	64a2                	ld	s1,8(sp)
    8002587c:	6105                	addi	sp,sp,32
    8002587e:	8082                	ret
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    80025880:	4405                	li	s0,1
    TEST_END();
    80025882:	00008597          	auipc	a1,0x8
    80025886:	a5e58593          	addi	a1,a1,-1442 # 8002d2e0 <__func__.0+0x2c0>
    8002588a:	bfd1                	j	8002585e <stateen_AIA_test_7+0x3b6>
    TEST_ASSERT("vu mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    8002588c:	00008517          	auipc	a0,0x8
    80025890:	aac50513          	addi	a0,a0,-1364 # 8002d338 <__func__.0+0x318>
    80025894:	526050ef          	jal	8002adba <printf>
    80025898:	02900513          	li	a0,41
    8002589c:	20c040ef          	jal	80029aa8 <putchar>
    800258a0:	b74d                	j	80025842 <stateen_AIA_test_7+0x39a>
    TEST_ASSERT("vu mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    800258a2:	00008517          	auipc	a0,0x8
    800258a6:	a9650513          	addi	a0,a0,-1386 # 8002d338 <__func__.0+0x318>
    800258aa:	510050ef          	jal	8002adba <printf>
    800258ae:	02900513          	li	a0,41
    800258b2:	1f6040ef          	jal	80029aa8 <putchar>
    800258b6:	bf39                	j	800257d4 <stateen_AIA_test_7+0x32c>
    TEST_ASSERT("vs mode accesss vstopi register successful when mstateen.aia=1 hstateen.aia=1",
    800258b8:	00008517          	auipc	a0,0x8
    800258bc:	a8050513          	addi	a0,a0,-1408 # 8002d338 <__func__.0+0x318>
    800258c0:	4fa050ef          	jal	8002adba <printf>
    800258c4:	02900513          	li	a0,41
    800258c8:	1e0040ef          	jal	80029aa8 <putchar>
    800258cc:	bd61                	j	80025764 <stateen_AIA_test_7+0x2bc>
    TEST_ASSERT("vs mode accesss stopi register successful when mstateen.aia=1 hstateen.aia=1",
    800258ce:	00008517          	auipc	a0,0x8
    800258d2:	a6a50513          	addi	a0,a0,-1430 # 8002d338 <__func__.0+0x318>
    800258d6:	4e4050ef          	jal	8002adba <printf>
    800258da:	02900513          	li	a0,41
    800258de:	1ca040ef          	jal	80029aa8 <putchar>
    800258e2:	bd09                	j	800256f4 <stateen_AIA_test_7+0x24c>
    TEST_ASSERT("vu mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    800258e4:	00008517          	auipc	a0,0x8
    800258e8:	a5450513          	addi	a0,a0,-1452 # 8002d338 <__func__.0+0x318>
    800258ec:	4ce050ef          	jal	8002adba <printf>
    800258f0:	02900513          	li	a0,41
    800258f4:	1b4040ef          	jal	80029aa8 <putchar>
    800258f8:	b371                	j	80025684 <stateen_AIA_test_7+0x1dc>
    TEST_ASSERT("vu mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    800258fa:	00008517          	auipc	a0,0x8
    800258fe:	a3e50513          	addi	a0,a0,-1474 # 8002d338 <__func__.0+0x318>
    80025902:	4b8050ef          	jal	8002adba <printf>
    80025906:	02900513          	li	a0,41
    8002590a:	19e040ef          	jal	80029aa8 <putchar>
    8002590e:	b319                	j	80025614 <stateen_AIA_test_7+0x16c>
    TEST_ASSERT("vs mode accesss hvictl register successful when mstateen.aia=1 hstateen.aia=1",
    80025910:	00008517          	auipc	a0,0x8
    80025914:	a2850513          	addi	a0,a0,-1496 # 8002d338 <__func__.0+0x318>
    80025918:	4a2050ef          	jal	8002adba <printf>
    8002591c:	02900513          	li	a0,41
    80025920:	188040ef          	jal	80029aa8 <putchar>
    80025924:	b9bd                	j	800255a2 <stateen_AIA_test_7+0xfa>
    TEST_ASSERT("vs mode accesss hvien register successful when mstateen.aia=1 hstateen.aia=1",
    80025926:	00008517          	auipc	a0,0x8
    8002592a:	a1250513          	addi	a0,a0,-1518 # 8002d338 <__func__.0+0x318>
    8002592e:	48c050ef          	jal	8002adba <printf>
    80025932:	02900513          	li	a0,41
    80025936:	172040ef          	jal	80029aa8 <putchar>
    8002593a:	befd                	j	80025538 <stateen_AIA_test_7+0x90>

000000008002593c <stateen_CSRIND_test>:



//mstateen.csrind 和 hstateen.csrind 在xiangshan中默认为1，且RO
bool stateen_CSRIND_test(){
    8002593c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002593e:	00007597          	auipc	a1,0x7
    80025942:	3da58593          	addi	a1,a1,986 # 8002cd18 <__func__.15>
    80025946:	00008517          	auipc	a0,0x8
    8002594a:	9ba50513          	addi	a0,a0,-1606 # 8002d300 <__func__.0+0x2e0>
bool stateen_CSRIND_test(){
    8002594e:	ec06                	sd	ra,24(sp)
    80025950:	e822                	sd	s0,16(sp)
    80025952:	e426                	sd	s1,8(sp)
    TEST_START();
    80025954:	466050ef          	jal	8002adba <printf>
    80025958:	4529                	li	a0,10
    8002595a:	14e040ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    8002595e:	4511                	li	a0,4
    80025960:	d0edb0ef          	jal	80000e6e <goto_priv>
    //当mstateen.CSRIND=1 hstateen.CSRIND=1,v=1 时可访问iselect，ireg等寄存器

    goto_priv(PRIV_VS);
    80025964:	4509                	li	a0,2
    80025966:	d08db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002596a:	c08db0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SISELECT);
    8002596e:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025972:	e42db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025976:	08200593          	li	a1,130
    8002597a:	00011617          	auipc	a2,0x11
    8002597e:	67660613          	addi	a2,a2,1654 # 80036ff0 <__func__.0+0x9fd0>
    80025982:	00008517          	auipc	a0,0x8
    80025986:	99650513          	addi	a0,a0,-1642 # 8002d318 <__func__.0+0x2f8>
    8002598a:	430050ef          	jal	8002adba <printf>
    8002598e:	0002b797          	auipc	a5,0x2b
    80025992:	6837c783          	lbu	a5,1667(a5) # 80051011 <excpt+0x1>
    80025996:	00008597          	auipc	a1,0x8
    8002599a:	94a58593          	addi	a1,a1,-1718 # 8002d2e0 <__func__.0+0x2c0>
    8002599e:	c789                	beqz	a5,800259a8 <stateen_CSRIND_test+0x6c>
    800259a0:	00008597          	auipc	a1,0x8
    800259a4:	95058593          	addi	a1,a1,-1712 # 8002d2f0 <__func__.0+0x2d0>
    800259a8:	00008517          	auipc	a0,0x8
    800259ac:	98850513          	addi	a0,a0,-1656 # 8002d330 <__func__.0+0x310>
    800259b0:	40a050ef          	jal	8002adba <printf>
    800259b4:	0002b797          	auipc	a5,0x2b
    800259b8:	65d7c783          	lbu	a5,1629(a5) # 80051011 <excpt+0x1>
    800259bc:	3e079963          	bnez	a5,80025dae <stateen_CSRIND_test+0x472>
    800259c0:	4529                	li	a0,10
    800259c2:	0e6040ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    800259c6:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    800259c8:	0002b497          	auipc	s1,0x2b
    800259cc:	6494c483          	lbu	s1,1609(s1) # 80051011 <excpt+0x1>
    goto_priv(PRIV_VS);
    800259d0:	c9edb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800259d4:	b9edb0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SIREG);
    800259d8:	151027f3          	csrr	a5,sireg

    excpt_info();
    800259dc:	dd8db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    800259e0:	08200593          	li	a1,130
    800259e4:	00011617          	auipc	a2,0x11
    800259e8:	66460613          	addi	a2,a2,1636 # 80037048 <__func__.0+0xa028>
    800259ec:	00008517          	auipc	a0,0x8
    800259f0:	92c50513          	addi	a0,a0,-1748 # 8002d318 <__func__.0+0x2f8>
    800259f4:	3c6050ef          	jal	8002adba <printf>
    800259f8:	0002b797          	auipc	a5,0x2b
    800259fc:	6197c783          	lbu	a5,1561(a5) # 80051011 <excpt+0x1>
    80025a00:	00008597          	auipc	a1,0x8
    80025a04:	8f058593          	addi	a1,a1,-1808 # 8002d2f0 <__func__.0+0x2d0>
    80025a08:	e789                	bnez	a5,80025a12 <stateen_CSRIND_test+0xd6>
    80025a0a:	00008597          	auipc	a1,0x8
    80025a0e:	8d658593          	addi	a1,a1,-1834 # 8002d2e0 <__func__.0+0x2c0>
    80025a12:	00008517          	auipc	a0,0x8
    80025a16:	91e50513          	addi	a0,a0,-1762 # 8002d330 <__func__.0+0x310>
    80025a1a:	3a0050ef          	jal	8002adba <printf>
    80025a1e:	0002b797          	auipc	a5,0x2b
    80025a22:	5f37c783          	lbu	a5,1523(a5) # 80051011 <excpt+0x1>
    80025a26:	36079963          	bnez	a5,80025d98 <stateen_CSRIND_test+0x45c>
    80025a2a:	4529                	li	a0,10
    80025a2c:	07c040ef          	jal	80029aa8 <putchar>
    80025a30:	4401                	li	s0,0
    80025a32:	e499                	bnez	s1,80025a40 <stateen_CSRIND_test+0x104>
    80025a34:	0002b417          	auipc	s0,0x2b
    80025a38:	5dd44403          	lbu	s0,1501(s0) # 80051011 <excpt+0x1>
    80025a3c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80025a40:	450d                	li	a0,3
    80025a42:	c2cdb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025a46:	b2cdb0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025a4a:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025a4e:	d66db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025a52:	08200593          	li	a1,130
    80025a56:	00011617          	auipc	a2,0x11
    80025a5a:	64a60613          	addi	a2,a2,1610 # 800370a0 <__func__.0+0xa080>
    80025a5e:	00008517          	auipc	a0,0x8
    80025a62:	8ba50513          	addi	a0,a0,-1862 # 8002d318 <__func__.0+0x2f8>
    80025a66:	354050ef          	jal	8002adba <printf>
    80025a6a:	0002b797          	auipc	a5,0x2b
    80025a6e:	5a77c783          	lbu	a5,1447(a5) # 80051011 <excpt+0x1>
    80025a72:	00008597          	auipc	a1,0x8
    80025a76:	87e58593          	addi	a1,a1,-1922 # 8002d2f0 <__func__.0+0x2d0>
    80025a7a:	e789                	bnez	a5,80025a84 <stateen_CSRIND_test+0x148>
    80025a7c:	00008597          	auipc	a1,0x8
    80025a80:	86458593          	addi	a1,a1,-1948 # 8002d2e0 <__func__.0+0x2c0>
    80025a84:	00008517          	auipc	a0,0x8
    80025a88:	8ac50513          	addi	a0,a0,-1876 # 8002d330 <__func__.0+0x310>
    80025a8c:	32e050ef          	jal	8002adba <printf>
    80025a90:	0002b797          	auipc	a5,0x2b
    80025a94:	5817c783          	lbu	a5,1409(a5) # 80051011 <excpt+0x1>
    80025a98:	2e079563          	bnez	a5,80025d82 <stateen_CSRIND_test+0x446>
    80025a9c:	4529                	li	a0,10
    80025a9e:	00a040ef          	jal	80029aa8 <putchar>
    80025aa2:	c419                	beqz	s0,80025ab0 <stateen_CSRIND_test+0x174>
    80025aa4:	0002b417          	auipc	s0,0x2b
    80025aa8:	56d44403          	lbu	s0,1389(s0) # 80051011 <excpt+0x1>
    80025aac:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80025ab0:	450d                	li	a0,3
    80025ab2:	bbcdb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025ab6:	abcdb0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025aba:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025abe:	cf6db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025ac2:	08200593          	li	a1,130
    80025ac6:	00011617          	auipc	a2,0x11
    80025aca:	63260613          	addi	a2,a2,1586 # 800370f8 <__func__.0+0xa0d8>
    80025ace:	00008517          	auipc	a0,0x8
    80025ad2:	84a50513          	addi	a0,a0,-1974 # 8002d318 <__func__.0+0x2f8>
    80025ad6:	2e4050ef          	jal	8002adba <printf>
    80025ada:	0002b797          	auipc	a5,0x2b
    80025ade:	5377c783          	lbu	a5,1335(a5) # 80051011 <excpt+0x1>
    80025ae2:	00008597          	auipc	a1,0x8
    80025ae6:	80e58593          	addi	a1,a1,-2034 # 8002d2f0 <__func__.0+0x2d0>
    80025aea:	e789                	bnez	a5,80025af4 <stateen_CSRIND_test+0x1b8>
    80025aec:	00007597          	auipc	a1,0x7
    80025af0:	7f458593          	addi	a1,a1,2036 # 8002d2e0 <__func__.0+0x2c0>
    80025af4:	00008517          	auipc	a0,0x8
    80025af8:	83c50513          	addi	a0,a0,-1988 # 8002d330 <__func__.0+0x310>
    80025afc:	2be050ef          	jal	8002adba <printf>
    80025b00:	0002b797          	auipc	a5,0x2b
    80025b04:	5117c783          	lbu	a5,1297(a5) # 80051011 <excpt+0x1>
    80025b08:	26079263          	bnez	a5,80025d6c <stateen_CSRIND_test+0x430>
    80025b0c:	4529                	li	a0,10
    80025b0e:	79b030ef          	jal	80029aa8 <putchar>
    80025b12:	c419                	beqz	s0,80025b20 <stateen_CSRIND_test+0x1e4>
    80025b14:	0002b417          	auipc	s0,0x2b
    80025b18:	4fd44403          	lbu	s0,1277(s0) # 80051011 <excpt+0x1>
    80025b1c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025b20:	4505                	li	a0,1
    80025b22:	b4cdb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025b26:	a4cdb0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025b2a:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025b2e:	c86db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025b32:	08200593          	li	a1,130
    80025b36:	00011617          	auipc	a2,0x11
    80025b3a:	61a60613          	addi	a2,a2,1562 # 80037150 <__func__.0+0xa130>
    80025b3e:	00007517          	auipc	a0,0x7
    80025b42:	7da50513          	addi	a0,a0,2010 # 8002d318 <__func__.0+0x2f8>
    80025b46:	274050ef          	jal	8002adba <printf>
    80025b4a:	0002b797          	auipc	a5,0x2b
    80025b4e:	4c77c783          	lbu	a5,1223(a5) # 80051011 <excpt+0x1>
    80025b52:	00007597          	auipc	a1,0x7
    80025b56:	79e58593          	addi	a1,a1,1950 # 8002d2f0 <__func__.0+0x2d0>
    80025b5a:	e789                	bnez	a5,80025b64 <stateen_CSRIND_test+0x228>
    80025b5c:	00007597          	auipc	a1,0x7
    80025b60:	78458593          	addi	a1,a1,1924 # 8002d2e0 <__func__.0+0x2c0>
    80025b64:	00007517          	auipc	a0,0x7
    80025b68:	7cc50513          	addi	a0,a0,1996 # 8002d330 <__func__.0+0x310>
    80025b6c:	24e050ef          	jal	8002adba <printf>
    80025b70:	0002b797          	auipc	a5,0x2b
    80025b74:	4a17c783          	lbu	a5,1185(a5) # 80051011 <excpt+0x1>
    80025b78:	1c079f63          	bnez	a5,80025d56 <stateen_CSRIND_test+0x41a>
    80025b7c:	4529                	li	a0,10
    80025b7e:	72b030ef          	jal	80029aa8 <putchar>
    80025b82:	c419                	beqz	s0,80025b90 <stateen_CSRIND_test+0x254>
    80025b84:	0002b417          	auipc	s0,0x2b
    80025b88:	48d44403          	lbu	s0,1165(s0) # 80051011 <excpt+0x1>
    80025b8c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80025b90:	4505                	li	a0,1
    80025b92:	adcdb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025b96:	9dcdb0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025b9a:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025b9e:	c16db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025ba2:	08200593          	li	a1,130
    80025ba6:	00011617          	auipc	a2,0x11
    80025baa:	60260613          	addi	a2,a2,1538 # 800371a8 <__func__.0+0xa188>
    80025bae:	00007517          	auipc	a0,0x7
    80025bb2:	76a50513          	addi	a0,a0,1898 # 8002d318 <__func__.0+0x2f8>
    80025bb6:	204050ef          	jal	8002adba <printf>
    80025bba:	0002b797          	auipc	a5,0x2b
    80025bbe:	4577c783          	lbu	a5,1111(a5) # 80051011 <excpt+0x1>
    80025bc2:	00007597          	auipc	a1,0x7
    80025bc6:	72e58593          	addi	a1,a1,1838 # 8002d2f0 <__func__.0+0x2d0>
    80025bca:	e789                	bnez	a5,80025bd4 <stateen_CSRIND_test+0x298>
    80025bcc:	00007597          	auipc	a1,0x7
    80025bd0:	71458593          	addi	a1,a1,1812 # 8002d2e0 <__func__.0+0x2c0>
    80025bd4:	00007517          	auipc	a0,0x7
    80025bd8:	75c50513          	addi	a0,a0,1884 # 8002d330 <__func__.0+0x310>
    80025bdc:	1de050ef          	jal	8002adba <printf>
    80025be0:	0002b797          	auipc	a5,0x2b
    80025be4:	4317c783          	lbu	a5,1073(a5) # 80051011 <excpt+0x1>
    80025be8:	14079c63          	bnez	a5,80025d40 <stateen_CSRIND_test+0x404>
    80025bec:	4529                	li	a0,10
    80025bee:	6bb030ef          	jal	80029aa8 <putchar>
    80025bf2:	c419                	beqz	s0,80025c00 <stateen_CSRIND_test+0x2c4>
    80025bf4:	0002b417          	auipc	s0,0x2b
    80025bf8:	41d44403          	lbu	s0,1053(s0) # 80051011 <excpt+0x1>
    80025bfc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80025c00:	4511                	li	a0,4
    80025c02:	a6cdb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025c06:	96cdb0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SISELECT);
    80025c0a:	150027f3          	csrr	a5,siselect

    excpt_info();
    80025c0e:	ba6db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025c12:	08200593          	li	a1,130
    80025c16:	00011617          	auipc	a2,0x11
    80025c1a:	5ea60613          	addi	a2,a2,1514 # 80037200 <__func__.0+0xa1e0>
    80025c1e:	00007517          	auipc	a0,0x7
    80025c22:	6fa50513          	addi	a0,a0,1786 # 8002d318 <__func__.0+0x2f8>
    80025c26:	194050ef          	jal	8002adba <printf>
    80025c2a:	0002b797          	auipc	a5,0x2b
    80025c2e:	3e77c783          	lbu	a5,999(a5) # 80051011 <excpt+0x1>
    80025c32:	00007597          	auipc	a1,0x7
    80025c36:	6be58593          	addi	a1,a1,1726 # 8002d2f0 <__func__.0+0x2d0>
    80025c3a:	e789                	bnez	a5,80025c44 <stateen_CSRIND_test+0x308>
    80025c3c:	00007597          	auipc	a1,0x7
    80025c40:	6a458593          	addi	a1,a1,1700 # 8002d2e0 <__func__.0+0x2c0>
    80025c44:	00007517          	auipc	a0,0x7
    80025c48:	6ec50513          	addi	a0,a0,1772 # 8002d330 <__func__.0+0x310>
    80025c4c:	16e050ef          	jal	8002adba <printf>
    80025c50:	0002b797          	auipc	a5,0x2b
    80025c54:	3c17c783          	lbu	a5,961(a5) # 80051011 <excpt+0x1>
    80025c58:	0c079963          	bnez	a5,80025d2a <stateen_CSRIND_test+0x3ee>
    80025c5c:	4529                	li	a0,10
    80025c5e:	64b030ef          	jal	80029aa8 <putchar>
    80025c62:	c419                	beqz	s0,80025c70 <stateen_CSRIND_test+0x334>
    80025c64:	0002b417          	auipc	s0,0x2b
    80025c68:	3ad44403          	lbu	s0,941(s0) # 80051011 <excpt+0x1>
    80025c6c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80025c70:	4511                	li	a0,4
    80025c72:	9fcdb0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025c76:	8fcdb0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SIREG);
    80025c7a:	151027f3          	csrr	a5,sireg

    excpt_info();
    80025c7e:	b36db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025c82:	08200593          	li	a1,130
    80025c86:	00011617          	auipc	a2,0x11
    80025c8a:	5d260613          	addi	a2,a2,1490 # 80037258 <__func__.0+0xa238>
    80025c8e:	00007517          	auipc	a0,0x7
    80025c92:	68a50513          	addi	a0,a0,1674 # 8002d318 <__func__.0+0x2f8>
    80025c96:	124050ef          	jal	8002adba <printf>
    80025c9a:	0002b797          	auipc	a5,0x2b
    80025c9e:	3777c783          	lbu	a5,887(a5) # 80051011 <excpt+0x1>
    80025ca2:	00007597          	auipc	a1,0x7
    80025ca6:	64e58593          	addi	a1,a1,1614 # 8002d2f0 <__func__.0+0x2d0>
    80025caa:	e789                	bnez	a5,80025cb4 <stateen_CSRIND_test+0x378>
    80025cac:	00007597          	auipc	a1,0x7
    80025cb0:	63458593          	addi	a1,a1,1588 # 8002d2e0 <__func__.0+0x2c0>
    80025cb4:	00007517          	auipc	a0,0x7
    80025cb8:	67c50513          	addi	a0,a0,1660 # 8002d330 <__func__.0+0x310>
    80025cbc:	0fe050ef          	jal	8002adba <printf>
    80025cc0:	0002b797          	auipc	a5,0x2b
    80025cc4:	3517c783          	lbu	a5,849(a5) # 80051011 <excpt+0x1>
    80025cc8:	e7b1                	bnez	a5,80025d14 <stateen_CSRIND_test+0x3d8>
    80025cca:	4529                	li	a0,10
    80025ccc:	5dd030ef          	jal	80029aa8 <putchar>
    80025cd0:	c411                	beqz	s0,80025cdc <stateen_CSRIND_test+0x3a0>
    80025cd2:	0002b797          	auipc	a5,0x2b
    80025cd6:	33f7c783          	lbu	a5,831(a5) # 80051011 <excpt+0x1>
    80025cda:	c79d                	beqz	a5,80025d08 <stateen_CSRIND_test+0x3cc>
    80025cdc:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80025cde:	00007597          	auipc	a1,0x7
    80025ce2:	61258593          	addi	a1,a1,1554 # 8002d2f0 <__func__.0+0x2d0>
    80025ce6:	00007517          	auipc	a0,0x7
    80025cea:	6b250513          	addi	a0,a0,1714 # 8002d398 <__func__.0+0x378>
    80025cee:	0cc050ef          	jal	8002adba <printf>
    80025cf2:	4511                	li	a0,4
    80025cf4:	97adb0ef          	jal	80000e6e <goto_priv>
    80025cf8:	a93db0ef          	jal	8000178a <reset_state>
}
    80025cfc:	60e2                	ld	ra,24(sp)
    80025cfe:	8522                	mv	a0,s0
    80025d00:	6442                	ld	s0,16(sp)
    80025d02:	64a2                	ld	s1,8(sp)
    80025d04:	6105                	addi	sp,sp,32
    80025d06:	8082                	ret
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d08:	4405                	li	s0,1
    TEST_END();
    80025d0a:	00007597          	auipc	a1,0x7
    80025d0e:	5d658593          	addi	a1,a1,1494 # 8002d2e0 <__func__.0+0x2c0>
    80025d12:	bfd1                	j	80025ce6 <stateen_CSRIND_test+0x3aa>
    TEST_ASSERT("m mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d14:	00007517          	auipc	a0,0x7
    80025d18:	62450513          	addi	a0,a0,1572 # 8002d338 <__func__.0+0x318>
    80025d1c:	09e050ef          	jal	8002adba <printf>
    80025d20:	02900513          	li	a0,41
    80025d24:	585030ef          	jal	80029aa8 <putchar>
    80025d28:	b74d                	j	80025cca <stateen_CSRIND_test+0x38e>
    TEST_ASSERT("m mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d2a:	00007517          	auipc	a0,0x7
    80025d2e:	60e50513          	addi	a0,a0,1550 # 8002d338 <__func__.0+0x318>
    80025d32:	088050ef          	jal	8002adba <printf>
    80025d36:	02900513          	li	a0,41
    80025d3a:	56f030ef          	jal	80029aa8 <putchar>
    80025d3e:	bf39                	j	80025c5c <stateen_CSRIND_test+0x320>
    TEST_ASSERT("hu mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d40:	00007517          	auipc	a0,0x7
    80025d44:	5f850513          	addi	a0,a0,1528 # 8002d338 <__func__.0+0x318>
    80025d48:	072050ef          	jal	8002adba <printf>
    80025d4c:	02900513          	li	a0,41
    80025d50:	559030ef          	jal	80029aa8 <putchar>
    80025d54:	bd61                	j	80025bec <stateen_CSRIND_test+0x2b0>
    TEST_ASSERT("hu mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d56:	00007517          	auipc	a0,0x7
    80025d5a:	5e250513          	addi	a0,a0,1506 # 8002d338 <__func__.0+0x318>
    80025d5e:	05c050ef          	jal	8002adba <printf>
    80025d62:	02900513          	li	a0,41
    80025d66:	543030ef          	jal	80029aa8 <putchar>
    80025d6a:	bd09                	j	80025b7c <stateen_CSRIND_test+0x240>
    TEST_ASSERT("hs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d6c:	00007517          	auipc	a0,0x7
    80025d70:	5cc50513          	addi	a0,a0,1484 # 8002d338 <__func__.0+0x318>
    80025d74:	046050ef          	jal	8002adba <printf>
    80025d78:	02900513          	li	a0,41
    80025d7c:	52d030ef          	jal	80029aa8 <putchar>
    80025d80:	b371                	j	80025b0c <stateen_CSRIND_test+0x1d0>
    TEST_ASSERT("hs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d82:	00007517          	auipc	a0,0x7
    80025d86:	5b650513          	addi	a0,a0,1462 # 8002d338 <__func__.0+0x318>
    80025d8a:	030050ef          	jal	8002adba <printf>
    80025d8e:	02900513          	li	a0,41
    80025d92:	517030ef          	jal	80029aa8 <putchar>
    80025d96:	b319                	j	80025a9c <stateen_CSRIND_test+0x160>
    TEST_ASSERT("vs mode accesss sireg register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025d98:	00007517          	auipc	a0,0x7
    80025d9c:	5a050513          	addi	a0,a0,1440 # 8002d338 <__func__.0+0x318>
    80025da0:	01a050ef          	jal	8002adba <printf>
    80025da4:	02900513          	li	a0,41
    80025da8:	501030ef          	jal	80029aa8 <putchar>
    80025dac:	b9bd                	j	80025a2a <stateen_CSRIND_test+0xee>
    TEST_ASSERT("vs mode accesss siselect register successful when mstateen.csrind=1 hstateen.csrind=1",
    80025dae:	00007517          	auipc	a0,0x7
    80025db2:	58a50513          	addi	a0,a0,1418 # 8002d338 <__func__.0+0x318>
    80025db6:	004050ef          	jal	8002adba <printf>
    80025dba:	02900513          	li	a0,41
    80025dbe:	4eb030ef          	jal	80029aa8 <putchar>
    80025dc2:	befd                	j	800259c0 <stateen_CSRIND_test+0x84>

0000000080025dc4 <stateen_ENVCFG_test_1>:

// ----------


bool stateen_ENVCFG_test_1(){
    80025dc4:	1101                	addi	sp,sp,-32

    TEST_START();
    80025dc6:	00007597          	auipc	a1,0x7
    80025dca:	f6a58593          	addi	a1,a1,-150 # 8002cd30 <__func__.14>
    80025dce:	00007517          	auipc	a0,0x7
    80025dd2:	53250513          	addi	a0,a0,1330 # 8002d300 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_1(){
    80025dd6:	ec06                	sd	ra,24(sp)
    80025dd8:	e822                	sd	s0,16(sp)
    80025dda:	e426                	sd	s1,8(sp)
    TEST_START();
    80025ddc:	7df040ef          	jal	8002adba <printf>
    80025de0:	4529                	li	a0,10
    80025de2:	4c7030ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80025de6:	4511                	li	a0,4
    80025de8:	886db0ef          	jal	80000e6e <goto_priv>
    //当mstateen.ENVCFG=0,hu mode 不可访问Henvcfg和Senvcfg寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80025dec:	4785                	li	a5,1
    80025dee:	17fa                	slli	a5,a5,0x3e
    80025df0:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80025df4:	4505                	li	a0,1
    80025df6:	878db0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025dfa:	f79da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80025dfe:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80025e02:	9b2db0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss envcfg register cause to illegal except when mstateen.envcfg=0",
    80025e06:	08200593          	li	a1,130
    80025e0a:	00011617          	auipc	a2,0x11
    80025e0e:	4a660613          	addi	a2,a2,1190 # 800372b0 <__func__.0+0xa290>
    80025e12:	00007517          	auipc	a0,0x7
    80025e16:	50650513          	addi	a0,a0,1286 # 8002d318 <__func__.0+0x2f8>
    80025e1a:	7a1040ef          	jal	8002adba <printf>
    80025e1e:	0002b797          	auipc	a5,0x2b
    80025e22:	1f37c783          	lbu	a5,499(a5) # 80051011 <excpt+0x1>
    80025e26:	0002b497          	auipc	s1,0x2b
    80025e2a:	1ea48493          	addi	s1,s1,490 # 80051010 <excpt>
    80025e2e:	00007597          	auipc	a1,0x7
    80025e32:	4c258593          	addi	a1,a1,1218 # 8002d2f0 <__func__.0+0x2d0>
    80025e36:	cf89                	beqz	a5,80025e50 <stateen_ENVCFG_test_1+0x8c>
    80025e38:	6498                	ld	a4,8(s1)
    80025e3a:	4789                	li	a5,2
    80025e3c:	00007597          	auipc	a1,0x7
    80025e40:	4a458593          	addi	a1,a1,1188 # 8002d2e0 <__func__.0+0x2c0>
    80025e44:	00f70663          	beq	a4,a5,80025e50 <stateen_ENVCFG_test_1+0x8c>
    80025e48:	00007597          	auipc	a1,0x7
    80025e4c:	4a858593          	addi	a1,a1,1192 # 8002d2f0 <__func__.0+0x2d0>
    80025e50:	00007517          	auipc	a0,0x7
    80025e54:	4e050513          	addi	a0,a0,1248 # 8002d330 <__func__.0+0x310>
    80025e58:	763040ef          	jal	8002adba <printf>
    80025e5c:	0002b797          	auipc	a5,0x2b
    80025e60:	1b57c783          	lbu	a5,437(a5) # 80051011 <excpt+0x1>
    80025e64:	c789                	beqz	a5,80025e6e <stateen_ENVCFG_test_1+0xaa>
    80025e66:	6498                	ld	a4,8(s1)
    80025e68:	4789                	li	a5,2
    80025e6a:	00f70c63          	beq	a4,a5,80025e82 <stateen_ENVCFG_test_1+0xbe>
    80025e6e:	00007517          	auipc	a0,0x7
    80025e72:	4ca50513          	addi	a0,a0,1226 # 8002d338 <__func__.0+0x318>
    80025e76:	745040ef          	jal	8002adba <printf>
    80025e7a:	02900513          	li	a0,41
    80025e7e:	42b030ef          	jal	80029aa8 <putchar>
    80025e82:	4529                	li	a0,10
    80025e84:	425030ef          	jal	80029aa8 <putchar>
    80025e88:	0002b797          	auipc	a5,0x2b
    80025e8c:	1897c783          	lbu	a5,393(a5) # 80051011 <excpt+0x1>
    80025e90:	4401                	li	s0,0
    80025e92:	c789                	beqz	a5,80025e9c <stateen_ENVCFG_test_1+0xd8>
    80025e94:	6480                	ld	s0,8(s1)
    80025e96:	1479                	addi	s0,s0,-2
    80025e98:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80025e9c:	4505                	li	a0,1
    80025e9e:	fd1da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025ea2:	ed1da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80025ea6:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80025eaa:	90adb0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025eae:	08200593          	li	a1,130
    80025eb2:	00011617          	auipc	a2,0x11
    80025eb6:	44e60613          	addi	a2,a2,1102 # 80037300 <__func__.0+0xa2e0>
    80025eba:	00007517          	auipc	a0,0x7
    80025ebe:	45e50513          	addi	a0,a0,1118 # 8002d318 <__func__.0+0x2f8>
    80025ec2:	6f9040ef          	jal	8002adba <printf>
    80025ec6:	0002b797          	auipc	a5,0x2b
    80025eca:	14b7c783          	lbu	a5,331(a5) # 80051011 <excpt+0x1>
    80025ece:	00007597          	auipc	a1,0x7
    80025ed2:	42258593          	addi	a1,a1,1058 # 8002d2f0 <__func__.0+0x2d0>
    80025ed6:	cf89                	beqz	a5,80025ef0 <stateen_ENVCFG_test_1+0x12c>
    80025ed8:	6498                	ld	a4,8(s1)
    80025eda:	4789                	li	a5,2
    80025edc:	00007597          	auipc	a1,0x7
    80025ee0:	40458593          	addi	a1,a1,1028 # 8002d2e0 <__func__.0+0x2c0>
    80025ee4:	00f70663          	beq	a4,a5,80025ef0 <stateen_ENVCFG_test_1+0x12c>
    80025ee8:	00007597          	auipc	a1,0x7
    80025eec:	40858593          	addi	a1,a1,1032 # 8002d2f0 <__func__.0+0x2d0>
    80025ef0:	00007517          	auipc	a0,0x7
    80025ef4:	44050513          	addi	a0,a0,1088 # 8002d330 <__func__.0+0x310>
    80025ef8:	6c3040ef          	jal	8002adba <printf>
    80025efc:	0002b797          	auipc	a5,0x2b
    80025f00:	1157c783          	lbu	a5,277(a5) # 80051011 <excpt+0x1>
    80025f04:	c789                	beqz	a5,80025f0e <stateen_ENVCFG_test_1+0x14a>
    80025f06:	6498                	ld	a4,8(s1)
    80025f08:	4789                	li	a5,2
    80025f0a:	00f70c63          	beq	a4,a5,80025f22 <stateen_ENVCFG_test_1+0x15e>
    80025f0e:	00007517          	auipc	a0,0x7
    80025f12:	42a50513          	addi	a0,a0,1066 # 8002d338 <__func__.0+0x318>
    80025f16:	6a5040ef          	jal	8002adba <printf>
    80025f1a:	02900513          	li	a0,41
    80025f1e:	38b030ef          	jal	80029aa8 <putchar>
    80025f22:	4529                	li	a0,10
    80025f24:	385030ef          	jal	80029aa8 <putchar>
    80025f28:	c015                	beqz	s0,80025f4c <stateen_ENVCFG_test_1+0x188>
    80025f2a:	0002b417          	auipc	s0,0x2b
    80025f2e:	0e744403          	lbu	s0,231(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80025f32:	00007597          	auipc	a1,0x7
    80025f36:	3be58593          	addi	a1,a1,958 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025f3a:	cc11                	beqz	s0,80025f56 <stateen_ENVCFG_test_1+0x192>
    80025f3c:	6498                	ld	a4,8(s1)
    80025f3e:	4789                	li	a5,2
    TEST_END();
    80025f40:	00007597          	auipc	a1,0x7
    80025f44:	3a058593          	addi	a1,a1,928 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80025f48:	00f70763          	beq	a4,a5,80025f56 <stateen_ENVCFG_test_1+0x192>
    80025f4c:	4401                	li	s0,0
    TEST_END();
    80025f4e:	00007597          	auipc	a1,0x7
    80025f52:	3a258593          	addi	a1,a1,930 # 8002d2f0 <__func__.0+0x2d0>
    80025f56:	00007517          	auipc	a0,0x7
    80025f5a:	44250513          	addi	a0,a0,1090 # 8002d398 <__func__.0+0x378>
    80025f5e:	65d040ef          	jal	8002adba <printf>
    80025f62:	4511                	li	a0,4
    80025f64:	f0bda0ef          	jal	80000e6e <goto_priv>
    80025f68:	823db0ef          	jal	8000178a <reset_state>

}
    80025f6c:	60e2                	ld	ra,24(sp)
    80025f6e:	8522                	mv	a0,s0
    80025f70:	6442                	ld	s0,16(sp)
    80025f72:	64a2                	ld	s1,8(sp)
    80025f74:	6105                	addi	sp,sp,32
    80025f76:	8082                	ret

0000000080025f78 <stateen_ENVCFG_test_2>:

bool stateen_ENVCFG_test_2(){
    80025f78:	1101                	addi	sp,sp,-32

    TEST_START();
    80025f7a:	00007597          	auipc	a1,0x7
    80025f7e:	dce58593          	addi	a1,a1,-562 # 8002cd48 <__func__.13>
    80025f82:	00007517          	auipc	a0,0x7
    80025f86:	37e50513          	addi	a0,a0,894 # 8002d300 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_2(){
    80025f8a:	ec06                	sd	ra,24(sp)
    80025f8c:	e822                	sd	s0,16(sp)
    80025f8e:	e426                	sd	s1,8(sp)
    TEST_START();
    80025f90:	62b040ef          	jal	8002adba <printf>
    80025f94:	4529                	li	a0,10
    80025f96:	313030ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80025f9a:	4511                	li	a0,4
    80025f9c:	ed3da0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80025fa0:	4785                	li	a5,1
    80025fa2:	17fa                	slli	a5,a5,0x3e
    80025fa4:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80025fa8:	60c7b073          	csrc	hstateen0,a5

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时,不可访问Henvcfg和Senvcfg寄存器
    goto_priv(PRIV_VU);
    80025fac:	4501                	li	a0,0
    80025fae:	ec1da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80025fb2:	dc1da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80025fb6:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80025fba:	ffbda0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80025fbe:	08200593          	li	a1,130
    80025fc2:	00011617          	auipc	a2,0x11
    80025fc6:	38e60613          	addi	a2,a2,910 # 80037350 <__func__.0+0xa330>
    80025fca:	00007517          	auipc	a0,0x7
    80025fce:	34e50513          	addi	a0,a0,846 # 8002d318 <__func__.0+0x2f8>
    80025fd2:	5e9040ef          	jal	8002adba <printf>
    80025fd6:	0002b797          	auipc	a5,0x2b
    80025fda:	03b7c783          	lbu	a5,59(a5) # 80051011 <excpt+0x1>
    80025fde:	0002b497          	auipc	s1,0x2b
    80025fe2:	03248493          	addi	s1,s1,50 # 80051010 <excpt>
    80025fe6:	00007597          	auipc	a1,0x7
    80025fea:	30a58593          	addi	a1,a1,778 # 8002d2f0 <__func__.0+0x2d0>
    80025fee:	cf89                	beqz	a5,80026008 <stateen_ENVCFG_test_2+0x90>
    80025ff0:	6498                	ld	a4,8(s1)
    80025ff2:	47d9                	li	a5,22
    80025ff4:	00007597          	auipc	a1,0x7
    80025ff8:	2ec58593          	addi	a1,a1,748 # 8002d2e0 <__func__.0+0x2c0>
    80025ffc:	00f70663          	beq	a4,a5,80026008 <stateen_ENVCFG_test_2+0x90>
    80026000:	00007597          	auipc	a1,0x7
    80026004:	2f058593          	addi	a1,a1,752 # 8002d2f0 <__func__.0+0x2d0>
    80026008:	00007517          	auipc	a0,0x7
    8002600c:	32850513          	addi	a0,a0,808 # 8002d330 <__func__.0+0x310>
    80026010:	5ab040ef          	jal	8002adba <printf>
    80026014:	0002b797          	auipc	a5,0x2b
    80026018:	ffd7c783          	lbu	a5,-3(a5) # 80051011 <excpt+0x1>
    8002601c:	c789                	beqz	a5,80026026 <stateen_ENVCFG_test_2+0xae>
    8002601e:	6498                	ld	a4,8(s1)
    80026020:	47d9                	li	a5,22
    80026022:	00f70c63          	beq	a4,a5,8002603a <stateen_ENVCFG_test_2+0xc2>
    80026026:	00007517          	auipc	a0,0x7
    8002602a:	31250513          	addi	a0,a0,786 # 8002d338 <__func__.0+0x318>
    8002602e:	58d040ef          	jal	8002adba <printf>
    80026032:	02900513          	li	a0,41
    80026036:	273030ef          	jal	80029aa8 <putchar>
    8002603a:	4529                	li	a0,10
    8002603c:	26d030ef          	jal	80029aa8 <putchar>
    80026040:	0002b797          	auipc	a5,0x2b
    80026044:	fd17c783          	lbu	a5,-47(a5) # 80051011 <excpt+0x1>
    80026048:	4401                	li	s0,0
    8002604a:	c789                	beqz	a5,80026054 <stateen_ENVCFG_test_2+0xdc>
    8002604c:	6480                	ld	s0,8(s1)
    8002604e:	1429                	addi	s0,s0,-22
    80026050:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80026054:	4501                	li	a0,0
    80026056:	e19da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002605a:	d19da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    8002605e:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026062:	f53da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026066:	08200593          	li	a1,130
    8002606a:	00011617          	auipc	a2,0x11
    8002606e:	33e60613          	addi	a2,a2,830 # 800373a8 <__func__.0+0xa388>
    80026072:	00007517          	auipc	a0,0x7
    80026076:	2a650513          	addi	a0,a0,678 # 8002d318 <__func__.0+0x2f8>
    8002607a:	541040ef          	jal	8002adba <printf>
    8002607e:	0002b797          	auipc	a5,0x2b
    80026082:	f937c783          	lbu	a5,-109(a5) # 80051011 <excpt+0x1>
    80026086:	00007597          	auipc	a1,0x7
    8002608a:	26a58593          	addi	a1,a1,618 # 8002d2f0 <__func__.0+0x2d0>
    8002608e:	cf89                	beqz	a5,800260a8 <stateen_ENVCFG_test_2+0x130>
    80026090:	6498                	ld	a4,8(s1)
    80026092:	47d9                	li	a5,22
    80026094:	00007597          	auipc	a1,0x7
    80026098:	24c58593          	addi	a1,a1,588 # 8002d2e0 <__func__.0+0x2c0>
    8002609c:	00f70663          	beq	a4,a5,800260a8 <stateen_ENVCFG_test_2+0x130>
    800260a0:	00007597          	auipc	a1,0x7
    800260a4:	25058593          	addi	a1,a1,592 # 8002d2f0 <__func__.0+0x2d0>
    800260a8:	00007517          	auipc	a0,0x7
    800260ac:	28850513          	addi	a0,a0,648 # 8002d330 <__func__.0+0x310>
    800260b0:	50b040ef          	jal	8002adba <printf>
    800260b4:	0002b797          	auipc	a5,0x2b
    800260b8:	f5d7c783          	lbu	a5,-163(a5) # 80051011 <excpt+0x1>
    800260bc:	c789                	beqz	a5,800260c6 <stateen_ENVCFG_test_2+0x14e>
    800260be:	6498                	ld	a4,8(s1)
    800260c0:	47d9                	li	a5,22
    800260c2:	00f70c63          	beq	a4,a5,800260da <stateen_ENVCFG_test_2+0x162>
    800260c6:	00007517          	auipc	a0,0x7
    800260ca:	27250513          	addi	a0,a0,626 # 8002d338 <__func__.0+0x318>
    800260ce:	4ed040ef          	jal	8002adba <printf>
    800260d2:	02900513          	li	a0,41
    800260d6:	1d3030ef          	jal	80029aa8 <putchar>
    800260da:	4529                	li	a0,10
    800260dc:	1cd030ef          	jal	80029aa8 <putchar>
    800260e0:	c015                	beqz	s0,80026104 <stateen_ENVCFG_test_2+0x18c>
    800260e2:	0002b417          	auipc	s0,0x2b
    800260e6:	f2f44403          	lbu	s0,-209(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    800260ea:	00007597          	auipc	a1,0x7
    800260ee:	20658593          	addi	a1,a1,518 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800260f2:	cc11                	beqz	s0,8002610e <stateen_ENVCFG_test_2+0x196>
    800260f4:	6498                	ld	a4,8(s1)
    800260f6:	47d9                	li	a5,22
    TEST_END();
    800260f8:	00007597          	auipc	a1,0x7
    800260fc:	1e858593          	addi	a1,a1,488 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026100:	00f70763          	beq	a4,a5,8002610e <stateen_ENVCFG_test_2+0x196>
    80026104:	4401                	li	s0,0
    TEST_END();
    80026106:	00007597          	auipc	a1,0x7
    8002610a:	1ea58593          	addi	a1,a1,490 # 8002d2f0 <__func__.0+0x2d0>
    8002610e:	00007517          	auipc	a0,0x7
    80026112:	28a50513          	addi	a0,a0,650 # 8002d398 <__func__.0+0x378>
    80026116:	4a5040ef          	jal	8002adba <printf>
    8002611a:	4511                	li	a0,4
    8002611c:	d53da0ef          	jal	80000e6e <goto_priv>
    80026120:	e6adb0ef          	jal	8000178a <reset_state>

}
    80026124:	60e2                	ld	ra,24(sp)
    80026126:	8522                	mv	a0,s0
    80026128:	6442                	ld	s0,16(sp)
    8002612a:	64a2                	ld	s1,8(sp)
    8002612c:	6105                	addi	sp,sp,32
    8002612e:	8082                	ret

0000000080026130 <stateen_ENVCFG_test_3>:

bool stateen_ENVCFG_test_3(){
    80026130:	1141                	addi	sp,sp,-16

    //当mstateen.ENVCFG=0,m mode 可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026132:	00007597          	auipc	a1,0x7
    80026136:	c2e58593          	addi	a1,a1,-978 # 8002cd60 <__func__.12>
    8002613a:	00007517          	auipc	a0,0x7
    8002613e:	1c650513          	addi	a0,a0,454 # 8002d300 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_3(){
    80026142:	e406                	sd	ra,8(sp)
    80026144:	e022                	sd	s0,0(sp)
    TEST_START();
    80026146:	475040ef          	jal	8002adba <printf>
    8002614a:	4529                	li	a0,10
    8002614c:	15d030ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80026150:	4511                	li	a0,4
    80026152:	d1dda0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026156:	4785                	li	a5,1
    80026158:	17fa                	slli	a5,a5,0x3e
    8002615a:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    8002615e:	4511                	li	a0,4
    80026160:	d0fda0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026164:	c0fda0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026168:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    8002616c:	e49da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026170:	08200593          	li	a1,130
    80026174:	00011617          	auipc	a2,0x11
    80026178:	28c60613          	addi	a2,a2,652 # 80037400 <__func__.0+0xa3e0>
    8002617c:	00007517          	auipc	a0,0x7
    80026180:	19c50513          	addi	a0,a0,412 # 8002d318 <__func__.0+0x2f8>
    80026184:	437040ef          	jal	8002adba <printf>
    80026188:	0002b797          	auipc	a5,0x2b
    8002618c:	e897c783          	lbu	a5,-375(a5) # 80051011 <excpt+0x1>
    80026190:	00007597          	auipc	a1,0x7
    80026194:	15058593          	addi	a1,a1,336 # 8002d2e0 <__func__.0+0x2c0>
    80026198:	c789                	beqz	a5,800261a2 <stateen_ENVCFG_test_3+0x72>
    8002619a:	00007597          	auipc	a1,0x7
    8002619e:	15658593          	addi	a1,a1,342 # 8002d2f0 <__func__.0+0x2d0>
    800261a2:	00007517          	auipc	a0,0x7
    800261a6:	18e50513          	addi	a0,a0,398 # 8002d330 <__func__.0+0x310>
    800261aa:	411040ef          	jal	8002adba <printf>
    800261ae:	0002b797          	auipc	a5,0x2b
    800261b2:	e637c783          	lbu	a5,-413(a5) # 80051011 <excpt+0x1>
    800261b6:	e7e9                	bnez	a5,80026280 <stateen_ENVCFG_test_3+0x150>
    800261b8:	4529                	li	a0,10
    800261ba:	0ef030ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800261be:	4511                	li	a0,4
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    800261c0:	0002b417          	auipc	s0,0x2b
    800261c4:	e5144403          	lbu	s0,-431(s0) # 80051011 <excpt+0x1>
    goto_priv(PRIV_M);
    800261c8:	ca7da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800261cc:	ba7da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    800261d0:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800261d4:	de1da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    800261d8:	08200593          	li	a1,130
    800261dc:	00011617          	auipc	a2,0x11
    800261e0:	26460613          	addi	a2,a2,612 # 80037440 <__func__.0+0xa420>
    800261e4:	00007517          	auipc	a0,0x7
    800261e8:	13450513          	addi	a0,a0,308 # 8002d318 <__func__.0+0x2f8>
    800261ec:	3cf040ef          	jal	8002adba <printf>
    800261f0:	0002b797          	auipc	a5,0x2b
    800261f4:	e217c783          	lbu	a5,-479(a5) # 80051011 <excpt+0x1>
    800261f8:	00007597          	auipc	a1,0x7
    800261fc:	0f858593          	addi	a1,a1,248 # 8002d2f0 <__func__.0+0x2d0>
    80026200:	e789                	bnez	a5,8002620a <stateen_ENVCFG_test_3+0xda>
    80026202:	00007597          	auipc	a1,0x7
    80026206:	0de58593          	addi	a1,a1,222 # 8002d2e0 <__func__.0+0x2c0>
    8002620a:	00007517          	auipc	a0,0x7
    8002620e:	12650513          	addi	a0,a0,294 # 8002d330 <__func__.0+0x310>
    80026212:	3a9040ef          	jal	8002adba <printf>
    80026216:	0002b797          	auipc	a5,0x2b
    8002621a:	dfb7c783          	lbu	a5,-517(a5) # 80051011 <excpt+0x1>
    8002621e:	e7b1                	bnez	a5,8002626a <stateen_ENVCFG_test_3+0x13a>
    80026220:	4529                	li	a0,10
    80026222:	087030ef          	jal	80029aa8 <putchar>
    80026226:	e815                	bnez	s0,8002625a <stateen_ENVCFG_test_3+0x12a>
    80026228:	0002b797          	auipc	a5,0x2b
    8002622c:	de97c783          	lbu	a5,-535(a5) # 80051011 <excpt+0x1>
    80026230:	c79d                	beqz	a5,8002625e <stateen_ENVCFG_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    80026232:	00007597          	auipc	a1,0x7
    80026236:	0be58593          	addi	a1,a1,190 # 8002d2f0 <__func__.0+0x2d0>
    8002623a:	00007517          	auipc	a0,0x7
    8002623e:	15e50513          	addi	a0,a0,350 # 8002d398 <__func__.0+0x378>
    80026242:	379040ef          	jal	8002adba <printf>
    80026246:	4511                	li	a0,4
    80026248:	c27da0ef          	jal	80000e6e <goto_priv>
    8002624c:	d3edb0ef          	jal	8000178a <reset_state>

}
    80026250:	60a2                	ld	ra,8(sp)
    80026252:	8522                	mv	a0,s0
    80026254:	6402                	ld	s0,0(sp)
    80026256:	0141                	addi	sp,sp,16
    80026258:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    8002625a:	4401                	li	s0,0
    8002625c:	bfd9                	j	80026232 <stateen_ENVCFG_test_3+0x102>
    8002625e:	4405                	li	s0,1
    TEST_END();
    80026260:	00007597          	auipc	a1,0x7
    80026264:	08058593          	addi	a1,a1,128 # 8002d2e0 <__func__.0+0x2c0>
    80026268:	bfc9                	j	8002623a <stateen_ENVCFG_test_3+0x10a>
    TEST_ASSERT("m mode accesss senvcfg register success  when mstateen.envcfg=0",
    8002626a:	00007517          	auipc	a0,0x7
    8002626e:	0ce50513          	addi	a0,a0,206 # 8002d338 <__func__.0+0x318>
    80026272:	349040ef          	jal	8002adba <printf>
    80026276:	02900513          	li	a0,41
    8002627a:	02f030ef          	jal	80029aa8 <putchar>
    8002627e:	b74d                	j	80026220 <stateen_ENVCFG_test_3+0xf0>
    TEST_ASSERT("m mode accesss henvcfg register success  when mstateen.envcfg=0",
    80026280:	00007517          	auipc	a0,0x7
    80026284:	0b850513          	addi	a0,a0,184 # 8002d338 <__func__.0+0x318>
    80026288:	333040ef          	jal	8002adba <printf>
    8002628c:	02900513          	li	a0,41
    80026290:	019030ef          	jal	80029aa8 <putchar>
    80026294:	b715                	j	800261b8 <stateen_ENVCFG_test_3+0x88>

0000000080026296 <stateen_ENVCFG_test_4>:


bool stateen_ENVCFG_test_4(){
    80026296:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=1,hstateen.ENVCFG=0,v=1时不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026298:	00007597          	auipc	a1,0x7
    8002629c:	ae058593          	addi	a1,a1,-1312 # 8002cd78 <__func__.11>
    800262a0:	00007517          	auipc	a0,0x7
    800262a4:	06050513          	addi	a0,a0,96 # 8002d300 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_4(){
    800262a8:	ec06                	sd	ra,24(sp)
    800262aa:	e822                	sd	s0,16(sp)
    800262ac:	e426                	sd	s1,8(sp)
    TEST_START();
    800262ae:	30d040ef          	jal	8002adba <printf>
    800262b2:	4529                	li	a0,10
    800262b4:	7f4030ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    800262b8:	4511                	li	a0,4
    800262ba:	bb5da0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    800262be:	4785                	li	a5,1
    800262c0:	17fa                	slli	a5,a5,0x3e
    800262c2:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    800262c6:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    800262ca:	30c025f3          	csrr	a1,mstateen0
    800262ce:	00010517          	auipc	a0,0x10
    800262d2:	81250513          	addi	a0,a0,-2030 # 80035ae0 <__func__.0+0x8ac0>
    800262d6:	2e5040ef          	jal	8002adba <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    800262da:	60c025f3          	csrr	a1,hstateen0
    800262de:	00010517          	auipc	a0,0x10
    800262e2:	81250513          	addi	a0,a0,-2030 # 80035af0 <__func__.0+0x8ad0>
    800262e6:	2d5040ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    800262ea:	4509                	li	a0,2
    800262ec:	b83da0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800262f0:	a83da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800262f4:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800262f8:	cbdda0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800262fc:	08200593          	li	a1,130
    80026300:	00011617          	auipc	a2,0x11
    80026304:	18060613          	addi	a2,a2,384 # 80037480 <__func__.0+0xa460>
    80026308:	00007517          	auipc	a0,0x7
    8002630c:	01050513          	addi	a0,a0,16 # 8002d318 <__func__.0+0x2f8>
    80026310:	2ab040ef          	jal	8002adba <printf>
    80026314:	0002b797          	auipc	a5,0x2b
    80026318:	cfd7c783          	lbu	a5,-771(a5) # 80051011 <excpt+0x1>
    8002631c:	0002b497          	auipc	s1,0x2b
    80026320:	cf448493          	addi	s1,s1,-780 # 80051010 <excpt>
    80026324:	00007597          	auipc	a1,0x7
    80026328:	fcc58593          	addi	a1,a1,-52 # 8002d2f0 <__func__.0+0x2d0>
    8002632c:	cf89                	beqz	a5,80026346 <stateen_ENVCFG_test_4+0xb0>
    8002632e:	6498                	ld	a4,8(s1)
    80026330:	47d9                	li	a5,22
    80026332:	00007597          	auipc	a1,0x7
    80026336:	fae58593          	addi	a1,a1,-82 # 8002d2e0 <__func__.0+0x2c0>
    8002633a:	00f70663          	beq	a4,a5,80026346 <stateen_ENVCFG_test_4+0xb0>
    8002633e:	00007597          	auipc	a1,0x7
    80026342:	fb258593          	addi	a1,a1,-78 # 8002d2f0 <__func__.0+0x2d0>
    80026346:	00007517          	auipc	a0,0x7
    8002634a:	fea50513          	addi	a0,a0,-22 # 8002d330 <__func__.0+0x310>
    8002634e:	26d040ef          	jal	8002adba <printf>
    80026352:	0002b797          	auipc	a5,0x2b
    80026356:	cbf7c783          	lbu	a5,-833(a5) # 80051011 <excpt+0x1>
    8002635a:	c789                	beqz	a5,80026364 <stateen_ENVCFG_test_4+0xce>
    8002635c:	6498                	ld	a4,8(s1)
    8002635e:	47d9                	li	a5,22
    80026360:	00f70c63          	beq	a4,a5,80026378 <stateen_ENVCFG_test_4+0xe2>
    80026364:	00007517          	auipc	a0,0x7
    80026368:	fd450513          	addi	a0,a0,-44 # 8002d338 <__func__.0+0x318>
    8002636c:	24f040ef          	jal	8002adba <printf>
    80026370:	02900513          	li	a0,41
    80026374:	734030ef          	jal	80029aa8 <putchar>
    80026378:	4529                	li	a0,10
    8002637a:	72e030ef          	jal	80029aa8 <putchar>
    8002637e:	0002b797          	auipc	a5,0x2b
    80026382:	c937c783          	lbu	a5,-877(a5) # 80051011 <excpt+0x1>
    80026386:	4401                	li	s0,0
    80026388:	c789                	beqz	a5,80026392 <stateen_ENVCFG_test_4+0xfc>
    8002638a:	6480                	ld	s0,8(s1)
    8002638c:	1429                	addi	s0,s0,-22
    8002638e:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    80026392:	4509                	li	a0,2
    80026394:	adbda0ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80026398:	9dbda0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    8002639c:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800263a0:	c15da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    800263a4:	08200593          	li	a1,130
    800263a8:	00011617          	auipc	a2,0x11
    800263ac:	13060613          	addi	a2,a2,304 # 800374d8 <__func__.0+0xa4b8>
    800263b0:	00007517          	auipc	a0,0x7
    800263b4:	f6850513          	addi	a0,a0,-152 # 8002d318 <__func__.0+0x2f8>
    800263b8:	203040ef          	jal	8002adba <printf>
    800263bc:	0002b797          	auipc	a5,0x2b
    800263c0:	c557c783          	lbu	a5,-939(a5) # 80051011 <excpt+0x1>
    800263c4:	00007597          	auipc	a1,0x7
    800263c8:	f2c58593          	addi	a1,a1,-212 # 8002d2f0 <__func__.0+0x2d0>
    800263cc:	cf89                	beqz	a5,800263e6 <stateen_ENVCFG_test_4+0x150>
    800263ce:	6498                	ld	a4,8(s1)
    800263d0:	47d9                	li	a5,22
    800263d2:	00007597          	auipc	a1,0x7
    800263d6:	f0e58593          	addi	a1,a1,-242 # 8002d2e0 <__func__.0+0x2c0>
    800263da:	00f70663          	beq	a4,a5,800263e6 <stateen_ENVCFG_test_4+0x150>
    800263de:	00007597          	auipc	a1,0x7
    800263e2:	f1258593          	addi	a1,a1,-238 # 8002d2f0 <__func__.0+0x2d0>
    800263e6:	00007517          	auipc	a0,0x7
    800263ea:	f4a50513          	addi	a0,a0,-182 # 8002d330 <__func__.0+0x310>
    800263ee:	1cd040ef          	jal	8002adba <printf>
    800263f2:	0002b797          	auipc	a5,0x2b
    800263f6:	c1f7c783          	lbu	a5,-993(a5) # 80051011 <excpt+0x1>
    800263fa:	c789                	beqz	a5,80026404 <stateen_ENVCFG_test_4+0x16e>
    800263fc:	6498                	ld	a4,8(s1)
    800263fe:	47d9                	li	a5,22
    80026400:	00f70c63          	beq	a4,a5,80026418 <stateen_ENVCFG_test_4+0x182>
    80026404:	00007517          	auipc	a0,0x7
    80026408:	f3450513          	addi	a0,a0,-204 # 8002d338 <__func__.0+0x318>
    8002640c:	1af040ef          	jal	8002adba <printf>
    80026410:	02900513          	li	a0,41
    80026414:	694030ef          	jal	80029aa8 <putchar>
    80026418:	4529                	li	a0,10
    8002641a:	68e030ef          	jal	80029aa8 <putchar>
    8002641e:	c015                	beqz	s0,80026442 <stateen_ENVCFG_test_4+0x1ac>
    80026420:	0002b417          	auipc	s0,0x2b
    80026424:	bf144403          	lbu	s0,-1039(s0) # 80051011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    80026428:	00007597          	auipc	a1,0x7
    8002642c:	ec858593          	addi	a1,a1,-312 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    80026430:	cc11                	beqz	s0,8002644c <stateen_ENVCFG_test_4+0x1b6>
    80026432:	6498                	ld	a4,8(s1)
    80026434:	47d9                	li	a5,22
    TEST_END();
    80026436:	00007597          	auipc	a1,0x7
    8002643a:	eaa58593          	addi	a1,a1,-342 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss senvcfg register cause to VRTI when mstateen.envcfg=1 hstateen.envcfg=0",
    8002643e:	00f70763          	beq	a4,a5,8002644c <stateen_ENVCFG_test_4+0x1b6>
    80026442:	4401                	li	s0,0
    TEST_END();
    80026444:	00007597          	auipc	a1,0x7
    80026448:	eac58593          	addi	a1,a1,-340 # 8002d2f0 <__func__.0+0x2d0>
    8002644c:	00007517          	auipc	a0,0x7
    80026450:	f4c50513          	addi	a0,a0,-180 # 8002d398 <__func__.0+0x378>
    80026454:	167040ef          	jal	8002adba <printf>
    80026458:	4511                	li	a0,4
    8002645a:	a15da0ef          	jal	80000e6e <goto_priv>
    8002645e:	b2cdb0ef          	jal	8000178a <reset_state>

}
    80026462:	60e2                	ld	ra,24(sp)
    80026464:	8522                	mv	a0,s0
    80026466:	6442                	ld	s0,16(sp)
    80026468:	64a2                	ld	s1,8(sp)
    8002646a:	6105                	addi	sp,sp,32
    8002646c:	8082                	ret

000000008002646e <stateen_ENVCFG_test_5>:

bool stateen_ENVCFG_test_5(){
    8002646e:	1101                	addi	sp,sp,-32

    //当mstateen.ENVCFG=0,hs mode 不可访问Henvcfg和Senvcfg寄存器

    TEST_START();
    80026470:	00007597          	auipc	a1,0x7
    80026474:	92058593          	addi	a1,a1,-1760 # 8002cd90 <__func__.10>
    80026478:	00007517          	auipc	a0,0x7
    8002647c:	e8850513          	addi	a0,a0,-376 # 8002d300 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_5(){
    80026480:	ec06                	sd	ra,24(sp)
    80026482:	e822                	sd	s0,16(sp)
    80026484:	e426                	sd	s1,8(sp)
    TEST_START();
    80026486:	135040ef          	jal	8002adba <printf>
    8002648a:	4529                	li	a0,10
    8002648c:	61c030ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80026490:	4511                	li	a0,4
    80026492:	9ddda0ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    80026496:	4785                	li	a5,1
    80026498:	17fa                	slli	a5,a5,0x3e
    8002649a:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    8002649e:	450d                	li	a0,3
    800264a0:	9cfda0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800264a4:	8cfda0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800264a8:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800264ac:	b09da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register cause to illegal except when mstateen.envcfg=0",
    800264b0:	08200593          	li	a1,130
    800264b4:	00011617          	auipc	a2,0x11
    800264b8:	07c60613          	addi	a2,a2,124 # 80037530 <__func__.0+0xa510>
    800264bc:	00007517          	auipc	a0,0x7
    800264c0:	e5c50513          	addi	a0,a0,-420 # 8002d318 <__func__.0+0x2f8>
    800264c4:	0f7040ef          	jal	8002adba <printf>
    800264c8:	0002b797          	auipc	a5,0x2b
    800264cc:	b497c783          	lbu	a5,-1207(a5) # 80051011 <excpt+0x1>
    800264d0:	0002b497          	auipc	s1,0x2b
    800264d4:	b4048493          	addi	s1,s1,-1216 # 80051010 <excpt>
    800264d8:	00007597          	auipc	a1,0x7
    800264dc:	e1858593          	addi	a1,a1,-488 # 8002d2f0 <__func__.0+0x2d0>
    800264e0:	cf89                	beqz	a5,800264fa <stateen_ENVCFG_test_5+0x8c>
    800264e2:	6498                	ld	a4,8(s1)
    800264e4:	4789                	li	a5,2
    800264e6:	00007597          	auipc	a1,0x7
    800264ea:	dfa58593          	addi	a1,a1,-518 # 8002d2e0 <__func__.0+0x2c0>
    800264ee:	00f70663          	beq	a4,a5,800264fa <stateen_ENVCFG_test_5+0x8c>
    800264f2:	00007597          	auipc	a1,0x7
    800264f6:	dfe58593          	addi	a1,a1,-514 # 8002d2f0 <__func__.0+0x2d0>
    800264fa:	00007517          	auipc	a0,0x7
    800264fe:	e3650513          	addi	a0,a0,-458 # 8002d330 <__func__.0+0x310>
    80026502:	0b9040ef          	jal	8002adba <printf>
    80026506:	0002b797          	auipc	a5,0x2b
    8002650a:	b0b7c783          	lbu	a5,-1269(a5) # 80051011 <excpt+0x1>
    8002650e:	c789                	beqz	a5,80026518 <stateen_ENVCFG_test_5+0xaa>
    80026510:	6498                	ld	a4,8(s1)
    80026512:	4789                	li	a5,2
    80026514:	00f70c63          	beq	a4,a5,8002652c <stateen_ENVCFG_test_5+0xbe>
    80026518:	00007517          	auipc	a0,0x7
    8002651c:	e2050513          	addi	a0,a0,-480 # 8002d338 <__func__.0+0x318>
    80026520:	09b040ef          	jal	8002adba <printf>
    80026524:	02900513          	li	a0,41
    80026528:	580030ef          	jal	80029aa8 <putchar>
    8002652c:	4529                	li	a0,10
    8002652e:	57a030ef          	jal	80029aa8 <putchar>
    80026532:	0002b797          	auipc	a5,0x2b
    80026536:	adf7c783          	lbu	a5,-1313(a5) # 80051011 <excpt+0x1>
    8002653a:	4401                	li	s0,0
    8002653c:	c789                	beqz	a5,80026546 <stateen_ENVCFG_test_5+0xd8>
    8002653e:	6480                	ld	s0,8(s1)
    80026540:	1479                	addi	s0,s0,-2
    80026542:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    80026546:	450d                	li	a0,3
    80026548:	927da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002654c:	827da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026550:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026554:	a61da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    80026558:	08200593          	li	a1,130
    8002655c:	00011617          	auipc	a2,0x11
    80026560:	02460613          	addi	a2,a2,36 # 80037580 <__func__.0+0xa560>
    80026564:	00007517          	auipc	a0,0x7
    80026568:	db450513          	addi	a0,a0,-588 # 8002d318 <__func__.0+0x2f8>
    8002656c:	04f040ef          	jal	8002adba <printf>
    80026570:	0002b797          	auipc	a5,0x2b
    80026574:	aa17c783          	lbu	a5,-1375(a5) # 80051011 <excpt+0x1>
    80026578:	00007597          	auipc	a1,0x7
    8002657c:	d7858593          	addi	a1,a1,-648 # 8002d2f0 <__func__.0+0x2d0>
    80026580:	cf89                	beqz	a5,8002659a <stateen_ENVCFG_test_5+0x12c>
    80026582:	6498                	ld	a4,8(s1)
    80026584:	4789                	li	a5,2
    80026586:	00007597          	auipc	a1,0x7
    8002658a:	d5a58593          	addi	a1,a1,-678 # 8002d2e0 <__func__.0+0x2c0>
    8002658e:	00f70663          	beq	a4,a5,8002659a <stateen_ENVCFG_test_5+0x12c>
    80026592:	00007597          	auipc	a1,0x7
    80026596:	d5e58593          	addi	a1,a1,-674 # 8002d2f0 <__func__.0+0x2d0>
    8002659a:	00007517          	auipc	a0,0x7
    8002659e:	d9650513          	addi	a0,a0,-618 # 8002d330 <__func__.0+0x310>
    800265a2:	019040ef          	jal	8002adba <printf>
    800265a6:	0002b797          	auipc	a5,0x2b
    800265aa:	a6b7c783          	lbu	a5,-1429(a5) # 80051011 <excpt+0x1>
    800265ae:	c789                	beqz	a5,800265b8 <stateen_ENVCFG_test_5+0x14a>
    800265b0:	6498                	ld	a4,8(s1)
    800265b2:	4789                	li	a5,2
    800265b4:	00f70c63          	beq	a4,a5,800265cc <stateen_ENVCFG_test_5+0x15e>
    800265b8:	00007517          	auipc	a0,0x7
    800265bc:	d8050513          	addi	a0,a0,-640 # 8002d338 <__func__.0+0x318>
    800265c0:	7fa040ef          	jal	8002adba <printf>
    800265c4:	02900513          	li	a0,41
    800265c8:	4e0030ef          	jal	80029aa8 <putchar>
    800265cc:	4529                	li	a0,10
    800265ce:	4da030ef          	jal	80029aa8 <putchar>
    800265d2:	c015                	beqz	s0,800265f6 <stateen_ENVCFG_test_5+0x188>
    800265d4:	0002b417          	auipc	s0,0x2b
    800265d8:	a3d44403          	lbu	s0,-1475(s0) # 80051011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    800265dc:	00007597          	auipc	a1,0x7
    800265e0:	d1458593          	addi	a1,a1,-748 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    800265e4:	cc11                	beqz	s0,80026600 <stateen_ENVCFG_test_5+0x192>
    800265e6:	6498                	ld	a4,8(s1)
    800265e8:	4789                	li	a5,2
    TEST_END();
    800265ea:	00007597          	auipc	a1,0x7
    800265ee:	cf658593          	addi	a1,a1,-778 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss senvcfg register cause to illegal except when mstateen.envcfg=0",
    800265f2:	00f70763          	beq	a4,a5,80026600 <stateen_ENVCFG_test_5+0x192>
    800265f6:	4401                	li	s0,0
    TEST_END();
    800265f8:	00007597          	auipc	a1,0x7
    800265fc:	cf858593          	addi	a1,a1,-776 # 8002d2f0 <__func__.0+0x2d0>
    80026600:	00007517          	auipc	a0,0x7
    80026604:	d9850513          	addi	a0,a0,-616 # 8002d398 <__func__.0+0x378>
    80026608:	7b2040ef          	jal	8002adba <printf>
    8002660c:	4511                	li	a0,4
    8002660e:	861da0ef          	jal	80000e6e <goto_priv>
    80026612:	978db0ef          	jal	8000178a <reset_state>

}
    80026616:	60e2                	ld	ra,24(sp)
    80026618:	8522                	mv	a0,s0
    8002661a:	6442                	ld	s0,16(sp)
    8002661c:	64a2                	ld	s1,8(sp)
    8002661e:	6105                	addi	sp,sp,32
    80026620:	8082                	ret

0000000080026622 <stateen_ENVCFG_test_6>:


bool stateen_ENVCFG_test_6(){
    80026622:	1101                	addi	sp,sp,-32

    TEST_START();
    80026624:	00006597          	auipc	a1,0x6
    80026628:	78458593          	addi	a1,a1,1924 # 8002cda8 <__func__.9>
    8002662c:	00007517          	auipc	a0,0x7
    80026630:	cd450513          	addi	a0,a0,-812 # 8002d300 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_6(){
    80026634:	ec06                	sd	ra,24(sp)
    80026636:	e822                	sd	s0,16(sp)
    80026638:	e426                	sd	s1,8(sp)
    TEST_START();
    8002663a:	780040ef          	jal	8002adba <printf>
    8002663e:	4529                	li	a0,10
    80026640:	468030ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80026644:	4511                	li	a0,4
    80026646:	829da0ef          	jal	80000e6e <goto_priv>
    //当mstateen.ENVCFG=1,v=0时,可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    8002664a:	4785                	li	a5,1
    8002664c:	17fa                	slli	a5,a5,0x3e
    8002664e:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    80026652:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    80026656:	450d                	li	a0,3
    80026658:	817da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002665c:	f16da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026660:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026664:	951da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026668:	08200593          	li	a1,130
    8002666c:	00011617          	auipc	a2,0x11
    80026670:	f6460613          	addi	a2,a2,-156 # 800375d0 <__func__.0+0xa5b0>
    80026674:	00007517          	auipc	a0,0x7
    80026678:	ca450513          	addi	a0,a0,-860 # 8002d318 <__func__.0+0x2f8>
    8002667c:	73e040ef          	jal	8002adba <printf>
    80026680:	0002b797          	auipc	a5,0x2b
    80026684:	9917c783          	lbu	a5,-1647(a5) # 80051011 <excpt+0x1>
    80026688:	00007597          	auipc	a1,0x7
    8002668c:	c5858593          	addi	a1,a1,-936 # 8002d2e0 <__func__.0+0x2c0>
    80026690:	c789                	beqz	a5,8002669a <stateen_ENVCFG_test_6+0x78>
    80026692:	00007597          	auipc	a1,0x7
    80026696:	c5e58593          	addi	a1,a1,-930 # 8002d2f0 <__func__.0+0x2d0>
    8002669a:	00007517          	auipc	a0,0x7
    8002669e:	c9650513          	addi	a0,a0,-874 # 8002d330 <__func__.0+0x310>
    800266a2:	718040ef          	jal	8002adba <printf>
    800266a6:	0002b797          	auipc	a5,0x2b
    800266aa:	96b7c783          	lbu	a5,-1685(a5) # 80051011 <excpt+0x1>
    800266ae:	2c079e63          	bnez	a5,8002698a <stateen_ENVCFG_test_6+0x368>
    800266b2:	4529                	li	a0,10
    800266b4:	3f4030ef          	jal	80029aa8 <putchar>
    800266b8:	0002b497          	auipc	s1,0x2b
    800266bc:	9594c483          	lbu	s1,-1703(s1) # 80051011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SENVCFG);
    800266c0:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800266c4:	8f1da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    800266c8:	08200593          	li	a1,130
    800266cc:	00011617          	auipc	a2,0x11
    800266d0:	f5c60613          	addi	a2,a2,-164 # 80037628 <__func__.0+0xa608>
    800266d4:	00007517          	auipc	a0,0x7
    800266d8:	c4450513          	addi	a0,a0,-956 # 8002d318 <__func__.0+0x2f8>
    800266dc:	6de040ef          	jal	8002adba <printf>
    800266e0:	0002b797          	auipc	a5,0x2b
    800266e4:	9317c783          	lbu	a5,-1743(a5) # 80051011 <excpt+0x1>
    800266e8:	00007597          	auipc	a1,0x7
    800266ec:	c0858593          	addi	a1,a1,-1016 # 8002d2f0 <__func__.0+0x2d0>
    800266f0:	e789                	bnez	a5,800266fa <stateen_ENVCFG_test_6+0xd8>
    800266f2:	00007597          	auipc	a1,0x7
    800266f6:	bee58593          	addi	a1,a1,-1042 # 8002d2e0 <__func__.0+0x2c0>
    800266fa:	00007517          	auipc	a0,0x7
    800266fe:	c3650513          	addi	a0,a0,-970 # 8002d330 <__func__.0+0x310>
    80026702:	6b8040ef          	jal	8002adba <printf>
    80026706:	0002b797          	auipc	a5,0x2b
    8002670a:	90b7c783          	lbu	a5,-1781(a5) # 80051011 <excpt+0x1>
    8002670e:	26079363          	bnez	a5,80026974 <stateen_ENVCFG_test_6+0x352>
    80026712:	4529                	li	a0,10
    80026714:	394030ef          	jal	80029aa8 <putchar>
    80026718:	4401                	li	s0,0
    8002671a:	e499                	bnez	s1,80026728 <stateen_ENVCFG_test_6+0x106>
    8002671c:	0002b417          	auipc	s0,0x2b
    80026720:	8f544403          	lbu	s0,-1803(s0) # 80051011 <excpt+0x1>
    80026724:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80026728:	4505                	li	a0,1
    8002672a:	f44da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002672e:	e44da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026732:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026736:	87fda0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002673a:	08200593          	li	a1,130
    8002673e:	00011617          	auipc	a2,0x11
    80026742:	f4260613          	addi	a2,a2,-190 # 80037680 <__func__.0+0xa660>
    80026746:	00007517          	auipc	a0,0x7
    8002674a:	bd250513          	addi	a0,a0,-1070 # 8002d318 <__func__.0+0x2f8>
    8002674e:	66c040ef          	jal	8002adba <printf>
    80026752:	0002b797          	auipc	a5,0x2b
    80026756:	8bf7c783          	lbu	a5,-1857(a5) # 80051011 <excpt+0x1>
    8002675a:	00007597          	auipc	a1,0x7
    8002675e:	b9658593          	addi	a1,a1,-1130 # 8002d2f0 <__func__.0+0x2d0>
    80026762:	e789                	bnez	a5,8002676c <stateen_ENVCFG_test_6+0x14a>
    80026764:	00007597          	auipc	a1,0x7
    80026768:	b7c58593          	addi	a1,a1,-1156 # 8002d2e0 <__func__.0+0x2c0>
    8002676c:	00007517          	auipc	a0,0x7
    80026770:	bc450513          	addi	a0,a0,-1084 # 8002d330 <__func__.0+0x310>
    80026774:	646040ef          	jal	8002adba <printf>
    80026778:	0002b797          	auipc	a5,0x2b
    8002677c:	8997c783          	lbu	a5,-1895(a5) # 80051011 <excpt+0x1>
    80026780:	1c079f63          	bnez	a5,8002695e <stateen_ENVCFG_test_6+0x33c>
    80026784:	4529                	li	a0,10
    80026786:	322030ef          	jal	80029aa8 <putchar>
    8002678a:	c419                	beqz	s0,80026798 <stateen_ENVCFG_test_6+0x176>
    8002678c:	0002b417          	auipc	s0,0x2b
    80026790:	88544403          	lbu	s0,-1915(s0) # 80051011 <excpt+0x1>
    80026794:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80026798:	4505                	li	a0,1
    8002679a:	ed4da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002679e:	dd4da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    800267a2:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    800267a6:	80fda0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    800267aa:	08200593          	li	a1,130
    800267ae:	00011617          	auipc	a2,0x11
    800267b2:	f2a60613          	addi	a2,a2,-214 # 800376d8 <__func__.0+0xa6b8>
    800267b6:	00007517          	auipc	a0,0x7
    800267ba:	b6250513          	addi	a0,a0,-1182 # 8002d318 <__func__.0+0x2f8>
    800267be:	5fc040ef          	jal	8002adba <printf>
    800267c2:	0002b797          	auipc	a5,0x2b
    800267c6:	84f7c783          	lbu	a5,-1969(a5) # 80051011 <excpt+0x1>
    800267ca:	00007597          	auipc	a1,0x7
    800267ce:	b2658593          	addi	a1,a1,-1242 # 8002d2f0 <__func__.0+0x2d0>
    800267d2:	e789                	bnez	a5,800267dc <stateen_ENVCFG_test_6+0x1ba>
    800267d4:	00007597          	auipc	a1,0x7
    800267d8:	b0c58593          	addi	a1,a1,-1268 # 8002d2e0 <__func__.0+0x2c0>
    800267dc:	00007517          	auipc	a0,0x7
    800267e0:	b5450513          	addi	a0,a0,-1196 # 8002d330 <__func__.0+0x310>
    800267e4:	5d6040ef          	jal	8002adba <printf>
    800267e8:	0002b797          	auipc	a5,0x2b
    800267ec:	8297c783          	lbu	a5,-2007(a5) # 80051011 <excpt+0x1>
    800267f0:	14079c63          	bnez	a5,80026948 <stateen_ENVCFG_test_6+0x326>
    800267f4:	4529                	li	a0,10
    800267f6:	2b2030ef          	jal	80029aa8 <putchar>
    800267fa:	c419                	beqz	s0,80026808 <stateen_ENVCFG_test_6+0x1e6>
    800267fc:	0002b417          	auipc	s0,0x2b
    80026800:	81544403          	lbu	s0,-2027(s0) # 80051011 <excpt+0x1>
    80026804:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80026808:	4511                	li	a0,4
    8002680a:	e64da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002680e:	d64da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026812:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026816:	f9eda0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002681a:	08200593          	li	a1,130
    8002681e:	00011617          	auipc	a2,0x11
    80026822:	f1260613          	addi	a2,a2,-238 # 80037730 <__func__.0+0xa710>
    80026826:	00007517          	auipc	a0,0x7
    8002682a:	af250513          	addi	a0,a0,-1294 # 8002d318 <__func__.0+0x2f8>
    8002682e:	58c040ef          	jal	8002adba <printf>
    80026832:	0002a797          	auipc	a5,0x2a
    80026836:	7df7c783          	lbu	a5,2015(a5) # 80051011 <excpt+0x1>
    8002683a:	00007597          	auipc	a1,0x7
    8002683e:	ab658593          	addi	a1,a1,-1354 # 8002d2f0 <__func__.0+0x2d0>
    80026842:	e789                	bnez	a5,8002684c <stateen_ENVCFG_test_6+0x22a>
    80026844:	00007597          	auipc	a1,0x7
    80026848:	a9c58593          	addi	a1,a1,-1380 # 8002d2e0 <__func__.0+0x2c0>
    8002684c:	00007517          	auipc	a0,0x7
    80026850:	ae450513          	addi	a0,a0,-1308 # 8002d330 <__func__.0+0x310>
    80026854:	566040ef          	jal	8002adba <printf>
    80026858:	0002a797          	auipc	a5,0x2a
    8002685c:	7b97c783          	lbu	a5,1977(a5) # 80051011 <excpt+0x1>
    80026860:	0c079963          	bnez	a5,80026932 <stateen_ENVCFG_test_6+0x310>
    80026864:	4529                	li	a0,10
    80026866:	242030ef          	jal	80029aa8 <putchar>
    8002686a:	c419                	beqz	s0,80026878 <stateen_ENVCFG_test_6+0x256>
    8002686c:	0002a417          	auipc	s0,0x2a
    80026870:	7a544403          	lbu	s0,1957(s0) # 80051011 <excpt+0x1>
    80026874:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80026878:	4511                	li	a0,4
    8002687a:	df4da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002687e:	cf4da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026882:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026886:	f2eda0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002688a:	08200593          	li	a1,130
    8002688e:	00011617          	auipc	a2,0x11
    80026892:	efa60613          	addi	a2,a2,-262 # 80037788 <__func__.0+0xa768>
    80026896:	00007517          	auipc	a0,0x7
    8002689a:	a8250513          	addi	a0,a0,-1406 # 8002d318 <__func__.0+0x2f8>
    8002689e:	51c040ef          	jal	8002adba <printf>
    800268a2:	0002a797          	auipc	a5,0x2a
    800268a6:	76f7c783          	lbu	a5,1903(a5) # 80051011 <excpt+0x1>
    800268aa:	00007597          	auipc	a1,0x7
    800268ae:	a4658593          	addi	a1,a1,-1466 # 8002d2f0 <__func__.0+0x2d0>
    800268b2:	e789                	bnez	a5,800268bc <stateen_ENVCFG_test_6+0x29a>
    800268b4:	00007597          	auipc	a1,0x7
    800268b8:	a2c58593          	addi	a1,a1,-1492 # 8002d2e0 <__func__.0+0x2c0>
    800268bc:	00007517          	auipc	a0,0x7
    800268c0:	a7450513          	addi	a0,a0,-1420 # 8002d330 <__func__.0+0x310>
    800268c4:	4f6040ef          	jal	8002adba <printf>
    800268c8:	0002a797          	auipc	a5,0x2a
    800268cc:	7497c783          	lbu	a5,1865(a5) # 80051011 <excpt+0x1>
    800268d0:	e7b1                	bnez	a5,8002691c <stateen_ENVCFG_test_6+0x2fa>
    800268d2:	4529                	li	a0,10
    800268d4:	1d4030ef          	jal	80029aa8 <putchar>
    800268d8:	c411                	beqz	s0,800268e4 <stateen_ENVCFG_test_6+0x2c2>
    800268da:	0002a797          	auipc	a5,0x2a
    800268de:	7377c783          	lbu	a5,1847(a5) # 80051011 <excpt+0x1>
    800268e2:	c79d                	beqz	a5,80026910 <stateen_ENVCFG_test_6+0x2ee>
    800268e4:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    800268e6:	00007597          	auipc	a1,0x7
    800268ea:	a0a58593          	addi	a1,a1,-1526 # 8002d2f0 <__func__.0+0x2d0>
    800268ee:	00007517          	auipc	a0,0x7
    800268f2:	aaa50513          	addi	a0,a0,-1366 # 8002d398 <__func__.0+0x378>
    800268f6:	4c4040ef          	jal	8002adba <printf>
    800268fa:	4511                	li	a0,4
    800268fc:	d72da0ef          	jal	80000e6e <goto_priv>
    80026900:	e8bda0ef          	jal	8000178a <reset_state>

}
    80026904:	60e2                	ld	ra,24(sp)
    80026906:	8522                	mv	a0,s0
    80026908:	6442                	ld	s0,16(sp)
    8002690a:	64a2                	ld	s1,8(sp)
    8002690c:	6105                	addi	sp,sp,32
    8002690e:	8082                	ret
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026910:	4405                	li	s0,1
    TEST_END();
    80026912:	00007597          	auipc	a1,0x7
    80026916:	9ce58593          	addi	a1,a1,-1586 # 8002d2e0 <__func__.0+0x2c0>
    8002691a:	bfd1                	j	800268ee <stateen_ENVCFG_test_6+0x2cc>
    TEST_ASSERT("m mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002691c:	00007517          	auipc	a0,0x7
    80026920:	a1c50513          	addi	a0,a0,-1508 # 8002d338 <__func__.0+0x318>
    80026924:	496040ef          	jal	8002adba <printf>
    80026928:	02900513          	li	a0,41
    8002692c:	17c030ef          	jal	80029aa8 <putchar>
    80026930:	b74d                	j	800268d2 <stateen_ENVCFG_test_6+0x2b0>
    TEST_ASSERT("m mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026932:	00007517          	auipc	a0,0x7
    80026936:	a0650513          	addi	a0,a0,-1530 # 8002d338 <__func__.0+0x318>
    8002693a:	480040ef          	jal	8002adba <printf>
    8002693e:	02900513          	li	a0,41
    80026942:	166030ef          	jal	80029aa8 <putchar>
    80026946:	bf39                	j	80026864 <stateen_ENVCFG_test_6+0x242>
    TEST_ASSERT("hu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    80026948:	00007517          	auipc	a0,0x7
    8002694c:	9f050513          	addi	a0,a0,-1552 # 8002d338 <__func__.0+0x318>
    80026950:	46a040ef          	jal	8002adba <printf>
    80026954:	02900513          	li	a0,41
    80026958:	150030ef          	jal	80029aa8 <putchar>
    8002695c:	bd61                	j	800267f4 <stateen_ENVCFG_test_6+0x1d2>
    TEST_ASSERT("hu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=0",
    8002695e:	00007517          	auipc	a0,0x7
    80026962:	9da50513          	addi	a0,a0,-1574 # 8002d338 <__func__.0+0x318>
    80026966:	454040ef          	jal	8002adba <printf>
    8002696a:	02900513          	li	a0,41
    8002696e:	13a030ef          	jal	80029aa8 <putchar>
    80026972:	bd09                	j	80026784 <stateen_ENVCFG_test_6+0x162>
    TEST_ASSERT("hs mode accesss senvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    80026974:	00007517          	auipc	a0,0x7
    80026978:	9c450513          	addi	a0,a0,-1596 # 8002d338 <__func__.0+0x318>
    8002697c:	43e040ef          	jal	8002adba <printf>
    80026980:	02900513          	li	a0,41
    80026984:	124030ef          	jal	80029aa8 <putchar>
    80026988:	b369                	j	80026712 <stateen_ENVCFG_test_6+0xf0>
    TEST_ASSERT("hs mode accesss henvcfg register successful when  mstateen.envcfg=1 hstateen.envcfg=0",
    8002698a:	00007517          	auipc	a0,0x7
    8002698e:	9ae50513          	addi	a0,a0,-1618 # 8002d338 <__func__.0+0x318>
    80026992:	428040ef          	jal	8002adba <printf>
    80026996:	02900513          	li	a0,41
    8002699a:	10e030ef          	jal	80029aa8 <putchar>
    8002699e:	bb11                	j	800266b2 <stateen_ENVCFG_test_6+0x90>

00000000800269a0 <stateen_ENVCFG_test_7>:


bool stateen_ENVCFG_test_7(){
    800269a0:	1101                	addi	sp,sp,-32

    TEST_START();
    800269a2:	00006597          	auipc	a1,0x6
    800269a6:	41e58593          	addi	a1,a1,1054 # 8002cdc0 <__func__.8>
    800269aa:	00007517          	auipc	a0,0x7
    800269ae:	95650513          	addi	a0,a0,-1706 # 8002d300 <__func__.0+0x2e0>
bool stateen_ENVCFG_test_7(){
    800269b2:	ec06                	sd	ra,24(sp)
    800269b4:	e822                	sd	s0,16(sp)
    800269b6:	e426                	sd	s1,8(sp)
    TEST_START();
    800269b8:	402040ef          	jal	8002adba <printf>
    800269bc:	4529                	li	a0,10
    800269be:	0ea030ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    800269c2:	4511                	li	a0,4
    800269c4:	caada0ef          	jal	80000e6e <goto_priv>
    //当mstateen.ENVCFG=1 hstateen.ENVCFG=1,v=1 时可访问Henvcfg和Senvcfg寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_ENVCFG);
    800269c8:	4785                	li	a5,1
    800269ca:	17fa                	slli	a5,a5,0x3e
    800269cc:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_ENVCFG);
    800269d0:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    800269d4:	4509                	li	a0,2
    800269d6:	c98da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800269da:	b98da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    800269de:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    800269e2:	dd2da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    800269e6:	08200593          	li	a1,130
    800269ea:	00011617          	auipc	a2,0x11
    800269ee:	df660613          	addi	a2,a2,-522 # 800377e0 <__func__.0+0xa7c0>
    800269f2:	00007517          	auipc	a0,0x7
    800269f6:	92650513          	addi	a0,a0,-1754 # 8002d318 <__func__.0+0x2f8>
    800269fa:	3c0040ef          	jal	8002adba <printf>
    800269fe:	0002a797          	auipc	a5,0x2a
    80026a02:	6137c783          	lbu	a5,1555(a5) # 80051011 <excpt+0x1>
    80026a06:	00007597          	auipc	a1,0x7
    80026a0a:	8da58593          	addi	a1,a1,-1830 # 8002d2e0 <__func__.0+0x2c0>
    80026a0e:	c789                	beqz	a5,80026a18 <stateen_ENVCFG_test_7+0x78>
    80026a10:	00007597          	auipc	a1,0x7
    80026a14:	8e058593          	addi	a1,a1,-1824 # 8002d2f0 <__func__.0+0x2d0>
    80026a18:	00007517          	auipc	a0,0x7
    80026a1c:	91850513          	addi	a0,a0,-1768 # 8002d330 <__func__.0+0x310>
    80026a20:	39a040ef          	jal	8002adba <printf>
    80026a24:	0002a797          	auipc	a5,0x2a
    80026a28:	5ed7c783          	lbu	a5,1517(a5) # 80051011 <excpt+0x1>
    80026a2c:	1c079d63          	bnez	a5,80026c06 <stateen_ENVCFG_test_7+0x266>
    80026a30:	4529                	li	a0,10
    80026a32:	076030ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80026a36:	4509                	li	a0,2
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026a38:	0002a497          	auipc	s1,0x2a
    80026a3c:	5d94c483          	lbu	s1,1497(s1) # 80051011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80026a40:	c2eda0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026a44:	b2eda0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026a48:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026a4c:	d68da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026a50:	08200593          	li	a1,130
    80026a54:	00011617          	auipc	a2,0x11
    80026a58:	de460613          	addi	a2,a2,-540 # 80037838 <__func__.0+0xa818>
    80026a5c:	00007517          	auipc	a0,0x7
    80026a60:	8bc50513          	addi	a0,a0,-1860 # 8002d318 <__func__.0+0x2f8>
    80026a64:	356040ef          	jal	8002adba <printf>
    80026a68:	0002a797          	auipc	a5,0x2a
    80026a6c:	5a97c783          	lbu	a5,1449(a5) # 80051011 <excpt+0x1>
    80026a70:	00007597          	auipc	a1,0x7
    80026a74:	88058593          	addi	a1,a1,-1920 # 8002d2f0 <__func__.0+0x2d0>
    80026a78:	e789                	bnez	a5,80026a82 <stateen_ENVCFG_test_7+0xe2>
    80026a7a:	00007597          	auipc	a1,0x7
    80026a7e:	86658593          	addi	a1,a1,-1946 # 8002d2e0 <__func__.0+0x2c0>
    80026a82:	00007517          	auipc	a0,0x7
    80026a86:	8ae50513          	addi	a0,a0,-1874 # 8002d330 <__func__.0+0x310>
    80026a8a:	330040ef          	jal	8002adba <printf>
    80026a8e:	0002a797          	auipc	a5,0x2a
    80026a92:	5837c783          	lbu	a5,1411(a5) # 80051011 <excpt+0x1>
    80026a96:	14079d63          	bnez	a5,80026bf0 <stateen_ENVCFG_test_7+0x250>
    80026a9a:	4529                	li	a0,10
    80026a9c:	00c030ef          	jal	80029aa8 <putchar>
    80026aa0:	4401                	li	s0,0
    80026aa2:	e499                	bnez	s1,80026ab0 <stateen_ENVCFG_test_7+0x110>
    80026aa4:	0002a417          	auipc	s0,0x2a
    80026aa8:	56d44403          	lbu	s0,1389(s0) # 80051011 <excpt+0x1>
    80026aac:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80026ab0:	4501                	li	a0,0
    80026ab2:	bbcda0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026ab6:	abcda0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HENVCFG);
    80026aba:	60a027f3          	csrr	a5,henvcfg

    excpt_info();
    80026abe:	cf6da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026ac2:	08200593          	li	a1,130
    80026ac6:	00011617          	auipc	a2,0x11
    80026aca:	dca60613          	addi	a2,a2,-566 # 80037890 <__func__.0+0xa870>
    80026ace:	00007517          	auipc	a0,0x7
    80026ad2:	84a50513          	addi	a0,a0,-1974 # 8002d318 <__func__.0+0x2f8>
    80026ad6:	2e4040ef          	jal	8002adba <printf>
    80026ada:	0002a797          	auipc	a5,0x2a
    80026ade:	5377c783          	lbu	a5,1335(a5) # 80051011 <excpt+0x1>
    80026ae2:	00007597          	auipc	a1,0x7
    80026ae6:	80e58593          	addi	a1,a1,-2034 # 8002d2f0 <__func__.0+0x2d0>
    80026aea:	e789                	bnez	a5,80026af4 <stateen_ENVCFG_test_7+0x154>
    80026aec:	00006597          	auipc	a1,0x6
    80026af0:	7f458593          	addi	a1,a1,2036 # 8002d2e0 <__func__.0+0x2c0>
    80026af4:	00007517          	auipc	a0,0x7
    80026af8:	83c50513          	addi	a0,a0,-1988 # 8002d330 <__func__.0+0x310>
    80026afc:	2be040ef          	jal	8002adba <printf>
    80026b00:	0002a797          	auipc	a5,0x2a
    80026b04:	5117c783          	lbu	a5,1297(a5) # 80051011 <excpt+0x1>
    80026b08:	0c079963          	bnez	a5,80026bda <stateen_ENVCFG_test_7+0x23a>
    80026b0c:	4529                	li	a0,10
    80026b0e:	79b020ef          	jal	80029aa8 <putchar>
    80026b12:	c419                	beqz	s0,80026b20 <stateen_ENVCFG_test_7+0x180>
    80026b14:	0002a417          	auipc	s0,0x2a
    80026b18:	4fd44403          	lbu	s0,1277(s0) # 80051011 <excpt+0x1>
    80026b1c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80026b20:	4501                	li	a0,0
    80026b22:	b4cda0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026b26:	a4cda0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SENVCFG);
    80026b2a:	10a027f3          	csrr	a5,0x10a

    excpt_info();
    80026b2e:	c86da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026b32:	08200593          	li	a1,130
    80026b36:	00011617          	auipc	a2,0x11
    80026b3a:	db260613          	addi	a2,a2,-590 # 800378e8 <__func__.0+0xa8c8>
    80026b3e:	00006517          	auipc	a0,0x6
    80026b42:	7da50513          	addi	a0,a0,2010 # 8002d318 <__func__.0+0x2f8>
    80026b46:	274040ef          	jal	8002adba <printf>
    80026b4a:	0002a797          	auipc	a5,0x2a
    80026b4e:	4c77c783          	lbu	a5,1223(a5) # 80051011 <excpt+0x1>
    80026b52:	00006597          	auipc	a1,0x6
    80026b56:	79e58593          	addi	a1,a1,1950 # 8002d2f0 <__func__.0+0x2d0>
    80026b5a:	e789                	bnez	a5,80026b64 <stateen_ENVCFG_test_7+0x1c4>
    80026b5c:	00006597          	auipc	a1,0x6
    80026b60:	78458593          	addi	a1,a1,1924 # 8002d2e0 <__func__.0+0x2c0>
    80026b64:	00006517          	auipc	a0,0x6
    80026b68:	7cc50513          	addi	a0,a0,1996 # 8002d330 <__func__.0+0x310>
    80026b6c:	24e040ef          	jal	8002adba <printf>
    80026b70:	0002a797          	auipc	a5,0x2a
    80026b74:	4a17c783          	lbu	a5,1185(a5) # 80051011 <excpt+0x1>
    80026b78:	e7b1                	bnez	a5,80026bc4 <stateen_ENVCFG_test_7+0x224>
    80026b7a:	4529                	li	a0,10
    80026b7c:	72d020ef          	jal	80029aa8 <putchar>
    80026b80:	c411                	beqz	s0,80026b8c <stateen_ENVCFG_test_7+0x1ec>
    80026b82:	0002a797          	auipc	a5,0x2a
    80026b86:	48f7c783          	lbu	a5,1167(a5) # 80051011 <excpt+0x1>
    80026b8a:	c79d                	beqz	a5,80026bb8 <stateen_ENVCFG_test_7+0x218>
    80026b8c:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    80026b8e:	00006597          	auipc	a1,0x6
    80026b92:	76258593          	addi	a1,a1,1890 # 8002d2f0 <__func__.0+0x2d0>
    80026b96:	00007517          	auipc	a0,0x7
    80026b9a:	80250513          	addi	a0,a0,-2046 # 8002d398 <__func__.0+0x378>
    80026b9e:	21c040ef          	jal	8002adba <printf>
    80026ba2:	4511                	li	a0,4
    80026ba4:	acada0ef          	jal	80000e6e <goto_priv>
    80026ba8:	be3da0ef          	jal	8000178a <reset_state>
}
    80026bac:	60e2                	ld	ra,24(sp)
    80026bae:	8522                	mv	a0,s0
    80026bb0:	6442                	ld	s0,16(sp)
    80026bb2:	64a2                	ld	s1,8(sp)
    80026bb4:	6105                	addi	sp,sp,32
    80026bb6:	8082                	ret
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026bb8:	4405                	li	s0,1
    TEST_END();
    80026bba:	00006597          	auipc	a1,0x6
    80026bbe:	72658593          	addi	a1,a1,1830 # 8002d2e0 <__func__.0+0x2c0>
    80026bc2:	bfd1                	j	80026b96 <stateen_ENVCFG_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026bc4:	00006517          	auipc	a0,0x6
    80026bc8:	77450513          	addi	a0,a0,1908 # 8002d338 <__func__.0+0x318>
    80026bcc:	1ee040ef          	jal	8002adba <printf>
    80026bd0:	02900513          	li	a0,41
    80026bd4:	6d5020ef          	jal	80029aa8 <putchar>
    80026bd8:	b74d                	j	80026b7a <stateen_ENVCFG_test_7+0x1da>
    TEST_ASSERT("vu mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026bda:	00006517          	auipc	a0,0x6
    80026bde:	75e50513          	addi	a0,a0,1886 # 8002d338 <__func__.0+0x318>
    80026be2:	1d8040ef          	jal	8002adba <printf>
    80026be6:	02900513          	li	a0,41
    80026bea:	6bf020ef          	jal	80029aa8 <putchar>
    80026bee:	bf39                	j	80026b0c <stateen_ENVCFG_test_7+0x16c>
    TEST_ASSERT("vs mode accesss senvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026bf0:	00006517          	auipc	a0,0x6
    80026bf4:	74850513          	addi	a0,a0,1864 # 8002d338 <__func__.0+0x318>
    80026bf8:	1c2040ef          	jal	8002adba <printf>
    80026bfc:	02900513          	li	a0,41
    80026c00:	6a9020ef          	jal	80029aa8 <putchar>
    80026c04:	bd59                	j	80026a9a <stateen_ENVCFG_test_7+0xfa>
    TEST_ASSERT("vs mode accesss henvcfg register successful when mstateen.envcfg=1 hstateen.envcfg=1",
    80026c06:	00006517          	auipc	a0,0x6
    80026c0a:	73250513          	addi	a0,a0,1842 # 8002d338 <__func__.0+0x318>
    80026c0e:	1ac040ef          	jal	8002adba <printf>
    80026c12:	02900513          	li	a0,41
    80026c16:	693020ef          	jal	80029aa8 <putchar>
    80026c1a:	bd19                	j	80026a30 <stateen_ENVCFG_test_7+0x90>

0000000080026c1c <stateen_SE0_test_1>:
// -------------




bool stateen_SE0_test_1(){
    80026c1c:	1101                	addi	sp,sp,-32

    TEST_START();
    80026c1e:	00006597          	auipc	a1,0x6
    80026c22:	1ba58593          	addi	a1,a1,442 # 8002cdd8 <__func__.7>
    80026c26:	00006517          	auipc	a0,0x6
    80026c2a:	6da50513          	addi	a0,a0,1754 # 8002d300 <__func__.0+0x2e0>
bool stateen_SE0_test_1(){
    80026c2e:	ec06                	sd	ra,24(sp)
    80026c30:	e822                	sd	s0,16(sp)
    80026c32:	e426                	sd	s1,8(sp)
    TEST_START();
    80026c34:	186040ef          	jal	8002adba <printf>
    80026c38:	4529                	li	a0,10
    80026c3a:	66f020ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80026c3e:	4511                	li	a0,4
    80026c40:	a2eda0ef          	jal	80000e6e <goto_priv>
    //当mstateen.SE0=0,hu mode 不可访问Hstateen0和Sstateen0寄存器
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026c44:	57fd                	li	a5,-1
    80026c46:	17fe                	slli	a5,a5,0x3f
    80026c48:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HU);
    80026c4c:	4505                	li	a0,1
    80026c4e:	a20da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026c52:	920da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026c56:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026c5a:	b5ada0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss hstateen0 register cause to illegal except when mstateen.SE0=0",
    80026c5e:	08200593          	li	a1,130
    80026c62:	00011617          	auipc	a2,0x11
    80026c66:	cde60613          	addi	a2,a2,-802 # 80037940 <__func__.0+0xa920>
    80026c6a:	00006517          	auipc	a0,0x6
    80026c6e:	6ae50513          	addi	a0,a0,1710 # 8002d318 <__func__.0+0x2f8>
    80026c72:	148040ef          	jal	8002adba <printf>
    80026c76:	0002a797          	auipc	a5,0x2a
    80026c7a:	39b7c783          	lbu	a5,923(a5) # 80051011 <excpt+0x1>
    80026c7e:	0002a497          	auipc	s1,0x2a
    80026c82:	39248493          	addi	s1,s1,914 # 80051010 <excpt>
    80026c86:	00006597          	auipc	a1,0x6
    80026c8a:	66a58593          	addi	a1,a1,1642 # 8002d2f0 <__func__.0+0x2d0>
    80026c8e:	cf89                	beqz	a5,80026ca8 <stateen_SE0_test_1+0x8c>
    80026c90:	6498                	ld	a4,8(s1)
    80026c92:	4789                	li	a5,2
    80026c94:	00006597          	auipc	a1,0x6
    80026c98:	64c58593          	addi	a1,a1,1612 # 8002d2e0 <__func__.0+0x2c0>
    80026c9c:	00f70663          	beq	a4,a5,80026ca8 <stateen_SE0_test_1+0x8c>
    80026ca0:	00006597          	auipc	a1,0x6
    80026ca4:	65058593          	addi	a1,a1,1616 # 8002d2f0 <__func__.0+0x2d0>
    80026ca8:	00006517          	auipc	a0,0x6
    80026cac:	68850513          	addi	a0,a0,1672 # 8002d330 <__func__.0+0x310>
    80026cb0:	10a040ef          	jal	8002adba <printf>
    80026cb4:	0002a797          	auipc	a5,0x2a
    80026cb8:	35d7c783          	lbu	a5,861(a5) # 80051011 <excpt+0x1>
    80026cbc:	c789                	beqz	a5,80026cc6 <stateen_SE0_test_1+0xaa>
    80026cbe:	6498                	ld	a4,8(s1)
    80026cc0:	4789                	li	a5,2
    80026cc2:	00f70c63          	beq	a4,a5,80026cda <stateen_SE0_test_1+0xbe>
    80026cc6:	00006517          	auipc	a0,0x6
    80026cca:	67250513          	addi	a0,a0,1650 # 8002d338 <__func__.0+0x318>
    80026cce:	0ec040ef          	jal	8002adba <printf>
    80026cd2:	02900513          	li	a0,41
    80026cd6:	5d3020ef          	jal	80029aa8 <putchar>
    80026cda:	4529                	li	a0,10
    80026cdc:	5cd020ef          	jal	80029aa8 <putchar>
    80026ce0:	0002a797          	auipc	a5,0x2a
    80026ce4:	3317c783          	lbu	a5,817(a5) # 80051011 <excpt+0x1>
    80026ce8:	4401                	li	s0,0
    80026cea:	c789                	beqz	a5,80026cf4 <stateen_SE0_test_1+0xd8>
    80026cec:	6480                	ld	s0,8(s1)
    80026cee:	1479                	addi	s0,s0,-2
    80026cf0:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HU);
    80026cf4:	4505                	li	a0,1
    80026cf6:	978da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026cfa:	878da0ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80026cfe:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80026d02:	ab2da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026d06:	08200593          	li	a1,130
    80026d0a:	00011617          	auipc	a2,0x11
    80026d0e:	c8660613          	addi	a2,a2,-890 # 80037990 <__func__.0+0xa970>
    80026d12:	00006517          	auipc	a0,0x6
    80026d16:	60650513          	addi	a0,a0,1542 # 8002d318 <__func__.0+0x2f8>
    80026d1a:	0a0040ef          	jal	8002adba <printf>
    80026d1e:	0002a797          	auipc	a5,0x2a
    80026d22:	2f37c783          	lbu	a5,755(a5) # 80051011 <excpt+0x1>
    80026d26:	00006597          	auipc	a1,0x6
    80026d2a:	5ca58593          	addi	a1,a1,1482 # 8002d2f0 <__func__.0+0x2d0>
    80026d2e:	cf89                	beqz	a5,80026d48 <stateen_SE0_test_1+0x12c>
    80026d30:	6498                	ld	a4,8(s1)
    80026d32:	4789                	li	a5,2
    80026d34:	00006597          	auipc	a1,0x6
    80026d38:	5ac58593          	addi	a1,a1,1452 # 8002d2e0 <__func__.0+0x2c0>
    80026d3c:	00f70663          	beq	a4,a5,80026d48 <stateen_SE0_test_1+0x12c>
    80026d40:	00006597          	auipc	a1,0x6
    80026d44:	5b058593          	addi	a1,a1,1456 # 8002d2f0 <__func__.0+0x2d0>
    80026d48:	00006517          	auipc	a0,0x6
    80026d4c:	5e850513          	addi	a0,a0,1512 # 8002d330 <__func__.0+0x310>
    80026d50:	06a040ef          	jal	8002adba <printf>
    80026d54:	0002a797          	auipc	a5,0x2a
    80026d58:	2bd7c783          	lbu	a5,701(a5) # 80051011 <excpt+0x1>
    80026d5c:	c789                	beqz	a5,80026d66 <stateen_SE0_test_1+0x14a>
    80026d5e:	6498                	ld	a4,8(s1)
    80026d60:	4789                	li	a5,2
    80026d62:	00f70c63          	beq	a4,a5,80026d7a <stateen_SE0_test_1+0x15e>
    80026d66:	00006517          	auipc	a0,0x6
    80026d6a:	5d250513          	addi	a0,a0,1490 # 8002d338 <__func__.0+0x318>
    80026d6e:	04c040ef          	jal	8002adba <printf>
    80026d72:	02900513          	li	a0,41
    80026d76:	533020ef          	jal	80029aa8 <putchar>
    80026d7a:	4529                	li	a0,10
    80026d7c:	52d020ef          	jal	80029aa8 <putchar>
    80026d80:	c015                	beqz	s0,80026da4 <stateen_SE0_test_1+0x188>
    80026d82:	0002a417          	auipc	s0,0x2a
    80026d86:	28f44403          	lbu	s0,655(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 


    TEST_END();
    80026d8a:	00006597          	auipc	a1,0x6
    80026d8e:	56658593          	addi	a1,a1,1382 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026d92:	cc11                	beqz	s0,80026dae <stateen_SE0_test_1+0x192>
    80026d94:	6498                	ld	a4,8(s1)
    80026d96:	4789                	li	a5,2
    TEST_END();
    80026d98:	00006597          	auipc	a1,0x6
    80026d9c:	54858593          	addi	a1,a1,1352 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("HU mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    80026da0:	00f70763          	beq	a4,a5,80026dae <stateen_SE0_test_1+0x192>
    80026da4:	4401                	li	s0,0
    TEST_END();
    80026da6:	00006597          	auipc	a1,0x6
    80026daa:	54a58593          	addi	a1,a1,1354 # 8002d2f0 <__func__.0+0x2d0>
    80026dae:	00006517          	auipc	a0,0x6
    80026db2:	5ea50513          	addi	a0,a0,1514 # 8002d398 <__func__.0+0x378>
    80026db6:	004040ef          	jal	8002adba <printf>
    80026dba:	4511                	li	a0,4
    80026dbc:	8b2da0ef          	jal	80000e6e <goto_priv>
    80026dc0:	9cbda0ef          	jal	8000178a <reset_state>

}
    80026dc4:	60e2                	ld	ra,24(sp)
    80026dc6:	8522                	mv	a0,s0
    80026dc8:	6442                	ld	s0,16(sp)
    80026dca:	64a2                	ld	s1,8(sp)
    80026dcc:	6105                	addi	sp,sp,32
    80026dce:	8082                	ret

0000000080026dd0 <stateen_SE0_test_2>:

bool stateen_SE0_test_2(){
    80026dd0:	1101                	addi	sp,sp,-32

    TEST_START();
    80026dd2:	00006597          	auipc	a1,0x6
    80026dd6:	01e58593          	addi	a1,a1,30 # 8002cdf0 <__func__.6>
    80026dda:	00006517          	auipc	a0,0x6
    80026dde:	52650513          	addi	a0,a0,1318 # 8002d300 <__func__.0+0x2e0>
bool stateen_SE0_test_2(){
    80026de2:	ec06                	sd	ra,24(sp)
    80026de4:	e822                	sd	s0,16(sp)
    80026de6:	e426                	sd	s1,8(sp)
    TEST_START();
    80026de8:	7d3030ef          	jal	8002adba <printf>
    80026dec:	4529                	li	a0,10
    80026dee:	4bb020ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80026df2:	4511                	li	a0,4
    80026df4:	87ada0ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026df8:	57fd                	li	a5,-1
    80026dfa:	17fe                	slli	a5,a5,0x3f
    80026dfc:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80026e00:	60c7a073          	csrs	hstateen0,a5

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时,不可访问Hstateen0和Sstateen0寄存器
    goto_priv(PRIV_VU);
    80026e04:	4501                	li	a0,0
    80026e06:	868da0ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026e0a:	f69d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026e0e:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026e12:	9a2da0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026e16:	08200593          	li	a1,130
    80026e1a:	00011617          	auipc	a2,0x11
    80026e1e:	bc660613          	addi	a2,a2,-1082 # 800379e0 <__func__.0+0xa9c0>
    80026e22:	00006517          	auipc	a0,0x6
    80026e26:	4f650513          	addi	a0,a0,1270 # 8002d318 <__func__.0+0x2f8>
    80026e2a:	791030ef          	jal	8002adba <printf>
    80026e2e:	0002a797          	auipc	a5,0x2a
    80026e32:	1e37c783          	lbu	a5,483(a5) # 80051011 <excpt+0x1>
    80026e36:	0002a497          	auipc	s1,0x2a
    80026e3a:	1da48493          	addi	s1,s1,474 # 80051010 <excpt>
    80026e3e:	00006597          	auipc	a1,0x6
    80026e42:	4b258593          	addi	a1,a1,1202 # 8002d2f0 <__func__.0+0x2d0>
    80026e46:	cf89                	beqz	a5,80026e60 <stateen_SE0_test_2+0x90>
    80026e48:	6498                	ld	a4,8(s1)
    80026e4a:	47d9                	li	a5,22
    80026e4c:	00006597          	auipc	a1,0x6
    80026e50:	49458593          	addi	a1,a1,1172 # 8002d2e0 <__func__.0+0x2c0>
    80026e54:	00f70663          	beq	a4,a5,80026e60 <stateen_SE0_test_2+0x90>
    80026e58:	00006597          	auipc	a1,0x6
    80026e5c:	49858593          	addi	a1,a1,1176 # 8002d2f0 <__func__.0+0x2d0>
    80026e60:	00006517          	auipc	a0,0x6
    80026e64:	4d050513          	addi	a0,a0,1232 # 8002d330 <__func__.0+0x310>
    80026e68:	753030ef          	jal	8002adba <printf>
    80026e6c:	0002a797          	auipc	a5,0x2a
    80026e70:	1a57c783          	lbu	a5,421(a5) # 80051011 <excpt+0x1>
    80026e74:	c789                	beqz	a5,80026e7e <stateen_SE0_test_2+0xae>
    80026e76:	6498                	ld	a4,8(s1)
    80026e78:	47d9                	li	a5,22
    80026e7a:	00f70c63          	beq	a4,a5,80026e92 <stateen_SE0_test_2+0xc2>
    80026e7e:	00006517          	auipc	a0,0x6
    80026e82:	4ba50513          	addi	a0,a0,1210 # 8002d338 <__func__.0+0x318>
    80026e86:	735030ef          	jal	8002adba <printf>
    80026e8a:	02900513          	li	a0,41
    80026e8e:	41b020ef          	jal	80029aa8 <putchar>
    80026e92:	4529                	li	a0,10
    80026e94:	415020ef          	jal	80029aa8 <putchar>
    80026e98:	0002a797          	auipc	a5,0x2a
    80026e9c:	1797c783          	lbu	a5,377(a5) # 80051011 <excpt+0x1>
    80026ea0:	4401                	li	s0,0
    80026ea2:	c789                	beqz	a5,80026eac <stateen_SE0_test_2+0xdc>
    80026ea4:	6480                	ld	s0,8(s1)
    80026ea6:	1429                	addi	s0,s0,-22
    80026ea8:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VU);
    80026eac:	4501                	li	a0,0
    80026eae:	fc1d90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026eb2:	ec1d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80026eb6:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80026eba:	8fada0ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026ebe:	08200593          	li	a1,130
    80026ec2:	00011617          	auipc	a2,0x11
    80026ec6:	b7660613          	addi	a2,a2,-1162 # 80037a38 <__func__.0+0xaa18>
    80026eca:	00006517          	auipc	a0,0x6
    80026ece:	44e50513          	addi	a0,a0,1102 # 8002d318 <__func__.0+0x2f8>
    80026ed2:	6e9030ef          	jal	8002adba <printf>
    80026ed6:	0002a797          	auipc	a5,0x2a
    80026eda:	13b7c783          	lbu	a5,315(a5) # 80051011 <excpt+0x1>
    80026ede:	00006597          	auipc	a1,0x6
    80026ee2:	41258593          	addi	a1,a1,1042 # 8002d2f0 <__func__.0+0x2d0>
    80026ee6:	cf89                	beqz	a5,80026f00 <stateen_SE0_test_2+0x130>
    80026ee8:	6498                	ld	a4,8(s1)
    80026eea:	47d9                	li	a5,22
    80026eec:	00006597          	auipc	a1,0x6
    80026ef0:	3f458593          	addi	a1,a1,1012 # 8002d2e0 <__func__.0+0x2c0>
    80026ef4:	00f70663          	beq	a4,a5,80026f00 <stateen_SE0_test_2+0x130>
    80026ef8:	00006597          	auipc	a1,0x6
    80026efc:	3f858593          	addi	a1,a1,1016 # 8002d2f0 <__func__.0+0x2d0>
    80026f00:	00006517          	auipc	a0,0x6
    80026f04:	43050513          	addi	a0,a0,1072 # 8002d330 <__func__.0+0x310>
    80026f08:	6b3030ef          	jal	8002adba <printf>
    80026f0c:	0002a797          	auipc	a5,0x2a
    80026f10:	1057c783          	lbu	a5,261(a5) # 80051011 <excpt+0x1>
    80026f14:	c789                	beqz	a5,80026f1e <stateen_SE0_test_2+0x14e>
    80026f16:	6498                	ld	a4,8(s1)
    80026f18:	47d9                	li	a5,22
    80026f1a:	00f70c63          	beq	a4,a5,80026f32 <stateen_SE0_test_2+0x162>
    80026f1e:	00006517          	auipc	a0,0x6
    80026f22:	41a50513          	addi	a0,a0,1050 # 8002d338 <__func__.0+0x318>
    80026f26:	695030ef          	jal	8002adba <printf>
    80026f2a:	02900513          	li	a0,41
    80026f2e:	37b020ef          	jal	80029aa8 <putchar>
    80026f32:	4529                	li	a0,10
    80026f34:	375020ef          	jal	80029aa8 <putchar>
    80026f38:	c015                	beqz	s0,80026f5c <stateen_SE0_test_2+0x18c>
    80026f3a:	0002a417          	auipc	s0,0x2a
    80026f3e:	0d744403          	lbu	s0,215(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 


    TEST_END();
    80026f42:	00006597          	auipc	a1,0x6
    80026f46:	3ae58593          	addi	a1,a1,942 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026f4a:	cc11                	beqz	s0,80026f66 <stateen_SE0_test_2+0x196>
    80026f4c:	6498                	ld	a4,8(s1)
    80026f4e:	47d9                	li	a5,22
    TEST_END();
    80026f50:	00006597          	auipc	a1,0x6
    80026f54:	39058593          	addi	a1,a1,912 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("VU mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80026f58:	00f70763          	beq	a4,a5,80026f66 <stateen_SE0_test_2+0x196>
    80026f5c:	4401                	li	s0,0
    TEST_END();
    80026f5e:	00006597          	auipc	a1,0x6
    80026f62:	39258593          	addi	a1,a1,914 # 8002d2f0 <__func__.0+0x2d0>
    80026f66:	00006517          	auipc	a0,0x6
    80026f6a:	43250513          	addi	a0,a0,1074 # 8002d398 <__func__.0+0x378>
    80026f6e:	64d030ef          	jal	8002adba <printf>
    80026f72:	4511                	li	a0,4
    80026f74:	efbd90ef          	jal	80000e6e <goto_priv>
    80026f78:	813da0ef          	jal	8000178a <reset_state>

}
    80026f7c:	60e2                	ld	ra,24(sp)
    80026f7e:	8522                	mv	a0,s0
    80026f80:	6442                	ld	s0,16(sp)
    80026f82:	64a2                	ld	s1,8(sp)
    80026f84:	6105                	addi	sp,sp,32
    80026f86:	8082                	ret

0000000080026f88 <stateen_SE0_test_3>:

bool stateen_SE0_test_3(){
    80026f88:	1141                	addi	sp,sp,-16

    //当mstateen.SE0=0,m mode 可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    80026f8a:	00006597          	auipc	a1,0x6
    80026f8e:	e7e58593          	addi	a1,a1,-386 # 8002ce08 <__func__.5>
    80026f92:	00006517          	auipc	a0,0x6
    80026f96:	36e50513          	addi	a0,a0,878 # 8002d300 <__func__.0+0x2e0>
bool stateen_SE0_test_3(){
    80026f9a:	e406                	sd	ra,8(sp)
    80026f9c:	e022                	sd	s0,0(sp)
    TEST_START();
    80026f9e:	61d030ef          	jal	8002adba <printf>
    80026fa2:	4529                	li	a0,10
    80026fa4:	305020ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80026fa8:	4511                	li	a0,4
    80026faa:	ec5d90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80026fae:	57fd                	li	a5,-1
    80026fb0:	17fe                	slli	a5,a5,0x3f
    80026fb2:	30c7b073          	csrc	mstateen0,a5
    goto_priv(PRIV_M);
    80026fb6:	4511                	li	a0,4
    80026fb8:	eb7d90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80026fbc:	db7d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80026fc0:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80026fc4:	ff1d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    80026fc8:	08200593          	li	a1,130
    80026fcc:	00011617          	auipc	a2,0x11
    80026fd0:	ac460613          	addi	a2,a2,-1340 # 80037a90 <__func__.0+0xaa70>
    80026fd4:	00006517          	auipc	a0,0x6
    80026fd8:	34450513          	addi	a0,a0,836 # 8002d318 <__func__.0+0x2f8>
    80026fdc:	5df030ef          	jal	8002adba <printf>
    80026fe0:	0002a797          	auipc	a5,0x2a
    80026fe4:	0317c783          	lbu	a5,49(a5) # 80051011 <excpt+0x1>
    80026fe8:	00006597          	auipc	a1,0x6
    80026fec:	2f858593          	addi	a1,a1,760 # 8002d2e0 <__func__.0+0x2c0>
    80026ff0:	c789                	beqz	a5,80026ffa <stateen_SE0_test_3+0x72>
    80026ff2:	00006597          	auipc	a1,0x6
    80026ff6:	2fe58593          	addi	a1,a1,766 # 8002d2f0 <__func__.0+0x2d0>
    80026ffa:	00006517          	auipc	a0,0x6
    80026ffe:	33650513          	addi	a0,a0,822 # 8002d330 <__func__.0+0x310>
    80027002:	5b9030ef          	jal	8002adba <printf>
    80027006:	0002a797          	auipc	a5,0x2a
    8002700a:	00b7c783          	lbu	a5,11(a5) # 80051011 <excpt+0x1>
    8002700e:	e7e9                	bnez	a5,800270d8 <stateen_SE0_test_3+0x150>
    80027010:	4529                	li	a0,10
    80027012:	297020ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80027016:	4511                	li	a0,4
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    80027018:	0002a417          	auipc	s0,0x2a
    8002701c:	ff944403          	lbu	s0,-7(s0) # 80051011 <excpt+0x1>
    goto_priv(PRIV_M);
    80027020:	e4fd90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027024:	d4fd90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027028:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    8002702c:	f89d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    80027030:	08200593          	li	a1,130
    80027034:	00011617          	auipc	a2,0x11
    80027038:	a9c60613          	addi	a2,a2,-1380 # 80037ad0 <__func__.0+0xaab0>
    8002703c:	00006517          	auipc	a0,0x6
    80027040:	2dc50513          	addi	a0,a0,732 # 8002d318 <__func__.0+0x2f8>
    80027044:	577030ef          	jal	8002adba <printf>
    80027048:	0002a797          	auipc	a5,0x2a
    8002704c:	fc97c783          	lbu	a5,-55(a5) # 80051011 <excpt+0x1>
    80027050:	00006597          	auipc	a1,0x6
    80027054:	2a058593          	addi	a1,a1,672 # 8002d2f0 <__func__.0+0x2d0>
    80027058:	e789                	bnez	a5,80027062 <stateen_SE0_test_3+0xda>
    8002705a:	00006597          	auipc	a1,0x6
    8002705e:	28658593          	addi	a1,a1,646 # 8002d2e0 <__func__.0+0x2c0>
    80027062:	00006517          	auipc	a0,0x6
    80027066:	2ce50513          	addi	a0,a0,718 # 8002d330 <__func__.0+0x310>
    8002706a:	551030ef          	jal	8002adba <printf>
    8002706e:	0002a797          	auipc	a5,0x2a
    80027072:	fa37c783          	lbu	a5,-93(a5) # 80051011 <excpt+0x1>
    80027076:	e7b1                	bnez	a5,800270c2 <stateen_SE0_test_3+0x13a>
    80027078:	4529                	li	a0,10
    8002707a:	22f020ef          	jal	80029aa8 <putchar>
    8002707e:	e815                	bnez	s0,800270b2 <stateen_SE0_test_3+0x12a>
    80027080:	0002a797          	auipc	a5,0x2a
    80027084:	f917c783          	lbu	a5,-111(a5) # 80051011 <excpt+0x1>
    80027088:	c79d                	beqz	a5,800270b6 <stateen_SE0_test_3+0x12e>
        excpt.triggered == false
    ); 



    TEST_END();
    8002708a:	00006597          	auipc	a1,0x6
    8002708e:	26658593          	addi	a1,a1,614 # 8002d2f0 <__func__.0+0x2d0>
    80027092:	00006517          	auipc	a0,0x6
    80027096:	30650513          	addi	a0,a0,774 # 8002d398 <__func__.0+0x378>
    8002709a:	521030ef          	jal	8002adba <printf>
    8002709e:	4511                	li	a0,4
    800270a0:	dcfd90ef          	jal	80000e6e <goto_priv>
    800270a4:	ee6da0ef          	jal	8000178a <reset_state>

}
    800270a8:	60a2                	ld	ra,8(sp)
    800270aa:	8522                	mv	a0,s0
    800270ac:	6402                	ld	s0,0(sp)
    800270ae:	0141                	addi	sp,sp,16
    800270b0:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    800270b2:	4401                	li	s0,0
    800270b4:	bfd9                	j	8002708a <stateen_SE0_test_3+0x102>
    800270b6:	4405                	li	s0,1
    TEST_END();
    800270b8:	00006597          	auipc	a1,0x6
    800270bc:	22858593          	addi	a1,a1,552 # 8002d2e0 <__func__.0+0x2c0>
    800270c0:	bfc9                	j	80027092 <stateen_SE0_test_3+0x10a>
    TEST_ASSERT("m mode accesss sstateen0 register success  when mstateen.SE0=0",
    800270c2:	00006517          	auipc	a0,0x6
    800270c6:	27650513          	addi	a0,a0,630 # 8002d338 <__func__.0+0x318>
    800270ca:	4f1030ef          	jal	8002adba <printf>
    800270ce:	02900513          	li	a0,41
    800270d2:	1d7020ef          	jal	80029aa8 <putchar>
    800270d6:	b74d                	j	80027078 <stateen_SE0_test_3+0xf0>
    TEST_ASSERT("m mode access hstateen0 register success  when mstateen.SE0=0",
    800270d8:	00006517          	auipc	a0,0x6
    800270dc:	26050513          	addi	a0,a0,608 # 8002d338 <__func__.0+0x318>
    800270e0:	4db030ef          	jal	8002adba <printf>
    800270e4:	02900513          	li	a0,41
    800270e8:	1c1020ef          	jal	80029aa8 <putchar>
    800270ec:	b715                	j	80027010 <stateen_SE0_test_3+0x88>

00000000800270ee <stateen_SE0_test_4>:


bool stateen_SE0_test_4(){
    800270ee:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=1,hstateen.SE0=0,v=1时不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    800270f0:	00006597          	auipc	a1,0x6
    800270f4:	d3058593          	addi	a1,a1,-720 # 8002ce20 <__func__.4>
    800270f8:	00006517          	auipc	a0,0x6
    800270fc:	20850513          	addi	a0,a0,520 # 8002d300 <__func__.0+0x2e0>
bool stateen_SE0_test_4(){
    80027100:	ec06                	sd	ra,24(sp)
    80027102:	e822                	sd	s0,16(sp)
    80027104:	e426                	sd	s1,8(sp)
    TEST_START();
    80027106:	4b5030ef          	jal	8002adba <printf>
    8002710a:	4529                	li	a0,10
    8002710c:	19d020ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80027110:	4511                	li	a0,4
    80027112:	d5dd90ef          	jal	80000e6e <goto_priv>
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027116:	57fd                	li	a5,-1
    80027118:	17fe                	slli	a5,a5,0x3f
    8002711a:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    8002711e:	60c7b073          	csrc	hstateen0,a5
    printf("mstateen=%llx\n",CSRR(CSR_MSTATEEN0));
    80027122:	30c025f3          	csrr	a1,mstateen0
    80027126:	0000f517          	auipc	a0,0xf
    8002712a:	9ba50513          	addi	a0,a0,-1606 # 80035ae0 <__func__.0+0x8ac0>
    8002712e:	48d030ef          	jal	8002adba <printf>
    printf("hstateen=%llx\n",CSRR(CSR_HSTATEEN0));
    80027132:	60c025f3          	csrr	a1,hstateen0
    80027136:	0000f517          	auipc	a0,0xf
    8002713a:	9ba50513          	addi	a0,a0,-1606 # 80035af0 <__func__.0+0x8ad0>
    8002713e:	47d030ef          	jal	8002adba <printf>

    goto_priv(PRIV_VS);
    80027142:	4509                	li	a0,2
    80027144:	d2bd90ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    80027148:	c2bd90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002714c:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027150:	e65d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027154:	08200593          	li	a1,130
    80027158:	00011617          	auipc	a2,0x11
    8002715c:	9b860613          	addi	a2,a2,-1608 # 80037b10 <__func__.0+0xaaf0>
    80027160:	00006517          	auipc	a0,0x6
    80027164:	1b850513          	addi	a0,a0,440 # 8002d318 <__func__.0+0x2f8>
    80027168:	453030ef          	jal	8002adba <printf>
    8002716c:	0002a797          	auipc	a5,0x2a
    80027170:	ea57c783          	lbu	a5,-347(a5) # 80051011 <excpt+0x1>
    80027174:	0002a497          	auipc	s1,0x2a
    80027178:	e9c48493          	addi	s1,s1,-356 # 80051010 <excpt>
    8002717c:	00006597          	auipc	a1,0x6
    80027180:	17458593          	addi	a1,a1,372 # 8002d2f0 <__func__.0+0x2d0>
    80027184:	cf89                	beqz	a5,8002719e <stateen_SE0_test_4+0xb0>
    80027186:	6498                	ld	a4,8(s1)
    80027188:	47d9                	li	a5,22
    8002718a:	00006597          	auipc	a1,0x6
    8002718e:	15658593          	addi	a1,a1,342 # 8002d2e0 <__func__.0+0x2c0>
    80027192:	00f70663          	beq	a4,a5,8002719e <stateen_SE0_test_4+0xb0>
    80027196:	00006597          	auipc	a1,0x6
    8002719a:	15a58593          	addi	a1,a1,346 # 8002d2f0 <__func__.0+0x2d0>
    8002719e:	00006517          	auipc	a0,0x6
    800271a2:	19250513          	addi	a0,a0,402 # 8002d330 <__func__.0+0x310>
    800271a6:	415030ef          	jal	8002adba <printf>
    800271aa:	0002a797          	auipc	a5,0x2a
    800271ae:	e677c783          	lbu	a5,-409(a5) # 80051011 <excpt+0x1>
    800271b2:	c789                	beqz	a5,800271bc <stateen_SE0_test_4+0xce>
    800271b4:	6498                	ld	a4,8(s1)
    800271b6:	47d9                	li	a5,22
    800271b8:	00f70c63          	beq	a4,a5,800271d0 <stateen_SE0_test_4+0xe2>
    800271bc:	00006517          	auipc	a0,0x6
    800271c0:	17c50513          	addi	a0,a0,380 # 8002d338 <__func__.0+0x318>
    800271c4:	3f7030ef          	jal	8002adba <printf>
    800271c8:	02900513          	li	a0,41
    800271cc:	0dd020ef          	jal	80029aa8 <putchar>
    800271d0:	4529                	li	a0,10
    800271d2:	0d7020ef          	jal	80029aa8 <putchar>
    800271d6:	0002a797          	auipc	a5,0x2a
    800271da:	e3b7c783          	lbu	a5,-453(a5) # 80051011 <excpt+0x1>
    800271de:	4401                	li	s0,0
    800271e0:	c789                	beqz	a5,800271ea <stateen_SE0_test_4+0xfc>
    800271e2:	6480                	ld	s0,8(s1)
    800271e4:	1429                	addi	s0,s0,-22
    800271e6:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_VRTI
    ); 

    goto_priv(PRIV_VS);
    800271ea:	4509                	li	a0,2
    800271ec:	c83d90ef          	jal	80000e6e <goto_priv>

    TEST_SETUP_EXCEPT();
    800271f0:	b83d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800271f4:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800271f8:	dbdd90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    800271fc:	08200593          	li	a1,130
    80027200:	00011617          	auipc	a2,0x11
    80027204:	96860613          	addi	a2,a2,-1688 # 80037b68 <__func__.0+0xab48>
    80027208:	00006517          	auipc	a0,0x6
    8002720c:	11050513          	addi	a0,a0,272 # 8002d318 <__func__.0+0x2f8>
    80027210:	3ab030ef          	jal	8002adba <printf>
    80027214:	0002a797          	auipc	a5,0x2a
    80027218:	dfd7c783          	lbu	a5,-515(a5) # 80051011 <excpt+0x1>
    8002721c:	00006597          	auipc	a1,0x6
    80027220:	0d458593          	addi	a1,a1,212 # 8002d2f0 <__func__.0+0x2d0>
    80027224:	cf89                	beqz	a5,8002723e <stateen_SE0_test_4+0x150>
    80027226:	6498                	ld	a4,8(s1)
    80027228:	47d9                	li	a5,22
    8002722a:	00006597          	auipc	a1,0x6
    8002722e:	0b658593          	addi	a1,a1,182 # 8002d2e0 <__func__.0+0x2c0>
    80027232:	00f70663          	beq	a4,a5,8002723e <stateen_SE0_test_4+0x150>
    80027236:	00006597          	auipc	a1,0x6
    8002723a:	0ba58593          	addi	a1,a1,186 # 8002d2f0 <__func__.0+0x2d0>
    8002723e:	00006517          	auipc	a0,0x6
    80027242:	0f250513          	addi	a0,a0,242 # 8002d330 <__func__.0+0x310>
    80027246:	375030ef          	jal	8002adba <printf>
    8002724a:	0002a797          	auipc	a5,0x2a
    8002724e:	dc77c783          	lbu	a5,-569(a5) # 80051011 <excpt+0x1>
    80027252:	c789                	beqz	a5,8002725c <stateen_SE0_test_4+0x16e>
    80027254:	6498                	ld	a4,8(s1)
    80027256:	47d9                	li	a5,22
    80027258:	00f70c63          	beq	a4,a5,80027270 <stateen_SE0_test_4+0x182>
    8002725c:	00006517          	auipc	a0,0x6
    80027260:	0dc50513          	addi	a0,a0,220 # 8002d338 <__func__.0+0x318>
    80027264:	357030ef          	jal	8002adba <printf>
    80027268:	02900513          	li	a0,41
    8002726c:	03d020ef          	jal	80029aa8 <putchar>
    80027270:	4529                	li	a0,10
    80027272:	037020ef          	jal	80029aa8 <putchar>
    80027276:	c015                	beqz	s0,8002729a <stateen_SE0_test_4+0x1ac>
    80027278:	0002a417          	auipc	s0,0x2a
    8002727c:	d9944403          	lbu	s0,-615(s0) # 80051011 <excpt+0x1>
        excpt.cause == CAUSE_VRTI
    ); 



    TEST_END();
    80027280:	00006597          	auipc	a1,0x6
    80027284:	07058593          	addi	a1,a1,112 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027288:	cc11                	beqz	s0,800272a4 <stateen_SE0_test_4+0x1b6>
    8002728a:	6498                	ld	a4,8(s1)
    8002728c:	47d9                	li	a5,22
    TEST_END();
    8002728e:	00006597          	auipc	a1,0x6
    80027292:	05258593          	addi	a1,a1,82 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("vs mode accesss sstateen0 register cause to VRTI when mstateen.SE0=1 hstateen.SE0=0",
    80027296:	00f70763          	beq	a4,a5,800272a4 <stateen_SE0_test_4+0x1b6>
    8002729a:	4401                	li	s0,0
    TEST_END();
    8002729c:	00006597          	auipc	a1,0x6
    800272a0:	05458593          	addi	a1,a1,84 # 8002d2f0 <__func__.0+0x2d0>
    800272a4:	00006517          	auipc	a0,0x6
    800272a8:	0f450513          	addi	a0,a0,244 # 8002d398 <__func__.0+0x378>
    800272ac:	30f030ef          	jal	8002adba <printf>
    800272b0:	4511                	li	a0,4
    800272b2:	bbdd90ef          	jal	80000e6e <goto_priv>
    800272b6:	cd4da0ef          	jal	8000178a <reset_state>

}
    800272ba:	60e2                	ld	ra,24(sp)
    800272bc:	8522                	mv	a0,s0
    800272be:	6442                	ld	s0,16(sp)
    800272c0:	64a2                	ld	s1,8(sp)
    800272c2:	6105                	addi	sp,sp,32
    800272c4:	8082                	ret

00000000800272c6 <stateen_SE0_test_5>:

bool stateen_SE0_test_5(){
    800272c6:	1101                	addi	sp,sp,-32

    //当mstateen.SE0=0,hs mode 不可访问Hstateen0和Sstateen0寄存器

    TEST_START();
    800272c8:	00006597          	auipc	a1,0x6
    800272cc:	b7058593          	addi	a1,a1,-1168 # 8002ce38 <__func__.3>
    800272d0:	00006517          	auipc	a0,0x6
    800272d4:	03050513          	addi	a0,a0,48 # 8002d300 <__func__.0+0x2e0>
bool stateen_SE0_test_5(){
    800272d8:	ec06                	sd	ra,24(sp)
    800272da:	e822                	sd	s0,16(sp)
    800272dc:	e426                	sd	s1,8(sp)
    TEST_START();
    800272de:	2dd030ef          	jal	8002adba <printf>
    800272e2:	4529                	li	a0,10
    800272e4:	7c4020ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    800272e8:	4511                	li	a0,4
    800272ea:	b85d90ef          	jal	80000e6e <goto_priv>
    CSRC(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800272ee:	57fd                	li	a5,-1
    800272f0:	17fe                	slli	a5,a5,0x3f
    800272f2:	30c7b073          	csrc	mstateen0,a5

    goto_priv(PRIV_HS);
    800272f6:	450d                	li	a0,3
    800272f8:	b77d90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800272fc:	a77d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027300:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027304:	cb1d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register cause to illegal except when mstateen.SE0=0",
    80027308:	08200593          	li	a1,130
    8002730c:	00011617          	auipc	a2,0x11
    80027310:	8b460613          	addi	a2,a2,-1868 # 80037bc0 <__func__.0+0xaba0>
    80027314:	00006517          	auipc	a0,0x6
    80027318:	00450513          	addi	a0,a0,4 # 8002d318 <__func__.0+0x2f8>
    8002731c:	29f030ef          	jal	8002adba <printf>
    80027320:	0002a797          	auipc	a5,0x2a
    80027324:	cf17c783          	lbu	a5,-783(a5) # 80051011 <excpt+0x1>
    80027328:	0002a497          	auipc	s1,0x2a
    8002732c:	ce848493          	addi	s1,s1,-792 # 80051010 <excpt>
    80027330:	00006597          	auipc	a1,0x6
    80027334:	fc058593          	addi	a1,a1,-64 # 8002d2f0 <__func__.0+0x2d0>
    80027338:	cf89                	beqz	a5,80027352 <stateen_SE0_test_5+0x8c>
    8002733a:	6498                	ld	a4,8(s1)
    8002733c:	4789                	li	a5,2
    8002733e:	00006597          	auipc	a1,0x6
    80027342:	fa258593          	addi	a1,a1,-94 # 8002d2e0 <__func__.0+0x2c0>
    80027346:	00f70663          	beq	a4,a5,80027352 <stateen_SE0_test_5+0x8c>
    8002734a:	00006597          	auipc	a1,0x6
    8002734e:	fa658593          	addi	a1,a1,-90 # 8002d2f0 <__func__.0+0x2d0>
    80027352:	00006517          	auipc	a0,0x6
    80027356:	fde50513          	addi	a0,a0,-34 # 8002d330 <__func__.0+0x310>
    8002735a:	261030ef          	jal	8002adba <printf>
    8002735e:	0002a797          	auipc	a5,0x2a
    80027362:	cb37c783          	lbu	a5,-845(a5) # 80051011 <excpt+0x1>
    80027366:	c789                	beqz	a5,80027370 <stateen_SE0_test_5+0xaa>
    80027368:	6498                	ld	a4,8(s1)
    8002736a:	4789                	li	a5,2
    8002736c:	00f70c63          	beq	a4,a5,80027384 <stateen_SE0_test_5+0xbe>
    80027370:	00006517          	auipc	a0,0x6
    80027374:	fc850513          	addi	a0,a0,-56 # 8002d338 <__func__.0+0x318>
    80027378:	243030ef          	jal	8002adba <printf>
    8002737c:	02900513          	li	a0,41
    80027380:	728020ef          	jal	80029aa8 <putchar>
    80027384:	4529                	li	a0,10
    80027386:	722020ef          	jal	80029aa8 <putchar>
    8002738a:	0002a797          	auipc	a5,0x2a
    8002738e:	c877c783          	lbu	a5,-889(a5) # 80051011 <excpt+0x1>
    80027392:	4401                	li	s0,0
    80027394:	c789                	beqz	a5,8002739e <stateen_SE0_test_5+0xd8>
    80027396:	6480                	ld	s0,8(s1)
    80027398:	1479                	addi	s0,s0,-2
    8002739a:	00143413          	seqz	s0,s0
        excpt.triggered == true &&
        excpt.cause == CAUSE_ILI
    ); 

    goto_priv(PRIV_HS);
    8002739e:	450d                	li	a0,3
    800273a0:	acfd90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800273a4:	9cfd90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800273a8:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800273ac:	c09d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    800273b0:	08200593          	li	a1,130
    800273b4:	00011617          	auipc	a2,0x11
    800273b8:	85c60613          	addi	a2,a2,-1956 # 80037c10 <__func__.0+0xabf0>
    800273bc:	00006517          	auipc	a0,0x6
    800273c0:	f5c50513          	addi	a0,a0,-164 # 8002d318 <__func__.0+0x2f8>
    800273c4:	1f7030ef          	jal	8002adba <printf>
    800273c8:	0002a797          	auipc	a5,0x2a
    800273cc:	c497c783          	lbu	a5,-951(a5) # 80051011 <excpt+0x1>
    800273d0:	00006597          	auipc	a1,0x6
    800273d4:	f2058593          	addi	a1,a1,-224 # 8002d2f0 <__func__.0+0x2d0>
    800273d8:	cf89                	beqz	a5,800273f2 <stateen_SE0_test_5+0x12c>
    800273da:	6498                	ld	a4,8(s1)
    800273dc:	4789                	li	a5,2
    800273de:	00006597          	auipc	a1,0x6
    800273e2:	f0258593          	addi	a1,a1,-254 # 8002d2e0 <__func__.0+0x2c0>
    800273e6:	00f70663          	beq	a4,a5,800273f2 <stateen_SE0_test_5+0x12c>
    800273ea:	00006597          	auipc	a1,0x6
    800273ee:	f0658593          	addi	a1,a1,-250 # 8002d2f0 <__func__.0+0x2d0>
    800273f2:	00006517          	auipc	a0,0x6
    800273f6:	f3e50513          	addi	a0,a0,-194 # 8002d330 <__func__.0+0x310>
    800273fa:	1c1030ef          	jal	8002adba <printf>
    800273fe:	0002a797          	auipc	a5,0x2a
    80027402:	c137c783          	lbu	a5,-1005(a5) # 80051011 <excpt+0x1>
    80027406:	c789                	beqz	a5,80027410 <stateen_SE0_test_5+0x14a>
    80027408:	6498                	ld	a4,8(s1)
    8002740a:	4789                	li	a5,2
    8002740c:	00f70c63          	beq	a4,a5,80027424 <stateen_SE0_test_5+0x15e>
    80027410:	00006517          	auipc	a0,0x6
    80027414:	f2850513          	addi	a0,a0,-216 # 8002d338 <__func__.0+0x318>
    80027418:	1a3030ef          	jal	8002adba <printf>
    8002741c:	02900513          	li	a0,41
    80027420:	688020ef          	jal	80029aa8 <putchar>
    80027424:	4529                	li	a0,10
    80027426:	682020ef          	jal	80029aa8 <putchar>
    8002742a:	c015                	beqz	s0,8002744e <stateen_SE0_test_5+0x188>
    8002742c:	0002a417          	auipc	s0,0x2a
    80027430:	be544403          	lbu	s0,-1051(s0) # 80051011 <excpt+0x1>
        excpt.cause == CAUSE_ILI
    ); 



    TEST_END();
    80027434:	00006597          	auipc	a1,0x6
    80027438:	ebc58593          	addi	a1,a1,-324 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    8002743c:	cc11                	beqz	s0,80027458 <stateen_SE0_test_5+0x192>
    8002743e:	6498                	ld	a4,8(s1)
    80027440:	4789                	li	a5,2
    TEST_END();
    80027442:	00006597          	auipc	a1,0x6
    80027446:	e9e58593          	addi	a1,a1,-354 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("hs mode accesss sstateen0 register cause to illegal except when mstateen.SE0=0",
    8002744a:	00f70763          	beq	a4,a5,80027458 <stateen_SE0_test_5+0x192>
    8002744e:	4401                	li	s0,0
    TEST_END();
    80027450:	00006597          	auipc	a1,0x6
    80027454:	ea058593          	addi	a1,a1,-352 # 8002d2f0 <__func__.0+0x2d0>
    80027458:	00006517          	auipc	a0,0x6
    8002745c:	f4050513          	addi	a0,a0,-192 # 8002d398 <__func__.0+0x378>
    80027460:	15b030ef          	jal	8002adba <printf>
    80027464:	4511                	li	a0,4
    80027466:	a09d90ef          	jal	80000e6e <goto_priv>
    8002746a:	b20da0ef          	jal	8000178a <reset_state>

}
    8002746e:	60e2                	ld	ra,24(sp)
    80027470:	8522                	mv	a0,s0
    80027472:	6442                	ld	s0,16(sp)
    80027474:	64a2                	ld	s1,8(sp)
    80027476:	6105                	addi	sp,sp,32
    80027478:	8082                	ret

000000008002747a <stateen_SE0_test_6>:


bool stateen_SE0_test_6(){
    8002747a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002747c:	00006597          	auipc	a1,0x6
    80027480:	9d458593          	addi	a1,a1,-1580 # 8002ce50 <__func__.2>
    80027484:	00006517          	auipc	a0,0x6
    80027488:	e7c50513          	addi	a0,a0,-388 # 8002d300 <__func__.0+0x2e0>
bool stateen_SE0_test_6(){
    8002748c:	ec06                	sd	ra,24(sp)
    8002748e:	e822                	sd	s0,16(sp)
    80027490:	e426                	sd	s1,8(sp)
    TEST_START();
    80027492:	129030ef          	jal	8002adba <printf>
    80027496:	4529                	li	a0,10
    80027498:	610020ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    8002749c:	4511                	li	a0,4
    8002749e:	9d1d90ef          	jal	80000e6e <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    800274a2:	57fd                	li	a5,-1
    800274a4:	17fe                	slli	a5,a5,0x3f
    800274a6:	30c7a073          	csrs	mstateen0,a5
    CSRC(CSR_HSTATEEN0 , MSTATEEN_SE0);
    800274aa:	60c7b073          	csrc	hstateen0,a5

    goto_priv(PRIV_HS);
    800274ae:	450d                	li	a0,3
    800274b0:	9bfd90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800274b4:	8bfd90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    800274b8:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    800274bc:	af9d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800274c0:	08200593          	li	a1,130
    800274c4:	00010617          	auipc	a2,0x10
    800274c8:	79c60613          	addi	a2,a2,1948 # 80037c60 <__func__.0+0xac40>
    800274cc:	00006517          	auipc	a0,0x6
    800274d0:	e4c50513          	addi	a0,a0,-436 # 8002d318 <__func__.0+0x2f8>
    800274d4:	0e7030ef          	jal	8002adba <printf>
    800274d8:	0002a797          	auipc	a5,0x2a
    800274dc:	b397c783          	lbu	a5,-1223(a5) # 80051011 <excpt+0x1>
    800274e0:	00006597          	auipc	a1,0x6
    800274e4:	e0058593          	addi	a1,a1,-512 # 8002d2e0 <__func__.0+0x2c0>
    800274e8:	c789                	beqz	a5,800274f2 <stateen_SE0_test_6+0x78>
    800274ea:	00006597          	auipc	a1,0x6
    800274ee:	e0658593          	addi	a1,a1,-506 # 8002d2f0 <__func__.0+0x2d0>
    800274f2:	00006517          	auipc	a0,0x6
    800274f6:	e3e50513          	addi	a0,a0,-450 # 8002d330 <__func__.0+0x310>
    800274fa:	0c1030ef          	jal	8002adba <printf>
    800274fe:	0002a797          	auipc	a5,0x2a
    80027502:	b137c783          	lbu	a5,-1261(a5) # 80051011 <excpt+0x1>
    80027506:	2c079e63          	bnez	a5,800277e2 <stateen_SE0_test_6+0x368>
    8002750a:	4529                	li	a0,10
    8002750c:	59c020ef          	jal	80029aa8 <putchar>
    80027510:	0002a497          	auipc	s1,0x2a
    80027514:	b014c483          	lbu	s1,-1279(s1) # 80051011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    80027518:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    8002751c:	a99d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    80027520:	08200593          	li	a1,130
    80027524:	00010617          	auipc	a2,0x10
    80027528:	79460613          	addi	a2,a2,1940 # 80037cb8 <__func__.0+0xac98>
    8002752c:	00006517          	auipc	a0,0x6
    80027530:	dec50513          	addi	a0,a0,-532 # 8002d318 <__func__.0+0x2f8>
    80027534:	087030ef          	jal	8002adba <printf>
    80027538:	0002a797          	auipc	a5,0x2a
    8002753c:	ad97c783          	lbu	a5,-1319(a5) # 80051011 <excpt+0x1>
    80027540:	00006597          	auipc	a1,0x6
    80027544:	db058593          	addi	a1,a1,-592 # 8002d2f0 <__func__.0+0x2d0>
    80027548:	e789                	bnez	a5,80027552 <stateen_SE0_test_6+0xd8>
    8002754a:	00006597          	auipc	a1,0x6
    8002754e:	d9658593          	addi	a1,a1,-618 # 8002d2e0 <__func__.0+0x2c0>
    80027552:	00006517          	auipc	a0,0x6
    80027556:	dde50513          	addi	a0,a0,-546 # 8002d330 <__func__.0+0x310>
    8002755a:	061030ef          	jal	8002adba <printf>
    8002755e:	0002a797          	auipc	a5,0x2a
    80027562:	ab37c783          	lbu	a5,-1357(a5) # 80051011 <excpt+0x1>
    80027566:	26079363          	bnez	a5,800277cc <stateen_SE0_test_6+0x352>
    8002756a:	4529                	li	a0,10
    8002756c:	53c020ef          	jal	80029aa8 <putchar>
    80027570:	4401                	li	s0,0
    80027572:	e499                	bnez	s1,80027580 <stateen_SE0_test_6+0x106>
    80027574:	0002a417          	auipc	s0,0x2a
    80027578:	a9d44403          	lbu	s0,-1379(s0) # 80051011 <excpt+0x1>
    8002757c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027580:	4505                	li	a0,1
    80027582:	8edd90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027586:	fecd90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002758a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    8002758e:	a27d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027592:	08200593          	li	a1,130
    80027596:	00010617          	auipc	a2,0x10
    8002759a:	77a60613          	addi	a2,a2,1914 # 80037d10 <__func__.0+0xacf0>
    8002759e:	00006517          	auipc	a0,0x6
    800275a2:	d7a50513          	addi	a0,a0,-646 # 8002d318 <__func__.0+0x2f8>
    800275a6:	015030ef          	jal	8002adba <printf>
    800275aa:	0002a797          	auipc	a5,0x2a
    800275ae:	a677c783          	lbu	a5,-1433(a5) # 80051011 <excpt+0x1>
    800275b2:	00006597          	auipc	a1,0x6
    800275b6:	d3e58593          	addi	a1,a1,-706 # 8002d2f0 <__func__.0+0x2d0>
    800275ba:	e789                	bnez	a5,800275c4 <stateen_SE0_test_6+0x14a>
    800275bc:	00006597          	auipc	a1,0x6
    800275c0:	d2458593          	addi	a1,a1,-732 # 8002d2e0 <__func__.0+0x2c0>
    800275c4:	00006517          	auipc	a0,0x6
    800275c8:	d6c50513          	addi	a0,a0,-660 # 8002d330 <__func__.0+0x310>
    800275cc:	7ee030ef          	jal	8002adba <printf>
    800275d0:	0002a797          	auipc	a5,0x2a
    800275d4:	a417c783          	lbu	a5,-1471(a5) # 80051011 <excpt+0x1>
    800275d8:	1c079f63          	bnez	a5,800277b6 <stateen_SE0_test_6+0x33c>
    800275dc:	4529                	li	a0,10
    800275de:	4ca020ef          	jal	80029aa8 <putchar>
    800275e2:	c419                	beqz	s0,800275f0 <stateen_SE0_test_6+0x176>
    800275e4:	0002a417          	auipc	s0,0x2a
    800275e8:	a2d44403          	lbu	s0,-1491(s0) # 80051011 <excpt+0x1>
    800275ec:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    800275f0:	4505                	li	a0,1
    800275f2:	87dd90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800275f6:	f7cd90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800275fa:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800275fe:	9b7d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027602:	08200593          	li	a1,130
    80027606:	00010617          	auipc	a2,0x10
    8002760a:	75a60613          	addi	a2,a2,1882 # 80037d60 <__func__.0+0xad40>
    8002760e:	00006517          	auipc	a0,0x6
    80027612:	d0a50513          	addi	a0,a0,-758 # 8002d318 <__func__.0+0x2f8>
    80027616:	7a4030ef          	jal	8002adba <printf>
    8002761a:	0002a797          	auipc	a5,0x2a
    8002761e:	9f77c783          	lbu	a5,-1545(a5) # 80051011 <excpt+0x1>
    80027622:	00006597          	auipc	a1,0x6
    80027626:	cce58593          	addi	a1,a1,-818 # 8002d2f0 <__func__.0+0x2d0>
    8002762a:	e789                	bnez	a5,80027634 <stateen_SE0_test_6+0x1ba>
    8002762c:	00006597          	auipc	a1,0x6
    80027630:	cb458593          	addi	a1,a1,-844 # 8002d2e0 <__func__.0+0x2c0>
    80027634:	00006517          	auipc	a0,0x6
    80027638:	cfc50513          	addi	a0,a0,-772 # 8002d330 <__func__.0+0x310>
    8002763c:	77e030ef          	jal	8002adba <printf>
    80027640:	0002a797          	auipc	a5,0x2a
    80027644:	9d17c783          	lbu	a5,-1583(a5) # 80051011 <excpt+0x1>
    80027648:	14079c63          	bnez	a5,800277a0 <stateen_SE0_test_6+0x326>
    8002764c:	4529                	li	a0,10
    8002764e:	45a020ef          	jal	80029aa8 <putchar>
    80027652:	c419                	beqz	s0,80027660 <stateen_SE0_test_6+0x1e6>
    80027654:	0002a417          	auipc	s0,0x2a
    80027658:	9bd44403          	lbu	s0,-1603(s0) # 80051011 <excpt+0x1>
    8002765c:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027660:	4511                	li	a0,4
    80027662:	80dd90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027666:	f0cd90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    8002766a:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    8002766e:	947d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027672:	08200593          	li	a1,130
    80027676:	00010617          	auipc	a2,0x10
    8002767a:	74260613          	addi	a2,a2,1858 # 80037db8 <__func__.0+0xad98>
    8002767e:	00006517          	auipc	a0,0x6
    80027682:	c9a50513          	addi	a0,a0,-870 # 8002d318 <__func__.0+0x2f8>
    80027686:	734030ef          	jal	8002adba <printf>
    8002768a:	0002a797          	auipc	a5,0x2a
    8002768e:	9877c783          	lbu	a5,-1657(a5) # 80051011 <excpt+0x1>
    80027692:	00006597          	auipc	a1,0x6
    80027696:	c5e58593          	addi	a1,a1,-930 # 8002d2f0 <__func__.0+0x2d0>
    8002769a:	e789                	bnez	a5,800276a4 <stateen_SE0_test_6+0x22a>
    8002769c:	00006597          	auipc	a1,0x6
    800276a0:	c4458593          	addi	a1,a1,-956 # 8002d2e0 <__func__.0+0x2c0>
    800276a4:	00006517          	auipc	a0,0x6
    800276a8:	c8c50513          	addi	a0,a0,-884 # 8002d330 <__func__.0+0x310>
    800276ac:	70e030ef          	jal	8002adba <printf>
    800276b0:	0002a797          	auipc	a5,0x2a
    800276b4:	9617c783          	lbu	a5,-1695(a5) # 80051011 <excpt+0x1>
    800276b8:	0c079963          	bnez	a5,8002778a <stateen_SE0_test_6+0x310>
    800276bc:	4529                	li	a0,10
    800276be:	3ea020ef          	jal	80029aa8 <putchar>
    800276c2:	c419                	beqz	s0,800276d0 <stateen_SE0_test_6+0x256>
    800276c4:	0002a417          	auipc	s0,0x2a
    800276c8:	94d44403          	lbu	s0,-1715(s0) # 80051011 <excpt+0x1>
    800276cc:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    800276d0:	4511                	li	a0,4
    800276d2:	f9cd90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800276d6:	e9cd90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800276da:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800276de:	8d7d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800276e2:	08200593          	li	a1,130
    800276e6:	00010617          	auipc	a2,0x10
    800276ea:	72260613          	addi	a2,a2,1826 # 80037e08 <__func__.0+0xade8>
    800276ee:	00006517          	auipc	a0,0x6
    800276f2:	c2a50513          	addi	a0,a0,-982 # 8002d318 <__func__.0+0x2f8>
    800276f6:	6c4030ef          	jal	8002adba <printf>
    800276fa:	0002a797          	auipc	a5,0x2a
    800276fe:	9177c783          	lbu	a5,-1769(a5) # 80051011 <excpt+0x1>
    80027702:	00006597          	auipc	a1,0x6
    80027706:	bee58593          	addi	a1,a1,-1042 # 8002d2f0 <__func__.0+0x2d0>
    8002770a:	e789                	bnez	a5,80027714 <stateen_SE0_test_6+0x29a>
    8002770c:	00006597          	auipc	a1,0x6
    80027710:	bd458593          	addi	a1,a1,-1068 # 8002d2e0 <__func__.0+0x2c0>
    80027714:	00006517          	auipc	a0,0x6
    80027718:	c1c50513          	addi	a0,a0,-996 # 8002d330 <__func__.0+0x310>
    8002771c:	69e030ef          	jal	8002adba <printf>
    80027720:	0002a797          	auipc	a5,0x2a
    80027724:	8f17c783          	lbu	a5,-1807(a5) # 80051011 <excpt+0x1>
    80027728:	e7b1                	bnez	a5,80027774 <stateen_SE0_test_6+0x2fa>
    8002772a:	4529                	li	a0,10
    8002772c:	37c020ef          	jal	80029aa8 <putchar>
    80027730:	c411                	beqz	s0,8002773c <stateen_SE0_test_6+0x2c2>
    80027732:	0002a797          	auipc	a5,0x2a
    80027736:	8df7c783          	lbu	a5,-1825(a5) # 80051011 <excpt+0x1>
    8002773a:	c79d                	beqz	a5,80027768 <stateen_SE0_test_6+0x2ee>
    8002773c:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    8002773e:	00006597          	auipc	a1,0x6
    80027742:	bb258593          	addi	a1,a1,-1102 # 8002d2f0 <__func__.0+0x2d0>
    80027746:	00006517          	auipc	a0,0x6
    8002774a:	c5250513          	addi	a0,a0,-942 # 8002d398 <__func__.0+0x378>
    8002774e:	66c030ef          	jal	8002adba <printf>
    80027752:	4511                	li	a0,4
    80027754:	f1ad90ef          	jal	80000e6e <goto_priv>
    80027758:	832da0ef          	jal	8000178a <reset_state>

}
    8002775c:	60e2                	ld	ra,24(sp)
    8002775e:	8522                	mv	a0,s0
    80027760:	6442                	ld	s0,16(sp)
    80027762:	64a2                	ld	s1,8(sp)
    80027764:	6105                	addi	sp,sp,32
    80027766:	8082                	ret
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027768:	4405                	li	s0,1
    TEST_END();
    8002776a:	00006597          	auipc	a1,0x6
    8002776e:	b7658593          	addi	a1,a1,-1162 # 8002d2e0 <__func__.0+0x2c0>
    80027772:	bfd1                	j	80027746 <stateen_SE0_test_6+0x2cc>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    80027774:	00006517          	auipc	a0,0x6
    80027778:	bc450513          	addi	a0,a0,-1084 # 8002d338 <__func__.0+0x318>
    8002777c:	63e030ef          	jal	8002adba <printf>
    80027780:	02900513          	li	a0,41
    80027784:	324020ef          	jal	80029aa8 <putchar>
    80027788:	b74d                	j	8002772a <stateen_SE0_test_6+0x2b0>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    8002778a:	00006517          	auipc	a0,0x6
    8002778e:	bae50513          	addi	a0,a0,-1106 # 8002d338 <__func__.0+0x318>
    80027792:	628030ef          	jal	8002adba <printf>
    80027796:	02900513          	li	a0,41
    8002779a:	30e020ef          	jal	80029aa8 <putchar>
    8002779e:	bf39                	j	800276bc <stateen_SE0_test_6+0x242>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800277a0:	00006517          	auipc	a0,0x6
    800277a4:	b9850513          	addi	a0,a0,-1128 # 8002d338 <__func__.0+0x318>
    800277a8:	612030ef          	jal	8002adba <printf>
    800277ac:	02900513          	li	a0,41
    800277b0:	2f8020ef          	jal	80029aa8 <putchar>
    800277b4:	bd61                	j	8002764c <stateen_SE0_test_6+0x1d2>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=0",
    800277b6:	00006517          	auipc	a0,0x6
    800277ba:	b8250513          	addi	a0,a0,-1150 # 8002d338 <__func__.0+0x318>
    800277be:	5fc030ef          	jal	8002adba <printf>
    800277c2:	02900513          	li	a0,41
    800277c6:	2e2020ef          	jal	80029aa8 <putchar>
    800277ca:	bd09                	j	800275dc <stateen_SE0_test_6+0x162>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800277cc:	00006517          	auipc	a0,0x6
    800277d0:	b6c50513          	addi	a0,a0,-1172 # 8002d338 <__func__.0+0x318>
    800277d4:	5e6030ef          	jal	8002adba <printf>
    800277d8:	02900513          	li	a0,41
    800277dc:	2cc020ef          	jal	80029aa8 <putchar>
    800277e0:	b369                	j	8002756a <stateen_SE0_test_6+0xf0>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=0",
    800277e2:	00006517          	auipc	a0,0x6
    800277e6:	b5650513          	addi	a0,a0,-1194 # 8002d338 <__func__.0+0x318>
    800277ea:	5d0030ef          	jal	8002adba <printf>
    800277ee:	02900513          	li	a0,41
    800277f2:	2b6020ef          	jal	80029aa8 <putchar>
    800277f6:	bb11                	j	8002750a <stateen_SE0_test_6+0x90>

00000000800277f8 <stateen_SE0_test_7>:


bool stateen_SE0_test_7(){
    800277f8:	1101                	addi	sp,sp,-32

    TEST_START();
    800277fa:	00005597          	auipc	a1,0x5
    800277fe:	66e58593          	addi	a1,a1,1646 # 8002ce68 <__func__.1>
    80027802:	00006517          	auipc	a0,0x6
    80027806:	afe50513          	addi	a0,a0,-1282 # 8002d300 <__func__.0+0x2e0>
bool stateen_SE0_test_7(){
    8002780a:	ec06                	sd	ra,24(sp)
    8002780c:	e822                	sd	s0,16(sp)
    8002780e:	e426                	sd	s1,8(sp)
    TEST_START();
    80027810:	5aa030ef          	jal	8002adba <printf>
    80027814:	4529                	li	a0,10
    80027816:	292020ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    8002781a:	4511                	li	a0,4
    8002781c:	e52d90ef          	jal	80000e6e <goto_priv>
    //当mstateen.SE0=1 hstateen.SE0=1,v=1 时可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027820:	57fd                	li	a5,-1
    80027822:	17fe                	slli	a5,a5,0x3f
    80027824:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027828:	60c7a073          	csrs	hstateen0,a5

    goto_priv(PRIV_VS);
    8002782c:	4509                	li	a0,2
    8002782e:	e40d90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027832:	d40d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027836:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    8002783a:	f7ad90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002783e:	08200593          	li	a1,130
    80027842:	00010617          	auipc	a2,0x10
    80027846:	61660613          	addi	a2,a2,1558 # 80037e58 <__func__.0+0xae38>
    8002784a:	00006517          	auipc	a0,0x6
    8002784e:	ace50513          	addi	a0,a0,-1330 # 8002d318 <__func__.0+0x2f8>
    80027852:	568030ef          	jal	8002adba <printf>
    80027856:	00029797          	auipc	a5,0x29
    8002785a:	7bb7c783          	lbu	a5,1979(a5) # 80051011 <excpt+0x1>
    8002785e:	00006597          	auipc	a1,0x6
    80027862:	a8258593          	addi	a1,a1,-1406 # 8002d2e0 <__func__.0+0x2c0>
    80027866:	c789                	beqz	a5,80027870 <stateen_SE0_test_7+0x78>
    80027868:	00006597          	auipc	a1,0x6
    8002786c:	a8858593          	addi	a1,a1,-1400 # 8002d2f0 <__func__.0+0x2d0>
    80027870:	00006517          	auipc	a0,0x6
    80027874:	ac050513          	addi	a0,a0,-1344 # 8002d330 <__func__.0+0x310>
    80027878:	542030ef          	jal	8002adba <printf>
    8002787c:	00029797          	auipc	a5,0x29
    80027880:	7957c783          	lbu	a5,1941(a5) # 80051011 <excpt+0x1>
    80027884:	1c079d63          	bnez	a5,80027a5e <stateen_SE0_test_7+0x266>
    80027888:	4529                	li	a0,10
    8002788a:	21e020ef          	jal	80029aa8 <putchar>
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    8002788e:	4509                	li	a0,2
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027890:	00029497          	auipc	s1,0x29
    80027894:	7814c483          	lbu	s1,1921(s1) # 80051011 <excpt+0x1>
    goto_priv(PRIV_VS);
    80027898:	dd6d90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002789c:	cd6d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    800278a0:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    800278a4:	f10d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    800278a8:	08200593          	li	a1,130
    800278ac:	00010617          	auipc	a2,0x10
    800278b0:	5fc60613          	addi	a2,a2,1532 # 80037ea8 <__func__.0+0xae88>
    800278b4:	00006517          	auipc	a0,0x6
    800278b8:	a6450513          	addi	a0,a0,-1436 # 8002d318 <__func__.0+0x2f8>
    800278bc:	4fe030ef          	jal	8002adba <printf>
    800278c0:	00029797          	auipc	a5,0x29
    800278c4:	7517c783          	lbu	a5,1873(a5) # 80051011 <excpt+0x1>
    800278c8:	00006597          	auipc	a1,0x6
    800278cc:	a2858593          	addi	a1,a1,-1496 # 8002d2f0 <__func__.0+0x2d0>
    800278d0:	e789                	bnez	a5,800278da <stateen_SE0_test_7+0xe2>
    800278d2:	00006597          	auipc	a1,0x6
    800278d6:	a0e58593          	addi	a1,a1,-1522 # 8002d2e0 <__func__.0+0x2c0>
    800278da:	00006517          	auipc	a0,0x6
    800278de:	a5650513          	addi	a0,a0,-1450 # 8002d330 <__func__.0+0x310>
    800278e2:	4d8030ef          	jal	8002adba <printf>
    800278e6:	00029797          	auipc	a5,0x29
    800278ea:	72b7c783          	lbu	a5,1835(a5) # 80051011 <excpt+0x1>
    800278ee:	14079d63          	bnez	a5,80027a48 <stateen_SE0_test_7+0x250>
    800278f2:	4529                	li	a0,10
    800278f4:	1b4020ef          	jal	80029aa8 <putchar>
    800278f8:	4401                	li	s0,0
    800278fa:	e499                	bnez	s1,80027908 <stateen_SE0_test_7+0x110>
    800278fc:	00029417          	auipc	s0,0x29
    80027900:	71544403          	lbu	s0,1813(s0) # 80051011 <excpt+0x1>
    80027904:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VU);
    80027908:	4501                	li	a0,0
    8002790a:	d64d90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002790e:	c64d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027912:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027916:	e9ed90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002791a:	08200593          	li	a1,130
    8002791e:	00010617          	auipc	a2,0x10
    80027922:	5e260613          	addi	a2,a2,1506 # 80037f00 <__func__.0+0xaee0>
    80027926:	00006517          	auipc	a0,0x6
    8002792a:	9f250513          	addi	a0,a0,-1550 # 8002d318 <__func__.0+0x2f8>
    8002792e:	48c030ef          	jal	8002adba <printf>
    80027932:	00029797          	auipc	a5,0x29
    80027936:	6df7c783          	lbu	a5,1759(a5) # 80051011 <excpt+0x1>
    8002793a:	00006597          	auipc	a1,0x6
    8002793e:	9b658593          	addi	a1,a1,-1610 # 8002d2f0 <__func__.0+0x2d0>
    80027942:	e789                	bnez	a5,8002794c <stateen_SE0_test_7+0x154>
    80027944:	00006597          	auipc	a1,0x6
    80027948:	99c58593          	addi	a1,a1,-1636 # 8002d2e0 <__func__.0+0x2c0>
    8002794c:	00006517          	auipc	a0,0x6
    80027950:	9e450513          	addi	a0,a0,-1564 # 8002d330 <__func__.0+0x310>
    80027954:	466030ef          	jal	8002adba <printf>
    80027958:	00029797          	auipc	a5,0x29
    8002795c:	6b97c783          	lbu	a5,1721(a5) # 80051011 <excpt+0x1>
    80027960:	0c079963          	bnez	a5,80027a32 <stateen_SE0_test_7+0x23a>
    80027964:	4529                	li	a0,10
    80027966:	142020ef          	jal	80029aa8 <putchar>
    8002796a:	c419                	beqz	s0,80027978 <stateen_SE0_test_7+0x180>
    8002796c:	00029417          	auipc	s0,0x29
    80027970:	6a544403          	lbu	s0,1701(s0) # 80051011 <excpt+0x1>
    80027974:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VU);
    80027978:	4501                	li	a0,0
    8002797a:	cf4d90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002797e:	bf4d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027982:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027986:	e2ed90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    8002798a:	08200593          	li	a1,130
    8002798e:	00010617          	auipc	a2,0x10
    80027992:	5c260613          	addi	a2,a2,1474 # 80037f50 <__func__.0+0xaf30>
    80027996:	00006517          	auipc	a0,0x6
    8002799a:	98250513          	addi	a0,a0,-1662 # 8002d318 <__func__.0+0x2f8>
    8002799e:	41c030ef          	jal	8002adba <printf>
    800279a2:	00029797          	auipc	a5,0x29
    800279a6:	66f7c783          	lbu	a5,1647(a5) # 80051011 <excpt+0x1>
    800279aa:	00006597          	auipc	a1,0x6
    800279ae:	94658593          	addi	a1,a1,-1722 # 8002d2f0 <__func__.0+0x2d0>
    800279b2:	e789                	bnez	a5,800279bc <stateen_SE0_test_7+0x1c4>
    800279b4:	00006597          	auipc	a1,0x6
    800279b8:	92c58593          	addi	a1,a1,-1748 # 8002d2e0 <__func__.0+0x2c0>
    800279bc:	00006517          	auipc	a0,0x6
    800279c0:	97450513          	addi	a0,a0,-1676 # 8002d330 <__func__.0+0x310>
    800279c4:	3f6030ef          	jal	8002adba <printf>
    800279c8:	00029797          	auipc	a5,0x29
    800279cc:	6497c783          	lbu	a5,1609(a5) # 80051011 <excpt+0x1>
    800279d0:	e7b1                	bnez	a5,80027a1c <stateen_SE0_test_7+0x224>
    800279d2:	4529                	li	a0,10
    800279d4:	0d4020ef          	jal	80029aa8 <putchar>
    800279d8:	c411                	beqz	s0,800279e4 <stateen_SE0_test_7+0x1ec>
    800279da:	00029797          	auipc	a5,0x29
    800279de:	6377c783          	lbu	a5,1591(a5) # 80051011 <excpt+0x1>
    800279e2:	c79d                	beqz	a5,80027a10 <stateen_SE0_test_7+0x218>
    800279e4:	4401                	li	s0,0
        excpt.triggered == false
    ); 

    TEST_END();
    800279e6:	00006597          	auipc	a1,0x6
    800279ea:	90a58593          	addi	a1,a1,-1782 # 8002d2f0 <__func__.0+0x2d0>
    800279ee:	00006517          	auipc	a0,0x6
    800279f2:	9aa50513          	addi	a0,a0,-1622 # 8002d398 <__func__.0+0x378>
    800279f6:	3c4030ef          	jal	8002adba <printf>
    800279fa:	4511                	li	a0,4
    800279fc:	c72d90ef          	jal	80000e6e <goto_priv>
    80027a00:	d8bd90ef          	jal	8000178a <reset_state>
}
    80027a04:	60e2                	ld	ra,24(sp)
    80027a06:	8522                	mv	a0,s0
    80027a08:	6442                	ld	s0,16(sp)
    80027a0a:	64a2                	ld	s1,8(sp)
    80027a0c:	6105                	addi	sp,sp,32
    80027a0e:	8082                	ret
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a10:	4405                	li	s0,1
    TEST_END();
    80027a12:	00006597          	auipc	a1,0x6
    80027a16:	8ce58593          	addi	a1,a1,-1842 # 8002d2e0 <__func__.0+0x2c0>
    80027a1a:	bfd1                	j	800279ee <stateen_SE0_test_7+0x1f6>
    TEST_ASSERT("vu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a1c:	00006517          	auipc	a0,0x6
    80027a20:	91c50513          	addi	a0,a0,-1764 # 8002d338 <__func__.0+0x318>
    80027a24:	396030ef          	jal	8002adba <printf>
    80027a28:	02900513          	li	a0,41
    80027a2c:	07c020ef          	jal	80029aa8 <putchar>
    80027a30:	b74d                	j	800279d2 <stateen_SE0_test_7+0x1da>
    TEST_ASSERT("vu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a32:	00006517          	auipc	a0,0x6
    80027a36:	90650513          	addi	a0,a0,-1786 # 8002d338 <__func__.0+0x318>
    80027a3a:	380030ef          	jal	8002adba <printf>
    80027a3e:	02900513          	li	a0,41
    80027a42:	066020ef          	jal	80029aa8 <putchar>
    80027a46:	bf39                	j	80027964 <stateen_SE0_test_7+0x16c>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a48:	00006517          	auipc	a0,0x6
    80027a4c:	8f050513          	addi	a0,a0,-1808 # 8002d338 <__func__.0+0x318>
    80027a50:	36a030ef          	jal	8002adba <printf>
    80027a54:	02900513          	li	a0,41
    80027a58:	050020ef          	jal	80029aa8 <putchar>
    80027a5c:	bd59                	j	800278f2 <stateen_SE0_test_7+0xfa>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027a5e:	00006517          	auipc	a0,0x6
    80027a62:	8da50513          	addi	a0,a0,-1830 # 8002d338 <__func__.0+0x318>
    80027a66:	354030ef          	jal	8002adba <printf>
    80027a6a:	02900513          	li	a0,41
    80027a6e:	03a020ef          	jal	80029aa8 <putchar>
    80027a72:	bd19                	j	80027888 <stateen_SE0_test_7+0x90>

0000000080027a74 <stateen_SE0_test_8>:




bool stateen_SE0_test_8(){
    80027a74:	1101                	addi	sp,sp,-32

    TEST_START();
    80027a76:	00005597          	auipc	a1,0x5
    80027a7a:	40a58593          	addi	a1,a1,1034 # 8002ce80 <__func__.0>
    80027a7e:	00006517          	auipc	a0,0x6
    80027a82:	88250513          	addi	a0,a0,-1918 # 8002d300 <__func__.0+0x2e0>
bool stateen_SE0_test_8(){
    80027a86:	ec06                	sd	ra,24(sp)
    80027a88:	e822                	sd	s0,16(sp)
    80027a8a:	e426                	sd	s1,8(sp)
    TEST_START();
    80027a8c:	32e030ef          	jal	8002adba <printf>
    80027a90:	4529                	li	a0,10
    80027a92:	016020ef          	jal	80029aa8 <putchar>
    
    goto_priv(PRIV_M);
    80027a96:	4511                	li	a0,4
    80027a98:	bd6d90ef          	jal	80000e6e <goto_priv>
    //当mstateen.SE0=1,v=0时,可访问Hstateen0和Sstateen0寄存器
    CSRS(CSR_MSTATEEN0 , MSTATEEN_SE0);
    80027a9c:	57fd                	li	a5,-1
    80027a9e:	17fe                	slli	a5,a5,0x3f
    80027aa0:	30c7a073          	csrs	mstateen0,a5
    CSRS(CSR_HSTATEEN0 , MSTATEEN_SE0);
    80027aa4:	60c7a073          	csrs	hstateen0,a5
    CSRS(CSR_SSTATEEN0 , MSTATEEN_SE0);
    80027aa8:	10c7a073          	csrs	sstateen0,a5

    goto_priv(PRIV_HS);
    80027aac:	450d                	li	a0,3
    80027aae:	bc0d90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027ab2:	ac0d90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027ab6:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027aba:	cfad90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027abe:	08200593          	li	a1,130
    80027ac2:	00010617          	auipc	a2,0x10
    80027ac6:	4e660613          	addi	a2,a2,1254 # 80037fa8 <__func__.0+0xaf88>
    80027aca:	00006517          	auipc	a0,0x6
    80027ace:	84e50513          	addi	a0,a0,-1970 # 8002d318 <__func__.0+0x2f8>
    80027ad2:	2e8030ef          	jal	8002adba <printf>
    80027ad6:	00029797          	auipc	a5,0x29
    80027ada:	53b7c783          	lbu	a5,1339(a5) # 80051011 <excpt+0x1>
    80027ade:	00006597          	auipc	a1,0x6
    80027ae2:	80258593          	addi	a1,a1,-2046 # 8002d2e0 <__func__.0+0x2c0>
    80027ae6:	c789                	beqz	a5,80027af0 <stateen_SE0_test_8+0x7c>
    80027ae8:	00006597          	auipc	a1,0x6
    80027aec:	80858593          	addi	a1,a1,-2040 # 8002d2f0 <__func__.0+0x2d0>
    80027af0:	00006517          	auipc	a0,0x6
    80027af4:	84050513          	addi	a0,a0,-1984 # 8002d330 <__func__.0+0x310>
    80027af8:	2c2030ef          	jal	8002adba <printf>
    80027afc:	00029797          	auipc	a5,0x29
    80027b00:	5157c783          	lbu	a5,1301(a5) # 80051011 <excpt+0x1>
    80027b04:	4e079a63          	bnez	a5,80027ff8 <stateen_SE0_test_8+0x584>
    80027b08:	4529                	li	a0,10
    80027b0a:	79f010ef          	jal	80029aa8 <putchar>
    80027b0e:	00029497          	auipc	s1,0x29
    80027b12:	5034c483          	lbu	s1,1283(s1) # 80051011 <excpt+0x1>
        excpt.triggered == false
    ); 

    CSRR(CSR_SSTATEEN0);
    80027b16:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027b1a:	c9ad90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027b1e:	08200593          	li	a1,130
    80027b22:	00010617          	auipc	a2,0x10
    80027b26:	4de60613          	addi	a2,a2,1246 # 80038000 <__func__.0+0xafe0>
    80027b2a:	00005517          	auipc	a0,0x5
    80027b2e:	7ee50513          	addi	a0,a0,2030 # 8002d318 <__func__.0+0x2f8>
    80027b32:	288030ef          	jal	8002adba <printf>
    80027b36:	00029797          	auipc	a5,0x29
    80027b3a:	4db7c783          	lbu	a5,1243(a5) # 80051011 <excpt+0x1>
    80027b3e:	00005597          	auipc	a1,0x5
    80027b42:	7b258593          	addi	a1,a1,1970 # 8002d2f0 <__func__.0+0x2d0>
    80027b46:	e789                	bnez	a5,80027b50 <stateen_SE0_test_8+0xdc>
    80027b48:	00005597          	auipc	a1,0x5
    80027b4c:	79858593          	addi	a1,a1,1944 # 8002d2e0 <__func__.0+0x2c0>
    80027b50:	00005517          	auipc	a0,0x5
    80027b54:	7e050513          	addi	a0,a0,2016 # 8002d330 <__func__.0+0x310>
    80027b58:	262030ef          	jal	8002adba <printf>
    80027b5c:	00029797          	auipc	a5,0x29
    80027b60:	4b57c783          	lbu	a5,1205(a5) # 80051011 <excpt+0x1>
    80027b64:	46079f63          	bnez	a5,80027fe2 <stateen_SE0_test_8+0x56e>
    80027b68:	4529                	li	a0,10
    80027b6a:	73f010ef          	jal	80029aa8 <putchar>
    80027b6e:	4401                	li	s0,0
    80027b70:	e499                	bnez	s1,80027b7e <stateen_SE0_test_8+0x10a>
    80027b72:	00029417          	auipc	s0,0x29
    80027b76:	49f44403          	lbu	s0,1183(s0) # 80051011 <excpt+0x1>
    80027b7a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HU);
    80027b7e:	4505                	li	a0,1
    80027b80:	aeed90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027b84:	9eed90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027b88:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027b8c:	c28d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027b90:	08200593          	li	a1,130
    80027b94:	00010617          	auipc	a2,0x10
    80027b98:	4c460613          	addi	a2,a2,1220 # 80038058 <__func__.0+0xb038>
    80027b9c:	00005517          	auipc	a0,0x5
    80027ba0:	77c50513          	addi	a0,a0,1916 # 8002d318 <__func__.0+0x2f8>
    80027ba4:	216030ef          	jal	8002adba <printf>
    80027ba8:	00029797          	auipc	a5,0x29
    80027bac:	4697c783          	lbu	a5,1129(a5) # 80051011 <excpt+0x1>
    80027bb0:	00005597          	auipc	a1,0x5
    80027bb4:	74058593          	addi	a1,a1,1856 # 8002d2f0 <__func__.0+0x2d0>
    80027bb8:	e789                	bnez	a5,80027bc2 <stateen_SE0_test_8+0x14e>
    80027bba:	00005597          	auipc	a1,0x5
    80027bbe:	72658593          	addi	a1,a1,1830 # 8002d2e0 <__func__.0+0x2c0>
    80027bc2:	00005517          	auipc	a0,0x5
    80027bc6:	76e50513          	addi	a0,a0,1902 # 8002d330 <__func__.0+0x310>
    80027bca:	1f0030ef          	jal	8002adba <printf>
    80027bce:	00029797          	auipc	a5,0x29
    80027bd2:	4437c783          	lbu	a5,1091(a5) # 80051011 <excpt+0x1>
    80027bd6:	3e079b63          	bnez	a5,80027fcc <stateen_SE0_test_8+0x558>
    80027bda:	4529                	li	a0,10
    80027bdc:	6cd010ef          	jal	80029aa8 <putchar>
    80027be0:	c419                	beqz	s0,80027bee <stateen_SE0_test_8+0x17a>
    80027be2:	00029417          	auipc	s0,0x29
    80027be6:	42f44403          	lbu	s0,1071(s0) # 80051011 <excpt+0x1>
    80027bea:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HU);
    80027bee:	4505                	li	a0,1
    80027bf0:	a7ed90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027bf4:	97ed90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027bf8:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027bfc:	bb8d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c00:	08200593          	li	a1,130
    80027c04:	00010617          	auipc	a2,0x10
    80027c08:	4a460613          	addi	a2,a2,1188 # 800380a8 <__func__.0+0xb088>
    80027c0c:	00005517          	auipc	a0,0x5
    80027c10:	70c50513          	addi	a0,a0,1804 # 8002d318 <__func__.0+0x2f8>
    80027c14:	1a6030ef          	jal	8002adba <printf>
    80027c18:	00029797          	auipc	a5,0x29
    80027c1c:	3f97c783          	lbu	a5,1017(a5) # 80051011 <excpt+0x1>
    80027c20:	00005597          	auipc	a1,0x5
    80027c24:	6d058593          	addi	a1,a1,1744 # 8002d2f0 <__func__.0+0x2d0>
    80027c28:	e789                	bnez	a5,80027c32 <stateen_SE0_test_8+0x1be>
    80027c2a:	00005597          	auipc	a1,0x5
    80027c2e:	6b658593          	addi	a1,a1,1718 # 8002d2e0 <__func__.0+0x2c0>
    80027c32:	00005517          	auipc	a0,0x5
    80027c36:	6fe50513          	addi	a0,a0,1790 # 8002d330 <__func__.0+0x310>
    80027c3a:	180030ef          	jal	8002adba <printf>
    80027c3e:	00029797          	auipc	a5,0x29
    80027c42:	3d37c783          	lbu	a5,979(a5) # 80051011 <excpt+0x1>
    80027c46:	36079863          	bnez	a5,80027fb6 <stateen_SE0_test_8+0x542>
    80027c4a:	4529                	li	a0,10
    80027c4c:	65d010ef          	jal	80029aa8 <putchar>
    80027c50:	c419                	beqz	s0,80027c5e <stateen_SE0_test_8+0x1ea>
    80027c52:	00029417          	auipc	s0,0x29
    80027c56:	3bf44403          	lbu	s0,959(s0) # 80051011 <excpt+0x1>
    80027c5a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_M);
    80027c5e:	4511                	li	a0,4
    80027c60:	a0ed90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027c64:	90ed90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027c68:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027c6c:	b48d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027c70:	08200593          	li	a1,130
    80027c74:	00010617          	auipc	a2,0x10
    80027c78:	48c60613          	addi	a2,a2,1164 # 80038100 <__func__.0+0xb0e0>
    80027c7c:	00005517          	auipc	a0,0x5
    80027c80:	69c50513          	addi	a0,a0,1692 # 8002d318 <__func__.0+0x2f8>
    80027c84:	136030ef          	jal	8002adba <printf>
    80027c88:	00029797          	auipc	a5,0x29
    80027c8c:	3897c783          	lbu	a5,905(a5) # 80051011 <excpt+0x1>
    80027c90:	00005597          	auipc	a1,0x5
    80027c94:	66058593          	addi	a1,a1,1632 # 8002d2f0 <__func__.0+0x2d0>
    80027c98:	e789                	bnez	a5,80027ca2 <stateen_SE0_test_8+0x22e>
    80027c9a:	00005597          	auipc	a1,0x5
    80027c9e:	64658593          	addi	a1,a1,1606 # 8002d2e0 <__func__.0+0x2c0>
    80027ca2:	00005517          	auipc	a0,0x5
    80027ca6:	68e50513          	addi	a0,a0,1678 # 8002d330 <__func__.0+0x310>
    80027caa:	110030ef          	jal	8002adba <printf>
    80027cae:	00029797          	auipc	a5,0x29
    80027cb2:	3637c783          	lbu	a5,867(a5) # 80051011 <excpt+0x1>
    80027cb6:	2e079563          	bnez	a5,80027fa0 <stateen_SE0_test_8+0x52c>
    80027cba:	4529                	li	a0,10
    80027cbc:	5ed010ef          	jal	80029aa8 <putchar>
    80027cc0:	c419                	beqz	s0,80027cce <stateen_SE0_test_8+0x25a>
    80027cc2:	00029417          	auipc	s0,0x29
    80027cc6:	34f44403          	lbu	s0,847(s0) # 80051011 <excpt+0x1>
    80027cca:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_M);
    80027cce:	4511                	li	a0,4
    80027cd0:	99ed90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027cd4:	89ed90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027cd8:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027cdc:	ad8d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ce0:	08200593          	li	a1,130
    80027ce4:	00010617          	auipc	a2,0x10
    80027ce8:	46c60613          	addi	a2,a2,1132 # 80038150 <__func__.0+0xb130>
    80027cec:	00005517          	auipc	a0,0x5
    80027cf0:	62c50513          	addi	a0,a0,1580 # 8002d318 <__func__.0+0x2f8>
    80027cf4:	0c6030ef          	jal	8002adba <printf>
    80027cf8:	00029797          	auipc	a5,0x29
    80027cfc:	3197c783          	lbu	a5,793(a5) # 80051011 <excpt+0x1>
    80027d00:	00005597          	auipc	a1,0x5
    80027d04:	5f058593          	addi	a1,a1,1520 # 8002d2f0 <__func__.0+0x2d0>
    80027d08:	e789                	bnez	a5,80027d12 <stateen_SE0_test_8+0x29e>
    80027d0a:	00005597          	auipc	a1,0x5
    80027d0e:	5d658593          	addi	a1,a1,1494 # 8002d2e0 <__func__.0+0x2c0>
    80027d12:	00005517          	auipc	a0,0x5
    80027d16:	61e50513          	addi	a0,a0,1566 # 8002d330 <__func__.0+0x310>
    80027d1a:	0a0030ef          	jal	8002adba <printf>
    80027d1e:	00029797          	auipc	a5,0x29
    80027d22:	2f37c783          	lbu	a5,755(a5) # 80051011 <excpt+0x1>
    80027d26:	26079263          	bnez	a5,80027f8a <stateen_SE0_test_8+0x516>
    80027d2a:	4529                	li	a0,10
    80027d2c:	57d010ef          	jal	80029aa8 <putchar>
    80027d30:	c419                	beqz	s0,80027d3e <stateen_SE0_test_8+0x2ca>
    80027d32:	00029417          	auipc	s0,0x29
    80027d36:	2df44403          	lbu	s0,735(s0) # 80051011 <excpt+0x1>
    80027d3a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_VS);
    80027d3e:	4509                	li	a0,2
    80027d40:	92ed90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027d44:	82ed90ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027d48:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027d4c:	a68d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027d50:	08200593          	li	a1,130
    80027d54:	00010617          	auipc	a2,0x10
    80027d58:	10460613          	addi	a2,a2,260 # 80037e58 <__func__.0+0xae38>
    80027d5c:	00005517          	auipc	a0,0x5
    80027d60:	5bc50513          	addi	a0,a0,1468 # 8002d318 <__func__.0+0x2f8>
    80027d64:	056030ef          	jal	8002adba <printf>
    80027d68:	00029797          	auipc	a5,0x29
    80027d6c:	2a97c783          	lbu	a5,681(a5) # 80051011 <excpt+0x1>
    80027d70:	00005597          	auipc	a1,0x5
    80027d74:	58058593          	addi	a1,a1,1408 # 8002d2f0 <__func__.0+0x2d0>
    80027d78:	e789                	bnez	a5,80027d82 <stateen_SE0_test_8+0x30e>
    80027d7a:	00005597          	auipc	a1,0x5
    80027d7e:	56658593          	addi	a1,a1,1382 # 8002d2e0 <__func__.0+0x2c0>
    80027d82:	00005517          	auipc	a0,0x5
    80027d86:	5ae50513          	addi	a0,a0,1454 # 8002d330 <__func__.0+0x310>
    80027d8a:	030030ef          	jal	8002adba <printf>
    80027d8e:	00029797          	auipc	a5,0x29
    80027d92:	2837c783          	lbu	a5,643(a5) # 80051011 <excpt+0x1>
    80027d96:	1c079f63          	bnez	a5,80027f74 <stateen_SE0_test_8+0x500>
    80027d9a:	4529                	li	a0,10
    80027d9c:	50d010ef          	jal	80029aa8 <putchar>
    80027da0:	c419                	beqz	s0,80027dae <stateen_SE0_test_8+0x33a>
    80027da2:	00029417          	auipc	s0,0x29
    80027da6:	26f44403          	lbu	s0,623(s0) # 80051011 <excpt+0x1>
    80027daa:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_VS);
    80027dae:	4509                	li	a0,2
    80027db0:	8bed90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027db4:	fbfd80ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027db8:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027dbc:	9f8d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027dc0:	08200593          	li	a1,130
    80027dc4:	00010617          	auipc	a2,0x10
    80027dc8:	0e460613          	addi	a2,a2,228 # 80037ea8 <__func__.0+0xae88>
    80027dcc:	00005517          	auipc	a0,0x5
    80027dd0:	54c50513          	addi	a0,a0,1356 # 8002d318 <__func__.0+0x2f8>
    80027dd4:	7e7020ef          	jal	8002adba <printf>
    80027dd8:	00029797          	auipc	a5,0x29
    80027ddc:	2397c783          	lbu	a5,569(a5) # 80051011 <excpt+0x1>
    80027de0:	00005597          	auipc	a1,0x5
    80027de4:	51058593          	addi	a1,a1,1296 # 8002d2f0 <__func__.0+0x2d0>
    80027de8:	e789                	bnez	a5,80027df2 <stateen_SE0_test_8+0x37e>
    80027dea:	00005597          	auipc	a1,0x5
    80027dee:	4f658593          	addi	a1,a1,1270 # 8002d2e0 <__func__.0+0x2c0>
    80027df2:	00005517          	auipc	a0,0x5
    80027df6:	53e50513          	addi	a0,a0,1342 # 8002d330 <__func__.0+0x310>
    80027dfa:	7c1020ef          	jal	8002adba <printf>
    80027dfe:	00029797          	auipc	a5,0x29
    80027e02:	2137c783          	lbu	a5,531(a5) # 80051011 <excpt+0x1>
    80027e06:	14079c63          	bnez	a5,80027f5e <stateen_SE0_test_8+0x4ea>
    80027e0a:	4529                	li	a0,10
    80027e0c:	49d010ef          	jal	80029aa8 <putchar>
    80027e10:	c419                	beqz	s0,80027e1e <stateen_SE0_test_8+0x3aa>
    80027e12:	00029417          	auipc	s0,0x29
    80027e16:	1ff44403          	lbu	s0,511(s0) # 80051011 <excpt+0x1>
    80027e1a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 


    goto_priv(PRIV_HS);
    80027e1e:	450d                	li	a0,3
    80027e20:	84ed90ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027e24:	f4fd80ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_HSTATEEN0);
    80027e28:	60c027f3          	csrr	a5,hstateen0

    excpt_info();
    80027e2c:	988d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027e30:	08200593          	li	a1,130
    80027e34:	00010617          	auipc	a2,0x10
    80027e38:	36c60613          	addi	a2,a2,876 # 800381a0 <__func__.0+0xb180>
    80027e3c:	00005517          	auipc	a0,0x5
    80027e40:	4dc50513          	addi	a0,a0,1244 # 8002d318 <__func__.0+0x2f8>
    80027e44:	777020ef          	jal	8002adba <printf>
    80027e48:	00029797          	auipc	a5,0x29
    80027e4c:	1c97c783          	lbu	a5,457(a5) # 80051011 <excpt+0x1>
    80027e50:	00005597          	auipc	a1,0x5
    80027e54:	4a058593          	addi	a1,a1,1184 # 8002d2f0 <__func__.0+0x2d0>
    80027e58:	e789                	bnez	a5,80027e62 <stateen_SE0_test_8+0x3ee>
    80027e5a:	00005597          	auipc	a1,0x5
    80027e5e:	48658593          	addi	a1,a1,1158 # 8002d2e0 <__func__.0+0x2c0>
    80027e62:	00005517          	auipc	a0,0x5
    80027e66:	4ce50513          	addi	a0,a0,1230 # 8002d330 <__func__.0+0x310>
    80027e6a:	751020ef          	jal	8002adba <printf>
    80027e6e:	00029797          	auipc	a5,0x29
    80027e72:	1a37c783          	lbu	a5,419(a5) # 80051011 <excpt+0x1>
    80027e76:	0c079963          	bnez	a5,80027f48 <stateen_SE0_test_8+0x4d4>
    80027e7a:	4529                	li	a0,10
    80027e7c:	42d010ef          	jal	80029aa8 <putchar>
    80027e80:	c419                	beqz	s0,80027e8e <stateen_SE0_test_8+0x41a>
    80027e82:	00029417          	auipc	s0,0x29
    80027e86:	18f44403          	lbu	s0,399(s0) # 80051011 <excpt+0x1>
    80027e8a:	00144413          	xori	s0,s0,1
        excpt.triggered == false
    ); 

    goto_priv(PRIV_HS);
    80027e8e:	450d                	li	a0,3
    80027e90:	fdfd80ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80027e94:	edfd80ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_SSTATEEN0);
    80027e98:	10c027f3          	csrr	a5,sstateen0

    excpt_info();
    80027e9c:	918d90ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027ea0:	08200593          	li	a1,130
    80027ea4:	00010617          	auipc	a2,0x10
    80027ea8:	34c60613          	addi	a2,a2,844 # 800381f0 <__func__.0+0xb1d0>
    80027eac:	00005517          	auipc	a0,0x5
    80027eb0:	46c50513          	addi	a0,a0,1132 # 8002d318 <__func__.0+0x2f8>
    80027eb4:	707020ef          	jal	8002adba <printf>
    80027eb8:	00029797          	auipc	a5,0x29
    80027ebc:	1597c783          	lbu	a5,345(a5) # 80051011 <excpt+0x1>
    80027ec0:	00005597          	auipc	a1,0x5
    80027ec4:	43058593          	addi	a1,a1,1072 # 8002d2f0 <__func__.0+0x2d0>
    80027ec8:	e789                	bnez	a5,80027ed2 <stateen_SE0_test_8+0x45e>
    80027eca:	00005597          	auipc	a1,0x5
    80027ece:	41658593          	addi	a1,a1,1046 # 8002d2e0 <__func__.0+0x2c0>
    80027ed2:	00005517          	auipc	a0,0x5
    80027ed6:	45e50513          	addi	a0,a0,1118 # 8002d330 <__func__.0+0x310>
    80027eda:	6e1020ef          	jal	8002adba <printf>
    80027ede:	00029797          	auipc	a5,0x29
    80027ee2:	1337c783          	lbu	a5,307(a5) # 80051011 <excpt+0x1>
    80027ee6:	e7b1                	bnez	a5,80027f32 <stateen_SE0_test_8+0x4be>
    80027ee8:	4529                	li	a0,10
    80027eea:	3bf010ef          	jal	80029aa8 <putchar>
    80027eee:	c411                	beqz	s0,80027efa <stateen_SE0_test_8+0x486>
    80027ef0:	00029797          	auipc	a5,0x29
    80027ef4:	1217c783          	lbu	a5,289(a5) # 80051011 <excpt+0x1>
    80027ef8:	c79d                	beqz	a5,80027f26 <stateen_SE0_test_8+0x4b2>
    80027efa:	4401                	li	s0,0
        excpt.triggered == false
    ); 


    TEST_END();
    80027efc:	00005597          	auipc	a1,0x5
    80027f00:	3f458593          	addi	a1,a1,1012 # 8002d2f0 <__func__.0+0x2d0>
    80027f04:	00005517          	auipc	a0,0x5
    80027f08:	49450513          	addi	a0,a0,1172 # 8002d398 <__func__.0+0x378>
    80027f0c:	6af020ef          	jal	8002adba <printf>
    80027f10:	4511                	li	a0,4
    80027f12:	f5dd80ef          	jal	80000e6e <goto_priv>
    80027f16:	875d90ef          	jal	8000178a <reset_state>

    80027f1a:	60e2                	ld	ra,24(sp)
    80027f1c:	8522                	mv	a0,s0
    80027f1e:	6442                	ld	s0,16(sp)
    80027f20:	64a2                	ld	s1,8(sp)
    80027f22:	6105                	addi	sp,sp,32
    80027f24:	8082                	ret
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f26:	4405                	li	s0,1
    TEST_END();
    80027f28:	00005597          	auipc	a1,0x5
    80027f2c:	3b858593          	addi	a1,a1,952 # 8002d2e0 <__func__.0+0x2c0>
    80027f30:	bfd1                	j	80027f04 <stateen_SE0_test_8+0x490>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f32:	00005517          	auipc	a0,0x5
    80027f36:	40650513          	addi	a0,a0,1030 # 8002d338 <__func__.0+0x318>
    80027f3a:	681020ef          	jal	8002adba <printf>
    80027f3e:	02900513          	li	a0,41
    80027f42:	367010ef          	jal	80029aa8 <putchar>
    80027f46:	b74d                	j	80027ee8 <stateen_SE0_test_8+0x474>
    TEST_ASSERT("hs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f48:	00005517          	auipc	a0,0x5
    80027f4c:	3f050513          	addi	a0,a0,1008 # 8002d338 <__func__.0+0x318>
    80027f50:	66b020ef          	jal	8002adba <printf>
    80027f54:	02900513          	li	a0,41
    80027f58:	351010ef          	jal	80029aa8 <putchar>
    80027f5c:	bf39                	j	80027e7a <stateen_SE0_test_8+0x406>
    TEST_ASSERT("vs mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f5e:	00005517          	auipc	a0,0x5
    80027f62:	3da50513          	addi	a0,a0,986 # 8002d338 <__func__.0+0x318>
    80027f66:	655020ef          	jal	8002adba <printf>
    80027f6a:	02900513          	li	a0,41
    80027f6e:	33b010ef          	jal	80029aa8 <putchar>
    80027f72:	bd61                	j	80027e0a <stateen_SE0_test_8+0x396>
    TEST_ASSERT("vs mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f74:	00005517          	auipc	a0,0x5
    80027f78:	3c450513          	addi	a0,a0,964 # 8002d338 <__func__.0+0x318>
    80027f7c:	63f020ef          	jal	8002adba <printf>
    80027f80:	02900513          	li	a0,41
    80027f84:	325010ef          	jal	80029aa8 <putchar>
    80027f88:	bd09                	j	80027d9a <stateen_SE0_test_8+0x326>
    TEST_ASSERT("m mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027f8a:	00005517          	auipc	a0,0x5
    80027f8e:	3ae50513          	addi	a0,a0,942 # 8002d338 <__func__.0+0x318>
    80027f92:	629020ef          	jal	8002adba <printf>
    80027f96:	02900513          	li	a0,41
    80027f9a:	30f010ef          	jal	80029aa8 <putchar>
    80027f9e:	b371                	j	80027d2a <stateen_SE0_test_8+0x2b6>
    TEST_ASSERT("m mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fa0:	00005517          	auipc	a0,0x5
    80027fa4:	39850513          	addi	a0,a0,920 # 8002d338 <__func__.0+0x318>
    80027fa8:	613020ef          	jal	8002adba <printf>
    80027fac:	02900513          	li	a0,41
    80027fb0:	2f9010ef          	jal	80029aa8 <putchar>
    80027fb4:	b319                	j	80027cba <stateen_SE0_test_8+0x246>
    TEST_ASSERT("hu mode accesss sstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fb6:	00005517          	auipc	a0,0x5
    80027fba:	38250513          	addi	a0,a0,898 # 8002d338 <__func__.0+0x318>
    80027fbe:	5fd020ef          	jal	8002adba <printf>
    80027fc2:	02900513          	li	a0,41
    80027fc6:	2e3010ef          	jal	80029aa8 <putchar>
    80027fca:	b141                	j	80027c4a <stateen_SE0_test_8+0x1d6>
    TEST_ASSERT("hu mode access hstateen0 register successful when mstateen.SE0=1 hstateen.SE0=1",
    80027fcc:	00005517          	auipc	a0,0x5
    80027fd0:	36c50513          	addi	a0,a0,876 # 8002d338 <__func__.0+0x318>
    80027fd4:	5e7020ef          	jal	8002adba <printf>
    80027fd8:	02900513          	li	a0,41
    80027fdc:	2cd010ef          	jal	80029aa8 <putchar>
    80027fe0:	beed                	j	80027bda <stateen_SE0_test_8+0x166>
    TEST_ASSERT("hs mode accesss sstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027fe2:	00005517          	auipc	a0,0x5
    80027fe6:	35650513          	addi	a0,a0,854 # 8002d338 <__func__.0+0x318>
    80027fea:	5d1020ef          	jal	8002adba <printf>
    80027fee:	02900513          	li	a0,41
    80027ff2:	2b7010ef          	jal	80029aa8 <putchar>
    80027ff6:	be8d                	j	80027b68 <stateen_SE0_test_8+0xf4>
    TEST_ASSERT("hs mode access hstateen0 register successful when  mstateen.SE0=1 hstateen.SE0=1",
    80027ff8:	00005517          	auipc	a0,0x5
    80027ffc:	34050513          	addi	a0,a0,832 # 8002d338 <__func__.0+0x318>
    80028000:	5bb020ef          	jal	8002adba <printf>
    80028004:	02900513          	li	a0,41
    80028008:	2a1010ef          	jal	80029aa8 <putchar>
    8002800c:	bcf5                	j	80027b08 <stateen_SE0_test_8+0x94>

000000008002800e <vec_vle_vse_func>:
#include <rvh_test.h>

bool vec_vle_vse_func(){
    8002800e:	7179                	addi	sp,sp,-48
    TEST_START();
    80028010:	00005597          	auipc	a1,0x5
    80028014:	e8858593          	addi	a1,a1,-376 # 8002ce98 <__func__.24>
    80028018:	00005517          	auipc	a0,0x5
    8002801c:	2e850513          	addi	a0,a0,744 # 8002d300 <__func__.0+0x2e0>
bool vec_vle_vse_func(){
    80028020:	f406                	sd	ra,40(sp)
    80028022:	f022                	sd	s0,32(sp)
    80028024:	ec26                	sd	s1,24(sp)
    80028026:	e84a                	sd	s2,16(sp)
    TEST_START();
    80028028:	593020ef          	jal	8002adba <printf>
    8002802c:	4529                	li	a0,10
    8002802e:	27b010ef          	jal	80029aa8 <putchar>

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=1
    80028032:	20000793          	li	a5,512
    80028036:	3007a073          	csrs	mstatus,a5

    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    8002803a:	00010717          	auipc	a4,0x10
    8002803e:	23673703          	ld	a4,566(a4) # 80038270 <__func__.0+0xb250>
    uint8_t dest8[8] = {0}; 
    80028042:	e402                	sd	zero,8(sp)
            : "t0", "memory" /* Clobbered registers */ \
        ); \
    }

// 定义具体的加载和存储指令函数（固定使用 v6 寄存器,其它v指令同固定）
LOAD_VECTOR_TO_REGISTER(vle8_to_v6, "vle8.v", uint8_t, 8);
    80028044:	4421                	li	s0,8
    uint8_t src8[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 
    80028046:	e03a                	sd	a4,0(sp)
    80028048:	04100493          	li	s1,65
    8002804c:	809472d7          	vsetvl	t0,s0,s1
    80028050:	02010307          	vle8.v	v6,(sp)

    int vl = 8;  // 向量长度

    // 调用向量加载和存储函数
    vle8_to_v6(src8, vl);
    excpt_info();
    80028054:	f61d80ef          	jal	80000fb4 <excpt_info>
LOAD_VECTOR_TO_REGISTER(vle16_to_v6, "vle16.v", uint16_t, 16);
LOAD_VECTOR_TO_REGISTER(vle32_to_v6, "vle32.v", uint32_t, 32);
LOAD_VECTOR_TO_REGISTER(vle64_to_v6, "vle64.v", uint64_t, 64);

STORE_VECTOR_FROM_REGISTER(vse8_from_v6, "vse8.v", uint8_t, 8);
    80028058:	003c                	addi	a5,sp,8
    8002805a:	809472d7          	vsetvl	t0,s0,s1
    8002805e:	02078327          	vse8.v	v6,(a5)
    vse8_from_v6(dest8, vl);

    
    // 打印结果以验证
    printf("After vle8_v:\n");
    80028062:	00010517          	auipc	a0,0x10
    80028066:	1e650513          	addi	a0,a0,486 # 80038248 <__func__.0+0xb228>
    8002806a:	18d020ef          	jal	8002a9f6 <puts>
    for (int i = 0; i < 8; i++) {
    8002806e:	0024                	addi	s1,sp,8
    80028070:	4401                	li	s0,0
    80028072:	4921                	li	s2,8
        printf("dest8[%d] = %u  ", i, dest8[i]);
    80028074:	0004c603          	lbu	a2,0(s1)
    80028078:	85a2                	mv	a1,s0
    8002807a:	00010517          	auipc	a0,0x10
    8002807e:	1de50513          	addi	a0,a0,478 # 80038258 <__func__.0+0xb238>
    for (int i = 0; i < 8; i++) {
    80028082:	2405                	addiw	s0,s0,1
        printf("dest8[%d] = %u  ", i, dest8[i]);
    80028084:	537020ef          	jal	8002adba <printf>
    for (int i = 0; i < 8; i++) {
    80028088:	0485                	addi	s1,s1,1
    8002808a:	ff2415e3          	bne	s0,s2,80028074 <vec_vle_vse_func+0x66>
    }
    printf("\n");
    8002808e:	4529                	li	a0,10
    80028090:	219010ef          	jal	80029aa8 <putchar>


    TEST_END();
    80028094:	00005597          	auipc	a1,0x5
    80028098:	24c58593          	addi	a1,a1,588 # 8002d2e0 <__func__.0+0x2c0>
    8002809c:	00005517          	auipc	a0,0x5
    800280a0:	2fc50513          	addi	a0,a0,764 # 8002d398 <__func__.0+0x378>
    800280a4:	517020ef          	jal	8002adba <printf>
    800280a8:	4511                	li	a0,4
    800280aa:	dc5d80ef          	jal	80000e6e <goto_priv>
    800280ae:	edcd90ef          	jal	8000178a <reset_state>
}
    800280b2:	70a2                	ld	ra,40(sp)
    800280b4:	7402                	ld	s0,32(sp)
    800280b6:	64e2                	ld	s1,24(sp)
    800280b8:	6942                	ld	s2,16(sp)
    800280ba:	4505                	li	a0,1
    800280bc:	6145                	addi	sp,sp,48
    800280be:	8082                	ret

00000000800280c0 <vec_test_1>:



bool vec_test_1(){
    800280c0:	1101                	addi	sp,sp,-32
    
    TEST_START();
    800280c2:	00005597          	auipc	a1,0x5
    800280c6:	dee58593          	addi	a1,a1,-530 # 8002ceb0 <__func__.23>
    800280ca:	00005517          	auipc	a0,0x5
    800280ce:	23650513          	addi	a0,a0,566 # 8002d300 <__func__.0+0x2e0>
bool vec_test_1(){
    800280d2:	ec06                	sd	ra,24(sp)
    800280d4:	e822                	sd	s0,16(sp)
    800280d6:	e426                	sd	s1,8(sp)
    TEST_START();
    800280d8:	4e3020ef          	jal	8002adba <printf>
    800280dc:	4529                	li	a0,10
    800280de:	1cb010ef          	jal	80029aa8 <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    800280e2:	20000713          	li	a4,512
    800280e6:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800280ea:	40000793          	li	a5,1024
    800280ee:	3007b073          	csrc	mstatus,a5

static inline void set_vcpop_conditions(int vl, int sew, int lmull, int v0_init, int v2_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    800280f2:	46a1                	li	a3,8
    800280f4:	4645                	li	a2,17
    800280f6:	80c6f2d7          	vsetvl	t0,a3,a2
    800280fa:	5e00b057          	vmv.v.i	v0,1
    800280fe:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028102:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028106:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    8002810a:	c69d80ef          	jal	80000d72 <test_setup_except_function>
    // 执行 vcpop.m 指令并返回结果
    uint32_t result = execute_vcpop_v2();
    8002810e:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    80028112:	ea3d80ef          	jal	80000fb4 <excpt_info>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    80028116:	08200593          	li	a1,130
    8002811a:	00010617          	auipc	a2,0x10
    8002811e:	16660613          	addi	a2,a2,358 # 80038280 <__func__.0+0xb260>
    80028122:	00005517          	auipc	a0,0x5
    80028126:	1f650513          	addi	a0,a0,502 # 8002d318 <__func__.0+0x2f8>
    8002812a:	491020ef          	jal	8002adba <printf>
    8002812e:	00029797          	auipc	a5,0x29
    80028132:	ee37c783          	lbu	a5,-285(a5) # 80051011 <excpt+0x1>
    80028136:	00029497          	auipc	s1,0x29
    8002813a:	eda48493          	addi	s1,s1,-294 # 80051010 <excpt>
    8002813e:	00005597          	auipc	a1,0x5
    80028142:	1b258593          	addi	a1,a1,434 # 8002d2f0 <__func__.0+0x2d0>
    80028146:	cf89                	beqz	a5,80028160 <vec_test_1+0xa0>
    80028148:	6498                	ld	a4,8(s1)
    8002814a:	4789                	li	a5,2
    8002814c:	00005597          	auipc	a1,0x5
    80028150:	19458593          	addi	a1,a1,404 # 8002d2e0 <__func__.0+0x2c0>
    80028154:	00f70663          	beq	a4,a5,80028160 <vec_test_1+0xa0>
    80028158:	00005597          	auipc	a1,0x5
    8002815c:	19858593          	addi	a1,a1,408 # 8002d2f0 <__func__.0+0x2d0>
    80028160:	00005517          	auipc	a0,0x5
    80028164:	1d050513          	addi	a0,a0,464 # 8002d330 <__func__.0+0x310>
    80028168:	453020ef          	jal	8002adba <printf>
    8002816c:	00029797          	auipc	a5,0x29
    80028170:	ea57c783          	lbu	a5,-347(a5) # 80051011 <excpt+0x1>
    80028174:	c789                	beqz	a5,8002817e <vec_test_1+0xbe>
    80028176:	6498                	ld	a4,8(s1)
    80028178:	4789                	li	a5,2
    8002817a:	00f70c63          	beq	a4,a5,80028192 <vec_test_1+0xd2>
    8002817e:	00005517          	auipc	a0,0x5
    80028182:	1ba50513          	addi	a0,a0,442 # 8002d338 <__func__.0+0x318>
    80028186:	435020ef          	jal	8002adba <printf>
    8002818a:	02900513          	li	a0,41
    8002818e:	11b010ef          	jal	80029aa8 <putchar>
    80028192:	4529                	li	a0,10
    80028194:	115010ef          	jal	80029aa8 <putchar>
    80028198:	00029417          	auipc	s0,0x29
    8002819c:	e7944403          	lbu	s0,-391(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800281a0:	00005597          	auipc	a1,0x5
    800281a4:	15058593          	addi	a1,a1,336 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    800281a8:	cc11                	beqz	s0,800281c4 <vec_test_1+0x104>
    800281aa:	6498                	ld	a4,8(s1)
    800281ac:	4789                	li	a5,2
    TEST_END();
    800281ae:	00005597          	auipc	a1,0x5
    800281b2:	13258593          	addi	a1,a1,306 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0",
    800281b6:	00f70763          	beq	a4,a5,800281c4 <vec_test_1+0x104>
    800281ba:	4401                	li	s0,0
    TEST_END();
    800281bc:	00005597          	auipc	a1,0x5
    800281c0:	13458593          	addi	a1,a1,308 # 8002d2f0 <__func__.0+0x2d0>
    800281c4:	00005517          	auipc	a0,0x5
    800281c8:	1d450513          	addi	a0,a0,468 # 8002d398 <__func__.0+0x378>
    800281cc:	3ef020ef          	jal	8002adba <printf>
    800281d0:	4511                	li	a0,4
    800281d2:	c9dd80ef          	jal	80000e6e <goto_priv>
    800281d6:	db4d90ef          	jal	8000178a <reset_state>
}
    800281da:	60e2                	ld	ra,24(sp)
    800281dc:	8522                	mv	a0,s0
    800281de:	6442                	ld	s0,16(sp)
    800281e0:	64a2                	ld	s1,8(sp)
    800281e2:	6105                	addi	sp,sp,32
    800281e4:	8082                	ret

00000000800281e6 <vec_test_2>:

bool vec_test_2(){
    800281e6:	1101                	addi	sp,sp,-32

    TEST_START();
    800281e8:	00005597          	auipc	a1,0x5
    800281ec:	cd858593          	addi	a1,a1,-808 # 8002cec0 <__func__.22>
    800281f0:	00005517          	auipc	a0,0x5
    800281f4:	11050513          	addi	a0,a0,272 # 8002d300 <__func__.0+0x2e0>
bool vec_test_2(){
    800281f8:	ec06                	sd	ra,24(sp)
    800281fa:	e822                	sd	s0,16(sp)
    800281fc:	e426                	sd	s1,8(sp)
    TEST_START();
    800281fe:	3bd020ef          	jal	8002adba <printf>
    80028202:	4529                	li	a0,10
    80028204:	0a5010ef          	jal	80029aa8 <putchar>
    // 当 mstatus.VS 被设置为 Off 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028208:	20000793          	li	a5,512
    8002820c:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028210:	40000793          	li	a5,1024
    80028214:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    80028218:	b5bd80ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VSTART);
    8002821c:	008027f3          	csrr	a5,vstart
    excpt_info();
    80028220:	d95d80ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    80028224:	08200593          	li	a1,130
    80028228:	00010617          	auipc	a2,0x10
    8002822c:	0a860613          	addi	a2,a2,168 # 800382d0 <__func__.0+0xb2b0>
    80028230:	00005517          	auipc	a0,0x5
    80028234:	0e850513          	addi	a0,a0,232 # 8002d318 <__func__.0+0x2f8>
    80028238:	383020ef          	jal	8002adba <printf>
    8002823c:	00029797          	auipc	a5,0x29
    80028240:	dd57c783          	lbu	a5,-555(a5) # 80051011 <excpt+0x1>
    80028244:	00029497          	auipc	s1,0x29
    80028248:	dcc48493          	addi	s1,s1,-564 # 80051010 <excpt>
    8002824c:	00005597          	auipc	a1,0x5
    80028250:	0a458593          	addi	a1,a1,164 # 8002d2f0 <__func__.0+0x2d0>
    80028254:	cf89                	beqz	a5,8002826e <vec_test_2+0x88>
    80028256:	6498                	ld	a4,8(s1)
    80028258:	4789                	li	a5,2
    8002825a:	00005597          	auipc	a1,0x5
    8002825e:	08658593          	addi	a1,a1,134 # 8002d2e0 <__func__.0+0x2c0>
    80028262:	00f70663          	beq	a4,a5,8002826e <vec_test_2+0x88>
    80028266:	00005597          	auipc	a1,0x5
    8002826a:	08a58593          	addi	a1,a1,138 # 8002d2f0 <__func__.0+0x2d0>
    8002826e:	00005517          	auipc	a0,0x5
    80028272:	0c250513          	addi	a0,a0,194 # 8002d330 <__func__.0+0x310>
    80028276:	345020ef          	jal	8002adba <printf>
    8002827a:	00029797          	auipc	a5,0x29
    8002827e:	d977c783          	lbu	a5,-617(a5) # 80051011 <excpt+0x1>
    80028282:	c789                	beqz	a5,8002828c <vec_test_2+0xa6>
    80028284:	6498                	ld	a4,8(s1)
    80028286:	4789                	li	a5,2
    80028288:	00f70c63          	beq	a4,a5,800282a0 <vec_test_2+0xba>
    8002828c:	00005517          	auipc	a0,0x5
    80028290:	0ac50513          	addi	a0,a0,172 # 8002d338 <__func__.0+0x318>
    80028294:	327020ef          	jal	8002adba <printf>
    80028298:	02900513          	li	a0,41
    8002829c:	00d010ef          	jal	80029aa8 <putchar>
    800282a0:	4529                	li	a0,10
    800282a2:	007010ef          	jal	80029aa8 <putchar>
    800282a6:	00029417          	auipc	s0,0x29
    800282aa:	d6b44403          	lbu	s0,-661(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800282ae:	00005597          	auipc	a1,0x5
    800282b2:	04258593          	addi	a1,a1,66 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    800282b6:	cc11                	beqz	s0,800282d2 <vec_test_2+0xec>
    800282b8:	6498                	ld	a4,8(s1)
    800282ba:	4789                	li	a5,2
    TEST_END();
    800282bc:	00005597          	auipc	a1,0x5
    800282c0:	02458593          	addi	a1,a1,36 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0",
    800282c4:	00f70763          	beq	a4,a5,800282d2 <vec_test_2+0xec>
    800282c8:	4401                	li	s0,0
    TEST_END();
    800282ca:	00005597          	auipc	a1,0x5
    800282ce:	02658593          	addi	a1,a1,38 # 8002d2f0 <__func__.0+0x2d0>
    800282d2:	00005517          	auipc	a0,0x5
    800282d6:	0c650513          	addi	a0,a0,198 # 8002d398 <__func__.0+0x378>
    800282da:	2e1020ef          	jal	8002adba <printf>
    800282de:	4511                	li	a0,4
    800282e0:	b8fd80ef          	jal	80000e6e <goto_priv>
    800282e4:	ca6d90ef          	jal	8000178a <reset_state>
}
    800282e8:	60e2                	ld	ra,24(sp)
    800282ea:	8522                	mv	a0,s0
    800282ec:	6442                	ld	s0,16(sp)
    800282ee:	64a2                	ld	s1,8(sp)
    800282f0:	6105                	addi	sp,sp,32
    800282f2:	8082                	ret

00000000800282f4 <vec_test_3>:


bool vec_test_3(){             
    800282f4:	1101                	addi	sp,sp,-32

    TEST_START();
    800282f6:	00005597          	auipc	a1,0x5
    800282fa:	bda58593          	addi	a1,a1,-1062 # 8002ced0 <__func__.21>
    800282fe:	00005517          	auipc	a0,0x5
    80028302:	00250513          	addi	a0,a0,2 # 8002d300 <__func__.0+0x2e0>
bool vec_test_3(){             
    80028306:	ec06                	sd	ra,24(sp)
    80028308:	e822                	sd	s0,16(sp)
    8002830a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002830c:	2af020ef          	jal	8002adba <printf>
    80028310:	4529                	li	a0,10
    80028312:	796010ef          	jal	80029aa8 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028316:	20000713          	li	a4,512
    8002831a:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002831e:	40000793          	li	a5,1024
    80028322:	3007a073          	csrs	mstatus,a5
    asm volatile (
    80028326:	4689                	li	a3,2
    80028328:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    8002832c:	5e00b057          	vmv.v.i	v0,1
    80028330:	5e003257          	vmv.v.i	v4,0
    80028334:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1

    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    80028338:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    8002833c:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028340:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028344:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028348:	4509                	li	a0,2
    8002834a:	b25d80ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002834e:	a25d80ef          	jal	80000d72 <test_setup_except_function>
    asm volatile (
    80028352:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    80028356:	c5fd80ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    8002835a:	08200593          	li	a1,130
    8002835e:	00010617          	auipc	a2,0x10
    80028362:	fba60613          	addi	a2,a2,-70 # 80038318 <__func__.0+0xb2f8>
    80028366:	00005517          	auipc	a0,0x5
    8002836a:	fb250513          	addi	a0,a0,-78 # 8002d318 <__func__.0+0x2f8>
    8002836e:	24d020ef          	jal	8002adba <printf>
    80028372:	00029797          	auipc	a5,0x29
    80028376:	c9f7c783          	lbu	a5,-865(a5) # 80051011 <excpt+0x1>
    8002837a:	00029497          	auipc	s1,0x29
    8002837e:	c9648493          	addi	s1,s1,-874 # 80051010 <excpt>
    80028382:	00005597          	auipc	a1,0x5
    80028386:	f6e58593          	addi	a1,a1,-146 # 8002d2f0 <__func__.0+0x2d0>
    8002838a:	cf89                	beqz	a5,800283a4 <vec_test_3+0xb0>
    8002838c:	6498                	ld	a4,8(s1)
    8002838e:	4789                	li	a5,2
    80028390:	00005597          	auipc	a1,0x5
    80028394:	f5058593          	addi	a1,a1,-176 # 8002d2e0 <__func__.0+0x2c0>
    80028398:	00f70663          	beq	a4,a5,800283a4 <vec_test_3+0xb0>
    8002839c:	00005597          	auipc	a1,0x5
    800283a0:	f5458593          	addi	a1,a1,-172 # 8002d2f0 <__func__.0+0x2d0>
    800283a4:	00005517          	auipc	a0,0x5
    800283a8:	f8c50513          	addi	a0,a0,-116 # 8002d330 <__func__.0+0x310>
    800283ac:	20f020ef          	jal	8002adba <printf>
    800283b0:	00029797          	auipc	a5,0x29
    800283b4:	c617c783          	lbu	a5,-927(a5) # 80051011 <excpt+0x1>
    800283b8:	c789                	beqz	a5,800283c2 <vec_test_3+0xce>
    800283ba:	6498                	ld	a4,8(s1)
    800283bc:	4789                	li	a5,2
    800283be:	00f70c63          	beq	a4,a5,800283d6 <vec_test_3+0xe2>
    800283c2:	00005517          	auipc	a0,0x5
    800283c6:	f7650513          	addi	a0,a0,-138 # 8002d338 <__func__.0+0x318>
    800283ca:	1f1020ef          	jal	8002adba <printf>
    800283ce:	02900513          	li	a0,41
    800283d2:	6d6010ef          	jal	80029aa8 <putchar>
    800283d6:	4529                	li	a0,10
    800283d8:	6d0010ef          	jal	80029aa8 <putchar>
    800283dc:	00029417          	auipc	s0,0x29
    800283e0:	c3544403          	lbu	s0,-971(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800283e4:	00005597          	auipc	a1,0x5
    800283e8:	f0c58593          	addi	a1,a1,-244 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    800283ec:	cc11                	beqz	s0,80028408 <vec_test_3+0x114>
    800283ee:	6498                	ld	a4,8(s1)
    800283f0:	4789                	li	a5,2
    TEST_END();
    800283f2:	00005597          	auipc	a1,0x5
    800283f6:	eee58593          	addi	a1,a1,-274 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs!=0 vsstatus.vs=0 and v=1",
    800283fa:	00f70763          	beq	a4,a5,80028408 <vec_test_3+0x114>
    800283fe:	4401                	li	s0,0
    TEST_END();
    80028400:	00005597          	auipc	a1,0x5
    80028404:	ef058593          	addi	a1,a1,-272 # 8002d2f0 <__func__.0+0x2d0>
    80028408:	00005517          	auipc	a0,0x5
    8002840c:	f9050513          	addi	a0,a0,-112 # 8002d398 <__func__.0+0x378>
    80028410:	1ab020ef          	jal	8002adba <printf>
    80028414:	4511                	li	a0,4
    80028416:	a59d80ef          	jal	80000e6e <goto_priv>
    8002841a:	b70d90ef          	jal	8000178a <reset_state>
}
    8002841e:	60e2                	ld	ra,24(sp)
    80028420:	8522                	mv	a0,s0
    80028422:	6442                	ld	s0,16(sp)
    80028424:	64a2                	ld	s1,8(sp)
    80028426:	6105                	addi	sp,sp,32
    80028428:	8082                	ret

000000008002842a <vec_test_4>:


bool vec_test_4(){
    8002842a:	1101                	addi	sp,sp,-32

    TEST_START();
    8002842c:	00005597          	auipc	a1,0x5
    80028430:	ab458593          	addi	a1,a1,-1356 # 8002cee0 <__func__.20>
    80028434:	00005517          	auipc	a0,0x5
    80028438:	ecc50513          	addi	a0,a0,-308 # 8002d300 <__func__.0+0x2e0>
bool vec_test_4(){
    8002843c:	ec06                	sd	ra,24(sp)
    8002843e:	e822                	sd	s0,16(sp)
    80028440:	e426                	sd	s1,8(sp)
    TEST_START();
    80028442:	179020ef          	jal	8002adba <printf>
    80028446:	4529                	li	a0,10
    80028448:	660010ef          	jal	80029aa8 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS!=OFF 时，尝试访问向量 CSR 

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=!0
    8002844c:	20000713          	li	a4,512
    80028450:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028454:	40000793          	li	a5,1024
    80028458:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    8002845c:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    80028460:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028464:	4509                	li	a0,2
    80028466:	a09d80ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    8002846a:	909d80ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VTYPE);
    8002846e:	c21027f3          	csrr	a5,vtype
    excpt_info();
    80028472:	b43d80ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    80028476:	08200593          	li	a1,130
    8002847a:	00010617          	auipc	a2,0x10
    8002847e:	efe60613          	addi	a2,a2,-258 # 80038378 <__func__.0+0xb358>
    80028482:	00005517          	auipc	a0,0x5
    80028486:	e9650513          	addi	a0,a0,-362 # 8002d318 <__func__.0+0x2f8>
    8002848a:	131020ef          	jal	8002adba <printf>
    8002848e:	00029797          	auipc	a5,0x29
    80028492:	b837c783          	lbu	a5,-1149(a5) # 80051011 <excpt+0x1>
    80028496:	00029497          	auipc	s1,0x29
    8002849a:	b7a48493          	addi	s1,s1,-1158 # 80051010 <excpt>
    8002849e:	00005597          	auipc	a1,0x5
    800284a2:	e5258593          	addi	a1,a1,-430 # 8002d2f0 <__func__.0+0x2d0>
    800284a6:	cf89                	beqz	a5,800284c0 <vec_test_4+0x96>
    800284a8:	6498                	ld	a4,8(s1)
    800284aa:	4789                	li	a5,2
    800284ac:	00005597          	auipc	a1,0x5
    800284b0:	e3458593          	addi	a1,a1,-460 # 8002d2e0 <__func__.0+0x2c0>
    800284b4:	00f70663          	beq	a4,a5,800284c0 <vec_test_4+0x96>
    800284b8:	00005597          	auipc	a1,0x5
    800284bc:	e3858593          	addi	a1,a1,-456 # 8002d2f0 <__func__.0+0x2d0>
    800284c0:	00005517          	auipc	a0,0x5
    800284c4:	e7050513          	addi	a0,a0,-400 # 8002d330 <__func__.0+0x310>
    800284c8:	0f3020ef          	jal	8002adba <printf>
    800284cc:	00029797          	auipc	a5,0x29
    800284d0:	b457c783          	lbu	a5,-1211(a5) # 80051011 <excpt+0x1>
    800284d4:	c789                	beqz	a5,800284de <vec_test_4+0xb4>
    800284d6:	6498                	ld	a4,8(s1)
    800284d8:	4789                	li	a5,2
    800284da:	00f70c63          	beq	a4,a5,800284f2 <vec_test_4+0xc8>
    800284de:	00005517          	auipc	a0,0x5
    800284e2:	e5a50513          	addi	a0,a0,-422 # 8002d338 <__func__.0+0x318>
    800284e6:	0d5020ef          	jal	8002adba <printf>
    800284ea:	02900513          	li	a0,41
    800284ee:	5ba010ef          	jal	80029aa8 <putchar>
    800284f2:	4529                	li	a0,10
    800284f4:	5b4010ef          	jal	80029aa8 <putchar>
    800284f8:	00029417          	auipc	s0,0x29
    800284fc:	b1944403          	lbu	s0,-1255(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028500:	00005597          	auipc	a1,0x5
    80028504:	df058593          	addi	a1,a1,-528 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    80028508:	cc11                	beqz	s0,80028524 <vec_test_4+0xfa>
    8002850a:	6498                	ld	a4,8(s1)
    8002850c:	4789                	li	a5,2
    TEST_END();
    8002850e:	00005597          	auipc	a1,0x5
    80028512:	dd258593          	addi	a1,a1,-558 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=!0 vsstatus.vs=0 and v=1",
    80028516:	00f70763          	beq	a4,a5,80028524 <vec_test_4+0xfa>
    8002851a:	4401                	li	s0,0
    TEST_END();
    8002851c:	00005597          	auipc	a1,0x5
    80028520:	dd458593          	addi	a1,a1,-556 # 8002d2f0 <__func__.0+0x2d0>
    80028524:	00005517          	auipc	a0,0x5
    80028528:	e7450513          	addi	a0,a0,-396 # 8002d398 <__func__.0+0x378>
    8002852c:	08f020ef          	jal	8002adba <printf>
    80028530:	4511                	li	a0,4
    80028532:	93dd80ef          	jal	80000e6e <goto_priv>
    80028536:	a54d90ef          	jal	8000178a <reset_state>
}
    8002853a:	60e2                	ld	ra,24(sp)
    8002853c:	8522                	mv	a0,s0
    8002853e:	6442                	ld	s0,16(sp)
    80028540:	64a2                	ld	s1,8(sp)
    80028542:	6105                	addi	sp,sp,32
    80028544:	8082                	ret

0000000080028546 <vec_test_5>:

bool vec_test_5(){          
    80028546:	1101                	addi	sp,sp,-32

    TEST_START();
    80028548:	00005597          	auipc	a1,0x5
    8002854c:	9a858593          	addi	a1,a1,-1624 # 8002cef0 <__func__.19>
    80028550:	00005517          	auipc	a0,0x5
    80028554:	db050513          	addi	a0,a0,-592 # 8002d300 <__func__.0+0x2e0>
bool vec_test_5(){          
    80028558:	ec06                	sd	ra,24(sp)
    8002855a:	e426                	sd	s1,8(sp)
    8002855c:	e822                	sd	s0,16(sp)
    TEST_START();
    8002855e:	05d020ef          	jal	8002adba <printf>
    80028562:	4529                	li	a0,10
    80028564:	544010ef          	jal	80029aa8 <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028568:	20000493          	li	s1,512
    8002856c:	3004a073          	csrs	mstatus,s1
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028570:	40000413          	li	s0,1024
    80028574:	30042073          	csrs	mstatus,s0
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    80028578:	ffad80ef          	jal	80000d72 <test_setup_except_function>
// 设置 vfirst.m 执行条件
static inline void set_vfirst_m_conditions(int sew, int lmull, int vl, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    8002857c:	4785                	li	a5,1
    8002857e:	4749                	li	a4,18
    80028580:	80e7f2d7          	vsetvl	t0,a5,a4
    80028584:	5e00b057          	vmv.v.i	v0,1
    80028588:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    8002858c:	a29d80ef          	jal	80000fb4 <excpt_info>

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    80028590:	3004b073          	csrc	mstatus,s1
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028594:	30043073          	csrc	mstatus,s0
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    80028598:	2004a073          	csrs	vsstatus,s1
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8002859c:	20043073          	csrc	vsstatus,s0

    goto_priv(PRIV_VS);
    800285a0:	4509                	li	a0,2
    800285a2:	8cdd80ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800285a6:	fccd80ef          	jal	80000d72 <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    800285aa:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    800285ae:	a07d80ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    800285b2:	08200593          	li	a1,130
    800285b6:	00010617          	auipc	a2,0x10
    800285ba:	e2260613          	addi	a2,a2,-478 # 800383d8 <__func__.0+0xb3b8>
    800285be:	00005517          	auipc	a0,0x5
    800285c2:	d5a50513          	addi	a0,a0,-678 # 8002d318 <__func__.0+0x2f8>
    800285c6:	7f4020ef          	jal	8002adba <printf>
    800285ca:	00029797          	auipc	a5,0x29
    800285ce:	a477c783          	lbu	a5,-1465(a5) # 80051011 <excpt+0x1>
    800285d2:	00029497          	auipc	s1,0x29
    800285d6:	a3e48493          	addi	s1,s1,-1474 # 80051010 <excpt>
    800285da:	00005597          	auipc	a1,0x5
    800285de:	d1658593          	addi	a1,a1,-746 # 8002d2f0 <__func__.0+0x2d0>
    800285e2:	cf89                	beqz	a5,800285fc <vec_test_5+0xb6>
    800285e4:	6498                	ld	a4,8(s1)
    800285e6:	4789                	li	a5,2
    800285e8:	00005597          	auipc	a1,0x5
    800285ec:	cf858593          	addi	a1,a1,-776 # 8002d2e0 <__func__.0+0x2c0>
    800285f0:	00f70663          	beq	a4,a5,800285fc <vec_test_5+0xb6>
    800285f4:	00005597          	auipc	a1,0x5
    800285f8:	cfc58593          	addi	a1,a1,-772 # 8002d2f0 <__func__.0+0x2d0>
    800285fc:	00005517          	auipc	a0,0x5
    80028600:	d3450513          	addi	a0,a0,-716 # 8002d330 <__func__.0+0x310>
    80028604:	7b6020ef          	jal	8002adba <printf>
    80028608:	00029797          	auipc	a5,0x29
    8002860c:	a097c783          	lbu	a5,-1527(a5) # 80051011 <excpt+0x1>
    80028610:	c789                	beqz	a5,8002861a <vec_test_5+0xd4>
    80028612:	6498                	ld	a4,8(s1)
    80028614:	4789                	li	a5,2
    80028616:	00f70c63          	beq	a4,a5,8002862e <vec_test_5+0xe8>
    8002861a:	00005517          	auipc	a0,0x5
    8002861e:	d1e50513          	addi	a0,a0,-738 # 8002d338 <__func__.0+0x318>
    80028622:	798020ef          	jal	8002adba <printf>
    80028626:	02900513          	li	a0,41
    8002862a:	47e010ef          	jal	80029aa8 <putchar>
    8002862e:	4529                	li	a0,10
    80028630:	478010ef          	jal	80029aa8 <putchar>
    80028634:	00029417          	auipc	s0,0x29
    80028638:	9dd44403          	lbu	s0,-1571(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    8002863c:	00005597          	auipc	a1,0x5
    80028640:	cb458593          	addi	a1,a1,-844 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    80028644:	cc11                	beqz	s0,80028660 <vec_test_5+0x11a>
    80028646:	6498                	ld	a4,8(s1)
    80028648:	4789                	li	a5,2
    TEST_END();
    8002864a:	00005597          	auipc	a1,0x5
    8002864e:	c9658593          	addi	a1,a1,-874 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs!=0 and v=1",
    80028652:	00f70763          	beq	a4,a5,80028660 <vec_test_5+0x11a>
    80028656:	4401                	li	s0,0
    TEST_END();
    80028658:	00005597          	auipc	a1,0x5
    8002865c:	c9858593          	addi	a1,a1,-872 # 8002d2f0 <__func__.0+0x2d0>
    80028660:	00005517          	auipc	a0,0x5
    80028664:	d3850513          	addi	a0,a0,-712 # 8002d398 <__func__.0+0x378>
    80028668:	752020ef          	jal	8002adba <printf>
    8002866c:	4511                	li	a0,4
    8002866e:	801d80ef          	jal	80000e6e <goto_priv>
    80028672:	918d90ef          	jal	8000178a <reset_state>
}
    80028676:	60e2                	ld	ra,24(sp)
    80028678:	8522                	mv	a0,s0
    8002867a:	6442                	ld	s0,16(sp)
    8002867c:	64a2                	ld	s1,8(sp)
    8002867e:	6105                	addi	sp,sp,32
    80028680:	8082                	ret

0000000080028682 <vec_test_6>:


bool vec_test_6(){
    80028682:	1101                	addi	sp,sp,-32

    TEST_START();
    80028684:	00005597          	auipc	a1,0x5
    80028688:	87c58593          	addi	a1,a1,-1924 # 8002cf00 <__func__.18>
    8002868c:	00005517          	auipc	a0,0x5
    80028690:	c7450513          	addi	a0,a0,-908 # 8002d300 <__func__.0+0x2e0>
bool vec_test_6(){
    80028694:	ec06                	sd	ra,24(sp)
    80028696:	e822                	sd	s0,16(sp)
    80028698:	e426                	sd	s1,8(sp)
    TEST_START();
    8002869a:	720020ef          	jal	8002adba <printf>
    8002869e:	4529                	li	a0,10
    800286a0:	408010ef          	jal	80029aa8 <putchar>
    // 当 V=1 时，vsstatus.VS!=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800286a4:	20000713          	li	a4,512
    800286a8:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800286ac:	40000793          	li	a5,1024
    800286b0:	3007b073          	csrc	mstatus,a5
    CSRS(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs!=0
    800286b4:	20072073          	csrs	vsstatus,a4
    CSRS(CSR_VSSTATUS, 1ULL << 10); 
    800286b8:	2007a073          	csrs	vsstatus,a5

    goto_priv(PRIV_VS);
    800286bc:	4509                	li	a0,2
    800286be:	fb0d80ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800286c2:	eb0d80ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VXSAT);
    800286c6:	009027f3          	csrr	a5,vxsat
    excpt_info();
    800286ca:	8ebd80ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    800286ce:	08200593          	li	a1,130
    800286d2:	00010617          	auipc	a2,0x10
    800286d6:	d6660613          	addi	a2,a2,-666 # 80038438 <__func__.0+0xb418>
    800286da:	00005517          	auipc	a0,0x5
    800286de:	c3e50513          	addi	a0,a0,-962 # 8002d318 <__func__.0+0x2f8>
    800286e2:	6d8020ef          	jal	8002adba <printf>
    800286e6:	00029797          	auipc	a5,0x29
    800286ea:	92b7c783          	lbu	a5,-1749(a5) # 80051011 <excpt+0x1>
    800286ee:	00029497          	auipc	s1,0x29
    800286f2:	92248493          	addi	s1,s1,-1758 # 80051010 <excpt>
    800286f6:	00005597          	auipc	a1,0x5
    800286fa:	bfa58593          	addi	a1,a1,-1030 # 8002d2f0 <__func__.0+0x2d0>
    800286fe:	cf89                	beqz	a5,80028718 <vec_test_6+0x96>
    80028700:	6498                	ld	a4,8(s1)
    80028702:	4789                	li	a5,2
    80028704:	00005597          	auipc	a1,0x5
    80028708:	bdc58593          	addi	a1,a1,-1060 # 8002d2e0 <__func__.0+0x2c0>
    8002870c:	00f70663          	beq	a4,a5,80028718 <vec_test_6+0x96>
    80028710:	00005597          	auipc	a1,0x5
    80028714:	be058593          	addi	a1,a1,-1056 # 8002d2f0 <__func__.0+0x2d0>
    80028718:	00005517          	auipc	a0,0x5
    8002871c:	c1850513          	addi	a0,a0,-1000 # 8002d330 <__func__.0+0x310>
    80028720:	69a020ef          	jal	8002adba <printf>
    80028724:	00029797          	auipc	a5,0x29
    80028728:	8ed7c783          	lbu	a5,-1811(a5) # 80051011 <excpt+0x1>
    8002872c:	c789                	beqz	a5,80028736 <vec_test_6+0xb4>
    8002872e:	6498                	ld	a4,8(s1)
    80028730:	4789                	li	a5,2
    80028732:	00f70c63          	beq	a4,a5,8002874a <vec_test_6+0xc8>
    80028736:	00005517          	auipc	a0,0x5
    8002873a:	c0250513          	addi	a0,a0,-1022 # 8002d338 <__func__.0+0x318>
    8002873e:	67c020ef          	jal	8002adba <printf>
    80028742:	02900513          	li	a0,41
    80028746:	362010ef          	jal	80029aa8 <putchar>
    8002874a:	4529                	li	a0,10
    8002874c:	35c010ef          	jal	80029aa8 <putchar>
    80028750:	00029417          	auipc	s0,0x29
    80028754:	8c144403          	lbu	s0,-1855(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028758:	00005597          	auipc	a1,0x5
    8002875c:	b9858593          	addi	a1,a1,-1128 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    80028760:	cc11                	beqz	s0,8002877c <vec_test_6+0xfa>
    80028762:	6498                	ld	a4,8(s1)
    80028764:	4789                	li	a5,2
    TEST_END();
    80028766:	00005597          	auipc	a1,0x5
    8002876a:	b7a58593          	addi	a1,a1,-1158 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=!0 and v=1",
    8002876e:	00f70763          	beq	a4,a5,8002877c <vec_test_6+0xfa>
    80028772:	4401                	li	s0,0
    TEST_END();
    80028774:	00005597          	auipc	a1,0x5
    80028778:	b7c58593          	addi	a1,a1,-1156 # 8002d2f0 <__func__.0+0x2d0>
    8002877c:	00005517          	auipc	a0,0x5
    80028780:	c1c50513          	addi	a0,a0,-996 # 8002d398 <__func__.0+0x378>
    80028784:	636020ef          	jal	8002adba <printf>
    80028788:	4511                	li	a0,4
    8002878a:	ee4d80ef          	jal	80000e6e <goto_priv>
    8002878e:	ffdd80ef          	jal	8000178a <reset_state>
}
    80028792:	60e2                	ld	ra,24(sp)
    80028794:	8522                	mv	a0,s0
    80028796:	6442                	ld	s0,16(sp)
    80028798:	64a2                	ld	s1,8(sp)
    8002879a:	6105                	addi	sp,sp,32
    8002879c:	8082                	ret

000000008002879e <vec_test_7>:

bool vec_test_7(){
    8002879e:	1101                	addi	sp,sp,-32

    TEST_START();
    800287a0:	00004597          	auipc	a1,0x4
    800287a4:	77058593          	addi	a1,a1,1904 # 8002cf10 <__func__.17>
    800287a8:	00005517          	auipc	a0,0x5
    800287ac:	b5850513          	addi	a0,a0,-1192 # 8002d300 <__func__.0+0x2e0>
bool vec_test_7(){
    800287b0:	ec06                	sd	ra,24(sp)
    800287b2:	e426                	sd	s1,8(sp)
    800287b4:	e822                	sd	s0,16(sp)
    TEST_START();
    800287b6:	604020ef          	jal	8002adba <printf>
    800287ba:	4529                	li	a0,10
    800287bc:	2ec010ef          	jal	80029aa8 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试执行向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800287c0:	20000493          	li	s1,512
    800287c4:	3004a073          	csrs	mstatus,s1
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800287c8:	40000413          	li	s0,1024
    800287cc:	30042073          	csrs	mstatus,s0
// 设置执行 vmsbf.m 指令条件，包括向量长度、掩码寄存器和源寄存器
static inline void set_vmsbfm_conditions(int vl, int sew, int lmull, int v0_init, int v4_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;

    asm volatile (
    800287d0:	47a1                	li	a5,8
    800287d2:	4745                	li	a4,17
    800287d4:	80e7f2d7          	vsetvl	t0,a5,a4
    800287d8:	5e00b057          	vmv.v.i	v0,1
    800287dc:	5e003257          	vmv.v.i	v4,0
    int v0_init = 1;   // 初始化掩码寄存器 v0 的值为 1（全 1）
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    800287e0:	fd4d80ef          	jal	80000fb4 <excpt_info>

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800287e4:	3004b073          	csrc	mstatus,s1
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    800287e8:	30043073          	csrc	mstatus,s0
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    800287ec:	2004b073          	csrc	vsstatus,s1
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    800287f0:	20043073          	csrc	vsstatus,s0

    goto_priv(PRIV_VS);
    800287f4:	4509                	li	a0,2
    800287f6:	e78d80ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    800287fa:	d78d80ef          	jal	80000d72 <test_setup_except_function>
    );
}

// 执行 vmsbf.m 指令
static inline void execute_vmsbf_m() {
    asm volatile (
    800287fe:	5040a1d7          	vmsbf.m	v3,v4,v0.t


    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    80028802:	fb2d80ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028806:	08200593          	li	a1,130
    8002880a:	00010617          	auipc	a2,0x10
    8002880e:	c8e60613          	addi	a2,a2,-882 # 80038498 <__func__.0+0xb478>
    80028812:	00005517          	auipc	a0,0x5
    80028816:	b0650513          	addi	a0,a0,-1274 # 8002d318 <__func__.0+0x2f8>
    8002881a:	5a0020ef          	jal	8002adba <printf>
    8002881e:	00028797          	auipc	a5,0x28
    80028822:	7f37c783          	lbu	a5,2035(a5) # 80051011 <excpt+0x1>
    80028826:	00028497          	auipc	s1,0x28
    8002882a:	7ea48493          	addi	s1,s1,2026 # 80051010 <excpt>
    8002882e:	00005597          	auipc	a1,0x5
    80028832:	ac258593          	addi	a1,a1,-1342 # 8002d2f0 <__func__.0+0x2d0>
    80028836:	cf89                	beqz	a5,80028850 <vec_test_7+0xb2>
    80028838:	6498                	ld	a4,8(s1)
    8002883a:	4789                	li	a5,2
    8002883c:	00005597          	auipc	a1,0x5
    80028840:	aa458593          	addi	a1,a1,-1372 # 8002d2e0 <__func__.0+0x2c0>
    80028844:	00f70663          	beq	a4,a5,80028850 <vec_test_7+0xb2>
    80028848:	00005597          	auipc	a1,0x5
    8002884c:	aa858593          	addi	a1,a1,-1368 # 8002d2f0 <__func__.0+0x2d0>
    80028850:	00005517          	auipc	a0,0x5
    80028854:	ae050513          	addi	a0,a0,-1312 # 8002d330 <__func__.0+0x310>
    80028858:	562020ef          	jal	8002adba <printf>
    8002885c:	00028797          	auipc	a5,0x28
    80028860:	7b57c783          	lbu	a5,1973(a5) # 80051011 <excpt+0x1>
    80028864:	c789                	beqz	a5,8002886e <vec_test_7+0xd0>
    80028866:	6498                	ld	a4,8(s1)
    80028868:	4789                	li	a5,2
    8002886a:	00f70c63          	beq	a4,a5,80028882 <vec_test_7+0xe4>
    8002886e:	00005517          	auipc	a0,0x5
    80028872:	aca50513          	addi	a0,a0,-1334 # 8002d338 <__func__.0+0x318>
    80028876:	544020ef          	jal	8002adba <printf>
    8002887a:	02900513          	li	a0,41
    8002887e:	22a010ef          	jal	80029aa8 <putchar>
    80028882:	4529                	li	a0,10
    80028884:	224010ef          	jal	80029aa8 <putchar>
    80028888:	00028417          	auipc	s0,0x28
    8002888c:	78944403          	lbu	s0,1929(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028890:	00005597          	auipc	a1,0x5
    80028894:	a6058593          	addi	a1,a1,-1440 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028898:	cc11                	beqz	s0,800288b4 <vec_test_7+0x116>
    8002889a:	6498                	ld	a4,8(s1)
    8002889c:	4789                	li	a5,2
    TEST_END();
    8002889e:	00005597          	auipc	a1,0x5
    800288a2:	a4258593          	addi	a1,a1,-1470 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vector instructions cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800288a6:	00f70763          	beq	a4,a5,800288b4 <vec_test_7+0x116>
    800288aa:	4401                	li	s0,0
    TEST_END();
    800288ac:	00005597          	auipc	a1,0x5
    800288b0:	a4458593          	addi	a1,a1,-1468 # 8002d2f0 <__func__.0+0x2d0>
    800288b4:	00005517          	auipc	a0,0x5
    800288b8:	ae450513          	addi	a0,a0,-1308 # 8002d398 <__func__.0+0x378>
    800288bc:	4fe020ef          	jal	8002adba <printf>
    800288c0:	4511                	li	a0,4
    800288c2:	dacd80ef          	jal	80000e6e <goto_priv>
    800288c6:	ec5d80ef          	jal	8000178a <reset_state>
}
    800288ca:	60e2                	ld	ra,24(sp)
    800288cc:	8522                	mv	a0,s0
    800288ce:	6442                	ld	s0,16(sp)
    800288d0:	64a2                	ld	s1,8(sp)
    800288d2:	6105                	addi	sp,sp,32
    800288d4:	8082                	ret

00000000800288d6 <vec_test_8>:


bool vec_test_8(){
    800288d6:	1101                	addi	sp,sp,-32

    TEST_START();
    800288d8:	00004597          	auipc	a1,0x4
    800288dc:	64858593          	addi	a1,a1,1608 # 8002cf20 <__func__.16>
    800288e0:	00005517          	auipc	a0,0x5
    800288e4:	a2050513          	addi	a0,a0,-1504 # 8002d300 <__func__.0+0x2e0>
bool vec_test_8(){
    800288e8:	ec06                	sd	ra,24(sp)
    800288ea:	e822                	sd	s0,16(sp)
    800288ec:	e426                	sd	s1,8(sp)
    TEST_START();
    800288ee:	4cc020ef          	jal	8002adba <printf>
    800288f2:	4529                	li	a0,10
    800288f4:	1b4010ef          	jal	80029aa8 <putchar>
    // 当 V=1 时，vsstatus.VS=OFF && mstatus.VS=OFF 时，尝试访问向量 CSR 

    CSRC(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs=0
    800288f8:	20000713          	li	a4,512
    800288fc:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028900:	40000793          	li	a5,1024
    80028904:	3007b073          	csrc	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 9);      //设置vsstatus.vs=0
    80028908:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 10); 
    8002890c:	2007b073          	csrc	vsstatus,a5

    goto_priv(PRIV_VS);
    80028910:	4509                	li	a0,2
    80028912:	d5cd80ef          	jal	80000e6e <goto_priv>
    TEST_SETUP_EXCEPT();
    80028916:	c5cd80ef          	jal	80000d72 <test_setup_except_function>
    CSRR(CSR_VXRM);
    8002891a:	00a027f3          	csrr	a5,vxrm
    excpt_info();
    8002891e:	e96d80ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    80028922:	08200593          	li	a1,130
    80028926:	00010617          	auipc	a2,0x10
    8002892a:	bd260613          	addi	a2,a2,-1070 # 800384f8 <__func__.0+0xb4d8>
    8002892e:	00005517          	auipc	a0,0x5
    80028932:	9ea50513          	addi	a0,a0,-1558 # 8002d318 <__func__.0+0x2f8>
    80028936:	484020ef          	jal	8002adba <printf>
    8002893a:	00028797          	auipc	a5,0x28
    8002893e:	6d77c783          	lbu	a5,1751(a5) # 80051011 <excpt+0x1>
    80028942:	00028497          	auipc	s1,0x28
    80028946:	6ce48493          	addi	s1,s1,1742 # 80051010 <excpt>
    8002894a:	00005597          	auipc	a1,0x5
    8002894e:	9a658593          	addi	a1,a1,-1626 # 8002d2f0 <__func__.0+0x2d0>
    80028952:	cf89                	beqz	a5,8002896c <vec_test_8+0x96>
    80028954:	6498                	ld	a4,8(s1)
    80028956:	4789                	li	a5,2
    80028958:	00005597          	auipc	a1,0x5
    8002895c:	98858593          	addi	a1,a1,-1656 # 8002d2e0 <__func__.0+0x2c0>
    80028960:	00f70663          	beq	a4,a5,8002896c <vec_test_8+0x96>
    80028964:	00005597          	auipc	a1,0x5
    80028968:	98c58593          	addi	a1,a1,-1652 # 8002d2f0 <__func__.0+0x2d0>
    8002896c:	00005517          	auipc	a0,0x5
    80028970:	9c450513          	addi	a0,a0,-1596 # 8002d330 <__func__.0+0x310>
    80028974:	446020ef          	jal	8002adba <printf>
    80028978:	00028797          	auipc	a5,0x28
    8002897c:	6997c783          	lbu	a5,1689(a5) # 80051011 <excpt+0x1>
    80028980:	c789                	beqz	a5,8002898a <vec_test_8+0xb4>
    80028982:	6498                	ld	a4,8(s1)
    80028984:	4789                	li	a5,2
    80028986:	00f70c63          	beq	a4,a5,8002899e <vec_test_8+0xc8>
    8002898a:	00005517          	auipc	a0,0x5
    8002898e:	9ae50513          	addi	a0,a0,-1618 # 8002d338 <__func__.0+0x318>
    80028992:	428020ef          	jal	8002adba <printf>
    80028996:	02900513          	li	a0,41
    8002899a:	10e010ef          	jal	80029aa8 <putchar>
    8002899e:	4529                	li	a0,10
    800289a0:	108010ef          	jal	80029aa8 <putchar>
    800289a4:	00028417          	auipc	s0,0x28
    800289a8:	66d44403          	lbu	s0,1645(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    800289ac:	00005597          	auipc	a1,0x5
    800289b0:	94458593          	addi	a1,a1,-1724 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800289b4:	cc11                	beqz	s0,800289d0 <vec_test_8+0xfa>
    800289b6:	6498                	ld	a4,8(s1)
    800289b8:	4789                	li	a5,2
    TEST_END();
    800289ba:	00005597          	auipc	a1,0x5
    800289be:	92658593          	addi	a1,a1,-1754 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to access vector register cause to ILI when mstatus.vs=0 vsstatus.vs=0 and v=1",
    800289c2:	00f70763          	beq	a4,a5,800289d0 <vec_test_8+0xfa>
    800289c6:	4401                	li	s0,0
    TEST_END();
    800289c8:	00005597          	auipc	a1,0x5
    800289cc:	92858593          	addi	a1,a1,-1752 # 8002d2f0 <__func__.0+0x2d0>
    800289d0:	00005517          	auipc	a0,0x5
    800289d4:	9c850513          	addi	a0,a0,-1592 # 8002d398 <__func__.0+0x378>
    800289d8:	3e2020ef          	jal	8002adba <printf>
    800289dc:	4511                	li	a0,4
    800289de:	c90d80ef          	jal	80000e6e <goto_priv>
    800289e2:	da9d80ef          	jal	8000178a <reset_state>
}
    800289e6:	60e2                	ld	ra,24(sp)
    800289e8:	8522                	mv	a0,s0
    800289ea:	6442                	ld	s0,16(sp)
    800289ec:	64a2                	ld	s1,8(sp)
    800289ee:	6105                	addi	sp,sp,32
    800289f0:	8082                	ret

00000000800289f2 <vec_test_9>:


bool vec_test_9(){
    800289f2:	1101                	addi	sp,sp,-32

    TEST_START();
    800289f4:	00004597          	auipc	a1,0x4
    800289f8:	53c58593          	addi	a1,a1,1340 # 8002cf30 <__func__.15>
    800289fc:	00005517          	auipc	a0,0x5
    80028a00:	90450513          	addi	a0,a0,-1788 # 8002d300 <__func__.0+0x2e0>
bool vec_test_9(){
    80028a04:	ec06                	sd	ra,24(sp)
    80028a06:	e822                	sd	s0,16(sp)
    80028a08:	e426                	sd	s1,8(sp)
    TEST_START();
    80028a0a:	3b0020ef          	jal	8002adba <printf>
    80028a0e:	4529                	li	a0,10
    80028a10:	098010ef          	jal	80029aa8 <putchar>
    // 如果vstart超出界限，建议实现陷阱
    /*
    向量配置的最大长度 VLMAX。这个值取决于向量长度寄存器（vl）、元素宽度（SEW）、和向量组乘数（LMUL）。
    (该测试用例只是简单弄个大的数来测试)
    */
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs!=0
    80028a14:	20000793          	li	a5,512
    80028a18:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10);      
    80028a1c:	40000793          	li	a5,1024
    80028a20:	3007b073          	csrc	mstatus,a5
    printf("mstatus=%llx\n",CSRR(CSR_MSTATUS));
    80028a24:	300025f3          	csrr	a1,mstatus
    80028a28:	00010517          	auipc	a0,0x10
    80028a2c:	b3050513          	addi	a0,a0,-1232 # 80038558 <__func__.0+0xb538>
    80028a30:	38a020ef          	jal	8002adba <printf>

    asm volatile (
    80028a34:	07f00293          	li	t0,127
    80028a38:	00829073          	csrw	vstart,t0
        "li t0, 0x7f\n\t"              // 设置 t0 为 0x7f（超出有效 vl 的范围）
        "csrw vstart, t0\n\t"          // 设置 vstart 为非法值 0x10
    );

    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80028a3c:	008025f3          	csrr	a1,vstart
    80028a40:	00010517          	auipc	a0,0x10
    80028a44:	b2850513          	addi	a0,a0,-1240 # 80038568 <__func__.0+0xb548>
    80028a48:	372020ef          	jal	8002adba <printf>
// 设置 vadd 执行条件
static inline void set_vadd_conditions(int sew, int lmull, int vl, int v0_init, int v4_init, int v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028a4c:	47a1                	li	a5,8
    80028a4e:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    80028a52:	5e00b057          	vmv.v.i	v0,1
    80028a56:	5e01b257          	vmv.v.i	v4,3
    80028a5a:	5e02b357          	vmv.v.i	v6,5
    int v4_init = 3;    // 初始化 v4 的值为 3
    int v6_init = 5;    // 初始化 v6 的值为 5

    // 设置 vadd 的执行条件
    set_vadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);
    excpt_info();
    80028a5e:	d56d80ef          	jal	80000fb4 <excpt_info>

    // CSRW(CSR_VSTART,0x10);

    TEST_SETUP_EXCEPT();
    80028a62:	b10d80ef          	jal	80000d72 <test_setup_except_function>



// 执行 vadd.vv 指令
static inline void execute_vadd_vv() {
    asm volatile (
    80028a66:	02430457          	vadd.vv	v8,v4,v6
    
    // 执行 vadd.vv 指令
    execute_vadd_vv();

    excpt_info();
    80028a6a:	d4ad80ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028a6e:	08200593          	li	a1,130
    80028a72:	00010617          	auipc	a2,0x10
    80028a76:	b0660613          	addi	a2,a2,-1274 # 80038578 <__func__.0+0xb558>
    80028a7a:	00005517          	auipc	a0,0x5
    80028a7e:	89e50513          	addi	a0,a0,-1890 # 8002d318 <__func__.0+0x2f8>
    80028a82:	338020ef          	jal	8002adba <printf>
    80028a86:	00028797          	auipc	a5,0x28
    80028a8a:	58b7c783          	lbu	a5,1419(a5) # 80051011 <excpt+0x1>
    80028a8e:	00028497          	auipc	s1,0x28
    80028a92:	58248493          	addi	s1,s1,1410 # 80051010 <excpt>
    80028a96:	00005597          	auipc	a1,0x5
    80028a9a:	85a58593          	addi	a1,a1,-1958 # 8002d2f0 <__func__.0+0x2d0>
    80028a9e:	cf89                	beqz	a5,80028ab8 <vec_test_9+0xc6>
    80028aa0:	6498                	ld	a4,8(s1)
    80028aa2:	4789                	li	a5,2
    80028aa4:	00005597          	auipc	a1,0x5
    80028aa8:	83c58593          	addi	a1,a1,-1988 # 8002d2e0 <__func__.0+0x2c0>
    80028aac:	00f70663          	beq	a4,a5,80028ab8 <vec_test_9+0xc6>
    80028ab0:	00005597          	auipc	a1,0x5
    80028ab4:	84058593          	addi	a1,a1,-1984 # 8002d2f0 <__func__.0+0x2d0>
    80028ab8:	00005517          	auipc	a0,0x5
    80028abc:	87850513          	addi	a0,a0,-1928 # 8002d330 <__func__.0+0x310>
    80028ac0:	2fa020ef          	jal	8002adba <printf>
    80028ac4:	00028797          	auipc	a5,0x28
    80028ac8:	54d7c783          	lbu	a5,1357(a5) # 80051011 <excpt+0x1>
    80028acc:	c789                	beqz	a5,80028ad6 <vec_test_9+0xe4>
    80028ace:	6498                	ld	a4,8(s1)
    80028ad0:	4789                	li	a5,2
    80028ad2:	00f70c63          	beq	a4,a5,80028aea <vec_test_9+0xf8>
    80028ad6:	00005517          	auipc	a0,0x5
    80028ada:	86250513          	addi	a0,a0,-1950 # 8002d338 <__func__.0+0x318>
    80028ade:	2dc020ef          	jal	8002adba <printf>
    80028ae2:	02900513          	li	a0,41
    80028ae6:	7c3000ef          	jal	80029aa8 <putchar>
    80028aea:	4529                	li	a0,10
    80028aec:	7bd000ef          	jal	80029aa8 <putchar>
    80028af0:	00028417          	auipc	s0,0x28
    80028af4:	52144403          	lbu	s0,1313(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   
    
    TEST_END();
    80028af8:	00004597          	auipc	a1,0x4
    80028afc:	7f858593          	addi	a1,a1,2040 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028b00:	cc11                	beqz	s0,80028b1c <vec_test_9+0x12a>
    80028b02:	6498                	ld	a4,8(s1)
    80028b04:	4789                	li	a5,2
    TEST_END();
    80028b06:	00004597          	auipc	a1,0x4
    80028b0a:	7da58593          	addi	a1,a1,2010 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vadd.vv cause to ILI when VSTART!=0",
    80028b0e:	00f70763          	beq	a4,a5,80028b1c <vec_test_9+0x12a>
    80028b12:	4401                	li	s0,0
    TEST_END();
    80028b14:	00004597          	auipc	a1,0x4
    80028b18:	7dc58593          	addi	a1,a1,2012 # 8002d2f0 <__func__.0+0x2d0>
    80028b1c:	00005517          	auipc	a0,0x5
    80028b20:	87c50513          	addi	a0,a0,-1924 # 8002d398 <__func__.0+0x378>
    80028b24:	296020ef          	jal	8002adba <printf>
    80028b28:	4511                	li	a0,4
    80028b2a:	b44d80ef          	jal	80000e6e <goto_priv>
    80028b2e:	c5dd80ef          	jal	8000178a <reset_state>
}
    80028b32:	60e2                	ld	ra,24(sp)
    80028b34:	8522                	mv	a0,s0
    80028b36:	6442                	ld	s0,16(sp)
    80028b38:	64a2                	ld	s1,8(sp)
    80028b3a:	6105                	addi	sp,sp,32
    80028b3c:	8082                	ret

0000000080028b3e <vec_test_10>:


bool vec_test_10(){
    80028b3e:	1141                	addi	sp,sp,-16

    TEST_START();
    80028b40:	00004597          	auipc	a1,0x4
    80028b44:	40058593          	addi	a1,a1,1024 # 8002cf40 <__func__.14>
    80028b48:	00004517          	auipc	a0,0x4
    80028b4c:	7b850513          	addi	a0,a0,1976 # 8002d300 <__func__.0+0x2e0>
bool vec_test_10(){
    80028b50:	e406                	sd	ra,8(sp)
    TEST_START();
    80028b52:	268020ef          	jal	8002adba <printf>
    80028b56:	4529                	li	a0,10
    80028b58:	751000ef          	jal	80029aa8 <putchar>
    //当尝试执行某个向量指令时，如果 vstart 的值是该实现在使用相同 vtype 设置执行该指令时不可能产生的


    TEST_END();
    80028b5c:	00004597          	auipc	a1,0x4
    80028b60:	78458593          	addi	a1,a1,1924 # 8002d2e0 <__func__.0+0x2c0>
    80028b64:	00005517          	auipc	a0,0x5
    80028b68:	83450513          	addi	a0,a0,-1996 # 8002d398 <__func__.0+0x378>
    80028b6c:	24e020ef          	jal	8002adba <printf>
    80028b70:	4511                	li	a0,4
    80028b72:	afcd80ef          	jal	80000e6e <goto_priv>
    80028b76:	c15d80ef          	jal	8000178a <reset_state>

}
    80028b7a:	60a2                	ld	ra,8(sp)
    80028b7c:	4505                	li	a0,1
    80028b7e:	0141                	addi	sp,sp,16
    80028b80:	8082                	ret

0000000080028b82 <vec_test_11>:


bool vec_test_11(){
    80028b82:	1101                	addi	sp,sp,-32

    TEST_START();
    80028b84:	00004597          	auipc	a1,0x4
    80028b88:	3cc58593          	addi	a1,a1,972 # 8002cf50 <__func__.13>
    80028b8c:	00004517          	auipc	a0,0x4
    80028b90:	77450513          	addi	a0,a0,1908 # 8002d300 <__func__.0+0x2e0>
bool vec_test_11(){
    80028b94:	ec06                	sd	ra,24(sp)
    80028b96:	e822                	sd	s0,16(sp)
    80028b98:	e426                	sd	s1,8(sp)
    TEST_START();
    80028b9a:	220020ef          	jal	8002adba <printf>
    80028b9e:	4529                	li	a0,10
    80028ba0:	709000ef          	jal	80029aa8 <putchar>
    //如果 vill 位被设置位1，执行依赖 vtype 的向量指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028ba4:	20000793          	li	a5,512
    80028ba8:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80028bac:	40000793          	li	a5,1024
    80028bb0:	3007a073          	csrs	mstatus,a5
    int lmull = 1;     // LMUL = 1
    int v0_init = 1;   // 初始化掩码寄存器 v0 的值为 1（全 1）
    int v4_init = 3;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    printf("vtype=%llx\n",CSRR(CSR_VTYPE));
    80028bb4:	c21025f3          	csrr	a1,vtype
    80028bb8:	00010517          	auipc	a0,0x10
    80028bbc:	a0050513          	addi	a0,a0,-1536 # 800385b8 <__func__.0+0xb598>
    80028bc0:	1fa020ef          	jal	8002adba <printf>

    TEST_SETUP_EXCEPT();
    80028bc4:	9aed80ef          	jal	80000d72 <test_setup_except_function>
    asm volatile (
    80028bc8:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    execute_vmsbf_m(); 

    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028bcc:	08200593          	li	a1,130
    80028bd0:	00010617          	auipc	a2,0x10
    80028bd4:	9f860613          	addi	a2,a2,-1544 # 800385c8 <__func__.0+0xb5a8>
    80028bd8:	00004517          	auipc	a0,0x4
    80028bdc:	74050513          	addi	a0,a0,1856 # 8002d318 <__func__.0+0x2f8>
    80028be0:	1da020ef          	jal	8002adba <printf>
    80028be4:	00028797          	auipc	a5,0x28
    80028be8:	42d7c783          	lbu	a5,1069(a5) # 80051011 <excpt+0x1>
    80028bec:	00028497          	auipc	s1,0x28
    80028bf0:	42448493          	addi	s1,s1,1060 # 80051010 <excpt>
    80028bf4:	00004597          	auipc	a1,0x4
    80028bf8:	6fc58593          	addi	a1,a1,1788 # 8002d2f0 <__func__.0+0x2d0>
    80028bfc:	cf89                	beqz	a5,80028c16 <vec_test_11+0x94>
    80028bfe:	6498                	ld	a4,8(s1)
    80028c00:	4789                	li	a5,2
    80028c02:	00004597          	auipc	a1,0x4
    80028c06:	6de58593          	addi	a1,a1,1758 # 8002d2e0 <__func__.0+0x2c0>
    80028c0a:	00f70663          	beq	a4,a5,80028c16 <vec_test_11+0x94>
    80028c0e:	00004597          	auipc	a1,0x4
    80028c12:	6e258593          	addi	a1,a1,1762 # 8002d2f0 <__func__.0+0x2d0>
    80028c16:	00004517          	auipc	a0,0x4
    80028c1a:	71a50513          	addi	a0,a0,1818 # 8002d330 <__func__.0+0x310>
    80028c1e:	19c020ef          	jal	8002adba <printf>
    80028c22:	00028797          	auipc	a5,0x28
    80028c26:	3ef7c783          	lbu	a5,1007(a5) # 80051011 <excpt+0x1>
    80028c2a:	c789                	beqz	a5,80028c34 <vec_test_11+0xb2>
    80028c2c:	6498                	ld	a4,8(s1)
    80028c2e:	4789                	li	a5,2
    80028c30:	00f70c63          	beq	a4,a5,80028c48 <vec_test_11+0xc6>
    80028c34:	00004517          	auipc	a0,0x4
    80028c38:	70450513          	addi	a0,a0,1796 # 8002d338 <__func__.0+0x318>
    80028c3c:	17e020ef          	jal	8002adba <printf>
    80028c40:	02900513          	li	a0,41
    80028c44:	665000ef          	jal	80029aa8 <putchar>
    80028c48:	4529                	li	a0,10
    80028c4a:	65f000ef          	jal	80029aa8 <putchar>
    80028c4e:	00028417          	auipc	s0,0x28
    80028c52:	3c344403          	lbu	s0,963(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028c56:	00004597          	auipc	a1,0x4
    80028c5a:	69a58593          	addi	a1,a1,1690 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028c5e:	cc11                	beqz	s0,80028c7a <vec_test_11+0xf8>
    80028c60:	6498                	ld	a4,8(s1)
    80028c62:	4789                	li	a5,2
    TEST_END();
    80028c64:	00004597          	auipc	a1,0x4
    80028c68:	67c58593          	addi	a1,a1,1660 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vtype.vill=1",
    80028c6c:	00f70763          	beq	a4,a5,80028c7a <vec_test_11+0xf8>
    80028c70:	4401                	li	s0,0
    TEST_END();
    80028c72:	00004597          	auipc	a1,0x4
    80028c76:	67e58593          	addi	a1,a1,1662 # 8002d2f0 <__func__.0+0x2d0>
    80028c7a:	00004517          	auipc	a0,0x4
    80028c7e:	71e50513          	addi	a0,a0,1822 # 8002d398 <__func__.0+0x378>
    80028c82:	138020ef          	jal	8002adba <printf>
    80028c86:	4511                	li	a0,4
    80028c88:	9e6d80ef          	jal	80000e6e <goto_priv>
    80028c8c:	affd80ef          	jal	8000178a <reset_state>

}
    80028c90:	60e2                	ld	ra,24(sp)
    80028c92:	8522                	mv	a0,s0
    80028c94:	6442                	ld	s0,16(sp)
    80028c96:	64a2                	ld	s1,8(sp)
    80028c98:	6105                	addi	sp,sp,32
    80028c9a:	8082                	ret

0000000080028c9c <vec_test_12>:

bool vec_test_12(){
    80028c9c:	1141                	addi	sp,sp,-16

    TEST_START();
    80028c9e:	00004597          	auipc	a1,0x4
    80028ca2:	2c258593          	addi	a1,a1,706 # 8002cf60 <__func__.12>
    80028ca6:	00004517          	auipc	a0,0x4
    80028caa:	65a50513          	addi	a0,a0,1626 # 8002d300 <__func__.0+0x2e0>
bool vec_test_12(){
    80028cae:	e406                	sd	ra,8(sp)
    TEST_START();
    80028cb0:	10a020ef          	jal	8002adba <printf>
    80028cb4:	4529                	li	a0,10
    80028cb6:	5f3000ef          	jal	80029aa8 <putchar>
    //实现必须提供与所有受支持的 SEW 设置对应的 EEW 向量加载和存储。设置 EEW 宽度不受支持，执行向量加载/存储编码
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028cba:	20000793          	li	a5,512
    80028cbe:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028cc2:	40000793          	li	a5,1024
    80028cc6:	3007b073          	csrc	mstatus,a5

    // set_vtype_with_invalid_eew();       //环境不支持设置



    TEST_END();
    80028cca:	00004597          	auipc	a1,0x4
    80028cce:	61658593          	addi	a1,a1,1558 # 8002d2e0 <__func__.0+0x2c0>
    80028cd2:	00004517          	auipc	a0,0x4
    80028cd6:	6c650513          	addi	a0,a0,1734 # 8002d398 <__func__.0+0x378>
    80028cda:	0e0020ef          	jal	8002adba <printf>
    80028cde:	4511                	li	a0,4
    80028ce0:	98ed80ef          	jal	80000e6e <goto_priv>
    80028ce4:	aa7d80ef          	jal	8000178a <reset_state>

}
    80028ce8:	60a2                	ld	ra,8(sp)
    80028cea:	4505                	li	a0,1
    80028cec:	0141                	addi	sp,sp,16
    80028cee:	8082                	ret

0000000080028cf0 <vec_test_13>:

bool vec_test_13(){
    80028cf0:	1141                	addi	sp,sp,-16

    TEST_START();
    80028cf2:	00004597          	auipc	a1,0x4
    80028cf6:	27e58593          	addi	a1,a1,638 # 8002cf70 <__func__.11>
    80028cfa:	00004517          	auipc	a0,0x4
    80028cfe:	60650513          	addi	a0,a0,1542 # 8002d300 <__func__.0+0x2e0>
bool vec_test_13(){
    80028d02:	e406                	sd	ra,8(sp)
    TEST_START();
    80028d04:	0b6020ef          	jal	8002adba <printf>
    80028d08:	4529                	li	a0,10
    80028d0a:	59f000ef          	jal	80029aa8 <putchar>
    //设置不支持的 EEW 值，执行 vl<nf>r 指令

    TEST_END();
    80028d0e:	00004597          	auipc	a1,0x4
    80028d12:	5d258593          	addi	a1,a1,1490 # 8002d2e0 <__func__.0+0x2c0>
    80028d16:	00004517          	auipc	a0,0x4
    80028d1a:	68250513          	addi	a0,a0,1666 # 8002d398 <__func__.0+0x378>
    80028d1e:	09c020ef          	jal	8002adba <printf>
    80028d22:	4511                	li	a0,4
    80028d24:	94ad80ef          	jal	80000e6e <goto_priv>
    80028d28:	a63d80ef          	jal	8000178a <reset_state>

}
    80028d2c:	60a2                	ld	ra,8(sp)
    80028d2e:	4505                	li	a0,1
    80028d30:	0141                	addi	sp,sp,16
    80028d32:	8082                	ret

0000000080028d34 <vec_test_14>:



bool vec_test_14(){
    80028d34:	1101                	addi	sp,sp,-32

    TEST_START();
    80028d36:	00004597          	auipc	a1,0x4
    80028d3a:	24a58593          	addi	a1,a1,586 # 8002cf80 <__func__.10>
    80028d3e:	00004517          	auipc	a0,0x4
    80028d42:	5c250513          	addi	a0,a0,1474 # 8002d300 <__func__.0+0x2e0>
bool vec_test_14(){
    80028d46:	ec06                	sd	ra,24(sp)
    80028d48:	e822                	sd	s0,16(sp)
    80028d4a:	e426                	sd	s1,8(sp)
    TEST_START();
    80028d4c:	06e020ef          	jal	8002adba <printf>
    80028d50:	4529                	li	a0,10
    80028d52:	557000ef          	jal	80029aa8 <putchar>
    //浮点单元状态字段 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028d56:	20000793          	li	a5,512
    80028d5a:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028d5e:	40000793          	li	a5,1024
    80028d62:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028d66:	6709                	lui	a4,0x2
    80028d68:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028d6c:	6791                	lui	a5,0x4
    80028d6e:	3007b073          	csrc	mstatus,a5
// 设置向量浮点加法指令的执行条件
static inline void set_vfadd_conditions(int sew, int lmull, int vl, float v0_init, float v4_init, float v6_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80028d72:	00010617          	auipc	a2,0x10
    80028d76:	b4662787          	flw	fa5,-1210(a2) # 800388b8 <__func__.0+0xb898>
    80028d7a:	00010617          	auipc	a2,0x10
    80028d7e:	b4262707          	flw	fa4,-1214(a2) # 800388bc <__func__.0+0xb89c>
    80028d82:	00010617          	auipc	a2,0x10
    80028d86:	b3e62687          	flw	fa3,-1218(a2) # 800388c0 <__func__.0+0xb8a0>
    80028d8a:	46a1                	li	a3,8
    80028d8c:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028d90:	5e07d057          	vfmv.v.f	v0,fa5
    80028d94:	5e075257          	vfmv.v.f	v4,fa4
    80028d98:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRC(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs = 0
    80028d9c:	30073073          	csrc	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028da0:	3007b073          	csrc	mstatus,a5

    TEST_SETUP_EXCEPT();
    80028da4:	fcfd70ef          	jal	80000d72 <test_setup_except_function>
    );
}

// 执行向量浮点加法指令
static inline void execute_vfadd() {
    asm volatile (
    80028da8:	02431457          	vfadd.vv	v8,v4,v6
    // 执行 vfadd 指令
    execute_vfadd();

    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028dac:	08200593          	li	a1,130
    80028db0:	00010617          	auipc	a2,0x10
    80028db4:	85860613          	addi	a2,a2,-1960 # 80038608 <__func__.0+0xb5e8>
    80028db8:	00004517          	auipc	a0,0x4
    80028dbc:	56050513          	addi	a0,a0,1376 # 8002d318 <__func__.0+0x2f8>
    80028dc0:	7fb010ef          	jal	8002adba <printf>
    80028dc4:	00028797          	auipc	a5,0x28
    80028dc8:	24d7c783          	lbu	a5,589(a5) # 80051011 <excpt+0x1>
    80028dcc:	00028497          	auipc	s1,0x28
    80028dd0:	24448493          	addi	s1,s1,580 # 80051010 <excpt>
    80028dd4:	00004597          	auipc	a1,0x4
    80028dd8:	51c58593          	addi	a1,a1,1308 # 8002d2f0 <__func__.0+0x2d0>
    80028ddc:	cf89                	beqz	a5,80028df6 <vec_test_14+0xc2>
    80028dde:	6498                	ld	a4,8(s1)
    80028de0:	4789                	li	a5,2
    80028de2:	00004597          	auipc	a1,0x4
    80028de6:	4fe58593          	addi	a1,a1,1278 # 8002d2e0 <__func__.0+0x2c0>
    80028dea:	00f70663          	beq	a4,a5,80028df6 <vec_test_14+0xc2>
    80028dee:	00004597          	auipc	a1,0x4
    80028df2:	50258593          	addi	a1,a1,1282 # 8002d2f0 <__func__.0+0x2d0>
    80028df6:	00004517          	auipc	a0,0x4
    80028dfa:	53a50513          	addi	a0,a0,1338 # 8002d330 <__func__.0+0x310>
    80028dfe:	7bd010ef          	jal	8002adba <printf>
    80028e02:	00028797          	auipc	a5,0x28
    80028e06:	20f7c783          	lbu	a5,527(a5) # 80051011 <excpt+0x1>
    80028e0a:	c789                	beqz	a5,80028e14 <vec_test_14+0xe0>
    80028e0c:	6498                	ld	a4,8(s1)
    80028e0e:	4789                	li	a5,2
    80028e10:	00f70c63          	beq	a4,a5,80028e28 <vec_test_14+0xf4>
    80028e14:	00004517          	auipc	a0,0x4
    80028e18:	52450513          	addi	a0,a0,1316 # 8002d338 <__func__.0+0x318>
    80028e1c:	79f010ef          	jal	8002adba <printf>
    80028e20:	02900513          	li	a0,41
    80028e24:	485000ef          	jal	80029aa8 <putchar>
    80028e28:	4529                	li	a0,10
    80028e2a:	47f000ef          	jal	80029aa8 <putchar>
    80028e2e:	00028417          	auipc	s0,0x28
    80028e32:	1e344403          	lbu	s0,483(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028e36:	00004597          	auipc	a1,0x4
    80028e3a:	4ba58593          	addi	a1,a1,1210 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028e3e:	cc11                	beqz	s0,80028e5a <vec_test_14+0x126>
    80028e40:	6498                	ld	a4,8(s1)
    80028e42:	4789                	li	a5,2
    TEST_END();
    80028e44:	00004597          	auipc	a1,0x4
    80028e48:	49c58593          	addi	a1,a1,1180 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0",
    80028e4c:	00f70763          	beq	a4,a5,80028e5a <vec_test_14+0x126>
    80028e50:	4401                	li	s0,0
    TEST_END();
    80028e52:	00004597          	auipc	a1,0x4
    80028e56:	49e58593          	addi	a1,a1,1182 # 8002d2f0 <__func__.0+0x2d0>
    80028e5a:	00004517          	auipc	a0,0x4
    80028e5e:	53e50513          	addi	a0,a0,1342 # 8002d398 <__func__.0+0x378>
    80028e62:	759010ef          	jal	8002adba <printf>
    80028e66:	4511                	li	a0,4
    80028e68:	806d80ef          	jal	80000e6e <goto_priv>
    80028e6c:	91fd80ef          	jal	8000178a <reset_state>

}
    80028e70:	60e2                	ld	ra,24(sp)
    80028e72:	8522                	mv	a0,s0
    80028e74:	6442                	ld	s0,16(sp)
    80028e76:	64a2                	ld	s1,8(sp)
    80028e78:	6105                	addi	sp,sp,32
    80028e7a:	8082                	ret

0000000080028e7c <vec_test_15>:


bool vec_test_15(){
    80028e7c:	1101                	addi	sp,sp,-32

    TEST_START();
    80028e7e:	00004597          	auipc	a1,0x4
    80028e82:	11258593          	addi	a1,a1,274 # 8002cf90 <__func__.9>
    80028e86:	00004517          	auipc	a0,0x4
    80028e8a:	47a50513          	addi	a0,a0,1146 # 8002d300 <__func__.0+0x2e0>
bool vec_test_15(){
    80028e8e:	ec06                	sd	ra,24(sp)
    80028e90:	e822                	sd	s0,16(sp)
    80028e92:	e426                	sd	s1,8(sp)
    TEST_START();
    80028e94:	727010ef          	jal	8002adba <printf>
    80028e98:	4529                	li	a0,10
    80028e9a:	40f000ef          	jal	80029aa8 <putchar>
    //如果实现了虚拟化扩展且 V=1，如果 vsstatus.FS 或 mstatus.FS 被设置为 Off，任何尝试执行向量浮点指令的操作
    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028e9e:	20000793          	li	a5,512
    80028ea2:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_MSTATUS, 1ULL << 10); 
    80028ea6:	40000793          	li	a5,1024
    80028eaa:	3007b073          	csrc	mstatus,a5

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028eae:	6709                	lui	a4,0x2
    80028eb0:	30072073          	csrs	mstatus,a4
    CSRC(CSR_MSTATUS, 1ULL << 14); 
    80028eb4:	6791                	lui	a5,0x4
    80028eb6:	3007b073          	csrc	mstatus,a5
    asm volatile (
    80028eba:	00010617          	auipc	a2,0x10
    80028ebe:	9fe62787          	flw	fa5,-1538(a2) # 800388b8 <__func__.0+0xb898>
    80028ec2:	00010617          	auipc	a2,0x10
    80028ec6:	9fa62707          	flw	fa4,-1542(a2) # 800388bc <__func__.0+0xb89c>
    80028eca:	00010617          	auipc	a2,0x10
    80028ece:	9f662687          	flw	fa3,-1546(a2) # 800388c0 <__func__.0+0xb8a0>
    80028ed2:	46a1                	li	a3,8
    80028ed4:	0116f2d7          	vsetvli	t0,a3,e32,m2,tu,mu
    80028ed8:	5e07d057          	vfmv.v.f	v0,fa5
    80028edc:	5e075257          	vfmv.v.f	v4,fa4
    80028ee0:	5e06d357          	vfmv.v.f	v6,fa3
    float v6_init = 2.0; // 初始化 v6 的值为 2.0

    // 设置 vfadd 执行条件
    set_vfadd_conditions(sew, lmull, vl, v0_init, v4_init, v6_init);

    CSRS(CSR_MSTATUS, 1ULL << 13);      //设置mstatus.fs != 0
    80028ee4:	30072073          	csrs	mstatus,a4
    CSRS(CSR_MSTATUS, 1ULL << 14); 
    80028ee8:	3007a073          	csrs	mstatus,a5
    CSRC(CSR_VSSTATUS, 1ULL << 13);      //设置vsstatus.fs = 0
    80028eec:	20073073          	csrc	vsstatus,a4
    CSRC(CSR_VSSTATUS, 1ULL << 14); 
    80028ef0:	2007b073          	csrc	vsstatus,a5

    TEST_SETUP_EXCEPT();
    80028ef4:	e7fd70ef          	jal	80000d72 <test_setup_except_function>
    // 执行 vfadd 指令
    goto_priv(PRIV_VU);
    80028ef8:	4501                	li	a0,0
    80028efa:	f75d70ef          	jal	80000e6e <goto_priv>
    asm volatile (
    80028efe:	02431457          	vfadd.vv	v8,v4,v6
    execute_vfadd();
    excpt_info();
    80028f02:	8b2d80ef          	jal	80000fb4 <excpt_info>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80028f06:	08200593          	li	a1,130
    80028f0a:	0000f617          	auipc	a2,0xf
    80028f0e:	73e60613          	addi	a2,a2,1854 # 80038648 <__func__.0+0xb628>
    80028f12:	00004517          	auipc	a0,0x4
    80028f16:	40650513          	addi	a0,a0,1030 # 8002d318 <__func__.0+0x2f8>
    80028f1a:	6a1010ef          	jal	8002adba <printf>
    80028f1e:	00028797          	auipc	a5,0x28
    80028f22:	0f37c783          	lbu	a5,243(a5) # 80051011 <excpt+0x1>
    80028f26:	00028497          	auipc	s1,0x28
    80028f2a:	0ea48493          	addi	s1,s1,234 # 80051010 <excpt>
    80028f2e:	00004597          	auipc	a1,0x4
    80028f32:	3c258593          	addi	a1,a1,962 # 8002d2f0 <__func__.0+0x2d0>
    80028f36:	cf89                	beqz	a5,80028f50 <vec_test_15+0xd4>
    80028f38:	6498                	ld	a4,8(s1)
    80028f3a:	4789                	li	a5,2
    80028f3c:	00004597          	auipc	a1,0x4
    80028f40:	3a458593          	addi	a1,a1,932 # 8002d2e0 <__func__.0+0x2c0>
    80028f44:	00f70663          	beq	a4,a5,80028f50 <vec_test_15+0xd4>
    80028f48:	00004597          	auipc	a1,0x4
    80028f4c:	3a858593          	addi	a1,a1,936 # 8002d2f0 <__func__.0+0x2d0>
    80028f50:	00004517          	auipc	a0,0x4
    80028f54:	3e050513          	addi	a0,a0,992 # 8002d330 <__func__.0+0x310>
    80028f58:	663010ef          	jal	8002adba <printf>
    80028f5c:	00028797          	auipc	a5,0x28
    80028f60:	0b57c783          	lbu	a5,181(a5) # 80051011 <excpt+0x1>
    80028f64:	c789                	beqz	a5,80028f6e <vec_test_15+0xf2>
    80028f66:	6498                	ld	a4,8(s1)
    80028f68:	4789                	li	a5,2
    80028f6a:	00f70c63          	beq	a4,a5,80028f82 <vec_test_15+0x106>
    80028f6e:	00004517          	auipc	a0,0x4
    80028f72:	3ca50513          	addi	a0,a0,970 # 8002d338 <__func__.0+0x318>
    80028f76:	645010ef          	jal	8002adba <printf>
    80028f7a:	02900513          	li	a0,41
    80028f7e:	32b000ef          	jal	80029aa8 <putchar>
    80028f82:	4529                	li	a0,10
    80028f84:	325000ef          	jal	80029aa8 <putchar>
    80028f88:	00028417          	auipc	s0,0x28
    80028f8c:	08944403          	lbu	s0,137(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80028f90:	00004597          	auipc	a1,0x4
    80028f94:	36058593          	addi	a1,a1,864 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80028f98:	cc11                	beqz	s0,80028fb4 <vec_test_15+0x138>
    80028f9a:	6498                	ld	a4,8(s1)
    80028f9c:	4789                	li	a5,2
    TEST_END();
    80028f9e:	00004597          	auipc	a1,0x4
    80028fa2:	34258593          	addi	a1,a1,834 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfadd cause to ILI when mstatus.fs=0 or vsstatus.fs=0",
    80028fa6:	00f70763          	beq	a4,a5,80028fb4 <vec_test_15+0x138>
    80028faa:	4401                	li	s0,0
    TEST_END();
    80028fac:	00004597          	auipc	a1,0x4
    80028fb0:	34458593          	addi	a1,a1,836 # 8002d2f0 <__func__.0+0x2d0>
    80028fb4:	00004517          	auipc	a0,0x4
    80028fb8:	3e450513          	addi	a0,a0,996 # 8002d398 <__func__.0+0x378>
    80028fbc:	5ff010ef          	jal	8002adba <printf>
    80028fc0:	4511                	li	a0,4
    80028fc2:	eadd70ef          	jal	80000e6e <goto_priv>
    80028fc6:	fc4d80ef          	jal	8000178a <reset_state>

}
    80028fca:	60e2                	ld	ra,24(sp)
    80028fcc:	8522                	mv	a0,s0
    80028fce:	6442                	ld	s0,16(sp)
    80028fd0:	64a2                	ld	s1,8(sp)
    80028fd2:	6105                	addi	sp,sp,32
    80028fd4:	8082                	ret

0000000080028fd6 <vec_test_16>:





bool vec_test_16(){
    80028fd6:	1101                	addi	sp,sp,-32

    TEST_START();
    80028fd8:	00004597          	auipc	a1,0x4
    80028fdc:	fc858593          	addi	a1,a1,-56 # 8002cfa0 <__func__.8>
    80028fe0:	00004517          	auipc	a0,0x4
    80028fe4:	32050513          	addi	a0,a0,800 # 8002d300 <__func__.0+0x2e0>
bool vec_test_16(){
    80028fe8:	ec06                	sd	ra,24(sp)
    80028fea:	e822                	sd	s0,16(sp)
    80028fec:	e426                	sd	s1,8(sp)
    TEST_START();
    80028fee:	5cd010ef          	jal	8002adba <printf>
    80028ff2:	4529                	li	a0,10
    80028ff4:	2b5000ef          	jal	80029aa8 <putchar>
    //如果 vstart 非零，执行vector reduction instructions操作


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80028ff8:	20000793          	li	a5,512
    80028ffc:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029000:	40000793          	li	a5,1024
    80029004:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTART,(uint64_t)-1)
    80029008:	57fd                	li	a5,-1
    8002900a:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    8002900e:	008025f3          	csrr	a1,vstart
    80029012:	0000f517          	auipc	a0,0xf
    80029016:	55650513          	addi	a0,a0,1366 # 80038568 <__func__.0+0xb548>
    8002901a:	5a1010ef          	jal	8002adba <printf>
    asm volatile (
    8002901e:	4789                	li	a5,2
    80029020:	0117f2d7          	vsetvli	t0,a5,e32,m2,tu,mu
    80029024:	5e00b057          	vmv.v.i	v0,1
    80029028:	5e003257          	vmv.v.i	v4,0
    8002902c:	5e00b357          	vmv.v.i	v6,1
    int vs2_init = 1;    // 初始化 v6（源数据）为 1


    // 设置 vredsum.vs 的执行条件
    set_vredsum_vs_conditions(sew, lmull, vl, vs1_init, vs2_init);
    excpt_info();
    80029030:	f85d70ef          	jal	80000fb4 <excpt_info>


    TEST_SETUP_EXCEPT();
    80029034:	d3fd70ef          	jal	80000d72 <test_setup_except_function>
    asm volatile (
    80029038:	00222157          	vredsum.vs	v2,v2,v4,v0.t
    execute_vredsum_vs();           // 执行 vredsum.vs 指令并获取结果
    excpt_info();
    8002903c:	f79d70ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    80029040:	08200593          	li	a1,130
    80029044:	0000f617          	auipc	a2,0xf
    80029048:	65460613          	addi	a2,a2,1620 # 80038698 <__func__.0+0xb678>
    8002904c:	00004517          	auipc	a0,0x4
    80029050:	2cc50513          	addi	a0,a0,716 # 8002d318 <__func__.0+0x2f8>
    80029054:	567010ef          	jal	8002adba <printf>
    80029058:	00028797          	auipc	a5,0x28
    8002905c:	fb97c783          	lbu	a5,-71(a5) # 80051011 <excpt+0x1>
    80029060:	00028497          	auipc	s1,0x28
    80029064:	fb048493          	addi	s1,s1,-80 # 80051010 <excpt>
    80029068:	00004597          	auipc	a1,0x4
    8002906c:	28858593          	addi	a1,a1,648 # 8002d2f0 <__func__.0+0x2d0>
    80029070:	cf89                	beqz	a5,8002908a <vec_test_16+0xb4>
    80029072:	6498                	ld	a4,8(s1)
    80029074:	4789                	li	a5,2
    80029076:	00004597          	auipc	a1,0x4
    8002907a:	26a58593          	addi	a1,a1,618 # 8002d2e0 <__func__.0+0x2c0>
    8002907e:	00f70663          	beq	a4,a5,8002908a <vec_test_16+0xb4>
    80029082:	00004597          	auipc	a1,0x4
    80029086:	26e58593          	addi	a1,a1,622 # 8002d2f0 <__func__.0+0x2d0>
    8002908a:	00004517          	auipc	a0,0x4
    8002908e:	2a650513          	addi	a0,a0,678 # 8002d330 <__func__.0+0x310>
    80029092:	529010ef          	jal	8002adba <printf>
    80029096:	00028797          	auipc	a5,0x28
    8002909a:	f7b7c783          	lbu	a5,-133(a5) # 80051011 <excpt+0x1>
    8002909e:	c789                	beqz	a5,800290a8 <vec_test_16+0xd2>
    800290a0:	6498                	ld	a4,8(s1)
    800290a2:	4789                	li	a5,2
    800290a4:	00f70c63          	beq	a4,a5,800290bc <vec_test_16+0xe6>
    800290a8:	00004517          	auipc	a0,0x4
    800290ac:	29050513          	addi	a0,a0,656 # 8002d338 <__func__.0+0x318>
    800290b0:	50b010ef          	jal	8002adba <printf>
    800290b4:	02900513          	li	a0,41
    800290b8:	1f1000ef          	jal	80029aa8 <putchar>
    800290bc:	4529                	li	a0,10
    800290be:	1eb000ef          	jal	80029aa8 <putchar>
    800290c2:	00028417          	auipc	s0,0x28
    800290c6:	f4f44403          	lbu	s0,-177(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800290ca:	00004597          	auipc	a1,0x4
    800290ce:	22658593          	addi	a1,a1,550 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    800290d2:	cc11                	beqz	s0,800290ee <vec_test_16+0x118>
    800290d4:	6498                	ld	a4,8(s1)
    800290d6:	4789                	li	a5,2
    TEST_END();
    800290d8:	00004597          	auipc	a1,0x4
    800290dc:	20858593          	addi	a1,a1,520 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vredsum.vs cause to ILI when vstart!=0",
    800290e0:	00f70763          	beq	a4,a5,800290ee <vec_test_16+0x118>
    800290e4:	4401                	li	s0,0
    TEST_END();
    800290e6:	00004597          	auipc	a1,0x4
    800290ea:	20a58593          	addi	a1,a1,522 # 8002d2f0 <__func__.0+0x2d0>
    800290ee:	00004517          	auipc	a0,0x4
    800290f2:	2aa50513          	addi	a0,a0,682 # 8002d398 <__func__.0+0x378>
    800290f6:	4c5010ef          	jal	8002adba <printf>
    800290fa:	4511                	li	a0,4
    800290fc:	d73d70ef          	jal	80000e6e <goto_priv>
    80029100:	e8ad80ef          	jal	8000178a <reset_state>

}
    80029104:	60e2                	ld	ra,24(sp)
    80029106:	8522                	mv	a0,s0
    80029108:	6442                	ld	s0,16(sp)
    8002910a:	64a2                	ld	s1,8(sp)
    8002910c:	6105                	addi	sp,sp,32
    8002910e:	8082                	ret

0000000080029110 <vec_test_17>:



bool vec_test_17(){
    80029110:	1101                	addi	sp,sp,-32

    TEST_START();
    80029112:	00004597          	auipc	a1,0x4
    80029116:	e9e58593          	addi	a1,a1,-354 # 8002cfb0 <__func__.7>
    8002911a:	00004517          	auipc	a0,0x4
    8002911e:	1e650513          	addi	a0,a0,486 # 8002d300 <__func__.0+0x2e0>
bool vec_test_17(){
    80029122:	ec06                	sd	ra,24(sp)
    80029124:	e822                	sd	s0,16(sp)
    80029126:	e426                	sd	s1,8(sp)
    TEST_START();
    80029128:	493010ef          	jal	8002adba <printf>
    8002912c:	4529                	li	a0,10
    8002912e:	17b000ef          	jal	80029aa8 <putchar>
    //如果 vstart 非零，执行vcpop.m指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029132:	20000793          	li	a5,512
    80029136:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002913a:	40000793          	li	a5,1024
    8002913e:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTART,(uint64_t)-1)
    80029142:	57fd                	li	a5,-1
    80029144:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029148:	008025f3          	csrr	a1,vstart
    8002914c:	0000f517          	auipc	a0,0xf
    80029150:	41c50513          	addi	a0,a0,1052 # 80038568 <__func__.0+0xb548>
    80029154:	467010ef          	jal	8002adba <printf>
    asm volatile (
    80029158:	47a1                	li	a5,8
    8002915a:	4745                	li	a4,17
    8002915c:	80e7f2d7          	vsetvl	t0,a5,a4
    80029160:	5e00b057          	vmv.v.i	v0,1
    80029164:	5e00b157          	vmv.v.i	v2,1
    int v2_init = 1;     // 初始化 v2 的值为全 1

    // 设置 vcpop.m 的执行条件
    set_vcpop_conditions(vl, sew, lmull, v0_init, v2_init);

    TEST_SETUP_EXCEPT();
    80029168:	c0bd70ef          	jal	80000d72 <test_setup_except_function>
    // 执行 vcpop.m 指令并返回结果
    uint32_t result = execute_vcpop_v2();
    8002916c:	402827d7          	vcpop.m	a5,v2,v0.t

    excpt_info();
    80029170:	e45d70ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    80029174:	08200593          	li	a1,130
    80029178:	0000f617          	auipc	a2,0xf
    8002917c:	56060613          	addi	a2,a2,1376 # 800386d8 <__func__.0+0xb6b8>
    80029180:	00004517          	auipc	a0,0x4
    80029184:	19850513          	addi	a0,a0,408 # 8002d318 <__func__.0+0x2f8>
    80029188:	433010ef          	jal	8002adba <printf>
    8002918c:	00028797          	auipc	a5,0x28
    80029190:	e857c783          	lbu	a5,-379(a5) # 80051011 <excpt+0x1>
    80029194:	00028497          	auipc	s1,0x28
    80029198:	e7c48493          	addi	s1,s1,-388 # 80051010 <excpt>
    8002919c:	00004597          	auipc	a1,0x4
    800291a0:	15458593          	addi	a1,a1,340 # 8002d2f0 <__func__.0+0x2d0>
    800291a4:	cf89                	beqz	a5,800291be <vec_test_17+0xae>
    800291a6:	6498                	ld	a4,8(s1)
    800291a8:	4789                	li	a5,2
    800291aa:	00004597          	auipc	a1,0x4
    800291ae:	13658593          	addi	a1,a1,310 # 8002d2e0 <__func__.0+0x2c0>
    800291b2:	00f70663          	beq	a4,a5,800291be <vec_test_17+0xae>
    800291b6:	00004597          	auipc	a1,0x4
    800291ba:	13a58593          	addi	a1,a1,314 # 8002d2f0 <__func__.0+0x2d0>
    800291be:	00004517          	auipc	a0,0x4
    800291c2:	17250513          	addi	a0,a0,370 # 8002d330 <__func__.0+0x310>
    800291c6:	3f5010ef          	jal	8002adba <printf>
    800291ca:	00028797          	auipc	a5,0x28
    800291ce:	e477c783          	lbu	a5,-441(a5) # 80051011 <excpt+0x1>
    800291d2:	c789                	beqz	a5,800291dc <vec_test_17+0xcc>
    800291d4:	6498                	ld	a4,8(s1)
    800291d6:	4789                	li	a5,2
    800291d8:	00f70c63          	beq	a4,a5,800291f0 <vec_test_17+0xe0>
    800291dc:	00004517          	auipc	a0,0x4
    800291e0:	15c50513          	addi	a0,a0,348 # 8002d338 <__func__.0+0x318>
    800291e4:	3d7010ef          	jal	8002adba <printf>
    800291e8:	02900513          	li	a0,41
    800291ec:	0bd000ef          	jal	80029aa8 <putchar>
    800291f0:	4529                	li	a0,10
    800291f2:	0b7000ef          	jal	80029aa8 <putchar>
    800291f6:	00028417          	auipc	s0,0x28
    800291fa:	e1b44403          	lbu	s0,-485(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800291fe:	00004597          	auipc	a1,0x4
    80029202:	0f258593          	addi	a1,a1,242 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    80029206:	cc11                	beqz	s0,80029222 <vec_test_17+0x112>
    80029208:	6498                	ld	a4,8(s1)
    8002920a:	4789                	li	a5,2
    TEST_END();
    8002920c:	00004597          	auipc	a1,0x4
    80029210:	0d458593          	addi	a1,a1,212 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcpop.m cause to ILI when vstart!=0",
    80029214:	00f70763          	beq	a4,a5,80029222 <vec_test_17+0x112>
    80029218:	4401                	li	s0,0
    TEST_END();
    8002921a:	00004597          	auipc	a1,0x4
    8002921e:	0d658593          	addi	a1,a1,214 # 8002d2f0 <__func__.0+0x2d0>
    80029222:	00004517          	auipc	a0,0x4
    80029226:	17650513          	addi	a0,a0,374 # 8002d398 <__func__.0+0x378>
    8002922a:	391010ef          	jal	8002adba <printf>
    8002922e:	4511                	li	a0,4
    80029230:	c3fd70ef          	jal	80000e6e <goto_priv>
    80029234:	d56d80ef          	jal	8000178a <reset_state>

}
    80029238:	60e2                	ld	ra,24(sp)
    8002923a:	8522                	mv	a0,s0
    8002923c:	6442                	ld	s0,16(sp)
    8002923e:	64a2                	ld	s1,8(sp)
    80029240:	6105                	addi	sp,sp,32
    80029242:	8082                	ret

0000000080029244 <vec_test_18>:



bool vec_test_18(){
    80029244:	1101                	addi	sp,sp,-32

    TEST_START();
    80029246:	00004597          	auipc	a1,0x4
    8002924a:	d7a58593          	addi	a1,a1,-646 # 8002cfc0 <__func__.6>
    8002924e:	00004517          	auipc	a0,0x4
    80029252:	0b250513          	addi	a0,a0,178 # 8002d300 <__func__.0+0x2e0>
bool vec_test_18(){
    80029256:	ec06                	sd	ra,24(sp)
    80029258:	e822                	sd	s0,16(sp)
    8002925a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002925c:	35f010ef          	jal	8002adba <printf>
    80029260:	4529                	li	a0,10
    80029262:	047000ef          	jal	80029aa8 <putchar>
    //如果 vstart 非零，执行vfirst指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    80029266:	20000793          	li	a5,512
    8002926a:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    8002926e:	40000793          	li	a5,1024
    80029272:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTART,(uint64_t)-1)
    80029276:	57fd                	li	a5,-1
    80029278:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    8002927c:	008025f3          	csrr	a1,vstart
    80029280:	0000f517          	auipc	a0,0xf
    80029284:	2e850513          	addi	a0,a0,744 # 80038568 <__func__.0+0xb548>
    80029288:	333010ef          	jal	8002adba <printf>
    int lmull = 1;     // LMUL = 1
    int vl = 2;        // 向量长度（处理 2 个元素）
    int v0_init = 1;   // 初始化 v0 的值为 1
    int v4_init = 2;   // 初始化 v4 的值为 2

    TEST_SETUP_EXCEPT();
    8002928c:	ae7d70ef          	jal	80000d72 <test_setup_except_function>
    asm volatile (
    80029290:	4785                	li	a5,1
    80029292:	4749                	li	a4,18
    80029294:	80e7f2d7          	vsetvl	t0,a5,a4
    80029298:	5e00b057          	vmv.v.i	v0,1
    8002929c:	5e013257          	vmv.v.i	v4,2

    // 设置 vfirst.m 的执行条件
    set_vfirst_m_conditions(vl, sew, lmull, v0_init, v4_init);
    excpt_info();
    800292a0:	d15d70ef          	jal	80000fb4 <excpt_info>

    TEST_SETUP_EXCEPT();
    800292a4:	acfd70ef          	jal	80000d72 <test_setup_except_function>
    EXECUTE_VFIRST_M_V3();
    800292a8:	4038a7d7          	vfirst.m	a5,v3,v0.t
    excpt_info();
    800292ac:	d09d70ef          	jal	80000fb4 <excpt_info>


    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    800292b0:	08200593          	li	a1,130
    800292b4:	0000f617          	auipc	a2,0xf
    800292b8:	46460613          	addi	a2,a2,1124 # 80038718 <__func__.0+0xb6f8>
    800292bc:	00004517          	auipc	a0,0x4
    800292c0:	05c50513          	addi	a0,a0,92 # 8002d318 <__func__.0+0x2f8>
    800292c4:	2f7010ef          	jal	8002adba <printf>
    800292c8:	00028797          	auipc	a5,0x28
    800292cc:	d497c783          	lbu	a5,-695(a5) # 80051011 <excpt+0x1>
    800292d0:	00028497          	auipc	s1,0x28
    800292d4:	d4048493          	addi	s1,s1,-704 # 80051010 <excpt>
    800292d8:	00004597          	auipc	a1,0x4
    800292dc:	01858593          	addi	a1,a1,24 # 8002d2f0 <__func__.0+0x2d0>
    800292e0:	cf89                	beqz	a5,800292fa <vec_test_18+0xb6>
    800292e2:	6498                	ld	a4,8(s1)
    800292e4:	4789                	li	a5,2
    800292e6:	00004597          	auipc	a1,0x4
    800292ea:	ffa58593          	addi	a1,a1,-6 # 8002d2e0 <__func__.0+0x2c0>
    800292ee:	00f70663          	beq	a4,a5,800292fa <vec_test_18+0xb6>
    800292f2:	00004597          	auipc	a1,0x4
    800292f6:	ffe58593          	addi	a1,a1,-2 # 8002d2f0 <__func__.0+0x2d0>
    800292fa:	00004517          	auipc	a0,0x4
    800292fe:	03650513          	addi	a0,a0,54 # 8002d330 <__func__.0+0x310>
    80029302:	2b9010ef          	jal	8002adba <printf>
    80029306:	00028797          	auipc	a5,0x28
    8002930a:	d0b7c783          	lbu	a5,-757(a5) # 80051011 <excpt+0x1>
    8002930e:	c789                	beqz	a5,80029318 <vec_test_18+0xd4>
    80029310:	6498                	ld	a4,8(s1)
    80029312:	4789                	li	a5,2
    80029314:	00f70c63          	beq	a4,a5,8002932c <vec_test_18+0xe8>
    80029318:	00004517          	auipc	a0,0x4
    8002931c:	02050513          	addi	a0,a0,32 # 8002d338 <__func__.0+0x318>
    80029320:	29b010ef          	jal	8002adba <printf>
    80029324:	02900513          	li	a0,41
    80029328:	780000ef          	jal	80029aa8 <putchar>
    8002932c:	4529                	li	a0,10
    8002932e:	77a000ef          	jal	80029aa8 <putchar>
    80029332:	00028417          	auipc	s0,0x28
    80029336:	cdf44403          	lbu	s0,-801(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002933a:	00004597          	auipc	a1,0x4
    8002933e:	fb658593          	addi	a1,a1,-74 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    80029342:	cc11                	beqz	s0,8002935e <vec_test_18+0x11a>
    80029344:	6498                	ld	a4,8(s1)
    80029346:	4789                	li	a5,2
    TEST_END();
    80029348:	00004597          	auipc	a1,0x4
    8002934c:	f9858593          	addi	a1,a1,-104 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vfirst.m cause to ILI when vstart!=0",
    80029350:	00f70763          	beq	a4,a5,8002935e <vec_test_18+0x11a>
    80029354:	4401                	li	s0,0
    TEST_END();
    80029356:	00004597          	auipc	a1,0x4
    8002935a:	f9a58593          	addi	a1,a1,-102 # 8002d2f0 <__func__.0+0x2d0>
    8002935e:	00004517          	auipc	a0,0x4
    80029362:	03a50513          	addi	a0,a0,58 # 8002d398 <__func__.0+0x378>
    80029366:	255010ef          	jal	8002adba <printf>
    8002936a:	4511                	li	a0,4
    8002936c:	b03d70ef          	jal	80000e6e <goto_priv>
    80029370:	c1ad80ef          	jal	8000178a <reset_state>

}
    80029374:	60e2                	ld	ra,24(sp)
    80029376:	8522                	mv	a0,s0
    80029378:	6442                	ld	s0,16(sp)
    8002937a:	64a2                	ld	s1,8(sp)
    8002937c:	6105                	addi	sp,sp,32
    8002937e:	8082                	ret

0000000080029380 <vec_test_19>:

bool vec_test_19(){
    80029380:	1101                	addi	sp,sp,-32

    TEST_START();
    80029382:	00004597          	auipc	a1,0x4
    80029386:	c4e58593          	addi	a1,a1,-946 # 8002cfd0 <__func__.5>
    8002938a:	00004517          	auipc	a0,0x4
    8002938e:	f7650513          	addi	a0,a0,-138 # 8002d300 <__func__.0+0x2e0>
bool vec_test_19(){
    80029392:	ec06                	sd	ra,24(sp)
    80029394:	e822                	sd	s0,16(sp)
    80029396:	e426                	sd	s1,8(sp)
    TEST_START();
    80029398:	223010ef          	jal	8002adba <printf>
    8002939c:	4529                	li	a0,10
    8002939e:	70a000ef          	jal	80029aa8 <putchar>
    //如果 vstart 非零，执行vmsbf指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800293a2:	20000793          	li	a5,512
    800293a6:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800293aa:	40000793          	li	a5,1024
    800293ae:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTART,(uint64_t)-1)
    800293b2:	57fd                	li	a5,-1
    800293b4:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800293b8:	008025f3          	csrr	a1,vstart
    800293bc:	0000f517          	auipc	a0,0xf
    800293c0:	1ac50513          	addi	a0,a0,428 # 80038568 <__func__.0+0xb548>
    800293c4:	1f7010ef          	jal	8002adba <printf>
    asm volatile (
    800293c8:	47a1                	li	a5,8
    800293ca:	4745                	li	a4,17
    800293cc:	80e7f2d7          	vsetvl	t0,a5,a4
    800293d0:	5e00b057          	vmv.v.i	v0,1
    800293d4:	5e003257          	vmv.v.i	v4,0
    int v4_init = 0;   // 初始化源寄存器 v4 的值为 0

    // 设置vmsbf.m执行条件
    set_vmsbfm_conditions(vl, sew, lmull, v0_init, v4_init);

    TEST_SETUP_EXCEPT();
    800293d8:	99bd70ef          	jal	80000d72 <test_setup_except_function>
    asm volatile (
    800293dc:	5040a1d7          	vmsbf.m	v3,v4,v0.t
    // 执行 vmsbf.m 指令
    execute_vmsbf_m();
    excpt_info();
    800293e0:	bd5d70ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    800293e4:	08200593          	li	a1,130
    800293e8:	0000f617          	auipc	a2,0xf
    800293ec:	37060613          	addi	a2,a2,880 # 80038758 <__func__.0+0xb738>
    800293f0:	00004517          	auipc	a0,0x4
    800293f4:	f2850513          	addi	a0,a0,-216 # 8002d318 <__func__.0+0x2f8>
    800293f8:	1c3010ef          	jal	8002adba <printf>
    800293fc:	00028797          	auipc	a5,0x28
    80029400:	c157c783          	lbu	a5,-1003(a5) # 80051011 <excpt+0x1>
    80029404:	00028497          	auipc	s1,0x28
    80029408:	c0c48493          	addi	s1,s1,-1012 # 80051010 <excpt>
    8002940c:	00004597          	auipc	a1,0x4
    80029410:	ee458593          	addi	a1,a1,-284 # 8002d2f0 <__func__.0+0x2d0>
    80029414:	cf89                	beqz	a5,8002942e <vec_test_19+0xae>
    80029416:	6498                	ld	a4,8(s1)
    80029418:	4789                	li	a5,2
    8002941a:	00004597          	auipc	a1,0x4
    8002941e:	ec658593          	addi	a1,a1,-314 # 8002d2e0 <__func__.0+0x2c0>
    80029422:	00f70663          	beq	a4,a5,8002942e <vec_test_19+0xae>
    80029426:	00004597          	auipc	a1,0x4
    8002942a:	eca58593          	addi	a1,a1,-310 # 8002d2f0 <__func__.0+0x2d0>
    8002942e:	00004517          	auipc	a0,0x4
    80029432:	f0250513          	addi	a0,a0,-254 # 8002d330 <__func__.0+0x310>
    80029436:	185010ef          	jal	8002adba <printf>
    8002943a:	00028797          	auipc	a5,0x28
    8002943e:	bd77c783          	lbu	a5,-1065(a5) # 80051011 <excpt+0x1>
    80029442:	c789                	beqz	a5,8002944c <vec_test_19+0xcc>
    80029444:	6498                	ld	a4,8(s1)
    80029446:	4789                	li	a5,2
    80029448:	00f70c63          	beq	a4,a5,80029460 <vec_test_19+0xe0>
    8002944c:	00004517          	auipc	a0,0x4
    80029450:	eec50513          	addi	a0,a0,-276 # 8002d338 <__func__.0+0x318>
    80029454:	167010ef          	jal	8002adba <printf>
    80029458:	02900513          	li	a0,41
    8002945c:	64c000ef          	jal	80029aa8 <putchar>
    80029460:	4529                	li	a0,10
    80029462:	646000ef          	jal	80029aa8 <putchar>
    80029466:	00028417          	auipc	s0,0x28
    8002946a:	bab44403          	lbu	s0,-1109(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002946e:	00004597          	auipc	a1,0x4
    80029472:	e8258593          	addi	a1,a1,-382 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029476:	cc11                	beqz	s0,80029492 <vec_test_19+0x112>
    80029478:	6498                	ld	a4,8(s1)
    8002947a:	4789                	li	a5,2
    TEST_END();
    8002947c:	00004597          	auipc	a1,0x4
    80029480:	e6458593          	addi	a1,a1,-412 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsbf.m cause to ILI when vstart!=0",
    80029484:	00f70763          	beq	a4,a5,80029492 <vec_test_19+0x112>
    80029488:	4401                	li	s0,0
    TEST_END();
    8002948a:	00004597          	auipc	a1,0x4
    8002948e:	e6658593          	addi	a1,a1,-410 # 8002d2f0 <__func__.0+0x2d0>
    80029492:	00004517          	auipc	a0,0x4
    80029496:	f0650513          	addi	a0,a0,-250 # 8002d398 <__func__.0+0x378>
    8002949a:	121010ef          	jal	8002adba <printf>
    8002949e:	4511                	li	a0,4
    800294a0:	9cfd70ef          	jal	80000e6e <goto_priv>
    800294a4:	ae6d80ef          	jal	8000178a <reset_state>

}
    800294a8:	60e2                	ld	ra,24(sp)
    800294aa:	8522                	mv	a0,s0
    800294ac:	6442                	ld	s0,16(sp)
    800294ae:	64a2                	ld	s1,8(sp)
    800294b0:	6105                	addi	sp,sp,32
    800294b2:	8082                	ret

00000000800294b4 <vec_test_20>:

bool vec_test_20(){
    800294b4:	1101                	addi	sp,sp,-32

    TEST_START();
    800294b6:	00004597          	auipc	a1,0x4
    800294ba:	b2a58593          	addi	a1,a1,-1238 # 8002cfe0 <__func__.4>
    800294be:	00004517          	auipc	a0,0x4
    800294c2:	e4250513          	addi	a0,a0,-446 # 8002d300 <__func__.0+0x2e0>
bool vec_test_20(){
    800294c6:	ec06                	sd	ra,24(sp)
    800294c8:	e822                	sd	s0,16(sp)
    800294ca:	e426                	sd	s1,8(sp)
    TEST_START();
    800294cc:	0ef010ef          	jal	8002adba <printf>
    800294d0:	4529                	li	a0,10
    800294d2:	5d6000ef          	jal	80029aa8 <putchar>
    //如果 vstart 非零，执行vmsif指令

    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800294d6:	20000793          	li	a5,512
    800294da:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800294de:	40000793          	li	a5,1024
    800294e2:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTART,(uint64_t)-1)
    800294e6:	57fd                	li	a5,-1
    800294e8:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    800294ec:	008025f3          	csrr	a1,vstart
    800294f0:	0000f517          	auipc	a0,0xf
    800294f4:	07850513          	addi	a0,a0,120 # 80038568 <__func__.0+0xb548>
    800294f8:	0c3010ef          	jal	8002adba <printf>
    asm volatile (
    800294fc:	47a1                	li	a5,8
    800294fe:	4745                	li	a4,17
    80029500:	80e7f2d7          	vsetvl	t0,a5,a4
    80029504:	5e00b057          	vmv.v.i	v0,1
    80029508:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsif.m 的执行条件
    set_vmsifm_conditions(vl, sew, lmull, v0_init, v4_init);
    
    TEST_SETUP_EXCEPT();
    8002950c:	867d70ef          	jal	80000d72 <test_setup_except_function>
    asm volatile (
    80029510:	5041a2d7          	vmsif.m	v5,v4,v0.t
    // 执行 vmsif.m 指令
    execute_vmsif_m();
    excpt_info();
    80029514:	aa1d70ef          	jal	80000fb4 <excpt_info>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    80029518:	08200593          	li	a1,130
    8002951c:	0000f617          	auipc	a2,0xf
    80029520:	27c60613          	addi	a2,a2,636 # 80038798 <__func__.0+0xb778>
    80029524:	00004517          	auipc	a0,0x4
    80029528:	df450513          	addi	a0,a0,-524 # 8002d318 <__func__.0+0x2f8>
    8002952c:	08f010ef          	jal	8002adba <printf>
    80029530:	00028797          	auipc	a5,0x28
    80029534:	ae17c783          	lbu	a5,-1311(a5) # 80051011 <excpt+0x1>
    80029538:	00028497          	auipc	s1,0x28
    8002953c:	ad848493          	addi	s1,s1,-1320 # 80051010 <excpt>
    80029540:	00004597          	auipc	a1,0x4
    80029544:	db058593          	addi	a1,a1,-592 # 8002d2f0 <__func__.0+0x2d0>
    80029548:	cf89                	beqz	a5,80029562 <vec_test_20+0xae>
    8002954a:	6498                	ld	a4,8(s1)
    8002954c:	4789                	li	a5,2
    8002954e:	00004597          	auipc	a1,0x4
    80029552:	d9258593          	addi	a1,a1,-622 # 8002d2e0 <__func__.0+0x2c0>
    80029556:	00f70663          	beq	a4,a5,80029562 <vec_test_20+0xae>
    8002955a:	00004597          	auipc	a1,0x4
    8002955e:	d9658593          	addi	a1,a1,-618 # 8002d2f0 <__func__.0+0x2d0>
    80029562:	00004517          	auipc	a0,0x4
    80029566:	dce50513          	addi	a0,a0,-562 # 8002d330 <__func__.0+0x310>
    8002956a:	051010ef          	jal	8002adba <printf>
    8002956e:	00028797          	auipc	a5,0x28
    80029572:	aa37c783          	lbu	a5,-1373(a5) # 80051011 <excpt+0x1>
    80029576:	c789                	beqz	a5,80029580 <vec_test_20+0xcc>
    80029578:	6498                	ld	a4,8(s1)
    8002957a:	4789                	li	a5,2
    8002957c:	00f70c63          	beq	a4,a5,80029594 <vec_test_20+0xe0>
    80029580:	00004517          	auipc	a0,0x4
    80029584:	db850513          	addi	a0,a0,-584 # 8002d338 <__func__.0+0x318>
    80029588:	033010ef          	jal	8002adba <printf>
    8002958c:	02900513          	li	a0,41
    80029590:	518000ef          	jal	80029aa8 <putchar>
    80029594:	4529                	li	a0,10
    80029596:	512000ef          	jal	80029aa8 <putchar>
    8002959a:	00028417          	auipc	s0,0x28
    8002959e:	a7744403          	lbu	s0,-1417(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800295a2:	00004597          	auipc	a1,0x4
    800295a6:	d4e58593          	addi	a1,a1,-690 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800295aa:	cc11                	beqz	s0,800295c6 <vec_test_20+0x112>
    800295ac:	6498                	ld	a4,8(s1)
    800295ae:	4789                	li	a5,2
    TEST_END();
    800295b0:	00004597          	auipc	a1,0x4
    800295b4:	d3058593          	addi	a1,a1,-720 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800295b8:	00f70763          	beq	a4,a5,800295c6 <vec_test_20+0x112>
    800295bc:	4401                	li	s0,0
    TEST_END();
    800295be:	00004597          	auipc	a1,0x4
    800295c2:	d3258593          	addi	a1,a1,-718 # 8002d2f0 <__func__.0+0x2d0>
    800295c6:	00004517          	auipc	a0,0x4
    800295ca:	dd250513          	addi	a0,a0,-558 # 8002d398 <__func__.0+0x378>
    800295ce:	7ec010ef          	jal	8002adba <printf>
    800295d2:	4511                	li	a0,4
    800295d4:	89bd70ef          	jal	80000e6e <goto_priv>
    800295d8:	9b2d80ef          	jal	8000178a <reset_state>

}
    800295dc:	60e2                	ld	ra,24(sp)
    800295de:	8522                	mv	a0,s0
    800295e0:	6442                	ld	s0,16(sp)
    800295e2:	64a2                	ld	s1,8(sp)
    800295e4:	6105                	addi	sp,sp,32
    800295e6:	8082                	ret

00000000800295e8 <vec_test_21>:

bool vec_test_21(){
    800295e8:	1101                	addi	sp,sp,-32

    TEST_START();
    800295ea:	00004597          	auipc	a1,0x4
    800295ee:	a0658593          	addi	a1,a1,-1530 # 8002cff0 <__func__.3>
    800295f2:	00004517          	auipc	a0,0x4
    800295f6:	d0e50513          	addi	a0,a0,-754 # 8002d300 <__func__.0+0x2e0>
bool vec_test_21(){
    800295fa:	ec06                	sd	ra,24(sp)
    800295fc:	e822                	sd	s0,16(sp)
    800295fe:	e426                	sd	s1,8(sp)
    TEST_START();
    80029600:	7ba010ef          	jal	8002adba <printf>
    80029604:	4529                	li	a0,10
    80029606:	4a2000ef          	jal	80029aa8 <putchar>
    //如果 vstart 非零，执行vmsof指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002960a:	20000793          	li	a5,512
    8002960e:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029612:	40000793          	li	a5,1024
    80029616:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTART,(uint64_t)-1)
    8002961a:	57fd                	li	a5,-1
    8002961c:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029620:	008025f3          	csrr	a1,vstart
    80029624:	0000f517          	auipc	a0,0xf
    80029628:	f4450513          	addi	a0,a0,-188 # 80038568 <__func__.0+0xb548>
    8002962c:	78e010ef          	jal	8002adba <printf>
    asm volatile (
    80029630:	47a1                	li	a5,8
    80029632:	4745                	li	a4,17
    80029634:	80e7f2d7          	vsetvl	t0,a5,a4
    80029638:	5e00b057          	vmv.v.i	v0,1
    8002963c:	5e01b257          	vmv.v.i	v4,3
    int v4_init = 3;    // 初始化 v4 的值为 3

    // 设置 vmsof.m 的执行条件
    set_vmsofm_conditions(vl, sew, lmull, v0_init, v4_init);
    
    TEST_SETUP_EXCEPT();
    80029640:	f32d70ef          	jal	80000d72 <test_setup_except_function>
    asm volatile (
    80029644:	504122d7          	vmsof.m	v5,v4,v0.t
    // 执行 vmsof.m 指令
    execute_vmsof_m();
    excpt_info();
    80029648:	96dd70ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    8002964c:	08200593          	li	a1,130
    80029650:	0000f617          	auipc	a2,0xf
    80029654:	14860613          	addi	a2,a2,328 # 80038798 <__func__.0+0xb778>
    80029658:	00004517          	auipc	a0,0x4
    8002965c:	cc050513          	addi	a0,a0,-832 # 8002d318 <__func__.0+0x2f8>
    80029660:	75a010ef          	jal	8002adba <printf>
    80029664:	00028797          	auipc	a5,0x28
    80029668:	9ad7c783          	lbu	a5,-1619(a5) # 80051011 <excpt+0x1>
    8002966c:	00028497          	auipc	s1,0x28
    80029670:	9a448493          	addi	s1,s1,-1628 # 80051010 <excpt>
    80029674:	00004597          	auipc	a1,0x4
    80029678:	c7c58593          	addi	a1,a1,-900 # 8002d2f0 <__func__.0+0x2d0>
    8002967c:	cf89                	beqz	a5,80029696 <vec_test_21+0xae>
    8002967e:	6498                	ld	a4,8(s1)
    80029680:	4789                	li	a5,2
    80029682:	00004597          	auipc	a1,0x4
    80029686:	c5e58593          	addi	a1,a1,-930 # 8002d2e0 <__func__.0+0x2c0>
    8002968a:	00f70663          	beq	a4,a5,80029696 <vec_test_21+0xae>
    8002968e:	00004597          	auipc	a1,0x4
    80029692:	c6258593          	addi	a1,a1,-926 # 8002d2f0 <__func__.0+0x2d0>
    80029696:	00004517          	auipc	a0,0x4
    8002969a:	c9a50513          	addi	a0,a0,-870 # 8002d330 <__func__.0+0x310>
    8002969e:	71c010ef          	jal	8002adba <printf>
    800296a2:	00028797          	auipc	a5,0x28
    800296a6:	96f7c783          	lbu	a5,-1681(a5) # 80051011 <excpt+0x1>
    800296aa:	c789                	beqz	a5,800296b4 <vec_test_21+0xcc>
    800296ac:	6498                	ld	a4,8(s1)
    800296ae:	4789                	li	a5,2
    800296b0:	00f70c63          	beq	a4,a5,800296c8 <vec_test_21+0xe0>
    800296b4:	00004517          	auipc	a0,0x4
    800296b8:	c8450513          	addi	a0,a0,-892 # 8002d338 <__func__.0+0x318>
    800296bc:	6fe010ef          	jal	8002adba <printf>
    800296c0:	02900513          	li	a0,41
    800296c4:	3e4000ef          	jal	80029aa8 <putchar>
    800296c8:	4529                	li	a0,10
    800296ca:	3de000ef          	jal	80029aa8 <putchar>
    800296ce:	00028417          	auipc	s0,0x28
    800296d2:	94344403          	lbu	s0,-1725(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    800296d6:	00004597          	auipc	a1,0x4
    800296da:	c1a58593          	addi	a1,a1,-998 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800296de:	cc11                	beqz	s0,800296fa <vec_test_21+0x112>
    800296e0:	6498                	ld	a4,8(s1)
    800296e2:	4789                	li	a5,2
    TEST_END();
    800296e4:	00004597          	auipc	a1,0x4
    800296e8:	bfc58593          	addi	a1,a1,-1028 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vmsif.m cause to ILI when vstart!=0",
    800296ec:	00f70763          	beq	a4,a5,800296fa <vec_test_21+0x112>
    800296f0:	4401                	li	s0,0
    TEST_END();
    800296f2:	00004597          	auipc	a1,0x4
    800296f6:	bfe58593          	addi	a1,a1,-1026 # 8002d2f0 <__func__.0+0x2d0>
    800296fa:	00004517          	auipc	a0,0x4
    800296fe:	c9e50513          	addi	a0,a0,-866 # 8002d398 <__func__.0+0x378>
    80029702:	6b8010ef          	jal	8002adba <printf>
    80029706:	4511                	li	a0,4
    80029708:	f66d70ef          	jal	80000e6e <goto_priv>
    8002970c:	87ed80ef          	jal	8000178a <reset_state>

}
    80029710:	60e2                	ld	ra,24(sp)
    80029712:	8522                	mv	a0,s0
    80029714:	6442                	ld	s0,16(sp)
    80029716:	64a2                	ld	s1,8(sp)
    80029718:	6105                	addi	sp,sp,32
    8002971a:	8082                	ret

000000008002971c <vec_test_22>:

bool vec_test_22(){
    8002971c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002971e:	00004597          	auipc	a1,0x4
    80029722:	8e258593          	addi	a1,a1,-1822 # 8002d000 <__func__.2>
    80029726:	00004517          	auipc	a0,0x4
    8002972a:	bda50513          	addi	a0,a0,-1062 # 8002d300 <__func__.0+0x2e0>
bool vec_test_22(){
    8002972e:	ec06                	sd	ra,24(sp)
    80029730:	e822                	sd	s0,16(sp)
    80029732:	e426                	sd	s1,8(sp)
    TEST_START();
    80029734:	686010ef          	jal	8002adba <printf>
    80029738:	4529                	li	a0,10
    8002973a:	36e000ef          	jal	80029aa8 <putchar>
    //如果 vstart 非零，执行viota.m 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002973e:	20000793          	li	a5,512
    80029742:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029746:	40000793          	li	a5,1024
    8002974a:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTART,(uint64_t)-1)
    8002974e:	57fd                	li	a5,-1
    80029750:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029754:	008025f3          	csrr	a1,vstart
    80029758:	0000f517          	auipc	a0,0xf
    8002975c:	e1050513          	addi	a0,a0,-496 # 80038568 <__func__.0+0xb548>
    80029760:	65a010ef          	jal	8002adba <printf>
// 设置 viota.m 执行条件
static inline void set_viota_m_conditions(int vl, int sew, int lmull, int v0_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80029764:	47a1                	li	a5,8
    80029766:	4745                	li	a4,17
    80029768:	80e7f2d7          	vsetvl	t0,a5,a4
    8002976c:	5e00b057          	vmv.v.i	v0,1
    int v0_init = 1;    // 初始化 v0 的值为 1（全1）

    // 设置 viota.m 的执行条件
    set_viota_m_conditions(vl, sew, lmull, v0_init);
    
    TEST_SETUP_EXCEPT();
    80029770:	e02d70ef          	jal	80000d72 <test_setup_except_function>
    );
}

// 执行 viota.m 指令
static inline void execute_viota_m() {
    asm volatile (
    80029774:	52082357          	viota.m	v6,v0
    // 执行 viota.m 指令
    execute_viota_m();

    excpt_info();
    80029778:	83dd70ef          	jal	80000fb4 <excpt_info>



    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    8002977c:	08200593          	li	a1,130
    80029780:	0000f617          	auipc	a2,0xf
    80029784:	05860613          	addi	a2,a2,88 # 800387d8 <__func__.0+0xb7b8>
    80029788:	00004517          	auipc	a0,0x4
    8002978c:	b9050513          	addi	a0,a0,-1136 # 8002d318 <__func__.0+0x2f8>
    80029790:	62a010ef          	jal	8002adba <printf>
    80029794:	00028797          	auipc	a5,0x28
    80029798:	87d7c783          	lbu	a5,-1923(a5) # 80051011 <excpt+0x1>
    8002979c:	00028497          	auipc	s1,0x28
    800297a0:	87448493          	addi	s1,s1,-1932 # 80051010 <excpt>
    800297a4:	00004597          	auipc	a1,0x4
    800297a8:	b4c58593          	addi	a1,a1,-1204 # 8002d2f0 <__func__.0+0x2d0>
    800297ac:	cf89                	beqz	a5,800297c6 <vec_test_22+0xaa>
    800297ae:	6498                	ld	a4,8(s1)
    800297b0:	4789                	li	a5,2
    800297b2:	00004597          	auipc	a1,0x4
    800297b6:	b2e58593          	addi	a1,a1,-1234 # 8002d2e0 <__func__.0+0x2c0>
    800297ba:	00f70663          	beq	a4,a5,800297c6 <vec_test_22+0xaa>
    800297be:	00004597          	auipc	a1,0x4
    800297c2:	b3258593          	addi	a1,a1,-1230 # 8002d2f0 <__func__.0+0x2d0>
    800297c6:	00004517          	auipc	a0,0x4
    800297ca:	b6a50513          	addi	a0,a0,-1174 # 8002d330 <__func__.0+0x310>
    800297ce:	5ec010ef          	jal	8002adba <printf>
    800297d2:	00028797          	auipc	a5,0x28
    800297d6:	83f7c783          	lbu	a5,-1985(a5) # 80051011 <excpt+0x1>
    800297da:	c789                	beqz	a5,800297e4 <vec_test_22+0xc8>
    800297dc:	6498                	ld	a4,8(s1)
    800297de:	4789                	li	a5,2
    800297e0:	00f70c63          	beq	a4,a5,800297f8 <vec_test_22+0xdc>
    800297e4:	00004517          	auipc	a0,0x4
    800297e8:	b5450513          	addi	a0,a0,-1196 # 8002d338 <__func__.0+0x318>
    800297ec:	5ce010ef          	jal	8002adba <printf>
    800297f0:	02900513          	li	a0,41
    800297f4:	2b4000ef          	jal	80029aa8 <putchar>
    800297f8:	4529                	li	a0,10
    800297fa:	2ae000ef          	jal	80029aa8 <putchar>
    800297fe:	00028417          	auipc	s0,0x28
    80029802:	81344403          	lbu	s0,-2029(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029806:	00004597          	auipc	a1,0x4
    8002980a:	aea58593          	addi	a1,a1,-1302 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    8002980e:	cc11                	beqz	s0,8002982a <vec_test_22+0x10e>
    80029810:	6498                	ld	a4,8(s1)
    80029812:	4789                	li	a5,2
    TEST_END();
    80029814:	00004597          	auipc	a1,0x4
    80029818:	acc58593          	addi	a1,a1,-1332 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute viota.m cause to ILI when vstart!=0",
    8002981c:	00f70763          	beq	a4,a5,8002982a <vec_test_22+0x10e>
    80029820:	4401                	li	s0,0
    TEST_END();
    80029822:	00004597          	auipc	a1,0x4
    80029826:	ace58593          	addi	a1,a1,-1330 # 8002d2f0 <__func__.0+0x2d0>
    8002982a:	00004517          	auipc	a0,0x4
    8002982e:	b6e50513          	addi	a0,a0,-1170 # 8002d398 <__func__.0+0x378>
    80029832:	588010ef          	jal	8002adba <printf>
    80029836:	4511                	li	a0,4
    80029838:	e36d70ef          	jal	80000e6e <goto_priv>
    8002983c:	f4fd70ef          	jal	8000178a <reset_state>

}
    80029840:	60e2                	ld	ra,24(sp)
    80029842:	8522                	mv	a0,s0
    80029844:	6442                	ld	s0,16(sp)
    80029846:	64a2                	ld	s1,8(sp)
    80029848:	6105                	addi	sp,sp,32
    8002984a:	8082                	ret

000000008002984c <vec_test_23>:



bool vec_test_23(){
    8002984c:	1101                	addi	sp,sp,-32

    TEST_START();
    8002984e:	00003597          	auipc	a1,0x3
    80029852:	7c258593          	addi	a1,a1,1986 # 8002d010 <__func__.1>
    80029856:	00004517          	auipc	a0,0x4
    8002985a:	aaa50513          	addi	a0,a0,-1366 # 8002d300 <__func__.0+0x2e0>
bool vec_test_23(){
    8002985e:	ec06                	sd	ra,24(sp)
    80029860:	e822                	sd	s0,16(sp)
    80029862:	e426                	sd	s1,8(sp)
    TEST_START();
    80029864:	556010ef          	jal	8002adba <printf>
    80029868:	4529                	li	a0,10
    8002986a:	23e000ef          	jal	80029aa8 <putchar>
    //如果 vstart 非零，执行vcompress 指令


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    8002986e:	20000793          	li	a5,512
    80029872:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    80029876:	40000793          	li	a5,1024
    8002987a:	3007a073          	csrs	mstatus,a5

    CSRW(CSR_VSTART,(uint64_t)-1)
    8002987e:	57fd                	li	a5,-1
    80029880:	00879073          	csrw	vstart,a5
    printf("vstart=%llx\n",CSRR(CSR_VSTART));
    80029884:	008025f3          	csrr	a1,vstart
    80029888:	0000f517          	auipc	a0,0xf
    8002988c:	ce050513          	addi	a0,a0,-800 # 80038568 <__func__.0+0xb548>
    80029890:	52a010ef          	jal	8002adba <printf>
// 设置 vcompress 执行条件
static inline void set_vcompress_conditions(int vl, int sew, int lmull, int v0_init, int v4_init, int v8_init) {
    // 计算 vtype
    int vtype = (sew << 3) | lmull;  // 根据传入的 LMUL 设置 vtype

    asm volatile (
    80029894:	47a1                	li	a5,8
    80029896:	4745                	li	a4,17
    80029898:	80e7f2d7          	vsetvl	t0,a5,a4
    8002989c:	5e00b057          	vmv.v.i	v0,1
    800298a0:	5e01b257          	vmv.v.i	v4,3
    800298a4:	5e003457          	vmv.v.i	v8,0
    int v8_init = 0;    // 初始化 v8 的值为 0

    // 设置 vcompress 的执行条件
    set_vcompress_conditions(vl, sew, lmull, v0_init, v4_init, v8_init);
    
    TEST_SETUP_EXCEPT();
    800298a8:	ccad70ef          	jal	80000d72 <test_setup_except_function>
    );
}

// 执行 vcompress 指令
static inline void execute_vcompress() {
    asm volatile (
    800298ac:	5e402457          	vcompress.vm	v8,v4,v0
    // 执行 vcompress 指令
    execute_vcompress();
    excpt_info();
    800298b0:	f04d70ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    800298b4:	08200593          	li	a1,130
    800298b8:	0000f617          	auipc	a2,0xf
    800298bc:	f6060613          	addi	a2,a2,-160 # 80038818 <__func__.0+0xb7f8>
    800298c0:	00004517          	auipc	a0,0x4
    800298c4:	a5850513          	addi	a0,a0,-1448 # 8002d318 <__func__.0+0x2f8>
    800298c8:	4f2010ef          	jal	8002adba <printf>
    800298cc:	00027797          	auipc	a5,0x27
    800298d0:	7457c783          	lbu	a5,1861(a5) # 80051011 <excpt+0x1>
    800298d4:	00027497          	auipc	s1,0x27
    800298d8:	73c48493          	addi	s1,s1,1852 # 80051010 <excpt>
    800298dc:	00004597          	auipc	a1,0x4
    800298e0:	a1458593          	addi	a1,a1,-1516 # 8002d2f0 <__func__.0+0x2d0>
    800298e4:	cf89                	beqz	a5,800298fe <vec_test_23+0xb2>
    800298e6:	6498                	ld	a4,8(s1)
    800298e8:	4789                	li	a5,2
    800298ea:	00004597          	auipc	a1,0x4
    800298ee:	9f658593          	addi	a1,a1,-1546 # 8002d2e0 <__func__.0+0x2c0>
    800298f2:	00f70663          	beq	a4,a5,800298fe <vec_test_23+0xb2>
    800298f6:	00004597          	auipc	a1,0x4
    800298fa:	9fa58593          	addi	a1,a1,-1542 # 8002d2f0 <__func__.0+0x2d0>
    800298fe:	00004517          	auipc	a0,0x4
    80029902:	a3250513          	addi	a0,a0,-1486 # 8002d330 <__func__.0+0x310>
    80029906:	4b4010ef          	jal	8002adba <printf>
    8002990a:	00027797          	auipc	a5,0x27
    8002990e:	7077c783          	lbu	a5,1799(a5) # 80051011 <excpt+0x1>
    80029912:	c789                	beqz	a5,8002991c <vec_test_23+0xd0>
    80029914:	6498                	ld	a4,8(s1)
    80029916:	4789                	li	a5,2
    80029918:	00f70c63          	beq	a4,a5,80029930 <vec_test_23+0xe4>
    8002991c:	00004517          	auipc	a0,0x4
    80029920:	a1c50513          	addi	a0,a0,-1508 # 8002d338 <__func__.0+0x318>
    80029924:	496010ef          	jal	8002adba <printf>
    80029928:	02900513          	li	a0,41
    8002992c:	17c000ef          	jal	80029aa8 <putchar>
    80029930:	4529                	li	a0,10
    80029932:	176000ef          	jal	80029aa8 <putchar>
    80029936:	00027417          	auipc	s0,0x27
    8002993a:	6db44403          	lbu	s0,1755(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    8002993e:	00004597          	auipc	a1,0x4
    80029942:	9b258593          	addi	a1,a1,-1614 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029946:	cc11                	beqz	s0,80029962 <vec_test_23+0x116>
    80029948:	6498                	ld	a4,8(s1)
    8002994a:	4789                	li	a5,2
    TEST_END();
    8002994c:	00004597          	auipc	a1,0x4
    80029950:	99458593          	addi	a1,a1,-1644 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029954:	00f70763          	beq	a4,a5,80029962 <vec_test_23+0x116>
    80029958:	4401                	li	s0,0
    TEST_END();
    8002995a:	00004597          	auipc	a1,0x4
    8002995e:	99658593          	addi	a1,a1,-1642 # 8002d2f0 <__func__.0+0x2d0>
    80029962:	00004517          	auipc	a0,0x4
    80029966:	a3650513          	addi	a0,a0,-1482 # 8002d398 <__func__.0+0x378>
    8002996a:	450010ef          	jal	8002adba <printf>
    8002996e:	4511                	li	a0,4
    80029970:	cfed70ef          	jal	80000e6e <goto_priv>
    80029974:	e17d70ef          	jal	8000178a <reset_state>

}
    80029978:	60e2                	ld	ra,24(sp)
    8002997a:	8522                	mv	a0,s0
    8002997c:	6442                	ld	s0,16(sp)
    8002997e:	64a2                	ld	s1,8(sp)
    80029980:	6105                	addi	sp,sp,32
    80029982:	8082                	ret

0000000080029984 <vec_test_24>:



bool vec_test_24(){
    80029984:	1101                	addi	sp,sp,-32

    TEST_START();
    80029986:	00003597          	auipc	a1,0x3
    8002998a:	69a58593          	addi	a1,a1,1690 # 8002d020 <__func__.0>
    8002998e:	00004517          	auipc	a0,0x4
    80029992:	97250513          	addi	a0,a0,-1678 # 8002d300 <__func__.0+0x2e0>
bool vec_test_24(){
    80029996:	ec06                	sd	ra,24(sp)
    80029998:	e822                	sd	s0,16(sp)
    8002999a:	e426                	sd	s1,8(sp)
    TEST_START();
    8002999c:	41e010ef          	jal	8002adba <printf>
    800299a0:	4529                	li	a0,10
    800299a2:	106000ef          	jal	80029aa8 <putchar>
    //当执行一个向量指令时，如设置 EGS > VLMAX


    CSRS(CSR_MSTATUS, 1ULL << 9);      //设置mstatus.vs != 0
    800299a6:	20000793          	li	a5,512
    800299aa:	3007a073          	csrs	mstatus,a5
    CSRS(CSR_MSTATUS, 1ULL << 10); 
    800299ae:	40000793          	li	a5,1024
    800299b2:	3007a073          	csrs	mstatus,a5
    int vl = 32;       // 向量长

    // 计算 VLMAX
    int vlen = 128;     // 硬件的向量寄存器长度（128 位）
    int vlmax = (vlen / sew) * lmull;
    printf("Calculated VLMAX: %d elements\n", vlmax);
    800299b6:	10000593          	li	a1,256
    800299ba:	0000f517          	auipc	a0,0xf
    800299be:	e9e50513          	addi	a0,a0,-354 # 80038858 <__func__.0+0xb838>
    800299c2:	3f8010ef          	jal	8002adba <printf>

    // 设置 EGS > VLMAX 的执行条件
    // set_egs_greater_vlmax_conditions(vl, sew, lmull);

    excpt_info();
    800299c6:	deed70ef          	jal	80000fb4 <excpt_info>

    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    800299ca:	08200593          	li	a1,130
    800299ce:	0000f617          	auipc	a2,0xf
    800299d2:	e4a60613          	addi	a2,a2,-438 # 80038818 <__func__.0+0xb7f8>
    800299d6:	00004517          	auipc	a0,0x4
    800299da:	94250513          	addi	a0,a0,-1726 # 8002d318 <__func__.0+0x2f8>
    800299de:	3dc010ef          	jal	8002adba <printf>
    800299e2:	00027797          	auipc	a5,0x27
    800299e6:	62f7c783          	lbu	a5,1583(a5) # 80051011 <excpt+0x1>
    800299ea:	00027497          	auipc	s1,0x27
    800299ee:	62648493          	addi	s1,s1,1574 # 80051010 <excpt>
    800299f2:	00004597          	auipc	a1,0x4
    800299f6:	8fe58593          	addi	a1,a1,-1794 # 8002d2f0 <__func__.0+0x2d0>
    800299fa:	cf89                	beqz	a5,80029a14 <vec_test_24+0x90>
    800299fc:	6498                	ld	a4,8(s1)
    800299fe:	4789                	li	a5,2
    80029a00:	00004597          	auipc	a1,0x4
    80029a04:	8e058593          	addi	a1,a1,-1824 # 8002d2e0 <__func__.0+0x2c0>
    80029a08:	00f70663          	beq	a4,a5,80029a14 <vec_test_24+0x90>
    80029a0c:	00004597          	auipc	a1,0x4
    80029a10:	8e458593          	addi	a1,a1,-1820 # 8002d2f0 <__func__.0+0x2d0>
    80029a14:	00004517          	auipc	a0,0x4
    80029a18:	91c50513          	addi	a0,a0,-1764 # 8002d330 <__func__.0+0x310>
    80029a1c:	39e010ef          	jal	8002adba <printf>
    80029a20:	00027797          	auipc	a5,0x27
    80029a24:	5f17c783          	lbu	a5,1521(a5) # 80051011 <excpt+0x1>
    80029a28:	c789                	beqz	a5,80029a32 <vec_test_24+0xae>
    80029a2a:	6498                	ld	a4,8(s1)
    80029a2c:	4789                	li	a5,2
    80029a2e:	00f70c63          	beq	a4,a5,80029a46 <vec_test_24+0xc2>
    80029a32:	00004517          	auipc	a0,0x4
    80029a36:	90650513          	addi	a0,a0,-1786 # 8002d338 <__func__.0+0x318>
    80029a3a:	380010ef          	jal	8002adba <printf>
    80029a3e:	02900513          	li	a0,41
    80029a42:	066000ef          	jal	80029aa8 <putchar>
    80029a46:	4529                	li	a0,10
    80029a48:	060000ef          	jal	80029aa8 <putchar>
    80029a4c:	00027417          	auipc	s0,0x27
    80029a50:	5c544403          	lbu	s0,1477(s0) # 80051011 <excpt+0x1>
        excpt.triggered == true &&  
        excpt.cause == CAUSE_ILI
    );   

    TEST_END();
    80029a54:	00004597          	auipc	a1,0x4
    80029a58:	89c58593          	addi	a1,a1,-1892 # 8002d2f0 <__func__.0+0x2d0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029a5c:	cc11                	beqz	s0,80029a78 <vec_test_24+0xf4>
    80029a5e:	6498                	ld	a4,8(s1)
    80029a60:	4789                	li	a5,2
    TEST_END();
    80029a62:	00004597          	auipc	a1,0x4
    80029a66:	87e58593          	addi	a1,a1,-1922 # 8002d2e0 <__func__.0+0x2c0>
    TEST_ASSERT("An attempt to execute vcompress cause to ILI when vstart!=0",
    80029a6a:	00f70763          	beq	a4,a5,80029a78 <vec_test_24+0xf4>
    80029a6e:	4401                	li	s0,0
    TEST_END();
    80029a70:	00004597          	auipc	a1,0x4
    80029a74:	88058593          	addi	a1,a1,-1920 # 8002d2f0 <__func__.0+0x2d0>
    80029a78:	00004517          	auipc	a0,0x4
    80029a7c:	92050513          	addi	a0,a0,-1760 # 8002d398 <__func__.0+0x378>
    80029a80:	33a010ef          	jal	8002adba <printf>
    80029a84:	4511                	li	a0,4
    80029a86:	be8d70ef          	jal	80000e6e <goto_priv>
    80029a8a:	d01d70ef          	jal	8000178a <reset_state>

}
    80029a8e:	60e2                	ld	ra,24(sp)
    80029a90:	8522                	mv	a0,s0
    80029a92:	6442                	ld	s0,16(sp)
    80029a94:	64a2                	ld	s1,8(sp)
    80029a96:	6105                	addi	sp,sp,32
    80029a98:	8082                	ret

0000000080029a9a <sprintf_putch.0>:
  va_start(ap, fmt);

  void sprintf_putch(int ch, void** data)
  {
    char** pstr = (char**)data;
    **pstr = ch;
    80029a9a:	619c                	ld	a5,0(a1)
    80029a9c:	00a78023          	sb	a0,0(a5)
    (*pstr)++;
    80029aa0:	619c                	ld	a5,0(a1)
    80029aa2:	0785                	addi	a5,a5,1
    80029aa4:	e19c                	sd	a5,0(a1)
  }
    80029aa6:	8082                	ret

0000000080029aa8 <putchar>:
  buf[buflen++] = ch;
    80029aa8:	00027797          	auipc	a5,0x27
    80029aac:	62c7a783          	lw	a5,1580(a5) # 800510d4 <buflen.2>
    80029ab0:	00027697          	auipc	a3,0x27
    80029ab4:	5d068693          	addi	a3,a3,1488 # 80051080 <buf.1>
{
    80029ab8:	7159                	addi	sp,sp,-112
  buf[buflen++] = ch;
    80029aba:	00f68733          	add	a4,a3,a5
    80029abe:	2785                	addiw	a5,a5,1
    80029ac0:	00a70023          	sb	a0,0(a4) # 2000 <_test_table_size+0x1fff>
    80029ac4:	00027717          	auipc	a4,0x27
    80029ac8:	60f72823          	sw	a5,1552(a4) # 800510d4 <buflen.2>
{
    80029acc:	03f10713          	addi	a4,sp,63
  if (ch == '\n' || buflen == sizeof(buf))
    80029ad0:	4629                	li	a2,10
{
    80029ad2:	fc077713          	andi	a4,a4,-64
  if (ch == '\n' || buflen == sizeof(buf))
    80029ad6:	00c50963          	beq	a0,a2,80029ae8 <putchar+0x40>
    80029ada:	04000613          	li	a2,64
    80029ade:	00c78563          	beq	a5,a2,80029ae8 <putchar+0x40>
}
    80029ae2:	4501                	li	a0,0
    80029ae4:	6165                	addi	sp,sp,112
    80029ae6:	8082                	ret
  magic_mem[0] = which;
    80029ae8:	04000613          	li	a2,64
    80029aec:	e310                	sd	a2,0(a4)
  magic_mem[1] = arg0;
    80029aee:	4605                	li	a2,1
    80029af0:	e710                	sd	a2,8(a4)
  magic_mem[2] = arg1;
    80029af2:	eb14                	sd	a3,16(a4)
  magic_mem[3] = arg2;
    80029af4:	ef1c                	sd	a5,24(a4)
  __sync_synchronize();
    80029af6:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80029afa:	00011697          	auipc	a3,0x11
    80029afe:	54668693          	addi	a3,a3,1350 # 8003b040 <fromhost>
    80029b02:	00011797          	auipc	a5,0x11
    80029b06:	4ee7bf23          	sd	a4,1278(a5) # 8003b000 <tohost>
  while (fromhost == 0)
    80029b0a:	629c                	ld	a5,0(a3)
    80029b0c:	dffd                	beqz	a5,80029b0a <putchar+0x62>
  fromhost = 0;
    80029b0e:	00011797          	auipc	a5,0x11
    80029b12:	5207b923          	sd	zero,1330(a5) # 8003b040 <fromhost>
  __sync_synchronize();
    80029b16:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80029b1a:	631c                	ld	a5,0(a4)
}
    80029b1c:	4501                	li	a0,0
    buflen = 0;
    80029b1e:	00027797          	auipc	a5,0x27
    80029b22:	5a07ab23          	sw	zero,1462(a5) # 800510d4 <buflen.2>
}
    80029b26:	6165                	addi	sp,sp,112
    80029b28:	8082                	ret

0000000080029b2a <vprintfmt.constprop.0>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80029b2a:	716d                	addi	sp,sp,-272
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029b2c:	02500313          	li	t1,37
    switch (ch = *(unsigned char *) fmt++) {
    80029b30:	05500e93          	li	t4,85
    80029b34:	00003e17          	auipc	t3,0x3
    80029b38:	4f8e0e13          	addi	t3,t3,1272 # 8002d02c <__func__.0+0xc>
    80029b3c:	a809                	j	80029b4e <vprintfmt.constprop.0+0x24>
      if (ch == '\0')
    80029b3e:	c729                	beqz	a4,80029b88 <vprintfmt.constprop.0+0x5e>
    **pstr = ch;
    80029b40:	6118                	ld	a4,0(a0)
      fmt++;
    80029b42:	0585                	addi	a1,a1,1
    **pstr = ch;
    80029b44:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80029b48:	611c                	ld	a5,0(a0)
    80029b4a:	0785                	addi	a5,a5,1
    80029b4c:	e11c                	sd	a5,0(a0)
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029b4e:	0005c783          	lbu	a5,0(a1)
    80029b52:	0007871b          	sext.w	a4,a5
    80029b56:	fe6794e3          	bne	a5,t1,80029b3e <vprintfmt.constprop.0+0x14>
    switch (ch = *(unsigned char *) fmt++) {
    80029b5a:	0015c803          	lbu	a6,1(a1)
    fmt++;
    80029b5e:	00158893          	addi	a7,a1,1
    precision = -1;
    80029b62:	577d                	li	a4,-1
    fmt++;
    80029b64:	86c6                	mv	a3,a7
    width = -1;
    80029b66:	8fba                	mv	t6,a4
    padc = ' ';
    80029b68:	02000293          	li	t0,32
    lflag = 0;
    80029b6c:	4f01                	li	t5,0
    switch (ch = *(unsigned char *) fmt++) {
    80029b6e:	fdd8079b          	addiw	a5,a6,-35
    80029b72:	0ff7f793          	zext.b	a5,a5
    80029b76:	00168593          	addi	a1,a3,1
    80029b7a:	02fee563          	bltu	t4,a5,80029ba4 <vprintfmt.constprop.0+0x7a>
    80029b7e:	078a                	slli	a5,a5,0x2
    80029b80:	97f2                	add	a5,a5,t3
    80029b82:	439c                	lw	a5,0(a5)
    80029b84:	97f2                	add	a5,a5,t3
    80029b86:	8782                	jr	a5
}
    80029b88:	6151                	addi	sp,sp,272
    80029b8a:	8082                	ret
      padc = '0';
    80029b8c:	82c2                	mv	t0,a6
      goto reswitch;
    80029b8e:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80029b92:	86ae                	mv	a3,a1
    80029b94:	00168593          	addi	a1,a3,1
    80029b98:	fdd8079b          	addiw	a5,a6,-35
    80029b9c:	0ff7f793          	zext.b	a5,a5
    80029ba0:	fcfeffe3          	bgeu	t4,a5,80029b7e <vprintfmt.constprop.0+0x54>
    **pstr = ch;
    80029ba4:	611c                	ld	a5,0(a0)
    80029ba6:	02500713          	li	a4,37
      fmt = last_fmt;
    80029baa:	85c6                	mv	a1,a7
    **pstr = ch;
    80029bac:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029bb0:	611c                	ld	a5,0(a0)
    80029bb2:	0785                	addi	a5,a5,1
    80029bb4:	e11c                	sd	a5,0(a0)
  }
    80029bb6:	bf61                	j	80029b4e <vprintfmt.constprop.0+0x24>
    80029bb8:	e622                	sd	s0,264(sp)
        precision = precision * 10 + ch - '0';
    80029bba:	fd08071b          	addiw	a4,a6,-48
        ch = *fmt;
    80029bbe:	0016c803          	lbu	a6,1(a3)
        if (ch < '0' || ch > '9')
    80029bc2:	4425                	li	s0,9
    switch (ch = *(unsigned char *) fmt++) {
    80029bc4:	86ae                	mv	a3,a1
        if (ch < '0' || ch > '9')
    80029bc6:	fd08079b          	addiw	a5,a6,-48
        ch = *fmt;
    80029bca:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    80029bce:	02f46463          	bltu	s0,a5,80029bf6 <vprintfmt.constprop.0+0xcc>
        precision = precision * 10 + ch - '0';
    80029bd2:	0027179b          	slliw	a5,a4,0x2
        ch = *fmt;
    80029bd6:	0016c803          	lbu	a6,1(a3)
        precision = precision * 10 + ch - '0';
    80029bda:	9fb9                	addw	a5,a5,a4
    80029bdc:	0017979b          	slliw	a5,a5,0x1
    80029be0:	007787bb          	addw	a5,a5,t2
        if (ch < '0' || ch > '9')
    80029be4:	fd08059b          	addiw	a1,a6,-48
      for (precision = 0; ; ++fmt) {
    80029be8:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    80029bea:	fd07871b          	addiw	a4,a5,-48
        ch = *fmt;
    80029bee:	0008039b          	sext.w	t2,a6
        if (ch < '0' || ch > '9')
    80029bf2:	feb470e3          	bgeu	s0,a1,80029bd2 <vprintfmt.constprop.0+0xa8>
    switch (ch = *(unsigned char *) fmt++) {
    80029bf6:	6432                	ld	s0,264(sp)
      if (width < 0)
    80029bf8:	f60fdbe3          	bgez	t6,80029b6e <vprintfmt.constprop.0+0x44>
        width = precision, precision = -1;
    80029bfc:	8fba                	mv	t6,a4
    80029bfe:	577d                	li	a4,-1
    80029c00:	b7bd                	j	80029b6e <vprintfmt.constprop.0+0x44>
        ch = *fmt;
    80029c02:	0016c803          	lbu	a6,1(a3)
    switch (ch = *(unsigned char *) fmt++) {
    80029c06:	86ae                	mv	a3,a1
      goto reswitch;
    80029c08:	b79d                	j	80029b6e <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80029c0a:	611c                	ld	a5,0(a0)
    80029c0c:	02500713          	li	a4,37
    80029c10:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029c14:	611c                	ld	a5,0(a0)
    80029c16:	0785                	addi	a5,a5,1
    80029c18:	e11c                	sd	a5,0(a0)
  }
    80029c1a:	bf15                	j	80029b4e <vprintfmt.constprop.0+0x24>
        ch = *fmt;
    80029c1c:	0016c803          	lbu	a6,1(a3)
      precision = va_arg(ap, int);
    80029c20:	4218                	lw	a4,0(a2)
    switch (ch = *(unsigned char *) fmt++) {
    80029c22:	86ae                	mv	a3,a1
      precision = va_arg(ap, int);
    80029c24:	0621                	addi	a2,a2,8
      goto process_precision;
    80029c26:	bfc9                	j	80029bf8 <vprintfmt.constprop.0+0xce>
    **pstr = ch;
    80029c28:	611c                	ld	a5,0(a0)
    80029c2a:	03000693          	li	a3,48
    80029c2e:	07800713          	li	a4,120
    80029c32:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80029c36:	611c                	ld	a5,0(a0)
    80029c38:	4841                	li	a6,16
    80029c3a:	00860693          	addi	a3,a2,8
    80029c3e:	00178893          	addi	a7,a5,1
    80029c42:	01153023          	sd	a7,0(a0)
    **pstr = ch;
    80029c46:	00e780a3          	sb	a4,1(a5)
    (*pstr)++;
    80029c4a:	611c                	ld	a5,0(a0)
    80029c4c:	0785                	addi	a5,a5,1
    80029c4e:	e11c                	sd	a5,0(a0)
    return va_arg(*ap, unsigned long);
    80029c50:	6218                	ld	a4,0(a2)
    80029c52:	8636                	mv	a2,a3
    digs[pos++] = num % base;
    80029c54:	03077f33          	remu	t5,a4,a6
    80029c58:	00410893          	addi	a7,sp,4
    80029c5c:	4685                	li	a3,1
    80029c5e:	c07a                	sw	t5,0(sp)
    if (num < base)
    80029c60:	1b076c63          	bltu	a4,a6,80029e18 <vprintfmt.constprop.0+0x2ee>
    num /= base;
    80029c64:	03075733          	divu	a4,a4,a6
    digs[pos++] = num % base;
    80029c68:	83b6                	mv	t2,a3
    if (num < base)
    80029c6a:	0891                	addi	a7,a7,4
    digs[pos++] = num % base;
    80029c6c:	2685                	addiw	a3,a3,1
    80029c6e:	03077f33          	remu	t5,a4,a6
    80029c72:	ffe8ae23          	sw	t5,-4(a7)
    if (num < base)
    80029c76:	ff0777e3          	bgeu	a4,a6,80029c64 <vprintfmt.constprop.0+0x13a>
  while (width-- > pos)
    80029c7a:	ffff871b          	addiw	a4,t6,-1
    80029c7e:	fff6881b          	addiw	a6,a3,-1
    80029c82:	01f6da63          	bge	a3,t6,80029c96 <vprintfmt.constprop.0+0x16c>
    **pstr = ch;
    80029c86:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80029c8a:	611c                	ld	a5,0(a0)
  while (width-- > pos)
    80029c8c:	377d                	addiw	a4,a4,-1
    (*pstr)++;
    80029c8e:	0785                	addi	a5,a5,1
    80029c90:	e11c                	sd	a5,0(a0)
  while (width-- > pos)
    80029c92:	ff071ae3          	bne	a4,a6,80029c86 <vprintfmt.constprop.0+0x15c>
  while (pos-- > 0)
    80029c96:	038a                	slli	t2,t2,0x2
    80029c98:	007106b3          	add	a3,sp,t2
    80029c9c:	ffc10893          	addi	a7,sp,-4
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80029ca0:	4825                	li	a6,9
    80029ca2:	a819                	j	80029cb8 <vprintfmt.constprop.0+0x18e>
    80029ca4:	0577071b          	addiw	a4,a4,87
    **pstr = ch;
    80029ca8:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029cac:	611c                	ld	a5,0(a0)
  while (pos-- > 0)
    80029cae:	16f1                	addi	a3,a3,-4
    (*pstr)++;
    80029cb0:	0785                	addi	a5,a5,1
    80029cb2:	e11c                	sd	a5,0(a0)
  while (pos-- > 0)
    80029cb4:	e8d88de3          	beq	a7,a3,80029b4e <vprintfmt.constprop.0+0x24>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80029cb8:	4298                	lw	a4,0(a3)
    80029cba:	fee865e3          	bltu	a6,a4,80029ca4 <vprintfmt.constprop.0+0x17a>
    80029cbe:	0307071b          	addiw	a4,a4,48
    80029cc2:	b7dd                	j	80029ca8 <vprintfmt.constprop.0+0x17e>
  if (lflag >= 2)
    80029cc4:	4785                	li	a5,1
      precision = va_arg(ap, int);
    80029cc6:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    80029cca:	01e7c463          	blt	a5,t5,80029cd2 <vprintfmt.constprop.0+0x1a8>
  else if (lflag)
    80029cce:	140f0763          	beqz	t5,80029e1c <vprintfmt.constprop.0+0x2f2>
    return va_arg(*ap, long);
    80029cd2:	6218                	ld	a4,0(a2)
    **pstr = ch;
    80029cd4:	611c                	ld	a5,0(a0)
      if ((long long) num < 0) {
    80029cd6:	14074963          	bltz	a4,80029e28 <vprintfmt.constprop.0+0x2fe>
      num = getint(&ap, lflag);
    80029cda:	8636                	mv	a2,a3
    80029cdc:	4829                	li	a6,10
    80029cde:	bf9d                	j	80029c54 <vprintfmt.constprop.0+0x12a>
        ch = *fmt;
    80029ce0:	0016c803          	lbu	a6,1(a3)
      lflag++;
    80029ce4:	2f05                	addiw	t5,t5,1
    switch (ch = *(unsigned char *) fmt++) {
    80029ce6:	86ae                	mv	a3,a1
      goto reswitch;
    80029ce8:	b559                	j	80029b6e <vprintfmt.constprop.0+0x44>
    switch (ch = *(unsigned char *) fmt++) {
    80029cea:	4841                	li	a6,16
  if (lflag >= 2)
    80029cec:	4705                	li	a4,1
    **pstr = ch;
    80029cee:	611c                	ld	a5,0(a0)
      precision = va_arg(ap, int);
    80029cf0:	00860693          	addi	a3,a2,8
  if (lflag >= 2)
    80029cf4:	f5e74ee3          	blt	a4,t5,80029c50 <vprintfmt.constprop.0+0x126>
  else if (lflag)
    80029cf8:	f40f1ce3          	bnez	t5,80029c50 <vprintfmt.constprop.0+0x126>
    return va_arg(*ap, unsigned int);
    80029cfc:	00066703          	lwu	a4,0(a2)
    80029d00:	8636                	mv	a2,a3
    80029d02:	bf89                	j	80029c54 <vprintfmt.constprop.0+0x12a>
      if ((p = va_arg(ap, char *)) == NULL)
    80029d04:	6214                	ld	a3,0(a2)
    80029d06:	ca99                	beqz	a3,80029d1c <vprintfmt.constprop.0+0x1f2>
      if (width > 0 && padc != '-')
    80029d08:	07f05663          	blez	t6,80029d74 <vprintfmt.constprop.0+0x24a>
    80029d0c:	02d00793          	li	a5,45
    80029d10:	02f29863          	bne	t0,a5,80029d40 <vprintfmt.constprop.0+0x216>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029d14:	0006c783          	lbu	a5,0(a3)
    80029d18:	e3ad                	bnez	a5,80029d7a <vprintfmt.constprop.0+0x250>
    80029d1a:	a879                	j	80029db8 <vprintfmt.constprop.0+0x28e>
        p = "(null)";
    80029d1c:	0000f697          	auipc	a3,0xf
    80029d20:	b5c68693          	addi	a3,a3,-1188 # 80038878 <__func__.0+0xb858>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029d24:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80029d28:	05f05963          	blez	t6,80029d7a <vprintfmt.constprop.0+0x250>
    80029d2c:	02d00813          	li	a6,45
        p = "(null)";
    80029d30:	0000f697          	auipc	a3,0xf
    80029d34:	b4868693          	addi	a3,a3,-1208 # 80038878 <__func__.0+0xb858>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029d38:	02800793          	li	a5,40
      if (width > 0 && padc != '-')
    80029d3c:	03028f63          	beq	t0,a6,80029d7a <vprintfmt.constprop.0+0x250>
  const char *p = s;
    80029d40:	87b6                	mv	a5,a3
  while (n-- && *p)
    80029d42:	00e688b3          	add	a7,a3,a4
    80029d46:	e709                	bnez	a4,80029d50 <vprintfmt.constprop.0+0x226>
    80029d48:	a829                	j	80029d62 <vprintfmt.constprop.0+0x238>
    p++;
    80029d4a:	0785                	addi	a5,a5,1
  while (n-- && *p)
    80029d4c:	01178663          	beq	a5,a7,80029d58 <vprintfmt.constprop.0+0x22e>
    80029d50:	0007c803          	lbu	a6,0(a5)
    80029d54:	fe081be3          	bnez	a6,80029d4a <vprintfmt.constprop.0+0x220>
  return p - s;
    80029d58:	8f95                	sub	a5,a5,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    80029d5a:	40ff8fbb          	subw	t6,t6,a5
    80029d5e:	01f05b63          	blez	t6,80029d74 <vprintfmt.constprop.0+0x24a>
    **pstr = ch;
    80029d62:	611c                	ld	a5,0(a0)
    80029d64:	00578023          	sb	t0,0(a5)
    (*pstr)++;
    80029d68:	611c                	ld	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80029d6a:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    80029d6c:	0785                	addi	a5,a5,1
    80029d6e:	e11c                	sd	a5,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80029d70:	fe0f9ae3          	bnez	t6,80029d64 <vprintfmt.constprop.0+0x23a>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029d74:	0006c783          	lbu	a5,0(a3)
    80029d78:	cbb9                	beqz	a5,80029dce <vprintfmt.constprop.0+0x2a4>
    80029d7a:	58fd                	li	a7,-1
    80029d7c:	04075b63          	bgez	a4,80029dd2 <vprintfmt.constprop.0+0x2a8>
    **pstr = ch;
    80029d80:	6118                	ld	a4,0(a0)
        p++;
    80029d82:	00168813          	addi	a6,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029d86:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80029d88:	00f70023          	sb	a5,0(a4)
    (*pstr)++;
    80029d8c:	611c                	ld	a5,0(a0)
    80029d8e:	8742                	mv	a4,a6
    80029d90:	0785                	addi	a5,a5,1
    80029d92:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029d94:	0016c683          	lbu	a3,1(a3)
    80029d98:	ce91                	beqz	a3,80029db4 <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    80029d9a:	00d78023          	sb	a3,0(a5)
    (*pstr)++;
    80029d9e:	611c                	ld	a5,0(a0)
        p++;
    80029da0:	0705                	addi	a4,a4,1
    (*pstr)++;
    80029da2:	0785                	addi	a5,a5,1
    80029da4:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029da6:	00074683          	lbu	a3,0(a4)
    80029daa:	fae5                	bnez	a3,80029d9a <vprintfmt.constprop.0+0x270>
    80029dac:	40e8083b          	subw	a6,a6,a4
    80029db0:	01f80fbb          	addw	t6,a6,t6
      for (; width > 0; width--)
    80029db4:	01f05d63          	blez	t6,80029dce <vprintfmt.constprop.0+0x2a4>
    **pstr = ch;
    80029db8:	611c                	ld	a5,0(a0)
    80029dba:	02000713          	li	a4,32
    80029dbe:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029dc2:	611c                	ld	a5,0(a0)
      for (; width > 0; width--)
    80029dc4:	3ffd                	addiw	t6,t6,-1
    (*pstr)++;
    80029dc6:	0785                	addi	a5,a5,1
    80029dc8:	e11c                	sd	a5,0(a0)
      for (; width > 0; width--)
    80029dca:	fe0f9ae3          	bnez	t6,80029dbe <vprintfmt.constprop.0+0x294>
      if ((p = va_arg(ap, char *)) == NULL)
    80029dce:	0621                	addi	a2,a2,8
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029dd0:	bbbd                	j	80029b4e <vprintfmt.constprop.0+0x24>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029dd2:	377d                	addiw	a4,a4,-1
    80029dd4:	ff1700e3          	beq	a4,a7,80029db4 <vprintfmt.constprop.0+0x28a>
    **pstr = ch;
    80029dd8:	00053803          	ld	a6,0(a0)
        p++;
    80029ddc:	0685                	addi	a3,a3,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029dde:	3ffd                	addiw	t6,t6,-1
    **pstr = ch;
    80029de0:	00f80023          	sb	a5,0(a6)
    (*pstr)++;
    80029de4:	611c                	ld	a5,0(a0)
    80029de6:	0785                	addi	a5,a5,1
    80029de8:	e11c                	sd	a5,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80029dea:	0006c783          	lbu	a5,0(a3)
    80029dee:	f3f5                	bnez	a5,80029dd2 <vprintfmt.constprop.0+0x2a8>
    80029df0:	b7d1                	j	80029db4 <vprintfmt.constprop.0+0x28a>
      if (width < 0)
    80029df2:	87fe                	mv	a5,t6
    80029df4:	000fd363          	bgez	t6,80029dfa <vprintfmt.constprop.0+0x2d0>
    80029df8:	4781                	li	a5,0
        ch = *fmt;
    80029dfa:	0016c803          	lbu	a6,1(a3)
      if (width < 0)
    80029dfe:	00078f9b          	sext.w	t6,a5
    switch (ch = *(unsigned char *) fmt++) {
    80029e02:	86ae                	mv	a3,a1
      goto reswitch;
    80029e04:	b3ad                	j	80029b6e <vprintfmt.constprop.0+0x44>
    **pstr = ch;
    80029e06:	611c                	ld	a5,0(a0)
    80029e08:	4218                	lw	a4,0(a2)
      putch(va_arg(ap, int), putdat);
    80029e0a:	0621                	addi	a2,a2,8
    **pstr = ch;
    80029e0c:	00e78023          	sb	a4,0(a5)
    (*pstr)++;
    80029e10:	611c                	ld	a5,0(a0)
    80029e12:	0785                	addi	a5,a5,1
    80029e14:	e11c                	sd	a5,0(a0)
  }
    80029e16:	bb25                	j	80029b4e <vprintfmt.constprop.0+0x24>
    if (num < base)
    80029e18:	4381                	li	t2,0
    80029e1a:	b585                	j	80029c7a <vprintfmt.constprop.0+0x150>
    return va_arg(*ap, int);
    80029e1c:	4218                	lw	a4,0(a2)
    80029e1e:	bd5d                	j	80029cd4 <vprintfmt.constprop.0+0x1aa>
    switch (ch = *(unsigned char *) fmt++) {
    80029e20:	4829                	li	a6,10
    80029e22:	b5e9                	j	80029cec <vprintfmt.constprop.0+0x1c2>
    80029e24:	4821                	li	a6,8
    80029e26:	b5d9                	j	80029cec <vprintfmt.constprop.0+0x1c2>
    **pstr = ch;
    80029e28:	02d00613          	li	a2,45
    80029e2c:	00c78023          	sb	a2,0(a5)
    (*pstr)++;
    80029e30:	611c                	ld	a5,0(a0)
        num = -(long long) num;
    80029e32:	40e00733          	neg	a4,a4
    80029e36:	8636                	mv	a2,a3
    (*pstr)++;
    80029e38:	0785                	addi	a5,a5,1
    80029e3a:	e11c                	sd	a5,0(a0)
        num = -(long long) num;
    80029e3c:	4829                	li	a6,10
    80029e3e:	bd19                	j	80029c54 <vprintfmt.constprop.0+0x12a>

0000000080029e40 <vprintfmt.constprop.1>:
static void vprintfmt(void (*putch)(int, void**), void **putdat, const char *fmt, va_list ap)
    80029e40:	b6010113          	addi	sp,sp,-1184
    80029e44:	14f10713          	addi	a4,sp,335
    80029e48:	fc077713          	andi	a4,a4,-64
    80029e4c:	45b13023          	sd	s11,1088(sp)
    80029e50:	83ae                	mv	t2,a1
    80029e52:	48813c23          	sd	s0,1176(sp)
    80029e56:	48913823          	sd	s1,1168(sp)
    80029e5a:	49213423          	sd	s2,1160(sp)
    80029e5e:	49313023          	sd	s3,1152(sp)
    80029e62:	47413c23          	sd	s4,1144(sp)
    80029e66:	47513823          	sd	s5,1136(sp)
    80029e6a:	47613423          	sd	s6,1128(sp)
  tohost = (uintptr_t)magic_mem;
    80029e6e:	2c070f13          	addi	t5,a4,704
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029e72:	02500593          	li	a1,37
  buf[buflen++] = ch;
    80029e76:	00027897          	auipc	a7,0x27
    80029e7a:	25e88893          	addi	a7,a7,606 # 800510d4 <buflen.2>
    80029e7e:	00027697          	auipc	a3,0x27
    80029e82:	20268693          	addi	a3,a3,514 # 80051080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    80029e86:	4829                	li	a6,10
  magic_mem[0] = which;
    80029e88:	04000613          	li	a2,64
  magic_mem[1] = arg0;
    80029e8c:	4e85                	li	t4,1
  tohost = (uintptr_t)magic_mem;
    80029e8e:	00011e17          	auipc	t3,0x11
    80029e92:	172e0e13          	addi	t3,t3,370 # 8003b000 <tohost>
    80029e96:	00011797          	auipc	a5,0x11
    80029e9a:	1aa78793          	addi	a5,a5,426 # 8003b040 <fromhost>
    switch (ch = *(unsigned char *) fmt++) {
    80029e9e:	00003d97          	auipc	s11,0x3
    80029ea2:	2e6d8d93          	addi	s11,s11,742 # 8002d184 <__func__.0+0x164>
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029ea6:	00054f83          	lbu	t6,0(a0)
    80029eaa:	000f841b          	sext.w	s0,t6
    80029eae:	06bf8563          	beq	t6,a1,80029f18 <vprintfmt.constprop.1+0xd8>
      if (ch == '\0')
    80029eb2:	cc49                	beqz	s0,80029f4c <vprintfmt.constprop.1+0x10c>
  buf[buflen++] = ch;
    80029eb4:	00027317          	auipc	t1,0x27
    80029eb8:	22032303          	lw	t1,544(t1) # 800510d4 <buflen.2>
      fmt++;
    80029ebc:	0505                	addi	a0,a0,1
  buf[buflen++] = ch;
    80029ebe:	0013029b          	addiw	t0,t1,1
    80029ec2:	9336                	add	t1,t1,a3
    80029ec4:	0058a023          	sw	t0,0(a7)
    80029ec8:	01f30023          	sb	t6,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    80029ecc:	01040463          	beq	s0,a6,80029ed4 <vprintfmt.constprop.1+0x94>
    80029ed0:	fcc29be3          	bne	t0,a2,80029ea6 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    80029ed4:	2cc73023          	sd	a2,704(a4)
  magic_mem[1] = arg0;
    80029ed8:	2dd73423          	sd	t4,712(a4)
  magic_mem[2] = arg1;
    80029edc:	2cd73823          	sd	a3,720(a4)
  magic_mem[3] = arg2;
    80029ee0:	2c573c23          	sd	t0,728(a4)
  __sync_synchronize();
    80029ee4:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80029ee8:	01ee3023          	sd	t5,0(t3)
  while (fromhost == 0)
    80029eec:	0007b303          	ld	t1,0(a5)
    80029ef0:	fe030ee3          	beqz	t1,80029eec <vprintfmt.constprop.1+0xac>
  fromhost = 0;
    80029ef4:	00011317          	auipc	t1,0x11
    80029ef8:	14033623          	sd	zero,332(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    80029efc:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80029f00:	2c073303          	ld	t1,704(a4)
    buflen = 0;
    80029f04:	00027317          	auipc	t1,0x27
    80029f08:	1c032823          	sw	zero,464(t1) # 800510d4 <buflen.2>
    while ((ch = *(unsigned char *) fmt) != '%') {
    80029f0c:	00054f83          	lbu	t6,0(a0)
    80029f10:	000f841b          	sext.w	s0,t6
    80029f14:	f8bf9fe3          	bne	t6,a1,80029eb2 <vprintfmt.constprop.1+0x72>
    switch (ch = *(unsigned char *) fmt++) {
    80029f18:	00154483          	lbu	s1,1(a0)
    fmt++;
    80029f1c:	00150a13          	addi	s4,a0,1
    precision = -1;
    80029f20:	537d                	li	t1,-1
    fmt++;
    80029f22:	8452                	mv	s0,s4
    width = -1;
    80029f24:	8f9a                	mv	t6,t1
    padc = ' ';
    80029f26:	02000a93          	li	s5,32
    lflag = 0;
    80029f2a:	4901                	li	s2,0
    switch (ch = *(unsigned char *) fmt++) {
    80029f2c:	05500993          	li	s3,85
    80029f30:	fdd4829b          	addiw	t0,s1,-35
    80029f34:	0ff2f293          	zext.b	t0,t0
    80029f38:	00140513          	addi	a0,s0,1
    80029f3c:	0459e763          	bltu	s3,t0,80029f8a <vprintfmt.constprop.1+0x14a>
    80029f40:	028a                	slli	t0,t0,0x2
    80029f42:	92ee                	add	t0,t0,s11
    80029f44:	0002ab03          	lw	s6,0(t0)
    80029f48:	9b6e                	add	s6,s6,s11
    80029f4a:	8b02                	jr	s6
}
    80029f4c:	49813403          	ld	s0,1176(sp)
    80029f50:	49013483          	ld	s1,1168(sp)
    80029f54:	48813903          	ld	s2,1160(sp)
    80029f58:	48013983          	ld	s3,1152(sp)
    80029f5c:	47813a03          	ld	s4,1144(sp)
    80029f60:	47013a83          	ld	s5,1136(sp)
    80029f64:	46813b03          	ld	s6,1128(sp)
    80029f68:	44013d83          	ld	s11,1088(sp)
    80029f6c:	4a010113          	addi	sp,sp,1184
    80029f70:	8082                	ret
      padc = '0';
    80029f72:	8aa6                	mv	s5,s1
      goto reswitch;
    80029f74:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    80029f78:	842a                	mv	s0,a0
    80029f7a:	00140513          	addi	a0,s0,1
    80029f7e:	fdd4829b          	addiw	t0,s1,-35
    80029f82:	0ff2f293          	zext.b	t0,t0
    80029f86:	fa59fde3          	bgeu	s3,t0,80029f40 <vprintfmt.constprop.1+0x100>
  buf[buflen++] = ch;
    80029f8a:	00027317          	auipc	t1,0x27
    80029f8e:	14a32303          	lw	t1,330(t1) # 800510d4 <buflen.2>
    80029f92:	00027f97          	auipc	t6,0x27
    80029f96:	0eef8f93          	addi	t6,t6,238 # 80051080 <buf.1>
    80029f9a:	02500293          	li	t0,37
    80029f9e:	0013051b          	addiw	a0,t1,1
    80029fa2:	937e                	add	t1,t1,t6
    80029fa4:	00530023          	sb	t0,0(t1)
    80029fa8:	00027417          	auipc	s0,0x27
    80029fac:	12a42623          	sw	a0,300(s0) # 800510d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    80029fb0:	04000313          	li	t1,64
    80029fb4:	56650f63          	beq	a0,t1,8002a532 <vprintfmt.constprop.1+0x6f2>
      fmt = last_fmt;
    80029fb8:	8552                	mv	a0,s4
    80029fba:	b5f5                	j	80029ea6 <vprintfmt.constprop.1+0x66>
    80029fbc:	47713023          	sd	s7,1120(sp)
        precision = precision * 10 + ch - '0';
    80029fc0:	fd04831b          	addiw	t1,s1,-48
        ch = *fmt;
    80029fc4:	00144483          	lbu	s1,1(s0)
        if (ch < '0' || ch > '9')
    80029fc8:	4ba5                	li	s7,9
    80029fca:	fd04841b          	addiw	s0,s1,-48
        ch = *fmt;
    80029fce:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    80029fd2:	088befe3          	bltu	s7,s0,8002a870 <vprintfmt.constprop.1+0xa30>
    switch (ch = *(unsigned char *) fmt++) {
    80029fd6:	842a                	mv	s0,a0
        precision = precision * 10 + ch - '0';
    80029fd8:	0023151b          	slliw	a0,t1,0x2
        ch = *fmt;
    80029fdc:	00144483          	lbu	s1,1(s0)
        precision = precision * 10 + ch - '0';
    80029fe0:	0065053b          	addw	a0,a0,t1
    80029fe4:	0015151b          	slliw	a0,a0,0x1
    80029fe8:	0055053b          	addw	a0,a0,t0
        if (ch < '0' || ch > '9')
    80029fec:	fd048b1b          	addiw	s6,s1,-48
      for (precision = 0; ; ++fmt) {
    80029ff0:	0405                	addi	s0,s0,1
        precision = precision * 10 + ch - '0';
    80029ff2:	fd05031b          	addiw	t1,a0,-48
        ch = *fmt;
    80029ff6:	0004829b          	sext.w	t0,s1
        if (ch < '0' || ch > '9')
    80029ffa:	fd6bffe3          	bgeu	s7,s6,80029fd8 <vprintfmt.constprop.1+0x198>
    switch (ch = *(unsigned char *) fmt++) {
    80029ffe:	46013b83          	ld	s7,1120(sp)
      if (width < 0)
    8002a002:	f20fd7e3          	bgez	t6,80029f30 <vprintfmt.constprop.1+0xf0>
        width = precision, precision = -1;
    8002a006:	8f9a                	mv	t6,t1
    8002a008:	537d                	li	t1,-1
    8002a00a:	b71d                	j	80029f30 <vprintfmt.constprop.1+0xf0>
        ch = *fmt;
    8002a00c:	00144483          	lbu	s1,1(s0)
    switch (ch = *(unsigned char *) fmt++) {
    8002a010:	842a                	mv	s0,a0
      goto reswitch;
    8002a012:	bf39                	j	80029f30 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002a014:	00027f97          	auipc	t6,0x27
    8002a018:	0c0faf83          	lw	t6,192(t6) # 800510d4 <buflen.2>
    8002a01c:	00027297          	auipc	t0,0x27
    8002a020:	06428293          	addi	t0,t0,100 # 80051080 <buf.1>
    8002a024:	02500413          	li	s0,37
    8002a028:	001f831b          	addiw	t1,t6,1
    8002a02c:	9f96                	add	t6,t6,t0
    8002a02e:	008f8023          	sb	s0,0(t6)
    8002a032:	00027497          	auipc	s1,0x27
    8002a036:	0a64a123          	sw	t1,162(s1) # 800510d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a03a:	04000f93          	li	t6,64
    8002a03e:	e7f314e3          	bne	t1,t6,80029ea6 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002a042:	04673023          	sd	t1,64(a4)
  magic_mem[1] = arg0;
    8002a046:	4f85                	li	t6,1
    8002a048:	05f73423          	sd	t6,72(a4)
  magic_mem[2] = arg1;
    8002a04c:	04573823          	sd	t0,80(a4)
  magic_mem[3] = arg2;
    8002a050:	04673c23          	sd	t1,88(a4)
  __sync_synchronize();
    8002a054:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a058:	04070313          	addi	t1,a4,64
    8002a05c:	00011f97          	auipc	t6,0x11
    8002a060:	fa6fb223          	sd	t1,-92(t6) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a064:	00011317          	auipc	t1,0x11
    8002a068:	fdc30313          	addi	t1,t1,-36 # 8003b040 <fromhost>
    8002a06c:	00033f83          	ld	t6,0(t1)
    8002a070:	fe0f8ee3          	beqz	t6,8002a06c <vprintfmt.constprop.1+0x22c>
  fromhost = 0;
    8002a074:	00011317          	auipc	t1,0x11
    8002a078:	fc033623          	sd	zero,-52(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a07c:	0330000f          	fence	rw,rw
    buflen = 0;
    8002a080:	00027317          	auipc	t1,0x27
    8002a084:	04032a23          	sw	zero,84(t1) # 800510d4 <buflen.2>
  return magic_mem[0];
    8002a088:	04073303          	ld	t1,64(a4)
    buflen = 0;
    8002a08c:	bd29                	j	80029ea6 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002a08e:	00144483          	lbu	s1,1(s0)
      precision = va_arg(ap, int);
    8002a092:	0003a303          	lw	t1,0(t2)
    switch (ch = *(unsigned char *) fmt++) {
    8002a096:	842a                	mv	s0,a0
      precision = va_arg(ap, int);
    8002a098:	03a1                	addi	t2,t2,8
      goto process_precision;
    8002a09a:	b7a5                	j	8002a002 <vprintfmt.constprop.1+0x1c2>
  buf[buflen++] = ch;
    8002a09c:	00027317          	auipc	t1,0x27
    8002a0a0:	03832303          	lw	t1,56(t1) # 800510d4 <buflen.2>
    8002a0a4:	00027917          	auipc	s2,0x27
    8002a0a8:	fdc90913          	addi	s2,s2,-36 # 80051080 <buf.1>
    8002a0ac:	47713023          	sd	s7,1120(sp)
    8002a0b0:	45813c23          	sd	s8,1112(sp)
    8002a0b4:	45913823          	sd	s9,1104(sp)
    8002a0b8:	45a13423          	sd	s10,1096(sp)
    8002a0bc:	00690433          	add	s0,s2,t1
    8002a0c0:	00027997          	auipc	s3,0x27
    8002a0c4:	01498993          	addi	s3,s3,20 # 800510d4 <buflen.2>
    8002a0c8:	0013029b          	addiw	t0,t1,1
    8002a0cc:	03000493          	li	s1,48
    8002a0d0:	00940023          	sb	s1,0(s0)
    8002a0d4:	0059a023          	sw	t0,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a0d8:	04000413          	li	s0,64
    8002a0dc:	62828d63          	beq	t0,s0,8002a716 <vprintfmt.constprop.1+0x8d6>
  buf[buflen++] = ch;
    8002a0e0:	2309                	addiw	t1,t1,2
    8002a0e2:	92ca                	add	t0,t0,s2
    8002a0e4:	07800493          	li	s1,120
    8002a0e8:	0069a023          	sw	t1,0(s3)
    8002a0ec:	00928023          	sb	s1,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a0f0:	42831a63          	bne	t1,s0,8002a524 <vprintfmt.constprop.1+0x6e4>
  magic_mem[0] = which;
    8002a0f4:	10673023          	sd	t1,256(a4)
  magic_mem[1] = arg0;
    8002a0f8:	4285                	li	t0,1
    8002a0fa:	10573423          	sd	t0,264(a4)
  magic_mem[2] = arg1;
    8002a0fe:	11273823          	sd	s2,272(a4)
  magic_mem[3] = arg2;
    8002a102:	10673c23          	sd	t1,280(a4)
  __sync_synchronize();
    8002a106:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a10a:	10070313          	addi	t1,a4,256
    8002a10e:	00011297          	auipc	t0,0x11
    8002a112:	ee62b923          	sd	t1,-270(t0) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a116:	00011317          	auipc	t1,0x11
    8002a11a:	f2a30313          	addi	t1,t1,-214 # 8003b040 <fromhost>
    8002a11e:	00033283          	ld	t0,0(t1)
    8002a122:	fe028ee3          	beqz	t0,8002a11e <vprintfmt.constprop.1+0x2de>
  fromhost = 0;
    8002a126:	00011317          	auipc	t1,0x11
    8002a12a:	f0033d23          	sd	zero,-230(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a12e:	0330000f          	fence	rw,rw
    buflen = 0;
    8002a132:	00027317          	auipc	t1,0x27
    8002a136:	fa032123          	sw	zero,-94(t1) # 800510d4 <buflen.2>
  return magic_mem[0];
    8002a13a:	10073303          	ld	t1,256(a4)
  else if (lflag)
    8002a13e:	00838493          	addi	s1,t2,8
    buflen = 0;
    8002a142:	4301                	li	t1,0
    8002a144:	4441                	li	s0,16
    8002a146:	a6d5                	j	8002a52a <vprintfmt.constprop.1+0x6ea>
    8002a148:	47713023          	sd	s7,1120(sp)
    8002a14c:	45813c23          	sd	s8,1112(sp)
    8002a150:	45913823          	sd	s9,1104(sp)
    8002a154:	45a13423          	sd	s10,1096(sp)
  if (lflag >= 2)
    8002a158:	4305                	li	t1,1
      precision = va_arg(ap, int);
    8002a15a:	00838413          	addi	s0,t2,8
  if (lflag >= 2)
    8002a15e:	01234463          	blt	t1,s2,8002a166 <vprintfmt.constprop.1+0x326>
  else if (lflag)
    8002a162:	3a090e63          	beqz	s2,8002a51e <vprintfmt.constprop.1+0x6de>
    return va_arg(*ap, long);
    8002a166:	0003b283          	ld	t0,0(t2)
  buf[buflen++] = ch;
    8002a16a:	00027317          	auipc	t1,0x27
    8002a16e:	f6a32303          	lw	t1,-150(t1) # 800510d4 <buflen.2>
    8002a172:	00027997          	auipc	s3,0x27
    8002a176:	f6298993          	addi	s3,s3,-158 # 800510d4 <buflen.2>
      if ((long long) num < 0) {
    8002a17a:	5402cd63          	bltz	t0,8002a6d4 <vprintfmt.constprop.1+0x894>
      num = getint(&ap, lflag);
    8002a17e:	83a2                	mv	t2,s0
    8002a180:	00027917          	auipc	s2,0x27
    8002a184:	f0090913          	addi	s2,s2,-256 # 80051080 <buf.1>
    8002a188:	4429                	li	s0,10
    digs[pos++] = num % base;
    8002a18a:	0282fb33          	remu	s6,t0,s0
    8002a18e:	01410a13          	addi	s4,sp,20
    8002a192:	4485                	li	s1,1
    8002a194:	c85a                	sw	s6,16(sp)
    if (num < base)
    8002a196:	3682e263          	bltu	t0,s0,8002a4fa <vprintfmt.constprop.1+0x6ba>
    num /= base;
    8002a19a:	0282d2b3          	divu	t0,t0,s0
    digs[pos++] = num % base;
    8002a19e:	8ba6                	mv	s7,s1
    if (num < base)
    8002a1a0:	0a11                	addi	s4,s4,4
    digs[pos++] = num % base;
    8002a1a2:	2485                	addiw	s1,s1,1
    8002a1a4:	0282fb33          	remu	s6,t0,s0
    8002a1a8:	ff6a2e23          	sw	s6,-4(s4)
    if (num < base)
    8002a1ac:	fe82f7e3          	bgeu	t0,s0,8002a19a <vprintfmt.constprop.1+0x35a>
  while (width-- > pos)
    8002a1b0:	ffff829b          	addiw	t0,t6,-1
    8002a1b4:	fff48a1b          	addiw	s4,s1,-1
    8002a1b8:	09f4d463          	bge	s1,t6,8002a240 <vprintfmt.constprop.1+0x400>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a1bc:	04000413          	li	s0,64
  magic_mem[1] = arg0;
    8002a1c0:	4c05                	li	s8,1
  tohost = (uintptr_t)magic_mem;
    8002a1c2:	0c070b13          	addi	s6,a4,192
    8002a1c6:	00011497          	auipc	s1,0x11
    8002a1ca:	e3a48493          	addi	s1,s1,-454 # 8003b000 <tohost>
    8002a1ce:	00011f97          	auipc	t6,0x11
    8002a1d2:	e72f8f93          	addi	t6,t6,-398 # 8003b040 <fromhost>
  buf[buflen++] = ch;
    8002a1d6:	4c89                	li	s9,2
    8002a1d8:	00130d1b          	addiw	s10,t1,1
    8002a1dc:	934a                	add	t1,t1,s2
    8002a1de:	01a9a023          	sw	s10,0(s3)
    8002a1e2:	01530023          	sb	s5,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a1e6:	2e8d1863          	bne	s10,s0,8002a4d6 <vprintfmt.constprop.1+0x696>
  magic_mem[0] = which;
    8002a1ea:	e360                	sd	s0,192(a4)
  magic_mem[1] = arg0;
    8002a1ec:	0d873423          	sd	s8,200(a4)
  magic_mem[2] = arg1;
    8002a1f0:	0d273823          	sd	s2,208(a4)
  magic_mem[3] = arg2;
    8002a1f4:	ef60                	sd	s0,216(a4)
  __sync_synchronize();
    8002a1f6:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a1fa:	0164b023          	sd	s6,0(s1)
  while (fromhost == 0)
    8002a1fe:	000fb303          	ld	t1,0(t6)
    8002a202:	fe030ee3          	beqz	t1,8002a1fe <vprintfmt.constprop.1+0x3be>
  fromhost = 0;
    8002a206:	00011317          	auipc	t1,0x11
    8002a20a:	e2033d23          	sd	zero,-454(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a20e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a212:	0c073303          	ld	t1,192(a4)
    buflen = 0;
    8002a216:	00027317          	auipc	t1,0x27
    8002a21a:	ea032f23          	sw	zero,-322(t1) # 800510d4 <buflen.2>
  while (width-- > pos)
    8002a21e:	fff2831b          	addiw	t1,t0,-1
    8002a222:	2b430c63          	beq	t1,s4,8002a4da <vprintfmt.constprop.1+0x69a>
  buf[buflen++] = ch;
    8002a226:	01590023          	sb	s5,0(s2)
  while (width-- > pos)
    8002a22a:	32f9                	addiw	t0,t0,-2
    8002a22c:	2a5a0963          	beq	s4,t0,8002a4de <vprintfmt.constprop.1+0x69e>
  buf[buflen++] = ch;
    8002a230:	0199a023          	sw	s9,0(s3)
    8002a234:	015900a3          	sb	s5,1(s2)
    8002a238:	4309                	li	t1,2
  while (width-- > pos)
    8002a23a:	32fd                	addiw	t0,t0,-1
    8002a23c:	f85a1ee3          	bne	s4,t0,8002a1d8 <vprintfmt.constprop.1+0x398>
  while (pos-- > 0)
    8002a240:	0b8a                	slli	s7,s7,0x2
    8002a242:	0800                	addi	s0,sp,16
    8002a244:	945e                	add	s0,s0,s7
    8002a246:	00c10a93          	addi	s5,sp,12
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a24a:	4a25                	li	s4,9
  magic_mem[0] = which;
    8002a24c:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002a250:	4c85                	li	s9,1
  tohost = (uintptr_t)magic_mem;
    8002a252:	08070c13          	addi	s8,a4,128
    8002a256:	00011b97          	auipc	s7,0x11
    8002a25a:	daab8b93          	addi	s7,s7,-598 # 8003b000 <tohost>
    8002a25e:	00011297          	auipc	t0,0x11
    8002a262:	de228293          	addi	t0,t0,-542 # 8003b040 <fromhost>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a266:	4b29                	li	s6,10
    8002a268:	a831                	j	8002a284 <vprintfmt.constprop.1+0x444>
  buf[buflen++] = ch;
    8002a26a:	934a                	add	t1,t1,s2
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a26c:	030f8f9b          	addiw	t6,t6,48
  buf[buflen++] = ch;
    8002a270:	01f30023          	sb	t6,0(t1)
    8002a274:	01a9a023          	sw	s10,0(s3)
    8002a278:	836a                	mv	t1,s10
  if (ch == '\n' || buflen == sizeof(buf))
    8002a27a:	029d0463          	beq	s10,s1,8002a2a2 <vprintfmt.constprop.1+0x462>
  while (pos-- > 0)
    8002a27e:	1471                	addi	s0,s0,-4
    8002a280:	068a8063          	beq	s5,s0,8002a2e0 <vprintfmt.constprop.1+0x4a0>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a284:	00042f83          	lw	t6,0(s0)
  buf[buflen++] = ch;
    8002a288:	00130d1b          	addiw	s10,t1,1
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    8002a28c:	fdfa7fe3          	bgeu	s4,t6,8002a26a <vprintfmt.constprop.1+0x42a>
    8002a290:	057f8f9b          	addiw	t6,t6,87
  buf[buflen++] = ch;
    8002a294:	934a                	add	t1,t1,s2
    8002a296:	01f30023          	sb	t6,0(t1)
    8002a29a:	01a9a023          	sw	s10,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a29e:	fd6f9de3          	bne	t6,s6,8002a278 <vprintfmt.constprop.1+0x438>
  magic_mem[0] = which;
    8002a2a2:	e344                	sd	s1,128(a4)
  magic_mem[1] = arg0;
    8002a2a4:	09973423          	sd	s9,136(a4)
  magic_mem[2] = arg1;
    8002a2a8:	09273823          	sd	s2,144(a4)
  magic_mem[3] = arg2;
    8002a2ac:	09a73c23          	sd	s10,152(a4)
  __sync_synchronize();
    8002a2b0:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a2b4:	018bb023          	sd	s8,0(s7)
  while (fromhost == 0)
    8002a2b8:	0002b303          	ld	t1,0(t0)
    8002a2bc:	fe030ee3          	beqz	t1,8002a2b8 <vprintfmt.constprop.1+0x478>
  fromhost = 0;
    8002a2c0:	00011317          	auipc	t1,0x11
    8002a2c4:	d8033023          	sd	zero,-640(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a2c8:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a2cc:	08073303          	ld	t1,128(a4)
  while (pos-- > 0)
    8002a2d0:	1471                	addi	s0,s0,-4
    buflen = 0;
    8002a2d2:	00027317          	auipc	t1,0x27
    8002a2d6:	e0032123          	sw	zero,-510(t1) # 800510d4 <buflen.2>
    8002a2da:	4301                	li	t1,0
  while (pos-- > 0)
    8002a2dc:	fa8a94e3          	bne	s5,s0,8002a284 <vprintfmt.constprop.1+0x444>
    8002a2e0:	46013b83          	ld	s7,1120(sp)
    8002a2e4:	45813c03          	ld	s8,1112(sp)
    8002a2e8:	45013c83          	ld	s9,1104(sp)
    8002a2ec:	44813d03          	ld	s10,1096(sp)
    8002a2f0:	be5d                	j	80029ea6 <vprintfmt.constprop.1+0x66>
        ch = *fmt;
    8002a2f2:	00144483          	lbu	s1,1(s0)
      lflag++;
    8002a2f6:	2905                	addiw	s2,s2,1
    switch (ch = *(unsigned char *) fmt++) {
    8002a2f8:	842a                	mv	s0,a0
      goto reswitch;
    8002a2fa:	b91d                	j	80029f30 <vprintfmt.constprop.1+0xf0>
    8002a2fc:	47713023          	sd	s7,1120(sp)
    8002a300:	45813c23          	sd	s8,1112(sp)
    8002a304:	45913823          	sd	s9,1104(sp)
    8002a308:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002a30c:	4441                	li	s0,16
  if (lflag >= 2)
    8002a30e:	4285                	li	t0,1
  buf[buflen++] = ch;
    8002a310:	00027317          	auipc	t1,0x27
    8002a314:	dc432303          	lw	t1,-572(t1) # 800510d4 <buflen.2>
      precision = va_arg(ap, int);
    8002a318:	00838493          	addi	s1,t2,8
  if (lflag >= 2)
    8002a31c:	1d22c363          	blt	t0,s2,8002a4e2 <vprintfmt.constprop.1+0x6a2>
  else if (lflag)
    8002a320:	3e091263          	bnez	s2,8002a704 <vprintfmt.constprop.1+0x8c4>
    return va_arg(*ap, unsigned int);
    8002a324:	0003e283          	lwu	t0,0(t2)
    8002a328:	00027997          	auipc	s3,0x27
    8002a32c:	dac98993          	addi	s3,s3,-596 # 800510d4 <buflen.2>
    8002a330:	83a6                	mv	t2,s1
    8002a332:	00027917          	auipc	s2,0x27
    8002a336:	d4e90913          	addi	s2,s2,-690 # 80051080 <buf.1>
    8002a33a:	bd81                	j	8002a18a <vprintfmt.constprop.1+0x34a>
      if ((p = va_arg(ap, char *)) == NULL)
    8002a33c:	0003b483          	ld	s1,0(t2)
    8002a340:	47713023          	sd	s7,1120(sp)
    8002a344:	45813c23          	sd	s8,1112(sp)
    8002a348:	45913823          	sd	s9,1104(sp)
    8002a34c:	45a13423          	sd	s10,1096(sp)
    8002a350:	42048463          	beqz	s1,8002a778 <vprintfmt.constprop.1+0x938>
      if (width > 0 && padc != '-')
    8002a354:	1bf05563          	blez	t6,8002a4fe <vprintfmt.constprop.1+0x6be>
    8002a358:	02d00293          	li	t0,45
    8002a35c:	445a9063          	bne	s5,t0,8002a79c <vprintfmt.constprop.1+0x95c>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a360:	0004c283          	lbu	t0,0(s1)
    8002a364:	0002899b          	sext.w	s3,t0
    8002a368:	2c028363          	beqz	t0,8002a62e <vprintfmt.constprop.1+0x7ee>
  tohost = (uintptr_t)magic_mem;
    8002a36c:	20070413          	addi	s0,a4,512
    8002a370:	e422                	sd	s0,8(sp)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a372:	5d7d                	li	s10,-1
  buf[buflen++] = ch;
    8002a374:	00027b97          	auipc	s7,0x27
    8002a378:	d60b8b93          	addi	s7,s7,-672 # 800510d4 <buflen.2>
    8002a37c:	00027b17          	auipc	s6,0x27
    8002a380:	d04b0b13          	addi	s6,s6,-764 # 80051080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a384:	4ca9                	li	s9,10
  magic_mem[0] = which;
    8002a386:	04000c13          	li	s8,64
    8002a38a:	00011917          	auipc	s2,0x11
    8002a38e:	cb690913          	addi	s2,s2,-842 # 8003b040 <fromhost>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a392:	04034263          	bltz	t1,8002a3d6 <vprintfmt.constprop.1+0x596>
    8002a396:	fff30a9b          	addiw	s5,t1,-1
    8002a39a:	29aa8863          	beq	s5,s10,8002a62a <vprintfmt.constprop.1+0x7ea>
  buf[buflen++] = ch;
    8002a39e:	00027417          	auipc	s0,0x27
    8002a3a2:	d3642403          	lw	s0,-714(s0) # 800510d4 <buflen.2>
    8002a3a6:	00140a1b          	addiw	s4,s0,1
    8002a3aa:	945a                	add	s0,s0,s6
    8002a3ac:	014ba023          	sw	s4,0(s7)
    8002a3b0:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a3b4:	03998f63          	beq	s3,s9,8002a3f2 <vprintfmt.constprop.1+0x5b2>
    8002a3b8:	038a0d63          	beq	s4,s8,8002a3f2 <vprintfmt.constprop.1+0x5b2>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a3bc:	0014c283          	lbu	t0,1(s1)
        p++;
    8002a3c0:	0485                	addi	s1,s1,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a3c2:	3ffd                	addiw	t6,t6,-1
    8002a3c4:	0002899b          	sext.w	s3,t0
    8002a3c8:	26028163          	beqz	t0,8002a62a <vprintfmt.constprop.1+0x7ea>
    8002a3cc:	1c034863          	bltz	t1,8002a59c <vprintfmt.constprop.1+0x75c>
    8002a3d0:	8356                	mv	t1,s5
    8002a3d2:	fc0352e3          	bgez	t1,8002a396 <vprintfmt.constprop.1+0x556>
  buf[buflen++] = ch;
    8002a3d6:	00027417          	auipc	s0,0x27
    8002a3da:	cfe42403          	lw	s0,-770(s0) # 800510d4 <buflen.2>
    8002a3de:	8a9a                	mv	s5,t1
    8002a3e0:	00140a1b          	addiw	s4,s0,1
    8002a3e4:	945a                	add	s0,s0,s6
    8002a3e6:	014ba023          	sw	s4,0(s7)
    8002a3ea:	00540023          	sb	t0,0(s0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a3ee:	fd9995e3          	bne	s3,s9,8002a3b8 <vprintfmt.constprop.1+0x578>
  magic_mem[0] = which;
    8002a3f2:	21873023          	sd	s8,512(a4)
  magic_mem[1] = arg0;
    8002a3f6:	4405                	li	s0,1
    8002a3f8:	20873423          	sd	s0,520(a4)
  magic_mem[2] = arg1;
    8002a3fc:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002a400:	21473c23          	sd	s4,536(a4)
  __sync_synchronize();
    8002a404:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a408:	62a2                	ld	t0,8(sp)
    8002a40a:	00011417          	auipc	s0,0x11
    8002a40e:	bf640413          	addi	s0,s0,-1034 # 8003b000 <tohost>
    8002a412:	00543023          	sd	t0,0(s0)
  while (fromhost == 0)
    8002a416:	00093283          	ld	t0,0(s2)
    8002a41a:	fe028ee3          	beqz	t0,8002a416 <vprintfmt.constprop.1+0x5d6>
  fromhost = 0;
    8002a41e:	00011297          	auipc	t0,0x11
    8002a422:	c202b123          	sd	zero,-990(t0) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a426:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a42a:	20073283          	ld	t0,512(a4)
    buflen = 0;
    8002a42e:	00027297          	auipc	t0,0x27
    8002a432:	ca02a323          	sw	zero,-858(t0) # 800510d4 <buflen.2>
    8002a436:	b759                	j	8002a3bc <vprintfmt.constprop.1+0x57c>
      if (width < 0)
    8002a438:	82fe                	mv	t0,t6
    8002a43a:	000fd363          	bgez	t6,8002a440 <vprintfmt.constprop.1+0x600>
    8002a43e:	4281                	li	t0,0
        ch = *fmt;
    8002a440:	00144483          	lbu	s1,1(s0)
      if (width < 0)
    8002a444:	00028f9b          	sext.w	t6,t0
    switch (ch = *(unsigned char *) fmt++) {
    8002a448:	842a                	mv	s0,a0
      goto reswitch;
    8002a44a:	b4dd                	j	80029f30 <vprintfmt.constprop.1+0xf0>
  buf[buflen++] = ch;
    8002a44c:	00027317          	auipc	t1,0x27
    8002a450:	c8832303          	lw	t1,-888(t1) # 800510d4 <buflen.2>
      putch(va_arg(ap, int), putdat);
    8002a454:	0003a283          	lw	t0,0(t2)
  buf[buflen++] = ch;
    8002a458:	00027917          	auipc	s2,0x27
    8002a45c:	c2890913          	addi	s2,s2,-984 # 80051080 <buf.1>
    8002a460:	00130f9b          	addiw	t6,t1,1
    8002a464:	934a                	add	t1,t1,s2
    8002a466:	00530023          	sb	t0,0(t1)
    8002a46a:	00027417          	auipc	s0,0x27
    8002a46e:	c7f42523          	sw	t6,-918(s0) # 800510d4 <buflen.2>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a472:	4329                	li	t1,10
    8002a474:	00628863          	beq	t0,t1,8002a484 <vprintfmt.constprop.1+0x644>
    8002a478:	04000313          	li	t1,64
    8002a47c:	006f8463          	beq	t6,t1,8002a484 <vprintfmt.constprop.1+0x644>
      putch(va_arg(ap, int), putdat);
    8002a480:	03a1                	addi	t2,t2,8
    8002a482:	b415                	j	80029ea6 <vprintfmt.constprop.1+0x66>
  magic_mem[0] = which;
    8002a484:	04000313          	li	t1,64
    8002a488:	28673023          	sd	t1,640(a4)
  magic_mem[1] = arg0;
    8002a48c:	4305                	li	t1,1
    8002a48e:	28673423          	sd	t1,648(a4)
  magic_mem[2] = arg1;
    8002a492:	29273823          	sd	s2,656(a4)
  magic_mem[3] = arg2;
    8002a496:	29f73c23          	sd	t6,664(a4)
  __sync_synchronize();
    8002a49a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a49e:	28070313          	addi	t1,a4,640
    8002a4a2:	00011f97          	auipc	t6,0x11
    8002a4a6:	b46fbf23          	sd	t1,-1186(t6) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a4aa:	00011317          	auipc	t1,0x11
    8002a4ae:	b9630313          	addi	t1,t1,-1130 # 8003b040 <fromhost>
    8002a4b2:	00033f83          	ld	t6,0(t1)
    8002a4b6:	fe0f8ee3          	beqz	t6,8002a4b2 <vprintfmt.constprop.1+0x672>
  fromhost = 0;
    8002a4ba:	00011317          	auipc	t1,0x11
    8002a4be:	b8033323          	sd	zero,-1146(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a4c2:	0330000f          	fence	rw,rw
    buflen = 0;
    8002a4c6:	00027317          	auipc	t1,0x27
    8002a4ca:	c0032723          	sw	zero,-1010(t1) # 800510d4 <buflen.2>
  return magic_mem[0];
    8002a4ce:	28073303          	ld	t1,640(a4)
      putch(va_arg(ap, int), putdat);
    8002a4d2:	03a1                	addi	t2,t2,8
    8002a4d4:	bac9                	j	80029ea6 <vprintfmt.constprop.1+0x66>
    8002a4d6:	836a                	mv	t1,s10
    8002a4d8:	b38d                	j	8002a23a <vprintfmt.constprop.1+0x3fa>
  while (width-- > pos)
    8002a4da:	4301                	li	t1,0
    8002a4dc:	b395                	j	8002a240 <vprintfmt.constprop.1+0x400>
  buf[buflen++] = ch;
    8002a4de:	4305                	li	t1,1
    8002a4e0:	b385                	j	8002a240 <vprintfmt.constprop.1+0x400>
    return va_arg(*ap, unsigned long long);
    8002a4e2:	0003b283          	ld	t0,0(t2)
    8002a4e6:	00027997          	auipc	s3,0x27
    8002a4ea:	bee98993          	addi	s3,s3,-1042 # 800510d4 <buflen.2>
    8002a4ee:	83a6                	mv	t2,s1
    8002a4f0:	00027917          	auipc	s2,0x27
    8002a4f4:	b9090913          	addi	s2,s2,-1136 # 80051080 <buf.1>
    8002a4f8:	b949                	j	8002a18a <vprintfmt.constprop.1+0x34a>
    if (num < base)
    8002a4fa:	4b81                	li	s7,0
    8002a4fc:	b955                	j	8002a1b0 <vprintfmt.constprop.1+0x370>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a4fe:	0004c283          	lbu	t0,0(s1)
    8002a502:	0002899b          	sext.w	s3,t0
    8002a506:	e60293e3          	bnez	t0,8002a36c <vprintfmt.constprop.1+0x52c>
    8002a50a:	46013b83          	ld	s7,1120(sp)
    8002a50e:	45813c03          	ld	s8,1112(sp)
    8002a512:	45013c83          	ld	s9,1104(sp)
    8002a516:	44813d03          	ld	s10,1096(sp)
      if ((p = va_arg(ap, char *)) == NULL)
    8002a51a:	03a1                	addi	t2,t2,8
    8002a51c:	b269                	j	80029ea6 <vprintfmt.constprop.1+0x66>
    return va_arg(*ap, int);
    8002a51e:	0003a283          	lw	t0,0(t2)
    8002a522:	b1a1                	j	8002a16a <vprintfmt.constprop.1+0x32a>
    8002a524:	4441                	li	s0,16
    8002a526:	00838493          	addi	s1,t2,8
    return va_arg(*ap, unsigned long);
    8002a52a:	0003b283          	ld	t0,0(t2)
    8002a52e:	83a6                	mv	t2,s1
    8002a530:	b9a9                	j	8002a18a <vprintfmt.constprop.1+0x34a>
  magic_mem[0] = which;
    8002a532:	e308                	sd	a0,0(a4)
  magic_mem[1] = arg0;
    8002a534:	4305                	li	t1,1
    8002a536:	00673423          	sd	t1,8(a4)
  magic_mem[2] = arg1;
    8002a53a:	01f73823          	sd	t6,16(a4)
  magic_mem[3] = arg2;
    8002a53e:	ef08                	sd	a0,24(a4)
  __sync_synchronize();
    8002a540:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a544:	00011317          	auipc	t1,0x11
    8002a548:	afc30313          	addi	t1,t1,-1284 # 8003b040 <fromhost>
    8002a54c:	00011517          	auipc	a0,0x11
    8002a550:	aae53a23          	sd	a4,-1356(a0) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a554:	00033503          	ld	a0,0(t1)
    8002a558:	dd75                	beqz	a0,8002a554 <vprintfmt.constprop.1+0x714>
  fromhost = 0;
    8002a55a:	00011517          	auipc	a0,0x11
    8002a55e:	ae053323          	sd	zero,-1306(a0) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a562:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a566:	6308                	ld	a0,0(a4)
    buflen = 0;
    8002a568:	00027517          	auipc	a0,0x27
    8002a56c:	b6052623          	sw	zero,-1172(a0) # 800510d4 <buflen.2>
      fmt = last_fmt;
    8002a570:	8552                	mv	a0,s4
    8002a572:	ba15                	j	80029ea6 <vprintfmt.constprop.1+0x66>
    8002a574:	47713023          	sd	s7,1120(sp)
    8002a578:	45813c23          	sd	s8,1112(sp)
    8002a57c:	45913823          	sd	s9,1104(sp)
    8002a580:	45a13423          	sd	s10,1096(sp)
    switch (ch = *(unsigned char *) fmt++) {
    8002a584:	4429                	li	s0,10
    8002a586:	b361                	j	8002a30e <vprintfmt.constprop.1+0x4ce>
    8002a588:	47713023          	sd	s7,1120(sp)
    8002a58c:	45813c23          	sd	s8,1112(sp)
    8002a590:	45913823          	sd	s9,1104(sp)
    8002a594:	45a13423          	sd	s10,1096(sp)
    8002a598:	4421                	li	s0,8
    8002a59a:	bb95                	j	8002a30e <vprintfmt.constprop.1+0x4ce>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a59c:	8926                	mv	s2,s1
  if (ch == '\n' || buflen == sizeof(buf))
    8002a59e:	4a29                	li	s4,10
    8002a5a0:	04000a93          	li	s5,64
    8002a5a4:	a801                	j	8002a5b4 <vprintfmt.constprop.1+0x774>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a5a6:	00194283          	lbu	t0,1(s2)
        p++;
    8002a5aa:	0905                	addi	s2,s2,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a5ac:	0002899b          	sext.w	s3,t0
    8002a5b0:	06028963          	beqz	t0,8002a622 <vprintfmt.constprop.1+0x7e2>
  buf[buflen++] = ch;
    8002a5b4:	00027317          	auipc	t1,0x27
    8002a5b8:	b2032303          	lw	t1,-1248(t1) # 800510d4 <buflen.2>
    8002a5bc:	0013041b          	addiw	s0,t1,1
    8002a5c0:	935a                	add	t1,t1,s6
    8002a5c2:	008ba023          	sw	s0,0(s7)
    8002a5c6:	00530023          	sb	t0,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a5ca:	01498463          	beq	s3,s4,8002a5d2 <vprintfmt.constprop.1+0x792>
    8002a5ce:	fd541ce3          	bne	s0,s5,8002a5a6 <vprintfmt.constprop.1+0x766>
  magic_mem[0] = which;
    8002a5d2:	04000313          	li	t1,64
    8002a5d6:	20673023          	sd	t1,512(a4)
  magic_mem[1] = arg0;
    8002a5da:	4305                	li	t1,1
    8002a5dc:	20673423          	sd	t1,520(a4)
  magic_mem[2] = arg1;
    8002a5e0:	21673823          	sd	s6,528(a4)
  magic_mem[3] = arg2;
    8002a5e4:	20873c23          	sd	s0,536(a4)
  __sync_synchronize();
    8002a5e8:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a5ec:	20070313          	addi	t1,a4,512
    8002a5f0:	00011297          	auipc	t0,0x11
    8002a5f4:	a062b823          	sd	t1,-1520(t0) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a5f8:	00011297          	auipc	t0,0x11
    8002a5fc:	a4828293          	addi	t0,t0,-1464 # 8003b040 <fromhost>
    8002a600:	0002b303          	ld	t1,0(t0)
    8002a604:	fe030ee3          	beqz	t1,8002a600 <vprintfmt.constprop.1+0x7c0>
  fromhost = 0;
    8002a608:	00011317          	auipc	t1,0x11
    8002a60c:	a2033c23          	sd	zero,-1480(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a610:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a614:	20073303          	ld	t1,512(a4)
    buflen = 0;
    8002a618:	00027317          	auipc	t1,0x27
    8002a61c:	aa032e23          	sw	zero,-1348(t1) # 800510d4 <buflen.2>
    8002a620:	b759                	j	8002a5a6 <vprintfmt.constprop.1+0x766>
    8002a622:	009f8fbb          	addw	t6,t6,s1
    8002a626:	412f8fbb          	subw	t6,t6,s2
      for (; width > 0; width--)
    8002a62a:	eff050e3          	blez	t6,8002a50a <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002a62e:	00027317          	auipc	t1,0x27
    8002a632:	aa632303          	lw	t1,-1370(t1) # 800510d4 <buflen.2>
    8002a636:	00027997          	auipc	s3,0x27
    8002a63a:	a9e98993          	addi	s3,s3,-1378 # 800510d4 <buflen.2>
    8002a63e:	00027917          	auipc	s2,0x27
    8002a642:	a4290913          	addi	s2,s2,-1470 # 80051080 <buf.1>
    8002a646:	02000a13          	li	s4,32
  if (ch == '\n' || buflen == sizeof(buf))
    8002a64a:	04000493          	li	s1,64
  magic_mem[1] = arg0;
    8002a64e:	4a85                	li	s5,1
  tohost = (uintptr_t)magic_mem;
    8002a650:	1c070b93          	addi	s7,a4,448
    8002a654:	00011b17          	auipc	s6,0x11
    8002a658:	9acb0b13          	addi	s6,s6,-1620 # 8003b000 <tohost>
    8002a65c:	00011297          	auipc	t0,0x11
    8002a660:	9e428293          	addi	t0,t0,-1564 # 8003b040 <fromhost>
  buf[buflen++] = ch;
    8002a664:	4c09                	li	s8,2
    8002a666:	0013041b          	addiw	s0,t1,1
    8002a66a:	934a                	add	t1,t1,s2
    8002a66c:	0089a023          	sw	s0,0(s3)
    8002a670:	01430023          	sb	s4,0(t1)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a674:	04941e63          	bne	s0,s1,8002a6d0 <vprintfmt.constprop.1+0x890>
  magic_mem[0] = which;
    8002a678:	1c973023          	sd	s1,448(a4)
  magic_mem[1] = arg0;
    8002a67c:	1d573423          	sd	s5,456(a4)
  magic_mem[2] = arg1;
    8002a680:	1d273823          	sd	s2,464(a4)
  magic_mem[3] = arg2;
    8002a684:	1c973c23          	sd	s1,472(a4)
  __sync_synchronize();
    8002a688:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a68c:	017b3023          	sd	s7,0(s6)
  while (fromhost == 0)
    8002a690:	0002b303          	ld	t1,0(t0)
    8002a694:	fe030ee3          	beqz	t1,8002a690 <vprintfmt.constprop.1+0x850>
  fromhost = 0;
    8002a698:	00011317          	auipc	t1,0x11
    8002a69c:	9a033423          	sd	zero,-1624(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a6a0:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a6a4:	1c073303          	ld	t1,448(a4)
      for (; width > 0; width--)
    8002a6a8:	ffff831b          	addiw	t1,t6,-1
    8002a6ac:	0c030163          	beqz	t1,8002a76e <vprintfmt.constprop.1+0x92e>
  buf[buflen++] = ch;
    8002a6b0:	0159a023          	sw	s5,0(s3)
    8002a6b4:	01490023          	sb	s4,0(s2)
      for (; width > 0; width--)
    8002a6b8:	3ff9                	addiw	t6,t6,-2
    8002a6ba:	e40f88e3          	beqz	t6,8002a50a <vprintfmt.constprop.1+0x6ca>
  buf[buflen++] = ch;
    8002a6be:	0189a023          	sw	s8,0(s3)
    8002a6c2:	014900a3          	sb	s4,1(s2)
    8002a6c6:	4309                	li	t1,2
      for (; width > 0; width--)
    8002a6c8:	3ffd                	addiw	t6,t6,-1
    8002a6ca:	f80f9ee3          	bnez	t6,8002a666 <vprintfmt.constprop.1+0x826>
    8002a6ce:	bd35                	j	8002a50a <vprintfmt.constprop.1+0x6ca>
    8002a6d0:	8322                	mv	t1,s0
    8002a6d2:	bfdd                	j	8002a6c8 <vprintfmt.constprop.1+0x888>
  buf[buflen++] = ch;
    8002a6d4:	00027917          	auipc	s2,0x27
    8002a6d8:	9ac90913          	addi	s2,s2,-1620 # 80051080 <buf.1>
    8002a6dc:	006904b3          	add	s1,s2,t1
    8002a6e0:	0013039b          	addiw	t2,t1,1
    8002a6e4:	02d00313          	li	t1,45
    8002a6e8:	00648023          	sb	t1,0(s1)
    8002a6ec:	0079a023          	sw	t2,0(s3)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a6f0:	04000493          	li	s1,64
  buf[buflen++] = ch;
    8002a6f4:	831e                	mv	t1,t2
  if (ch == '\n' || buflen == sizeof(buf))
    8002a6f6:	18938263          	beq	t2,s1,8002a87a <vprintfmt.constprop.1+0xa3a>
        num = -(long long) num;
    8002a6fa:	83a2                	mv	t2,s0
    8002a6fc:	405002b3          	neg	t0,t0
    8002a700:	4429                	li	s0,10
    8002a702:	b461                	j	8002a18a <vprintfmt.constprop.1+0x34a>
    8002a704:	00027997          	auipc	s3,0x27
    8002a708:	9d098993          	addi	s3,s3,-1584 # 800510d4 <buflen.2>
    8002a70c:	00027917          	auipc	s2,0x27
    8002a710:	97490913          	addi	s2,s2,-1676 # 80051080 <buf.1>
    8002a714:	bd19                	j	8002a52a <vprintfmt.constprop.1+0x6ea>
  magic_mem[0] = which;
    8002a716:	14573023          	sd	t0,320(a4)
  magic_mem[1] = arg0;
    8002a71a:	4305                	li	t1,1
    8002a71c:	14673423          	sd	t1,328(a4)
  magic_mem[2] = arg1;
    8002a720:	15273823          	sd	s2,336(a4)
  magic_mem[3] = arg2;
    8002a724:	14573c23          	sd	t0,344(a4)
  __sync_synchronize();
    8002a728:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a72c:	14070313          	addi	t1,a4,320
    8002a730:	00011297          	auipc	t0,0x11
    8002a734:	8c62b823          	sd	t1,-1840(t0) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a738:	00011317          	auipc	t1,0x11
    8002a73c:	90830313          	addi	t1,t1,-1784 # 8003b040 <fromhost>
    8002a740:	00033283          	ld	t0,0(t1)
    8002a744:	fe028ee3          	beqz	t0,8002a740 <vprintfmt.constprop.1+0x900>
  fromhost = 0;
    8002a748:	00011317          	auipc	t1,0x11
    8002a74c:	8e033c23          	sd	zero,-1800(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a750:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a754:	14073403          	ld	s0,320(a4)
  buf[buflen++] = ch;
    8002a758:	07800293          	li	t0,120
    8002a75c:	4305                	li	t1,1
    8002a75e:	00590023          	sb	t0,0(s2)
    8002a762:	0069a023          	sw	t1,0(s3)
    8002a766:	00838493          	addi	s1,t2,8
    8002a76a:	4441                	li	s0,16
    8002a76c:	bb7d                	j	8002a52a <vprintfmt.constprop.1+0x6ea>
    buflen = 0;
    8002a76e:	00027317          	auipc	t1,0x27
    8002a772:	96032323          	sw	zero,-1690(t1) # 800510d4 <buflen.2>
    8002a776:	bb51                	j	8002a50a <vprintfmt.constprop.1+0x6ca>
      if (width > 0 && padc != '-')
    8002a778:	01f05663          	blez	t6,8002a784 <vprintfmt.constprop.1+0x944>
    8002a77c:	02d00293          	li	t0,45
    8002a780:	005a9a63          	bne	s5,t0,8002a794 <vprintfmt.constprop.1+0x954>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a784:	02800293          	li	t0,40
    8002a788:	8996                	mv	s3,t0
        p = "(null)";
    8002a78a:	0000e497          	auipc	s1,0xe
    8002a78e:	0ee48493          	addi	s1,s1,238 # 80038878 <__func__.0+0xb858>
    8002a792:	bee9                	j	8002a36c <vprintfmt.constprop.1+0x52c>
    8002a794:	0000e497          	auipc	s1,0xe
    8002a798:	0e448493          	addi	s1,s1,228 # 80038878 <__func__.0+0xb858>
  const char *p = s;
    8002a79c:	82a6                	mv	t0,s1
  while (n-- && *p)
    8002a79e:	00648933          	add	s2,s1,t1
    8002a7a2:	00031663          	bnez	t1,8002a7ae <vprintfmt.constprop.1+0x96e>
    8002a7a6:	a829                	j	8002a7c0 <vprintfmt.constprop.1+0x980>
    p++;
    8002a7a8:	0285                	addi	t0,t0,1
  while (n-- && *p)
    8002a7aa:	01228563          	beq	t0,s2,8002a7b4 <vprintfmt.constprop.1+0x974>
    8002a7ae:	0002c403          	lbu	s0,0(t0)
    8002a7b2:	f87d                	bnez	s0,8002a7a8 <vprintfmt.constprop.1+0x968>
  return p - s;
    8002a7b4:	409282b3          	sub	t0,t0,s1
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a7b8:	405f8fbb          	subw	t6,t6,t0
    8002a7bc:	d5f051e3          	blez	t6,8002a4fe <vprintfmt.constprop.1+0x6be>
  buf[buflen++] = ch;
    8002a7c0:	00027297          	auipc	t0,0x27
    8002a7c4:	9142a283          	lw	t0,-1772(t0) # 800510d4 <buflen.2>
    8002a7c8:	00027997          	auipc	s3,0x27
    8002a7cc:	90c98993          	addi	s3,s3,-1780 # 800510d4 <buflen.2>
    8002a7d0:	00027917          	auipc	s2,0x27
    8002a7d4:	8b090913          	addi	s2,s2,-1872 # 80051080 <buf.1>
  if (ch == '\n' || buflen == sizeof(buf))
    8002a7d8:	04000a13          	li	s4,64
  magic_mem[1] = arg0;
    8002a7dc:	4b05                	li	s6,1
  tohost = (uintptr_t)magic_mem;
    8002a7de:	24070c93          	addi	s9,a4,576
    8002a7e2:	00011c17          	auipc	s8,0x11
    8002a7e6:	81ec0c13          	addi	s8,s8,-2018 # 8003b000 <tohost>
    8002a7ea:	00011417          	auipc	s0,0x11
    8002a7ee:	85640413          	addi	s0,s0,-1962 # 8003b040 <fromhost>
  buf[buflen++] = ch;
    8002a7f2:	4b89                	li	s7,2
    8002a7f4:	00128d1b          	addiw	s10,t0,1
    8002a7f8:	92ca                	add	t0,t0,s2
    8002a7fa:	01a9a023          	sw	s10,0(s3)
    8002a7fe:	01528023          	sb	s5,0(t0)
  if (ch == '\n' || buflen == sizeof(buf))
    8002a802:	074d1563          	bne	s10,s4,8002a86c <vprintfmt.constprop.1+0xa2c>
  magic_mem[0] = which;
    8002a806:	25473023          	sd	s4,576(a4)
  magic_mem[1] = arg0;
    8002a80a:	25673423          	sd	s6,584(a4)
  magic_mem[2] = arg1;
    8002a80e:	25273823          	sd	s2,592(a4)
  magic_mem[3] = arg2;
    8002a812:	25473c23          	sd	s4,600(a4)
  __sync_synchronize();
    8002a816:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a81a:	019c3023          	sd	s9,0(s8)
  while (fromhost == 0)
    8002a81e:	00043283          	ld	t0,0(s0)
    8002a822:	fe028ee3          	beqz	t0,8002a81e <vprintfmt.constprop.1+0x9de>
  fromhost = 0;
    8002a826:	00011297          	auipc	t0,0x11
    8002a82a:	8002bd23          	sd	zero,-2022(t0) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a82e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a832:	24073283          	ld	t0,576(a4)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a836:	ffff829b          	addiw	t0,t6,-1
    8002a83a:	08028763          	beqz	t0,8002a8c8 <vprintfmt.constprop.1+0xa88>
  buf[buflen++] = ch;
    8002a83e:	0169a023          	sw	s6,0(s3)
    8002a842:	01590023          	sb	s5,0(s2)
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a846:	3ff9                	addiw	t6,t6,-2
    8002a848:	000f8a63          	beqz	t6,8002a85c <vprintfmt.constprop.1+0xa1c>
  buf[buflen++] = ch;
    8002a84c:	0179a023          	sw	s7,0(s3)
    8002a850:	015900a3          	sb	s5,1(s2)
    8002a854:	4289                	li	t0,2
        for (width -= strnlen(p, precision); width > 0; width--)
    8002a856:	3ffd                	addiw	t6,t6,-1
    8002a858:	f80f9ee3          	bnez	t6,8002a7f4 <vprintfmt.constprop.1+0x9b4>
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    8002a85c:	0004c283          	lbu	t0,0(s1)
    8002a860:	0002899b          	sext.w	s3,t0
    8002a864:	ca0283e3          	beqz	t0,8002a50a <vprintfmt.constprop.1+0x6ca>
    8002a868:	4f81                	li	t6,0
    8002a86a:	b609                	j	8002a36c <vprintfmt.constprop.1+0x52c>
    8002a86c:	82ea                	mv	t0,s10
    8002a86e:	b7e5                	j	8002a856 <vprintfmt.constprop.1+0xa16>
    switch (ch = *(unsigned char *) fmt++) {
    8002a870:	46013b83          	ld	s7,1120(sp)
    8002a874:	842a                	mv	s0,a0
    8002a876:	f8cff06f          	j	8002a002 <vprintfmt.constprop.1+0x1c2>
  magic_mem[0] = which;
    8002a87a:	18773023          	sd	t2,384(a4)
  magic_mem[1] = arg0;
    8002a87e:	4305                	li	t1,1
    8002a880:	18673423          	sd	t1,392(a4)
  magic_mem[2] = arg1;
    8002a884:	19273823          	sd	s2,400(a4)
  magic_mem[3] = arg2;
    8002a888:	18773c23          	sd	t2,408(a4)
  __sync_synchronize();
    8002a88c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a890:	18070313          	addi	t1,a4,384
    8002a894:	00010397          	auipc	t2,0x10
    8002a898:	7663b623          	sd	t1,1900(t2) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a89c:	00010317          	auipc	t1,0x10
    8002a8a0:	7a430313          	addi	t1,t1,1956 # 8003b040 <fromhost>
    8002a8a4:	00033383          	ld	t2,0(t1)
    8002a8a8:	fe038ee3          	beqz	t2,8002a8a4 <vprintfmt.constprop.1+0xa64>
  fromhost = 0;
    8002a8ac:	00010317          	auipc	t1,0x10
    8002a8b0:	78033a23          	sd	zero,1940(t1) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a8b4:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a8b8:	18073303          	ld	t1,384(a4)
    buflen = 0;
    8002a8bc:	00027317          	auipc	t1,0x27
    8002a8c0:	80032c23          	sw	zero,-2024(t1) # 800510d4 <buflen.2>
    8002a8c4:	4301                	li	t1,0
    8002a8c6:	bd15                	j	8002a6fa <vprintfmt.constprop.1+0x8ba>
    8002a8c8:	00027f97          	auipc	t6,0x27
    8002a8cc:	800fa623          	sw	zero,-2036(t6) # 800510d4 <buflen.2>
    8002a8d0:	b771                	j	8002a85c <vprintfmt.constprop.1+0xa1c>

000000008002a8d2 <strlen>:
  while (*p)
    8002a8d2:	00054783          	lbu	a5,0(a0)
    8002a8d6:	c78d                	beqz	a5,8002a900 <strlen+0x2e>
    8002a8d8:	4701                	li	a4,0
    8002a8da:	00150793          	addi	a5,a0,1
    8002a8de:	0c0076d7          	vsetvli	a3,zero,e8,m1,ta,ma
    8002a8e2:	97ba                	add	a5,a5,a4
    8002a8e4:	03078087          	vle8ff.v	v1,(a5)
    8002a8e8:	621030d7          	vmseq.vi	v1,v1,0
    8002a8ec:	c2002773          	csrr	a4,vl
    8002a8f0:	4218a657          	vfirst.m	a2,v1
    8002a8f4:	fe0645e3          	bltz	a2,8002a8de <strlen+0xc>
    8002a8f8:	97b2                	add	a5,a5,a2
  return p - s;
    8002a8fa:	40a78533          	sub	a0,a5,a0
    8002a8fe:	8082                	ret
  while (*p)
    8002a900:	4501                	li	a0,0
}
    8002a902:	8082                	ret

000000008002a904 <strnlen>:
  while (n-- && *p)
    8002a904:	00b506b3          	add	a3,a0,a1
  const char *p = s;
    8002a908:	87aa                	mv	a5,a0
  while (n-- && *p)
    8002a90a:	e589                	bnez	a1,8002a914 <strnlen+0x10>
    8002a90c:	a811                	j	8002a920 <strnlen+0x1c>
    p++;
    8002a90e:	0785                	addi	a5,a5,1
  while (n-- && *p)
    8002a910:	00d78563          	beq	a5,a3,8002a91a <strnlen+0x16>
    8002a914:	0007c703          	lbu	a4,0(a5)
    8002a918:	fb7d                	bnez	a4,8002a90e <strnlen+0xa>
  return p - s;
    8002a91a:	40a78533          	sub	a0,a5,a0
}
    8002a91e:	8082                	ret
  while (n-- && *p)
    8002a920:	4501                	li	a0,0
    8002a922:	8082                	ret

000000008002a924 <setStats>:
  READ_CTR(mcycle);
    8002a924:	b0002773          	csrr	a4,mcycle
    8002a928:	00026797          	auipc	a5,0x26
    8002a92c:	75878793          	addi	a5,a5,1880 # 80051080 <buf.1>
    8002a930:	c511                	beqz	a0,8002a93c <setStats+0x18>
    8002a932:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002a934:	b0202773          	csrr	a4,minstret
    8002a938:	e7b8                	sd	a4,72(a5)
}
    8002a93a:	8082                	ret
  READ_CTR(mcycle);
    8002a93c:	63b4                	ld	a3,64(a5)
    8002a93e:	8f15                	sub	a4,a4,a3
    8002a940:	e3b8                	sd	a4,64(a5)
  READ_CTR(minstret);
    8002a942:	b0202773          	csrr	a4,minstret
    8002a946:	67b4                	ld	a3,72(a5)
    8002a948:	8f15                	sub	a4,a4,a3
    8002a94a:	e7b8                	sd	a4,72(a5)
}
    8002a94c:	8082                	ret

000000008002a94e <tohost_exit>:
  tohost = (code << 1) | 1;
    8002a94e:	00151793          	slli	a5,a0,0x1
    8002a952:	0017e793          	ori	a5,a5,1
    8002a956:	00010717          	auipc	a4,0x10
    8002a95a:	6af73523          	sd	a5,1706(a4) # 8003b000 <tohost>
  while (1);
    8002a95e:	a001                	j	8002a95e <tohost_exit+0x10>

000000008002a960 <handle_trap>:
  tohost = (code << 1) | 1;
    8002a960:	6785                	lui	a5,0x1
    8002a962:	a7378793          	addi	a5,a5,-1421 # a73 <_test_table_size+0xa72>
    8002a966:	00010717          	auipc	a4,0x10
    8002a96a:	68f73d23          	sd	a5,1690(a4) # 8003b000 <tohost>
  while (1);
    8002a96e:	a001                	j	8002a96e <handle_trap+0xe>

000000008002a970 <exit>:
{
    8002a970:	1141                	addi	sp,sp,-16
    8002a972:	e406                	sd	ra,8(sp)
  tohost_exit(code);
    8002a974:	fdbff0ef          	jal	8002a94e <tohost_exit>

000000008002a978 <abort>:
  tohost = (code << 1) | 1;
    8002a978:	10d00793          	li	a5,269
    8002a97c:	00010717          	auipc	a4,0x10
    8002a980:	68f73223          	sd	a5,1668(a4) # 8003b000 <tohost>
  while (1);
    8002a984:	a001                	j	8002a984 <abort+0xc>

000000008002a986 <printstr>:
  while (*p)
    8002a986:	00054783          	lbu	a5,0(a0)
{
    8002a98a:	7159                	addi	sp,sp,-112
    8002a98c:	03f10693          	addi	a3,sp,63
    8002a990:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002a994:	cfb9                	beqz	a5,8002a9f2 <printstr+0x6c>
    8002a996:	4701                	li	a4,0
    8002a998:	00150793          	addi	a5,a0,1
    8002a99c:	0c007657          	vsetvli	a2,zero,e8,m1,ta,ma
    8002a9a0:	97ba                	add	a5,a5,a4
    8002a9a2:	03078087          	vle8ff.v	v1,(a5)
    8002a9a6:	621030d7          	vmseq.vi	v1,v1,0
    8002a9aa:	c2002773          	csrr	a4,vl
    8002a9ae:	4218a5d7          	vfirst.m	a1,v1
    8002a9b2:	fe05c5e3          	bltz	a1,8002a99c <printstr+0x16>
    8002a9b6:	97ae                	add	a5,a5,a1
  return p - s;
    8002a9b8:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002a9ba:	04000713          	li	a4,64
    8002a9be:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002a9c0:	4705                	li	a4,1
    8002a9c2:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002a9c4:	ea88                	sd	a0,16(a3)
  magic_mem[3] = arg2;
    8002a9c6:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002a9c8:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002a9cc:	00010717          	auipc	a4,0x10
    8002a9d0:	67470713          	addi	a4,a4,1652 # 8003b040 <fromhost>
    8002a9d4:	00010797          	auipc	a5,0x10
    8002a9d8:	62d7b623          	sd	a3,1580(a5) # 8003b000 <tohost>
  while (fromhost == 0)
    8002a9dc:	631c                	ld	a5,0(a4)
    8002a9de:	dffd                	beqz	a5,8002a9dc <printstr+0x56>
  fromhost = 0;
    8002a9e0:	00010797          	auipc	a5,0x10
    8002a9e4:	6607b023          	sd	zero,1632(a5) # 8003b040 <fromhost>
  __sync_synchronize();
    8002a9e8:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002a9ec:	629c                	ld	a5,0(a3)
}
    8002a9ee:	6165                	addi	sp,sp,112
    8002a9f0:	8082                	ret
  while (*p)
    8002a9f2:	4781                	li	a5,0
    8002a9f4:	b7d9                	j	8002a9ba <printstr+0x34>

000000008002a9f6 <puts>:
    8002a9f6:	00054783          	lbu	a5,0(a0)
{
    8002a9fa:	7171                	addi	sp,sp,-176
    8002a9fc:	03f10693          	addi	a3,sp,63
    8002aa00:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002aa04:	cfdd                	beqz	a5,8002aac2 <puts+0xcc>
    8002aa06:	4601                	li	a2,0
    8002aa08:	00150793          	addi	a5,a0,1
    8002aa0c:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002aa10:	97b2                	add	a5,a5,a2
    8002aa12:	03078087          	vle8ff.v	v1,(a5)
    8002aa16:	621030d7          	vmseq.vi	v1,v1,0
    8002aa1a:	c2002673          	csrr	a2,vl
    8002aa1e:	4218a5d7          	vfirst.m	a1,v1
    8002aa22:	fe05c5e3          	bltz	a1,8002aa0c <puts+0x16>
    8002aa26:	97ae                	add	a5,a5,a1
  return p - s;
    8002aa28:	8f89                	sub	a5,a5,a0
  magic_mem[0] = which;
    8002aa2a:	04000713          	li	a4,64
    8002aa2e:	e2b8                	sd	a4,64(a3)
  magic_mem[1] = arg0;
    8002aa30:	4705                	li	a4,1
    8002aa32:	e6b8                	sd	a4,72(a3)
  magic_mem[2] = arg1;
    8002aa34:	eaa8                	sd	a0,80(a3)
  magic_mem[3] = arg2;
    8002aa36:	eebc                	sd	a5,88(a3)
  __sync_synchronize();
    8002aa38:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002aa3c:	00010617          	auipc	a2,0x10
    8002aa40:	5c460613          	addi	a2,a2,1476 # 8003b000 <tohost>
    8002aa44:	04068793          	addi	a5,a3,64
    8002aa48:	e21c                	sd	a5,0(a2)
  while (fromhost == 0)
    8002aa4a:	00010797          	auipc	a5,0x10
    8002aa4e:	5f678793          	addi	a5,a5,1526 # 8003b040 <fromhost>
    8002aa52:	6398                	ld	a4,0(a5)
    8002aa54:	df7d                	beqz	a4,8002aa52 <puts+0x5c>
  fromhost = 0;
    8002aa56:	00010717          	auipc	a4,0x10
    8002aa5a:	5e073523          	sd	zero,1514(a4) # 8003b040 <fromhost>
  __sync_synchronize();
    8002aa5e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002aa62:	62b8                	ld	a4,64(a3)
  magic_mem[0] = which;
    8002aa64:	04000593          	li	a1,64
    8002aa68:	e28c                	sd	a1,0(a3)
  magic_mem[1] = arg0;
    8002aa6a:	4705                	li	a4,1
    8002aa6c:	e698                	sd	a4,8(a3)
  syscall(SYS_write, 1, (uintptr_t)s, strlen(s));
    8002aa6e:	0000e597          	auipc	a1,0xe
    8002aa72:	e1258593          	addi	a1,a1,-494 # 80038880 <__func__.0+0xb860>
  magic_mem[2] = arg1;
    8002aa76:	ea8c                	sd	a1,16(a3)
  magic_mem[3] = arg2;
    8002aa78:	ee98                	sd	a4,24(a3)
  __sync_synchronize();
    8002aa7a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002aa7e:	e214                	sd	a3,0(a2)
  while (fromhost == 0)
    8002aa80:	6398                	ld	a4,0(a5)
    8002aa82:	df7d                	beqz	a4,8002aa80 <puts+0x8a>
  fromhost = 0;
    8002aa84:	00010797          	auipc	a5,0x10
    8002aa88:	5a07be23          	sd	zero,1468(a5) # 8003b040 <fromhost>
  __sync_synchronize();
    8002aa8c:	0330000f          	fence	rw,rw
  while (*p)
    8002aa90:	00054783          	lbu	a5,0(a0)
  return magic_mem[0];
    8002aa94:	6298                	ld	a4,0(a3)
  while (*p)
    8002aa96:	cb85                	beqz	a5,8002aac6 <puts+0xd0>
    8002aa98:	4681                	li	a3,0
    8002aa9a:	00150793          	addi	a5,a0,1
    8002aa9e:	0c007757          	vsetvli	a4,zero,e8,m1,ta,ma
    8002aaa2:	97b6                	add	a5,a5,a3
    8002aaa4:	03078087          	vle8ff.v	v1,(a5)
    8002aaa8:	621030d7          	vmseq.vi	v1,v1,0
    8002aaac:	c20026f3          	csrr	a3,vl
    8002aab0:	4218a657          	vfirst.m	a2,v1
    8002aab4:	fe0645e3          	bltz	a2,8002aa9e <puts+0xa8>
    8002aab8:	97b2                	add	a5,a5,a2
  return strlen(s);
    8002aaba:	40a7853b          	subw	a0,a5,a0
}
    8002aabe:	614d                	addi	sp,sp,176
    8002aac0:	8082                	ret
  while (*p)
    8002aac2:	4781                	li	a5,0
    8002aac4:	b79d                	j	8002aa2a <puts+0x34>
    8002aac6:	4501                	li	a0,0
}
    8002aac8:	614d                	addi	sp,sp,176
    8002aaca:	8082                	ret

000000008002aacc <thread_entry>:
  while (cid != 0);
    8002aacc:	e111                	bnez	a0,8002aad0 <thread_entry+0x4>
}
    8002aace:	8082                	ret
  while (cid != 0);
    8002aad0:	a001                	j	8002aad0 <thread_entry+0x4>

000000008002aad2 <printhex>:
  for (i = 0; i < 16; i++)
    8002aad2:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002aad6:	5208a157          	vid.v	v2
    8002aada:	5e0540d7          	vmv.v.x	v1,a0
    8002aade:	96213157          	vsll.vi	v2,v2,2
    8002aae2:	03800613          	li	a2,56
    8002aae6:	03000793          	li	a5,48
    8002aaea:	a21100d7          	vsrl.vv	v1,v1,v2
    8002aaee:	02000693          	li	a3,32
    8002aaf2:	02800713          	li	a4,40
    8002aaf6:	a2164157          	vsrl.vx	v2,v1,a2
    8002aafa:	a217c857          	vsrl.vx	v16,v1,a5
    8002aafe:	a216c457          	vsrl.vx	v8,v1,a3
    8002ab02:	a21747d7          	vsrl.vx	v15,v1,a4
    8002ab06:	a21433d7          	vsrl.vi	v7,v1,8
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002ab0a:	a2183357          	vsrl.vi	v6,v1,16
    8002ab0e:	a21c32d7          	vsrl.vi	v5,v1,24
    8002ab12:	0d707057          	vsetvli	zero,zero,e32,mf2,ta,ma
    8002ab16:	b22044d7          	vncvt.x.x.w	v9,v2
    8002ab1a:	b21046d7          	vncvt.x.x.w	v13,v1
    8002ab1e:	b2704657          	vncvt.x.x.w	v12,v7
    8002ab22:	b26045d7          	vncvt.x.x.w	v11,v6
    8002ab26:	b2504557          	vncvt.x.x.w	v10,v5
    8002ab2a:	b2804257          	vncvt.x.x.w	v4,v8
    8002ab2e:	b2f041d7          	vncvt.x.x.w	v3,v15
    8002ab32:	b3004757          	vncvt.x.x.w	v14,v16
    8002ab36:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ab3a:	b29044d7          	vncvt.x.x.w	v9,v9
    8002ab3e:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ab42:	2627b157          	vand.vi	v2,v2,15
    8002ab46:	2617b0d7          	vand.vi	v1,v1,15
    8002ab4a:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ab4e:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002ab52:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ab56:	2677b3d7          	vand.vi	v7,v7,15
    8002ab5a:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ab5e:	b2c04657          	vncvt.x.x.w	v12,v12
    8002ab62:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ab66:	2667b357          	vand.vi	v6,v6,15
    8002ab6a:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ab6e:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002ab72:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ab76:	2657b2d7          	vand.vi	v5,v5,15
    8002ab7a:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ab7e:	b2a04557          	vncvt.x.x.w	v10,v10
    8002ab82:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ab86:	2687b457          	vand.vi	v8,v8,15
    8002ab8a:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ab8e:	b2404257          	vncvt.x.x.w	v4,v4
    8002ab92:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ab96:	26f7b7d7          	vand.vi	v15,v15,15
    8002ab9a:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002ab9e:	b23041d7          	vncvt.x.x.w	v3,v3
    8002aba2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002aba6:	2707b8d7          	vand.vi	v17,v16,15
    8002abaa:	0ce07057          	vsetvli	zero,zero,e16,mf4,ta,ma
    8002abae:	b2e04757          	vncvt.x.x.w	v14,v14
    8002abb2:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002abb6:	b29044d7          	vncvt.x.x.w	v9,v9
    8002abba:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002abbe:	7224b057          	vmsleu.vi	v0,v2,9
    8002abc2:	05700713          	li	a4,87
    8002abc6:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002abca:	5e074157          	vmv.v.x	v2,a4
    8002abce:	5e07c9d7          	vmv.v.x	v19,a5
    8002abd2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002abd6:	7214b0d7          	vmsleu.vi	v1,v1,9
    8002abda:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002abde:	b2d046d7          	vncvt.x.x.w	v13,v13
    8002abe2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002abe6:	7274b3d7          	vmsleu.vi	v7,v7,9
    8002abea:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002abee:	b2c04657          	vncvt.x.x.w	v12,v12
    8002abf2:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002abf6:	7264b357          	vmsleu.vi	v6,v6,9
    8002abfa:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002abfe:	b2b045d7          	vncvt.x.x.w	v11,v11
    8002ac02:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac06:	7254b2d7          	vmsleu.vi	v5,v5,9
    8002ac0a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac0e:	b2a04557          	vncvt.x.x.w	v10,v10
    8002ac12:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac16:	7284b457          	vmsleu.vi	v8,v8,9
    8002ac1a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac1e:	b2404257          	vncvt.x.x.w	v4,v4
    8002ac22:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac26:	72f4b7d7          	vmsleu.vi	v15,v15,9
    8002ac2a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac2e:	b23041d7          	vncvt.x.x.w	v3,v3
    8002ac32:	0d807057          	vsetvli	zero,zero,e64,m1,ta,ma
    8002ac36:	7314b8d7          	vmsleu.vi	v17,v17,9
    8002ac3a:	0c507057          	vsetvli	zero,zero,e8,mf8,ta,ma
    8002ac3e:	9f303957          	vmv1r.v	v18,v19
    8002ac42:	9f303b57          	vmv1r.v	v22,v19
    8002ac46:	9f303bd7          	vmv1r.v	v23,v19
    8002ac4a:	9f303857          	vmv1r.v	v16,v19
    8002ac4e:	9f303c57          	vmv1r.v	v24,v19
    8002ac52:	9f303ad7          	vmv1r.v	v21,v19
    8002ac56:	9f303a57          	vmv1r.v	v20,v19
    8002ac5a:	5c2989d7          	vmerge.vvm	v19,v2,v19,v0
    8002ac5e:	9e103057          	vmv1r.v	v0,v1
    8002ac62:	b2e04757          	vncvt.x.x.w	v14,v14
    8002ac66:	2697b4d7          	vand.vi	v9,v9,15
    8002ac6a:	5c290957          	vmerge.vvm	v18,v2,v18,v0
    8002ac6e:	9e703057          	vmv1r.v	v0,v7
    8002ac72:	26d7b6d7          	vand.vi	v13,v13,15
    8002ac76:	26c7b657          	vand.vi	v12,v12,15
    8002ac7a:	5c2b0b57          	vmerge.vvm	v22,v2,v22,v0
    8002ac7e:	9e603057          	vmv1r.v	v0,v6
    8002ac82:	26b7b5d7          	vand.vi	v11,v11,15
    8002ac86:	26a7b557          	vand.vi	v10,v10,15
    8002ac8a:	5c2b8bd7          	vmerge.vvm	v23,v2,v23,v0
    8002ac8e:	9e503057          	vmv1r.v	v0,v5
    8002ac92:	2647b257          	vand.vi	v4,v4,15
    8002ac96:	26e7b2d7          	vand.vi	v5,v14,15
    8002ac9a:	5c280857          	vmerge.vvm	v16,v2,v16,v0
    8002ac9e:	9e803057          	vmv1r.v	v0,v8
    8002aca2:	2637b1d7          	vand.vi	v3,v3,15
    8002aca6:	5208a0d7          	vid.v	v1
    8002acaa:	5c2c0c57          	vmerge.vvm	v24,v2,v24,v0
    8002acae:	9ef03057          	vmv1r.v	v0,v15
    8002acb2:	0e10b0d7          	vrsub.vi	v1,v1,1
    8002acb6:	02998357          	vadd.vv	v6,v9,v19
    8002acba:	5c2a8ad7          	vmerge.vvm	v21,v2,v21,v0
    8002acbe:	9f103057          	vmv1r.v	v0,v17
    8002acc2:	02cb0657          	vadd.vv	v12,v12,v22
    8002acc6:	024c0257          	vadd.vv	v4,v4,v24
    8002acca:	5c2a0157          	vmerge.vvm	v2,v2,v20,v0
    8002acce:	023a81d7          	vadd.vv	v3,v3,v21
    8002acd2:	02d906d7          	vadd.vv	v13,v13,v18
    8002acd6:	025102d7          	vadd.vv	v5,v5,v2
    8002acda:	02bb85d7          	vadd.vv	v11,v11,v23
    8002acde:	02a80557          	vadd.vv	v10,v10,v16
    8002ace2:	32c08757          	vrgather.vv	v14,v12,v1
    8002ace6:	32408457          	vrgather.vv	v8,v4,v1
    8002acea:	323083d7          	vrgather.vv	v7,v3,v1
    8002acee:	32b08657          	vrgather.vv	v12,v11,v1
    8002acf2:	32a084d7          	vrgather.vv	v9,v10,v1
    8002acf6:	32508257          	vrgather.vv	v4,v5,v1
    8002acfa:	326081d7          	vrgather.vv	v3,v6,v1
    8002acfe:	32d08157          	vrgather.vv	v2,v13,v1
{
    8002ad02:	7175                	addi	sp,sp,-144
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002ad04:	00a10693          	addi	a3,sp,10
  while (*p)
    8002ad08:	3e60b7d7          	vslidedown.vi	v15,v6,1
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    8002ad0c:	01210893          	addi	a7,sp,18
    8002ad10:	01010813          	addi	a6,sp,16
    8002ad14:	00e10513          	addi	a0,sp,14
    8002ad18:	006c                	addi	a1,sp,12
    8002ad1a:	0030                	addi	a2,sp,8
    8002ad1c:	01610713          	addi	a4,sp,22
    8002ad20:	01410313          	addi	t1,sp,20
    8002ad24:	02068227          	vse8.v	v4,(a3)
    8002ad28:	02030727          	vse8.v	v14,(t1)
    8002ad2c:	02088627          	vse8.v	v12,(a7)
    8002ad30:	020804a7          	vse8.v	v9,(a6)
    8002ad34:	02050427          	vse8.v	v8,(a0)
    8002ad38:	020583a7          	vse8.v	v7,(a1)
    8002ad3c:	020601a7          	vse8.v	v3,(a2)
    8002ad40:	02070127          	vse8.v	v2,(a4)
  while (*p)
    8002ad44:	42f027d7          	vmv.x.s	a5,v15
{
    8002ad48:	05f10693          	addi	a3,sp,95
  str[16] = 0;
    8002ad4c:	00010c23          	sb	zero,24(sp)
  while (*p)
    8002ad50:	0ff7f793          	zext.b	a5,a5
{
    8002ad54:	fc06f693          	andi	a3,a3,-64
  while (*p)
    8002ad58:	cfb9                	beqz	a5,8002adb6 <printhex+0x2e4>
    8002ad5a:	4701                	li	a4,0
    8002ad5c:	00910793          	addi	a5,sp,9
    8002ad60:	0c0075d7          	vsetvli	a1,zero,e8,m1,ta,ma
    8002ad64:	97ba                	add	a5,a5,a4
    8002ad66:	03078087          	vle8ff.v	v1,(a5)
    8002ad6a:	621030d7          	vmseq.vi	v1,v1,0
    8002ad6e:	c2002773          	csrr	a4,vl
    8002ad72:	4218a557          	vfirst.m	a0,v1
    8002ad76:	fe0545e3          	bltz	a0,8002ad60 <printhex+0x28e>
    8002ad7a:	97aa                	add	a5,a5,a0
  return p - s;
    8002ad7c:	8f91                	sub	a5,a5,a2
  magic_mem[0] = which;
    8002ad7e:	04000713          	li	a4,64
    8002ad82:	e298                	sd	a4,0(a3)
  magic_mem[1] = arg0;
    8002ad84:	4705                	li	a4,1
    8002ad86:	e698                	sd	a4,8(a3)
  magic_mem[2] = arg1;
    8002ad88:	ea90                	sd	a2,16(a3)
  magic_mem[3] = arg2;
    8002ad8a:	ee9c                	sd	a5,24(a3)
  __sync_synchronize();
    8002ad8c:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8002ad90:	00010717          	auipc	a4,0x10
    8002ad94:	2b070713          	addi	a4,a4,688 # 8003b040 <fromhost>
    8002ad98:	00010797          	auipc	a5,0x10
    8002ad9c:	26d7b423          	sd	a3,616(a5) # 8003b000 <tohost>
  while (fromhost == 0)
    8002ada0:	631c                	ld	a5,0(a4)
    8002ada2:	dffd                	beqz	a5,8002ada0 <printhex+0x2ce>
  fromhost = 0;
    8002ada4:	00010797          	auipc	a5,0x10
    8002ada8:	2807be23          	sd	zero,668(a5) # 8003b040 <fromhost>
  __sync_synchronize();
    8002adac:	0330000f          	fence	rw,rw
  return magic_mem[0];
    8002adb0:	629c                	ld	a5,0(a3)
}
    8002adb2:	6149                	addi	sp,sp,144
    8002adb4:	8082                	ret
  while (*p)
    8002adb6:	4781                	li	a5,0
    8002adb8:	b7d9                	j	8002ad7e <printhex+0x2ac>

000000008002adba <printf>:
{
    8002adba:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002adbc:	02810313          	addi	t1,sp,40
{
    8002adc0:	f42e                	sd	a1,40(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002adc2:	859a                	mv	a1,t1
{
    8002adc4:	ec06                	sd	ra,24(sp)
    8002adc6:	f832                	sd	a2,48(sp)
    8002adc8:	fc36                	sd	a3,56(sp)
    8002adca:	e0ba                	sd	a4,64(sp)
    8002adcc:	e4be                	sd	a5,72(sp)
    8002adce:	e8c2                	sd	a6,80(sp)
    8002add0:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002add2:	e41a                	sd	t1,8(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    8002add4:	86cff0ef          	jal	80029e40 <vprintfmt.constprop.1>
}
    8002add8:	60e2                	ld	ra,24(sp)
    8002adda:	4501                	li	a0,0
    8002addc:	6125                	addi	sp,sp,96
    8002adde:	8082                	ret

000000008002ade0 <sprintf>:
{
    8002ade0:	711d                	addi	sp,sp,-96
  va_start(ap, fmt);
    8002ade2:	03010313          	addi	t1,sp,48
{
    8002ade6:	f022                	sd	s0,32(sp)
    8002ade8:	e42a                	sd	a0,8(sp)
    8002adea:	f832                	sd	a2,48(sp)
  char* str0 = str;
    8002adec:	842a                	mv	s0,a0

  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002adee:	861a                	mv	a2,t1
    8002adf0:	0028                	addi	a0,sp,8
{
    8002adf2:	f406                	sd	ra,40(sp)
    8002adf4:	fc36                	sd	a3,56(sp)
    8002adf6:	e0ba                	sd	a4,64(sp)
    8002adf8:	e4be                	sd	a5,72(sp)
    8002adfa:	e8c2                	sd	a6,80(sp)
    8002adfc:	ecc6                	sd	a7,88(sp)
  va_start(ap, fmt);
    8002adfe:	ec1a                	sd	t1,24(sp)
  vprintfmt(sprintf_putch, (void**)&str, fmt, ap);
    8002ae00:	d2bfe0ef          	jal	80029b2a <vprintfmt.constprop.0>
  *str = 0;
    8002ae04:	6522                	ld	a0,8(sp)
    8002ae06:	00050023          	sb	zero,0(a0)

  va_end(ap);
  return str - str0;
}
    8002ae0a:	70a2                	ld	ra,40(sp)
    8002ae0c:	9d01                	subw	a0,a0,s0
    8002ae0e:	7402                	ld	s0,32(sp)
    8002ae10:	6125                	addi	sp,sp,96
    8002ae12:	8082                	ret

000000008002ae14 <memcpy>:

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002ae14:	00c5e7b3          	or	a5,a1,a2
    8002ae18:	8fc9                	or	a5,a5,a0
    8002ae1a:	8b9d                	andi	a5,a5,7
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    8002ae1c:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002ae20:	cb85                	beqz	a5,8002ae50 <memcpy+0x3c>
    while (d < (char*)(dest + len))
    8002ae22:	08d57363          	bgeu	a0,a3,8002aea8 <memcpy+0x94>
    8002ae26:	00158793          	addi	a5,a1,1
    8002ae2a:	c2202773          	csrr	a4,vlenb
    8002ae2e:	40f506b3          	sub	a3,a0,a5
    8002ae32:	1779                	addi	a4,a4,-2
    8002ae34:	04d77e63          	bgeu	a4,a3,8002ae90 <memcpy+0x7c>
    8002ae38:	872a                	mv	a4,a0
    8002ae3a:	0c0677d7          	vsetvli	a5,a2,e8,m1,ta,ma
      *d++ = *s++;
    8002ae3e:	02058087          	vle8.v	v1,(a1)
    while (d < (char*)(dest + len))
    8002ae42:	8e1d                	sub	a2,a2,a5
    8002ae44:	95be                	add	a1,a1,a5
      *d++ = *s++;
    8002ae46:	020700a7          	vse8.v	v1,(a4)
    while (d < (char*)(dest + len))
    8002ae4a:	973e                	add	a4,a4,a5
    8002ae4c:	f67d                	bnez	a2,8002ae3a <memcpy+0x26>
    8002ae4e:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002ae50:	04d57b63          	bgeu	a0,a3,8002aea6 <memcpy+0x92>
    8002ae54:	167d                	addi	a2,a2,-1
    8002ae56:	04700793          	li	a5,71
    8002ae5a:	00858713          	addi	a4,a1,8
    8002ae5e:	04c7f663          	bgeu	a5,a2,8002aeaa <memcpy+0x96>
    8002ae62:	c22027f3          	csrr	a5,vlenb
    8002ae66:	40e50833          	sub	a6,a0,a4
    8002ae6a:	17c1                	addi	a5,a5,-16
    8002ae6c:	0307ff63          	bgeu	a5,a6,8002aeaa <memcpy+0x96>
    8002ae70:	820d                	srli	a2,a2,0x3
    8002ae72:	0605                	addi	a2,a2,1
    8002ae74:	872a                	mv	a4,a0
    8002ae76:	0c5677d7          	vsetvli	a5,a2,e8,mf8,ta,ma
      *d++ = *s++;
    8002ae7a:	0205f087          	vle64.v	v1,(a1)
    8002ae7e:	00379693          	slli	a3,a5,0x3
    while (d < (uintptr_t*)(dest + len))
    8002ae82:	8e1d                	sub	a2,a2,a5
    8002ae84:	95b6                	add	a1,a1,a3
      *d++ = *s++;
    8002ae86:	020770a7          	vse64.v	v1,(a4)
    while (d < (uintptr_t*)(dest + len))
    8002ae8a:	9736                	add	a4,a4,a3
    8002ae8c:	f66d                	bnez	a2,8002ae76 <memcpy+0x62>
    8002ae8e:	8082                	ret
    8002ae90:	95b2                	add	a1,a1,a2
    char *d = dest;
    8002ae92:	872a                	mv	a4,a0
    8002ae94:	a011                	j	8002ae98 <memcpy+0x84>
    8002ae96:	0785                	addi	a5,a5,1
      *d++ = *s++;
    8002ae98:	fff7c683          	lbu	a3,-1(a5)
    8002ae9c:	0705                	addi	a4,a4,1
    8002ae9e:	fed70fa3          	sb	a3,-1(a4)
    while (d < (char*)(dest + len))
    8002aea2:	fef59ae3          	bne	a1,a5,8002ae96 <memcpy+0x82>
  }
  return dest;
}
    8002aea6:	8082                	ret
    8002aea8:	8082                	ret
    while (d < (uintptr_t*)(dest + len))
    8002aeaa:	87aa                	mv	a5,a0
      *d++ = *s++;
    8002aeac:	ff873603          	ld	a2,-8(a4)
    8002aeb0:	07a1                	addi	a5,a5,8
    8002aeb2:	0721                	addi	a4,a4,8
    8002aeb4:	fec7bc23          	sd	a2,-8(a5)
    while (d < (uintptr_t*)(dest + len))
    8002aeb8:	fed7eae3          	bltu	a5,a3,8002aeac <memcpy+0x98>
}
    8002aebc:	8082                	ret

000000008002aebe <memset>:

void* memset(void* dest, int byte, size_t len)
{
    8002aebe:	1141                	addi	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002aec0:	00c566b3          	or	a3,a0,a2
{
    8002aec4:	e022                	sd	s0,0(sp)
    8002aec6:	e406                	sd	ra,8(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002aec8:	8a9d                	andi	a3,a3,7
{
    8002aeca:	842a                	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    8002aecc:	00c50833          	add	a6,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8002aed0:	ce81                	beqz	a3,8002aee8 <memset+0x2a>
    while (d < (char*)(dest + len))
    8002aed2:	01057663          	bgeu	a0,a6,8002aede <memset+0x20>
      *d++ = byte;
    8002aed6:	0ff5f593          	zext.b	a1,a1
    8002aeda:	fe5ff0ef          	jal	8002aebe <memset>
  }
  return dest;
}
    8002aede:	60a2                	ld	ra,8(sp)
    8002aee0:	8522                	mv	a0,s0
    8002aee2:	6402                	ld	s0,0(sp)
    8002aee4:	0141                	addi	sp,sp,16
    8002aee6:	8082                	ret
    word |= word << 16 << 16;
    8002aee8:	8732                	mv	a4,a2
    8002aeea:	01010637          	lui	a2,0x1010
    8002aeee:	10160613          	addi	a2,a2,257 # 1010101 <STACK_SIZE+0xf10101>
    8002aef2:	87aa                	mv	a5,a0
    8002aef4:	02061513          	slli	a0,a2,0x20
    uintptr_t word = byte & 0xFF;
    8002aef8:	0ff5f593          	zext.b	a1,a1
    8002aefc:	9532                	add	a0,a0,a2
    8002aefe:	02a585b3          	mul	a1,a1,a0
    while (d < (uintptr_t*)(dest + len))
    8002af02:	fd047ee3          	bgeu	s0,a6,8002aede <memset+0x20>
    8002af06:	177d                	addi	a4,a4,-1
    8002af08:	00375613          	srli	a2,a4,0x3
    8002af0c:	451d                	li	a0,7
    8002af0e:	0605                	addi	a2,a2,1
    8002af10:	02e57463          	bgeu	a0,a4,8002af38 <memset+0x7a>
    8002af14:	cd817057          	vsetivli	zero,2,e64,m1,ta,ma
    8002af18:	00165713          	srli	a4,a2,0x1
    8002af1c:	5e05c0d7          	vmv.v.x	v1,a1
    8002af20:	0712                	slli	a4,a4,0x4
    8002af22:	9722                	add	a4,a4,s0
      *d++ = word;
    8002af24:	0207f0a7          	vse64.v	v1,(a5)
    while (d < (uintptr_t*)(dest + len))
    8002af28:	07c1                	addi	a5,a5,16
    8002af2a:	fef71de3          	bne	a4,a5,8002af24 <memset+0x66>
    8002af2e:	00167793          	andi	a5,a2,1
    8002af32:	d7d5                	beqz	a5,8002aede <memset+0x20>
    8002af34:	ffe67693          	andi	a3,a2,-2
    8002af38:	8e15                	sub	a2,a2,a3
    8002af3a:	0d867057          	vsetvli	zero,a2,e64,m1,ta,ma
      *d++ = word;
    8002af3e:	5e05c0d7          	vmv.v.x	v1,a1
    8002af42:	068e                	slli	a3,a3,0x3
    8002af44:	96a2                	add	a3,a3,s0
    8002af46:	0206f0a7          	vse64.v	v1,(a3)
}
    8002af4a:	60a2                	ld	ra,8(sp)
    8002af4c:	8522                	mv	a0,s0
    8002af4e:	6402                	ld	s0,0(sp)
    8002af50:	0141                	addi	sp,sp,16
    8002af52:	8082                	ret

000000008002af54 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    8002af54:	00054783          	lbu	a5,0(a0)
    8002af58:	0505                	addi	a0,a0,1
    c2 = *s2++;
    8002af5a:	0585                	addi	a1,a1,1
    8002af5c:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    8002af60:	c799                	beqz	a5,8002af6e <strcmp+0x1a>
    8002af62:	fee789e3          	beq	a5,a4,8002af54 <strcmp>

  return c1 - c2;
    8002af66:	0007851b          	sext.w	a0,a5
}
    8002af6a:	9d19                	subw	a0,a0,a4
    8002af6c:	8082                	ret
    8002af6e:	4501                	li	a0,0
  return c1 - c2;
    8002af70:	bfed                	j	8002af6a <strcmp+0x16>

000000008002af72 <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    8002af72:	87aa                	mv	a5,a0
  while ((*d++ = *src++))
    8002af74:	0005c703          	lbu	a4,0(a1)
    8002af78:	0585                	addi	a1,a1,1
    8002af7a:	0785                	addi	a5,a5,1
    8002af7c:	fee78fa3          	sb	a4,-1(a5)
    8002af80:	fb75                	bnez	a4,8002af74 <strcpy+0x2>
    ;
  return dest;
}
    8002af82:	8082                	ret

000000008002af84 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    8002af84:	00054683          	lbu	a3,0(a0)
    8002af88:	02000713          	li	a4,32
{
    8002af8c:	87aa                	mv	a5,a0
  while (*str == ' ')
    8002af8e:	00e69863          	bne	a3,a4,8002af9e <atol+0x1a>
    8002af92:	8736                	mv	a4,a3
    8002af94:	0017c683          	lbu	a3,1(a5)
    str++;
    8002af98:	0785                	addi	a5,a5,1
  while (*str == ' ')
    8002af9a:	fee68de3          	beq	a3,a4,8002af94 <atol+0x10>

  if (*str == '-' || *str == '+') {
    8002af9e:	02d00713          	li	a4,45
    8002afa2:	02e68f63          	beq	a3,a4,8002afe0 <atol+0x5c>
    8002afa6:	02b00713          	li	a4,43
    8002afaa:	02e68563          	beq	a3,a4,8002afd4 <atol+0x50>
  int sign = 0;
    8002afae:	4581                	li	a1,0
    sign = *str == '-';
    str++;
  }

  while (*str) {
    8002afb0:	ce8d                	beqz	a3,8002afea <atol+0x66>
  int sign = 0;
    8002afb2:	4501                	li	a0,0
    res *= 10;
    res += *str++ - '0';
    8002afb4:	0785                	addi	a5,a5,1
    8002afb6:	fd06861b          	addiw	a2,a3,-48
    res *= 10;
    8002afba:	00251713          	slli	a4,a0,0x2
  while (*str) {
    8002afbe:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    8002afc2:	972a                	add	a4,a4,a0
    8002afc4:	0706                	slli	a4,a4,0x1
    res += *str++ - '0';
    8002afc6:	00e60533          	add	a0,a2,a4
  while (*str) {
    8002afca:	f6ed                	bnez	a3,8002afb4 <atol+0x30>
  }

  return sign ? -res : res;
    8002afcc:	c185                	beqz	a1,8002afec <atol+0x68>
    8002afce:	40a00533          	neg	a0,a0
    8002afd2:	8082                	ret
  while (*str) {
    8002afd4:	0017c683          	lbu	a3,1(a5)
    str++;
    8002afd8:	0785                	addi	a5,a5,1
  while (*str) {
    8002afda:	ca81                	beqz	a3,8002afea <atol+0x66>
    sign = *str == '-';
    8002afdc:	4581                	li	a1,0
    8002afde:	bfd1                	j	8002afb2 <atol+0x2e>
  while (*str) {
    8002afe0:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    8002afe4:	4585                	li	a1,1
    str++;
    8002afe6:	97ae                	add	a5,a5,a1
  while (*str) {
    8002afe8:	f6e9                	bnez	a3,8002afb2 <atol+0x2e>
  return sign ? -res : res;
    8002afea:	4501                	li	a0,0
}
    8002afec:	8082                	ret

000000008002afee <_init>:

void _init(){

    8002afee:	8082                	ret

000000008002aff0 <mhandler_entry>:
.endm

.balign 0x4
.global mhandler_entry
mhandler_entry:
    SAVE_CONTEXT
    8002aff0:	f0810113          	addi	sp,sp,-248
    8002aff4:	e006                	sd	ra,0(sp)
    8002aff6:	e80e                	sd	gp,16(sp)
    8002aff8:	ec12                	sd	tp,24(sp)
    8002affa:	f016                	sd	t0,32(sp)
    8002affc:	f41a                	sd	t1,40(sp)
    8002affe:	f81e                	sd	t2,48(sp)
    8002b000:	fc22                	sd	s0,56(sp)
    8002b002:	e0a6                	sd	s1,64(sp)
    8002b004:	e4aa                	sd	a0,72(sp)
    8002b006:	e8ae                	sd	a1,80(sp)
    8002b008:	ecb2                	sd	a2,88(sp)
    8002b00a:	f0b6                	sd	a3,96(sp)
    8002b00c:	f4ba                	sd	a4,104(sp)
    8002b00e:	f8be                	sd	a5,112(sp)
    8002b010:	fcc2                	sd	a6,120(sp)
    8002b012:	e146                	sd	a7,128(sp)
    8002b014:	e54a                	sd	s2,136(sp)
    8002b016:	e94e                	sd	s3,144(sp)
    8002b018:	ed52                	sd	s4,152(sp)
    8002b01a:	f156                	sd	s5,160(sp)
    8002b01c:	f55a                	sd	s6,168(sp)
    8002b01e:	f95e                	sd	s7,176(sp)
    8002b020:	fd62                	sd	s8,184(sp)
    8002b022:	e1e6                	sd	s9,192(sp)
    8002b024:	e5ea                	sd	s10,200(sp)
    8002b026:	e9ee                	sd	s11,208(sp)
    8002b028:	edf2                	sd	t3,216(sp)
    8002b02a:	f1f6                	sd	t4,224(sp)
    8002b02c:	f5fa                	sd	t5,232(sp)
    8002b02e:	f5fe                	sd	t6,232(sp)
    jal mhandler
    8002b030:	fc7d50ef          	jal	80000ff6 <mhandler>
    j _return
    8002b034:	a849                	j	8002b0c6 <_return>
    8002b036:	0001                	nop

000000008002b038 <hshandler_entry>:

.balign 0x4
.global hshandler_entry
hshandler_entry:
    SAVE_CONTEXT
    8002b038:	f0810113          	addi	sp,sp,-248
    8002b03c:	e006                	sd	ra,0(sp)
    8002b03e:	e80e                	sd	gp,16(sp)
    8002b040:	ec12                	sd	tp,24(sp)
    8002b042:	f016                	sd	t0,32(sp)
    8002b044:	f41a                	sd	t1,40(sp)
    8002b046:	f81e                	sd	t2,48(sp)
    8002b048:	fc22                	sd	s0,56(sp)
    8002b04a:	e0a6                	sd	s1,64(sp)
    8002b04c:	e4aa                	sd	a0,72(sp)
    8002b04e:	e8ae                	sd	a1,80(sp)
    8002b050:	ecb2                	sd	a2,88(sp)
    8002b052:	f0b6                	sd	a3,96(sp)
    8002b054:	f4ba                	sd	a4,104(sp)
    8002b056:	f8be                	sd	a5,112(sp)
    8002b058:	fcc2                	sd	a6,120(sp)
    8002b05a:	e146                	sd	a7,128(sp)
    8002b05c:	e54a                	sd	s2,136(sp)
    8002b05e:	e94e                	sd	s3,144(sp)
    8002b060:	ed52                	sd	s4,152(sp)
    8002b062:	f156                	sd	s5,160(sp)
    8002b064:	f55a                	sd	s6,168(sp)
    8002b066:	f95e                	sd	s7,176(sp)
    8002b068:	fd62                	sd	s8,184(sp)
    8002b06a:	e1e6                	sd	s9,192(sp)
    8002b06c:	e5ea                	sd	s10,200(sp)
    8002b06e:	e9ee                	sd	s11,208(sp)
    8002b070:	edf2                	sd	t3,216(sp)
    8002b072:	f1f6                	sd	t4,224(sp)
    8002b074:	f5fa                	sd	t5,232(sp)
    8002b076:	f5fe                	sd	t6,232(sp)
    jal hshandler
    8002b078:	9b0d60ef          	jal	80001228 <hshandler>
    j _return
    8002b07c:	a0a9                	j	8002b0c6 <_return>
    8002b07e:	0001                	nop

000000008002b080 <vshandler_entry>:

.balign 0x4
.global vshandler_entry
vshandler_entry:
    SAVE_CONTEXT
    8002b080:	f0810113          	addi	sp,sp,-248
    8002b084:	e006                	sd	ra,0(sp)
    8002b086:	e80e                	sd	gp,16(sp)
    8002b088:	ec12                	sd	tp,24(sp)
    8002b08a:	f016                	sd	t0,32(sp)
    8002b08c:	f41a                	sd	t1,40(sp)
    8002b08e:	f81e                	sd	t2,48(sp)
    8002b090:	fc22                	sd	s0,56(sp)
    8002b092:	e0a6                	sd	s1,64(sp)
    8002b094:	e4aa                	sd	a0,72(sp)
    8002b096:	e8ae                	sd	a1,80(sp)
    8002b098:	ecb2                	sd	a2,88(sp)
    8002b09a:	f0b6                	sd	a3,96(sp)
    8002b09c:	f4ba                	sd	a4,104(sp)
    8002b09e:	f8be                	sd	a5,112(sp)
    8002b0a0:	fcc2                	sd	a6,120(sp)
    8002b0a2:	e146                	sd	a7,128(sp)
    8002b0a4:	e54a                	sd	s2,136(sp)
    8002b0a6:	e94e                	sd	s3,144(sp)
    8002b0a8:	ed52                	sd	s4,152(sp)
    8002b0aa:	f156                	sd	s5,160(sp)
    8002b0ac:	f55a                	sd	s6,168(sp)
    8002b0ae:	f95e                	sd	s7,176(sp)
    8002b0b0:	fd62                	sd	s8,184(sp)
    8002b0b2:	e1e6                	sd	s9,192(sp)
    8002b0b4:	e5ea                	sd	s10,200(sp)
    8002b0b6:	e9ee                	sd	s11,208(sp)
    8002b0b8:	edf2                	sd	t3,216(sp)
    8002b0ba:	f1f6                	sd	t4,224(sp)
    8002b0bc:	f5fa                	sd	t5,232(sp)
    8002b0be:	f5fe                	sd	t6,232(sp)
    jal vshandler
    8002b0c0:	b9ad60ef          	jal	8000145a <vshandler>
    j _return
    8002b0c4:	a009                	j	8002b0c6 <_return>

000000008002b0c6 <_return>:
    
_return:
    li t0, 4 //make sure PRIV_M is 4
    8002b0c6:	4291                	li	t0,4
    beq a0, t0, _return_from_m 
    8002b0c8:	04550563          	beq	a0,t0,8002b112 <_return_from_m>

000000008002b0cc <_return_from_s>:
_return_from_s:
    RESTORE_CONTEXT
    8002b0cc:	6082                	ld	ra,0(sp)
    8002b0ce:	61c2                	ld	gp,16(sp)
    8002b0d0:	6262                	ld	tp,24(sp)
    8002b0d2:	7282                	ld	t0,32(sp)
    8002b0d4:	7322                	ld	t1,40(sp)
    8002b0d6:	73c2                	ld	t2,48(sp)
    8002b0d8:	7462                	ld	s0,56(sp)
    8002b0da:	6486                	ld	s1,64(sp)
    8002b0dc:	6526                	ld	a0,72(sp)
    8002b0de:	65c6                	ld	a1,80(sp)
    8002b0e0:	6666                	ld	a2,88(sp)
    8002b0e2:	7686                	ld	a3,96(sp)
    8002b0e4:	7726                	ld	a4,104(sp)
    8002b0e6:	77c6                	ld	a5,112(sp)
    8002b0e8:	7866                	ld	a6,120(sp)
    8002b0ea:	688a                	ld	a7,128(sp)
    8002b0ec:	692a                	ld	s2,136(sp)
    8002b0ee:	69ca                	ld	s3,144(sp)
    8002b0f0:	6a6a                	ld	s4,152(sp)
    8002b0f2:	7a8a                	ld	s5,160(sp)
    8002b0f4:	7b2a                	ld	s6,168(sp)
    8002b0f6:	7bca                	ld	s7,176(sp)
    8002b0f8:	7c6a                	ld	s8,184(sp)
    8002b0fa:	6c8e                	ld	s9,192(sp)
    8002b0fc:	6d2e                	ld	s10,200(sp)
    8002b0fe:	6dce                	ld	s11,208(sp)
    8002b100:	6e6e                	ld	t3,216(sp)
    8002b102:	7e8e                	ld	t4,224(sp)
    8002b104:	7f2e                	ld	t5,232(sp)
    8002b106:	7fce                	ld	t6,240(sp)
    8002b108:	0f810113          	addi	sp,sp,248
    sret
    8002b10c:	10200073          	sret
    j   .
    8002b110:	a001                	j	8002b110 <_return_from_s+0x44>

000000008002b112 <_return_from_m>:
_return_from_m:
    RESTORE_CONTEXT
    8002b112:	6082                	ld	ra,0(sp)
    8002b114:	61c2                	ld	gp,16(sp)
    8002b116:	6262                	ld	tp,24(sp)
    8002b118:	7282                	ld	t0,32(sp)
    8002b11a:	7322                	ld	t1,40(sp)
    8002b11c:	73c2                	ld	t2,48(sp)
    8002b11e:	7462                	ld	s0,56(sp)
    8002b120:	6486                	ld	s1,64(sp)
    8002b122:	6526                	ld	a0,72(sp)
    8002b124:	65c6                	ld	a1,80(sp)
    8002b126:	6666                	ld	a2,88(sp)
    8002b128:	7686                	ld	a3,96(sp)
    8002b12a:	7726                	ld	a4,104(sp)
    8002b12c:	77c6                	ld	a5,112(sp)
    8002b12e:	7866                	ld	a6,120(sp)
    8002b130:	688a                	ld	a7,128(sp)
    8002b132:	692a                	ld	s2,136(sp)
    8002b134:	69ca                	ld	s3,144(sp)
    8002b136:	6a6a                	ld	s4,152(sp)
    8002b138:	7a8a                	ld	s5,160(sp)
    8002b13a:	7b2a                	ld	s6,168(sp)
    8002b13c:	7bca                	ld	s7,176(sp)
    8002b13e:	7c6a                	ld	s8,184(sp)
    8002b140:	6c8e                	ld	s9,192(sp)
    8002b142:	6d2e                	ld	s10,200(sp)
    8002b144:	6dce                	ld	s11,208(sp)
    8002b146:	6e6e                	ld	t3,216(sp)
    8002b148:	7e8e                	ld	t4,224(sp)
    8002b14a:	7f2e                	ld	t5,232(sp)
    8002b14c:	7fce                	ld	t6,240(sp)
    8002b14e:	0f810113          	addi	sp,sp,248
    mret
    8002b152:	30200073          	mret

Disassembly of section .text.startup:

000000008002b156 <main>:


void main(){
    8002b156:	1101                	addi	sp,sp,-32

    INFO("risc-v hypervisor extension tests");
    8002b158:	00002517          	auipc	a0,0x2
    8002b15c:	29050513          	addi	a0,a0,656 # 8002d3e8 <__func__.0+0x3c8>
void main(){
    8002b160:	ec06                	sd	ra,24(sp)
    8002b162:	e822                	sd	s0,16(sp)
    8002b164:	e426                	sd	s1,8(sp)
    8002b166:	e04a                	sd	s2,0(sp)
    INFO("risc-v hypervisor extension tests");
    8002b168:	c53ff0ef          	jal	8002adba <printf>
    8002b16c:	4529                	li	a0,10
    8002b16e:	93bfe0ef          	jal	80029aa8 <putchar>
    // printf("%f\n",CSRR(CSR_SSCRATCH));
    if(check_misa_h()){
    8002b172:	b9ad50ef          	jal	8000050c <check_misa_h>
    8002b176:	c539                	beqz	a0,8002b1c4 <main+0x6e>
        reset_state();
    8002b178:	e12d60ef          	jal	8000178a <reset_state>
        for(int i = 0; i < test_table_size; i++){
    8002b17c:	0000f497          	auipc	s1,0xf
    8002b180:	75c48493          	addi	s1,s1,1884 # 8003a8d8 <test_table_size>
    8002b184:	609c                	ld	a5,0(s1)
    8002b186:	4401                	li	s0,0
    8002b188:	0000f917          	auipc	s2,0xf
    8002b18c:	75890913          	addi	s2,s2,1880 # 8003a8e0 <test_table>
    8002b190:	cf91                	beqz	a5,8002b1ac <main+0x56>
            reset_state();
    8002b192:	df8d60ef          	jal	8000178a <reset_state>
            test_table[i]();
    8002b196:	00093783          	ld	a5,0(s2)
    8002b19a:	00341713          	slli	a4,s0,0x3
        for(int i = 0; i < test_table_size; i++){
    8002b19e:	0405                	addi	s0,s0,1
            test_table[i]();
    8002b1a0:	97ba                	add	a5,a5,a4
    8002b1a2:	639c                	ld	a5,0(a5)
    8002b1a4:	9782                	jalr	a5
        for(int i = 0; i < test_table_size; i++){
    8002b1a6:	609c                	ld	a5,0(s1)
    8002b1a8:	fef465e3          	bltu	s0,a5,8002b192 <main+0x3c>
            
    }else{
        printf("hypervisor extension is not supported!\n");
    }

    INFO("end");
    8002b1ac:	00002517          	auipc	a0,0x2
    8002b1b0:	28c50513          	addi	a0,a0,652 # 8002d438 <__func__.0+0x418>
    8002b1b4:	c07ff0ef          	jal	8002adba <printf>
    8002b1b8:	4529                	li	a0,10
    8002b1ba:	8effe0ef          	jal	80029aa8 <putchar>
    exit(0);
    8002b1be:	4501                	li	a0,0
    8002b1c0:	fb0ff0ef          	jal	8002a970 <exit>
        printf("hypervisor extension is not supported!\n");
    8002b1c4:	00002517          	auipc	a0,0x2
    8002b1c8:	24c50513          	addi	a0,a0,588 # 8002d410 <__func__.0+0x3f0>
    8002b1cc:	82bff0ef          	jal	8002a9f6 <puts>
    8002b1d0:	bff1                	j	8002b1ac <main+0x56>
{
    8002b1d2:	1141                	addi	sp,sp,-16
  printstr("Implement main(), foo!\n");
    8002b1d4:	0000d517          	auipc	a0,0xd
    8002b1d8:	6b450513          	addi	a0,a0,1716 # 80038888 <__func__.0+0xb868>
{
    8002b1dc:	e406                	sd	ra,8(sp)
  printstr("Implement main(), foo!\n");
    8002b1de:	fa8ff0ef          	jal	8002a986 <printstr>
}
    8002b1e2:	60a2                	ld	ra,8(sp)
    8002b1e4:	557d                	li	a0,-1
    8002b1e6:	0141                	addi	sp,sp,16
    8002b1e8:	8082                	ret
